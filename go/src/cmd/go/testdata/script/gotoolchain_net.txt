# This test only checks that basic network lookups work.
# The full test of toolchain version selection is in gotoolchain.txt.

[short] skip

env TESTGO_VERSION=go1.21actual

# GOTOOLCHAIN from network, does not exist
env GOTOOLCHAIN=go1.9999x
! go version
stderr 'go: download go1.9999x for .*: toolchain not available'

# GOTOOLCHAIN from network
[!exec:/bin/sh] stop 'the fake proxy serves shell scripts instead of binaries'
env GOTOOLCHAIN=go1.999testmod
go version
stderr 'go: downloading go1.999testmod \(.*/.*\)'

# Test a real GOTOOLCHAIN
[!net:golang.org] skip
[!GOOS:darwin] [!GOOS:windows] [!GOOS:linux] skip
[!GOARCH:amd64] [!GOARCH:arm64] skip

env GOPROXY=
env GOSUMDB=
env GOTOOLCHAIN=go1.20.1

	# Avoid resolving a "go1.20.1" from the user's real $PATH.
	# That would not only cause the "downloading go1.20.1" message
	# to be suppressed, but may spuriously fail:
	# golang.org/dl/go1.20.1 expects to find its GOROOT in $HOME/sdk,
	# but the script environment sets HOME=/no-home.
env PATH=
env path=

go version
stderr '^go: downloading go1.20.1 '
stdout go1.20.1
