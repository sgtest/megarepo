// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test that random number sequences generated by a specific seed
// do not change from version to version.
//
// Do NOT make changes to the golden outputs. If bugs need to be fixed
// in the underlying code, find ways to fix them that do not affect the
// outputs.

package rand_test

import (
	"bytes"
	"flag"
	"fmt"
	"go/format"
	"io"
	. "math/rand/v2"
	"os"
	"reflect"
	"strings"
	"testing"
)

var update = flag.Bool("update", false, "update golden results for regression test")

func TestRegress(t *testing.T) {
	var int32s = []int32{1, 10, 32, 1 << 20, 1<<20 + 1, 1000000000, 1 << 30, 1<<31 - 2, 1<<31 - 1}
	var uint32s = []uint32{1, 10, 32, 1 << 20, 1<<20 + 1, 1000000000, 1 << 30, 1<<31 - 2, 1<<31 - 1, 1<<32 - 2, 1<<32 - 1}
	var int64s = []int64{1, 10, 32, 1 << 20, 1<<20 + 1, 1000000000, 1 << 30, 1<<31 - 2, 1<<31 - 1, 1000000000000000000, 1 << 60, 1<<63 - 2, 1<<63 - 1}
	var uint64s = []uint64{1, 10, 32, 1 << 20, 1<<20 + 1, 1000000000, 1 << 30, 1<<31 - 2, 1<<31 - 1, 1000000000000000000, 1 << 60, 1<<63 - 2, 1<<63 - 1, 1<<64 - 2, 1<<64 - 1}
	var permSizes = []int{0, 1, 5, 8, 9, 10, 16}

	n := reflect.TypeOf(New(NewSource(1))).NumMethod()
	p := 0
	var buf bytes.Buffer
	if *update {
		fmt.Fprintf(&buf, "var regressGolden = []any{\n")
	}
	for i := 0; i < n; i++ {
		if *update && i > 0 {
			fmt.Fprintf(&buf, "\n")
		}
		r := New(NewSource(1))
		rv := reflect.ValueOf(r)
		m := rv.Type().Method(i)
		mv := rv.Method(i)
		mt := mv.Type()
		if mt.NumOut() == 0 {
			continue
		}
		for repeat := 0; repeat < 20; repeat++ {
			var args []reflect.Value
			var argstr string
			if mt.NumIn() == 1 {
				var x any
				switch mt.In(0).Kind() {
				default:
					t.Fatalf("unexpected argument type for r.%s", m.Name)

				case reflect.Int:
					if m.Name == "Perm" {
						x = permSizes[repeat%len(permSizes)]
						break
					}
					big := int64s[repeat%len(int64s)]
					if int64(int(big)) != big {
						// On 32-bit machine.
						// Consume an Int64 like on a 64-bit machine,
						// to keep the golden data the same on different architectures.
						r.Int64N(big)
						if *update {
							t.Fatalf("must run -update on 64-bit machine")
						}
						p++
						continue
					}
					x = int(big)

				case reflect.Uint:
					big := uint64s[repeat%len(uint64s)]
					if uint64(uint(big)) != big {
						r.Uint64N(big) // what would happen on 64-bit machine, to keep stream in sync
						if *update {
							t.Fatalf("must run -update on 64-bit machine")
						}
						p++
						continue
					}
					x = uint(big)

				case reflect.Int32:
					x = int32s[repeat%len(int32s)]

				case reflect.Int64:
					x = int64s[repeat%len(int64s)]

				case reflect.Uint32:
					x = uint32s[repeat%len(uint32s)]

				case reflect.Uint64:
					x = uint64s[repeat%len(uint64s)]
				}
				argstr = fmt.Sprint(x)
				args = append(args, reflect.ValueOf(x))
			}

			var out any
			out = mv.Call(args)[0].Interface()
			if m.Name == "Int" || m.Name == "IntN" {
				out = int64(out.(int))
			}
			if m.Name == "Uint" || m.Name == "UintN" {
				out = uint64(out.(uint))
			}
			if *update {
				var val string
				big := int64(1 << 60)
				if int64(int(big)) != big && (m.Name == "Int" || m.Name == "IntN") {
					// 32-bit machine cannot print 64-bit results
					val = "truncated"
				} else if reflect.TypeOf(out).Kind() == reflect.Slice {
					val = fmt.Sprintf("%#v", out)
				} else {
					val = fmt.Sprintf("%T(%v)", out, out)
				}
				fmt.Fprintf(&buf, "\t%s, // %s(%s)\n", val, m.Name, argstr)
			} else if p >= len(regressGolden) {
				t.Errorf("r.%s(%s) = %v, missing golden value", m.Name, argstr, out)
			} else {
				want := regressGolden[p]
				if m.Name == "Int" {
					want = int64(int(uint(want.(int64)) << 1 >> 1))
				}
				if !reflect.DeepEqual(out, want) {
					t.Errorf("r.%s(%s) = %v, want %v", m.Name, argstr, out, want)
				}
			}
			p++
		}
	}
	if *update {
		replace(t, "regress_test.go", buf.Bytes())
	}
}

func TestUpdateExample(t *testing.T) {
	if !*update {
		t.Skip("-update not given")
	}

	oldStdout := os.Stdout
	defer func() {
		os.Stdout = oldStdout
	}()

	r, w, err := os.Pipe()
	if err != nil {
		t.Fatal(err)
	}
	defer r.Close()
	defer w.Close()

	go func() {
		os.Stdout = w
		Example_rand()
		os.Stdout = oldStdout
		w.Close()
	}()
	out, err := io.ReadAll(r)
	if err != nil {
		t.Fatal(err)
	}

	var buf bytes.Buffer
	fmt.Fprintf(&buf, "\t// Output:\n")
	for _, line := range strings.Split(string(out), "\n") {
		if line != "" {
			fmt.Fprintf(&buf, "\t// %s\n", line)
		}
	}

	replace(t, "example_test.go", buf.Bytes())

	// Exit so that Example_rand cannot fail.
	fmt.Printf("UPDATED; ignore non-zero exit status\n")
	os.Exit(1)
}

// replace substitutes the definition text from new into the content of file.
// The text in new is of the form
//
//	var whatever = T{
//		...
//	}
//
// Replace searches file for an exact match for the text of the first line,
// finds the closing brace, and then substitutes new for what used to be in the file.
// This lets us update the regressGolden table during go test -update.
func replace(t *testing.T, file string, new []byte) {
	first, _, _ := bytes.Cut(new, []byte("\n"))
	first = append(append([]byte("\n"), first...), '\n')
	data, err := os.ReadFile(file)
	if err != nil {
		t.Fatal(err)
	}
	i := bytes.Index(data, first)
	if i < 0 {
		t.Fatalf("cannot find %q in %s", first, file)
	}
	j := bytes.Index(data[i+1:], []byte("\n}\n"))
	if j < 0 {
		t.Fatalf("cannot find end in %s", file)
	}
	data = append(append(data[:i+1:i+1], new...), data[i+1+j+1:]...)
	data, err = format.Source(data)
	if err != nil {
		t.Fatal(err)
	}
	if err := os.WriteFile(file, data, 0666); err != nil {
		t.Fatal(err)
	}
}

var regressGolden = []any{
	float64(0.018945741402288857), // ExpFloat64()
	float64(0.13829043737893842),  // ExpFloat64()
	float64(1.1409883497761604),   // ExpFloat64()
	float64(1.2449542292186253),   // ExpFloat64()
	float64(0.4849966704675476),   // ExpFloat64()
	float64(0.08948056191408837),  // ExpFloat64()
	float64(0.41380878045769276),  // ExpFloat64()
	float64(0.31325729628567145),  // ExpFloat64()
	float64(0.23118058048615886),  // ExpFloat64()
	float64(0.2090943007446),      // ExpFloat64()
	float64(2.6861652769471456),   // ExpFloat64()
	float64(1.3811947596783387),   // ExpFloat64()
	float64(1.5595976199841015),   // ExpFloat64()
	float64(2.3469708688771744),   // ExpFloat64()
	float64(0.5882760784580738),   // ExpFloat64()
	float64(0.33463787922271115),  // ExpFloat64()
	float64(0.8799304551478242),   // ExpFloat64()
	float64(1.616532211418378),    // ExpFloat64()
	float64(0.09548420514080316),  // ExpFloat64()
	float64(2.448910012295588),    // ExpFloat64()

	float32(0.39651686),  // Float32()
	float32(0.38516325),  // Float32()
	float32(0.06368679),  // Float32()
	float32(0.027415931), // Float32()
	float32(0.3535996),   // Float32()
	float32(0.9133533),   // Float32()
	float32(0.40153843),  // Float32()
	float32(0.034464598), // Float32()
	float32(0.4120984),   // Float32()
	float32(0.51671815),  // Float32()
	float32(0.9472164),   // Float32()
	float32(0.14591497),  // Float32()
	float32(0.42577565),  // Float32()
	float32(0.7241202),   // Float32()
	float32(0.7114463),   // Float32()
	float32(0.01790011),  // Float32()
	float32(0.22837132),  // Float32()
	float32(0.5170377),   // Float32()
	float32(0.9228385),   // Float32()
	float32(0.9747907),   // Float32()

	float64(0.17213489113047786), // Float64()
	float64(0.0813061580926816),  // Float64()
	float64(0.5094944957341486),  // Float64()
	float64(0.2193276794677107),  // Float64()
	float64(0.8287970009760902),  // Float64()
	float64(0.30682661592006877), // Float64()
	float64(0.21230767869565503), // Float64()
	float64(0.2757168463782187),  // Float64()
	float64(0.2967873684321951),  // Float64()
	float64(0.13374523933395033), // Float64()
	float64(0.5777315861149934),  // Float64()
	float64(0.16732005385910476), // Float64()
	float64(0.40620552435192425), // Float64()
	float64(0.7929618428784644),  // Float64()
	float64(0.691570514257735),   // Float64()
	float64(0.14320118008134408), // Float64()
	float64(0.8269708087758376),  // Float64()
	float64(0.13630191289931604), // Float64()
	float64(0.38270814230149663), // Float64()
	float64(0.7983258549906352),  // Float64()

	int64(5577006791947779410), // Int()
	int64(8674665223082153551), // Int()
	int64(6129484611666145821), // Int()
	int64(4037200794235010051), // Int()
	int64(3916589616287113937), // Int()
	int64(6334824724549167320), // Int()
	int64(605394647632969758),  // Int()
	int64(1443635317331776148), // Int()
	int64(894385949183117216),  // Int()
	int64(2775422040480279449), // Int()
	int64(4751997750760398084), // Int()
	int64(7504504064263669287), // Int()
	int64(1976235410884491574), // Int()
	int64(3510942875414458836), // Int()
	int64(2933568871211445515), // Int()
	int64(4324745483838182873), // Int()
	int64(2610529275472644968), // Int()
	int64(2703387474910584091), // Int()
	int64(6263450610539110790), // Int()
	int64(2015796113853353331), // Int()

	int32(649249040),  // Int32()
	int32(1009863943), // Int32()
	int32(1787307747), // Int32()
	int32(1543733853), // Int32()
	int32(455951040),  // Int32()
	int32(737470659),  // Int32()
	int32(1144219036), // Int32()
	int32(1241803094), // Int32()
	int32(104120228),  // Int32()
	int32(1396843474), // Int32()
	int32(553205347),  // Int32()
	int32(873639255),  // Int32()
	int32(1303805905), // Int32()
	int32(408727544),  // Int32()
	int32(1415254188), // Int32()
	int32(503466637),  // Int32()
	int32(1377647429), // Int32()
	int32(1388457546), // Int32()
	int32(729161618),  // Int32()
	int32(1308411377), // Int32()

	int32(0),          // Int32N(1)
	int32(4),          // Int32N(10)
	int32(29),         // Int32N(32)
	int32(883715),     // Int32N(1048576)
	int32(222632),     // Int32N(1048577)
	int32(343411536),  // Int32N(1000000000)
	int32(957743134),  // Int32N(1073741824)
	int32(1241803092), // Int32N(2147483646)
	int32(104120228),  // Int32N(2147483647)
	int32(0),          // Int32N(1)
	int32(2),          // Int32N(10)
	int32(7),          // Int32N(32)
	int32(96566),      // Int32N(1048576)
	int32(199574),     // Int32N(1048577)
	int32(659029087),  // Int32N(1000000000)
	int32(606492121),  // Int32N(1073741824)
	int32(1377647428), // Int32N(2147483646)
	int32(1388457546), // Int32N(2147483647)
	int32(0),          // Int32N(1)
	int32(6),          // Int32N(10)

	int64(5577006791947779410), // Int64()
	int64(8674665223082153551), // Int64()
	int64(6129484611666145821), // Int64()
	int64(4037200794235010051), // Int64()
	int64(3916589616287113937), // Int64()
	int64(6334824724549167320), // Int64()
	int64(605394647632969758),  // Int64()
	int64(1443635317331776148), // Int64()
	int64(894385949183117216),  // Int64()
	int64(2775422040480279449), // Int64()
	int64(4751997750760398084), // Int64()
	int64(7504504064263669287), // Int64()
	int64(1976235410884491574), // Int64()
	int64(3510942875414458836), // Int64()
	int64(2933568871211445515), // Int64()
	int64(4324745483838182873), // Int64()
	int64(2610529275472644968), // Int64()
	int64(2703387474910584091), // Int64()
	int64(6263450610539110790), // Int64()
	int64(2015796113853353331), // Int64()

	int64(0),                   // Int64N(1)
	int64(4),                   // Int64N(10)
	int64(29),                  // Int64N(32)
	int64(883715),              // Int64N(1048576)
	int64(222632),              // Int64N(1048577)
	int64(343411536),           // Int64N(1000000000)
	int64(957743134),           // Int64N(1073741824)
	int64(1241803092),          // Int64N(2147483646)
	int64(104120228),           // Int64N(2147483647)
	int64(650455930292643530),  // Int64N(1000000000000000000)
	int64(140311732333010180),  // Int64N(1152921504606846976)
	int64(3752252032131834642), // Int64N(9223372036854775806)
	int64(5599803723869633690), // Int64N(9223372036854775807)
	int64(0),                   // Int64N(1)
	int64(6),                   // Int64N(10)
	int64(25),                  // Int64N(32)
	int64(920424),              // Int64N(1048576)
	int64(677958),              // Int64N(1048577)
	int64(339542337),           // Int64N(1000000000)
	int64(701992307),           // Int64N(1073741824)

	int64(0),                   // IntN(1)
	int64(4),                   // IntN(10)
	int64(29),                  // IntN(32)
	int64(883715),              // IntN(1048576)
	int64(222632),              // IntN(1048577)
	int64(343411536),           // IntN(1000000000)
	int64(957743134),           // IntN(1073741824)
	int64(1241803092),          // IntN(2147483646)
	int64(104120228),           // IntN(2147483647)
	int64(650455930292643530),  // IntN(1000000000000000000)
	int64(140311732333010180),  // IntN(1152921504606846976)
	int64(3752252032131834642), // IntN(9223372036854775806)
	int64(5599803723869633690), // IntN(9223372036854775807)
	int64(0),                   // IntN(1)
	int64(6),                   // IntN(10)
	int64(25),                  // IntN(32)
	int64(920424),              // IntN(1048576)
	int64(677958),              // IntN(1048577)
	int64(339542337),           // IntN(1000000000)
	int64(701992307),           // IntN(1073741824)

	float64(0.06909351197715208),  // NormFloat64()
	float64(0.5938704963270934),   // NormFloat64()
	float64(1.306028863617345),    // NormFloat64()
	float64(1.4117443127537266),   // NormFloat64()
	float64(0.15696085092285333),  // NormFloat64()
	float64(1.360954184661658),    // NormFloat64()
	float64(0.34312984093649135),  // NormFloat64()
	float64(0.7340067314938814),   // NormFloat64()
	float64(0.22135434353553696),  // NormFloat64()
	float64(-0.15741313389982836), // NormFloat64()
	float64(-1.080896970111088),   // NormFloat64()
	float64(-0.6107370548788273),  // NormFloat64()
	float64(-2.3550050260853643),  // NormFloat64()
	float64(1.8363976597396832),   // NormFloat64()
	float64(-0.7167650947520989),  // NormFloat64()
	float64(0.6860847654927735),   // NormFloat64()
	float64(0.3403802538398155),   // NormFloat64()
	float64(-1.3884780626234523),  // NormFloat64()
	float64(0.14097321427512907),  // NormFloat64()
	float64(-1.032800550788109),   // NormFloat64()

	[]int{},                             // Perm(0)
	[]int{0},                            // Perm(1)
	[]int{0, 4, 2, 3, 1},                // Perm(5)
	[]int{4, 5, 7, 0, 6, 3, 2, 1},       // Perm(8)
	[]int{2, 5, 4, 0, 7, 8, 1, 6, 3},    // Perm(9)
	[]int{9, 8, 7, 1, 3, 2, 5, 4, 0, 6}, // Perm(10)
	[]int{1, 5, 8, 11, 14, 2, 7, 10, 15, 9, 13, 6, 0, 3, 12, 4}, // Perm(16)
	[]int{},                             // Perm(0)
	[]int{0},                            // Perm(1)
	[]int{4, 1, 2, 0, 3},                // Perm(5)
	[]int{7, 0, 3, 5, 4, 1, 2, 6},       // Perm(8)
	[]int{6, 7, 1, 2, 0, 5, 8, 3, 4},    // Perm(9)
	[]int{7, 2, 8, 6, 1, 5, 9, 0, 3, 4}, // Perm(10)
	[]int{11, 0, 5, 1, 12, 4, 13, 9, 7, 2, 15, 10, 8, 14, 6, 3}, // Perm(16)
	[]int{},                             // Perm(0)
	[]int{0},                            // Perm(1)
	[]int{2, 4, 0, 3, 1},                // Perm(5)
	[]int{4, 2, 5, 0, 6, 3, 1, 7},       // Perm(8)
	[]int{3, 2, 8, 6, 5, 7, 1, 4, 0},    // Perm(9)
	[]int{2, 0, 7, 5, 6, 1, 8, 3, 4, 9}, // Perm(10)

	uint32(1298498081), // Uint32()
	uint32(2019727887), // Uint32()
	uint32(3574615495), // Uint32()
	uint32(3087467707), // Uint32()
	uint32(911902081),  // Uint32()
	uint32(1474941318), // Uint32()
	uint32(2288438073), // Uint32()
	uint32(2483606188), // Uint32()
	uint32(208240456),  // Uint32()
	uint32(2793686948), // Uint32()
	uint32(1106410694), // Uint32()
	uint32(1747278511), // Uint32()
	uint32(2607611810), // Uint32()
	uint32(817455089),  // Uint32()
	uint32(2830508376), // Uint32()
	uint32(1006933274), // Uint32()
	uint32(2755294859), // Uint32()
	uint32(2776915093), // Uint32()
	uint32(1458323237), // Uint32()
	uint32(2616822754), // Uint32()

	uint32(0),          // Uint32N(1)
	uint32(4),          // Uint32N(10)
	uint32(29),         // Uint32N(32)
	uint32(883715),     // Uint32N(1048576)
	uint32(222632),     // Uint32N(1048577)
	uint32(343411536),  // Uint32N(1000000000)
	uint32(957743134),  // Uint32N(1073741824)
	uint32(1241803092), // Uint32N(2147483646)
	uint32(104120228),  // Uint32N(2147483647)
	uint32(2793686946), // Uint32N(4294967294)
	uint32(1106410694), // Uint32N(4294967295)
	uint32(0),          // Uint32N(1)
	uint32(6),          // Uint32N(10)
	uint32(20),         // Uint32N(32)
	uint32(240907),     // Uint32N(1048576)
	uint32(245833),     // Uint32N(1048577)
	uint32(641517075),  // Uint32N(1000000000)
	uint32(340335899),  // Uint32N(1073741824)
	uint32(729161617),  // Uint32N(2147483646)
	uint32(1308411376), // Uint32N(2147483647)

	uint64(5577006791947779410),  // Uint64()
	uint64(8674665223082153551),  // Uint64()
	uint64(15352856648520921629), // Uint64()
	uint64(13260572831089785859), // Uint64()
	uint64(3916589616287113937),  // Uint64()
	uint64(6334824724549167320),  // Uint64()
	uint64(9828766684487745566),  // Uint64()
	uint64(10667007354186551956), // Uint64()
	uint64(894385949183117216),   // Uint64()
	uint64(11998794077335055257), // Uint64()
	uint64(4751997750760398084),  // Uint64()
	uint64(7504504064263669287),  // Uint64()
	uint64(11199607447739267382), // Uint64()
	uint64(3510942875414458836),  // Uint64()
	uint64(12156940908066221323), // Uint64()
	uint64(4324745483838182873),  // Uint64()
	uint64(11833901312327420776), // Uint64()
	uint64(11926759511765359899), // Uint64()
	uint64(6263450610539110790),  // Uint64()
	uint64(11239168150708129139), // Uint64()

	uint64(0),                    // Uint64N(1)
	uint64(4),                    // Uint64N(10)
	uint64(29),                   // Uint64N(32)
	uint64(883715),               // Uint64N(1048576)
	uint64(222632),               // Uint64N(1048577)
	uint64(343411536),            // Uint64N(1000000000)
	uint64(957743134),            // Uint64N(1073741824)
	uint64(1241803092),           // Uint64N(2147483646)
	uint64(104120228),            // Uint64N(2147483647)
	uint64(650455930292643530),   // Uint64N(1000000000000000000)
	uint64(140311732333010180),   // Uint64N(1152921504606846976)
	uint64(3752252032131834642),  // Uint64N(9223372036854775806)
	uint64(5599803723869633690),  // Uint64N(9223372036854775807)
	uint64(3510942875414458835),  // Uint64N(18446744073709551614)
	uint64(12156940908066221322), // Uint64N(18446744073709551615)
	uint64(0),                    // Uint64N(1)
	uint64(6),                    // Uint64N(10)
	uint64(27),                   // Uint64N(32)
	uint64(205190),               // Uint64N(1048576)
	uint64(638873),               // Uint64N(1048577)

	uint64(0),                    // UintN(1)
	uint64(4),                    // UintN(10)
	uint64(29),                   // UintN(32)
	uint64(883715),               // UintN(1048576)
	uint64(222632),               // UintN(1048577)
	uint64(343411536),            // UintN(1000000000)
	uint64(957743134),            // UintN(1073741824)
	uint64(1241803092),           // UintN(2147483646)
	uint64(104120228),            // UintN(2147483647)
	uint64(650455930292643530),   // UintN(1000000000000000000)
	uint64(140311732333010180),   // UintN(1152921504606846976)
	uint64(3752252032131834642),  // UintN(9223372036854775806)
	uint64(5599803723869633690),  // UintN(9223372036854775807)
	uint64(3510942875414458835),  // UintN(18446744073709551614)
	uint64(12156940908066221322), // UintN(18446744073709551615)
	uint64(0),                    // UintN(1)
	uint64(6),                    // UintN(10)
	uint64(27),                   // UintN(32)
	uint64(205190),               // UintN(1048576)
	uint64(638873),               // UintN(1048577)
}
