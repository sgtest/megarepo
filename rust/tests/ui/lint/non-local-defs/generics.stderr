warning: non-local `impl` definition, they should be avoided as they go against expectation
  --> $DIR/generics.rs:9:5
   |
LL |     impl<T: Local> Global for Vec<T> { }
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: move this `impl` block outside the of the current function `main`
   = note: an `impl` definition is non-local if it is nested inside an item and may impact type checking outside of that item. This can be the case if neither the trait or the self type are at the same nesting level as the `impl`
   = note: one exception to the rule are anon-const (`const _: () = { ... }`) at top-level module and anon-const at the same nesting as the trait or type
   = note: this lint may become deny-by-default in the edition 2024 and higher, see the tracking issue <https://github.com/rust-lang/rust/issues/120363>
   = note: `#[warn(non_local_definitions)]` on by default

warning: non-local `impl` definition, they should be avoided as they go against expectation
  --> $DIR/generics.rs:20:5
   |
LL |     impl Uto7 for Test where Local: std::any::Any {}
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: move this `impl` block outside the of the current function `bad`
   = note: an `impl` definition is non-local if it is nested inside an item and may impact type checking outside of that item. This can be the case if neither the trait or the self type are at the same nesting level as the `impl`
   = note: one exception to the rule are anon-const (`const _: () = { ... }`) at top-level module and anon-const at the same nesting as the trait or type
   = note: this lint may become deny-by-default in the edition 2024 and higher, see the tracking issue <https://github.com/rust-lang/rust/issues/120363>

warning: non-local `impl` definition, they should be avoided as they go against expectation
  --> $DIR/generics.rs:23:5
   |
LL |     impl<T> Uto8 for T {}
   |     ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: move this `impl` block outside the of the current function `bad`
   = note: an `impl` definition is non-local if it is nested inside an item and may impact type checking outside of that item. This can be the case if neither the trait or the self type are at the same nesting level as the `impl`
   = note: one exception to the rule are anon-const (`const _: () = { ... }`) at top-level module and anon-const at the same nesting as the trait or type
   = note: this lint may become deny-by-default in the edition 2024 and higher, see the tracking issue <https://github.com/rust-lang/rust/issues/120363>

warning: non-local `impl` definition, they should be avoided as they go against expectation
  --> $DIR/generics.rs:32:5
   |
LL | /     impl Default for UwU<OwO> {
LL | |
LL | |         fn default() -> Self {
LL | |             UwU(OwO)
LL | |         }
LL | |     }
   | |_____^
   |
   = help: move this `impl` block outside the of the current function `fun`
   = note: an `impl` definition is non-local if it is nested inside an item and may impact type checking outside of that item. This can be the case if neither the trait or the self type are at the same nesting level as the `impl`
   = note: one exception to the rule are anon-const (`const _: () = { ... }`) at top-level module and anon-const at the same nesting as the trait or type
   = note: this lint may become deny-by-default in the edition 2024 and higher, see the tracking issue <https://github.com/rust-lang/rust/issues/120363>

warning: non-local `impl` definition, they should be avoided as they go against expectation
  --> $DIR/generics.rs:43:5
   |
LL | /     impl AsRef<Cat> for () {
LL | |
LL | |         fn as_ref(&self) -> &Cat { &Cat }
LL | |     }
   | |_____^
   |
   = help: move this `impl` block outside the of the current function `meow`
   = note: an `impl` definition is non-local if it is nested inside an item and may impact type checking outside of that item. This can be the case if neither the trait or the self type are at the same nesting level as the `impl`
   = note: one exception to the rule are anon-const (`const _: () = { ... }`) at top-level module and anon-const at the same nesting as the trait or type
   = note: this lint may become deny-by-default in the edition 2024 and higher, see the tracking issue <https://github.com/rust-lang/rust/issues/120363>

warning: non-local `impl` definition, they should be avoided as they go against expectation
  --> $DIR/generics.rs:54:5
   |
LL | /     impl PartialEq<B> for G {
LL | |
LL | |         fn eq(&self, _: &B) -> bool {
LL | |             true
LL | |         }
LL | |     }
   | |_____^
   |
   = help: move this `impl` block outside the of the current function `fun2`
   = note: an `impl` definition is non-local if it is nested inside an item and may impact type checking outside of that item. This can be the case if neither the trait or the self type are at the same nesting level as the `impl`
   = note: one exception to the rule are anon-const (`const _: () = { ... }`) at top-level module and anon-const at the same nesting as the trait or type
   = note: this lint may become deny-by-default in the edition 2024 and higher, see the tracking issue <https://github.com/rust-lang/rust/issues/120363>

warning: non-local `impl` definition, they should be avoided as they go against expectation
  --> $DIR/generics.rs:69:5
   |
LL | /     impl From<Wrap<Wrap<Lion>>> for () {
LL | |
LL | |         fn from(_: Wrap<Wrap<Lion>>) -> Self {
LL | |             todo!()
LL | |         }
LL | |     }
   | |_____^
   |
   = help: move this `impl` block outside the of the current function `rawr`
   = note: an `impl` definition is non-local if it is nested inside an item and may impact type checking outside of that item. This can be the case if neither the trait or the self type are at the same nesting level as the `impl`
   = note: one exception to the rule are anon-const (`const _: () = { ... }`) at top-level module and anon-const at the same nesting as the trait or type
   = note: this lint may become deny-by-default in the edition 2024 and higher, see the tracking issue <https://github.com/rust-lang/rust/issues/120363>

warning: non-local `impl` definition, they should be avoided as they go against expectation
  --> $DIR/generics.rs:76:5
   |
LL | /     impl From<()> for Wrap<Lion> {
LL | |
LL | |         fn from(_: ()) -> Self {
LL | |             todo!()
LL | |         }
LL | |     }
   | |_____^
   |
   = help: move this `impl` block outside the of the current function `rawr`
   = note: an `impl` definition is non-local if it is nested inside an item and may impact type checking outside of that item. This can be the case if neither the trait or the self type are at the same nesting level as the `impl`
   = note: one exception to the rule are anon-const (`const _: () = { ... }`) at top-level module and anon-const at the same nesting as the trait or type
   = note: this lint may become deny-by-default in the edition 2024 and higher, see the tracking issue <https://github.com/rust-lang/rust/issues/120363>

warning: 8 warnings emitted

