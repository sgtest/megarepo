warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:19:13
   |
LL |     let _ = a == b;
   |             ^^^^^^
   |
   = note: `#[warn(ambiguous_wide_pointer_comparisons)]` on by default
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |     let _ = std::ptr::addr_eq(a, b);
   |             ++++++++++++++++++ ~  +

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:21:13
   |
LL |     let _ = a != b;
   |             ^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |     let _ = !std::ptr::addr_eq(a, b);
   |             +++++++++++++++++++ ~  +

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:23:13
   |
LL |     let _ = a < b;
   |             ^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |     let _ = a.cast::<()>() < b.cast::<()>();
   |              +++++++++++++    +++++++++++++

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:25:13
   |
LL |     let _ = a <= b;
   |             ^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |     let _ = a.cast::<()>() <= b.cast::<()>();
   |              +++++++++++++     +++++++++++++

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:27:13
   |
LL |     let _ = a > b;
   |             ^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |     let _ = a.cast::<()>() > b.cast::<()>();
   |              +++++++++++++    +++++++++++++

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:29:13
   |
LL |     let _ = a >= b;
   |             ^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |     let _ = a.cast::<()>() >= b.cast::<()>();
   |              +++++++++++++     +++++++++++++

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:32:13
   |
LL |     let _ = PartialEq::eq(&a, &b);
   |             ^^^^^^^^^^^^^^^^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |     let _ = std::ptr::addr_eq(a, b);
   |             ~~~~~~~~~~~~~~~~~~ ~  ~

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:34:13
   |
LL |     let _ = PartialEq::ne(&a, &b);
   |             ^^^^^^^^^^^^^^^^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |     let _ = !std::ptr::addr_eq(a, b);
   |             ~~~~~~~~~~~~~~~~~~~ ~  ~

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:36:13
   |
LL |     let _ = a.eq(&b);
   |             ^^^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |     let _ = std::ptr::addr_eq(a, b);
   |             ++++++++++++++++++ ~  ~

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:38:13
   |
LL |     let _ = a.ne(&b);
   |             ^^^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |     let _ = !std::ptr::addr_eq(a, b);
   |             +++++++++++++++++++ ~  ~

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:40:13
   |
LL |     let _ = a.cmp(&b);
   |             ^^^^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |     let _ = a.cast::<()>().cmp(&b.cast::<()>());
   |              +++++++++++++       +++++++++++++

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:42:13
   |
LL |     let _ = a.partial_cmp(&b);
   |             ^^^^^^^^^^^^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |     let _ = a.cast::<()>().partial_cmp(&b.cast::<()>());
   |              +++++++++++++               +++++++++++++

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:44:13
   |
LL |     let _ = a.le(&b);
   |             ^^^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |     let _ = a.cast::<()>().le(&b.cast::<()>());
   |              +++++++++++++      +++++++++++++

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:46:13
   |
LL |     let _ = a.lt(&b);
   |             ^^^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |     let _ = a.cast::<()>().lt(&b.cast::<()>());
   |              +++++++++++++      +++++++++++++

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:48:13
   |
LL |     let _ = a.ge(&b);
   |             ^^^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |     let _ = a.cast::<()>().ge(&b.cast::<()>());
   |              +++++++++++++      +++++++++++++

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:50:13
   |
LL |     let _ = a.gt(&b);
   |             ^^^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |     let _ = a.cast::<()>().gt(&b.cast::<()>());
   |              +++++++++++++      +++++++++++++

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:58:17
   |
LL |         let _ = a == b;
   |                 ^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |         let _ = std::ptr::addr_eq(*a, *b);
   |                 +++++++++++++++++++ ~~~ +

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:60:17
   |
LL |         let _ = a != b;
   |                 ^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |         let _ = !std::ptr::addr_eq(*a, *b);
   |                 ++++++++++++++++++++ ~~~ +

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:62:17
   |
LL |         let _ = a < b;
   |                 ^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |         let _ = (*a).cast::<()>() < (*b).cast::<()>();
   |                 ++ ++++++++++++++   ++ ++++++++++++++

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:64:17
   |
LL |         let _ = a <= b;
   |                 ^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |         let _ = (*a).cast::<()>() <= (*b).cast::<()>();
   |                 ++ ++++++++++++++    ++ ++++++++++++++

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:66:17
   |
LL |         let _ = a > b;
   |                 ^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |         let _ = (*a).cast::<()>() > (*b).cast::<()>();
   |                 ++ ++++++++++++++   ++ ++++++++++++++

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:68:17
   |
LL |         let _ = a >= b;
   |                 ^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |         let _ = (*a).cast::<()>() >= (*b).cast::<()>();
   |                 ++ ++++++++++++++    ++ ++++++++++++++

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:71:17
   |
LL |         let _ = PartialEq::eq(a, b);
   |                 ^^^^^^^^^^^^^^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |         let _ = std::ptr::addr_eq(*a, *b);
   |                 ~~~~~~~~~~~~~~~~~~~ ~~~ ~

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:73:17
   |
LL |         let _ = PartialEq::ne(a, b);
   |                 ^^^^^^^^^^^^^^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |         let _ = !std::ptr::addr_eq(*a, *b);
   |                 ~~~~~~~~~~~~~~~~~~~~ ~~~ ~

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:75:17
   |
LL |         let _ = PartialEq::eq(&a, &b);
   |                 ^^^^^^^^^^^^^^^^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |         let _ = std::ptr::addr_eq(*a, *b);
   |                 ~~~~~~~~~~~~~~~~~~~ ~~~ ~

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:77:17
   |
LL |         let _ = PartialEq::ne(&a, &b);
   |                 ^^^^^^^^^^^^^^^^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |         let _ = !std::ptr::addr_eq(*a, *b);
   |                 ~~~~~~~~~~~~~~~~~~~~ ~~~ ~

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:79:17
   |
LL |         let _ = a.eq(b);
   |                 ^^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |         let _ = std::ptr::addr_eq(*a, *b);
   |                 +++++++++++++++++++ ~~~ ~

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:81:17
   |
LL |         let _ = a.ne(b);
   |                 ^^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |         let _ = !std::ptr::addr_eq(*a, *b);
   |                 ++++++++++++++++++++ ~~~ ~

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:83:17
   |
LL |         let _ = a.cmp(&b);
   |                 ^^^^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |         let _ = (*a).cast::<()>().cmp(&(*b).cast::<()>());
   |                 ++ ++++++++++++++      ++ ++++++++++++++

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:85:17
   |
LL |         let _ = a.partial_cmp(&b);
   |                 ^^^^^^^^^^^^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |         let _ = (*a).cast::<()>().partial_cmp(&(*b).cast::<()>());
   |                 ++ ++++++++++++++              ++ ++++++++++++++

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:87:17
   |
LL |         let _ = a.le(&b);
   |                 ^^^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |         let _ = (*a).cast::<()>().le(&(*b).cast::<()>());
   |                 ++ ++++++++++++++     ++ ++++++++++++++

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:89:17
   |
LL |         let _ = a.lt(&b);
   |                 ^^^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |         let _ = (*a).cast::<()>().lt(&(*b).cast::<()>());
   |                 ++ ++++++++++++++     ++ ++++++++++++++

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:91:17
   |
LL |         let _ = a.ge(&b);
   |                 ^^^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |         let _ = (*a).cast::<()>().ge(&(*b).cast::<()>());
   |                 ++ ++++++++++++++     ++ ++++++++++++++

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:93:17
   |
LL |         let _ = a.gt(&b);
   |                 ^^^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |         let _ = (*a).cast::<()>().gt(&(*b).cast::<()>());
   |                 ++ ++++++++++++++     ++ ++++++++++++++

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:98:13
   |
LL |     let _ = s == s;
   |             ^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |     let _ = std::ptr::addr_eq(s, s);
   |             ++++++++++++++++++ ~  +
help: use explicit `std::ptr::eq` method to compare metadata and addresses
   |
LL |     let _ = std::ptr::eq(s, s);
   |             +++++++++++++ ~  +

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:102:13
   |
LL |     let _ = s == s;
   |             ^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |     let _ = std::ptr::addr_eq(s, s);
   |             ++++++++++++++++++ ~  +
help: use explicit `std::ptr::eq` method to compare metadata and addresses
   |
LL |     let _ = std::ptr::eq(s, s);
   |             +++++++++++++ ~  +

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:106:17
   |
LL |         let _ = a == b;
   |                 ^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |         let _ = std::ptr::addr_eq(a, b);
   |                 ++++++++++++++++++ ~  +
help: use explicit `std::ptr::eq` method to compare metadata and addresses
   |
LL |         let _ = std::ptr::eq(a, b);
   |                 +++++++++++++ ~  +

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:108:17
   |
LL |         let _ = a != b;
   |                 ^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |         let _ = !std::ptr::addr_eq(a, b);
   |                 +++++++++++++++++++ ~  +
help: use explicit `std::ptr::eq` method to compare metadata and addresses
   |
LL |         let _ = !std::ptr::eq(a, b);
   |                 ++++++++++++++ ~  +

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:110:17
   |
LL |         let _ = a < b;
   |                 ^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |         let _ = a.cast::<()>() < b.cast::<()>();
   |                  +++++++++++++    +++++++++++++

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:112:17
   |
LL |         let _ = a <= b;
   |                 ^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |         let _ = a.cast::<()>() <= b.cast::<()>();
   |                  +++++++++++++     +++++++++++++

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:114:17
   |
LL |         let _ = a > b;
   |                 ^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |         let _ = a.cast::<()>() > b.cast::<()>();
   |                  +++++++++++++    +++++++++++++

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:116:17
   |
LL |         let _ = a >= b;
   |                 ^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |         let _ = a.cast::<()>() >= b.cast::<()>();
   |                  +++++++++++++     +++++++++++++

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:119:17
   |
LL |         let _ = PartialEq::eq(&a, &b);
   |                 ^^^^^^^^^^^^^^^^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |         let _ = std::ptr::addr_eq(a, b);
   |                 ~~~~~~~~~~~~~~~~~~ ~  ~
help: use explicit `std::ptr::eq` method to compare metadata and addresses
   |
LL |         let _ = std::ptr::eq(a, b);
   |                 ~~~~~~~~~~~~~ ~  ~

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:121:17
   |
LL |         let _ = PartialEq::ne(&a, &b);
   |                 ^^^^^^^^^^^^^^^^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |         let _ = !std::ptr::addr_eq(a, b);
   |                 ~~~~~~~~~~~~~~~~~~~ ~  ~
help: use explicit `std::ptr::eq` method to compare metadata and addresses
   |
LL |         let _ = !std::ptr::eq(a, b);
   |                 ~~~~~~~~~~~~~~ ~  ~

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:123:17
   |
LL |         let _ = a.eq(&b);
   |                 ^^^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |         let _ = std::ptr::addr_eq(a, b);
   |                 ++++++++++++++++++ ~  ~
help: use explicit `std::ptr::eq` method to compare metadata and addresses
   |
LL |         let _ = std::ptr::eq(a, b);
   |                 +++++++++++++ ~  ~

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:125:17
   |
LL |         let _ = a.ne(&b);
   |                 ^^^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |         let _ = !std::ptr::addr_eq(a, b);
   |                 +++++++++++++++++++ ~  ~
help: use explicit `std::ptr::eq` method to compare metadata and addresses
   |
LL |         let _ = !std::ptr::eq(a, b);
   |                 ++++++++++++++ ~  ~

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:130:9
   |
LL |         &*a == &*b
   |         ^^^^^^^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |         std::ptr::addr_eq(*a, *b)
   |         ~~~~~~~~~~~~~~~~~~  ~   +
help: use explicit `std::ptr::eq` method to compare metadata and addresses
   |
LL |         std::ptr::eq(*a, *b)
   |         ~~~~~~~~~~~~~  ~   +

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:141:14
   |
LL |         cmp!(a, b);
   |              ^^^^
   |
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |         cmp!(std::ptr::addr_eq(a, b));
   |              ++++++++++++++++++ ~  +

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:147:39
   |
LL |             ($a:ident, $b:ident) => { $a == $b }
   |                                       ^^^^^^^^
...
LL |         cmp!(a, b);
   |         ---------- in this macro invocation
   |
   = note: this warning originates in the macro `cmp` (in Nightly builds, run with -Z macro-backtrace for more info)
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   |
LL |             ($a:ident, $b:ident) => { std::ptr::addr_eq($a, $b) }
   |                                       ++++++++++++++++++  ~   +

warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
  --> $DIR/wide_pointer_comparisons.rs:157:37
   |
LL |             ($a:expr, $b:expr) => { $a == $b }
   |                                     ^^
...
LL |         cmp!(&a, &b);
   |         ------------ in this macro invocation
   |
   = help: use explicit `std::ptr::eq` method to compare metadata and addresses
   = help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
   = note: this warning originates in the macro `cmp` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: 50 warnings emitted

