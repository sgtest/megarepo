error: using `.clone()` on a double reference, which returns `&Vec<i32>` instead of cloning the inner type
  --> $DIR/suspicious-double-ref-op.rs:7:23
   |
LL |     let z: &Vec<_> = y.clone();
   |                       ^^^^^^^^
   |
note: the lint level is defined here
  --> $DIR/suspicious-double-ref-op.rs:2:9
   |
LL | #![deny(suspicious_double_ref_op, noop_method_call)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^

error: call to `.clone()` on a reference in this situation does nothing
  --> $DIR/suspicious-double-ref-op.rs:24:25
   |
LL |     let _ = &mut encoded.clone();
   |                         ^^^^^^^^ unnecessary method call
   |
   = note: the type `&[u8]` which `clone` is being called on is the same as the type returned from `clone`, so the method call does not do anything and can be removed
note: the lint level is defined here
  --> $DIR/suspicious-double-ref-op.rs:2:35
   |
LL | #![deny(suspicious_double_ref_op, noop_method_call)]
   |                                   ^^^^^^^^^^^^^^^^

error: call to `.clone()` on a reference in this situation does nothing
  --> $DIR/suspicious-double-ref-op.rs:26:21
   |
LL |     let _ = &encoded.clone();
   |                     ^^^^^^^^ unnecessary method call
   |
   = note: the type `&[u8]` which `clone` is being called on is the same as the type returned from `clone`, so the method call does not do anything and can be removed

error: aborting due to 3 previous errors

