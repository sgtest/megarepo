warning: trait objects without an explicit `dyn` are deprecated
  --> $DIR/avoid-ice-on-warning-2.rs:4:13
   |
LL | fn id<F>(f: Copy) -> usize {
   |             ^^^^
   |
   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
   = note: `#[warn(bare_trait_objects)]` on by default
help: use `dyn`
   |
LL | fn id<F>(f: dyn Copy) -> usize {
   |             +++

warning: trait objects without an explicit `dyn` are deprecated
  --> $DIR/avoid-ice-on-warning-2.rs:4:13
   |
LL | fn id<F>(f: Copy) -> usize {
   |             ^^^^
   |
   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
help: use `dyn`
   |
LL | fn id<F>(f: dyn Copy) -> usize {
   |             +++

error[E0038]: the trait `Copy` cannot be made into an object
  --> $DIR/avoid-ice-on-warning-2.rs:4:13
   |
LL | fn id<F>(f: Copy) -> usize {
   |             ^^^^ `Copy` cannot be made into an object
   |
   = note: the trait cannot be made into an object because it requires `Self: Sized`
   = note: for a trait to be "object safe" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>

error: aborting due to 1 previous error; 2 warnings emitted

For more information about this error, try `rustc --explain E0038`.
