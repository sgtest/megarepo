warning: the feature `effects` is incomplete and may not be safe to use and/or cause compiler crashes
  --> $DIR/spec-effectvar-ice.rs:4:12
   |
LL | #![feature(effects)]
   |            ^^^^^^^
   |
   = note: see issue #102090 <https://github.com/rust-lang/rust/issues/102090> for more information
   = note: `#[warn(incomplete_features)]` on by default

error: const `impl` for trait `Foo` which is not marked with `#[const_trait]`
  --> $DIR/spec-effectvar-ice.rs:12:15
   |
LL | trait Foo {}
   | - help: mark `Foo` as const: `#[const_trait]`
LL |
LL | impl<T> const Foo for T {}
   |               ^^^
   |
   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`
   = note: adding a non-const method body in the future would be a breaking change

error: const `impl` for trait `Foo` which is not marked with `#[const_trait]`
  --> $DIR/spec-effectvar-ice.rs:16:15
   |
LL | trait Foo {}
   | - help: mark `Foo` as const: `#[const_trait]`
...
LL | impl<T> const Foo for T where T: const Specialize {}
   |               ^^^
   |
   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`
   = note: adding a non-const method body in the future would be a breaking change

error: `const` can only be applied to `#[const_trait]` traits
  --> $DIR/spec-effectvar-ice.rs:16:40
   |
LL | impl<T> const Foo for T where T: const Specialize {}
   |                                        ^^^^^^^^^^

error[E0207]: the const parameter `host` is not constrained by the impl trait, self type, or predicates
  --> $DIR/spec-effectvar-ice.rs:12:9
   |
LL | impl<T> const Foo for T {}
   |         ^^^^^ unconstrained const parameter
   |
   = note: expressions using a const parameter must map each value to a distinct output value
   = note: proving the result of expressions other than the parameter are unique is not supported

error[E0119]: conflicting implementations of trait `Foo`
  --> $DIR/spec-effectvar-ice.rs:16:1
   |
LL | impl<T> const Foo for T {}
   | ----------------------- first implementation here
...
LL | impl<T> const Foo for T where T: const Specialize {}
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation

error[E0207]: the const parameter `host` is not constrained by the impl trait, self type, or predicates
  --> $DIR/spec-effectvar-ice.rs:16:9
   |
LL | impl<T> const Foo for T where T: const Specialize {}
   |         ^^^^^ unconstrained const parameter
   |
   = note: expressions using a const parameter must map each value to a distinct output value
   = note: proving the result of expressions other than the parameter are unique is not supported

error: aborting due to 6 previous errors; 1 warning emitted

Some errors have detailed explanations: E0119, E0207.
For more information about an error, try `rustc --explain E0119`.
