error[E0277]: can't compare `TypeId` with `TypeId` in const contexts
  --> $DIR/const_cmp_type_id.rs:8:13
   |
LL |     assert!(TypeId::of::<u8>() == TypeId::of::<u8>());
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `TypeId == TypeId`
   |
   = help: the trait `~const PartialEq` is not implemented for `TypeId`
note: the trait `PartialEq` is implemented for `TypeId`, but that implementation is not `const`
  --> $DIR/const_cmp_type_id.rs:8:13
   |
LL |     assert!(TypeId::of::<u8>() == TypeId::of::<u8>());
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0015]: cannot call non-const operator in constant functions
  --> $DIR/const_cmp_type_id.rs:8:13
   |
LL |     assert!(TypeId::of::<u8>() == TypeId::of::<u8>());
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
note: impl defined here, but it is not `const`
  --> $SRC_DIR/core/src/any.rs:LL:COL
   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants
   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: can't compare `TypeId` with `TypeId` in const contexts
  --> $DIR/const_cmp_type_id.rs:9:13
   |
LL |     assert!(TypeId::of::<()>() != TypeId::of::<u8>());
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `TypeId == TypeId`
   |
   = help: the trait `~const PartialEq` is not implemented for `TypeId`
note: the trait `PartialEq` is implemented for `TypeId`, but that implementation is not `const`
  --> $DIR/const_cmp_type_id.rs:9:13
   |
LL |     assert!(TypeId::of::<()>() != TypeId::of::<u8>());
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0015]: cannot call non-const operator in constant functions
  --> $DIR/const_cmp_type_id.rs:9:13
   |
LL |     assert!(TypeId::of::<()>() != TypeId::of::<u8>());
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
note: impl defined here, but it is not `const`
  --> $SRC_DIR/core/src/any.rs:LL:COL
   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants
   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: can't compare `TypeId` with `TypeId` in const contexts
  --> $DIR/const_cmp_type_id.rs:10:22
   |
LL |     const _A: bool = TypeId::of::<u8>() < TypeId::of::<u16>();
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `TypeId < TypeId` and `TypeId > TypeId`
   |
   = help: the trait `~const PartialOrd` is not implemented for `TypeId`
note: the trait `PartialOrd` is implemented for `TypeId`, but that implementation is not `const`
  --> $DIR/const_cmp_type_id.rs:10:22
   |
LL |     const _A: bool = TypeId::of::<u8>() < TypeId::of::<u16>();
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0015]: cannot call non-const operator in constants
  --> $DIR/const_cmp_type_id.rs:10:22
   |
LL |     const _A: bool = TypeId::of::<u8>() < TypeId::of::<u16>();
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
note: impl defined here, but it is not `const`
  --> $SRC_DIR/core/src/any.rs:LL:COL
   = note: calls in constants are limited to constant functions, tuple structs and tuple variants
   = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)

error: aborting due to 6 previous errors

Some errors have detailed explanations: E0015, E0277.
For more information about an error, try `rustc --explain E0015`.
