   LL|       |#![feature(coverage_attribute)]
   LL|       |#![feature(noop_waker)]
   LL|       |//@ edition: 2018
   LL|       |
   LL|      1|fn non_async_func() {
   LL|      1|    println!("non_async_func was covered");
   LL|      1|    let b = true;
   LL|      1|    if b {
   LL|      1|        println!("non_async_func println in block");
   LL|      1|    }
                   ^0
   LL|      1|}
   LL|       |
   LL|      1|async fn async_func() {
   LL|      1|    println!("async_func was covered");
   LL|      1|    let b = true;
   LL|      1|    if b {
   LL|      1|        println!("async_func println in block");
   LL|      1|    }
                   ^0
   LL|      1|}
   LL|       |
   LL|      1|async fn async_func_just_println() {
   LL|      1|    println!("async_func_just_println was covered");
   LL|      1|}
   LL|       |
   LL|      1|fn main() {
   LL|      1|    println!("codecovsample::main");
   LL|      1|
   LL|      1|    non_async_func();
   LL|      1|
   LL|      1|    executor::block_on(async_func());
   LL|      1|    executor::block_on(async_func_just_println());
   LL|      1|}
   LL|       |
   LL|       |mod executor {
   LL|       |    use core::future::Future;
   LL|       |    use core::pin::pin;
   LL|       |    use core::task::{Context, Poll, Waker};
   LL|       |
   LL|       |    #[coverage(off)]
   LL|       |    pub fn block_on<F: Future>(mut future: F) -> F::Output {
   LL|       |        let mut future = pin!(future);
   LL|       |        let mut context = Context::from_waker(Waker::noop());
   LL|       |
   LL|       |        loop {
   LL|       |            if let Poll::Ready(val) = future.as_mut().poll(&mut context) {
   LL|       |                break val;
   LL|       |            }
   LL|       |        }
   LL|       |    }
   LL|       |}

