- // MIR for `too_complex` before SeparateConstSwitch
+ // MIR for `too_complex` after SeparateConstSwitch
  
  fn too_complex(_1: Result<i32, usize>) -> Option<i32> {
      debug x => _1;
      let mut _0: std::option::Option<i32>;
      let mut _2: std::ops::ControlFlow<usize, i32>;
      let mut _3: isize;
      let _4: i32;
      let mut _5: i32;
      let _6: usize;
      let mut _7: usize;
      let mut _8: isize;
      let _9: i32;
      let mut _10: i32;
      let _11: usize;
      scope 1 {
          debug v => _4;
      }
      scope 2 {
          debug r => _6;
      }
      scope 3 {
          debug v => _9;
      }
      scope 4 {
          debug r => _11;
      }
  
      bb0: {
          StorageLive(_2);
          _3 = discriminant(_1);
          switchInt(move _3) -> [0: bb2, 1: bb1, otherwise: bb7];
      }
  
      bb1: {
          _6 = ((_1 as Err).0: usize);
          _2 = ControlFlow::<usize, i32>::Break(_6);
          goto -> bb3;
      }
  
      bb2: {
          _4 = ((_1 as Ok).0: i32);
          _2 = ControlFlow::<usize, i32>::Continue(_4);
          goto -> bb3;
      }
  
      bb3: {
          _8 = discriminant(_2);
          switchInt(move _8) -> [0: bb5, 1: bb4, otherwise: bb7];
      }
  
      bb4: {
          StorageLive(_11);
          _11 = ((_2 as Break).0: usize);
          _0 = Option::<i32>::None;
          StorageDead(_11);
          goto -> bb6;
      }
  
      bb5: {
          _9 = ((_2 as Continue).0: i32);
          _0 = Option::<i32>::Some(_9);
          goto -> bb6;
      }
  
      bb6: {
          StorageDead(_2);
          return;
      }
  
      bb7: {
          unreachable;
      }
  }
  
