- // MIR for `main` before DataflowConstProp
+ // MIR for `main` after DataflowConstProp
  
  fn main() -> () {
      let mut _0: ();
      let _1: A;
      let mut _2: std::boxed::Box<[bool]>;
      scope 1 {
          debug a => _1;
      }
      scope 2 (inlined <Box<[bool]> as Default>::default) {
          let _3: std::ptr::Unique<[bool]>;
          let mut _4: std::ptr::Unique<[bool; 0]>;
          scope 3 {
              debug ptr => _3;
          }
          scope 4 (inlined Unique::<[bool; 0]>::dangling) {
              let mut _5: std::ptr::NonNull<[bool; 0]>;
              scope 5 (inlined NonNull::<[bool; 0]>::dangling) {
                  let mut _7: usize;
                  scope 6 {
                      let _6: *mut [bool; 0];
                      scope 7 {
                          debug ptr => _6;
                          scope 11 (inlined NonNull::<[bool; 0]>::new_unchecked) {
                              debug ptr => _6;
                              let mut _8: bool;
                              let _9: ();
                              let mut _10: *mut ();
                              let mut _11: *const [bool; 0];
                              scope 12 {
                              }
                          }
                      }
                      scope 8 (inlined align_of::<[bool; 0]>) {
                      }
                      scope 9 (inlined invalid_mut::<[bool; 0]>) {
                          debug addr => _7;
                          scope 10 {
                          }
                      }
                  }
              }
          }
      }
  
      bb0: {
          StorageLive(_1);
          StorageLive(_2);
          StorageLive(_3);
          StorageLive(_9);
          StorageLive(_4);
          StorageLive(_5);
          StorageLive(_6);
          StorageLive(_7);
          _7 = const 1_usize;
          _6 = const {0x1 as *mut [bool; 0]};
          StorageDead(_7);
          StorageLive(_10);
          StorageLive(_11);
          StorageLive(_8);
          _8 = cfg!(debug_assertions);
          switchInt(move _8) -> [0: bb3, otherwise: bb2];
      }
  
      bb1: {
          StorageDead(_1);
          return;
      }
  
      bb2: {
          _10 = const {0x1 as *mut [bool; 0]} as *mut () (PtrToPtr);
          _9 = NonNull::<T>::new_unchecked::precondition_check(move _10) -> [return: bb3, unwind unreachable];
      }
  
      bb3: {
          StorageDead(_8);
          _11 = const {0x1 as *mut [bool; 0]} as *const [bool; 0] (PointerCoercion(MutToConstPointer));
          _5 = NonNull::<[bool; 0]> { pointer: _11 };
          StorageDead(_11);
          StorageDead(_10);
          StorageDead(_6);
          _4 = Unique::<[bool; 0]> { pointer: move _5, _marker: const PhantomData::<[bool; 0]> };
          StorageDead(_5);
          _3 = move _4 as std::ptr::Unique<[bool]> (PointerCoercion(Unsize));
          StorageDead(_4);
          _2 = Box::<[bool]>(_3, const std::alloc::Global);
          StorageDead(_9);
          StorageDead(_3);
          _1 = A { foo: move _2 };
          StorageDead(_2);
          _0 = const ();
          drop(_1) -> [return: bb1, unwind unreachable];
      }
  }
  
