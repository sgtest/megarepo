- // MIR for `transmute_to_ref_uninhabited` before LowerIntrinsics
+ // MIR for `transmute_to_ref_uninhabited` after LowerIntrinsics
  
  fn transmute_to_ref_uninhabited() -> ! {
      let mut _0: !;                       // return place in scope 0 at $DIR/lower_intrinsics.rs:+0:49: +0:50
      let _1: &Never;                      // in scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10
      scope 1 {
          debug x => _1;                   // in scope 1 at $DIR/lower_intrinsics.rs:+1:9: +1:10
      }
  
      bb0: {
          StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10
-         _1 = transmute::<usize, &Never>(const 1_usize) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:21: +1:48
-                                          // mir::Constant
-                                          // + span: $DIR/lower_intrinsics.rs:58:21: 58:40
-                                          // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(usize) -> &Never {transmute::<usize, &Never>}, val: Value(<ZST>) }
+         _1 = const 1_usize as &Never (Transmute); // scope 0 at $DIR/lower_intrinsics.rs:+1:21: +1:48
+         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:21: +1:48
      }
  
      bb1: {
          unreachable;                     // scope 1 at $DIR/lower_intrinsics.rs:+2:11: +2:13
      }
  }
  
