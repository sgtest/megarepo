- // MIR for `unreachable` before LowerIntrinsics
+ // MIR for `unreachable` after LowerIntrinsics
  
  fn unreachable() -> ! {
      let mut _0: !;                       // return place in scope 0 at $DIR/lower_intrinsics.rs:+0:25: +0:26
      let _1: ();                          // in scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:45
      let mut _2: !;                       // in scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:45
      scope 1 {
      }
  
      bb0: {
          StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:47
          StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:45
-         _2 = std::intrinsics::unreachable() -> unwind unreachable; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:45
-                                          // mir::Constant
-                                          // + span: $DIR/lower_intrinsics.rs:37:14: 37:43
-                                          // + literal: Const { ty: unsafe extern "rust-intrinsic" fn() -> ! {std::intrinsics::unreachable}, val: Value(<ZST>) }
+         unreachable;                     // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:45
      }
  }
  
