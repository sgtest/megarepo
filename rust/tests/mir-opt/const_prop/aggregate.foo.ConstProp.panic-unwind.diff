- // MIR for `foo` before ConstProp
+ // MIR for `foo` after ConstProp
  
  fn foo(_1: u8) -> () {
      debug x => _1;                       // in scope 0 at $DIR/aggregate.rs:+0:8: +0:9
      let mut _0: ();                      // return place in scope 0 at $DIR/aggregate.rs:+0:15: +0:15
      let _2: i32;                         // in scope 0 at $DIR/aggregate.rs:+2:9: +2:14
      let mut _3: i32;                     // in scope 0 at $DIR/aggregate.rs:+2:17: +2:25
      let mut _4: (i32, u8);               // in scope 0 at $DIR/aggregate.rs:+2:17: +2:23
      let mut _5: u8;                      // in scope 0 at $DIR/aggregate.rs:+2:21: +2:22
      let mut _7: i32;                     // in scope 0 at $DIR/aggregate.rs:+3:18: +3:26
      let mut _8: (u8, i32);               // in scope 0 at $DIR/aggregate.rs:+3:18: +3:24
      let mut _9: u8;                      // in scope 0 at $DIR/aggregate.rs:+3:19: +3:20
      scope 1 {
          debug first => _2;               // in scope 1 at $DIR/aggregate.rs:+2:9: +2:14
          let _6: i32;                     // in scope 1 at $DIR/aggregate.rs:+3:9: +3:15
          scope 2 {
              debug second => _6;          // in scope 2 at $DIR/aggregate.rs:+3:9: +3:15
          }
      }
  
      bb0: {
          StorageLive(_2);                 // scope 0 at $DIR/aggregate.rs:+2:9: +2:14
          StorageLive(_3);                 // scope 0 at $DIR/aggregate.rs:+2:17: +2:25
          StorageLive(_4);                 // scope 0 at $DIR/aggregate.rs:+2:17: +2:23
          StorageLive(_5);                 // scope 0 at $DIR/aggregate.rs:+2:21: +2:22
          _5 = _1;                         // scope 0 at $DIR/aggregate.rs:+2:21: +2:22
          _4 = (const 0_i32, move _5);     // scope 0 at $DIR/aggregate.rs:+2:17: +2:23
          StorageDead(_5);                 // scope 0 at $DIR/aggregate.rs:+2:22: +2:23
-         _3 = (_4.0: i32);                // scope 0 at $DIR/aggregate.rs:+2:17: +2:25
-         _2 = Add(move _3, const 1_i32);  // scope 0 at $DIR/aggregate.rs:+2:17: +2:29
+         _3 = const 0_i32;                // scope 0 at $DIR/aggregate.rs:+2:17: +2:25
+         _2 = const 1_i32;                // scope 0 at $DIR/aggregate.rs:+2:17: +2:29
          StorageDead(_3);                 // scope 0 at $DIR/aggregate.rs:+2:28: +2:29
          StorageDead(_4);                 // scope 0 at $DIR/aggregate.rs:+2:29: +2:30
          StorageLive(_6);                 // scope 1 at $DIR/aggregate.rs:+3:9: +3:15
          StorageLive(_7);                 // scope 1 at $DIR/aggregate.rs:+3:18: +3:26
          StorageLive(_8);                 // scope 1 at $DIR/aggregate.rs:+3:18: +3:24
          StorageLive(_9);                 // scope 1 at $DIR/aggregate.rs:+3:19: +3:20
          _9 = _1;                         // scope 1 at $DIR/aggregate.rs:+3:19: +3:20
          _8 = (move _9, const 1_i32);     // scope 1 at $DIR/aggregate.rs:+3:18: +3:24
          StorageDead(_9);                 // scope 1 at $DIR/aggregate.rs:+3:23: +3:24
-         _7 = (_8.1: i32);                // scope 1 at $DIR/aggregate.rs:+3:18: +3:26
-         _6 = Add(move _7, const 2_i32);  // scope 1 at $DIR/aggregate.rs:+3:18: +3:30
+         _7 = const 1_i32;                // scope 1 at $DIR/aggregate.rs:+3:18: +3:26
+         _6 = const 3_i32;                // scope 1 at $DIR/aggregate.rs:+3:18: +3:30
          StorageDead(_7);                 // scope 1 at $DIR/aggregate.rs:+3:29: +3:30
          StorageDead(_8);                 // scope 1 at $DIR/aggregate.rs:+3:30: +3:31
          _0 = const ();                   // scope 0 at $DIR/aggregate.rs:+0:15: +4:2
          StorageDead(_6);                 // scope 1 at $DIR/aggregate.rs:+4:1: +4:2
          StorageDead(_2);                 // scope 0 at $DIR/aggregate.rs:+4:1: +4:2
          return;                          // scope 0 at $DIR/aggregate.rs:+4:2: +4:2
      }
  }
  
