- // MIR for `identity` before SeparateConstSwitch
+ // MIR for `identity` after SeparateConstSwitch
  
  fn identity(_1: Result<i32, i32>) -> Result<i32, i32> {
      debug x => _1;
      let mut _0: std::result::Result<i32, i32>;
      let mut _2: i32;
      let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, i32>, i32>;
      let mut _4: std::result::Result<i32, i32>;
      let mut _5: isize;
      let _6: std::result::Result<std::convert::Infallible, i32>;
      let mut _7: std::result::Result<std::convert::Infallible, i32>;
      let _8: i32;
      scope 1 {
          debug residual => _6;
          scope 2 {
              scope 8 (inlined #[track_caller] <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual) {
                  debug residual => _6;
                  let _13: i32;
                  let mut _14: i32;
                  scope 9 {
                      debug e => _13;
                      scope 10 (inlined <i32 as From<i32>>::from) {
                          debug t => _13;
                      }
                  }
              }
          }
      }
      scope 3 {
          debug val => _8;
          scope 4 {
          }
      }
      scope 5 (inlined <Result<i32, i32> as Try>::branch) {
          debug self => _1;
          let mut _9: isize;
          let _10: i32;
          let _11: i32;
          let mut _12: std::result::Result<std::convert::Infallible, i32>;
          scope 6 {
              debug v => _10;
          }
          scope 7 {
              debug e => _11;
          }
      }
  
      bb0: {
          StorageLive(_3);
          StorageLive(_9);
          StorageLive(_10);
          StorageLive(_11);
          _9 = discriminant(_1);
          switchInt(move _9) -> [0: bb5, 1: bb4, otherwise: bb6];
      }
  
      bb1: {
          _8 = ((_3 as Continue).0: i32);
          _0 = Result::<i32, i32>::Ok(_8);
          StorageDead(_3);
          return;
      }
  
      bb2: {
          _6 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>);
          _13 = ((_6 as Err).0: i32);
          _0 = Result::<i32, i32>::Err(move _13);
          StorageDead(_3);
          return;
      }
  
      bb3: {
          StorageDead(_11);
          StorageDead(_10);
          StorageDead(_9);
          _5 = discriminant(_3);
          switchInt(move _5) -> [0: bb1, 1: bb2, otherwise: bb6];
      }
  
      bb4: {
          _11 = ((_1 as Err).0: i32);
          StorageLive(_12);
          _12 = Result::<Infallible, i32>::Err(move _11);
          _3 = ControlFlow::<Result<Infallible, i32>, i32>::Break(move _12);
          StorageDead(_12);
          goto -> bb3;
      }
  
      bb5: {
          _10 = ((_1 as Ok).0: i32);
          _3 = ControlFlow::<Result<Infallible, i32>, i32>::Continue(move _10);
          goto -> bb3;
      }
  
      bb6: {
          unreachable;
      }
  }
  
