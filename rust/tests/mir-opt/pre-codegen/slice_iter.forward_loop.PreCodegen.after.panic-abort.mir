// MIR for `forward_loop` after PreCodegen

fn forward_loop(_1: &[T], _2: impl Fn(&T)) -> () {
    debug slice => _1;
    debug f => _2;
    let mut _0: ();
    let mut _15: std::slice::Iter<'_, T>;
    let mut _16: std::slice::Iter<'_, T>;
    let mut _17: &mut std::slice::Iter<'_, T>;
    let mut _18: std::option::Option<&T>;
    let mut _19: isize;
    let mut _21: &impl Fn(&T);
    let mut _22: (&T,);
    let _23: ();
    scope 1 {
        debug iter => _16;
        let _20: &T;
        scope 2 {
            debug x => _20;
        }
    }
    scope 3 (inlined core::slice::<impl [T]>::iter) {
        debug self => _1;
        scope 4 (inlined std::slice::Iter::<'_, T>::new) {
            debug slice => _1;
            let _3: usize;
            let mut _5: std::ptr::NonNull<[T]>;
            let mut _10: bool;
            let mut _11: *mut T;
            let mut _12: *mut T;
            let mut _14: *const T;
            scope 5 {
                debug len => _3;
                let _9: std::ptr::NonNull<T>;
                scope 6 {
                    debug ptr => _9;
                    scope 7 {
                        let _13: *const T;
                        scope 8 {
                            debug end_or_len => _13;
                        }
                        scope 14 (inlined invalid::<T>) {
                            debug addr => _3;
                            scope 15 {
                            }
                        }
                        scope 16 (inlined NonNull::<T>::as_ptr) {
                            debug self => _9;
                        }
                        scope 17 (inlined std::ptr::mut_ptr::<impl *mut T>::add) {
                            debug self => _11;
                            debug count => _3;
                            scope 18 {
                            }
                        }
                    }
                }
                scope 9 (inlined <NonNull<[T]> as From<&[T]>>::from) {
                    debug reference => _1;
                    let mut _4: *const [T];
                    scope 10 {
                    }
                }
                scope 11 (inlined NonNull::<[T]>::cast::<T>) {
                    debug self => _5;
                    let mut _6: *mut [T];
                    let mut _7: *mut T;
                    let mut _8: *const T;
                    scope 12 {
                        scope 13 (inlined NonNull::<[T]>::as_ptr) {
                            debug self => _5;
                        }
                    }
                }
            }
        }
    }
    scope 19 (inlined <std::slice::Iter<'_, T> as IntoIterator>::into_iter) {
        debug self => _15;
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_9);
        StorageLive(_4);
        StorageLive(_8);
        _3 = Len((*_1));
        StorageLive(_5);
        _4 = &raw const (*_1);
        _5 = NonNull::<[T]> { pointer: _4 };
        StorageLive(_7);
        StorageLive(_6);
        _6 = _4 as *mut [T] (PtrToPtr);
        _7 = move _6 as *mut T (PtrToPtr);
        _8 = move _7 as *const T (PointerCoercion(MutToConstPointer));
        StorageDead(_6);
        StorageDead(_7);
        _9 = NonNull::<T> { pointer: _8 };
        StorageDead(_5);
        StorageLive(_13);
        StorageLive(_10);
        _10 = const _;
        switchInt(move _10) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        StorageLive(_12);
        StorageLive(_11);
        _11 = _8 as *mut T (PtrToPtr);
        _12 = Offset(_11, _3);
        StorageDead(_11);
        _13 = move _12 as *const T (PointerCoercion(MutToConstPointer));
        StorageDead(_12);
        goto -> bb3;
    }

    bb2: {
        _13 = _3 as *const T (Transmute);
        goto -> bb3;
    }

    bb3: {
        StorageDead(_10);
        StorageLive(_14);
        _14 = _13;
        _15 = std::slice::Iter::<'_, T> { ptr: _9, end_or_len: move _14, _marker: const ZeroSized: PhantomData<&T> };
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_8);
        StorageDead(_4);
        StorageDead(_9);
        StorageDead(_3);
        StorageLive(_16);
        _16 = _15;
        goto -> bb4;
    }

    bb4: {
        StorageLive(_18);
        StorageLive(_17);
        _17 = &mut _16;
        _18 = <std::slice::Iter<'_, T> as Iterator>::next(move _17) -> [return: bb5, unwind unreachable];
    }

    bb5: {
        StorageDead(_17);
        _19 = discriminant(_18);
        switchInt(move _19) -> [0: bb6, 1: bb8, otherwise: bb10];
    }

    bb6: {
        StorageDead(_18);
        StorageDead(_16);
        drop(_2) -> [return: bb7, unwind unreachable];
    }

    bb7: {
        return;
    }

    bb8: {
        _20 = ((_18 as Some).0: &T);
        StorageLive(_21);
        _21 = &_2;
        StorageLive(_22);
        _22 = (_20,);
        _23 = <impl Fn(&T) as Fn<(&T,)>>::call(move _21, move _22) -> [return: bb9, unwind unreachable];
    }

    bb9: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_18);
        goto -> bb4;
    }

    bb10: {
        unreachable;
    }
}
