// MIR for `slice_ptr_get_unchecked_range` after PreCodegen

fn slice_ptr_get_unchecked_range(_1: *const [u32], _2: std::ops::Range<usize>) -> *const [u32] {
    debug slice => _1;
    debug index => _2;
    let mut _0: *const [u32];
    let mut _3: usize;
    let mut _4: usize;
    scope 1 (inlined std::ptr::const_ptr::<impl *const [u32]>::get_unchecked::<std::ops::Range<usize>>) {
        scope 2 (inlined <std::ops::Range<usize> as SliceIndex<[u32]>>::get_unchecked) {
            let _5: usize;
            let mut _6: *const u32;
            let mut _7: *const u32;
            scope 3 {
                scope 6 (inlined std::ptr::const_ptr::<impl *const [u32]>::as_ptr) {
                }
                scope 7 (inlined std::ptr::const_ptr::<impl *const u32>::add) {
                }
                scope 8 (inlined slice_from_raw_parts::<u32>) {
                }
            }
            scope 4 (inlined std::ptr::const_ptr::<impl *const [u32]>::len) {
                scope 5 (inlined std::ptr::metadata::<[u32]>) {
                }
            }
        }
    }

    bb0: {
        _3 = move (_2.0: usize);
        _4 = move (_2.1: usize);
        StorageLive(_5);
        _5 = SubUnchecked(_4, _3);
        StorageLive(_7);
        StorageLive(_6);
        _6 = _1 as *const u32 (PtrToPtr);
        _7 = Offset(_6, _3);
        StorageDead(_6);
        _0 = *const [u32] from (_7, _5);
        StorageDead(_7);
        StorageDead(_5);
        return;
    }
}
