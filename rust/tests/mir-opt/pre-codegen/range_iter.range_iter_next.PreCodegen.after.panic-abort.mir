// MIR for `range_iter_next` after PreCodegen

fn range_iter_next(_1: &mut std::ops::Range<u32>) -> Option<u32> {
    debug it => _1;
    let mut _0: std::option::Option<u32>;
    scope 1 (inlined iter::range::<impl Iterator for std::ops::Range<u32>>::next) {
        debug self => _1;
        scope 2 (inlined <std::ops::Range<u32> as iter::range::RangeIteratorImpl>::spec_next) {
            debug self => _1;
            let mut _4: bool;
            let _5: u32;
            let mut _6: u32;
            let mut _7: &u32;
            let mut _8: &u32;
            scope 3 {
                debug old => _5;
                scope 4 {
                }
            }
            scope 5 (inlined cmp::impls::<impl PartialOrd for u32>::lt) {
                debug self => _7;
                debug other => _8;
                let mut _2: u32;
                let mut _3: u32;
            }
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_4);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_2);
        _2 = ((*_1).0: u32);
        StorageLive(_3);
        _3 = ((*_1).1: u32);
        _4 = Lt(move _2, move _3);
        StorageDead(_3);
        StorageDead(_2);
        switchInt(move _4) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_7);
        _0 = Option::<u32>::None;
        goto -> bb4;
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_7);
        _5 = ((*_1).0: u32);
        StorageLive(_6);
        _6 = <u32 as Step>::forward_unchecked(_5, const 1_usize) -> [return: bb3, unwind unreachable];
    }

    bb3: {
        ((*_1).0: u32) = move _6;
        StorageDead(_6);
        _0 = Option::<u32>::Some(_5);
        goto -> bb4;
    }

    bb4: {
        StorageDead(_4);
        StorageDead(_5);
        return;
    }
}
