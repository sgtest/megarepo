- // MIR for `main` before ConstProp
+ // MIR for `main` after ConstProp
  
  fn main() -> () {
      let mut _0: ();
      let _1: i32;
      let mut _2: (i32, bool);
      let mut _4: [i32; 6];
      let _5: usize;
      let mut _6: usize;
      let mut _7: bool;
      let mut _9: u32;
      scope 1 {
          debug x => _1;
          let _3: i32;
          scope 2 {
              debug y => _3;
              let _8: u32;
              scope 3 {
                  debug z => _9;
              }
          }
      }
  
      bb0: {
          StorageLive(_1);
-         _2 = CheckedAdd(const 2_i32, const 2_i32);
-         assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", const 2_i32, const 2_i32) -> [success: bb1, unwind continue];
+         _2 = const (4_i32, false);
+         assert(!const false, "attempt to compute `{} + {}`, which would overflow", const 2_i32, const 2_i32) -> [success: bb1, unwind continue];
      }
  
      bb1: {
-         _1 = move (_2.0: i32);
+         _1 = const 4_i32;
          StorageLive(_3);
          StorageLive(_4);
          _4 = [const 0_i32, const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32];
          StorageLive(_5);
          _5 = const 3_usize;
          _6 = const 6_usize;
-         _7 = Lt(_5, _6);
-         assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _5) -> [success: bb2, unwind continue];
+         _7 = const true;
+         assert(const true, "index out of bounds: the length is {} but the index is {}", const 6_usize, const 3_usize) -> [success: bb2, unwind continue];
      }
  
      bb2: {
-         _3 = _4[_5];
+         _3 = const 3_i32;
          StorageDead(_5);
          StorageDead(_4);
          _9 = const 42_u32;
          StorageDead(_3);
          StorageDead(_1);
          return;
      }
+ }
+ 
+ alloc5 (size: 8, align: 4) {
+     04 00 00 00 00 __ __ __                         │ .....░░░
  }
  
