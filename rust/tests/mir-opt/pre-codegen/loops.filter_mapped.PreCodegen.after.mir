// MIR for `filter_mapped` after PreCodegen

fn filter_mapped(_1: impl Iterator<Item = T>, _2: impl Fn(T) -> Option<U>) -> () {
    debug iter => _1;                    // in scope 0 at $DIR/loops.rs:+0:28: +0:32
    debug f => _2;                       // in scope 0 at $DIR/loops.rs:+0:59: +0:60
    let mut _0: ();                      // return place in scope 0 at $DIR/loops.rs:+0:87: +0:87
    let mut _3: std::iter::FilterMap<impl Iterator<Item = T>, impl Fn(T) -> Option<U>>; // in scope 0 at $DIR/loops.rs:+1:14: +1:32
    let mut _4: std::iter::FilterMap<impl Iterator<Item = T>, impl Fn(T) -> Option<U>>; // in scope 0 at $DIR/loops.rs:+1:14: +1:32
    let mut _5: std::iter::FilterMap<impl Iterator<Item = T>, impl Fn(T) -> Option<U>>; // in scope 0 at $DIR/loops.rs:+1:14: +1:32
    let mut _6: &mut std::iter::FilterMap<impl Iterator<Item = T>, impl Fn(T) -> Option<U>>; // in scope 0 at $DIR/loops.rs:+1:14: +1:32
    let mut _9: std::option::Option<U>;  // in scope 0 at $DIR/loops.rs:+1:14: +1:32
    let mut _10: isize;                  // in scope 0 at $DIR/loops.rs:+1:5: +3:6
    let _12: ();                         // in scope 0 at $DIR/loops.rs:+1:14: +1:32
    scope 1 {
        debug iter => _5;                // in scope 1 at $DIR/loops.rs:+1:14: +1:32
        let _11: U;                      // in scope 1 at $DIR/loops.rs:+1:9: +1:10
        scope 2 {
            debug x => _11;              // in scope 2 at $DIR/loops.rs:+1:9: +1:10
        }
        scope 4 (inlined <FilterMap<impl Iterator<Item = T>, impl Fn(T) -> Option<U>> as Iterator>::next) { // at $DIR/loops.rs:20:14: 20:32
            debug self => _6;            // in scope 4 at $SRC_DIR/core/src/iter/adapters/filter_map.rs:LL:COL
            let mut _7: &mut impl Iterator<Item = T>; // in scope 4 at $SRC_DIR/core/src/iter/adapters/filter_map.rs:LL:COL
            let mut _8: &mut impl Fn(T) -> Option<U>; // in scope 4 at $SRC_DIR/core/src/iter/adapters/filter_map.rs:LL:COL
        }
    }
    scope 3 (inlined <FilterMap<impl Iterator<Item = T>, impl Fn(T) -> Option<U>> as IntoIterator>::into_iter) { // at $DIR/loops.rs:20:14: 20:32
        debug self => _3;                // in scope 3 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL
    }

    bb0: {
        StorageLive(_4);                 // scope 0 at $DIR/loops.rs:+1:14: +1:32
        StorageLive(_3);                 // scope 0 at $DIR/loops.rs:+1:14: +1:32
        _3 = <impl Iterator<Item = T> as Iterator>::filter_map::<U, impl Fn(T) -> Option<U>>(move _1, move _2) -> bb1; // scope 0 at $DIR/loops.rs:+1:14: +1:32
                                         // mir::Constant
                                         // + span: $DIR/loops.rs:20:19: 20:29
                                         // + literal: Const { ty: fn(impl Iterator<Item = T>, impl Fn(T) -> Option<U>) -> FilterMap<impl Iterator<Item = T>, impl Fn(T) -> Option<U>> {<impl Iterator<Item = T> as Iterator>::filter_map::<U, impl Fn(T) -> Option<U>>}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = move _3;                    // scope 3 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL
        StorageDead(_3);                 // scope 0 at $DIR/loops.rs:+1:31: +1:32
        StorageLive(_5);                 // scope 0 at $DIR/loops.rs:+1:14: +1:32
        _5 = move _4;                    // scope 0 at $DIR/loops.rs:+1:14: +1:32
        goto -> bb2;                     // scope 1 at $DIR/loops.rs:+1:5: +3:6
    }

    bb2: {
        StorageLive(_9);                 // scope 1 at $DIR/loops.rs:+1:14: +1:32
        _6 = &mut _5;                    // scope 1 at $DIR/loops.rs:+1:14: +1:32
        StorageLive(_7);                 // scope 4 at $SRC_DIR/core/src/iter/adapters/filter_map.rs:LL:COL
        _7 = &mut ((*_6).0: impl Iterator<Item = T>); // scope 4 at $SRC_DIR/core/src/iter/adapters/filter_map.rs:LL:COL
        StorageLive(_8);                 // scope 4 at $SRC_DIR/core/src/iter/adapters/filter_map.rs:LL:COL
        _8 = &mut ((*_6).1: impl Fn(T) -> Option<U>); // scope 4 at $SRC_DIR/core/src/iter/adapters/filter_map.rs:LL:COL
        _9 = <impl Iterator<Item = T> as Iterator>::find_map::<U, &mut impl Fn(T) -> Option<U>>(move _7, move _8) -> [return: bb3, unwind: bb9]; // scope 4 at $SRC_DIR/core/src/iter/adapters/filter_map.rs:LL:COL
                                         // mir::Constant
                                         // + span: $SRC_DIR/core/src/iter/adapters/filter_map.rs:LL:COL
                                         // + literal: Const { ty: for<'a> fn(&'a mut impl Iterator<Item = T>, &mut impl Fn(T) -> Option<U>) -> Option<U> {<impl Iterator<Item = T> as Iterator>::find_map::<U, &mut impl Fn(T) -> Option<U>>}, val: Value(<ZST>) }
    }

    bb3: {
        StorageDead(_8);                 // scope 4 at $SRC_DIR/core/src/iter/adapters/filter_map.rs:LL:COL
        StorageDead(_7);                 // scope 4 at $SRC_DIR/core/src/iter/adapters/filter_map.rs:LL:COL
        _10 = discriminant(_9);          // scope 1 at $DIR/loops.rs:+1:14: +1:32
        switchInt(move _10) -> [0: bb4, 1: bb6, otherwise: bb8]; // scope 1 at $DIR/loops.rs:+1:14: +1:32
    }

    bb4: {
        StorageDead(_9);                 // scope 1 at $DIR/loops.rs:+3:5: +3:6
        drop(_5) -> bb5;                 // scope 0 at $DIR/loops.rs:+3:5: +3:6
    }

    bb5: {
        StorageDead(_5);                 // scope 0 at $DIR/loops.rs:+3:5: +3:6
        StorageDead(_4);                 // scope 0 at $DIR/loops.rs:+3:5: +3:6
        return;                          // scope 0 at $DIR/loops.rs:+4:2: +4:2
    }

    bb6: {
        _11 = move ((_9 as Some).0: U);  // scope 1 at $DIR/loops.rs:+1:9: +1:10
        _12 = opaque::<U>(move _11) -> [return: bb7, unwind: bb9]; // scope 2 at $DIR/loops.rs:+2:9: +2:18
                                         // mir::Constant
                                         // + span: $DIR/loops.rs:21:9: 21:15
                                         // + literal: Const { ty: fn(U) {opaque::<U>}, val: Value(<ZST>) }
    }

    bb7: {
        StorageDead(_9);                 // scope 1 at $DIR/loops.rs:+3:5: +3:6
        goto -> bb2;                     // scope 1 at $DIR/loops.rs:+1:5: +3:6
    }

    bb8: {
        unreachable;                     // scope 1 at $DIR/loops.rs:+1:14: +1:32
    }

    bb9 (cleanup): {
        drop(_5) -> [return: bb10, unwind terminate]; // scope 0 at $DIR/loops.rs:+3:5: +3:6
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at $DIR/loops.rs:+0:1: +4:2
    }
}
