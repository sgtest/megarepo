// MIR for `reverse_loop` after PreCodegen

fn reverse_loop(_1: &[T], _2: impl Fn(&T)) -> () {
    debug slice => _1;
    debug f => _2;
    let mut _0: ();
    let mut _15: std::slice::Iter<'_, T>;
    let mut _16: std::iter::Rev<std::slice::Iter<'_, T>>;
    let mut _17: std::iter::Rev<std::slice::Iter<'_, T>>;
    let mut _18: &mut std::iter::Rev<std::slice::Iter<'_, T>>;
    let mut _20: std::option::Option<&T>;
    let mut _21: isize;
    let mut _23: &impl Fn(&T);
    let mut _24: (&T,);
    let _25: ();
    scope 1 {
        debug iter => _17;
        let _22: &T;
        scope 2 {
            debug x => _22;
        }
        scope 22 (inlined <Rev<std::slice::Iter<'_, T>> as Iterator>::next) {
            debug self => _18;
            let mut _19: &mut std::slice::Iter<'_, T>;
        }
    }
    scope 3 (inlined core::slice::<impl [T]>::iter) {
        debug self => _1;
        scope 4 (inlined std::slice::Iter::<'_, T>::new) {
            debug slice => _1;
            let _3: usize;
            let mut _5: std::ptr::NonNull<[T]>;
            let mut _10: bool;
            let mut _11: *mut T;
            let mut _12: *mut T;
            let mut _14: *const T;
            scope 5 {
                debug len => _3;
                let _9: std::ptr::NonNull<T>;
                scope 6 {
                    debug ptr => _9;
                    scope 7 {
                        let _13: *const T;
                        scope 8 {
                            debug end_or_len => _13;
                        }
                        scope 14 (inlined invalid::<T>) {
                            debug addr => _3;
                            scope 15 {
                            }
                        }
                        scope 16 (inlined NonNull::<T>::as_ptr) {
                            debug self => _9;
                        }
                        scope 17 (inlined std::ptr::mut_ptr::<impl *mut T>::add) {
                            debug self => _11;
                            debug count => _3;
                            scope 18 {
                            }
                        }
                    }
                }
                scope 9 (inlined <NonNull<[T]> as From<&[T]>>::from) {
                    debug reference => _1;
                    let mut _4: *const [T];
                    scope 10 {
                    }
                }
                scope 11 (inlined NonNull::<[T]>::cast::<T>) {
                    debug self => _5;
                    let mut _6: *mut [T];
                    let mut _7: *mut T;
                    let mut _8: *const T;
                    scope 12 {
                        scope 13 (inlined NonNull::<[T]>::as_ptr) {
                            debug self => _5;
                        }
                    }
                }
            }
        }
    }
    scope 19 (inlined <std::slice::Iter<'_, T> as Iterator>::rev) {
        debug self => _15;
        scope 20 (inlined Rev::<std::slice::Iter<'_, T>>::new) {
            debug iter => _15;
        }
    }
    scope 21 (inlined <Rev<std::slice::Iter<'_, T>> as IntoIterator>::into_iter) {
        debug self => _16;
    }

    bb0: {
        StorageLive(_15);
        StorageLive(_3);
        StorageLive(_9);
        StorageLive(_4);
        StorageLive(_8);
        _3 = Len((*_1));
        StorageLive(_5);
        _4 = &raw const (*_1);
        _5 = NonNull::<[T]> { pointer: _4 };
        StorageLive(_7);
        StorageLive(_6);
        _6 = _4 as *mut [T] (PtrToPtr);
        _7 = move _6 as *mut T (PtrToPtr);
        _8 = move _7 as *const T (PointerCoercion(MutToConstPointer));
        StorageDead(_6);
        StorageDead(_7);
        _9 = NonNull::<T> { pointer: _8 };
        StorageDead(_5);
        StorageLive(_13);
        StorageLive(_10);
        _10 = const _;
        switchInt(move _10) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        StorageLive(_12);
        StorageLive(_11);
        _11 = _8 as *mut T (PtrToPtr);
        _12 = Offset(_11, _3);
        StorageDead(_11);
        _13 = move _12 as *const T (PointerCoercion(MutToConstPointer));
        StorageDead(_12);
        goto -> bb3;
    }

    bb2: {
        _13 = _3 as *const T (Transmute);
        goto -> bb3;
    }

    bb3: {
        StorageDead(_10);
        StorageLive(_14);
        _14 = _13;
        _15 = std::slice::Iter::<'_, T> { ptr: _9, end_or_len: move _14, _marker: const ZeroSized: PhantomData<&T> };
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_8);
        StorageDead(_4);
        StorageDead(_9);
        StorageDead(_3);
        _16 = Rev::<std::slice::Iter<'_, T>> { iter: _15 };
        StorageDead(_15);
        StorageLive(_17);
        _17 = _16;
        goto -> bb4;
    }

    bb4: {
        StorageLive(_20);
        _18 = &mut _17;
        StorageLive(_19);
        _19 = &mut (_17.0: std::slice::Iter<'_, T>);
        _20 = <std::slice::Iter<'_, T> as DoubleEndedIterator>::next_back(move _19) -> [return: bb5, unwind: bb11];
    }

    bb5: {
        StorageDead(_19);
        _21 = discriminant(_20);
        switchInt(move _21) -> [0: bb6, 1: bb8, otherwise: bb10];
    }

    bb6: {
        StorageDead(_20);
        StorageDead(_17);
        drop(_2) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8: {
        _22 = ((_20 as Some).0: &T);
        StorageLive(_23);
        _23 = &_2;
        StorageLive(_24);
        _24 = (_22,);
        _25 = <impl Fn(&T) as Fn<(&T,)>>::call(move _23, move _24) -> [return: bb9, unwind: bb11];
    }

    bb9: {
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_20);
        goto -> bb4;
    }

    bb10: {
        unreachable;
    }

    bb11 (cleanup): {
        drop(_2) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        resume;
    }
}
