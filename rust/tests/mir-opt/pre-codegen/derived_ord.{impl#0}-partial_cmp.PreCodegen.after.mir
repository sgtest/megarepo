// MIR for `<impl at $DIR/derived_ord.rs:6:10: 6:20>::partial_cmp` after PreCodegen

fn <impl at $DIR/derived_ord.rs:6:10: 6:20>::partial_cmp(_1: &MultiField, _2: &MultiField) -> Option<std::cmp::Ordering> {
    debug self => _1;
    debug other => _2;
    let mut _0: std::option::Option<std::cmp::Ordering>;
    let mut _3: &char;
    let mut _4: &char;
    let mut _8: std::option::Option<std::cmp::Ordering>;
    let mut _9: i8;
    let mut _10: &i16;
    let mut _11: &i16;
    scope 1 {
        debug cmp => _8;
    }
    scope 2 (inlined std::cmp::impls::<impl PartialOrd for char>::partial_cmp) {
        debug self => _3;
        debug other => _4;
        let mut _5: char;
        let mut _6: char;
        let mut _7: std::cmp::Ordering;
    }
    scope 3 (inlined std::cmp::impls::<impl PartialOrd for i16>::partial_cmp) {
        debug self => _10;
        debug other => _11;
        let mut _12: i16;
        let mut _13: i16;
        let mut _14: std::cmp::Ordering;
    }

    bb0: {
        StorageLive(_3);
        _3 = &((*_1).0: char);
        StorageLive(_4);
        _4 = &((*_2).0: char);
        StorageLive(_5);
        _5 = ((*_1).0: char);
        StorageLive(_6);
        _6 = ((*_2).0: char);
        _7 = Cmp(move _5, move _6);
        StorageDead(_6);
        StorageDead(_5);
        _8 = Option::<std::cmp::Ordering>::Some(_7);
        StorageDead(_4);
        StorageDead(_3);
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        StorageLive(_10);
        _10 = &((*_1).1: i16);
        StorageLive(_11);
        _11 = &((*_2).1: i16);
        StorageLive(_14);
        StorageLive(_12);
        _12 = ((*_1).1: i16);
        StorageLive(_13);
        _13 = ((*_2).1: i16);
        _14 = Cmp(move _12, move _13);
        StorageDead(_13);
        StorageDead(_12);
        _0 = Option::<std::cmp::Ordering>::Some(move _14);
        StorageDead(_14);
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb3;
    }

    bb2: {
        _0 = _8;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}
