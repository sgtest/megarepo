// MIR for `range_inclusive_iter_next` after PreCodegen

fn range_inclusive_iter_next(_1: &mut RangeInclusive<u32>) -> Option<u32> {
    debug it => _1;                      // in scope 0 at $DIR/range_iter.rs:+0:34: +0:36
    let mut _0: std::option::Option<u32>; // return place in scope 0 at $DIR/range_iter.rs:+0:67: +0:78
    scope 1 (inlined iter::range::<impl Iterator for RangeInclusive<u32>>::next) { // at $DIR/range_iter.rs:16:8: 16:14
        debug self => _1;                // in scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL
    }

    bb0: {
        _0 = <RangeInclusive<u32> as iter::range::RangeInclusiveIteratorImpl>::spec_next(_1) -> bb1; // scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL
                                         // mir::Constant
                                         // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeInclusive<u32>) -> Option<<RangeInclusive<u32> as iter::range::RangeInclusiveIteratorImpl>::Item> {<RangeInclusive<u32> as iter::range::RangeInclusiveIteratorImpl>::spec_next}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at $DIR/range_iter.rs:+2:2: +2:2
    }
}
