- // MIR for `two` before Inline
+ // MIR for `two` after Inline
  
  fn two() -> () {
      let mut _0: ();                      // return place in scope 0 at $DIR/inline_cycle.rs:+0:10: +0:10
      let _1: ();                          // in scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12
+     let mut _2: fn() {f};                // in scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12
+     let mut _4: ();                      // in scope 0 at $DIR/inline_cycle.rs:55:5: 55:8
+     scope 1 (inlined call::<fn() {f}>) { // at $DIR/inline_cycle.rs:50:5: 50:12
+         debug f => _2;                   // in scope 1 at $DIR/inline_cycle.rs:54:22: 54:23
+         let _3: ();                      // in scope 1 at $DIR/inline_cycle.rs:55:5: 55:8
+         scope 2 (inlined <fn() {f} as FnOnce<()>>::call_once - shim(fn() {f})) { // at $DIR/inline_cycle.rs:55:5: 55:8
+             scope 3 (inlined f) {        // at $SRC_DIR/core/src/ops/function.rs:LL:COL
+                 scope 4 (inlined call::<fn() {f}>) { // at $DIR/inline_cycle.rs:60:5: 60:12
+                     debug f => f;        // in scope 4 at $DIR/inline_cycle.rs:54:22: 54:23
+                     let _5: ();          // in scope 4 at $DIR/inline_cycle.rs:55:5: 55:8
+                     scope 5 (inlined <fn() {f} as FnOnce<()>>::call_once - shim(fn() {f})) { // at $DIR/inline_cycle.rs:55:5: 55:8
+                     }
+                 }
+             }
+         }
+     }
  
      bb0: {
          StorageLive(_1);                 // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12
-         _1 = call::<fn() {f}>(f) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12
+         StorageLive(_2);                 // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12
+         _2 = f;                          // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12
                                           // mir::Constant
-                                          // + span: $DIR/inline_cycle.rs:50:5: 50:9
-                                          // + literal: Const { ty: fn(fn() {f}) {call::<fn() {f}>}, val: Value(<ZST>) }
-                                          // mir::Constant
                                           // + span: $DIR/inline_cycle.rs:50:10: 50:11
                                           // + literal: Const { ty: fn() {f}, val: Value(<ZST>) }
+         StorageLive(_3);                 // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12
+         StorageLive(_4);                 // scope 1 at $DIR/inline_cycle.rs:55:5: 55:8
+         _4 = const ();                   // scope 1 at $DIR/inline_cycle.rs:55:5: 55:8
+         StorageLive(_5);                 // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL
+         _5 = f() -> [return: bb1, unwind unreachable]; // scope 5 at $SRC_DIR/core/src/ops/function.rs:LL:COL
+                                          // mir::Constant
+                                          // + span: no-location
+                                          // + literal: Const { ty: fn() {f}, val: Value(<ZST>) }
      }
  
      bb1: {
+         StorageDead(_5);                 // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL
+         StorageDead(_4);                 // scope 1 at $DIR/inline_cycle.rs:55:5: 55:8
+         StorageDead(_3);                 // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12
+         StorageDead(_2);                 // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12
          StorageDead(_1);                 // scope 0 at $DIR/inline_cycle.rs:+1:12: +1:13
          _0 = const ();                   // scope 0 at $DIR/inline_cycle.rs:+0:10: +2:2
          return;                          // scope 0 at $DIR/inline_cycle.rs:+2:2: +2:2
      }
  }
  
