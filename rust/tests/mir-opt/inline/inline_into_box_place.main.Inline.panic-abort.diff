- // MIR for `main` before Inline
+ // MIR for `main` after Inline
  
  fn main() -> () {
      let mut _0: ();
      let _1: std::boxed::Box<std::vec::Vec<u32>>;
      let mut _2: std::vec::Vec<u32>;
      scope 1 {
          debug _x => _1;
      }
+     scope 2 (inlined Vec::<u32>::new) {
+         let mut _3: alloc::raw_vec::RawVec<u32>;
+     }
+     scope 3 (inlined Box::<Vec<u32>>::new) {
+         debug x => _2;
+         let mut _4: usize;
+         let mut _5: usize;
+         let mut _6: *mut u8;
+         let mut _7: *const std::vec::Vec<u32>;
+         scope 4 {
+         }
+     }
  
      bb0: {
          StorageLive(_1);
          StorageLive(_2);
-         _2 = Vec::<u32>::new() -> [return: bb1, unwind unreachable];
+         StorageLive(_3);
+         _3 = const _;
+         _2 = Vec::<u32> { buf: move _3, len: const 0_usize };
+         StorageDead(_3);
+         _4 = SizeOf(std::vec::Vec<u32>);
+         _5 = AlignOf(std::vec::Vec<u32>);
+         _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> [return: bb2, unwind unreachable];
      }
  
      bb1: {
-         _1 = Box::<Vec<u32>>::new(move _2) -> [return: bb2, unwind unreachable];
+         StorageDead(_1);
+         return;
      }
  
      bb2: {
+         _1 = ShallowInitBox(move _6, std::vec::Vec<u32>);
+         _7 = (((_1.0: std::ptr::Unique<std::vec::Vec<u32>>).0: std::ptr::NonNull<std::vec::Vec<u32>>).0: *const std::vec::Vec<u32>);
+         (*_7) = move _2;
          StorageDead(_2);
          _0 = const ();
-         drop(_1) -> [return: bb3, unwind unreachable];
-     }
- 
-     bb3: {
-         StorageDead(_1);
-         return;
+         drop(_1) -> [return: bb1, unwind unreachable];
      }
  }
  
