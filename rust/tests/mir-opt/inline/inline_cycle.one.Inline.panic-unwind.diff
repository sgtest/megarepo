- // MIR for `one` before Inline
+ // MIR for `one` after Inline
  
  fn one() -> () {
      let mut _0: ();                      // return place in scope 0 at $DIR/inline_cycle.rs:+0:10: +0:10
      let _1: ();                          // in scope 0 at $DIR/inline_cycle.rs:+1:5: +1:24
+     scope 1 (inlined <C as Call>::call) { // at $DIR/inline_cycle.rs:15:5: 15:24
+         scope 2 (inlined <A<C> as Call>::call) { // at $DIR/inline_cycle.rs:44:9: 44:23
+             scope 3 (inlined <B<C> as Call>::call) { // at $DIR/inline_cycle.rs:29:9: 29:31
+             }
+         }
+     }
  
      bb0: {
          StorageLive(_1);                 // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:24
-         _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:24
+         _1 = <C as Call>::call() -> bb1; // scope 3 at $DIR/inline_cycle.rs:37:9: 37:28
                                           // mir::Constant
-                                          // + span: $DIR/inline_cycle.rs:15:5: 15:22
+                                          // + span: $DIR/inline_cycle.rs:37:9: 37:26
                                           // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(<ZST>) }
      }
  
      bb1: {
          StorageDead(_1);                 // scope 0 at $DIR/inline_cycle.rs:+1:24: +1:25
          _0 = const ();                   // scope 0 at $DIR/inline_cycle.rs:+0:10: +2:2
          return;                          // scope 0 at $DIR/inline_cycle.rs:+2:2: +2:2
      }
  }
  
