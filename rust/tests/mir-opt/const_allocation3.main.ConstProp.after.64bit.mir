// MIR for `main` after ConstProp

fn main() -> () {
    let mut _0: ();
    let _1: &Packed;
    let mut _2: &&Packed;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const {alloc1: &&Packed};
        _1 = (*_2);
        StorageDead(_2);
        StorageDead(_1);
        _0 = const ();
        return;
    }
}

alloc1 (static: FOO, size: 8, align: 8) {
    ╾───────alloc12───────╼                         │ ╾──────╼
}

alloc12 (size: 180, align: 1) {
    0x00 │ ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab │ ................
    0x10 │ ab ab ab ab ab ab ab ab ab ab ab ab ╾──alloc7── │ ............╾───
    0x20 │ ──────────╼ 01 ef cd ab 00 00 00 00 00 00 00 00 │ ───╼............
    0x30 │ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 │ ................
    0x40 │ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 │ ................
    0x50 │ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 │ ................
    0x60 │ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 │ ................
    0x70 │ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 │ ................
    0x80 │ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ╾──── │ ..............╾─
    0x90 │ ─────alloc9─────╼ 00 00 ╾────alloc10+0x63─────╼ │ ─────╼..╾──────╼
    0xa0 │ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 │ ................
    0xb0 │ 00 00 00 00                                     │ ....
}

alloc7 (size: 4, align: 4) {
    2a 00 00 00                                     │ *...
}

alloc9 (fn: main)

alloc10 (size: 100, align: 1) {
    0x00 │ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 │ ................
    0x10 │ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 │ ................
    0x20 │ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 │ ................
    0x30 │ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 │ ................
    0x40 │ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 │ ................
    0x50 │ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 │ ................
    0x60 │ 00 00 00 00                                     │ ....
}
