error: changes to closure capture in Rust 2021 will affect `Send` trait implementation for closure
  --> $DIR/auto_traits.rs:14:19
   |
LL |     thread::spawn(move || unsafe {
   |                   ^^^^^^^^^^^^^^ in Rust 2018, this closure would implement `Send` as `fptr` implements `Send`, but in Rust 2021, this closure would no longer implement `Send` as `fptr.0` does not implement `Send`
...
LL |         *fptr.0 = 20;
   |         ------- in Rust 2018, closure captures all of `fptr`, but in Rust 2021, it only captures `fptr.0`
   |
note: the lint level is defined here
  --> $DIR/auto_traits.rs:2:9
   |
LL | #![deny(rust_2021_incompatible_closure_captures)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>
help: add a dummy let to cause `fptr` to be fully captured
   |
LL |     thread::spawn(move || { let _ = &fptr; unsafe {
LL |
LL |
LL |
LL |
LL |         *fptr.0 = 20;
 ...

error: changes to closure capture in Rust 2021 will affect `Sync`, `Send` trait implementation for closure
  --> $DIR/auto_traits.rs:34:19
   |
LL |     thread::spawn(move || unsafe {
   |                   ^^^^^^^^^^^^^^ in Rust 2018, this closure would implement `Sync`, `Send` as `fptr` implements `Sync`, `Send`, but in Rust 2021, this closure would no longer implement `Sync`, `Send` as `fptr.0.0` does not implement `Sync`, `Send`
...
LL |         *fptr.0.0 = 20;
   |         --------- in Rust 2018, closure captures all of `fptr`, but in Rust 2021, it only captures `fptr.0.0`
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>
help: add a dummy let to cause `fptr` to be fully captured
   |
LL |     thread::spawn(move || { let _ = &fptr; unsafe {
LL |
LL |
LL |
LL |
LL |         *fptr.0.0 = 20;
 ...

error: changes to closure capture in Rust 2021 will affect `Clone` trait implementation for closure and drop order
  --> $DIR/auto_traits.rs:58:13
   |
LL |     let c = || {
   |             ^^ in Rust 2018, this closure would implement `Clone` as `f` implements `Clone`, but in Rust 2021, this closure would no longer implement `Clone` as `f.1` does not implement `Clone`
...
LL |         let f_1 = f.1;
   |                   --- in Rust 2018, closure captures all of `f`, but in Rust 2021, it only captures `f.1`
...
LL | }
   | - in Rust 2018, `f` would be dropped here, but in Rust 2021, only `f.1` would be dropped here alongside the closure
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>
help: add a dummy let to cause `f` to be fully captured
   |
LL |     let c = || { let _ = &f; 
LL |
LL |
LL |
LL |
LL |         let f_1 = f.1;
 ...

error: aborting due to 3 previous errors

