error: `Send` trait implementation affected for closure because of `capture_disjoint_fields`
  --> $DIR/auto_traits.rs:13:19
   |
LL |       thread::spawn(move || unsafe {
   |  ___________________^
LL | |
LL | |
LL | |         *fptr.0 = 20;
LL | |     });
   | |_____^
   |
note: the lint level is defined here
  --> $DIR/auto_traits.rs:2:9
   |
LL | #![deny(disjoint_capture_migration)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
help: add a dummy let to cause `fptr` to be fully captured
   |
LL |     thread::spawn(move || { let _ = &fptr; unsafe {
LL |
LL |
LL |         *fptr.0 = 20;
LL |     } });
   |

error: `Sync`, `Send` trait implementation affected for closure because of `capture_disjoint_fields`
  --> $DIR/auto_traits.rs:30:19
   |
LL |       thread::spawn(move || unsafe {
   |  ___________________^
LL | |
LL | |
LL | |         *fptr.0.0 = 20;
LL | |     });
   | |_____^
   |
help: add a dummy let to cause `fptr` to be fully captured
   |
LL |     thread::spawn(move || { let _ = &fptr; unsafe {
LL |
LL |
LL |         *fptr.0.0 = 20;
LL |     } });
   |

error: `Clone` trait implementation, and drop order affected for closure because of `capture_disjoint_fields`
  --> $DIR/auto_traits.rs:51:13
   |
LL |       let c = || {
   |  _____________^
LL | |
LL | |
LL | |         let f_1 = f.1;
LL | |         println!("{:?}", f_1.0);
LL | |     };
   | |_____^
   |
help: add a dummy let to cause `f` to be fully captured
   |
LL |     let c = || { let _ = &f; 
LL |
LL |
LL |         let f_1 = f.1;
LL |         println!("{:?}", f_1.0);
LL |     };
   |

error: aborting due to 3 previous errors

