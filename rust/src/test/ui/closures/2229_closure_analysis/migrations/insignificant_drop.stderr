error: changes to closure capture in Rust 2021 will affect drop order
  --> $DIR/insignificant_drop.rs:15:13
   |
LL |     let c = || {
   |             ^^
...
LL |         let _t = t.0;
   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`
LL |
LL |         let _t1 = t1.0;
   |                   ---- in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.0`
LL |
LL |         let _t2 = t2.0;
   |                   ---- in Rust 2018, closure captures all of `t2`, but in Rust 2021, it only captures `t2.0`
...
LL | }
   | -
   | |
   | in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure
   | in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.0` would be dropped here alongside the closure
   | in Rust 2018, `t2` would be dropped here, but in Rust 2021, only `t2.0` would be dropped here alongside the closure
   |
note: the lint level is defined here
  --> $DIR/insignificant_drop.rs:3:9
   |
LL | #![deny(rust_2021_incompatible_closure_captures)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>
help: add a dummy let to cause `t`, `t1`, `t2` to be fully captured
   |
LL |     let c = || { let _ = (&t, &t1, &t2); 
LL |
LL |
LL |
LL | 
LL |         let _t = t.0;
 ...

error: changes to closure capture in Rust 2021 will affect drop order
  --> $DIR/insignificant_drop.rs:41:13
   |
LL |     let c = || {
   |             ^^
...
LL |         let _t = t.0;
   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`
LL |
LL |         let _t1 = t1.0;
   |                   ---- in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.0`
...
LL | }
   | -
   | |
   | in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure
   | in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.0` would be dropped here alongside the closure
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>
help: add a dummy let to cause `t`, `t1` to be fully captured
   |
LL |     let c = || { let _ = (&t, &t1); 
LL |
LL |
LL |
LL |         let _t = t.0;
LL |
 ...

error: changes to closure capture in Rust 2021 will affect drop order
  --> $DIR/insignificant_drop.rs:62:13
   |
LL |     let c = || {
   |             ^^
...
LL |         let _t = t.0;
   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`
...
LL | }
   | - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>
help: add a dummy let to cause `t` to be fully captured
   |
LL |     let c = || { let _ = &t; 
LL |
LL |
LL |
LL |         let _t = t.0;
LL |
 ...

error: changes to closure capture in Rust 2021 will affect drop order
  --> $DIR/insignificant_drop.rs:83:13
   |
LL |     let c = || {
   |             ^^
...
LL |         let _t = t.0;
   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`
...
LL | }
   | - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>
help: add a dummy let to cause `t` to be fully captured
   |
LL |     let c = || { let _ = &t; 
LL |
LL |
LL |
LL |         let _t = t.0;
LL |
 ...

error: changes to closure capture in Rust 2021 will affect drop order
  --> $DIR/insignificant_drop.rs:104:13
   |
LL |     let c = || {
   |             ^^
...
LL |         let _t = t.0;
   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`
...
LL | }
   | - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>
help: add a dummy let to cause `t` to be fully captured
   |
LL |     let c = || { let _ = &t; 
LL |
LL |
LL |
LL |         let _t = t.0;
LL |
 ...

error: changes to closure capture in Rust 2021 will affect drop order
  --> $DIR/insignificant_drop.rs:122:13
   |
LL |     let c = move || {
   |             ^^^^^^^
...
LL |         println!("{} {}", t1.1, t.1);
   |                           ----  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.1`
   |                           |
   |                           in Rust 2018, closure captures all of `t1`, but in Rust 2021, it only captures `t1.1`
...
LL | }
   | -
   | |
   | in Rust 2018, `t1` would be dropped here, but in Rust 2021, only `t1.1` would be dropped here alongside the closure
   | in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.1` would be dropped here alongside the closure
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>
help: add a dummy let to cause `t1`, `t` to be fully captured
   |
LL |     let c = move || { let _ = (&t1, &t); 
LL |
LL |
LL |
LL |         println!("{} {}", t1.1, t.1);
LL |
 ...

error: changes to closure capture in Rust 2021 will affect drop order
  --> $DIR/insignificant_drop.rs:142:13
   |
LL |     let c = || {
   |             ^^
...
LL |         let _t = t.0;
   |                  --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`
...
LL | }
   | - in Rust 2018, `t` would be dropped here, but in Rust 2021, only `t.0` would be dropped here alongside the closure
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>
help: add a dummy let to cause `t` to be fully captured
   |
LL |     let c = || { let _ = &t; 
LL |
LL |
LL |
LL |         let _t = t.0;
LL |
 ...

error: aborting due to 7 previous errors

