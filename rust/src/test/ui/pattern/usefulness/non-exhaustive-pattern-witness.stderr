error[E0004]: non-exhaustive patterns: `Foo { first: false, second: Some([_, _, _, _]) }` not covered
  --> $DIR/non-exhaustive-pattern-witness.rs:7:11
   |
LL |     match (Foo { first: true, second: None }) {
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `Foo { first: false, second: Some([_, _, _, _]) }` not covered
   |
note: `Foo` defined here
  --> $DIR/non-exhaustive-pattern-witness.rs:1:8
   |
LL | struct Foo {
   |        ^^^
   = note: the matched value is of type `Foo`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL ~         Foo { first: false, second: Some([1, 2, 3, 4]) } => (),
LL +         Foo { first: false, second: Some([_, _, _, _]) } => todo!()
   |

error[E0004]: non-exhaustive patterns: `Red` not covered
  --> $DIR/non-exhaustive-pattern-witness.rs:23:11
   |
LL |     match Color::Red {
   |           ^^^^^^^^^^ pattern `Red` not covered
   |
note: `Color` defined here
  --> $DIR/non-exhaustive-pattern-witness.rs:17:5
   |
LL | enum Color {
   |      -----
LL |     Red,
   |     ^^^ not covered
   = note: the matched value is of type `Color`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL ~         Color::Green => (),
LL +         Red => todo!()
   |

error[E0004]: non-exhaustive patterns: `East`, `South` and `West` not covered
  --> $DIR/non-exhaustive-pattern-witness.rs:35:11
   |
LL |     match Direction::North {
   |           ^^^^^^^^^^^^^^^^ patterns `East`, `South` and `West` not covered
   |
note: `Direction` defined here
  --> $DIR/non-exhaustive-pattern-witness.rs:31:12
   |
LL | enum Direction {
   |      ---------
LL |     North, East, South, West
   |            ^^^^  ^^^^^  ^^^^ not covered
   |            |     |
   |            |     not covered
   |            not covered
   = note: the matched value is of type `Direction`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms
   |
LL ~         Direction::North => (),
LL +         East | South | West => todo!()
   |

error[E0004]: non-exhaustive patterns: `Second`, `Third`, `Fourth` and 8 more not covered
  --> $DIR/non-exhaustive-pattern-witness.rs:46:11
   |
LL |     match ExcessiveEnum::First {
   |           ^^^^^^^^^^^^^^^^^^^^ patterns `Second`, `Third`, `Fourth` and 8 more not covered
   |
note: `ExcessiveEnum` defined here
  --> $DIR/non-exhaustive-pattern-witness.rs:41:6
   |
LL | enum ExcessiveEnum {
   |      ^^^^^^^^^^^^^
   = note: the matched value is of type `ExcessiveEnum`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown, or multiple match arms
   |
LL ~         ExcessiveEnum::First => (),
LL +         _ => todo!()
   |

error[E0004]: non-exhaustive patterns: `CustomRGBA { a: true, .. }` not covered
  --> $DIR/non-exhaustive-pattern-witness.rs:54:11
   |
LL |     match Color::Red {
   |           ^^^^^^^^^^ pattern `CustomRGBA { a: true, .. }` not covered
   |
note: `Color` defined here
  --> $DIR/non-exhaustive-pattern-witness.rs:19:5
   |
LL | enum Color {
   |      -----
...
LL |     CustomRGBA { a: bool, r: u8, g: u8, b: u8 }
   |     ^^^^^^^^^^ not covered
   = note: the matched value is of type `Color`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL ~         Color::CustomRGBA { a: false, r: _, g: _, b: _ } => (),
LL +         CustomRGBA { a: true, .. } => todo!()
   |

error[E0004]: non-exhaustive patterns: `[Second(true), Second(false)]` not covered
  --> $DIR/non-exhaustive-pattern-witness.rs:70:11
   |
LL |     match *x {
   |           ^^ pattern `[Second(true), Second(false)]` not covered
   |
   = note: the matched value is of type `[Enum]`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL ~         [_, _, ref tail @ .., _] => (),
LL +         [Second(true), Second(false)] => todo!()
   |

error[E0004]: non-exhaustive patterns: `((), false)` not covered
  --> $DIR/non-exhaustive-pattern-witness.rs:83:11
   |
LL |     match ((), false) {
   |           ^^^^^^^^^^^ pattern `((), false)` not covered
   |
   = note: the matched value is of type `((), bool)`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL ~         ((), true) => (),
LL +         ((), false) => todo!()
   |

error: aborting due to 7 previous errors

For more information about this error, try `rustc --explain E0004`.
