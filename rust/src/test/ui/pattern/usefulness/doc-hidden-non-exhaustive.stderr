error[E0004]: non-exhaustive patterns: `_` not covered
  --> $DIR/doc-hidden-non-exhaustive.rs:15:11
   |
LL |     match HiddenEnum::A {
   |           ^^^^^^^^^^^^^ pattern `_` not covered
   |
note: `HiddenEnum` defined here
  --> $DIR/auxiliary/hidden.rs:1:1
   |
LL | / pub enum HiddenEnum {
LL | |     A,
LL | |     B,
LL | |     #[doc(hidden)]
LL | |     C,
LL | | }
   | |_^
   = note: the matched value is of type `HiddenEnum`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL ~         HiddenEnum::B => {}
LL +         _ => todo!()
   |

error[E0004]: non-exhaustive patterns: `B` not covered
  --> $DIR/doc-hidden-non-exhaustive.rs:21:11
   |
LL |     match HiddenEnum::A {
   |           ^^^^^^^^^^^^^ pattern `B` not covered
   |
note: `HiddenEnum` defined here
  --> $DIR/auxiliary/hidden.rs:3:5
   |
LL | / pub enum HiddenEnum {
LL | |     A,
LL | |     B,
   | |     ^ not covered
LL | |     #[doc(hidden)]
LL | |     C,
LL | | }
   | |_-
   = note: the matched value is of type `HiddenEnum`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL ~         HiddenEnum::C => {}
LL +         B => todo!()
   |

error[E0004]: non-exhaustive patterns: `B` and `_` not covered
  --> $DIR/doc-hidden-non-exhaustive.rs:27:11
   |
LL |     match HiddenEnum::A {
   |           ^^^^^^^^^^^^^ patterns `B` and `_` not covered
   |
note: `HiddenEnum` defined here
  --> $DIR/auxiliary/hidden.rs:3:5
   |
LL | / pub enum HiddenEnum {
LL | |     A,
LL | |     B,
   | |     ^ not covered
LL | |     #[doc(hidden)]
LL | |     C,
LL | | }
   | |_-
   = note: the matched value is of type `HiddenEnum`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms
   |
LL ~         HiddenEnum::A => {}
LL +         B | _ => todo!()
   |

error[E0004]: non-exhaustive patterns: `Some(B)` and `Some(_)` not covered
  --> $DIR/doc-hidden-non-exhaustive.rs:32:11
   |
LL |     match None {
   |           ^^^^ patterns `Some(B)` and `Some(_)` not covered
   |
note: `Option<HiddenEnum>` defined here
  --> $SRC_DIR/core/src/option.rs:LL:COL
   |
LL | / pub enum Option<T> {
LL | |     /// No value.
LL | |     #[lang = "None"]
LL | |     #[stable(feature = "rust1", since = "1.0.0")]
...  |
LL | |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
   | |     ^^^^ not covered
LL | | }
   | |_-
   = note: the matched value is of type `Option<HiddenEnum>`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms
   |
LL ~         Some(HiddenEnum::A) => {}
LL +         Some(B) | Some(_) => todo!()
   |

error[E0004]: non-exhaustive patterns: `C` not covered
  --> $DIR/doc-hidden-non-exhaustive.rs:38:11
   |
LL |     match InCrate::A {
   |           ^^^^^^^^^^ pattern `C` not covered
   |
note: `InCrate` defined here
  --> $DIR/doc-hidden-non-exhaustive.rs:11:5
   |
LL | enum InCrate {
   |      -------
...
LL |     C,
   |     ^ not covered
   = note: the matched value is of type `InCrate`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL ~         InCrate::B => {}
LL +         C => todo!()
   |

error: aborting due to 5 previous errors

For more information about this error, try `rustc --explain E0004`.
