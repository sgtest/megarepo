error: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:28:9
   |
LL |     let a @ ref b = U;
   |         -^^^-----
   |         |   |
   |         |   value borrowed here after move
   |         value moved into `a` here
   |         move occurs because `a` has type `U` which does not implement the `Copy` trait

error: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:30:9
   |
LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);
   |         -^^^^^^^^^^^^---------^^^^^^-----^
   |         |            |              |
   |         |            |              value borrowed here after move
   |         |            value borrowed here after move
   |         value moved into `a` here
   |         move occurs because `a` has type `(U, U)` which does not implement the `Copy` trait

error: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:30:14
   |
LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);
   |              -----^^^---------
   |              |       |
   |              |       value borrowed here after move
   |              value moved into `b` here
   |              move occurs because `b` has type `U` which does not implement the `Copy` trait

error: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:30:33
   |
LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);
   |                                 -^^^-----
   |                                 |   |
   |                                 |   value borrowed here after move
   |                                 value moved into `d` here
   |                                 move occurs because `d` has type `U` which does not implement the `Copy` trait

error: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:37:9
   |
LL |     let a @ [ref mut b, ref c] = [U, U];
   |         -^^^^---------^^-----^
   |         |    |          |
   |         |    |          value borrowed here after move
   |         |    value borrowed here after move
   |         value moved into `a` here
   |         move occurs because `a` has type `[U; 2]` which does not implement the `Copy` trait

error: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:40:9
   |
LL |     let a @ ref b = u();
   |         -^^^-----
   |         |   |
   |         |   value borrowed here after move
   |         value moved into `a` here
   |         move occurs because `a` has type `U` which does not implement the `Copy` trait

error: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:43:9
   |
LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());
   |         -^^^^^^^^^^^^---------^^^^^^-----^
   |         |            |              |
   |         |            |              value borrowed here after move
   |         |            value borrowed here after move
   |         value moved into `a` here
   |         move occurs because `a` has type `(U, U)` which does not implement the `Copy` trait

error: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:43:14
   |
LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());
   |              -----^^^---------
   |              |       |
   |              |       value borrowed here after move
   |              value moved into `b` here
   |              move occurs because `b` has type `U` which does not implement the `Copy` trait

error: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:43:33
   |
LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());
   |                                 -^^^-----
   |                                 |   |
   |                                 |   value borrowed here after move
   |                                 value moved into `d` here
   |                                 move occurs because `d` has type `U` which does not implement the `Copy` trait

error: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:50:9
   |
LL |     let a @ [ref mut b, ref c] = [u(), u()];
   |         -^^^^---------^^-----^
   |         |    |          |
   |         |    |          value borrowed here after move
   |         |    value borrowed here after move
   |         value moved into `a` here
   |         move occurs because `a` has type `[U; 2]` which does not implement the `Copy` trait

error: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:55:9
   |
LL |         a @ Some(ref b) => {}
   |         -^^^^^^^^-----^
   |         |        |
   |         |        value borrowed here after move
   |         value moved into `a` here
   |         move occurs because `a` has type `Option<U>` which does not implement the `Copy` trait

error: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:60:9
   |
LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}
   |         -^^^^^^^^^^^^^^^^^---------^^^^^^-----^^
   |         |                 |              |
   |         |                 |              value borrowed here after move
   |         |                 value borrowed here after move
   |         value moved into `a` here
   |         move occurs because `a` has type `Option<(U, U)>` which does not implement the `Copy` trait

error: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:60:19
   |
LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}
   |                   -----^^^---------
   |                   |       |
   |                   |       value borrowed here after move
   |                   value moved into `b` here
   |                   move occurs because `b` has type `U` which does not implement the `Copy` trait

error: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:60:38
   |
LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}
   |                                      -^^^-----
   |                                      |   |
   |                                      |   value borrowed here after move
   |                                      value moved into `d` here
   |                                      move occurs because `d` has type `U` which does not implement the `Copy` trait

error: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:70:9
   |
LL |         mut a @ Some([ref b, ref mut c]) => {}
   |         -----^^^^^^^^^-----^^---------^^
   |         |             |      |
   |         |             |      value borrowed here after move
   |         |             value borrowed here after move
   |         value moved into `a` here
   |         move occurs because `a` has type `Option<[U; 2]>` which does not implement the `Copy` trait

error: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:76:9
   |
LL |         a @ Some(ref b) => {}
   |         -^^^^^^^^-----^
   |         |        |
   |         |        value borrowed here after move
   |         value moved into `a` here
   |         move occurs because `a` has type `Option<U>` which does not implement the `Copy` trait

error: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:82:9
   |
LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}
   |         -^^^^^^^^^^^^^^^^^---------^^^^^^-----^^
   |         |                 |              |
   |         |                 |              value borrowed here after move
   |         |                 value borrowed here after move
   |         value moved into `a` here
   |         move occurs because `a` has type `Option<(U, U)>` which does not implement the `Copy` trait

error: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:82:19
   |
LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}
   |                   -----^^^---------
   |                   |       |
   |                   |       value borrowed here after move
   |                   value moved into `b` here
   |                   move occurs because `b` has type `U` which does not implement the `Copy` trait

error: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:82:38
   |
LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}
   |                                      -^^^-----
   |                                      |   |
   |                                      |   value borrowed here after move
   |                                      value moved into `d` here
   |                                      move occurs because `d` has type `U` which does not implement the `Copy` trait

error: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:92:9
   |
LL |         mut a @ Some([ref b, ref mut c]) => {}
   |         -----^^^^^^^^^-----^^---------^^
   |         |             |      |
   |         |             |      value borrowed here after move
   |         |             value borrowed here after move
   |         value moved into `a` here
   |         move occurs because `a` has type `Option<[U; 2]>` which does not implement the `Copy` trait

error: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:13:11
   |
LL |     fn f1(a @ ref b: U) {}
   |           -^^^-----
   |           |   |
   |           |   value borrowed here after move
   |           value moved into `a` here
   |           move occurs because `a` has type `U` which does not implement the `Copy` trait

error: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:17:11
   |
LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}
   |           -----^^^^^^^^-----^^^^^^^^^^-----^
   |           |            |              |
   |           |            |              value borrowed here after move
   |           |            value borrowed here after move
   |           value moved into `a` here
   |           move occurs because `a` has type `(U, U)` which does not implement the `Copy` trait

error: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:17:20
   |
LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}
   |                    -^^^-----
   |                    |   |
   |                    |   value borrowed here after move
   |                    value moved into `b` here
   |                    move occurs because `b` has type `U` which does not implement the `Copy` trait

error: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:17:31
   |
LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}
   |                               -----^^^-----
   |                               |       |
   |                               |       value borrowed here after move
   |                               value moved into `d` here
   |                               move occurs because `d` has type `U` which does not implement the `Copy` trait

error: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:24:11
   |
LL |     fn f3(a @ [ref mut b, ref c]: [U; 2]) {}
   |           -^^^^---------^^-----^
   |           |    |          |
   |           |    |          value borrowed here after move
   |           |    value borrowed here after move
   |           value moved into `a` here
   |           move occurs because `a` has type `[U; 2]` which does not implement the `Copy` trait

error[E0382]: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:30:22
   |
LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);
   |              --------^^^^^^^^^
   |              |       |
   |              |       value borrowed here after move
   |              value moved here
   |
   = note: move occurs because value has type `U`, which does not implement the `Copy` trait

error[E0382]: use of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:30:33
   |
LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);
   |         ------------------------^^^^^^^^^-   ------ move occurs because value has type `(U, U)`, which does not implement the `Copy` trait
   |         |                       |
   |         |                       value used here after move
   |         value moved here

error[E0382]: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:30:37
   |
LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);
   |                                 ----^^^^^
   |                                 |   |
   |                                 |   value borrowed here after move
   |                                 value moved here
   |
   = note: move occurs because value has type `U`, which does not implement the `Copy` trait

error[E0382]: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:37:25
   |
LL |     let a @ [ref mut b, ref c] = [U, U];
   |         ----------------^^^^^-   ------ move occurs because value has type `[U; 2]`, which does not implement the `Copy` trait
   |         |               |
   |         |               value borrowed here after move
   |         value moved here

error[E0382]: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:40:13
   |
LL |     let a @ ref b = u();
   |         ----^^^^^   --- move occurs because value has type `U`, which does not implement the `Copy` trait
   |         |   |
   |         |   value borrowed here after move
   |         value moved here

error[E0382]: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:43:22
   |
LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());
   |              --------^^^^^^^^^
   |              |       |
   |              |       value borrowed here after move
   |              value moved here
   |
   = note: move occurs because value has type `U`, which does not implement the `Copy` trait

error[E0382]: use of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:43:33
   |
LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());
   |         ------------------------^^^^^^^^^-   ---------- move occurs because value has type `(U, U)`, which does not implement the `Copy` trait
   |         |                       |
   |         |                       value used here after move
   |         value moved here

error[E0382]: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:43:37
   |
LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());
   |                                 ----^^^^^
   |                                 |   |
   |                                 |   value borrowed here after move
   |                                 value moved here
   |
   = note: move occurs because value has type `U`, which does not implement the `Copy` trait

error[E0382]: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:50:25
   |
LL |     let a @ [ref mut b, ref c] = [u(), u()];
   |         ----------------^^^^^-   ---------- move occurs because value has type `[U; 2]`, which does not implement the `Copy` trait
   |         |               |
   |         |               value borrowed here after move
   |         value moved here

error[E0382]: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:60:27
   |
LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}
   |                   --------^^^^^^^^^
   |                   |       |
   |                   |       value borrowed here after move
   |                   value moved here
   |
   = note: move occurs because value has type `U`, which does not implement the `Copy` trait
help: borrow this field in the pattern to avoid moving the value
   |
LL |         a @ Some((ref mut b @ ref mut c, d @ ref e)) => {}
   |                   ^^^

error[E0382]: use of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:60:38
   |
LL |     match Some((U, U)) {
   |           ------------ move occurs because value has type `Option<(U, U)>`, which does not implement the `Copy` trait
LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}
   |         -----------------------------^^^^^^^^^--
   |         |                            |
   |         |                            value used here after move
   |         value moved here

error[E0382]: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:60:42
   |
LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}
   |                                      ----^^^^^
   |                                      |   |
   |                                      |   value borrowed here after move
   |                                      value moved here
   |
   = note: move occurs because value has type `U`, which does not implement the `Copy` trait
help: borrow this field in the pattern to avoid moving the value
   |
LL |         a @ Some((mut b @ ref mut c, ref d @ ref e)) => {}
   |                                      ^^^

error[E0382]: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:70:30
   |
LL |     match Some([U, U]) {
   |           ------------ move occurs because value has type `Option<[U; 2]>`, which does not implement the `Copy` trait
LL |         mut a @ Some([ref b, ref mut c]) => {}
   |         ---------------------^^^^^^^^^--
   |         |                    |
   |         |                    value borrowed here after move
   |         value moved here

error[E0382]: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:76:18
   |
LL |     match Some(u()) {
   |           --------- move occurs because value has type `Option<U>`, which does not implement the `Copy` trait
LL |         a @ Some(ref b) => {}
   |         ---------^^^^^-
   |         |        |
   |         |        value borrowed here after move
   |         value moved here

error[E0382]: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:82:27
   |
LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}
   |                   --------^^^^^^^^^
   |                   |       |
   |                   |       value borrowed here after move
   |                   value moved here
   |
   = note: move occurs because value has type `U`, which does not implement the `Copy` trait
help: borrow this field in the pattern to avoid moving the value
   |
LL |         a @ Some((ref mut b @ ref mut c, d @ ref e)) => {}
   |                   ^^^

error[E0382]: use of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:82:38
   |
LL |     match Some((u(), u())) {
   |           ---------------- move occurs because value has type `Option<(U, U)>`, which does not implement the `Copy` trait
LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}
   |         -----------------------------^^^^^^^^^--
   |         |                            |
   |         |                            value used here after move
   |         value moved here

error[E0382]: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:82:42
   |
LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}
   |                                      ----^^^^^
   |                                      |   |
   |                                      |   value borrowed here after move
   |                                      value moved here
   |
   = note: move occurs because value has type `U`, which does not implement the `Copy` trait
help: borrow this field in the pattern to avoid moving the value
   |
LL |         a @ Some((mut b @ ref mut c, ref d @ ref e)) => {}
   |                                      ^^^

error[E0382]: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:92:30
   |
LL |     match Some([u(), u()]) {
   |           ---------------- move occurs because value has type `Option<[U; 2]>`, which does not implement the `Copy` trait
LL |         mut a @ Some([ref b, ref mut c]) => {}
   |         ---------------------^^^^^^^^^--
   |         |                    |
   |         |                    value borrowed here after move
   |         value moved here

error[E0382]: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:13:15
   |
LL |     fn f1(a @ ref b: U) {}
   |           ----^^^^^
   |           |   |
   |           |   value borrowed here after move
   |           value moved here
   |           move occurs because value has type `U`, which does not implement the `Copy` trait

error[E0382]: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:17:24
   |
LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}
   |                    ----^^^^^
   |                    |   |
   |                    |   value borrowed here after move
   |                    value moved here
   |
   = note: move occurs because value has type `U`, which does not implement the `Copy` trait

error[E0382]: use of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:17:31
   |
LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}
   |           --------------------^^^^^^^^^^^^^-
   |           |                   |
   |           |                   value used here after move
   |           value moved here
   |           move occurs because value has type `(U, U)`, which does not implement the `Copy` trait

error[E0382]: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:17:39
   |
LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}
   |                               --------^^^^^
   |                               |       |
   |                               |       value borrowed here after move
   |                               value moved here
   |
   = note: move occurs because value has type `U`, which does not implement the `Copy` trait

error[E0382]: borrow of moved value
  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:24:27
   |
LL |     fn f3(a @ [ref mut b, ref c]: [U; 2]) {}
   |           ----------------^^^^^-
   |           |               |
   |           |               value borrowed here after move
   |           value moved here
   |           move occurs because value has type `[U; 2]`, which does not implement the `Copy` trait

error: aborting due to 48 previous errors

For more information about this error, try `rustc --explain E0382`.
