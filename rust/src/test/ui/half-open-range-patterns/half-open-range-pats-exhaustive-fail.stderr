error[E0004]: non-exhaustive patterns: `_` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:16:8
   |
LL |     m!(0f32, core::f32::NEG_INFINITY..);
   |        ^^^^ pattern `_` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `f32`

error[E0004]: non-exhaustive patterns: `_` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:17:8
   |
LL |     m!(0f32, ..core::f32::INFINITY);
   |        ^^^^ pattern `_` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `f32`

error[E0004]: non-exhaustive patterns: `'\u{10ffff}'` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:26:8
   |
LL |     m!('a', ..core::char::MAX);
   |        ^^^ pattern `'\u{10ffff}'` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `char`

error[E0004]: non-exhaustive patterns: `'\u{10fffe}'..='\u{10ffff}'` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:27:8
   |
LL |     m!('a', ..ALMOST_MAX);
   |        ^^^ pattern `'\u{10fffe}'..='\u{10ffff}'` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `char`

error[E0004]: non-exhaustive patterns: `'\u{0}'` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:28:8
   |
LL |     m!('a', ALMOST_MIN..);
   |        ^^^ pattern `'\u{0}'` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `char`

error[E0004]: non-exhaustive patterns: `'\u{10ffff}'` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:29:8
   |
LL |     m!('a', ..=ALMOST_MAX);
   |        ^^^ pattern `'\u{10ffff}'` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `char`

error[E0004]: non-exhaustive patterns: `'b'` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:30:8
   |
LL |     m!('a', ..=VAL | VAL_2..);
   |        ^^^ pattern `'b'` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `char`

error[E0004]: non-exhaustive patterns: `'b'` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:31:8
   |
LL |     m!('a', ..VAL_1 | VAL_2..);
   |        ^^^ pattern `'b'` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `char`

error[E0004]: non-exhaustive patterns: `std::u8::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:41:12
   |
LL |         m!(0, ..core::u8::MAX);
   |            ^ pattern `std::u8::MAX` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `u8`

error[E0004]: non-exhaustive patterns: `254u8..=std::u8::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:42:12
   |
LL |         m!(0, ..ALMOST_MAX);
   |            ^ pattern `254u8..=std::u8::MAX` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `u8`

error[E0004]: non-exhaustive patterns: `0u8` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:43:12
   |
LL |         m!(0, ALMOST_MIN..);
   |            ^ pattern `0u8` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `u8`

error[E0004]: non-exhaustive patterns: `std::u8::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:44:12
   |
LL |         m!(0, ..=ALMOST_MAX);
   |            ^ pattern `std::u8::MAX` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `u8`

error[E0004]: non-exhaustive patterns: `43u8` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:45:12
   |
LL |         m!(0, ..=VAL | VAL_2..);
   |            ^ pattern `43u8` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `u8`

error[E0004]: non-exhaustive patterns: `43u8` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:46:12
   |
LL |         m!(0, ..VAL_1 | VAL_2..);
   |            ^ pattern `43u8` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `u8`

error[E0004]: non-exhaustive patterns: `std::u16::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:54:12
   |
LL |         m!(0, ..core::u16::MAX);
   |            ^ pattern `std::u16::MAX` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `u16`

error[E0004]: non-exhaustive patterns: `65534u16..=std::u16::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:55:12
   |
LL |         m!(0, ..ALMOST_MAX);
   |            ^ pattern `65534u16..=std::u16::MAX` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `u16`

error[E0004]: non-exhaustive patterns: `0u16` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:56:12
   |
LL |         m!(0, ALMOST_MIN..);
   |            ^ pattern `0u16` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `u16`

error[E0004]: non-exhaustive patterns: `std::u16::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:57:12
   |
LL |         m!(0, ..=ALMOST_MAX);
   |            ^ pattern `std::u16::MAX` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `u16`

error[E0004]: non-exhaustive patterns: `43u16` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:58:12
   |
LL |         m!(0, ..=VAL | VAL_2..);
   |            ^ pattern `43u16` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `u16`

error[E0004]: non-exhaustive patterns: `43u16` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:59:12
   |
LL |         m!(0, ..VAL_1 | VAL_2..);
   |            ^ pattern `43u16` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `u16`

error[E0004]: non-exhaustive patterns: `std::u32::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:67:12
   |
LL |         m!(0, ..core::u32::MAX);
   |            ^ pattern `std::u32::MAX` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `u32`

error[E0004]: non-exhaustive patterns: `4294967294u32..=std::u32::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:68:12
   |
LL |         m!(0, ..ALMOST_MAX);
   |            ^ pattern `4294967294u32..=std::u32::MAX` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `u32`

error[E0004]: non-exhaustive patterns: `0u32` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:69:12
   |
LL |         m!(0, ALMOST_MIN..);
   |            ^ pattern `0u32` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `u32`

error[E0004]: non-exhaustive patterns: `std::u32::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:70:12
   |
LL |         m!(0, ..=ALMOST_MAX);
   |            ^ pattern `std::u32::MAX` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `u32`

error[E0004]: non-exhaustive patterns: `43u32` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:71:12
   |
LL |         m!(0, ..=VAL | VAL_2..);
   |            ^ pattern `43u32` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `u32`

error[E0004]: non-exhaustive patterns: `43u32` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:72:12
   |
LL |         m!(0, ..VAL_1 | VAL_2..);
   |            ^ pattern `43u32` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `u32`

error[E0004]: non-exhaustive patterns: `std::u64::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:80:12
   |
LL |         m!(0, ..core::u64::MAX);
   |            ^ pattern `std::u64::MAX` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `u64`

error[E0004]: non-exhaustive patterns: `18446744073709551614u64..=std::u64::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:81:12
   |
LL |         m!(0, ..ALMOST_MAX);
   |            ^ pattern `18446744073709551614u64..=std::u64::MAX` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `u64`

error[E0004]: non-exhaustive patterns: `0u64` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:82:12
   |
LL |         m!(0, ALMOST_MIN..);
   |            ^ pattern `0u64` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `u64`

error[E0004]: non-exhaustive patterns: `std::u64::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:83:12
   |
LL |         m!(0, ..=ALMOST_MAX);
   |            ^ pattern `std::u64::MAX` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `u64`

error[E0004]: non-exhaustive patterns: `43u64` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:84:12
   |
LL |         m!(0, ..=VAL | VAL_2..);
   |            ^ pattern `43u64` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `u64`

error[E0004]: non-exhaustive patterns: `43u64` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:85:12
   |
LL |         m!(0, ..VAL_1 | VAL_2..);
   |            ^ pattern `43u64` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `u64`

error[E0004]: non-exhaustive patterns: `std::u128::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:93:12
   |
LL |         m!(0, ..core::u128::MAX);
   |            ^ pattern `std::u128::MAX` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `u128`

error[E0004]: non-exhaustive patterns: `340282366920938463463374607431768211454u128..=std::u128::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:94:12
   |
LL |         m!(0, ..ALMOST_MAX);
   |            ^ pattern `340282366920938463463374607431768211454u128..=std::u128::MAX` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `u128`

error[E0004]: non-exhaustive patterns: `0u128` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:95:12
   |
LL |         m!(0, ALMOST_MIN..);
   |            ^ pattern `0u128` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `u128`

error[E0004]: non-exhaustive patterns: `std::u128::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:96:12
   |
LL |         m!(0, ..=ALMOST_MAX);
   |            ^ pattern `std::u128::MAX` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `u128`

error[E0004]: non-exhaustive patterns: `43u128` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:97:12
   |
LL |         m!(0, ..=VAL | VAL_2..);
   |            ^ pattern `43u128` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `u128`

error[E0004]: non-exhaustive patterns: `43u128` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:98:12
   |
LL |         m!(0, ..VAL_1 | VAL_2..);
   |            ^ pattern `43u128` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `u128`

error[E0004]: non-exhaustive patterns: `std::i8::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:109:12
   |
LL |         m!(0, ..core::i8::MAX);
   |            ^ pattern `std::i8::MAX` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `i8`

error[E0004]: non-exhaustive patterns: `126i8..=std::i8::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:110:12
   |
LL |         m!(0, ..ALMOST_MAX);
   |            ^ pattern `126i8..=std::i8::MAX` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `i8`

error[E0004]: non-exhaustive patterns: `std::i8::MIN` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:111:12
   |
LL |         m!(0, ALMOST_MIN..);
   |            ^ pattern `std::i8::MIN` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `i8`

error[E0004]: non-exhaustive patterns: `std::i8::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:112:12
   |
LL |         m!(0, ..=ALMOST_MAX);
   |            ^ pattern `std::i8::MAX` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `i8`

error[E0004]: non-exhaustive patterns: `43i8` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:113:12
   |
LL |         m!(0, ..=VAL | VAL_2..);
   |            ^ pattern `43i8` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `i8`

error[E0004]: non-exhaustive patterns: `43i8` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:114:12
   |
LL |         m!(0, ..VAL_1 | VAL_2..);
   |            ^ pattern `43i8` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `i8`

error[E0004]: non-exhaustive patterns: `std::i16::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:122:12
   |
LL |         m!(0, ..core::i16::MAX);
   |            ^ pattern `std::i16::MAX` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `i16`

error[E0004]: non-exhaustive patterns: `32766i16..=std::i16::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:123:12
   |
LL |         m!(0, ..ALMOST_MAX);
   |            ^ pattern `32766i16..=std::i16::MAX` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `i16`

error[E0004]: non-exhaustive patterns: `std::i16::MIN` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:124:12
   |
LL |         m!(0, ALMOST_MIN..);
   |            ^ pattern `std::i16::MIN` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `i16`

error[E0004]: non-exhaustive patterns: `std::i16::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:125:12
   |
LL |         m!(0, ..=ALMOST_MAX);
   |            ^ pattern `std::i16::MAX` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `i16`

error[E0004]: non-exhaustive patterns: `43i16` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:126:12
   |
LL |         m!(0, ..=VAL | VAL_2..);
   |            ^ pattern `43i16` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `i16`

error[E0004]: non-exhaustive patterns: `43i16` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:127:12
   |
LL |         m!(0, ..VAL_1 | VAL_2..);
   |            ^ pattern `43i16` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `i16`

error[E0004]: non-exhaustive patterns: `std::i32::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:135:12
   |
LL |         m!(0, ..core::i32::MAX);
   |            ^ pattern `std::i32::MAX` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `i32`

error[E0004]: non-exhaustive patterns: `2147483646i32..=std::i32::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:136:12
   |
LL |         m!(0, ..ALMOST_MAX);
   |            ^ pattern `2147483646i32..=std::i32::MAX` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `i32`

error[E0004]: non-exhaustive patterns: `std::i32::MIN` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:137:12
   |
LL |         m!(0, ALMOST_MIN..);
   |            ^ pattern `std::i32::MIN` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `i32`

error[E0004]: non-exhaustive patterns: `std::i32::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:138:12
   |
LL |         m!(0, ..=ALMOST_MAX);
   |            ^ pattern `std::i32::MAX` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `i32`

error[E0004]: non-exhaustive patterns: `43i32` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:139:12
   |
LL |         m!(0, ..=VAL | VAL_2..);
   |            ^ pattern `43i32` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `i32`

error[E0004]: non-exhaustive patterns: `43i32` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:140:12
   |
LL |         m!(0, ..VAL_1 | VAL_2..);
   |            ^ pattern `43i32` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `i32`

error[E0004]: non-exhaustive patterns: `std::i64::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:148:12
   |
LL |         m!(0, ..core::i64::MAX);
   |            ^ pattern `std::i64::MAX` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `i64`

error[E0004]: non-exhaustive patterns: `9223372036854775806i64..=std::i64::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:149:12
   |
LL |         m!(0, ..ALMOST_MAX);
   |            ^ pattern `9223372036854775806i64..=std::i64::MAX` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `i64`

error[E0004]: non-exhaustive patterns: `std::i64::MIN` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:150:12
   |
LL |         m!(0, ALMOST_MIN..);
   |            ^ pattern `std::i64::MIN` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `i64`

error[E0004]: non-exhaustive patterns: `std::i64::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:151:12
   |
LL |         m!(0, ..=ALMOST_MAX);
   |            ^ pattern `std::i64::MAX` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `i64`

error[E0004]: non-exhaustive patterns: `43i64` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:152:12
   |
LL |         m!(0, ..=VAL | VAL_2..);
   |            ^ pattern `43i64` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `i64`

error[E0004]: non-exhaustive patterns: `43i64` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:153:12
   |
LL |         m!(0, ..VAL_1 | VAL_2..);
   |            ^ pattern `43i64` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `i64`

error[E0004]: non-exhaustive patterns: `std::i128::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:161:12
   |
LL |         m!(0, ..core::i128::MAX);
   |            ^ pattern `std::i128::MAX` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `i128`

error[E0004]: non-exhaustive patterns: `170141183460469231731687303715884105726i128..=std::i128::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:162:12
   |
LL |         m!(0, ..ALMOST_MAX);
   |            ^ pattern `170141183460469231731687303715884105726i128..=std::i128::MAX` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `i128`

error[E0004]: non-exhaustive patterns: `std::i128::MIN` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:163:12
   |
LL |         m!(0, ALMOST_MIN..);
   |            ^ pattern `std::i128::MIN` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `i128`

error[E0004]: non-exhaustive patterns: `std::i128::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:164:12
   |
LL |         m!(0, ..=ALMOST_MAX);
   |            ^ pattern `std::i128::MAX` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `i128`

error[E0004]: non-exhaustive patterns: `43i128` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:165:12
   |
LL |         m!(0, ..=VAL | VAL_2..);
   |            ^ pattern `43i128` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `i128`

error[E0004]: non-exhaustive patterns: `43i128` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:166:12
   |
LL |         m!(0, ..VAL_1 | VAL_2..);
   |            ^ pattern `43i128` not covered
   |
   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
   = note: the matched value is of type `i128`

error: aborting due to 68 previous errors

For more information about this error, try `rustc --explain E0004`.
