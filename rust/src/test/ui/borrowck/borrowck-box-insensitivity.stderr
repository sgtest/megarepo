error[E0382]: use of moved value: `a`
  --> $DIR/borrowck-box-insensitivity.rs:37:9
   |
35 |     let _x = a.x;
   |         -- value moved here
36 |     //~^ value moved here
37 |     let _y = a.y; //~ ERROR use of moved
   |         ^^ value used here after move
   |
   = note: move occurs because `a.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait

error[E0382]: use of moved value: `a`
  --> $DIR/borrowck-box-insensitivity.rs:46:9
   |
44 |     let _x = a.x;
   |         -- value moved here
45 |     //~^ value moved here
46 |     let _y = a.y; //~ ERROR use of moved
   |         ^^ value used here after move
   |
   = note: move occurs because `a.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait

error[E0382]: use of moved value: `a`
  --> $DIR/borrowck-box-insensitivity.rs:55:15
   |
53 |     let _x = a.x;
   |         -- value moved here
54 |     //~^ value moved here
55 |     let _y = &a.y; //~ ERROR use of moved
   |               ^^^ value used here after move
   |
   = note: move occurs because `a.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait

error[E0505]: cannot move out of `a.y` because it is borrowed
  --> $DIR/borrowck-box-insensitivity.rs:63:9
   |
62 |     let _x = &a.x;
   |               --- borrow of `a.x` occurs here
63 |     let _y = a.y;
   |         ^^ move out of `a.y` occurs here

error[E0503]: cannot use `a.y` because it was mutably borrowed
  --> $DIR/borrowck-box-insensitivity.rs:71:9
   |
70 |     let _x = &mut a.x;
   |                   --- borrow of `a.x` occurs here
71 |     let _y = a.y; //~ ERROR cannot use
   |         ^^ use of borrowed `a.x`

error[E0505]: cannot move out of `a.y` because it is borrowed
  --> $DIR/borrowck-box-insensitivity.rs:77:9
   |
76 |     let _x = &mut a.x;
   |                   --- borrow of `a.x` occurs here
77 |     let _y = a.y;
   |         ^^ move out of `a.y` occurs here

error[E0502]: cannot borrow `a` (via `a.y`) as immutable because `a` is also borrowed as mutable (via `a.x`)
  --> $DIR/borrowck-box-insensitivity.rs:85:15
   |
84 |     let _x = &mut a.x;
   |                   --- mutable borrow occurs here (via `a.x`)
85 |     let _y = &a.y; //~ ERROR cannot borrow
   |               ^^^ immutable borrow occurs here (via `a.y`)
86 |     //~^ immutable borrow occurs here (via `a.y`)
87 | }
   | - mutable borrow ends here

error[E0502]: cannot borrow `a` (via `a.y`) as mutable because `a` is also borrowed as immutable (via `a.x`)
  --> $DIR/borrowck-box-insensitivity.rs:92:19
   |
91 |     let _x = &a.x;
   |               --- immutable borrow occurs here (via `a.x`)
92 |     let _y = &mut a.y; //~ ERROR cannot borrow
   |                   ^^^ mutable borrow occurs here (via `a.y`)
93 |     //~^ mutable borrow occurs here (via `a.y`)
94 | }
   | - immutable borrow ends here

error[E0382]: use of collaterally moved value: `a.y`
   --> $DIR/borrowck-box-insensitivity.rs:100:9
    |
98  |     let _x = a.x.x;
    |         -- value moved here
99  |     //~^ value moved here
100 |     let _y = a.y; //~ ERROR use of collaterally moved
    |         ^^ value used here after move
    |
    = note: move occurs because `a.x.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait

error[E0382]: use of collaterally moved value: `a.y`
   --> $DIR/borrowck-box-insensitivity.rs:108:9
    |
106 |     let _x = a.x.x;
    |         -- value moved here
107 |     //~^ value moved here
108 |     let _y = a.y; //~ ERROR use of collaterally moved
    |         ^^ value used here after move
    |
    = note: move occurs because `a.x.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait

error[E0382]: use of collaterally moved value: `a.y`
   --> $DIR/borrowck-box-insensitivity.rs:116:15
    |
114 |     let _x = a.x.x;
    |         -- value moved here
115 |     //~^ value moved here
116 |     let _y = &a.y; //~ ERROR use of collaterally moved
    |               ^^^ value used here after move
    |
    = note: move occurs because `a.x.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait

error[E0505]: cannot move out of `a.y` because it is borrowed
   --> $DIR/borrowck-box-insensitivity.rs:124:9
    |
122 |     let _x = &a.x.x;
    |               ----- borrow of `a.x.x` occurs here
123 |     //~^ borrow of `a.x.x` occurs here
124 |     let _y = a.y;
    |         ^^ move out of `a.y` occurs here

error[E0503]: cannot use `a.y` because it was mutably borrowed
   --> $DIR/borrowck-box-insensitivity.rs:132:9
    |
131 |     let _x = &mut a.x.x;
    |                   ----- borrow of `a.x.x` occurs here
132 |     let _y = a.y; //~ ERROR cannot use
    |         ^^ use of borrowed `a.x.x`

error[E0505]: cannot move out of `a.y` because it is borrowed
   --> $DIR/borrowck-box-insensitivity.rs:138:9
    |
137 |     let _x = &mut a.x.x;
    |                   ----- borrow of `a.x.x` occurs here
138 |     let _y = a.y;
    |         ^^ move out of `a.y` occurs here

error[E0502]: cannot borrow `a.y` as immutable because `a.x.x` is also borrowed as mutable
   --> $DIR/borrowck-box-insensitivity.rs:147:15
    |
145 |     let _x = &mut a.x.x;
    |                   ----- mutable borrow occurs here
146 |     //~^ mutable borrow occurs here
147 |     let _y = &a.y; //~ ERROR cannot borrow
    |               ^^^ immutable borrow occurs here
148 |     //~^ immutable borrow occurs here
149 | }
    | - mutable borrow ends here

error[E0502]: cannot borrow `a.y` as mutable because `a.x.x` is also borrowed as immutable
   --> $DIR/borrowck-box-insensitivity.rs:155:19
    |
153 |     let _x = &a.x.x;
    |               ----- immutable borrow occurs here
154 |     //~^ immutable borrow occurs here
155 |     let _y = &mut a.y; //~ ERROR cannot borrow
    |                   ^^^ mutable borrow occurs here
156 |     //~^ mutable borrow occurs here
157 | }
    | - immutable borrow ends here

error: aborting due to 16 previous errors

