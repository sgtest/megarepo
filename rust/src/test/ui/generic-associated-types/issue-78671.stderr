error[E0107]: missing generics for associated type `CollectionFamily::Member`
  --> $DIR/issue-78671.rs:5:10
   |
LL |     type Member<T>;
   |          ^^^^^^ expected 1 type argument
   |
note: associated type defined here, with 1 type parameter: `T`
  --> $DIR/issue-78671.rs:5:10
   |
LL |     type Member<T>;
   |          ^^^^^^ -
help: use angle brackets to add missing type argument
   |
LL |     type Member<T><T>;
   |                ^^^

error[E0038]: the trait `CollectionFamily` cannot be made into an object
  --> $DIR/issue-78671.rs:9:25
   |
LL |     Box::new(Family) as &dyn CollectionFamily<Member=usize>
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `CollectionFamily` cannot be made into an object
   |
   = help: consider moving `Member` to another trait
note: for a trait to be "object safe" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
  --> $DIR/issue-78671.rs:5:10
   |
LL | trait CollectionFamily {
   |       ---------------- this trait cannot be made into an object...
LL |     type Member<T>;
   |          ^^^^^^ ...because it contains the generic associated type `Member`

error: aborting due to 2 previous errors

Some errors have detailed explanations: E0038, E0107.
For more information about an error, try `rustc --explain E0038`.
