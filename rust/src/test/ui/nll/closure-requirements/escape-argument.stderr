note: External requirements
  --> $DIR/escape-argument.rs:36:38
   |
36 |         let mut closure = expect_sig(|p, y| *p = y);
   |                                      ^^^^^^^^^^^^^
   |
   = note: defining type: DefId(0/1:9 ~ escape_argument[317d]::test[0]::{{closure}}[0]) with closure substs [
               i16,
               for<'r, 's> extern "rust-call" fn((&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) mut &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) i32, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) i32))
           ]
   = note: number of external vids: 1

note: No external requirements
  --> $DIR/escape-argument.rs:30:1
   |
30 | / fn test() {
31 | |     let x = 44;
32 | |     let mut p = &x;
33 | |
...  |
41 | |     deref(p);
42 | | }
   | |_^
   |
   = note: defining type: DefId(0/0:3 ~ escape_argument[317d]::test[0]) with substs []

error[E0597]: borrowed value does not live long enough
  --> $DIR/escape-argument.rs:38:6
   |
35 |         let y = 22;
   |             - temporary value created here
...
38 |     }
   |      ^ temporary value dropped here while still borrowed
   |
   = note: consider using a `let` binding to increase its lifetime

error: aborting due to previous error

