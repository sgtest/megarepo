warning: not reporting region error due to nll
  --> $DIR/expect-region-supply-region.rs:28:13
   |
LL |         f = Some(x); //~ ERROR borrowed data cannot be stored outside of its closure
   |             ^^^^^^^

warning: not reporting region error due to nll
  --> $DIR/expect-region-supply-region.rs:38:13
   |
LL |         f = Some(x); //~ ERROR borrowed data cannot be stored outside of its closure
   |             ^^^^^^^

warning: not reporting region error due to nll
  --> $DIR/expect-region-supply-region.rs:47:33
   |
LL |     closure_expecting_bound(|x: &'x u32| {
   |                                 ^^^^^^^

warning: not reporting region error due to nll
  --> $DIR/expect-region-supply-region.rs:52:13
   |
LL |         f = Some(x);
   |             ^^^^^^^

error: borrowed data escapes outside of closure
  --> $DIR/expect-region-supply-region.rs:28:9
   |
LL |     let mut f: Option<&u32> = None;
   |         ----- `f` is declared here, outside of the closure body
LL |     closure_expecting_bound(|x| {
   |                              - `x` is a reference that is only valid in the closure body
LL |         f = Some(x); //~ ERROR borrowed data cannot be stored outside of its closure
   |         ^^^^^^^^^^^ `x` escapes the closure body here

error: borrowed data escapes outside of closure
  --> $DIR/expect-region-supply-region.rs:38:9
   |
LL |     let mut f: Option<&u32> = None;
   |         ----- `f` is declared here, outside of the closure body
LL |     closure_expecting_bound(|x: &u32| {
   |                              - `x` is a reference that is only valid in the closure body
LL |         f = Some(x); //~ ERROR borrowed data cannot be stored outside of its closure
   |         ^^^^^^^^^^^ `x` escapes the closure body here

error: borrowed data escapes outside of closure
  --> $DIR/expect-region-supply-region.rs:52:9
   |
LL |     let mut f: Option<&u32> = None;
   |         ----- `f` is declared here, outside of the closure body
...
LL |     closure_expecting_bound(|x: &'x u32| {
   |                              - `x` is a reference that is only valid in the closure body
...
LL |         f = Some(x);
   |         ^^^^^^^^^^^ `x` escapes the closure body here

error: aborting due to 3 previous errors

