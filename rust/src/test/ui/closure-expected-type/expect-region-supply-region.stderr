error: borrowed data cannot be stored outside of its closure
  --> $DIR/expect-region-supply-region.rs:28:18
   |
26 |     let mut f: Option<&u32> = None;
   |         ----- borrowed data cannot be stored into here...
27 |     closure_expecting_bound(|x| {
   |                             --- ...because it cannot outlive this closure
28 |         f = Some(x); //~ ERROR borrowed data cannot be stored outside of its closure
   |                  ^ cannot be stored outside of its closure

error: borrowed data cannot be stored outside of its closure
  --> $DIR/expect-region-supply-region.rs:38:18
   |
36 |     let mut f: Option<&u32> = None;
   |         ----- borrowed data cannot be stored into here...
37 |     closure_expecting_bound(|x: &u32| {
   |                             --------- ...because it cannot outlive this closure
38 |         f = Some(x); //~ ERROR borrowed data cannot be stored outside of its closure
   |                  ^ cannot be stored outside of its closure

error[E0308]: mismatched types
  --> $DIR/expect-region-supply-region.rs:47:33
   |
47 |     closure_expecting_bound(|x: &'x u32| {
   |                                 ^^^^^^^ lifetime mismatch
   |
   = note: expected type `&u32`
              found type `&'x u32`
note: the anonymous lifetime #2 defined on the body at 47:29...
  --> $DIR/expect-region-supply-region.rs:47:29
   |
47 |       closure_expecting_bound(|x: &'x u32| {
   |  _____________________________^
48 | |         //~^ ERROR mismatched types
49 | |         //~| ERROR mismatched types
50 | |
...  |
53 | |         //~^ ERROR borrowed data cannot be stored outside of its closure
54 | |     });
   | |_____^
note: ...does not necessarily outlive the lifetime 'x as defined on the function body at 42:1
  --> $DIR/expect-region-supply-region.rs:42:1
   |
42 | / fn expect_bound_supply_named<'x>() {
43 | |     let mut f: Option<&u32> = None;
44 | |
45 | |     // Here we give a type annotation that `x` should be free. We get
...  |
54 | |     });
55 | | }
   | |_^

error[E0308]: mismatched types
  --> $DIR/expect-region-supply-region.rs:47:33
   |
47 |     closure_expecting_bound(|x: &'x u32| {
   |                                 ^^^^^^^ lifetime mismatch
   |
   = note: expected type `&u32`
              found type `&'x u32`
note: the lifetime 'x as defined on the function body at 42:1...
  --> $DIR/expect-region-supply-region.rs:42:1
   |
42 | / fn expect_bound_supply_named<'x>() {
43 | |     let mut f: Option<&u32> = None;
44 | |
45 | |     // Here we give a type annotation that `x` should be free. We get
...  |
54 | |     });
55 | | }
   | |_^
note: ...does not necessarily outlive the anonymous lifetime #2 defined on the body at 47:29
  --> $DIR/expect-region-supply-region.rs:47:29
   |
47 |       closure_expecting_bound(|x: &'x u32| {
   |  _____________________________^
48 | |         //~^ ERROR mismatched types
49 | |         //~| ERROR mismatched types
50 | |
...  |
53 | |         //~^ ERROR borrowed data cannot be stored outside of its closure
54 | |     });
   | |_____^

error: borrowed data cannot be stored outside of its closure
  --> $DIR/expect-region-supply-region.rs:52:18
   |
43 |     let mut f: Option<&u32> = None;
   |         ----- borrowed data cannot be stored into here...
...
47 |     closure_expecting_bound(|x: &'x u32| {
   |                             ------------ ...because it cannot outlive this closure
...
52 |         f = Some(x);
   |                  ^ cannot be stored outside of its closure

error: aborting due to 5 previous errors

