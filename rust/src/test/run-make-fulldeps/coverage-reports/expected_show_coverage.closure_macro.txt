    1|       |// compile-flags: --edition=2018
    2|       |#![feature(no_coverage)]
    3|       |
    4|       |macro_rules! bail {
    5|       |    ($msg:literal $(,)?) => {
    6|       |        if $msg.len() > 0 {
    7|       |            println!("no msg");
    8|       |        } else {
    9|       |            println!($msg);
   10|       |        }
   11|       |        return Err(String::from($msg));
   12|       |    };
   13|       |}
   14|       |
   15|       |macro_rules! on_error {
   16|       |    ($value:expr, $error_message:expr) => {
   17|      0|        $value.or_else(|e| {
   18|      0|            let message = format!($error_message, e);
   19|      0|            if message.len() > 0 {
   20|      0|                println!("{}", message);
   21|      0|                Ok(String::from("ok"))
   22|       |            } else {
   23|      0|                bail!("error");
   24|       |            }
   25|      0|        })
   26|       |    };
   27|       |}
   28|       |
   29|      1|fn load_configuration_files() -> Result<String, String> {
   30|      1|    Ok(String::from("config"))
   31|      1|}
   32|       |
   33|      1|pub fn main() -> Result<(), String> {
   34|      1|    println!("Starting service");
   35|      1|    let config = on_error!(load_configuration_files(), "Error loading configs: {}")?;
                                                                                                 ^0
   36|       |
   37|      1|    let startup_delay_duration = String::from("arg");
   38|      1|    let _ = (config, startup_delay_duration);
   39|      1|    Ok(())
   40|      1|}

