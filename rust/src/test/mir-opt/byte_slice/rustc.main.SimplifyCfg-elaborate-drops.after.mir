// MIR for `main` after SimplifyCfg-elaborate-drops

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at $DIR/byte_slice.rs:4:11: 4:11
    let _1: &[u8; 3];                    // in scope 0 at $DIR/byte_slice.rs:5:9: 5:10
    scope 1 {
        debug x => _1;                   // in scope 1 at $DIR/byte_slice.rs:5:9: 5:10
        let _2: [u8; 2];                 // in scope 1 at $DIR/byte_slice.rs:6:9: 6:10
        scope 2 {
            debug y => _2;               // in scope 2 at $DIR/byte_slice.rs:6:9: 6:10
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at $DIR/byte_slice.rs:5:9: 5:10
        _1 = const b"foo";               // scope 0 at $DIR/byte_slice.rs:5:13: 5:19
                                         // ty::Const
                                         // + ty: &[u8; 3]
                                         // + val: Value(Scalar(alloc0))
                                         // mir::Constant
                                         // + span: $DIR/byte_slice.rs:5:13: 5:19
                                         // + literal: Const { ty: &[u8; 3], val: Value(Scalar(alloc0)) }
        StorageLive(_2);                 // scope 1 at $DIR/byte_slice.rs:6:9: 6:10
        _2 = [const 5u8, const 120u8];   // scope 1 at $DIR/byte_slice.rs:6:13: 6:24
                                         // ty::Const
                                         // + ty: u8
                                         // + val: Value(Scalar(0x05))
                                         // mir::Constant
                                         // + span: $DIR/byte_slice.rs:6:14: 6:17
                                         // + literal: Const { ty: u8, val: Value(Scalar(0x05)) }
                                         // ty::Const
                                         // + ty: u8
                                         // + val: Value(Scalar(0x78))
                                         // mir::Constant
                                         // + span: $DIR/byte_slice.rs:6:19: 6:23
                                         // + literal: Const { ty: u8, val: Value(Scalar(0x78)) }
        _0 = const ();                   // scope 0 at $DIR/byte_slice.rs:4:11: 7:2
                                         // ty::Const
                                         // + ty: ()
                                         // + val: Value(Scalar(<ZST>))
                                         // mir::Constant
                                         // + span: $DIR/byte_slice.rs:4:11: 7:2
                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }
        StorageDead(_2);                 // scope 1 at $DIR/byte_slice.rs:7:1: 7:2
        StorageDead(_1);                 // scope 0 at $DIR/byte_slice.rs:7:1: 7:2
        return;                          // scope 0 at $DIR/byte_slice.rs:7:2: 7:2
    }
}

alloc0 (size: 3, align: 1) {
    66 6f 6f                                        â”‚ foo
}
