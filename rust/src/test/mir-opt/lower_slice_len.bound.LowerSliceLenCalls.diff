- // MIR for `bound` before LowerSliceLenCalls
+ // MIR for `bound` after LowerSliceLenCalls
  
  fn bound(_1: usize, _2: &[u8]) -> u8 {
      debug index => _1;                   // in scope 0 at $DIR/lower_slice_len.rs:4:14: 4:19
      debug slice => _2;                   // in scope 0 at $DIR/lower_slice_len.rs:4:28: 4:33
      let mut _0: u8;                      // return place in scope 0 at $DIR/lower_slice_len.rs:4:45: 4:47
      let mut _3: bool;                    // in scope 0 at $DIR/lower_slice_len.rs:5:8: 5:27
      let mut _4: usize;                   // in scope 0 at $DIR/lower_slice_len.rs:5:8: 5:13
      let mut _5: usize;                   // in scope 0 at $DIR/lower_slice_len.rs:5:16: 5:27
      let mut _6: &[u8];                   // in scope 0 at $DIR/lower_slice_len.rs:5:16: 5:27
      let _7: usize;                       // in scope 0 at $DIR/lower_slice_len.rs:6:15: 6:20
      let mut _8: usize;                   // in scope 0 at $DIR/lower_slice_len.rs:6:9: 6:21
      let mut _9: bool;                    // in scope 0 at $DIR/lower_slice_len.rs:6:9: 6:21
  
      bb0: {
          StorageLive(_3);                 // scope 0 at $DIR/lower_slice_len.rs:5:8: 5:27
          StorageLive(_4);                 // scope 0 at $DIR/lower_slice_len.rs:5:8: 5:13
          _4 = _1;                         // scope 0 at $DIR/lower_slice_len.rs:5:8: 5:13
          StorageLive(_5);                 // scope 0 at $DIR/lower_slice_len.rs:5:16: 5:27
          StorageLive(_6);                 // scope 0 at $DIR/lower_slice_len.rs:5:16: 5:27
          _6 = &(*_2);                     // scope 0 at $DIR/lower_slice_len.rs:5:16: 5:27
-         _5 = core::slice::<impl [u8]>::len(move _6) -> bb1; // scope 0 at $DIR/lower_slice_len.rs:5:16: 5:27
-                                          // mir::Constant
-                                          // + span: $DIR/lower_slice_len.rs:5:22: 5:25
-                                          // + literal: Const { ty: for<'r> fn(&'r [u8]) -> usize {core::slice::<impl [u8]>::len}, val: Value(Scalar(<ZST>)) }
+         _5 = Len((*_6));                 // scope 0 at $DIR/lower_slice_len.rs:5:16: 5:27
+         goto -> bb1;                     // scope 0 at $DIR/lower_slice_len.rs:5:16: 5:27
      }
  
      bb1: {
          StorageDead(_6);                 // scope 0 at $DIR/lower_slice_len.rs:5:26: 5:27
          _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_slice_len.rs:5:8: 5:27
          StorageDead(_5);                 // scope 0 at $DIR/lower_slice_len.rs:5:26: 5:27
          StorageDead(_4);                 // scope 0 at $DIR/lower_slice_len.rs:5:26: 5:27
          switchInt(move _3) -> [false: bb4, otherwise: bb2]; // scope 0 at $DIR/lower_slice_len.rs:5:8: 5:27
      }
  
      bb2: {
          StorageLive(_7);                 // scope 0 at $DIR/lower_slice_len.rs:6:15: 6:20
          _7 = _1;                         // scope 0 at $DIR/lower_slice_len.rs:6:15: 6:20
          _8 = Len((*_2));                 // scope 0 at $DIR/lower_slice_len.rs:6:9: 6:21
          _9 = Lt(_7, _8);                 // scope 0 at $DIR/lower_slice_len.rs:6:9: 6:21
          assert(move _9, "index out of bounds: the length is {} but the index is {}", move _8, _7) -> bb3; // scope 0 at $DIR/lower_slice_len.rs:6:9: 6:21
      }
  
      bb3: {
          _0 = (*_2)[_7];                  // scope 0 at $DIR/lower_slice_len.rs:6:9: 6:21
          StorageDead(_7);                 // scope 0 at $DIR/lower_slice_len.rs:7:5: 7:6
          goto -> bb5;                     // scope 0 at $DIR/lower_slice_len.rs:5:5: 9:6
      }
  
      bb4: {
          _0 = const 42_u8;                // scope 0 at $DIR/lower_slice_len.rs:8:9: 8:11
          goto -> bb5;                     // scope 0 at $DIR/lower_slice_len.rs:5:5: 9:6
      }
  
      bb5: {
          StorageDead(_3);                 // scope 0 at $DIR/lower_slice_len.rs:9:5: 9:6
          return;                          // scope 0 at $DIR/lower_slice_len.rs:10:2: 10:2
      }
  }
  
