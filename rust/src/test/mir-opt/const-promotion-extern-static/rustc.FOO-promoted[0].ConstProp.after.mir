// MIR for `FOO::promoted[0]` after ConstProp

promoted[0] in FOO: &[&i32; 1] = {
    let mut _0: &[&i32; 1];              // return place in scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46
    let mut _1: [&i32; 1];               // in scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46
    let mut _2: &i32;                    // in scope 0 at $DIR/const-promotion-extern-static.rs:13:32: 13:45
    let mut _3: &i32;                    // in scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43
    scope 1 {
    }

    bb0: {
        _3 = const {alloc2+0: &i32};     // bb0[0]: scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43
                                         // ty::Const
                                         // + ty: &i32
                                         // + val: Value(Scalar(alloc2+0))
                                         // mir::Constant
                                         // + span: $DIR/const-promotion-extern-static.rs:13:42: 13:43
                                         // + literal: Const { ty: &i32, val: Value(Scalar(alloc2+0)) }
        _2 = _3;                         // bb0[1]: scope 0 at $DIR/const-promotion-extern-static.rs:13:41: 13:43
        _1 = [move _2];                  // bb0[2]: scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46
        _0 = &_1;                        // bb0[3]: scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46
        return;                          // bb0[4]: scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46
    }
}

alloc2 (extern static: X)
