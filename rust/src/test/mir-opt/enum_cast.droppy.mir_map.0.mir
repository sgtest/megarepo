// MIR for `droppy` 0 mir_map

fn droppy() -> () {
    let mut _0: ();                      // return place in scope 0 at $DIR/enum_cast.rs:+0:13: +0:13
    let _1: ();                          // in scope 0 at $DIR/enum_cast.rs:+1:5: +6:6
    let _2: Droppy;                      // in scope 0 at $DIR/enum_cast.rs:+2:13: +2:14
    let mut _4: isize;                   // in scope 0 at $DIR/enum_cast.rs:+5:17: +5:18
    let _5: Droppy;                      // in scope 0 at $DIR/enum_cast.rs:+7:9: +7:10
    scope 1 {
        debug x => _2;                   // in scope 1 at $DIR/enum_cast.rs:+2:13: +2:14
        scope 2 {
            debug y => _3;               // in scope 2 at $DIR/enum_cast.rs:+5:13: +5:14
        }
        scope 3 {
            let _3: usize;               // in scope 3 at $DIR/enum_cast.rs:+5:13: +5:14
        }
    }
    scope 4 {
        debug z => _5;                   // in scope 4 at $DIR/enum_cast.rs:+7:9: +7:10
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at $DIR/enum_cast.rs:+1:5: +6:6
        StorageLive(_2);                 // scope 0 at $DIR/enum_cast.rs:+2:13: +2:14
        _2 = Droppy::C;                  // scope 0 at $DIR/enum_cast.rs:+2:17: +2:26
        FakeRead(ForLet(None), _2);      // scope 0 at $DIR/enum_cast.rs:+2:13: +2:14
        StorageLive(_3);                 // scope 3 at $DIR/enum_cast.rs:+5:13: +5:14
        _4 = discriminant(_2);           // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27
        _3 = move _4 as usize (Misc);    // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27
        FakeRead(ForLet(None), _3);      // scope 3 at $DIR/enum_cast.rs:+5:13: +5:14
        _1 = const ();                   // scope 0 at $DIR/enum_cast.rs:+1:5: +6:6
        StorageDead(_3);                 // scope 1 at $DIR/enum_cast.rs:+6:5: +6:6
        drop(_2) -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/enum_cast.rs:+6:5: +6:6
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at $DIR/enum_cast.rs:+6:5: +6:6
        StorageDead(_1);                 // scope 0 at $DIR/enum_cast.rs:+6:5: +6:6
        StorageLive(_5);                 // scope 0 at $DIR/enum_cast.rs:+7:9: +7:10
        _5 = Droppy::B;                  // scope 0 at $DIR/enum_cast.rs:+7:13: +7:22
        FakeRead(ForLet(None), _5);      // scope 0 at $DIR/enum_cast.rs:+7:9: +7:10
        _0 = const ();                   // scope 0 at $DIR/enum_cast.rs:+0:13: +8:2
        drop(_5) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/enum_cast.rs:+8:1: +8:2
    }

    bb2: {
        StorageDead(_5);                 // scope 0 at $DIR/enum_cast.rs:+8:1: +8:2
        return;                          // scope 0 at $DIR/enum_cast.rs:+8:2: +8:2
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at $DIR/enum_cast.rs:+0:1: +8:2
    }
}
