- // MIR for `array_len` before SimplifyLocals
+ // MIR for `array_len` after SimplifyLocals
  
  fn array_len(_1: &[u8; N]) -> usize {
      debug arr => _1;                     // in scope 0 at $DIR/lower_array_len.rs:30:34: 30:37
      let mut _0: usize;                   // return place in scope 0 at $DIR/lower_array_len.rs:30:52: 30:57
-     let mut _2: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:31:5: 31:14
-     let mut _3: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:31:5: 31:14
-     let mut _4: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:31:5: 31:14
  
      bb0: {
-         StorageLive(_2);                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14
-         StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14
-         _3 = _1;                         // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14
-         StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14
-         _4 = _3;                         // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14
-         _2 = move _3 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14
-         StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:31:7: 31:8
          _0 = const N;                    // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14
-         StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:31:5: 31:14
-         StorageDead(_2);                 // scope 0 at $DIR/lower_array_len.rs:31:13: 31:14
          return;                          // scope 0 at $DIR/lower_array_len.rs:32:2: 32:2
      }
  }
  
