- // MIR for `opt2` before InstCombine
+ // MIR for `opt2` after InstCombine
  
  fn opt2(_1: bool) -> u32 {
      debug x => _1;                       // in scope 0 at $DIR/bool_compare.rs:7:9: 7:10
      let mut _0: u32;                     // return place in scope 0 at $DIR/bool_compare.rs:7:21: 7:24
      let mut _2: bool;                    // in scope 0 at $DIR/bool_compare.rs:8:8: 8:17
      let mut _3: bool;                    // in scope 0 at $DIR/bool_compare.rs:8:16: 8:17
  
      bb0: {
          StorageLive(_2);                 // scope 0 at $DIR/bool_compare.rs:8:8: 8:17
          StorageLive(_3);                 // scope 0 at $DIR/bool_compare.rs:8:16: 8:17
          _3 = _1;                         // scope 0 at $DIR/bool_compare.rs:8:16: 8:17
-         _2 = Ne(const true, move _3);    // scope 0 at $DIR/bool_compare.rs:8:8: 8:17
+         _2 = Not(move _3);               // scope 0 at $DIR/bool_compare.rs:8:8: 8:17
          StorageDead(_3);                 // scope 0 at $DIR/bool_compare.rs:8:16: 8:17
          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/bool_compare.rs:8:8: 8:17
      }
  
      bb1: {
          _0 = const 0_u32;                // scope 0 at $DIR/bool_compare.rs:8:20: 8:21
          goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:8:5: 8:34
      }
  
      bb2: {
          _0 = const 1_u32;                // scope 0 at $DIR/bool_compare.rs:8:31: 8:32
          goto -> bb3;                     // scope 0 at $DIR/bool_compare.rs:8:5: 8:34
      }
  
      bb3: {
          StorageDead(_2);                 // scope 0 at $DIR/bool_compare.rs:8:33: 8:34
          return;                          // scope 0 at $DIR/bool_compare.rs:9:2: 9:2
      }
  }
  
