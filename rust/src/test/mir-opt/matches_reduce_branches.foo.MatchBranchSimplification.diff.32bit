- // MIR for `foo` before MatchBranchSimplification
+ // MIR for `foo` after MatchBranchSimplification
  
  fn foo(_1: std::option::Option<()>) -> () {
      debug bar => _1;                     // in scope 0 at $DIR/matches_reduce_branches.rs:4:8: 4:11
      let mut _0: ();                      // return place in scope 0 at $DIR/matches_reduce_branches.rs:4:25: 4:25
      let mut _2: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      let mut _3: isize;                   // in scope 0 at $DIR/matches_reduce_branches.rs:5:22: 5:26
  
      bb0: {
          StorageLive(_2);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          _3 = discriminant(_1);           // scope 0 at $DIR/matches_reduce_branches.rs:5:22: 5:26
-         switchInt(move _3) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_reduce_branches.rs:5:22: 5:26
+         _2 = Eq(move _3, const 0_isize); // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
+                                          // ty::Const
+                                          // + ty: isize
+                                          // + val: Value(Scalar(0x00000000))
+                                          // mir::Constant
+                                          // + span: $DIR/matches_reduce_branches.rs:1:1: 1:1
+                                          // + literal: Const { ty: isize, val: Value(Scalar(0x00000000)) }
+         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:5:22: 5:26
      }
  
      bb1: {
          _2 = const false;                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
                                           // ty::Const
                                           // + ty: bool
                                           // + val: Value(Scalar(0x00))
                                           // mir::Constant
                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL
                                           // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }
          goto -> bb3;                     // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      }
  
      bb2: {
          _2 = const true;                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
                                           // ty::Const
                                           // + ty: bool
                                           // + val: Value(Scalar(0x01))
                                           // mir::Constant
                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL
                                           // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }
          goto -> bb3;                     // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      }
  
      bb3: {
          switchInt(_2) -> [false: bb4, otherwise: bb5]; // scope 0 at $DIR/matches_reduce_branches.rs:5:5: 7:6
      }
  
      bb4: {
          _0 = const ();                   // scope 0 at $DIR/matches_reduce_branches.rs:5:5: 7:6
                                           // ty::Const
                                           // + ty: ()
                                           // + val: Value(Scalar(<ZST>))
                                           // mir::Constant
                                           // + span: $DIR/matches_reduce_branches.rs:5:5: 7:6
                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }
          goto -> bb5;                     // scope 0 at $DIR/matches_reduce_branches.rs:5:5: 7:6
      }
  
      bb5: {
          StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:8:1: 8:2
          return;                          // scope 0 at $DIR/matches_reduce_branches.rs:8:2: 8:2
      }
  }
  
