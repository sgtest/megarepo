- // MIR for `main` before ConstProp
+ // MIR for `main` after ConstProp
  
  fn main() -> () {
      let mut _0: ();                      // return place in scope 0 at $DIR/indirect.rs:4:11: 4:11
      let _1: u8;                          // in scope 0 at $DIR/indirect.rs:5:9: 5:10
      let mut _2: u8;                      // in scope 0 at $DIR/indirect.rs:5:13: 5:25
      let mut _3: (u8, bool);              // in scope 0 at $DIR/indirect.rs:5:13: 5:29
      scope 1 {
          debug x => _1;                   // in scope 1 at $DIR/indirect.rs:5:9: 5:10
      }
  
      bb0: {
          StorageLive(_1);                 // scope 0 at $DIR/indirect.rs:5:9: 5:10
          StorageLive(_2);                 // scope 0 at $DIR/indirect.rs:5:13: 5:25
-         _2 = const 2u32 as u8 (Misc);    // scope 0 at $DIR/indirect.rs:5:13: 5:25
+         _2 = const 2u8;                  // scope 0 at $DIR/indirect.rs:5:13: 5:25
                                           // ty::Const
-                                          // + ty: u32
-                                          // + val: Value(Scalar(0x00000002))
+                                          // + ty: u8
+                                          // + val: Value(Scalar(0x02))
                                           // mir::Constant
-                                          // + span: $DIR/indirect.rs:5:14: 5:18
-                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }
-         _3 = CheckedAdd(move _2, const 1u8); // scope 0 at $DIR/indirect.rs:5:13: 5:29
+                                          // + span: $DIR/indirect.rs:5:13: 5:25
+                                          // + literal: Const { ty: u8, val: Value(Scalar(0x02)) }
+         _3 = (const 3u8, const false);   // scope 0 at $DIR/indirect.rs:5:13: 5:29
                                           // ty::Const
                                           // + ty: u8
-                                          // + val: Value(Scalar(0x01))
+                                          // + val: Value(Scalar(0x03))
                                           // mir::Constant
-                                          // + span: $DIR/indirect.rs:5:28: 5:29
-                                          // + literal: Const { ty: u8, val: Value(Scalar(0x01)) }
-         assert(!move (_3.1: bool), "attempt to add with overflow") -> bb1; // scope 0 at $DIR/indirect.rs:5:13: 5:29
+                                          // + span: $DIR/indirect.rs:5:13: 5:29
+                                          // + literal: Const { ty: u8, val: Value(Scalar(0x03)) }
+                                          // ty::Const
+                                          // + ty: bool
+                                          // + val: Value(Scalar(0x00))
+                                          // mir::Constant
+                                          // + span: $DIR/indirect.rs:5:13: 5:29
+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }
+         assert(!const false, "attempt to add with overflow") -> bb1; // scope 0 at $DIR/indirect.rs:5:13: 5:29
+                                          // ty::Const
+                                          // + ty: bool
+                                          // + val: Value(Scalar(0x00))
+                                          // mir::Constant
+                                          // + span: $DIR/indirect.rs:5:13: 5:29
+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }
      }
  
      bb1: {
-         _1 = move (_3.0: u8);            // scope 0 at $DIR/indirect.rs:5:13: 5:29
+         _1 = const 3u8;                  // scope 0 at $DIR/indirect.rs:5:13: 5:29
+                                          // ty::Const
+                                          // + ty: u8
+                                          // + val: Value(Scalar(0x03))
+                                          // mir::Constant
+                                          // + span: $DIR/indirect.rs:5:13: 5:29
+                                          // + literal: Const { ty: u8, val: Value(Scalar(0x03)) }
          StorageDead(_2);                 // scope 0 at $DIR/indirect.rs:5:28: 5:29
          _0 = const ();                   // scope 0 at $DIR/indirect.rs:4:11: 6:2
                                           // ty::Const
                                           // + ty: ()
                                           // + val: Value(Scalar(<ZST>))
                                           // mir::Constant
                                           // + span: $DIR/indirect.rs:4:11: 6:2
                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }
          StorageDead(_1);                 // scope 0 at $DIR/indirect.rs:6:1: 6:2
          return;                          // scope 0 at $DIR/indirect.rs:6:2: 6:2
      }
  }
  
