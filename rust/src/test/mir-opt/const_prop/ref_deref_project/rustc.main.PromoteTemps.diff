- // MIR for `main` before PromoteTemps
+ // MIR for `main` after PromoteTemps
  
  fn main() -> () {
      let mut _0: ();                      // return place in scope 0 at $DIR/ref_deref_project.rs:4:11: 4:11
      let _1: i32;                         // in scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17
      let mut _2: &i32;                    // in scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17
      let _3: (i32, i32);                  // in scope 0 at $DIR/ref_deref_project.rs:5:8: 5:14
+     let mut _4: &(i32, i32);             // in scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17
  
      bb0: {
          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17
          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17
-         StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/ref_deref_project.rs:5:8: 5:14
-         _3 = (const 4i32, const 5i32);   // bb0[3]: scope 0 at $DIR/ref_deref_project.rs:5:8: 5:14
+         _4 = const main::promoted[0];    // bb0[2]: scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17
                                           // ty::Const
-                                          // + ty: i32
-                                          // + val: Value(Scalar(0x00000004))
+                                          // + ty: &(i32, i32)
+                                          // + val: Unevaluated(DefId(0:3 ~ ref_deref_project[317d]::main[0]), [], Some(promoted[0]))
                                           // mir::Constant
-                                          // + span: $DIR/ref_deref_project.rs:5:9: 5:10
-                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }
-                                          // ty::Const
-                                          // + ty: i32
-                                          // + val: Value(Scalar(0x00000005))
-                                          // mir::Constant
-                                          // + span: $DIR/ref_deref_project.rs:5:12: 5:13
-                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }
-         _2 = &(_3.1: i32);               // bb0[4]: scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17
-         _1 = (*_2);                      // bb0[5]: scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17
-         StorageDead(_3);                 // bb0[6]: scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18
-         StorageDead(_2);                 // bb0[7]: scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18
-         StorageDead(_1);                 // bb0[8]: scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18
-         _0 = ();                         // bb0[9]: scope 0 at $DIR/ref_deref_project.rs:4:11: 6:2
-         return;                          // bb0[10]: scope 0 at $DIR/ref_deref_project.rs:6:2: 6:2
+                                          // + span: $DIR/ref_deref_project.rs:5:6: 5:17
+                                          // + literal: Const { ty: &(i32, i32), val: Unevaluated(DefId(0:3 ~ ref_deref_project[317d]::main[0]), [], Some(promoted[0])) }
+         _2 = &((*_4).1: i32);            // bb0[3]: scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17
+         _1 = (*_2);                      // bb0[4]: scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17
+         StorageDead(_2);                 // bb0[5]: scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18
+         StorageDead(_1);                 // bb0[6]: scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18
+         _0 = ();                         // bb0[7]: scope 0 at $DIR/ref_deref_project.rs:4:11: 6:2
+         return;                          // bb0[8]: scope 0 at $DIR/ref_deref_project.rs:6:2: 6:2
      }
  }
  
