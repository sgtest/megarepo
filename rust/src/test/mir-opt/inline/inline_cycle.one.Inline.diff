- // MIR for `one` before Inline
+ // MIR for `one` after Inline
  
  fn one() -> () {
      let mut _0: ();                      // return place in scope 0 at $DIR/inline-cycle.rs:13:10: 13:10
      let _1: ();                          // in scope 0 at $DIR/inline-cycle.rs:14:5: 14:24
+     scope 1 (inlined <C as Call>::call) { // at $DIR/inline-cycle.rs:14:5: 14:24
+         scope 2 (inlined <A<C> as Call>::call) { // at $DIR/inline-cycle.rs:43:9: 43:23
+             scope 3 (inlined <B<C> as Call>::call) { // at $DIR/inline-cycle.rs:28:9: 28:31
+             }
+         }
+     }
  
      bb0: {
          StorageLive(_1);                 // scope 0 at $DIR/inline-cycle.rs:14:5: 14:24
-         _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline-cycle.rs:14:5: 14:24
+         _1 = <C as Call>::call() -> bb1; // scope 3 at $DIR/inline-cycle.rs:36:9: 36:28
                                           // mir::Constant
-                                          // + span: $DIR/inline-cycle.rs:14:5: 14:22
+                                          // + span: $DIR/inline-cycle.rs:36:9: 36:26
                                           // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(<ZST>) }
      }
  
      bb1: {
          StorageDead(_1);                 // scope 0 at $DIR/inline-cycle.rs:14:24: 14:25
          _0 = const ();                   // scope 0 at $DIR/inline-cycle.rs:13:10: 15:2
          return;                          // scope 0 at $DIR/inline-cycle.rs:15:2: 15:2
+     }
+ 
+     bb2 (cleanup): {
+         resume;                          // scope 0 at $DIR/inline-cycle.rs:13:1: 15:2
      }
  }
  
