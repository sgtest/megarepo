- // MIR for `mk_cycle` before Inline
+ // MIR for `mk_cycle` after Inline
  
  fn mk_cycle(_1: &dyn Cache<V = V>) -> () {
      debug c => _1;                       // in scope 0 at $DIR/dyn-trait.rs:20:27: 20:28
      let mut _0: ();                      // return place in scope 0 at $DIR/dyn-trait.rs:20:49: 20:49
      let mut _2: &dyn Cache<V = V>;       // in scope 0 at $DIR/dyn-trait.rs:21:5: 21:22
  
      bb0: {
          StorageLive(_2);                 // scope 0 at $DIR/dyn-trait.rs:21:5: 21:22
          _2 = &(*_1);                     // scope 0 at $DIR/dyn-trait.rs:21:5: 21:22
          _0 = <dyn Cache<V = V> as Cache>::store_nocache(move _2) -> bb1; // scope 0 at $DIR/dyn-trait.rs:21:5: 21:22
                                           // mir::Constant
                                           // + span: $DIR/dyn-trait.rs:21:7: 21:20
                                           // + literal: Const { ty: for<'r> fn(&'r dyn Cache<V = V>) {<dyn Cache<V = V> as Cache>::store_nocache}, val: Value(Scalar(<ZST>)) }
      }
  
      bb1: {
          StorageDead(_2);                 // scope 0 at $DIR/dyn-trait.rs:21:21: 21:22
          return;                          // scope 0 at $DIR/dyn-trait.rs:22:2: 22:2
      }
  }
  
