- // MIR for `try_execute_query` before Inline
+ // MIR for `try_execute_query` after Inline
  
  fn try_execute_query(_1: &C) -> () {
      debug c => _1;                       // in scope 0 at $DIR/dyn-trait.rs:26:36: 26:37
      let mut _0: ();                      // return place in scope 0 at $DIR/dyn-trait.rs:26:43: 26:43
      let mut _2: &dyn Cache<V = <C as Cache>::V>; // in scope 0 at $DIR/dyn-trait.rs:27:14: 27:15
      let mut _3: &C;                      // in scope 0 at $DIR/dyn-trait.rs:27:14: 27:15
+     scope 1 (inlined mk_cycle::<<C as Cache>::V>) { // at $DIR/dyn-trait.rs:27:5: 27:16
+         debug c => _2;                   // in scope 1 at $DIR/dyn-trait.rs:20:27: 20:28
+         let mut _4: &dyn Cache<V = <C as Cache>::V>; // in scope 1 at $DIR/dyn-trait.rs:21:5: 21:22
+     }
  
      bb0: {
          StorageLive(_2);                 // scope 0 at $DIR/dyn-trait.rs:27:14: 27:15
          StorageLive(_3);                 // scope 0 at $DIR/dyn-trait.rs:27:14: 27:15
          _3 = &(*_1);                     // scope 0 at $DIR/dyn-trait.rs:27:14: 27:15
          _2 = move _3 as &dyn Cache<V = <C as Cache>::V> (Pointer(Unsize)); // scope 0 at $DIR/dyn-trait.rs:27:14: 27:15
          StorageDead(_3);                 // scope 0 at $DIR/dyn-trait.rs:27:14: 27:15
-         _0 = mk_cycle::<<C as Cache>::V>(move _2) -> bb1; // scope 0 at $DIR/dyn-trait.rs:27:5: 27:16
+         StorageLive(_4);                 // scope 1 at $DIR/dyn-trait.rs:21:5: 21:22
+         _4 = _2;                         // scope 1 at $DIR/dyn-trait.rs:21:5: 21:22
+         _0 = <dyn Cache<V = <C as Cache>::V> as Cache>::store_nocache(move _4) -> bb1; // scope 1 at $DIR/dyn-trait.rs:21:5: 21:22
                                           // mir::Constant
-                                          // + span: $DIR/dyn-trait.rs:27:5: 27:13
-                                          // + literal: Const { ty: for<'r> fn(&'r (dyn Cache<V = <C as Cache>::V> + 'r)) {mk_cycle::<<C as Cache>::V>}, val: Value(Scalar(<ZST>)) }
+                                          // + span: $DIR/dyn-trait.rs:21:7: 21:20
+                                          // + literal: Const { ty: for<'r> fn(&'r dyn Cache<V = <C as Cache>::V>) {<dyn Cache<V = <C as Cache>::V> as Cache>::store_nocache}, val: Value(Scalar(<ZST>)) }
      }
  
      bb1: {
+         StorageDead(_4);                 // scope 1 at $DIR/dyn-trait.rs:21:21: 21:22
          StorageDead(_2);                 // scope 0 at $DIR/dyn-trait.rs:27:15: 27:16
          return;                          // scope 0 at $DIR/dyn-trait.rs:28:2: 28:2
      }
  }
  
