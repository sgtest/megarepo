- // MIR for `h` before Inline
+ // MIR for `h` after Inline
  
  fn h() -> () {
      let mut _0: ();                      // return place in scope 0 at $DIR/inline-diverging.rs:21:12: 21:12
      let _1: (!, !);                      // in scope 0 at $DIR/inline-diverging.rs:22:5: 22:22
+     let mut _2: fn() -> ! {sleep};       // in scope 0 at $DIR/inline-diverging.rs:22:5: 22:22
+     let mut _9: ();                      // in scope 0 at $DIR/inline-diverging.rs:27:13: 27:16
+     let mut _10: ();                     // in scope 0 at $DIR/inline-diverging.rs:28:13: 28:16
+     scope 1 (inlined call_twice::<!, fn() -> ! {sleep}>) { // at $DIR/inline-diverging.rs:22:5: 22:22
+         debug f => _2;                   // in scope 1 at $DIR/inline-diverging.rs:26:36: 26:37
+         let _3: !;                       // in scope 1 at $DIR/inline-diverging.rs:27:9: 27:10
+         let mut _4: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline-diverging.rs:27:13: 27:14
+         let mut _6: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline-diverging.rs:28:13: 28:14
+         let mut _7: !;                   // in scope 1 at $DIR/inline-diverging.rs:29:6: 29:7
+         let mut _8: !;                   // in scope 1 at $DIR/inline-diverging.rs:29:9: 29:10
+         scope 2 {
+             debug a => _3;               // in scope 2 at $DIR/inline-diverging.rs:27:9: 27:10
+             let _5: !;                   // in scope 2 at $DIR/inline-diverging.rs:28:9: 28:10
+             scope 3 {
+                 debug b => _5;           // in scope 3 at $DIR/inline-diverging.rs:28:9: 28:10
+             }
+             scope 6 (inlined <fn() -> ! {sleep} as Fn<()>>::call - shim(fn() -> ! {sleep})) { // at $DIR/inline-diverging.rs:28:13: 28:16
+                 scope 7 (inlined sleep) { // at $SRC_DIR/core/src/ops/function.rs:LL:COL
+                 }
+             }
+         }
+         scope 4 (inlined <fn() -> ! {sleep} as Fn<()>>::call - shim(fn() -> ! {sleep})) { // at $DIR/inline-diverging.rs:27:13: 27:16
+             scope 5 (inlined sleep) {    // at $SRC_DIR/core/src/ops/function.rs:LL:COL
+             }
+         }
+     }
  
      bb0: {
          StorageLive(_1);                 // scope 0 at $DIR/inline-diverging.rs:22:5: 22:22
-         _1 = call_twice::<!, fn() -> ! {sleep}>(sleep); // scope 0 at $DIR/inline-diverging.rs:22:5: 22:22
+         StorageLive(_2);                 // scope 0 at $DIR/inline-diverging.rs:22:5: 22:22
+         _2 = sleep;                      // scope 0 at $DIR/inline-diverging.rs:22:5: 22:22
                                           // mir::Constant
-                                          // + span: $DIR/inline-diverging.rs:22:5: 22:15
-                                          // + literal: Const { ty: fn(fn() -> ! {sleep}) -> (!, !) {call_twice::<!, fn() -> ! {sleep}>}, val: Value(Scalar(<ZST>)) }
-                                          // mir::Constant
                                           // + span: $DIR/inline-diverging.rs:22:16: 22:21
                                           // + literal: Const { ty: fn() -> ! {sleep}, val: Value(Scalar(<ZST>)) }
+         StorageLive(_3);                 // scope 1 at $DIR/inline-diverging.rs:27:9: 27:10
+         StorageLive(_4);                 // scope 1 at $DIR/inline-diverging.rs:27:13: 27:14
+         _4 = &_2;                        // scope 1 at $DIR/inline-diverging.rs:27:13: 27:14
+         StorageLive(_9);                 // scope 1 at $DIR/inline-diverging.rs:27:13: 27:16
+         _9 = const ();                   // scope 1 at $DIR/inline-diverging.rs:27:13: 27:16
+         goto -> bb1;                     // scope 5 at $DIR/inline-diverging.rs:39:5: 39:12
+     }
+ 
+     bb1: {
+         goto -> bb1;                     // scope 5 at $DIR/inline-diverging.rs:39:5: 39:12
+     }
+ 
+     bb2 (cleanup): {
+         resume;                          // scope 0 at $DIR/inline-diverging.rs:21:1: 23:2
      }
  }
  
