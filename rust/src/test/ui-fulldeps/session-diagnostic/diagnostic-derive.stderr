error: `#[derive(Diagnostic)]` can only be used on structs
  --> $DIR/diagnostic-derive.rs:39:1
   |
LL | / #[diag(typeck::ambiguous_lifetime_bound, code = "E0123")]
LL | |
LL | | enum DiagnosticOnEnum {
LL | |     Foo,
LL | |     Bar,
LL | | }
   | |_^

error: `#[diag = ...]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:48:1
   |
LL | #[diag = "E0123"]
   | ^^^^^^^^^^^^^^^^^

error: `#[nonsense(...)]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:53:1
   |
LL | #[nonsense(typeck::ambiguous_lifetime_bound, code = "E0123")]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: diagnostic slug not specified
  --> $DIR/diagnostic-derive.rs:53:1
   |
LL | / #[nonsense(typeck::ambiguous_lifetime_bound, code = "E0123")]
LL | |
LL | |
LL | |
LL | | struct InvalidStructAttr {}
   | |___________________________^
   |
   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(typeck::example_error)]`

error: `#[diag("...")]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:60:8
   |
LL | #[diag("E0123")]
   |        ^^^^^^^
   |
   = help: a diagnostic slug is required as the first argument

error: diagnostic slug not specified
  --> $DIR/diagnostic-derive.rs:60:1
   |
LL | / #[diag("E0123")]
LL | |
LL | |
LL | | struct InvalidLitNestedAttr {}
   | |______________________________^
   |
   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(typeck::example_error)]`

error: `#[diag(nonsense(...))]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:71:8
   |
LL | #[diag(nonsense("foo"), code = "E0123", slug = "foo")]
   |        ^^^^^^^^^^^^^^^
   |
   = help: a diagnostic slug is required as the first argument

error: diagnostic slug not specified
  --> $DIR/diagnostic-derive.rs:71:1
   |
LL | / #[diag(nonsense("foo"), code = "E0123", slug = "foo")]
LL | |
LL | |
LL | | struct InvalidNestedStructAttr1 {}
   | |__________________________________^
   |
   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(typeck::example_error)]`

error: `#[diag(nonsense = ...)]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:77:8
   |
LL | #[diag(nonsense = "...", code = "E0123", slug = "foo")]
   |        ^^^^^^^^^^^^^^^^
   |
   = help: only `code` is a valid nested attributes following the slug

error: `#[diag(slug = ...)]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:77:42
   |
LL | #[diag(nonsense = "...", code = "E0123", slug = "foo")]
   |                                          ^^^^^^^^^^^^
   |
   = help: only `code` is a valid nested attributes following the slug

error: diagnostic slug not specified
  --> $DIR/diagnostic-derive.rs:77:1
   |
LL | / #[diag(nonsense = "...", code = "E0123", slug = "foo")]
LL | |
LL | |
LL | |
LL | | struct InvalidNestedStructAttr2 {}
   | |__________________________________^
   |
   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(typeck::example_error)]`

error: `#[diag(nonsense = ...)]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:84:8
   |
LL | #[diag(nonsense = 4, code = "E0123", slug = "foo")]
   |        ^^^^^^^^^^^^

error: `#[diag(slug = ...)]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:84:38
   |
LL | #[diag(nonsense = 4, code = "E0123", slug = "foo")]
   |                                      ^^^^^^^^^^^^
   |
   = help: only `code` is a valid nested attributes following the slug

error: diagnostic slug not specified
  --> $DIR/diagnostic-derive.rs:84:1
   |
LL | / #[diag(nonsense = 4, code = "E0123", slug = "foo")]
LL | |
LL | |
LL | |
LL | | struct InvalidNestedStructAttr3 {}
   | |__________________________________^
   |
   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(typeck::example_error)]`

error: `#[diag(slug = ...)]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:91:58
   |
LL | #[diag(typeck::ambiguous_lifetime_bound, code = "E0123", slug = "foo")]
   |                                                          ^^^^^^^^^^^^
   |
   = help: only `code` is a valid nested attributes following the slug

error: `#[suggestion = ...]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:98:5
   |
LL |     #[suggestion = "bar"]
   |     ^^^^^^^^^^^^^^^^^^^^^

error: specified multiple times
  --> $DIR/diagnostic-derive.rs:105:8
   |
LL | #[diag(typeck::ambiguous_lifetime_bound, code = "E0456")]
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
note: previously specified here
  --> $DIR/diagnostic-derive.rs:104:8
   |
LL | #[diag(typeck::ambiguous_lifetime_bound, code = "E0123")]
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: specified multiple times
  --> $DIR/diagnostic-derive.rs:105:49
   |
LL | #[diag(typeck::ambiguous_lifetime_bound, code = "E0456")]
   |                                                 ^^^^^^^
   |
note: previously specified here
  --> $DIR/diagnostic-derive.rs:104:49
   |
LL | #[diag(typeck::ambiguous_lifetime_bound, code = "E0123")]
   |                                                 ^^^^^^^

error: specified multiple times
  --> $DIR/diagnostic-derive.rs:111:65
   |
LL | #[diag(typeck::ambiguous_lifetime_bound, code = "E0456", code = "E0457")]
   |                                                                 ^^^^^^^
   |
note: previously specified here
  --> $DIR/diagnostic-derive.rs:111:49
   |
LL | #[diag(typeck::ambiguous_lifetime_bound, code = "E0456", code = "E0457")]
   |                                                 ^^^^^^^

error: `#[diag(typeck::ambiguous_lifetime_bound)]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:116:42
   |
LL | #[diag(typeck::ambiguous_lifetime_bound, typeck::ambiguous_lifetime_bound, code = "E0456")]
   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: diagnostic slug must be the first argument

error: diagnostic slug not specified
  --> $DIR/diagnostic-derive.rs:121:1
   |
LL | struct KindNotProvided {}
   | ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(typeck::example_error)]`

error: diagnostic slug not specified
  --> $DIR/diagnostic-derive.rs:124:1
   |
LL | / #[diag(code = "E0456")]
LL | |
LL | | struct SlugNotProvided {}
   | |_________________________^
   |
   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(typeck::example_error)]`

error: the `#[primary_span]` attribute can only be applied to fields of type `Span` or `MultiSpan`
  --> $DIR/diagnostic-derive.rs:135:5
   |
LL |     #[primary_span]
   |     ^^^^^^^^^^^^^^^

error: `#[nonsense]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:143:5
   |
LL |     #[nonsense]
   |     ^^^^^^^^^^^

error: the `#[label(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`
  --> $DIR/diagnostic-derive.rs:160:5
   |
LL |     #[label(typeck::label)]
   |     ^^^^^^^^^^^^^^^^^^^^^^^

error: `name` doesn't refer to a field on this type
  --> $DIR/diagnostic-derive.rs:168:45
   |
LL |     #[suggestion(typeck::suggestion, code = "{name}")]
   |                                             ^^^^^^^^

error: invalid format string: expected `'}'` but string was terminated
  --> $DIR/diagnostic-derive.rs:173:16
   |
LL | #[derive(Diagnostic)]
   |           -    ^ expected `'}'` in format string
   |           |
   |           because of this opening brace
   |
   = note: if you intended to print `{`, you can escape it using `{{`
   = note: this error originates in the derive macro `Diagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)

error: invalid format string: unmatched `}` found
  --> $DIR/diagnostic-derive.rs:183:15
   |
LL | #[derive(Diagnostic)]
   |               ^ unmatched `}` in format string
   |
   = note: if you intended to print `}`, you can escape it using `}}`
   = note: this error originates in the derive macro `Diagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)

error: the `#[label(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`
  --> $DIR/diagnostic-derive.rs:203:5
   |
LL |     #[label(typeck::label)]
   |     ^^^^^^^^^^^^^^^^^^^^^^^

error: suggestion without `code = "..."`
  --> $DIR/diagnostic-derive.rs:221:5
   |
LL |     #[suggestion(typeck::suggestion)]
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: `#[suggestion(nonsense = ...)]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:229:18
   |
LL |     #[suggestion(nonsense = "bar")]
   |                  ^^^^^^^^^^^^^^^^
   |
   = help: only `code` and `applicability` are valid nested attributes

error: suggestion without `code = "..."`
  --> $DIR/diagnostic-derive.rs:229:5
   |
LL |     #[suggestion(nonsense = "bar")]
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: `#[suggestion(msg = ...)]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:238:18
   |
LL |     #[suggestion(msg = "bar")]
   |                  ^^^^^^^^^^^
   |
   = help: only `code` and `applicability` are valid nested attributes

error: suggestion without `code = "..."`
  --> $DIR/diagnostic-derive.rs:238:5
   |
LL |     #[suggestion(msg = "bar")]
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^

error: wrong field type for suggestion
  --> $DIR/diagnostic-derive.rs:261:5
   |
LL | /     #[suggestion(typeck::suggestion, code = "This is suggested code")]
LL | |
LL | |     suggestion: Applicability,
   | |_____________________________^
   |
   = help: `#[suggestion(...)]` should be applied to fields of type `Span` or `(Span, Applicability)`

error: specified multiple times
  --> $DIR/diagnostic-derive.rs:277:24
   |
LL |     suggestion: (Span, Span, Applicability),
   |                        ^^^^
   |
note: previously specified here
  --> $DIR/diagnostic-derive.rs:277:18
   |
LL |     suggestion: (Span, Span, Applicability),
   |                  ^^^^

error: specified multiple times
  --> $DIR/diagnostic-derive.rs:285:33
   |
LL |     suggestion: (Applicability, Applicability, Span),
   |                                 ^^^^^^^^^^^^^
   |
note: previously specified here
  --> $DIR/diagnostic-derive.rs:285:18
   |
LL |     suggestion: (Applicability, Applicability, Span),
   |                  ^^^^^^^^^^^^^

error: `#[label = ...]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:292:5
   |
LL |     #[label = "bar"]
   |     ^^^^^^^^^^^^^^^^

error: specified multiple times
  --> $DIR/diagnostic-derive.rs:443:52
   |
LL |     #[suggestion(typeck::suggestion, code = "...", applicability = "maybe-incorrect")]
   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
note: previously specified here
  --> $DIR/diagnostic-derive.rs:445:24
   |
LL |     suggestion: (Span, Applicability),
   |                        ^^^^^^^^^^^^^

error: invalid applicability
  --> $DIR/diagnostic-derive.rs:451:52
   |
LL |     #[suggestion(typeck::suggestion, code = "...", applicability = "batman")]
   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^

error: `#[label(foo)]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:514:28
   |
LL |     #[label(typeck::label, foo)]
   |                            ^^^
   |
   = help: a diagnostic slug must be the first argument to the attribute

error: `#[label(foo = ...)]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:522:28
   |
LL |     #[label(typeck::label, foo = "...")]
   |                            ^^^^^^^^^^^

error: `#[label(foo(...))]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:530:28
   |
LL |     #[label(typeck::label, foo("..."))]
   |                            ^^^^^^^^^^

error: `#[primary_span]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:543:5
   |
LL |     #[primary_span]
   |     ^^^^^^^^^^^^^^^
   |
   = help: the `primary_span` field attribute is not valid for lint diagnostics

error: `#[error(...)]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:563:1
   |
LL | #[error(typeck::ambiguous_lifetime_bound, code = "E0123")]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: diagnostic slug not specified
  --> $DIR/diagnostic-derive.rs:563:1
   |
LL | / #[error(typeck::ambiguous_lifetime_bound, code = "E0123")]
LL | |
LL | |
LL | |
LL | | struct ErrorAttribute {}
   | |________________________^
   |
   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(typeck::example_error)]`

error: `#[warn_(...)]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:570:1
   |
LL | #[warn_(typeck::ambiguous_lifetime_bound, code = "E0123")]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: diagnostic slug not specified
  --> $DIR/diagnostic-derive.rs:570:1
   |
LL | / #[warn_(typeck::ambiguous_lifetime_bound, code = "E0123")]
LL | |
LL | |
LL | |
LL | | struct WarnAttribute {}
   | |_______________________^
   |
   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(typeck::example_error)]`

error: `#[lint(...)]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:577:1
   |
LL | #[lint(typeck::ambiguous_lifetime_bound, code = "E0123")]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: diagnostic slug not specified
  --> $DIR/diagnostic-derive.rs:577:1
   |
LL | / #[lint(typeck::ambiguous_lifetime_bound, code = "E0123")]
LL | |
LL | |
LL | |
LL | | struct LintAttributeOnSessionDiag {}
   | |____________________________________^
   |
   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(typeck::example_error)]`

error: `#[lint(...)]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:584:1
   |
LL | #[lint(typeck::ambiguous_lifetime_bound, code = "E0123")]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: diagnostic slug not specified
  --> $DIR/diagnostic-derive.rs:584:1
   |
LL | / #[lint(typeck::ambiguous_lifetime_bound, code = "E0123")]
LL | |
LL | |
LL | |
LL | | struct LintAttributeOnLintDiag {}
   | |_________________________________^
   |
   = help: specify the slug as the first argument to the attribute, such as `#[diag(typeck::example_error)]`

error: specified multiple times
  --> $DIR/diagnostic-derive.rs:593:52
   |
LL |     #[suggestion(typeck::suggestion, code = "...", code = ",,,")]
   |                                                    ^^^^^^^^^^^^
   |
note: previously specified here
  --> $DIR/diagnostic-derive.rs:593:38
   |
LL |     #[suggestion(typeck::suggestion, code = "...", code = ",,,")]
   |                                      ^^^^^^^^^^^^

error: wrong types for suggestion
  --> $DIR/diagnostic-derive.rs:602:24
   |
LL |     suggestion: (Span, usize),
   |                        ^^^^^
   |
   = help: `#[suggestion(...)]` on a tuple field must be applied to fields of type `(Span, Applicability)`

error: wrong types for suggestion
  --> $DIR/diagnostic-derive.rs:610:17
   |
LL |     suggestion: (Span,),
   |                 ^^^^^^^
   |
   = help: `#[suggestion(...)]` on a tuple field must be applied to fields of type `(Span, Applicability)`

error: suggestion without `code = "..."`
  --> $DIR/diagnostic-derive.rs:617:5
   |
LL |     #[suggestion(typeck::suggestion)]
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: `#[multipart_suggestion(...)]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:624:1
   |
LL | #[multipart_suggestion(typeck::suggestion)]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider creating a `Subdiagnostic` instead

error: `#[multipart_suggestion(...)]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:627:1
   |
LL | #[multipart_suggestion()]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider creating a `Subdiagnostic` instead

error: `#[multipart_suggestion(...)]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:631:5
   |
LL |     #[multipart_suggestion(typeck::suggestion)]
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider creating a `Subdiagnostic` instead

error: `#[suggestion(...)]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:639:1
   |
LL | #[suggestion(typeck::suggestion, code = "...")]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: `#[label]` and `#[suggestion]` can only be applied to fields

error: `#[label]` is not a valid attribute
  --> $DIR/diagnostic-derive.rs:648:1
   |
LL | #[label]
   | ^^^^^^^^
   |
   = help: `#[label]` and `#[suggestion]` can only be applied to fields

error: cannot find attribute `nonsense` in this scope
  --> $DIR/diagnostic-derive.rs:53:3
   |
LL | #[nonsense(typeck::ambiguous_lifetime_bound, code = "E0123")]
   |   ^^^^^^^^

error: cannot find attribute `nonsense` in this scope
  --> $DIR/diagnostic-derive.rs:143:7
   |
LL |     #[nonsense]
   |       ^^^^^^^^

error: cannot find attribute `error` in this scope
  --> $DIR/diagnostic-derive.rs:563:3
   |
LL | #[error(typeck::ambiguous_lifetime_bound, code = "E0123")]
   |   ^^^^^

error: cannot find attribute `warn_` in this scope
  --> $DIR/diagnostic-derive.rs:570:3
   |
LL | #[warn_(typeck::ambiguous_lifetime_bound, code = "E0123")]
   |   ^^^^^ help: a built-in attribute with a similar name exists: `warn`

error: cannot find attribute `lint` in this scope
  --> $DIR/diagnostic-derive.rs:577:3
   |
LL | #[lint(typeck::ambiguous_lifetime_bound, code = "E0123")]
   |   ^^^^ help: a built-in attribute with a similar name exists: `link`

error: cannot find attribute `lint` in this scope
  --> $DIR/diagnostic-derive.rs:584:3
   |
LL | #[lint(typeck::ambiguous_lifetime_bound, code = "E0123")]
   |   ^^^^ help: a built-in attribute with a similar name exists: `link`

error: cannot find attribute `multipart_suggestion` in this scope
  --> $DIR/diagnostic-derive.rs:624:3
   |
LL | #[multipart_suggestion(typeck::suggestion)]
   |   ^^^^^^^^^^^^^^^^^^^^

error: cannot find attribute `multipart_suggestion` in this scope
  --> $DIR/diagnostic-derive.rs:627:3
   |
LL | #[multipart_suggestion()]
   |   ^^^^^^^^^^^^^^^^^^^^

error: cannot find attribute `multipart_suggestion` in this scope
  --> $DIR/diagnostic-derive.rs:631:7
   |
LL |     #[multipart_suggestion(typeck::suggestion)]
   |       ^^^^^^^^^^^^^^^^^^^^

error[E0425]: cannot find value `nonsense` in module `rustc_errors::fluent`
  --> $DIR/diagnostic-derive.rs:66:8
   |
LL | #[diag(nonsense, code = "E0123")]
   |        ^^^^^^^^ not found in `rustc_errors::fluent`

error[E0277]: the trait bound `Hello: IntoDiagnosticArg` is not satisfied
  --> $DIR/diagnostic-derive.rs:336:10
   |
LL | #[derive(Diagnostic)]
   |          ^^^^^^^^^^ the trait `IntoDiagnosticArg` is not implemented for `Hello`
   |
   = help: normalized in stderr
note: required by a bound in `DiagnosticBuilder::<'a, G>::set_arg`
  --> $COMPILER_DIR/rustc_errors/src/diagnostic_builder.rs:LL:CC
   |
LL |         arg: impl IntoDiagnosticArg,
   |                   ^^^^^^^^^^^^^^^^^ required by this bound in `DiagnosticBuilder::<'a, G>::set_arg`
   = note: this error originates in the derive macro `Diagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)

error: aborting due to 72 previous errors

Some errors have detailed explanations: E0277, E0425.
For more information about an error, try `rustc --explain E0277`.
