// The goal of this test is to ensure the color of the text is the one expected.
goto: file://|DOC_PATH|/test_docs/index.html?search=coo

// This is needed so that the text color is computed.
show-text: true

// Ayu theme
local-storage: {
    "rustdoc-theme": "ayu",
    "rustdoc-use-system-theme": "false",
}
reload:

// Waiting for the search results to appear...
wait-for: "#titles"
assert-css: (
    "//*[@class='desc']//*[text()='Just a normal struct.']",
    {"color": "rgb(197, 197, 197)"},
)
assert-css: (
    "//*[@class='result-name']/*[text()='test_docs::']",
    {"color": "rgb(0, 150, 207)"},
)

// Checking the color of "keyword" text.
assert-css: (
    "//*[@class='result-name']//*[text()='(keyword)']",
    {"color": "rgb(120, 135, 151)"},
)

// Checking the color of "keyword".
assert-css: (
    ".result-name .keyword",
    {"color": "rgb(57, 175, 215)"},
    ALL,
)
// Check the color of "struct".
assert-css: (
    ".result-name .struct",
    {"color": "rgb(255, 160, 165)"},
    ALL,
)
// Check the color of "associated type".
assert-css: (
    ".result-name .associatedtype",
    {"color": "rgb(57, 175, 215)"},
    ALL,
)
// Check the color of "type method".
assert-css: (
    ".result-name .tymethod",
    {"color": "rgb(253, 214, 135)"},
    ALL,
)
// Check the color of "method".
assert-css: (
    ".result-name .method",
    {"color": "rgb(253, 214, 135)"},
    ALL,
)
// Check the color of "struct field".
assert-css: (
    ".result-name .structfield",
    {"color": "rgb(0, 150, 207)"},
    ALL,
)
// Check the color of "macro".
assert-css: (
    ".result-name .macro",
    {"color": "rgb(163, 122, 204)"},
    ALL,
)
// Check the color of "fn".
assert-css: (
    ".result-name .fn",
    {"color": "rgb(253, 214, 135)"},
    ALL,
)

// Checking the `<a>` container.
assert-css: (
    "//*[@class='result-name']/*[text()='test_docs::']/ancestor::a",
    {"color": "rgb(0, 150, 207)", "background-color": "rgba(0, 0, 0, 0)"},
    ALL,
)

// Checking color and background on hover.
move-cursor-to: "//*[@class='desc']//*[text()='Just a normal struct.']"
assert-css: (
    "//*[@class='result-name']/*[text()='test_docs::']",
    {"color": "rgb(255, 255, 255)"},
)
assert-css: (
    "//*[@class='result-name']/*[text()='test_docs::']/ancestor::a",
    {"color": "rgb(255, 255, 255)", "background-color": "rgb(60, 60, 60)"},
)

// Dark theme
local-storage: {
    "rustdoc-theme": "dark",
    "rustdoc-use-system-theme": "false",
}
reload:

// Waiting for the search results to appear...
wait-for: "#titles"
assert-css: (
    "//*[@class='desc']//*[text()='Just a normal struct.']",
    {"color": "rgb(221, 221, 221)"},
)
assert-css: (
    "//*[@class='result-name']/*[text()='test_docs::']",
    {"color": "rgb(221, 221, 221)"},
)

// Checking the color for "keyword".
assert-css: (
    "//*[@class='result-name']//*[text()='(keyword)']",
    {"color": "rgb(221, 221, 221)"},
)

// Checking the color of "keyword".
assert-css: (
    ".result-name .keyword",
    {"color": "rgb(210, 153, 29)"},
    ALL,
)
// Check the color of "struct".
assert-css: (
    ".result-name .struct",
    {"color": "rgb(45, 191, 184)"},
    ALL,
)
// Check the color of "associated type".
assert-css: (
    ".result-name .associatedtype",
    {"color": "rgb(210, 153, 29)"},
    ALL,
)
// Check the color of "type method".
assert-css: (
    ".result-name .tymethod",
    {"color": "rgb(43, 171, 99)"},
    ALL,
)
// Check the color of "method".
assert-css: (
    ".result-name .method",
    {"color": "rgb(43, 171, 99)"},
    ALL,
)
// Check the color of "struct field".
assert-css: (
    ".result-name .structfield",
    {"color": "rgb(221, 221, 221)"},
    ALL,
)
// Check the color of "macro".
assert-css: (
    ".result-name .macro",
    {"color": "rgb(9, 189, 0)"},
    ALL,
)
// Check the color of "fn".
assert-css: (
    ".result-name .fn",
    {"color": "rgb(43, 171, 99)"},
    ALL,
)

// Checking the `<a>` container.
assert-css: (
    "//*[@class='result-name']/*[text()='test_docs::']/ancestor::a",
    {"color": "rgb(221, 221, 221)", "background-color": "rgba(0, 0, 0, 0)"},
)

// Checking color and background on hover.
move-cursor-to: "//*[@class='desc']//*[text()='Just a normal struct.']"
assert-css: (
    "//*[@class='result-name']/*[text()='test_docs::']",
    {"color": "rgb(221, 221, 221)"},
)
assert-css: (
    "//*[@class='result-name']/*[text()='test_docs::']/ancestor::a",
    {"color": "rgb(221, 221, 221)", "background-color": "rgb(119, 119, 119)"},
)

// Light theme
local-storage: {"rustdoc-theme": "light", "rustdoc-use-system-theme": "false"}
reload:

// Waiting for the search results to appear...
wait-for: "#titles"
assert-css: (
    "//*[@class='desc']//*[text()='Just a normal struct.']",
    {"color": "rgb(0, 0, 0)"},
)
assert-css: (
    "//*[@class='result-name']/*[text()='test_docs::']",
    {"color": "rgb(0, 0, 0)"},
)

// Checking the color for "keyword".
assert-css: (
    "//*[@class='result-name']//*[text()='(keyword)']",
    {"color": "rgb(0, 0, 0)"},
)

// Checking the color of "keyword".
assert-css: (
    ".result-name .keyword",
    {"color": "rgb(56, 115, 173)"},
    ALL,
)
// Check the color of "struct".
assert-css: (
    ".result-name .struct",
    {"color": "rgb(173, 55, 138)"},
    ALL,
)
// Check the color of "associated type".
assert-css: (
    ".result-name .associatedtype",
    {"color": "rgb(56, 115, 173)"},
    ALL,
)
// Check the color of "type method".
assert-css: (
    ".result-name .tymethod",
    {"color": "rgb(173, 124, 55)"},
    ALL,
)
// Check the color of "method".
assert-css: (
    ".result-name .method",
    {"color": "rgb(173, 124, 55)"},
    ALL,
)
// Check the color of "struct field".
assert-css: (
    ".result-name .structfield",
    {"color": "rgb(0, 0, 0)"},
    ALL,
)
// Check the color of "macro".
assert-css: (
    ".result-name .macro",
    {"color": "rgb(6, 128, 0)"},
    ALL,
)
// Check the color of "fn".
assert-css: (
    ".result-name .fn",
    {"color": "rgb(173, 124, 55)"},
    ALL,
)

// Checking the `<a>` container.
assert-css: (
    "//*[@class='result-name']/*[text()='test_docs::']/ancestor::a",
    {"color": "rgb(0, 0, 0)", "background-color": "rgba(0, 0, 0, 0)"},
)

// Checking color and background on hover.
move-cursor-to: "//*[@class='desc']//*[text()='Just a normal struct.']"
assert-css: (
    "//*[@class='result-name']/*[text()='test_docs::']",
    {"color": "rgb(0, 0, 0)"},
)
assert-css: (
    "//*[@class='result-name']/*[text()='test_docs::']/ancestor::a",
    {"color": "rgb(0, 0, 0)", "background-color": "rgb(221, 221, 221)"},
)

// Check the alias more specifically in the dark theme.
goto: file://|DOC_PATH|/test_docs/index.html
// We set the theme so we're sure that the correct values will be used, whatever the computer
// this test is running on.
local-storage: {
    "rustdoc-theme": "dark",
    "rustdoc-use-system-theme": "false",
}
// If the text isn't displayed, the browser doesn't compute color style correctly...
show-text: true
// We reload the page so the local storage settings are being used.
reload:
write: (".search-input", "thisisanalias")
// To be SURE that the search will be run.
press-key: 'Enter'
// Waiting for the search results to appear...
wait-for: "#titles"
// Checking that the colors for the alias element are the ones expected.
assert-css: (".result-name > .alias", {"color": "rgb(255, 255, 255)"})
assert-css: (".result-name > .alias > .grey", {"color": "rgb(204, 204, 204)"})
