warning: integer-to-pointer cast
  --> $DIR/munmap.rs:LL:CC
   |
LL | /         libc::munmap(
LL | |
LL | |             // Some high address we surely have not allocated anything at
LL | |             ptr::invalid_mut(1 << 30),
LL | |             4096,
LL | |         )
   | |_________^ integer-to-pointer cast
   |
   = help: This program is using integer-to-pointer casts or (equivalently) `ptr::from_exposed_addr`,
   = help: which means that Miri might miss pointer bugs in this program.
   = help: See https://doc.rust-lang.org/nightly/std/ptr/fn.from_exposed_addr.html for more details on that operation.
   = help: To ensure that Miri does not miss bugs in your program, use Strict Provenance APIs (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance, https://crates.io/crates/sptr) instead.
   = help: You can then pass the `-Zmiri-strict-provenance` flag to Miri, to ensure you are not relying on `from_exposed_addr` semantics.
   = help: Alternatively, the `-Zmiri-permissive-provenance` flag disables this warning.
   = note: BACKTRACE:
   = note: inside `main` at $DIR/munmap.rs:LL:CC

error: unsupported operation: Miri only supports munmap on memory allocated directly by mmap
  --> $DIR/munmap.rs:LL:CC
   |
LL | /         libc::munmap(
LL | |
LL | |             // Some high address we surely have not allocated anything at
LL | |             ptr::invalid_mut(1 << 30),
LL | |             4096,
LL | |         )
   | |_________^ Miri only supports munmap on memory allocated directly by mmap
   |
   = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support
   = note: BACKTRACE:
   = note: inside `main` at $DIR/munmap.rs:LL:CC

note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace

error: aborting due to previous error; 1 warning emitted

