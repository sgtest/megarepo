error: this function can be simplified using the `async fn` syntax
  --> $DIR/manual_async_fn.rs:8:1
   |
LL | fn fut() -> impl Future<Output = i32> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `-D clippy::manual-async-fn` implied by `-D warnings`
help: make the function `async` and return the output of the future directly
   |
LL | async fn fut() -> i32 {
   | ^^^^^^^^^^^^^^^^^^^^^
help: move the body of the async block to the enclosing function
   |
LL | fn fut() -> impl Future<Output = i32> { 42 }
   |                                       ^^^^^^

error: this function can be simplified using the `async fn` syntax
  --> $DIR/manual_async_fn.rs:12:1
   |
LL | fn empty_fut() -> impl Future<Output = ()> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: make the function `async` and remove the return type
   |
LL | async fn empty_fut()  {
   | ^^^^^^^^^^^^^^^^^^^^
help: move the body of the async block to the enclosing function
   |
LL | fn empty_fut() -> impl Future<Output = ()> {}
   |                                            ^^

error: this function can be simplified using the `async fn` syntax
  --> $DIR/manual_async_fn.rs:16:1
   |
LL | fn core_fut() -> impl core::future::Future<Output = i32> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: make the function `async` and return the output of the future directly
   |
LL | async fn core_fut() -> i32 {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^
help: move the body of the async block to the enclosing function
   |
LL | fn core_fut() -> impl core::future::Future<Output = i32> { 42 }
   |                                                          ^^^^^^

error: this function can be simplified using the `async fn` syntax
  --> $DIR/manual_async_fn.rs:38:5
   |
LL |     fn inh_fut() -> impl Future<Output = i32> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: make the function `async` and return the output of the future directly
   |
LL |     async fn inh_fut() -> i32 {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^
help: move the body of the async block to the enclosing function
   |
LL |     fn inh_fut() -> impl Future<Output = i32> {
LL |         // NOTE: this code is here just to check that the identation is correct in the suggested fix
LL |         let a = 42;
LL |         let b = 21;
LL |         if a < b {
LL |             let c = 21;
 ...

error: this function can be simplified using the `async fn` syntax
  --> $DIR/manual_async_fn.rs:54:5
   |
LL |     fn meth_fut(&self) -> impl Future<Output = i32> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: make the function `async` and return the output of the future directly
   |
LL |     async fn meth_fut(&self) -> i32 {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: move the body of the async block to the enclosing function
   |
LL |     fn meth_fut(&self) -> impl Future<Output = i32> { 42 }
   |                                                     ^^^^^^

error: this function can be simplified using the `async fn` syntax
  --> $DIR/manual_async_fn.rs:58:5
   |
LL |     fn empty_fut(&self) -> impl Future<Output = ()> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: make the function `async` and remove the return type
   |
LL |     async fn empty_fut(&self)  {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^
help: move the body of the async block to the enclosing function
   |
LL |     fn empty_fut(&self) -> impl Future<Output = ()> {}
   |                                                     ^^

error: aborting due to 6 previous errors

