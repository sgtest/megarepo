error: future cannot be sent between threads safely
  --> $DIR/future_not_send.rs:7:62
   |
LL | async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {
   |                                                              ^^^^ future returned by `private_future` is not `Send`
   |
note: future is not `Send` as this value is used across an await
  --> $DIR/future_not_send.rs:9:20
   |
LL | async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {
   |                         -- has type `std::rc::Rc<[u8]>` which is not `Send`
LL |
LL |     async { true }.await
   |                    ^^^^^ await occurs here, with `rc` maybe used later
LL | }
   | - `rc` is later dropped here
   = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Send`
note: future is not `Send` as this value is used across an await
  --> $DIR/future_not_send.rs:9:20
   |
LL | async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {
   |                                       ---- has type `&std::cell::Cell<usize>` which is not `Send`
LL |
LL |     async { true }.await
   |                    ^^^^^ await occurs here, with `cell` maybe used later
LL | }
   | - `cell` is later dropped here
   = note: `std::cell::Cell<usize>` doesn't implement `std::marker::Sync`
   = note: `-D clippy::future-not-send` implied by `-D warnings`

error: future cannot be sent between threads safely
  --> $DIR/future_not_send.rs:12:42
   |
LL | pub async fn public_future(rc: Rc<[u8]>) {
   |                                          ^ future returned by `public_future` is not `Send`
   |
note: future is not `Send` as this value is used across an await
  --> $DIR/future_not_send.rs:14:20
   |
LL | pub async fn public_future(rc: Rc<[u8]>) {
   |                            -- has type `std::rc::Rc<[u8]>` which is not `Send`
LL |
LL |     async { true }.await;
   |                    ^^^^^ await occurs here, with `rc` maybe used later
LL | }
   | - `rc` is later dropped here
   = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Send`

error: future cannot be sent between threads safely
  --> $DIR/future_not_send.rs:21:63
   |
LL | async fn private_future2(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {
   |                                                               ^^^^ future returned by `private_future2` is not `Send`
   |
note: captured value is not `Send`
  --> $DIR/future_not_send.rs:21:26
   |
LL | async fn private_future2(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {
   |                          ^^ has type `std::rc::Rc<[u8]>` which is not `Send`
   = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Send`
note: captured value is not `Send` because `&` references cannot be sent unless their referent is `Sync`
  --> $DIR/future_not_send.rs:21:40
   |
LL | async fn private_future2(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {
   |                                        ^^^^ has type `&std::cell::Cell<usize>` which is not `Send`, because `std::cell::Cell<usize>` is not `Sync`
   = note: `std::cell::Cell<usize>` doesn't implement `std::marker::Sync`

error: future cannot be sent between threads safely
  --> $DIR/future_not_send.rs:26:43
   |
LL | pub async fn public_future2(rc: Rc<[u8]>) {}
   |                                           ^ future returned by `public_future2` is not `Send`
   |
note: captured value is not `Send`
  --> $DIR/future_not_send.rs:26:29
   |
LL | pub async fn public_future2(rc: Rc<[u8]>) {}
   |                             ^^ has type `std::rc::Rc<[u8]>` which is not `Send`
   = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Send`

error: future cannot be sent between threads safely
  --> $DIR/future_not_send.rs:38:39
   |
LL |     async fn private_future(&self) -> usize {
   |                                       ^^^^^ future returned by `private_future` is not `Send`
   |
note: future is not `Send` as this value is used across an await
  --> $DIR/future_not_send.rs:40:24
   |
LL |     async fn private_future(&self) -> usize {
   |                             ----- has type `&Dummy` which is not `Send`
LL |
LL |         async { true }.await;
   |                        ^^^^^ await occurs here, with `&self` maybe used later
LL |         self.rc.len()
LL |     }
   |     - `&self` is later dropped here
   = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Sync`

error: future cannot be sent between threads safely
  --> $DIR/future_not_send.rs:44:39
   |
LL |     pub async fn public_future(&self) {
   |                                       ^ future returned by `public_future` is not `Send`
   |
note: future is not `Send` as this value is used across an await
  --> $DIR/future_not_send.rs:46:31
   |
LL |     pub async fn public_future(&self) {
   |                                ----- has type `&Dummy` which is not `Send`
LL |
LL |         self.private_future().await;
   |                               ^^^^^ await occurs here, with `&self` maybe used later
LL |     }
   |     - `&self` is later dropped here
   = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Sync`

error: future cannot be sent between threads safely
  --> $DIR/future_not_send.rs:55:37
   |
LL | async fn generic_future<T>(t: T) -> T
   |                                     ^ future returned by `generic_future` is not `Send`
   |
note: future is not `Send` as this value is used across an await
  --> $DIR/future_not_send.rs:61:20
   |
LL |     let rt = &t;
   |         -- has type `&T` which is not `Send`
LL |     async { true }.await;
   |                    ^^^^^ await occurs here, with `rt` maybe used later
LL |     t
LL | }
   | - `rt` is later dropped here
   = note: `T` doesn't implement `std::marker::Sync`

error: future cannot be sent between threads safely
  --> $DIR/future_not_send.rs:72:34
   |
LL | async fn unclear_future<T>(t: T) {}
   |                                  ^ future returned by `unclear_future` is not `Send`
   |
note: captured value is not `Send`
  --> $DIR/future_not_send.rs:72:28
   |
LL | async fn unclear_future<T>(t: T) {}
   |                            ^ has type `T` which is not `Send`
   = note: `T` doesn't implement `std::marker::Send`

error: aborting due to 8 previous errors

