; ModuleID = 'src/rt/intrinsics/intrinsics.cpp'
; target datalayout = "e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:32:64-v64:64:64-v128:128:128-a0:0:64-f80:128:128-n8:16:32"
target triple = "@CFG_TARGET_TRIPLE@"

%0 = type { i32, %struct.rust_task**, i32 }
%1 = type { %"struct.hash_map<long, rust_task *>::map_entry"* }
%class.array_list = type { i32, %"struct.memory_region::alloc_header"**, i32 }
%class.boxed_region = type { %class.memory_region*, %struct.rust_opaque_box* }
%class.circular_buffer = type { %class.rust_kernel*, i32, i32, i32, i32, i8* }
%class.context = type { %struct.registers_t, %class.context*, [12 x i8] }
%"class.debug::task_debug_info" = type { %"class.std::map" }
%class.hash_map = type { %"struct.hash_map<long, rust_port *>::map_entry"* }
%class.indexed_list = type { i32 (...)**, %0 }
%class.lock_and_signal = type { i32 (...)**, %struct._opaque_pthread_cond_t, %struct._opaque_pthread_mutex_t, %struct._opaque_pthread_t* }
%class.memory_region = type { i32 (...)**, %class.rust_srv*, %class.memory_region*, i32, %class.array_list, i8, i8, %class.lock_and_signal }
%class.rust_crate_cache = type { %struct.type_desc*, %struct.rust_hashable_dict*, %struct.rust_task_thread*, i32 }
%class.rust_kernel = type { %class.memory_region, %class.rust_log, %class.rust_srv*, %class.lock_and_signal, i32, i32, %1, %class.lock_and_signal, i32, %class.lock_and_signal, i32, %"class.std::map", %"class.std::vector", %struct.rust_env* }
%class.rust_log = type { i32 (...)**, %class.rust_srv*, %struct.rust_task_thread*, i8 }
%class.rust_obstack = type { %struct.rust_obstack_chunk*, %struct.rust_task* }
%class.rust_port = type { i32, i32, %class.rust_kernel*, %struct.rust_task*, i32, %class.circular_buffer, %class.lock_and_signal }
%class.rust_port_selector = type { %class.rust_port**, i32, %class.lock_and_signal }
%class.rust_scheduler = type opaque
%class.rust_srv = type { i32 (...)**, %struct.rust_env*, %class.memory_region }
%class.rust_task_list = type { %class.indexed_list, %struct.rust_task_thread*, i8* }
%class.rust_thread = type { i32 (...)**, %struct._opaque_pthread_t*, i32 }
%"class.std::_Rb_tree" = type { %"struct.std::_Rb_tree<long, std::pair<const long, rust_scheduler *>, std::_Select1st<std::pair<const long, rust_scheduler *> >, std::less<long>, std::allocator<std::pair<const long, rust_scheduler *> > >::_Rb_tree_impl" }
%"class.std::map" = type { %"class.std::_Rb_tree" }
%"class.std::vector" = type { %"struct.std::_Vector_base" }
%struct.UT_hash_bucket = type { %struct.UT_hash_handle*, i32, i32 }
%struct.UT_hash_handle = type { %struct.UT_hash_table*, i8*, i8*, %struct.UT_hash_handle*, %struct.UT_hash_handle*, i8*, i32, i32 }
%struct.UT_hash_table = type { %struct.UT_hash_bucket*, i32, i32, i32, %struct.UT_hash_handle*, i32, i32, i32, i32, i32 }
%struct.__darwin_pthread_handler_rec = type { void (i8*)*, i8*, %struct.__darwin_pthread_handler_rec* }
%struct._opaque_pthread_attr_t = type { i32, [36 x i8] }
%struct._opaque_pthread_cond_t = type { i32, [24 x i8] }
%struct._opaque_pthread_mutex_t = type { i32, [40 x i8] }
%struct._opaque_pthread_t = type { i32, %struct.__darwin_pthread_handler_rec*, [596 x i8] }
%struct.chan_handle = type { i32, i32 }
%"struct.hash_map<long, rust_port *>::map_entry" = type opaque
%"struct.hash_map<long, rust_task *>::map_entry" = type opaque
%"struct.memory_region::alloc_header" = type { i8 }
%struct.randctx = type { i32, [256 x i32], [256 x i32], i32, i32, i32 }
%struct.registers_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i16, i16, i32, i32, [12 x i8] }
%struct.rust_box = type opaque
%struct.rust_env = type { i32, i32, i32, i8*, i8, i8, i8* }
%struct.rust_fn = type { i32*, %struct.rust_box* }
%struct.rust_hashable_dict = type { %struct.UT_hash_handle, [0 x i8*] }
%struct.rust_obstack_chunk = type { %struct.rust_obstack_chunk*, i32, i32, i32, [0 x i8] }
%struct.rust_opaque_box = type { i32, %struct.type_desc*, %struct.rust_opaque_box*, %struct.rust_opaque_box* }
%struct.rust_shape_tables = type { i8*, i8* }
%struct.rust_task = type { i32, i32, i8, %struct.chan_handle, [12 x i8], %class.context, %struct.stk_seg*, i32, %class.rust_scheduler*, %struct.rust_task_thread*, %class.rust_crate_cache*, %class.rust_kernel*, i8*, %class.rust_task_list*, %"struct.memory_region::alloc_header"*, i8*, %struct.rust_task*, i32, i32, i32*, %class.memory_region, %class.boxed_region, i8, i8, %class.lock_and_signal, %class.hash_map, %class.rust_obstack, i32, %"class.debug::task_debug_info", i32, i8, i8, %struct.stk_seg*, i32, i32, %class.rust_port_selector, [8 x i8] }
%struct.rust_task_thread = type { %class.rust_thread, i32, %class.rust_log, i32, %class.rust_srv*, i8*, %class.rust_task_list, %class.rust_task_list, %class.rust_task_list, %class.rust_task_list, %class.rust_crate_cache, %struct.randctx, %class.rust_kernel*, %class.rust_scheduler*, i32, i32, %class.lock_and_signal, i32, %struct._opaque_pthread_attr_t, %struct.rust_env*, [4 x i8], %class.context, i8, %struct.stk_seg*, %struct.stk_seg*, [4 x i8] }
%struct.rust_vec = type { i32, i32, [0 x i8] }
%"struct.std::_Rb_tree<long, std::pair<const long, rust_scheduler *>, std::_Select1st<std::pair<const long, rust_scheduler *> >, std::less<long>, std::allocator<std::pair<const long, rust_scheduler *> > >::_Rb_tree_impl" = type { %"struct.memory_region::alloc_header", %"struct.std::_Rb_tree_node_base", i32 }
%"struct.std::_Rb_tree_node_base" = type { i32, %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<long, std::allocator<long> >::_Vector_impl" }
%"struct.std::_Vector_base<long, std::allocator<long> >::_Vector_impl" = type { i32*, i32*, i32* }
%struct.stk_seg = type { %struct.stk_seg*, %struct.stk_seg*, i32, i32, i32, i32, [0 x i8] }
%struct.type_desc = type { %struct.type_desc**, i32, i32, void (i8*, i8*, %struct.type_desc**, i8*)*, void (i8*, i8*, %struct.type_desc**, i8*)*, void (i8*, i8*, %struct.type_desc**, i8*)*, i8*, void (i8*, i8*, %struct.type_desc**, i8*)*, void (i8*, i8*, %struct.type_desc**, i8*)*, i32, i8*, i8*, %struct.rust_shape_tables*, i32, i32, %struct.UT_hash_handle, i32, [0 x %struct.type_desc*] }

define void @rust_intrinsic_vec_len(i32* nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, %struct.rust_vec** nocapture %vp) nounwind {
  %1 = load %struct.rust_vec** %vp, align 4
  %2 = getelementptr inbounds %struct.rust_vec* %1, i32 0, i32 0
  %3 = load i32* %2, align 4
  %4 = getelementptr inbounds %struct.type_desc* %ty, i32 0, i32 1
  %5 = load i32* %4, align 4
  %6 = udiv i32 %3, %5
  store i32 %6, i32* %retptr, align 4
  ret void
}

define void @rust_intrinsic_ptr_offset(i8** nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, i8* %ptr, i32 %count) nounwind {
  %1 = getelementptr inbounds %struct.type_desc* %ty, i32 0, i32 1
  %2 = load i32* %1, align 4
  %3 = mul i32 %2, %count
  %4 = getelementptr inbounds i8* %ptr, i32 %3
  store i8* %4, i8** %retptr, align 4
  ret void
}

define void @rust_intrinsic_cast(i8* nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %t1, %struct.type_desc* nocapture %t2, i8* nocapture %src) nounwind {
  %1 = getelementptr inbounds %struct.type_desc* %t1, i32 0, i32 1
  %2 = load i32* %1, align 4
  tail call void @llvm.memmove.p0i8.p0i8.i32(i8* %retptr, i8* %src, i32 %2, i32 1, i1 false)
  ret void
}

declare void @llvm.memmove.p0i8.p0i8.i32(i8* nocapture, i8* nocapture, i32, i32, i1) nounwind

define void @rust_intrinsic_addr_of(i8** nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, i8* %valptr) nounwind {
  store i8* %valptr, i8** %retptr, align 4
  ret void
}

define void @rust_intrinsic_call_with_retptr(i8** %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, %struct.rust_fn* nocapture %recvfn) {
  %1 = getelementptr inbounds %struct.rust_fn* %recvfn, i32 0, i32 0
  %2 = load i32** %1, align 4
  %3 = bitcast i32* %2 to void (i8**, i8*, i8**)*
  %4 = getelementptr inbounds %struct.rust_fn* %recvfn, i32 0, i32 1
  %5 = load %struct.rust_box** %4, align 4
  %6 = bitcast %struct.rust_box* %5 to i8*
  tail call void %3(i8** null, i8* %6, i8** %retptr)
  ret void
}

define void @rust_intrinsic_get_type_desc(i8** nocapture %retptr, i8* nocapture %env, %struct.type_desc* %ty) nounwind {
  %ty.c = bitcast %struct.type_desc* %ty to i8*
  store i8* %ty.c, i8** %retptr, align 4
  ret void
}

define void @rust_intrinsic_task_yield(i8** nocapture %retptr, i8* nocapture %env, %struct.rust_task* %task, i8* %killed) {
  tail call void @rust_task_yield(%struct.rust_task* %task, i8* %killed)
  ret void
}

declare void @rust_task_yield(%struct.rust_task*, i8*)

define void @rust_intrinsic_memmove(i8* nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, i8* nocapture %dst, i8* nocapture %src, i32 %count) nounwind {
  %1 = getelementptr inbounds %struct.type_desc* %ty, i32 0, i32 1
  %2 = load i32* %1, align 4
  %3 = mul i32 %2, %count
  tail call void @llvm.memmove.p0i8.p0i8.i32(i8* %dst, i8* %src, i32 %3, i32 1, i1 false)
  ret void
}

define void @rust_intrinsic_memcpy(i8* nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, i8* nocapture %dst, i8* nocapture %src, i32 %count) nounwind {
  %1 = getelementptr inbounds %struct.type_desc* %ty, i32 0, i32 1
  %2 = load i32* %1, align 4
  %3 = mul i32 %2, %count
  tail call void @llvm.memcpy.p0i8.p0i8.i32(i8* %dst, i8* %src, i32 %3, i32 1, i1 false)
  ret void
}

declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture, i8* nocapture, i32, i32, i1) nounwind

define void @rust_intrinsic_leak(i8* nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, i8* nocapture %thing) nounwind readnone {
  ret void
}

define void @upcall_intrinsic_vec_push(%struct.rust_vec** nocapture %vp, %struct.type_desc* nocapture %elt_ty, i8* nocapture %elt) {
; <label>:0
  %1 = load %struct.rust_vec** %vp, align 4
  %2 = getelementptr inbounds %struct.rust_vec* %1, i32 0, i32 0
  %3 = load i32* %2, align 4
  %4 = getelementptr inbounds %struct.type_desc* %elt_ty, i32 0, i32 1
  %5 = load i32* %4, align 4
  %6 = add i32 %5, %3
  %7 = getelementptr inbounds %struct.rust_vec* %1, i32 0, i32 1
  %8 = load i32* %7, align 4
  %9 = icmp ult i32 %8, %6
  br i1 %9, label %10, label %_Z16reserve_vec_fastPP8rust_vecm.exit

; <label>:10                                      ; preds = %0
  %11 = add i32 %6, -1
  %12 = lshr i32 %11, 1
  %13 = or i32 %12, %11
  %14 = lshr i32 %13, 2
  %15 = or i32 %14, %13
  %16 = lshr i32 %15, 4
  %17 = or i32 %16, %15
  %18 = lshr i32 %17, 8
  %19 = or i32 %18, %17
  %20 = lshr i32 %19, 16
  %21 = or i32 %20, %19
  %22 = add i32 %21, 1
  %23 = add i32 %21, 9
  %24 = bitcast %struct.rust_vec* %1 to i8*
  %25 = tail call i8* @upcall_shared_realloc(i8* %24, i32 %23)
  %26 = bitcast i8* %25 to %struct.rust_vec*
  store %struct.rust_vec* %26, %struct.rust_vec** %vp, align 4
  %27 = getelementptr inbounds i8* %25, i32 4
  %28 = bitcast i8* %27 to i32*
  store i32 %22, i32* %28, align 4
  %.pr = load i32* %4, align 4
  %.pre = load %struct.rust_vec** %vp, align 4
  %.phi.trans.insert = getelementptr inbounds %struct.rust_vec* %.pre, i32 0, i32 0
  %.pre4 = load i32* %.phi.trans.insert, align 4
  br label %_Z16reserve_vec_fastPP8rust_vecm.exit

_Z16reserve_vec_fastPP8rust_vecm.exit:            ; preds = %0, %10
  %29 = phi i32 [ %3, %0 ], [ %.pre4, %10 ]
  %30 = phi %struct.rust_vec* [ %1, %0 ], [ %.pre, %10 ]
  %31 = phi i32 [ %5, %0 ], [ %.pr, %10 ]
  %32 = getelementptr inbounds %struct.rust_vec* %30, i32 0, i32 0
  %33 = getelementptr inbounds %struct.rust_vec* %30, i32 0, i32 2, i32 %29
  tail call void @llvm.memmove.p0i8.p0i8.i32(i8* %33, i8* %elt, i32 %31, i32 1, i1 false)
  %34 = getelementptr inbounds %struct.type_desc* %elt_ty, i32 0, i32 3
  %35 = load void (i8*, i8*, %struct.type_desc**, i8*)** %34, align 4
  %36 = icmp eq void (i8*, i8*, %struct.type_desc**, i8*)* %35, null
  br i1 %36, label %_ZL13copy_elementsP9type_descPvS1_m.exit, label %37

; <label>:37                                      ; preds = %_Z16reserve_vec_fastPP8rust_vecm.exit
  %38 = load i32* %4, align 4
  %39 = getelementptr inbounds %struct.type_desc* %elt_ty, i32 0, i32 0
  %40 = load %struct.type_desc*** %39, align 4
  %41 = icmp sgt i32 %31, 0
  br i1 %41, label %.lr.ph.i.preheader, label %_ZL13copy_elementsP9type_descPvS1_m.exit

.lr.ph.i.preheader:                               ; preds = %37
  %scevgep = getelementptr %struct.rust_vec* %30, i32 1, i32 0
  %scevgep2 = bitcast i32* %scevgep to i8*
  br label %.lr.ph.i

.lr.ph.i:                                         ; preds = %.lr.ph.i.preheader, %.lr.ph.i
  %indvar.i = phi i32 [ %indvar.next.i, %.lr.ph.i ], [ 0, %.lr.ph.i.preheader ]
  %tmp = mul i32 %38, %indvar.i
  %tmp2.i = add i32 %38, %tmp
  %tmp3 = add i32 %29, %tmp
  %p.01.i = getelementptr i8* %scevgep2, i32 %tmp3
  tail call void %35(i8* null, i8* null, %struct.type_desc** %40, i8* %p.01.i)
  %42 = icmp slt i32 %tmp2.i, %31
  %indvar.next.i = add i32 %indvar.i, 1
  br i1 %42, label %.lr.ph.i, label %_ZL13copy_elementsP9type_descPvS1_m.exit

_ZL13copy_elementsP9type_descPvS1_m.exit:         ; preds = %.lr.ph.i, %_Z16reserve_vec_fastPP8rust_vecm.exit, %37
  %43 = load i32* %4, align 4
  %44 = load i32* %32, align 4
  %45 = add i32 %44, %43
  store i32 %45, i32* %32, align 4
  ret void
}

define void @upcall_vec_push(%struct.rust_vec** nocapture %vp, %struct.type_desc* nocapture %elt_ty, i8* nocapture %elt) {
  tail call void @upcall_intrinsic_vec_push(%struct.rust_vec** %vp, %struct.type_desc* %elt_ty, i8* %elt)
  ret void
}

define void @rust_intrinsic_frame_address(i8** nocapture %p) nounwind {
  %1 = tail call i8* @llvm.frameaddress(i32 1)
  store i8* %1, i8** %p, align 4
  ret void
}

declare i8* @llvm.frameaddress(i32) nounwind readnone

declare i8* @upcall_shared_realloc(i8*, i32)
