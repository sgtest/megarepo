#[link(name = "std",
       vers = "0.1",
       uuid = "122bed0b-c19b-4b82-b0b7-7ae8aead7297",
       url = "http://rust-lang.org/src/std")];

#[comment = "The Rust standard library"];
#[license = "MIT"];
#[crate_type = "lib"];

export fs, io, net, run, uv, uvtmp;
export c_vec, four, tri, util;
export bitv, deque, fun_treemap, list, map, smallintmap, sort, treemap, ufind;
export rope;
export ebml, dbg, getopts, json, rand, sha1, term, time;
export test, tempfile, serialization;
// FIXME: generic_os and os_fs shouldn't be exported
export generic_os, os, os_fs;


// General io and system-services modules

mod fs;
mod io;
mod net;
#[path =  "run_program.rs"]
mod run;
mod uv;
mod uvtmp;


// Utility modules

mod c_vec;
mod four;
mod tri;
mod util;


// Collections

mod bitv;
mod deque;
mod fun_treemap;
mod list;
mod map;
mod rope;
mod smallintmap;
mod sort;
mod treemap;
mod ufind;


// And ... other stuff

mod ebml;
mod dbg;
mod getopts;
mod json;
mod rand;
mod sha1;
mod md4;
mod tempfile;
mod term;
mod time;

#[cfg(unicode)]
mod unicode;


// Compiler support modules

mod test;
mod serialization;

// Target-os module.

// TODO: Have each os module re-export everything from genericos.
mod generic_os;

#[cfg(target_os = "win32")]
#[path = "win32_os.rs"]
mod os;
#[cfg(target_os = "win32")]
#[path = "win32_fs.rs"]
mod os_fs;

#[cfg(target_os = "macos")]
#[path = "macos_os.rs"]
mod os;
#[cfg(target_os = "macos")]
#[path = "posix_fs.rs"]
mod os_fs;

#[cfg(target_os = "linux")]
#[path = "linux_os.rs"]
mod os;
#[cfg(target_os = "linux")]
#[path = "posix_fs.rs"]
mod os_fs;

#[cfg(target_os = "freebsd")]
#[path = "freebsd_os.rs"]
mod os;
#[cfg(target_os = "freebsd")]
#[path = "posix_fs.rs"]
mod os_fs;

// Local Variables:
// mode: rust;
// fill-column: 78;
// indent-tabs-mode: nil
// c-basic-offset: 4
// buffer-file-coding-system: utf-8-unix
// End:
