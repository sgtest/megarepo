#[link(name = "core",
       vers = "0.1",
       uuid = "c70c24a7-5551-4f73-8e37-380b11d80be8",
       url = "http://rust-lang.org/src/core")];

#[comment = "The Rust core library"];
#[license = "MIT"];
#[crate_type = "lib"];

// Don't link to core. We are core.
#[no_core];

#[doc(
    brief = "The Rust core library",
    desc = "

The core library provides functionality that is closely tied to the Rust
built-in types and runtime services, or that is used in nearly every
non-trivial program.

It is linked by default to all crates and the contents imported. The effect is
as though the user had written the following:

    use core;
    import core::*;

This behavior can be disabled with the `no_core` crate attribute."

)];

export int, i8, i16, i32, i64;
export uint, u8, u16, u32, u64;
export float, f32, f64;
export box, char, str, ptr, vec, bool;
export either, option, result, iter;
export ctypes, sys, unsafe, logging;
export comm, task, future;
export extfmt;
export math, bessel;
export tuple;
export to_str;

// Built-in-type support modules

mod box;
mod char;
mod float;
mod bessel;
mod f32;
mod f64;
mod int;
mod i8;
mod i16;
mod i32;
mod i64;
mod str;
mod ptr;
mod uint;
mod u8;
mod u16;
mod u32;
mod u64;
mod vec;
mod bool;

// For internal use by char, not exported
mod unicode;


// Ubiquitous-utility-type modules

mod either;
mod option;
mod result;
mod tuple;
mod iter;

// Useful ifaces

mod to_str;

// Runtime and language-primitive support

mod libc;
mod ctypes;
mod math;
mod cmath;
mod sys;
mod unsafe;
mod logging;

// Concurrency
mod comm;
mod task;
mod future;

// Compiler support modules

mod extfmt;


// Local Variables:
// mode: rust;
// fill-column: 78;
// indent-tabs-mode: nil
// c-basic-offset: 4
// buffer-file-coding-system: utf-8-unix
// compile-command: "make -k -C .. 2>&1 | sed -e 's/\\/x\\//x:\\//g'";
// End:
