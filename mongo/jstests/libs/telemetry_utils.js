const kShellApplicationName = "MongoDB Shell";
const kDefaultQueryStatsHmacKey = BinData(0, "MjM0NTY3ODkxMDExMTIxMzE0MTUxNjE3MTgxOTIwMjE=");

/**
 * Utility for checking that the aggregated telemetry metrics are logical (follows sum >= max >=
 * min, and sum = max = min if only one execution).
 */
function verifyMetrics(batch) {
    batch.forEach(element => {
        if (element.metrics.execCount === 1) {
            for (const [metricName, summaryValues] of Object.entries(element.metrics)) {
                // Skip over fields that aren't aggregated metrics with sum/min/max (execCount,
                // lastExecutionMicros).
                if (summaryValues.sum === undefined) {
                    continue;
                }
                const debugInfo = {[metricName]: summaryValues};
                // If there has only been one execution, all metrics should have min, max, and sum
                // equal to each other.
                assert.eq(summaryValues.sum, summaryValues.min, debugInfo);
                assert.eq(summaryValues.sum, summaryValues.max, debugInfo);
                assert.eq(summaryValues.min, summaryValues.max, debugInfo);
            }
        } else {
            for (const [metricName, summaryValues] of Object.entries(element.metrics)) {
                // Skip over fields that aren't aggregated metrics with sum/min/max (execCount,
                // lastExecutionMicros).
                if (summaryValues.sum === undefined) {
                    continue;
                }
                const debugInfo = {[metricName]: summaryValues};
                assert.gte(summaryValues.sum, summaryValues.min, debugInfo);
                assert.gte(summaryValues.sum, summaryValues.max, debugInfo);
                assert.lte(summaryValues.min, summaryValues.max, debugInfo);
            }
        }
    });
}

/**
 *
 * Collect telemetry from a given collection. Only include query shapes generated by the shell that
 * is running tests.
 *
 */
function getTelemetry(conn) {
    const result = conn.adminCommand({
        aggregate: 1,
        pipeline: [
            {$queryStats: {}},
            // Sort on telemetry key so entries are in a deterministic order.
            {$sort: {key: 1}},
            {$match: {"key.client.application.name": kShellApplicationName}}
        ],
        cursor: {}
    });
    assert.commandWorked(result);
    return result.cursor.firstBatch;
}
/**
 * TODO SERVER-77279: refactor to have single getTelemetry function that is passed a test options
 * object
 */
function getTelemetryReplSet(conn, collectionName) {
    const pipeline = [
        {$queryStats: {}},
        // Sort on telemetry key so entries are in a deterministic order.
        {$sort: {key: 1}},
        {
            $match: {
                "key.client.application.name": kShellApplicationName,
                "key.queryShape.cmdNs.coll": collectionName
            }
        }
    ];
    return conn.getDB("admin").aggregate(pipeline).toArray();
}

// TODO SERVER-77279 refactor to pass options as object
function getQueryStatsFindCmd(
    conn, transformIdentifiers = false, collName = "", hmacKey = kDefaultQueryStatsHmacKey) {
    let matchExpr = {
        "key.queryShape.command": "find",
        "key.client.application.name": kShellApplicationName
    };
    if (collName != "") {
        matchExpr["key.queryShape.cmdNs.coll"] = collName;
    }
    // Filter out agg queries, including $queryStats.
    var pipeline;
    if (transformIdentifiers) {
        pipeline = [
            {$queryStats: {transformIdentifiers: {algorithm: "hmac-sha-256", hmacKey}}},
            {$match: matchExpr},
            // Sort on telemetry key so entries are in a deterministic order.
            {$sort: {key: 1}},
        ];
    } else {
        pipeline = [
            {$queryStats: {}},
            {$match: matchExpr},
            // Sort on telemetry key so entries are in a deterministic order.
            {$sort: {key: 1}},
        ];
    }
    const result = conn.adminCommand({aggregate: 1, pipeline: pipeline, cursor: {}});
    assert.commandWorked(result);
    return result.cursor.firstBatch;
}

/**
 * Collects query stats from any aggregate command query shapes (with $queryStats requests filtered
 * out) that were generated by the shell that is running tests.
 */
// TODO SERVER-77279 refactor to pass options as object
function getQueryStatsAggCmd(
    conn, transformIdentifiers = false, hmacKey = kDefaultQueryStatsHmacKey) {
    var pipeline;
    if (transformIdentifiers) {
        pipeline = [
            {$queryStats: {transformIdentifiers: {algorithm: "hmac-sha-256", hmacKey}}},
            // Filter out find queries and $queryStats aggregations.
            {
                $match: {
                    "key.queryShape.command": "aggregate",
                    "key.queryShape.pipeline.0.$queryStats": {$exists: false},
                    "key.client.application.name": kShellApplicationName
                }
            },
            // Sort on key so entries are in a deterministic order.
            {$sort: {key: 1}},
        ];
    } else {
        pipeline = [
            {$queryStats: {}},
            // Filter out find queries and $queryStats aggregations.
            {
                $match: {
                    "key.queryShape.command": "aggregate",
                    "key.queryShape.pipeline.0.$queryStats": {$exists: false},
                    "key.client.application.name": kShellApplicationName
                }
            },
            // Sort on key so entries are in a deterministic order.
            {$sort: {key: 1}},
        ];
    }
    const result = conn.adminCommand({aggregate: 1, pipeline: pipeline, cursor: {}});
    assert.commandWorked(result);
    return result.cursor.firstBatch;
}

function confirmAllExpectedFieldsPresent(expectedKey, resultingKey) {
    let fieldsCounter = 0;
    for (const field in resultingKey) {
        fieldsCounter++;
        if (field === "client") {
            // client meta data is environment/machine dependent, so do not
            // assert on fields or specific fields other than the application name.
            assert.eq(resultingKey.client.application.name, kShellApplicationName);
            continue;
        }
        assert(expectedKey.hasOwnProperty(field));
        assert.eq(expectedKey[field], resultingKey[field]);
    }
    // Make sure the resulting key isn't missing any fields.
    assert.eq(fieldsCounter, Object.keys(expectedKey).length, resultingKey);
}