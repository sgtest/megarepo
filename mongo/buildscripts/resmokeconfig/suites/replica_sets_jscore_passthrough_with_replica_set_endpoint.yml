# This suite is based on the replica_sets_jscore passthrough suite. It is used for testing that
# there is no feature parity issue between a replica set before and after it has been bootstrapped
# as a single-shard cluster as long as the replica set endpoint is enabled. When feature parity is
# achieved, the set of tests disabled in this suite should be the same as the set of tests disabled
# in the replica_sets_jscore passthrough suite.

test_kind: js_test

selector:
  roots:
    - jstests/core/**/*.js
    - jstests/fle2/**/*.js
    - src/mongo/db/modules/*/jstests/fle2/**/*.js
  exclude_files:
    # These tests change the transactionLifetimeLimitSeconds server parameter which conflicts with how
    # the CheckReplDBHashInBackground hook doesn't want transactions to be reaped while it is running.
    - jstests/core/txns/abort_expired_transaction.js
    - jstests/core/txns/abort_transaction_thread_does_not_block_on_locks.js
    - jstests/core/txns/kill_op_on_txn_expiry.js
    # The set_param1.js test attempts to compare the response from running the {getParameter: "*"}
    # command multiple times, which may observe the change to the "transactionLifetimeLimitSeconds"
    # server parameter.
    - jstests/core/**/set_param1.js
    # Different explain format
    # TODO(SERVER-81158): Enable these tests.
    # These tests fails while DbCheck running in the background:
    # The DBCheck process continuously populates the currentOp, causing this test to time out while
    # waiting for empty 'getMore' requests.
    - jstests/core/query/awaitdata_getmore_cmd.js
    # These tests utilize 'fsyncLock' and subsequently wait for an insert operation to be blocked by
    # checking the inprogress 'currentOp', leading to a deadlock with the dbCheck process:
    # When the fsyncLock is activated, multiple threads acquire writeTickets and become stalled at the
    # Flusher stage. Consequently, other threads are unable to obtain additional tickets.
    # In this context, the behavior of the dbcheck process involves acquiring writeTickets in an
    # attempt to write to the oplog, followed by becoming blocked at the flusher stage. Consequently,
    # when an insertion is initiated from the test, it is unable to find available writeTickets and
    # enters a wait state. Additionally, since the AquireCollection is not even obtained,
    # the curOp (current operation) does not get logged.
    - jstests/core/administrative/current_op/currentop.js
    - jstests/core/fsync.js
    # When a transaction is in a prepared state, as seen in that test, it prevents the document edited
    # within it from being read by the dbcheck process. Therefore, if the test keeps the transaction
    # in a prepared state for an extended period, it will result in a timeout for the dbcheck process.
    - jstests/core/txns/prepare_conflict.js

    # The tests below are disabled because of sharding auto-bootstrap and replica set endpoint.
    # Cannot specify "$_requestResumeToken" option to a mongos since it is internal-only.
    - jstests/core/find_with_resume_after_param.js
    - jstests/core/resume_query_from_non_existent_record.js
    - jstests/core/resume_query.js
    - jstests/core/timeseries/timeseries_resume_after.js
    # The tests below expect some commands to run directly against the shard.
    # This test runs the internal _shardsvrInsertGlobalIndexKey command in a transaction.
    - jstests/core/txns/global_index.js
    # This test creates collections directly using applyOps commands. So those collections are not
    # tracked by sharding and therefore not discoverable by listCollections commands that go through
    # the router. TODO (SERVER-84342): listCollections command doesn't return collections created
    # directly through applyOps commands.
    - jstests/core/ddl/rename_collection_staytemp.js
    # This test runs the internal internalRenameIfOptionsAndIndexeMatch command without attaching
    # database version, so cannot be against a shardsvr mongod.
    - jstests/core/query/internal_rename_if_options_and_indexes_match.js
    # The tests below drop a collection in the config database, which is not allowed via a router
    # on a sharded cluster.
    # TODO (SERVER-79353): Support role-aware serverStatus on mongod with router role.
    - jstests/core/write/find_and_modify/find_and_modify_metrics.js
    - jstests/core/write/update/update_metrics.js
    # TODO (SERVER-86777): Investigate why timeseries_delete_with_meta_concurrent.js and
    # timeseries_update_concurrent.js can't run on sharded cluster with replica set endpoint.
    - jstests/core/timeseries/timeseries_delete_with_meta_concurrent.js
    - jstests/core/timeseries/timeseries_update_concurrent.js
    # TODO (SERVER-86771): renameCollection on sharded cluster doesn't support implicitly creating
    # the destination database.
    - jstests/core/txns/transactions_block_ddl.js
    # TODO (SERVER-75857): Unify behavior between mongod and mongos when running explain on a
    # nonexistent database.
    - jstests/core/query/explain/explain_missing_database.js
    # TODO (SERVER-75855): Support running the find command via mongos by specifying a UUID
    # (instead of a collection name).
    - jstests/core/commands_with_uuid.js
    - jstests/core/txns/banned_collection_reads_in_txn.js
    # TODO (SERVER-84091): cloneCollectionAsCapped command stops working after a replica set
    # is bootstrapped as a sharded cluster.
    - jstests/core/collation.js
    - jstests/core/ddl/capped_convertToCapped1.js
    # TODO (SERVER-84243): Separate Shard-Role Catalog Cache and Loader.
    - jstests/core/txns/speculative_snapshot_includes_all_writes.js
    # TODO (SERVER-84329): renameCollection command against a collection with invalid views fails on
    # sharded cluster but succeeds on replica set
    - jstests/core/views/invalid_system_views.js
    # The following test requires query settings / cluster parameter modification.
    - jstests/core/query/query_settings/query_settings_size_limits.js

  exclude_with_any_tags:
    - assumes_standalone_mongod
    # After SERVER-80339, the server runs a "listIndexes" command on the background, which could show
    # up during profiling. Some profiling tests expect a certain command other than this "listIndexes"
    # command.
    - requires_profiling

    # The tests below are disabled because of sharding auto-bootstrap and replica set endpoint.
    # prepareTransaction is not a command on a router.
    - uses_prepare_transaction

executor:
  archive:
    hooks:
      - RunDBCheckInBackground
      - CheckReplDBHashInBackground
      - ValidateCollectionsInBackground
      # TODO (SERVER-83433): Add back the test coverage for running db hash check on replica set
      # that is fsync locked and has replica set endpoint enabled.
      # - CheckReplDBHash
      - CheckReplOplogs
      # TODO (SERVER-86630): Investigate ObjectIsBusy error in the replica set endpoint suite
      # when the ValidateCollections hook is enabled
      # - class: ValidateCollections
  config:
    shell_options:
      eval: "globalThis.testingReplication = true;"
      global_vars:
        TestData:
          testingReplicaSetEndpoint: true
  hooks:
    - class: RunDBCheckInBackground
    # The CheckReplDBHash hook waits until all operations have replicated to and have been applied
    # on the secondaries, so we run the ValidateCollections hook after it to ensure we're
    # validating the entire contents of the collection.
    - class: CheckReplDBHashInBackground
    - class: ValidateCollectionsInBackground
    - class: CheckReplOplogs
    # TODO (SERVER-83433): Add back the test coverage for running db hash check on replica set that
    # is fsync locked and has replica set endpoint enabled.
    # - class: CheckReplDBHash
    - class: ValidateCollections
    - class: CleanEveryN
      n: 20
  fixture:
    class: ReplicaSetFixture
    mongod_options:
      set_parameters:
        enableTestCommands: 1
        featureFlagAllMongodsAreSharded: true
        featureFlagReplicaSetEndpoint: true
    use_auto_bootstrap_procedure: 1
    num_nodes: 2
