test_kind: parallel_fsm_workload_test

selector:
  roots:
  - jstests/concurrency/fsm_workloads/**/*.js
  - src/mongo/db/modules/*/jstests/concurrency/fsm_workloads/*.js
  exclude_files:
  # These workloads implicitly assume that their tid ranges are [0, $config.threadCount). This
  # isn't guaranteed to be true when they are run in parallel with other workloads.
  - jstests/concurrency/fsm_workloads/findAndModify_inc_pipeline.js
  - jstests/concurrency/fsm_workloads/list_indexes.js
  - jstests/concurrency/fsm_workloads/secondary_reads.js
  - jstests/concurrency/fsm_workloads/update_inc_capped.js
  - jstests/concurrency/fsm_workloads/update_inc_pipeline.js
  # These workloads implicitly assume that their tid ranges are [0, $config.threadCount), as above,
  # but additionally require multiple threads to run, which also isn't guaranteed here.
  - jstests/concurrency/fsm_workloads/create_index_background_partial_filter.js
  - jstests/concurrency/fsm_workloads/create_index_background_wildcard.js
  - jstests/concurrency/fsm_workloads/create_index_background.js

  # These workloads uses >100MB of data, which can overwhelm test hosts.
  - jstests/concurrency/fsm_workloads/agg_group_external.js
  - jstests/concurrency/fsm_workloads/agg_sort_external.js
  # The findAndModify_update_grow.js workload can cause OOM kills on test hosts.
  - jstests/concurrency/fsm_workloads/findAndModify_update_grow.js

  # This workload kills random cursors which takes a collection lock.
  # TODO: SERVER-39939.
  - jstests/concurrency/fsm_workloads/snapshot_read_kill_operations.js

  # This workload may restart running transactions on a different client, causing deadlock if
  # there is a concurrent dropDatabase waiting for the global X lock.
  # TODO: SERVER-37876
  - jstests/concurrency/fsm_workloads/multi_statement_transaction_all_commands_same_session.js

  # This workload assumes no locks are taken outside of the workload.
  - jstests/concurrency/fsm_workloads/access_collection_in_transaction_after_catalog_changes.js

  # SERVER-43053 These workloads set a failpoint that causes intermittent WriteConflict errors,
  # which presently can cause other simultaneous workloads to fail.
  - jstests/concurrency/fsm_workloads/collmod_writeconflict.js

  # These workloads run the reIndex command, which is only allowed on a standalone node.
  - jstests/concurrency/fsm_workloads/reindex.js
  - jstests/concurrency/fsm_workloads/reindex_background.js
  - jstests/concurrency/fsm_workloads/reindex_writeconflict.js

  exclude_with_any_tags:
  - requires_sharding
  - kills_random_sessions
  - incompatible_with_concurrency_simultaneous

  group_size: 10
  group_count_multiplier: 1.0

executor:
  archive:
    hooks:
      - CheckReplDBHashInBackground
      - CheckReplDBHash
      - ValidateCollections
    tests: true
  config:
    shell_options:
      global_vars:
        TestData:
          skipDropDatabaseOnDatabaseDropPending: true
      setShellParameter: skipShellCursorFinalize=true
  hooks:
  # The CheckReplDBHash hook waits until all operations have replicated to and have been applied
  # on the secondaries, so we run the ValidateCollections hook after it to ensure we're
  # validating the entire contents of the collection.
  #
  # TODO SERVER-26466: Add CheckReplOplogs hook to the concurrency suite.
  - class: CheckReplDBHashInBackground
  - class: CheckReplDBHash
  - class: ValidateCollections
  - class: CleanupConcurrencyWorkloads
  fixture:
    class: ReplicaSetFixture
    mongod_options:
      oplogSize: 1024
      set_parameters:
        # Increase the timeout of the cursor so that the cursor will continue to stay alive even
        # when there is a delay in lock acquisition during a getMore command.
        cursorTimeoutMillis: 3600000
        enableTestCommands: 1
        # We have historically had deadlocks occur due to lock acquisition issues involving the
        # system running out of WiredTiger write tickets. We intentionally lower the number of
        # WiredTiger write tickets available to below the maximum number of database clients to
        # trigger this situation at least some of the time.
        storageEngineConcurrencyAdjustmentAlgorithm: "fixedConcurrentTransactions"
        wiredTigerConcurrentWriteTransactions: 64
        roleGraphInvalidationIsFatal: 1
    num_nodes: 3
