# This suite is based on the sharded_jscore_txns_sharded_collections passthrough suite. It is used
# for testing that on a single-shard cluster there is no feature parity issue between connecting to
# a mongos or the router port of a mongod and connecting to the shard port of a mongod with replica
# set endpoint enabled. When feature parity is achieved, the set of tests disabled in this suite
# should be the same as the set of tests disabled in the sharded_jscore_txns_sharded_collections
# passthrough suite.

test_kind: js_test
selector:
  roots:
  - jstests/core/txns/**/*.js
  exclude_files:
  # Profile can only be run against the admin database on mongos.
  - jstests/core/txns/transactions_profiling.js
  - jstests/core/txns/transactions_profiling_with_drops.js

  # Implicitly creates a database through a collection rename, which does not work in a sharded
  # cluster. TODO SERVER-84330
  - jstests/core/txns/transactions_block_ddl.js

  # transactionLifetimeLimitSeconds parameter is not available in mongos.
  - jstests/core/txns/abort_expired_transaction.js
  - jstests/core/txns/abort_transaction_thread_does_not_block_on_locks.js
  - jstests/core/txns/kill_op_on_txn_expiry.js

  # Uses hangAfterCollectionInserts failpoint not available on mongos.
  - jstests/core/txns/speculative_snapshot_includes_all_writes.js

  # View tests aren't expected to work when collections are implicitly sharded.
  - jstests/core/txns/view_reads_in_transaction.js

  # These workloads explicitly create collections inside multi-document transactions. These are
  # non-idempotent operations, and the implicit collection sharding logic upon collection access
  # results in premature collection creation, causing the workloads to fail.
  - jstests/core/txns/create_collection.js
  - jstests/core/txns/create_collection_parallel.js
  - jstests/core/txns/create_indexes.js
  - jstests/core/txns/create_indexes_parallel.js
  - jstests/core/txns/commands_in_txns_read_concern.js

  # The tests below are disabled because of replica set endpoint.
  # TODO (SERVER-75855): Support running the find command via mongos by specifying a UUID
  # (instead of a collection name).
  - jstests/core/txns/banned_collection_reads_in_txn.js
  # TODO (SERVER-85410): Investigate why timeseries_reads_in_txns.js sometimes fail with
  # ShardCannotRefreshDueToLocksHeld.
  - jstests/core/txns/timeseries/timeseries_reads_in_txns.js

  exclude_with_any_tags:
  - assumes_against_mongod_not_mongos
  # This passthrough implicitly shards the accessed collections. Do not run tests where collections
  # can't be created on `getCollection` call.
  - assumes_no_implicit_collection_creation_on_get_collection
  # Tests tagged with the following will fail because they assume collections are not sharded.
  - assumes_no_implicit_collection_creation_after_drop
  - assumes_no_implicit_index_creation
  - assumes_unsharded_collection
  - cannot_create_unique_index_when_using_hashed_shard_key
  # Transactions are not allowed to operate on capped collections.
  - requires_capped
  # Prepare is not a command on mongos.
  - uses_prepare_transaction

executor:
  archive:
    hooks:
      # TODO (SERVER-83433): Add back the test coverage for running db hash check on replica set that
      # is fsync locked and has replica set endpoint enabled.
      # - CheckReplDBHash
      - CheckMetadataConsistencyInBackground
      - ValidateCollections
  config:
    shell_options:
      eval: >-
        globalThis.testingReplication = true;
        await import('jstests/libs/override_methods/implicitly_shard_accessed_collections.js');
      global_vars:
        TestData: &TestData
          testingReplicaSetEndpoint: true
  hooks:
  # We don't execute dbHash or oplog consistency checks since there is only a single replica set
  # node.
  # TODO (SERVER-83433): Add back the test coverage for running db hash check on replica set that
  # is fsync locked and has replica set endpoint enabled.
  # - class: CheckReplDBHash
  - class: CheckMetadataConsistencyInBackground
    shell_options:
      global_vars:
        TestData: *TestData
  - class: ValidateCollections
  - class: CheckOrphansDeleted
    shell_options:
      global_vars:
        TestData: *TestData
  - class: CleanEveryN
    n: 20
  fixture:
    class: ShardedClusterFixture
    config_shard: "any"
    mongod_options:
      set_parameters:
        enableTestCommands: 1
        featureFlagEmbeddedRouter: true
        featureFlagReplicaSetEndpoint: true
    num_rs_nodes_per_shard: 2
    embedded_router: 1
    replica_set_endpoint: 1
