test_kind: parallel_fsm_workload_test

selector:
  roots:
  - jstests/concurrency/fsm_workloads/**/*.js
  exclude_files:
  # These workloads implicitly assume that their tid ranges are [0, $config.threadCount). This
  # isn't guaranteed to be true when they are run in parallel with other workloads.
  - jstests/concurrency/fsm_workloads/findAndModify_inc_pipeline.js
  - jstests/concurrency/fsm_workloads/list_indexes.js
  - jstests/concurrency/fsm_workloads/secondary_reads.js
  - jstests/concurrency/fsm_workloads/update_inc_capped.js
  - jstests/concurrency/fsm_workloads/update_inc_pipeline.js
  # These workloads implicitly assume that their tid ranges are [0, $config.threadCount), as above,
  # but additionally require multiple threads to run, which also isn't guaranteed here.
  - jstests/concurrency/fsm_workloads/create_index_background_partial_filter.js
  - jstests/concurrency/fsm_workloads/create_index_background_wildcard.js
  - jstests/concurrency/fsm_workloads/create_index_background.js

  # These workloads uses >100MB of data, which can overwhelm test hosts.
  - jstests/concurrency/fsm_workloads/agg_group_external.js
  - jstests/concurrency/fsm_workloads/agg_sort_external.js

  # SERVER-30644 These tests create/drop/modify views which can deadlock on the ViewCatalog mutex if
  # there's a concurrent operation which acquires a MODE_X lock.
  - jstests/concurrency/fsm_workloads/view_catalog*.js

  # SERVER-43053 These workloads set a failpoint that causes intermittent WriteConflict errors,
  # which presently can cause other simultaneous workloads to fail.
  - jstests/concurrency/fsm_workloads/collmod_writeconflict.js
  - jstests/concurrency/fsm_workloads/reindex_writeconflict.js

  exclude_with_any_tags:
  - uses_transactions
  - requires_replication
  - requires_sharding
  - incompatible_with_concurrency_simultaneous

  group_size: 10
  group_count_multiplier: 2.5

executor:
  archive:
    hooks:
      - ValidateCollections
    tests: true
  config: {}
  hooks:
  - class: ValidateCollections
    shell_options:
      global_vars:
        TestData:
          skipValidationOnNamespaceNotFound: false
  - class: CleanupConcurrencyWorkloads
  fixture:
    class: MongoDFixture
    mongod_options:
      set_parameters:
        # Increase the timeout of the cursor so that the cursor will continue to stay alive even
        # when there is a delay in lock acquisition during a getMore command.
        cursorTimeoutMillis: 3600000
        enableTestCommands: 1
        # We have historically had deadlocks occur due to lock acquisition issues involving the
        # system running out of WiredTiger write tickets. We intentionally lower the number of
        # WiredTiger write tickets available to below the maximum number of database clients to
        # trigger this situation at least some of the time.
        storageEngineConcurrencyAdjustmentAlgorithm: "fixedConcurrentTransactions"
        wiredTigerConcurrentWriteTransactions: 64
        roleGraphInvalidationIsFatal: 1
