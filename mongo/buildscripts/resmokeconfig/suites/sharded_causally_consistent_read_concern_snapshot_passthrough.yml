test_kind: js_test
# This suite's denylist is a sharded_causally_consistent_jscore_passthrough denylist with some
# additions from causally_consistent_read_concern_snapshot_passthrough denylist.

selector:
  roots:
  - jstests/core/**/*.js
  - jstests/fle2/**/*.js
  - src/mongo/db/modules/*/jstests/fle2/**/*.js
  exclude_files:
  # The following tests fail because a certain command or functionality is not supported by
  # mongos. This command or functionality is placed in a comment next to the failing test.
  - jstests/core/**/apitest_db.js  # serverStatus output doesn't have storageEngine.
  - jstests/core/**/bypass_doc_validation.js  # sharded $out output not permitted
  - jstests/core/**/check_shard_index.js  # checkShardingIndex.
  - jstests/core/**/collection_truncate.js  # emptycapped.
  - jstests/core/**/compact_keeps_indexes.js  # compact.
  - jstests/core/**/currentop.js  # uses fsync.
  - jstests/core/**/dbhash.js  # dbhash.
  - jstests/core/**/dbhash2.js  # dbhash.
  - jstests/core/**/fsync.js  # uses fsync.
  - jstests/core/**/geo_update_btree2.js  # notablescan.
  - jstests/core/**/index9.js  # "local" database.
  - jstests/core/**/queryoptimizera.js  # "local" database.
  - jstests/core/**/stages*.js  # stageDebug.
  - jstests/core/**/tailable_cursor_invalidation.js # capped collections.
  - jstests/core/**/tailable_getmore_batch_size.js # capped collections.
  - jstests/core/**/tailable_skip_limit.js # capped collections.
  # The following tests fail because mongos behaves differently from mongod when testing certain
  # functionality. The differences are in a comment next to the failing test.
  # Behavior with no db different on mongos, SERVER-18047.
  - jstests/core/**/explain_missing_database.js
  - jstests/core/**/geo_2d_explain.js  # executionSuccess in different spot in explain().
  - jstests/core/**/geo_s2explain.js  # inputStage in different spot in explain().
  - jstests/core/**/geo_s2sparse.js  # keysPerIndex in different spot in validate().
  - jstests/core/**/or_to_in.js # queryPlanner in different spot in explain()
  # The following tests fail because they count indexes. These counts do not take into account the
  # additional hashed shard key indexes that are automatically added by this passthrough.
  - jstests/core/**/bad_index_plugin.js
  - jstests/core/**/create_indexes.js
  - jstests/core/**/list_indexes_non_existent_ns.js
  - jstests/core/**/mr_preserve_indexes.js
  # The following tests fail because they expect no databases to be created. However a DB is created
  # automatically when we shard a collection.
  - jstests/core/**/dbcase.js
  - jstests/core/**/dbcase2.js
  - jstests/core/**/no_db_created.js
  - jstests/core/**/killop_drop_collection.js # Uses fsyncLock.
  # TODO SERVER-61050
  - jstests/core/timeseries/timeseries_merge.js
  # This test uses `benchRun` which spawns connections which do not inherit the causal session.
  - jstests/core/**/benchrun_pipeline_updates.js

  exclude_with_any_tags:
  # Tests tagged with the following will fail because they assume collections are not sharded.
  - assumes_against_mongod_not_mongos
  - assumes_standalone_mongod
  - assumes_no_implicit_collection_creation_after_drop
  - assumes_no_implicit_index_creation
  - assumes_unsharded_collection
  - cannot_create_unique_index_when_using_hashed_shard_key
  ##
  # The next tag corresponds to the special error thrown by the set_read_preference_secondary.js
  # override when it refuses to replace the readPreference of a particular command. Above each tag
  # are the message(s) that cause the tag to be warranted.
  ##
  # "Cowardly refusing to override read preference of command: ..."
  # "Cowardly refusing to run test with overridden read preference when it reads from a
  #  non-replicated collection: ..."
  - assumes_read_preference_unchanged
  # "Cowardly refusing to override write concern of command: ..."
  - assumes_write_concern_unchanged
  - does_not_support_causal_consistency
  # Reading from capped collections with readConcern snapshot is not supported.
  - requires_capped
  # These tests attempt to read from the "system.profile" collection which is a capped collection.
  # system.profile collection doesn't exist on mongos.
  - requires_profiling
  # These tests are run in sharded_causally_consistent_jscore_txns_passthrough.
  - uses_transactions
  # Parallel shell is not causally consistent because it uses a different session.
  - uses_parallel_shell

executor:
  archive:
    hooks:
      - CheckReplDBHash
      - CheckMetadataConsistencyInBackground
      - ValidateCollections
  config:
    shell_options:
      global_vars:
        TestData:
          defaultReadConcernLevel: snapshot
          disallowSnapshotDistinct: true
      eval: >-
        globalThis.testingReplication = true;
        load('jstests/libs/override_methods/set_read_and_write_concerns.js');
        load("jstests/libs/override_methods/enable_causal_consistency.js");
        load("jstests/libs/override_methods/implicitly_shard_accessed_collections.js");
  hooks:
  - class: CheckReplDBHash
  - class: CheckMetadataConsistencyInBackground
  - class: ValidateCollections
  - class: CheckOrphansDeleted
  - class: CleanEveryN
    n: 20
  fixture:
    class: ShardedClusterFixture
    mongos_options:
      set_parameters:
        enableTestCommands: 1
        logComponentVerbosity:
          command: 1
          network:
            verbosity: 1
            asio: 2
    mongod_options:
      enableMajorityReadConcern: ''
      set_parameters:
        enableTestCommands: 1
        minSnapshotHistoryWindowInSeconds: 3600
        logComponentVerbosity:
          command: 1
          network:
            verbosity: 1
            asio: 2
          replication:
            heartbeats: 2
    num_rs_nodes_per_shard: 2
    enable_sharding:
    - test
