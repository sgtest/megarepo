test_kind: js_test

selector:
  roots:
    - jstests/core/**/*.js
    - jstests/core_sharding/**/*.js
    - jstests/fle2/**/*.js
    - src/mongo/db/modules/*/jstests/fle2/**/*.js
  exclude_files:
    # These tests are run in sharded_jscore_txns.
    - jstests/core/txns/**/*.js
    # The following tests fail because a certain command or functionality is not supported on
    # mongos. This command or functionality is placed in a comment next to the failing test.
    - jstests/core/**/apitest_db.js # serverStatus output doesn't have storageEngine.
    - jstests/core/**/check_shard_index.js # checkShardingIndex.
    - jstests/core/**/collection_truncate.js # emptycapped.
    - jstests/core/**/compact_keeps_indexes.js # compact.
    - jstests/core/**/currentop.js # uses fsync.
    - jstests/core/**/dbhash.js # dbhash.
    - jstests/core/**/fsync.js # uses fsync.
    - jstests/core/**/geo_s2cursorlimitskip.js # profiling.
    - jstests/core/**/geo_update_btree2.js # notablescan.
    - jstests/core/**/index9.js # "local" database.
    - jstests/core/**/queryoptimizera.js # "local" database.
    - jstests/core/**/stages*.js # stageDebug.
    - jstests/core/**/startup_log.js # "local" database.
    - jstests/core/**/top.js # top.
    # The following tests fail because mongos behaves differently from mongod when testing certain
    # functionality. The differences are in a comment next to the failing test.
    - jstests/core/**/geo_2d_explain.js # executionSuccess in different spot in explain().
    - jstests/core/**/geo_s2explain.js # inputStage in different spot in explain().
    - jstests/core/**/geo_s2sparse.js # keysPerIndex in different spot in validate().
    - jstests/core/**/operation_latency_histogram.js # Stats are counted differently on mongos, SERVER-24880.
    # The following tests fail because of divergent dropCollection behavior between standalones and
    # sharded clusters. These tests expect a second drop command to error, whereas in sharded clusters
    # we expect a second drop to return status OK.
    - jstests/core/**/explain_upsert.js

    # Uses a view with projected out _id which causes data consistency diffs due to natural order differences between primary and secondary nodes from parallel oplog application.
    - jstests/core/views/views_find.js
    - jstests/core/views/views_aggregation.js

    # Int types within an array type in BSON get their type changed when passed into a C++ function from Javascript.
    - jstests/core/query/type/type_array.js
    - jstests/core/timeseries/timeseries_internal_bounded_sort_compound_mixed_types.js

    # Uses documents that are too close to max BSON size for us to support passing to C++ as a BSON array.
    - jstests/core/max_doc_size.js
    - jstests/core/query/find/find_getmore_bsonsize.js

    # This test does a very large amount of inserts on a single shard which will trigger the balancer.
    # If we disable the balancer on the source cluster then it will remain enabled on the restore
    # nodes and still cause a diff. This is because the config shard needs to connect to its replica
    # set to apply the stashed balancer mode and we are unable to do that since we are running the
    # config server node on a different port than the configuration we pass in. We will have a
    # targeted test that handles this case for correctness.
    - jstests/core/query/query_settings/query_settings_size_limits.js

  exclude_with_any_tags:
    - assumes_standalone_mongod
    - assumes_against_mongod_not_mongos
    # system.profile collection doesn't exist on mongos.
    - requires_profiling

executor:
  config: {}
  hooks:
    - class: MagicRestoreEveryN
      n: 20
      randomize_pit: True
  fixture:
    class: ShardedClusterFixture
    mongos_options:
      set_parameters:
        enableTestCommands: 1
    mongod_options:
      set_parameters:
        enableTestCommands: 1
    num_rs_nodes_per_shard: 1
    num_shards: 2
