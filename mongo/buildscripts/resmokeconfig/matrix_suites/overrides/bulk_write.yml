- name: single_op_override
  value:
    eval: await import('jstests/libs/override_methods/single_crud_op_as_bulk_write.js');

- name: causal_consistency
  value:
    eval: await import('jstests/libs/override_methods/enable_causal_consistency.js');

- name: single_op_core_excluded_files
  value:
    exclude_files:
    # TODO (SERVER-72804/SERVER-72805): When timeseries update/delete is supported on mongod enable these.
    - jstests/core/timeseries/bucket_unpacking_with_match_fixed_buckets.js
    - jstests/core/timeseries/bucket_unpacking_with_sort_extended_range.js
    - jstests/core/timeseries/bucket_unpacking_with_sort_plan_cache.js
    - jstests/core/timeseries/clustered_index_crud.js
    - jstests/core/timeseries/libs/timeseries.js
    - jstests/core/timeseries/libs/timeseries_writes_util.js
    - jstests/core/timeseries/timeseries_bucket_index.js
    - jstests/core/timeseries/timeseries_bucket_manual_removal.js
    - jstests/core/timeseries/timeseries_collmod.js
    - jstests/core/timeseries/timeseries_delete_collation.js
    - jstests/core/timeseries/timeseries_delete_compressed_buckets.js
    - jstests/core/timeseries/timeseries_delete_hint.js
    - jstests/core/timeseries/timeseries_delete_multi.js
    - jstests/core/timeseries/timeseries_delete_one.js
    - jstests/core/timeseries/timeseries_delete_with_meta.js
    - jstests/core/timeseries/timeseries_delete_with_meta_concurrent.js
    - jstests/core/timeseries/timeseries_explain_delete.js
    - jstests/core/timeseries/timeseries_explain_update.js
    - jstests/core/timeseries/timeseries_find_and_modify_remove.js
    - jstests/core/timeseries/timeseries_find_and_modify_update.js
    - jstests/core/timeseries/timeseries_id_range.js
    - jstests/core/timeseries/timeseries_insert_after_delete.js
    - jstests/core/timeseries/timeseries_insert_after_update.js
    - jstests/core/timeseries/timeseries_predicates.js
    - jstests/core/timeseries/timeseries_predicates_with_projections.js
    - jstests/core/timeseries/timeseries_update.js
    - jstests/core/timeseries/timeseries_update_compressed_buckets.js
    - jstests/core/timeseries/timeseries_update_concurrent.js
    - jstests/core/timeseries/timeseries_update_hint.js
    - jstests/core/timeseries/timeseries_update_multi.js
    - jstests/core/timeseries/timeseries_update_one.js
    # The set_param1.js test attempts to compare the response from running the {getParameter: "*"}
    # command multiple times, which may observe the change to the "transactionLifetimeLimitSeconds"
    # server parameter.
    - jstests/core/**/set_param1.js
    # TODO (SERVER-78258): Enable these when profiling is supported in bulkWrite.
    - jstests/core/**/top*.js
    - jstests/core/**/profile*.js
    - jstests/core/**/*histogram*.js
    - jstests/core/views/views_stats.js
    - jstests/core/write/update/update_metrics.js
    - jstests/core/comment_field.js
    # TODO (SERVER-78258): CurOp currently does not display the correct metrics for the individual writes done under bulkWrite.
    - jstests/core/administrative/current_op/currentop.js
    - jstests/core/fsync.js
    # TODO (SERVER-76497): Enable these when explain is supported in bulkWrite.
    - jstests/core/**/explain*.js
    # Runs an update with illegal format (no 'updates'). We could work around this in the override
    # but it is very annoying.
    - jstests/core/write/insert/batch_write_command_insert.js
    - jstests/core/write/update/batch_write_command_update.js
    - jstests/core/write/delete/batch_write_command_delete.js
    # Requires specific commands to be run to trigger failpoint (i.e. requires insert, we run bulkWrite).
    - jstests/core/failcommand_failpoint.js
    # TODO (SERVER-71899): bulkWrite does not yet use stable API
    - jstests/core/version_api_v1_command_coverage.js
    # This test adds unknown fields to insert/update/delete ops which we ignore
    - jstests/core/write/write_commands_reject_unknown_fields.js

- name: single_op_txns_excluded_files
  value:
    exclude_files:
    # TODO (SERVER-71899): bulkWrite does not yet use stable API
    - jstests/core/txns/api_params_transaction.js
    # Checks for op names which bulkWrite will not show up as
    - jstests/core/txns/transactions_profiling.js
    - jstests/core/txns/currentop_blocked_operations.js
    # Checks for collation at top level in profile
    - jstests/core/txns/transactions_profiling_with_drops.js
    # The conditions of this test returns a different error for delete compared to the function bulkWrite uses.
    # bulkWrite is consistent with the other CRUD operations here.
    - jstests/core/txns/multi_statement_transaction_write_error.js

- name: single_op_fle_excluded_files
  value:
    exclude_files:
    # Asserts a location specific error code failure that happens after we fail out in bulkWrite.
    - src/mongo/db/modules/enterprise/jstests/fle2/basic_update.js
    - src/mongo/db/modules/enterprise/jstests/fle2/basic_delete.js

# TODO (SERVER-78258): Remove this exclusion when profiling is supported in bulkWrite.
- name: txn_passthrough_runner_selftest
  value:
    exclude_files:
    - jstests/libs/txns/txn_passthrough_runner_selftest.js

- name: causal_consistency_exclude_tags
  value:
    exclude_with_any_tags:
    ##
    # The next tag corresponds to the special error thrown by the set_read_preference_secondary.js
    # override when it refuses to replace the readPreference of a particular command. Above each tag
    # are the message(s) that cause the tag to be warranted.
    ##
    # "Cowardly refusing to override read preference of command: ..."
    # "Cowardly refusing to run test with overridden read preference when it reads from a
    #  non-replicated collection: ..."
    - assumes_read_preference_unchanged
    - does_not_support_causal_consistency
    - requires_collstats
    - uses_transactions
    # The system.profile collection is not replicated. So the reads from secondaries will not be
    # consistent with primary.
    - requires_profiling
    # Parallel shell is not causally consistent because it uses a different session.
    - uses_parallel_shell

- name: kill_stepdown_hooks
  value:
    executor:
      hooks:
        # We use a stepdown interval of 15 seconds because we will retry all commands in a transaction
        # so we need to allow time for at most 10 operations to be re-run and then re-committed. If
        # too many network errors occur when re-running a transaction we will run out of retries.
        - class: ContinuousStepdown
          randomize_kill: true
          stepdown_interval_ms: 15000

        # The CheckReplDBHash hook waits until all operations have replicated to and have been applied
        # on the secondaries, so we run the ValidateCollections hook after it to ensure we're
        # validating the entire contents of the collection.
        - class: CheckReplOplogs
        - class: CheckReplDBHash
        - class: ValidateCollections
          shell_options:
            global_vars:
              TestData:
                skipEnforceFastCountOnValidate: true
        - class: CleanEveryN
          n: 20
