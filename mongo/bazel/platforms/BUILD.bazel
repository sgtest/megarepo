# Define supported build platforms.
load("//bazel/platforms:remote_execution_containers.bzl", "REMOTE_EXECUTION_CONTAINERS")

package(default_visibility = ["//visibility:public"])

[
    platform(
        name = distro_or_os + "_" + arch + "_" + compiler,
        constraint_values = [
            "@platforms//os:linux",
            "@platforms//cpu:arm64" if arch == "arm64" else "@platforms//cpu:x86_64",
            "@bazel_tools//tools/cpp:" + compiler,
        ],
        exec_properties = {
            "container-image": REMOTE_EXECUTION_CONTAINERS[distro_or_os + "_" + arch]["container-image"],
            "dockerNetwork": "standard",
        },
    )
    for compiler in [
        "clang",
        "gcc",
    ]
    for arch in [
        "arm64",
        "amd64",
    ]
    for distro_or_os in [
        "linux",
        "ubuntu22",
        "amazon_linux_2",
        "amazon_linux_2023",
    ]
]

platform(
    name = "windows_amd64_msvc",
    constraint_values = [
        "@platforms//cpu:x86_64",
        "@platforms//os:windows",
        "@bazel_tools//tools/cpp:msvc",
    ],
)

platform(
    name = "macos_arm64_clang",
    constraint_values = [
        "@platforms//cpu:arm64",
        "@platforms//os:macos",
        "@bazel_tools//tools/cpp:clang",
    ],
)

platform(
    name = "macos_amd64_clang",
    constraint_values = [
        "@platforms//cpu:x86_64",
        "@platforms//os:macos",
        "@bazel_tools//tools/cpp:clang",
    ],
)

platform(
    name = "linux_ppc64le_clang",
    constraint_values = [
        "@platforms//cpu:ppc64le",
        "@platforms//os:linux",
        "@bazel_tools//tools/cpp:clang",
    ],
)

platform(
    name = "linux_ppc64le_gcc",
    constraint_values = [
        "@platforms//cpu:ppc64le",
        "@platforms//os:linux",
        "@bazel_tools//tools/cpp:gcc",
    ],
)
