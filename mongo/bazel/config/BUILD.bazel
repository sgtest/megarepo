load(
    "//bazel/config:configs.bzl",
    "build_mode",
    "compiler_type",
    "use_libunwind",
    "use_gdbserver",
    "spider_monkey_dbg",
    "allocator",
    "use_lldbserver",
    "use_wait_for_debugger",
    "use_disable_ref_track",
    "use_ocsp_stapling",
    "sanitize",
    "use_wiredtiger",
    "build_grpc",
)

load("@bazel_skylib//lib:selects.bzl", "selects")

package(default_visibility = ["//visibility:public"])

# --------------------------------------
# Compiler types
# --------------------------------------

compiler_type(
    name = "compiler_type",
    build_setting_default = "gcc",
)

config_setting(
    name = "compiler_type_clang",
    flag_values = {
        "//bazel/config:compiler_type": "clang",
    },
)

config_setting(
    name = "compiler_type_gcc",
    flag_values = {
        "//bazel/config:compiler_type": "gcc",
    },
)

config_setting(
    name = "compiler_type_msvc",
    flag_values = {
        "//bazel/config:compiler_type": "msvc",
    },
)

# --------------------------------------
# Architecture + OS combinations
# --------------------------------------

config_setting(
    name = "linux_aarch64",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:aarch64",
    ],
)

config_setting(
    name = "linux_x86_64",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
)

config_setting(
    name = "linux_ppc64le",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:ppc64le",
    ],
)

config_setting(
    name = "linux_s390x",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:s390x",
    ],
)

config_setting(
    name = "windows_x86_64",
    constraint_values = [
        "@platforms//os:windows",
        "@platforms//cpu:x86_64",
    ],
)

config_setting(
    name = "macos_x86_64",
    constraint_values = [
        "@platforms//os:macos",
        "@platforms//cpu:x86_64",
    ],
)

config_setting(
    name = "macos_aarch64",
    constraint_values = [
        "@platforms//os:macos",
        "@platforms//cpu:aarch64",
    ],
)

# ==========
# build_mode
# ==========

build_mode(
    name = "build_mode",
    build_setting_default = "dbg",
)

config_setting(
    name = "opt_on",
    flag_values = {"//bazel/config:build_mode": "opt_on"},
)

config_setting(
    name = "opt_off",
    flag_values = {"//bazel/config:build_mode": "opt_off"},
)

config_setting(
    name = "opt_debug",
    flag_values = {"//bazel/config:build_mode": "opt_debug"},
)

config_setting(
    name = "opt_size",
    flag_values = {"//bazel/config:build_mode": "opt_size"},
)

config_setting(
    name = "dbg",
    flag_values = {"//bazel/config:build_mode": "dbg"},
)

config_setting(
    name = "release",
    flag_values = {"//bazel/config:build_mode": "release"},
)

config_setting(
    name = "linux_dbg",
    constraint_values = [
        "@platforms//os:linux",
    ],
    flag_values = {"//bazel/config:build_mode": "dbg"},
)

config_setting(
    name = "linux_opt_on",
    constraint_values = [
        "@platforms//os:linux",
    ],
    flag_values = {"//bazel/config:build_mode": "opt_on"},
)

config_setting(
    name = "linux_opt_off",
    constraint_values = [
        "@platforms//os:linux",
    ],
    flag_values = {"//bazel/config:build_mode": "opt_off"},
)

# TODO(SERVER-80614): Revisit why we need "optimized + debug" in the first place.
# Note that we have an unusual setting of "optimized + debug"
config_setting(
    name = "linux_opt_debug",
    constraint_values = [
        "@platforms//os:linux",
    ],
    flag_values = {"//bazel/config:build_mode": "opt_debug"},
)

config_setting(
    name = "linux_opt_size",
    constraint_values = [
        "@platforms//os:linux",
    ],
    flag_values = {"//bazel/config:build_mode": "opt_size"},
)

config_setting(
    name = "linux_release",
    constraint_values = [
        "@platforms//os:linux",
    ],
    flag_values = {"//bazel/config:build_mode": "release"},
)

config_setting(
    name = "windows_dbg",
    constraint_values = [
        "@platforms//os:windows",
    ],
    flag_values = {"//bazel/config:build_mode": "dbg"},
)

config_setting(
    name = "windows_opt_on",
    constraint_values = [
        "@platforms//os:windows",
    ],
    flag_values = {"//bazel/config:build_mode": "opt_on"},
)

config_setting(
    name = "windows_opt_off",
    constraint_values = [
        "@platforms//os:windows",
    ],
    flag_values = {"//bazel/config:build_mode": "opt_off"},
)

# TODO(SERVER-80614): Revisit why we need "optimized + debug" in the first place.
# Note that we have an unusual setting of "optimized + debug"
config_setting(
    name = "windows_opt_debug",
    constraint_values = [
        "@platforms//os:windows",
    ],
    flag_values = {"//bazel/config:build_mode": "opt_debug"},
)

config_setting(
    name = "windows_opt_size",
    constraint_values = [
        "@platforms//os:windows",
    ],
    flag_values = {"//bazel/config:build_mode": "opt_size"},
)

config_setting(
    name = "windows_release",
    constraint_values = [
        "@platforms//os:windows",
    ],
    flag_values = {"//bazel/config:build_mode": "release"},
)

# --------------------------------------
# Libunwind options
# --------------------------------------

use_libunwind(
    name = "use_libunwind",
    build_setting_default = False,
)

config_setting(
    name = "use_libunwind_enabled",
    flag_values = {
        "//bazel/config:use_libunwind": "True",
    },
)

# --------------------------------------
# gdbserver options
# --------------------------------------

use_gdbserver(
    name = "use_gdbserver",
    build_setting_default = False,
)

config_setting(
    name = "use_gdbserver_enabled",
    flag_values = {
        "//bazel/config:use_gdbserver": "True",
    }
)

# --------------------------------------
# Spider Monkey Debug options
# --------------------------------------

# TODO(SERVER-82800): use this flag to enable/disable SpiderMonkey debug mode in mozjs when mozjs
# is ported over to bazel.
spider_monkey_dbg(
    name = "spider_monkey_dbg",
    build_setting_default = False,
)

config_setting(
    name = "spider_monkey_dbg_enabled",
    flag_values = {
        "//bazel/config:spider_monkey_dbg": "True",
    }
)

# --------------------------------------
# allocator options
# --------------------------------------

allocator(
    name = "allocator",
    build_setting_default = "system",
)

config_setting(
    name = "auto_allocator_linux",
    constraint_values = [
        "@platforms//os:linux",
    ],
    flag_values = {
        "//bazel/config:allocator": "auto",
    },
)

config_setting(
    name = "auto_allocator_windows",
    constraint_values = [
        "@platforms//os:windows",
    ],
    flag_values = {
        "//bazel/config:allocator": "auto",
    },
)

config_setting(
    name = "auto_allocator",
    flag_values = {
        "//bazel/config:allocator": "auto",
    },
)

config_setting(
    name = "system_allocator",
    flag_values = {
        "//bazel/config:allocator": "system",
    },
)

config_setting(
    name = "tcmalloc_allocator",
    flag_values = {
        "//bazel/config:allocator": "tcmalloc",
    },
)

# --------------------------------------
# gdbserver options
# --------------------------------------

use_lldbserver(
    name = "use_lldbserver",
    build_setting_default = False,
)

config_setting(
    name = "use_lldbserver_enabled",
    flag_values = {
        "//bazel/config:use_lldbserver": "True",
    }
)

# --------------------------------------
# wait-for-debugger options
# --------------------------------------

use_wait_for_debugger(
    name = "use_wait_for_debugger",
    build_setting_default = False,
)

config_setting(
    name = "use_wait_for_debugger_enabled",
    flag_values = {
        "//bazel/config:use_wait_for_debugger": "True",
    }
)


# --------------------------------------
# ocsp-stapling options
# --------------------------------------

use_ocsp_stapling(
    name = "use_ocsp_stapling",
    build_setting_default = False,
)

config_setting(
    name = "use_ocsp_stapling_enabled",
    flag_values = {
        "//bazel/config:use_ocsp_stapling": "True",
    }
)

# --------------------------------------
# disable-ref-track options
# --------------------------------------

use_disable_ref_track(
    name = "use_disable_ref_track",
    build_setting_default = False,
)

config_setting(
    name = "use_disable_ref_track_enabled",
    flag_values = {
        "//bazel/config:use_disable_ref_track": "True",
    },
)

# --------------------------------------
# wiredtiger options
# --------------------------------------

use_wiredtiger(
    name = "use_wiredtiger",
    build_setting_default = False,
)

config_setting(
    name = "use_wiredtiger_enabled",
    flag_values = {
        "//bazel/config:use_wiredtiger": "True",
    },
)

# --------------------------------------
# grpc options
# --------------------------------------

build_grpc(
    name = "build_grpc",
    build_setting_default = False,
)

config_setting(
    name = "build_grpc_enabled",
    constraint_values = [
        "@platforms//os:linux",
    ],
    flag_values = {
        "//bazel/config:build_grpc": "True",
    },
)

# --------------------------------------
# sanitizer options
# --------------------------------------

sanitize(
    name = "sanitize",
    build_setting_default = ["disabled"],
)

config_setting(
    name = "sanitize_address",
    flag_values = {
        "//bazel/config:sanitize": "address",
    },
)

config_setting(
    name = "sanitize_fuzzer",
    flag_values = {
        "//bazel/config:sanitize": "fuzzer",
    },
)

config_setting(
    name = "sanitize_leak",
    flag_values = {
        "//bazel/config:sanitize": "leak",
    },
)

config_setting(
    name = "sanitize_memory",
    flag_values = {
        "//bazel/config:sanitize": "memory",
    },
)

config_setting(
    name = "sanitize_thread",
    flag_values = {
        "//bazel/config:sanitize": "thread",
    },
)

config_setting(
    name = "sanitize_undefined",
    flag_values = {
        "//bazel/config:sanitize": "undefined",
    },
)

config_setting(
     name = "sanitize_disabled",
    flag_values = {
        "//bazel/config:sanitize": "disabled",
    },
)
# --------------------------------------------
# ----------- computed sanitizer flags -------

selects.config_setting_group(
    name = "sanitize_address_build_mode",
    match_any = [":opt_on", ":opt_debug"],
)

selects.config_setting_group(
    name = "sanitize_address_required_settings",
    match_all = [":sanitize_address", ":system_allocator", ":sanitize_address_build_mode", ":compiler_type_clang"],
)
