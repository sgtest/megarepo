# Generates "mongo.h" config header file containing feature flags generated by checking for the availability of certain compiler features.
# This script is invoked by the Bazel build system to generate the "mongo.h" file automatically as part of the build.
# Example usage:
# python generate_config_header.py --compiler-path /usr/bin/gcc --compiler-args "-O2 -Wall" --output-path mongo.h
import argparse
import subprocess


class CompilerSettings:
    compiler_path: str = ""
    compiler_args: str = ""


class HeaderDefinition:
    def __init__(self, key: str, value: str = None) -> None:
        self.key = key
        self.value = value


def write_config_header(output_path: str, definitions: list[HeaderDefinition]) -> None:
    with open(output_path, "w") as file:
        for definition in definitions:
            if definition.value is None:
                file.write(f"#define {definition.key}\n")
            else:
                file.write(f"#define {definition.key} {definition.value}\n")


def compile_check(source_text: str) -> bool:
    command = [
        CompilerSettings.compiler_path,
        "-x",
        "c++",
        *CompilerSettings.compiler_args.split(" "),
        "-",
    ]
    print(" ".join(command + [source_text]), "\n")
    result = subprocess.run(command, input=source_text, capture_output=True, text=True)
    if result.returncode != 0:
        print("stdout:", result.stdout)
        print("stderr:", result.stderr)
    print("Exit code:", result.returncode)
    print("--------------------------------------------------\n\n")
    return result.returncode == 0


def glibc_rseq_present_flag() -> list[HeaderDefinition]:
    print("[MONGO_CONFIG_GLIBC_RSEQ] Checking for __rseq_size...")

    if compile_check("""
    #include <sys/rseq.h>
    #include <stdlib.h>
    #include <stdio.h>

    int main() {
        printf("%d", __rseq_size);
        return EXIT_SUCCESS;
    }"""):
        return [HeaderDefinition("MONGO_CONFIG_GLIBC_RSEQ")]
    else:
        return []


def memset_s_present_flag() -> list[HeaderDefinition]:
    print("[MONGO_CONFIG_HAVE_MEMSET_S] Checking for memset_s...")

    if compile_check("""
        #define __STDC_WANT_LIB_EXT1__ 1
        #include <cstring>
        int main(int argc, char* argv[]) {
            void* data = nullptr;
            return memset_s(data, 0, 0, 0);
        }
        """):
        return [HeaderDefinition("MONGO_CONFIG_HAVE_MEMSET_S")]
    else:
        return []


def generate_config_header(output_path: str) -> None:
    definitions: list[HeaderDefinition] = []

    definitions += glibc_rseq_present_flag()
    definitions += memset_s_present_flag()
    # New checks can be added here

    write_config_header(output_path, definitions)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Generate config header file")
    parser.add_argument("--compiler-path", help="Path to the compiler executable", required=True)
    parser.add_argument("--compiler-args", help="Extra compiler arguments", required=True)
    parser.add_argument(
        "--output-path", help="Path to the output config header file", required=True
    )

    args = parser.parse_args()

    CompilerSettings.compiler_path = args.compiler_path
    CompilerSettings.compiler_args = args.compiler_args

    generate_config_header(args.output_path)
