# This file contains compile and related tasks

################################################
#                   Variable                   #
################################################
variables:
- &compile_bazel_task_group_template
  name: compile_bazel_task_group_template
  max_hosts: -1
  tasks: []
  setup_group_can_fail_task: true
  setup_group:
  - command: manifest.load
  - func: "git get project and add git tag"
  - func: "set task expansion macros"
  - func: "f_expansions_write"
  - func: "set up venv"
  - func: "upload pip requirements"
  - func: "configure evergreen api credentials"
  - func: "get buildnumber"
  - func: "f_expansions_write"
  - func: "set up credentials"
  - func: "f_expansions_write"
  - func: "get engflow creds"

# THIS HAS COPIES IN
# - etc/evergreen_yml_components/tasks/resmoke/server_divisions/clusters_and_integrations/tasks.yml
# - etc/evergreen_yml_components/tasks/compile_tasks.yml
# - etc/evergreen_yml_components/tasks/misc_tasks.yml
# ANY MODIFICATIONS HERE SHOULD ALSO BE MADE IN THOSE FILES
- &compile_task_group_template
  name: compile_task_group_template
  max_hosts: 1
  tasks: []
  setup_task:
  - func: "f_expansions_write"
  - func: "apply compile expansions"
  - func: "set task expansion macros"
  - func: "f_expansions_write"
  - func: "get engflow creds"
  teardown_task:
  - func: "f_expansions_write"
  - func: "attach scons logs"
  - func: "attach report"
  - func: "attach artifacts"
  - func: "attach local resmoke invocation"
  - func: "attach multiversion download links"
  - func: "kill processes"
  - func: "save mongo coredumps"
  - func: "generate hang analyzer tasks"
  - func: "save failed unittests"
  - func: "save UndoDB recordings"
  - func: "save unstripped dbtest"
  - func: "save hang analyzer debugger files"
  - func: "save disk statistics"
  - func: "save system resource information"
  - func: "save libfuzzertest corpora"
  - func: "remove files"
    vars:
      files: >-
        src/resmoke_error_code
        src/build/scons/config.log
        src/*.gcda.gcov
        src/gcov-intermediate-files.tgz
        src/*.core src/*.mdmp src/*.core.gz src/*.mdmp.gz
        mongo-coredumps.json
        src/dist-unittests/bin/*
        src/dist-unittests/lib/*
        mongo-unittests.tgz
        src/debugger*.*
        src/mongo-hanganalyzer.tgz
        diskstats.tgz
        system-resource-info.tgz
        ${report_file|src/report.json}
        ${archive_file|src/archive.json}
  setup_group_can_fail_task: true
  setup_group:
  - command: manifest.load
  - func: "git get project and add git tag"
  - func: "set task expansion macros"
  - func: "f_expansions_write"
  - func: "kill processes"
  - func: "cleanup environment"
  # The python virtual environment is installed in ${workdir}, which is created in
  # "set up venv".
  - func: "set up venv"
  - func: "upload pip requirements"
  - func: "f_expansions_write"
  - func: "configure evergreen api credentials"
  - func: "get buildnumber"
  - func: "f_expansions_write"
  - func: "set up credentials"
  - func: "use WiredTiger develop" # noop if ${use_wt_develop} is not "true"
  - func: "set up win mount script"
  - func: "generate compile expansions"
  - func: "f_expansions_write"
  teardown_group:
  - func: "f_expansions_write"
  - func: "umount shared scons directory"
  - func: "cleanup environment"
  timeout:
  - func: "f_expansions_write"
  - func: "run hang analyzer"
  - func: "wait for resmoke to shutdown"

- &stitch_support_task_group_template
  name: stitch_support_task_group_template
  setup_task:
  - func: "apply compile expansions"
  - func: "set task expansion macros"
  - func: "f_expansions_write"
  - func: "get engflow creds"
  teardown_task:
  - func: "attach scons logs"
  setup_group_can_fail_task: true
  setup_group:
  - command: manifest.load
  - func: "git get project and add git tag"
  - func: "set task expansion macros"
  - func: "f_expansions_write"
  - func: "kill processes"
  - func: "cleanup environment"
  - func: "set up venv"
  - func: "upload pip requirements"
  - func: "get buildnumber"
  - func: "f_expansions_write"
  - func: "set up win mount script"
  - func: "generate compile expansions"
  teardown_group:
  - func: "umount shared scons directory"

# TODO: split this up into the user files.
# List of all variants that make mongocryptd
# If a variant is listed here and has a push task, mongocryptd is pushed
- mongocryptd_variants: &mongocryptd_variants
  - enterprise-amazon2
  - enterprise-amazon2-openssl111
  - enterprise-amazon2-arm64
  - enterprise-amazon2-arm64-openssl111
  - enterprise-amazon2023
  - enterprise-amazon2023-lto
  - enterprise-amazon2023-arm64
  - enterprise-amazon2023-arm64-lto
  - enterprise-debian11-64
  - enterprise-debian12-64
  - enterprise-linux-64-amazon-ami
  - enterprise-macos
  - enterprise-macos-arm64
  - enterprise-rhel-70-64-bit
  - enterprise-rhel-81-ppc64le
  - enterprise-rhel-80-64-bit
  - enterprise-rhel-80-64-bit-coverage
  - enterprise-rhel-80-64-bit-suggested
  - enterprise-rhel-82-arm64
  - enterprise-rhel-83-s390x
  - enterprise-rhel-90-64-bit
  - enterprise-rhel-90-arm64
  - enterprise-suse12-64
  - enterprise-suse15-64
  - enterprise-ubuntu2004-arm64
  - enterprise-ubuntu2204-arm64
  - enterprise-ubuntu2004-64
  - enterprise-ubuntu2204-64
  - enterprise-windows
  - enterprise-windows-debug-unoptimized
  - enterprise-windows-inmem
  - enterprise-windows-wtdevelop


################################################
#                    Tasks                     #
################################################
tasks:
## compile - build all scons targets except unittests ##
- &compile_dist_test
  name: compile_dist_test
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: version_expansions_gen
    variant: generate-tasks-for-version
  commands:
  - func: "scons compile"
    vars:
      targets: >-
        install-dist-test
        ${additional_compile_targets|}
      task_compile_flags: >-
        PREFIX=dist-test
  - command: subprocess.exec
    params:
      binary: bash
      args:
      - "./src/evergreen/record_mongodb_server_version.sh"
      - "./build/install/dist-test/bin/mongod"
      - "./version_info_mongod.txt"
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/version_info_mongod.txt
      remote_file: ${project}/${build_variant}/${version_id}/version-info-mongod-${task_id}.txt
      bucket: mciuploads
      permissions: public-read
      content_type: text/plain
      display_name: mongod --version output

- <<: *compile_dist_test
  name: compile_dist_test_future_git_tag_multiversion
  depends_on:
  - name: version_expansions_future_git_tag_multiversion_gen

## compile - build bazel targets ##
## The bazel migration is in progress & this
## task ensures we can build with bazel.
# TODO(SERVER-82195): simplify this to avoid duplication of parameters in other tests.
- name: compile_bazel_dist_test
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: version_expansions_gen
    variant: generate-tasks-for-version
  commands:
  # TODO SERVER-81038: Remove "fetch bazel" once bazelisk is self-hosted.
  - func: "fetch bazel"
  - func: "scons compile"
    vars:
      targets: >-
        build/fast/mongo/db/commands/libfsync_locked.a
        build/fast/mongo/db/commands/libtest_commands_enabled.a
      task_compile_flags: >-
        BAZEL_BUILD_ENABLED=1
        BAZEL_INTEGRATION_DEBUG=1
        ICECC=
        --build-profile=fast
        --ninja=disabled
        --link-model=static
        --modules=
  - func: "verify build output present"
    vars:
      output: build/fast/mongo/db/commands/libfsync_locked.a
  - func: "bazel compile (gcc)"
    vars:
      targets: src/mongo/db/commands:fsync_locked
      compiler: gcc
  - func: "bazel compile (clang)"
    vars:
      targets: src/mongo/db/commands:fsync_locked
      compiler: clang

- name: compile_bazel_dist_test_windows
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: version_expansions_gen
    variant: generate-tasks-for-version
  commands:
  # TODO SERVER-81038: Remove "fetch bazel" once bazelisk is self-hosted.
  - func: "fetch bazel"
  - func: "scons compile"
    vars:
      targets: >-
        build/fast/mongo/db/commands/fsync_locked.lib
        build/fast/mongo/db/commands/test_commands_enabled.lib
      task_compile_flags: >-
        BAZEL_BUILD_ENABLED=1
        BAZEL_INTEGRATION_DEBUG=1
        ICECC=
        --build-profile=fast
        --ninja=disabled
        --link-model=static
        --modules=
  - func: "verify build output present"
    vars:
      output: build/fast/mongo/db/commands/fsync_locked.lib

- name: compile_bazel_dist_test_macos
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: version_expansions_gen
    variant: generate-tasks-for-version
  commands:
  # TODO SERVER-81038: Remove "fetch bazel" once bazelisk is self-hosted.
  - func: "fetch bazel"
  - func: "scons compile"
    vars:
      targets: >-
        build/fast/mongo/db/commands/libfsync_locked.a
        build/fast/mongo/db/commands/libtest_commands_enabled.a
      # MacOS needs the sandbox_writable_path set to tmpdir to allow the bazel sandbox to write to /data/mci/{id}/tmp
      task_compile_flags: >-
        BAZEL_BUILD_ENABLED=1
        BAZEL_INTEGRATION_DEBUG=1
        BAZEL_FLAGS="--subcommands --verbose_failures --sandbox_debug"
        ICECC=
        --build-profile=fast
        --ninja=disabled
        --link-model=static
        --modules=
  - func: "verify build output present"
    vars:
      output: build/fast/mongo/db/commands/libfsync_locked.a


# Validates that the bazel mongo toolchain can be used to compile targets that
# contain C and asssembly source code files.
# TODO(SERVER-82195): simplify this to avoid duplication of parameters in other tests.
- name: compile_bazel_c_and_asm_targets
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: version_expansions_gen
    variant: generate-tasks-for-version
  commands:
  # TODO SERVER-81038: Remove "fetch bazel" once bazelisk is self-hosted.
  - func: "fetch bazel"
  - func: "bazel compile (gcc)"
    vars:
      targets: src/third_party/unwind:unwind
      compiler: gcc

# Validates that the scons setting --use-libunwind is propagated to bazel's invocation (via --//bazel/config:use_libunwind)
# and that the bazel compilation correctly injects the libunwind dependency into other targets.
# TODO(SERVER-82195): simplify this to avoid duplication of parameters in other tests.
- name: compile_bazel_libunwind
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: version_expansions_gen
    variant: generate-tasks-for-version
  commands:
  # TODO SERVER-81038: Remove "fetch bazel" once bazelisk is self-hosted.
  - func: "fetch bazel"
  - func: "scons compile"
    vars:
      targets: >-
        build/fast/third_party/unwind/libunwind.a
      task_compile_flags: >-
        BAZEL_BUILD_ENABLED=1
        BAZEL_INTEGRATION_DEBUG=1
        ICECC=
        --build-profile=fast
        --ninja=disabled
        --link-model=static
        --use-libunwind=on
        --modules=
  - func: "verify build output present"
    vars:
      output: build/fast/third_party/unwind/libunwind.a

- name: compile_bazel_program
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: version_expansions_gen
    variant: generate-tasks-for-version
  commands:
  # TODO SERVER-81038: Remove "fetch bazel" once bazelisk is self-hosted.
  - func: "fetch bazel"
  - func: "scons compile"
    vars:
      targets: >-
        build/fast/mongo/platform/visibility_test1
      separate_debug: on
      task_compile_flags: >-
        BAZEL_BUILD_ENABLED=1
        BAZEL_INTEGRATION_DEBUG=1
        ICECC=
        --build-profile=fast
        --ninja=disabled
        --link-model=dynamic
        --use-libunwind=off
        --modules=
  - func: "verify build output present"
    vars:
      output: build/fast/mongo/platform/visibility_test1

- name: run_bazel_program
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: version_expansions_gen
    variant: generate-tasks-for-version
  commands:
  # TODO SERVER-81038: Remove "fetch bazel" once bazelisk is self-hosted.
  - func: "fetch bazel"
  - func: "bazel run"
    vars:
      target: >-
        //src/mongo/platform:visibility_test1

- name: run_bazel_program_windows
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: version_expansions_gen
    variant: generate-tasks-for-version
  commands:
  # TODO SERVER-81038: Remove "fetch bazel" once bazelisk is self-hosted.
  - func: "fetch bazel"
  - func: "bazel run"
    vars:
      target: >-
        //src/mongo/platform:visibility_test1
      # TODO DEVPROD-2508 remove dbg flags when compilation_mode is synced with build_mode automatically
      # TODO DEVPROD-2513 remove "--copt /std:c++20" flag when toolchain sets this automatically
      args: >-
        --compilation_mode=dbg
        --//bazel/config:build_mode=dbg
        --copt /std:c++20

## compile - build all scons targets except unittests ##
- name: compile_dist_test_half
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: version_expansions_gen
    variant: generate-tasks-for-version
  commands:
  - func: "scons compile"
    vars:
      targets: >-
        compile_first_half_non_test_source
        ${additional_compile_targets|}
      task_compile_flags: >-
        PREFIX=dist-test

- name: compile_upload_benchmarks
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: version_expansions_gen
    variant: generate-tasks-for-version
  commands:
  - func: "scons compile"
    vars:
      targets: install-benchmarks
      compiling_for_test: true
  - command: archive.targz_pack
    params:
      target: "benchmarks.tgz"
      source_dir: "src"
      include:
      - "./build/benchmarks.txt"
      - "./build/**_bm"
      - "./build/**_bm.gcno"
      - "./build/**_bm.exe"
      - "./build/**_bm.pdb"
      - "./build/**.so"
      - "./build/**.debug"
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: benchmarks.tgz
      remote_file: ${project}/${build_variant}/${revision}/benchmarks/${build_id}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: application/tar
      display_name: Benchmarks

- &archive_dist_test
  name: archive_dist_test
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: compile_dist_test
  commands:
  - func: "scons compile"
    vars:
      targets: >-
        archive-dist-test
      task_compile_flags: >-
        PREFIX=dist-test
  - command: subprocess.exec
    params:
      binary: bash
      add_expansions_to_env: true
      args:
      - "src/evergreen/run_python_script.sh"
      - "evergreen/macos_notary.py"
      - "mongodb-binaries.${ext|tgz}"

  - command: s3.put
    params:
      optional: true
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/mongodb-binaries.${ext|tgz}
      remote_file: ${mongo_binaries}
      bucket: mciuploads
      permissions: public-read
      content_type: application/gzip
      display_name: Binaries

  - func: "f_expansions_write"
  - func: "gen feature flags"
  - func: "fetch resmoke constants"

  - command: archive.targz_pack
    params:
      target: "artifacts.tgz"
      source_dir: "src"
      include:
      - ".resmoke_mongo_version.yml"
      - ".resmoke_mongo_release_values.yml"
      - "patch_test_tags.tgz"
      - "./build/**.gcno"
      - "./etc/*san.suppressions"
      - "./etc/backports_required_for_multiversion_tests.yml"
      - "./etc/evergreen_timeouts.yml"
      - "./etc/expansions.default.yml"
      - "./etc/evergreen_nightly.yml"
      - "./etc/evergreen.yml"
      - "./etc/evergreen_yml_components/**"
      - "./etc/repo_config.yaml"
      - "./etc/scons/**"
      - "./etc/macos_dev_entitlements.xml"
      - "docker_compose/**"
      - "buildscripts/**"
      - "jstests/**"
      - "patch_files.txt"
      - "evergreen/**"
      - "src/**.idl"
      - "src/mongo/client/sdam/json_tests/sdam_tests/**"
      - "src/mongo/client/sdam/json_tests/server_selection_tests/**"
      - "src/mongo/db/modules/enterprise/docs/**"
      - "src/mongo/db/modules/enterprise/jstests/**"
      - "src/mongo/db/modules/subscription/jstests/**"
      - "src/mongo/util/options_parser/test_config_files/**"
      - "src/third_party/JSON-Schema-Test-Suite/tests/draft4/**"
      - "src/third_party/mock_ocsp_responder/**"
      - "src/third_party/schemastore.org/**"
      - "poetry.lock"
      - "pyproject.toml"
      exclude_files:
      - "*_test.pdb"

  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: artifacts.tgz
      remote_file: ${mongo_artifacts}
      bucket: mciuploads
      permissions: private
      visibility: signed
      content_type: application/tar
      display_name: Artifacts

  - command: archive.targz_pack
    params:
      target: "venv.tgz"
      source_dir: "./"
      include:
      - "./venv/**"
      - "./venv_readme.txt"

  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: venv.tgz
      remote_file: ${mongo_venv}
      bucket: mciuploads
      permissions: private
      visibility: signed
      content_type: application/tar
      display_name: Python venv (see included venv_readme.txt)

- <<: *archive_dist_test
  name: archive_dist_test_future_git_tag_multiversion
  depends_on:
  - name: compile_dist_test_future_git_tag_multiversion

- &archive_dist_test_debug
  name: archive_dist_test_debug
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: archive_dist_test
  commands:
  - func: "scons compile"
    vars:
      targets: >-
        archive-dist-test-debug
      task_compile_flags: >-
        PREFIX=dist-test

  - func: "upload debugsymbols"

- <<: *archive_dist_test_debug
  name: archive_dist_test_debug_future_git_tag_multiversion
  depends_on:
  - name: archive_dist_test_future_git_tag_multiversion

- name: compile_ninja
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: version_expansions_gen
    variant: generate-tasks-for-version
  commands:
  - func: "scons compile"
    vars:
      generating_for_ninja: true
      separate_debug: off
      task_compile_flags: >-
        --ninja
  - func: "f_expansions_write"
  - func: "ninja compile"
    vars:
      ninja_file: "build.ninja"
      targets: "install-devcore compiledb"

- name: compile_ninja_quick
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: version_expansions_gen
    variant: generate-tasks-for-version
  commands:
  - func: "scons compile"
    vars:
      generating_for_ninja: true
      separate_debug: off
      task_compile_flags: >-
        --ninja
  - func: "f_expansions_write"
  - func: "ninja compile"
    vars:
      ninja_file: "build.ninja"
      targets: "install-wiredtiger compiledb"

- name: compile_ninja_default_profile
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: version_expansions_gen
    variant: generate-tasks-for-version
  commands:
  - func: "scons compile"
    vars:
      generating_for_ninja: true
      separate_debug: off
      task_compile_flags: >-
        --build-profile=default
        --ninja
  - func: "f_expansions_write"
  - func: "ninja compile"
    vars:
      ninja_file: "build.ninja"

- name: compile_ninja_default_profile_linux
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: version_expansions_gen
    variant: generate-tasks-for-version
  commands:
  - func: "scons compile"
    vars:
      generating_for_ninja: true
      separate_debug: off
      task_compile_flags: >-
        --build-profile=default
        --variables-files=etc/scons/mongodbtoolchain_stable_clang.vars
        --ninja
  - func: "f_expansions_write"
  - func: "ninja compile"
    vars:
      ninja_file: "build.ninja"
      targets: "install-devcore compiledb"

- name: compile_ninja_opt_profile
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: version_expansions_gen
    variant: generate-tasks-for-version
  commands:
  - func: "scons compile"
    vars:
      generating_for_ninja: true
      separate_debug: off
      task_compile_flags: >-
        --build-profile=opt
        CCACHE=
        ICECC=
  - func: "f_expansions_write"
  - func: "ninja compile"
    vars:
      ninja_file: "opt.ninja"
      targets: "install-devcore compiledb"

- name: compile_ninja_bazel
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: version_expansions_gen
    variant: generate-tasks-for-version
  commands:
  - func: "scons compile"
    vars:
      generating_for_ninja: true
      separate_debug: off
      task_compile_flags: >-
        --build-profile=fast
        BAZEL_BUILD_ENABLED=1
        BAZEL_INTEGRATION_DEBUG=1
        CCACHE=
        ICECC=
  - func: "f_expansions_write"
  - func: "ninja compile"
    vars:
      ninja_file: "fast.ninja"
      targets: "install-wiredtiger compiledb"

- name: compile_ninja_fast_profile
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: version_expansions_gen
    variant: generate-tasks-for-version
  commands:
  - func: "scons compile"
    vars:
      generating_for_ninja: true
      separate_debug: off
      task_compile_flags: >-
        --build-profile=fast
        CCACHE=
        ICECC=
  - func: "f_expansions_write"
  - func: "ninja compile"
    vars:
      ninja_file: "fast.ninja"
      targets: "install-devcore compiledb"

- name: compile_ninja_san_profile
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: version_expansions_gen
    variant: generate-tasks-for-version
  commands:
  - func: "scons compile"
    vars:
      generating_for_ninja: true
      separate_debug: off
      task_compile_flags: >-
        --build-profile=san
        --linker=lld
        CCACHE=
        ICECC=
  - func: "f_expansions_write"
  - func: "ninja compile"
    vars:
      ninja_file: "san.ninja"
      targets: "install-devcore compiledb"

- name: compile_ninja_compiledb_profile
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: version_expansions_gen
    variant: generate-tasks-for-version
  commands:
  - func: "scons compile"
    vars:
      generating_for_ninja: true
      separate_debug: off
      task_compile_flags: >-
        --build-profile=compiledb
        --ninja
  - func: "f_expansions_write"
  - func: "ninja compile"
    vars:
      ninja_file: "compiledb.ninja"
      targets: "install-devcore compiledb"

- name: compile_ninja_next
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: version_expansions_gen
    variant: generate-tasks-for-version
  commands:
  - func: "scons compile"
    vars:
      generating_for_ninja: true
      separate_debug: off
      task_compile_flags: >-
        --build-tools=next
        --ninja
  - func: "f_expansions_write"
  - func: "ninja compile"
    vars:
      ninja_file: "build.ninja"
      targets: "install-devcore compiledb"

- name: compile_build_tools_next
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: version_expansions_gen
    variant: generate-tasks-for-version
  commands:
  - func: "scons compile"
    vars:
      task_compile_flags: >-
        --build-tools=next
      targets:
        install-core

- name: libdeps_graph_linting
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: version_expansions_gen
    variant: generate-tasks-for-version
  commands:
  - func: "f_expansions_write"
  - command: subprocess.exec
    params:
      binary: bash
      args:
      - "src/evergreen/libdeps_setup.sh"

  - func: "scons compile"
    vars:
      task_compile_flags: >-
        --link-model=dynamic
        --force-macos-dynamic-link
        --build-tools=next
      targets:
        generate-libdeps-graph

  - command: subprocess.exec
    params:
      binary: bash
      args:
      - "src/evergreen/libdeps_run.sh"

  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/results.txt
      remote_file: ${project}/${build_variant}/${revision}/artifacts/libdeps-results.txt.${build_id}-${task_name}.${execution}
      bucket: mciuploads
      permissions: public-read
      content_type: text/plain
      display_name: Libdeps Linter Results

  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/libdeps.graphml.gz
      remote_file: ${project}/${build_variant}/${revision}/artifacts/libdeps.graphml.${build_id}-${task_name}.${execution}.gz
      bucket: mciuploads
      permissions: public-read
      content_type: ${content_type|application/gzip}
      display_name: Libdeps Graph Data

## compile_all - build all scons targets ##
- &compile_all
  name: compile_all
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: compile_dist_test
  commands:
  - func: "scons compile"
    vars:
      targets: install-all-meta
      compiling_for_test: true

- <<: *compile_all
  name: compile_all_future_git_tag_multiversion
  depends_on:
  - name: compile_dist_test_future_git_tag_multiversion

- name: compile_all_but_not_unittests
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: compile_dist_test
  commands:
  - func: "scons compile"
    vars:
      targets: install-all-meta-but-not-unittests
      compiling_for_test: true

## clang_tidy - run clang_tidy
- name: clang_tidy
  tags: ["assigned_to_jira_team_devprod_build"]
  exec_timeout_secs: 7200 # 1 hour timeout for the task overall
  depends_on:
  - name: version_expansions_gen
    variant: generate-tasks-for-version
  commands:
  - func: "scons compile"
    vars:
      task_compile_flags: >-
        --build-profile=compiledb
      targets: compiledb +mongo-tidy-tests
      compiling_for_test: true
      compile_flags: >-
        --link-model=dynamic
        -j$(grep -c ^processor /proc/cpuinfo)
        --variables-files=etc/scons/mongodbtoolchain_${clang_tidy_toolchain}_clang.vars
        --use-diagnostic-latches=on
      show_scons_timings: false
  - command: subprocess.exec
    type: test
    timeout_secs: 7000 # 1 hour timeout for no output
    params:
      binary: bash
      args:
      - "./src/evergreen/run_clang_tidy.sh"
      env:
        clang_tidy_file: ".clang-tidy"

## compile_unittests ##
- &compile_unittests
  name: compile_unittests
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: compile_dist_test
  commands:
  - func: "scons compile"
    vars:
      targets: install-unittests install-unittests-debug
      compiling_for_test: true

- name: compile_and_run_unittests_first_quarter
  exec_timeout_secs: 10800 # 3 hours
  depends_on:
  - name: compile_dist_test
  commands:
  - func: "scons compile"
    vars:
      targets: install-first-quarter-unittests install-first-quarter-unittests-debug
      compiling_for_test: true
  - func: "f_expansions_write"
  - func: "run diskstats"
  - func: "f_expansions_write"
  - func: "monitor process threads"
  - func: "collect system resource info"
  - func: "run tests"
    vars:
      suite: unittests_first_quarter
      install_dir: build/install/bin
      exec_timeout_secs: 10800 # 3 hours

- name: compile_and_run_unittests_second_quarter
  exec_timeout_secs: 10800 # 3 hours
  depends_on:
  - name: compile_dist_test
  commands:
  - func: "scons compile"
    vars:
      targets: install-second-quarter-unittests install-second-quarter-unittests-debug
      compiling_for_test: true
  - func: "f_expansions_write"
  - func: "run diskstats"
  - func: "f_expansions_write"
  - func: "monitor process threads"
  - func: "collect system resource info"
  - func: "run tests"
    vars:
      suite: unittests_second_quarter
      install_dir: build/install/bin
      exec_timeout_secs: 10800 # 3 hours

- name: compile_and_run_unittests_third_quarter
  exec_timeout_secs: 10800 # 3 hours
  depends_on:
  - name: compile_dist_test
  commands:
  - func: "scons compile"
    vars:
      targets: install-third-quarter-unittests install-third-quarter-unittests-debug
      compiling_for_test: true
  - func: "f_expansions_write"
  - func: "run diskstats"
  - func: "f_expansions_write"
  - func: "monitor process threads"
  - func: "collect system resource info"
  - func: "run tests"
    vars:
      suite: unittests_third_quarter
      install_dir: build/install/bin
      exec_timeout_secs: 10800 # 3 hours

- name: compile_and_run_unittests_fourth_quarter
  exec_timeout_secs: 10800 # 3 hours
  depends_on:
  - name: compile_dist_test
  commands:
  - func: "scons compile"
    vars:
      targets: install-fourth-quarter-unittests install-fourth-quarter-unittests-debug
      compiling_for_test: true
  - func: "f_expansions_write"
  - func: "run diskstats"
  - func: "f_expansions_write"
  - func: "monitor process threads"
  - func: "collect system resource info"
  - func: "run tests"
    vars:
      suite: unittests_fourth_quarter
      install_dir: build/install/bin
      exec_timeout_secs: 10800 # 3 hours

- <<: *compile_unittests
  name: compile_unittests_future_git_tag_multiversion
  depends_on:
  - name: compile_dist_test_future_git_tag_multiversion

## A copy of the compile_unittests task for the recorded unittest taskgroup ##
- <<: *compile_unittests
  name: compile_unittests_for_recorded_unittest

## run_unittests ##
- &run_unittests
  name: run_unittests
  tags: []
  depends_on:
  - name: compile_unittests
  commands:
  - func: "f_expansions_write"
  - func: "run diskstats"
  - func: "f_expansions_write"
  - func: "monitor process threads"
  - func: "collect system resource info"
  - func: "run tests"
    vars:
      suite: unittests
      install_dir: build/install/bin

- <<: *run_unittests
  name: run_unittests_future_git_tag_multiversion
  depends_on:
  - name: compile_unittests_future_git_tag_multiversion

## run_unittests with UndoDB live-record ##
#- name: run_unittests_with_recording
#  depends_on:
#  - name: compile_unittests_for_recorded_unittest
#  commands:
#    - *f_expansions_write
#    - func: "run diskstats"
#    - func: "f_expansions_write"
#    - func: "monitor process threads"
#    - func: "collect system resource info"
#    - command: subprocess.exec
#      params:
#        binary: bash
#        args:
#          - "./src/evergreen/undo_wiki_page.sh"
#    - command: attach.artifacts
#      params:
#        files:
#          - undo_wiki_page_location.json
#    - func: "run tests"
#      vars:
#        suite: unittests
#        record_with: --recordWith /opt/undodb5/bin/live-record
#        # Start fewer jobs since there's a constant amount of overhead of starting
#        # live-record for each job.
#        resmoke_jobs_factor: 0.3
#        install_dir: build/install/bin

##compile_and_archive_libfuzzertests - build libfuzzertests ##
- name: compile_and_archive_libfuzzertests
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: version_expansions_gen
    variant: generate-tasks-for-version
  commands:
  - func: "scons compile"
    vars:
      targets: archive-fuzzertests
      compiling_for_test: true
  # Store the fuzzer executable, which we use to generate and run fuzzer inputs.
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: "src/fuzzertests-runtime.tgz"
      remote_file: "${project}/libfuzzer-tests/${build_variant}/${revision}/libfuzzer-tests.tgz"
      bucket: mciuploads
      permissions: private
      visibility: signed
      content_type: application/tar
      display_name: "LibFuzzer Tests"

## compile_dbtest ##
- &compile_dbtest
  name: compile_dbtest
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: compile_dist_test
  commands:
  - func: "scons compile"
    vars:
      targets: install-dbtest install-dbtest-debug
      compiling_for_test: true

- <<: *compile_dbtest
  name: compile_dbtest_future_git_tag_multiversion
  depends_on:
  - name: compile_dist_test_future_git_tag_multiversion

## run_dbtest ##
- &run_dbtest
  name: run_dbtest
  tags: []
  depends_on:
  - name: compile_dbtest
  commands:
  - func: "f_expansions_write"
  - func: "run diskstats"
  - func: "f_expansions_write"
  - func: "monitor process threads"
  - func: "collect system resource info"
  - func: "run tests"
    vars:
      suite: dbtest
      install_dir: build/install/bin

- <<: *run_dbtest
  name: run_dbtest_future_git_tag_multiversion
  depends_on:
  - name: compile_dbtest_future_git_tag_multiversion

- &archive_dbtest
  name: archive_dbtest
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: compile_dbtest
  commands:
  - func: "scons compile"
    vars:
      targets: archive-dbtest archive-dbtest-debug
      compiling_for_test: true

- <<: *archive_dbtest
  name: archive_dbtest_future_git_tag_multiversion
  depends_on:
  - name: compile_dbtest_future_git_tag_multiversion

- name: compile_integration_test
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: compile_dist_test
  commands:
  - func: "scons compile"
    vars:
      targets: install-integration-tests
      compiling_for_test: true
      separate_debug: off

- name: compile_visibility_test
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: version_expansions_gen
    variant: generate-tasks-for-version
  commands:
  - func: "scons compile"
    vars:
      targets: archive-visibility-test-meta
      task_compile_flags: >-
        --ssl
        --dbg=on
        --opt=on
        --link-model=dynamic
        --force-macos-dynamic-link
        --visibility-support=on

  - command: s3.put
    params:
      optional: true
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/visibility-test-meta.${ext|tgz}
      remote_file: ${project}/${build_variant}/${revision}/visibility-test-meta-${build_id}-${task_name}-${execution}.${ext|tgz}
      bucket: mciuploads
      permissions: public-read
      content_type: ${content_type|application/gzip}
      display_name: Binaries

- name: stitch_support_create_lib
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: version_expansions_gen
    variant: generate-tasks-for-version
  commands:
  - func: "f_expansions_write"
  - func: "scons compile"
    vars:
      targets: install-stitch-support install-stitch-support-debug install-stitch-support-dev
      task_compile_flags: >-
        --link-model=dynamic-sdk
        --ssl=off
        --enable-http-client=off
        --modules=
        DESTDIR='$BUILD_ROOT/stitch-support-lib-$MONGO_VERSION'
  - func: "f_expansions_write"
  - command: subprocess.exec
    params:
      binary: bash
      args:
      - "src/evergreen/stitch_support_create_lib_tar.sh"
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: "src/build/stitch-support.tgz"
      remote_file: "${project}/stitch-support/${build_variant}/${revision}/stitch-support-${version}.tgz"
      bucket: mciuploads
      permissions: public-read
      content_type: application/tar
      display_name: "Stitch Support Library"

- name: stitch_support_install_tests
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: stitch_support_create_lib
  commands:
  - func: "scons compile"
    vars:
      targets: install-stitch-support-test
      compiling_for_test: true
      task_compile_flags: >-
        --ssl=off
        --enable-http-client=off
        --modules=
        DESTDIR='$BUILD_ROOT/stitch-support-lib-$MONGO_VERSION'

- name: stitch_support_run_tests
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: stitch_support_install_tests
  commands:
  - func: "get and apply version expansions"
  - func: "f_expansions_write"
  - command: subprocess.exec
    type: test
    params:
      binary: bash
      args:
      - "src/evergreen/stitch_support_run_tests.sh"

- name: crypt_create_lib
  tags: ["assigned_to_jira_team_server_security"]
  depends_on:
  - name: version_expansions_gen
    variant: generate-tasks-for-version
  commands:
  - func: "f_expansions_write"
  - func: "scons compile"
    vars:
      targets: archive-mongo-crypt-dev
      task_compile_flags: >-
        --allocator=system
        --enterprise-features=fle
        --js-engine=none
        --link-model=dynamic-sdk
        --enable-http-client=off
        --ssl=off
        ${crypt_task_compile_flags}
        DESTDIR='$BUILD_ROOT/crypt-lib-$MONGO_VERSION'
  - command: subprocess.exec
    params:
      binary: bash
      args:
      - "src/evergreen/crypt_run_tests.sh"
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: "src/mongo-crypt-dev.${ext|tgz}"
      remote_file: "${project}/mongo_crypt/${build_variant}/${revision}/mongo_crypt_shared_v1-${version}.${ext|tgz}"
      bucket: mciuploads
      permissions: public-read
      content_type: ${content_type|application/tar}
      display_name: "Mongo crypt Library"

- name: crypt_create_debug_lib
  tags: ["assigned_to_jira_team_server_security"]
  depends_on:
  - name: version_expansions_gen
    variant: generate-tasks-for-version
  commands:
  - func: "f_expansions_write"
  - func: "scons compile"
    vars:
      targets: archive-mongo-crypt-dev archive-mongo-crypt-debug
      task_compile_flags: >-
        --dbg=on
        --opt=off
        --allocator=system
        --enterprise-features=fle
        --js-engine=none
        --link-model=dynamic-sdk
        DESTDIR='$BUILD_ROOT/crypt-lib-$MONGO_VERSION'
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: "src/mongo-crypt-dev.${ext|tgz}"
      remote_file: "${project}/mongo_crypt/${build_variant}/${revision}/mongo_crypt_shared_v1_dev-${version}.${ext|tgz}"
      bucket: mciuploads
      permissions: public-read
      content_type: ${content_type|application/tar}
      display_name: "Mongo Crypt Library dev"
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: "src/mongo-crypt-debug.${ext|tgz}"
      remote_file: "${project}/mongo_crypt/${build_variant}/${revision}/mongo_crypt_shared_v1_debug-${version}.${ext|tgz}"
      bucket: mciuploads
      permissions: public-read
      content_type: ${content_type|application/tar}
      display_name: "Mongo Crypt Library debug"

- name: crypt_install_tests
  tags: ["assigned_to_jira_team_server_security"]
  depends_on:
  - name: crypt_create_debug_lib
  commands:
  - func: "f_expansions_write"
  - func: "scons compile"
    vars:
      targets: archive-mongo-crypt-shlib-test
      compiling_for_test: true
      task_compile_flags: >-
        --allocator=system
        --enterprise-features=fle
        --js-engine=none
        --link-model=static
        DESTDIR='$BUILD_ROOT/crypt-lib-$MONGO_VERSION'
        RPATH='$$RPATH_ESCAPED_DOLLAR_ORIGIN/../lib'
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: "src/mongo-crypt-shlib-test-runtime.${ext|tgz}"
      remote_file: "${project}/mongo_crypt/${build_variant}/${revision}/mongo_crypt_shlib_test-${version}.${ext|tgz}"
      bucket: mciuploads
      permissions: public-read
      content_type: ${content_type|application/tar}
      display_name: "Mongo Crypt Shared Library Test"

- name: crypt_run_tests
  tags: ["assigned_to_jira_team_server_security"]
  depends_on:
  - name: crypt_install_tests
  commands:
  - func: "get and apply version expansions"
  - func: "f_expansions_write"
  - command: subprocess.exec
    type: test
    params:
      binary: bash
      args:
      - "src/evergreen/crypt_run_tests.sh"

- name: package
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: compile_dist_test
  commands:
  - func: "f_expansions_write"
  - func: "scons compile"
    vars:
      targets: >-
        distsrc-${ext|tgz}
        archive-dist
        archive-dist-debug
        archive-jstestshell
        archive-jstestshell-debug
        ${additional_package_targets|}
      task_compile_flags: >-
        --legacy-tarball
  - command: subprocess.exec
    params:
      binary: bash
      add_expansions_to_env: true
      args:
      - "src/evergreen/run_python_script.sh"
      - "evergreen/macos_notary.py"
      - "mongodb-dist.${ext|tgz}"
  - func: "f_expansions_write"
  - command: subprocess.exec
    params:
      binary: bash
      args:
      - "src/evergreen/package.sh"
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/distsrc.${ext|tgz}
      remote_file: ${project}/${build_variant}/${revision}/sources/mongo-src-${build_id}.${ext|tgz}
      bucket: mciuploads
      permissions: public-read
      content_type: ${content_type|application/gzip}
      display_name: Source tarball
      # We only need to upload the source tarball from one of the build variants
      # because it should be the same everywhere, so just use rhel70/rhel80/windows.
      # TODO(SERVER-80479): remove rhel70 when support for it has been dropped.
      build_variants: [rhel70, rhel80, windows]
  - command: s3.put
    params:
      optional: true
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/mongodb-dist.${ext|tgz}
      remote_file: ${project}/${build_variant}/${revision}/dist/mongo-${build_id}.${ext|tgz}
      bucket: mciuploads
      permissions: public-read
      content_type: application/tar
      display_name: Dist Tarball
  - command: s3.put
    params:
      optional: true
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/mongodb-dist-debugsymbols.${ext|tgz}
      remote_file: ${project}/${build_variant}/${revision}/dist/mongo-${build_id}-debugsymbols.${ext|tgz}
      bucket: mciuploads
      permissions: public-read
      content_type: application/tar
      display_name: Dist Debugsymbols
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/mongodb-jstestshell.${ext|tgz}
      remote_file: ${mongo_jstestshell}
      bucket: mciuploads
      permissions: public-read
      content_type: ${content_type|application/gzip}
      display_name: Jstestshell
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/mongodb-jstestshell-debugsymbols.${ext|tgz}
      remote_file: ${mongo_jstestshell_debugsymbols}
      bucket: mciuploads
      permissions: public-read
      content_type: ${content_type|application/gzip}
      display_name: Jstestshell Debugsymbols
  - command: s3.put
    params:
      optional: true
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/mongodb-cryptd.${ext|tgz}
      remote_file: ${mongo_cryptd}
      bucket: mciuploads
      permissions: public-read
      content_type: ${content_type|application/gzip}
      display_name: CryptD Binaries
  - command: s3.put
    params:
      optional: true
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/mongodb-cryptd-debugsymbols.${ext|tgz}
      remote_file: ${mongo_cryptd_debugsymbols}
      bucket: mciuploads
      permissions: public-read
      content_type: ${content_type|application/gzip}
      display_name: CryptD Debugsymbols
  - func: "run packager.py"
  - command: archive.targz_pack
    params:
      target: "packages.tgz"
      source_dir: "src"
      include:
      - "repo/**"
      - "./**.msi"
  - command: s3.put
    params:
      optional: true
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: packages.tgz
      remote_file: ${project}/${build_variant}/${revision}/artifacts/${build_id}-packages.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: application/tar
      display_name: Packages


- name: publish_packages
  run_on: rhel8.7-small
  tags: ["assigned_to_jira_team_devprod_build", "publish"]
  # This should prevent this task from running in patch builds, where we
  # don't want to publish packages.
  patchable: false
  stepback: false
  # Same dependencies as "push" below
  depends_on:
  - name: package
  - name: jsCore
  - name: run_dbtest
  - name: replica_sets_jscore_passthrough_gen
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - func: "get and apply version expansions"
  - func: "f_expansions_write"
  - func: "kill processes"
  - func: "cleanup environment"
  - func: "set up venv"
  - func: "fetch packages"
  - func: "generate compile expansions"
  - func: "apply compile expansions"
  - func: "set up remote credentials"
    vars:
      aws_key_remote: ${repo_aws_key}
      aws_secret_remote: ${repo_aws_secret}
  - func: "set up notary client credentials"
  - func: "f_expansions_write"
  - command: shell.exec
    params:
      shell: bash
      script: |
        set -oe
        echo "${release_tools_container_registry_password}" | podman login --password-stdin --username ${release_tools_container_registry_username} ${release_tools_container_registry}
  - command: subprocess.exec
    params:
      binary: bash
      env:
        AWS_ACCESS_KEY_ID: ${upload_lock_access_key_id}
        AWS_SECRET_ACCESS_KEY: ${upload_lock_secret_access_key}
        UPLOAD_LOCK_IMAGE: ${upload_lock_image}
        UPLOAD_BUCKET: ${upload_lock_bucket}
        AWS_REGION: ${upload_lock_region}
        EVERGREEN_TASK_ID: ${task_id}
      args:
      - "./src/evergreen/packages_publish.sh"

- name: push
  run_on: rhel8.7-small
  tags: ["assigned_to_jira_team_devprod_build", "publish"]
  patchable: false
  depends_on:
  - name: package
  - name: jsCore
  - name: run_dbtest
  - name: replica_sets_jscore_passthrough_gen
  stepback: false
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - func: "get and apply version expansions"
  - func: "f_expansions_write"
  - func: "kill processes"
  - func: "cleanup environment"
  - func: "set up venv"
  - func: "fetch packages"
  - func: "fetch dist tarball"
  # Fetch mongocryptd
  - command: s3.get
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      remote_file: ${mongo_cryptd}
      bucket: mciuploads
      local_file: src/mongo-cryptd.tgz
      build_variants: *mongocryptd_variants
  # Fetch the sources (on relevant variants only)
  - command: s3.get
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      remote_file: ${project}/${build_variant}/${revision}/sources/mongo-src-${build_id}.${ext|tgz}
      bucket: mciuploads
      local_file: src/distsrc.${ext|tgz}
      # We only need to upload the source tarball from one of the build variants
      # because it should be the same everywhere, so just use rhel70/rhel80/windows.
      # TODO(SERVER-80479): remove rhel70 when support for it has been dropped.
      build_variants: [rhel70, rhel80, windows]
  - func: "generate compile expansions"
  - func: "apply compile expansions"
  - func: "fetch dist debugsymbols"
  - func: "set up remote credentials"
    vars:
      aws_key_remote: ${repo_aws_key}
      aws_secret_remote: ${repo_aws_secret}
  - func: "f_expansions_write"

  # login to container registry
  - command: shell.exec
    params:
      shell: bash
      script: |
        set -oe
        echo "${release_tools_container_registry_password}" | podman login --password-stdin --username ${release_tools_container_registry_username} ${release_tools_container_registry}

  # signing windows artifacts
  - command: subprocess.exec
    params:
      binary: bash
      args:
      - "./src/evergreen/garasign_jsign_sign.sh"

  # signing linux artifacts
  - command: subprocess.exec
    params:
      binary: bash
      args:
      - "./src/evergreen/garasign_gpg_sign.sh"

  # Put the binaries tarball/zipfile
  - command: s3.put
    params:
      aws_secret: ${aws_secret}
      local_file: src/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}
      aws_key: ${aws_key}
      bucket: build-push-testing
      permissions: public-read
      content_type: ${content_type|application/gzip}
      remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}
  # Put the cryptd tarball/zipfile
  - command: s3.put
    params:
      aws_secret: ${aws_secret}
      local_file: src/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}
      aws_key: ${aws_key}
      bucket: build-push-testing
      permissions: public-read
      content_type: ${content_type|application/gzip}
      remote_file: ${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}
      build_variants: *mongocryptd_variants
  # Put the source tarball
  - command: s3.put
    params:
      aws_secret: ${aws_secret}
      local_file: src/mongodb-src-${src_suffix}.${ext|tar.gz}
      aws_key: ${aws_key}
      bucket: build-push-testing
      permissions: public-read
      content_type: ${content_type|application/gzip}
      remote_file: ${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}
      # We only need to upload the source tarball from one of the build variants
      # because it should be the same everywhere, so just use rhel70/rhel80/windows.
      # TODO(SERVER-80479): remove rhel70 when support for it has been dropped.
      build_variants: [rhel70, rhel80, windows]

  # Put the debug symbols
  # push directly to repo due to limitations in file size SERVER-63432
  - command: s3.put
    params:
      aws_secret: ${aws_secret}
      aws_key: ${aws_key}
      permissions: public-read
      local_file: src/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}
      bucket: ${push_bucket}
      content_type: ${content_type|application/gzip}
      remote_file: ${push_path}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}
      optional: true

  # Put the binaries tarball signature
  - command: s3.put
    params:
      aws_secret: ${aws_secret}
      local_file: src/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sig
      aws_key: ${aws_key}
      bucket: build-push-testing
      permissions: public-read
      content_type: ${content_type|application/gzip}
      remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sig

  # Put the cryptd tarball signature
  - command: s3.put
    params:
      aws_secret: ${aws_secret}
      local_file: src/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sig
      aws_key: ${aws_key}
      bucket: build-push-testing
      permissions: public-read
      content_type: ${content_type|application/gzip}
      remote_file: ${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sig
      build_variants: *mongocryptd_variants

  # Put the source tarball signature
  - command: s3.put
    params:
      aws_secret: ${aws_secret}
      local_file: src/mongodb-src-${src_suffix}.${ext|tar.gz}.sig
      aws_key: ${aws_key}
      bucket: build-push-testing
      permissions: public-read
      content_type: ${content_type|application/gzip}
      remote_file: ${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}.sig
      # We only need to upload the source tarball from one of the build variants
      # because it should be the same everywhere, so just use rhel70/rhel80/windows.
      # TODO(SERVER-80479): remove rhel70 when support for it has been dropped.
      build_variants: [rhel70, rhel80, windows]

  # Put the debug symbols signature
  - command: s3.put
    params:
      aws_secret: ${aws_secret}
      aws_key: ${aws_key}
      permissions: public-read
      local_file: src/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.sig
      bucket: build-push-testing
      content_type: ${content_type|application/gzip}
      remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.sig
      optional: true

  # Put the signed MSI file
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      permissions: public-read
      build_variants: ["enterprise-windows", "windows"]
      local_file: src/mongodb-${push_name}-${push_arch}-${suffix}.msi
      bucket: build-push-testing
      content_type: application/x-msi
      remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}-signed.msi

  # Put the binaries tarball sha1
  - command: s3.put
    params:
      aws_secret: ${aws_secret}
      local_file: src/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha1
      aws_key: ${aws_key}
      permissions: public-read
      bucket: build-push-testing
      content_type: text/plain
      remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha1

  # Put the cryptd tarball sha1
  - command: s3.put
    params:
      aws_secret: ${aws_secret}
      local_file: src/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha1
      aws_key: ${aws_key}
      permissions: public-read
      bucket: build-push-testing
      content_type: text/plain
      remote_file: ${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha1
      build_variants: *mongocryptd_variants

  # Put the source tarball sha1
  - command: s3.put
    params:
      aws_secret: ${aws_secret}
      local_file: src/mongodb-src-${src_suffix}.${ext|tar.gz}.sha1
      aws_key: ${aws_key}
      permissions: public-read
      bucket: build-push-testing
      content_type: text/plain
      remote_file: ${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}.sha1
      # We only need to upload the source tarball from one of the build variants
      # because it should be the same everywhere, so just use rhel70/rhel80/windows.
      # TODO(SERVER-80479): remove rhel70 when support for it has been dropped.
      build_variants: [rhel70, rhel80, windows]

  # Put the debug symbols sha1
  - command: s3.put
    params:
      aws_secret: ${aws_secret}
      aws_key: ${aws_key}
      permissions: public-read
      local_file: src/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.sha1
      bucket: build-push-testing
      content_type: text/plain
      remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.sha1
      optional: true

  # Push the signed MSI sha1
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      permissions: public-read
      build_variants: ["enterprise-windows", "windows"]
      local_file: src/mongodb-${push_name}-${push_arch}-${suffix}.msi.sha1
      bucket: build-push-testing
      content_type: text/plain
      remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}-signed.msi.sha1

  # Put the binaries tarball sha256
  - command: s3.put
    params:
      aws_secret: ${aws_secret}
      local_file: src/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha256
      permissions: public-read
      aws_key: ${aws_key}
      bucket: build-push-testing
      content_type: text/plain
      remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha256

  # Put the cryptd tarball sha256
  - command: s3.put
    params:
      aws_secret: ${aws_secret}
      local_file: src/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha256
      permissions: public-read
      aws_key: ${aws_key}
      bucket: build-push-testing
      content_type: text/plain
      remote_file: ${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha256
      build_variants: *mongocryptd_variants

  # Put the source tarball sha256
  - command: s3.put
    params:
      aws_secret: ${aws_secret}
      local_file: src/mongodb-src-${src_suffix}.${ext|tar.gz}.sha256
      permissions: public-read
      aws_key: ${aws_key}
      bucket: build-push-testing
      content_type: text/plain
      remote_file: ${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}.sha256
      # We only need to upload the source tarball from one of the build variants
      # because it should be the same everywhere, so just use rhel70/rhel80/windows.
      # TODO(SERVER-80479): remove rhel70 when support for it has been dropped.
      build_variants: [rhel70, rhel80, windows]

  # Put the debug symbols sha256
  - command: s3.put
    params:
      aws_secret: ${aws_secret}
      local_file: src/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.sha256
      aws_key: ${aws_key}
      bucket: build-push-testing
      permissions: public-read
      content_type: text/plain
      remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.sha256
      optional: true

  # Put the signed MSI sha256
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      build_variants: ["enterprise-windows", "windows"]
      local_file: src/mongodb-${push_name}-${push_arch}-${suffix}.msi.sha256
      bucket: build-push-testing
      permissions: public-read
      remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}-signed.msi.sha256
      content_type: text/plain

  # Put the binaries tarball md5
  - command: s3.put
    params:
      aws_secret: ${aws_secret}
      local_file: src/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.md5
      aws_key: ${aws_key}
      bucket: build-push-testing
      permissions: public-read
      content_type: text/plain
      remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.md5

  # Put the cryptd tarball md5
  - command: s3.put
    params:
      aws_secret: ${aws_secret}
      local_file: src/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.md5
      aws_key: ${aws_key}
      bucket: build-push-testing
      permissions: public-read
      content_type: text/plain
      remote_file: ${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.md5
      build_variants: *mongocryptd_variants

  # Put the source tarball md5
  - command: s3.put
    params:
      aws_secret: ${aws_secret}
      local_file: src/mongodb-src-${src_suffix}.${ext|tar.gz}.md5
      aws_key: ${aws_key}
      bucket: build-push-testing
      permissions: public-read
      content_type: text/plain
      remote_file: ${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}.md5
      # We only need to upload the source tarball from one of the build variants
      # because it should be the same everywhere, so just use rhel70/rhel80/windows.
      # TODO(SERVER-80479): remove rhel70 when support for it has been dropped.
      build_variants: [rhel70, rhel80, windows]

  # Put the debug symbols md5
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.md5
      bucket: build-push-testing
      content_type: text/plain
      permissions: public-read
      remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.md5
      optional: true

  # Put the signed MSI md5
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      build_variants: ["enterprise-windows", "windows"]
      local_file: src/mongodb-${push_name}-${push_arch}-${suffix}.msi.md5
      bucket: build-push-testing
      permissions: public-read
      content_type: text/plain
      remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}-signed.msi.md5

  - command: subprocess.exec
    params:
      continue_on_err: true
      binary: bash
      env:
        SERVER_TARBALL_PATH: src/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}
        SERVER_TARBALL_KEY: ${version_id}/${build_id}/push/${push_path}/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}
        CRYPTD_TARBALL_PATH: src/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}
        CRYPTD_TARBALL_KEY: ${version_id}/${build_id}/push/${push_path}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}
        SOURCE_TARBALL_PATH: src/mongodb-src-${src_suffix}.${ext|tar.gz}
        SOURCE_TARBALL_KEY: ${version_id}/${build_id}/push/src/mongodb-src-${src_suffix}.${ext|tar.gz}
        DEBUG_SYMBOLS_TARBALL_PATH: src/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}
        DEBUG_SYMBOLS_TARBALL_KEY: ${version_id}/${build_id}/push/${push_path}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}
        SERVER_TARBALL_SIGNATURE_PATH: src/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sig
        SERVER_TARBALL_SIGNATURE_KEY: ${version_id}/${build_id}/push/${push_path}/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sig
        CRYPTD_TARBALL_SIGNATURE_PATH: src/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sig
        CRYPTD_TARBALL_SIGNATURE_KEY: ${version_id}/${build_id}/push/${push_path}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sig
        SOURCE_TARBALL_SIGNATURE_PATH: src/mongodb-src-${src_suffix}.${ext|tar.gz}.sig
        SOURCE_TARBALL_SIGNATURE_KEY: ${version_id}/${build_id}/push/src/mongodb-src-${src_suffix}.${ext|tar.gz}.sig
        DEBUG_SYMBOLS_TARBALL_SIGNATURE_PATH: src/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.sig
        DEBUG_SYMBOLS_TARBALL_SIGNATURE_KEY: ${version_id}/${build_id}/push/${push_path}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.sig
        MSI_PATH: src/mongodb-${push_name}-${push_arch}-${suffix}.msi
        MSI_KEY: ${version_id}/${build_id}/push/${push_path}/mongodb-${push_name}-${push_arch}-${suffix}-signed.msi
        SERVER_TARBALL_SHA1_PATH: src/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha1
        SERVER_TARBALL_SHA1_KEY: ${version_id}/${build_id}/push/${push_path}/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha1
        CRYPTD_TARBALL_SHA1_PATH: src/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha1
        CRYPTD_TARBALL_SHA1_KEY: ${version_id}/${build_id}/push/${push_path}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha1
        SOURCE_TARBALL_SHA1_PATH: src/mongodb-src-${src_suffix}.${ext|tar.gz}.sha1
        SOURCE_TARBALL_SHA1_KEY: ${version_id}/${build_id}/push/src/mongodb-src-${src_suffix}.${ext|tar.gz}.sha1
        DEBUG_SYMBOLS_TARBALL_SHA1_PATH: src/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.sha1
        DEBUG_SYMBOLS_TARBALL_SHA1_KEY: ${version_id}/${build_id}/push/${push_path}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.sha1
        MSI_SHA1_PATH: src/mongodb-${push_name}-${push_arch}-${suffix}.msi.sha1
        MSI_SHA1_KEY: ${version_id}/${build_id}/push/${push_path}/mongodb-${push_name}-${push_arch}-${suffix}-signed.msi.sha1
        SERVER_TARBALL_SHA256_PATH: src/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha256
        SERVER_TARBALL_SHA256_KEY: ${version_id}/${build_id}/push/${push_path}/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha256
        CRYPTD_TARBALL_SHA256_PATH: src/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha256
        CRYPTD_TARBALL_SHA256_KEY: ${version_id}/${build_id}/push/${push_path}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha256
        SOURCE_TARBALL_SHA256_PATH: src/mongodb-src-${src_suffix}.${ext|tar.gz}.sha256
        SOURCE_TARBALL_SHA256_KEY: ${version_id}/${build_id}/push/src/mongodb-src-${src_suffix}.${ext|tar.gz}.sha256
        DEBUG_SYMBOLS_TARBALL_SHA256_PATH: src/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.sha256
        DEBUG_SYMBOLS_TARBALL_SHA256_KEY: ${version_id}/${build_id}/push/${push_path}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.sha256
        MSI_SHA256_PATH: src/mongodb-${push_name}-${push_arch}-${suffix}.msi.sha256
        MSI_SHA256_KEY: ${version_id}/${build_id}/push/${push_path}/mongodb-${push_name}-${push_arch}-${suffix}-signed.msi.sha256
        SERVER_TARBALL_MD5_PATH: src/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.md5
        SERVER_TARBALL_MD5_KEY: ${version_id}/${build_id}/push/${push_path}/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.md5
        CRYPTD_TARBALL_MD5_PATH: src/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.md5
        CRYPTD_TARBALL_MD5_KEY: ${version_id}/${build_id}/push/${push_path}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.md5
        SOURCE_TARBALL_MD5_PATH: src/mongodb-src-${src_suffix}.${ext|tar.gz}.md5
        SOURCE_TARBALL_MD5_KEY: ${version_id}/${build_id}/push/src/mongodb-src-${src_suffix}.${ext|tar.gz}.md5
        DEBUG_SYMBOLS_TARBALL_MD5_PATH: src/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.md5
        DEBUG_SYMBOLS_TARBALL_MD5_KEY: ${version_id}/${build_id}/push/${push_path}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.md5
        MSI_MD5_PATH: src/mongodb-${push_name}-${push_arch}-${suffix}.msi.md5
        MSI_MD5_KEY: ${version_id}/${build_id}/push/${push_path}/mongodb-${push_name}-${push_arch}-${suffix}-signed.msi.md5
        AWS_ACCESS_KEY_ID: ${upload_lock_access_key_id}
        AWS_SECRET_ACCESS_KEY: ${upload_lock_secret_access_key}
        UPLOAD_LOCK_IMAGE: ${upload_lock_image}
        UPLOAD_BUCKET: ${upload_lock_bucket}
        AWS_REGION: ${upload_lock_region}
        EVERGREEN_TASK_ID: ${task_id}
      args:
      - "./src/evergreen/run_upload_lock_push.sh"

  - command: s3Copy.copy
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      s3_copy_files:
      #Binaries
      - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}', 'bucket': 'build-push-testing'},
         'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}', 'bucket': '${push_bucket}'}}

      #Cryptd
      - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}', 'bucket': 'build-push-testing'},
         'destination': {'path': '${push_path}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}', 'bucket': '${push_bucket}'},
         'build_variants': *mongocryptd_variants}

      #Source tarball
      - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}', 'bucket': 'build-push-testing'},
         'destination': {'path': 'src/mongodb-src-${src_suffix}.${ext|tar.gz}', 'bucket': '${push_bucket}'},
         'build_variants': ['rhel70', 'windows']}

      #MSI (Windows only)
      - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}-signed.msi', 'bucket': 'build-push-testing'},
         'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}-signed.msi', 'bucket': '${push_bucket}'},
         'build_variants': ['enterprise-windows', 'windows']}

      #Binaries Signature
      - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sig', 'bucket': 'build-push-testing'},
         'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sig', 'bucket': '${push_bucket}'}}

      #Cryptd Signature
      - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sig', 'bucket': 'build-push-testing'},
         'destination': {'path': '${push_path}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sig', 'bucket': '${push_bucket}'},
         'build_variants': *mongocryptd_variants}

      #Source tarball signature
      - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}.sig', 'bucket': 'build-push-testing'},
         'destination': {'path': 'src/mongodb-src-${src_suffix}.${ext|tar.gz}.sig', 'bucket': '${push_bucket}'},
         'build_variants': ['rhel70', 'windows']}

      #SHA1 for binaries
      - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha1', 'bucket': 'build-push-testing'},
         'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha1', 'bucket': '${push_bucket}'}}

      #SHA1 for cryptd
      - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha1', 'bucket': 'build-push-testing'},
         'destination': {'path': '${push_path}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha1', 'bucket': '${push_bucket}'},
         'build_variants': *mongocryptd_variants}

      #SHA1 for source tarball
      - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}.sha1', 'bucket': 'build-push-testing'},
         'destination': {'path': 'src/mongodb-src-${src_suffix}.${ext|tar.gz}.sha1', 'bucket': '${push_bucket}'},
         'build_variants': ['rhel70', 'windows']}

      #SHA1 for MSI
      - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}-signed.msi.sha1', 'bucket': 'build-push-testing'},
         'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}-signed.msi.sha1', 'bucket': '${push_bucket}'},
         'build_variants': ['enterprise-windows', 'windows']}

      #SHA256 for binaries
      - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha256', 'bucket': 'build-push-testing'},
         'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha256', 'bucket': '${push_bucket}'}}

      #SHA256 for cryptd
      - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha256', 'bucket': 'build-push-testing'},
         'destination': {'path': '${push_path}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha256', 'bucket': '${push_bucket}'},
         'build_variants': *mongocryptd_variants}

      #SHA256 for source tarball
      - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}.sha256', 'bucket': 'build-push-testing'},
         'destination': {'path': 'src/mongodb-src-${src_suffix}.${ext|tar.gz}.sha256', 'bucket': '${push_bucket}'},
         'build_variants': ['rhel70', 'windows']}

      #SHA256 for MSI files
      - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}-signed.msi.sha256', 'bucket': 'build-push-testing'},
         'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}-signed.msi.sha256', 'bucket': '${push_bucket}'},
         'build_variants': ['enterprise-windows', 'windows']}

      #MD5 for binaries
      - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.md5', 'bucket': 'build-push-testing'},
         'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.md5', 'bucket': '${push_bucket}'}}

      #MD5 for cryptd
      - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.md5', 'bucket': 'build-push-testing'},
         'destination': {'path': '${push_path}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.md5', 'bucket': '${push_bucket}'},
         'build_variants': *mongocryptd_variants}

      #MD5 for source tarball
      - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}.md5', 'bucket': 'build-push-testing'},
         'destination': {'path': 'src/mongodb-src-${src_suffix}.${ext|tar.gz}.md5', 'bucket': '${push_bucket}'},
         'build_variants': ['rhel70', 'windows']}

      #MD5 for MSIs
      - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}-signed.msi.md5', 'bucket': 'build-push-testing'},
         'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}-signed.msi.md5', 'bucket': '${push_bucket}'},
         'build_variants': ['enterprise-windows', 'windows']}

  # Debug symbols are not created for all variants and the copy is optional.
  - command: s3Copy.copy
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      optional: true
      s3_copy_files:
      #Debug Symbols temporarily removed - see SERVER-63432 - need to s3.push debugsymbols due to size limit
      #Debug Symbols Signature
      - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.sig', 'bucket': 'build-push-testing'},
         'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.sig', 'bucket': '${push_bucket}'}}

      #SHA1 for debug symbols
      - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.sha1', 'bucket': 'build-push-testing'},
         'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.sha1', 'bucket': '${push_bucket}'}}

      #SHA256 for debugsymbols
      - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.sha256', 'bucket': 'build-push-testing'},
         'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.sha256', 'bucket': '${push_bucket}'}}

      #MD5 for debugsymbols
      - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.md5', 'bucket': 'build-push-testing'},
         'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.md5', 'bucket': '${push_bucket}'}}

- name: crypt_push
  run_on: rhel8.7-small
  tags: ["assigned_to_jira_team_server_security", "publish_crypt"]
  patchable: false
  stepback: false
  depends_on:
  - name: crypt_create_lib
  commands:
  - command: manifest.load
  - func: "f_expansions_write"
  - func: "git get project and add git tag"
  - func: "set task expansion macros"
  - func: "f_expansions_write"
  - func: "kill processes"
  - func: "cleanup environment"
  - func: "set up venv"
  - func: "upload pip requirements"
  - func: "get buildnumber"
  - func: "f_expansions_write"
  - func: "get and apply version expansions"
  - func: "f_expansions_write"
  - func: "generate compile expansions"
  - func: "apply compile expansions"
  - func: "f_expansions_write"
  - command: s3.get
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      remote_file: ${project}/mongo_crypt/${build_variant}/${revision}/mongo_crypt_shared_v1-${version}.${ext|tgz}
      bucket: mciuploads
      local_file: src/mongo_crypt_shared_v1.${ext|tgz}
  - func: "generate compile expansions"
  - func: "apply compile expansions"
  - func: "set up remote credentials"
    vars:
      aws_key_remote: ${repo_aws_key}
      aws_secret_remote: ${repo_aws_secret}
  - func: "f_expansions_write"
  # login to container registry
  - command: shell.exec
    params:
      shell: bash
      script: |
        set -oe
        echo "${release_tools_container_registry_password}" | podman login --password-stdin --username ${release_tools_container_registry_username} ${release_tools_container_registry}
  - command: subprocess.exec
    params:
      binary: bash
      args:
      - "./src/evergreen/garasign_gpg_crypt_sign.sh"
  # Put the crypt tarball/zipfile
  - command: s3.put
    params:
      aws_secret: ${aws_secret}
      local_file: src/mongo_crypt_shared_v1-${push_name}-${push_arch}-${suffix}.${ext|tgz}
      aws_key: ${aws_key}
      bucket: build-push-testing
      permissions: public-read
      content_type: ${content_type|application/gzip}
      remote_file: ${push_path}-STAGE/${push_name}/mongo_crypt_shared_v1-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}
  # Put the crypt tarball signature
  - command: s3.put
    params:
      aws_secret: ${aws_secret}
      local_file: src/mongo_crypt_shared_v1-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sig
      aws_key: ${aws_key}
      bucket: build-push-testing
      permissions: public-read
      content_type: ${content_type|application/gzip}
      remote_file: ${push_path}-STAGE/${push_name}/mongo_crypt_shared_v1-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sig
  # Put the crypt tarball sha1
  - command: s3.put
    params:
      aws_secret: ${aws_secret}
      local_file: src/mongo_crypt_shared_v1-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha1
      aws_key: ${aws_key}
      permissions: public-read
      bucket: build-push-testing
      content_type: text/plain
      remote_file: ${push_path}-STAGE/${push_name}/mongo_crypt_shared_v1-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha1
  # Put the crypt tarball sha256
  - command: s3.put
    params:
      aws_secret: ${aws_secret}
      local_file: src/mongo_crypt_shared_v1-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha256
      permissions: public-read
      aws_key: ${aws_key}
      bucket: build-push-testing
      content_type: text/plain
      remote_file: ${push_path}-STAGE/${push_name}/mongo_crypt_shared_v1-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha256
  # Put the crypt tarball md5
  - command: s3.put
    params:
      aws_secret: ${aws_secret}
      local_file: src/mongo_crypt_shared_v1-${push_name}-${push_arch}-${suffix}.${ext|tgz}.md5
      aws_key: ${aws_key}
      bucket: build-push-testing
      permissions: public-read
      content_type: text/plain
      remote_file: ${push_path}-STAGE/${push_name}/mongo_crypt_shared_v1-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.md5
  - command: s3Copy.copy
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      s3_copy_files:
      #Binaries
      - {'source': {'path': '${push_path}-STAGE/${push_name}/mongo_crypt_shared_v1-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}', 'bucket': 'build-push-testing'},
         'destination': {'path': '${push_path}/mongo_crypt_shared_v1-${push_name}-${push_arch}-${suffix}.${ext|tgz}', 'bucket': '${push_bucket}'}}
      #SHA1 for binaries
      - {'source': {'path': '${push_path}-STAGE/${push_name}/mongo_crypt_shared_v1-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha1', 'bucket': 'build-push-testing'},
         'destination': {'path': '${push_path}/mongo_crypt_shared_v1-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha1', 'bucket': '${push_bucket}'}}
      #SHA256 for binaries
      - {'source': {'path': '${push_path}-STAGE/${push_name}/mongo_crypt_shared_v1-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha256', 'bucket': 'build-push-testing'},
         'destination': {'path': '${push_path}/mongo_crypt_shared_v1-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha256', 'bucket': '${push_bucket}'}}
      #MD5 for binaries
      - {'source': {'path': '${push_path}-STAGE/${push_name}/mongo_crypt_shared_v1-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.md5', 'bucket': 'build-push-testing'},
         'destination': {'path': '${push_path}/mongo_crypt_shared_v1-${push_name}-${push_arch}-${suffix}.${ext|tgz}.md5', 'bucket': '${push_bucket}'}}


- name: shared_scons_cache_pruning
  tags: ["assigned_to_jira_team_devprod_build"]
  exec_timeout_secs: 7200 # 2 hour timeout for the task overall
  depends_on: []
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - func: "f_expansions_write"
  - func: "kill processes"
  - func: "cleanup environment"
  - func: "set up venv"
  - func: "shared scons cache pruning"

- name: win_shared_scons_cache_pruning
  tags: ["assigned_to_jira_team_devprod_build"]
  exec_timeout_secs: 21600 # 2 hour timeout for the task overall
  depends_on: []
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - func: "f_expansions_write"
  - func: "kill processes"
  - func: "cleanup environment"
  - func: "set up venv"
  - func: "set up win mount script"
  - func: "shared scons cache pruning"

# Test a compilation without extra args from evergreen to simulate local dev compilation.
- name: scons_dev_compile_smoke_test
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: version_expansions_gen
    variant: generate-tasks-for-version
  commands:
  - func: "get version expansions"
  - func: "apply version expansions"
  - func: "f_expansions_write"
  - func: "scons raw compile"
    vars:
      targets: >-
        install-wiredtiger
        compiledb
      task_compile_flags: >-
        --opt=off
        --dbg=on
  - func: "scons raw compile"
    vars:
      targets: >-
        install-wiredtiger
        compiledb
      task_compile_flags: >-
        --opt=on
        --dbg=off

# Test a ninja compilation without extra args from evergreen to simulate local dev compilation.
- name: ninja_dev_compile_smoke_test
  tags: ["assigned_to_jira_team_devprod_build"]
  depends_on:
  - name: version_expansions_gen
    variant: generate-tasks-for-version
  commands:
  - func: "get version expansions"
  - func: "apply version expansions"
  - func: "f_expansions_write"
  - func: "scons raw compile"
    vars:
      targets: >-
        install-wiredtiger
        compiledb
      task_compile_flags: >-
        --ninja build.ninja
  - func: "f_expansions_write"
  - func: "ninja compile"
    vars:
      ninja_file: "build.ninja"
      targets: "compiledb"


################################################
#                 Task Groups                  #
################################################
task_groups:
- <<: *compile_task_group_template
  name: compile_dist_test_TG
  tasks:
  - compile_dist_test

- <<: *compile_bazel_task_group_template
  name: compile_bazel_TG
  tasks:
  - compile_bazel_dist_test
  - compile_bazel_c_and_asm_targets
  - compile_bazel_libunwind
  - compile_bazel_program
  - compile_ninja_bazel
  - run_bazel_program

- <<: *compile_bazel_task_group_template
  name: compile_bazel_windows_TG
  tasks:
  - compile_bazel_dist_test_windows
  - run_bazel_program_windows
  - compile_ninja_bazel

- <<: *compile_bazel_task_group_template
  name: compile_bazel_macos_TG
  tasks:
  - compile_bazel_dist_test_macos
  - compile_ninja_bazel

- <<: *compile_task_group_template
  name: compile_upload_benchmarks_TG
  tasks:
  - compile_upload_benchmarks

- <<: *compile_task_group_template
  name: compile_and_archive_dist_test_TG
  tasks:
  - compile_dist_test
  - archive_dist_test
  - archive_dist_test_debug

- <<: *compile_task_group_template
  name: compile_and_archive_dist_test_then_package_TG
  tasks:
  - compile_dist_test
  - archive_dist_test
  - archive_dist_test_debug
  - package

- <<: *compile_task_group_template
  name: compile_ninja_next_TG
  tasks:
  - compile_ninja_next

- <<: *compile_task_group_template
  name: compile_build_tools_next_TG
  tasks:
  - compile_build_tools_next

- <<: *compile_task_group_template
  name: compile_ninja_TG
  tasks:
  - compile_ninja
  teardown_task:
  - command: s3.put
    params:
      optional: true
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/all.build.ninja
      remote_file: ${project}/${build_variant}/${revision}/artifacts/all.${build_id}.build.ninja
      bucket: mciuploads
      permissions: public-read
      content_type: text/plain
      display_name: build.ninja

- <<: *compile_task_group_template
  name: compile_ninja_quick_TG
  tasks:
  - compile_ninja_quick

- <<: *compile_task_group_template
  name: compile_ninja_default_profile_TG
  tasks:
  - compile_ninja_default_profile

- <<: *compile_task_group_template
  name: compile_ninja_default_profile_linux_TG
  tasks:
  - compile_ninja_default_profile_linux

- <<: *compile_task_group_template
  name: compile_ninja_opt_profile_TG
  tasks:
  - compile_ninja_opt_profile

- <<: *compile_task_group_template
  name: compile_ninja_san_profile_TG
  tasks:
  - compile_ninja_san_profile

- <<: *compile_task_group_template
  name: compile_ninja_fast_profile_TG
  tasks:
  - compile_ninja_fast_profile

- <<: *compile_task_group_template
  name: compile_ninja_compiledb_profile_TG
  tasks:
  - compile_ninja_compiledb_profile

- <<: *compile_task_group_template
  name: compile_run_and_archive_dbtest_TG
  tasks:
  - compile_dbtest
  - run_dbtest
  - archive_dbtest

- <<: *compile_task_group_template
  name: compile_test_serial_TG
  tasks:
  - compile_dist_test
  - archive_dist_test
  - archive_dist_test_debug
  - compile_dbtest
  - run_dbtest
  - archive_dbtest

- <<: *compile_task_group_template
  name: compile_test_serial_future_git_tag_multiversion_TG
  tasks:
  - compile_dist_test_future_git_tag_multiversion
  - archive_dist_test_future_git_tag_multiversion
  - archive_dist_test_debug_future_git_tag_multiversion
  - compile_unittests_future_git_tag_multiversion
  - run_unittests_future_git_tag_multiversion
  - compile_dbtest_future_git_tag_multiversion
  - run_dbtest_future_git_tag_multiversion
  - archive_dbtest_future_git_tag_multiversion
  - compile_all_future_git_tag_multiversion

- <<: *compile_task_group_template
  name: compile_test_and_package_serial_TG
  tasks:
  - compile_dist_test
  - archive_dist_test
  - archive_dist_test_debug
  - compile_dbtest
  - run_dbtest
  - archive_dbtest
  - package

# The *no_unittests_TG taskgroups are useful for static builds,
# were the static binaries of the unittests can take up to
# a terabyte of data.
- <<: *compile_task_group_template
  name: compile_test_serial_no_unittests_TG
  tasks:
  - compile_dist_test
  - archive_dist_test
  - archive_dist_test_debug
  - compile_dbtest
  - run_dbtest
  - archive_dbtest
  - compile_all_but_not_unittests

- <<: *compile_task_group_template
  name: compile_test_and_package_serial_no_unittests_TG
  tasks:
  - compile_dist_test
  - archive_dist_test
  - archive_dist_test_debug
  - compile_dbtest
  - run_dbtest
  - archive_dbtest
  - compile_all_but_not_unittests
  - package

# TODO: SERVER-79886 Fix commented out tasks
- <<: *compile_task_group_template
  name: compile_test_and_package_serial_lto_no_unittests_TG
  tasks:
  - compile_dist_test
  - archive_dist_test
  - archive_dist_test_debug
  - compile_dbtest
  # - run_dbtest
  # - archive_dbtest
  # - compile_all_but_not_unittests
  # - package

- <<: *compile_task_group_template
  name: compile_and_package_serial_no_unittests_TG
  tasks:
  - compile_dist_test
  - archive_dist_test
  - archive_dist_test_debug

- <<: *compile_task_group_template
  name: compile_test_benchmark_serial_TG
  tasks:
  - compile_dist_test
  - archive_dist_test
  - archive_dist_test_debug
  - compile_dbtest
  - run_dbtest
  - archive_dbtest
  - compile_upload_benchmarks

# The *no_unittests_TG taskgroups are useful for static builds,
# were the static binaries of the unittests can take up to
# a terabyte of data.
- <<: *compile_task_group_template
  name: compile_test_benchmark_and_package_serial_no_unittests_TG
  tasks:
  - compile_dist_test
  - archive_dist_test
  - archive_dist_test_debug
  - compile_dbtest
  - run_dbtest
  - archive_dbtest
  - compile_upload_benchmarks
  - compile_all_but_not_unittests
  - package

- <<: *compile_task_group_template
  name: compile_test_parallel_unittest_stream_TG
  max_hosts: -1
  tasks:
  - compile_and_run_unittests_first_quarter
  - compile_and_run_unittests_second_quarter
  - compile_and_run_unittests_third_quarter
  - compile_and_run_unittests_fourth_quarter

# These `parallel` task groups are only appropriate for builders that
# use --link-model=dynamic, and have scons_cache_scope: shared and
# scons_cache_mode: all. Such builders are able to share all build
# artifacts, and therefore will not repeatedly re-link the same
# code. In that mode, it makes sense to run all of these tasks
# concurrently, since they will share state across machines and can
# complete faster than running them serially. We keep them in task
# groups so that if they do run on the same machine, they can avoid the
# cost of re-running the setup tasks.
- <<: *compile_task_group_template
  name: compile_test_parallel_core_stream_TG
  tasks:
  - compile_dist_test
  - determine_patch_tests
  - archive_dist_test
  - archive_dist_test_debug
  - compile_all

- <<: *compile_task_group_template
  name: compile_test_and_package_parallel_core_stream_TG
  tasks:
  - compile_dist_test
  - determine_patch_tests
  - archive_dist_test
  - archive_dist_test_debug
  - compile_all
  - package

- <<: *compile_task_group_template
  name: compile_test_parallel_dbtest_stream_TG
  tasks:
  - compile_dbtest
  - run_dbtest
  - archive_dbtest

- <<: *compile_task_group_template
  name: scons_compile_smoke_test_TG
  tasks:
  - scons_dev_compile_smoke_test

- <<: *compile_task_group_template
  name: ninja_compile_smoke_test_TG
  tasks:
  - ninja_dev_compile_smoke_test

- name: clang_tidy_TG
  setup_group_can_fail_task: true
  setup_group:
  - command: manifest.load
  - func: "git get project and add git tag"
  - func: "set task expansion macros"
  - func: "f_expansions_write"
  - func: "kill processes"
  - func: "cleanup environment"
  - func: "set up venv"
  - func: "upload pip requirements"
  - func: "configure evergreen api credentials"
  - func: "get buildnumber"
  - func: "f_expansions_write"
  - func: "set up credentials"
  - func: "set up win mount script"
  - func: "generate compile expansions"
  teardown_group:
  - func: "f_expansions_write"
  - func: "attach report"
  - func: "upload clang tidy results"
  - func: "umount shared scons directory"
  - func: "cleanup environment"
  setup_task:
  - func: "apply compile expansions"
  - func: "f_expansions_write"
  - func: "set task expansion macros"
  - func: "f_expansions_write"
  teardown_task:
  tasks:
  - clang_tidy

- name: visibility_test_TG
  setup_group_can_fail_task: true
  max_hosts: 1
  setup_group:
  - command: manifest.load
  - func: "git get project and add git tag"
  - func: "set task expansion macros"
  - func: "f_expansions_write"
  - func: "get buildnumber"
  - func: "set up venv"
  - func: "upload pip requirements"
  - func: "set up credentials"
  - func: "set up win mount script"
  - func: "generate compile expansions"
  teardown_group:
  - func: "umount shared scons directory"
  setup_task:
  - func: "set task expansion macros"
  - func: "f_expansions_write"
  - func: "apply compile expansions"
  - func: "f_expansions_write"
  teardown_task:
  - func: "attach scons logs"
  tasks:
  - compile_visibility_test

- <<: *stitch_support_task_group_template
  name: stitch_support_lib_build_and_archive
  tags: ["stitch"]
  tasks:
  - "stitch_support_create_lib"

- <<: *stitch_support_task_group_template
  name: stitch_support_lib_build_and_test
  tags: ["stitch"]
  max_hosts: 1
  tasks:
  - "stitch_support_install_tests"
  - "stitch_support_run_tests"

- name: crypt_build
  setup_task:
  - func: "f_expansions_write"
  - func: "apply compile expansions"
  - func: "set task expansion macros"
  - func: "f_expansions_write"
  teardown_task:
  - func: "attach scons logs"
  setup_group_can_fail_task: true
  setup_group:
  - command: manifest.load
  - func: "git get project and add git tag"
  - func: "set task expansion macros"
  - func: "f_expansions_write"
  - func: "kill processes"
  - func: "cleanup environment"
  - func: "set up venv"
  - func: "upload pip requirements"
  - func: "get buildnumber"
  - func: "f_expansions_write"
  - func: "set up win mount script"
  - func: "generate compile expansions"
  teardown_group:
  - func: "umount shared scons directory"
  tags: ["crypt"]
  max_hosts: 1
  tasks:
  - "crypt_create_lib"

- name: crypt_build_debug_and_test
  setup_task:
  - func: "f_expansions_write"
  - func: "apply compile expansions"
  - func: "set task expansion macros"
  - func: "f_expansions_write"
  teardown_task:
  - func: "attach scons logs"
  setup_group_can_fail_task: true
  setup_group:
  - command: manifest.load
  - func: "git get project and add git tag"
  - func: "set task expansion macros"
  - func: "f_expansions_write"
  - func: "kill processes"
  - func: "cleanup environment"
  - func: "set up venv"
  - func: "upload pip requirements"
  - func: "get buildnumber"
  - func: "f_expansions_write"
  - func: "set up win mount script"
  - func: "generate compile expansions"
  teardown_group:
  - func: "umount shared scons directory"
  max_hosts: 1
  tasks:
  - "crypt_create_debug_lib"
  - "crypt_install_tests"
  - "crypt_run_tests"
