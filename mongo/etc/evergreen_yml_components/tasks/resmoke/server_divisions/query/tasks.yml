# This file contains resmoke tasks that are owned by Query Server Team division

################################################
#                   Variable                   #
################################################
variables:
# Used when the tests it runs depend only on mongod, mongos, the jstestshell and the tools.
# THIS HAS COPIES IN
# - etc/evergreen_yml_components/tasks/resmoke/server_divisions/clusters_and_integrations/tasks.yml
# - etc/evergreen_yml_components/tasks/resmoke/server_divisions/durable_transactions_and_availability/tasks.yml
# - etc/evergreen_yml_components/tasks/resmoke/server_divisions/query/tasks.yml
# - etc/evergreen_yml_components/tasks/resmoke/non_server_teams/tasks.yml
# ANY MODIFICATIONS HERE SHOULD ALSO BE MADE IN THOSE FILES
- &task_template
  name: template
  depends_on:
  - name: archive_dist_test_debug
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --help
      resmoke_jobs_max: 0  # No cap on number of jobs.

# THIS HAS COPIES IN
# - etc/evergreen_yml_components/tasks/resmoke/server_divisions/clusters_and_integrations/tasks.yml
# - etc/evergreen_yml_components/tasks/resmoke/server_divisions/durable_transactions_and_availability/tasks.yml
# - etc/evergreen_yml_components/tasks/resmoke/server_divisions/query/tasks.yml
# - etc/evergreen_yml_components/tasks/resmoke/non_server_teams/tasks.yml
# ANY MODIFICATIONS HERE SHOULD ALSO BE MADE IN THOSE FILES
- &gen_task_template
  name: gen_task_template
  depends_on:
  - name: version_gen
    variant: generate-tasks-for-version
    # This is added because of EVG-18211.
    # Without this we are adding extra dependencies on evergreen and it is causing strain
    omit_generated_tasks: true
  - name: archive_dist_test_debug
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --help

# THIS HAS COPIES IN
# - etc/evergreen_yml_components/tasks/resmoke/server_divisions/clusters_and_integrations/tasks.yml
# - etc/evergreen_yml_components/tasks/resmoke/server_divisions/durable_transactions_and_availability/tasks.yml
# - etc/evergreen_yml_components/tasks/resmoke/server_divisions/query/tasks.yml
# - etc/evergreen_yml_components/tasks/resmoke/non_server_teams/tasks.yml
# ANY MODIFICATIONS HERE SHOULD ALSO BE MADE IN THOSE FILES
- &benchmark_template
  name: benchmark_template
  depends_on:
  - name: compile_upload_benchmarks
  commands:
  - func: "do benchmark setup"
  - func: "run tests"
    vars:
      resmoke_args: --help
      resmoke_jobs_max: 1
  - func: "send benchmark results"
#  - func: "analyze benchmark results"
    vars:
      suite: benchmark_suite

# THIS HAS COPIES IN
# - etc/evergreen_yml_components/tasks/resmoke/server_divisions/clusters_and_integrations/tasks.yml
# - etc/evergreen_yml_components/tasks/resmoke/server_divisions/durable_transactions_and_availability/tasks.yml
# - etc/evergreen_yml_components/tasks/resmoke/server_divisions/query/tasks.yml
# ANY MODIFICATIONS HERE SHOULD ALSO BE MADE IN THOSE FILES
- &jstestfuzz_config_vars
  is_jstestfuzz: true
  num_files: 15
  num_tasks: 5  # Upperbound by `max_sub_suites` specified through the variant with each task still running `num_files` files.
  # It is error prone to require each fuzzer-related Evergreen task to need to override the
  # resmoke_args variable. However, the resmoke_args variable must be defined as a string in the
  # task generation configuration to satisfy mongodb/mongo-task-generator. We therefore specify an
  # empty string for the variable to reflect there are no additional arguments provided to resmoke
  # by default for the fuzzer-related tasks.
  resmoke_args: ""
  resmoke_jobs_max: 1
  should_shuffle: false
  continue_on_failure: false
  # Terminate the function when there has been no output to stdout for 30 minutes. E.g. when something is stuck in an infinite loop.
  # resmoke.py writes the test output to logkeeper and only writes to stdout when starting the next test.
  # resmoke.py not producing output on stdout means that the test is still running and presumably not going to finish.
  # Note that timeout_secs is different from exec_timeout_secs, which applies to a task and times out regardless of whether output has been written to stdout.
  timeout_secs: 1800

# Used for tests that invoke 'resmoke.py --suites=jstestfuzz*'.
# THIS HAS COPIES IN
# - etc/evergreen_yml_components/tasks/resmoke/server_divisions/clusters_and_integrations/tasks.yml
# - etc/evergreen_yml_components/tasks/resmoke/server_divisions/durable_transactions_and_availability/tasks.yml
# - etc/evergreen_yml_components/tasks/resmoke/server_divisions/query/tasks.yml
# ANY MODIFICATIONS HERE SHOULD ALSO BE MADE IN THOSE FILES
- &jstestfuzz_template
  name: jstestfuzz_template
  exec_timeout_secs: 14400 # Time out the task if it runs for more than 4 hours.
  depends_on:
  - name: version_gen
    variant: generate-tasks-for-version
    # This is added because of EVG-18211.
    # Without this we are adding extra dependencies on evergreen and it is causing strain
    omit_generated_tasks: true
  - archive_dist_test_debug
  commands:
  - func: "generate resmoke tasks"


################################################
#                    Tasks                     #
################################################
tasks:

################################################
#            Query Execution tasks             #
################################################

- <<: *task_template
  name: aggregation
  tags: ["assigned_to_jira_team_server_query_execution", "aggregation", "common"]
  commands:
  - func: "do setup"
  - func: "run tests"

- <<: *task_template
  name: aggregation_auth
  tags: ["assigned_to_jira_team_server_query_execution", "aggregation", "auth", "common"]
  depends_on:
  - name: aggregation
  commands:
  - func: "do setup"
  - func: "run tests"

## Standalone generational fuzzer for multiversion aggregation expressions ##
- <<: *jstestfuzz_template
  name: aggregation_expression_multiversion_fuzzer_gen
  tags: ["assigned_to_jira_team_server_query_execution", "aggfuzzer", "multiversion", "require_npm", "random_name"]
  commands:
  - func: "initialize multiversion tasks"
    vars:
      aggregation_expression_multiversion_fuzzer_last_lts: last_lts
      aggregation_expression_multiversion_fuzzer_last_continuous: last_continuous
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 20
      num_tasks: 20
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      npm_command: agg-expr-fuzzer
      run_no_feature_flag_tests: "true"

- <<: *task_template
  name: aggregation_facet_unwind_passthrough
  tags: ["assigned_to_jira_team_server_query_execution", "aggregation", "unwind"]
  depends_on:
  - name: aggregation
  commands:
  - func: "do setup"
  - func: "run tests"

- <<: *task_template
  name: aggregation_mongos_passthrough
  tags: ["assigned_to_jira_team_server_query_execution", "aggregation", "no_async"]
  depends_on:
  - name: aggregation
  commands:
  - func: "do setup"
  - func: "run tests"

## Standalone generational fuzzer for multiversion aggregation pipelines ##
- <<: *jstestfuzz_template
  name: aggregation_multiversion_fuzzer_gen
  tags: ["assigned_to_jira_team_server_query_execution", "aggfuzzer", "common", "multiversion", "require_npm", "random_name", "future_git_tag_incompatible"]
  commands:
  - func: "initialize multiversion tasks"
    vars:
      aggregation_multiversion_fuzzer_last_lts: last_lts
      aggregation_multiversion_fuzzer_last_continuous: last_continuous
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 20
      num_tasks: 20
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      npm_command: agg-fuzzer
      run_no_feature_flag_tests: "true"

- <<: *task_template
  name: aggregation_one_shard_sharded_collections
  tags: ["assigned_to_jira_team_server_query_execution", "aggregation", "no_async", "sharded"]
  depends_on:
  - name: aggregation
  commands:
  - func: "do setup"
  - func: "run tests"

- <<: *task_template
  name: aggregation_read_concern_majority_passthrough
  tags: ["assigned_to_jira_team_server_query_execution", "aggregation", "read_write_concern", "no_debug_mode"]
  depends_on:
  - name: aggregation
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_jobs_factor: 0.5

- <<: *gen_task_template
  name: aggregation_secondary_reads_gen
  tags: ["assigned_to_jira_team_server_query_execution", "aggregation", "secondary_reads"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_jobs_max: 1

- <<: *task_template
  name: aggregation_sharded_collections_causally_consistent_passthrough
  tags: ["assigned_to_jira_team_server_query_execution", "aggregation", "secondary_reads", "sharded"]
  depends_on:
  - name: aggregation
  commands:
  - func: "do setup"
  - func: "run tests"

- <<: *task_template
  name: aggregation_sharded_collections_passthrough
  tags: ["assigned_to_jira_team_server_query_execution", "aggregation", "common", "sharded"]
  depends_on:
  - name: aggregation
  commands:
  - func: "do setup"
  - func: "run tests"

## Standalone fuzzer for checking timeseries optimizations correctness ##
- <<: *jstestfuzz_template
  name: aggregation_timeseries_fuzzer_gen
  tags: ["assigned_to_jira_team_server_query_execution", "aggfuzzer", "common", "timeseries", "require_npm", "random_name", "no_debug_mode"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      # We have seen some common scenarios where the generated pipelines take a while to run and can
      # hit some timeouts. We'll split 70000 pipelines across 70 files, compared to 80000 pipelines
      # across 20 files in the other generational agg fuzzers. This approach can be considered if we
      # see similar timeouts elsewhere. It is not well understood whether/how we could pass
      # 'numPipelines' as an argument in the yaml here, but it works as part of the
      # 'jstestfuzz_vars' argument string. If a future reader better understands this evergreen
      # integration, please update this comment and/or move numPipelines to a yaml arg here.
      num_files: 70
      num_tasks: 20
      jstestfuzz_vars: --diffTestingMode timeseries --numPipelines=1000
      npm_command: agg-fuzzer
      suite: generational_fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"

## Standalone fuzzer for checking wildcard index correctness ##
- <<: *jstestfuzz_template
  name: aggregation_wildcard_fuzzer_gen
  # TODO SERVER-85881: Re-enable wildcard fuzzers on debug builds by removing "no_debug_mode" tag.
  tags: ["assigned_to_jira_team_server_query_execution", "aggfuzzer", "common", "wildcard", "require_npm", "random_name", "no_debug_mode"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 20
      num_tasks: 20
      jstestfuzz_vars: --diffTestingMode wildcard
      npm_command: agg-fuzzer
      suite: generational_fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"

- <<: *benchmark_template
  name: benchmarks_expression
  tags: ["assigned_to_jira_team_server_query_execution", "benchmarks"]
  commands:
    - func: "do benchmark setup"
    - func: "run tests"
      vars:
        suite: benchmarks_expression
        exec_timeout_secs: 18000  # 5 hour timeout.
        resmoke_jobs_max: 1
    - func: "send benchmark results"

- <<: *benchmark_template
  name: benchmarks_expression_sbe
  tags: ["assigned_to_jira_team_server_query_execution", "benchmarks"]
  commands:
    - func: "do benchmark setup"
    - func: "run tests"
      vars:
        suite: benchmarks_expression_sbe
        exec_timeout_secs: 18000  # 5 hour timeout.
        resmoke_jobs_max: 1
    - func: "send benchmark results"

- <<: *task_template
  name: change_streams
  tags: ["assigned_to_jira_team_server_query_execution", "change_streams"]
  commands:
  - func: "do setup"
  - func: "run tests"

- <<: *gen_task_template
  name: change_streams_downgrade_gen
  tags: ["assigned_to_jira_team_server_query_execution", "multiversion_passthrough", "multiversion"]
  commands:
  - func: "initialize multiversion tasks"
    vars:
      change_streams_downgrade_last_continuous_new_old_old_new: last_continuous
      change_streams_downgrade_last_lts_new_old_old_new: last_lts
  - func: "generate resmoke tasks"
    vars:
      run_no_feature_flag_tests: "true"

- <<: *task_template
  name: change_streams_mongos_sessions_passthrough
  tags: ["assigned_to_jira_team_server_query_execution", "change_streams"]
  depends_on:
  - name: change_streams
  commands:
  - func: "do setup"
  - func: "run tests"

- <<: *task_template
  name: change_streams_multi_stmt_txn_mongos_passthrough
  tags: ["assigned_to_jira_team_server_query_execution", "change_streams"]
  depends_on:
  - name: change_streams
  commands:
  - func: "do setup"
  - func: "run tests"

- <<: *task_template
  name: change_streams_multi_stmt_txn_passthrough
  tags: ["assigned_to_jira_team_server_query_execution", "change_streams"]
  depends_on:
  - name: change_streams
  commands:
  - func: "do setup"
  - func: "run tests"

- <<: *task_template
  name: change_streams_multi_stmt_txn_sharded_collections_passthrough
  tags: ["assigned_to_jira_team_server_query_execution", "change_streams"]
  depends_on:
  - name: change_streams
  commands:
  - func: "do setup"
  - func: "run tests"

- <<: *task_template
  name: change_streams_multitenant_passthrough
  tags: ["assigned_to_jira_team_server_query_execution"]  # TODO SERVER-57866: Add the "change_streams" tag here.
  commands:
  - func: "do setup"
  - func: "run tests"

- <<: *task_template
  name: change_streams_multitenant_sharded_collections_passthrough
  tags: ["assigned_to_jira_team_server_query_execution"]  # TODO SERVER-57866: Add the "change_streams" tag here.
  commands:
  - func: "do setup"
  - func: "run tests"

- <<: *gen_task_template
  name: change_streams_multiversion_gen
  tags: ["assigned_to_jira_team_server_query_execution", "multiversion", "multiversion_passthrough"]
  commands:
  - func: "initialize multiversion tasks"
    vars:
      change_streams_last_continuous_new_new_old: last_continuous
      change_streams_last_continuous_new_old_new: last_continuous
      change_streams_last_continuous_old_new_new: last_continuous
      change_streams_last_lts_new_new_old: last_lts
      change_streams_last_lts_new_old_new: last_lts
      change_streams_last_lts_old_new_new: last_lts
  - func: "generate resmoke tasks"
    vars:
      suite: change_streams
      run_no_feature_flag_tests: "true"

- <<: *task_template
  name: change_streams_per_shard_cursor_passthrough
  tags: ["assigned_to_jira_team_server_query_execution", "change_streams"]
  commands:
  - func: "do setup"
  - func: "run tests"

- <<: *task_template
  name: change_streams_secondary_reads_sharded_collections
  tags: ["assigned_to_jira_team_server_query_execution", "change_streams", "secondary_reads"]
  depends_on:
  - name: change_streams
  commands:
  - func: "do setup"
  - func: "run tests"

- <<: *gen_task_template
  name: change_streams_sharded_collections_multiversion_gen
  tags: ["assigned_to_jira_team_server_query_execution", "multiversion_passthrough", "multiversion"]
  commands:
  - func: "initialize multiversion tasks"
    vars:
      change_streams_sharded_collections_passthrough_last_continuous_new_old_old_new: last_continuous
      change_streams_sharded_collections_passthrough_last_lts_new_old_old_new: last_lts
  - func: "generate resmoke tasks"
    vars:
      suite: change_streams_sharded_collections_passthrough
      run_no_feature_flag_tests: "true"

- <<: *task_template
  name: change_streams_whole_cluster_passthrough
  tags: ["assigned_to_jira_team_server_query_execution", "change_streams"]
  depends_on:
  - name: change_streams
  commands:
  - func: "do setup"
  - func: "run tests"

- <<: *task_template
  name: change_streams_whole_cluster_secondary_reads_sharded_collections
  tags: ["assigned_to_jira_team_server_query_execution", "change_streams", "secondary_reads"]
  depends_on:
  - name: change_streams_secondary_reads_sharded_collections
  commands:
  - func: "do setup"
  - func: "run tests"

- <<: *task_template
  name: change_streams_whole_db_passthrough
  tags: ["assigned_to_jira_team_server_query_execution", "change_streams"]
  depends_on:
  - name: change_streams
  commands:
  - func: "do setup"
  - func: "run tests"

- <<: *task_template
  name: change_streams_whole_db_secondary_reads_sharded_collections
  tags: ["assigned_to_jira_team_server_query_execution", "change_streams", "secondary_reads"]
  depends_on:
  - name: change_streams_secondary_reads_sharded_collections
  commands:
  - func: "do setup"
  - func: "run tests"

- <<: *gen_task_template
  name: concurrency_compute_mode_gen
  tags: ["assigned_to_jira_team_server_query_execution", "concurrency", "no_passthrough", "compute_mode", "no_debug_mode"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_gen
  tags: ["assigned_to_jira_team_server_query_execution", "concurrency", "common"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_jobs_max: 1

- <<: *task_template
  name: cursor_hints_to_query_settings_replset_passthrough
  tags: ["assigned_to_jira_team_server_query_execution"]
  commands:
  - func: "do setup"
  - func: "run tests"

- <<: *task_template
  name: cursor_hints_to_query_settings_sharded_collections_passthrough
  tags: ["assigned_to_jira_team_server_query_execution"]
  commands:
  - func: "do setup"
  - func: "run tests"

- <<: *task_template
  name: cursor_hints_to_query_settings_unsharded_collections_passthrough
  tags: ["assigned_to_jira_team_server_query_execution"]
  commands:
  - func: "do setup"
  - func: "run tests"

- <<: *task_template
  name: index_filters_to_query_settings
  tags: ["assigned_to_jira_team_server_query_execution", "sbe_only"]
  commands:
  - func: "do setup"
  - func: "run tests"

- <<: *task_template
  name: jsCore
  tags: ["assigned_to_jira_team_server_query_execution", "jscore", "common"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      suite: core

## jstestfuzz ##
- <<: *jstestfuzz_template
  name: jstestfuzz_gen
  tags: ["assigned_to_jira_team_server_query_execution", "jstestfuzz", "common", "require_npm", "random_name"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      npm_command: jstestfuzz

- <<: *gen_task_template
  name: parallel_gen
  tags: ["assigned_to_jira_team_server_query_execution", "misc_js", "parallel"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_jobs_max: 1

## jstestfuzz standalone fuzzer for checking find equivalence with and without plan cache ##
- <<: *jstestfuzz_template
  name: query_fuzzer_plan_cache_gen
  tags: ["assigned_to_jira_team_server_query_execution", "query_fuzzer", "require_npm", "random_name"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 20
      num_tasks: 20
      jstestfuzz_vars: --diffTestingMode plan_cache
      npm_command: query-fuzzer
      suite: generational_fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"

## jstestfuzz sharded fuzzer for checking find and aggregate equivalence ##
- <<: *jstestfuzz_template
  name: query_fuzzer_sharded_gen
  tags: ["assigned_to_jira_team_server_query_execution", "query_fuzzer", "require_npm", "random_name"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 20
      num_tasks: 20
      jstestfuzz_vars: --diffTestingMode sharded
      npm_command: query-fuzzer
      suite: generational_fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"

## jstestfuzz standalone fuzzer for checking find and aggregate equivalence ##
- <<: *jstestfuzz_template
  name: query_fuzzer_standalone_gen
  tags: ["assigned_to_jira_team_server_query_execution", "query_fuzzer", "require_npm", "random_name"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 20
      num_tasks: 20
      jstestfuzz_vars: --diffTestingMode standalone
      npm_command: query-fuzzer
      suite: generational_fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"

- <<: *task_template
  name: search
  tags: ["assigned_to_jira_team_server_query_execution"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_jobs_max: 1

- <<: *task_template
  name: search_auth
  tags: ["assigned_to_jira_team_server_query_execution"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_jobs_max: 1

- <<: *task_template
  name: search_ssl
  tags: ["assigned_to_jira_team_server_query_execution"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: sharding_api_strict_passthrough_gen
  tags: ["assigned_to_jira_team_server_query_execution", "sharding"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"

## jstestfuzz standalone update generational fuzzer ##
- <<: *jstestfuzz_template
  name: update_fuzzer_gen
  tags: ["assigned_to_jira_team_server_query_execution", "updatefuzzer", "require_npm", "random_name", "multiversion"]
  commands:
  - func: "initialize multiversion tasks"
    vars:
      update_fuzzer_last_lts: last_lts
      update_fuzzer_last_continuous: last_continuous
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 20
      num_tasks: 20
      jstestfuzz_vars: --useEsModules
      npm_command: update-fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      run_no_feature_flag_tests: "true"

## jstestfuzz replication update generational fuzzer ##
- <<: *jstestfuzz_template
  name: update_fuzzer_replication_gen
  tags: ["assigned_to_jira_team_server_query_execution", "updatefuzzer", "require_npm", "random_name", "multiversion", "no_debug_mode"]
  commands:
  - func: "initialize multiversion tasks"
    vars:
      update_fuzzer_replication_last_lts: last_lts
      update_fuzzer_replication_last_continuous: last_continuous
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 20
      num_tasks: 20
      jstestfuzz_vars: --useEsModules
      npm_command: update-fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      run_no_feature_flag_tests: "true"

## jstestfuzz standalone update time-series generational fuzzer ##
# TODO(SERVER-86317): Disabled for now due to AlwaysUseCompressed project.
# - <<: *jstestfuzz_template
#   name: update_timeseries_fuzzer_gen
#   tags: ["assigned_to_jira_team_server_query_execution", "updatefuzzer", "require_npm", "random_name", "no_debug_mode"]
#   commands:
#   - func: "generate resmoke tasks"
#     vars:
#       <<: *jstestfuzz_config_vars
#       num_files: 20
#       num_tasks: 20
#       jstestfuzz_vars: --diffTestingMode timeseries --useEsModules
#       npm_command: update-fuzzer
#       suite: generational_fuzzer
#       resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"

################################################
#           Query Optimization tasks           #
################################################

## Standalone fuzzer for checking Bonsai optimizations correctness vs Classic ##
- <<: *jstestfuzz_template
  name: aggregation_bonsai_m2_vs_classic_fuzzer_gen
  tags: ["assigned_to_jira_team_server_query_optimization", "aggfuzzer", "common", "bonsai", "require_npm", "random_name", "no_debug_mode", "feature_flag_guarded", "cqf_only"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 20
      num_tasks: 20
      jstestfuzz_vars: --diffTestingMode bonsai_m2_vs_classic
      npm_command: agg-fuzzer
      suite: generational_fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"

## Standalone fuzzer for checking Bonsai optimizations correctness vs SBE stage-builders ##
- <<: *jstestfuzz_template
  name: aggregation_bonsai_m2_vs_sbe_stagebuilders_fuzzer_gen
  tags: ["assigned_to_jira_team_server_query_optimization", "aggfuzzer", "common", "bonsai", "require_npm", "random_name", "no_debug_mode", "feature_flag_guarded", "cqf_only"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 20
      num_tasks: 20
      jstestfuzz_vars: --diffTestingMode bonsai_m2_vs_sbe_stagebuilders
      npm_command: agg-fuzzer
      suite: generational_fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"

- <<: *task_template
  name: aggregation_disabled_optimization
  tags: ["assigned_to_jira_team_server_query_optimization", "aggregation", "common"]
  depends_on:
  - name: aggregation
  commands:
  - func: "do setup"
  - func: "run tests"

## Standalone generational fuzzer for checking optimized and unoptimized expression equivalence
- <<: *jstestfuzz_template
  name: aggregation_expression_optimization_fuzzer_gen
  tags: ["assigned_to_jira_team_server_query_optimization", "aggfuzzer", "require_npm", "random_name"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 20
      num_tasks: 20
      jstestfuzz_vars: --diffTestingMode optimization
      suite: generational_fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      npm_command: agg-expr-fuzzer

## Standalone generational fuzzer for checking optimized and unoptimized aggregation pipelines
- <<: *jstestfuzz_template
  name: aggregation_optimization_fuzzer_gen
  tags: ["assigned_to_jira_team_server_query_optimization", "aggfuzzer", "require_npm", "random_name", "optimization"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 20
      num_tasks: 20
      jstestfuzz_vars: --diffTestingMode optimization
      suite: generational_fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      npm_command: agg-fuzzer

- <<: *task_template
  name: aggregation_repeat_queries
  tags: ["assigned_to_jira_team_server_query_optimization"]
  depends_on:
  - name: aggregation
  commands:
  - func: "do setup"
  - func: "run tests"

- <<: *benchmark_template
  name: benchmarks_abt
  tags: ["assigned_to_jira_team_server_query_optimization", "benchmarks"]
  commands:
  - func: "do benchmark setup"
  - func: "run tests"
    vars:
      suites: benchmarks_abt
      exec_timeout_secs: 18000  # 5 hour timeout.
      resmoke_jobs_max: 1
  - func: "send benchmark results"

- <<: *benchmark_template
  name: benchmarks_abt_lowering
  tags: ["assigned_to_jira_team_server_query_optimization", "benchmarks"]
  commands:
  - func: "do benchmark setup"
  - func: "run tests"
    vars:
      suites: benchmarks_abt_lowering
      exec_timeout_secs: 18000  # 5 hour timeout.
      resmoke_jobs_max: 1
  - func: "send benchmark results"

- <<: *benchmark_template
  name: benchmarks_abt_path_lowering
  tags: ["assigned_to_jira_team_server_query_optimization", "benchmarks"]
  commands:
  - func: "do benchmark setup"
  - func: "run tests"
    vars:
      suites: benchmarks_abt_path_lowering
      exec_timeout_secs: 18000  # 5 hour timeout.
      resmoke_jobs_max: 1
  - func: "send benchmark results"

# Disabled under SERVER-64949.
# - <<: *benchmark_template
#   name: benchmarks_cst
#   tags: ["assigned_to_jira_team_server_query_optimization", "benchmarks"]
#   commands:
#   - func: "do benchmark setup"
#   - func: "run tests"
#     vars:
#       suite: benchmarks_cst
#       resmoke_jobs_max: 1
#   - func: "send benchmark results"
#   - func: "analyze benchmark results"

- <<: *task_template
  name: cst_jscore_passthrough
  tags: ["assigned_to_jira_team_server_query_optimization", "jscore"]
  commands:
  - func: "do setup"
  - func: "run tests"

## Standalone generational fuzzer for checking optimized and unoptimized change stream pipelines ##
- <<: *jstestfuzz_template
  name: change_stream_optimization_fuzzer_gen
  tags: ["assigned_to_jira_team_server_query_optimization", "change_stream_fuzzer", "require_npm", "random_name"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 20
      num_tasks: 20
      jstestfuzz_vars: --diffTestingMode optimization
      npm_command: change-stream-fuzzer
      suite: generational_fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"

- <<: *jstestfuzz_template
  name: change_stream_serverless_no_optimization_fuzzer_gen
  tags: ["assigned_to_jira_team_server_query_optimization", "change_stream_fuzzer", "require_npm", "random_name"]
  commands:
    - func: "generate resmoke tasks"
      vars:
        <<: *jstestfuzz_config_vars
        num_files: 20
        num_tasks: 20
        jstestfuzz_vars: --diffTestingMode serverlessNoOptimization
        npm_command: change-stream-fuzzer
        suite: generational_fuzzer
        resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"

- <<: *jstestfuzz_template
  name: change_stream_serverless_fuzzer_gen
  tags: ["assigned_to_jira_team_server_query_optimization", "change_stream_fuzzer", "require_npm", "random_name"]
  commands:
    - func: "generate resmoke tasks"
      vars:
        <<: *jstestfuzz_config_vars
        num_files: 20
        num_tasks: 20
        jstestfuzz_vars: --diffTestingMode serverless
        npm_command: change-stream-fuzzer
        suite: generational_fuzzer
        resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"

- <<: *task_template
  name: cqf
  tags: ["assigned_to_jira_team_server_query_optimization", cqf]
  commands:
  - func: "do setup"
  - func: "run tests"

- <<: *task_template
  name: cqf_disabled_pipeline_opt
  tags: ["assigned_to_jira_team_server_query_optimization", cqf]
  commands:
  - func: "do setup"
  - func: "run tests"

- <<: *task_template
  name: cqf_experimental_aggregation_passthrough
  tags: ["assigned_to_jira_team_server_query_optimization", cqf]
  commands:
  - func: "do setup"
  - func: "run tests"

- <<: *task_template
  name: cqf_experimental_jscore_passthrough
  tags: ["assigned_to_jira_team_server_query_optimization", cqf]
  commands:
  - func: "do setup"
  - func: "run tests"

- <<: *gen_task_template
  name: cqf_experimental_no_passthrough_gen
  tags: ["assigned_to_jira_team_server_query_optimization", "cqf"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: cqf_experimental_no_passthrough
      use_large_distro: "true"

- <<: *gen_task_template
  name: cqf_experimental_sharded_collections_jscore_passthrough_gen
  tags: ["assigned_to_jira_team_server_query_optimization", cqf]
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: cqf_experimental_sharded_collections_jscore_passthrough
      use_large_distro: "true"

- <<: *gen_task_template
  name: cqf_experimental_sharding_passthrough_gen
  tags: ["assigned_to_jira_team_server_query_optimization", cqf]
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: cqf_experimental_sharding_passthrough
      use_large_distro: "true"

- <<: *task_template
  name: cqf_parallel
  tags: ["assigned_to_jira_team_server_query_optimization", cqf]
  commands:
  - func: "do setup"
  - func: "run tests"

- <<: *task_template
  name: jsCore_wildcard_indexes
  depends_on:
  - name: jsCore
  tags: ["assigned_to_jira_team_server_query_optimization", "jscore"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      suite: core_wildcard_indexes

- <<: *task_template
  name: json_schema
  tags: ["assigned_to_jira_team_server_query_optimization"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_jobs_max: 1

## Standalone fuzzer comparing find query results of Bonsai optimizations vs Classic ##
- <<: *jstestfuzz_template
  name: query_fuzzer_bonsai_m2_vs_classic_gen
  tags: ["assigned_to_jira_team_server_query_optimization", "query_fuzzer", "require_npm", "random_name", "feature_flag_guarded", "cqf_only"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 20
      num_tasks: 20
      jstestfuzz_vars: --diffTestingMode bonsai_m2_vs_classic
      npm_command: query-fuzzer
      suite: generational_fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"

## Standalone fuzzer comparing find query results of Bonsai optimizations vs SBE stage-builders ##
- <<: *jstestfuzz_template
  name: query_fuzzer_bonsai_m2_vs_sbe_stagebuilders_gen
  tags: ["assigned_to_jira_team_server_query_optimization", "query_fuzzer", "require_npm", "random_name", "feature_flag_guarded", "cqf_only"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 20
      num_tasks: 20
      jstestfuzz_vars: --diffTestingMode bonsai_m2_vs_sbe_stagebuilders
      npm_command: query-fuzzer
      suite: generational_fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"

- <<: *task_template
  name: query_golden_classic
  tags: ["assigned_to_jira_team_server_query_optimization"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      suite: query_golden_classic

- <<: *task_template
  name: query_golden_cqf
  tags: ["assigned_to_jira_team_server_query_optimization", cqf]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      suite: query_golden_cqf

################################################
#           Query Integration tasks            #
################################################

- <<: *task_template
  name: aggregation_column_store_index_passthrough
  # TODO SERVER-75026 Remove the 'feature_flag_guarded' tag and ensure this suite is run on all
  # variants.
  tags: ["assigned_to_jira_team_server_query_integration", "aggregation", "sbe_only", "feature_flag_guarded"]
  depends_on:
  - name: aggregation
  commands:
  - func: "do setup"
  - func: "run tests"

# Disabled under SERVER-81088
# ## Standalone fuzzer for checking columnstore index correctness ##
# - <<: *jstestfuzz_template
#   name: aggregation_columnstore_fuzzer_gen
#   tags: ["assigned_to_jira_team_server_query_integration", "aggfuzzer", "common", "columnstore", "require_npm", "random_name", "sbe_only", "feature_flag_guarded"]
#   commands:
#   - func: "generate resmoke tasks"
#     vars:
#       <<: *jstestfuzz_config_vars
#       num_files: 20
#       num_tasks: 20
#       jstestfuzz_vars: --diffTestingMode columnstore
#       npm_command: agg-fuzzer
#       suite: generational_fuzzer
#       resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"

- <<: *benchmark_template
  name: benchmarks_query
  tags: ["assigned_to_jira_team_server_query_integration", "benchmarks"]
  commands:
  - func: "do benchmark setup"
  - func: "run tests"
    vars:
      suite: benchmarks_query
      resmoke_jobs_max: 1
  - func: "send benchmark results"

- <<: *task_template
  name: jsCore_column_store_indexes
  # TODO SERVER-75026 Remove the 'feature_flag_guarded' tag and ensure this suite is run on all
  # variants.
  depends_on:
  - name: jsCore
  tags: ["assigned_to_jira_team_server_query_integration", "jscore", "sbe_only", "feature_flag_guarded"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      suite: core_column_store_indexes

- <<: *task_template
  name: query_stats_aggregation_passthrough
  tags: ["assigned_to_jira_team_server_query_integration"]
  commands:
  - func: "do setup"
  - func: "run tests"

- <<: *task_template
  name: query_stats_mongos_aggregation_passthrough
  tags: ["assigned_to_jira_team_server_query_integration"]
  commands:
  - func: "do setup"
  - func: "run tests"

- <<: *task_template
  name: query_stats_mongos_passthrough
  tags: ["assigned_to_jira_team_server_query_integration"]
  commands:
  - func: "do setup"
  - func: "run tests"

- <<: *task_template
  name: query_stats_passthrough
  tags: ["assigned_to_jira_team_server_query_integration"]
  commands:
  - func: "do setup"
  - func: "run tests"

- <<: *task_template
  name: vector_search
  tags: ["assigned_to_jira_team_server_query_integration"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_jobs_max: 1

- <<: *task_template
  name: vector_search_auth
  tags: ["assigned_to_jira_team_server_query_integration"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_jobs_max: 1

- <<: *task_template
  name: vector_search_ssl
  tags: ["assigned_to_jira_team_server_query_integration"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_jobs_max: 1
