# Windows build variants for testing development environments
#
# After the branching variants in this file
# should NOT run on a new rapid release (v7.1, v7.2 etc.)
# and LTS release (v7.0, v6.0 etc.) branch projects

variables:
  # THIS HAS COPIES IN:
  # - etc/evergreen_yml_components/variants/windows/test_dev_master_branch_only.yml
  # - etc/evergreen_yml_components/variants/windows/test_dev.yml
  # ANY MODIFICATIONS HERE SHOULD ALSO BE MADE IN THOSE FILES
  - &windows_compile_variant_dependency
    depends_on:
      - name: archive_dist_test_debug
        variant: &windows_compile_variant_name windows-compile-required
      - name: version_gen
        variant: generate-tasks-for-version
        # This is added because of EVG-18211.
        # Without this we are adding extra dependencies on evergreen and it is causing strain
        omit_generated_tasks: true
    # - name: generate_buildid_to_debug_symbols_mapping
    #   variant: windows-compile-required

  # THIS HAS COPIES IN:
  # - etc/evergreen_yml_components/variants/windows/test_dev_master_branch_only.yml
  # - etc/evergreen_yml_components/variants/windows/test_dev.yml
  # ANY MODIFICATIONS HERE SHOULD ALSO BE MADE IN THOSE FILES
  - &windows_expansions
    compile_variant: *windows_compile_variant_name
    burn_in_tests_build_variant: enterprise-windows-all-feature-flags-required
    exe: ".exe"
    content_type: application/zip
    python: "/cygdrive/c/python/python310/python.exe"
    ext: zip
    multiversion_platform: windows
    multiversion_edition: enterprise
    jstestfuzz_num_generated_files: 35
    target_resmoke_time: 20
    max_sub_suites: 5
    large_distro_name: windows-vsCurrent-large
    push_path: windows
    push_bucket: downloads.10gen.com
    push_name: windows
    push_arch: x86_64-enterprise
    test_flags: --excludeWithAnyTags=incompatible_with_windows_tls
    external_auth_jobs_max: 1

buildvariants:
  # Note that this task is currently optional;
  # This will eventually become suggested, then required.
  - name: &windows-bazel-compile windows-bazel-compile
    display_name: "Windows Enterprise Bazel Compile"
    tags: ["bazel_check"]
    cron: "0 4 * * *" # From the ${project_nightly_cron} parameter.
    run_on:
      - windows-vsCurrent-xlarge
    stepback: false
    expansions:
      exe: ".exe"
      ext: zip
      content_type: application/zip
      compile_flags: >-
        --ssl
        MONGO_DISTMOD=windows
        CPPPATH="c:/sasl/include"
        LIBPATH="c:/sasl/lib"
        -j$(bc <<< "$(grep -c '^processor' /proc/cpuinfo) / 1.8")
        --win-version-min=win10
      python: "/cygdrive/c/python/python310/python.exe"
      compile_variant: *windows-bazel-compile
    tasks:
      - name: compile_bazel_windows_TG
      - name: compile_bazel_ninja_TG

  - name: &windows-dev-compile-suggested windows-dev-compile-suggested
    display_name: "* Windows Enterprise Dev Compile"
    tags: ["suggested"]
    run_on:
      - windows-vsCurrent-xlarge
    expansions:
      exe: ".exe"
      ext: zip
      content_type: application/zip
      compile_flags: >-
        CPPPATH="c:/sasl/include"
        LIBPATH="c:/sasl/lib"
      num_scons_link_jobs_available: 0.2
      python: "/cygdrive/c/python/python310/python.exe"
      scons_cache_scope: shared
      compile_variant: *windows-dev-compile-suggested
    tasks:
      - name: scons_compile_smoke_test_TG
      - name: ninja_compile_smoke_test_TG

  ### QO & QE Patch-Specific Build Variants ###
  - name: &windows-compile-query-patch-only windows-compile-query-patch-only
    display_name: "~ Windows Enterprise Compile Query Patch Only"
    tags: []
    cron: "0 4 * * 0" # From the ${project_weekly_cron} parameter # This is a patch-only variant but we run on mainline to pick up task history.
    run_on:
      - windows-vsCurrent-small
    expansions:
      additional_package_targets: >-
        archive-mongocryptd
        archive-mongocryptd-debug
        msi
      exe: ".exe"
      content_type: application/zip
      compile_flags: >-
        --ssl
        MONGO_DISTMOD=windows
        CPPPATH="c:/sasl/include"
        LIBPATH="c:/sasl/lib"
        -j$(( $(grep -c ^processor /proc/cpuinfo) / 2 ))
        --win-version-min=win10
      num_scons_link_jobs_available: 0.5
      python: "/cygdrive/c/python/python310/python.exe"
      ext: zip
      scons_cache_scope: shared
      multiversion_platform: windows
      multiversion_edition: enterprise
      jstestfuzz_num_generated_files: 35
      large_distro_name: windows-vsCurrent-large
      test_flags: --excludeWithAnyTags=incompatible_with_windows_tls
      external_auth_jobs_max: 1
      compile_variant: *windows-compile-query-patch-only
    tasks:
      - name: compile_dist_test_TG
        distros:
          - windows-vsCurrent-xlarge

  - name: &enterprise-windows-benchmarks enterprise-windows-benchmarks
    display_name: "* Enterprise Windows (Benchmarks)"
    tags: ["suggested"]
    cron: "0 4 * * *" # From the ${project_nightly_cron} parameter.
    run_on:
      - windows-vsCurrent-large # To accommodate OOD issues noted in BF-31698
    expansions:
      additional_package_targets: >-
        archive-mongocryptd
        archive-mongocryptd-debug
        msi
      exe: ".exe"
      content_type: application/zip
      compile_flags: >-
        --ssl
        MONGO_DISTMOD=windows
        CPPPATH="c:/sasl/include"
        LIBPATH="c:/sasl/lib"
        -j$(( $(grep -c ^processor /proc/cpuinfo) / 2 ))
        --win-version-min=win10
      num_scons_link_jobs_available: 0.5
      python: "/cygdrive/c/python/python310/python.exe"
      ext: zip
      scons_cache_scope: shared
      multiversion_platform: windows
      multiversion_edition: enterprise
      jstestfuzz_num_generated_files: 35
      large_distro_name: windows-vsCurrent-large
      test_flags: --excludeWithAnyTags=incompatible_with_windows_tls
      external_auth_jobs_max: 1
      compile_variant: *enterprise-windows-benchmarks
    tasks:
      - name: compile_upload_benchmarks_TG
        distros:
          - windows-vsCurrent-xlarge
      - name: .benchmarks !benchmarks_orphaned_first_half !benchmarks_orphaned_second_half

  ### Security Patch-Specific Build Variants ###
  - <<: *windows_compile_variant_dependency
    name: &windows-compile-security-patch-only windows-compile-security-patch-only
    display_name: "~ Windows Security Patch Only"
    tags: []
    cron: "0 4 * * 0" # From the ${project_weekly_cron} parameter # This is a patch-only variant but we run on mainline to pick up task history.
    run_on:
      - windows-vsCurrent-small
    expansions:
      <<: *windows_expansions
      exe: ".exe"
    tasks:
      - name: .encrypt .patch_build
      - name: .sasl .patch_build
      - name: external_auth_aws
      - name: external_auth_oidc
