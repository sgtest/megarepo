# Miscellaneous build variants that should run on master, rapid release (7.1, 7.2 etc.)
# and LTS release (7.0, 6.0 etc.) branch projects

buildvariants:
- name: run-all-affected-jstests
  display_name: "! Run All Affected JStests"
  patch_only: true
  run_on:
  - rhel80-medium
  expansions:
    large_distro_name: rhel80-large
    core_analyzer_distro_name: rhel80-xlarge
    burn_in_tag_include_all_required_and_suggested: true
    burn_in_tag_exclude_build_variants: >-
      macos-debug-suggested
      enterprise-rhel-80-64-bit-dynamic-embedded-router
    burn_in_tag_include_build_variants: >-
      enterprise-rhel-80-64-bit-inmem
      enterprise-rhel-80-64-bit-multiversion
    burn_in_tag_compile_task_dependency: archive_dist_test_debug
    compile_variant: &amazon_linux2_arm64_dynamic_compile_variant_name amazon-linux2-arm64-dynamic-compile
  depends_on:
  - name: archive_dist_test_debug
    variant: *amazon_linux2_arm64_dynamic_compile_variant_name
  - name: version_gen
    variant: generate-tasks-for-version
    # This is added because of EVG-18211.
    # Without this we are adding extra dependencies on evergreen and it is causing strain
    omit_generated_tasks: true
  - name: version_burn_in_gen
    variant: generate-tasks-for-version
    # This is added because of EVG-18211.
    # Without this we are adding extra dependencies on evergreen and it is causing strain
    omit_generated_tasks: true
  tasks:
  - name: burn_in_tags_gen

- name: &copybara-sync-between-repos copybara-sync-between-repos
  display_name: "* Copybara Sync Between Repos"
  activate: true
  run_on:
  - ubuntu2204-small
  stepback: false
  tasks:
  - name: sync_repo_with_copybara
    priority: 50

- name: enterprise-windows-ninja
  display_name: "Ninja Build: Enterprise Windows"
  cron: "0 4 * * *" # From the ${project_nightly_cron} parameter.
  expansions:
    compile_flags: >-
      --ssl
      MONGO_DISTMOD=windows
      CPPPATH="c:/sasl/include c:/snmp/include"
      LIBPATH="c:/sasl/lib c:/snmp/lib"
      -j$(bc <<< "$(grep -c '^processor' /proc/cpuinfo) / 1.5")
      --win-version-min=win10
    compile_variant: enterprise-windows-ninja
  tasks:
  - name: compile_ninja_next_TG
    distros:
    - windows-vsCurrent-xlarge
  - name: compile_ninja_TG
    distros:
    - windows-vsCurrent-xlarge

- name: macos-enterprise-ninja
  display_name: "Ninja Build: macOS Enterprise"
  cron: "0 4 * * *" # From the ${project_nightly_cron} parameter.
  run_on:
  - macos-1100
  expansions:
    compile_env: DEVELOPER_DIR=/Applications/Xcode13.app
    compile_flags: --ssl -j$(sysctl -n hw.logicalcpu) --libc++ --variables-files=etc/scons/xcode_macosx.vars
    compile_variant: macos-enterprise-ninja
  tasks:
  - name: compile_ninja_next_TG
  - name: compile_ninja_TG

- name: macos-ninja-build-profiles
  display_name: "Ninja Build Profiles: macOS"
  cron: "0 4 * * *" # From the ${project_nightly_cron} parameter.
  run_on:
  - macos-1100
  expansions:
    compile_env: DEVELOPER_DIR=/Applications/Xcode13.app
    compile_flags: --ssl -j$(sysctl -n hw.logicalcpu) --libc++
  tasks:
  - name: compile_ninja_default_profile_TG
  - name: compile_ninja_opt_profile_TG
  - name: compile_ninja_fast_profile_TG
  - name: compile_ninja_compiledb_profile_TG

- name: macos-arm-ninja-build-profiles
  display_name: "Ninja Build Profiles: macOS ARM"
  cron: "0 4 * * *" # From the ${project_nightly_cron} parameter.
  run_on:
  - macos-1100-arm64
  expansions:
    compile_env: DEVELOPER_DIR=/Applications/Xcode13.app
    compile_flags: --ssl -j$(sysctl -n hw.logicalcpu) --libc++
  tasks:
  - name: compile_ninja_default_profile_TG
  - name: compile_ninja_opt_profile_TG
  - name: compile_ninja_fast_profile_TG
  - name: compile_ninja_compiledb_profile_TG

- name: windows-ninja-build-profiles
  display_name: "Ninja Build Profiles: Windows"
  cron: "0 4 * * *" # From the ${project_nightly_cron} parameter.
  expansions:
    compile_flags: >-
      --ssl
      MONGO_DISTMOD=windows
      CPPPATH="c:/sasl/include c:/snmp/include"
      -j$(bc <<< "$(grep -c '^processor' /proc/cpuinfo) / 1.5")
      LIBPATH="c:/sasl/lib c:/snmp/lib"
      --win-version-min=win10
  tasks:
  - name: compile_ninja_default_profile_TG
    distros:
    - windows-vsCurrent-xlarge
  - name: compile_ninja_opt_profile_TG
    distros:
    - windows-vsCurrent-xlarge
  - name: compile_ninja_fast_profile_TG
    distros:
    - windows-vsCurrent-xxlarge
  - name: compile_ninja_compiledb_profile_TG
    distros:
    - windows-vsCurrent-xxlarge

- name: ubuntu1804-ninja-build-profiles
  display_name: "Ninja Build Profiles: Ubuntu 18.04"
  cron: "0 4 * * *" # From the ${project_nightly_cron} parameter.
  run_on:
  - ubuntu1804-small
  stepback: false
  expansions:
    compile_flags: --ssl --ocsp-stapling=off MONGO_DISTMOD=ubuntu1804 -j$(grep -c ^processor /proc/cpuinfo)
    repo_edition: enterprise
    has_packages: false
    compile_variant: ubuntu1804-ninja-build-profiles
  tasks:
  - name: compile_ninja_default_profile_linux_TG
    distros:
    - ubuntu1804-xlarge
  - name: compile_ninja_opt_profile_TG
    distros:
    - ubuntu1804-xlarge
  - name: compile_ninja_san_profile_TG
    distros:
    - ubuntu1804-xlarge
  - name: compile_ninja_fast_profile_TG
    distros:
    - ubuntu1804-xlarge
  - name: compile_ninja_compiledb_profile_TG
    distros:
    - ubuntu1804-xlarge

- name: enterprise-rhel-80-64-bit-dynamic-ninja
  display_name: "Ninja Build: Enterprise RHEL 8.0"
  cron: "0 4 * * *" # From the ${project_nightly_cron} parameter.
  run_on:
  - rhel80-small
  expansions:
    compile_flags: >-
      --ssl
      MONGO_DISTMOD=rhel80
      -j$(grep -c ^processor /proc/cpuinfo)
      --variables-files=etc/scons/mongodbtoolchain_stable_gcc.vars
      --link-model=dynamic
    has_packages: false
  tasks:
  - name: compile_ninja_next_TG
    distros:
    - rhel80-xlarge
  - name: compile_ninja_TG
    distros:
    - rhel80-xlarge
