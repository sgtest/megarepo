load("//bazel:mongo_src_rules.bzl", "mongo_cc_library")

package(default_visibility = ["//visibility:public"])

# Used to restrict compilation flags to only be added when compiling arm64 on clang.
config_setting(
    name = "clang_arm64",
    constraint_values = [
        "@platforms//cpu:arm64",
    ],
    flag_values = {
        "//bazel/config:compiler_type": "clang",
    },
)

# Since we're explicitly passing "-x c" for compiling the c source files, we need to separate
# the assembly files into a separate build rule to prevent the compiler from treating them
# as c files.
mongo_cc_library(
    name="libunwind_asm",
    hdrs=glob(["**/*.h", "**/*.c"]),
    srcs=select({
        "@platforms//cpu:aarch64": [
            "dist/src/aarch64/getcontext.S",
        ],
        "@platforms//cpu:x86_64": [
            "dist/src/x86_64/getcontext.S",
            "dist/src/x86_64/setcontext.S",
        ],
        "@platforms//cpu:ppc": [],
        "@platforms//cpu:s390x": [
            "dist/src/s390x/getcontext.S",
            "dist/src/s390x/setcontext.S",
        ],
    }),
    copts=[
        "-Isrc/third_party/unwind/dist/src",
        "-Isrc/third_party/unwind/dist/include",
        "-fexceptions",
        "-Wno-unused-result",
        "-Wno-pointer-sign",
        "-Wno-incompatible-pointer-types",
        "-Wno-unused-variable",
    ] + select({
        "@platforms//cpu:aarch64": [
            "-Isrc/third_party/unwind/platform/linux_aarch64/build/include",
            "-Isrc/third_party/unwind/dist/include/tdep-aarch64",
        ],
        "@platforms//cpu:x86_64": [
            "-Isrc/third_party/unwind/platform/linux_x86_64/build/include",
            "-Isrc/third_party/unwind/dist/include/tdep-x86_64",
        ],
        "@platforms//cpu:ppc": [
            "-Isrc/third_party/unwind/platform/linux/ppc64le/build/include",
            "-Isrc/third_party/unwind/dist/include/tdep-ppc64le",
            "Wno-unused-value",
        ],
        "@platforms//cpu:s390x": [
            "-Isrc/third_party/unwind/platform/linux_s390x/build/include",
            "-Isrc/third_party/unwind/dist/include/tdep-s390x",
        ],
    }) + select({
        "@//bazel/config:compiler_type_clang": [
            "-Wno-header-guard",
        ],
        "@//bazel/config:compiler_type_gcc": ["-Wno-uninitialized"]
    }) + select({
        ":clang_arm64": [
            "-Wno-absolute-value"
        ],
        "//conditions:default": [],
    }),
    local_defines = [
        # Skip autoconf preprocessing.
        "HAVE_CONFIG_H",
        # Grant access to nonstandard gnu c functions, which the dist autoconf build script is also setting.
        "_GNU_SOURCE",
    ]
)

mongo_cc_library(
    name="unwind",
    hdrs=glob(["**/*.h", "**/*.c"]),
    deps=[":libunwind_asm"],
    srcs=[
        # Generated by a manual process:
        #     - Run "scripts/host_config.sh |tee host_config.out".
        #     - Gather .o dependencies of the libunwind.a target.
        #     - Some .o are from prereq libraries, they have .lax paths.
        #       Replace the `*.lax/$PREREQ/*.o` dependencies with the
        #       corresponding .o from that $PREREQ library.
        #     - Replace each .o with the source file (.c or .S) that generated it.
        #     - Ensure the the ${CC} arguments are preserved by SCons.
        #       Note you can skip NDEBUG defines as those should be inherited.
        "dist/src/dwarf/global.c",
        "dist/src/dwarf/Lexpr.c",
        "dist/src/dwarf/Lfde.c",
        "dist/src/dwarf/Lfind_proc_info-lsb.c",
        "dist/src/dwarf/Lfind_unwind_table.c",
        "dist/src/dwarf/Lparser.c",
        "dist/src/dwarf/Lpe.c",
        "dist/src/dl-iterate-phdr.c",
        "dist/src/elf64.c",
        "dist/src/mi/backtrace.c",
        "dist/src/mi/dyn-cancel.c",
        "dist/src/mi/dyn-info-list.c",
        "dist/src/mi/dyn-register.c",
        "dist/src/mi/flush_cache.c",
        "dist/src/mi/init.c",
        "dist/src/mi/Ldestroy_addr_space.c",
        "dist/src/mi/Ldyn-extract.c",
        "dist/src/mi/Lfind_dynamic_proc_info.c",
        "dist/src/mi/Lget_accessors.c",
        "dist/src/mi/Lget_fpreg.c",
        "dist/src/mi/Lget_proc_info_by_ip.c",
        "dist/src/mi/Lget_proc_name.c",
        "dist/src/mi/Lget_reg.c",
        "dist/src/mi/Lput_dynamic_unwind_info.c",
        "dist/src/mi/Lset_cache_size.c",
        "dist/src/mi/Lset_caching_policy.c",
        "dist/src/mi/Lset_fpreg.c",
        "dist/src/mi/Lset_reg.c",
        "dist/src/mi/mempool.c",
        "dist/src/mi/strerror.c",
    ] + 
    select({
        "@platforms//os:linux": ["dist/src/os-linux.c"]
    }) +
    select({
        "@platforms//cpu:aarch64": [
            "dist/src/aarch64/is_fpreg.c",
            "dist/src/aarch64/Lapply_reg_state.c",
            "dist/src/aarch64/Lcreate_addr_space.c",
            "dist/src/aarch64/Lget_proc_info.c",
            "dist/src/aarch64/Lget_save_loc.c",
            "dist/src/aarch64/Lglobal.c",
            "dist/src/aarch64/Linit.c",
            "dist/src/aarch64/Linit_local.c",
            "dist/src/aarch64/Linit_remote.c",
            "dist/src/aarch64/Lregs.c",
            "dist/src/aarch64/Lreg_states_iterate.c",
            "dist/src/aarch64/Lresume.c",
            "dist/src/aarch64/Lstep.c",
            "dist/src/aarch64/regname.c",
            "dist/src/aarch64/Lis_signal_frame.c",
            "dist/src/aarch64/Lstash_frame.c",
            "dist/src/aarch64/Ltrace.c",
        ],
        "@platforms//cpu:x86_64": [
            "dist/src/x86_64/is_fpreg.c",
            "dist/src/x86_64/Lapply_reg_state.c",
            "dist/src/x86_64/Lcreate_addr_space.c",
            "dist/src/x86_64/Lget_proc_info.c",
            "dist/src/x86_64/Lget_save_loc.c",
            "dist/src/x86_64/Lglobal.c",
            "dist/src/x86_64/Linit.c",
            "dist/src/x86_64/Linit_local.c",
            "dist/src/x86_64/Linit_remote.c",
            "dist/src/x86_64/Lregs.c",
            "dist/src/x86_64/Lreg_states_iterate.c",
            "dist/src/x86_64/Lresume.c",
            "dist/src/x86_64/Lstep.c",
            "dist/src/x86_64/regname.c",
            "dist/src/x86_64/Los-linux.c",
            'dist/src/x86_64/Lstash_frame.c',
            'dist/src/x86_64/Ltrace.c',
        ],
        "@platforms//cpu:ppc": [
            "dist/src/ppc64/is_fpreg.c",
            "dist/src/ppc64/Lapply_reg_state.c",
            "dist/src/ppc64/Lcreate_addr_space.c",
            "dist/src/ppc/Lget_proc_info.c",
            "dist/src/ppc/Lget_save_loc.c",
            "dist/src/ppc64/Lglobal.c",
            "dist/src/ppc64/Linit.c",
            "dist/src/ppc/Linit_local.c",
            "dist/src/ppc/Linit_remote.c",
            "dist/src/ppc64/Lregs.c",
            "dist/src/ppc64/Lreg_states_iterate.c",
            "dist/src/ppc64/Lresume.c",
            "dist/src/ppc64/Lstep.c",
            "dist/src/ppc64/regname.c",
            "dist/src/ppc64/get_func_addr.c",
            "dist/src/ppc/Lis_signal_frame.c",
        ],
        "@platforms//cpu:s390x": [
            "dist/src/s390x/is_fpreg.c",
            "dist/src/s390x/Lapply_reg_state.c",
            "dist/src/s390x/Lcreate_addr_space.c",
            "dist/src/s390x/Lget_proc_info.c",
            "dist/src/s390x/Lget_save_loc.c",
            "dist/src/s390x/Lglobal.c",
            "dist/src/s390x/Linit.c",
            "dist/src/s390x/Linit_local.c",
            "dist/src/s390x/Linit_remote.c",
            "dist/src/s390x/Lregs.c",
            "dist/src/s390x/Lreg_states_iterate.c",
            "dist/src/s390x/Lresume.c",
            "dist/src/s390x/Lstep.c",
            "dist/src/s390x/regname.c",
            "dist/src/s390x/Lis_signal_frame.c",
        ],
    }),
    
    copts=[
        "-Isrc/third_party/unwind/dist/src",
        "-Isrc/third_party/unwind/dist/include",
        "-fexceptions",
        "-Wno-unused-result",
        "-Wno-pointer-sign",
        "-Wno-incompatible-pointer-types",
        "-Wno-unused-variable",
        "-x c",
        "-std=c17"
    ] + select({
        "@platforms//cpu:aarch64": [
            "-Isrc/third_party/unwind/platform/linux_aarch64/build/include",
            "-Isrc/third_party/unwind/dist/include/tdep-aarch64",
        ],
        "@platforms//cpu:x86_64": [
            "-Isrc/third_party/unwind/platform/linux_x86_64/build/include",
            "-Isrc/third_party/unwind/dist/include/tdep-x86_64",
        ],
        "@platforms//cpu:ppc": [
            "-Isrc/third_party/unwind/platform/linux/ppc64le/build/include",
            "-Isrc/third_party/unwind/dist/include/tdep-ppc64le",
            "Wno-unused-value",
        ],
        "@platforms//cpu:s390x": [
            "-Isrc/third_party/unwind/platform/linux_s390x/build/include",
            "-Isrc/third_party/unwind/dist/include/tdep-s390x",
        ],
    }) + select({
        "@//bazel/config:compiler_type_clang": [
            "-Wno-header-guard",
        ],
        "@//bazel/config:compiler_type_gcc": ["-Wno-uninitialized"]
    }) + select({
        ":clang_arm64": [
            "-Wno-absolute-value"
        ],
        "//conditions:default": [],
    }),
    local_defines = [
        # Skip autoconf preprocessing.
        "HAVE_CONFIG_H",
        # Grant access to nonstandard gnu c functions, which the dist autoconf build script is also setting.
        "_GNU_SOURCE",
    ]
)
