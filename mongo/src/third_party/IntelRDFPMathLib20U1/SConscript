# -*- mode: python -*-

import sys

Import("env")
Import("get_option")

env = env.Clone()

# Define Intel decimal128 library build variables
cpp_defines = {
    'DECIMAL_CALL_BY_REFERENCE': '0',
    'DECIMAL_GLOBAL_ROUNDING': '0',
    'DECIMAL_GLOBAL_EXCEPTION_FLAGS': '0',
    'UNCHANGED_BINARY_STATUS_FLAGS': '0',
    'USE_COMPILER_F128_TYPE': '0',
    'USE_COMPILER_F80_TYPE': '0',
    'USE_NATIVE_QUAD_TYPE': '0',
}

libs = []


def removeIfPresent(lst, item):
    try:
        lst.remove(item)
    except ValueError:
        pass


# Set OS Defines
if env.TargetOSIs('darwin'):
    cpp_defines['LINUX'] = '1'
    cpp_defines['mach'] = '1'

if env.TargetOSIs('linux') or env.TargetOSIs('solaris'):
    cpp_defines['LINUX'] = '1'
    cpp_defines['linux'] = '1'
    libs.append('m')

if env.TargetOSIs('freebsd') or env.TargetOSIs('openbsd'):
    cpp_defines['LINUX'] = '1'
    cpp_defines['freebsd'] = '1'
    libs.append('m')

# Set Architecture Defines
processor = env['TARGET_ARCH']
# Using 32 bit
if processor == 'i386' or processor == 'emscripten':
    cpp_defines['IA32'] = '1'
    cpp_defines['ia32'] = '1'
elif processor == 'arm':
    cpp_defines['IA32'] = '1'
    cpp_defines['ia32'] = '1'
elif processor == "aarch64":
    cpp_defines['efi2'] = '1'
    cpp_defines['EFI2'] = '1'
# Using 64 bit little endian
elif processor == 'x86_64' or processor == 'ppc64le' or processor == 'riscv64':
    cpp_defines['efi2'] = '1'
    cpp_defines['EFI2'] = '1'
# Using 64 bit big endian
elif processor == 's390x':
    cpp_defines['s390x'] = '1'
    cpp_defines['BID_BIG_ENDIAN'] = '1'
else:
    assert False, "Unsupported architecture: " + processor

# Set Compiler Defines
if env.ToolchainIs('MSVC'):
    cpp_defines['cl'] = '1'
else:
    cpp_defines['gcc'] = '1'

env.Append(CPPDEFINES=cpp_defines)

if env.TargetOSIs('windows'):
    extra_defines = ['WINDOWS', 'WNT', 'winnt']
    env.Append(CPPDEFINES=extra_defines)
    # C4273: '...': inconsistent dll linkage
    env.Append(CCFLAGS=['/wd4273'])
    # C4477: incorrect scanf format string
    env.Append(CCFLAGS=['/wd4477'])

if env.ToolchainIs('msvc'):
    removeIfPresent(env['CCFLAGS'], '/W3')
else:
    env.Append(CCFLAGS='-w')

if env["BUILDERS"].get("Ninja", None) is not None:
    Return()

readtestEnv = env.Clone()

# Since the readtest program is fully C, smartlink was trying to link
# it with the C compiler driver. That is fine for dynamic builds, but
# in static builds falls afoul of
# https://github.com/SCons/scons/issues/3673 if the allocator library
# needs the C++ runtime.
if env["LINK"] == "$SMARTLINK" and get_option("link-model") != "dynamic":
    readtestEnv["LINK"] = "$CXX"

readtest = readtestEnv.Program(
    target='intel_decimal128_readtest',
    source=[
        'TESTS/readtest.c',
    ],
    LIBDEPS=[
        'intel_decimal128',
    ],
    LIBS=readtestEnv['LIBS'] + libs,
    AIB_COMPONENT="intel-test",
    AIB_COMPONENTS_EXTRA=[
        "unittests",
        "tests",
    ],
)

readtest_input = env.AutoInstall(
    target="$PREFIX_BINDIR",
    source=["TESTS/readtest.in"],
    AIB_ROLE="runtime",
    AIB_COMPONENT="intel-test",
    AIB_COMPONENTS_EXTRA=[
        "unittests",
        "tests",
    ],
)

env.Depends(readtest_input, readtest)

readtest_dict = {
    '@readtest_python_interpreter@': sys.executable.replace('\\', r'\\'),
    '@readtest_program@': readtest[0].name,
    '@readtest_input@': readtest_input[0].name,
}

readtest_wrapper = env.Substfile(
    target='intel_decimal128_readtest_wrapper.py',
    source=['intel_decimal128_readtest_wrapper.py.in'],
    SUBST_DICT=readtest_dict,
)
env.Depends(readtest_wrapper, readtest_input)

readtest_wrapper_install = env.AutoInstall(
    target="$PREFIX_BINDIR",
    source=readtest_wrapper,
    AIB_ROLE="runtime",
    AIB_COMPONENT="intel-test",
    AIB_COMPONENTS_EXTRA=[
        "unittests",
        "tests",
        "first-quarter-unittests",
    ],
)

if env.TargetOSIs('windows'):
    readtest_wrapper_bat = env.Substfile(
        target='intel_decimal128_readtest_wrapper.bat',
        source=['intel_decimal128_readtest_wrapper.bat.in'],
        SUBST_DICT=readtest_dict,
    )
    env.Depends(readtest_wrapper_bat, readtest_wrapper)

    readtest_wrapper_bat_install = env.AutoInstall(
        target="$PREFIX_BINDIR",
        source=readtest_wrapper_bat,
        AIB_ROLE="runtime",
        AIB_COMPONENT="intel-test",
        AIB_COMPONENTS_EXTRA=[
            "unittests",
            "tests",
            "first-quarter-unittests",
        ],
    )
    env.RegisterTest("$UNITTEST_LIST", readtest_wrapper_bat_install[0])

else:
    env.RegisterTest("$UNITTEST_LIST", readtest_wrapper_install[0])
    env.AddPostAction(readtest_wrapper[0], Chmod(readtest_wrapper[0], 'oug+x'))
