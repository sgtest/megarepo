# Copyright(C) 2022 - present MongoDB, Inc.
#
# This program is free software : you can redistribute it and / or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program.If not, see
# < http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library.You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein.If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so.If you do not wish to do so,
# delete this exception statement from your version.If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

# File containing feature flags for sharding features

global:
    cpp_namespace: "mongo"

feature_flags:
  featureFlagGlobalIndexesShardingCatalog:
    description: "Feature flag for enabling sharding catalog features for global indexes"
    cpp_varname: feature_flags::gGlobalIndexesShardingCatalog
    default: false
    shouldBeFCVGated: true
  featureFlagConcurrencyInChunkMigration:
    description: "Feature flag for enabling concurrency within a chunk migration"
    cpp_varname: feature_flags::gConcurrencyInChunkMigration
    default: true
    version: 6.3
    shouldBeFCVGated: true
  featureFlagCheckForDirectShardOperations:
    description: "Feature flag for checking for direct shard operations."
    cpp_varname: feature_flags::gCheckForDirectShardOperations
    default: true
    version: 7.0
    shouldBeFCVGated: true
  # TODO (SERVER-73632): Remove once 8.0 becomes last LTS.
  featureFlagEmbeddedRouter:
    description: "Feature flag to enable shard to double as router"
    cpp_varname: feature_flags::gEmbeddedRouter
    default: false
    shouldBeFCVGated: false
  # TODO (SERVER-87249): Remove after the internal router is enabled by default.
  featureFlagMultiserviceFTDCSchema:
    description: "Feature flag to enable the new format of the FTDC output files"
    cpp_varname: feature_flags::gMultiserviceFTDCSchema
    default: false
    shouldBeFCVGated: false
  # TODO SERVER-79064: Remove once 8.0 becomes last LTS.
  featureFlagAuthoritativeRefineCollectionShardKey:
    description: "Feature flag for enabling the authoritative version of the refine collection shard key."
    cpp_varname: feature_flags::gAuthoritativeRefineCollectionShardKey
    default: true
    version: 7.1
    shouldBeFCVGated: true
  # TODO (SERVER-87189): Remove once 9.0 becomes last LTS.
  featureFlagTrackUnshardedCollectionsUponCreation:
    description: "Feature flag for enabling the tracking of user unsharded collection on creation"
    cpp_varname: feature_flags::gTrackUnshardedCollectionsUponCreation
    default: false
    shouldBeFCVGated: true
  # TODO (SERVER-68132): Remove once 8.0 becomes last LTS.
  featureFlagClusterFsyncLock:
    description: "Feature flag to enable locking of a cluster through mongos"
    cpp_varname: feature_flags::gClusterFsyncLock
    default: true
    version: 7.1
    shouldBeFCVGated: true
  # TODO (SERVER-79304): Remove once 8.0 becomes last LTS.
  featureFlagAuthoritativeShardCollection:
    description: "Feature flag for enabling the authoritative version of the shardCollection DDL operation."
    cpp_varname: feature_flags::gAuthoritativeShardCollection
    default: false
    shouldBeFCVGated: true
  # TODO (SERVER-76436): Remove once 8.0 becomes last LTS.
  featureFlagBalanceUnshardedCollections:
    description: "Feature flag for enabling the balancing of user unsharded collections"
    cpp_varname: feature_flags::gBalanceUnshardedCollections
    default: false
    shouldBeFCVGated: true
  # TODO SERVER-81884: Remove once 8.0 becomes last LTS.
  featureFlagOneChunkPerShardEmptyCollectionWithHashedShardKey :
    description: "Feature flag to enable creation of one chunk per shard for empty collections with hashed shard key."
    cpp_varname: feature_flags::gOneChunkPerShardEmptyCollectionWithHashedShardKey
    default: true
    shouldBeFCVGated: true
    version: 7.2
  # TODO (SERVER-76291): Remove once 8.0 becomes last LTS.
  featureFlagUpdateOneWithIdWithoutShardKey:
    description: "Feature flag for updateOne and deleteOne with _id equality without shard key correctness during chunk migrations."
    cpp_varname: feature_flags::gUpdateOneWithIdWithoutShardKey
    default: false
    shouldBeFCVGated: true
  # TODO (SERVER-83264): Remove once 8.0 becomes last LTS.
  featureFlagBalancerSettingsSchema:
    description: "Feature flag for updating the config settings schema to enforce balancer settings"
    cpp_varname: feature_flags::gBalancerSettingsSchema
    default: true
    version: 7.3
    shouldBeFCVGated: true
  # TODO (SERVER-83704): Remove once 8.0 becomes last LTS.
  featureFlagPlacementHistoryPostFCV73 :
    description: "Feature flag that marks a version change in the logic that generates config.placementHistory;
                  it causes such a collection to be reinitialized on FCV upgrade and placement history queries
                  to be redirected to config.shards prior to the reinitialization."
    cpp_varname: feature_flags::gPlacementHistoryPostFCV3
    default: true
    version: 7.3
    shouldBeFCVGated: true
  featureFlagShardedAggregationCatalogCacheGossiping:
    description: "Feature flag that makes routers executing distributed aggregations that involve
                  secondary collections request the shards to gossip back the catalog cache versions
                  for these collections."
    cpp_varname: feature_flags::gShardedAggregationCatalogCacheGossiping
    default: true
    version: 8.0
    shouldBeFCVGated: true
  featureFlagConvertToCappedCoordinator:
    description: "Feature flag used for deciding how to serve _shardsvrConvertToCapped commands sent by the router
                 (new coordinator in case of latest FCV, legacy path otherwise)."
    cpp_varname: feature_flags::gConvertToCappedCoordinator
    default: true
    version: 8.0
    shouldBeFCVGated: true
  # TODO (SERVER-81037): enable this feature flag once it's possible to detect prepare conflicts on the catalog
  featureFlagCreateCollectionInPreparedTransactions:
    description: "Feature flag protecting the codepath allowing to create collections in prepared transactions "
    cpp_varname: feature_flags::gCreateCollectionInPreparedTransactions
    default: false
    shouldBeFCVGated: true
  # TODO (SERVER-77915): Remove once 8.0 becomes last LTS.
  featureFlagTrackUnshardedCollectionsUponMoveCollection:
    description: "Feature flag for enabling the tracking of user unsharded collection upon moveCollection"
    cpp_varname: feature_flags::gTrackUnshardedCollectionsUponMoveCollection
    default: false
    shouldBeFCVGated: true
  featureFlagReplicaSetEndpoint:
    description: When enabled, allows users to connect to a single-shard cluster with no dedicated config
                 server using a replica set connection string.
    cpp_varname: feature_flags::gFeatureFlagReplicaSetEndpoint
    default: false
    shouldBeFCVGated: true
  featureFlagRSEndpointClusterCardinalityParameter:
    description: >-
        When enabled, this feature flag will allow the cluster cardinality cluster parameter to
        reset its value to false when the second shard is removed from a cluster. This feature
        flag should be enabled at the same time as the replica set endpoint feature flag.
    cpp_varname: feature_flags::gFeatureFlagRSEndpointClusterCardinalityParameter
    default: false
    shouldBeFCVGated: true
  featureFlag80CollectionCreationPath:
    description: "Feature flag protecting all codepaths that rely on the 8.0 way of collection creation in a
                  sharded cluster. Namely, no implicit creations by the shards and no usage of the
                  storage-level create command."
    cpp_varname: feature_flags::g80CollectionCreationPath
    default: false
    shouldBeFCVGated: true
