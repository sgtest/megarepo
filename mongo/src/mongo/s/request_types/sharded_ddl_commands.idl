# Copyright (C) 2020-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

# Contains internal DDL commands which are exchanged between Router and Shard/ConfigServer role and are linked both on MongoD and MongoS

global:
    cpp_namespace: "mongo"
    cpp_includes:
        - "mongo/s/catalog/type_collection.h"
        - "mongo/s/shard_version.h"

imports:
    - "mongo/db/commands/rename_collection.idl"
    - "mongo/db/commands/set_user_write_block_mode.idl"
    - "mongo/db/drop_indexes.idl"
    - "mongo/db/drop_database.idl"
    - "mongo/db/keypattern.idl"
    - "mongo/db/coll_mod.idl"
    - "mongo/db/basic_types.idl"
    - "mongo/s/sharding_types.idl"
    - "mongo/s/resharding/common_types.idl"
    - "mongo/db/timeseries/timeseries.idl"
    - "mongo/db/query/cursor_response.idl"
    - "mongo/db/metadata_consistency_types.idl"

types:
    CollectionType:
        description: "Information of a sharded collection."
        bson_serialization_type: object
        cpp_type: CollectionType
        serializer: "mongo::CollectionType::toBSON"
        deserializer: "mongo::CollectionType"

enums:
    ShardsvrSetUserWriteBlockModePhase:
        description: "Phase for the _shardsvrSetUserWriteBlockMode command."
        type: string
        values:
            # When enabling user write blocking, kPrepare means the shard will start blocking
            # sharded DDL operations. When disabling user write blocking, kPrepare means the shard
            # will to start accepting user writes again.
            kPrepare: "prepare"
            # When enabling user write blocking, kComplete means the shard will start blocking
            # user writes. When disabling user write blocking, kComplete means the shard
            # will to start accepting sharded DDL operations again.
            kComplete: "complete"

structs:

    ConfigsvrCreateDatabaseResponse:
        description: "Response for the create database command"
        strict: false
        is_command_reply: true
        fields:
            databaseVersion:
                type: database_version
                description: "The version of the newly-created or already existing database"
                optional: false

    RenameCollectionRequest:
        description: "Request for the rename collection command"
        strict: false
        fields:
            to:
                type: namespacestring
                description: "The new namespace for the collection being renamed."
            dropTarget:
                type: bool
                description: "If true, mongod will drop the target of renameCollection prior to
                renaming the collection."
                default: false
            stayTemp:
                type: bool
                description: "If true, the original collection will remain temp if it was temp
                before the rename."
                default: false
            expectedSourceUUID:
                type: uuid
                description: "The expected UUID of the source collection."
                optional: true
            expectedTargetUUID:
                type: uuid
                description: "The expected UUID of the target collection."
                optional: true

    RenameCollectionResponse:
        description: "Response for the rename collection command"
        strict: false
        is_command_reply: true
        fields:
            collectionVersion:
                type: shard_version
                description: "Latest version of the collection"
                optional: false

    CreateCollectionRequest:
        description: "All the parameters sent by the router."
        generate_comparison_operators: false
        strict: false
        fields:
            shardKey:
                type: object_owned
                description: "The index specification document to use as the shard key."
                optional: true
            unique:
                type: bool
                description: "Whether the shard key index should enforce a unique constraint."
                optional: true
            numInitialChunks:
                type: safeInt64
                description: >-
                    The number of chunks to create initially when sharding an empty collection with
                    a hashed shard key.
                optional: true
            presplitHashedZones:
                type: bool
                description: >-
                    True if the chunks should be pre-split based on the existing zones when
                    sharding a collection with hashed shard key.
                optional: true
            timeseries:
                description: "The options to create the time-series collection with."
                type: TimeseriesOptions
                optional: true
            collation:
                type: object_owned
                description: "The collation to use for the shard key index."
                optional: true
            collectionUUID:
                type: uuid
                description: "The expected UUID of the collection."
                optional: true
            implicitlyCreateIndex:
                description: "Creates an index on the shard key pattern if the collection is empty."
                type: optionalBool
            enforceUniquenessCheck:
                description: >-
                    Controls whether this command verifies that any unique indexes are prefixed by
                    the shard key pattern if unique is true. If true then it will verify and if
                    false then it won't.
                type: optionalBool

    CreateCollectionResponse:
        description: "Response of the create collection command"
        strict: false
        is_command_reply: true
        fields:
            collectionUUID:
                type: uuid
                description: "UUID of the created collection"
                optional: true
            collectionVersion:
                type: shard_version
                description: "Latest version of the collection"
                optional: false

    RefineCollectionShardKeyRequest:
        description: "Parameters sent by the router"
        strict: false
        fields:
            newShardKey:
                type: KeyPattern
                description: "The index specification document to use as the new shard key."
                optional: false
            collectionUUID:
                type: uuid
                description: "The expected UUID of the collection."
                optional: true
            enforceUniquenessCheck:
                description: >-
                    Controls whether this command verifies that any unique indexes are prefixed by
                    the shard key pattern if unique is true. If true then it will verify and if
                    false then it won't.
                type: optionalBool

    ReshardCollectionRequest:
        description: "Parameters for the reshard collection command"
        strict: false
        fields:
            key:
                type: object
                description: "The index specification document to use as the new shard key."
                optional: false
            unique:
                type: bool
                description: "Whether the shard key index should enforce a unique constraint."
                optional: true
            numInitialChunks:
                type: safeInt64
                description: "The number of chunks to create initially."
                optional: true
            collation:
                type: object
                description: "The collation to use for the shard key index."
                optional: true
            zones:
                type: array<ReshardingZoneType>
                description: "The zones associated with the new shard key."
                optional: true
            _presetReshardedChunks:
                type: array<ReshardedChunk>
                description: >-
                    "Mapping of chunk ranges to be used as the initial split output. This is only
                    for testing purposes."
                optional: true
            collectionUUID:
                type: uuid
                description: "The expected UUID of the collection."
                optional: true
            shardDistribution:
                type: array<ShardKeyRange>
                description: "The key ranges for the new shard key. This should be continuous and complete."
                optional: true
            forceRedistribution:
                type: bool
                description: "Whether initiate reshardCollection if the shardKey doesn't change."
                optional: true
            reshardingUUID:
                type: uuid
                description: >-
                    "A user-provided identifier used to identify this resharding operation for
                    retryability purposes."
                optional: true

    SetAllowMigrationsRequest:
        description: "Parameters sent for the set allow migrations command"
        strict: false
        fields:
            allowMigrations:
                type: bool
                description: "If false balancer rounds should be disabled and migrations commit prohibited."
                optional: false

commands:

    _shardsvrCreateCollection:
        command_name: _shardsvrCreateCollection
        cpp_name: ShardsvrCreateCollection
        description: "The internal createCollection command for a shard."
        strict: false
        namespace: concatenate_with_db
        api_version: ""
        chained_structs:
            CreateCollectionRequest: CreateCollectionRequest

    _shardsvrCreateCollectionParticipant:
        command_name: _shardsvrCreateCollectionParticipant
        cpp_name: ShardsvrCreateCollectionParticipant
        description: "Command to create a collection on participant shards, when called, assumes the primary shard is under the critical section for that namespace."
        strict: false
        namespace: concatenate_with_db
        api_version: ""
        fields:
            indexes:
                type: array<object>
                description: "Collection indexes."
            options:
                type: object
                description: "Collection options."
            collectionUUID:
                type: uuid
                description: "Collection uuid."
                optional: true
            idIndex:
                type: object
                description: "Id index."

    _shardsvrCreateGlobalIndex:
        description: "Internal command sent to participant shards to create a global index container with a given UUID."
        command_name: _shardsvrCreateGlobalIndex
        cpp_name: CreateGlobalIndex
        strict: true
        type: uuid
        namespace: type
        api_version: ""
        reply_type: OkReply

    _shardsvrDropGlobalIndex:
        description: "Internal command sent to participant shards to drop a global index container with a given UUID."
        command_name: _shardsvrDropGlobalIndex
        cpp_name: DropGlobalIndex
        strict: true
        type: uuid
        namespace: type
        api_version: ""
        reply_type: OkReply

    _shardsvrDropDatabase:
        description: "Internal command sent to the primary shard of a database to drop it."
        command_name: _shardsvrDropDatabase
        namespace: ignored
        api_version: ""
        cpp_name: ShardsvrDropDatabase

    _shardsvrDropDatabaseParticipant:
        description: "Internal command sent to participants shards to drop a database."
        command_name: _shardsvrDropDatabaseParticipant
        namespace: ignored
        api_version: ""
        cpp_name: ShardsvrDropDatabaseParticipant
        strict: false
        reply_type: OkReply

    _shardsvrDropCollection:
        description: "Parser for the _shardsvrDropCollection command"
        command_name: _shardsvrDropCollection
        namespace: concatenate_with_db
        api_version: ""
        cpp_name: ShardsvrDropCollection
        strict: false
        fields:
            collectionUUID:
                type: uuid
                description: "The expected UUID of the collection."
                optional: true

    _shardsvrDropCollectionParticipant:
        description: "Parser for the _shardsvrDropCollectionParticipant command"
        command_name: _shardsvrDropCollectionParticipant
        namespace: concatenate_with_db
        api_version: ""
        cpp_name: ShardsvrDropCollectionParticipant
        strict: false
        fields:
            fromMigrate: 
                type: bool 
                description: "Whether the drop comes as a result of an interrupted migration process."
                optional: true
        reply_type: OkReply

    _shardsvrRenameCollection:
        command_name: _shardsvrRenameCollection
        cpp_name: ShardsvrRenameCollection
        description: "Internal renameCollection command for a shard."
        strict: false
        namespace: concatenate_with_db
        api_version: ""
        chained_structs:
            RenameCollectionRequest: RenameCollectionRequest
        fields:
            allowEncryptedCollectionRename:
                description: "Encrypted Collection renames are usually disallowed to minimize user error.
                              C2C needs to do the renames to replicate create collection."
                type: bool
                optional: true
        reply_type: OkReply

    _shardsvrSetAllowMigrations:
        command_name: _shardsvrSetAllowMigrations
        cpp_name: shardsvrSetAllowMigrations
        description: "Internal setAllowMigrations command for a shard."
        strict: false
        namespace: concatenate_with_db
        api_version: ""
        chained_structs:
            SetAllowMigrationsRequest: SetAllowMigrationsRequest

    _shardsvrReshardCollection:
        command_name: _shardsvrReshardCollection
        cpp_name: ShardsvrReshardCollection
        description: "The internal reshardCollection command on the shard."
        strict: false
        namespace: type
        api_version: ""
        type: namespacestring
        chained_structs:
            ReshardCollectionRequest: ReshardCollectionRequest

    _shardsvrRefineCollectionShardKey:
        description: "Parser for the _shardsvrRefineCollectionShardKey command"
        command_name: _shardsvrRefineCollectionShardKey
        cpp_name: ShardsvrRefineCollectionShardKey
        namespace: concatenate_with_db
        api_version: ""
        strict: false
        chained_structs:
            RefineCollectionShardKeyRequest: RefineCollectionShardKeyRequest
    
    _shardsvrValidateShardKeyCandidate:
        description: "Command run on shards to ensure we have a viable key to refine the shard key."
        command_name: _shardsvrValidateShardKeyCandidate
        cpp_name: ShardsvrValidateShardKeyCandidate
        strict: false
        namespace: type
        api_version: ""
        type: namespacestring
        fields:
            key:
                type: KeyPattern
                description: "The index specification document to use as the new shard key."
                optional: false
            enforceUniquenessCheck:
                description: >-
                    Verifies that the shard key index has the same unique setting as the command.
                type: optionalBool

    _configsvrRefineCollectionShardKey:
        command_name: _configsvrRefineCollectionShardKey
        cpp_name: ConfigsvrRefineCollectionShardKey
        description: "The internal refineCollectionShardKey command on the config server"
        strict: false
        namespace: type
        api_version: ""
        type: namespacestring
        fields:
            key:
                type: object
                description: "The index specification document to use as the new shard key."
                optional: false
            epoch:
                type: objectid
                description: "The expected epoch of the namespace provided to
                              refineCollectionShardKey."
                optional: false
            enforceUniquenessCheck:
                description: >-
                    Verifies that the shard key index has the same unique setting as the command.
                type: optionalBool

    _shardsvrDropIndexes:
        description: "Parser for the _shardsvrDropIndexes command"
        command_name: _shardsvrDropIndexes
        cpp_name: ShardsvrDropIndexes
        namespace: concatenate_with_db
        api_version: ""
        strict: false
        chained_structs:
            DropIndexesRequest: DropIndexesRequest

    _configsvrCreateDatabase:
        description: "The internal createDatabase command on the config server"
        api_version: ""
        command_name: _configsvrCreateDatabase
        cpp_name : ConfigsvrCreateDatabase
        namespace: type
        type: string
        reply_type: ConfigsvrCreateDatabaseResponse
        strict: false
        fields:
            primaryShardId:
                type: shard_id
                description: "If set, indicates to the system which shard should be used as the
                              primary for the database (if not already created). Otherwise, the
                              system will use the balancer in order to select a primary."
                optional: true

    _shardsvrCollMod:
        command_name: _shardsvrCollMod
        cpp_name: ShardsvrCollMod
        description: "Internal command sent to the primary shard in a collMod procedure"
        strict: false
        api_version: ""
        namespace: concatenate_with_db
        chained_structs:
            CollModRequest: CollModRequest

    _configsvrSetUserWriteBlockMode:
        command_name: _configsvrSetUserWriteBlockMode
        cpp_name: ConfigsvrSetUserWriteBlockMode
        description: "internal _configsvrSetUserWriteBlockMode command"
        namespace: ignored
        api_version: ""
        strict: false
        chained_structs:
            SetUserWriteBlockModeRequest: SetUserWriteBlockModeRequest

    _shardsvrSetUserWriteBlockMode:
        command_name: _shardsvrSetUserWriteBlockMode
        cpp_name: ShardsvrSetUserWriteBlockMode
        description: "internal _shardsvrSetUserWriteBlockMode command"
        namespace: ignored
        api_version: ""
        strict: false
        chained_structs:
            SetUserWriteBlockModeRequest: SetUserWriteBlockModeRequest
        fields:
            phase:
                type: ShardsvrSetUserWriteBlockModePhase
                description: "Determines the phase of the blocking/unblocking procedure to be
                              executed."

    _shardsvrSetClusterParameter:
        command_name: _shardsvrSetClusterParameter
        cpp_name: ShardsvrSetClusterParameter
        description: "internal _shardsvrSetClusterParameter command"
        namespace: type
        type: object
        api_version: ""
        strict: false
        fields:
            clusterParameterTime:
                type: timestamp
                description: "Time that will be associated with the cluster parameter"

    _shardsvrCheckMetadataConsistency:
        description: "Internal command sent to the primary shard of a database to check metadata 
                      consistency."
        command_name: _shardsvrCheckMetadataConsistency
        cpp_name: ShardsvrCheckMetadataConsistency
        namespace: concatenate_with_db
        allow_global_collection_name: true
        api_version: ""
        reply_type: CursorInitialReply
        strict: false
        inline_chained_structs: true
        chained_structs:
            CommonCheckMetadataRequestFields: commonFields
        fields:
            cursor:
                type: SimpleCursorOptions
                optional: true

    _shardsvrCheckMetadataConsistencyParticipant:
        description: "Internal command sent to participants shards to check metadata consistency."
        command_name: _shardsvrCheckMetadataConsistencyParticipant
        cpp_name: ShardsvrCheckMetadataConsistencyParticipant
        namespace: concatenate_with_db
        allow_global_collection_name: true
        api_version: ""
        reply_type: CursorInitialReply
        strict: false
        inline_chained_structs: true
        chained_structs:
            CommonCheckMetadataRequestFields: commonFields
        fields:
            cursor:
                type: SimpleCursorOptions
                optional: true
            primaryShardId:
                description: "The shard id of the db primary shard"
                type: shard_id

    _configsvrCheckClusterMetadataConsistency:
          description: "Internal command sent to the config server to check cluster metadata 
                        consistency."
          command_name: _configsvrCheckClusterMetadataConsistency
          cpp_name: ConfigsvrCheckClusterMetadataConsistency
          namespace: ignored
          api_version: ""
          reply_type: CursorInitialReply
          strict: false
          fields:
              cursor:
                  type: SimpleCursorOptions
                  optional: true
                  
    _configsvrCheckMetadataConsistency:
         description: "Internal command sent to the config server to check metadata consistency."
         command_name: _configsvrCheckMetadataConsistency
         cpp_name: ConfigsvrCheckMetadataConsistency
         namespace: concatenate_with_db
         allow_global_collection_name: true
         api_version: ""
         reply_type: CursorInitialReply
         strict: false
         fields:
             cursor:
                 type: SimpleCursorOptions
                 optional: true

    _configsvrSetClusterParameter:
        command_name: _configsvrSetClusterParameter
        cpp_name: ConfigsvrSetClusterParameter
        description: "Internal command sent to the config server to start a coordinator and set the
                      cluster parameter."
        namespace: type
        type: object_owned
        api_version: ""
        strict: false

    _configsvrClearJumboFlag:
        command_name: _configsvrClearJumboFlag
        cpp_name: ConfigsvrClearJumboFlag
        description: "internal clearJumboFlag command for config server"
        namespace: type
        api_version: ""
        type: namespacestring
        strict: false
        fields:
            epoch:
                type: objectid
                description: "The expected epoch of the namespace provided to
                              clearJumboFlag."
                optional: false
            minKey:
                type: object
                description: "The lower bound key value of the chunk."
            maxKey:
                type: object
                description: "The upper bound key value of the chunk."
