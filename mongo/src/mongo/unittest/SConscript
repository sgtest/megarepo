# -*- mode: python; -*-

Import("env")

env = env.Clone()
env.InjectThirdParty(libraries=['yaml'])
env.Library(
    target="golden_test_base",
    source=[
        'golden_test_base.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/base',
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/third_party/shim_yaml',
    ],
)

utEnv = env.Clone()
utEnv.InjectThirdParty(libraries=['yaml'])
utEnv.Library(
    target='unittest',
    source=[
        'barrier.cpp',
        'bson_test_util.cpp',
        'death_test.cpp',
        'golden_test.cpp',
        'inline_auto_update.cpp',
        'matcher.cpp',
        'stringify.cpp',
        'temp_dir.cpp',
        'unittest.cpp',
    ],
    LIBDEPS=[
        'golden_test_base',
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/mongo/db/server_base',
        '$BUILD_DIR/mongo/util/options_parser/options_parser',
        '$BUILD_DIR/mongo/util/pcre_util',
        '$BUILD_DIR/mongo/util/pcre_wrapper',
        '$BUILD_DIR/third_party/shim_yaml',
    ],
    AIB_COMPONENT='unittests',
)

env.Library(
    target='unittest_main',
    source=[
        'unittest_main.cpp',
        'unittest_options.idl',
    ],
    LIBDEPS=[
        'unittest',
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/mongo/db/commands/test_commands_enabled',
        '$BUILD_DIR/mongo/db/wire_version',
        '$BUILD_DIR/mongo/util/options_parser/options_parser',
    ],
    AIB_COMPONENT='unittests',
)

env.Library(
    target='integration_test_main',
    source=[
        'integration_test_main.cpp',
        'integration_test_main.idl',
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/db/service_context_test_fixture',
        'unittest',
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/mongo/client/connection_string',
        '$BUILD_DIR/mongo/db/commands/test_commands_enabled',
        '$BUILD_DIR/mongo/db/server_base',
        '$BUILD_DIR/mongo/db/server_options',
        '$BUILD_DIR/mongo/db/server_options_base',
        '$BUILD_DIR/mongo/db/serverinit',
        '$BUILD_DIR/mongo/db/service_context_non_d',
        '$BUILD_DIR/mongo/db/wire_version',
        '$BUILD_DIR/mongo/util/options_parser/options_parser',
        '$BUILD_DIR/mongo/util/options_parser/options_parser_init',
        '$BUILD_DIR/mongo/util/testing_options',
    ],
    AIB_COMPONENT='integration-tests',
)

bmEnv = env.Clone()
bmEnv.InjectThirdParty(libraries=['benchmark'])
bmEnv.Library(
    target='benchmark_main',
    source=[
        'benchmark_main.cpp',
        'benchmark_options.idl',
    ],
    LIBDEPS=[
        # benchmark_main must not be made to depend on additional libraries.
        # Additional requirements should be handled by the benchmark itself.
        # Examples can be found in fail_point_bm and commands_bm. See SERVER-60691.
        '$BUILD_DIR/mongo/base',
        '$BUILD_DIR/mongo/util/options_parser/options_parser',
        '$BUILD_DIR/third_party/shim_benchmark',
    ],
    AIB_COMPONENT='benchmarks',
)

env.Library(
    target='task_executor_proxy',
    source=[
        'task_executor_proxy.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/executor/task_executor_interface',
    ],
    AIB_COMPONENT='benchmarks',
)

env.CppUnitTest(
    target='unittest_test',
    source=[
        'golden_test_test.cpp',
        'unittest_test.cpp',
        'fixture_test.cpp',
        'temp_dir_test.cpp',
        'thread_assertion_monitor_test.cpp',
        'assert_that_test.cpp',
        'inline_auto_update_test.cpp',
        'bson_test_util_test.cpp',
    ],
)

env.Benchmark(
    target='system_resource_canary_bm',
    source=[
        'system_resource_canary_bm.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/util/processinfo',
    ],
)
