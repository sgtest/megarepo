# Copyright (C) 2019-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.

global:
    cpp_namespace: mongo
    cpp_includes:
      - "mongo/db/s/sharding_runtime_d_params.h"

server_parameters:
    chunkMigrationConcurrency:
        description: >-
          The number of threads doing insertions on the recipient during a chunk migration and
          also the number of _migrateClone requests that the recipient sends to the source in parallel.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: chunkMigrationConcurrency
        validator:
          callback: validateChunkMigrationConcurrency
        default: 1

    rangeDeleterBatchSize:
        description: >-
          The maximum number of documents in each batch to delete during the cleanup stage of chunk
          migration (or the cleanupOrphaned command). Between each batch, secondaryThrottle and
          rangeDeleterBatchDelayMS will apply.

          A value of 0 indicates that the system chooses the default value (INT_MAX).
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: rangeDeleterBatchSize
        validator:
          gte: 0
        default:
          expr: std::numeric_limits<int>::max()

    rangeDeleterBatchDelayMS:
        description: >-
          The amount of time in milliseconds to wait before the next batch of deletion during the
          cleanup stage of chunk migration (or the cleanupOrphaned command).
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: rangeDeleterBatchDelayMS
        validator:
          gte: 0
        default: 20

    rangeDeleterHighPriority:
        description:
            "By default, this parameter is set to 'false' meaning that range deletions have a
            lower priority than user operations. Setting this parameter to true prioritizes
            range deletions over user operations."
        set_at: [ startup, runtime ]
        cpp_vartype: AtomicWord<bool>
        cpp_varname: rangeDeleterHighPriority
        default: false

    receiveChunkWaitForRangeDeleterTimeoutMS:
        description: >-
          Amount of time in milliseconds an incoming migration will wait for an intersecting range
          with data in it to be cleared up before failing.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: receiveChunkWaitForRangeDeleterTimeoutMS
        validator:
          gte: 0
        default: 10000

    migrateCloneInsertionBatchSize:
        description: >-
          The maximum number of documents to insert in a single batch during the cloning step of
          the migration process. The default value of 0 indicates no maximum number of documents
          per batch. However, in practice, this results in batches that contain up to 16 MB of
          documents. The value 1 corresponds to MongoDB 3.4.16 (and earlier) behavior.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: migrateCloneInsertionBatchSize
        validator:
          gte: 0
        default: 0

    migrateCloneInsertionBatchDelayMS:
        description: >-
          Time in milliseconds to wait between batches of insertions during cloning step of the
          migration process. This wait is in addition to the secondaryThrottle. The default value
          of 0 indicates no additional wait.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: migrateCloneInsertionBatchDelayMS
        validator:
          gte: 0
        default: 0

    migrationLockAcquisitionMaxWaitMS:
        description: 'How long to wait to acquire collection lock for migration related operations.'
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: migrationLockAcquisitionMaxWaitMS
        default: 500

    maxCatchUpPercentageBeforeBlockingWrites:
        description: >-
          The maximum percentage of untrasferred chunk mods at the end of a catch up iteration
          that may be deferred to the next phase of the migration protocol
          (where new writes get blocked).
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: maxCatchUpPercentageBeforeBlockingWrites
        validator:
          gte: 0
          lte: 100
        default: 10

    orphanCleanupDelaySecs:
        description: How long to wait before starting cleanup of an emigrated chunk range.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: orphanCleanupDelaySecs
        default: 900

    disableResumableRangeDeleter:
        description: >-
          Disable the resumable range deleter. Ranges will not be submitted for deletion, and if an
          incoming migration sees orphans in the incoming range, the migration will fail. The
          resumable range deleter replaced the old non-durable range deleter as of FCV 4.4.
        set_at: [startup]
        cpp_vartype: AtomicWord<bool>
        cpp_varname : disableResumableRangeDeleter
        default: false

    enableShardedIndexConsistencyCheck:
        description: >-
          Enable the periodic sharded index consistency check on the config server's primary.
          The count of sharded collections with inconsistent indexes is exposed via the
          'shardedIndexConsistency' section in the serverStatus output.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<bool>
        cpp_varname: enableShardedIndexConsistencyCheck
        default: true

    shardedIndexConsistencyCheckIntervalMS:
        description: 'Time interval in milliseconds between subsequent index checks.'
        set_at: [startup]
        cpp_vartype: int
        cpp_varname: shardedIndexConsistencyCheckIntervalMS
        default: 600000
