# Copyright (C) 2018-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

global:
    cpp_namespace: "mongo"
    cpp_includes:
        - "mongo/db/storage/wiredtiger/wiredtiger_kv_engine.h"
        - "mongo/util/concurrency/ticketholder.h"
        - "mongo/util/debug_util.h"

server_parameters:
    wiredTigerEngineRuntimeConfig:
        description: 'WiredTiger Configuration'
        set_at: runtime
        cpp_class:
            name: WiredTigerEngineRuntimeConfigParameter
            data: 'std::pair<std::string, WiredTigerKVEngine*>'
        # The data element of this param gets initialized in three
        # disparate ways by different parts of the codebase
        # none of which are easily encoded here.
        # Defer the initialization with condition: false
        # and allow those places to manually set themselves up.
        condition: { expr: false }

    wiredTigerSessionCloseIdleTimeSecs:
        description: 'Close idle wiredtiger sessions in the session cache after this many seconds'
        cpp_vartype: 'AtomicWord<std::int32_t>'
        cpp_varname: gWiredTigerSessionCloseIdleTimeSecs
        set_at: [ startup, runtime ]
        default:
            # The default is 5 mins with a shorter default in the debug build to aid testing.
            expr: 'kDebugBuild ? 5 : 300'
        validator:
            gte: 0

    wiredTigerMaxCacheOverflowSizeGB:
      description: >-
        Maximum amount of disk space to use for cache overflow;
        Defaults to 0 (unbounded)
        Deprecated.
      set_at: runtime
      cpp_vartype: 'AtomicWord<double>'
      cpp_varname: gWiredTigerMaxCacheOverflowSizeGBDeprecated
      default: 0

    wiredTigerEvictionDirtyTargetGB:
      description: >-
         Absolute dirty cache eviction target. Once eviction begins,
         it will proceed until the target of dirty data in the cache
         is reached
         Defaults to 5% cache size
      set_at: startup
      cpp_vartype: 'double'
      cpp_varname: gWiredTigerEvictionDirtyTargetGB
      default: 0
      validator:
        gte: 0.01
        lte: 10000

    wiredTigerEvictionDirtyMaxGB:
      description: >-
         Absolute threshold at which dirty cache eviction starts operating
         aggressively;
         Defaults to 20% cache size
      set_at: startup
      cpp_vartype: 'double'
      cpp_varname: gWiredTigerEvictionDirtyMaxGB
      default: 0
      validator:
        gte: 0.01
        lte: 10000

    wiredTigerEvictionDebugMode:
      description: >-
         If true, modify internal WiredTiger algorithms to force lookaside eviction to happen more
         aggressively.
      set_at: startup
      cpp_vartype: 'bool'
      cpp_varname: gWiredTigerEvictionDebugMode
      default: false
      # This parameter is only allowed in debug builds.
      condition:
        constexpr: 'kDebugBuild'

    wiredTigerFileHandleCloseIdleTime:
      description: >-
        The amount of time in seconds a file handle in WiredTiger needs to be idle before attempting
        to close it.
      set_at: startup
      cpp_vartype: 'std::int32_t'
      cpp_varname: gWiredTigerFileHandleCloseIdleTime
      default: 600
      validator:
        gte: 1

    wiredTigerExtraDiagnostics:
      description: >-
          Extra diagnostics that can be enabled in release mode including diagnostic assertions that can cause WiredTiger to abort upon
          detected invalid state. Valid options include: ["all", "concurrent_access", "data_validation", "invalid_op", "out_of_order",
          "panic", "slow_operation", "visibility"]. In order to make runtime changes, this will need to be reconfigured using
          wiredTigerEngineRuntimeConfigParameter.
      set_at: [startup]
      cpp_vartype: 'std::vector<std::string>'
      cpp_varname: "gWiredTigerExtraDiagnostics"
      validator:
          callback: validateExtraDiagnostics

    wiredTigerFileHandleCloseMinimum:
      description: >-
        The number of handles open before the WiredTiger file manager will look for handles to close.
      set_at: startup
      cpp_vartype: 'std::int32_t'
      cpp_varname: gWiredTigerFileHandleCloseMinimum
      default: 2000
      validator:
        gte: 1

    wiredTigerFileHandleCloseScanInterval:
      description: >-
        The interval in seconds at which WiredTiger checks for inactive files and closes them.
      set_at: startup
      cpp_vartype: 'std::int32_t'
      cpp_varname: gWiredTigerFileHandleCloseScanInterval
      default: 10
      validator:
        gte: 1

    wiredTigerDirectoryForIndexes:
       description: 'Read-only view of DirectoryForIndexes config parameter'
       set_at: 'readonly'
       cpp_class:
           name: WiredTigerDirectoryForIndexesParameter

    wiredTigerSkipTableLoggingChecksOnStartup:
      description: >-
        Skips table logging setting checks and modifications on startup.
      set_at: startup
      cpp_vartype: 'bool'
      cpp_varname: gWiredTigerSkipTableLoggingChecksOnStartup
      default: false

    wiredTigerStressConfig:
      description: >-
        Encourage more interesting races in WiredTiger.
      set_at: startup
      cpp_vartype: bool
      cpp_varname: gWiredTigerStressConfig
      default: false
