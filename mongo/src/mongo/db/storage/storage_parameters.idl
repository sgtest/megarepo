# Copyright (C) 2019-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

global:
    cpp_namespace: "mongo"
    cpp_includes:
        - "mongo/bson/bson_depth.h"
        - "mongo/db/storage/storage_options.h"

server_parameters:
    # This is an alias for the 'storage.syncPeriodSecs' config, and the default is defined in the
    # StorageGlobalParams struct to resolve a conflict between config parameter and set parameter evaluation.
    syncdelay:
        # In almost every situation you should not set this value and use the default setting.
        description: >-
            Interval in seconds between fsync operations where mongod flushes its
            working memory to disk. By default, mongod flushes memory to disk every 60 seconds.
        set_at: [ startup, runtime ]
        cpp_varname: 'storageGlobalParams.syncdelay'
        validator:
            gte: 0.0
            lte: { expr: 'StorageGlobalParams::kMaxSyncdelaySecs' }
    # This is an alias for the 'storage.journal.commitIntervalMs' config, and the default is defined in the
    # StorageGlobalParams struct to resolve a conflict between config parameter and set parameter evaluation.
    journalCommitInterval:
        description: 'Number of milliseconds between journal commits'
        set_at: [ startup, runtime ]
        cpp_varname: 'storageGlobalParams.journalCommitIntervalMs'
        validator:
            gte: 1
            lte: { expr: 'StorageGlobalParams::kMaxJournalCommitIntervalMs' }
    takeUnstableCheckpointOnShutdown:
        description: 'Take unstable checkpoint on shutdown'
        cpp_vartype: bool
        cpp_varname: gTakeUnstableCheckpointOnShutdown
        set_at: startup
        default: false
    operationMemoryPoolBlockInitialSizeKB:
        description: 'Initial block size in KB for the per operation temporary object memory pool'
        set_at: [ startup, runtime ]
        cpp_vartype: AtomicWord<int32_t>
        cpp_varname: gOperationMemoryPoolBlockInitialSizeKB
        default: 1
        validator:
            gte: 1
    operationMemoryPoolBlockMaxSizeKB:
        description: 'Maximum block size in KB for the per operation temporary object memory pool'
        set_at: [ startup, runtime ]
        cpp_vartype: AtomicWord<int32_t>
        cpp_varname: gOperationMemoryPoolBlockMaxSizeKB
        default: 2048
        validator:
            gte: 1

    indexMaxNumGeneratedKeysPerDocument:
        description: 'Maximum number of index keys a single document is allowed to generate'
        set_at: [ startup ]
        cpp_vartype: int32_t
        cpp_varname: gIndexMaxNumGeneratedKeysPerDocument
        default: 100000
        validator:
            gte: 200

    storageGlobalParams.directoryperdb:
        description: 'Read-only view of directory per db config parameter'
        set_at: 'readonly'
        cpp_class:
            name: StorageDirectoryPerDbParameter

    timeseriesValidateCompressedBuckets:
        description: 'Validate that there is no data loss before committing compressed timeseries buckets'
        set_at: [ startup, runtime ]
        cpp_vartype: AtomicWord<bool>
        cpp_varname: gValidateTimeseriesCompression
        default: true

    maintainValidCursorsAcrossSBEReadCommands:
        description: "Enable maintaining valid cursors across SBE read commands (find, agg, getMore)"
        set_at: startup
        cpp_varname: gMaintainValidCursorsAcrossReadCommands
        cpp_vartype: bool
        default: false

    maintainValidCursorsAcrossSBEYield:
        description: "Enable retaining valid cursors across SBE query yield"
        set_at: startup
        cpp_varname: gYieldingSupportForSBE
        cpp_vartype: bool
        default: false

    maxNumberOfBatchedOperationsInSingleOplogEntry:
        description: >-
            Maximum number of operations to pack into a single oplog entry, when multi-oplog
            format for batched writes is in use. See batchedDeletesTargetBatchDocs and
            maxNumberOfTransactionOperationsInSingleOplogEntry.
        set_at: startup
        cpp_vartype: int
        cpp_varname: gMaxNumberOfBatchedOperationsInSingleOplogEntry
        default: 2147483647  # INT_MAX
        validator: { gte: 1 }

    maxSizeOfBatchedOperationsInSingleOplogEntryBytes:
        description: >-
            Maximum size (bytes) of operations to pack into a single oplog entry, when multi-oplog
            format for batched writes is in use.
            See batchedDeletesTargetStagedDocBytes and BSONObjMaxUserSize.
        set_at: startup
        cpp_vartype: int
        cpp_varname: gMaxSizeOfBatchedOperationsInSingleOplogEntryBytes
        default: 16777216  # 16 MB
        validator: { gte: 1 }

    maxNumberOfInsertsBatchInsertsForRenameAcrossDatabases:
        description: >-
            Maximum number of inserts that cross-db collection renames can batch into one applyOps
            oplog entry.
        set_at: [ startup, runtime ]
        cpp_vartype: AtomicWord<int>
        cpp_varname: gMaxNumberOfInsertsBatchInsertsForRenameAcrossDatabases
        default: 500

    maxSizeOfBatchedInsertsForRenameAcrossDatabasesBytes:
        description: >-
            Maximum size (bytes) of each batched applyOps oplog entry for cross-db collection renames.
        set_at: [ startup, runtime ]
        cpp_vartype: AtomicWord<int>
        cpp_varname: gMaxSizeOfBatchedInsertsForRenameAcrossDatabasesBytes
        default: 16776216 # BSONObjMaxUserSize - 1000

    collectionSamplingLogIntervalSeconds:
        description: 'The approximate interval between log messages indicating collection sampling progress. Once interval seconds have elapsed since the last log message, a progress message will be logged after the current sample is completed. A value of zero will disable this logging.'
        set_at: [ startup, runtime ]
        cpp_vartype: 'AtomicWord<int>'
        cpp_varname: gCollectionSamplingLogIntervalSeconds
        deprecated_name:
        - oplogSamplingLogIntervalSeconds
        default: 10
        validator: { gte: 0 }

    allowUnsafeUntimestampedWrites:
        description: >- 
            Allows a replica set member in standalone mode to perform unsafe untimestamped writes
        set_at: [ startup ]
        cpp_varname: gAllowUnsafeUntimestampedWrites
        cpp_vartype: bool
        default: false

    skipDroppingHashedShardKeyIndex:
        description: >-
            Skips dropping hashed shard key supporting indexes when calling dropIndexes with the '*' parameter. Used for testing purposes.
        set_at: [ startup, runtime ]
        cpp_vartype: bool
        cpp_varname: skipDroppingHashedShardKeyIndex
        default: false

    enableAutoCompaction:
        description: 'Enable auto compact at startup. Used for testing purposes.'
        cpp_vartype: bool
        cpp_varname: gEnableAutoCompaction
        set_at: startup
        default: false


feature_flags:
    featureFlagLargeBatchedOperations:
        description:  >-
            Enable support for replicating batched operations over multiple applyOps oplog
            entries. Otherwise, batched operations that do not fit within a single applyOps
            oplog entry will fail with a TransactionTooLarge error.
            See maxNumberOfBatchedOperationsInSingleOplogEntry and
            maxSizeOfBatchedOperationsInSingleOplogEntryBytes.
        cpp_varname: gFeatureFlagLargeBatchedOperations
        default: false
        shouldBeFCVGated: true
    featureFlagDocumentSourceListCatalog:
        description: "When enabled, allow the use of the $listCatalog aggregation stage"
        cpp_varname: feature_flags::gDocumentSourceListCatalog
        default: true
        version: 6.0
        shouldBeFCVGated: true
    featureFlagDerivedMetadata:
        description: "When enabled, support storing derived collection and index metadata"
        cpp_varname: feature_flags::gDerivedMetadata
        default: false
        shouldBeFCVGated: true
    featureFlagInternalWritesAreReplicatedTransactionally:
        description: Feature flag to enable internal writes to use the transactionally replicated WriteUnitOfWork API by default.
        cpp_varname: gFeatureFlagInternalWritesAreReplicatedTransactionally
        default: false
        shouldBeFCVGated: true
    featureFlagTimeseriesDeletesSupport:
        description: "Enable support for arbitrary deletes on time-series collections"
        cpp_varname: feature_flags::gTimeseriesDeletesSupport
        default: true
        version: 7.0
        shouldBeFCVGated: true
    featureFlagTimeseriesUpdatesSupport:
        description: "Enable support for arbitrary updates on time-series collections"
        cpp_varname: feature_flags::gTimeseriesUpdatesSupport
        default: false
        shouldBeFCVGated: true
    featureFlagIndexBuildGracefulErrorHandling:
        description: "Enable index build error handling improvements"
        cpp_varname: feature_flags::gIndexBuildGracefulErrorHandling
        default: true
        version: 7.1
        shouldBeFCVGated: true
    featureFlagTimeseriesAlwaysUseCompressedBuckets:
        description: >-
            Enable support to always use the compressed time-series bucket format when inserting,
            updating, or removing data into new, existing, or re-opened buckets.
        cpp_varname: feature_flags::gTimeseriesAlwaysUseCompressedBuckets
        default: false
        shouldBeFCVGated: false
    featureFlagTSBucketingParametersUnchanged:
        description: "Enable storing the 'timeseriesBucketingParametersHaveChanged' parameter on disk"
        cpp_varname: feature_flags::gTSBucketingParametersUnchanged
        default: true
        version: 7.1
        shouldBeFCVGated: true
