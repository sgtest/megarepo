# Copyright (C) 2020-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

global:
  cpp_namespace: "mongo"
  cpp_includes:
    - "mongo/client/read_preference.h"
    - "mongo/db/repl/tenant_migration_util.h"
    - "mongo/db/repl/optime.h"

imports:
  - "mongo/client/read_preference_setting.idl"
  - "mongo/db/serverless/serverless_types.idl"
  - "mongo/db/basic_types.idl"
  - "mongo/s/sharding_types.idl"
  - "mongo/db/repl/replication_types.idl"
  - "mongo/util/net/hostandport.idl"

structs:
    recipientSyncDataResponse:
        description: "Response for the 'recipientSyncData' command"
        strict: false
        is_command_reply: true
        fields:
            majorityAppliedDonorOpTime:
                type: optime
                description: "Majority applied donor optime by the recipient"

    MigrationRecipientCommonData:
      description: "Command data for tenant migration recipient commands."
      strict: true
      fields:
        migrationId:
          description: "Unique identifier for the tenant migration."
          type: uuid
        donorConnectionString:
          description: >-
            The URI string that the recipient will utilize to create a connection with the
            donor.
          type: string
          validator:
            callback: "tenant_migration_util::validateConnectionString"
        tenantId:
          description: "The prefix from which the migrating database will be matched. The prefixes 'admin', 'local', 'config', and the empty string ('') are not allowed. Required for multitenant migration, must be empty for shard merge."
          type: string
          optional: true
          validator:
            callback: "tenant_migration_util::validateDatabasePrefix"
        tenantIds:
          description: "The tenants to migrate. Required for shard merge, must be empty for multitenant migration."
          optional: true
          type: array<tenant_id>
          validator:
            callback: "tenant_migration_util::validateDatabasePrefix"
        readPreference:
          description: >-
            The read preference settings that the donor will pass on to the recipient.
          type: readPreference
        protocol:
          description: "Which migration protocol to use, default 'multitenant migrations'."
          type: MigrationProtocol
          optional: true
          validator:
            callback: "tenant_migration_util::validateProtocolFCVCompatibility"

commands:
  recipientSyncData:
    description: "Parser for the 'recipientSyncData' command."
    command_name: recipientSyncData
    strict: true
    namespace: ignored
    api_version: ""
    reply_type: recipientSyncDataResponse
    inline_chained_structs: true
    chained_structs:
      MigrationRecipientCommonData: MigrationRecipientCommonData
    fields:
      returnAfterReachingDonorTimestamp:
        description: >-
          If provided, the recipient should return after syncing up to this donor timestamp.
          Otherwise, the recipient will return once its copy of the data is consistent.
        type: timestamp
        optional: true
        validator:
          callback: "tenant_migration_util::validateTimestampNotNull"
      startMigrationDonorTimestamp:
        type: timestamp
        description: >-
          Recipient must not start cloning/fetching oplog entries from the donor until this
          timestamp is majority committed.
        validator:
          callback: "tenant_migration_util::validateTimestampNotNull"
  
  recipientVoteImportedFiles:
    command_name: recipientVoteImportedFiles
    cpp_name: RecipientVoteImportedFiles
    description: >-
      An internal mongod command to coordinate recipient steps of shard merge.
      It's used to signal the recipient primary when the node completes file import.
    strict: true
    namespace: ignored
    api_version: ""
    reply_type: OkReply
    fields:
      migrationId:
        description: "Unique identifier for the tenant migration."
        type: uuid
      from:
        type: HostAndPort
        description: "Replica set member identification."

  recipientForgetMigration:
    description: "Parser for the 'recipientForgetMigration' command."
    command_name: recipientForgetMigration
    reply_type: OkReply 
    strict: true
    namespace: ignored
    api_version: ""
    inline_chained_structs: true
    chained_structs:
      MigrationRecipientCommonData: MigrationRecipientCommonData
    fields:
      decision:
        description: "Enumeration that defines whether the migration committed or aborted. This field applies only for shard merge protocol"
        type: MigrationDecision
        optional: true
