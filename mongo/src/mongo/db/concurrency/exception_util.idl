# Copyright (C) 2019-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

global:
    cpp_namespace: "mongo"

server_parameters:
    enableTemporarilyUnavailableExceptions:
        description: 'Enables the use of TemporarilyUnavailableExceptions. When disabled, reverts to
                      throwing WriteConflictException.'
        set_at: [ startup, runtime ]
        cpp_varname: 'gEnableTemporarilyUnavailableExceptions'
        cpp_vartype: AtomicWord<bool>
        default: true
        redact: false

    temporarilyUnavailableMaxRetries:
        description: 'The number of times to retry a TemporarilyUnavailable error internally'
        set_at: [ startup, runtime ]
        cpp_varname: 'gTemporarilyUnavailableExceptionMaxRetryAttempts'
        cpp_vartype: AtomicWord<long long>
        default: 10
        validator:
          gte: 0
        redact: false

    temporarilyUnavailableBackoffBaseMs:
        description: 'The base period of time to wait between each TemporarilyUnavailable retry
                      attempt. The backoff time is linear such that the Nth retry waits for N times
                      the base backoff period.'
        set_at: [ startup, runtime ]
        cpp_varname: 'gTemporarilyUnavailableExceptionRetryBackoffBaseMs'
        cpp_vartype: AtomicWord<long long>
        default: 1000
        validator:
          gte: 0
        redact: false

    transactionTooLargeForCacheThreshold:
        description: "Threshold on the proportion of total dirty cache bytes that the running
                      transaction's dirty cache bytes can represent and still be considered
                      fullfillable on retry. If this threshold is exceeded, a
                      TransactionTooLargeForCache exception is thrown. Setting this parameter to 1.0
                      causes this check to be disabled, and TransactionTooLargeForCache exceptions
                      will not be thrown."
        set_at: [ startup, runtime ]
        cpp_varname: 'gTransactionTooLargeForCacheThreshold'
        cpp_vartype: AtomicWord<double>
        default: 0.75
        validator:
          gte: 0.0
          lte: 1.0
        redact: false
