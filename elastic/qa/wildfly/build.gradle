/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import org.elasticsearch.gradle.Architecture
import org.elasticsearch.gradle.VersionProperties

apply plugin: 'war'
apply plugin: 'elasticsearch.build'
apply plugin: 'elasticsearch.test.fixtures'
apply plugin: 'elasticsearch.distribution-download'

testFixtures.useFixture()

dependencies {
  providedCompile 'javax.enterprise:cdi-api:1.2'
  providedCompile 'org.jboss.spec.javax.annotation:jboss-annotations-api_1.2_spec:1.0.0.Final'
  providedCompile 'org.jboss.spec.javax.ws.rs:jboss-jaxrs-api_2.0_spec:1.0.0.Final'
  compile('org.jboss.resteasy:resteasy-jackson2-provider:3.0.19.Final') {
    exclude module: 'jackson-annotations'
    exclude module: 'jackson-core'
    exclude module: 'jackson-databind'
    exclude module: 'jackson-jaxrs-json-provider'
  }
  compile "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}"
  compile "com.fasterxml.jackson.core:jackson-core:${versions.jackson}"
  compile "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}"
  compile "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${versions.jackson}"
  compile "com.fasterxml.jackson.jaxrs:jackson-jaxrs-base:${versions.jackson}"
  compile "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:${versions.jackson}"
  compile "org.apache.logging.log4j:log4j-api:${versions.log4j}"
  compile "org.apache.logging.log4j:log4j-core:${versions.log4j}"
  compile project(path: ':client:rest-high-level', configuration: 'shadow')
  testCompile project(':test:framework')
}

war {
  archiveName 'example-app.war'
}

elasticsearch_distributions {
  docker {
    type = 'docker'
    architecture = Architecture.current()
    flavor = System.getProperty('tests.distribution', 'default')
    version = VersionProperties.getElasticsearch()
    failIfUnavailable = false // This ensures we skip this testing if Docker is unavailable
  }
}

preProcessFixture {
  dependsOn war, elasticsearch_distributions.docker
}

dockerCompose {
  if ('default'.equalsIgnoreCase(System.getProperty('tests.distribution', 'default'))) {
    useComposeFiles = ['docker-compose.yml']
  } else {
    useComposeFiles = ['docker-compose-oss.yml']
  }
}

task integTest(type: Test) {
  outputs.doNotCacheIf('Build cache is disabled for Docker tests') { true }
  maxParallelForks = '1'
  include '**/*IT.class'
}

check.dependsOn integTest

test.enabled = false

dependencyLicenses.enabled = false
dependenciesInfo.enabled = false

thirdPartyAudit.enabled = false


testingConventions {
  naming.clear()
  // We only have one "special" integration test here to connect to wildfly
  naming {
    IT {
      baseClass 'org.apache.lucene.util.LuceneTestCase'
    }
  }
}
