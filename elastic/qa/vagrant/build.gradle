/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

plugins {
  id 'java'
  id 'elasticsearch.build'
  id 'elasticsearch.vagrantsupport'
  id 'elasticsearch.vagrant'
}

dependencies {
  compile "junit:junit:${versions.junit}"
  compile "org.hamcrest:hamcrest-core:${versions.hamcrest}"
  compile "org.hamcrest:hamcrest-library:${versions.hamcrest}"
  compile "com.carrotsearch.randomizedtesting:randomizedtesting-runner:${versions.randomizedrunner}"

  compile "org.apache.httpcomponents:httpcore:${versions.httpcore}"
  compile "org.apache.httpcomponents:httpclient:${versions.httpclient}"
  compile "org.apache.httpcomponents:fluent-hc:${versions.httpclient}"
  compile "commons-codec:commons-codec:${versions.commonscodec}"
  compile "commons-logging:commons-logging:${versions.commonslogging}"

  compile project(':libs:core')

  // pulls in the jar built by this project and its dependencies
  packagingTest project(path: project.path, configuration: 'runtime')
}

List<String> plugins = []
for (Project subproj : project.rootProject.subprojects) {
  if (subproj.parent.path == ':plugins' || subproj.path.equals(':example-plugins:custom-settings')) {
    // add plugin as a dep
    dependencies {
      packaging project(path: "${subproj.path}", configuration: 'zip')
    }
    plugins.add(subproj.name)
  }
}
plugins = plugins.toSorted()

setupPackagingTest {
  doFirst {
    File expectedPlugins = file('build/plugins/expected')
    expectedPlugins.parentFile.mkdirs()
    expectedPlugins.setText(plugins.join('\n'), 'UTF-8')
  }
}

esvagrant {
  testClass 'org.elasticsearch.packaging.PackagingTests'
}

forbiddenApisMain {
  replaceSignatureFiles 'jdk-signatures'
}

// we don't have additional tests for the tests themselves
tasks.unitTest.enabled = false
// Tests are destructive and meant to run in a VM, they don't adhere to general conventions
testingConventions.enabled = false

// this project doesn't get published
tasks.dependencyLicenses.enabled = false
tasks.dependenciesInfo.enabled = false

tasks.thirdPartyAudit.ignoreMissingClasses (
        // commons-logging optional dependencies
        'org.apache.avalon.framework.logger.Logger',
        'org.apache.log.Hierarchy',
        'org.apache.log.Logger',
        'org.apache.log4j.Category',
        'org.apache.log4j.Level',
        'org.apache.log4j.Logger',
        'org.apache.log4j.Priority',
        // commons-logging provided dependencies
        'javax.servlet.ServletContextEvent',
        'javax.servlet.ServletContextListener'
)
