/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

plugins {
  id 'elasticsearch.distro-test'
}

dependencies {
  api "junit:junit:${versions.junit}"
  api "org.hamcrest:hamcrest:${versions.hamcrest}"
  api "com.carrotsearch.randomizedtesting:randomizedtesting-runner:${versions.randomizedrunner}"

  api "org.apache.httpcomponents:httpcore:${versions.httpcore}"
  api "org.apache.httpcomponents:httpclient:${versions.httpclient}"
  api "org.apache.httpcomponents:fluent-hc:${versions.httpclient}"
  api "org.apache.logging.log4j:log4j-api:${versions.log4j}"
  api "org.apache.logging.log4j:log4j-core:${versions.log4j}"
  api "org.apache.logging.log4j:log4j-jcl:${versions.log4j}"
  api "commons-codec:commons-codec:${versions.commonscodec}"
  api "commons-logging:commons-logging:${versions.commonslogging}"

  api project(':libs:elasticsearch-core')

  testImplementation "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}"
  testImplementation "com.fasterxml.jackson.core:jackson-core:${versions.jackson}"
  testImplementation "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}"
}

tasks.named('forbiddenApisTest').configure {
  replaceSignatureFiles 'jdk-signatures'
}

// we don't have additional tests for the tests themselves
tasks.named("test").configure { enabled = false }
// Tests are destructive and meant to run in a VM, they don't adhere to general conventions
tasks.named("testingConventions").configure { enabled = false }

// this project doesn't get published
tasks.named("dependencyLicenses").configure { enabled = false }
tasks.named("dependenciesInfo").configure {enabled = false }

tasks.named("thirdPartyAudit").configure { ignoreMissingClasses() }

tasks.register('destructivePackagingTest') {
  dependsOn 'destructiveDistroTest'
}

subprojects { Project platformProject ->
  tasks.register('packagingTest') {
    dependsOn 'distroTest'
  }

  vagrant {
    hostEnv 'VAGRANT_PROJECT_DIR', platformProject.projectDir.absolutePath
  }
}
