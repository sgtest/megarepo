////
Automatically generated by PainlessDocGenerator. Do not edit.
Rebuild by running `gradle generatePainlessApi`.
////

[[painless-api-reference-ZoneRules]]++ZoneRules++::
* ++[[painless-api-reference-ZoneRules-of-1]]static <<painless-api-reference-ZoneRules,ZoneRules>> link:{java8-javadoc}/java/time/zone/ZoneRules.html#of%2Djava.time.ZoneOffset%2D[of](<<painless-api-reference-ZoneOffset,ZoneOffset>>)++ (link:{java9-javadoc}/java/time/zone/ZoneRules.html#of%2Djava.time.ZoneOffset%2D[java 9])
* ++[[painless-api-reference-ZoneRules-of-5]]static <<painless-api-reference-ZoneRules,ZoneRules>> link:{java8-javadoc}/java/time/zone/ZoneRules.html#of%2Djava.time.ZoneOffset%2Djava.time.ZoneOffset%2Djava.util.List%2Djava.util.List%2Djava.util.List%2D[of](<<painless-api-reference-ZoneOffset,ZoneOffset>>, <<painless-api-reference-ZoneOffset,ZoneOffset>>, <<painless-api-reference-List,List>>, <<painless-api-reference-List,List>>, <<painless-api-reference-List,List>>)++ (link:{java9-javadoc}/java/time/zone/ZoneRules.html#of%2Djava.time.ZoneOffset%2Djava.time.ZoneOffset%2Djava.util.List%2Djava.util.List%2Djava.util.List%2D[java 9])
* ++[[painless-api-reference-ZoneRules-getDaylightSavings-1]]<<painless-api-reference-Duration,Duration>> link:{java8-javadoc}/java/time/zone/ZoneRules.html#getDaylightSavings%2Djava.time.Instant%2D[getDaylightSavings](<<painless-api-reference-Instant,Instant>>)++ (link:{java9-javadoc}/java/time/zone/ZoneRules.html#getDaylightSavings%2Djava.time.Instant%2D[java 9])
* ++[[painless-api-reference-ZoneRules-getOffset-1]]<<painless-api-reference-ZoneOffset,ZoneOffset>> link:{java8-javadoc}/java/time/zone/ZoneRules.html#getOffset%2Djava.time.Instant%2D[getOffset](<<painless-api-reference-Instant,Instant>>)++ (link:{java9-javadoc}/java/time/zone/ZoneRules.html#getOffset%2Djava.time.Instant%2D[java 9])
* ++[[painless-api-reference-ZoneRules-getStandardOffset-1]]<<painless-api-reference-ZoneOffset,ZoneOffset>> link:{java8-javadoc}/java/time/zone/ZoneRules.html#getStandardOffset%2Djava.time.Instant%2D[getStandardOffset](<<painless-api-reference-Instant,Instant>>)++ (link:{java9-javadoc}/java/time/zone/ZoneRules.html#getStandardOffset%2Djava.time.Instant%2D[java 9])
* ++[[painless-api-reference-ZoneRules-getTransition-1]]<<painless-api-reference-ZoneOffsetTransition,ZoneOffsetTransition>> link:{java8-javadoc}/java/time/zone/ZoneRules.html#getTransition%2Djava.time.LocalDateTime%2D[getTransition](<<painless-api-reference-LocalDateTime,LocalDateTime>>)++ (link:{java9-javadoc}/java/time/zone/ZoneRules.html#getTransition%2Djava.time.LocalDateTime%2D[java 9])
* ++[[painless-api-reference-ZoneRules-getTransitionRules-0]]<<painless-api-reference-List,List>> link:{java8-javadoc}/java/time/zone/ZoneRules.html#getTransitionRules%2D%2D[getTransitionRules]()++ (link:{java9-javadoc}/java/time/zone/ZoneRules.html#getTransitionRules%2D%2D[java 9])
* ++[[painless-api-reference-ZoneRules-getTransitions-0]]<<painless-api-reference-List,List>> link:{java8-javadoc}/java/time/zone/ZoneRules.html#getTransitions%2D%2D[getTransitions]()++ (link:{java9-javadoc}/java/time/zone/ZoneRules.html#getTransitions%2D%2D[java 9])
* ++[[painless-api-reference-ZoneRules-getValidOffsets-1]]<<painless-api-reference-List,List>> link:{java8-javadoc}/java/time/zone/ZoneRules.html#getValidOffsets%2Djava.time.LocalDateTime%2D[getValidOffsets](<<painless-api-reference-LocalDateTime,LocalDateTime>>)++ (link:{java9-javadoc}/java/time/zone/ZoneRules.html#getValidOffsets%2Djava.time.LocalDateTime%2D[java 9])
* ++[[painless-api-reference-ZoneRules-isDaylightSavings-1]]boolean link:{java8-javadoc}/java/time/zone/ZoneRules.html#isDaylightSavings%2Djava.time.Instant%2D[isDaylightSavings](<<painless-api-reference-Instant,Instant>>)++ (link:{java9-javadoc}/java/time/zone/ZoneRules.html#isDaylightSavings%2Djava.time.Instant%2D[java 9])
* ++[[painless-api-reference-ZoneRules-isFixedOffset-0]]boolean link:{java8-javadoc}/java/time/zone/ZoneRules.html#isFixedOffset%2D%2D[isFixedOffset]()++ (link:{java9-javadoc}/java/time/zone/ZoneRules.html#isFixedOffset%2D%2D[java 9])
* ++[[painless-api-reference-ZoneRules-isValidOffset-2]]boolean link:{java8-javadoc}/java/time/zone/ZoneRules.html#isValidOffset%2Djava.time.LocalDateTime%2Djava.time.ZoneOffset%2D[isValidOffset](<<painless-api-reference-LocalDateTime,LocalDateTime>>, <<painless-api-reference-ZoneOffset,ZoneOffset>>)++ (link:{java9-javadoc}/java/time/zone/ZoneRules.html#isValidOffset%2Djava.time.LocalDateTime%2Djava.time.ZoneOffset%2D[java 9])
* ++[[painless-api-reference-ZoneRules-nextTransition-1]]<<painless-api-reference-ZoneOffsetTransition,ZoneOffsetTransition>> link:{java8-javadoc}/java/time/zone/ZoneRules.html#nextTransition%2Djava.time.Instant%2D[nextTransition](<<painless-api-reference-Instant,Instant>>)++ (link:{java9-javadoc}/java/time/zone/ZoneRules.html#nextTransition%2Djava.time.Instant%2D[java 9])
* ++[[painless-api-reference-ZoneRules-previousTransition-1]]<<painless-api-reference-ZoneOffsetTransition,ZoneOffsetTransition>> link:{java8-javadoc}/java/time/zone/ZoneRules.html#previousTransition%2Djava.time.Instant%2D[previousTransition](<<painless-api-reference-Instant,Instant>>)++ (link:{java9-javadoc}/java/time/zone/ZoneRules.html#previousTransition%2Djava.time.Instant%2D[java 9])
* Inherits methods from ++<<painless-api-reference-Object,Object>>++
