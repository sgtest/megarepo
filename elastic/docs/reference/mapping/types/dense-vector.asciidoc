[role="xpack"]
[[dense-vector]]
=== Dense vector field type
++++
<titleabbrev>Dense vector</titleabbrev>
++++

The `dense_vector` field type stores dense vectors of numeric values. Dense
vector fields are primarily used for <<knn-search,k-nearest neighbor (kNN) search>>.

The `dense_vector` type does not support aggregations or sorting.

You add a `dense_vector` field as an array of numeric values
based on <<dense-vector-params, `element_type`>> with
`float` by default:

[source,console]
--------------------------------------------------
PUT my-index
{
  "mappings": {
    "properties": {
      "my_vector": {
        "type": "dense_vector",
        "dims": 3
      },
      "my_text" : {
        "type" : "keyword"
      }
    }
  }
}

PUT my-index/_doc/1
{
  "my_text" : "text1",
  "my_vector" : [0.5, 10, 6]
}

PUT my-index/_doc/2
{
  "my_text" : "text2",
  "my_vector" : [-0.5, 10, 10]
}

--------------------------------------------------

NOTE: Unlike most other data types, dense vectors are always single-valued.
It is not possible to store multiple values in one `dense_vector` field.

[[index-vectors-knn-search]]
==== Index vectors for kNN search

include::{es-repo-dir}/search/search-your-data/knn-search.asciidoc[tag=knn-def]

Dense vector fields can be used to rank documents in
<<query-dsl-script-score-query,`script_score` queries>>. This lets you perform
a brute-force kNN search by scanning all documents and ranking them by
similarity.

In many cases, a brute-force kNN search is not efficient enough. For this
reason, the `dense_vector` type supports indexing vectors into a specialized
data structure to support fast kNN retrieval through the
<<knn-search-api, kNN search API>>. You can enable indexing by setting the
`index` parameter:

[source,console]
--------------------------------------------------
PUT my-index-2
{
  "mappings": {
    "properties": {
      "my_vector": {
        "type": "dense_vector",
        "dims": 3,
        "index": true,
        "similarity": "dot_product" <1>
      }
    }
  }
}
--------------------------------------------------
<1> When `index` is enabled, you must define the vector similarity to use in kNN search

{es} uses the https://arxiv.org/abs/1603.09320[HNSW algorithm] to support
efficient kNN search. Like most kNN algorithms, HNSW is an approximate method
that sacrifices result accuracy for improved speed.

NOTE: Indexing vectors for approximate kNN search is an expensive process. It
can take substantial time to ingest documents that contain vector fields with
`index` enabled.

Dense vector fields cannot be indexed if they are within
<<nested, `nested`>> mappings.

[role="child_attributes"]
[[dense-vector-params]]
==== Parameters for dense vector fields

The following mapping parameters are accepted:

[[dense-vector-element-type]]
`element_type`::
(Optional, string)
The data type used to encode vectors. The supported data types are
`float` (default) and `byte`. `float` indexes a 4-byte floating-point
value per dimension. `byte` indexes a 1-byte integer value per dimension.
Using `byte` can result in a substantially smaller index size with the
trade off of lower precision. Vectors using `byte` require dimensions with
integer values between -128 to 127, inclusive for both indexing and searching.

`dims`::
(Required, integer)
Number of vector dimensions. Can't exceed `1024` for indexed vectors
(`"index": true`), or `2048` for non-indexed vectors.

`index`::
(Optional, Boolean)
If `true`, you can search this field using the <<knn-search-api, kNN search
API>>. Defaults to `false`.

[[dense-vector-similarity]]
`similarity`::
(Required^*^, string)
The vector similarity metric to use in kNN search. Documents are ranked by
their vector field's similarity to the query vector. The `_score` of each
document will be derived from the similarity, in a way that ensures scores are
positive and that a larger score corresponds to a higher ranking.
+
^*^ If `index` is `true`, this parameter is required.
+
.Valid values for `similarity`
[%collapsible%open]
====
`l2_norm`:::
Computes similarity based on the L^2^ distance (also known as Euclidean
distance) between the vectors. The document `_score` is computed as
`1 / (1 + l2_norm(query, vector)^2)`.

`dot_product`:::
Computes the dot product of two vectors. This option provides an optimized way
to perform cosine similarity. The constraints and computed score are defined
by `element_type`.
+
When `element_type` is `float`, all vectors must be unit length, including both
document and query vectors. The document `_score` is computed as
`(1 + dot_product(query, vector)) / 2`.
+
When `element_type` is `byte`, all vectors must have the same
length including both document and query vectors or results will be inaccurate.
The document `_score` is computed as
`0.5 + (dot_product(query, vector) / (32768 * dims))`
where `dims` is the number of dimensions per vector.

`cosine`:::
Computes the cosine similarity. Note that the most efficient way to perform
cosine similarity is to normalize all vectors to unit length, and instead use
`dot_product`. You should only use `cosine` if you need to preserve the
original vectors and cannot normalize them in advance. The document `_score`
is computed as `(1 + cosine(query, vector)) / 2`. The `cosine` similarity does
not allow vectors with zero magnitude, since cosine is not defined in this
case.
====

NOTE: Although they are conceptually related, the `similarity` parameter is
different from <<text,`text`>> field <<similarity,`similarity`>> and accepts
a distinct set of options.

[[dense-vector-index-options]]
`index_options`::
(Optional, object)
An optional section that configures the kNN indexing algorithm. The HNSW
algorithm has two internal parameters that influence how the data structure is
built. These can be adjusted to improve the accuracy of results, at the
expense of slower indexing speed. When `index_options` is provided, all of its
properties must be defined.
+
.Properties of `index_options`
[%collapsible%open]
====
`type`:::
(Required, string)
The type of kNN algorithm to use. Currently only `hnsw` is supported.

`m`:::
(Required, integer)
The number of neighbors each node will be connected to in the HNSW graph.
Defaults to `16`.

`ef_construction`:::
(Required, integer)
The number of candidates to track while assembling the list of nearest
neighbors for each new node. Defaults to `100`.
====

[[dense-vector-synthetic-source]]
==== Synthetic `_source`

IMPORTANT: Synthetic `_source` is Generally Available only for TSDB indices
(indices that have `index.mode` set to `time_series`). For other indices
synthetic `_source` is in technical preview. Features in technical preview may
be changed or removed in a future release. Elastic will apply best effort to fix
any issues, but features in technical preview are not subject to the support SLA
of official GA features.

`dense_vector` fields support <<synthetic-source,synthetic `_source`>> .
