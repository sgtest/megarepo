[[size-your-shards]]
== Size your shards

To protect against hardware failure and increase capacity, {es} stores copies of
an indexâ€™s data across multiple shards on multiple nodes. The number and size of
these shards can have a significant impact on your cluster's health. One common
problem is _oversharding_, a situation in which a cluster with a large number of
shards becomes unstable.

[discrete]
[[create-a-sharding-strategy]]
=== Create a sharding strategy

The best way to prevent oversharding and other shard-related issues
is to create a sharding strategy. A sharding strategy helps you determine and
maintain the optimal number of shards for your cluster while limiting the size
of those shards.

Unfortunately, there is no one-size-fits-all sharding strategy. A strategy that
works in one environment may not scale in another. A good sharding strategy must
account for your infrastructure, use case, and performance expectations.

The best way to create a sharding strategy is to benchmark your production data
on production hardware using the same queries and indexing loads you'd see in
production. For our recommended methodology, watch the
https://www.elastic.co/elasticon/conf/2016/sf/quantitative-cluster-sizing[quantitative
cluster sizing video]. As you test different shard configurations, use {kib}'s
{kibana-ref}/elasticsearch-metrics.html[{es} monitoring tools] to track your
cluster's stability and performance.

The following sections provide some reminders and guidelines you should consider
when designing your sharding strategy. If your cluster is already oversharded,
see <<reduce-cluster-shard-count>>.

[discrete]
[[shard-sizing-considerations]]
=== Sizing considerations

Keep the following things in mind when building your sharding strategy.

[discrete]
[[single-thread-per-shard]]
==== Searches run on a single thread per shard

Most searches hit multiple shards. Each shard runs the search on a single
CPU thread. While a shard can run multiple concurrent searches, searches across a
large number of shards can deplete a node's <<modules-threadpool,search
thread pool>>. This can result in low throughput and slow search speeds.

[discrete]
[[each-shard-has-overhead]]
==== Each shard has overhead

Every shard uses memory and CPU resources. In most cases, a small
set of large shards uses fewer resources than many small shards.

Segments play a big role in a shard's resource usage. Most shards contain
several segments, which store its index data. {es} keeps segment metadata in
JVM heap memory so it can be quickly retrieved for searches. As a
shard grows, its segments are <<index-modules-merge,merged>> into fewer, larger
segments. This decreases the number of segments, which means less metadata is
kept in heap memory.

[discrete]
[[shard-auto-balance]]
==== {es} automatically balances shards within a data tier

A cluster's nodes are grouped into <<data-tiers,data tiers>>. Within each tier,
{es} attempts to spread an index's shards across as many nodes as possible. When
you add a new node or a node fails, {es} automatically rebalances the index's
shards across the tier's remaining nodes.

[discrete]
[[shard-size-best-practices]]
=== Best practices

Where applicable, use the following best practices as starting points for your
sharding strategy.

[discrete]
[[delete-indices-not-documents]]
==== Delete indices, not documents

Deleted documents aren't immediately removed from {es}'s file system.
Instead, {es} marks the document as deleted on each related shard. The marked
document will continue to use resources until it's removed during a periodic
<<index-modules-merge,segment merge>>.

When possible, delete entire indices instead. {es} can immediately remove
deleted indices directly from the file system and free up resources.

[discrete]
[[use-ds-ilm-for-time-series]]
==== Use data streams and {ilm-init} for time series data

<<data-streams,Data streams>> let you store time series data across multiple,
time-based backing indices. You can use <<index-lifecycle-management,{ilm}
({ilm-init})>> to automatically manage these backing indices.

One advantage of this setup is
<<getting-started-index-lifecycle-management,automatic rollover>>, which creates
a new write index when the current one meets a defined `max_primary_shard_size`,
`max_age`, `max_docs`, or `max_size` threshold. When an index is no longer
needed, you can use {ilm-init} to automatically delete it and free up resources.

{ilm-init} also makes it easy to change your sharding strategy over time:

* *Want to decrease the shard count for new indices?* +
Change the <<index-number-of-shards,`index.number_of_shards`>> setting in the
data stream's <<data-streams-change-mappings-and-settings,matching index
template>>.

* *Want larger shards?* +
Increase your {ilm-init} policy's <<ilm-rollover,rollover threshold>>.

* *Need indices that span shorter intervals?* +
Offset the increased shard count by deleting older indices sooner. You can do
this by lowering the `min_age` threshold for your policy's
<<ilm-index-lifecycle,delete phase>>.

Every new backing index is an opportunity to further tune your strategy.

[discrete]
[[shard-size-recommendation]]
==== Aim for shard sizes between 10GB and 50GB

Large shards may make a cluster less likely to recover from failure. When a node
fails, {es} rebalances the node's shards across the data tier's remaining nodes.
Large shards can be harder to move across a network and may tax node resources.

While not a hard limit, shards between 10GB and 50GB tend to work well for logs
and time series data. You may be able to use larger shards depending on
your network and use case. Smaller shards may be appropriate for
{enterprise-search-ref}/index.html[Enterprise Search] and similar use cases.

If you use {ilm-init}, set the <<ilm-rollover,rollover action>>'s
`max_primary_shard_size` threshold to `50gb` to avoid shards larger than 50GB.

To see the current size of your shards, use the <<cat-shards,cat shards API>>.

[source,console]
----
GET _cat/shards?v=true&h=index,prirep,shard,store&s=prirep,store&bytes=gb
----
// TEST[setup:my_index]

The `pri.store.size` value shows the combined size of all primary shards for
the index.

[source,txt]
----
index                                 prirep shard store
.ds-my-data-stream-2099.05.06-000001  p      0      50gb
...
----
// TESTRESPONSE[non_json]
// TESTRESPONSE[s/\.ds-my-data-stream-2099\.05\.06-000001/my-index-000001/]
// TESTRESPONSE[s/50gb/.*/]

[discrete]
[[shard-count-recommendation]]
==== Aim for 20 shards or fewer per GB of heap memory

The number of shards a node can hold is proportional to the node's
heap memory. For example, a node with 30GB of heap memory should
have at most 600 shards. The further below this limit you can keep your nodes,
the better. If you find your nodes exceeding more than 20 shards per GB,
consider adding another node.

Some system indices for {enterprise-search-ref}/index.html[Enterprise Search]
are nearly empty and rarely used. Due to their low overhead, you shouldn't count
shards for these indices toward a node's shard limit.

To check the current size of each node's heap, use the <<cat-nodes,cat nodes
API>>.

[source,console]
----
GET _cat/nodes?v=true&h=heap.current
----
// TEST[setup:my_index]

You can use the <<cat-shards,cat shards API>> to check the number of shards per
node.

[source,console]
----
GET _cat/shards?v=true
----
// TEST[setup:my_index]

[discrete]
[[avoid-node-hotspots]]
==== Avoid node hotspots

If too many shards are allocated to a specific node, the node can become a
hotspot. For example, if a single node contains too many shards for an index
with a high indexing volume, the node is likely to have issues.

To prevent hotspots, use the
<<total-shards-per-node,`index.routing.allocation.total_shards_per_node`>> index
setting to explicitly limit the number of shards on a single node. You can
configure `index.routing.allocation.total_shards_per_node` using the
<<indices-update-settings,update index settings API>>.

[source,console]
--------------------------------------------------
PUT my-index-000001/_settings
{
  "index" : {
    "routing.allocation.total_shards_per_node" : 5
  }
}
--------------------------------------------------
// TEST[setup:my_index]

[discrete]
[[reduce-cluster-shard-count]]
=== Reduce a cluster's shard count

If your cluster is already oversharded, you can use one or more of the following
methods to reduce its shard count.

[discrete]
[[create-indices-that-cover-longer-time-periods]]
==== Create indices that cover longer time periods

If you use {ilm-init} and your retention policy allows it, avoid using a
`max_age` threshold for the rollover action. Instead, use
`max_primary_shard_size` to avoid creating empty indices or many small shards.

If your retention policy requires a `max_age` threshold, increase it to create
indices that cover longer time intervals. For example, instead of creating daily
indices, you can create indices on a weekly or monthly basis.

[discrete]
[[delete-empty-indices]]
==== Delete empty or unneeded indices

If you're using {ilm-init} and roll over indices based on a `max_age` threshold,
you can inadvertently create indices with no documents. These empty indices
provide no benefit but still consume resources.

You can find these empty indices using the <<cat-count,cat count API>>.

[source,console]
----
GET _cat/count/my-index-000001?v=true
----
// TEST[setup:my_index]

Once you have a list of empty indices, you can delete them using the
<<indices-delete-index,delete index API>>. You can also delete any other
unneeded indices.

[source,console]
----
DELETE my-index-000001
----
// TEST[setup:my_index]

[discrete]
[[force-merge-during-off-peak-hours]]
==== Force merge during off-peak hours

If you no longer write to an index, you can use the <<indices-forcemerge,force
merge API>> to <<index-modules-merge,merge>> smaller segments into larger ones.
This can reduce shard overhead and improve search speeds. However, force merges
are resource-intensive. If possible, run the force merge during off-peak hours.

[source,console]
----
POST my-index-000001/_forcemerge
----
// TEST[setup:my_index]

[discrete]
[[shrink-existing-index-to-fewer-shards]]
==== Shrink an existing index to fewer shards

If you no longer write to an index, you can use the
<<indices-shrink-index,shrink index API>> to reduce its shard count.

{ilm-init} also has a <<ilm-shrink,shrink action>> for indices in the
warm phase.

[discrete]
[[combine-smaller-indices]]
==== Combine smaller indices

You can also use the <<docs-reindex,reindex API>> to combine indices
with similar mappings into a single large index. For time series data, you could
reindex indices for short time periods into a new index covering a
longer period. For example, you could reindex daily indices from October with a
shared index pattern, such as `my-index-2099.10.11`, into a monthly
`my-index-2099.10` index. After the reindex, delete the smaller indices.

[source,console]
----
POST _reindex
{
  "source": {
    "index": "my-index-2099.10.*"
  },
  "dest": {
    "index": "my-index-2099.10"
  }
}
----

[discrete]
[[troubleshoot-shard-related-errors]]
=== Troubleshoot shard-related errors

Hereâ€™s how to resolve common shard-related errors.

[discrete]
==== this action would add [x] total shards, but this cluster currently has [y]/[z] maximum shards open;

The <<cluster-max-shards-per-node,`cluster.max_shards_per_node`>> cluster
setting limits the maximum number of open shards for a cluster. This error
indicates an action would exceed this limit.

If you're confident your changes won't destabilize the cluster, you can
temporarily increase the limit using the <<cluster-update-settings,update
cluster settings API>> and retry the action.

[source,console]
----
PUT _cluster/settings
{
  "transient" : {
    "cluster.max_shards_per_node": 1200
  }
}
----

This increase should only be temporary. As a long-term solution, we recommend
you add nodes to the oversharded data tier or
<<reduce-cluster-shard-count,reduce your cluster's shard count>>. To get a
cluster's current shard count after making changes, use the
<<cluster-stats,cluster stats API>>.

[source,console]
----
GET _cluster/stats?filter_path=indices.shards.total
----

When a long-term solution is in place, we recommend you reset the
`cluster.max_shards_per_node` limit.

[source,console]
----
PUT _cluster/settings
{
  "transient" : {
    "cluster.max_shards_per_node": null
  }
}
----
