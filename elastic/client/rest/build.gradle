import de.thetaphi.forbiddenapis.gradle.CheckForbiddenApis

/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */
apply plugin: 'elasticsearch.build'
apply plugin: 'elasticsearch.publish'

targetCompatibility = JavaVersion.VERSION_1_8
sourceCompatibility = JavaVersion.VERSION_1_8

group = 'org.elasticsearch.client'
archivesBaseName = 'elasticsearch-rest-client'

// REST client is published under the Elastic License
ext.projectLicenses = ['Elastic License 2.0': ext.elasticLicenseUrl]

dependencies {
  api "org.apache.httpcomponents:httpclient:${versions.httpclient}"
  api "org.apache.httpcomponents:httpcore:${versions.httpcore}"
  api "org.apache.httpcomponents:httpasyncclient:${versions.httpasyncclient}"
  api "org.apache.httpcomponents:httpcore-nio:${versions.httpcore}"
  api "commons-codec:commons-codec:${versions.commonscodec}"
  api "commons-logging:commons-logging:${versions.commonslogging}"

  testImplementation project(":client:test")
  testImplementation "com.carrotsearch.randomizedtesting:randomizedtesting-runner:${versions.randomizedrunner}"
  testImplementation "junit:junit:${versions.junit}"
  testImplementation "org.hamcrest:hamcrest:${versions.hamcrest}"
  testImplementation "org.elasticsearch:securemock:${versions.securemock}"
  testImplementation "org.elasticsearch:mocksocket:${versions.mocksocket}"
}

tasks.named("processResources").configure {
  expand versions: versions
}

tasks.withType(CheckForbiddenApis).configureEach {
  //client does not depend on server, so only jdk and http signatures should be checked
  replaceSignatureFiles('jdk-signatures', 'http-signatures')
}

tasks.named("forbiddenPatterns").configure {
  exclude '**/*.der'
}

tasks.named('forbiddenApisTest').configure {
  //we are using jdk-internal instead of jdk-non-portable to allow for com.sun.net.httpserver.* usage
  bundledSignatures -= 'jdk-non-portable'
  bundledSignatures += 'jdk-internal'
}

// JarHell is part of es server, which we don't want to pull in
// TODO: Not anymore. Now in :libs:elasticsearch-core
tasks.named("jarHell").configure {
  enabled = false
}

tasks.named("testingConventions").configure {
  naming.clear()
  naming {
    Tests {
      baseClass 'org.elasticsearch.client.RestClientTestCase'
    }
  }
}

tasks.named("thirdPartyAudit").configure {
  ignoreMissingClasses(
          //commons-logging optional dependencies
          'org.apache.avalon.framework.logger.Logger',
          'org.apache.log.Hierarchy',
          'org.apache.log.Logger',
          'org.apache.log4j.Category',
          'org.apache.log4j.Level',
          'org.apache.log4j.Logger',
          'org.apache.log4j.Priority',
          //commons-logging provided dependencies
          'javax.servlet.ServletContextEvent',
          'javax.servlet.ServletContextListener'
  )
}
