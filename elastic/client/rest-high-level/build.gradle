import org.elasticsearch.gradle.test.RestIntegTestTask
import org.elasticsearch.gradle.info.BuildParams

/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */
apply plugin: 'elasticsearch.testclusters'
apply plugin: 'elasticsearch.build'
apply plugin: 'elasticsearch.rest-test'
apply plugin: 'elasticsearch.publish'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'elasticsearch.rest-resources'

group = 'org.elasticsearch.client'
archivesBaseName = 'elasticsearch-rest-high-level-client'

// HLRC is published under the Elastic License
ext.projectLicenses = ['Elastic License 2.0': ext.elasticLicenseUrl]

restResources {
  //we need to copy the yaml spec so we can check naming (see RestHighlevelClientTests#testApiNamingConventions)
  restApi {
    includeCore '*'
  }
}

dependencies {
  api project(':modules:mapper-extras')
  api project(':modules:parent-join')
  api project(':modules:aggs-matrix-stats')
  api project(':modules:rank-eval')
  api project(':modules:lang-mustache')

  // Don't bundle the server or low-level rest client JARs in the shadow JAR since these get published to Maven Central
  shadow project(':server')
  shadow project(':client:rest')

  testImplementation project(':client:test')
  testImplementation project(':test:framework')
  testImplementation "com.carrotsearch.randomizedtesting:randomizedtesting-runner:${versions.randomizedrunner}"
  testImplementation "junit:junit:${versions.junit}"
  //this is needed to make RestHighLevelClientTests#testApiNamingConventions work from IDEs
  testImplementation project(":rest-api-spec")
  // Needed for serialization tests:
  // (In order to serialize a server side class to a client side class or the other way around)
  testImplementation(project(':x-pack:plugin:core')) {
    exclude group: 'org.elasticsearch', module: 'elasticsearch-rest-high-level-client'
  }
  testImplementation(project(':x-pack:plugin:eql'))
}

tasks.named('forbiddenApisMain').configure {
  // core does not depend on the httpclient for compile so we add the signatures here. We don't add them for test as they are already
  // specified
  addSignatureFiles 'http-signatures'
  signaturesFiles += files('src/main/resources/forbidden/rest-high-level-signatures.txt')
}

File nodeCert = file("./testnode.crt")
File nodeTrustStore = file("./testnode.jks")
File pkiTrustCert = file("./src/test/resources/org/elasticsearch/client/security/delegate_pki/testRootCA.crt")

tasks.named("integTest").configure {
  systemProperty 'tests.rest.async', 'false'
  systemProperty 'tests.rest.cluster.username', System.getProperty('tests.rest.cluster.username', 'test_user')
  systemProperty 'tests.rest.cluster.password', System.getProperty('tests.rest.cluster.password', 'test-user-password')
}

// Requires https://github.com/elastic/elasticsearch/pull/64403 to have this moved to task avoidance api.
TaskProvider<RestIntegTestTask> asyncIntegTest = tasks.register("asyncIntegTest", RestIntegTestTask) {
    systemProperty 'tests.rest.async', 'true'
    systemProperty 'tests.rest.cluster.username', System.getProperty('tests.rest.cluster.username', 'test_user')
    systemProperty 'tests.rest.cluster.password', System.getProperty('tests.rest.cluster.password', 'test-user-password')
}

tasks.named("check").configure {
  dependsOn(asyncIntegTest)
}

testClusters.all {
  testDistribution = 'DEFAULT'
  systemProperty 'es.scripting.update.ctx_in_params', 'false'
  setting 'reindex.remote.whitelist', '[ "[::1]:*", "127.0.0.1:*" ]'
  setting 'xpack.license.self_generated.type', 'trial'
  setting 'xpack.security.enabled', 'true'
  setting 'xpack.security.authc.token.enabled', 'true'
  setting 'xpack.security.authc.api_key.enabled', 'true'
  setting 'xpack.security.http.ssl.enabled', 'false'
  setting 'xpack.security.transport.ssl.enabled', 'false'
  // Truststore settings are not used since TLS is not enabled. Included for testing the get certificates API
  setting 'xpack.security.http.ssl.certificate_authorities', 'testnode.crt'
  setting 'xpack.security.transport.ssl.truststore.path', 'testnode.jks'
  setting 'xpack.security.authc.realms.file.default_file.order', '0'
  setting 'xpack.security.authc.realms.native.default_native.order', '1'
  setting 'xpack.security.authc.realms.pki.pki1.order', '2'
  setting 'xpack.security.authc.realms.pki.pki1.certificate_authorities', '[ "testRootCA.crt" ]'
  setting 'xpack.security.authc.realms.pki.pki1.delegation.enabled', 'true'

  setting 'indices.lifecycle.poll_interval', '1000ms'
  setting 'indices.lifecycle.history_index_enabled', 'false'
  keystore 'xpack.security.transport.ssl.truststore.secure_password', 'testnode'
  extraConfigFile 'roles.yml', file('roles.yml')
  user username: System.getProperty('tests.rest.cluster.username', 'test_user'),
    password: System.getProperty('tests.rest.cluster.password', 'test-user-password'),
    role: System.getProperty('tests.rest.cluster.role', 'admin')
  user username: 'admin_user', password: 'admin-password'

  extraConfigFile nodeCert.name, nodeCert
  extraConfigFile nodeTrustStore.name, nodeTrustStore
  extraConfigFile pkiTrustCert.name, pkiTrustCert
}
