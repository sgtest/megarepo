import org.elasticsearch.gradle.internal.test.RestIntegTestTask
import org.elasticsearch.gradle.internal.info.BuildParams

/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */
apply plugin: 'elasticsearch.build'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'elasticsearch.rest-resources'

group = 'org.elasticsearch.client'
archivesBaseName = 'elasticsearch-rest-high-level-client'

restResources {
  //we need to copy the yaml spec so we can check naming (see RestHighlevelClientTests#testApiNamingConventions)
  restApi {
    include '*'
  }
}

dependencies {
  api project(':modules:mapper-extras')
  api project(':modules:parent-join')
  api project(':modules:rank-eval')
  api project(':modules:lang-mustache')
  api project(':modules:aggregations')

  // Don't bundle the server or low-level rest client JARs in the shadow JAR since these get published to Maven Central
  shadow project(':server')
  shadow project(':client:rest')

  testImplementation project(':client:test')
  testImplementation project(':test:framework')
  testImplementation "com.carrotsearch.randomizedtesting:randomizedtesting-runner:${versions.randomizedrunner}"
  testImplementation "junit:junit:${versions.junit}"
  //this is needed to make RestHighLevelClientTests#testApiNamingConventions work from IDEs
  testImplementation project(":rest-api-spec")
  // Needed for serialization tests:
  // (In order to serialize a server side class to a client side class or the other way around)
  testImplementation(project(':x-pack:plugin:core')) {
    exclude group: 'org.elasticsearch', module: 'elasticsearch-rest-high-level-client'
  }
  testImplementation(project(':modules:ingest-geoip')) {
    exclude group: 'com.fasterxml.jackson.core', module: 'jackson-annotations'
  }
  testImplementation(project(':x-pack:plugin:eql'))
  testImplementation(project(':x-pack:plugin:ql:test-fixtures'))
}

tasks.named('forbiddenApisMain').configure {
  // core does not depend on the httpclient for compile so we add the signatures here. We don't add them for test as they are already
  // specified
  addSignatureFiles 'http-signatures'
  signaturesFiles += files('src/main/resources/forbidden/rest-high-level-signatures.txt')
}

tasks.named('splitPackagesAudit').configure {
  // the client package should be owned by the client, but server has some classes there too
  ignoreClasses 'org.elasticsearch.client.*'
}

// we don't have tests now, as HLRC is in the process of being removed
tasks.named("test").configure {enabled = false }

// not published, so no need for javadoc
tasks.named("javadoc").configure { enabled = false }
