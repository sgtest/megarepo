/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import org.elasticsearch.gradle.precommit.PrecommitTasks

apply plugin: 'nebula.maven-base-publish'
apply plugin: 'nebula.maven-scm'

archivesBaseName = 'elasticsearch-nio'

publishing {
  publications {
    nebula {
      artifactId = archivesBaseName
    }
  }
}

dependencies {
  compile "org.apache.logging.log4j:log4j-api:${versions.log4j}"

  testCompile "com.carrotsearch.randomizedtesting:randomizedtesting-runner:${versions.randomizedrunner}"
  testCompile "junit:junit:${versions.junit}"
  testCompile "org.hamcrest:hamcrest-all:${versions.hamcrest}"

  if (isEclipse == false || project.path == ":libs:elasticsearch-nio-tests") {
      testCompile("org.elasticsearch.test:framework:${version}") {
        exclude group: 'org.elasticsearch', module: 'elasticsearch-nio'
      }
  }
}

if (isEclipse) {
  // in eclipse the project is under a fake root, we need to change around the source sets
  sourceSets {
    if (project.path == ":libs:elasticsearch-nio") {
      main.java.srcDirs = ['java']
      main.resources.srcDirs = ['resources']
    } else {
      test.java.srcDirs = ['java']
      test.resources.srcDirs = ['resources']
    }
  }
}

forbiddenApisMain {
  // elasticsearch-nio does not depend on core, so only jdk signatures should be checked
  // es-all is not checked as we connect and accept sockets
  signaturesURLs = [PrecommitTasks.getResource('/forbidden/jdk-signatures.txt')]
}

//JarHell is part of es core, which we don't want to pull in
jarHell.enabled=false

thirdPartyAudit.excludes = [
        'org/osgi/framework/AdaptPermission',
        'org/osgi/framework/AdminPermission',
        'org/osgi/framework/Bundle',
        'org/osgi/framework/BundleActivator',
        'org/osgi/framework/BundleContext',
        'org/osgi/framework/BundleEvent',
        'org/osgi/framework/SynchronousBundleListener',
        'org/osgi/framework/wiring/BundleWire',
        'org/osgi/framework/wiring/BundleWiring'
]
