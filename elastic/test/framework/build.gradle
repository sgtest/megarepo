/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */
import org.elasticsearch.gradle.info.BuildParams;

apply plugin: 'elasticsearch.build'
apply plugin: 'elasticsearch.publish'

dependencies {
  api project(":client:rest")
  api project(":client:sniffer")
  api project(':libs:elasticsearch-nio')
  api project(':libs:elasticsearch-ssl-config')
  api project(":server")
  api project(":libs:elasticsearch-cli")
  api "com.carrotsearch.randomizedtesting:randomizedtesting-runner:${versions.randomizedrunner}"
  api "junit:junit:${versions.junit}"
  api "org.hamcrest:hamcrest:${versions.hamcrest}"
  api "org.apache.lucene:lucene-test-framework:${versions.lucene}"
  api "org.apache.lucene:lucene-codecs:${versions.lucene}"
  api "commons-logging:commons-logging:${versions.commonslogging}"
  api "commons-codec:commons-codec:${versions.commonscodec}"
  api "org.elasticsearch:securemock:${versions.securemock}"
  api "org.elasticsearch:mocksocket:${versions.mocksocket}"

  // json schema validation dependencies
  api "com.fasterxml.jackson.core:jackson-core:${versions.jackson}"
  api "com.networknt:json-schema-validator:${versions.networknt_json_schema_validator}"
  api "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}"
  api "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}"
  api "org.apache.commons:commons-compress:1.19"
  api "org.apache.commons:commons-lang3:${versions.commons_lang3}"
}

tasks.named("compileJava").configure { options.compilerArgs << '-Xlint:-cast,-unchecked' }

// the main files are actually test files, so use the appropriate forbidden api sigs
tasks.named('forbiddenApisMain').configure {
  replaceSignatureFiles 'jdk-signatures', 'es-all-signatures', 'es-test-signatures'
}

// TODO: should we have licenses for our test deps?
tasks.named("dependencyLicenses").configure { enabled = false }
tasks.named("dependenciesInfo").configure { enabled = false }
tasks.named("dependenciesGraph").configure { enabled = false }

tasks.named("thirdPartyAudit").configure {
  ignoreMissingClasses(
          // classes are missing
          'com.github.luben.zstd.ZstdInputStream',
          'com.github.luben.zstd.ZstdOutputStream',
          'java.util.jar.Pack200',
          'java.util.jar.Pack200$Packer',
          'java.util.jar.Pack200$Unpacker',
          'javax.servlet.ServletContextEvent',
          'javax.servlet.ServletContextListener',
          'org.apache.avalon.framework.logger.Logger',
          'org.apache.log.Hierarchy',
          'org.apache.log.Logger',
          'org.apache.log4j.Category',
          'org.apache.log4j.Level',
          'org.apache.log4j.Logger',
          'org.apache.log4j.Priority',
          'org.brotli.dec.BrotliInputStream',
          'org.jcodings.specific.UTF8Encoding',
          'org.joni.Matcher',
          'org.joni.Regex',
          'org.joni.Syntax',
          'org.slf4j.Logger',
          'org.slf4j.LoggerFactory',
          'org.tukaani.xz.ARMOptions',
          'org.tukaani.xz.ARMThumbOptions',
          'org.tukaani.xz.DeltaOptions',
          'org.tukaani.xz.FilterOptions',
          'org.tukaani.xz.FinishableWrapperOutputStream',
          'org.tukaani.xz.IA64Options',
          'org.tukaani.xz.LZMA2InputStream',
          'org.tukaani.xz.LZMA2Options',
          'org.tukaani.xz.LZMAInputStream',
          'org.tukaani.xz.LZMAOutputStream',
          'org.tukaani.xz.MemoryLimitException',
          'org.tukaani.xz.PowerPCOptions',
          'org.tukaani.xz.SPARCOptions',
          'org.tukaani.xz.SingleXZInputStream',
          'org.tukaani.xz.UnsupportedOptionsException',
          'org.tukaani.xz.X86Options',
          'org.tukaani.xz.XZ',
          'org.tukaani.xz.XZInputStream',
          'org.tukaani.xz.XZOutputStream'
  )
}

tasks.named("test").configure {
  systemProperty 'tests.gradle_index_compat_versions', BuildParams.bwcVersions.indexCompatible.join(',')
  systemProperty 'tests.gradle_wire_compat_versions', BuildParams.bwcVersions.wireCompatible.join(',')
  systemProperty 'tests.gradle_unreleased_versions', BuildParams.bwcVersions.unreleased.join(',')
}

tasks.register("integTest", Test) {
  include "**/*IT.class"
}

tasks.register("verifyVersions") {
  dependsOn "test"
}
