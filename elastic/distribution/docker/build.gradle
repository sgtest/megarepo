import org.elasticsearch.gradle.Architecture
import org.elasticsearch.gradle.DockerBase
import org.elasticsearch.gradle.LoggedExec
import org.elasticsearch.gradle.VersionProperties
import org.elasticsearch.gradle.docker.DockerBuildTask
import org.elasticsearch.gradle.docker.ShellRetry
import org.elasticsearch.gradle.info.BuildParams
import org.elasticsearch.gradle.testfixtures.TestFixturesPlugin

import java.nio.file.Path

apply plugin: 'elasticsearch.standalone-rest-test'
apply plugin: 'elasticsearch.test.fixtures'
apply plugin: 'elasticsearch.internal-distribution-download'
apply plugin: 'elasticsearch.rest-resources'

testFixtures.useFixture()

configurations {
  aarch64DockerSource
  dockerSource
  transformLog4jJar
}

dependencies {
  aarch64DockerSource project(path: ":distribution:archives:linux-aarch64-tar", configuration: 'default')
  dockerSource project(path: ":distribution:archives:linux-tar", configuration: 'default')
  transformLog4jJar project(path: ":distribution:docker:transform-log4j-config", configuration: 'default')
}

ext.expansions = { Architecture architecture, DockerBase base, boolean local ->
  String classifier
  if (local) {
    if (architecture == Architecture.AARCH64) {
      classifier = "linux-aarch64"
    } else if (architecture == Architecture.X64) {
      classifier = "linux-x86_64"
    } else {
      throw new IllegalArgumentException("Unsupported architecture [" + architecture + "]")
    }
  } else {
    /* When sourcing the Elasticsearch build remotely, the same Dockerfile needs
     * to be able to fetch the artifact for any supported platform. We can't make
     * the decision here. Bash will interpolate the `arch` command for us. */
    classifier = "linux-\$(arch)"
  }

  final String elasticsearch = "elasticsearch-${VersionProperties.elasticsearch}-${classifier}.tar.gz"

  String buildArgs = '#'
  if (base == DockerBase.IRON_BANK) {
    buildArgs = """
ARG BASE_REGISTRY=nexus-docker-secure.levelup-nexus.svc.cluster.local:18082
ARG BASE_IMAGE=redhat/ubi/ubi8
ARG BASE_TAG=8.3
"""
  }

  /* Both the following Dockerfile commands put the resulting artifact at
   * the same location, regardless of classifier, so that the commands that
   * follow in the Dockerfile don't have to know about the runtime
   * architecture. */
  String sourceElasticsearch
  if (local) {
    sourceElasticsearch = "COPY $elasticsearch /opt/elasticsearch.tar.gz"
  } else {
    sourceElasticsearch = """
RUN curl --retry 10 -S -L \\
      --output /opt/elasticsearch.tar.gz \\
      https://artifacts-no-kpi.elastic.co/downloads/elasticsearch/$elasticsearch
""".trim()
  }

  def (major,minor) = VersionProperties.elasticsearch.split("\\.")

  return [
    'base_image'          : base.getImage(),
    'bin_dir'             : base == DockerBase.IRON_BANK ? 'scripts' : 'bin',
    'build_args'          : buildArgs,
    'build_date'          : BuildParams.buildDate,
    'config_dir'          : base == DockerBase.IRON_BANK ? 'scripts' : 'config',
    'git_revision'        : BuildParams.gitRevision,
    'license'             : 'Elastic-License-2.0',
    'package_manager'     : base == DockerBase.UBI ? 'microdnf' : 'yum',
    'source_elasticsearch': sourceElasticsearch,
    'docker_base'         : base.name().toLowerCase(),
    'version'             : VersionProperties.elasticsearch,
    'major_minor_version' : "${major}.${minor}",
    'retry'               : ShellRetry
  ]
}

/**
 * This filter squashes long runs of newlines so that the output
 * is a little more aesthetically pleasing.
 */
class SquashNewlinesFilter extends FilterReader {
  SquashNewlinesFilter(Reader input) {
    super(new StringReader(input.text.replaceAll("\n{2,}", "\n\n")))
  }
}

private static String buildPath(Architecture architecture, DockerBase base) {
  return 'build/' +
    (architecture == Architecture.AARCH64 ? 'aarch64-' : '') +
    (base == DockerBase.UBI ? 'ubi-' : '') +
    (base == DockerBase.UBI ? 'ubi-' : (base == DockerBase.IRON_BANK ? 'ironbank-' : '')) +
    'docker'
}

private static String taskName(String prefix, Architecture architecture, DockerBase base, String suffix) {
  return prefix +
    (architecture == Architecture.AARCH64 ? 'Aarch64' : '') +
    (base == DockerBase.UBI ? 'Ubi' : (base == DockerBase.IRON_BANK ? 'IronBank' : '')) +
    suffix
}

project.ext {
  dockerBuildContext = { Architecture architecture, DockerBase base, boolean local ->
    copySpec {
      final Map<String,String> varExpansions = expansions(architecture, base, local)
      final Path projectDir = project.projectDir.toPath()

      if (base == DockerBase.IRON_BANK) {
        into('scripts') {
          from projectDir.resolve("src/docker/bin")
          from(projectDir.resolve("src/docker/config"))
        }
        from(projectDir.resolve("src/docker/iron_bank")) {
          expand(varExpansions)
        }
      } else {
        into('bin') {
          from projectDir.resolve("src/docker/bin")
        }

        into('config') {
          from projectDir.resolve("src/docker/config")
        }
      }

      from(project.projectDir.toPath().resolve("src/docker/Dockerfile")) {
        expand(varExpansions)
        filter SquashNewlinesFilter
      }
    }
  }
}

void addCopyDockerContextTask(Architecture architecture, DockerBase base) {
  tasks.register(taskName("copy", architecture, base, "DockerContext"), Sync) {
    expansions(architecture, base, true).findAll { it.key != 'build_date' }.each { k, v ->
      inputs.property(k, { v.toString() })
    }
    into buildPath(architecture, base)

    with dockerBuildContext(architecture, base, true)

    into('bin') {
      from configurations.transformLog4jJar
    }

    if (architecture == Architecture.AARCH64) {
        from configurations.aarch64DockerSource
    } else {
        from configurations.dockerSource
    }
  }
}

def createAndSetWritable(Object... locations) {
  locations.each { location ->
    File file = file(location)
    file.mkdirs()
    file.setWritable(true, false)
  }
}

tasks.register("copyNodeKeyMaterial", Sync) {
  from project(':x-pack:plugin:core')
    .files(
      'src/test/resources/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.pem',
      'src/test/resources/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt'
    )
  into "${buildDir}/certs"
  doLast {
    file("${buildDir}/certs").setReadable(true, false)
    file("${buildDir}/certs/testnode.pem").setReadable(true, false)
    file("${buildDir}/certs/testnode.crt").setReadable(true, false)
  }
}

elasticsearch_distributions {
  Architecture.values().each { eachArchitecture ->
    "docker_${ eachArchitecture == Architecture.AARCH64 ? '_aarch64' : '' }" {
      architecture = eachArchitecture
      type = 'docker'
      version = VersionProperties.getElasticsearch()
      failIfUnavailable = false // This ensures we don't attempt to build images if docker is unavailable
    }
  }
}

tasks.named("preProcessFixture").configure {
  dependsOn elasticsearch_distributions.matching { it.architecture == Architecture.current() }
  dependsOn "copyNodeKeyMaterial"
  doLast {
    // tests expect to have an empty repo
    project.delete(
      "${buildDir}/repo",
    )
    createAndSetWritable(
      "${buildDir}/repo",
      "${buildDir}/oss-repo",
      "${buildDir}/logs/default-1",
      "${buildDir}/logs/default-2",
    )
  }
}

tasks.named("processTestResources").configure {
  from project(':x-pack:plugin:core')
    .files(
      'src/test/resources/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.pem',
      'src/test/resources/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt'
    )
}

tasks.register("integTest", Test) {
  outputs.doNotCacheIf('Build cache is disabled for Docker tests') { true }
  maxParallelForks = '1'
  include '**/*IT.class'
}

tasks.named("check").configure {
  dependsOn "integTest"
}

void addBuildDockerImage(Architecture architecture, DockerBase base) {
  final TaskProvider<DockerBuildTask> buildDockerImageTask =
          tasks.register(taskName("build", architecture, base, "DockerImage"), DockerBuildTask) {
    onlyIf { Architecture.current() == architecture }
    TaskProvider<Sync> copyContextTask = tasks.named(taskName("copy", architecture, base, "DockerContext"))
    dependsOn(copyContextTask)
    dockerContext.fileProvider(copyContextTask.map { it.destinationDir })

    if (base == DockerBase.UBI) {
      baseImages = [ base.getImage() ]
    } else {
      baseImages = [ base.getImage(), 'alpine:latest' ]
    }

    String version = VersionProperties.elasticsearch
    String suffix = base == DockerBase.UBI ? '-ubi8' : ''
    tags = [
      "elasticsearch${suffix}:${version}",
      "docker.elastic.co/elasticsearch/elasticsearch${suffix}:${version}",
      "docker.elastic.co/elasticsearch/elasticsearch-full${suffix}:${version}",
      "elasticsearch${suffix}:test"
    ]
  }
  tasks.named("assemble").configure {
    dependsOn(buildDockerImageTask)
  }
}

for (final Architecture architecture : Architecture.values()) {
  for (final DockerBase base : DockerBase.values()) {
    if (base == DockerBase.IRON_BANK) {
      // At the moment we don't actually build the Iron Bank image
      continue
    }
    addCopyDockerContextTask(architecture, base)
    addBuildDockerImage(architecture, base)
  }
}

// We build the images used in compose locally, but the pull command insists on using a repository
// thus we must disable it to prevent it from doing so.
// Everything will still be pulled since we will build the local images on a pull
tasks.named("composePull").configure {
  enabled = false
}

/*
 * The export subprojects write out the generated Docker images to disk, so
 * that they can be easily reloaded, for example into a VM for distribution testing
 */
subprojects { Project subProject ->
  if (subProject.name.endsWith('-export')) {
    apply plugin: 'distribution'

    final Architecture architecture = subProject.name.contains('aarch64-') ? Architecture.AARCH64 : Architecture.X64
    // We can ignore Iron Bank at the moment as we don't
    // build those images ourselves.
    final DockerBase base = subProject.name.contains('ubi-') ? DockerBase.UBI : DockerBase.CENTOS

    final String arch = architecture == Architecture.AARCH64 ? '-aarch64' : ''
    final String suffix = base == DockerBase.UBI ? '-ubi8' : ''
    final String extension = base == DockerBase.UBI ? 'ubi.tar' : 'docker.tar'
    final String artifactName = "elasticsearch${arch}${suffix}_test"

    final String exportTaskName = taskName("export", architecture, base, "DockerImage")
    final String buildTaskName = taskName("build", architecture, base, "DockerImage")
    final String tarFile = "${parent.projectDir}/build/${artifactName}_${VersionProperties.elasticsearch}.${extension}"

    tasks.register(exportTaskName, LoggedExec) {
      inputs.file("${parent.projectDir}/build/markers/${buildTaskName}.marker")
      executable 'docker'
      outputs.file(tarFile)
      args "save",
        "-o",
        tarFile,
        "elasticsearch${suffix}:test"

      dependsOn(parent.path + ":" + buildTaskName)
      onlyIf { Architecture.current() == architecture }
    }

    artifacts.add('default', file(tarFile)) {
      type 'tar'
      name artifactName
      builtBy exportTaskName
    }

    tasks.named("assemble").configure {
      dependsOn(exportTaskName)
    }
  }
}
