/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

package org.elasticsearch.search.profile.query;

import org.apache.lucene.search.Collector;
import org.apache.lucene.search.CollectorManager;

import java.io.IOException;
import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

/**
 * A {@link CollectorManager} that takes another CollectorManager as input and wraps all Collectors generated by it
 * in an {@link InternalProfileCollector}. It delegates all the profiling to the generated collectors via {@link #getCollectorTree()}
 * and joins them up when its {@link #reduce} method is called. The profile result can
 */
public final class ProfileCollectorManager implements CollectorManager<InternalProfileCollector, Void> {

    private final CollectorManager<Collector, ?> collectorManager;
    private final String reason;
    private CollectorResult collectorTree;

    @SuppressWarnings("unchecked")
    public ProfileCollectorManager(CollectorManager<? extends Collector, ?> collectorManager, String reason) {
        this.collectorManager = (CollectorManager<Collector, ?>) collectorManager;
        this.reason = reason;
    }

    @Override
    public InternalProfileCollector newCollector() throws IOException {
        return new InternalProfileCollector(collectorManager.newCollector(), reason);
    }

    public Void reduce(Collection<InternalProfileCollector> profileCollectors) throws IOException {
        List<Collector> unwrapped = profileCollectors.stream()
            .map(InternalProfileCollector::getWrappedCollector)
            .collect(Collectors.toList());
        collectorManager.reduce(unwrapped);

        List<CollectorResult> resultsPerProfiler = profileCollectors.stream()
            .map(ipc -> ipc.getCollectorTree())
            .collect(Collectors.toList());
        this.collectorTree = new CollectorResult(this.getClass().getSimpleName(), "segment_search", 0, resultsPerProfiler);
        return null;
    }

    public CollectorResult getCollectorTree() {
        if (this.collectorTree == null) {
            throw new IllegalStateException("A collectorTree hasn't been set yet, call reduce() before attempting to retrieve it");
        }
        return this.collectorTree;
    }
}
