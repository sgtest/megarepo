/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */


import org.elasticsearch.gradle.MavenFilteringHack
import org.elasticsearch.gradle.test.AntFixture

import static org.elasticsearch.gradle.PropertyNormalization.DEFAULT
import static org.elasticsearch.gradle.PropertyNormalization.IGNORE_VALUE

apply plugin: 'elasticsearch.standalone-rest-test'
apply plugin: 'elasticsearch.rest-test'

boolean useFixture = false

String azureAccount = System.getenv("azure_storage_account")
String azureKey = System.getenv("azure_storage_key")
String azureContainer = System.getenv("azure_storage_container")
String azureBasePath = System.getenv("azure_storage_base_path")
String azureSasToken = System.getenv("azure_storage_sas_token")

if (!azureAccount && !azureKey && !azureContainer && !azureBasePath && !azureSasToken) {
    azureAccount = 'azure_integration_test_account'
    azureKey = 'YXp1cmVfaW50ZWdyYXRpb25fdGVzdF9rZXk=' // The key is "azure_integration_test_key" encoded using base64
    azureContainer = 'container_test'
    azureBasePath = 'integration_test'
    azureSasToken = ''
    useFixture = true
}

/** A task to start the fixture which emulates an Azure Storage service **/
task azureStorageFixture(type: AntFixture) {
    dependsOn testClasses
    env 'CLASSPATH', "${ -> project.sourceSets.test.runtimeClasspath.asPath }"
    executable = new File(project.runtimeJavaHome, 'bin/java')
    args 'org.elasticsearch.repositories.azure.AzureStorageFixture', baseDir, azureContainer
}

Map<String, Object> expansions = [
        'container': azureContainer,
        'base_path': azureBasePath
]

processTestResources {
    inputs.properties(expansions)
    MavenFilteringHack.filter(it, expansions)
}

integTest {
    dependsOn project(':plugins:repository-azure').bundlePlugin
} 

testClusters.integTest {
    plugin file(project(':plugins:repository-azure').bundlePlugin.archiveFile)
    keystore 'azure.client.integration_test.account', azureAccount
    if (azureKey != null && azureKey.isEmpty() == false) {
        keystore 'azure.client.integration_test.key', azureKey
    }
    if (azureSasToken != null && azureSasToken.isEmpty() == false) {
        keystore 'azure.client.integration_test.sas_token', azureSasToken
    }

    if (useFixture) {
        tasks.integTest.dependsOn azureStorageFixture
        // Use a closure on the string to delay evaluation until tests are executed. The endpoint_suffix is used
        // in a hacky way to change the protocol and endpoint. We must fix that.
        setting 'azure.client.integration_test.endpoint_suffix',
                { "ignored;DefaultEndpointsProtocol=http;BlobEndpoint=http://${azureStorageFixture.addressAndPort }" }, IGNORE_VALUE
        String firstPartOfSeed = project.rootProject.testSeed.tokenize(':').get(0)
        setting 'thread_pool.repository_azure.max', (Math.abs(Long.parseUnsignedLong(firstPartOfSeed, 16) % 10) + 1).toString(), System.getProperty('ignore.tests.seed') == null ? DEFAULT : IGNORE_VALUE
    }
}
