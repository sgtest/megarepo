apply plugin: 'elasticsearch.esplugin'

esplugin {
  name 'security-authorization-engine'
  description 'An example spi extension plugin for security that implements an Authorization Engine'
  classname 'org.elasticsearch.example.AuthorizationEnginePlugin'
  extendedPlugins = ['x-pack-security']
}

dependencies {
  compileOnly "org.elasticsearch.plugin:x-pack-core:${version}"
  testCompile "org.elasticsearch.client.x-pack-transport:${version}"
}


integTestRunner {
    systemProperty 'tests.security.manager', 'false'
}

integTestCluster {
  dependsOn buildZip
  setting 'xpack.security.enabled', 'true'
  setting 'xpack.ilm.enabled', 'false'
  setting 'xpack.ml.enabled', 'false'
  setting 'xpack.monitoring.enabled', 'false'
  setting 'xpack.license.self_generated.type', 'trial'

  // This is important, so that all the modules are available too.
  // There are index templates that use token filters that are in analysis-module and
  // processors are being used that are in ingest-common module.
  distribution = 'default'

  setupCommand 'setupDummyUser',
               'bin/elasticsearch-users', 'useradd', 'test_user', '-p', 'x-pack-test-password', '-r', 'custom_superuser'
  waitCondition = { node, ant ->
    File tmpFile = new File(node.cwd, 'wait.success')
    ant.get(src: "http://${node.httpUri()}/_cluster/health?wait_for_nodes=>=${numNodes}&wait_for_status=yellow",
            dest: tmpFile.toString(),
            username: 'test_user',
            password: 'x-pack-test-password',
            ignoreerrors: true,
            retries: 10)
    return tmpFile.exists()
  }
}
check.dependsOn integTest
