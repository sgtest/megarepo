# Integration tests for repository-s3
#
"Plugin repository-s3 is loaded":
    - do:
        cluster.state: {}

    # Get master node id
    - set: { master_node: master }

    - do:
        nodes.info: {}

    - match:  { nodes.$master.plugins.0.name: repository-s3  }
---
"Snapshot/Restore with repository-s3":

  # Register repository
  - do:
      snapshot.create_repository:
        repository: repository
        body:
          type: s3
          settings:
            bucket: "bucket_test"
            client: "integration_test"
            canned_acl: "public-read"
            storage_class: "standard"

  - match: { acknowledged: true }

  # Get repository
  - do:
      snapshot.get_repository:
        repository: repository

  - match: {repository.settings.bucket : "bucket_test"}
  - match: {repository.settings.client : "integration_test"}
  - match: {repository.settings.canned_acl : "public-read"}
  - match: {repository.settings.storage_class : "standard"}
  - is_false: repository.settings.access_key
  - is_false: repository.settings.secret_key

  # Index documents
  - do:
      bulk:
        refresh: true
        body:
          - index:
              _index: docs
              _type:  doc
              _id:    1
          - snapshot: one
          - index:
              _index: docs
              _type:  doc
              _id:    2
          - snapshot: one
          - index:
              _index: docs
              _type:  doc
              _id:    3
          - snapshot: one

  - do:
      count:
        index: docs

  - match: {count: 3}

  # Create a first snapshot
  - do:
      snapshot.create:
        repository: repository
        snapshot: snapshot-one
        wait_for_completion: true

  - match: { snapshot.snapshot: snapshot-one }
  - match: { snapshot.state : SUCCESS }
  - match: { snapshot.include_global_state: true }
  - match: { snapshot.shards.failed : 0 }

  - do:
      snapshot.status:
        repository: repository
        snapshot: snapshot-one

  - is_true: snapshots
  - match: { snapshots.0.snapshot: snapshot-one }
  - match: { snapshots.0.state : SUCCESS }

  # Index more documents
  - do:
      bulk:
        refresh: true
        body:
          - index:
              _index: docs
              _type:  doc
              _id:    4
          - snapshot: two
          - index:
              _index: docs
              _type:  doc
              _id:    5
          - snapshot: two
          - index:
              _index: docs
              _type:  doc
              _id:    6
          - snapshot: two
          - index:
              _index: docs
              _type:  doc
              _id:    7
          - snapshot: two

  - do:
      count:
        index: docs

  - match: {count: 7}

  # Create a second snapshot
  - do:
      snapshot.create:
        repository: repository
        snapshot: snapshot-two
        wait_for_completion: true

  - match: { snapshot.snapshot: snapshot-two }
  - match: { snapshot.state : SUCCESS }
  - match: { snapshot.shards.failed : 0 }

  - do:
      snapshot.get:
        repository: repository
        snapshot: snapshot-one,snapshot-two

  - is_true: snapshots
  - match: { snapshots.0.state : SUCCESS }
  - match: { snapshots.1.state : SUCCESS }

  # Delete the index
  - do:
      indices.delete:
        index: docs

  # Restore the second snapshot
  - do:
      snapshot.restore:
        repository: repository
        snapshot: snapshot-two
        wait_for_completion: true

  - do:
      count:
        index: docs

  - match: {count: 7}

  # Delete the index again
  - do:
      indices.delete:
        index: docs

  # Restore the first snapshot
  - do:
      snapshot.restore:
        repository: repository
        snapshot: snapshot-one
        wait_for_completion: true

  - do:
      count:
        index: docs

  - match: {count: 3}

  # Remove the snapshots
  - do:
      snapshot.delete:
        repository: repository
        snapshot: snapshot-two

  - do:
      snapshot.delete:
        repository: repository
        snapshot: snapshot-one

  # Remove our repository
  - do:
     snapshot.delete_repository:
       repository: repository
