/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import org.elasticsearch.gradle.PropertyNormalization
import org.elasticsearch.gradle.info.BuildParams
import org.elasticsearch.gradle.test.AntFixture

apply plugin: 'elasticsearch.yaml-rest-test'
apply plugin: 'elasticsearch.internal-cluster-test'
apply plugin: 'elasticsearch.test.fixtures'

esplugin {
  description 'Module for URL repository'
  classname 'org.elasticsearch.plugin.repository.url.URLRepositoryPlugin'
}

restResources {
  restApi {
    includeCore '_common', 'cluster', 'nodes', 'indices', 'index', 'bulk', 'count', 'snapshot'
  }
}

dependencies {
  api "org.apache.httpcomponents:httpclient:${versions.httpclient}"
  api "org.apache.httpcomponents:httpcore:${versions.httpcore}"
  api "commons-logging:commons-logging:${versions.commonslogging}"
  api "commons-codec:commons-codec:${versions.commonscodec}"
  api "org.apache.logging.log4j:log4j-1.2-api:${versions.log4j}"
}

tasks.named("thirdPartyAudit").configure {
  ignoreMissingClasses(
    'javax.servlet.ServletContextEvent',
    'javax.servlet.ServletContextListener',
    'org.apache.avalon.framework.logger.Logger',
    'org.apache.log.Hierarchy',
    'org.apache.log.Logger'
  )
}

 // This directory is shared between two URL repositories and one FS repository in YAML integration tests
File repositoryDir = new File(project.buildDir, "shared-repository")

def testJar = tasks.register("testJar", Jar) {
  from sourceSets.test.output
  classifier = "test"
}

tasks.named("preProcessFixture").configure {
  inputs.files(testJar, sourceSets.test.runtimeClasspath)
  doLast {
    file("${testFixturesDir}/shared").mkdirs()
    project.copy {
      from testJar
      from sourceSets.test.runtimeClasspath
      into "${testFixturesDir}/shared"
    }
    repositoryDir.mkdirs()
  }
}

testFixtures.useFixture()

def fixtureAddress = {
  int ephemeralPort = tasks.named("postProcessFixture").get().ext."test.fixtures.url-fixture.tcp.80"
  assert ephemeralPort > 0
  'http://127.0.0.1:' + ephemeralPort
}

testClusters.all {
  // repositoryDir is used by a FS repository to create snapshots
  setting 'path.repo', "${repositoryDir.absolutePath}", PropertyNormalization.IGNORE_VALUE
  // repositoryDir is used by two URL repositories to restore snapshots
  setting 'repositories.url.allowed_urls', {
    "http://snapshot.test*,${fixtureAddress()}"
  }, PropertyNormalization.IGNORE_VALUE
}

