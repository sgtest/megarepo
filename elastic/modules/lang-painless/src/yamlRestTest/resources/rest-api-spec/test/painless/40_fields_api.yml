# Integration tests for sort script queries using Painless

setup:
- skip:
    version: " - 7.14.99"
    reason: "sort script fields api was added in 7.15.0"

---
"sort script fields api":
     - do:
         indices.create:
           index: test
           body:
             settings:
               number_of_shards: 2
             mappings:
               properties:
                 dval:
                   type: double
     - do:
         index:
           index: test
           id: d1
           body: {"dval": 10, "sval": "f"}
     - do:
         index:
           index: test
           id: d2
           body: {}
     - do:
         index:
           index: test
           id: d3
           body: {"dval": 5, "sval": "a"}
     - do:
         indices.refresh: {}
     - do:
         search:
           rest_total_hits_as_int: true
           index: test
           body:
             sort:
               _script:
                 type: number
                 script:
                   source: "field('dval').getValue(3)"
     - match: { hits.total: 3 }
     - match: { hits.hits.0._id: d2 }
     - match: { hits.hits.1._id: d3 }
     - match: { hits.hits.2._id: d1 }
     - do:
         search:
           rest_total_hits_as_int: true
           index: test
           body:
             sort:
               _script:
                 type: string
                 script:
                   source: "field('sval.keyword').getValue('g')"
     - match: { hits.total: 3 }
     - match: { hits.hits.0._id: d3 }
     - match: { hits.hits.1._id: d1 }
     - match: { hits.hits.2._id: d2 }

---
"script fields api for dates":
    - do:
        indices.create:
          index: test
          body:
            settings:
              number_of_shards: 2
            mappings:
              properties:
                dt:
                  type: date_nanos
    - do:
         index:
           index: test
           id: d1
           body: {"dt": "2021-08-24T18:45:52.123456789Z" }
    - do:
         indices.refresh: {}
    - do:
         search:
           rest_total_hits_as_int: true
           index: test
           body:
             query: { "match_all": {} }
             sort: [ { dt: asc } ]
             script_fields:
               date_field:
                 script:
                   source: "field('dt').getLong(100L)"
    - match: { hits.total: 1 }
    - match: { hits.hits.0._id: d1 }
    - match: { hits.hits.0.fields.date_field.0: 1629830752123456789 }

---
"script score fields api":
    - do:
        indices.create:
          index: test
          body:
            settings:
              number_of_shards: 2
            mappings:
              properties:
                dval:
                  type: double
    - do:
        index:
          index: test
          id: d1
          body: {"dval": 10}
    - do:
        index:
          index: test
          id: d2
          body: {}
    - do:
        index:
          index: test
          id: d3
          body: {"dval": 5}
    - do:
        indices.refresh: {}
    - do:
        search:
          rest_total_hits_as_int: true
          index: test
          body:
            query:
              script_score:
                query: {match_all: {} }
                script:
                  source: "field('dval').getValue(3)"
    - match: { hits.total: 3 }
    - match: { hits.hits.0._id: d1 }
    - match: { hits.hits.1._id: d3 }
    - match: { hits.hits.2._id: d2 }

---
"filter script fields api":
    - do:
        indices.create:
          index: test
          body:
            settings:
              number_of_shards: 2
            mappings:
              properties:
                dval:
                  type: double
    - do:
        index:
          index: test
          id: d1
          body: {"dval": 10, "sval": "f"}
    - do:
        index:
          index: test
          id: d2
          body: {}
    - do:
        index:
          index: test
          id: d3
          body: {"dval": 5, "sval": "a"}
    - do:
        indices.refresh: {}
    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query:
              bool:
                filter:
                  script:
                    script: "field('dval').getValue(6) > 6"
    - match: { hits.total: 1 }
    - match: { hits.hits.0._id: d1 }
    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query:
              bool:
                filter:
                  script:
                    script: "field('sval.keyword').getValue('b') == 'a'"
    - match: { hits.total: 1 }
    - match: { hits.hits.0._id: d3 }

---
"missing field":
    - do:
        indices.create:
          index: test
          body:
            settings:
              number_of_shards: 2
            mappings:
              properties:
                dval:
                  type: double
    - do:
        index:
          index: test
          id: d1
          body: {"foo": 25, "dval": 1.0 }
    - do:
        index:
          index: test
          id: d2
          body: {"foo": 9223372036854775807, "dval": 2.0 }
    - do:
        index:
          index: test
          id: d3
          body: { "bar": "abc", "dval": 3.0 }
    - do:
        indices.refresh: {}
    - do:
        search:
          rest_total_hits_as_int: true
          index: test
          body:
            query: { "match_all": {} }
            sort: [ { dval: asc } ]
            script_fields:
              missing_field:
                script:
                  source: "field('foo').as(Field.BigInteger).getValue(BigInteger.TEN).add(BigInteger.ONE)"
    - match: { hits.total: 3 }
    - match: { hits.hits.0._id: d1 }
    - match: { hits.hits.0.fields.missing_field.0: 26 }
    - match: { hits.hits.1._id: d2 }
    - match: { hits.hits.1.fields.missing_field.0: 9223372036854775808 }
    - match: { hits.hits.2._id: d3 }
    - match: { hits.hits.2.fields.missing_field.0: 11 }
    - do:
        search:
          rest_total_hits_as_int: true
          index: test
          body:
            query: { "match_all": {} }
            sort: [ { dval: asc } ]
            script_fields:
              missing_field:
                script:
                  source: "field('foo').as(Field.BigInteger).as(Field.Long).getValue(10L) + 2L"
    - match: { hits.total: 3 }
    - match: { hits.hits.0._id: d1 }
    - match: { hits.hits.0.fields.missing_field.0: 27 }
    - match: { hits.hits.1._id: d2 }
    - match: { hits.hits.1.fields.missing_field.0: -9223372036854775809 }
    - match: { hits.hits.2._id: d3 }
    - match: { hits.hits.2.fields.missing_field.0: 12 }

---
"date to long":
    - do:
        indices.create:
          index: test
          body:
            settings:
              number_of_shards: 2
            mappings:
              properties:
                dval:
                  type: double
                dtnanos:
                  type: date_nanos
                dt:
                  type: date
    - do:
        index:
          index: test
          id: d1
          body: { "dval": 101,  "dt": "2015-01-01T12:10:40Z" }
    - do:
        index:
          index: test
          id: d2
          body: { "dval": 202, "dt": "2015-01-01" }
    - do:
        index:
          index: test
          id: d3
          body: { "dval": 303, "dt": 1420072496000 }
    - do:
        index:
          index: test
          id: d4
          body: { "dval": 404, "dtnanos": "2015-01-01T12:10:30.123456789Z"}
    - do:
        index:
          index: test
          id: d5
          body: { "dval": 505, "dtnanos": "2261-04-11T23:47:33.54775807Z" }
    - do:
        index:
          index: test
          id: d6
          body: { "dval": 606 }
    - do:
        indices.refresh: {}
    - do:
        search:
          rest_total_hits_as_int: true
          index: test
          body:
            query: { "match_all": {} }
            sort: [ { dval: asc } ]
            script_fields:
              dt_bigint:
                script:
                  source: "field('dt').as(Field.BigInteger).getValue(BigInteger.TEN).add(BigInteger.ONE)"
    - match: { hits.total: 6 }
    - match: { hits.hits.0._id: d1 }
    - match: { hits.hits.0.fields.dt_bigint.0: 1420114240001 }
    - match: { hits.hits.1._id: d2 }
    - match: { hits.hits.1.fields.dt_bigint.0: 1420070400001 }
    - match: { hits.hits.2._id: d3 }
    - match: { hits.hits.2.fields.dt_bigint.0: 1420072496001 }
    - match: { hits.hits.3._id: d4 }
    - match: { hits.hits.3.fields.dt_bigint.0: 11 }
    - match: { hits.hits.4._id: d5 }
    - match: { hits.hits.4.fields.dt_bigint.0: 11 }
    - match: { hits.hits.5._id: d6 }
    - match: { hits.hits.5.fields.dt_bigint.0: 11 }
    - do:
        search:
          rest_total_hits_as_int: true
          index: test
          body:
            query: { "match_all": {} }
            sort: [ { dval: asc } ]
            script_fields:
              dt_long:
                script:
                  source: "field('dt').as(Field.Long).getValue(10L) + 2L"
    - match: { hits.total: 6 }
    - match: { hits.hits.0._id: d1 }
    - match: { hits.hits.0.fields.dt_long.0: 1420114240002 }
    - match: { hits.hits.1._id: d2 }
    - match: { hits.hits.1.fields.dt_long.0: 1420070400002 }
    - match: { hits.hits.2._id: d3 }
    - match: { hits.hits.2.fields.dt_long.0: 1420072496002 }
    - match: { hits.hits.3._id: d4 }
    - match: { hits.hits.3.fields.dt_long.0: 12 }
    - match: { hits.hits.4._id: d5 }
    - match: { hits.hits.4.fields.dt_long.0: 12 }
    - match: { hits.hits.5._id: d6 }
    - match: { hits.hits.5.fields.dt_long.0: 12 }
    - do:
        search:
          rest_total_hits_as_int: true
          index: test
          body:
            query: { "match_all": {} }
            sort: [ { dval: asc } ]
            script_fields:
              dtnan_bigint:
                script:
                  source: "field('dtnanos').as(Field.BigInteger).getValue(BigInteger.TEN).add(BigInteger.ONE)"
    - match: { hits.total: 6 }
    - match: { hits.hits.0._id: d1 }
    - match: { hits.hits.0.fields.dtnan_bigint.0: 11 }
    - match: { hits.hits.1._id: d2 }
    - match: { hits.hits.1.fields.dtnan_bigint.0: 11 }
    - match: { hits.hits.2._id: d3 }
    - match: { hits.hits.2.fields.dtnan_bigint.0: 11 }
    - match: { hits.hits.3._id: d4 }
    - match: { hits.hits.3.fields.dtnan_bigint.0: 1420114230123456790 }
    - match: { hits.hits.4._id: d5 }
    - match: { hits.hits.4.fields.dtnan_bigint.0: 9191836053547758071 }
    - match: { hits.hits.5._id: d6 }
    - match: { hits.hits.5.fields.dtnan_bigint.0: 11 }
    - do:
        search:
          rest_total_hits_as_int: true
          index: test
          body:
            query: { "match_all": {} }
            sort: [ { dval: asc } ]
            script_fields:
              dtnan_long:
                script:
                  source: "field('dtnanos').as(Field.Long).getValue(field('dt').as(Field.Long).getValue(0L) * 1000) + 2L"
    - match: { hits.total: 6 }
    - match: { hits.hits.0._id: d1 }
    - match: { hits.hits.0.fields.dtnan_long.0: 1420114240000002 }
    - match: { hits.hits.1._id: d2 }
    - match: { hits.hits.1.fields.dtnan_long.0: 1420070400000002 }
    - match: { hits.hits.2._id: d3 }
    - match: { hits.hits.2.fields.dtnan_long.0: 1420072496000002 }
    - match: { hits.hits.3._id: d4 }
    - match: { hits.hits.3.fields.dtnan_long.0: 1420114230123456791 }
    - match: { hits.hits.4._id: d5 }
    - match: { hits.hits.4.fields.dtnan_long.0: 9191836053547758072 }
    - match: { hits.hits.5._id: d6 }
    - match: { hits.hits.5.fields.dtnan_long.0: 2 }

---
"boolean to long and bigint":
  - do:
      indices.create:
        index: test
        body:
          settings:
            number_of_shards: 2
          mappings:
            properties:
              dval:
                type: double
              bool:
                type: boolean
  - do:
      index:
        index: test
        id: d1
        body: { "dval": 101,  "bool": true }
  - do:
      index:
        index: test
        id: d2
        body: { "dval": 202, "bool": false }
  - do:
      index:
        index: test
        id: d3
        body: { "dval": 303 }
  - do:
      indices.refresh: {}
  - do:
      search:
        rest_total_hits_as_int: true
        index: test
        body:
          query: { "match_all": {} }
          sort: [ { dval: asc } ]
          script_fields:
            bool:
              script:
                source: "field('bool').as(Field.Long).getValue(-1)"
  - match: { hits.total: 3 }
  - match: { hits.hits.0._id: d1 }
  - match: { hits.hits.0.fields.bool.0: 1 }
  - match: { hits.hits.1._id: d2 }
  - match: { hits.hits.1.fields.bool.0: 0 }
  - match: { hits.hits.2._id: d3 }
  - match: { hits.hits.2.fields.bool.0: -1 }
  - do:
      search:
        rest_total_hits_as_int: true
        index: test
        body:
          query: { "match_all": {} }
          sort: [ { dval: asc } ]
          script_fields:
            bool:
              script:
                source: "field('bool').as(Field.BigInteger).getValue(-1)"
  - match: { hits.total: 3 }
  - match: { hits.hits.0._id: d1 }
  - match: { hits.hits.0.fields.bool.0: 1 }
  - match: { hits.hits.1._id: d2 }
  - match: { hits.hits.1.fields.bool.0: 0 }
  - match: { hits.hits.2._id: d3 }
  - match: { hits.hits.2.fields.bool.0: -1 }
---
"string to long and bigint":
  - do:
      indices.create:
        index: test
        body:
          settings:
            number_of_shards: 2
          mappings:
            properties:
              dval:
                type: double
              str:
                type: keyword
  - do:
      index:
        index: test
        id: d1
        body: { "dval": 101,  "str": "18446744073709551618" }
  - do:
      index:
        index: test
        id: d2
        body: { "dval": 202, "str": "9223372036854775809" }
  - do:
      index:
        index: test
        id: d3
        body: { "dval": 303, "str": "-1" }
  - do:
      index:
        index: test
        id: d4
        body: { "dval": 404 }
  - do:
      index:
        index: test
        id: d5
        body: { "dval": 505, "str": "unparseable number" }
  - do:
      index:
        index: test
        id: d6
        body: { "dval": 606, "str": "10E40" }
  - do:
      index:
        index: test
        id: d7
        body: { "dval": 707, "str": "18446744073709551618.555" }
  - do:
      indices.refresh: {}
  - do:
      search:
        rest_total_hits_as_int: true
        index: test
        body:
          query: { "match_all": {} }
          sort: [ { dval: asc } ]
          script_fields:
            str:
              script:
                source: "field('str').as(Field.Long).getValue(-20)"
  - match: { hits.total: 7 }
  - match: { hits.hits.0._id: d1 }
  - match: { hits.hits.0.fields.str.0: -20 }
  - match: { hits.hits.1._id: d2 }
  - match: { hits.hits.1.fields.str.0: -20 }
  - match: { hits.hits.2._id: d3 }
  - match: { hits.hits.2.fields.str.0: -1 }
  - match: { hits.hits.3._id: d4 }
  - match: { hits.hits.3.fields.str.0: -20 }
  - match: { hits.hits.4._id: d5 }
  - match: { hits.hits.4.fields.str.0: -20 }
  - do:
      search:
        rest_total_hits_as_int: true
        index: test
        body:
          query: { "match_all": {} }
          sort: [ { dval: asc } ]
          script_fields:
            str:
              script:
                source: "field('str').getLong(-40)"
  - match: { hits.total: 7 }
  - match: { hits.hits.0._id: d1 }
  - match: { hits.hits.0.fields.str.0: -40 }
  - match: { hits.hits.1._id: d2 }
  - match: { hits.hits.1.fields.str.0: -40 }
  - match: { hits.hits.2._id: d3 }
  - match: { hits.hits.2.fields.str.0: -1 }
  - match: { hits.hits.3._id: d4 }
  - match: { hits.hits.3.fields.str.0: -40 }
  - match: { hits.hits.4._id: d5 }
  - match: { hits.hits.4.fields.str.0: -40 }
  - do:
      search:
        rest_total_hits_as_int: true
        index: test
        body:
          query: { "match_all": {} }
          sort: [ { dval: asc } ]
          script_fields:
            str:
              script:
                source: "field('str').as(Field.BigInteger).getValue(BigInteger.TEN)"
  - match: { hits.total: 7 }
  - match: { hits.hits.0._id: d1 }
  - match: { hits.hits.0.fields.str.0: 18446744073709551618 }
  - match: { hits.hits.1._id: d2 }
  - match: { hits.hits.1.fields.str.0: 9223372036854775809 }
  - match: { hits.hits.2._id: d3 }
  - match: { hits.hits.2.fields.str.0: -1 }
  - match: { hits.hits.3._id: d4 }
  - match: { hits.hits.3.fields.str.0: 10 }
  - match: { hits.hits.4._id: d5 }
  - match: { hits.hits.4.fields.str.0: 10 }
  - match: { hits.hits.5._id: d6 }
  - match: { hits.hits.5.fields.str.0: 100000000000000000000000000000000000000000 }
  - match: { hits.hits.6._id: d7 }
  - match: { hits.hits.6.fields.str.0: 18446744073709551618 }
