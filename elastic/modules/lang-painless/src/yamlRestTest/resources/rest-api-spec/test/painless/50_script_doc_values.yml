setup:
    - do:
        indices.create:
            index: test
            body:
                settings:
                    number_of_shards: 1
                mappings:
                    properties:
                        boolean:
                            type: boolean
                        date:
                            type: date
                        nanos:
                            type: date_nanos
                        geo_point:
                            type: geo_point
                        ip:
                            type: ip
                        keyword:
                            type: keyword
                        long:
                            type: long
                        integer:
                            type: integer
                        short:
                            type: short
                        byte:
                            type: byte
                        double:
                            type: double
                        float:
                            type: float
                        half_float:
                            type: half_float
                        scaled_float:
                            type: scaled_float
                            scaling_factor: 100
                        token_count:
                            type: token_count
                            analyzer: standard
                        rank:
                            type: integer
                        flattended:
                            type: flattened


    - do:
        index:
            index: test
            id: "1"
            body:
                rank: 1
                boolean: true
                date: 2017-01-01T12:11:12
                nanos: 2015-01-01T12:10:30.123456789Z
                geo_point: 41.12,-71.34
                ip: 192.168.0.19
                keyword: not split at all
                long: 12348732141234
                integer: 134134566
                short: 1324
                byte: 12
                double: 3.14159265358979
                float: 3.141592654
                half_float: 3.140625
                scaled_float: 3.14
                token_count: count all these words please

    - do:
        index:
          index: test
          id: "2"
          body:
              rank: 2

    - do:
        index:
          index: test
          id: "3"
          body:
              rank: 3
              boolean: [true, false, true]
              ip: ["10.1.2.3", "2001:db8::2:1"]
              date: [2017-01-01T12:11:12, 2018-01-01T12:11:12]
              nanos: [2015-01-01T12:10:30.123456789Z, 2015-01-01T12:10:30.987654321Z]
              geo_point: [[-71.34,41.12],[60.32,21.25]]
              keyword: ["one string", "another string"]
              long: [1152921504606846976, 576460752303423488]
              integer: [5, 17, 29]
              short: [6, 18, 30, 45]
              byte: [16, 32, 64, 8, 4]
              double: [3.141592653588, 2.141592653587]
              float: [1.123, 2.234]
              half_float: [1.123, 2.234]
              scaled_float: [-3.5, 2.5]


    - do:
        indices.refresh: {}

---
"boolean":
    - do:
        search:
            rest_total_hits_as_int: true
            body:
                query: { term: { _id: "1" } }
                script_fields:
                    field:
                        script:
                            source: "doc['boolean'].get(0)"
    - match: { hits.hits.0.fields.field.0: true }

    - do:
        search:
            rest_total_hits_as_int: true
            body:
                query: { term: { _id: "1" } }
                script_fields:
                    field:
                        script:
                            source: "doc['boolean'].value"
    - match: { hits.hits.0.fields.field.0: true }

    - do:
        search:
            rest_total_hits_as_int: true
            body:
                query: { term: { _id: "1" } }
                script_fields:
                    field:
                        script:
                            source: "field('boolean').get(false)"
    - match: { hits.hits.0.fields.field.0: true }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: "1" } }
            script_fields:
              field:
                script:
                  source: "/* avoid yaml stash for '$' */ $('boolean', false)"
    - match: { hits.hits.0.fields.field.0: true }

    - do:
        search:
            rest_total_hits_as_int: true
            body:
                query: { term: { _id: "2" } }
                script_fields:
                    field:
                        script:
                            source: "field('boolean').get(false)"
    - match: { hits.hits.0.fields.field.0: false }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: "2" } }
            script_fields:
              field:
                script:
                  source: "/* avoid yaml stash for '$' */ $('boolean', false)"
    - match: { hits.hits.0.fields.field.0: false }

    - do:
        search:
            rest_total_hits_as_int: true
            body:
                query: { term: { _id: "1" } }
                script_fields:
                    field:
                        script:
                            source: "field('boolean').get(1, false)"
    - match: { hits.hits.0.fields.field.0: false }

    - do:
        search:
            rest_total_hits_as_int: true
            body:
                query: { term: { _id: "1" } }
                script_fields:
                    field:
                        script:
                            source: "int total = 0; for (boolean b : field('boolean')) { total += b ? 1 : 0; } total;"
    - match: { hits.hits.0.fields.field.0: 1 }

    - do:
        search:
            rest_total_hits_as_int: true
            body:
                query: { term: { _id: "3" } }
                script_fields:
                    field:
                        script:
                            source: "int total = 0; for (boolean b : field('boolean')) { total += b ? 1 : 0; } total + field('boolean').size();"
    - match: { hits.hits.0.fields.field.0: 5 }

    - do:
        search:
            rest_total_hits_as_int: true
            body:
                query: { term: { _id: "2" } }
                script_fields:
                    field:
                        script:
                            source: "field('boolean').size()"
    - match: { hits.hits.0.fields.field.0: 0 }


---
"date":
    - skip:
        features: "warnings"

    - do:
        search:
            rest_total_hits_as_int: true
            body:
                query: { term: { _id: "1" } }
                script_fields:
                    field:
                        script:
                            source: "doc.date.get(0)"
    - match: { hits.hits.0.fields.field.0: '2017-01-01T12:11:12.000Z' }

    - do:
        search:
            rest_total_hits_as_int: true
            body:
                query: { term: { _id: "1" } }
                script_fields:
                    field:
                        script:
                            source: "doc.date.value"
    - match: { hits.hits.0.fields.field.0: '2017-01-01T12:11:12.000Z' }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: "1" } }
            script_fields:
              field:
                script:
                  source: "field('date').get(null)"
    - match: { hits.hits.0.fields.field.0: '2017-01-01T12:11:12.000Z' }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: "1" } }
            script_fields:
              field:
                script:
                  source: "/* avoid yaml stash */ $('date', null)"
    - match: { hits.hits.0.fields.field.0: '2017-01-01T12:11:12.000Z' }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: 1 } }
            script_fields:
              field:
                script:
                  source: "doc.date.get(0).getMillis()"
    - match: { hits.hits.0.fields.field.0: 1483272672000 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: 1 } }
            script_fields:
              field:
                script:
                  source: "doc.date.value.getMillis()"
    - match: { hits.hits.0.fields.field.0: 1483272672000 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: 1 } }
            script_fields:
              field:
                script:
                  source: "field('date').get(null).getMillis()"
    - match: { hits.hits.0.fields.field.0: 1483272672000 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: 1 } }
            script_fields:
              field:
                script:
                  source: "/* avoid yaml stash */ $('date', null).getMillis()"
    - match: { hits.hits.0.fields.field.0: 1483272672000 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: 1 } }
            script_fields:
              field:
                script:
                  source: "doc.date.get(0).millis"
    - match: { hits.hits.0.fields.field.0: 1483272672000 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: 1 } }
            script_fields:
              field:
                script:
                  source: "doc.date.value.millis"
    - match: { hits.hits.0.fields.field.0: 1483272672000 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: 1 } }
            script_fields:
              field:
                script:
                  source: "field('date').get(null).millis"
    - match: { hits.hits.0.fields.field.0: 1483272672000 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: 1 } }
            script_fields:
              field:
                script:
                  source: "/* avoid yaml stash */ $('date', null).millis"
    - match: { hits.hits.0.fields.field.0: 1483272672000 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: "2" } }
            script_fields:
              field:
                script:
                  source: "field('date').get(ZonedDateTime.parse('2018-01-01T12:11:12.000Z'))"
    - match: { hits.hits.0.fields.field.0: '2018-01-01T12:11:12.000Z' }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: "2" } }
            script_fields:
              field:
                script:
                  source: "/* avoid yaml stash */ $('date', ZonedDateTime.parse('2018-01-01T12:11:12.000Z'))"
    - match: { hits.hits.0.fields.field.0: '2018-01-01T12:11:12.000Z' }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: "1" } }
            script_fields:
              field:
                script:
                  source: "doc['nanos'].value"
    - match: { hits.hits.0.fields.field.0: '2015-01-01T12:10:30.123456789Z' }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: "1" } }
            script_fields:
              field:
                script:
                  source: "field('nanos').get(null)"
    - match: { hits.hits.0.fields.field.0: '2015-01-01T12:10:30.123456789Z' }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: "1" } }
            script_fields:
              field:
                script:
                  source: "/* avoid yaml stash */ $('nanos', null)"
    - match: { hits.hits.0.fields.field.0: '2015-01-01T12:10:30.123456789Z' }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: "2" } }
            script_fields:
              field:
                script:
                  source: "field('nanos').get(ZonedDateTime.parse('2016-01-01T12:10:30.123Z'))"
    - match: { hits.hits.0.fields.field.0: '2016-01-01T12:10:30.123Z' }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: "2" } }
            script_fields:
              field:
                script:
                  source: "/* avoid yaml stash */ $('nanos', ZonedDateTime.parse('2016-01-01T12:10:30.123Z'))"
    - match: { hits.hits.0.fields.field.0: '2016-01-01T12:10:30.123Z' }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: "1" } }
            script_fields:
              field:
                script:
                  source: "doc['nanos'].value.getNano()"
    - match: { hits.hits.0.fields.field.0: 123456789 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: "1" } }
            script_fields:
              field:
                script:
                  source: "field('nanos').get(null).getNano()"
    - match: { hits.hits.0.fields.field.0: 123456789 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: "1" } }
            script_fields:
              field:
                script:
                  source: "/* avoid yaml stash */ $('nanos', null).getNano()"
    - match: { hits.hits.0.fields.field.0: 123456789 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: "2" } }
            script_fields:
              field:
                script:
                  source: "field('nanos').get(ZonedDateTime.parse('2016-01-01T12:10:30.123Z')).getNano()"
    - match: { hits.hits.0.fields.field.0: 123000000 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: "3" } }
            script_fields:
              field:
                script:
                  source: "field('date').get(1, null)"
    - match: { hits.hits.0.fields.field.0: "2018-01-01T12:11:12.000Z" }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: "3" } }
            script_fields:
              field:
                script:
                  source: "field('nanos').get(1, null)"
    - match: { hits.hits.0.fields.field.0: "2015-01-01T12:10:30.987654321Z" }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: "3" } }
            script_fields:
              field:
                script:
                  source: "List times = new ArrayList(); for (ZonedDateTime zdt : field('date')) times.add(zdt); times"
    - match: { hits.hits.0.fields.field: ["2017-01-01T12:11:12.000Z", "2018-01-01T12:11:12.000Z"] }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: "3" } }
            script_fields:
              field:
                script:
                  source: "List times = new ArrayList(); for (ZonedDateTime zdt : field('nanos')) times.add(zdt); times"
    - match: { hits.hits.0.fields.field: ["2015-01-01T12:10:30.123456789Z", "2015-01-01T12:10:30.987654321Z"] }

---
"geo_point":
    - do:
        search:
            rest_total_hits_as_int: true
            body:
                query: { term: { _id: "1" } }
                script_fields:
                    field:
                        script:
                            source: "doc['geo_point'].get(0)"
    - match: { hits.hits.0.fields.field.0.lat: 41.1199999647215 }
    - match: { hits.hits.0.fields.field.0.lon: -71.34000004269183 }

    - do:
        search:
            rest_total_hits_as_int: true
            body:
                query: { term: { _id: "1" } }
                script_fields:
                    field:
                        script:
                            source: "doc['geo_point'].value"
    - match: { hits.hits.0.fields.field.0.lat: 41.1199999647215 }
    - match: { hits.hits.0.fields.field.0.lon: -71.34000004269183 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: "1" } }
            script_fields:
              field:
                script:
                  source: "field('geo_point').get(new GeoPoint())"
    - match: { hits.hits.0.fields.field.0.lat: 41.1199999647215 }
    - match: { hits.hits.0.fields.field.0.lon: -71.34000004269183 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: "1" } }
            script_fields:
              field:
                script:
                  source: "/* avoid yaml stash */ $('geo_point', new GeoPoint())"
    - match: { hits.hits.0.fields.field.0.lat: 41.1199999647215 }
    - match: { hits.hits.0.fields.field.0.lon: -71.34000004269183 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: "3" } }
            script_fields:
              field:
                script:
                  source: "field('geo_point').get(new GeoPoint())"
    - match: { hits.hits.0.fields.field.0.lat: 21.249999990686774 }
    - match: { hits.hits.0.fields.field.0.lon: 60.319999968633056 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: "3" } }
            script_fields:
              field:
                script:
                  source: "/* avoid yaml stash */ $('geo_point', new GeoPoint())"
    - match: { hits.hits.0.fields.field.0.lat: 21.249999990686774 }
    - match: { hits.hits.0.fields.field.0.lon: 60.319999968633056 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: "3" } }
            script_fields:
              field:
                script:
                  source: "field('geo_point').get(1, new GeoPoint())"
    - match: { hits.hits.0.fields.field.0.lat: 41.1199999647215 }
    - match: { hits.hits.0.fields.field.0.lon: -71.34000004269183 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: "2" } }
            script_fields:
              field:
                script:
                  source: "/* avoid yaml stash */ $('geo_point', new GeoPoint(1.0, 2.0))"
    - match: { hits.hits.0.fields.field.0.lat: 1.0 }
    - match: { hits.hits.0.fields.field.0.lon: 2.0 }

    - do:
        search:
            rest_total_hits_as_int: true
            body:
                query: { term: { _id: "1" } }
                script_fields:
                    centroid:
                        script:
                            source: "doc['geo_point'].getCentroid()"
    - match: { hits.hits.0.fields.centroid.0.lat: 41.1199999647215 }
    - match: { hits.hits.0.fields.centroid.0.lon: -71.34000004269183 }

    - do:
        search:
            rest_total_hits_as_int: true
            body:
                query: { term: { _id: "1" } }
                script_fields:
                    bbox:
                        script:
                            source: "doc['geo_point'].getBoundingBox()"
    - match: { hits.hits.0.fields.bbox.0.top_left.lat: 41.1199999647215 }
    - match: { hits.hits.0.fields.bbox.0.top_left.lon: -71.34000004269183 }
    - match: { hits.hits.0.fields.bbox.0.bottom_right.lat: 41.1199999647215 }
    - match: { hits.hits.0.fields.bbox.0.bottom_right.lon: -71.34000004269183 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: "1" } }
            script_fields:
              label_position:
                script:
                  source: "doc['geo_point'].getLabelPosition()"
    - match: { hits.hits.0.fields.label_position.0.lat: 41.1199999647215 }
    - match: { hits.hits.0.fields.label_position.0.lon: -71.34000004269183 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: "1" } }
            script_fields:
                    topLeft:
                        script:
                            source: "doc['geo_point'].getBoundingBox().topLeft()"
                    bottomRight:
                        script:
                            source: "doc['geo_point'].getBoundingBox().bottomRight()"
    - match: { hits.hits.0.fields.topLeft.0.lat: 41.1199999647215 }
    - match: { hits.hits.0.fields.topLeft.0.lon: -71.34000004269183 }
    - match: { hits.hits.0.fields.bottomRight.0.lat: 41.1199999647215 }
    - match: { hits.hits.0.fields.bottomRight.0.lon: -71.34000004269183 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: "1" } }
            script_fields:
              type:
                script:
                  source: "doc['geo_point'].getDimensionalType()"
    - match: { hits.hits.0.fields.type.0: 0 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            query: { term: { _id: "1" } }
            script_fields:
              width:
                script:
                  source: "doc['geo_point'].getMercatorWidth()"
              height:
                script:
                  source: "doc['geo_point'].getMercatorHeight()"
    - match: { hits.hits.0.fields.width.0: 0.0 }
    - match: { hits.hits.0.fields.height.0: 0.0 }

---
"ip":
    - do:
        search:
            rest_total_hits_as_int: true
            body:
                query: { term: { _id: "1" } }
                script_fields:
                    field:
                        script:
                            source: "doc['ip'].get(0)"
    - match: { hits.hits.0.fields.field.0: "192.168.0.19" }

    - do:
        search:
            rest_total_hits_as_int: true
            body:
                query: { term: { _id: "1" } }
                script_fields:
                    field:
                        script:
                            source: "doc['ip'].value"
    - match: { hits.hits.0.fields.field.0: "192.168.0.19" }

    - do:
        search:
            rest_total_hits_as_int: true
            body:
                sort: [ { rank: asc } ]
                script_fields:
                    field:
                        script:
                            source: "field('ip').get(new IPAddress('127.0.0.1'))"
                    field_string:
                        script:
                            source: "field('ip').asString('127.0.0.1')"
    - match: { hits.hits.0.fields.field.0: "192.168.0.19" }
    - match: { hits.hits.0.fields.field_string.0: "192.168.0.19" }
    - match: { hits.hits.1.fields.field.0: "127.0.0.1" }
    - match: { hits.hits.1.fields.field_string.0: "127.0.0.1" }
    - match: { hits.hits.2.fields.field.0: "10.1.2.3" }
    - match: { hits.hits.2.fields.field_string.0: "10.1.2.3" }

    - do:
        search:
            rest_total_hits_as_int: true
            body:
                sort: [ { rank: asc } ]
                script_fields:
                    field:
                        script:
                            source: "field('ip').get(1, new IPAddress('127.0.0.1'))"
                    field_string:
                        script:
                            source: "field('ip').asString(1, '127.0.0.1')"
    - match: { hits.hits.0.fields.field.0: "127.0.0.1" }
    - match: { hits.hits.0.fields.field_string.0: "127.0.0.1" }
    - match: { hits.hits.1.fields.field.0: "127.0.0.1" }
    - match: { hits.hits.1.fields.field_string.0: "127.0.0.1" }
    - match: { hits.hits.2.fields.field.0: "2001:db8::2:1" }
    - match: { hits.hits.2.fields.field_string.0: "2001:db8::2:1" }

    - do:
        search:
            rest_total_hits_as_int: true
            body:
                sort: [ { rank: asc } ]
                script_fields:
                    field:
                        script:
                            source: "String.join(',', field('ip').asStrings())"
    - match: { hits.hits.0.fields.field.0: "192.168.0.19" }
    - match: { hits.hits.1.fields.field.0: "" }
    - match: { hits.hits.2.fields.field.0: "10.1.2.3,2001:db8::2:1" }

    - do:
        search:
            rest_total_hits_as_int: true
            body:
                sort: [ { rank: asc } ]
                runtime_mappings:
                    ip_script_field:
                        type: ip
                        script:
                            source: "for (IPAddress addr : field('ip')) { String ip = addr.toString(); emit(ip.substring(0, ip.length() - 1) + field('ip').size()) }"
                script_fields:
                    field:
                        script:
                            source: "field('ip_script_field').get(new IPAddress('1.2.3.4'))"
    - match: { hits.hits.0.fields.field.0: "192.168.0.11" }
    - match: { hits.hits.1.fields.field.0: "1.2.3.4" }
    - match: { hits.hits.2.fields.field.0: "10.1.2.2" }

---
"keyword":
    - do:
        search:
            rest_total_hits_as_int: true
            body:
                query: { term: { _id: "1" } }
                script_fields:
                    field:
                        script:
                            source: "doc['keyword'].get(0)"
    - match: { hits.hits.0.fields.field.0: "not split at all" }

    - do:
        search:
            rest_total_hits_as_int: true
            body:
                query: { term: { _id: "1" } }
                script_fields:
                    field:
                        script:
                            source: "doc['keyword'].value"
    - match: { hits.hits.0.fields.field.0: "not split at all" }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "field('keyword').get('missing')"
    - match: { hits.hits.0.fields.field.0: "not split at all" }
    - match: { hits.hits.1.fields.field.0: "missing" }
    - match: { hits.hits.2.fields.field.0: "another string" } # doc values are sorted

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "/* avoid yaml stash */ $('keyword', 'missing')"
    # same as `field('keyword').get('missing')`
    - match: { hits.hits.0.fields.field.0: "not split at all" }
    - match: { hits.hits.1.fields.field.0: "missing" }
    - match: { hits.hits.2.fields.field.0: "another string" }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "field('keyword').get(1, 'dne')"
    - match: { hits.hits.0.fields.field.0: "dne" }
    - match: { hits.hits.1.fields.field.0: "dne" }
    - match: { hits.hits.2.fields.field.0: "one string" } # doc values are sorted

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "String.join(', ', field('keyword'))"
    - match: { hits.hits.0.fields.field.0: "not split at all" }
    - match: { hits.hits.1.fields.field.0: "" }
    - match: { hits.hits.2.fields.field.0: "another string, one string" }

---
"long":
    - skip:
        features: "warnings"

    - do:
        search:
            rest_total_hits_as_int: true
            body:
                query: { term: { _id: "1" } }
                script_fields:
                    field:
                        script:
                            source: "doc['long'].get(0)"
    - match: { hits.hits.0.fields.field.0: 12348732141234 }

    - do:
        search:
            rest_total_hits_as_int: true
            body:
                query: { term: { _id: "1" } }
                script_fields:
                    field:
                        script:
                            source: "doc['long'].value"
    - match: { hits.hits.0.fields.field.0: 12348732141234 }

---
"integer":
    - do:
        search:
            rest_total_hits_as_int: true
            body:
                query: { term: { _id: "1" } }
                script_fields:
                    field:
                        script:
                            source: "doc['integer'].get(0)"
    - match: { hits.hits.0.fields.field.0: 134134566 }

    - do:
        search:
            rest_total_hits_as_int: true
            body:
                query: { term: { _id: "1" } }
                script_fields:
                    field:
                        script:
                            source: "doc['integer'].value"
    - match: { hits.hits.0.fields.field.0: 134134566 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "field('integer').get(-1)"
    - match: { hits.hits.0.fields.field.0: 134134566 }
    - match: { hits.hits.1.fields.field.0: -1 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "/* avoid yaml stash */ $('integer', -1)"
    - match: { hits.hits.0.fields.field.0: 134134566 }
    - match: { hits.hits.1.fields.field.0: -1 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "field('integer').get(1, -3)"
    - match: { hits.hits.0.fields.field.0: -3 }
    - match: { hits.hits.1.fields.field.0: -3 }
    - match: { hits.hits.2.fields.field.0: 17 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "int total = 0; for (int i : field('integer')) { total += i; } total + field('integer').size();"
    - match: { hits.hits.0.fields.field.0: 134134567 }
    - match: { hits.hits.1.fields.field.0: 0 }
    - match: { hits.hits.2.fields.field.0: 54 }

---
"short":
    - do:
        search:
            rest_total_hits_as_int: true
            body:
                query: { term: { _id: "1" } }
                script_fields:
                    field:
                        script:
                            source: "doc['short'].get(0)"
    - match: { hits.hits.0.fields.field.0: 1324 }

    - do:
        search:
            rest_total_hits_as_int: true
            body:
                query: { term: { _id: "1" } }
                script_fields:
                    field:
                        script:
                            source: "doc['short'].value"
    - match: { hits.hits.0.fields.field.0: 1324 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "field('short').get(-1)"
    - match: { hits.hits.0.fields.field.0: 1324 }
    - match: { hits.hits.1.fields.field.0: -1 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "/* avoid yaml stash */ $('short', -1)"
    - match: { hits.hits.0.fields.field.0: 1324 }
    - match: { hits.hits.1.fields.field.0: -1 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "short defaultShort = -1; field('short').get(defaultShort)"
    - match: { hits.hits.0.fields.field.0: 1324 }
    - match: { hits.hits.1.fields.field.0: -1 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "short defaultShort = -1; $('short', defaultShort)"
    - match: { hits.hits.0.fields.field.0: 1324 }
    - match: { hits.hits.1.fields.field.0: -1 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "field('short').get(1, -3)"
    - match: { hits.hits.0.fields.field.0: -3 }
    - match: { hits.hits.1.fields.field.0: -3 }
    - match: { hits.hits.2.fields.field.0: 18 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "short defaultShort = -3; field('short').get(1, defaultShort)"
    - match: { hits.hits.0.fields.field.0: -3 }
    - match: { hits.hits.1.fields.field.0: -3 }
    - match: { hits.hits.2.fields.field.0: 18 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "int total = 0; for (short s : field('short')) { total += s; } total + field('short').size();"
    - match: { hits.hits.0.fields.field.0: 1325 }
    - match: { hits.hits.1.fields.field.0: 0 }
    - match: { hits.hits.2.fields.field.0: 103 }

---
"byte":
    - do:
        search:
            rest_total_hits_as_int: true
            body:
                query: { term: { _id: "1" } }
                script_fields:
                    field:
                        script:
                            source: "doc['byte'].get(0)"
    - match: { hits.hits.0.fields.field.0: 12 }

    - do:
        search:
            rest_total_hits_as_int: true
            body:
                query: { term: { _id: "1" } }
                script_fields:
                    field:
                        script:
                            source: "doc['byte'].value"
    - match: { hits.hits.0.fields.field.0: 12 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "field('byte').get((byte) 5)"
    - match: { hits.hits.0.fields.field.0: 12 }
    - match: { hits.hits.1.fields.field.0: 5 }
    - match: { hits.hits.2.fields.field.0: 4 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "/* avoid yaml stash */ $('byte', (byte) 5)"
    - match: { hits.hits.0.fields.field.0: 12 }
    - match: { hits.hits.1.fields.field.0: 5 }
    - match: { hits.hits.2.fields.field.0: 4 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "byte defaultByte = 5; field('byte').get(defaultByte)"
    - match: { hits.hits.0.fields.field.0: 12 }
    - match: { hits.hits.1.fields.field.0: 5 }
    - match: { hits.hits.2.fields.field.0: 4 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "byte defaultByte = 5; $('byte', defaultByte)"
    - match: { hits.hits.0.fields.field.0: 12 }
    - match: { hits.hits.1.fields.field.0: 5 }
    - match: { hits.hits.2.fields.field.0: 4 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "field('byte').get(5)"
    - match: { hits.hits.0.fields.field.0: 12 }
    - match: { hits.hits.1.fields.field.0: 5 }
    - match: { hits.hits.2.fields.field.0: 4 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "/* avoid yaml stash */ $('byte', 5)"
    - match: { hits.hits.0.fields.field.0: 12 }
    - match: { hits.hits.1.fields.field.0: 5 }
    - match: { hits.hits.2.fields.field.0: 4 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "field('byte').get(1, (byte) 7)"
    - match: { hits.hits.0.fields.field.0: 7 }
    - match: { hits.hits.1.fields.field.0: 7 }
    - match: { hits.hits.2.fields.field.0: 8 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "byte defaultByte = 7; field('byte').get(1, defaultByte)"
    - match: { hits.hits.0.fields.field.0: 7 }
    - match: { hits.hits.1.fields.field.0: 7 }
    - match: { hits.hits.2.fields.field.0: 8 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "field('byte').get(1, 7)"
    - match: { hits.hits.0.fields.field.0: 7 }
    - match: { hits.hits.1.fields.field.0: 7 }
    - match: { hits.hits.2.fields.field.0: 8 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "int total = 0; for (byte s : field('byte')) { total += s; } total + field('byte').size();"
    - match: { hits.hits.0.fields.field.0: 13 }
    - match: { hits.hits.1.fields.field.0: 0 }
    - match: { hits.hits.2.fields.field.0: 129 }

---
"double":
    - do:
        search:
            rest_total_hits_as_int: true
            body:
                query: { term: { _id: "1" } }
                script_fields:
                    field:
                        script:
                            source: "doc['double'].get(0)"
    - match: { hits.hits.0.fields.field.0: 3.14159265358979 }

    - do:
        search:
            rest_total_hits_as_int: true
            body:
                query: { term: { _id: "1" } }
                script_fields:
                    field:
                        script:
                            source: "doc['double'].value"
    - match: { hits.hits.0.fields.field.0: 3.14159265358979 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "field('double').get(-1)"
    - match: { hits.hits.0.fields.field.0: 3.14159265358979 }
    - match: { hits.hits.1.fields.field.0: -1 }
    - match: { hits.hits.2.fields.field.0: 2.141592653587 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "/* avoid yaml stash */ $('double', -1)"
    - match: { hits.hits.0.fields.field.0: 3.14159265358979 }
    - match: { hits.hits.1.fields.field.0: -1 }
    - match: { hits.hits.2.fields.field.0: 2.141592653587 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "double defaultDouble = 7.8; field('double').get(1, defaultDouble)"
    - match: { hits.hits.0.fields.field.0: 7.8 }
    - match: { hits.hits.1.fields.field.0: 7.8 }
    - match: { hits.hits.2.fields.field.0: 3.141592653588 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "field('double').get(1, 9.2)"
    - match: { hits.hits.0.fields.field.0: 9.2 }
    - match: { hits.hits.1.fields.field.0: 9.2 }
    - match: { hits.hits.2.fields.field.0: 3.141592653588 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "double total = 0; for (double d : field('double')) { total += d; } total + field('double').size();"
    - match: { hits.hits.0.fields.field.0: 4.14159265358979 }
    - match: { hits.hits.1.fields.field.0: 0 }
    - match: { hits.hits.2.fields.field.0: 7.283185307175 }

---
"float":
    - do:
        search:
            rest_total_hits_as_int: true
            body:
                query: { term: { _id: "1" } }
                script_fields:
                    field:
                        script:
                            source: "doc['float'].get(0)"
    - match: { hits.hits.0.fields.field.0: 3.1415927410125732 } # this ends up as a double

    - do:
        search:
            rest_total_hits_as_int: true
            body:
                query: { term: { _id: "1" } }
                script_fields:
                    field:
                        script:
                            source: "doc['float'].value"
    - match: { hits.hits.0.fields.field.0: 3.1415927410125732 } # this ends up as a double

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "field('float').get(-1).toString()" # toString to avoid making this a double
    - match: { hits.hits.0.fields.field.0: "3.1415927" }
    - match: { hits.hits.1.fields.field.0: "-1.0" }
    - match: { hits.hits.2.fields.field.0: "1.123" }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "return $('float', -1).toString()" # toString to avoid making this a double
    - match: { hits.hits.0.fields.field.0: "3.1415927" }
    - match: { hits.hits.1.fields.field.0: "-1.0" }
    - match: { hits.hits.2.fields.field.0: "1.123" }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "float defaultFloat = 7.8f; field('float').get(1, defaultFloat).toString()"
    - match: { hits.hits.0.fields.field.0: "7.8" }
    - match: { hits.hits.1.fields.field.0: "7.8" }
    - match: { hits.hits.2.fields.field.0: "2.234" }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "field('float').get(1, 9.2f).toString()"
    - match: { hits.hits.0.fields.field.0: "9.2" }
    - match: { hits.hits.1.fields.field.0: "9.2" }
    - match: { hits.hits.2.fields.field.0: "2.234" }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "float total = 0; for (float f : field('float')) { total += f; } Float.toString(total + field('float').size());"
    - match: { hits.hits.0.fields.field.0: "4.141593" }
    - match: { hits.hits.1.fields.field.0: "0.0" }
    - match: { hits.hits.2.fields.field.0: "5.357" }

---
"half_float":
    - skip:
        features: close_to

    - do:
        search:
            rest_total_hits_as_int: true
            body:
                query: { term: { _id: "1" } }
                script_fields:
                    field:
                        script:
                            source: "doc['half_float'].get(0)"
    - close_to: { hits.hits.0.fields.field.0: { value: 3.140625, error: 0.001 } }

    - do:
        search:
            rest_total_hits_as_int: true
            body:
                query: { term: { _id: "1" } }
                script_fields:
                    field:
                        script:
                            source: "doc['half_float'].value"
    - close_to: { hits.hits.0.fields.field.0: { value: 3.140625, error: 0.001 } }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "field('half_float').get(0.0)"
    - close_to: { hits.hits.0.fields.field.0: { value: 3.140625, error: 0.001 } }
    - match: { hits.hits.1.fields.field.0: 0.0 }
    - close_to: { hits.hits.2.fields.field.0: { value: 1.123, error: 0.001 } }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "/* avoid stash */ $('half_float', 0.0)"
    - close_to: { hits.hits.0.fields.field.0: { value: 3.140625, error: 0.001 } }
    - match: { hits.hits.1.fields.field.0: 0.0 }
    - close_to: { hits.hits.2.fields.field.0: { value: 1.123, error: 0.001 } }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "field('half_float').get(1, 0.0)"
    - match: { hits.hits.0.fields.field.0: 0.0 }
    - match: { hits.hits.1.fields.field.0: 0.0 }
    - close_to: { hits.hits.2.fields.field.0: { value: 2.234, error: 0.001 } }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "field('half_float').asDouble(0.0)"
    - close_to: { hits.hits.0.fields.field.0: { value: 3.140625, error: 0.001 } }
    - match: { hits.hits.1.fields.field.0: 0.0 }
    - close_to: { hits.hits.2.fields.field.0: { value: 1.123, error: 0.0001 } }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "field('half_float').asDouble(1, 0.0)"
    - match: { hits.hits.0.fields.field.0: 0.0 }
    - match: { hits.hits.1.fields.field.0: 0.0 }
    - close_to: { hits.hits.2.fields.field.0: { value: 2.234, error: 0.001 } }

---
"scaled_float":
    - do:
        search:
            rest_total_hits_as_int: true
            body:
                query: { term: { _id: "1" } }
                script_fields:
                    field:
                        script:
                            source: "doc['scaled_float'].get(0)"
    - match: { hits.hits.0.fields.field.0: 3.14 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "field('scaled_float').get(0.0)"
    - match: { hits.hits.0.fields.field.0: 3.14 }
    - match: { hits.hits.1.fields.field.0: 0.0 }
    - match: { hits.hits.2.fields.field.0: -3.5 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "/* avoid stash */ $('scaled_float', 0.0)"
    - match: { hits.hits.0.fields.field.0: 3.14 }
    - match: { hits.hits.1.fields.field.0: 0.0 }
    - match: { hits.hits.2.fields.field.0: -3.5 }

    - do:
        search:
          rest_total_hits_as_int: true
          body:
            sort: [ { rank: asc } ]
            script_fields:
              field:
                script:
                  source: "field('scaled_float').get(1, 0.0)"
    - match: { hits.hits.0.fields.field.0: 0.0 }
    - match: { hits.hits.1.fields.field.0: 0.0 }
    - match: { hits.hits.2.fields.field.0: 2.5 }

    - do:
        search:
            rest_total_hits_as_int: true
            body:
                query: { term: { _id: "1" } }
                script_fields:
                    field:
                        script:
                            source: "doc['scaled_float'].value"
    - match: { hits.hits.0.fields.field.0: 3.14 }

---
"token_count":
    - do:
        search:
            rest_total_hits_as_int: true
            body:
                query: { term: { _id: "1" } }
                script_fields:
                    field:
                        script:
                            source: "doc['token_count'].get(0)"
    - match: { hits.hits.0.fields.field.0: 5 }

    - do:
        search:
            rest_total_hits_as_int: true
            body:
                query: { term: { _id: "1" } }
                script_fields:
                    field:
                        script:
                            source: "doc['token_count'].value"
    - match: { hits.hits.0.fields.field.0: 5 }

---
"empty":
  - do:
      search:
        rest_total_hits_as_int: true
        body:
          script_fields:
            field:
              script:
                source: "int value = field('dne').get(1); value"
  - match: { hits.hits.0.fields.field.0: 1}

  - do:
      search:
        rest_total_hits_as_int: true
        body:
          script_fields:
            field:
              script:
                source: "int value = $('dne', 1); value"
  - match: { hits.hits.0.fields.field.0: 1}

  - do:
      search:
        rest_total_hits_as_int: true
        body:
          script_fields:
            field:
              script:
                source: "int value = field('dne').get(1, 1); value"
  - match: { hits.hits.0.fields.field.0: 1 }

---
"version and sequence number":
  - do:
      indices.create:
        index: versiontest
        body:
          settings:
            number_of_shards: 1
          mappings:
            properties:
              keyword:
                type: keyword

  - do:
      index:
        index: versiontest
        id: "3000"
        version: 50
        version_type: external
        body:
          keyword: "3k"

  - do:
      indices.refresh: {}

  - do:
      search:
        index: versiontest
        rest_total_hits_as_int: true
        body:
          query: { term: { _id: "3000" } }
          script_fields:
            ver:
              script:
                source: "field('_version').get(10000)"
            seq:
              script:
                source: "field('_seq_no').get(10000)"
  - match: { hits.hits.0.fields.ver.0: 50 }
  - match: { hits.hits.0.fields.seq.0: 0 }

  - do:
      index:
        index: versiontest
        id: "3000"
        version: 60
        version_type: external
        body:
          keyword: "3k+1"
  - do:
      indices.refresh: {}

  - do:
      catch:      conflict
      index:
        index: versiontest
        id: "3000"
        version: 55
        version_type: external
        body:
          keyword: "3k+2"
  - do:
      indices.refresh: {}

  - do:
      search:
        index: versiontest
        rest_total_hits_as_int: true
        body:
          query: { term: { _id: "3000" } }
          script_fields:
            ver:
              script:
                source: "field('_version').get(10000)"
            seq:
              script:
                source: "field('_seq_no').get(10000)"
  - match: { hits.hits.0.fields.ver.0: 60 }
  - match: { hits.hits.0.fields.seq.0: 1 }

---
"flattened fields api":
  - do:
      indices.create:
        index: flatindex
        body:
          settings:
            number_of_shards: 1
          mappings:
            properties:
              rank:
                type: integer
              flattened:
                type: flattened

  - do:
      index:
        index: flatindex
        id: 40
        body:
          rank: 1
          flattened:
            top: 123
            dict:
              abc: def
              hij: lmn
            list: [true]

  - do:
      index:
        index: flatindex
        id: 41
        body:
          rank: 2
          flattened:
            top2: 876
            dict2:
              abc: def
              opq: rst
              hij: lmn
              uvx: wyz
            list2: [789, 1011, 1213]

  - do:
      indices.refresh: {}

  - do:
      search:
        index: flatindex
        rest_total_hits_as_int: true
        body:
          sort: [ { rank: asc } ]
          script_fields:
            f_root:
              script:
                source: "field('flattened').get('dne')"
            f_root_index:
              script:
                source: "field('flattened').get(2, 'dne')"
            f_top:
              script:
                source: "field('flattened.top').get('dne')"
            f_top2:
              script:
                source: "field('flattened.top2').get('dne')"
            f_dict:
              script:
                source: "field('flattened.dict.abc').get('dne')"
            f_dict2:
              script:
                source: "field('flattened.dict2.uvx').get('dne')"
            f_list:
              script:
                source: "field('flattened.list').get('dne')"
            f_list2:
              script:
                source: "field('flattened.list2').get(2, 'dne')"
            all:
              script:
                source: "String all = ''; for (String value : field('flattened')) { all += value } all"
  - match: { hits.hits.0.fields.f_root.0: "123" }
  - match: { hits.hits.0.fields.f_root_index.0: "lmn" }
  - match: { hits.hits.0.fields.f_top.0: "123" }
  - match: { hits.hits.0.fields.f_top2.0: "dne" }
  - match: { hits.hits.0.fields.f_dict.0: "def" }
  - match: { hits.hits.0.fields.f_dict2.0: "dne" }
  - match: { hits.hits.0.fields.f_list.0: "true" }
  - match: { hits.hits.0.fields.f_list2.0: "dne" }
  - match: { hits.hits.0.fields.all.0: "123deflmntrue" }
  - match: { hits.hits.1.fields.f_root.0: "1011" }
  - match: { hits.hits.1.fields.f_root_index.0: "789" }
  - match: { hits.hits.1.fields.f_top.0: "dne" }
  - match: { hits.hits.1.fields.f_top2.0: "876" }
  - match: { hits.hits.1.fields.f_dict.0: "dne" }
  - match: { hits.hits.1.fields.f_dict2.0: "wyz" }
  - match: { hits.hits.1.fields.f_list.0: "dne" }
  - match: { hits.hits.1.fields.f_list2.0: "789" }
  - match: { hits.hits.1.fields.all.0: "10111213789876deflmnrstwyz" }

---
"unsupported date methods":

  - do:
      catch: bad_request
      search:
        rest_total_hits_as_int: true
        body:
          query: { term: { _id: 1 } }
          script_fields:
            field:
              script:
                source: "/* avoid stash */ $('date', null).getCenturyOfEra()"
  - match: { error.failed_shards.0.reason.caused_by.type: "unsupported_operation_exception" }
  - match: { error.failed_shards.0.reason.caused_by.reason:
               "[getCenturyOfEra] is no longer available; use [get(ChronoField.YEAR_OF_ERA) / 100] instead" }

  - do:
      search:
        rest_total_hits_as_int: true
        body:
          query: { term: { _id: 1 } }
          script_fields:
            field:
              script:
                source: "/* avoid stash */ $('date', null).get(ChronoField.YEAR_OF_ERA) / 100"
  - match: { hits.hits.0.fields.field.0: 20 }

  - do:
      catch: bad_request
      search:
        rest_total_hits_as_int: true
        body:
          query: { term: { _id: 1 } }
          script_fields:
            field:
              script:
                source: "/* avoid stash */ $('date', null).getEra()"
  - match: { error.failed_shards.0.reason.caused_by.type: "unsupported_operation_exception" }
  - match: { error.failed_shards.0.reason.caused_by.reason:
               "[getEra] is no longer available; use [get(ChronoField.ERA)] instead" }

  - do:
      search:
        rest_total_hits_as_int: true
        body:
          query: { term: { _id: 1 } }
          script_fields:
            field:
              script:
                source: "/* avoid stash */ $('date', null).get(ChronoField.ERA)"
  - match: { hits.hits.0.fields.field.0: 1 }

  - do:
      catch: bad_request
      search:
        rest_total_hits_as_int: true
        body:
          query: { term: { _id: 1 } }
          script_fields:
            field:
              script:
                source: "/* avoid stash */ $('date', null).getHourOfDay()"
  - match: { error.failed_shards.0.reason.caused_by.type: "unsupported_operation_exception" }
  - match: { error.failed_shards.0.reason.caused_by.reason:
               "[getHourOfDay] is no longer available; use [getHour()] instead" }

  - do:
      search:
        rest_total_hits_as_int: true
        body:
          query: { term: { _id: 1 } }
          script_fields:
            field:
              script:
                source: "/* avoid stash */ $('date', null).getHour()"
  - match: { hits.hits.0.fields.field.0: 12 }

  - do:
      catch: bad_request
      search:
        rest_total_hits_as_int: true
        body:
          query: { term: { _id: 1 } }
          script_fields:
            field:
              script:
                source: "/* avoid stash */ $('date', null).getMillisOfDay()"
  - match: { error.failed_shards.0.reason.caused_by.type: "unsupported_operation_exception" }
  - match: { error.failed_shards.0.reason.caused_by.reason:
               "[getMillisOfDay] is no longer available; use [get(ChronoField.MILLI_OF_DAY)] instead" }

  - do:
      search:
        rest_total_hits_as_int: true
        body:
          query: { term: { _id: 1 } }
          script_fields:
            field:
              script:
                source: "/* avoid stash */ $('date', null).get(ChronoField.MILLI_OF_DAY)"
  - match: { hits.hits.0.fields.field.0: 43872000 }

  - do:
      catch: bad_request
      search:
        rest_total_hits_as_int: true
        body:
          query: { term: { _id: 1 } }
          script_fields:
            field:
              script:
                source: "/* avoid stash */ $('date', null).getMillisOfSecond()"
  - match: { error.failed_shards.0.reason.caused_by.type: "unsupported_operation_exception" }
  - match: { error.failed_shards.0.reason.caused_by.reason:
               "[getMillisOfSecond] is no longer available; use [get(ChronoField.MILLI_OF_SECOND)] instead" }

  - do:
      search:
        rest_total_hits_as_int: true
        body:
          query: { term: { _id: 1 } }
          script_fields:
            field:
              script:
                source: "/* avoid stash */ $('date', null).get(ChronoField.MILLI_OF_SECOND)"
  - match: { hits.hits.0.fields.field.0: 0 }

  - do:
      catch: bad_request
      search:
        rest_total_hits_as_int: true
        body:
          query: { term: { _id: 1 } }
          script_fields:
            field:
              script:
                source: "/* avoid stash */ $('date', null).getMinuteOfDay()"
  - match: { error.failed_shards.0.reason.caused_by.type: "unsupported_operation_exception" }
  - match: { error.failed_shards.0.reason.caused_by.reason:
               "[getMinuteOfDay] is no longer available; use [get(ChronoField.MINUTE_OF_DAY)] instead" }

  - do:
      search:
        rest_total_hits_as_int: true
        body:
          query: { term: { _id: 1 } }
          script_fields:
            field:
              script:
                source: "/* avoid stash */ $('date', null).get(ChronoField.MINUTE_OF_DAY)"
  - match: { hits.hits.0.fields.field.0: 731 }

  - do:
      catch: bad_request
      search:
        rest_total_hits_as_int: true
        body:
          query: { term: { _id: 1 } }
          script_fields:
            field:
              script:
                source: "/* avoid stash */ $('date', null).getMinuteOfHour()"
  - match: { error.failed_shards.0.reason.caused_by.type: "unsupported_operation_exception" }
  - match: { error.failed_shards.0.reason.caused_by.reason:
               "[getMinuteOfHour] is no longer available; use [getMinute()] instead" }

  - do:
      search:
        rest_total_hits_as_int: true
        body:
          query: { term: { _id: 1 } }
          script_fields:
            field:
              script:
                source: "/* avoid stash */ $('date', null).getMinute()"
  - match: { hits.hits.0.fields.field.0: 11 }

  - do:
      catch: bad_request
      search:
        rest_total_hits_as_int: true
        body:
          query: { term: { _id: 1 } }
          script_fields:
            field:
              script:
                source: "/* avoid stash */ $('date', null).getMonthOfYear()"
  - match: { error.failed_shards.0.reason.caused_by.type: "unsupported_operation_exception" }
  - match: { error.failed_shards.0.reason.caused_by.reason:
               "[getMonthOfYear] is no longer available; use [getMonthValue()] instead" }

  - do:
      search:
        rest_total_hits_as_int: true
        body:
          query: { term: { _id: 1 } }
          script_fields:
            field:
              script:
                source: "/* avoid stash */ $('date', null).getMonthValue()"
  - match: { hits.hits.0.fields.field.0: 1 }

  - do:
      catch: bad_request
      search:
        rest_total_hits_as_int: true
        body:
          query: { term: { _id: 1 } }
          script_fields:
            field:
              script:
                source: "/* avoid stash */ $('date', null).getSecondOfDay()"
  - match: { error.failed_shards.0.reason.caused_by.type: "unsupported_operation_exception" }
  - match: { error.failed_shards.0.reason.caused_by.reason:
               "[getSecondOfDay] is no longer available; use [get(ChronoField.SECOND_OF_DAY)] instead" }

  - do:
      search:
        rest_total_hits_as_int: true
        body:
          query: { term: { _id: 1 } }
          script_fields:
            field:
              script:
                source: "/* avoid stash */ $('date', null).get(ChronoField.SECOND_OF_DAY)"
  - match: { hits.hits.0.fields.field.0: 43872 }

  - do:
      catch: bad_request
      search:
        rest_total_hits_as_int: true
        body:
          query: { term: { _id: 1 } }
          script_fields:
            field:
              script:
                source: "/* avoid stash */ $('date', null).getSecondOfMinute()"
  - match: { error.failed_shards.0.reason.caused_by.type: "unsupported_operation_exception" }
  - match: { error.failed_shards.0.reason.caused_by.reason:
               "[getSecondOfMinute] is no longer available; use [getSecond()] instead" }

  - do:
      search:
        rest_total_hits_as_int: true
        body:
          query: { term: { _id: 1 } }
          script_fields:
            field:
              script:
                source: "/* avoid stash */ $('date', null).getSecond()"
  - match: { hits.hits.0.fields.field.0: 12 }

  - do:
      catch: bad_request
      search:
        rest_total_hits_as_int: true
        body:
          query: { term: { _id: 1 } }
          script_fields:
            field:
              script:
                source: "/* avoid stash */ $('date', null).getWeekOfWeekyear()"
  - match: { error.failed_shards.0.reason.caused_by.type: "unsupported_operation_exception" }
  - match: { error.failed_shards.0.reason.caused_by.reason:
               "[getWeekOfWeekyear] is no longer available; use [get(IsoFields.WEEK_OF_WEEK_BASED_YEAR)] instead" }

  - do:
      search:
        rest_total_hits_as_int: true
        body:
          query: { term: { _id: 1 } }
          script_fields:
            field:
              script:
                source: "/* avoid stash */ $('date', null).get(IsoFields.WEEK_OF_WEEK_BASED_YEAR)"
  - match: { hits.hits.0.fields.field.0: 52 }

  - do:
      catch: bad_request
      search:
        rest_total_hits_as_int: true
        body:
          query: { term: { _id: 1 } }
          script_fields:
            field:
              script:
                source: "/* avoid stash */ $('date', null).getWeekyear()"
  - match: { error.failed_shards.0.reason.caused_by.type: "unsupported_operation_exception" }
  - match: { error.failed_shards.0.reason.caused_by.reason:
               "[getWeekyear] is no longer available; use [get(IsoFields.WEEK_BASED_YEAR)] instead" }

  - do:
      search:
        rest_total_hits_as_int: true
        body:
          query: { term: { _id: 1 } }
          script_fields:
            field:
              script:
                source: "/* avoid stash */ $('date', null).get(IsoFields.WEEK_BASED_YEAR)"
  - match: { hits.hits.0.fields.field.0: 2016 }

  - do:
      catch: bad_request
      search:
        rest_total_hits_as_int: true
        body:
          query: { term: { _id: 1 } }
          script_fields:
            field:
              script:
                source: "/* avoid stash */ $('date', null).getYearOfCentury()"
  - match: { error.failed_shards.0.reason.caused_by.type: "unsupported_operation_exception" }
  - match: { error.failed_shards.0.reason.caused_by.reason:
               "[getYearOfCentury] is no longer available; use [get(ChronoField.YEAR_OF_ERA) % 100] instead" }

  - do:
      search:
        rest_total_hits_as_int: true
        body:
          query: { term: { _id: 1 } }
          script_fields:
            field:
              script:
                source: "/* avoid stash */ $('date', null).get(ChronoField.YEAR_OF_ERA) % 100"
  - match: { hits.hits.0.fields.field.0: 17 }

  - do:
      catch: bad_request
      search:
        rest_total_hits_as_int: true
        body:
          query: { term: { _id: 1 } }
          script_fields:
            field:
              script:
                source: "/* avoid stash */ $('date', null).getYearOfEra()"
  - match: { error.failed_shards.0.reason.caused_by.type: "unsupported_operation_exception" }
  - match: { error.failed_shards.0.reason.caused_by.reason:
               "[getYearOfEra] is no longer available; use [get(ChronoField.YEAR_OF_ERA)] instead" }

  - do:
      search:
        rest_total_hits_as_int: true
        body:
          query: { term: { _id: 1 } }
          script_fields:
            field:
              script:
                source: "/* avoid stash */ $('date', null).get(ChronoField.YEAR_OF_ERA)"
  - match: { hits.hits.0.fields.field.0: 2017 }

