import com.bettercloud.vault.VaultConfig
import com.bettercloud.vault.Vault

initscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'com.bettercloud:vault-java-driver:4.1.0'
  }
}

if (System.getenv('VAULT_ADDR') == null) {
  // When trying to reproduce errors outside of CI, it can be useful to allow this to just return rather than blowing up
  if (System.getenv('CI') == null) {
    return
  }

  throw new GradleException("You must set the VAULT_ADDR environment variable to use this init script.")
}

if (System.getenv('VAULT_ROLE_ID') == null && System.getenv('VAULT_SECRET_ID') == null && System.getenv('VAULT_TOKEN') == null) {
    // When trying to reproduce errors outside of CI, it can be useful to allow this to just return rather than blowing up
  if (System.getenv('CI') == null) {
    return
  }

  throw new GradleException("You must set either the VAULT_ROLE_ID and VAULT_SECRET_ID environment variables, " +
    "or the VAULT_TOKEN environment variable to use this init script.")
}

final String vaultPathPrefix = System.getenv('VAULT_ADDR') ==~ /.+vault-ci.+\.dev.*/ ? "secret/ci/elastic-elasticsearch/migrated" : "secret/elasticsearch-ci"

final String vaultToken = System.getenv('VAULT_TOKEN') ?: new Vault(
  new VaultConfig()
    .address(System.env.VAULT_ADDR)
    .engineVersion(1)
    .build()
)
  .withRetries(5, 1000)
  .auth()
  .loginByAppRole("approle", System.env.VAULT_ROLE_ID, System.env.VAULT_SECRET_ID)
  .getAuthClientToken()

final Vault vault = new Vault(
  new VaultConfig()
    .address(System.env.VAULT_ADDR)
    .engineVersion(1)
    .token(vaultToken)
    .build()
).withRetries(5, 1000)


gradle.settingsEvaluated { settings ->
  settings.pluginManager.withPlugin("com.gradle.enterprise") {
    configureGradleEnterprise(settings)
  }
}

void configureGradleEnterprise(def settings) {
  settings.gradleEnterprise {
    server = 'https://gradle-enterprise.elastic.co'
    buildScan.publishAlways()
  }

  def isCI = System.getenv("CI") == "true"
  settings.buildCache {
    local {
      // Disable the local build cache in CI since we use ephemeral workers and it incurs an IO penalty
      enabled = isCI == false
    }
    remote(settings.gradleEnterprise.buildCache) {
      if (isCI) {
        final boolean buildCachePush = Boolean.valueOf(System.getProperty('org.elasticsearch.build.cache.push', 'false'))
        final Map<String, String> buildCacheCredentials = System.getenv("GRADLE_BUILD_CACHE_USERNAME") ? [:] : vault.logical()
          .read("${vaultPathPrefix}/gradle-build-cache")
          .getData()
        def username = System.getenv("GRADLE_BUILD_CACHE_USERNAME") ?: buildCacheCredentials.get("username")
        def password = System.getenv("GRADLE_BUILD_CACHE_PASSWORD") ?: buildCacheCredentials.get("password")

        push = buildCachePush
        usernameAndPassword(username, password)
      }
    }
  }
}

