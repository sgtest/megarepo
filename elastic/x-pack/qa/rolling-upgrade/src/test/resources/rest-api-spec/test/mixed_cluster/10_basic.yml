---
setup:
  - do:
      cluster.health:
        # if the primary shard of an index with (number_of_replicas > 0) ends up on the new node, the replica cannot be
        # allocated to the old node (see NodeVersionAllocationDecider). x-pack automatically creates indices with
        # replicas, for example monitoring-data-*.
        wait_for_status: yellow
        wait_for_nodes: 2

---
"Index data and search on the mixed cluster":
 - do:
     search:
        index: test_index

 - match: { hits.total: 5 } # no new indexed data, so expect the original 5 documents from the old cluster

 - do:
     bulk:
        refresh: true
        body:
          - '{"index": {"_index": "test_index", "_type": "test_type"}}'
          - '{"f1": "v1_mixed", "f2": 5}'
          - '{"index": {"_index": "test_index", "_type": "test_type"}}'
          - '{"f1": "v2_mixed", "f2": 6}'
          - '{"index": {"_index": "test_index", "_type": "test_type"}}'
          - '{"f1": "v3_mixed", "f2": 7}'
          - '{"index": {"_index": "test_index", "_type": "test_type"}}'
          - '{"f1": "v4_mixed", "f2": 8}'
          - '{"index": {"_index": "test_index", "_type": "test_type"}}'
          - '{"f1": "v5_mixed", "f2": 9}'

 - do:
     index:
       index: test_index
       type: test_type
       id: d10
       body: {"f1": "v6_mixed", "f2": 10}

 - do:
     index:
       index: test_index
       type: test_type
       id: d11
       body: {"f1": "v7_mixed", "f2": 11}

 - do:
     index:
       index: test_index
       type: test_type
       id: d12
       body: {"f1": "v8_mixed", "f2": 12}

 - do:
     indices.refresh:
        index: test_index

 - do:
     search:
        index: test_index

 - match: { hits.total: 13 } # 5 docs from old cluster, 8 docs from mixed cluster

 - do:
     delete:
       index: test_index
       type: test_type
       id: d10

 - do:
     delete:
       index: test_index
       type: test_type
       id: d11

 - do:
     delete:
       index: test_index
       type: test_type
       id: d12

 - do:
     indices.refresh:
        index: test_index

---
"Basic scroll mixed":
  - do:
      indices.create:
        index: test_scroll
  - do:
      index:
        index:  test_scroll
        type:   test
        id:     42
        body:   { foo: 1 }

  - do:
      index:
        index:  test_scroll
        type:   test
        id:     43
        body:   { foo: 2 }

  - do:
      indices.refresh: {}

  - do:
      search:
        index: test_scroll
        size: 1
        scroll: 1m
        sort: foo
        body:
          query:
            match_all: {}

  - set: {_scroll_id: scroll_id}
  - match: {hits.total:      2    }
  - length: {hits.hits:      1    }
  - match: {hits.hits.0._id: "42" }

  - do:
      index:
        index:  test_scroll
        type:   test
        id:     44
        body:   { foo: 3 }

  - do:
      indices.refresh: {}

  - do:
      scroll:
        body: { "scroll_id": "$scroll_id", "scroll": "1m"}

  - match: {hits.total:      2    }
  - length: {hits.hits:      1    }
  - match: {hits.hits.0._id: "43" }

  - do:
      scroll:
        scroll_id: $scroll_id
        scroll: 1m

  - match: {hits.total:      2    }
  - length: {hits.hits:      0    }

  - do:
      clear_scroll:
        scroll_id: $scroll_id

---
"Start scroll in mixed cluster for upgraded":
  - do:
      indices.create:
        index: upgraded_scroll
        wait_for_active_shards: all
        body:
          settings:
            number_of_replicas: "0"
            index.routing.allocation.include.upgraded: "first"

  - do:
      index:
        index:  upgraded_scroll
        type:   test
        id:     42
        body:   { foo: 1 }

  - do:
      index:
        index:  upgraded_scroll
        type:   test
        id:     43
        body:   { foo: 2 }

  - do:
      indices.refresh: {}

  - do:
      search:
        index: upgraded_scroll
        size: 1
        scroll: 5m
        sort: foo
        body:
          query:
            match_all: {}
  - set: {_scroll_id: scroll_id}
  - match: {hits.total:      2    }
  - length: {hits.hits:      1    }
  - match: {hits.hits.0._id: "42" }

  - do:
      index:
        index: scroll_index
        type: doc
        id: 1
        body: { value: $scroll_id }
