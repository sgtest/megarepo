//
// CSV spec used by the docs
//

///////////////////////////////
//
// Describe table
//
///////////////////////////////

describeTable
// tag::describeTable
DESCRIBE emp;

       column       |     type      
--------------------+---------------
birth_date          |TIMESTAMP      
dep                 |STRUCT         
dep.dep_id          |VARCHAR        
dep.dep_name        |VARCHAR        
dep.dep_name.keyword|VARCHAR        
dep.from_date       |TIMESTAMP      
dep.to_date         |TIMESTAMP      
emp_no              |INTEGER        
first_name          |VARCHAR        
first_name.keyword  |VARCHAR        
gender              |VARCHAR        
hire_date           |TIMESTAMP      
languages           |TINYINT        
last_name           |VARCHAR        
last_name.keyword   |VARCHAR        
salary              |INTEGER  

// end::describeTable
;

//describeTableAlias
// tag::describeTableAlias
//DESCRIBE employee;

//    column     |     type      
//---------------+---------------

// end::describeTableAlias
//;

//
// Show columns
// 
showColumns
// tag::showColumns
SHOW COLUMNS IN emp;

       column       |     type      
--------------------+---------------
birth_date          |TIMESTAMP      
dep                 |STRUCT         
dep.dep_id          |VARCHAR        
dep.dep_name        |VARCHAR        
dep.dep_name.keyword|VARCHAR        
dep.from_date       |TIMESTAMP      
dep.to_date         |TIMESTAMP      
emp_no              |INTEGER        
first_name          |VARCHAR        
first_name.keyword  |VARCHAR        
gender              |VARCHAR        
hire_date           |TIMESTAMP      
languages           |TINYINT        
last_name           |VARCHAR        
last_name.keyword   |VARCHAR        
salary              |INTEGER   

// end::showColumns
;

//showColumnsInAlias
// tag::showColumnsInAlias
//SHOW COLUMNS FROM employee;

//    column     |     type      
//---------------+---------------
               
// end::showColumnsInAlias
//;

///////////////////////////////
//
// Show Tables
//
///////////////////////////////

showTables
// tag::showTables
SHOW TABLES;

     name      |     type      
---------------+---------------
emp            |BASE TABLE     
employees      |ALIAS          
library        |BASE TABLE 

// end::showTables
;

showTablesLikeExact
// tag::showTablesLikeExact
SHOW TABLES LIKE 'emp';

     name      |     type      
---------------+---------------
emp            |BASE TABLE     

// end::showTablesLikeExact
;

showTablesLikeWildcard
// tag::showTablesLikeWildcard
SHOW TABLES LIKE 'emp%';

     name      |     type      
---------------+---------------
emp            |BASE TABLE     
employees      |ALIAS          

// end::showTablesLikeWildcard
;


showTablesLikeOneChar
// tag::showTablesLikeOneChar
SHOW TABLES LIKE 'em_';

     name      |     type      
---------------+---------------
emp            |BASE TABLE     

// end::showTablesLikeOneChar
;

showTablesLikeMixed
// tag::showTablesLikeMixed
SHOW TABLES LIKE '%em_';

     name      |     type      
---------------+---------------
emp            |BASE TABLE     

// end::showTablesLikeMixed
;

///////////////////////////////
//
// Show Functions
//
///////////////////////////////

showFunctions
// tag::showFunctions
SHOW FUNCTIONS;

      name      |     type      
----------------+---------------
AVG             |AGGREGATE      
COUNT           |AGGREGATE      
MAX             |AGGREGATE      
MIN             |AGGREGATE      
SUM             |AGGREGATE      
STDDEV_POP      |AGGREGATE      
VAR_POP         |AGGREGATE      
PERCENTILE      |AGGREGATE      
PERCENTILE_RANK |AGGREGATE      
SUM_OF_SQUARES  |AGGREGATE      
SKEWNESS        |AGGREGATE      
KURTOSIS        |AGGREGATE      
DAY_OF_MONTH    |SCALAR         
DAY             |SCALAR         
DOM             |SCALAR         
DAY_OF_WEEK     |SCALAR         
DOW             |SCALAR         
DAY_OF_YEAR     |SCALAR         
DOY             |SCALAR         
HOUR_OF_DAY     |SCALAR         
HOUR            |SCALAR         
MINUTE_OF_DAY   |SCALAR         
MINUTE_OF_HOUR  |SCALAR         
MINUTE          |SCALAR         
SECOND_OF_MINUTE|SCALAR         
SECOND          |SCALAR         
MONTH_OF_YEAR   |SCALAR         
MONTH           |SCALAR         
YEAR            |SCALAR         
WEEK_OF_YEAR    |SCALAR         
WEEK            |SCALAR         
ABS             |SCALAR         
ACOS            |SCALAR         
ASIN            |SCALAR         
ATAN            |SCALAR         
ATAN2           |SCALAR         
CBRT            |SCALAR         
CEIL            |SCALAR         
CEILING         |SCALAR         
COS             |SCALAR         
COSH            |SCALAR         
COT             |SCALAR         
DEGREES         |SCALAR         
E               |SCALAR         
EXP             |SCALAR         
EXPM1           |SCALAR         
FLOOR           |SCALAR         
LOG             |SCALAR         
LOG10           |SCALAR         
MOD             |SCALAR         
PI              |SCALAR         
POWER           |SCALAR         
RADIANS         |SCALAR         
RANDOM          |SCALAR         
RAND            |SCALAR         
ROUND           |SCALAR         
SIGN            |SCALAR         
SIGNUM          |SCALAR         
SIN             |SCALAR         
SINH            |SCALAR         
SQRT            |SCALAR         
TAN             |SCALAR         
ASCII           |SCALAR         
CHAR            |SCALAR         
BIT_LENGTH      |SCALAR         
CHAR_LENGTH     |SCALAR         
LCASE           |SCALAR         
LENGTH          |SCALAR         
LTRIM           |SCALAR         
RTRIM           |SCALAR         
SPACE           |SCALAR         
UCASE           |SCALAR         
CONCAT          |SCALAR         
INSERT          |SCALAR         
LEFT            |SCALAR         
LOCATE          |SCALAR         
POSITION        |SCALAR         
REPEAT          |SCALAR         
REPLACE         |SCALAR         
RIGHT           |SCALAR         
SUBSTRING       |SCALAR         
SCORE           |SCORE   

// end::showFunctions
;

showFunctionsLikeExact
// tag::showFunctionsLikeExact
SHOW FUNCTIONS LIKE 'ABS';

     name      |     type      
---------------+---------------
ABS            |SCALAR    

// end::showFunctionsLikeExact
;

showFunctionsLikeWildcard
// tag::showFunctionsLikeWildcard
SHOW FUNCTIONS LIKE 'A%';

     name      |     type      
---------------+---------------
AVG            |AGGREGATE      
ABS            |SCALAR         
ACOS           |SCALAR         
ASIN           |SCALAR         
ATAN           |SCALAR         
ATAN2          |SCALAR
ASCII          |SCALAR     
// end::showFunctionsLikeWildcard
;

showFunctionsLikeChar
// tag::showFunctionsLikeChar
SHOW FUNCTIONS LIKE 'A__';

     name      |     type      
---------------+---------------
AVG            |AGGREGATE      
ABS            |SCALAR         
// end::showFunctionsLikeChar
;

showFunctionsWithPattern
// tag::showFunctionsWithPattern
SHOW FUNCTIONS '%DAY%';

     name      |     type      
---------------+---------------
DAY_OF_MONTH   |SCALAR         
DAY            |SCALAR         
DAY_OF_WEEK    |SCALAR         
DAY_OF_YEAR    |SCALAR         
HOUR_OF_DAY    |SCALAR         
MINUTE_OF_DAY  |SCALAR      

// end::showFunctionsWithPattern
;

///////////////////////////////
//
// Select
//
///////////////////////////////

selectColumnAlias
// tag::selectColumnAlias
SELECT 1 + 1 AS result

    result     
---------------
2    

// end::selectColumnAlias
;

selectInline
// tag::selectInline
SELECT 1 + 1;

    (1 + 1)    
---------------
2      

// end::selectInline
;

selectColumn
// tag::selectColumn
SELECT emp_no FROM emp LIMIT 1;

    emp_no     
---------------
10001   

// end::selectColumn
;

selectQualifiedColumn
// tag::selectQualifiedColumn
SELECT emp.emp_no FROM emp LIMIT 1;

    emp_no     
---------------
10001   

// end::selectQualifiedColumn
;


wildcardWithOrder
// tag::wildcardWithOrder
SELECT * FROM emp LIMIT 1;

     birth_date     |    emp_no     |  first_name   |    gender     |     hire_date      |   languages   |   last_name   |    salary     
--------------------+---------------+---------------+---------------+--------------------+---------------+---------------+---------------
1953-09-02T00:00:00Z|10001          |Georgi         |M              |1986-06-26T00:00:00Z|2              |Facello        |57305 

// end::wildcardWithOrder
;

fromTable
// tag::fromTable
SELECT * FROM emp LIMIT 1;

     birth_date     |    emp_no     |  first_name   |    gender     |     hire_date      |   languages   |   last_name   |    salary     
--------------------+---------------+---------------+---------------+--------------------+---------------+---------------+---------------
1953-09-02T00:00:00Z|10001          |Georgi         |M              |1986-06-26T00:00:00Z|2              |Facello        |57305        
  

// end::fromTable
;

fromTableQuoted
// tag::fromTableQuoted
SELECT * FROM "emp" LIMIT 1;

     birth_date     |    emp_no     |  first_name   |    gender     |     hire_date      |   languages   |   last_name   |    salary     
--------------------+---------------+---------------+---------------+--------------------+---------------+---------------+---------------
1953-09-02T00:00:00Z|10001          |Georgi         |M              |1986-06-26T00:00:00Z|2              |Facello        |57305   

// end::fromTableQuoted
;

fromTableQuoted
// tag::fromTablePatternQuoted
SELECT emp_no FROM "e*p" LIMIT 1;

    emp_no     
---------------
10001   

// end::fromTablePatternQuoted
;

fromTableAlias
// tag::fromTableAlias
SELECT e.emp_no FROM emp AS e LIMIT 1;

    emp_no     
-------------
10001   

// end::fromTableAlias
;

basicWhere
// tag::basicWhere
SELECT last_name FROM emp WHERE emp_no = 10001;

   last_name   
---------------
Facello   

// end::basicWhere
;

///////////////////////////////
//
// Group By
//
///////////////////////////////

groupByColumn
// tag::groupByColumn
SELECT gender AS g FROM emp GROUP BY gender;

       g       
---------------
F              
M   

// end::groupByColumn
;

groupByOrdinal
// tag::groupByOrdinal
SELECT gender FROM emp GROUP BY 1;

    gender     
---------------
F              
M   

// end::groupByOrdinal
;

groupByAlias
// tag::groupByAlias
SELECT gender AS g FROM emp GROUP BY g;

       g       
---------------
F              
M  

// end::groupByAlias
;

groupByExpression
// tag::groupByExpression
SELECT languages + 1 AS l FROM emp GROUP BY l;

       l       
---------------
2              
3              
4              
5              
6              
 

// end::groupByExpression
;

groupByMulti
// tag::groupByMulti
SELECT gender g, languages l, COUNT(*) c FROM "emp" GROUP BY g, l ORDER BY languages ASC, gender DESC;

       g       |       l       |       c       
---------------+---------------+---------------
F              |2              |4              
F              |3              |8              
F              |4              |7              
F              |5              |7              
F              |6              |11             
M              |2              |12             
M              |3              |12             
M              |4              |15             
M              |5              |11             
M              |6              |13       

// end::groupByMulti
;


groupByAndAgg
// tag::groupByAndAgg
SELECT gender AS g, COUNT(*) AS c FROM emp GROUP BY gender;

       g       |       c       
---------------+---------------
F              |37             
M              |63   

// end::groupByAndAgg
;

groupByAndAggExpression
// tag::groupByAndAggExpression
SELECT gender AS g, ROUND(MIN(salary) / 100) AS salary FROM emp GROUP BY gender;

       g       |    salary     
---------------+---------------
F              |260            
M              |253     

// end::groupByAndAggExpression
;

groupByAndMultipleAggs
// tag::groupByAndMultipleAggs
SELECT gender AS g, KURTOSIS(salary) AS k, SKEWNESS(salary) AS s FROM emp GROUP BY gender;

       g       |        k         |         s         
---------------+------------------+-------------------
F              |1.8427808415250482|0.04517149340491813
M              |2.259327644285826 |0.40268950715550333

// end::groupByAndMultipleAggs
;

groupByImplicitCount
// tag::groupByImplicitCount
SELECT COUNT(*) AS count FROM emp;

     count     
---------------
100 

// end::groupByImplicitCount
;

///////////////////////////////
//
// Having
//
///////////////////////////////

groupByHaving
// tag::groupByHaving
SELECT languages AS l, COUNT(*) AS c FROM emp GROUP BY l HAVING c BETWEEN 15 AND 20;

       l       |       c       
---------------+---------------
1              |16             
2              |20             
4              |18   

// end::groupByHaving
;

groupByHavingMultiple
// tag::groupByHavingMultiple
SELECT MIN(salary) AS min, MAX(salary) AS max, MAX(salary) - MIN(salary) AS diff FROM emp GROUP BY languages HAVING diff - max % min > 0 AND AVG(salary) > 30000;

      min      |      max      |     diff      
---------------+---------------+---------------
25976          |73717          |47741          
29175          |73578          |44403          
26436          |74999          |48563          
27215          |74572          |47357          
25324          |73851          |48527 

// end::groupByHavingMultiple
;

groupByImplicitMultipleAggs
// tag::groupByImplicitMultipleAggs
SELECT MIN(salary) AS min, MAX(salary) AS max, AVG(salary) AS avg, COUNT(*) AS count FROM emp;

      min      |      max      |      avg      |     count     
---------------+---------------+---------------+---------------
25324          |74999          |48248          |100  

// end::groupByImplicitMultipleAggs
;

groupByHavingImplicitMatch
// tag::groupByHavingImplicitMatch
SELECT MIN(salary) AS min, MAX(salary) AS max FROM emp HAVING min > 25000;

      min      |      max      
---------------+---------------
25324          |74999        

// end::groupByHavingImplicitMatch
;

//groupByHavingImplicitNoMatch
// tag::groupByHavingImplicitNoMatch
//SELECT MIN(salary) AS min, MAX(salary) AS max FROM emp HAVING max > 75000;

//      min      |      max      
//---------------+---------------

// end::groupByHavingImplicitNoMatch
//;

///////////////////////////////
//
// Order by
//
///////////////////////////////

orderByBasic
// tag::orderByBasic
SELECT * FROM library ORDER BY page_count DESC LIMIT 5;

     author      |        name        |  page_count   |    release_date    
-----------------+--------------------+---------------+--------------------
Peter F. Hamilton|Pandora's Star      |768            |2004-03-02T00:00:00Z
Vernor Vinge     |A Fire Upon the Deep|613            |1992-06-01T00:00:00Z
Frank Herbert    |Dune                |604            |1965-06-01T00:00:00Z
Alastair Reynolds|Revelation Space    |585            |2000-03-15T00:00:00Z
James S.A. Corey |Leviathan Wakes     |561            |2011-06-02T00:00:00Z



// end::orderByBasic
;

orderByScore
// tag::orderByScore
SELECT SCORE(), * FROM library WHERE match(name, 'dune') ORDER BY SCORE() DESC;

    SCORE()    |    author     |       name        |  page_count   |    release_date    
---------------+---------------+-------------------+---------------+--------------------
2.288635       |Frank Herbert  |Dune               |604            |1965-06-01T00:00:00Z
1.8893257      |Frank Herbert  |Dune Messiah       |331            |1969-10-15T00:00:00Z
1.6086555      |Frank Herbert  |Children of Dune   |408            |1976-04-21T00:00:00Z
1.4005898      |Frank Herbert  |God Emperor of Dune|454            |1981-05-28T00:00:00Z

// end::orderByScore
;

orderByScoreWithMatch
// tag::orderByScoreWithMatch
SELECT SCORE(), * FROM library WHERE match(name, 'dune') ORDER BY page_count DESC;

    SCORE()    |    author     |       name        |  page_count   |    release_date    
---------------+---------------+-------------------+---------------+--------------------
2.288635       |Frank Herbert  |Dune               |604            |1965-06-01T00:00:00Z
1.4005898      |Frank Herbert  |God Emperor of Dune|454            |1981-05-28T00:00:00Z
1.6086555      |Frank Herbert  |Children of Dune   |408            |1976-04-21T00:00:00Z
1.8893257      |Frank Herbert  |Dune Messiah       |331            |1969-10-15T00:00:00Z

// end::orderByScoreWithMatch
;


///////////////////////////////
//
// Limit
//
///////////////////////////////

limitBasic
// tag::limitBasic
SELECT first_name, last_name, emp_no FROM emp LIMIT 1;

  first_name   |   last_name   |    emp_no     
---------------+---------------+---------------
Georgi         |Facello        |10001     

// end::limitBasic
;
