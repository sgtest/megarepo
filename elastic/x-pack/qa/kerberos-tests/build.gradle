import java.nio.file.Path
import java.nio.file.Paths
import java.nio.file.Files

apply plugin: 'elasticsearch.standalone-rest-test'
apply plugin: 'elasticsearch.rest-test'
apply plugin: 'elasticsearch.test.fixtures'

testFixtures.useFixture ":test:fixtures:krb5kdc-fixture"

// https://github.com/elastic/elasticsearch/issues/40624
integTest.enabled = false

dependencies {
    testCompile "org.elasticsearch.plugin:x-pack-core:${version}"
    testCompile project(path: xpackModule('core'), configuration: 'testArtifacts')
    testCompile project(path: xpackModule('security'), configuration: 'testArtifacts')
}

integTestCluster {
    // force localhost IPv4 otherwise it is a chicken and egg problem where we need the keytab for the hostname when starting the cluster
    // but do not know the exact address that is first in the http ports file
    setting 'http.host', '127.0.0.1'
    setting 'xpack.license.self_generated.type', 'trial'
    setting 'xpack.security.enabled', 'true'
    setting 'xpack.security.authc.realms.file.file1.order', '0'
    setting 'xpack.ml.enabled', 'false'
    setting 'xpack.security.audit.enabled', 'true'
    // Kerberos realm
    setting 'xpack.security.authc.realms.kerberos.kerberos.order', '1'
    setting 'xpack.security.authc.realms.kerberos.kerberos.keytab.path', 'es.keytab'
    setting 'xpack.security.authc.realms.kerberos.kerberos.krb.debug', 'true'
    setting 'xpack.security.authc.realms.kerberos.kerberos.remove_realm_name', 'false'

    jvmArgs += " -Djava.security.krb5.conf=${project(':test:fixtures:krb5kdc-fixture').ext.krb5Conf("peppa")}"
    jvmArgs += " -Dsun.security.krb5.debug=true"

    extraConfigFile("es.keytab", project(':test:fixtures:krb5kdc-fixture').ext.krb5Keytabs("peppa", "HTTP_localhost.keytab"))

    setupCommand 'setupTestAdmin',
            'bin/elasticsearch-users', 'useradd', "test_admin", '-p', 'x-pack-test-password', '-r', "superuser"

    waitCondition = { node, ant ->
        File tmpFile = new File(node.cwd, 'wait.success')
        ant.get(src: "http://${node.httpUri()}/_cluster/health?wait_for_nodes=>=${numNodes}&wait_for_status=yellow",
        dest: tmpFile.toString(),
        username: 'test_admin',
        password: 'x-pack-test-password',
        ignoreerrors: true,
        retries: 10)
        return tmpFile.exists()
    }

}

String realm = "BUILD.ELASTIC.CO"
integTestRunner {
    Path peppaKeytab = Paths.get("${project.buildDir}", "generated-resources", "keytabs", "peppa.keytab")
    systemProperty 'test.userkt', "peppa@${realm}"
    systemProperty 'test.userkt.keytab', "${peppaKeytab}"
    systemProperty 'test.userpwd', "george@${realm}"
    systemProperty 'test.userpwd.password', "dino"
    systemProperty 'tests.security.manager', 'true'
    jvmArgs([
            "-Djava.security.krb5.conf=${project(':test:fixtures:krb5kdc-fixture').ext.krb5Conf("peppa")}",
            "-Dsun.security.krb5.debug=true"
    ])
}

def generatedResources = "$buildDir/generated-resources/keytabs"
task copyKeytabToGeneratedResources(type: Copy) {
    from project(':test:fixtures:krb5kdc-fixture').ext.krb5Keytabs("peppa", "peppa.keytab")
    into generatedResources
    dependsOn project(':test:fixtures:krb5kdc-fixture').postProcessFixture
}
project.sourceSets.test.output.dir(generatedResources, builtBy:copyKeytabToGeneratedResources)

