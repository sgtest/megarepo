[[configuring-stack-security]]
== Start the Elastic Stack with security enabled

When you start {es} for the first time, the following security configuration
occurs automatically:

* <<stack-security-certificates,Certificates and keys>> for TLS are
generated for the transport and HTTP layers.
* The TLS configuration settings are written to `elasticsearch.yml`.
* A password is generated for the `elastic` user.
* An enrollment token is generated for {kib}.

You can then start {kib} and enter the enrollment token, which is valid for 30
minutes. This token automatically applies the security settings from your {es}
cluster, authenticates to {es} with the built-in `kibana` service account, and writes the
security configuration to `kibana.yml`.

[discrete]
=== Prerequisites

* https://www.elastic.co/downloads/elasticsearch[Download] and
unpack the `elasticsearch` package distribution for your
environment.
* https://www.elastic.co/downloads/kibana[Download] and unpack
the `kibana` package distribution for your environment.

[discrete]
[[stack-start-with-security]]
=== Start {es} and enroll {kib} with security enabled

. From the installation directory, start {es}. A password is generated for the
`elastic` user and output to the terminal, plus an enrollment token for
enrolling {kib}.
+
[source,shell]
----
bin/elasticsearch
----
+
TIP: You might need to scroll back a bit in the terminal to view the password
and enrollment token.

. Copy the generated password and enrollment token and save them in a secure
location. These values are shown only when you start {es} for the first time.
+
[NOTE]
====
If you need to reset the password for the `elastic` user or other
built-in users, run the <<reset-password,`elasticsearch-reset-password`>> tool.
To generate new enrollment tokens for {kib} or {es} nodes, run the
<<create-enrollment-token,`elasticsearch-create-enrollment-token`>> tool.
These tools are available in the {es} `bin` directory.
====

. (Optional) Open a new terminal and verify that you can connect to your {es}
cluster by making an authenticated call. Enter the password for the `elastic`
user when prompted:
+
[source,shell]
----
curl --cacert config/certs/http_ca.crt -u elastic https://localhost:9200
----
// NOTCONSOLE

. From the directory where you installed {kib}, start {kib}.
+
[source,shell]
----
bin/kibana
----

. Enroll {kib} using either interactive or detached mode.

  * *Interactive mode* (browser)
  
  .. In your terminal, click the generated link to open {kib} in your browser.
  .. In your browser, paste the enrollment token that you copied and click the
  button to connect your {kib} instance with {es}.

  * *Detached mode* (non-browser)
+
Run the `kibana-setup` tool and pass the generated enrollment token with the 
`--enrollment-token` parameter.
+  
["source","sh",subs="attributes"]
----
bin/kibana-setup --enrollment-token <enrollment-token>
----

[discrete]
[[stack-enroll-nodes]]
=== Enroll additional nodes in your cluster

:slash:     /

include::enroll-nodes.asciidoc[]

[discrete]
include::{es-ref-dir}/setup/install/connect-clients.asciidoc[leveloffset=-1]

[discrete]
=== What's next?
Congratulations! You've successfully started the {stack} with security enabled.
{es} and {kib} are secured with TLS on the HTTP layer, and internode
communication is encrypted. If you want to enable HTTPS for web traffic, you
can <<encrypt-kibana-browser,encrypt traffic between your browser and {kib}>>.

[discrete]
[[stack-security-certificates]]
include::{es-ref-dir}/setup/install/security-files-reference.asciidoc[leveloffset=-2]

Additionally, when you use the enrollment token to connect {kib} to a secured {es} cluster, the HTTP layer CA certificate is retrieved from {es} and stored in the
{kib} `/data` directory. This file establishes trust between {kib} and the {es}
Certificate Authority (CA) for the HTTP layer.
