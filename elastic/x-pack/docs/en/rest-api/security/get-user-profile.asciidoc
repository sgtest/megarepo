[role="xpack"]
[[security-api-get-user-profile]]
=== Get user profile API

beta::[]

++++
<titleabbrev>Get user profile</titleabbrev>
++++

Retrieves a user's profile using the unique profile ID.

[[security-api-get-user-profile-request]]
==== {api-request-title}

`GET /_security/profile/<uid>`

[[security-api-get-user-profile-prereqs]]
==== {api-prereq-title}

* To use this API, you must have _at least_ the `manage_user_profile` cluster privilege.


[[security-api-get-user-profile-desc]]
==== {api-description-title}

The get user profile API returns the user profile document matching a specified 
`uid`, which is generated when
<<security-api-activiate-user-profile,activating a user profile>>.

[[security-api-get-user-profile-path-params]]
==== {api-path-parms-title}

`uid`::
(Required, string) A unique identifier for the user profile.

[[security-api-get-user-profile-query-params]]
==== {api-query-parms-title}

`data`::
(Optional, string) Comma-separated list of filters for the `data` field of
the profile document. To return all content, use `data=*`. To return a 
subset of content, use `data=<key>` to retrieve the content nested under the 
specified `<key>`. Defaults to returning no content.

[[security-api-get-user-profile-response-body]]
==== {api-response-body-title}

A successful call returns the JSON representation of the user profile
and its internal versioning numbers. The API returns an empty object
if no profile document is found for the provided `uid`.
The content of the `data` field is not returned by default to avoid deserializing
a potential large payload. 

[[security-api-get-user-profile-example]]
==== {api-examples-title}

[source,console]
----
GET /_security/profile/u_kd2JMqwUQwSCCOxMv7M1vw
----
// TEST[skip:uid is random and no way to ensure this uid exists]

The API returns the following response for a `uid` matching `u_kd2JMqwUQwSCCOxMv7M1vw`:

[source,js]
----
{
  "u_kd2JMqwUQwSCCOxMv7M1vw": {
    "uid": "u_kd2JMqwUQwSCCOxMv7M1vw",
    "enabled": true,
    "last_synchronized": 1642650651037,
    "user": {
      "username": "jacknich",
      "roles": [
        "admin", "other_role1"
      ],
      "realm_name": "native1",
      "full_name": "Jack Nicholson",
      "email": "jacknich@example.com",
      "active": true
    },
    "access": {},
    "data": {}, <1>
    "_doc": {
      "_primary_term": 1,
      "_seq_no": 0
    }
  }
}
----
// NOTCONSOLE
// Besides the uid being random, the response cannot be compared against due to
// the last_synchronized and _doc fields being unpredictable.

<1> No content is returned in the `data` field by default.

The following request retrieves a subset of `data` that's nested under the
key `app1`, along with the user's profile:

[source,console]
----
GET /_security/profile/u_kd2JMqwUQwSCCOxMv7M1vw?data=app1.key1
----
// TEST[skip:uid is random and no way to ensure this uid exists]

[source,js]
----
{
  "u_kd2JMqwUQwSCCOxMv7M1vw": {
    "uid": "u_kd2JMqwUQwSCCOxMv7M1vw",
    "enabled": true,
    "last_synchronized": 1642650651037,
    "user": {
      "username": "jacknich",
      "roles": [
        "admin", "other_role1"
      ],
      "realm_name": "native1",
      "full_name": "Jack Nicholson",
      "email": "jacknich@example.com",
      "active": true
    },
    "access": {},
    "data": {
      "app1": {
        "key1": "value1"
      }
    },
    "_doc": {
      "_primary_term": 1,
      "_seq_no": 0
    }
  }
}
----
// NOTCONSOLE
