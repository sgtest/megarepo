docsDropHeight
// tag::dropheight[]
FROM employees 
| DROP height
// end::dropheight[]
| LIMIT 0;

avg_worked_seconds:long | birth_date:date | emp_no:integer | first_name:keyword | gender:keyword | height.float:double | height.half_float:double | height.scaled_float:double | hire_date:date | is_rehired:boolean | job_positions:keyword | languages:integer | languages.byte:integer | languages.long:long | languages.short:integer | last_name:keyword | salary:integer | salary_change:double | salary_change.int:integer |salary_change.keyword:keyword |salary_change.long:long | still_hired:boolean
;

docsDropHeightWithWildcard
// tag::dropheightwithwildcard[]
FROM employees 
| DROP height*
// end::dropheightwithwildcard[]
| LIMIT 0;

avg_worked_seconds:long | birth_date:date | emp_no:integer | first_name:keyword | gender:keyword | hire_date:date | is_rehired:boolean | job_positions:keyword | languages:integer | languages.byte:integer | languages.long:long | languages.short:integer | last_name:keyword | salary:integer | salary_change:double | salary_change.int:integer |salary_change.keyword:keyword |salary_change.long:long | still_hired:boolean
;

docsEval
// tag::eval[]
FROM employees
| SORT emp_no
| KEEP first_name, last_name, height
| EVAL height_feet = height * 3.281, height_cm = height * 100
// end::eval[]
| WHERE first_name == "Georgi"
| LIMIT 1;

// tag::eval-result[]
first_name:keyword | last_name:keyword | height:double | height_feet:double | height_cm:double
Georgi |Facello | 2.03 | 6.66043 | 202.99999999999997
// end::eval-result[]
;

docsEvalReplace
// tag::evalReplace[]
FROM employees
| SORT emp_no
| KEEP first_name, last_name, height
| EVAL height = height * 3.281
// end::evalReplace[]
| WHERE first_name == "Georgi"
| LIMIT 1;

// tag::evalReplace-result[]
first_name:keyword | last_name:keyword | height:double
Georgi | Facello | 6.66043
// end::evalReplace-result[]
;

docsLimit
// tag::limit[]
FROM employees
| SORT emp_no ASC
| LIMIT 5
// end::limit[]
| KEEP emp_no
;

emp_no:integer
10001
10002
10003
10004
10005
;

docsKeep
// tag::keep[]
FROM employees
| KEEP emp_no, first_name, last_name, height
// end::keep[]
| SORT emp_no ASC
| LIMIT 5
;

// tag::keep-result[]
emp_no:integer | first_name:keyword | last_name:keyword | height:double
10001          |Georgi         |Facello        |2.03
10002          |Bezalel        |Simmel         |2.08
10003          |Parto          |Bamford        |1.83
10004          |Chirstian      |Koblick        |1.78
10005          |Kyoichi        |Maliniak       |2.05
// end::keep-result[]
;

docsKeepWildcard
// tag::keepWildcard[]
FROM employees
| KEEP h*
// end::keepWildcard[]
| LIMIT 0;

height:double | height.float:double | height.half_float:double | height.scaled_float:double | hire_date:date
;

docsKeepDoubleWildcard
// tag::keepDoubleWildcard[]
FROM employees
| KEEP h*, *
// end::keepDoubleWildcard[]
| LIMIT 0;

height:double | height.float:double | height.half_float:double | height.scaled_float:double |       hire_date:date | avg_worked_seconds:long | birth_date:date | emp_no:integer | first_name:keyword | gender:keyword | is_rehired:boolean | job_positions:keyword | languages:integer | languages.byte:integer | languages.long:long | languages.short:integer | last_name:keyword | salary:integer | salary_change:double | salary_change.int:integer |salary_change.keyword:keyword |salary_change.long:long |still_hired:boolean
;

docsRename
// tag::rename[]
FROM employees
| KEEP first_name, last_name, still_hired
| RENAME  still_hired AS employed
// end::rename[]
| LIMIT 0;

first_name:keyword | last_name:keyword | employed:boolean
;

docsRenameMultipleColumns
// tag::renameMultipleColumns[]
FROM employees
| KEEP first_name, last_name
| RENAME first_name AS fn, last_name AS ln
// end::renameMultipleColumns[]
| LIMIT 0;

fn:keyword | ln:keyword
;

docsSort
// tag::sort[]
FROM employees
| KEEP first_name, last_name, height
| SORT height
// end::sort[]
| SORT height, first_name
| LIMIT 3;

first_name:keyword | last_name:keyword | height:double
Mayuko         |Warwick        |1.41
Breannda       |Billingsley    |1.42
Vishv          |Zockler        |1.42
;

docsSortDesc
// tag::sortDesc[]
FROM employees
| KEEP first_name, last_name, height
| SORT height DESC
// end::sortDesc[]
| SORT height DESC, first_name ASC
| LIMIT 3;

first_name:keyword | last_name:keyword | height:double
Arumugam       |Ossenbruggen   |2.1
Kwee           |Schusler       |2.1
Saniya         |Kalloufi       |2.1
;

docsSortTie
// tag::sortTie[]
FROM employees
| KEEP first_name, last_name, height
| SORT height DESC, first_name ASC
// end::sortTie[]
| LIMIT 3;

first_name:keyword | last_name:keyword | height:double
Arumugam       |Ossenbruggen   |2.1
Kwee           |Schusler       |2.1
Saniya         |Kalloufi       |2.1
;

docsSortNullsFirst
// tag::sortNullsFirst[]
FROM employees
| KEEP first_name, last_name, height
| SORT first_name ASC NULLS FIRST
// end::sortNullsFirst[]
| SORT first_name ASC NULLS FIRST, height
| LIMIT 3;

first_name:keyword | last_name:keyword | height:double
null           |Swan           |1.46
null           |Lortz          |1.53
null           |Brender        |1.55
;

docsStats
// tag::stats[]
FROM employees
| STATS count = COUNT(emp_no) BY languages
| SORT languages
// end::stats[]
;

// tag::stats-result[]
    count:long | languages:integer
15             |1
19             |2
17             |3
18             |4
21             |5
10             |null
// end::stats-result[]
;

docsStatsWithoutBy
// tag::statsWithoutBy[]
FROM employees
| STATS avg_lang = AVG(languages)
// end::statsWithoutBy[]
;

// tag::statsWithoutBy-result[]
avg_lang:double
3.1222222222222222
// end::statsWithoutBy-result[]
;

docsStatsMultiple
// tag::statsCalcMultipleValues[]
FROM employees
| STATS avg_lang = AVG(languages), max_lang = MAX(languages)
// end::statsCalcMultipleValues[]
;

avg_lang:double | max_lang:integer
3.1222222222222222|5
;

docsStatsGroupByMultipleValues
// tag::statsGroupByMultipleValues[]
FROM employees
| EVAL hired = DATE_FORMAT("YYYY", hire_date)
| STATS avg_salary = AVG(salary) BY hired, languages.long
| EVAL avg_salary = ROUND(avg_salary)
| SORT hired, languages.long
// end::statsGroupByMultipleValues[]
| LIMIT 4
;

hired:keyword |languages.long:long | avg_salary:double
1985           |1              |54668.0        
1985           |3              |47723.0        
1985           |4              |44817.0        
1985           |5              |47720.0  
;

docsWhere
// tag::where[]
FROM employees
| KEEP first_name, last_name, still_hired
| WHERE still_hired == true
// end::where[]
| STATS count = COUNT(last_name) BY still_hired
;

count:long | still_hired:boolean
45             |true
;

docsWhereBoolean
// tag::whereBoolean[]
FROM employees
| KEEP first_name, last_name, still_hired
| WHERE still_hired
// end::whereBoolean[]
| STATS count = COUNT(last_name) BY still_hired
;

count:long | still_hired:boolean
45             |true
;

docsWhereFunction
// tag::whereFunction[]
FROM employees
| KEEP first_name, last_name, height
| WHERE length(first_name) < 4
// end::whereFunction[]
| SORT first_name
;

first_name:keyword | last_name:keyword | height:double
Gao            |Dolinsky       |1.94
Tse            |Herber         |1.45
Udi            |Jansch         |1.93
Uri            |Lenart         |1.75
;


dateExtract
// tag::dateExtract[]
ROW date = DATE_PARSE("yyyy-MM-dd", "2022-05-06")
| EVAL year = DATE_EXTRACT("year", date)
// end::dateExtract[]
;

// tag::dateExtract-result[]
date:date                 | year:long
2022-05-06T00:00:00.000Z  | 2022
// end::dateExtract-result[]
;

docsSubstring
// tag::substring[]
FROM employees
| KEEP last_name
| EVAL ln_sub = SUBSTRING(last_name, 1, 3)
// end::substring[]
| SORT last_name ASC
| LIMIT 5
;

// tag::substring-result[]
last_name:keyword | ln_sub:keyword
Awdeh          |Awd
Azuma          |Azu
Baek           |Bae
Bamford        |Bam
Bernatsky      |Ber
// end::substring-result[]
;

docsSubstringEnd
// tag::substringEnd[]
FROM employees
| KEEP last_name
| EVAL ln_sub = SUBSTRING(last_name, -3, 3)
// end::substringEnd[]
| SORT last_name ASC
| LIMIT 5
;

// tag::substringEnd-result[]
last_name:keyword | ln_sub:keyword
Awdeh          |deh
Azuma          |uma
Baek           |aek
Bamford        |ord
Bernatsky      |sky
// end::substringEnd-result[]
;

docsSubstringRemainder
// tag::substringRemainder[]
FROM employees
| KEEP last_name
| EVAL ln_sub = SUBSTRING(last_name, 2)
// end::substringRemainder[]
| SORT last_name ASC
| LIMIT 5
;

// tag::substringRemainder-result[]
last_name:keyword | ln_sub:keyword
Awdeh          |wdeh
Azuma          |zuma
Baek           |aek
Bamford        |amford
Bernatsky      |ernatsky
// end::substringRemainder-result[]
;

docsStartsWith
// tag::startsWith[]
FROM employees
| KEEP last_name
| EVAL ln_S = STARTS_WITH(last_name, "B")
// end::startsWith[]
| SORT last_name ASC
| LIMIT 5
;

// tag::startsWith-result[]
last_name:keyword | ln_S:boolean
Awdeh          |false
Azuma          |false
Baek           |true
Bamford        |true
Bernatsky      |true
// end::startsWith-result[]
;

docsRound
// tag::round[]
FROM employees
| KEEP first_name, last_name, height
| EVAL height_ft = ROUND(height * 3.281, 1)
// end::round[]
| SORT height DESC, first_name ASC
| LIMIT 3;

// tag::round-result[]
first_name:keyword | last_name:keyword | height:double | height_ft:double
Arumugam       |Ossenbruggen   |2.1          |6.9
Kwee           |Schusler       |2.1          |6.9
Saniya         |Kalloufi       |2.1          |6.9
// end::round-result[]
;

dateParse
// tag::dateParse[]
ROW date_string = "2022-05-06"
| EVAL date = DATE_PARSE("yyyy-MM-dd", date_string)
// end::dateParse[]
;

date_string:keyword | date:date
2022-05-06          | 2022-05-06T00:00:00.000Z
;

docsReplace
//tag::replaceString[]
ROW str = "Hello World"
| EVAL str = REPLACE(str, "World", "Universe")
| KEEP str
// end::replaceString[]
;

//tag::replaceString-result[]
str:keyword
Hello Universe
// end::replaceString-result[]
;
