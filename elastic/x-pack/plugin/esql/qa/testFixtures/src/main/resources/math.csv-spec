addIntAndInt
from employees | eval s = emp_no + languages | keep emp_no, s | sort emp_no asc | limit 2;

emp_no:integer | s:integer
         10001 |     10003
         10002 |     10007
;

addLongAndLong
from employees | eval s = avg_worked_seconds + languages.long | keep emp_no, s | sort emp_no asc | limit 2;

emp_no:integer | s:long
         10001 | 268728051
         10002 | 328922892
;

addLongOverflow
row max = 9223372036854775807 | eval sum = max + 1 | keep sum;

warning:Line 1:44: evaluation of [max + 1] failed, treating result as null. Only first 20 failures recorded.
warning:Line 1:44: java.lang.ArithmeticException: long overflow

sum:long
null
;

subLongUnderflow
row l = -9223372036854775807 | eval sub = l - 2 | keep sub;

warning:Line 1:43: evaluation of [l - 2] failed, treating result as null. Only first 20 failures recorded.
warning:Line 1:43: java.lang.ArithmeticException: long overflow

sub:long
null
;

mulLongOverflow
row max = 9223372036854775807 | eval mul = max * 2 | keep mul;

warning:Line 1:44: evaluation of [max * 2] failed, treating result as null. Only first 20 failures recorded.
warning:Line 1:44: java.lang.ArithmeticException: long overflow

mul:long
null
;

divLongByZero
row max = 9223372036854775807 | eval div = max / 0 | keep div;

warning:Line 1:44: evaluation of [max / 0] failed, treating result as null. Only first 20 failures recorded.
warning:Line 1:44: java.lang.ArithmeticException: / by zero

div:long
null
;

modLongByZero
row max = 9223372036854775807 | eval mod = max % 0 | keep mod;

// ascii(%) == %25
warning:Line 1:44: evaluation of [max %25 0] failed, treating result as null. Only first 20 failures recorded.
warning:Line 1:44: java.lang.ArithmeticException: / by zero

mod:long
null
;

addDoubleAndDouble
from employees | eval s = height + 5 | keep emp_no, s | sort emp_no asc | limit 2;

emp_no:integer | s:double
         10001 | 7.029999999999999
         10002 | 7.08
;

addIntAndLong
from employees | eval s = emp_no + languages.long | keep emp_no, s | sort emp_no asc | limit 2;

emp_no:integer | s:long
         10001 |  10003
         10002 |  10007
;

addLongAndInt
from employees | eval s = languages.long + emp_no | keep emp_no, s | sort emp_no asc | limit 2;

emp_no:integer | s:long
         10001 |  10003
         10002 |  10007
;

addIntAndDouble
from employees | eval s = emp_no + height | keep emp_no, s | sort emp_no asc | limit 2;

emp_no:integer | s:double
         10001 | 10003.03
         10002 | 10004.08
;

addDoubleAndInt
from employees | eval s = height + emp_no | keep emp_no, s | sort emp_no asc | limit 2;

emp_no:integer | s:double
         10001 | 10003.03
         10002 | 10004.08
;

addLongAndDouble
from employees | eval s = languages.long + height | keep emp_no, s | sort emp_no asc | limit 2;

emp_no:integer | s:double
         10001 | 4.029999999999999
         10002 | 7.08
;

addDoubleAndLong
from employees | eval s = height + languages.long | keep emp_no, s | sort emp_no asc | limit 2;

emp_no:integer | s:double
         10001 | 4.029999999999999
         10002 | 7.08
;

negate
row x=1 | eval a = -x, b = --x * -+-+-1 * -3, c = -(-(-(-x)));

x:integer | a:integer | b:integer | c:integer
1         | -1        | 3         | 1
;

negateIntLongDouble
from employees | eval negInt = -languages, negLong = -languages.long, negDouble = -height | keep emp_no, negInt, negLong, negDouble | sort emp_no asc | limit 2;

emp_no:integer | negInt:integer | negLong:long | negDouble:double
         10001 | -2             | -2           | -2.03
         10002 | -5             | -5           | -2.08
;

negateIntOverflow
// Negating Integer.MIN_VALUE overflows.
row x=-2147483648 | eval a = -x;
warning:Line 1:30: evaluation of [-x] failed, treating result as null. Only first 20 failures recorded.
warning:Line 1:30: java.lang.ArithmeticException: integer overflow

x:integer   | a:integer
-2147483648 | null
;

negateLongOverflow
// Negating Long.MIN_VALUE overflows.
row x=-9223372036854775808 | eval a = -x;
warning:Line 1:39: evaluation of [-x] failed, treating result as null. Only first 20 failures recorded.
warning:Line 1:39: java.lang.ArithmeticException: long overflow

x:long               | a:long
-9223372036854775808 | null
;

absUnsignedLong
row ul = [0, 1, 9223372036854775807, 9223372036854775808, 18446744073709551615] | eval abs = abs(ul);

                                  ul:ul                               |                                 abs:ul
[0, 1, 9223372036854775807, 9223372036854775808, 18446744073709551615]|[0, 1, 9223372036854775807, 9223372036854775808, 18446744073709551615]
;

absLong
from employees | eval l = abs(0-languages.long) | keep l | sort l asc | limit 3;

l:long
1
1
1
;

absInt
from employees | eval s = abs(0-salary) | keep s | sort s asc | limit 3;

s:integer
25324
25945
25976
;

absDouble
from employees | eval s = abs(0.0-salary) | keep s | sort s asc | limit 3;

s:double
25324.0
25945.0
25976.0
;

powHeightSquared
from employees | sort height asc | limit 20 | eval s = round(pow(height, 2) - 2, 2) | keep height, s | sort s desc | limit 4;

height:double | s:double
1.55          | 0.40
1.54          | 0.37
1.53          | 0.34
1.53          | 0.34
;

powSalarySquared
from employees | eval s = pow(to_long(salary) - 75000, 2) + 10000 | keep salary, s | sort salary desc | limit 4;

salary:integer | s:long
74999          | 10001
74970          | 10900
74572          | 193184
73851          | 1330201
;

isFiniteFalse
row d = 1.0 | eval s = is_finite(d/0);

d:double | s:boolean
1.0      | false
;

isFiniteTrue
row d = 1.0 | eval s = is_finite(d);

d:double | s:boolean
1.0      | true
;

isInfiniteFalse
row d = 1.0 | eval s = is_infinite(d);

d:double | s:boolean
1.0      | false
;

isInfiniteTrue
row d = 1.0/0 | eval s = is_infinite(d);

d:double | s:boolean
Infinity | true
;

isNaN
row d = 1.0 | eval s = is_nan(d);

d:double | s:boolean
1.0      | false
;

isNaNTrue
row d = 0.0/0.0 | eval s = is_nan(d);

d:double | s:boolean
NaN      | true
;

log10
// tag::log10[]
ROW d = 1000.0 
| EVAL s = LOG10(d)
// end::log10[]
;

// tag::log10-result[]
d: double | s:double
1000.0    | 3.0
// end::log10-result[]
;

log10ofNegative
row d = -1.0 | eval s = log10(d);
warning:Line 1:25: evaluation of [log10(d)] failed, treating result as null. Only first 20 failures recorded.
warning:Line 1:25: java.lang.ArithmeticException: Log of non-positive number

d:double | s:double
-1.0     | null
;

log10ofZero
row d = 0.0 | eval s = log10(d);
warning:Line 1:24: evaluation of [log10(d)] failed, treating result as null. Only first 20 failures recorded.
warning:Line 1:24: java.lang.ArithmeticException: Log of non-positive number

d:double | s:double
0.0     | null
;

log10ofNegativeZero
row d = -0.0 | eval s = log10(d);
warning:Line 1:25: evaluation of [log10(d)] failed, treating result as null. Only first 20 failures recorded.
warning:Line 1:25: java.lang.ArithmeticException: Log of non-positive number

d:double | s:double
-0.0     | null
;

log10ofLong
row l = to_long(1000000000000) | eval s = log10(l);

l:long         | s:double
1000000000000  | 12
;

log10ofUnsignedLong
row l = to_ul(1000000000000000000) | eval s = log10(l);

l:ul                  | s:double
1000000000000000000   | 18
;

powDoubleDouble
ROW base = 2.0, exponent = 2.0
| EVAL s = POW(base, exponent)
;

base:double | exponent:double | s:double
2.0         | 2.0             | 4.0
;

powIntDouble
// tag::powID-sqrt[]
ROW base = 4, exponent = 0.5
| EVAL s = POW(base, exponent)
// end::powID-sqrt[]
;

// tag::powID-sqrt-result[]
base:integer | exponent:double | s:double
4            | 0.5             | 2.0
// end::powID-sqrt-result[]
;

powSqrtNeg
// tag::powNeg-sqrt[]
ROW base = -4, exponent = 0.5
| EVAL s = POW(base, exponent)
// end::powNeg-sqrt[]
;
warning:Line 2:12: evaluation of [POW(base, exponent)] failed, treating result as null. Only first 20 failures recorded.
warning:Line 2:12: java.lang.ArithmeticException: invalid result: pow(-4.0, 0.5)

// tag::powNeg-sqrt-result[]
base:integer | exponent:double | s:double
-4           | 0.5             | null
// end::powNeg-sqrt-result[]
;

powDoubleInt
// tag::powDI[]
ROW base = 2.0, exponent = 2
| EVAL result = POW(base, exponent)
// end::powDI[]
;

// tag::powDI-result[]
base:double | exponent:integer | result:double
2.0         | 2                | 4.0
// end::powDI-result[]
;

powIntInt
// tag::powII[]
ROW base = 2, exponent = 2
| EVAL s = POW(base, exponent)
// end::powII[]
;

// tag::powII-result[]
base:integer | exponent:integer | s:integer
2            | 2                | 4
// end::powII-result[]
;

powIntIntPlusInt
row s = 1 + pow(2, 2);

s:integer
5
;

powIntIntPlusDouble
row s = 1.0 + pow(2, 2);

s:double
5
;

powIntUL
row x = pow(1, 9223372036854775808);

x:long
1
;

powLongUL
row x = to_long(1) | eval x = pow(x, 9223372036854775808);

x:long
1
;

powUnsignedLongUL
row x = to_ul(1) | eval x = pow(x, 9223372036854775808);

x:long
1
;

powDoubleUL
row x = pow(1.0, 9223372036854775808);

x:double
1.0
;

powIntULOverrun
row x = pow(2, 9223372036854775808);
warning:Line 1:9: evaluation of [pow(2, 9223372036854775808)] failed, treating result as null. Only first 20 failures recorded.
warning:Line 1:9: java.lang.ArithmeticException: long overflow

x:long
null
;

powULInt
row x = pow(to_unsigned_long(9223372036854775807), 1);

x:long
9223372036854775807
;

powULIntOverrun
// tag::powULOverrun[]
ROW x = POW(9223372036854775808, 2)
// end::powULOverrun[]
;
// tag::powULOverrun-warning[]
warning:Line 1:9: evaluation of [POW(9223372036854775808, 2)] failed, treating result as null. Only first 20 failures recorded.
warning:Line 1:9: java.lang.ArithmeticException: long overflow
// end::powULOverrun-warning[]

// tag::powULOverrun-result[]
x:long
null
// end::powULOverrun-result[]
;

powULInt_2d
// tag::pow2d[]
ROW x = POW(9223372036854775808, TO_DOUBLE(1))
// end::pow2d[]
;

// tag::pow2d-result[]
x:double
9.223372036854776E18
// end::pow2d-result[]
;

powULLong
row x = to_long(10) | eval x = pow(to_unsigned_long(10), x);

x:long
10000000000
;

powULLongOverrun
row x = to_long(100) | eval x = pow(to_unsigned_long(10), x);
warning:Line 1:33: evaluation of [pow(to_unsigned_long(10), x)] failed, treating result as null. Only first 20 failures recorded.
warning:Line 1:33: java.lang.ArithmeticException: long overflow

x:long
null
;

powULDouble
row x = pow(9223372036854775808, -.1);

x:double
0.012691443693066178
;

roundLongAsUL
row x = to_ul(9223372036854775804) | eval x = round(x, -1);

x:ul
9223372036854775800
;

roundUL
row x = round(9223372036854775808, -1);

x:ul
9223372036854775810
;

roundMaxMinusOneUL
row ul = round(18446744073709551614, -1);

ul:ul
18446744073709551610
;

roundULNoFold
row ul = 18446744073709551614 | eval ul = round(ul, -4);

ul:ul
18446744073709550000
;

roundMaxULNoDecimals
row ul = round(18446744073709551615);

ul:ul
18446744073709551615
;

mvAvg
from employees | where emp_no > 10008 | eval salary_change = mv_avg(salary_change) | sort emp_no | keep emp_no, salary_change.int, salary_change | limit 7;

emp_no:integer | salary_change.int:integer | salary_change:double
10009          | null                      | null
10010          | [-6, 4, 5, 12]            |  3.7800000000000002
10011          | [-7, 3, 8, 10]            |  3.685
10012          | 0                         |  0.04
10013          | null                      | null
10014          | [-1, 9]                   |  3.5900000000000003
10015          | [12, 14]                  | 13.325
;

mvAvgSimple
// tag::mv_avg[]
ROW a=[3, 5, 1, 6]
| EVAL avg_a = MV_AVG(a)
// end::mv_avg[]
;

// tag::mv_avg-result[]
   a:integer | avg_a:double
[3, 5, 1, 6] | 3.75
// end::mv_avg-result[]
;

mvAvgIntsOverflow
ROW ints = [0, 1, 2147483647]
| EVAL mvavg = mv_avg(ints)
| KEEP mvavg;

mvavg:double
7.158278826666666E8
;

mvAvgLongsOverflow
ROW longs = [0, 1, 9223372036854775807]
| EVAL mvavg = mv_avg(longs)
| KEEP mvavg;

mvavg:double
3.0744573456182584E18
;

mvAvgUnsignedLongsOverflow
ROW ulongs = [0, 1, 18446744073709551615]
| EVAL mvavg = mv_avg(ulongs)
| KEEP mvavg;

mvavg:double
6.148914691236517E18
;

mvCount
ROW a=[3, 5, 1, 6]
| EVAL count_a = MV_COUNT(a)
;

   a:integer | count_a:integer
[3, 5, 1, 6] | 4
;


mvMax
from employees | where emp_no > 10008 | eval salary_change = mv_max(salary_change.int) | sort emp_no | keep emp_no, salary_change.int, salary_change | limit 7;

emp_no:integer | salary_change.int:integer | salary_change:integer
10009          | null                      | null
10010          | [-6, 4, 5, 12]            | 12
10011          | [-7, 3, 8, 10]            | 10
10012          | 0                         | 0
10013          | null                      | null
10014          | [-1, 9]                   | 9
10015          | [12, 14]                  | 14
;

mvMaxSimple
// tag::mv_max[]
ROW a=[3, 5, 1]
| EVAL max_a = MV_MAX(a)
// end::mv_max[]
;

// tag::mv_max-result[]
a:integer | max_a:integer
[3, 5, 1] | 5
// end::mv_max-result[]
;

mvMedian
from employees | where emp_no > 10008 | eval med = mv_median(salary_change) | sort emp_no | keep emp_no, salary_change, med | limit 7;

emp_no:integer | salary_change:double         | med:double
10009          | null                         | null
10010          | [-6.77, 4.69, 5.05, 12.15]   | 4.87
10011          | [-7.82, 3.48, 8.73, 10.35]   | 6.105
10012          | 0.04                         | 0.04
10013          | null                         | null
10014          | [-1.89, 9.07]                | 3.5900000000000003
10015          | [12.4, 14.25]                | 13.325
;

mvMedianSimple
// tag::mv_median[]
ROW a=[3, 5, 1]
| EVAL median_a = MV_MEDIAN(a)
// end::mv_median[]
;

// tag::mv_median-result[]
a:integer | median_a:integer
[3, 5, 1] | 3
// end::mv_median-result[]
;

mvMedianRoundDown
// tag::mv_median_round_down[]
ROW a=[3, 7, 1, 6]
| EVAL median_a = MV_MEDIAN(a)
// end::mv_median_round_down[]
;

// tag::mv_median_round_down-result[]
   a:integer | median_a:integer
[3, 7, 1, 6] | 4
// end::mv_median_round_down-result[]
;

mvMin
from employees | where emp_no > 10008 | eval salary_change = mv_min(salary_change.int) | sort emp_no | keep emp_no, salary_change.int, salary_change | limit 7;

emp_no:integer | salary_change.int:integer | salary_change:integer
10009          |null                       |null           
10010          |[-6, 4, 5, 12]             |-6             
10011          |[-7, 3, 8, 10]             |-7             
10012          |0                          |0              
10013          |null                       |null           
10014          |[-1, 9]                    |-1             
10015          |[12, 14]                   |12             
;

mvMinSimple
// tag::mv_min[]
ROW a=[2, 1]
| EVAL min_a = MV_MIN(a)
// end::mv_min[]
;

// tag::mv_min-result[]
a:integer | min_a:integer
   [2, 1] | 1
// end::mv_min-result[]
;

mvSum
from employees | where emp_no > 10008 | eval salary_change = mv_sum(salary_change.int) | sort emp_no | keep emp_no, salary_change.int, salary_change | limit 7;

emp_no:integer | salary_change.int:integer | salary_change:integer
10009          | null                      | null
10010          | [-6, 4, 5, 12]            | 15
10011          | [-7, 3, 8, 10]            | 14
10012          | 0                         | 0
10013          | null                      | null
10014          | [-1, 9]                   | 8
10015          | [12, 14]                  | 26
;

mvSumSimple
// tag::mv_sum[]
ROW a=[3, 5, 6]
| EVAL sum_a = MV_SUM(a)
// end::mv_sum[]
;

// tag::mv_sum-result[]
a:integer | sum_a:integer
[3, 5, 6] | 14
// end::mv_sum-result[]
;

mvSumIntsOverflow
ROW ints = [0, 1, 2147483647]
| EVAL mvsum = mv_sum(ints)
| KEEP mvsum;

warning:Line 2:16: evaluation of [mv_sum(ints)] failed, treating result as null. Only first 20 failures recorded.
warning:Line 2:16: java.lang.ArithmeticException: integer overflow

mvsum:integer
null
;

mvSumLongsOverflow
ROW longs = [0, 1, 9223372036854775807]
| EVAL mvsum = mv_sum(longs)
| KEEP mvsum;

warning:Line 2:16: evaluation of [mv_sum(longs)] failed, treating result as null. Only first 20 failures recorded.
warning:Line 2:16: java.lang.ArithmeticException: long overflow

mvsum:long
null
;

mvSumUnsignedLongsOverflow
ROW ulongs = [0, 1, 18446744073709551615]
| EVAL mvsum = mv_sum(ulongs)
| KEEP mvsum;

warning:Line 2:16: evaluation of [mv_sum(ulongs)] failed, treating result as null. Only first 20 failures recorded.
warning:Line 2:16: java.lang.ArithmeticException: unsigned_long overflow

mvsum:unsigned_long
null
;

e
// tag::e[]
ROW E()
// end::e[]
;

// tag::e-result[]
E():double
2.718281828459045
// end::e-result[]
;

eInside
ROW a=2 | EVAL c = abs(a + e());

a:integer | c:double
        2 | 4.718281828459045
;

//
// unsigned_long arithmetics, MV functions
//

ulAddition
row x = to_ul(100), y = to_ul(1) | eval x = x + y | keep x;

x:ul
101
;

ulAdditionOverLongLimit
row x = to_ul(9223372036854775807), y = to_ul(1) | eval x = x + y | keep x;

x:ul
9223372036854775808
;

ulAdditionToUnsignedLongLimit
row x = 18446744073709551614, y = to_ul(1) | eval x = x + y | keep x;

x:ul
18446744073709551615
;

ulAdditionOverflow
row x = 18446744073709551615, y = to_ul(1) | eval x = x + y | keep x;

warning:Line 1:55: evaluation of [x + y] failed, treating result as null. Only first 20 failures recorded.
warning:Line 1:55: java.lang.ArithmeticException: unsigned_long overflow

x:ul
null
;

ulSubtraction
row x = to_ul(100), y = to_ul(1) | eval x = x - y | keep x;

x:ul
99
;

ulSubtractionToLongLimit
row x = 9223372036854775808, y = to_ul(1) | eval x = x - y | keep x;

x:ul
9223372036854775807
;

ulSubtractionFromUnsignedLongLimit
row x = 18446744073709551615, y = to_ul(1) | eval x = x - y | keep x;

x:ul
18446744073709551614
;

ulSubtractionUnderflow
row x = to_ul(0), y = to_ul(1) | eval x = x - y | keep x;

warning:Line 1:43: evaluation of [x - y] failed, treating result as null. Only first 20 failures recorded.
warning:Line 1:43: java.lang.ArithmeticException: unsigned_long overflow

x:ul
null
;

ulMultiplication
row x = to_ul(9223372036854775807), y = to_ul(2) | eval x = x * y | keep x;

x:ul
18446744073709551614
;

ulMultiplicationOverflow
row x = 9223372036854775808, two = to_ul(2) | eval times2 = x * two | keep times2;

warning:Line 1:61: evaluation of [x * two] failed, treating result as null. Only first 20 failures recorded.
warning:Line 1:61: java.lang.ArithmeticException: unsigned_long overflow

times2:ul
null
;

ulMultiplicationOverflow2
row x = 9223372036854775808, y = 9223372036854775809 | eval x = x * y | keep x;

warning:Line 1:65: evaluation of [x * y] failed, treating result as null. Only first 20 failures recorded.
warning:Line 1:65: java.lang.ArithmeticException: unsigned_long overflow

x:ul
null
;

ulDivision
row max = 18446744073709551615, halfplus = 9223372036854775808, two = to_ul(2) | eval x = max / two, y = max / halfplus | keep x, y;

x:ul                |y:ul
9223372036854775807 |1
;

ulDivisionByZero
row halfplus = 9223372036854775808, zero = to_ul(0) | eval div = halfplus / zero | keep div;

warning:Line 1:66: evaluation of [halfplus / zero] failed, treating result as null. Only first 20 failures recorded.
warning:Line 1:66: java.lang.ArithmeticException: / by zero

div:ul
null
;

ulModulo
row max = 18446744073709551615, halfplus = 9223372036854775808, two = to_ul(2) | eval x = max % halfplus, y = halfplus % two | keep x, y;

x:ul                |y:ul
9223372036854775807 |0
;

ulModuloByZero
row halfplus = 9223372036854775808, zero = to_ul(0) | eval mod = halfplus % zero | keep mod;

// ascii(%) == %25
warning:Line 1:66: evaluation of [halfplus %25 zero] failed, treating result as null. Only first 20 failures recorded.
warning:Line 1:66: java.lang.ArithmeticException: / by zero

mod:ul
null
;


ulMvNonSumFunctions
row ul = [18446744073709551615, 0, 1, 9223372036854775807, 9223372036854775808] | eval mv_min(ul), mv_max(ul), mv_median(ul), mv_count(ul) | drop ul;

  mv_min(ul):ul|     mv_max(ul):ul  |   mv_median(ul):ul| mv_count(ul):i
0              |18446744073709551615|9223372036854775807|5
;

ulMvSum
row ul = [1, 9223372036854775806, 9223372036854775808] | eval mv_sum(ul), mv_avg(ul) | drop ul;

     mv_sum(ul):ul  | mv_avg(ul):double
18446744073709551615|6.148914691236517E18
;

ulMedianEvenCount
row ul = [18446744073709551615, 0, 1, 9223372036854775807, 9223372036854775808, 2] | eval mv_median(ul) | drop ul;

mv_median(ul):ul
4611686018427387904
;

pi
// tag::pi[]
ROW PI()
// end::pi[]
;

// tag::pi-result[]
PI():double
3.141592653589793
// end::pi-result[]
;

tau
// tag::tau[]
ROW TAU()
// end::tau[]
;

// tag::tau-result[]
TAU():double
6.283185307179586
// end::tau-result[]
;

ceil
// tag::ceil[]
ROW a=1.8
| EVAL a=CEIL(a)
// end::ceil[]
;

// tag::ceil-result[]
a:double
2
// end::ceil-result[]
;

floor
// tag::floor[]
ROW a=1.8
| EVAL a=FLOOR(a)
// end::floor[]
;

// tag::floor-result[]
a:double
1
// end::floor-result[]
;

ceilFloorOfInfinite
row i = 1.0/0.0 | eval c = ceil(i), f = floor(i);

i:double | c:double | f:double
Infinity | Infinity | Infinity
;

ceilFloorOfNegativeInfinite
row i = -1.0/0.0 | eval c = ceil(i), f = floor(i);

i:double  | c:double  | f:double
-Infinity | -Infinity | -Infinity
;


ceilFloorOfInteger
row i = 1 | eval c = ceil(i), f = floor(i);

i:integer | c:integer | f:integer
1         | 1         | 1
;

ceilFloorOfLong
row i = to_long(1000000000000) | eval c = ceil(i), f = floor(i);

i:long        | c:long        | f:long
1000000000000 | 1000000000000 | 1000000000000
;

ceilFloorOfUnsignedLong
row i = to_ul(1000000000000000000) | eval c = ceil(i), f = floor(i);

i:ul                | c:ul                | f:ul
1000000000000000000 | 1000000000000000000 | 1000000000000000000
;

sqrt
// tag::sqrt[]
ROW d = 100.0
| EVAL s = SQRT(d)
// end::sqrt[]
;

// tag::sqrt-result[]
d: double | s:double
100.0    | 10.0
// end::sqrt-result[]
;

sqrtOfInteger
row i = 81 | eval s = sqrt(i);

i:integer | s:double
81        | 9
;

sqrtOfLong
row l = to_long(1000000000000) | eval s = sqrt(l);

l:long            | s:double
1000000000000     | 1000000
;

sqrtOfUnsignedLong
row l = to_ul(1000000000000000000) | eval s = sqrt(l);

l:ul                  | s:double
1000000000000000000   | 1000000000
;

sqrtOfNegative
row d = -1.0 | eval s = sqrt(d);
warning:Line 1:25: evaluation of [sqrt(d)] failed, treating result as null. Only first 20 failures recorded.
warning:Line 1:25: java.lang.ArithmeticException: Square root of negative

d:double | s:double
-1.0     | null
;

sqrtOfNan
row d = 0.0/0.0 | eval s = is_nan(sqrt(d));

d:double | s:boolean
NaN      | true
;

sqrtOfZero
row d = 0.0 |eval s = sqrt(d);

d:double | s:double
0.0     | 0.0
;

sqrtOfNegativeZero
row d = -0.0 |eval s = sqrt(d);

d:double | s:double
-0.0     | -0.0
;

sqrtOfInfinite
row d = 1/0.0 | eval s = is_infinite(sqrt(d));

d:double | s:boolean
Infinity | true
;

least
// tag::least[]
ROW a = 10, b = 20
| EVAL l = LEAST(a, b)
// end::least[]
;

// tag::least-result[]
a:integer | b:integer | l:integer
       10 |        20 | 10
// end::least-result[]
;

leastNull
ROW l=LEAST(10, 5, null);

l:integer
null
;

leastMany
ROW l=LEAST(10, 5, 1, -100, 0, 1234, -10000);

l:integer
-10000
;


greatest
// tag::greatest[]
ROW a = 10, b = 20
| EVAL g = GREATEST(a, b)
// end::greatest[]
;

// tag::greatest-result[]
a:integer | b:integer | g:integer
       10 |        20 | 20
// end::greatest-result[]
;

greatestNull
ROW g=GREATEST(10, 5, null);

g:integer
null
;

greatestMany
ROW g=GREATEST(10, 5, 1, -100, 0, 1234, -10000);

g:integer
1234
;

greatestMv
ROW g=GREATEST([10, 4], 1);

g:integer
10
;

leastGreatestMany
FROM employees
| EVAL min_plus_max = LEAST(languages, 2) + GREATEST(languages, 2),
       are_equal = LEAST(languages, 2) + GREATEST(languages, 2) == languages * 2
| SORT emp_no
| LIMIT 5
| KEEP emp_no, min_plus_max, are_equal;

emp_no:integer | min_plus_max:integer | are_equal:boolean
         10001 |                    4 | true
         10002 |                    7 | false
         10003 |                    6 | false
         10004 |                    7 | false
         10005 |                    3 | false
;
