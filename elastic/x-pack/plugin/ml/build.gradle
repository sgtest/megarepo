import org.elasticsearch.gradle.VersionProperties
import org.elasticsearch.gradle.internal.dra.DraResolvePlugin

apply plugin: 'elasticsearch.internal-es-plugin'
apply plugin: 'elasticsearch.internal-cluster-test'
apply plugin: 'elasticsearch.internal-test-artifact'
apply plugin: 'elasticsearch.dra-artifacts'

esplugin {
  name 'x-pack-ml'
  description 'Elasticsearch Expanded Pack Plugin - Machine Learning'
  classname 'org.elasticsearch.xpack.ml.MachineLearning'
  hasNativeController true
  extendedPlugins = ['x-pack-autoscaling', 'lang-painless']
}

def localRepo = providers.systemProperty('build.ml_cpp.repo').orNull
if (useDra == false) {
  repositories {
    exclusiveContent {
      filter {
        includeGroup 'org.elasticsearch.ml'
      }
      forRepository {
        ivy {
          name "ml-cpp"
          metadataSources {
            // no repository metadata, look directly for the artifact
            artifact()
          }
          if (localRepo) {
            url localRepo
            patternLayout {
              artifact "maven/[orgPath]/[module]/[revision]/[module]-[revision](-[classifier]).[ext]"
            }
          } else {
            url "https://artifacts-snapshot.elastic.co/"
            patternLayout {
              if (VersionProperties.isElasticsearchSnapshot()) {
                artifact '/ml-cpp/[revision]/downloads/ml-cpp/[module]-[revision]-[classifier].[ext]'
              } else {
                // When building locally we always use snapshot artifacts even if passing `-Dbuild.snapshot=false`.
                // Release builds are always done with a local repo.
                artifact '/ml-cpp/[revision]-SNAPSHOT/downloads/ml-cpp/[module]-[revision]-SNAPSHOT-[classifier].[ext]'
              }
            }
          }
        }
      }
    }
  }

}

configurations {
  nativeBundle {
    resolutionStrategy.cacheChangingModulesFor 2, 'hours'
  }
}

esplugin.bundleSpec.from {
  configurations.nativeBundle.files.collect { zipTree(it) }
}

// We don't ship the individual nativeBundle licenses - instead
// they get combined into the top level NOTICES file we ship
esplugin.bundleSpec.exclude 'platform/licenses/**'

["bundlePlugin", "explodedBundlePlugin"].each { bundleTaskName ->
    tasks.named(bundleTaskName).configure {
        dependsOn configurations.nativeBundle
    }
}

dependencies {
  compileOnly project(':modules:lang-painless:spi')
  compileOnly project(path: xpackModule('core'))
  compileOnly project(path: xpackModule('autoscaling'))
  testImplementation(testArtifact(project(xpackModule('core'))))
  testImplementation project(path: xpackModule('ilm'))
  testImplementation project(path: xpackModule('shutdown'))
  testImplementation project(':modules:data-streams')
  testImplementation project(path: xpackModule('monitoring'))
  testImplementation project(':modules:ingest-common')
  testImplementation project(':modules:reindex')
  testImplementation project(':modules:analysis-common')
  testImplementation project(':modules:mapper-extras')
  // This should not be here
  testImplementation(testArtifact(project(xpackModule('security'))))
  // ml deps
  api project(':libs:elasticsearch-grok')
  api "org.apache.commons:commons-math3:3.6.1"
  api "com.ibm.icu:icu4j:${versions.icu4j}"
  api "org.apache.lucene:lucene-analysis-icu:${versions.lucene}"
  implementation 'org.ojalgo:ojalgo:51.2.0'
  nativeBundle("org.elasticsearch.ml:ml-cpp:${project.version}:deps@zip") {
    changing = true
  }
  nativeBundle("org.elasticsearch.ml:ml-cpp:${project.version}:nodeps@zip") {
    changing = true
  }
  testImplementation 'org.ini4j:ini4j:0.5.2'
}

artifacts {
  // normal es plugins do not publish the jar but we need to since users need it for extensions
  archives tasks.named("jar")
}

tasks.register("extractNativeLicenses", Copy) {
  dependsOn configurations.nativeBundle
  into "${buildDir}/extractedNativeLicenses"
  from {
    configurations.nativeBundle.files.collect { zipTree(it) }
  }
  include 'platform/licenses/**'
}
project.afterEvaluate {
  // Add an extra licenses directory to the combined notices
  tasks.named('generateNotice').configure {
    dependsOn "extractNativeLicenses"
    licensesDir new File("${project.buildDir}/extractedNativeLicenses/platform/licenses")
    outputs.upToDateWhen {
      extractNativeLicenses.didWork
    }
  }
}

tasks.named("dependencyLicenses").configure {
  mapping from: /lucene-.*/, to: 'lucene'
}

addQaCheckDependencies(project)