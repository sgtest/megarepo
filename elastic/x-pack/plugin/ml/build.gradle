apply plugin: 'elasticsearch.esplugin'
apply plugin: 'elasticsearch.internal-cluster-test'
apply plugin: 'elasticsearch.internal-test-artifact'

esplugin {
  name 'x-pack-ml'
  description 'Elasticsearch Expanded Pack Plugin - Machine Learning'
  classname 'org.elasticsearch.xpack.ml.MachineLearning'
  hasNativeController true
  extendedPlugins = ['x-pack-autoscaling', 'lang-painless']
}


repositories {
  exclusiveContent {
    forRepository {
      ivy {
        name "ml-cpp"
        url System.getProperty('build.ml_cpp.repo', 'https://prelert-artifacts.s3.amazonaws.com')
        metadataSources {
          // no repository metadata, look directly for the artifact
          artifact()
        }
        patternLayout {
          artifact "maven/org/elasticsearch/ml/ml-cpp/[revision]/ml-cpp-[revision].[ext]"
        }
      }
    }
    filter {
      includeGroup 'org.elasticsearch.ml'
    }
  }
}

configurations {
  nativeBundle {
    resolutionStrategy.dependencySubstitution {
      if (findProject(':ml-cpp') != null) {
        substitute module("org.elasticsearch.ml:ml-cpp") with project(":ml-cpp")
      }
    }
    resolutionStrategy.cacheChangingModulesFor 2, 'hours'
  }
}

tasks.named("bundlePlugin").configure {
  dependsOn configurations.nativeBundle
  from {
    project.zipTree(configurations.nativeBundle.singleFile)
  }

  // We don't ship the individual nativeBundle licenses - instead
  // they get combined into the top level NOTICES file we ship
  exclude 'platform/licenses/**'
}

dependencies {
  compileOnly project(':modules:lang-painless:spi')
  compileOnly project(path: xpackModule('core'))
  testImplementation(testArtifact(project(xpackModule('core'))))
  testImplementation project(path: xpackModule('ilm'))
  compileOnly project(path: xpackModule('autoscaling'))
  testImplementation project(path: xpackModule('data-streams'))
  testImplementation project(':modules:ingest-common')
  // This should not be here
  testImplementation(testArtifact(project(xpackModule('security'))))
  // ml deps
  api project(':libs:elasticsearch-grok')
  api "net.sf.supercsv:super-csv:${versions.supercsv}"
  nativeBundle("org.elasticsearch.ml:ml-cpp:${project.version}@zip") {
    changing = true
  }
  testImplementation 'org.ini4j:ini4j:0.5.2'
}

artifacts {
  // normal es plugins do not publish the jar but we need to since users need it for extensions
  archives tasks.named("jar")
}

tasks.register("extractNativeLicenses", Copy) {
  dependsOn configurations.nativeBundle
  into "${buildDir}/extractedNativeLicenses"
  from {
    project.zipTree(configurations.nativeBundle.singleFile)
  }
  include 'platform/licenses/**'
}
project.afterEvaluate {
  // Add an extra licenses directory to the combined notices
  tasks.named('generateNotice').configure {
    dependsOn "extractNativeLicenses"
    licensesDir new File("${project.buildDir}/extractedNativeLicenses/platform/licenses")
    outputs.upToDateWhen {
      extractNativeLicenses.didWork
    }
  }
}

addQaCheckDependencies()
