import org.elasticsearch.gradle.test.RestIntegTestTask

apply plugin: 'elasticsearch.testclusters'
apply plugin: 'elasticsearch.standalone-test'
apply plugin: 'elasticsearch.rest-resources'

dependencies {
  testImplementation project(':x-pack:qa')
  testImplementation project(':client:rest-high-level')
}

restResources {
  restApi {
    include '_common', 'bulk', 'indices', 'cluster', 'search', 'security', 'transform'
  }
}


testClusters {
  'remote-cluster' {
    testDistribution = 'DEFAULT'
    numberOfNodes = 2
    setting 'node.roles', '[data,ingest,master]'
    setting 'xpack.security.enabled', 'true'
    setting 'xpack.watcher.enabled', 'false'
    setting 'xpack.license.self_generated.type', 'trial'

    user username: "test_user", password: "x-pack-test-password"
  }

  'mixed-cluster' {
    testDistribution = 'DEFAULT'
    numberOfNodes = 2
    // Node roles are configured this way in order to verify redirecting the transform request from the node lacking
    // remote_cluster_client role to the node that is remote_cluster_client.
    nodes."mixed-cluster-0".setting 'node.roles', '[data,ingest,master,transform]'
    nodes."mixed-cluster-1".setting 'node.roles', '[data,ingest,master,transform,remote_cluster_client]'
    setting 'xpack.security.enabled', 'true'
    setting 'xpack.watcher.enabled', 'false'
    setting 'xpack.license.self_generated.type', 'trial'
    setting 'cluster.remote.my_remote_cluster.seeds', {
      testClusters.'remote-cluster'.getAllTransportPortURI().collect { "\"$it\"" }.toString()
    }
    setting 'cluster.remote.connections_per_cluster', "1"

    user username: "test_user", password: "x-pack-test-password"
  }
}

tasks.register('remote-cluster', RestIntegTestTask) {
  mustRunAfter("precommit")
  systemProperty 'tests.rest.suite', 'remote_cluster'
}


tasks.register('mixed-cluster', RestIntegTestTask) {
  dependsOn 'remote-cluster'
  useCluster testClusters.'remote-cluster'
  systemProperty 'tests.rest.suite', 'multi_cluster'
}

tasks.register("integTest") {
  dependsOn 'mixed-cluster'
}

tasks.named("test").configure { enabled = false } // no unit tests for multi-cluster-search, only the rest integration test
tasks.named("check").configure { dependsOn("integTest") }
