import org.elasticsearch.gradle.test.RestIntegTestTask

apply plugin: 'elasticsearch.standalone-test'

dependencies {
    testCompile project(path: xpackModule('core'), configuration: 'testArtifacts')
    testCompile project(path: xpackModule('ilm'), configuration: 'runtime')
}

task restTest(type: RestIntegTestTask) {
    mustRunAfter(precommit)
}

def clusterCredentials = [username: System.getProperty('tests.rest.cluster.username', 'test_admin'),
                          password: System.getProperty('tests.rest.cluster.password', 'x-pack-test-password')]


restTestRunner {
    systemProperty 'tests.rest.cluster.username', clusterCredentials.username
    systemProperty 'tests.rest.cluster.password', clusterCredentials.password
}

restTestCluster {
    distribution 'default'
    setting 'xpack.ilm.enabled', 'true'
    setting 'xpack.ml.enabled', 'false'
    setting 'xpack.monitoring.enabled', 'false'
    setting 'xpack.security.enabled', 'true'
    setting 'xpack.license.self_generated.type', 'trial'
    setupCommand 'setup-admin-user',
            'bin/elasticsearch-users', 'useradd', clusterCredentials.username, '-p', clusterCredentials.password, '-r', 'superuser'
    waitCondition = { node, ant ->
        File tmpFile = new File(node.cwd, 'wait.success')
        ant.get(src: "http://${node.httpUri()}/_cluster/health?wait_for_nodes=>=${numNodes}&wait_for_status=yellow",
                dest: tmpFile.toString(),
                username: clusterCredentials.username,
                password: clusterCredentials.password,
                ignoreerrors: true,
                retries: 10)
        return tmpFile.exists()
    }
}

check.dependsOn restTest
unitTest.enabled = false
