// ANTLR GENERATED CODE: DO NOT EDIT
package org.elasticsearch.xpack.eql.parser;

import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({ "all", "warnings", "unchecked", "unused", "cast" })
class EqlBaseLexer extends Lexer {
    static {
        RuntimeMetaData.checkVersion("4.9.2", RuntimeMetaData.VERSION);
    }

    protected static final DFA[] _decisionToDFA;
    protected static final PredictionContextCache _sharedContextCache = new PredictionContextCache();
    public static final int AND = 1, ANY = 2, BY = 3, FALSE = 4, IN = 5, IN_INSENSITIVE = 6, JOIN = 7, LIKE = 8, LIKE_INSENSITIVE = 9,
        MAXSPAN = 10, NOT = 11, NULL = 12, OF = 13, OR = 14, REGEX = 15, REGEX_INSENSITIVE = 16, SEQUENCE = 17, TRUE = 18, UNTIL = 19,
        WHERE = 20, WITH = 21, SEQ = 22, ASGN = 23, EQ = 24, NEQ = 25, LT = 26, LTE = 27, GT = 28, GTE = 29, PLUS = 30, MINUS = 31,
        ASTERISK = 32, SLASH = 33, PERCENT = 34, DOT = 35, COMMA = 36, LB = 37, RB = 38, LP = 39, RP = 40, PIPE = 41, OPTIONAL = 42,
        STRING = 43, INTEGER_VALUE = 44, DECIMAL_VALUE = 45, IDENTIFIER = 46, QUOTED_IDENTIFIER = 47, TILDE_IDENTIFIER = 48, LINE_COMMENT =
            49, BRACKETED_COMMENT = 50, WS = 51;
    public static String[] channelNames = { "DEFAULT_TOKEN_CHANNEL", "HIDDEN" };

    public static String[] modeNames = { "DEFAULT_MODE" };

    private static String[] makeRuleNames() {
        return new String[] {
            "AND",
            "ANY",
            "BY",
            "FALSE",
            "IN",
            "IN_INSENSITIVE",
            "JOIN",
            "LIKE",
            "LIKE_INSENSITIVE",
            "MAXSPAN",
            "NOT",
            "NULL",
            "OF",
            "OR",
            "REGEX",
            "REGEX_INSENSITIVE",
            "SEQUENCE",
            "TRUE",
            "UNTIL",
            "WHERE",
            "WITH",
            "SEQ",
            "ASGN",
            "EQ",
            "NEQ",
            "LT",
            "LTE",
            "GT",
            "GTE",
            "PLUS",
            "MINUS",
            "ASTERISK",
            "SLASH",
            "PERCENT",
            "DOT",
            "COMMA",
            "LB",
            "RB",
            "LP",
            "RP",
            "PIPE",
            "OPTIONAL",
            "STRING_ESCAPE",
            "HEX_DIGIT",
            "UNICODE_ESCAPE",
            "UNESCAPED_CHARS",
            "STRING",
            "INTEGER_VALUE",
            "DECIMAL_VALUE",
            "IDENTIFIER",
            "QUOTED_IDENTIFIER",
            "TILDE_IDENTIFIER",
            "EXPONENT",
            "DIGIT",
            "LETTER",
            "LINE_COMMENT",
            "BRACKETED_COMMENT",
            "WS" };
    }

    public static final String[] ruleNames = makeRuleNames();

    private static String[] makeLiteralNames() {
        return new String[] {
            null,
            "'and'",
            "'any'",
            "'by'",
            "'false'",
            "'in'",
            "'in~'",
            "'join'",
            "'like'",
            "'like~'",
            "'maxspan'",
            "'not'",
            "'null'",
            "'of'",
            "'or'",
            "'regex'",
            "'regex~'",
            "'sequence'",
            "'true'",
            "'until'",
            "'where'",
            "'with'",
            "':'",
            "'='",
            "'=='",
            "'!='",
            "'<'",
            "'<='",
            "'>'",
            "'>='",
            "'+'",
            "'-'",
            "'*'",
            "'/'",
            "'%'",
            "'.'",
            "','",
            "'['",
            "']'",
            "'('",
            "')'",
            "'|'",
            "'?'" };
    }

    private static final String[] _LITERAL_NAMES = makeLiteralNames();

    private static String[] makeSymbolicNames() {
        return new String[] {
            null,
            "AND",
            "ANY",
            "BY",
            "FALSE",
            "IN",
            "IN_INSENSITIVE",
            "JOIN",
            "LIKE",
            "LIKE_INSENSITIVE",
            "MAXSPAN",
            "NOT",
            "NULL",
            "OF",
            "OR",
            "REGEX",
            "REGEX_INSENSITIVE",
            "SEQUENCE",
            "TRUE",
            "UNTIL",
            "WHERE",
            "WITH",
            "SEQ",
            "ASGN",
            "EQ",
            "NEQ",
            "LT",
            "LTE",
            "GT",
            "GTE",
            "PLUS",
            "MINUS",
            "ASTERISK",
            "SLASH",
            "PERCENT",
            "DOT",
            "COMMA",
            "LB",
            "RB",
            "LP",
            "RP",
            "PIPE",
            "OPTIONAL",
            "STRING",
            "INTEGER_VALUE",
            "DECIMAL_VALUE",
            "IDENTIFIER",
            "QUOTED_IDENTIFIER",
            "TILDE_IDENTIFIER",
            "LINE_COMMENT",
            "BRACKETED_COMMENT",
            "WS" };
    }

    private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
    public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

    /**
     * @deprecated Use {@link #VOCABULARY} instead.
     */
    @Deprecated
    public static final String[] tokenNames;
    static {
        tokenNames = new String[_SYMBOLIC_NAMES.length];
        for (int i = 0; i < tokenNames.length; i++) {
            tokenNames[i] = VOCABULARY.getLiteralName(i);
            if (tokenNames[i] == null) {
                tokenNames[i] = VOCABULARY.getSymbolicName(i);
            }

            if (tokenNames[i] == null) {
                tokenNames[i] = "<INVALID>";
            }
        }
    }

    @Override
    @Deprecated
    public String[] getTokenNames() {
        return tokenNames;
    }

    @Override

    public Vocabulary getVocabulary() {
        return VOCABULARY;
    }

    public EqlBaseLexer(CharStream input) {
        super(input);
        _interp = new LexerATNSimulator(this, _ATN, _decisionToDFA, _sharedContextCache);
    }

    @Override
    public String getGrammarFileName() {
        return "EqlBase.g4";
    }

    @Override
    public String[] getRuleNames() {
        return ruleNames;
    }

    @Override
    public String getSerializedATN() {
        return _serializedATN;
    }

    @Override
    public String[] getChannelNames() {
        return channelNames;
    }

    @Override
    public String[] getModeNames() {
        return modeNames;
    }

    @Override
    public ATN getATN() {
        return _ATN;
    }

    public static final String _serializedATN = "\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\65\u01eb\b\1\4\2"
        + "\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4"
        + "\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22"
        + "\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31"
        + "\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t"
        + " \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t"
        + "+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64"
        + "\t\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\3\2\3\2\3"
        + "\2\3\2\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\6"
        + "\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3"
        + "\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\r"
        + "\3\r\3\r\3\r\3\r\3\16\3\16\3\16\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20"
        + "\3\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22"
        + "\3\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24"
        + "\3\25\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\27\3\27\3\30"
        + "\3\30\3\31\3\31\3\31\3\32\3\32\3\32\3\33\3\33\3\34\3\34\3\34\3\35\3\35"
        + "\3\36\3\36\3\36\3\37\3\37\3 \3 \3!\3!\3\"\3\"\3#\3#\3$\3$\3%\3%\3&\3&"
        + "\3\'\3\'\3(\3(\3)\3)\3*\3*\3+\3+\3,\3,\3,\3-\3-\3.\3.\3.\3.\3.\6.\u011b"
        + "\n.\r.\16.\u011c\3.\3.\3/\3/\3\60\3\60\3\60\3\60\7\60\u0127\n\60\f\60"
        + "\16\60\u012a\13\60\3\60\3\60\3\60\3\60\3\60\3\60\7\60\u0132\n\60\f\60"
        + "\16\60\u0135\13\60\3\60\3\60\3\60\3\60\3\60\5\60\u013c\n\60\3\60\5\60"
        + "\u013f\n\60\3\60\3\60\3\60\3\60\7\60\u0145\n\60\f\60\16\60\u0148\13\60"
        + "\3\60\3\60\3\60\3\60\3\60\3\60\3\60\7\60\u0151\n\60\f\60\16\60\u0154\13"
        + "\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\7\60\u015d\n\60\f\60\16\60\u0160"
        + "\13\60\3\60\5\60\u0163\n\60\3\61\6\61\u0166\n\61\r\61\16\61\u0167\3\62"
        + "\6\62\u016b\n\62\r\62\16\62\u016c\3\62\3\62\7\62\u0171\n\62\f\62\16\62"
        + "\u0174\13\62\3\62\3\62\6\62\u0178\n\62\r\62\16\62\u0179\3\62\6\62\u017d"
        + "\n\62\r\62\16\62\u017e\3\62\3\62\7\62\u0183\n\62\f\62\16\62\u0186\13\62"
        + "\5\62\u0188\n\62\3\62\3\62\3\62\3\62\6\62\u018e\n\62\r\62\16\62\u018f"
        + "\3\62\3\62\5\62\u0194\n\62\3\63\3\63\5\63\u0198\n\63\3\63\3\63\3\63\7"
        + "\63\u019d\n\63\f\63\16\63\u01a0\13\63\3\64\3\64\3\64\3\64\7\64\u01a6\n"
        + "\64\f\64\16\64\u01a9\13\64\3\64\3\64\3\65\3\65\3\65\3\65\7\65\u01b1\n"
        + "\65\f\65\16\65\u01b4\13\65\3\65\3\65\3\66\3\66\5\66\u01ba\n\66\3\66\6"
        + "\66\u01bd\n\66\r\66\16\66\u01be\3\67\3\67\38\38\39\39\39\39\79\u01c9\n"
        + "9\f9\169\u01cc\139\39\59\u01cf\n9\39\59\u01d2\n9\39\39\3:\3:\3:\3:\3:"
        + "\7:\u01db\n:\f:\16:\u01de\13:\3:\3:\3:\3:\3:\3;\6;\u01e6\n;\r;\16;\u01e7"
        + "\3;\3;\4\u0133\u01dc\2<\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f"
        + "\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63"
        + "\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W\2Y\2[\2]\2_-a.c/"
        + "e\60g\61i\62k\2m\2o\2q\63s\64u\65\3\2\20\n\2$$))^^ddhhppttvv\5\2\62;C"
        + "Hch\6\2\f\f\17\17$$^^\4\2\f\f\17\17\6\2\f\f\17\17))^^\5\2\f\f\17\17$$"
        + "\5\2\f\f\17\17))\4\2BBaa\3\2bb\4\2GGgg\4\2--//\3\2\62;\4\2C\\c|\5\2\13"
        + "\f\17\17\"\"\2\u0210\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2"
        + "\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3"
        + "\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2"
        + "\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2"
        + "\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2"
        + "\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2"
        + "\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q"
        + "\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2"
        + "\2\2\2g\3\2\2\2\2i\3\2\2\2\2q\3\2\2\2\2s\3\2\2\2\2u\3\2\2\2\3w\3\2\2\2"
        + "\5{\3\2\2\2\7\177\3\2\2\2\t\u0082\3\2\2\2\13\u0088\3\2\2\2\r\u008b\3\2"
        + "\2\2\17\u008f\3\2\2\2\21\u0094\3\2\2\2\23\u0099\3\2\2\2\25\u009f\3\2\2"
        + "\2\27\u00a7\3\2\2\2\31\u00ab\3\2\2\2\33\u00b0\3\2\2\2\35\u00b3\3\2\2\2"
        + "\37\u00b6\3\2\2\2!\u00bc\3\2\2\2#\u00c3\3\2\2\2%\u00cc\3\2\2\2\'\u00d1"
        + "\3\2\2\2)\u00d7\3\2\2\2+\u00dd\3\2\2\2-\u00e2\3\2\2\2/\u00e4\3\2\2\2\61"
        + "\u00e6\3\2\2\2\63\u00e9\3\2\2\2\65\u00ec\3\2\2\2\67\u00ee\3\2\2\29\u00f1"
        + "\3\2\2\2;\u00f3\3\2\2\2=\u00f6\3\2\2\2?\u00f8\3\2\2\2A\u00fa\3\2\2\2C"
        + "\u00fc\3\2\2\2E\u00fe\3\2\2\2G\u0100\3\2\2\2I\u0102\3\2\2\2K\u0104\3\2"
        + "\2\2M\u0106\3\2\2\2O\u0108\3\2\2\2Q\u010a\3\2\2\2S\u010c\3\2\2\2U\u010e"
        + "\3\2\2\2W\u0110\3\2\2\2Y\u0113\3\2\2\2[\u0115\3\2\2\2]\u0120\3\2\2\2_"
        + "\u0162\3\2\2\2a\u0165\3\2\2\2c\u0193\3\2\2\2e\u0197\3\2\2\2g\u01a1\3\2"
        + "\2\2i\u01ac\3\2\2\2k\u01b7\3\2\2\2m\u01c0\3\2\2\2o\u01c2\3\2\2\2q\u01c4"
        + "\3\2\2\2s\u01d5\3\2\2\2u\u01e5\3\2\2\2wx\7c\2\2xy\7p\2\2yz\7f\2\2z\4\3"
        + "\2\2\2{|\7c\2\2|}\7p\2\2}~\7{\2\2~\6\3\2\2\2\177\u0080\7d\2\2\u0080\u0081"
        + "\7{\2\2\u0081\b\3\2\2\2\u0082\u0083\7h\2\2\u0083\u0084\7c\2\2\u0084\u0085"
        + "\7n\2\2\u0085\u0086\7u\2\2\u0086\u0087\7g\2\2\u0087\n\3\2\2\2\u0088\u0089"
        + "\7k\2\2\u0089\u008a\7p\2\2\u008a\f\3\2\2\2\u008b\u008c\7k\2\2\u008c\u008d"
        + "\7p\2\2\u008d\u008e\7\u0080\2\2\u008e\16\3\2\2\2\u008f\u0090\7l\2\2\u0090"
        + "\u0091\7q\2\2\u0091\u0092\7k\2\2\u0092\u0093\7p\2\2\u0093\20\3\2\2\2\u0094"
        + "\u0095\7n\2\2\u0095\u0096\7k\2\2\u0096\u0097\7m\2\2\u0097\u0098\7g\2\2"
        + "\u0098\22\3\2\2\2\u0099\u009a\7n\2\2\u009a\u009b\7k\2\2\u009b\u009c\7"
        + "m\2\2\u009c\u009d\7g\2\2\u009d\u009e\7\u0080\2\2\u009e\24\3\2\2\2\u009f"
        + "\u00a0\7o\2\2\u00a0\u00a1\7c\2\2\u00a1\u00a2\7z\2\2\u00a2\u00a3\7u\2\2"
        + "\u00a3\u00a4\7r\2\2\u00a4\u00a5\7c\2\2\u00a5\u00a6\7p\2\2\u00a6\26\3\2"
        + "\2\2\u00a7\u00a8\7p\2\2\u00a8\u00a9\7q\2\2\u00a9\u00aa\7v\2\2\u00aa\30"
        + "\3\2\2\2\u00ab\u00ac\7p\2\2\u00ac\u00ad\7w\2\2\u00ad\u00ae\7n\2\2\u00ae"
        + "\u00af\7n\2\2\u00af\32\3\2\2\2\u00b0\u00b1\7q\2\2\u00b1\u00b2\7h\2\2\u00b2"
        + "\34\3\2\2\2\u00b3\u00b4\7q\2\2\u00b4\u00b5\7t\2\2\u00b5\36\3\2\2\2\u00b6"
        + "\u00b7\7t\2\2\u00b7\u00b8\7g\2\2\u00b8\u00b9\7i\2\2\u00b9\u00ba\7g\2\2"
        + "\u00ba\u00bb\7z\2\2\u00bb \3\2\2\2\u00bc\u00bd\7t\2\2\u00bd\u00be\7g\2"
        + "\2\u00be\u00bf\7i\2\2\u00bf\u00c0\7g\2\2\u00c0\u00c1\7z\2\2\u00c1\u00c2"
        + "\7\u0080\2\2\u00c2\"\3\2\2\2\u00c3\u00c4\7u\2\2\u00c4\u00c5\7g\2\2\u00c5"
        + "\u00c6\7s\2\2\u00c6\u00c7\7w\2\2\u00c7\u00c8\7g\2\2\u00c8\u00c9\7p\2\2"
        + "\u00c9\u00ca\7e\2\2\u00ca\u00cb\7g\2\2\u00cb$\3\2\2\2\u00cc\u00cd\7v\2"
        + "\2\u00cd\u00ce\7t\2\2\u00ce\u00cf\7w\2\2\u00cf\u00d0\7g\2\2\u00d0&\3\2"
        + "\2\2\u00d1\u00d2\7w\2\2\u00d2\u00d3\7p\2\2\u00d3\u00d4\7v\2\2\u00d4\u00d5"
        + "\7k\2\2\u00d5\u00d6\7n\2\2\u00d6(\3\2\2\2\u00d7\u00d8\7y\2\2\u00d8\u00d9"
        + "\7j\2\2\u00d9\u00da\7g\2\2\u00da\u00db\7t\2\2\u00db\u00dc\7g\2\2\u00dc"
        + "*\3\2\2\2\u00dd\u00de\7y\2\2\u00de\u00df\7k\2\2\u00df\u00e0\7v\2\2\u00e0"
        + "\u00e1\7j\2\2\u00e1,\3\2\2\2\u00e2\u00e3\7<\2\2\u00e3.\3\2\2\2\u00e4\u00e5"
        + "\7?\2\2\u00e5\60\3\2\2\2\u00e6\u00e7\7?\2\2\u00e7\u00e8\7?\2\2\u00e8\62"
        + "\3\2\2\2\u00e9\u00ea\7#\2\2\u00ea\u00eb\7?\2\2\u00eb\64\3\2\2\2\u00ec"
        + "\u00ed\7>\2\2\u00ed\66\3\2\2\2\u00ee\u00ef\7>\2\2\u00ef\u00f0\7?\2\2\u00f0"
        + "8\3\2\2\2\u00f1\u00f2\7@\2\2\u00f2:\3\2\2\2\u00f3\u00f4\7@\2\2\u00f4\u00f5"
        + "\7?\2\2\u00f5<\3\2\2\2\u00f6\u00f7\7-\2\2\u00f7>\3\2\2\2\u00f8\u00f9\7"
        + "/\2\2\u00f9@\3\2\2\2\u00fa\u00fb\7,\2\2\u00fbB\3\2\2\2\u00fc\u00fd\7\61"
        + "\2\2\u00fdD\3\2\2\2\u00fe\u00ff\7\'\2\2\u00ffF\3\2\2\2\u0100\u0101\7\60"
        + "\2\2\u0101H\3\2\2\2\u0102\u0103\7.\2\2\u0103J\3\2\2\2\u0104\u0105\7]\2"
        + "\2\u0105L\3\2\2\2\u0106\u0107\7_\2\2\u0107N\3\2\2\2\u0108\u0109\7*\2\2"
        + "\u0109P\3\2\2\2\u010a\u010b\7+\2\2\u010bR\3\2\2\2\u010c\u010d\7~\2\2\u010d"
        + "T\3\2\2\2\u010e\u010f\7A\2\2\u010fV\3\2\2\2\u0110\u0111\7^\2\2\u0111\u0112"
        + "\t\2\2\2\u0112X\3\2\2\2\u0113\u0114\t\3\2\2\u0114Z\3\2\2\2\u0115\u0116"
        + "\7^\2\2\u0116\u0117\7w\2\2\u0117\u0118\3\2\2\2\u0118\u011a\7}\2\2\u0119"
        + "\u011b\5Y-\2\u011a\u0119\3\2\2\2\u011b\u011c\3\2\2\2\u011c\u011a\3\2\2"
        + "\2\u011c\u011d\3\2\2\2\u011d\u011e\3\2\2\2\u011e\u011f\7\177\2\2\u011f"
        + "\\\3\2\2\2\u0120\u0121\n\4\2\2\u0121^\3\2\2\2\u0122\u0128\7$\2\2\u0123"
        + "\u0127\5W,\2\u0124\u0127\5[.\2\u0125\u0127\5]/\2\u0126\u0123\3\2\2\2\u0126"
        + "\u0124\3\2\2\2\u0126\u0125\3\2\2\2\u0127\u012a\3\2\2\2\u0128\u0126\3\2"
        + "\2\2\u0128\u0129\3\2\2\2\u0129\u012b\3\2\2\2\u012a\u0128\3\2\2\2\u012b"
        + "\u0163\7$\2\2\u012c\u012d\7$\2\2\u012d\u012e\7$\2\2\u012e\u012f\7$\2\2"
        + "\u012f\u0133\3\2\2\2\u0130\u0132\n\5\2\2\u0131\u0130\3\2\2\2\u0132\u0135"
        + "\3\2\2\2\u0133\u0134\3\2\2\2\u0133\u0131\3\2\2\2\u0134\u0136\3\2\2\2\u0135"
        + "\u0133\3\2\2\2\u0136\u0137\7$\2\2\u0137\u0138\7$\2\2\u0138\u0139\7$\2"
        + "\2\u0139\u013b\3\2\2\2\u013a\u013c\7$\2\2\u013b\u013a\3\2\2\2\u013b\u013c"
        + "\3\2\2\2\u013c\u013e\3\2\2\2\u013d\u013f\7$\2\2\u013e\u013d\3\2\2\2\u013e"
        + "\u013f\3\2\2\2\u013f\u0163\3\2\2\2\u0140\u0146\7)\2\2\u0141\u0142\7^\2"
        + "\2\u0142\u0145\t\2\2\2\u0143\u0145\n\6\2\2\u0144\u0141\3\2\2\2\u0144\u0143"
        + "\3\2\2\2\u0145\u0148\3\2\2\2\u0146\u0144\3\2\2\2\u0146\u0147\3\2\2\2\u0147"
        + "\u0149\3\2\2\2\u0148\u0146\3\2\2\2\u0149\u0163\7)\2\2\u014a\u014b\7A\2"
        + "\2\u014b\u014c\7$\2\2\u014c\u0152\3\2\2\2\u014d\u014e\7^\2\2\u014e\u0151"
        + "\7$\2\2\u014f\u0151\n\7\2\2\u0150\u014d\3\2\2\2\u0150\u014f\3\2\2\2\u0151"
        + "\u0154\3\2\2\2\u0152\u0150\3\2\2\2\u0152\u0153\3\2\2\2\u0153\u0155\3\2"
        + "\2\2\u0154\u0152\3\2\2\2\u0155\u0163\7$\2\2\u0156\u0157\7A\2\2\u0157\u0158"
        + "\7)\2\2\u0158\u015e\3\2\2\2\u0159\u015a\7^\2\2\u015a\u015d\7)\2\2\u015b"
        + "\u015d\n\b\2\2\u015c\u0159\3\2\2\2\u015c\u015b\3\2\2\2\u015d\u0160\3\2"
        + "\2\2\u015e\u015c\3\2\2\2\u015e\u015f\3\2\2\2\u015f\u0161\3\2\2\2\u0160"
        + "\u015e\3\2\2\2\u0161\u0163\7)\2\2\u0162\u0122\3\2\2\2\u0162\u012c\3\2"
        + "\2\2\u0162\u0140\3\2\2\2\u0162\u014a\3\2\2\2\u0162\u0156\3\2\2\2\u0163"
        + "`\3\2\2\2\u0164\u0166\5m\67\2\u0165\u0164\3\2\2\2\u0166\u0167\3\2\2\2"
        + "\u0167\u0165\3\2\2\2\u0167\u0168\3\2\2\2\u0168b\3\2\2\2\u0169\u016b\5"
        + "m\67\2\u016a\u0169\3\2\2\2\u016b\u016c\3\2\2\2\u016c\u016a\3\2\2\2\u016c"
        + "\u016d\3\2\2\2\u016d\u016e\3\2\2\2\u016e\u0172\5G$\2\u016f\u0171\5m\67"
        + "\2\u0170\u016f\3\2\2\2\u0171\u0174\3\2\2\2\u0172\u0170\3\2\2\2\u0172\u0173"
        + "\3\2\2\2\u0173\u0194\3\2\2\2\u0174\u0172\3\2\2\2\u0175\u0177\5G$\2\u0176"
        + "\u0178\5m\67\2\u0177\u0176\3\2\2\2\u0178\u0179\3\2\2\2\u0179\u0177\3\2"
        + "\2\2\u0179\u017a\3\2\2\2\u017a\u0194\3\2\2\2\u017b\u017d\5m\67\2\u017c"
        + "\u017b\3\2\2\2\u017d\u017e\3\2\2\2\u017e\u017c\3\2\2\2\u017e\u017f\3\2"
        + "\2\2\u017f\u0187\3\2\2\2\u0180\u0184\5G$\2\u0181\u0183\5m\67\2\u0182\u0181"
        + "\3\2\2\2\u0183\u0186\3\2\2\2\u0184\u0182\3\2\2\2\u0184\u0185\3\2\2\2\u0185"
        + "\u0188\3\2\2\2\u0186\u0184\3\2\2\2\u0187\u0180\3\2\2\2\u0187\u0188\3\2"
        + "\2\2\u0188\u0189\3\2\2\2\u0189\u018a\5k\66\2\u018a\u0194\3\2\2\2\u018b"
        + "\u018d\5G$\2\u018c\u018e\5m\67\2\u018d\u018c\3\2\2\2\u018e\u018f\3\2\2"
        + "\2\u018f\u018d\3\2\2\2\u018f\u0190\3\2\2\2\u0190\u0191\3\2\2\2\u0191\u0192"
        + "\5k\66\2\u0192\u0194\3\2\2\2\u0193\u016a\3\2\2\2\u0193\u0175\3\2\2\2\u0193"
        + "\u017c\3\2\2\2\u0193\u018b\3\2\2\2\u0194d\3\2\2\2\u0195\u0198\5o8\2\u0196"
        + "\u0198\t\t\2\2\u0197\u0195\3\2\2\2\u0197\u0196\3\2\2\2\u0198\u019e\3\2"
        + "\2\2\u0199\u019d\5o8\2\u019a\u019d\5m\67\2\u019b\u019d\7a\2\2\u019c\u0199"
        + "\3\2\2\2\u019c\u019a\3\2\2\2\u019c\u019b\3\2\2\2\u019d\u01a0\3\2\2\2\u019e"
        + "\u019c\3\2\2\2\u019e\u019f\3\2\2\2\u019ff\3\2\2\2\u01a0\u019e\3\2\2\2"
        + "\u01a1\u01a7\7b\2\2\u01a2\u01a6\n\n\2\2\u01a3\u01a4\7b\2\2\u01a4\u01a6"
        + "\7b\2\2\u01a5\u01a2\3\2\2\2\u01a5\u01a3\3\2\2\2\u01a6\u01a9\3\2\2\2\u01a7"
        + "\u01a5\3\2\2\2\u01a7\u01a8\3\2\2\2\u01a8\u01aa\3\2\2\2\u01a9\u01a7\3\2"
        + "\2\2\u01aa\u01ab\7b\2\2\u01abh\3\2\2\2\u01ac\u01b2\5o8\2\u01ad\u01b1\5"
        + "o8\2\u01ae\u01b1\5m\67\2\u01af\u01b1\7a\2\2\u01b0\u01ad\3\2\2\2\u01b0"
        + "\u01ae\3\2\2\2\u01b0\u01af\3\2\2\2\u01b1\u01b4\3\2\2\2\u01b2\u01b0\3\2"
        + "\2\2\u01b2\u01b3\3\2\2\2\u01b3\u01b5\3\2\2\2\u01b4\u01b2\3\2\2\2\u01b5"
        + "\u01b6\7\u0080\2\2\u01b6j\3\2\2\2\u01b7\u01b9\t\13\2\2\u01b8\u01ba\t\f"
        + "\2\2\u01b9\u01b8\3\2\2\2\u01b9\u01ba\3\2\2\2\u01ba\u01bc\3\2\2\2\u01bb"
        + "\u01bd\5m\67\2\u01bc\u01bb\3\2\2\2\u01bd\u01be\3\2\2\2\u01be\u01bc\3\2"
        + "\2\2\u01be\u01bf\3\2\2\2\u01bfl\3\2\2\2\u01c0\u01c1\t\r\2\2\u01c1n\3\2"
        + "\2\2\u01c2\u01c3\t\16\2\2\u01c3p\3\2\2\2\u01c4\u01c5\7\61\2\2\u01c5\u01c6"
        + "\7\61\2\2\u01c6\u01ca\3\2\2\2\u01c7\u01c9\n\5\2\2\u01c8\u01c7\3\2\2\2"
        + "\u01c9\u01cc\3\2\2\2\u01ca\u01c8\3\2\2\2\u01ca\u01cb\3\2\2\2\u01cb\u01ce"
        + "\3\2\2\2\u01cc\u01ca\3\2\2\2\u01cd\u01cf\7\17\2\2\u01ce\u01cd\3\2\2\2"
        + "\u01ce\u01cf\3\2\2\2\u01cf\u01d1\3\2\2\2\u01d0\u01d2\7\f\2\2\u01d1\u01d0"
        + "\3\2\2\2\u01d1\u01d2\3\2\2\2\u01d2\u01d3\3\2\2\2\u01d3\u01d4\b9\2\2\u01d4"
        + "r\3\2\2\2\u01d5\u01d6\7\61\2\2\u01d6\u01d7\7,\2\2\u01d7\u01dc\3\2\2\2"
        + "\u01d8\u01db\5s:\2\u01d9\u01db\13\2\2\2\u01da\u01d8\3\2\2\2\u01da\u01d9"
        + "\3\2\2\2\u01db\u01de\3\2\2\2\u01dc\u01dd\3\2\2\2\u01dc\u01da\3\2\2\2\u01dd"
        + "\u01df\3\2\2\2\u01de\u01dc\3\2\2\2\u01df\u01e0\7,\2\2\u01e0\u01e1\7\61"
        + "\2\2\u01e1\u01e2\3\2\2\2\u01e2\u01e3\b:\2\2\u01e3t\3\2\2\2\u01e4\u01e6"
        + "\t\17\2\2\u01e5\u01e4\3\2\2\2\u01e6\u01e7\3\2\2\2\u01e7\u01e5\3\2\2\2"
        + "\u01e7\u01e8\3\2\2\2\u01e8\u01e9\3\2\2\2\u01e9\u01ea\b;\2\2\u01eav\3\2"
        + "\2\2(\2\u011c\u0126\u0128\u0133\u013b\u013e\u0144\u0146\u0150\u0152\u015c"
        + "\u015e\u0162\u0167\u016c\u0172\u0179\u017e\u0184\u0187\u018f\u0193\u0197"
        + "\u019c\u019e\u01a5\u01a7\u01b0\u01b2\u01b9\u01be\u01ca\u01ce\u01d1\u01da"
        + "\u01dc\u01e7\3\2\3\2";
    public static final ATN _ATN = new ATNDeserializer().deserialize(_serializedATN.toCharArray());
    static {
        _decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
        for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
            _decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
        }
    }
}
