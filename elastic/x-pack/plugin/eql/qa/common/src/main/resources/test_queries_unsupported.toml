# This file is populated with currently unsupported queries.
# Serves as a blacklist, until our implementation starts supporting a specific query
# This file is expected to become empty once the feature parity is reached with the
# official EQL implementation

# The query below is the first query from the test_queries.toml
# and is currently "emulated" as supported with the hardcoded response
# in order to allow at least one round-trip test with the test harness.
# This will be removed once the EQL implementation is wired and actually supports this query.


[[queries]]
expected_event_ids = []
query = 'process where missing_field != null'

[[queries]]
query = '''
sequence
  [process where true]        by unique_pid
  [process where opcode == 1] by unique_ppid
'''
expected_event_ids  = [48, 53,
                       53, 54,
                       54, 56,
                       97, 98]

[[queries]]
query = '''
sequence
  [process where true]        by unique_pid,  process_path
  [process where opcode == 1] by unique_ppid, parent_process_path
'''
expected_event_ids  = [48, 53,
                       53, 54,
                       54, 56,
                       97, 98]

#############################
# NOT (YET) SUPPORTED TESTS #
#############################

[[queries]]
expected_event_ids = []
query = 'process where missing_field != null'

[[queries]]
expected_event_ids  = [1, 2, 3, 4, 5]
query = 'process where bad_field == null | head 5'


[[queries]]
tags = ["comparisons", "pipes"]
query = '''
process where serial_event_id <= 8 and serial_event_id > 7
| filter serial_event_id == 8
'''
expected_event_ids  = [8]

[[queries]]
query = '''
process where true
| filter serial_event_id <= 10
| filter serial_event_id > 6
'''
expected_event_ids  = [7, 8, 9, 10]

[[queries]]
query = '''
process where true
| filter serial_event_id <= 10
| filter serial_event_id > 6
| head 2
'''
expected_event_ids  = [7, 8]

[[queries]]
query = '''
process where true
| head 1000
| filter serial_event_id <= 10
| filter serial_event_id > 6
| tail 2
'''
expected_event_ids  = [9, 10]

[[queries]]
query = 'process where (serial_event_id<9 and serial_event_id >= 7) or (opcode == pid)'
expected_event_ids  = [7, 8]

[[queries]]
case_insensitive = true
query = 'process where serial_event_id < 5 and process_name <= parent_process_name'
expected_event_ids  = [2, 3]

[[queries]]
case_sensitive = true
query = 'process where serial_event_id < 5 and process_name <= parent_process_name'
expected_event_ids  = [2]



[[queries]]
case_insensitive = true
query = 'process where process_name >= "system idle process" and process_name <= "System Idle Process"'
expected_event_ids  = [1]

[[queries]]
case_insensitive = true
query = 'process where process_name >= "SYSTE" and process_name < "systex"'
expected_event_ids  = [1, 2]

[[queries]]
case_insensitive = true
query = 'process where process_name >= "sysT" and process_name < "SYsTeZZZ"'
expected_event_ids  = [1, 2]

[[queries]]
case_insensitive = true
query = 'process where process_name >= "SYSTE" and process_name <= "systex"'
expected_event_ids  = [1, 2]


[[queries]]
case_insensitive = true
query = '''
process where process_name == "VMACTHLP.exe" and unique_pid == 12
| filter true
'''
expected_event_ids  = [12]

[[queries]]
query = '''
process where process_name in ("python.exe", "smss.exe", "explorer.exe")
| unique process_name
'''
expected_event_ids  = [3, 34, 48]

[[queries]]
case_insensitive = true
query = '''
process where process_name in ("python.exe", "SMSS.exe", "explorer.exe")
| unique process_name
'''
expected_event_ids  = [3, 34, 48]

[[queries]]
case_insensitive = true
query = '''
process where process_name in ("python.exe", "smss.exe", "Explorer.exe")
| unique length(process_name)
'''
expected_event_ids  = [3, 34, 48]

[[queries]]
query = '''
process where process_name in ("python.exe", "smss.exe", "explorer.exe")
| unique length(process_name) == length("python.exe")
'''
expected_event_ids  = [3, 48]

[[queries]]
case_insensitive = true
query = '''
process where process_name in ("Python.exe", "smss.exe", "explorer.exe")
| unique process_name != "python.exe"
'''
expected_event_ids  = [3, 48]

[[queries]]
query = '''
process where process_name in ("python.exe", "smss.exe", "explorer.exe")
| unique process_name
| head 2
| tail 1
'''
expected_event_ids  = [34]

[[queries]]
query = '''
process where process_name in ("python.exe", "smss.exe", "explorer.exe")
| unique process_name
| tail 2
| head 1
'''
expected_event_ids  = [34]

[[queries]]
query = '''
process where process_name in ("python.exe", "smss.exe")
| unique process_name parent_process_name
'''
expected_event_ids  = [3, 48, 50, 54, 78]

[[queries]]
query = '''
process where process_name in ("python.exe", "smss.exe")
| unique process_name, parent_process_name
'''
expected_event_ids  = [3, 48, 50, 54, 78]

[[queries]]
query = '''
process where process_name in ("python.exe", "smss.exe")
| head 5
| unique process_name parent_process_name
'''
expected_event_ids  = [3, 48, 50, 54]

[[queries]]
case_insensitive = true
expected_event_ids  = [57]
query = '''
registry where length(bytes_written_string_list) == 2 and bytes_written_string_list[1] == "EN"
'''

[[queries]]
query = '''
file where file_name == "csrss.exe" and opcode=0
  and descendant of [process where opcode in (1,3) and process_name="cmd.exe"]
'''
expected_event_ids  = [72]

[[queries]]
query = '''
process where opcode=1 and process_name == "csrss.exe"
  and descendant of [file where file_name == "csrss.exe" and opcode=0]
'''
expected_event_ids  = [73]

[[queries]]
query = '''
process where opcode=1 and process_name == "smss.exe"
  and descendant of [
    file where file_name == "csrss.exe" and opcode=0
      and descendant of [
        process where opcode in(1,3) and process_name="cmd.exe"
      ]
  ]
'''
expected_event_ids  = [78]


[[queries]]
query = '''
file where true
| tail 3
'''
expected_event_ids  = [92, 95, 96]

[[queries]]
query = '''
process where opcode in (1,3) and process_name in (parent_process_name, "System")
'''
expected_event_ids  = [2, 50, 51]

[[queries]]
case_insensitive = true
query = '''
process where opcode in (1,3) and process_name in (parent_process_name, "SYSTEM")
'''
expected_event_ids  = [2, 50, 51]

[[queries]]
case_insensitive = true
expected_event_ids  = [92, 95, 96, 91]
query = '''
file where true
| tail 4
| sort file_path
'''

[[queries]]
expected_event_ids  = [2, 1, 4, 3, 5]
query = '''
process where true
| head 5
| sort md5 event_subtype_full process_name
'''

[[queries]]
expected_event_ids  = [2, 1, 4, 3, 5]
query = '''
process where true
| head 5
| sort md5 event_subtype_full null_field process_name
'''

[[queries]]
expected_event_ids  = [2, 1, 4, 3, 5]
query = '''
process where true
| head 5
| sort md5, event_subtype_full, null_field, process_name
'''

[[queries]]
expected_event_ids  = [2, 1]
query = '''
process where true
| head 5
| sort md5 event_subtype_full null_field process_name
| head 2
'''

[[queries]]
expected_event_ids  = [1, 2, 3, 4, 5]
query = '''
process where true
| head 5
| sort md5 event_subtype_full null_field process_name
| sort serial_event_id
'''


[[queries]]
query = '''
sequence
  [process where opcode == 1] by unique_pid
  [file where opcode == 0]    by unique_pid
  [file where opcode == 0]    by unique_pid
  [file where opcode == 0]    by unique_pid
until
  [file where opcode == 2]    by unique_pid
'''
expected_event_ids  = []

[[queries]]
query = '''
sequence
  [process where opcode == 1] by unique_pid
  [file where opcode == 0]    by unique_pid
  [file where opcode == 0]    by unique_pid
  [file where opcode == 0]    by unique_pid
until
  [file where opcode == 200]  by unique_pid
'''
expected_event_ids  = [54, 55, 61, 67]

[[queries]]
query = '''
sequence
  [file where opcode=0] by unique_pid
  [file where opcode=0] by unique_pid
| filter events[1].serial_event_id == 92
'''
expected_event_ids  = [87, 92]

[[queries]]
query = '''
sequence
  [file where opcode=0 and file_name="*.exe"] by unique_pid
  [file where opcode=0 and file_name="*.exe"] by unique_pid
until [process where opcode=1] by unique_ppid
| head 1
'''
expected_event_ids = []

[[queries]]
query = '''
join
  [file where opcode=0 and file_name="*.exe"] by unique_pid
  [file where opcode=2 and file_name="*.exe"] by unique_pid
until [process where opcode=1] by unique_ppid
| head 1
'''
expected_event_ids  = [61, 59]

[[queries]]
query = '''
join by user_name
  [process where opcode in (1,3) and process_name="smss.exe"]
  [process where opcode in (1,3) and process_name == "python.exe"]
'''
expected_event_ids  = [78, 48]

[[queries]]
query = '''
join by unique_pid
  [process where opcode=1]
  [file where opcode=0 and file_name="svchost.exe"]
  [file where opcode == 0 and file_name == "lsass.exe"]
'''
expected_event_ids  = [54, 55, 61]

[[queries]]
query = '''
join by string(unique_pid)
  [process where opcode=1]
  [file where opcode=0 and file_name="svchost.exe"]
  [file where opcode == 0 and file_name == "lsass.exe"]
'''
expected_event_ids  = [54, 55, 61]

[[queries]]
query = '''
join by unique_pid
  [process where opcode=1]
  [file where opcode=0 and file_name="svchost.exe"]
  [file where opcode == 0 and file_name == "lsass.exe"]
until [file where opcode == 2]
'''
expected_event_ids = []

[[queries]]
query = '''
join by string(unique_pid), unique_pid, unique_pid * 2
  [process where opcode=1]
  [file where opcode=0 and file_name="svchost.exe"]
  [file where opcode == 0 and file_name == "lsass.exe"]
until [file where opcode == 2]
'''
expected_event_ids = []

[[queries]]
query = '''
join
  [file where opcode=0 and file_name="svchost.exe"] by unique_pid
  [process where opcode == 1] by unique_ppid
'''
expected_event_ids  = [55, 56]

[[queries]]
query = '''
join by unique_pid
  [process where opcode in (1,3) and process_name="python.exe"]
  [file where file_name == "*.exe"]
'''
expected_event_ids  = [54, 55]

[[queries]]
query = '''
join by user_name
  [process where opcode in (1,3) and process_name="python.exe"]
  [process where opcode in (1,3) and process_name == "smss.exe"]
'''
expected_event_ids  = [48, 78]

[[queries]]
query = '''
join
  [process where opcode in (1,3) and process_name="python.exe"]
  [process where opcode in (1,3) and process_name == "smss.exe"]
'''
expected_event_ids  = [48, 3, 50, 78]

[[queries]]
expected_event_ids = []
query = '''
process where fake_field == "*"
'''

[[queries]]
# no longer valid, since this returns `null`, and `not null` is still null
# expected_event_ids  = [1, 2, 3, 4]
expected_event_ids = []
query = '''
process where fake_field != "*"
| head 4
'''

[[queries]]
# no longer valid, since this returns `null`, and `not null` is still null
# expected_event_ids  = [1, 2, 3, 4]
expected_event_ids = []
query = '''
process where not (fake_field == "*")
| head 4
'''

[[queries]]
expected_event_ids = []
query = '''
registry where invalid_field_name != null
'''

[[queries]]
expected_event_ids = []
query = '''
registry where length(bad_field) > 0
'''

[[queries]]
expected_event_ids  = [1, 2, 3, 4, 5]
query = 'process where bad_field == null | head 5'

[[queries]]
note = "check that comparisons against null values return false"
expected_event_ids  = [58, 64, 69, 74, 80, 85, 90, 93, 94, 75303]
query = 'process where exit_code >= 0'

[[queries]]
note = "check that comparisons against null values return false"
expected_event_ids  = [58, 64, 69, 74, 80, 85, 90, 93, 94, 75303]
query = 'process where 0 <= exit_code'

[[queries]]
note = "check that comparisons against null values return false"
expected_event_ids  = [58, 64, 69, 74, 80, 85, 90, 93, 94, 75303]
query = 'process where exit_code <= 0'

[[queries]]
note = "check that comparisons against null values return false"
expected_event_ids  = [58, 64, 69, 74, 80, 85, 90, 93, 94, 75303]
query = 'process where exit_code < 1'

[[queries]]
note = "check that comparisons against null values return false"
expected_event_ids  = [58, 64, 69, 74, 80, 85, 90, 93, 94, 75303]
query = 'process where exit_code > -1'

[[queries]]
note = "check that comparisons against null values return false"
expected_event_ids  = [58, 64, 69, 74, 80, 85, 90, 93, 94, 75303]
query = 'process where -1 < exit_code'

[[queries]]
note = "check that comparisons against null values return false"
expected_event_ids = []
query = '''
process where not (exit_code > -1)
  and serial_event_id in (58, 64, 69, 74, 80, 85, 90, 93, 94)
| head 10
'''

[[queries]]
note = "check that comparisons against null values return false"
expected_event_ids  = [1, 2, 3, 4, 5, 6, 7]
query = 'process where not (exit_code > -1) | head 7'

[[queries]]
note = "check that comparisons against null values return false"
expected_event_ids  = [1, 2, 3, 4, 5, 6, 7]
query = 'process where not (-1 < exit_code) | head 7'

[[queries]]
expected_event_ids  = [1, 55, 57, 63, 75304]
query = '''
any where true
| unique event_type_full
'''

[[queries]]
query = '''
process where opcode=1 and process_name in ("services.exe", "smss.exe", "lsass.exe")
  and descendant of [process where process_name == "cmd.exe" ]
'''
expected_event_ids  = [62, 68, 78]

[[queries]]
query = '''
process where process_name in ("services.exe", "smss.exe", "lsass.exe")
  and descendant of [process where process_name == "cmd.exe" ]
  '''
expected_event_ids  = [62, 64, 68, 69, 78, 80]

[[queries]]
query = '''
process where opcode=2 and process_name in ("services.exe", "smss.exe", "lsass.exe")
  and descendant of [process where process_name == "cmd.exe" ]
'''
expected_event_ids  = [64, 69, 80]

[[queries]]
query = '''
process where process_name="svchost.exe"
  and child of [file where file_name="svchost.exe" and opcode=0]
'''
expected_event_ids  = [56, 58]

[[queries]]
query = '''
process where process_name="svchost.exe"
  and not child of [file where file_name="svchost.exe" and opcode=0]
| head 3
'''
expected_event_ids  = [11, 13, 15]

[[queries]]
query = '''
process where process_name="lsass.exe"
  and child of [
    process where process_name="python.exe"
    and child of [process where process_name="cmd.exe"]
  ]
'''
expected_event_ids  = [62, 64]

[[queries]]
query = '''
file where child of [
  process where child of [
      process where child of [process where process_name="*wsmprovhost.exe"]
  ]
]
| tail 1
'''
expected_event_ids  = [91]

[[queries]]
query = '''
file where process_name = "python.exe"
| unique unique_pid
'''
expected_event_ids  = [55, 95]

[[queries]]
query = '''
file where event of [process where process_name = "python.exe" ]
| unique unique_pid
'''
expected_event_ids  = [55, 95]

[[queries]]
query = '''
process where process_name = "python.exe"
'''
expected_event_ids  = [48, 50, 51, 54, 93]

[[queries]]
query = 'process where event of [process where process_name = "python.exe" ]'
expected_event_ids  = [48, 50, 51, 54, 93]

[[queries]]
query = '''
sequence by user_name
  [file where opcode=0] by pid,file_path
  [file where opcode=2] by pid,file_path
until
  [process where opcode == 2] by ppid,process_path
'''
expected_event_ids = []

[[queries]]
query = '''
sequence by user_name
  [file where opcode=0] by pid,file_path
  [file where opcode=2] by pid,file_path
until
  [process where opcode == 5] by ppid,process_path
| head 2
'''
expected_event_ids  = [55, 59, 61, 65]

[[queries]]
query = '''
join by user_name
  [file where true] by pid,file_path
  [process where true] by ppid,process_path
| head 2
'''
expected_event_ids  = [55, 56, 59, 58]

[[queries]]
query = '''
sequence
  [process where true] by unique_pid
  [file where true] fork=true by unique_pid
  [process where true] by unique_ppid
| head 4
'''
expected_event_ids  = [54, 55, 56, 54, 61, 62, 54, 67, 68, 54, 72, 73]

[[queries]]
expected_event_ids  = [11, 60, 63]
query = '''
any where process_name == "svchost.exe"
| unique_count event_type_full process_name
'''

[[queries]]
expected_event_ids  = [63, 60, 11]
query = '''
any where process_name == "svchost.exe"
| sort event_type_full serial_event_id
| unique_count event_type_full process_name
'''

[[queries]]
expected_event_ids  = [60]
query = '''
any where process_name == "svchost.exe"
| unique_count event_type_full opcode
| filter count == 7
'''

[[queries]]
expected_event_ids  = [11]
query = '''
any where process_name == "svchost.exe"
| unique_count event_type_full opcode
| filter percent >= .5
'''


[[queries]]
case_insensitive = true
expected_event_ids  = [57]
query = '''
registry where arrayContains(bytes_written_string_list, 'En-uS')
'''

[[queries]]
case_insensitive = true
expected_event_ids  = [57]
query = '''
registry where arrayContains(bytes_written_string_list, 'En')
'''

[[queries]]
case_insensitive = true
expected_event_ids  = [57]
query = '''
registry where length(bytes_written_string_list) > 0 and bytes_written_string_list[0] == 'EN-us'
'''

[[queries]]
case_insensitive = true
expected_event_ids  = [57]
query = '''
registry where bytes_written_string_list[0] == 'EN-us'
'''

[[queries]]
case_insensitive = true
expected_event_ids  = [57]
query = '''
registry where bytes_written_string_list[1] == 'EN'
'''


[[queries]]
case_insensitive = true
expected_event_ids  = [57]
query = '''
registry where arrayContains(bytes_written_string_list, 'en-US')
'''

[[queries]]
case_insensitive = true
expected_event_ids  = [57]
query = '''
registry where arrayContains(bytes_written_string_list, 'en')
'''

[[queries]]
case_insensitive = true
expected_event_ids  = [57]
query = '''
registry where length(bytes_written_string_list) > 0 and bytes_written_string_list[0] == 'en-US'
'''

[[queries]]
expected_event_ids  = [57]
query = '''
registry where bytes_written_string_list[0] == 'en-US'
'''

[[queries]]
expected_event_ids  = [57]
query = '''
registry where bytes_written_string_list[1] == 'en'
'''

# character classes aren't supported. custom tests made in test_queries_supported.toml
[[queries]]
query = '''
process where matchLite(command_line, ?'.*?net1\s+localgroup\s+.*?')
'''
expected_event_ids  = [98]

[[queries]]
query = '''
process where matchLite(command_line, ?'.*?net1\s+\w+\s+.*?')
'''
expected_event_ids  = [98]

[[queries]]
query = '''
process where matchLite(command_line, ?'.*?net1\s+\w{4,15}\s+.*?')
'''
expected_event_ids  = [98]

[[queries]]
expected_event_ids  = [98]
query = '''
process where match(command_line, ?'.*?net1\s+\w{4,15}\s+.*?')
'''

[[queries]]
query = '''
process where matchLite(command_line, ?'.*?net1\s+[localgrup]{4,15}\s+.*?')
'''
expected_event_ids  = [98]

[[queries]]
case_insensitive = true
query = '''
process where 'net.EXE' == original_file_name
| filter process_name="net*.exe"
'''
expected_event_ids  = [97]
note = "check that case insensitive comparisons are performed even for lhs strings."

[[queries]]
case_insensitive = true
query = '''
process where process_name == original_file_name and process_name='net*.exe'
'''
expected_event_ids  = [97, 98]
note = "check that case insensitive comparisons are performed for fields."

[[queries]]
case_insensitive = true
query = '''
process where original_file_name == process_name and length(original_file_name) > 0
'''
expected_event_ids  = [97, 98, 75273, 75303]
description = "check that case insensitive comparisons are performed for fields."

[[queries]]
case_insensitive = true
query = '''
file where substring(file_name, 1, 3) == 'xp'
'''
expected_event_ids  = [88, 91, 92]
description = "check substring ranges"

[[queries]]
query = '''
process where modulo(11, add(serial_event_id, 1)) == serial_event_id
'''
expected_event_ids  = [1, 2, 3, 5, 11]
description = "test built-in math functions"

[[queries]]
case_insensitive = true
query = '''
process where concat(serial_event_id, ':', process_name, opcode) == '5:winINIT.exe3'
'''
expected_event_ids  = [5]
description = "test string concatenation"

[[queries]]
case_insensitive = true
query = '''
process where process_name != original_file_name and length(original_file_name) > 0
'''
expected_event_ids = []
description = "check that case insensitive comparisons are performed for fields."


[[queries]]
expected_event_ids  = [57]
description = "test arraySearch functionality for lists of strings, and lists of objects"
query = '''
registry where arraySearch(bytes_written_string_list, a, a == 'en-US')
'''

[[queries]]
case_sensitive = true
expected_event_ids  = []
description = "test arraySearch functionality for lists of strings, and lists of objects"
query = '''
registry where arraySearch(bytes_written_string_list, a, a == 'EN-US')
'''

[[queries]]
case_insensitive = true
expected_event_ids  = [57]
description = "test arraySearch functionality for lists of strings, and lists of objects"
query = '''
registry where arraySearch(bytes_written_string_list, a, a == 'en-us')
'''

[[queries]]
case_insensitive = true
expected_event_ids  = [57]
description = "test arraySearch functionality for lists of strings, and lists of objects"
query = '''
registry where arraySearch(bytes_written_string_list, a, endsWith(a, '-us'))
'''

[[queries]]
expected_event_ids  = [75305]
description = "test arraySearch - true"
query = '''
network where mysterious_field
  and arraySearch(mysterious_field.subarray, s, true)
'''

[[queries]]
expected_event_ids = []
description = "test arraySearch - false"
query = '''
network where mysterious_field and arraySearch(mysterious_field.subarray, s, false)
'''

[[queries]]
expected_event_ids  = [75305]
description = "test arraySearch - conditional"
query = '''
network where mysterious_field and arraySearch(mysterious_field.subarray, s, s.a == 's0-*')
'''

[[queries]]
expected_event_ids  = [75305]
description = "test arraySearch - conditional"
query = '''
network where mysterious_field and arraySearch(mysterious_field.subarray, s, s.a != 's0-*')
'''

[[queries]]
expected_event_ids  = [75305]
description = "test arraySearch - nested"
query = '''
network where mysterious_field
  and arraySearch(mysterious_field.subarray, sub1,
    arraySearch(sub1.c, nested, nested.x.y == '*'))
'''

[[queries]]
expected_event_ids  = [75305]
description = "test arraySearch - nested with cross-check pass"
query = '''
network where mysterious_field
  and arraySearch(mysterious_field.subarray, sub1,
    sub1.a == 's0-a' and arraySearch(sub1.c, nested, nested.z == 's0-c1-x-z'))
'''

[[queries]]
expected_event_ids  = [75305]
description = "test arraySearch - nested with cross-check pass"
query = '''
network where mysterious_field
  and arraySearch(mysterious_field.subarray, sub1,
    sub1.a == 's0-a' and arraySearch(sub1.c, nested, nested.z == sub1.cross_match))
'''

[[queries]]
expected_event_ids  = [75305]
description = "test arraySearch - nested with cross-check pass"
query = '''
network where mysterious_field
  and arraySearch(mysterious_field.subarray, sub1,
    arraySearch(sub1.c, nested, nested.x.y == mysterious_field.outer_cross_match))
'''

[[queries]]
expected_event_ids = []
description = "test 'safe()' wrapper for exception handling"
query = '''
network where safe(divide(process_name, process_name))
'''

[[queries]]
case_insensitive = true
query = '''
file where serial_event_id == 82 and (true == (process_name in ('svchost.EXE', 'bad.exe', 'bad2.exe')))
'''
expected_event_ids  = [82]
description = "nested set comparisons"

[[queries]]
case_insensitive = true
expected_event_ids  = [57]
query = '''
registry where arrayCount(bytes_written_string_list, s, s == '*-us') == 1
'''

[[queries]]
case_insensitive = true
expected_event_ids  = [57]
query = '''
registry where arrayCount(bytes_written_string_list, s, s == '*en*') == 2
'''

[[queries]]
case_insensitive = true
expected_event_ids  = [57]
query = '''
registry where arrayContains(bytes_written_string_list, "missing", "en-US")
'''


[[queries]]
note = "Sequence: non-field based join."
query = '''
sequence
  [process where serial_event_id<3] by unique_pid * 2
  [process where true] by unique_ppid * 2
'''
expected_event_ids  = [1, 2,
                       2, 3]


[[queries]]
note = "Sequence: multiple non-field based joins."
query = '''
sequence
  [process where serial_event_id<3] by unique_pid * 2, length(unique_pid), string(unique_pid)
  [process where true] by unique_ppid * 2, length(unique_ppid), string(unique_ppid)
'''
expected_event_ids  = [1, 2,
                       2, 3]

# TODO: update toggles for this function
[[queries]]
case_sensitive = true
expected_event_ids = [1, 2, 42]
query = '''
process where between(process_name, "s", "e", false) == "t"
'''

# TODO: add toggles to this function so it's not always insensitive
[[queries]]
case_sensitive = true
expected_event_ids = [7, 14, 29, 44]
query = '''
process where length(between(process_name, 'g', 'e')) > 0
'''

# TODO: add toggles to this function so it's not always insensitive
#[[queries]]
#case_insensitive = true
#expected_event_ids = [7, 14, 22, 29, 44]
#query = '''
#process where length(between(process_name, 'g', 'e')) > 0
#'''

