# This file is populated with additional EQL queries that were not present in the original EQL python implementation
# test_queries.toml file in order to keep the original unchanges and easier to sync with the EQL reference implementation tests.


[[queries]]
expected_event_ids = [95]
query = '''
file where between(file_path, "dev", ".json", false) == "\\TestLogs\\something"
'''

[[queries]]
expected_event_ids = [95]
query = '''
file where between(file_path, "dev", ".json", true) == "\\TestLogs\\something"
'''

[[queries]]
query = 'process where string(serial_event_id) = "1"'
expected_event_ids  = [1]

[[queries]]
# Basic test for modulo function
query = '''
process where modulo(11, 10) == serial_event_id'''
expected_event_ids  = [1]
description = "test built-in modulo math functions"

[[queries]]
# This query give a different result with ES EQL implementation because it doesn't convert to float data types for division
expected_event_ids = [82, 83]
query = "file where serial_event_id / 2 == 41"

# Additional EQL queries with arithmetic operations that were not part of the original EQL implementation
[[queries]]
expected_event_ids = [82]
query = "file where 83 - serial_event_id == 1"

[[queries]]
expected_event_ids = [82]
query = "file where 1 + serial_event_id == 83"

[[queries]]
expected_event_ids = [82]
query = "file where -serial_event_id + 100 == 18"

[[queries]]
expected_event_ids = [82]
query = "file where 2 * serial_event_id == 164"

[[queries]]
expected_event_ids = [66]
query = "file where 66.0 / serial_event_id == 1"

[[queries]]
expected_event_ids = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 46]
query = "process where serial_event_id + ((1 + 3) * 2 / (3 - 1)) * 2 == 54 or 70 + serial_event_id < 100"
