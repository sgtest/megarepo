import org.elasticsearch.gradle.info.BuildParams
import org.elasticsearch.gradle.test.RestIntegTestTask

apply plugin: 'elasticsearch.testclusters'
apply plugin: 'elasticsearch.standalone-test'

dependencies {
  testImplementation(testArtifact(project(xpackModule('core'))))
  testImplementation project(xpackModule('ccr'))
  testImplementation project(':x-pack:plugin:ccr:qa')
}


testClusters {
  "leader-cluster" {
    testDistribution = 'DEFAULT'
    setting 'xpack.license.self_generated.type', 'trial'
    setting 'xpack.security.enabled', 'true'
    user username: 'admin', password: 'admin-password', role: 'superuser'
  }

  "follow-cluster" {
    testDistribution = 'DEFAULT'
    setting 'xpack.monitoring.collection.enabled', 'true'
    setting 'xpack.license.self_generated.type', 'trial'
    setting 'xpack.security.enabled', 'true'
    user username: 'admin', password: 'admin-password', role: 'superuser'
    setting 'cluster.remote.leader_cluster.seeds', { "\"${testClusters."leader-cluster".getAllTransportPortURI().join(",")}\""
    }
  }
}

tasks.register("leader-cluster", RestIntegTestTask) {
  mustRunAfter("precommit")
  systemProperty 'tests.target_cluster', 'leader'
}

File policyFile = file("${buildDir}/tmp/java.policy")
tasks.register("writeJavaPolicy") {
  doLast {
    if (policyFile.parentFile.exists() == false && policyFile.parentFile.mkdirs() == false) {
      throw new GradleException("failed to create temporary directory [${tmp}]")
    }
    policyFile.write(
      [
        "grant {",
        "  permission java.io.FilePermission \"${-> testClusters."follow-cluster".getFirstNode().getServerLog()}\", \"read\";",
        "};"
      ].join("\n")
    )
  }
}

tasks.register("follow-cluster", RestIntegTestTask) {
  dependsOn 'writeJavaPolicy', "leader-cluster"
    useCluster testClusters."leader-cluster"
    systemProperty 'java.security.policy', "file://${policyFile}"
    systemProperty 'tests.target_cluster', 'follow'
    nonInputProperties.systemProperty 'tests.leader_host', "${-> testClusters."leader-cluster".getAllHttpSocketURI().get(0)}"
    nonInputProperties.systemProperty 'log', "${-> testClusters."follow-cluster".getFirstNode().getServerLog()}"
}

tasks.named("check").configure { dependsOn "follow-cluster" }
// no unit tests for multi-cluster-search, only the rest integration test
tasks.named("test").configure { enabled = false }

// We can't run in FIPS mode with a basic license
tasks.withType(Test).configureEach {
  onlyIf { BuildParams.inFipsJvm == false}
}
