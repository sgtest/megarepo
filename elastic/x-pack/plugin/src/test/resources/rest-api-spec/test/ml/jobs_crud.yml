---
"Test get all jobs and stats given no job exists":

  - do:
      xpack.ml.get_jobs:
        job_id: "_all"
  - match: { count: 0 }
  - match: { jobs: [] }

  - do:
      xpack.ml.get_job_stats:
        job_id: "_all"
  - match: { count: 0 }
  - match: { jobs: [] }

---
"Test get jobs with expression that does not match and allow_no_jobs":

  - do:
      xpack.ml.get_jobs:
        job_id: "missing-*"
        allow_no_jobs: true
  - match: { count: 0 }
  - match: { jobs: [] }

---
"Test get jobs with expression that does not match and not allow_no_jobs":

  - do:
      catch: missing
      xpack.ml.get_jobs:
        job_id: "missing-*"
        allow_no_jobs: false

---
"Test job crud apis":

  - do:
      xpack.ml.put_job:
        job_id: job-crud-test-apis
        body:  >
          {
            "description":"Analysis of response time by airline",
            "analysis_config" : {
                "bucket_span": "1h",
                "detectors" :[{"function":"metric","field_name":"responsetime","by_field_name":"airline"}]
            },
            "data_description" : {
                "field_delimiter":",",
                "time_field":"time",
                "time_format":"yyyy-MM-dd HH:mm:ssX"
            }
          }
  - match: { job_id: "job-crud-test-apis" }
  - match: { analysis_limits.model_memory_limit: "1024mb" }
  - match: { analysis_limits.categorization_examples_limit: 4 }

  - do:
      xpack.ml.get_jobs:
        job_id: "job-crud-test-apis"
  - match: { count: 1 }
  - match: { jobs.0.job_id: "job-crud-test-apis" }
  - match: { jobs.0.analysis_limits.model_memory_limit: "1024mb" }

  - do:
      indices.get_alias:
        name: ".ml-anomalies-job-crud-test-apis"
  - match: { \.ml-anomalies-shared.aliases.\.ml-anomalies-job-crud-test-apis.filter.term.job_id.value: job-crud-test-apis }

  - do:
      indices.get_alias:
        name: ".ml-anomalies-.write-job-crud-test-apis"
  - match: { \.ml-anomalies-shared.aliases.\.ml-anomalies-\.write-job-crud-test-apis: {} }

  - do:
      xpack.ml.delete_job:
        job_id: "job-crud-test-apis"
  - match: { acknowledged: true }

  - do:
      indices.exists:
        index: ".ml-anomalies-job-crud-test-apis"
  - is_false: ''

  - do:
      indices.exists_alias:
        name: ".ml-anomalies-job-crud-test-apis"
  - is_false: ''

  - do:
      indices.exists_alias:
        name: ".ml-anomalies-.write-job-crud-test-apis"
  - is_false: ''

---
"Test put job with model_memory_limit as number":

  - do:
      xpack.ml.put_job:
        job_id: job-model-memory-limit-as-number
        body:  >
          {
            "analysis_config" : {
                "detectors" :[{"function":"count"}]
            },
            "data_description" : {
            },
            "analysis_limits": {
                "model_memory_limit": 2048
            }
          }
  - match: { job_id: "job-model-memory-limit-as-number" }
  - match: { analysis_limits.model_memory_limit: "2048mb" }

---
"Test put job with model_memory_limit as string":

  - do:
      xpack.ml.put_job:
        job_id: job-model-memory-limit-as-string
        body:  >
          {
            "analysis_config" : {
                "detectors" :[{"function":"count"}]
            },
            "data_description" : {
            },
            "analysis_limits": {
                "model_memory_limit": "3g"
            }
          }
  - match: { job_id: "job-model-memory-limit-as-string" }
  - match: { analysis_limits.model_memory_limit: "3072mb" }

---
"Test get job API with non existing job id":
  - do:
      catch: missing
      xpack.ml.get_jobs:
        job_id: "non-existing"

---
"Test put job with inconsistent body/param ids":
  - do:
      catch: /illegal_argument_exception/
      xpack.ml.put_job:
        job_id: an_id
        body:  >
          {
            "job_id":"a_different_id",
            "description":"Analysis of response time by airline",
            "analysis_config" : {
                "bucket_span": "1h",
                "detectors" :[{"function":"metric","field_name":"responsetime","by_field_name":"airline"}]
            },
            "data_description" : {
                "field_delimiter":",",
                "time_field":"time",
                "time_format":"yyyy-MM-dd HH:mm:ssX"
            }
          }

  - do:
      catch: /Inconsistent job_id; 'a_different_id' specified in the body differs from 'an_id' specified as a URL argument/
      xpack.ml.put_job:
        job_id: an_id
        body:  >
          {
            "job_id":"a_different_id",
            "description":"Analysis of response time by airline",
            "analysis_config" : {
                "bucket_span": "3600s",
                "detectors" :[{"function":"metric","field_name":"responsetime","by_field_name":"airline"}]
            },
            "data_description" : {
                "field_delimiter":",",
                "time_field":"time",
                "time_format":"yyyy-MM-dd HH:mm:ssX"
            }
          }

---
"Test put job with id that is already taken":
  - do:
      xpack.ml.put_job:
        job_id: jobs-crud-id-already-taken
        body:  >
          {
            "job_id":"jobs-crud-id-already-taken",
            "description":"Analysis of response time by airline",
            "analysis_config" : {
                "bucket_span": "3600000ms",
                "detectors" :[{"function":"metric","field_name":"responsetime","by_field_name":"airline"}]
            },
            "data_description" : {
                "field_delimiter":",",
                "time_field":"time",
                "time_format":"yyyy-MM-dd HH:mm:ssX"
            }
          }
  - match: { job_id: "jobs-crud-id-already-taken" }

  - do:
      catch: /resource_already_exists_exception/
      xpack.ml.put_job:
        job_id: jobs-crud-id-already-taken
        body:  >
          {
            "job_id":"jobs-crud-id-already-taken",
            "description":"Analysis of response time by airline",
            "analysis_config" : {
                "bucket_span": "1h",
                "detectors" :[{"function":"metric","field_name":"responsetime","by_field_name":"airline"}]
            },
            "data_description" : {
                "field_delimiter":",",
                "time_field":"time",
                "time_format":"yyyy-MM-dd HH:mm:ssX"
            }
          }
  - do:
      catch: /The job cannot be created with the Id 'jobs-crud-id-already-taken'. The Id is already used./
      xpack.ml.put_job:
        job_id: jobs-crud-id-already-taken
        body:  >
          {
            "job_id":"jobs-crud-id-already-taken",
            "description":"Analysis of response time by airline",
            "analysis_config" : {
                "bucket_span": "1h",
                "detectors" :[{"function":"metric","field_name":"responsetime","by_field_name":"airline"}]
            },
            "data_description" : {
                "field_delimiter":",",
                "time_field":"time",
                "time_format":"yyyy-MM-dd HH:mm:ssX"
            }
          }
  - do:
      catch: param
      xpack.ml.put_job:
        job_id: jobs-crud-id-already-taken
        body:  >
          {
            "job_id":"jobs-crud-id-already-taken",
            "description":"Analysis of response time by airline",
            "analysis_config" : {
                "bucket_span": "1h",
                "detectors" :[{"function":"metric","field_name":"responsetime","by_field_name":"airline"}]
            },
            "data_description" : {
                "field_delimiter":",",
                "time_field":"time",
                "time_format":"yyyy-MM-dd HH:mm:ssX"
            }
          }

---
"Test update job":
  - do:
      xpack.ml.put_job:
        job_id: jobs-crud-update-job
        body:  >
          {
            "description":"Pre update description",
            "analysis_config" : {
                "detectors" :[{"function":"mean","field_name":"responsetime","by_field_name":"airline"},
                    {"function":"count","by_field_name":"mlcategory"}],
                "categorization_field_name": "some_category",
                "categorization_filters" : ["cat1.*", "cat2.*"]
            },
            "data_description" : {
              "field_delimiter":","
            },
            "model_plot_config": {
              "enabled": true,
              "terms": "foo,bar"
            },
            "analysis_limits": {
              "model_memory_limit": "10mb"
            },
            "renormalization_window_days": 1,
            "background_persist_interval": "2h",
            "model_snapshot_retention_days": 3,
            "results_retention_days": 4,
            "custom_settings": {
              "setting1": "custom1",
              "setting2": "custom2"
            }
          }
  - match: { job_id: "jobs-crud-update-job" }

  - do:
      xpack.ml.open_job:
        job_id: jobs-crud-update-job

  - do:
      xpack.ml.update_job:
        job_id: jobs-crud-update-job
        body:  >
          {
            "groups": ["group-1", "group-2"],
            "description":"Post update description",
            "detectors": [{"detector_index": 0, "rules": {"target_field_name": "airline",
                                      "conditions": [ { "type": "numerical_actual",
                                                        "condition": {"operator": "gt", "value": "10" } } ] } },
                          {"detector_index": 1, "description": "updated description"}],
            "model_plot_config": {
              "enabled": false,
              "terms": "foobar"
            },
            "renormalization_window_days": 10,
            "background_persist_interval": "3h",
            "model_snapshot_retention_days": 30,
            "results_retention_days": 40,
            "categorization_filters" : ["cat3.*"],
            "custom_settings": {
              "setting3": "custom3"
            }
          }
  - match: { job_id: "jobs-crud-update-job" }
  - match: { groups: ["group-1", "group-2"] }
  - match: { description: "Post update description" }
  - match: { model_plot_config.enabled: false }
  - match: { model_plot_config.terms: "foobar" }
  - match: { analysis_config.categorization_filters: ["cat3.*"] }
  - match: { analysis_config.detectors.0.rules.0.target_field_name: "airline" }
  - match: { analysis_config.detectors.0.detector_index: 0 }
  - match: { analysis_config.detectors.1.detector_description: "updated description" }
  - match: { analysis_config.detectors.1.detector_index: 1 }
  - match: { renormalization_window_days: 10 }
  - match: { background_persist_interval: "3h" }
  - match: { model_snapshot_retention_days: 30 }
  - match: { results_retention_days: 40 }

  - do:
      catch: "/Cannot update analysis_limits while the job is open/"
      xpack.ml.update_job:
        job_id: jobs-crud-update-job
        body:  >
          {
            "analysis_limits": {
              "model_memory_limit": "20mb"
            }
          }

  - do:
      xpack.ml.close_job:
        job_id: jobs-crud-update-job
  - match: { closed: true }

  - do:
      xpack.ml.update_job:
        job_id: jobs-crud-update-job
        body:  >
          {
            "analysis_limits": {
              "model_memory_limit": "20mb"
            }
          }
  - match: { analysis_limits.model_memory_limit: "20mb" }

  - do:
      xpack.ml.update_job:
        job_id: jobs-crud-update-job
        body:  >
          {
            "analysis_limits": {
              "model_memory_limit": "15mb"
            }
          }
  - match: { analysis_limits.model_memory_limit: "15mb" }

  - do:
      catch: bad_request
      xpack.ml.update_job:
        job_id: _all
        body:  >
          {
            "description":"Can't update all description"
          }

---
"Test cannot decrease model_memory_limit below current usage":
  - do:
      xpack.ml.put_job:
        job_id: jobs-crud-model-memory-limit-decrease
        body:  >
          {
            "job_id":"jobs-crud-model-memory-limit-decrease",
            "analysis_config" : {
                "bucket_span": "1h",
                "detectors" :[{"function":"count"}]
            },
            "analysis_limits": {
              "model_memory_limit": "50mb"
            },
            "data_description" : {
                "time_field":"time"
            }
          }
  - match: { job_id: "jobs-crud-model-memory-limit-decrease" }

  - do:
      index:
        index: .ml-anomalies-shared
        type: doc
        id: jobs-crud-model-memory-limit-decrease_model_size_stats_1517443200000
        body:
          job_id: jobs-crud-model-memory-limit-decrease
          result_type: model_size_stats
          log_time: 1517443200000
          timestamp: 1517443200000
          model_bytes: 10000000

  - do:
      indices.refresh: {}

  - do:
      catch: /Invalid update value for analysis_limits[:] model_memory_limit cannot be decreased below current usage; current usage \[9mb\], update had \[5mb\]/
      xpack.ml.update_job:
        job_id: jobs-crud-model-memory-limit-decrease
        body:  >
          {
            "analysis_limits": {
              "model_memory_limit": "5mb"
            }
          }

  # Decreasing over current usage works
  - do:
      xpack.ml.update_job:
        job_id: jobs-crud-model-memory-limit-decrease
        body:  >
          {
            "analysis_limits": {
              "model_memory_limit": "30mb"
            }
          }
  - match: { analysis_limits.model_memory_limit: "30mb" }

---
"Test delete job that is referred by a datafeed":
  - do:
      xpack.ml.put_job:
        job_id: jobs-crud-datafeed-job
        body:  >
          {
            "job_id":"jobs-crud-datafeed-job",
            "description":"Analysis of response time by airline",
            "analysis_config" : {
                "bucket_span": "1h",
                "detectors" :[{"function":"metric","field_name":"responsetime","by_field_name":"airline"}]
            },
            "data_description" : {
                "format":"xcontent",
                "time_field":"time",
                "time_format":"yyyy-MM-dd HH:mm:ssX"
            }
          }
  - match: { job_id: "jobs-crud-datafeed-job" }

  - do:
      xpack.ml.put_datafeed:
        datafeed_id: jobs-crud-test-datafeed-1
        body:  >
          {
            "job_id":"jobs-crud-datafeed-job",
            "indexes":["index-foo"],
            "types":["type-bar"]
          }
  - match: { datafeed_id: "jobs-crud-test-datafeed-1" }

  - do:
      catch: /Cannot delete job \[jobs-crud-datafeed-job\] because datafeed \[jobs-crud-test-datafeed-1\] refers to it/
      xpack.ml.delete_job:
        job_id: jobs-crud-datafeed-job

---
"Test delete job that is opened":
  - do:
      xpack.ml.put_job:
        job_id: delete-opened-job
        body:  >
          {
            "analysis_config" : {
                "bucket_span": "1h",
                "detectors" :[{"function":"count"}]
            },
            "analysis_limits" : {
                "model_memory_limit": "20mb"
            },
            "data_description" : {
                "time_field":"time"
            }
          }
  - match: { job_id: "delete-opened-job" }

  - do:
      xpack.ml.open_job:
        job_id: delete-opened-job
  - match: { opened: true }

  - do:
      catch: /Cannot delete job \[delete-opened-job\] because the job is opened/
      xpack.ml.delete_job:
        job_id: delete-opened-job

---
"Test close job":

  - do:
      xpack.ml.put_job:
        job_id: jobs-crud-close-job
        body:  >
          {
            "job_id":"jobs-crud-close-job",
            "description":"Analysis of response time by airline",
            "analysis_config" : {
                "bucket_span":"1h",
                "detectors" :[{"function":"metric","field_name":"responsetime","by_field_name":"airline"}]
            },
            "data_description" : {
                "format":"xcontent",
                "time_field":"time",
                "time_format":"epoch"
            }
          }
  - match: { job_id: "jobs-crud-close-job" }

  - do:
      xpack.ml.open_job:
        job_id: jobs-crud-close-job

  - do:
      xpack.ml.post_data:
        job_id: jobs-crud-close-job
        body: >
          {"airline":"AAL","responsetime":"132.2046","time":"1403481600"}
          {"airline":"JZA","responsetime":"990.4628","time":"1403481700"}


  - do:
      xpack.ml.flush_job:
        job_id: jobs-crud-close-job
  - match: { flushed: true }

  - do:
      headers:
        Authorization: "Basic eF9wYWNrX3Jlc3RfdXNlcjp4LXBhY2stdGVzdC1wYXNzd29yZA==" # run as x_pack_rest_user, i.e. the test setup superuser
      cluster.state:
        metric: [ metadata ]
        filter_path: metadata.persistent_tasks
  - match: {"metadata.persistent_tasks.tasks.0.task.xpack/ml/job.status.state": opened}

  - do:
      xpack.ml.close_job:
        job_id: jobs-crud-close-job
  - match: { closed: true }

  - do:
      headers:
        Authorization: "Basic eF9wYWNrX3Jlc3RfdXNlcjp4LXBhY2stdGVzdC1wYXNzd29yZA==" # run as x_pack_rest_user, i.e. the test setup superuser
      cluster.state:
        metric: [ metadata ]
        filter_path: metadata.persistent_tasks
  - match:
      metadata.persistent_tasks.tasks: []

---
"Test closing a closed job isn't an error":
  - do:
      xpack.ml.put_job:
        job_id: jobs-crud-close-a-closed-job
        body:  >
          {
            "description":"Analysis of response time by airline",
            "analysis_config" : {
                "detectors" :[{"function":"count"}]
            },
            "analysis_limits" : {
                "model_memory_limit": "20mb"
            },
            "data_description" : {
                "format":"xcontent"
            }
          }
  - match: { job_id: "jobs-crud-close-a-closed-job" }

  - do:
      xpack.ml.open_job:
        job_id: jobs-crud-close-a-closed-job

  - do:
      xpack.ml.close_job:
        job_id: jobs-crud-close-a-closed-job
  - match: { closed: true }

  - do:
      xpack.ml.close_job:
        job_id: jobs-crud-close-a-closed-job
  - match: { closed: true }

---
"Test close all jobs":
  - do:
      xpack.ml.put_job:
        job_id: jobs-crud-close-all-1
        body:  >
          {
            "description":"Analysis of response time by airline",
            "analysis_config" : {
                "detectors" :[{"function":"count"}]
            },
            "analysis_limits" : {
                "model_memory_limit": "20mb"
            },
            "data_description" : {
                "format":"xcontent"
            }
          }
  - match: { job_id: "jobs-crud-close-all-1" }

  - do:
      xpack.ml.put_job:
        job_id: jobs-crud-close-all-2
        body:  >
          {
            "description":"Analysis of response time by airline",
            "analysis_config" : {
                "detectors" :[{"function":"count"}]
            },
            "analysis_limits" : {
                "model_memory_limit": "20mb"
            },
            "data_description" : {
                "format":"xcontent"
            }
          }
  - match: { job_id: "jobs-crud-close-all-2" }

  - do:
      xpack.ml.open_job:
        job_id: jobs-crud-close-all-2

  - do:
      xpack.ml.close_job:
        job_id: _all
  - match: { closed: true }

  - do:
      xpack.ml.get_job_stats:
        job_id: _all
  - match: { jobs.0.state: closed }
  - match: { jobs.1.state: closed }

---
"Test close jobs with expression that matches":
  - do:
      xpack.ml.put_job:
        job_id: jobs-crud-with-expression-that-matches-foo-1
        body:  >
          {
            "analysis_config" : {
                "detectors" :[{"function":"count"}]
            },
            "analysis_limits" : {
                "model_memory_limit": "20mb"
            },
            "data_description" : {}
          }

  - do:
      xpack.ml.put_job:
        job_id: jobs-crud-with-expression-that-matches-foo-2
        body:  >
          {
            "analysis_config" : {
                "detectors" :[{"function":"count"}]
            },
            "analysis_limits" : {
                "model_memory_limit": "20mb"
            },
            "data_description" : {}
          }

  - do:
      xpack.ml.put_job:
        job_id: jobs-crud-with-expression-that-matches-bar-1
        body:  >
          {
            "analysis_config" : {
                "detectors" :[{"function":"count"}]
            },
            "analysis_limits" : {
                "model_memory_limit": "20mb"
            },
            "data_description" : {}
          }

  - do:
      xpack.ml.open_job:
        job_id: jobs-crud-with-expression-that-matches-foo-1

  - do:
      xpack.ml.open_job:
        job_id: jobs-crud-with-expression-that-matches-foo-2

  - do:
      xpack.ml.open_job:
        job_id: jobs-crud-with-expression-that-matches-bar-1

  - do:
      xpack.ml.close_job:
        job_id: "*foo-*"
  - match: { closed: true }

  - do:
      xpack.ml.get_job_stats:
        job_id: "*foo-*"
  - match: { jobs.0.state: closed }
  - match: { jobs.1.state: closed }

  - do:
      xpack.ml.get_job_stats:
        job_id: "*bar-1"
  - match: { jobs.0.state: opened }

---
"Test close jobs with expression that does not match and allow_no_jobs":

  - do:
      xpack.ml.close_job:
        job_id: "missing-*"
        allow_no_jobs: true
  - match: { closed: true }

---
"Test close jobs with expression that does not match and not allow_no_jobs":

  - do:
      catch: missing
      xpack.ml.close_job:
        job_id: "missing-*"
        allow_no_jobs: false

---
"Test force close job":

  - do:
      xpack.ml.put_job:
        job_id: jobs-crud-force-close-job
        body:  >
          {
            "job_id":"jobs-crud-force-close-job",
            "description":"Analysis of response time by airline",
            "analysis_config" : {
                "bucket_span":"1h",
                "detectors" :[{"function":"metric","field_name":"responsetime","by_field_name":"airline"}]
            },
            "analysis_limits" : {
                "model_memory_limit": "20mb"
            },
            "data_description" : {
                "format":"xcontent",
                "time_field":"time",
                "time_format":"epoch"
            }
          }
  - match: { job_id: "jobs-crud-force-close-job" }

  - do:
      xpack.ml.open_job:
        job_id: jobs-crud-force-close-job

  - do:
      xpack.ml.post_data:
        job_id: jobs-crud-force-close-job
        body: >
          {"airline":"AAL","responsetime":"132.2046","time":"1403481600"}
          {"airline":"JZA","responsetime":"990.4628","time":"1403481700"}


  - do:
      xpack.ml.flush_job:
        job_id: jobs-crud-force-close-job
  - match: { flushed: true }

  - do:
      headers:
        Authorization: "Basic eF9wYWNrX3Jlc3RfdXNlcjp4LXBhY2stdGVzdC1wYXNzd29yZA==" # run as x_pack_rest_user, i.e. the test setup superuser
      cluster.state:
        metric: [ metadata ]
        filter_path: metadata.persistent_tasks
  - match: {"metadata.persistent_tasks.tasks.0.task.xpack/ml/job.status.state": opened}

  - do:
      xpack.ml.close_job:
        job_id: jobs-crud-force-close-job
        force: true
  - match: { closed: true }

  - do:
      headers:
        Authorization: "Basic eF9wYWNrX3Jlc3RfdXNlcjp4LXBhY2stdGVzdC1wYXNzd29yZA==" # run as x_pack_rest_user, i.e. the test setup superuser
      cluster.state:
        metric: [ metadata ]
        filter_path: metadata.persistent_tasks
  - match:
      metadata.persistent_tasks.tasks: []

---
"Test force closing a closed job isn't an error":
  - do:
      xpack.ml.put_job:
        job_id: jobs-crud-close-a-closed-job
        body:  >
          {
            "description":"Analysis of response time by airline",
            "analysis_config" : {
                "detectors" :[{"function":"count"}]
            },
            "analysis_limits" : {
                "model_memory_limit": "20mb"
            },
            "data_description" : {
                "format":"xcontent"
            }
          }
  - match: { job_id: "jobs-crud-close-a-closed-job" }

  - do:
      xpack.ml.open_job:
        job_id: jobs-crud-close-a-closed-job

  - do:
      xpack.ml.close_job:
        job_id: jobs-crud-close-a-closed-job
        force: true
  - match: { closed: true }

  - do:
      xpack.ml.close_job:
        job_id: jobs-crud-close-a-closed-job
        force: true
  - match: { closed: true }

---
"Test open and close an unknown job is resource not found":
  - do:
      catch: missing
      xpack.ml.open_job:
        job_id: jobs-crud-some-missing-job-i-made-up

  - do:
      catch: missing
      xpack.ml.close_job:
        job_id: jobs-crud-some-missing-job-i-made-up

---
"Test cannot create job with existing categorizer state document":

  - do:
      index:
        index: .ml-state
        type: doc
        id: jobs-crud-existing-docs_categorizer_state#1
        body:
          key: value

  - do:
      indices.refresh: {}

  - do:
      catch: /status_exception/
      xpack.ml.put_job:
        job_id: jobs-crud-existing-docs
        body:  >
          {
            "analysis_config" : {
                "bucket_span": "1h",
                "detectors" :[{"function":"metric","field_name":"responsetime","by_field_name":"airline"}]
            },
            "data_description" : {
            }
          }

---
"Test cannot create job with existing quantiles document":

  - do:
      index:
        index: .ml-state
        type: doc
        id: jobs-crud-existing-docs_quantiles
        body:
          key: value

  - do:
      indices.refresh: {}

  - do:
      catch: /status_exception/
      xpack.ml.put_job:
        job_id: jobs-crud-existing-docs
        body:  >
          {
            "analysis_config" : {
                "bucket_span": "1h",
                "detectors" :[{"function":"metric","field_name":"responsetime","by_field_name":"airline"}]
            },
            "data_description" : {
            }
          }


---
"Test cannot create job with existing result document":

  - do:
      index:
        index:  .ml-anomalies-shared
        type:   doc
        id:     "jobs-crud-existing-result-docs_1464739200000_1"
        body:
          {
            "job_id": "jobs-crud-existing-result-docs",
            "result_type": "bucket",
            "timestamp": "2016-06-01T00:00:00Z",
            "anomaly_score": 90.0,
            "bucket_span":1
          }

  - do:
      indices.refresh: {}

  - do:
      catch: /status_exception/
      xpack.ml.put_job:
        job_id: jobs-crud-existing-result-docs
        body:  >
          {
            "analysis_config" : {
                "bucket_span": "1h",
                "detectors" :[{"function":"metric","field_name":"responsetime","by_field_name":"airline"}]
            },
            "data_description" : {
            }
          }

---
"Test cannot create job with model snapshot id set":

  - do:
      catch: /illegal_argument_exception/
      xpack.ml.put_job:
        job_id: has-model-snapshot-id
        body:  >
          {
            "model_snapshot_id": "wont-create-with-this-setting",
            "analysis_config" : {
                "bucket_span": "1h",
                "detectors" :[{"function":"metric","field_name":"responsetime","by_field_name":"airline"}]
            },
            "data_description" : {
            }
          }

---
"Test put job with time field in analysis_config":

  - do:
      catch: /illegal_argument_exception/
      xpack.ml.put_job:
        job_id: jobs-crud-time-field-in-analysis_config
        body:  >
          {
            "analysis_config" : {
                "bucket_span": "1h",
                "detectors" :[{"function":"rare","by_field_name":"@timestamp"}]
            },
            "data_description" : {
                "time_field":"@timestamp"
            }
          }

  - do:
      catch: /data_description.time_field may not be used in the analysis_config/
      xpack.ml.put_job:
        job_id: jobs-crud-time-field-in-analysis_config
        body:  >
          {
            "analysis_config" : {
                "bucket_span": "1h",
                "detectors" :[{"function":"mean","field_name":"time"}]
            },
            "data_description" : {}
          }

---
"Test put job after closing results index":

  - do:
      indices.create:
        index: ".ml-anomalies-shared"

  - do:
      indices.close:
        index: ".ml-anomalies-shared"

  - do:
      catch: /Cannot create job \[closed-results-job\] as it requires closed index \[\.ml-anomalies-shared\]/
      xpack.ml.put_job:
        job_id: closed-results-job
        body:  >
          {
            "description":"Analysis of response time by airline",
            "analysis_config" : {
                "bucket_span": "1h",
                "detectors" :[{"function":"metric","field_name":"responsetime","by_field_name":"airline"}]
            },
            "data_description" : {
                "time_field":"time"
            }
          }

---
"Test put job after closing state index":

  - do:
      indices.create:
        index: ".ml-state"

  - do:
      indices.close:
        index: ".ml-state"

  - do:
      catch: /Cannot create job \[closed-results-job\] as it requires closed index \[\.ml-state\]/
      xpack.ml.put_job:
        job_id: closed-results-job
        body:  >
          {
            "description":"Analysis of response time by airline",
            "analysis_config" : {
                "bucket_span": "1h",
                "detectors" :[{"function":"metric","field_name":"responsetime","by_field_name":"airline"}]
            },
            "data_description" : {
                "time_field":"time"
            }
          }

---
"Test max model memory limit":

  - do:
      headers:
        Authorization: "Basic eF9wYWNrX3Jlc3RfdXNlcjp4LXBhY2stdGVzdC1wYXNzd29yZA==" # run as x_pack_rest_user, i.e. the test setup superuser
      cluster.put_settings:
        body:
          transient:
            xpack.ml.max_model_memory_limit: "9g"
  - match: {transient.xpack.ml.max_model_memory_limit: "9g"}

  - do:
      xpack.ml.put_job:
        job_id: job-model-memory-limit-below-global-max
        body:  >
          {
            "analysis_config" : {
                "detectors" :[{"function":"count"}]
            },
            "data_description" : {
            },
            "analysis_limits": {
                "model_memory_limit": "8g"
            }
          }
  - match: { job_id: "job-model-memory-limit-below-global-max" }
  - match: { analysis_limits.model_memory_limit: "8192mb" }

  - do:
      catch: /model_memory_limit \[10gb\] must be less than the value of the xpack.ml.max_model_memory_limit setting \[9gb\]/
      xpack.ml.put_job:
        job_id: job-model-memory-limit-above-global-max
        body:  >
          {
            "analysis_config" : {
                "detectors" :[{"function":"count"}]
            },
            "data_description" : {
            },
            "analysis_limits": {
                "model_memory_limit": "10g"
            }
          }

  - do:
      headers:
        Authorization: "Basic eF9wYWNrX3Jlc3RfdXNlcjp4LXBhY2stdGVzdC1wYXNzd29yZA==" # run as x_pack_rest_user, i.e. the test setup superuser
      cluster.put_settings:
        body:
          transient:
            xpack.ml.max_model_memory_limit: null
  - match: {transient: {}}

  - do:
      xpack.ml.put_job:
        job_id: job-model-memory-limit-above-removed-global-max
        body:  >
          {
            "analysis_config" : {
                "detectors" :[{"function":"count"}]
            },
            "data_description" : {
            },
            "analysis_limits": {
                "model_memory_limit": "10g"
            }
          }
  - match: { job_id: "job-model-memory-limit-above-removed-global-max" }
  - match: { analysis_limits.model_memory_limit: "10240mb" }

---
"Test create job with delimited format":

  - skip:
      features: "warnings"
      reason: deprecation logging for delimited format was introduced in 5.4.0

  - do:
      warnings:
          - Creating jobs with delimited data format is deprecated. Please use xcontent instead.
      xpack.ml.put_job:
        job_id: delimited-format-job
        body:  >
          {
            "analysis_config" : {
                "bucket_span": "1h",
                "detectors" :[{"function":"metric","field_name":"responsetime","by_field_name":"airline"}]
            },
            "data_description" : {
                "format":"delimited",
                "field_delimiter":",",
                "time_field":"time",
                "time_format":"yyyy-MM-dd HH:mm:ssX"
            }
          }
  - match: { job_id: "delimited-format-job" }

---
"Test job with named categorization_analyzer":
  - do:
      xpack.ml.put_job:
        job_id: jobs-crud-categorization-analyzer-job
        body:  >
          {
            "analysis_config" : {
                "detectors" :[{"function":"mean","field_name":"responsetime","by_field_name":"airline"},
                    {"function":"count","by_field_name":"mlcategory"}],
                "categorization_field_name": "some_category",
                "categorization_analyzer" : "standard"
            },
            "data_description" : {
            }
          }
  - match: { job_id: "jobs-crud-categorization-analyzer-job" }
  - match: { analysis_config.categorization_analyzer: "standard" }

---
"Test job with custom categorization_analyzer":
  - do:
      xpack.ml.put_job:
        job_id: jobs-crud-categorization-analyzer-job
        body:  >
          {
            "analysis_config" : {
                "detectors" :[{"function":"mean","field_name":"responsetime","by_field_name":"airline"},
                    {"function":"count","by_field_name":"mlcategory"}],
                "categorization_field_name": "some_category",
                "categorization_analyzer" : {
                    "char_filter" : ["html_strip"],
                    "tokenizer" : "classic",
                    "filter" : ["stop"]
                }
            },
            "data_description" : {
            }
          }
  - match: { job_id: "jobs-crud-categorization-analyzer-job" }
  - match: { analysis_config.categorization_analyzer.char_filter.0: "html_strip" }
  - match: { analysis_config.categorization_analyzer.tokenizer: "classic" }
  - match: { analysis_config.categorization_analyzer.filter.0: "stop" }

---
"Test job with categorization_analyzer and categorization_filters":
  - do:
      catch: /categorization_filters cannot be used with categorization_analyzer - instead specify them as pattern_replace char_filters in the analyzer/
      xpack.ml.put_job:
        job_id: jobs-crud-categorization-analyzer-job
        body:  >
          {
            "analysis_config" : {
                "detectors" :[{"function":"mean","field_name":"responsetime","by_field_name":"airline"},
                    {"function":"count","by_field_name":"mlcategory"}],
                "categorization_field_name": "some_category",
                "categorization_analyzer" : {
                    "char_filter" : ["html_strip"],
                    "tokenizer" : "classic",
                    "filter" : ["stop"]
                },
                "categorization_filters" : ["cat1.*", "cat2.*"]
            },
            "data_description" : {
            }
          }

---
"Test job with rules":

  - do:
      xpack.ml.put_job:
        job_id: jobs-crud-rules
        body:  >
          {
            "analysis_config": {
              "detectors": [
                {
                  "function": "count",
                  "by_field_name": "country",
                  "rules": [
                    {
                      "actions": ["filter_results", "skip_sampling"],
                      "conditions": [
                        {
                          "type":"numerical_actual",
                          "field_name":"country",
                          "field_value": "uk",
                          "condition": {"operator":"lt","value":"33.3"}
                        },
                        {"type":"categorical", "field_name":"country", "filter_id": "foo"}
                      ]
                    }
                  ]
                }
              ]
            },
            "data_description" : {}
          }

  - do:
      xpack.ml.get_jobs:
        job_id: jobs-crud-rules
  - match: { count: 1 }
  - match: {
      jobs.0.analysis_config.detectors.0.rules: [
        {
          "actions": ["filter_results", "skip_sampling"],
          "conditions_connective": "or",
          "conditions": [
            {
              "type":"numerical_actual",
              "field_name":"country",
              "field_value": "uk",
              "condition": {"operator":"lt","value":"33.3"}
            },
            {"type":"categorical", "field_name":"country", "filter_id": "foo"}
          ]
        }
      ]
    }

---
"Test job with pre 6.2 rules":

  - skip:
        features: "warnings"
        reason: certain rule fields were renamed in 6.2.0

  - do:
      warnings:
          - Deprecated field [detector_rules] used, expected [rules] instead
          - Deprecated field [rule_action] used, expected [actions] instead
          - Deprecated field [rule_conditions] used, expected [conditions] instead
          - Deprecated field [condition_type] used, expected [type] instead
          - Deprecated field [value_filter] used, expected [filter_id] instead
      xpack.ml.put_job:
        job_id: jobs-crud-pre-6-2-rules
        body:  >
          {
            "analysis_config": {
              "detectors": [
                {
                  "function": "count",
                  "by_field_name": "country",
                  "detector_rules": [
                    {
                      "rule_action": "filter_results",
                      "rule_conditions": [
                        {
                          "condition_type":"numerical_actual",
                          "field_name":"country",
                          "field_value": "uk",
                          "condition": {"operator":"lt","value":"33.3"}
                        },
                        {"type":"categorical", "field_name":"country", "value_filter": "foo"}
                      ]
                    }
                  ]
                }
              ]
            },
            "data_description" : {}
          }

  - do:
      xpack.ml.get_jobs:
        job_id: jobs-crud-pre-6-2-rules
  - match: { count: 1 }
  - match: {
      jobs.0.analysis_config.detectors.0.rules: [
        {
          "actions": ["filter_results"],
          "conditions_connective": "or",
          "conditions": [
            {
              "type":"numerical_actual",
              "field_name":"country",
              "field_value": "uk",
              "condition": {"operator":"lt","value":"33.3"}
            },
            {"type":"categorical", "field_name":"country", "filter_id": "foo"}
          ]
        }
      ]
    }

---
"Test function shortcut expansion":
  - do:
      xpack.ml.put_job:
        job_id: jobs-function-shortcut-expansion
        body:  >
          {
            "analysis_config" : {
                "bucket_span": "1h",
                "detectors" :[{"function":"nzc","by_field_name":"airline"}]
            },
            "data_description" : {}
          }
  - match: { job_id: "jobs-function-shortcut-expansion" }
  - match: { analysis_config.detectors.0.function: "non_zero_count"}

---
"Test open job when persistent task allocation disabled":

  - do:
      headers:
        Authorization: "Basic eF9wYWNrX3Jlc3RfdXNlcjp4LXBhY2stdGVzdC1wYXNzd29yZA==" # run as x_pack_rest_user, i.e. the test setup superuser
      cluster.put_settings:
        body:
          transient:
            cluster.persistent_tasks.allocation.enable: "none"
  - match: {transient.cluster.persistent_tasks.allocation.enable: "none"}

  - do:
      xpack.ml.put_job:
        job_id: persistent-task-allocation-allowed-test
        body:  >
          {
            "analysis_config" : {
                "detectors" :[{"function":"count"}]
            },
            "data_description" : {
            },
            "analysis_limits": {
                "model_memory_limit": "10m"
            }
          }
  - match: { job_id: "persistent-task-allocation-allowed-test" }

  - do:
      catch: /no persistent task assignments are allowed due to cluster settings/
      xpack.ml.open_job:
        job_id: persistent-task-allocation-allowed-test

  - do:
      headers:
        Authorization: "Basic eF9wYWNrX3Jlc3RfdXNlcjp4LXBhY2stdGVzdC1wYXNzd29yZA==" # run as x_pack_rest_user, i.e. the test setup superuser
      cluster.put_settings:
        body:
          transient:
            cluster.persistent_tasks.allocation.enable: "all"
  - match: {transient.cluster.persistent_tasks.allocation.enable: "all"}

  - do:
      xpack.ml.open_job:
        job_id: persistent-task-allocation-allowed-test
  - match: { opened: true }
