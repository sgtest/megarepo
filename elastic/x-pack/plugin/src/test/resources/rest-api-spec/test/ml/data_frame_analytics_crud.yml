---
setup:
  - do:
      indices.create:
        index: index-source

---
"Test get-all and get-all-stats given no analytics exist":

  - do:
      ml.get_data_frame_analytics:
        id: "_all"
  - match: { count: 0 }
  - match: { data_frame_analytics: [] }

  - do:
      ml.get_data_frame_analytics:
        id: "_all"
  - match: { count: 0 }
  - match: { data_frame_analytics: [] }

  - do:
      ml.get_data_frame_analytics:
        id: "*"
  - match: { count: 0 }
  - match: { data_frame_analytics: [] }

  - do:
      ml.get_data_frame_analytics:
        id: "*"
  - match: { count: 0 }
  - match: { data_frame_analytics: [] }

---
"Test put valid config with default outlier detection, query, and filter":

  - do:
      ml.put_data_frame_analytics:
        id: "simple-outlier-detection-with-query"
        body: >
          {
            "source": {
              "index": "index-source",
              "query": {"term" : { "user" : "Kimchy" }}
            },
            "dest": {
              "index": "index-dest"
            },
            "analysis": {"outlier_detection":{}},
            "analyzed_fields": [ "obj1.*", "obj2.*" ]
          }
  - match: { id: "simple-outlier-detection-with-query" }
  - match: { source.index: ["index-source"] }
  - match: { source.query: {"term" : { "user" : "Kimchy"} } }
  - match: { dest.index: "index-dest" }
  - match: { analysis: {"outlier_detection":{}} }
  - match: { analyzed_fields: {"includes" : ["obj1.*", "obj2.*" ], "excludes": [] } }
  - is_true: create_time
  - is_true: version

  - do:
      ml.get_data_frame_analytics:
        id: "simple-outlier-detection-with-query"
  - match: { count: 1 }
  - match: { data_frame_analytics.0.id: "simple-outlier-detection-with-query" }
  - match: { data_frame_analytics.0.source.index: ["index-source"] }
  - match: { data_frame_analytics.0.source.query: {"term" : { "user" : "Kimchy"} } }
  - match: { data_frame_analytics.0.dest.index: "index-dest" }
  - match: { data_frame_analytics.0.analysis: {"outlier_detection":{}} }
  - match: { data_frame_analytics.0.analyzed_fields: {"includes" : ["obj1.*", "obj2.*" ], "excludes": [] } }
  - is_true: data_frame_analytics.0.create_time
  - is_true: data_frame_analytics.0.version

---
"Test put config with security headers in the body":
  - do:
      catch: /unknown field \[headers\], parser not found/
      ml.put_data_frame_analytics:
        id: "data_frame_with_header"
        body:  >
          {
            "source": {
              "index": "index-source",
              "query": {"term" : { "user" : "Kimchy" }}
            },
            "dest": {
              "index": "index-dest"
            },
            "analysis": {"outlier_detection":{}},
            "headers":{ "a_security_header" : "secret" }
          }

---
"Test put config with create_time in the body":

  - do:
      catch: /unknown field \[create_time\], parser not found/
      ml.put_data_frame_analytics:
        id: "data_frame_with_create_time"
        body: >
          {
            "source": {
              "index": "index-source"
            },
            "dest": {
              "index": "index-dest"
            },
            "analysis": {"outlier_detection":{}},
            "create_time": 123456789
          }

---
"Test put config with version in the body":

  - do:
      catch: /unknown field \[version\], parser not found/
      ml.put_data_frame_analytics:
        id: "data_frame_with_version"
        body: >
          {
            "source": {
              "index": "index-source"
            },
            "dest": {
              "index": "index-dest"
            },
            "analysis": {"outlier_detection":{}},
            "version": "7.3.0"
          }

---
"Test put valid config with default outlier detection":

  - do:
      ml.put_data_frame_analytics:
        id: "simple-outlier-detection"
        body: >
          {
            "source": {
              "index": "index-source"
            },
            "dest": {
              "index": "index-dest"
            },
            "analysis": {"outlier_detection":{}}
          }
  - match: { id: "simple-outlier-detection" }
  - match: { source.index: ["index-source"] }
  - match: { source.query: {"match_all" : {} } }
  - match: { dest.index: "index-dest" }
  - match: { analysis: {"outlier_detection":{}} }
  - is_true: create_time
  - is_true: version

---
"Test put valid config with custom outlier detection":

  - do:
      ml.put_data_frame_analytics:
        id: "custom-outlier-detection"
        body: >
          {
            "source": {
              "index": "index-source"
            },
            "dest": {
              "index": "index-dest"
            },
            "analysis": {
              "outlier_detection":{
                "n_neighbors": 5,
                "method": "lof",
                "feature_influence_threshold": 0.0
              }
            }
          }
  - match: { id: "custom-outlier-detection" }
  - match: { source.index: ["index-source"] }
  - match: { source.query: {"match_all" : {} } }
  - match: { dest.index: "index-dest" }
  - match: { analysis.outlier_detection.n_neighbors: 5 }
  - match: { analysis.outlier_detection.method: "lof" }
  - match: { analysis.outlier_detection.feature_influence_threshold: 0.0 }
  - is_true: create_time
  - is_true: version

---
"Test put config with inconsistent body/param ids":

  - do:
      catch: /Inconsistent id; 'body_id' specified in the body differs from 'url_id' specified as a URL argument/
      ml.put_data_frame_analytics:
        id: "url_id"
        body: >
          {
            "id": "body_id",
            "source": {
              "index": "index-source"
            },
            "dest": {
              "index": "index-dest"
            },
            "analysis": {"outlier_detection":{}}
          }

---
"Test put config with invalid id":

  - do:
      catch: /Invalid id*/
      ml.put_data_frame_analytics:
        id: "this id contains spaces"
        body: >
          {
            "source": {
              "index": "index-source"
            },
            "dest": {
              "index": "index-dest"
            },
            "analysis": {"outlier_detection":{}}
          }

---
"Test put config with invalid dest index name":

  - do:
      catch: /Invalid index name \[<script>Foo\]*/
      ml.put_data_frame_analytics:
        id: "config-with-invalid-dest-index"
        body: >
          {
            "source": {
              "index": "index-source"
            },
            "dest": {
              "index": "<script>Foo"
            },
            "analysis": {"outlier_detection":{}}
          }

---
"Test put config with pattern dest index name":

  - do:
      catch: /Invalid index name \[foo\*\]/
      ml.put_data_frame_analytics:
        id: "config-with-invalid-dest-index"
        body: >
          {
            "source": {
              "index": "index-source"
            },
            "dest": {
              "index": "foo*"
            },
            "analysis": {"outlier_detection":{}}
          }

---
"Test put config with missing concrete source index":

  - do:
      catch: /No index matches source index \[missing]/
      ml.put_data_frame_analytics:
        id: "config-with-missing-concrete-source-index"
        body: >
          {
            "source": {
              "index": "missing"
            },
            "dest": {
              "index": "index-dest"
            },
            "analysis": {"outlier_detection":{}}
          }

---
"Test put config with missing wildcard source index":

  - do:
      catch: /No index matches source index \[missing\*\]/
      ml.put_data_frame_analytics:
        id: "config-with-missing-wildcard-source-index"
        body: >
          {
            "source": {
              "index": "missing*"
            },
            "dest": {
              "index": "index-dest"
            },
            "analysis": {"outlier_detection":{}}
          }

---
"Test put config with dest index same as source index":

  - do:
      catch: /Destination index \[index-source\] must not be included in source index \[index-source\]/
      ml.put_data_frame_analytics:
        id: "config-with-same-source-dest-index"
        body: >
          {
            "source": {
              "index": "index-source"
            },
            "dest": {
              "index": "index-source"
            },
            "analysis": {"outlier_detection":{}}
          }

---
"Test put config with dest index matching multiple indices":

  - do:
      indices.create:
        index: multiple-dest-index-1

  - do:
      indices.create:
        index: multiple-dest-index-2

  - do:
      indices.put_alias:
        index: multiple-dest-index-1
        name: multiple-dest-index

  - do:
      indices.put_alias:
        index: multiple-dest-index-2
        name: multiple-dest-index

  - do:
      catch: /Destination index \[multiple-dest-index\] should match a single index; matches \[multiple-dest-index-[12], multiple-dest-index-[12]\]/
      ml.put_data_frame_analytics:
        id: "config-with-dest-index-matching-multiple-indices"
        body: >
          {
            "source": {
              "index": "index-source"
            },
            "dest": {
              "index": "multiple-dest-index"
            },
            "analysis": {"outlier_detection":{}}
          }

---
"Test put config with dest index included in source via alias":

  - do:
      indices.create:
        index: another-source-index

  - do:
      indices.put_alias:
        index: another-source-index
        name: dest-alias

  - do:
      catch: /Destination index \[dest-alias\], which is an alias for \[another-source-index\], must not be included in source index \[another-source-index\]/
      ml.put_data_frame_analytics:
        id: "config-with-dest-index-included-in-source-via-alias"
        body: >
          {
            "source": {
              "index": "another-source-index"
            },
            "dest": {
              "index": "dest-alias"
            },
            "analysis": {"outlier_detection":{}}
          }

---
"Test put config with unknown top level field":

  - do:
      catch: /unknown field \[unknown_field\], parser not found/
      ml.put_data_frame_analytics:
        id: "unknown_field"
        body: >
          {
            "source": {
              "index": "index-source"
            },
            "dest": {
              "index": "index-dest"
            },
            "analysis": {"outlier_detection":{}},
            "unknown_field": 42
          }

---
"Test put config with unknown field in outlier detection analysis":

  - do:
      catch: /unknown field \[unknown_field\]/
      ml.put_data_frame_analytics:
        id: "unknown_field"
        body: >
          {
            "source": {
              "index": "index-source"
            },
            "dest": {
              "index": "index-dest"
            },
            "analysis": {"outlier_detection":{"unknown_field":42}}
          }

---
"Test put config given missing source":

  - do:
      catch: /\[source\] must not be null/
      ml.put_data_frame_analytics:
        id: "simple-outlier-detection"
        body: >
          {
            "dest": {
              "index": "index-dest"
            },
            "analysis": {"outlier_detection":{}}
          }

---
"Test put config given source with empty index array":

  - do:
      catch: /source\.index must specify at least one index/
      ml.put_data_frame_analytics:
        id: "simple-outlier-detection"
        body: >
          {
            "source": {
              "index": []
            },
            "dest": {
              "index": "index-dest"
            },
            "analysis": {"outlier_detection":{}}
          }

---
"Test put config given source with empty string in index array":

  - do:
      catch: /source\.index must contain non-null and non-empty strings/
      ml.put_data_frame_analytics:
        id: "simple-outlier-detection"
        body: >
          {
            "source": {
              "index": [""]
            },
            "dest": {
              "index": "index-dest"
            },
            "analysis": {"outlier_detection":{}}
          }

---
"Test put config given source without index":

  - do:
      catch: /Required \[index\]/
      ml.put_data_frame_analytics:
        id: "simple-outlier-detection"
        body: >
          {
            "source": {
            },
            "dest": {
              "index": "index-dest"
            },
            "analysis": {"outlier_detection":{}}
          }

---
"Test put config given missing dest":

  - do:
      catch: /\[dest\] must not be null/
      ml.put_data_frame_analytics:
        id: "simple-outlier-detection"
        body: >
          {
            "source": {
              "index": "index-source"
            },
            "analysis": {"outlier_detection":{}}
          }

---
"Test put config given dest with empty index":

  - do:
      catch: /\[index\] must be non-empty/
      ml.put_data_frame_analytics:
        id: "simple-outlier-detection"
        body: >
          {
            "source": {
              "index": "index-source"
            },
            "dest": {
              "index": ""
            },
            "analysis": {"outlier_detection":{}}
          }

---
"Test put config given dest without index":

  - do:
      catch: /Required \[index\]/
      ml.put_data_frame_analytics:
        id: "simple-outlier-detection"
        body: >
          {
            "source": {
              "index": "index-source"
            },
            "dest": {
            },
            "analysis": {"outlier_detection":{}}
          }

---
"Test put config given missing analysis":

  - do:
      catch: /\[analysis\] must not be null/
      ml.put_data_frame_analytics:
        id: "simple-outlier-detection"
        body: >
          {
            "source": {
              "index": "index-source"
            },
            "dest": {
              "index": "index-dest"
            }
          }

---
"Test put config given empty analysis":

  - do:
      catch: /parsing_exception/
      ml.put_data_frame_analytics:
        id: "simple-outlier-detection"
        body: >
          {
            "source": {
              "index": "index-source"
            },
            "dest": {
              "index": "index-dest"
            },
            "analysis": {}
          }

---
"Test get given multiple analytics":

  - do:
      ml.put_data_frame_analytics:
        id: "foo-1"
        body: >
          {
            "source": {
              "index": "index-source"
            },
            "dest": {
              "index": "index-foo-1_dest"
            },
            "analysis": {"outlier_detection":{}}
          }

  - do:
      ml.put_data_frame_analytics:
        id: "foo-2"
        body: >
          {
            "source": {
              "index": "index-source"
            },
            "dest": {
              "index": "index-foo-2_dest"
            },
            "analysis": {"outlier_detection":{}}
          }
  - match: { id: "foo-2" }

  - do:
      ml.put_data_frame_analytics:
        id: "bar"
        body: >
          {
            "source": {
              "index": "index-source"
            },
            "dest": {
              "index": "index-bar_dest"
            },
            "analysis": {"outlier_detection":{}}
          }
  - match: { id: "bar" }

  - do:
      ml.get_data_frame_analytics:
        id: "*"
  - match: { count: 3 }
  - match: { data_frame_analytics.0.id: "bar" }
  - match: { data_frame_analytics.1.id: "foo-1" }
  - match: { data_frame_analytics.2.id: "foo-2" }

  - do:
      ml.get_data_frame_analytics:
        id: "foo-*"
  - match: { count: 2 }
  - match: { data_frame_analytics.0.id: "foo-1" }
  - match: { data_frame_analytics.1.id: "foo-2" }

  - do:
      ml.get_data_frame_analytics:
        id: "bar"
  - match: { count: 1 }
  - match: { data_frame_analytics.0.id: "bar" }

  - do:
      ml.get_data_frame_analytics:
        from: 1
  - match: { count: 3 }
  - match: { data_frame_analytics.0.id: "foo-1" }
  - match: { data_frame_analytics.1.id: "foo-2" }

  - do:
      ml.get_data_frame_analytics:
        size: 2
  - match: { count: 3 }
  - match: { data_frame_analytics.0.id: "bar" }
  - match: { data_frame_analytics.1.id: "foo-1" }

  - do:
      ml.get_data_frame_analytics:
        from: 1
        size: 1
  - match: { count: 3 }
  - match: { data_frame_analytics.0.id: "foo-1" }

---
"Test get given missing analytics":

  - do:
      catch: missing
      ml.get_data_frame_analytics:
        id: "missing-analytics"

---
"Test get given missing analytics and allow_no_match is false":

  - do:
      catch: missing
      ml.get_data_frame_analytics:
        id: "missing-analytics"
        allow_no_match: false

---
"Test get given expression without matches and allow_no_match is false":

  - do:
      catch: missing
      ml.get_data_frame_analytics:
        id: "missing-analytics*"
        allow_no_match: false

---
"Test get given expression without matches and allow_no_match is true":

  - do:
      ml.get_data_frame_analytics:
        id: "missing-analytics*"
        allow_no_match: true
  - match: { count: 0 }
  - match: { data_frame_analytics: [] }

---
"Test get stats given missing analytics":

  - do:
      catch: missing
      ml.get_data_frame_analytics_stats:
        id: "missing-analytics"

---
"Test get stats given missing analytics and allow_no_match is false":

  - do:
      catch: missing
      ml.get_data_frame_analytics_stats:
        id: "missing-analytics"
        allow_no_match: false

---
"Test get stats given expression without matches and allow_no_match is false":

  - do:
      catch: missing
      ml.get_data_frame_analytics_stats:
        id: "missing-analytics*"
        allow_no_match: false

---
"Test get stats given expression without matches and allow_no_match is true":

  - do:
      ml.get_data_frame_analytics_stats:
        id: "missing-analytics*"
        allow_no_match: true
  - match: { count: 0 }
  - match: { data_frame_analytics: [] }

---
"Test get stats given multiple analytics":

  - do:
      ml.put_data_frame_analytics:
        id: "foo-1"
        body: >
          {
            "source": {
              "index": "index-source"
            },
            "dest": {
              "index": "index-foo-1_dest"
            },
            "analysis": {"outlier_detection":{}}
          }

  - do:
      ml.put_data_frame_analytics:
        id: "foo-2"
        body: >
          {
            "source": {
              "index": "index-source"
            },
            "dest": {
              "index": "index-foo-2_dest"
            },
            "analysis": {"outlier_detection":{}}
          }
  - match: { id: "foo-2" }

  - do:
      ml.put_data_frame_analytics:
        id: "bar"
        body: >
          {
            "source": {
              "index": "index-source"
            },
            "dest": {
              "index": "index-bar_dest"
            },
            "analysis": {"outlier_detection":{}}
          }
  - match: { id: "bar" }

  - do:
      ml.get_data_frame_analytics_stats:
        id: "*"
  - match: { count: 3 }
  - length: { data_frame_analytics : 3 }
  - match: { data_frame_analytics.0.id: "bar" }
  - match: { data_frame_analytics.0.state: "stopped" }
  - match: { data_frame_analytics.1.id: "foo-1" }
  - match: { data_frame_analytics.1.state: "stopped" }
  - match: { data_frame_analytics.2.id: "foo-2" }
  - match: { data_frame_analytics.2.state: "stopped" }

  - do:
      ml.get_data_frame_analytics_stats:
        id: "foo-*"
  - match: { count: 2 }
  - length: { data_frame_analytics : 2 }
  - match: { data_frame_analytics.0.id: "foo-1" }
  - match: { data_frame_analytics.0.state: "stopped" }
  - match: { data_frame_analytics.1.id: "foo-2" }
  - match: { data_frame_analytics.1.state: "stopped" }

  - do:
      ml.get_data_frame_analytics_stats:
        id: "bar"
  - match: { count: 1 }
  - length: { data_frame_analytics : 1 }
  - match: { data_frame_analytics.0.id: "bar" }
  - match: { data_frame_analytics.0.state: "stopped" }

  - do:
      ml.get_data_frame_analytics_stats:
        from: 2
  - match: { count: 3 }
  - length: { data_frame_analytics : 1 }
  - match: { data_frame_analytics.0.id: "foo-2" }
  - match: { data_frame_analytics.0.state: "stopped" }

  - do:
      ml.get_data_frame_analytics_stats:
        size: 2
  - match: { count: 3 }
  - length: { data_frame_analytics : 2 }
  - match: { data_frame_analytics.0.id: "bar" }
  - match: { data_frame_analytics.0.state: "stopped" }
  - match: { data_frame_analytics.1.id: "foo-1" }
  - match: { data_frame_analytics.1.state: "stopped" }

  - do:
      ml.get_data_frame_analytics_stats:
        from: 1
        size: 1
  - match: { count: 3 }
  - length: { data_frame_analytics : 1 }
  - match: { data_frame_analytics.0.id: "foo-1" }
  - match: { data_frame_analytics.0.state: "stopped" }

---
"Test delete given stopped config":

  - do:
      ml.put_data_frame_analytics:
        id: "foo"
        body: >
          {
            "source": {
              "index": "index-source"
            },
            "dest": {
              "index": "index-dest"
            },
            "analysis": {"outlier_detection":{}}
          }

  - do:
      ml.delete_data_frame_analytics:
        id: "foo"
  - match: { acknowledged: true }

  - do:
      catch: missing
      ml.get_data_frame_analytics:
        id: "foo"

---
"Test delete given missing config":

  - do:
      catch: missing
      ml.delete_data_frame_analytics:
        id: "missing_config"

---
"Test max model memory limit":
  - skip:
      features: headers
  - do:
      headers:
        Authorization: "Basic eF9wYWNrX3Jlc3RfdXNlcjp4LXBhY2stdGVzdC1wYXNzd29yZA==" # run as x_pack_rest_user, i.e. the test setup superuser
      cluster.put_settings:
        body:
          transient:
            xpack.ml.max_model_memory_limit: "20mb"
  - match: {transient.xpack.ml.max_model_memory_limit: "20mb"}

  # Explicit request higher than limit is an error
  - do:
      catch: /model_memory_limit \[8gb\] must be less than the value of the xpack.ml.max_model_memory_limit setting \[20mb\]/
      ml.put_data_frame_analytics:
        id: "simple-outlier-detection-with-query"
        body: >
          {
            "source": {
              "index": "index-source",
              "query": {"term" : { "user" : "Kimchy" }}
            },
            "dest": {
              "index": "index-dest"
            },
            "analysis": {"outlier_detection":{}},
            "model_memory_limit": "8gb",
            "analyzed_fields": [ "obj1.*", "obj2.*" ]
          }

  # Request using default higher than limit gets silently capped
  - do:
      ml.put_data_frame_analytics:
        id: "simple-outlier-detection-with-query"
        body: >
          {
            "source": {
              "index": "index-source",
              "query": {"term" : { "user" : "Kimchy" }}
            },
            "dest": {
              "index": "index-dest"
            },
            "analysis": {"outlier_detection":{}},
            "analyzed_fields": [ "obj1.*", "obj2.*" ]
          }
  - match: { id: "simple-outlier-detection-with-query" }
  - match: { source.index: ["index-source"] }
  - match: { source.query: {"term" : { "user" : "Kimchy"} } }
  - match: { dest.index: "index-dest" }
  - match: { analysis: {"outlier_detection":{}} }
  - match: { analyzed_fields: {"includes" : ["obj1.*", "obj2.*" ], "excludes": [] } }
  - match: { model_memory_limit: "20mb" }


  - do:
      headers:
        Authorization: "Basic eF9wYWNrX3Jlc3RfdXNlcjp4LXBhY2stdGVzdC1wYXNzd29yZA==" # run as x_pack_rest_user, i.e. the test setup superuser
      cluster.put_settings:
        body:
          transient:
            xpack.ml.max_model_memory_limit: null
  - match: {transient: {}}

