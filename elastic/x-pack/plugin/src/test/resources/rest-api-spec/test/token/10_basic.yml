---
setup:
  - skip:
      features: headers

  - do:
      cluster.health:
          wait_for_status: yellow

  - do:
      xpack.security.put_user:
        username: "token_user"
        body:  >
          {
            "password" : "x-pack-test-password",
            "roles" : [ "superuser" ],
            "full_name" : "Token User"
          }

---
teardown:
  - do:
      xpack.security.delete_user:
        username: "token_user"
        ignore: 404

---
"Test get and use token":

  - do:
      xpack.security.get_token:
        body:
          grant_type: "password"
          username: "token_user"
          password: "x-pack-test-password"

  - match: { type: "Bearer" }
  - is_true: access_token
  - set: { access_token: token }
  - match: { expires_in: 1200 }
  - is_false: scope

  - do:
      headers:
        Authorization: Bearer ${token}
      xpack.security.authenticate: {}

  - match: { username: "token_user" }
  - match: { roles.0:  "superuser" }
  - match: { full_name: "Token User" }

---
"Test invalidate token":

  - do:
      xpack.security.get_token:
        body:
          grant_type: "password"
          username: "token_user"
          password: "x-pack-test-password"

  - match: { type: "Bearer" }
  - is_true: access_token
  - set: { access_token: token }
  - match: { expires_in: 1200 }
  - is_false: scope

  - do:
      headers:
        Authorization: Bearer ${token}
      xpack.security.authenticate: {}

  - match: { username: "token_user" }
  - match: { roles.0:  "superuser" }
  - match: { full_name: "Token User" }

  - do:
      xpack.security.invalidate_token:
        body:
          token: $token

  - match: { created: true }

  - do:
      catch: unauthorized
      headers:
        Authorization: Bearer ${token}
      xpack.security.authenticate: {}
