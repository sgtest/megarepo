/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
import java.nio.file.Files
import java.nio.file.Paths
import org.elasticsearch.gradle.ElasticsearchDistribution

apply plugin: 'elasticsearch.build'
apply plugin: 'elasticsearch.test.fixtures'

dependencies {
  compile project(":server")
  compile project(":libs:elasticsearch-cli")
  compile "com.amazonaws:aws-java-sdk-s3:${versions.aws}"
  compile "com.amazonaws:aws-java-sdk-core:${versions.aws}"
  compile "com.amazonaws:jmespath-java:${versions.aws}"
  compile "org.apache.httpcomponents:httpclient:${versions.httpclient}"
  compile "org.apache.httpcomponents:httpcore:${versions.httpcore}"
  compile "commons-logging:commons-logging:${versions.commonslogging}"
  compile "commons-codec:commons-codec:${versions.commonscodec}"
  compile "org.apache.logging.log4j:log4j-1.2-api:${versions.log4j}"
  compile "com.fasterxml.jackson.core:jackson-core:${versions.jackson}"
  compile 'com.fasterxml.jackson.core:jackson-databind:2.8.11.3'
  compile "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}"
  testCompile project(":test:framework")
  testCompile project(":plugins:repository-s3")

  // HACK: javax.xml.bind was removed from default modules in java 9, so we pull the api in here,
  // and whitelist this hack in JarHell
  compile 'javax.xml.bind:jaxb-api:2.2.2'
}

dependencyLicenses {
  mapping from: /aws-java-sdk-.*/, to: 'aws-java-sdk'
  mapping from: /jmespath-java.*/, to: 'aws-java-sdk'
  mapping from: /jackson-.*/, to: 'jackson'
  mapping from: /jaxb-.*/, to: 'jaxb'
}

test {
  // these are tested explicitly in separate test tasks
  exclude '**/S3CleanupTests.class'
}

// Disabled to quiet the testing convention check since we only run third party tests
test.enabled = false

String s3PermanentAccessKey = 's3_integration_test_permanent_access_key'
String s3PermanentSecretKey = 's3_integration_test_permanent_secret_key'
String s3PermanentBucket = 'permanent-bucket-test'
String s3PermanentBasePath = 'integration_test'

task thirdPartyTest(type: Test) {
  include '**/S3CleanupTests.class'
  systemProperty 'tests.security.manager', 'false'
  systemProperty 'test.s3.account', s3PermanentAccessKey
  systemProperty 'test.s3.key', s3PermanentSecretKey
  systemProperty 'test.s3.bucket', s3PermanentBucket
  systemProperty 'test.s3.base', s3PermanentBasePath
}

task writeDockerFile {
  File minioDockerfile = new File("${project.buildDir}/minio-docker/Dockerfile")
  outputs.file(minioDockerfile)
  doLast {
    minioDockerfile.parentFile.mkdirs()
    minioDockerfile.text = 
            "FROM minio/minio:RELEASE.2019-01-23T23-18-58Z\n" +
            "RUN mkdir -p /minio/data/${s3PermanentBucket}\n" +
            "ENV MINIO_ACCESS_KEY ${s3PermanentAccessKey}\n" +
            "ENV MINIO_SECRET_KEY ${s3PermanentSecretKey}"
  }
}

preProcessFixture {
  dependsOn(writeDockerFile)
}

def minioAddress = {
  int minioPort = postProcessFixture.ext."test.fixtures.minio-fixture.tcp.9000"
  assert minioPort > 0
  'http://127.0.0.1:' + minioPort
}

thirdPartyTest {
  dependsOn tasks.postProcessFixture
  nonInputProperties.systemProperty 'test.s3.endpoint', "${ -> minioAddress.call() }"
}

task unpackArchive(dependsOn: tasks.assemble, type: Copy) {
  from tarTree("${project.buildDir}/snapshot-tool-${project.version}.tgz")
  into "${project.buildDir}"
}

task smokeTest(type: Exec) {
  dependsOn unpackArchive
  onlyIf { ElasticsearchDistribution.CURRENT_PLATFORM != ElasticsearchDistribution.Platform.WINDOWS }
  commandLine "${project.buildDir}/snapshot-tool-${project.version}/bin/elasticsearch-snapshot", "-h"
}

check.dependsOn(thirdPartyTest)
check.dependsOn(smokeTest)

def vendorPath = Paths.get("${project.buildDir}/libs/vendor")

task copyRuntimeLibs(type: Copy) {
  doFirst {
    Files.createDirectories(vendorPath)
  }
  into vendorPath.toString()
  from configurations.compile, configurations.runtime
}

task buildTarArchive(dependsOn: copyRuntimeLibs, type: Tar) {
  compression Compression.GZIP
  archiveBaseName.set('snapshot-tool')
  destinationDirectory.set(project.buildDir)
  into "snapshot-tool-${version}", {
    into "bin", {
      from file("${project.projectDir}/src/bin")
    }
    into "libs", {
      from jar.getArchiveFile()
      from file("${project.buildDir}/libs")
    }
  }
}

assemble.dependsOn(buildTarArchive)

thirdPartyAudit.ignoreMissingClasses (
  // classes are missing
  'javax.activation.DataHandler',
  'javax.servlet.ServletContextEvent',
  'javax.servlet.ServletContextListener',
  'org.apache.avalon.framework.logger.Logger',
  'org.apache.log.Hierarchy',
  'org.apache.log.Logger',
  'software.amazon.ion.IonReader',
  'software.amazon.ion.IonSystem',
  'software.amazon.ion.IonType',
  'software.amazon.ion.IonWriter',
  'software.amazon.ion.Timestamp',
  'software.amazon.ion.system.IonBinaryWriterBuilder',
  'software.amazon.ion.system.IonSystemBuilder',
  'software.amazon.ion.system.IonTextWriterBuilder',
  'software.amazon.ion.system.IonWriterBuilder',
  // We don't use the kms dependency
  'com.amazonaws.services.kms.AWSKMS',
  'com.amazonaws.services.kms.AWSKMSClient',
  'com.amazonaws.services.kms.model.DecryptRequest',
  'com.amazonaws.services.kms.model.DecryptResult',
  'com.amazonaws.services.kms.model.EncryptRequest',
  'com.amazonaws.services.kms.model.EncryptResult',
  'com.amazonaws.services.kms.model.GenerateDataKeyRequest',
  'com.amazonaws.services.kms.model.GenerateDataKeyResult'
)
