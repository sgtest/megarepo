/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
import java.nio.file.Files
import java.nio.file.Paths
import org.elasticsearch.gradle.ElasticsearchDistribution

apply plugin: 'elasticsearch.build'

dependencies {
  compile project(":server")
  compile project(":libs:elasticsearch-cli")
  testCompile project(":test:framework")

  compile "com.amazonaws:aws-java-sdk-s3:${versions.aws}"
  compile "com.amazonaws:aws-java-sdk-core:${versions.aws}"
  compile "com.amazonaws:jmespath-java:${versions.aws}"
  compile "org.apache.httpcomponents:httpclient:${versions.httpclient}"
  compile "org.apache.httpcomponents:httpcore:${versions.httpcore}"
  compile "commons-logging:commons-logging:${versions.commonslogging}"
  compile "commons-codec:commons-codec:${versions.commonscodec}"
  compile "org.apache.logging.log4j:log4j-1.2-api:${versions.log4j}"
  compile "com.fasterxml.jackson.core:jackson-core:${versions.jackson}"
  compile 'com.fasterxml.jackson.core:jackson-databind:2.8.11.3'
  compile "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}"
  testCompile project(":plugins:repository-s3")

  // GCS dependencies
  compile 'com.google.cloud:google-cloud-storage:1.77.0'
  compile 'com.google.cloud:google-cloud-core:1.77.0'
  compile 'com.google.guava:guava:26.0-jre'
  compile 'com.google.http-client:google-http-client:1.30.1'
  compile "org.apache.httpcomponents:httpclient:${versions.httpclient}"
  compile "org.apache.httpcomponents:httpcore:${versions.httpcore}"
  compile "commons-logging:commons-logging:${versions.commonslogging}"
  compile "org.apache.logging.log4j:log4j-1.2-api:${versions.log4j}"
  compile "commons-codec:commons-codec:${versions.commonscodec}"
  compile 'com.google.api:api-common:1.8.1'
  compile 'com.google.api:gax:1.45.0'
  compile 'org.threeten:threetenbp:1.3.3'
  compile 'com.google.protobuf:protobuf-java-util:3.7.1'
  compile 'com.google.protobuf:protobuf-java:3.7.1'
  compile 'com.google.code.gson:gson:2.7'
  compile 'com.google.api.grpc:proto-google-common-protos:1.16.0'
  compile 'com.google.api.grpc:proto-google-iam-v1:0.12.0'
  compile 'com.google.cloud:google-cloud-core-http:1.77.0'
  compile 'com.google.auth:google-auth-library-credentials:0.16.1'
  compile 'com.google.auth:google-auth-library-oauth2-http:0.16.1'
  compile 'com.google.oauth-client:google-oauth-client:1.28.0'
  compile 'com.google.api-client:google-api-client:1.28.0'
  compile 'com.google.http-client:google-http-client-appengine:1.29.2'
  compile 'com.google.http-client:google-http-client-jackson2:1.29.2'
  compile 'com.google.api:gax-httpjson:0.62.0'
  compile 'io.grpc:grpc-context:1.12.0'
  compile 'io.opencensus:opencensus-api:0.18.0'
  compile 'io.opencensus:opencensus-contrib-http-util:0.18.0'
  compile 'com.google.apis:google-api-services-storage:v1-rev20190426-1.28.0'
  testCompile project(":plugins:repository-gcs")

  // HACK: javax.xml.bind was removed from default modules in java 9, so we pull the api in here,
  // and whitelist this hack in JarHell
  compile 'javax.xml.bind:jaxb-api:2.2.2'
}

dependencyLicenses {
  mapping from: /aws-java-sdk-.*/, to: 'aws-java-sdk'
  mapping from: /jmespath-java.*/, to: 'aws-java-sdk'
  mapping from: /jackson-.*/, to: 'jackson'
  mapping from: /jaxb-.*/, to: 'jaxb'

  mapping from: /google-cloud-.*/, to: 'google-cloud'
  mapping from: /google-auth-.*/, to: 'google-auth'
  mapping from: /google-http-.*/, to: 'google-http'
  mapping from: /opencensus.*/, to: 'opencensus'
  mapping from: /http.*/, to: 'httpclient'
  mapping from: /protobuf.*/, to: 'protobuf'
  mapping from: /proto-google.*/, to: 'proto-google'
}

test.enabled = false

task s3ThirdPartyTests {
  dependsOn check
}

task gcsThirdPartyTests {
  dependsOn check
}

boolean useS3Fixture = false

String s3PermanentAccessKey = System.getenv("amazon_s3_access_key")
String s3PermanentSecretKey = System.getenv("amazon_s3_secret_key")
String s3PermanentBucket = System.getenv("amazon_s3_bucket")
String s3PermanentBasePath = System.getenv("amazon_s3_base_path")

if (!s3PermanentAccessKey && !s3PermanentSecretKey && !s3PermanentBucket && !s3PermanentBasePath) {
  s3PermanentAccessKey = 's3_integration_test_permanent_access_key'
  s3PermanentSecretKey = 's3_integration_test_permanent_secret_key'
  s3PermanentBucket = 'permanent-bucket-test'
  s3PermanentBasePath = 'integration_test'

  useS3Fixture = true
} else if (!s3PermanentAccessKey || !s3PermanentSecretKey || !s3PermanentBucket || !s3PermanentBasePath) {
  throw new IllegalArgumentException("not all options specified to run against external S3 service as permanent credentials are present")
}

boolean useGCSFixture = false

String gcsServiceAccount = System.getenv("google_storage_service_account")
String gcsBucket = System.getenv("google_storage_bucket")
String gcsBasePath = System.getenv("google_storage_base_path")

if (!gcsServiceAccount && !gcsBucket && !gcsBasePath) {
  gcsServiceAccount = new File(project(':plugins:repository-gcs:qa:google-cloud-storage').buildDir,
          'generated-resources/service_account_test.json').path
  gcsBucket = 'bucket_test'
  gcsBasePath = 'integration_test'

  useGCSFixture = true
} else if (!gcsServiceAccount || !gcsBucket || !gcsBasePath) {
  throw new IllegalArgumentException("not all options specified to run thirdPartyTestGCS against external GCS service are present")
}

def encodedCredentials = {
  Base64.encoder.encodeToString(Files.readAllBytes(file(gcsServiceAccount).toPath()))
}

task thirdPartyTest (type: Test) {
  include '**/*.class'
  
  systemProperty 'tests.security.manager', false

  systemProperty 'test.s3.account', s3PermanentAccessKey
  systemProperty 'test.s3.key', s3PermanentSecretKey
  systemProperty 'test.s3.bucket', s3PermanentBucket
  systemProperty 'test.s3.base', s3PermanentBasePath
  
  systemProperty 'test.google.bucket', gcsBucket
  systemProperty 'test.google.base', gcsBasePath
  nonInputProperties.systemProperty 'test.google.account', "${-> encodedCredentials.call()}"
}

if (useS3Fixture) {
  apply plugin: 'elasticsearch.test.fixtures'

  task writeDockerFile {
    File minioDockerfile = new File("${project.buildDir}/minio-docker/Dockerfile")
    outputs.file(minioDockerfile)
    doLast {
      minioDockerfile.parentFile.mkdirs()
      minioDockerfile.text =
        "FROM minio/minio:RELEASE.2019-01-23T23-18-58Z\n" +
          "RUN mkdir -p /minio/data/${s3PermanentBucket}\n" +
          "ENV MINIO_ACCESS_KEY ${s3PermanentAccessKey}\n" +
          "ENV MINIO_SECRET_KEY ${s3PermanentSecretKey}"
    }
  }

  preProcessFixture {
    dependsOn(writeDockerFile)
  }

  def minioAddress = {
    int minioPort = postProcessFixture.ext."test.fixtures.minio-fixture.tcp.9000"
    assert minioPort > 0
    'http://127.0.0.1:' + minioPort
  }

  thirdPartyTest {
    dependsOn tasks.postProcessFixture
    nonInputProperties.systemProperty 'test.s3.endpoint', "${ -> minioAddress.call() }"
  }

  gradle.taskGraph.whenReady {
    if (it.hasTask(s3ThirdPartyTests)) {
      throw new IllegalStateException("Tried to run third party tests but not all of the necessary environment variables 'amazon_s3_access_key', " +
        "'amazon_s3_secret_key', 'amazon_s3_bucket', and 'amazon_s3_base_path' are set.");
    }
  }
}

if (useGCSFixture) {
  thirdPartyTest.dependsOn(':plugins:repository-gcs:qa:google-cloud-storage:createServiceAccountFile',
          ':plugins:repository-gcs:qa:google-cloud-storage:googleCloudStorageFixture')
  thirdPartyTest.finalizedBy(':plugins:repository-gcs:qa:google-cloud-storage:googleCloudStorageFixture#stop')

  def fixtureEndpoint = {
    "http://${project(':plugins:repository-gcs:qa:google-cloud-storage').googleCloudStorageFixture.addressAndPort}"
  }

  def tokenURI = {
    "http://${project(':plugins:repository-gcs:qa:google-cloud-storage').googleCloudStorageFixture.addressAndPort}/o/oauth2/token"
  }

  thirdPartyTest {
    nonInputProperties.systemProperty 'test.google.endpoint', "${-> fixtureEndpoint.call()}"
    nonInputProperties.systemProperty 'test.google.tokenURI', "${-> tokenURI.call()}"
  }

  gradle.taskGraph.whenReady {
    if (it.hasTask(gcsThirdPartyTests)) {
      throw new IllegalStateException("Tried to run third party tests but not all of the necessary environment variables 'google_storage_service_account', " +
              "'google_storage_bucket', 'google_storage_base_path' are set.")
    }
  }
}

task unpackArchive(dependsOn: tasks.assemble, type: Copy) {
  from tarTree("${project.buildDir}/snapshot-tool-${project.version}.tgz")
  into "${project.buildDir}"
}

task smokeTest(type: Exec) {
  dependsOn unpackArchive
  onlyIf { ElasticsearchDistribution.CURRENT_PLATFORM != ElasticsearchDistribution.Platform.WINDOWS }
  commandLine "${project.buildDir}/snapshot-tool-${project.version}/bin/elasticsearch-snapshot", "-h"
}

check.dependsOn(thirdPartyTest)
check.dependsOn(smokeTest)

def vendorPath = Paths.get("${project.buildDir}/libs/vendor")

task copyRuntimeLibs(type: Copy) {
  doFirst {
    Files.createDirectories(vendorPath)
  }
  into vendorPath.toString()
  from configurations.compile, configurations.runtime
}

task buildTarArchive(dependsOn: copyRuntimeLibs, type: Tar) {
  compression Compression.GZIP
  archiveBaseName.set('snapshot-tool')
  destinationDirectory.set(project.buildDir)
  into "snapshot-tool-${version}", {
    into "bin", {
      from file("${project.projectDir}/src/bin")
    }
    into "libs", {
      from jar.getArchiveFile()
      from file("${project.buildDir}/libs")
    }
  }
}

assemble.dependsOn(buildTarArchive)

thirdPartyAudit.ignoreMissingClasses(
  // classes are missing
  'javax.activation.DataHandler',
  'javax.servlet.ServletContextEvent',
  'javax.servlet.ServletContextListener',
  'org.apache.avalon.framework.logger.Logger',
  'org.apache.log.Hierarchy',
  'org.apache.log.Logger',
  'software.amazon.ion.IonReader',
  'software.amazon.ion.IonSystem',
  'software.amazon.ion.IonType',
  'software.amazon.ion.IonWriter',
  'software.amazon.ion.Timestamp',
  'software.amazon.ion.system.IonBinaryWriterBuilder',
  'software.amazon.ion.system.IonSystemBuilder',
  'software.amazon.ion.system.IonTextWriterBuilder',
  'software.amazon.ion.system.IonWriterBuilder',
  // We don't use the kms dependency
  'com.amazonaws.services.kms.AWSKMS',
  'com.amazonaws.services.kms.AWSKMSClient',
  'com.amazonaws.services.kms.model.DecryptRequest',
  'com.amazonaws.services.kms.model.DecryptResult',
  'com.amazonaws.services.kms.model.EncryptRequest',
  'com.amazonaws.services.kms.model.EncryptResult',
  'com.amazonaws.services.kms.model.GenerateDataKeyRequest',
  'com.amazonaws.services.kms.model.GenerateDataKeyResult',
  
  'com.google.appengine.api.datastore.Blob',
  'com.google.appengine.api.datastore.DatastoreService',
  'com.google.appengine.api.datastore.DatastoreServiceFactory',
  'com.google.appengine.api.datastore.Entity',
  'com.google.appengine.api.datastore.Key',
  'com.google.appengine.api.datastore.KeyFactory',
  'com.google.appengine.api.datastore.PreparedQuery',
  'com.google.appengine.api.datastore.Query',
  'com.google.appengine.api.memcache.Expiration',
  'com.google.appengine.api.memcache.MemcacheService',
  'com.google.appengine.api.memcache.MemcacheServiceFactory',
  'com.google.appengine.api.urlfetch.FetchOptions$Builder',
  'com.google.appengine.api.urlfetch.FetchOptions',
  'com.google.appengine.api.urlfetch.HTTPHeader',
  'com.google.appengine.api.urlfetch.HTTPMethod',
  'com.google.appengine.api.urlfetch.HTTPRequest',
  'com.google.appengine.api.urlfetch.HTTPResponse',
  'com.google.appengine.api.urlfetch.URLFetchService',
  'com.google.appengine.api.urlfetch.URLFetchServiceFactory',
  // commons-logging optional dependencies
  'org.apache.avalon.framework.logger.Logger',
  'org.apache.log.Hierarchy',
  'org.apache.log.Logger',
  // commons-logging provided dependencies
  'javax.servlet.ServletContextEvent',
  'javax.servlet.ServletContextListener'
)

thirdPartyAudit.ignoreViolations(
  // uses internal java api: sun.misc.Unsafe
  'com.google.protobuf.UnsafeUtil',
  'com.google.protobuf.UnsafeUtil$1',
  'com.google.protobuf.UnsafeUtil$JvmMemoryAccessor',
  'com.google.protobuf.UnsafeUtil$MemoryAccessor',
  'com.google.common.cache.Striped64',
  'com.google.common.cache.Striped64$1',
  'com.google.common.cache.Striped64$Cell',
  'com.google.common.hash.Striped64',
  'com.google.common.hash.Striped64$1',
  'com.google.common.hash.Striped64$Cell',
  'com.google.common.hash.LittleEndianByteArray$UnsafeByteArray',
  'com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$1',
  'com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$2',
  'com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$3',
  'com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper',
  'com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper$1',
  'com.google.common.hash.LittleEndianByteArray$UnsafeByteArray',
  'com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator',
  'com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator$1',
)
