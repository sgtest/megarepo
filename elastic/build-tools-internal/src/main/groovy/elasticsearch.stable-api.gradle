import org.apache.tools.ant.taskdefs.condition.Os
import org.elasticsearch.gradle.Version
import org.elasticsearch.gradle.VersionProperties
import org.elasticsearch.gradle.internal.BwcVersions
import org.elasticsearch.gradle.internal.JarApiComparisonTask
import org.elasticsearch.gradle.internal.info.BuildParams

import static org.elasticsearch.gradle.internal.InternalDistributionBwcSetupPlugin.buildBwcTaskName

configurations {
  newJar {
    transitive = false
  }
}

dependencies {
  newJar project(":libs:${project.name}")
}

BuildParams.bwcVersions.withIndexCompatible({ it.onOrAfter(Version.fromString(ext.stableApiSince))
  && it != VersionProperties.elasticsearchVersion
}) { bwcVersion, baseName ->

  BwcVersions.UnreleasedVersionInfo unreleasedVersion = BuildParams.bwcVersions.unreleasedInfo(bwcVersion)

  configurations {
    "oldJar${baseName}" {
      transitive = false
    }
  }

  dependencies {
    if (unreleasedVersion) {
      // For unreleased snapshot versions, build them from source
      "oldJar${baseName}"(files(project(unreleasedVersion.gradleProjectPath).tasks.named(buildBwcTaskName(project.name))))
    } else {
      // For released versions, download it
      "oldJar${baseName}"("org.elasticsearch:${project.name}:${bwcVersion}")
    }
  }

  def jarApiComparisonTask = tasks.register(bwcTaskName(bwcVersion), JarApiComparisonTask) {
    oldJar = configurations."oldJar${baseName}"
    newJar = configurations.newJar
  }

  jarApiComparisonTask.configure {
    onlyIf {
      !Os.isFamily(Os.FAMILY_WINDOWS)
    }
  }
}
