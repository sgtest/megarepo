// ðŸ”” IMPORTANT: Be VERY careful not to introduce breaking changes to this
// spec - raw protocol buffer wire format messages are persisted to database
// as a cache, and Sourcegraph instances rely on this format to emit telemetry
// to the managed Sourcegraph Telemetry Gateway service.
//
// Tests in ./internal/telemetrygateway/backcompat_test.go can be used to
// assert compatibility with snapshots created by older versions of this spec.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        (unknown)
// source: telemetrygateway.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Identifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Identifier:
	//
	//	*Identifier_LicensedInstance
	//	*Identifier_UnlicensedInstance
	//	*Identifier_ManagedService
	Identifier isIdentifier_Identifier `protobuf_oneof:"identifier"`
}

func (x *Identifier) Reset() {
	*x = Identifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetrygateway_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifier) ProtoMessage() {}

func (x *Identifier) ProtoReflect() protoreflect.Message {
	mi := &file_telemetrygateway_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifier.ProtoReflect.Descriptor instead.
func (*Identifier) Descriptor() ([]byte, []int) {
	return file_telemetrygateway_proto_rawDescGZIP(), []int{0}
}

func (m *Identifier) GetIdentifier() isIdentifier_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (x *Identifier) GetLicensedInstance() *Identifier_LicensedInstanceIdentifier {
	if x, ok := x.GetIdentifier().(*Identifier_LicensedInstance); ok {
		return x.LicensedInstance
	}
	return nil
}

func (x *Identifier) GetUnlicensedInstance() *Identifier_UnlicensedInstanceIdentifier {
	if x, ok := x.GetIdentifier().(*Identifier_UnlicensedInstance); ok {
		return x.UnlicensedInstance
	}
	return nil
}

func (x *Identifier) GetManagedService() *Identifier_ManagedServiceIdentifier {
	if x, ok := x.GetIdentifier().(*Identifier_ManagedService); ok {
		return x.ManagedService
	}
	return nil
}

type isIdentifier_Identifier interface {
	isIdentifier_Identifier()
}

type Identifier_LicensedInstance struct {
	// A licensed Sourcegraph instance.
	LicensedInstance *Identifier_LicensedInstanceIdentifier `protobuf:"bytes,1,opt,name=licensed_instance,json=licensedInstance,proto3,oneof"`
}

type Identifier_UnlicensedInstance struct {
	// An unlicensed Sourcegraph instance.
	UnlicensedInstance *Identifier_UnlicensedInstanceIdentifier `protobuf:"bytes,2,opt,name=unlicensed_instance,json=unlicensedInstance,proto3,oneof"`
}

type Identifier_ManagedService struct {
	// A service operated and managed by the Sourcegraph team, for example
	// a service deployed by MSP: https://handbook.sourcegraph.com/departments/engineering/teams/core-services/managed-services/platform/
	//
	// Valid SAMS client credentials are required to publish events under a
	// managed service identifier. The required scope is
	// 'telemetry_gateway::events::publish'. See go/sams-client-credentials and
	// go/sams-token-scopes for more information.
	ManagedService *Identifier_ManagedServiceIdentifier `protobuf:"bytes,3,opt,name=managed_service,json=managedService,proto3,oneof"`
}

func (*Identifier_LicensedInstance) isIdentifier_Identifier() {}

func (*Identifier_UnlicensedInstance) isIdentifier_Identifier() {}

func (*Identifier_ManagedService) isIdentifier_Identifier() {}

type RecordEventsRequestMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Client-provided request identifier for diagnostics purposes.
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Telemetry publisher self-identification - for example, a Sourcegraph
	// instance of some other kind of service.
	Identifier *Identifier `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (x *RecordEventsRequestMetadata) Reset() {
	*x = RecordEventsRequestMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetrygateway_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordEventsRequestMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordEventsRequestMetadata) ProtoMessage() {}

func (x *RecordEventsRequestMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_telemetrygateway_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordEventsRequestMetadata.ProtoReflect.Descriptor instead.
func (*RecordEventsRequestMetadata) Descriptor() ([]byte, []int) {
	return file_telemetrygateway_proto_rawDescGZIP(), []int{1}
}

func (x *RecordEventsRequestMetadata) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *RecordEventsRequestMetadata) GetIdentifier() *Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

type RecordEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*RecordEventsRequest_Metadata
	//	*RecordEventsRequest_Events
	Payload isRecordEventsRequest_Payload `protobuf_oneof:"payload"`
}

func (x *RecordEventsRequest) Reset() {
	*x = RecordEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetrygateway_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordEventsRequest) ProtoMessage() {}

func (x *RecordEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetrygateway_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordEventsRequest.ProtoReflect.Descriptor instead.
func (*RecordEventsRequest) Descriptor() ([]byte, []int) {
	return file_telemetrygateway_proto_rawDescGZIP(), []int{2}
}

func (m *RecordEventsRequest) GetPayload() isRecordEventsRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *RecordEventsRequest) GetMetadata() *RecordEventsRequestMetadata {
	if x, ok := x.GetPayload().(*RecordEventsRequest_Metadata); ok {
		return x.Metadata
	}
	return nil
}

func (x *RecordEventsRequest) GetEvents() *RecordEventsRequest_EventsPayload {
	if x, ok := x.GetPayload().(*RecordEventsRequest_Events); ok {
		return x.Events
	}
	return nil
}

type isRecordEventsRequest_Payload interface {
	isRecordEventsRequest_Payload()
}

type RecordEventsRequest_Metadata struct {
	// Metadata about the events being recorded.
	Metadata *RecordEventsRequestMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,oneof"`
}

type RecordEventsRequest_Events struct {
	// Batch of events to record in a single request. Clients should aim to
	// batch large event backlogs into a series of smaller requests in the
	// RecordEvents stream, being mindful of common limits in individual message
	// sizes: https://protobuf.dev/programming-guides/api/#bound-req-res-sizes
	Events *RecordEventsRequest_EventsPayload `protobuf:"bytes,2,opt,name=events,proto3,oneof"`
}

func (*RecordEventsRequest_Metadata) isRecordEventsRequest_Payload() {}

func (*RecordEventsRequest_Events) isRecordEventsRequest_Payload() {}

type RecordEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IDs of all events that were successfully recorded in the request.
	//
	// Note that if succeeded_events is a subset of events that were submitted,
	// then some events failed to record and should be retried.
	SucceededEvents []string `protobuf:"bytes,1,rep,name=succeeded_events,json=succeededEvents,proto3" json:"succeeded_events,omitempty"`
}

func (x *RecordEventsResponse) Reset() {
	*x = RecordEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetrygateway_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordEventsResponse) ProtoMessage() {}

func (x *RecordEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetrygateway_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordEventsResponse.ProtoReflect.Descriptor instead.
func (*RecordEventsResponse) Descriptor() ([]byte, []int) {
	return file_telemetrygateway_proto_rawDescGZIP(), []int{3}
}

func (x *RecordEventsResponse) GetSucceededEvents() []string {
	if x != nil {
		return x.SucceededEvents
	}
	return nil
}

type RecordEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata about the events being recorded.
	Metadata *RecordEventsRequestMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Event to record.
	Event *Event `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *RecordEventRequest) Reset() {
	*x = RecordEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetrygateway_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordEventRequest) ProtoMessage() {}

func (x *RecordEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetrygateway_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordEventRequest.ProtoReflect.Descriptor instead.
func (*RecordEventRequest) Descriptor() ([]byte, []int) {
	return file_telemetrygateway_proto_rawDescGZIP(), []int{4}
}

func (x *RecordEventRequest) GetMetadata() *RecordEventsRequestMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RecordEventRequest) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type RecordEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RecordEventResponse) Reset() {
	*x = RecordEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetrygateway_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordEventResponse) ProtoMessage() {}

func (x *RecordEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetrygateway_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordEventResponse.ProtoReflect.Descriptor instead.
func (*RecordEventResponse) Descriptor() ([]byte, []int) {
	return file_telemetrygateway_proto_rawDescGZIP(), []int{5}
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Generated ID of the event, currently expected to be UUID v4.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Timestamp of when the original event was recorded.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Feature associated with the event in camelCase, e.g. 'myFeature'.
	Feature string `protobuf:"bytes,3,opt,name=feature,proto3" json:"feature,omitempty"`
	// Action associated with the event in camelCase, e.g. 'pageView'.
	Action string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
	// Source of the event.
	Source *EventSource `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
	// Parameters of the event.
	Parameters *EventParameters `protobuf:"bytes,6,opt,name=parameters,proto3" json:"parameters,omitempty"`
	// Optional user associated with the event.
	//
	// This field should be hydrated by the Sourcegraph server, and not provided
	// by clients.
	User *EventUser `protobuf:"bytes,7,opt,name=user,proto3,oneof" json:"user,omitempty"`
	// Optional feature flags configured in the context of the event.
	FeatureFlags *EventFeatureFlags `protobuf:"bytes,8,opt,name=feature_flags,json=featureFlags,proto3,oneof" json:"feature_flags,omitempty"`
	// Optional marketing campaign tracking parameters.
	//
	// ðŸš¨ SECURITY: This metadata is NEVER exported from single-tenant Sourcegraph
	// instances, and is only exported for events tracked in the public
	// Sourcegraph.com instance and managed services.
	MarketingTracking *EventMarketingTracking `protobuf:"bytes,9,opt,name=marketing_tracking,json=marketingTracking,proto3,oneof" json:"marketing_tracking,omitempty"`
	// Optional metadata identifying the interaction that generated the event.
	Interaction *EventInteraction `protobuf:"bytes,10,opt,name=interaction,proto3,oneof" json:"interaction,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetrygateway_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_telemetrygateway_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_telemetrygateway_proto_rawDescGZIP(), []int{6}
}

func (x *Event) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Event) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Event) GetFeature() string {
	if x != nil {
		return x.Feature
	}
	return ""
}

func (x *Event) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *Event) GetSource() *EventSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Event) GetParameters() *EventParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *Event) GetUser() *EventUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Event) GetFeatureFlags() *EventFeatureFlags {
	if x != nil {
		return x.FeatureFlags
	}
	return nil
}

func (x *Event) GetMarketingTracking() *EventMarketingTracking {
	if x != nil {
		return x.MarketingTracking
	}
	return nil
}

func (x *Event) GetInteraction() *EventInteraction {
	if x != nil {
		return x.Interaction
	}
	return nil
}

type EventSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information about the server that is publishing the event, based on
	// RecordEventsRequestMetadata.Identifier.
	Server *EventSource_Server `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	// Information about the client that generated the event.
	Client *EventSource_Client `protobuf:"bytes,2,opt,name=client,proto3,oneof" json:"client,omitempty"`
}

func (x *EventSource) Reset() {
	*x = EventSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetrygateway_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSource) ProtoMessage() {}

func (x *EventSource) ProtoReflect() protoreflect.Message {
	mi := &file_telemetrygateway_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSource.ProtoReflect.Descriptor instead.
func (*EventSource) Descriptor() ([]byte, []int) {
	return file_telemetrygateway_proto_rawDescGZIP(), []int{7}
}

func (x *EventSource) GetServer() *EventSource_Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *EventSource) GetClient() *EventSource_Client {
	if x != nil {
		return x.Client
	}
	return nil
}

type EventParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of the event parameters, used for indicating the "shape" of this
	// event's metadata, beginning at 0. Useful for denoting if the shape of
	// metadata has changed in any way.
	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// DEPRECATED, legacy metadata format that only accepted int64 - use the new
	// 'metadata' field instead, which accepts float values. Values sent through
	// this proto field will be merged into the new metadata attributes.
	//
	// We don't use a [deprecated = true] tag because we use this field to handle
	// accepting exporters sending metadata in this format.
	LegacyMetadata map[string]int64 `protobuf:"bytes,2,rep,name=legacy_metadata,json=legacyMetadata,proto3" json:"legacy_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Strictly typed metadata, restricted to integer values to avoid accidentally
	// exporting sensitive or private data.
	Metadata map[string]float64 `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	// Additional potentially sensitive metadata - i.e. not restricted to integer
	// values.
	//
	// ðŸš¨ SECURITY: This metadata is NOT exported from instances by default, as it
	// can contain arbitrarily-shaped data that may accidentally contain sensitive
	// or private contents.
	//
	// This metadata is only exported on an allowlist basis based on terms of
	// use agreements and combinations of event feature and action, alongside
	// careful audit of callsites.
	PrivateMetadata *structpb.Struct `protobuf:"bytes,3,opt,name=private_metadata,json=privateMetadata,proto3,oneof" json:"private_metadata,omitempty"`
	// Optional billing-related metadata.
	BillingMetadata *EventBillingMetadata `protobuf:"bytes,4,opt,name=billing_metadata,json=billingMetadata,proto3,oneof" json:"billing_metadata,omitempty"`
}

func (x *EventParameters) Reset() {
	*x = EventParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetrygateway_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventParameters) ProtoMessage() {}

func (x *EventParameters) ProtoReflect() protoreflect.Message {
	mi := &file_telemetrygateway_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventParameters.ProtoReflect.Descriptor instead.
func (*EventParameters) Descriptor() ([]byte, []int) {
	return file_telemetrygateway_proto_rawDescGZIP(), []int{8}
}

func (x *EventParameters) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *EventParameters) GetLegacyMetadata() map[string]int64 {
	if x != nil {
		return x.LegacyMetadata
	}
	return nil
}

func (x *EventParameters) GetMetadata() map[string]float64 {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *EventParameters) GetPrivateMetadata() *structpb.Struct {
	if x != nil {
		return x.PrivateMetadata
	}
	return nil
}

func (x *EventParameters) GetBillingMetadata() *EventBillingMetadata {
	if x != nil {
		return x.BillingMetadata
	}
	return nil
}

type EventBillingMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Billing product ID associated with the event.
	Product string `protobuf:"bytes,1,opt,name=product,proto3" json:"product,omitempty"`
	// Billing category ID the event falls into.
	Category string `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *EventBillingMetadata) Reset() {
	*x = EventBillingMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetrygateway_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventBillingMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBillingMetadata) ProtoMessage() {}

func (x *EventBillingMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_telemetrygateway_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBillingMetadata.ProtoReflect.Descriptor instead.
func (*EventBillingMetadata) Descriptor() ([]byte, []int) {
	return file_telemetrygateway_proto_rawDescGZIP(), []int{9}
}

func (x *EventBillingMetadata) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *EventBillingMetadata) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

type EventUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sourcegraph instance database user ID of the user. User IDs are specific to
	// a Sourcegraph instance, and are not universal across Sourcegraph instances.
	//
	// We use an int64 as an ID because in Sourcegraph, database user IDs are
	// always integers.
	UserId *int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	// Randomized unique identifier representing the user (typically stored in
	// localstorage in web clients, or similar mechanisms elsewhere). This is
	// often used for unauthenticated users, but can persist to authenticated
	// users as well.
	AnonymousUserId *string `protobuf:"bytes,2,opt,name=anonymous_user_id,json=anonymousUserId,proto3,oneof" json:"anonymous_user_id,omitempty"`
	// Sourcegraph Accounts Management System (SAMS) account associated with the
	// user, represented by a SAMS external user ID in a UUID format. This is only
	// valid for services leveraging SAMS as an identity provider - in other words,
	// traditional Sourcegraph instances will not provide this.
	//
	// Learn more about SAMS: https://handbook.sourcegraph.com/departments/engineering/teams/core-services/sams
	SamsExternalId *string `protobuf:"bytes,3,opt,name=sams_external_id,json=samsExternalId,proto3,oneof" json:"sams_external_id,omitempty"`
}

func (x *EventUser) Reset() {
	*x = EventUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetrygateway_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventUser) ProtoMessage() {}

func (x *EventUser) ProtoReflect() protoreflect.Message {
	mi := &file_telemetrygateway_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventUser.ProtoReflect.Descriptor instead.
func (*EventUser) Descriptor() ([]byte, []int) {
	return file_telemetrygateway_proto_rawDescGZIP(), []int{10}
}

func (x *EventUser) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *EventUser) GetAnonymousUserId() string {
	if x != nil && x.AnonymousUserId != nil {
		return *x.AnonymousUserId
	}
	return ""
}

func (x *EventUser) GetSamsExternalId() string {
	if x != nil && x.SamsExternalId != nil {
		return *x.SamsExternalId
	}
	return ""
}

type EventFeatureFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Evaluated feature flags. In Soucegraph we currently only support boolean
	// feature flags, but in the API we allow arbitrary string values for future
	// extensibility.
	//
	// This field should be hydrated by the Sourcegraph server, and not provided
	// by clients.
	Flags map[string]string `protobuf:"bytes,1,rep,name=flags,proto3" json:"flags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EventFeatureFlags) Reset() {
	*x = EventFeatureFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetrygateway_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventFeatureFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventFeatureFlags) ProtoMessage() {}

func (x *EventFeatureFlags) ProtoReflect() protoreflect.Message {
	mi := &file_telemetrygateway_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventFeatureFlags.ProtoReflect.Descriptor instead.
func (*EventFeatureFlags) Descriptor() ([]byte, []int) {
	return file_telemetrygateway_proto_rawDescGZIP(), []int{11}
}

func (x *EventFeatureFlags) GetFlags() map[string]string {
	if x != nil {
		return x.Flags
	}
	return nil
}

// Marketing campaign tracking metadata.
//
// ðŸš¨ SECURITY: This metadata is NEVER exported from single-tenant Sourcegraph
// instances, and is only exported for events tracked in the public
// Sourcegraph.com instance and managed services.
type EventMarketingTracking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL the event occurred on.
	Url *string `protobuf:"bytes,1,opt,name=url,proto3,oneof" json:"url,omitempty"`
	// Initial URL the user landed on.
	FirstSourceUrl *string `protobuf:"bytes,2,opt,name=first_source_url,json=firstSourceUrl,proto3,oneof" json:"first_source_url,omitempty"`
	// Cohort ID to identify the user as part of a specific A/B test.
	CohortId *string `protobuf:"bytes,3,opt,name=cohort_id,json=cohortId,proto3,oneof" json:"cohort_id,omitempty"`
	// Referrer URL that refers the user to Sourcegraph.
	Referrer *string `protobuf:"bytes,4,opt,name=referrer,proto3,oneof" json:"referrer,omitempty"`
	// Last source URL visited by the user.
	LastSourceUrl *string `protobuf:"bytes,5,opt,name=last_source_url,json=lastSourceUrl,proto3,oneof" json:"last_source_url,omitempty"`
	// Device session ID to identify the user's session.
	DeviceSessionId *string `protobuf:"bytes,6,opt,name=device_session_id,json=deviceSessionId,proto3,oneof" json:"device_session_id,omitempty"`
	// Session referrer URL for the user.
	SessionReferrer *string `protobuf:"bytes,7,opt,name=session_referrer,json=sessionReferrer,proto3,oneof" json:"session_referrer,omitempty"`
	// First URL the user visited in their current session.
	SessionFirstUrl *string `protobuf:"bytes,8,opt,name=session_first_url,json=sessionFirstUrl,proto3,oneof" json:"session_first_url,omitempty"`
}

func (x *EventMarketingTracking) Reset() {
	*x = EventMarketingTracking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetrygateway_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventMarketingTracking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventMarketingTracking) ProtoMessage() {}

func (x *EventMarketingTracking) ProtoReflect() protoreflect.Message {
	mi := &file_telemetrygateway_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventMarketingTracking.ProtoReflect.Descriptor instead.
func (*EventMarketingTracking) Descriptor() ([]byte, []int) {
	return file_telemetrygateway_proto_rawDescGZIP(), []int{12}
}

func (x *EventMarketingTracking) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *EventMarketingTracking) GetFirstSourceUrl() string {
	if x != nil && x.FirstSourceUrl != nil {
		return *x.FirstSourceUrl
	}
	return ""
}

func (x *EventMarketingTracking) GetCohortId() string {
	if x != nil && x.CohortId != nil {
		return *x.CohortId
	}
	return ""
}

func (x *EventMarketingTracking) GetReferrer() string {
	if x != nil && x.Referrer != nil {
		return *x.Referrer
	}
	return ""
}

func (x *EventMarketingTracking) GetLastSourceUrl() string {
	if x != nil && x.LastSourceUrl != nil {
		return *x.LastSourceUrl
	}
	return ""
}

func (x *EventMarketingTracking) GetDeviceSessionId() string {
	if x != nil && x.DeviceSessionId != nil {
		return *x.DeviceSessionId
	}
	return ""
}

func (x *EventMarketingTracking) GetSessionReferrer() string {
	if x != nil && x.SessionReferrer != nil {
		return *x.SessionReferrer
	}
	return ""
}

func (x *EventMarketingTracking) GetSessionFirstUrl() string {
	if x != nil && x.SessionFirstUrl != nil {
		return *x.SessionFirstUrl
	}
	return ""
}

type EventInteraction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OpenTelemetry trace ID representing the interaction associated with the event.
	TraceId *string `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3,oneof" json:"trace_id,omitempty"`
	// Custom interaction ID representing the interaction associated with the event.
	InteractionId *string `protobuf:"bytes,2,opt,name=interaction_id,json=interactionId,proto3,oneof" json:"interaction_id,omitempty"`
	// Geolocation associated with the interaction, typically inferred from the
	// originating client's IP address (which we do not collect).
	Geolocation *EventInteraction_Geolocation `protobuf:"bytes,3,opt,name=geolocation,proto3,oneof" json:"geolocation,omitempty"`
}

func (x *EventInteraction) Reset() {
	*x = EventInteraction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetrygateway_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventInteraction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventInteraction) ProtoMessage() {}

func (x *EventInteraction) ProtoReflect() protoreflect.Message {
	mi := &file_telemetrygateway_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventInteraction.ProtoReflect.Descriptor instead.
func (*EventInteraction) Descriptor() ([]byte, []int) {
	return file_telemetrygateway_proto_rawDescGZIP(), []int{13}
}

func (x *EventInteraction) GetTraceId() string {
	if x != nil && x.TraceId != nil {
		return *x.TraceId
	}
	return ""
}

func (x *EventInteraction) GetInteractionId() string {
	if x != nil && x.InteractionId != nil {
		return *x.InteractionId
	}
	return ""
}

func (x *EventInteraction) GetGeolocation() *EventInteraction_Geolocation {
	if x != nil {
		return x.Geolocation
	}
	return nil
}

type Identifier_LicensedInstanceIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// License key configured in the Sourcegraph instance emitting the event.
	LicenseKey string `protobuf:"bytes,1,opt,name=license_key,json=licenseKey,proto3" json:"license_key,omitempty"`
	// Self-reported Sourcegraph instance identifier.
	InstanceId string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// Instance external URL defined in the instance site configuration.
	ExternalUrl string `protobuf:"bytes,3,opt,name=external_url,json=externalUrl,proto3" json:"external_url,omitempty"`
}

func (x *Identifier_LicensedInstanceIdentifier) Reset() {
	*x = Identifier_LicensedInstanceIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetrygateway_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identifier_LicensedInstanceIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifier_LicensedInstanceIdentifier) ProtoMessage() {}

func (x *Identifier_LicensedInstanceIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_telemetrygateway_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifier_LicensedInstanceIdentifier.ProtoReflect.Descriptor instead.
func (*Identifier_LicensedInstanceIdentifier) Descriptor() ([]byte, []int) {
	return file_telemetrygateway_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Identifier_LicensedInstanceIdentifier) GetLicenseKey() string {
	if x != nil {
		return x.LicenseKey
	}
	return ""
}

func (x *Identifier_LicensedInstanceIdentifier) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *Identifier_LicensedInstanceIdentifier) GetExternalUrl() string {
	if x != nil {
		return x.ExternalUrl
	}
	return ""
}

type Identifier_UnlicensedInstanceIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Self-reported Sourcegraph instance identifier.
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// Instance external URL defined in the instance site configuration.
	ExternalUrl string `protobuf:"bytes,2,opt,name=external_url,json=externalUrl,proto3" json:"external_url,omitempty"`
}

func (x *Identifier_UnlicensedInstanceIdentifier) Reset() {
	*x = Identifier_UnlicensedInstanceIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetrygateway_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identifier_UnlicensedInstanceIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifier_UnlicensedInstanceIdentifier) ProtoMessage() {}

func (x *Identifier_UnlicensedInstanceIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_telemetrygateway_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifier_UnlicensedInstanceIdentifier.ProtoReflect.Descriptor instead.
func (*Identifier_UnlicensedInstanceIdentifier) Descriptor() ([]byte, []int) {
	return file_telemetrygateway_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Identifier_UnlicensedInstanceIdentifier) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *Identifier_UnlicensedInstanceIdentifier) GetExternalUrl() string {
	if x != nil {
		return x.ExternalUrl
	}
	return ""
}

type Identifier_ManagedServiceIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Self-reported service identifier, for example 'my-service'.
	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// Self-reported service environment, for example 'prod' or 'dev'.
	ServiceEnvironment *string `protobuf:"bytes,2,opt,name=service_environment,json=serviceEnvironment,proto3,oneof" json:"service_environment,omitempty"`
}

func (x *Identifier_ManagedServiceIdentifier) Reset() {
	*x = Identifier_ManagedServiceIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetrygateway_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identifier_ManagedServiceIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifier_ManagedServiceIdentifier) ProtoMessage() {}

func (x *Identifier_ManagedServiceIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_telemetrygateway_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifier_ManagedServiceIdentifier.ProtoReflect.Descriptor instead.
func (*Identifier_ManagedServiceIdentifier) Descriptor() ([]byte, []int) {
	return file_telemetrygateway_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Identifier_ManagedServiceIdentifier) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *Identifier_ManagedServiceIdentifier) GetServiceEnvironment() string {
	if x != nil && x.ServiceEnvironment != nil {
		return *x.ServiceEnvironment
	}
	return ""
}

type RecordEventsRequest_EventsPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *RecordEventsRequest_EventsPayload) Reset() {
	*x = RecordEventsRequest_EventsPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetrygateway_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordEventsRequest_EventsPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordEventsRequest_EventsPayload) ProtoMessage() {}

func (x *RecordEventsRequest_EventsPayload) ProtoReflect() protoreflect.Message {
	mi := &file_telemetrygateway_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordEventsRequest_EventsPayload.ProtoReflect.Descriptor instead.
func (*RecordEventsRequest_EventsPayload) Descriptor() ([]byte, []int) {
	return file_telemetrygateway_proto_rawDescGZIP(), []int{2, 0}
}

func (x *RecordEventsRequest_EventsPayload) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type EventSource_Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of the server emitting the event, corresponding to
	// RecordEventsRequestMetadata.Identifier. For example, if the Identifier
	// indicates the publisher is a Sourcegraph instance, the version represents
	// the version of the Sourcegraph server.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *EventSource_Server) Reset() {
	*x = EventSource_Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetrygateway_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventSource_Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSource_Server) ProtoMessage() {}

func (x *EventSource_Server) ProtoReflect() protoreflect.Message {
	mi := &file_telemetrygateway_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSource_Server.ProtoReflect.Descriptor instead.
func (*EventSource_Server) Descriptor() ([]byte, []int) {
	return file_telemetrygateway_proto_rawDescGZIP(), []int{7, 0}
}

func (x *EventSource_Server) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type EventSource_Client struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source client of the event.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Version of the client.
	Version *string `protobuf:"bytes,2,opt,name=version,proto3,oneof" json:"version,omitempty"`
}

func (x *EventSource_Client) Reset() {
	*x = EventSource_Client{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetrygateway_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventSource_Client) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSource_Client) ProtoMessage() {}

func (x *EventSource_Client) ProtoReflect() protoreflect.Message {
	mi := &file_telemetrygateway_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSource_Client.ProtoReflect.Descriptor instead.
func (*EventSource_Client) Descriptor() ([]byte, []int) {
	return file_telemetrygateway_proto_rawDescGZIP(), []int{7, 1}
}

func (x *EventSource_Client) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventSource_Client) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

type EventInteraction_Geolocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Inferred ISO 3166-1 alpha-2 or alpha-3 country code
	CountryCode string `protobuf:"bytes,1,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
}

func (x *EventInteraction_Geolocation) Reset() {
	*x = EventInteraction_Geolocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetrygateway_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventInteraction_Geolocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventInteraction_Geolocation) ProtoMessage() {}

func (x *EventInteraction_Geolocation) ProtoReflect() protoreflect.Message {
	mi := &file_telemetrygateway_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventInteraction_Geolocation.ProtoReflect.Descriptor instead.
func (*EventInteraction_Geolocation) Descriptor() ([]byte, []int) {
	return file_telemetrygateway_proto_rawDescGZIP(), []int{13, 0}
}

func (x *EventInteraction_Geolocation) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

var File_telemetrygateway_proto protoreflect.FileDescriptor

var file_telemetrygateway_proto_rawDesc = []byte{
	0x0a, 0x16, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcd, 0x05, 0x0a,
	0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x69, 0x0a, 0x11, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x10, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x6f, 0x0a, 0x13, 0x75, 0x6e, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x12, 0x75, 0x6e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x81, 0x01, 0x0a,
	0x1a, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x72, 0x6c,
	0x1a, 0x62, 0x0a, 0x1c, 0x55, 0x6e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x55, 0x72, 0x6c, 0x1a, 0x87, 0x01, 0x0a, 0x18, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x34, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x7d, 0x0a, 0x1b,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x87, 0x02, 0x0a, 0x13,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x43, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x41, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22,
	0x15, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xff, 0x04, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x0d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x48, 0x01, 0x52, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x5f, 0x0a, 0x12, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x48, 0x02, 0x52, 0x11, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x03, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8c, 0x02, 0x0a, 0x0b, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x06, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a,
	0x22, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x1a, 0x47, 0x0a, 0x06, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xac, 0x04, 0x0a, 0x0f, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x0f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x47, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01,
	0x01, 0x12, 0x59, 0x0a, 0x10, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x01, 0x52, 0x0f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x1a, 0x41, 0x0a, 0x13,
	0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4c, 0x0a, 0x14, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x22, 0xc0, 0x01, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x11, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0f, 0x61,
	0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x10, 0x73, 0x61, 0x6d, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0e, 0x73,
	0x61, 0x6d, 0x73, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x61, 0x6d, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x47, 0x0a,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xed, 0x03, 0x0a, 0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x15, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x63, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52,
	0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x55, 0x72, 0x6c,
	0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x75, 0x72, 0x6c,
	0x22, 0x9a, 0x02, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x58, 0x0a, 0x0b, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65,
	0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x0b, 0x67, 0x65, 0x6f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x1a, 0x30, 0x0a, 0x0b, 0x47,
	0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0xe9, 0x01,
	0x0a, 0x18, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x79, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x69, 0x0a, 0x0c, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x62, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f,
	0x6c, 0x69, 0x62, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_telemetrygateway_proto_rawDescOnce sync.Once
	file_telemetrygateway_proto_rawDescData = file_telemetrygateway_proto_rawDesc
)

func file_telemetrygateway_proto_rawDescGZIP() []byte {
	file_telemetrygateway_proto_rawDescOnce.Do(func() {
		file_telemetrygateway_proto_rawDescData = protoimpl.X.CompressGZIP(file_telemetrygateway_proto_rawDescData)
	})
	return file_telemetrygateway_proto_rawDescData
}

var file_telemetrygateway_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_telemetrygateway_proto_goTypes = []interface{}{
	(*Identifier)(nil),                              // 0: telemetrygateway.v1.Identifier
	(*RecordEventsRequestMetadata)(nil),             // 1: telemetrygateway.v1.RecordEventsRequestMetadata
	(*RecordEventsRequest)(nil),                     // 2: telemetrygateway.v1.RecordEventsRequest
	(*RecordEventsResponse)(nil),                    // 3: telemetrygateway.v1.RecordEventsResponse
	(*RecordEventRequest)(nil),                      // 4: telemetrygateway.v1.RecordEventRequest
	(*RecordEventResponse)(nil),                     // 5: telemetrygateway.v1.RecordEventResponse
	(*Event)(nil),                                   // 6: telemetrygateway.v1.Event
	(*EventSource)(nil),                             // 7: telemetrygateway.v1.EventSource
	(*EventParameters)(nil),                         // 8: telemetrygateway.v1.EventParameters
	(*EventBillingMetadata)(nil),                    // 9: telemetrygateway.v1.EventBillingMetadata
	(*EventUser)(nil),                               // 10: telemetrygateway.v1.EventUser
	(*EventFeatureFlags)(nil),                       // 11: telemetrygateway.v1.EventFeatureFlags
	(*EventMarketingTracking)(nil),                  // 12: telemetrygateway.v1.EventMarketingTracking
	(*EventInteraction)(nil),                        // 13: telemetrygateway.v1.EventInteraction
	(*Identifier_LicensedInstanceIdentifier)(nil),   // 14: telemetrygateway.v1.Identifier.LicensedInstanceIdentifier
	(*Identifier_UnlicensedInstanceIdentifier)(nil), // 15: telemetrygateway.v1.Identifier.UnlicensedInstanceIdentifier
	(*Identifier_ManagedServiceIdentifier)(nil),     // 16: telemetrygateway.v1.Identifier.ManagedServiceIdentifier
	(*RecordEventsRequest_EventsPayload)(nil),       // 17: telemetrygateway.v1.RecordEventsRequest.EventsPayload
	(*EventSource_Server)(nil),                      // 18: telemetrygateway.v1.EventSource.Server
	(*EventSource_Client)(nil),                      // 19: telemetrygateway.v1.EventSource.Client
	nil,                                             // 20: telemetrygateway.v1.EventParameters.LegacyMetadataEntry
	nil,                                             // 21: telemetrygateway.v1.EventParameters.MetadataEntry
	nil,                                             // 22: telemetrygateway.v1.EventFeatureFlags.FlagsEntry
	(*EventInteraction_Geolocation)(nil),            // 23: telemetrygateway.v1.EventInteraction.Geolocation
	(*timestamppb.Timestamp)(nil),                   // 24: google.protobuf.Timestamp
	(*structpb.Struct)(nil),                         // 25: google.protobuf.Struct
}
var file_telemetrygateway_proto_depIdxs = []int32{
	14, // 0: telemetrygateway.v1.Identifier.licensed_instance:type_name -> telemetrygateway.v1.Identifier.LicensedInstanceIdentifier
	15, // 1: telemetrygateway.v1.Identifier.unlicensed_instance:type_name -> telemetrygateway.v1.Identifier.UnlicensedInstanceIdentifier
	16, // 2: telemetrygateway.v1.Identifier.managed_service:type_name -> telemetrygateway.v1.Identifier.ManagedServiceIdentifier
	0,  // 3: telemetrygateway.v1.RecordEventsRequestMetadata.identifier:type_name -> telemetrygateway.v1.Identifier
	1,  // 4: telemetrygateway.v1.RecordEventsRequest.metadata:type_name -> telemetrygateway.v1.RecordEventsRequestMetadata
	17, // 5: telemetrygateway.v1.RecordEventsRequest.events:type_name -> telemetrygateway.v1.RecordEventsRequest.EventsPayload
	1,  // 6: telemetrygateway.v1.RecordEventRequest.metadata:type_name -> telemetrygateway.v1.RecordEventsRequestMetadata
	6,  // 7: telemetrygateway.v1.RecordEventRequest.event:type_name -> telemetrygateway.v1.Event
	24, // 8: telemetrygateway.v1.Event.timestamp:type_name -> google.protobuf.Timestamp
	7,  // 9: telemetrygateway.v1.Event.source:type_name -> telemetrygateway.v1.EventSource
	8,  // 10: telemetrygateway.v1.Event.parameters:type_name -> telemetrygateway.v1.EventParameters
	10, // 11: telemetrygateway.v1.Event.user:type_name -> telemetrygateway.v1.EventUser
	11, // 12: telemetrygateway.v1.Event.feature_flags:type_name -> telemetrygateway.v1.EventFeatureFlags
	12, // 13: telemetrygateway.v1.Event.marketing_tracking:type_name -> telemetrygateway.v1.EventMarketingTracking
	13, // 14: telemetrygateway.v1.Event.interaction:type_name -> telemetrygateway.v1.EventInteraction
	18, // 15: telemetrygateway.v1.EventSource.server:type_name -> telemetrygateway.v1.EventSource.Server
	19, // 16: telemetrygateway.v1.EventSource.client:type_name -> telemetrygateway.v1.EventSource.Client
	20, // 17: telemetrygateway.v1.EventParameters.legacy_metadata:type_name -> telemetrygateway.v1.EventParameters.LegacyMetadataEntry
	21, // 18: telemetrygateway.v1.EventParameters.metadata:type_name -> telemetrygateway.v1.EventParameters.MetadataEntry
	25, // 19: telemetrygateway.v1.EventParameters.private_metadata:type_name -> google.protobuf.Struct
	9,  // 20: telemetrygateway.v1.EventParameters.billing_metadata:type_name -> telemetrygateway.v1.EventBillingMetadata
	22, // 21: telemetrygateway.v1.EventFeatureFlags.flags:type_name -> telemetrygateway.v1.EventFeatureFlags.FlagsEntry
	23, // 22: telemetrygateway.v1.EventInteraction.geolocation:type_name -> telemetrygateway.v1.EventInteraction.Geolocation
	6,  // 23: telemetrygateway.v1.RecordEventsRequest.EventsPayload.events:type_name -> telemetrygateway.v1.Event
	2,  // 24: telemetrygateway.v1.TelemeteryGatewayService.RecordEvents:input_type -> telemetrygateway.v1.RecordEventsRequest
	4,  // 25: telemetrygateway.v1.TelemeteryGatewayService.RecordEvent:input_type -> telemetrygateway.v1.RecordEventRequest
	3,  // 26: telemetrygateway.v1.TelemeteryGatewayService.RecordEvents:output_type -> telemetrygateway.v1.RecordEventsResponse
	5,  // 27: telemetrygateway.v1.TelemeteryGatewayService.RecordEvent:output_type -> telemetrygateway.v1.RecordEventResponse
	26, // [26:28] is the sub-list for method output_type
	24, // [24:26] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_telemetrygateway_proto_init() }
func file_telemetrygateway_proto_init() {
	if File_telemetrygateway_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_telemetrygateway_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetrygateway_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordEventsRequestMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetrygateway_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetrygateway_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetrygateway_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetrygateway_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetrygateway_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetrygateway_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetrygateway_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetrygateway_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventBillingMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetrygateway_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetrygateway_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventFeatureFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetrygateway_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventMarketingTracking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetrygateway_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventInteraction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetrygateway_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identifier_LicensedInstanceIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetrygateway_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identifier_UnlicensedInstanceIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetrygateway_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identifier_ManagedServiceIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetrygateway_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordEventsRequest_EventsPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetrygateway_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventSource_Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetrygateway_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventSource_Client); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetrygateway_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventInteraction_Geolocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_telemetrygateway_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Identifier_LicensedInstance)(nil),
		(*Identifier_UnlicensedInstance)(nil),
		(*Identifier_ManagedService)(nil),
	}
	file_telemetrygateway_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*RecordEventsRequest_Metadata)(nil),
		(*RecordEventsRequest_Events)(nil),
	}
	file_telemetrygateway_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_telemetrygateway_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_telemetrygateway_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_telemetrygateway_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_telemetrygateway_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_telemetrygateway_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_telemetrygateway_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_telemetrygateway_proto_msgTypes[19].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_telemetrygateway_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_telemetrygateway_proto_goTypes,
		DependencyIndexes: file_telemetrygateway_proto_depIdxs,
		MessageInfos:      file_telemetrygateway_proto_msgTypes,
	}.Build()
	File_telemetrygateway_proto = out.File
	file_telemetrygateway_proto_rawDesc = nil
	file_telemetrygateway_proto_goTypes = nil
	file_telemetrygateway_proto_depIdxs = nil
}
