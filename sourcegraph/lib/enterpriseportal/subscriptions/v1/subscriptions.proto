syntax = "proto3";

package enterpriseportal.subscriptions.v1;

import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/sourcegraph/sourcegraph/lib/enterpriseportal/subscriptions/v1";

// SubscriptionsService is the service API specification for Enterprise Portal's
// core Enterprise subscription and Enterprise license management capabilities.
//
// Extensions to support additional Enterprise services are expected to be
// defined as separate gRPC services in 'lib/enterpriseportal' - these are
// generally all be implemented by the Enterprise Portal Service directly for
// now.
service SubscriptionsService {
  // GetEnterpriseSubscription retrieves an exact match on an Enterprise subscription.
  rpc GetEnterpriseSubscription(GetEnterpriseSubscriptionRequest) returns (GetEnterpriseSubscriptionResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // ListEnterpriseSubscriptions queries for Enterprise subscriptions.
  rpc ListEnterpriseSubscriptions(ListEnterpriseSubscriptionsRequest) returns (ListEnterpriseSubscriptionsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // ListEnterpriseSubscriptionLicenses queries for licenses associated with
  // Enterprise subscription licenses, with the ability to list licenses across
  // all subscriptions, or just a specific subscription.
  //
  // Each subscription owns a collection of licenses, typically a series of
  // licenses with the most recent one being a subscription's active license.
  rpc ListEnterpriseSubscriptionLicenses(ListEnterpriseSubscriptionLicensesRequest) returns (ListEnterpriseSubscriptionLicensesResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // UpdateEnterpriseSubscription updates an existing Enterprise subscription.
  // Only properties specified by the update_mask are applied.
  rpc UpdateEnterpriseSubscription(UpdateEnterpriseSubscriptionRequest) returns (UpdateEnterpriseSubscriptionResponse) {
    option idempotency_level = IDEMPOTENT;
  }

  // UpdateSubscriptionMembership updates a subscription membership. It creates
  // a new one if it does not exist and allow_missing is set to true.
  rpc UpdateSubscriptionMembership(UpdateSubscriptionMembershipRequest) returns (UpdateSubscriptionMembershipResponse) {
    option idempotency_level = IDEMPOTENT;
  }
}

message EnterpriseSubscriptionCondition {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    // License creation status.
    STATUS_CREATED = 1;
    // License archival status. i.e. 'is_archived'
    STATUS_ARCHIVED = 2;
  }

  // The time this subscription transitioned into this status.
  google.protobuf.Timestamp last_transition_time = 1;
  // Status is the type of status corresponding to this condition.
  Status status = 2;
  // Message is a description of the status transition and why it happened.
  string message = 3;
}

// EnterpriseSubscription represents a Sourcegraph Enterprise subscription.
message EnterpriseSubscription {
  // ID is the external, prefixed UUID-format identifier for this subscription
  // (e.g. "es_...").
  string id = 1;
  // Timeline of key events corresponding to this subscription.
  repeated EnterpriseSubscriptionCondition conditions = 2;
  // Display name of this subscription, e.g. "Acme, Inc."
  string display_name = 3;
  // The instance domain associated with this subscription, e.g. "acme.sourcegraphcloud.com".
  string instance_domain = 4;
}

// EnterpriseSubscription represents a Sourcegraph Enterprise subscription member.
message EnterpriseSubscriptionMember {
  // The SAMS account ID of the member.
  string sams_account_id = 1;
  // The role of the member.
  string role = 2;
}

// EnterpriseSubscriptionLicenseKey is the classic offline Sourcegraph license
// key, and corresponds to ENTERPRISE_SUBSCRIPTION_LICENSE_TYPE_KEY.
message EnterpriseSubscriptionLicenseKey {
  // Information embedded into the license key.
  message Info {
    // The tags that indicate which features are activated by this license.
    repeated string tags = 1;
    // The number of users for which this product subscription is valid.
    uint64 user_count = 2;
    // The expiration date of this product license. In license data, this is
    // called 'expires_at', expressed as the number of seconds since the epoch.
    google.protobuf.Timestamp expire_time = 3;
    // The Salesforce subscription ID associated with this product license.
    string salesforce_subscription_id = 4;
    // The Salesforce opportunity ID associated with this product license.
    string salesforce_opportunity_id = 5;
  }

  // Version of this classic license's information schema. It is incremented
  // whenever a major change is made to the shape of Info to indicate what
  // fields can be expected from the information embedded in the license key.
  uint32 info_version = 1;
  // Information embedded into the license key.
  Info info = 2;
  // The license key.
  string license_key = 3;
  // UUID of the known instance using this license key, self-reported from
  // online license checks and pings. Also known as 'site ID'.
  string instance_id = 4;
}

message EnterpriseSubscriptionLicenseCondition {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    // License creation status.
    STATUS_CREATED = 1;
    // License archival status. i.e. 'is_archived'
    STATUS_ARCHIVED = 2;
    // License revocation status, i.e. 'is_revoked'
    STATUS_REVOKED = 3;
  }

  // The time this subscription transitioned into this status.
  google.protobuf.Timestamp last_transition_time = 1;
  // Status is the type of status corresponding to this condition.
  Status status = 2;
  // Message is a description of the status transition and why it happened.
  string message = 3;
}

// EnterpriseSubscriptionLicense represents a license for a Sourcegraph
// Enterprise product. Multiple licenses are associated with a single
// subscription, typically a series of licenses with the most recent one being
// a subscription's active license.
message EnterpriseSubscriptionLicense {
  // ID is the external, prefixed UUID-format identifier for this license key.
  string id = 1;
  // The external, prefixed UUID-format identifier for the subscription that
  // owns this license.
  string subscription_id = 2;
  // Timeline of key events corresponding to this license.
  repeated EnterpriseSubscriptionLicenseCondition conditions = 3;
  // License data, based on the type of the license.
  oneof license {
    EnterpriseSubscriptionLicenseKey key = 4;
  }
}

message GetEnterpriseSubscriptionRequest {
  // Query specifies the lookup strategy for this get request.
  oneof query {
    // Look up a subscription using its external, prefixed UUID-format identifier.
    string id = 1;
  }
}

message GetEnterpriseSubscriptionResponse {
  EnterpriseSubscription subscription = 1;
}

// EnterpriseSubscriptionLicenseType can be used to denote different types of
// licenses.
enum EnterpriseSubscriptionLicenseType {
  ENTERPRISE_SUBSCRIPTION_LICENSE_TYPE_UNSPECIFIED = 0;
  // The 'license key' type is the classic licensing mechanism that Sourcegraph
  // has always had. They are signed by a private key and offline-validated by
  // a public key that ships with all Sourcegraph builds.
  //
  // Each Subscription is expected to have at most one active Sourcegraph classic
  // license used by a Sourcegraph instance at a time.
  ENTERPRISE_SUBSCRIPTION_LICENSE_TYPE_KEY = 1;
}

message ListEnterpriseSubscriptionsRequest {
  // Clients use this field to specify the maximum number of results to be
  // returned by the server. The server may further constrain the maximum number
  // of results returned in a single page. If the page_size is 0, the server
  // will decide the number of results to be returned.
  //
  // See pagination concepts from https://cloud.google.com/apis/design/design_patterns#list_pagination
  int32 page_size = 1;
  // The client uses this field to request a specific page of the list results.
  //
  // See pagination concepts from https://cloud.google.com/apis/design/design_patterns#list_pagination
  string page_token = 2;
}

message ListEnterpriseSubscriptionsResponse {
  // This field represents the pagination token to retrieve the next page of
  // results. If the value is "", it means no further results for the request.
  string next_page_token = 1;
  // The list of subscriptions that matched the given query.
  repeated EnterpriseSubscription subscriptions = 2;
}

message ListEnterpriseSubscriptionLicensesFilter {
  oneof filter {
    // Return only licenses corresponding to the given subscription ID, with the
    // most recently issued licenses first.
    string subscription_id = 1;
    // Return only licenses of the given type.
    EnterpriseSubscriptionLicenseType type = 2;
    // Return only licenses with the given archival status.
    bool is_archived = 3;
    // Return only product subscriptions whose license key contains this
    // substring.
    string license_key_substring = 4;
    // Return only product subscriptions whose license key contains the given member.
    Member member = 5;
  }

  message Member {
    // Return only product subscriptions contains the member with given SAMS
    // account ID.
    string sams_account_id = 1;
    // Return only product subscriptions contains the member with the given permission.
    string permission = 2;
  }
}

message ListEnterpriseSubscriptionLicensesRequest {
  // Clients use this field to specify the maximum number of results to be
  // returned by the server. The server may further constrain the maximum number
  // of results returned in a single page. If the page_size is 0, the server
  // will decide the number of results to be returned.
  //
  // See pagination concepts from https://cloud.google.com/apis/design/design_patterns#list_pagination
  int32 page_size = 1;
  // The client uses this field to request a specific page of the list results.
  // A zero value requests the first page.
  //
  // See pagination concepts from https://cloud.google.com/apis/design/design_patterns#list_pagination
  //
  // TODO: Create an internal pagination token type: https://protobuf.dev/programming-guides/api/#encode-opaque-data-in-strings
  string page_token = 2;

  // Filters define the lookup strategy for this list request. Multiple filters
  // are treated as AND-concatenated.
  repeated ListEnterpriseSubscriptionLicensesFilter filters = 3;
}

message ListEnterpriseSubscriptionLicensesResponse {
  // This field represents the pagination token to retrieve the next page of
  // results. If the value is "", it means no further results for the request.
  string next_page_token = 1;
  // The list of licenses that matched the given query, sorted by the most
  // recently created licenses first.
  repeated EnterpriseSubscriptionLicense licenses = 2;
}

message UpdateEnterpriseSubscriptionRequest {
  // The subscription to update.
  // The following fields are used to identify the membership to update:
  //  - id
  // Multiple fields are treated as AND-concatenated.
  EnterpriseSubscription subscription = 1;

  // The list of fields to update, fields are specified relative to the EnterpriseSubscription.
  // Updatable fields are:
  //  - display_name
  //  - domain
  google.protobuf.FieldMask update_mask = 2;
}

message UpdateEnterpriseSubscriptionResponse {
  // The updated subscription.
  EnterpriseSubscription subscription = 1;
}

message EnterpriseSubscriptionMembership {
  // The external, prefixed UUID-format identifier of the subscription.
  string subscription_id = 1;
  // The instance domain associated with this subscription, e.g. "acme.sourcegraphcloud.com".
  string instance_domain = 2;
  // The SAMS account ID of the member.
  string member_sams_account_id = 3;
  // The roles of the member, e.g. "cody_analytics::customer_admin".
  repeated string member_roles = 4;
}

message UpdateSubscriptionMembershipRequest {
  // The membership to update.
  // The following fields are used to identify the membership to update:
  //  - subscription_id
  //  - instance_domain
  // Multiple fields are treated as AND-concatenated.
  EnterpriseSubscriptionMembership membership = 1;

  // If set to true, and the membership is not found, a new membership will be created.
  bool allow_missing = 2;
}

message UpdateSubscriptionMembershipResponse {}
