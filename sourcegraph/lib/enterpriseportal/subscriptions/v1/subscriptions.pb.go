// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: subscriptions.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// EnterpriseSubscriptionLicenseType can be used to denote different types of
// licenses.
type EnterpriseSubscriptionLicenseType int32

const (
	EnterpriseSubscriptionLicenseType_ENTERPRISE_SUBSCRIPTION_LICENSE_TYPE_UNSPECIFIED EnterpriseSubscriptionLicenseType = 0
	// The 'license key' type is the classic licensing mechanism that Sourcegraph
	// has always had. They are signed by a private key and offline-validated by
	// a public key that ships with all Sourcegraph builds.
	//
	// Each Subscription is expected to have at most one active Sourcegraph classic
	// license used by a Sourcegraph instance at a time.
	EnterpriseSubscriptionLicenseType_ENTERPRISE_SUBSCRIPTION_LICENSE_TYPE_KEY EnterpriseSubscriptionLicenseType = 1
)

// Enum value maps for EnterpriseSubscriptionLicenseType.
var (
	EnterpriseSubscriptionLicenseType_name = map[int32]string{
		0: "ENTERPRISE_SUBSCRIPTION_LICENSE_TYPE_UNSPECIFIED",
		1: "ENTERPRISE_SUBSCRIPTION_LICENSE_TYPE_KEY",
	}
	EnterpriseSubscriptionLicenseType_value = map[string]int32{
		"ENTERPRISE_SUBSCRIPTION_LICENSE_TYPE_UNSPECIFIED": 0,
		"ENTERPRISE_SUBSCRIPTION_LICENSE_TYPE_KEY":         1,
	}
)

func (x EnterpriseSubscriptionLicenseType) Enum() *EnterpriseSubscriptionLicenseType {
	p := new(EnterpriseSubscriptionLicenseType)
	*p = x
	return p
}

func (x EnterpriseSubscriptionLicenseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnterpriseSubscriptionLicenseType) Descriptor() protoreflect.EnumDescriptor {
	return file_subscriptions_proto_enumTypes[0].Descriptor()
}

func (EnterpriseSubscriptionLicenseType) Type() protoreflect.EnumType {
	return &file_subscriptions_proto_enumTypes[0]
}

func (x EnterpriseSubscriptionLicenseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnterpriseSubscriptionLicenseType.Descriptor instead.
func (EnterpriseSubscriptionLicenseType) EnumDescriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{0}
}

// Role represents a role that can be granted to a user.
type Role int32

const (
	Role_ROLE_UNSPECIFIED                 Role = 0
	Role_ROLE_SUBSCRIPTION_CUSTOMER_ADMIN Role = 2
)

// Enum value maps for Role.
var (
	Role_name = map[int32]string{
		0: "ROLE_UNSPECIFIED",
		2: "ROLE_SUBSCRIPTION_CUSTOMER_ADMIN",
	}
	Role_value = map[string]int32{
		"ROLE_UNSPECIFIED":                 0,
		"ROLE_SUBSCRIPTION_CUSTOMER_ADMIN": 2,
	}
)

func (x Role) Enum() *Role {
	p := new(Role)
	*p = x
	return p
}

func (x Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Role) Descriptor() protoreflect.EnumDescriptor {
	return file_subscriptions_proto_enumTypes[1].Descriptor()
}

func (Role) Type() protoreflect.EnumType {
	return &file_subscriptions_proto_enumTypes[1]
}

func (x Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Role.Descriptor instead.
func (Role) EnumDescriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{1}
}

// PermissionType defines a class of objects with similar characteristics.
// https://openfga.dev/docs/concepts#what-is-a-type
type PermissionType int32

const (
	PermissionType_PERMISSION_TYPE_UNSPECIFIED                 PermissionType = 0
	PermissionType_PERMISSION_TYPE_SUBSCRIPTION_CODY_ANALYTICS PermissionType = 1
)

// Enum value maps for PermissionType.
var (
	PermissionType_name = map[int32]string{
		0: "PERMISSION_TYPE_UNSPECIFIED",
		1: "PERMISSION_TYPE_SUBSCRIPTION_CODY_ANALYTICS",
	}
	PermissionType_value = map[string]int32{
		"PERMISSION_TYPE_UNSPECIFIED":                 0,
		"PERMISSION_TYPE_SUBSCRIPTION_CODY_ANALYTICS": 1,
	}
)

func (x PermissionType) Enum() *PermissionType {
	p := new(PermissionType)
	*p = x
	return p
}

func (x PermissionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PermissionType) Descriptor() protoreflect.EnumDescriptor {
	return file_subscriptions_proto_enumTypes[2].Descriptor()
}

func (PermissionType) Type() protoreflect.EnumType {
	return &file_subscriptions_proto_enumTypes[2]
}

func (x PermissionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PermissionType.Descriptor instead.
func (PermissionType) EnumDescriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{2}
}

// PermissionRelation represents the relation between the user and the resource.
type PermissionRelation int32

const (
	PermissionRelation_PERMISSION_RELATION_UNSPECIFIED PermissionRelation = 0
	PermissionRelation_PERMISSION_RELATION_VIEW        PermissionRelation = 1
)

// Enum value maps for PermissionRelation.
var (
	PermissionRelation_name = map[int32]string{
		0: "PERMISSION_RELATION_UNSPECIFIED",
		1: "PERMISSION_RELATION_VIEW",
	}
	PermissionRelation_value = map[string]int32{
		"PERMISSION_RELATION_UNSPECIFIED": 0,
		"PERMISSION_RELATION_VIEW":        1,
	}
)

func (x PermissionRelation) Enum() *PermissionRelation {
	p := new(PermissionRelation)
	*p = x
	return p
}

func (x PermissionRelation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PermissionRelation) Descriptor() protoreflect.EnumDescriptor {
	return file_subscriptions_proto_enumTypes[3].Descriptor()
}

func (PermissionRelation) Type() protoreflect.EnumType {
	return &file_subscriptions_proto_enumTypes[3]
}

func (x PermissionRelation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PermissionRelation.Descriptor instead.
func (PermissionRelation) EnumDescriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{3}
}

type EnterpriseSubscriptionCondition_Status int32

const (
	EnterpriseSubscriptionCondition_STATUS_UNSPECIFIED EnterpriseSubscriptionCondition_Status = 0
	// Subscription creation status.
	EnterpriseSubscriptionCondition_STATUS_CREATED EnterpriseSubscriptionCondition_Status = 1
	// Subscription archival status. i.e. 'is_archived'
	EnterpriseSubscriptionCondition_STATUS_ARCHIVED EnterpriseSubscriptionCondition_Status = 2
)

// Enum value maps for EnterpriseSubscriptionCondition_Status.
var (
	EnterpriseSubscriptionCondition_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_CREATED",
		2: "STATUS_ARCHIVED",
	}
	EnterpriseSubscriptionCondition_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_CREATED":     1,
		"STATUS_ARCHIVED":    2,
	}
)

func (x EnterpriseSubscriptionCondition_Status) Enum() *EnterpriseSubscriptionCondition_Status {
	p := new(EnterpriseSubscriptionCondition_Status)
	*p = x
	return p
}

func (x EnterpriseSubscriptionCondition_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnterpriseSubscriptionCondition_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_subscriptions_proto_enumTypes[4].Descriptor()
}

func (EnterpriseSubscriptionCondition_Status) Type() protoreflect.EnumType {
	return &file_subscriptions_proto_enumTypes[4]
}

func (x EnterpriseSubscriptionCondition_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnterpriseSubscriptionCondition_Status.Descriptor instead.
func (EnterpriseSubscriptionCondition_Status) EnumDescriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{0, 0}
}

type EnterpriseSubscriptionLicenseCondition_Status int32

const (
	EnterpriseSubscriptionLicenseCondition_STATUS_UNSPECIFIED EnterpriseSubscriptionLicenseCondition_Status = 0
	// License creation status.
	EnterpriseSubscriptionLicenseCondition_STATUS_CREATED EnterpriseSubscriptionLicenseCondition_Status = 1
	// License revocation status, i.e. 'is_revoked'
	EnterpriseSubscriptionLicenseCondition_STATUS_REVOKED EnterpriseSubscriptionLicenseCondition_Status = 2
)

// Enum value maps for EnterpriseSubscriptionLicenseCondition_Status.
var (
	EnterpriseSubscriptionLicenseCondition_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_CREATED",
		2: "STATUS_REVOKED",
	}
	EnterpriseSubscriptionLicenseCondition_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_CREATED":     1,
		"STATUS_REVOKED":     2,
	}
)

func (x EnterpriseSubscriptionLicenseCondition_Status) Enum() *EnterpriseSubscriptionLicenseCondition_Status {
	p := new(EnterpriseSubscriptionLicenseCondition_Status)
	*p = x
	return p
}

func (x EnterpriseSubscriptionLicenseCondition_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnterpriseSubscriptionLicenseCondition_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_subscriptions_proto_enumTypes[5].Descriptor()
}

func (EnterpriseSubscriptionLicenseCondition_Status) Type() protoreflect.EnumType {
	return &file_subscriptions_proto_enumTypes[5]
}

func (x EnterpriseSubscriptionLicenseCondition_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnterpriseSubscriptionLicenseCondition_Status.Descriptor instead.
func (EnterpriseSubscriptionLicenseCondition_Status) EnumDescriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{3, 0}
}

type EnterpriseSubscriptionCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time this subscription transitioned into this status.
	LastTransitionTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=last_transition_time,json=lastTransitionTime,proto3" json:"last_transition_time,omitempty"`
	// Status is the type of status corresponding to this condition.
	Status EnterpriseSubscriptionCondition_Status `protobuf:"varint,2,opt,name=status,proto3,enum=enterpriseportal.subscriptions.v1.EnterpriseSubscriptionCondition_Status" json:"status,omitempty"`
	// Message is a description of the status transition and why it happened.
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *EnterpriseSubscriptionCondition) Reset() {
	*x = EnterpriseSubscriptionCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseSubscriptionCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseSubscriptionCondition) ProtoMessage() {}

func (x *EnterpriseSubscriptionCondition) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseSubscriptionCondition.ProtoReflect.Descriptor instead.
func (*EnterpriseSubscriptionCondition) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{0}
}

func (x *EnterpriseSubscriptionCondition) GetLastTransitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastTransitionTime
	}
	return nil
}

func (x *EnterpriseSubscriptionCondition) GetStatus() EnterpriseSubscriptionCondition_Status {
	if x != nil {
		return x.Status
	}
	return EnterpriseSubscriptionCondition_STATUS_UNSPECIFIED
}

func (x *EnterpriseSubscriptionCondition) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// EnterpriseSubscription represents a Sourcegraph Enterprise subscription.
type EnterpriseSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the external, prefixed UUID-format identifier for this subscription
	// (e.g. "es_...").
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Timeline of key events corresponding to this subscription.
	Conditions []*EnterpriseSubscriptionCondition `protobuf:"bytes,2,rep,name=conditions,proto3" json:"conditions,omitempty"`
	// Display name of this subscription, e.g. "Acme, Inc."
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The instance domain associated with this subscription, e.g. "acme.sourcegraphcloud.com".
	InstanceDomain string `protobuf:"bytes,4,opt,name=instance_domain,json=instanceDomain,proto3" json:"instance_domain,omitempty"`
	// Salesforce details associated with this subscription.
	Salesforce *EnterpriseSubscription_SalesforceMetadata `protobuf:"bytes,5,opt,name=salesforce,proto3" json:"salesforce,omitempty"`
}

func (x *EnterpriseSubscription) Reset() {
	*x = EnterpriseSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseSubscription) ProtoMessage() {}

func (x *EnterpriseSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseSubscription.ProtoReflect.Descriptor instead.
func (*EnterpriseSubscription) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{1}
}

func (x *EnterpriseSubscription) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EnterpriseSubscription) GetConditions() []*EnterpriseSubscriptionCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *EnterpriseSubscription) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *EnterpriseSubscription) GetInstanceDomain() string {
	if x != nil {
		return x.InstanceDomain
	}
	return ""
}

func (x *EnterpriseSubscription) GetSalesforce() *EnterpriseSubscription_SalesforceMetadata {
	if x != nil {
		return x.Salesforce
	}
	return nil
}

// EnterpriseSubscriptionLicenseKey is the classic offline Sourcegraph license
// key, and corresponds to ENTERPRISE_SUBSCRIPTION_LICENSE_TYPE_KEY.
type EnterpriseSubscriptionLicenseKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of this classic license's information schema. It is incremented
	// whenever a major change is made to the shape of Info to indicate what
	// fields can be expected from the information embedded in the license key.
	InfoVersion uint32 `protobuf:"varint,1,opt,name=info_version,json=infoVersion,proto3" json:"info_version,omitempty"`
	// Information embedded into the license key.
	Info *EnterpriseSubscriptionLicenseKey_Info `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	// The license key.
	LicenseKey string `protobuf:"bytes,3,opt,name=license_key,json=licenseKey,proto3" json:"license_key,omitempty"`
	// UUID of the known instance using this license key, self-reported from
	// online license checks and pings. Also known as 'site ID'.
	InstanceId string `protobuf:"bytes,4,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *EnterpriseSubscriptionLicenseKey) Reset() {
	*x = EnterpriseSubscriptionLicenseKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseSubscriptionLicenseKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseSubscriptionLicenseKey) ProtoMessage() {}

func (x *EnterpriseSubscriptionLicenseKey) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseSubscriptionLicenseKey.ProtoReflect.Descriptor instead.
func (*EnterpriseSubscriptionLicenseKey) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{2}
}

func (x *EnterpriseSubscriptionLicenseKey) GetInfoVersion() uint32 {
	if x != nil {
		return x.InfoVersion
	}
	return 0
}

func (x *EnterpriseSubscriptionLicenseKey) GetInfo() *EnterpriseSubscriptionLicenseKey_Info {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *EnterpriseSubscriptionLicenseKey) GetLicenseKey() string {
	if x != nil {
		return x.LicenseKey
	}
	return ""
}

func (x *EnterpriseSubscriptionLicenseKey) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type EnterpriseSubscriptionLicenseCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time this subscription transitioned into this status.
	LastTransitionTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=last_transition_time,json=lastTransitionTime,proto3" json:"last_transition_time,omitempty"`
	// Status is the type of status corresponding to this condition.
	Status EnterpriseSubscriptionLicenseCondition_Status `protobuf:"varint,2,opt,name=status,proto3,enum=enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseCondition_Status" json:"status,omitempty"`
	// Message is a description of the status transition and why it happened.
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *EnterpriseSubscriptionLicenseCondition) Reset() {
	*x = EnterpriseSubscriptionLicenseCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseSubscriptionLicenseCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseSubscriptionLicenseCondition) ProtoMessage() {}

func (x *EnterpriseSubscriptionLicenseCondition) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseSubscriptionLicenseCondition.ProtoReflect.Descriptor instead.
func (*EnterpriseSubscriptionLicenseCondition) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{3}
}

func (x *EnterpriseSubscriptionLicenseCondition) GetLastTransitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastTransitionTime
	}
	return nil
}

func (x *EnterpriseSubscriptionLicenseCondition) GetStatus() EnterpriseSubscriptionLicenseCondition_Status {
	if x != nil {
		return x.Status
	}
	return EnterpriseSubscriptionLicenseCondition_STATUS_UNSPECIFIED
}

func (x *EnterpriseSubscriptionLicenseCondition) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// EnterpriseSubscriptionLicense represents a license for a Sourcegraph
// Enterprise product. Multiple licenses are associated with a single
// subscription, typically a series of licenses with the most recent one being
// a subscription's active license.
type EnterpriseSubscriptionLicense struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the external, prefixed UUID-format identifier for this license key.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The external, prefixed UUID-format identifier for the subscription that
	// owns this license.
	SubscriptionId string `protobuf:"bytes,2,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	// Timeline of key events corresponding to this license.
	Conditions []*EnterpriseSubscriptionLicenseCondition `protobuf:"bytes,3,rep,name=conditions,proto3" json:"conditions,omitempty"`
	// License data, based on the type of the license.
	//
	// Types that are assignable to License:
	//
	//	*EnterpriseSubscriptionLicense_Key
	License isEnterpriseSubscriptionLicense_License `protobuf_oneof:"license"`
}

func (x *EnterpriseSubscriptionLicense) Reset() {
	*x = EnterpriseSubscriptionLicense{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseSubscriptionLicense) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseSubscriptionLicense) ProtoMessage() {}

func (x *EnterpriseSubscriptionLicense) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseSubscriptionLicense.ProtoReflect.Descriptor instead.
func (*EnterpriseSubscriptionLicense) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{4}
}

func (x *EnterpriseSubscriptionLicense) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EnterpriseSubscriptionLicense) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *EnterpriseSubscriptionLicense) GetConditions() []*EnterpriseSubscriptionLicenseCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (m *EnterpriseSubscriptionLicense) GetLicense() isEnterpriseSubscriptionLicense_License {
	if m != nil {
		return m.License
	}
	return nil
}

func (x *EnterpriseSubscriptionLicense) GetKey() *EnterpriseSubscriptionLicenseKey {
	if x, ok := x.GetLicense().(*EnterpriseSubscriptionLicense_Key); ok {
		return x.Key
	}
	return nil
}

type isEnterpriseSubscriptionLicense_License interface {
	isEnterpriseSubscriptionLicense_License()
}

type EnterpriseSubscriptionLicense_Key struct {
	Key *EnterpriseSubscriptionLicenseKey `protobuf:"bytes,4,opt,name=key,proto3,oneof"`
}

func (*EnterpriseSubscriptionLicense_Key) isEnterpriseSubscriptionLicense_License() {}

type GetEnterpriseSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Query specifies the lookup strategy for this get request.
	//
	// Types that are assignable to Query:
	//
	//	*GetEnterpriseSubscriptionRequest_Id
	Query isGetEnterpriseSubscriptionRequest_Query `protobuf_oneof:"query"`
}

func (x *GetEnterpriseSubscriptionRequest) Reset() {
	*x = GetEnterpriseSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEnterpriseSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnterpriseSubscriptionRequest) ProtoMessage() {}

func (x *GetEnterpriseSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnterpriseSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*GetEnterpriseSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{5}
}

func (m *GetEnterpriseSubscriptionRequest) GetQuery() isGetEnterpriseSubscriptionRequest_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *GetEnterpriseSubscriptionRequest) GetId() string {
	if x, ok := x.GetQuery().(*GetEnterpriseSubscriptionRequest_Id); ok {
		return x.Id
	}
	return ""
}

type isGetEnterpriseSubscriptionRequest_Query interface {
	isGetEnterpriseSubscriptionRequest_Query()
}

type GetEnterpriseSubscriptionRequest_Id struct {
	// Look up a subscription using its external, prefixed UUID-format identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

func (*GetEnterpriseSubscriptionRequest_Id) isGetEnterpriseSubscriptionRequest_Query() {}

type GetEnterpriseSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscription *EnterpriseSubscription `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
}

func (x *GetEnterpriseSubscriptionResponse) Reset() {
	*x = GetEnterpriseSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEnterpriseSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnterpriseSubscriptionResponse) ProtoMessage() {}

func (x *GetEnterpriseSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnterpriseSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*GetEnterpriseSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{6}
}

func (x *GetEnterpriseSubscriptionResponse) GetSubscription() *EnterpriseSubscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

type ListEnterpriseSubscriptionsFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*ListEnterpriseSubscriptionsFilter_SubscriptionId
	//	*ListEnterpriseSubscriptionsFilter_IsArchived
	//	*ListEnterpriseSubscriptionsFilter_Permission
	Filter isListEnterpriseSubscriptionsFilter_Filter `protobuf_oneof:"filter"`
}

func (x *ListEnterpriseSubscriptionsFilter) Reset() {
	*x = ListEnterpriseSubscriptionsFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnterpriseSubscriptionsFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnterpriseSubscriptionsFilter) ProtoMessage() {}

func (x *ListEnterpriseSubscriptionsFilter) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnterpriseSubscriptionsFilter.ProtoReflect.Descriptor instead.
func (*ListEnterpriseSubscriptionsFilter) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{7}
}

func (m *ListEnterpriseSubscriptionsFilter) GetFilter() isListEnterpriseSubscriptionsFilter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *ListEnterpriseSubscriptionsFilter) GetSubscriptionId() string {
	if x, ok := x.GetFilter().(*ListEnterpriseSubscriptionsFilter_SubscriptionId); ok {
		return x.SubscriptionId
	}
	return ""
}

func (x *ListEnterpriseSubscriptionsFilter) GetIsArchived() bool {
	if x, ok := x.GetFilter().(*ListEnterpriseSubscriptionsFilter_IsArchived); ok {
		return x.IsArchived
	}
	return false
}

func (x *ListEnterpriseSubscriptionsFilter) GetPermission() *Permission {
	if x, ok := x.GetFilter().(*ListEnterpriseSubscriptionsFilter_Permission); ok {
		return x.Permission
	}
	return nil
}

type isListEnterpriseSubscriptionsFilter_Filter interface {
	isListEnterpriseSubscriptionsFilter_Filter()
}

type ListEnterpriseSubscriptionsFilter_SubscriptionId struct {
	// Return only product subscriptions has the given subscription ID.
	SubscriptionId string `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3,oneof"`
}

type ListEnterpriseSubscriptionsFilter_IsArchived struct {
	// Return only product subscriptions with the given archival status.
	IsArchived bool `protobuf:"varint,2,opt,name=is_archived,json=isArchived,proto3,oneof"`
}

type ListEnterpriseSubscriptionsFilter_Permission struct {
	// Return only product subscriptions that satisfies the given permission.
	Permission *Permission `protobuf:"bytes,3,opt,name=permission,proto3,oneof"`
}

func (*ListEnterpriseSubscriptionsFilter_SubscriptionId) isListEnterpriseSubscriptionsFilter_Filter() {
}

func (*ListEnterpriseSubscriptionsFilter_IsArchived) isListEnterpriseSubscriptionsFilter_Filter() {}

func (*ListEnterpriseSubscriptionsFilter_Permission) isListEnterpriseSubscriptionsFilter_Filter() {}

type ListEnterpriseSubscriptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Clients use this field to specify the maximum number of results to be
	// returned by the server. The server may further constrain the maximum number
	// of results returned in a single page. If the page_size is 0, the server
	// will decide the number of results to be returned.
	//
	// See pagination concepts from https://cloud.google.com/apis/design/design_patterns#list_pagination
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The client uses this field to request a specific page of the list results.
	//
	// See pagination concepts from https://cloud.google.com/apis/design/design_patterns#list_pagination
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Filters define the lookup strategy for this list request. Multiple filters
	// are treated as AND-concatenated.
	Filters []*ListEnterpriseSubscriptionsFilter `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListEnterpriseSubscriptionsRequest) Reset() {
	*x = ListEnterpriseSubscriptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnterpriseSubscriptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnterpriseSubscriptionsRequest) ProtoMessage() {}

func (x *ListEnterpriseSubscriptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnterpriseSubscriptionsRequest.ProtoReflect.Descriptor instead.
func (*ListEnterpriseSubscriptionsRequest) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{8}
}

func (x *ListEnterpriseSubscriptionsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListEnterpriseSubscriptionsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListEnterpriseSubscriptionsRequest) GetFilters() []*ListEnterpriseSubscriptionsFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ListEnterpriseSubscriptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field represents the pagination token to retrieve the next page of
	// results. If the value is "", it means no further results for the request.
	NextPageToken string `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// The list of subscriptions that matched the given query.
	Subscriptions []*EnterpriseSubscription `protobuf:"bytes,2,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
}

func (x *ListEnterpriseSubscriptionsResponse) Reset() {
	*x = ListEnterpriseSubscriptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnterpriseSubscriptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnterpriseSubscriptionsResponse) ProtoMessage() {}

func (x *ListEnterpriseSubscriptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnterpriseSubscriptionsResponse.ProtoReflect.Descriptor instead.
func (*ListEnterpriseSubscriptionsResponse) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{9}
}

func (x *ListEnterpriseSubscriptionsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListEnterpriseSubscriptionsResponse) GetSubscriptions() []*EnterpriseSubscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type ListEnterpriseSubscriptionLicensesFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*ListEnterpriseSubscriptionLicensesFilter_SubscriptionId
	//	*ListEnterpriseSubscriptionLicensesFilter_Type
	//	*ListEnterpriseSubscriptionLicensesFilter_IsRevoked
	//	*ListEnterpriseSubscriptionLicensesFilter_LicenseKeySubstring
	Filter isListEnterpriseSubscriptionLicensesFilter_Filter `protobuf_oneof:"filter"`
}

func (x *ListEnterpriseSubscriptionLicensesFilter) Reset() {
	*x = ListEnterpriseSubscriptionLicensesFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnterpriseSubscriptionLicensesFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnterpriseSubscriptionLicensesFilter) ProtoMessage() {}

func (x *ListEnterpriseSubscriptionLicensesFilter) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnterpriseSubscriptionLicensesFilter.ProtoReflect.Descriptor instead.
func (*ListEnterpriseSubscriptionLicensesFilter) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{10}
}

func (m *ListEnterpriseSubscriptionLicensesFilter) GetFilter() isListEnterpriseSubscriptionLicensesFilter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *ListEnterpriseSubscriptionLicensesFilter) GetSubscriptionId() string {
	if x, ok := x.GetFilter().(*ListEnterpriseSubscriptionLicensesFilter_SubscriptionId); ok {
		return x.SubscriptionId
	}
	return ""
}

func (x *ListEnterpriseSubscriptionLicensesFilter) GetType() EnterpriseSubscriptionLicenseType {
	if x, ok := x.GetFilter().(*ListEnterpriseSubscriptionLicensesFilter_Type); ok {
		return x.Type
	}
	return EnterpriseSubscriptionLicenseType_ENTERPRISE_SUBSCRIPTION_LICENSE_TYPE_UNSPECIFIED
}

func (x *ListEnterpriseSubscriptionLicensesFilter) GetIsRevoked() bool {
	if x, ok := x.GetFilter().(*ListEnterpriseSubscriptionLicensesFilter_IsRevoked); ok {
		return x.IsRevoked
	}
	return false
}

func (x *ListEnterpriseSubscriptionLicensesFilter) GetLicenseKeySubstring() string {
	if x, ok := x.GetFilter().(*ListEnterpriseSubscriptionLicensesFilter_LicenseKeySubstring); ok {
		return x.LicenseKeySubstring
	}
	return ""
}

type isListEnterpriseSubscriptionLicensesFilter_Filter interface {
	isListEnterpriseSubscriptionLicensesFilter_Filter()
}

type ListEnterpriseSubscriptionLicensesFilter_SubscriptionId struct {
	// Return only licenses corresponding to the given subscription ID, with the
	// most recently issued licenses first.
	SubscriptionId string `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3,oneof"`
}

type ListEnterpriseSubscriptionLicensesFilter_Type struct {
	// Return only licenses of the given type.
	Type EnterpriseSubscriptionLicenseType `protobuf:"varint,2,opt,name=type,proto3,enum=enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseType,oneof"`
}

type ListEnterpriseSubscriptionLicensesFilter_IsRevoked struct {
	// Return only licenses that are active.
	IsRevoked bool `protobuf:"varint,3,opt,name=is_revoked,json=isRevoked,proto3,oneof"`
}

type ListEnterpriseSubscriptionLicensesFilter_LicenseKeySubstring struct {
	// Return only product subscriptions whose license key contains this
	// substring.
	LicenseKeySubstring string `protobuf:"bytes,4,opt,name=license_key_substring,json=licenseKeySubstring,proto3,oneof"`
}

func (*ListEnterpriseSubscriptionLicensesFilter_SubscriptionId) isListEnterpriseSubscriptionLicensesFilter_Filter() {
}

func (*ListEnterpriseSubscriptionLicensesFilter_Type) isListEnterpriseSubscriptionLicensesFilter_Filter() {
}

func (*ListEnterpriseSubscriptionLicensesFilter_IsRevoked) isListEnterpriseSubscriptionLicensesFilter_Filter() {
}

func (*ListEnterpriseSubscriptionLicensesFilter_LicenseKeySubstring) isListEnterpriseSubscriptionLicensesFilter_Filter() {
}

type ListEnterpriseSubscriptionLicensesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Clients use this field to specify the maximum number of results to be
	// returned by the server. The server may further constrain the maximum number
	// of results returned in a single page. If the page_size is 0, the server
	// will decide the number of results to be returned.
	//
	// See pagination concepts from https://cloud.google.com/apis/design/design_patterns#list_pagination
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The client uses this field to request a specific page of the list results.
	// A zero value requests the first page.
	//
	// See pagination concepts from https://cloud.google.com/apis/design/design_patterns#list_pagination
	//
	// TODO: Create an internal pagination token type: https://protobuf.dev/programming-guides/api/#encode-opaque-data-in-strings
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Filters define the lookup strategy for this list request. Multiple filters
	// are treated as AND-concatenated.
	Filters []*ListEnterpriseSubscriptionLicensesFilter `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListEnterpriseSubscriptionLicensesRequest) Reset() {
	*x = ListEnterpriseSubscriptionLicensesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnterpriseSubscriptionLicensesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnterpriseSubscriptionLicensesRequest) ProtoMessage() {}

func (x *ListEnterpriseSubscriptionLicensesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnterpriseSubscriptionLicensesRequest.ProtoReflect.Descriptor instead.
func (*ListEnterpriseSubscriptionLicensesRequest) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{11}
}

func (x *ListEnterpriseSubscriptionLicensesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListEnterpriseSubscriptionLicensesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListEnterpriseSubscriptionLicensesRequest) GetFilters() []*ListEnterpriseSubscriptionLicensesFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ListEnterpriseSubscriptionLicensesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field represents the pagination token to retrieve the next page of
	// results. If the value is "", it means no further results for the request.
	NextPageToken string `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// The list of licenses that matched the given query, sorted by the most
	// recently created licenses first.
	Licenses []*EnterpriseSubscriptionLicense `protobuf:"bytes,2,rep,name=licenses,proto3" json:"licenses,omitempty"`
}

func (x *ListEnterpriseSubscriptionLicensesResponse) Reset() {
	*x = ListEnterpriseSubscriptionLicensesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnterpriseSubscriptionLicensesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnterpriseSubscriptionLicensesResponse) ProtoMessage() {}

func (x *ListEnterpriseSubscriptionLicensesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnterpriseSubscriptionLicensesResponse.ProtoReflect.Descriptor instead.
func (*ListEnterpriseSubscriptionLicensesResponse) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{12}
}

func (x *ListEnterpriseSubscriptionLicensesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListEnterpriseSubscriptionLicensesResponse) GetLicenses() []*EnterpriseSubscriptionLicense {
	if x != nil {
		return x.Licenses
	}
	return nil
}

type CreateEnterpriseSubscriptionLicenseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The license to create.
	//
	// Required attributes:
	// - subscription_id (this is the parent resource, EnterpriseSubscription)
	// - license
	//
	// `license` supports the following types. At least one must be provided:
	// - license.key, which requires:
	//   - license.key.info_version
	//   - license.key.info.tags
	//   - license.key.info.user_count
	//   - license.key.info.expire_time
	License *EnterpriseSubscriptionLicense `protobuf:"bytes,1,opt,name=license,proto3" json:"license,omitempty"`
}

func (x *CreateEnterpriseSubscriptionLicenseRequest) Reset() {
	*x = CreateEnterpriseSubscriptionLicenseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEnterpriseSubscriptionLicenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEnterpriseSubscriptionLicenseRequest) ProtoMessage() {}

func (x *CreateEnterpriseSubscriptionLicenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEnterpriseSubscriptionLicenseRequest.ProtoReflect.Descriptor instead.
func (*CreateEnterpriseSubscriptionLicenseRequest) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{13}
}

func (x *CreateEnterpriseSubscriptionLicenseRequest) GetLicense() *EnterpriseSubscriptionLicense {
	if x != nil {
		return x.License
	}
	return nil
}

type CreateEnterpriseSubscriptionLicenseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The license that was created.
	License *EnterpriseSubscriptionLicense `protobuf:"bytes,1,opt,name=license,proto3" json:"license,omitempty"`
}

func (x *CreateEnterpriseSubscriptionLicenseResponse) Reset() {
	*x = CreateEnterpriseSubscriptionLicenseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEnterpriseSubscriptionLicenseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEnterpriseSubscriptionLicenseResponse) ProtoMessage() {}

func (x *CreateEnterpriseSubscriptionLicenseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEnterpriseSubscriptionLicenseResponse.ProtoReflect.Descriptor instead.
func (*CreateEnterpriseSubscriptionLicenseResponse) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{14}
}

func (x *CreateEnterpriseSubscriptionLicenseResponse) GetLicense() *EnterpriseSubscriptionLicense {
	if x != nil {
		return x.License
	}
	return nil
}

type RevokeEnterpriseSubscriptionLicenseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the license to revoke.
	LicenseId string `protobuf:"bytes,1,opt,name=license_id,json=licenseId,proto3" json:"license_id,omitempty"`
	// Human-readable explanation for revoking the license.
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *RevokeEnterpriseSubscriptionLicenseRequest) Reset() {
	*x = RevokeEnterpriseSubscriptionLicenseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeEnterpriseSubscriptionLicenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeEnterpriseSubscriptionLicenseRequest) ProtoMessage() {}

func (x *RevokeEnterpriseSubscriptionLicenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeEnterpriseSubscriptionLicenseRequest.ProtoReflect.Descriptor instead.
func (*RevokeEnterpriseSubscriptionLicenseRequest) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{15}
}

func (x *RevokeEnterpriseSubscriptionLicenseRequest) GetLicenseId() string {
	if x != nil {
		return x.LicenseId
	}
	return ""
}

func (x *RevokeEnterpriseSubscriptionLicenseRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type RevokeEnterpriseSubscriptionLicenseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RevokeEnterpriseSubscriptionLicenseResponse) Reset() {
	*x = RevokeEnterpriseSubscriptionLicenseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeEnterpriseSubscriptionLicenseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeEnterpriseSubscriptionLicenseResponse) ProtoMessage() {}

func (x *RevokeEnterpriseSubscriptionLicenseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeEnterpriseSubscriptionLicenseResponse.ProtoReflect.Descriptor instead.
func (*RevokeEnterpriseSubscriptionLicenseResponse) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{16}
}

type UpdateEnterpriseSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The subscription to update.
	// The following fields are used to identify the membership to update:
	//   - id
	//
	// Multiple fields are treated as AND-concatenated.
	Subscription *EnterpriseSubscription `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
	// The list of fields to update, fields are specified relative to the EnterpriseSubscription.
	// Updatable fields are:
	//   - instance_domain
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateEnterpriseSubscriptionRequest) Reset() {
	*x = UpdateEnterpriseSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEnterpriseSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEnterpriseSubscriptionRequest) ProtoMessage() {}

func (x *UpdateEnterpriseSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEnterpriseSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*UpdateEnterpriseSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateEnterpriseSubscriptionRequest) GetSubscription() *EnterpriseSubscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

func (x *UpdateEnterpriseSubscriptionRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateEnterpriseSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated subscription.
	Subscription *EnterpriseSubscription `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
}

func (x *UpdateEnterpriseSubscriptionResponse) Reset() {
	*x = UpdateEnterpriseSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEnterpriseSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEnterpriseSubscriptionResponse) ProtoMessage() {}

func (x *UpdateEnterpriseSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEnterpriseSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*UpdateEnterpriseSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateEnterpriseSubscriptionResponse) GetSubscription() *EnterpriseSubscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

type ArchiveEnterpriseSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the subscription to archive.
	SubscriptionId string `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	// Human-readable explanation for revoking the license.
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *ArchiveEnterpriseSubscriptionRequest) Reset() {
	*x = ArchiveEnterpriseSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveEnterpriseSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveEnterpriseSubscriptionRequest) ProtoMessage() {}

func (x *ArchiveEnterpriseSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveEnterpriseSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*ArchiveEnterpriseSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{19}
}

func (x *ArchiveEnterpriseSubscriptionRequest) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *ArchiveEnterpriseSubscriptionRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type ArchiveEnterpriseSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ArchiveEnterpriseSubscriptionResponse) Reset() {
	*x = ArchiveEnterpriseSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveEnterpriseSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveEnterpriseSubscriptionResponse) ProtoMessage() {}

func (x *ArchiveEnterpriseSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveEnterpriseSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*ArchiveEnterpriseSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{20}
}

type CreateEnterpriseSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The subscription to create.
	//
	// Required attributes:
	// - display_name
	//
	// Optional attributes:
	// - instance_domain
	// - salesforce.subscription_id
	// - salesforce.opportunity_id
	Subscription *EnterpriseSubscription `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
}

func (x *CreateEnterpriseSubscriptionRequest) Reset() {
	*x = CreateEnterpriseSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEnterpriseSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEnterpriseSubscriptionRequest) ProtoMessage() {}

func (x *CreateEnterpriseSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEnterpriseSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*CreateEnterpriseSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{21}
}

func (x *CreateEnterpriseSubscriptionRequest) GetSubscription() *EnterpriseSubscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

type CreateEnterpriseSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The created subscription.
	Subscription *EnterpriseSubscription `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
}

func (x *CreateEnterpriseSubscriptionResponse) Reset() {
	*x = CreateEnterpriseSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEnterpriseSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEnterpriseSubscriptionResponse) ProtoMessage() {}

func (x *CreateEnterpriseSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEnterpriseSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*CreateEnterpriseSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{22}
}

func (x *CreateEnterpriseSubscriptionResponse) GetSubscription() *EnterpriseSubscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

type EnterpriseSubscriptionMembership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The external, prefixed UUID-format identifier of the subscription.
	SubscriptionId string `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	// The instance domain associated with this subscription, e.g. "acme.sourcegraphcloud.com".
	InstanceDomain string `protobuf:"bytes,2,opt,name=instance_domain,json=instanceDomain,proto3" json:"instance_domain,omitempty"`
	// The SAMS account ID of the member.
	MemberSamsAccountId string `protobuf:"bytes,3,opt,name=member_sams_account_id,json=memberSamsAccountId,proto3" json:"member_sams_account_id,omitempty"`
	// The roles of the member. The roles provided are authoritative - all roles
	// not on the list are revoked.
	MemberRoles []Role `protobuf:"varint,4,rep,packed,name=member_roles,json=memberRoles,proto3,enum=enterpriseportal.subscriptions.v1.Role" json:"member_roles,omitempty"`
}

func (x *EnterpriseSubscriptionMembership) Reset() {
	*x = EnterpriseSubscriptionMembership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseSubscriptionMembership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseSubscriptionMembership) ProtoMessage() {}

func (x *EnterpriseSubscriptionMembership) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseSubscriptionMembership.ProtoReflect.Descriptor instead.
func (*EnterpriseSubscriptionMembership) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{23}
}

func (x *EnterpriseSubscriptionMembership) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *EnterpriseSubscriptionMembership) GetInstanceDomain() string {
	if x != nil {
		return x.InstanceDomain
	}
	return ""
}

func (x *EnterpriseSubscriptionMembership) GetMemberSamsAccountId() string {
	if x != nil {
		return x.MemberSamsAccountId
	}
	return ""
}

func (x *EnterpriseSubscriptionMembership) GetMemberRoles() []Role {
	if x != nil {
		return x.MemberRoles
	}
	return nil
}

type UpdateEnterpriseSubscriptionMembershipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The membership to update.
	// The first non-empty field of the following fields is used to identify the product subscription to update:
	//   - subscription_id
	//   - instance_domain
	//
	// Multiple fields are treated as AND-concatenated.
	Membership *EnterpriseSubscriptionMembership `protobuf:"bytes,1,opt,name=membership,proto3" json:"membership,omitempty"`
}

func (x *UpdateEnterpriseSubscriptionMembershipRequest) Reset() {
	*x = UpdateEnterpriseSubscriptionMembershipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEnterpriseSubscriptionMembershipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEnterpriseSubscriptionMembershipRequest) ProtoMessage() {}

func (x *UpdateEnterpriseSubscriptionMembershipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEnterpriseSubscriptionMembershipRequest.ProtoReflect.Descriptor instead.
func (*UpdateEnterpriseSubscriptionMembershipRequest) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateEnterpriseSubscriptionMembershipRequest) GetMembership() *EnterpriseSubscriptionMembership {
	if x != nil {
		return x.Membership
	}
	return nil
}

type UpdateEnterpriseSubscriptionMembershipResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateEnterpriseSubscriptionMembershipResponse) Reset() {
	*x = UpdateEnterpriseSubscriptionMembershipResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEnterpriseSubscriptionMembershipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEnterpriseSubscriptionMembershipResponse) ProtoMessage() {}

func (x *UpdateEnterpriseSubscriptionMembershipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEnterpriseSubscriptionMembershipResponse.ProtoReflect.Descriptor instead.
func (*UpdateEnterpriseSubscriptionMembershipResponse) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{25}
}

// Permission represents a permission that can be performed by a user.
type Permission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the permission.
	Type PermissionType `protobuf:"varint,1,opt,name=type,proto3,enum=enterpriseportal.subscriptions.v1.PermissionType" json:"type,omitempty"`
	// The relation between the user and the resource.
	Relation PermissionRelation `protobuf:"varint,2,opt,name=relation,proto3,enum=enterpriseportal.subscriptions.v1.PermissionRelation" json:"relation,omitempty"`
	// The SAMS account ID of the user.
	SamsAccountId string `protobuf:"bytes,3,opt,name=sams_account_id,json=samsAccountId,proto3" json:"sams_account_id,omitempty"`
}

func (x *Permission) Reset() {
	*x = Permission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Permission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Permission) ProtoMessage() {}

func (x *Permission) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Permission.ProtoReflect.Descriptor instead.
func (*Permission) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{26}
}

func (x *Permission) GetType() PermissionType {
	if x != nil {
		return x.Type
	}
	return PermissionType_PERMISSION_TYPE_UNSPECIFIED
}

func (x *Permission) GetRelation() PermissionRelation {
	if x != nil {
		return x.Relation
	}
	return PermissionRelation_PERMISSION_RELATION_UNSPECIFIED
}

func (x *Permission) GetSamsAccountId() string {
	if x != nil {
		return x.SamsAccountId
	}
	return ""
}

type EnterpriseSubscription_SalesforceMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Salesforce subscription ID associated with this Enterprise subscription.
	SubscriptionId string `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	// The Salesforce opportunity ID associated with this Enterprise subscription.
	OpportunityId string `protobuf:"bytes,2,opt,name=opportunity_id,json=opportunityId,proto3" json:"opportunity_id,omitempty"`
}

func (x *EnterpriseSubscription_SalesforceMetadata) Reset() {
	*x = EnterpriseSubscription_SalesforceMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseSubscription_SalesforceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseSubscription_SalesforceMetadata) ProtoMessage() {}

func (x *EnterpriseSubscription_SalesforceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseSubscription_SalesforceMetadata.ProtoReflect.Descriptor instead.
func (*EnterpriseSubscription_SalesforceMetadata) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{1, 0}
}

func (x *EnterpriseSubscription_SalesforceMetadata) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *EnterpriseSubscription_SalesforceMetadata) GetOpportunityId() string {
	if x != nil {
		return x.OpportunityId
	}
	return ""
}

// Information embedded into the license key.
type EnterpriseSubscriptionLicenseKey_Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tags that indicate which features are activated by this license.
	Tags []string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
	// The number of users for which this product subscription is valid.
	UserCount uint64 `protobuf:"varint,2,opt,name=user_count,json=userCount,proto3" json:"user_count,omitempty"`
	// The expiration date of this product license. In license data, this is
	// called 'expires_at', expressed as the number of seconds since the epoch.
	ExpireTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// The Salesforce subscription ID associated with this product license.
	SalesforceSubscriptionId string `protobuf:"bytes,4,opt,name=salesforce_subscription_id,json=salesforceSubscriptionId,proto3" json:"salesforce_subscription_id,omitempty"`
	// The Salesforce opportunity ID associated with this product license.
	SalesforceOpportunityId string `protobuf:"bytes,5,opt,name=salesforce_opportunity_id,json=salesforceOpportunityId,proto3" json:"salesforce_opportunity_id,omitempty"`
}

func (x *EnterpriseSubscriptionLicenseKey_Info) Reset() {
	*x = EnterpriseSubscriptionLicenseKey_Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscriptions_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseSubscriptionLicenseKey_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseSubscriptionLicenseKey_Info) ProtoMessage() {}

func (x *EnterpriseSubscriptionLicenseKey_Info) ProtoReflect() protoreflect.Message {
	mi := &file_subscriptions_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseSubscriptionLicenseKey_Info.ProtoReflect.Descriptor instead.
func (*EnterpriseSubscriptionLicenseKey_Info) Descriptor() ([]byte, []int) {
	return file_subscriptions_proto_rawDescGZIP(), []int{2, 0}
}

func (x *EnterpriseSubscriptionLicenseKey_Info) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *EnterpriseSubscriptionLicenseKey_Info) GetUserCount() uint64 {
	if x != nil {
		return x.UserCount
	}
	return 0
}

func (x *EnterpriseSubscriptionLicenseKey_Info) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *EnterpriseSubscriptionLicenseKey_Info) GetSalesforceSubscriptionId() string {
	if x != nil {
		return x.SalesforceSubscriptionId
	}
	return ""
}

func (x *EnterpriseSubscriptionLicenseKey_Info) GetSalesforceOpportunityId() string {
	if x != nil {
		return x.SalesforceOpportunityId
	}
	return ""
}

var File_subscriptions_proto protoreflect.FileDescriptor

var file_subscriptions_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb7, 0x02, 0x0a, 0x1f,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4c, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x61, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x49, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49,
	0x56, 0x45, 0x44, 0x10, 0x02, 0x22, 0xac, 0x03, 0x0a, 0x16, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x62, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x6c, 0x0a, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x1a, 0x64,
	0x0a, 0x12, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x6f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x22, 0xd8, 0x03, 0x0a, 0x20, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x2e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x1a, 0xf0, 0x01, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x5f, 0x6f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x4f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22,
	0xc4, 0x02, 0x0a, 0x26, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x14, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x68, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x50, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x48, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x56,
	0x4f, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x22, 0xa7, 0x02, 0x0a, 0x1d, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x69, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x48, 0x00,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x22, 0x3d, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22,
	0x82, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcc, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x0f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x73,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0xc0, 0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x5e, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x5f, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x92, 0x02, 0x0a, 0x28, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x5a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x09, 0x69, 0x73, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x15,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x13, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x42, 0x08, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xce, 0x01, 0x0a,
	0x29, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x65, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xb2, 0x01,
	0x0a, 0x2a, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x5c, 0x0a, 0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x2a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5a, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x22, 0x89, 0x01,
	0x0a, 0x2b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a,
	0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61,
	0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x22, 0x63, 0x0a, 0x2a, 0x52, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x2d,
	0x0a, 0x2b, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc1, 0x01,
	0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73,
	0x6b, 0x22, 0x85, 0x01, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0c, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x67, 0x0a, 0x24, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x22, 0x27, 0x0a, 0x25, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x23,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x85, 0x01, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0c, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf5, 0x01, 0x0a, 0x20, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x61, 0x6d, 0x73,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x73, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x2d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x0a, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x22, 0x30, 0x0a, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xce, 0x01, 0x0a, 0x0a,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x51, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x61, 0x6d, 0x73, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x61, 0x6d, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x2a, 0x87, 0x01, 0x0a,
	0x21, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x34, 0x0a, 0x30, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45,
	0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49,
	0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4b, 0x45, 0x59, 0x10, 0x01, 0x2a, 0x48, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x53, 0x55, 0x42,
	0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x45, 0x52, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x02, 0x22, 0x04, 0x08, 0x01, 0x10, 0x01,
	0x2a, 0x62, 0x0a, 0x0e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2b, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x59, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49,
	0x43, 0x53, 0x10, 0x01, 0x2a, 0x57, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x45,
	0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1c, 0x0a, 0x18, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x01, 0x32, 0xd0, 0x0d,
	0x0a, 0x14, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xab, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x03, 0x90, 0x02, 0x01, 0x12, 0xb1, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0xc6, 0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12,
	0x4c, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4d, 0x2e,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02,
	0x01, 0x12, 0xc6, 0x01, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x2e, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4e, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xc9, 0x01, 0x0a, 0x23, 0x52,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x12, 0x4d, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x4e, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x03, 0x90, 0x02, 0x02, 0x12, 0xb4, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x47, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x02, 0x12, 0xb7, 0x01,
	0x0a, 0x1d, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x47, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x48, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x02, 0x12, 0xb1, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x47, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xd2, 0x01, 0x0a, 0x26,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x50, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x51, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x02,
	0x42, 0x4a, 0x5a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_subscriptions_proto_rawDescOnce sync.Once
	file_subscriptions_proto_rawDescData = file_subscriptions_proto_rawDesc
)

func file_subscriptions_proto_rawDescGZIP() []byte {
	file_subscriptions_proto_rawDescOnce.Do(func() {
		file_subscriptions_proto_rawDescData = protoimpl.X.CompressGZIP(file_subscriptions_proto_rawDescData)
	})
	return file_subscriptions_proto_rawDescData
}

var file_subscriptions_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_subscriptions_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_subscriptions_proto_goTypes = []interface{}{
	(EnterpriseSubscriptionLicenseType)(0),                 // 0: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseType
	(Role)(0),                                              // 1: enterpriseportal.subscriptions.v1.Role
	(PermissionType)(0),                                    // 2: enterpriseportal.subscriptions.v1.PermissionType
	(PermissionRelation)(0),                                // 3: enterpriseportal.subscriptions.v1.PermissionRelation
	(EnterpriseSubscriptionCondition_Status)(0),            // 4: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionCondition.Status
	(EnterpriseSubscriptionLicenseCondition_Status)(0),     // 5: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseCondition.Status
	(*EnterpriseSubscriptionCondition)(nil),                // 6: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionCondition
	(*EnterpriseSubscription)(nil),                         // 7: enterpriseportal.subscriptions.v1.EnterpriseSubscription
	(*EnterpriseSubscriptionLicenseKey)(nil),               // 8: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseKey
	(*EnterpriseSubscriptionLicenseCondition)(nil),         // 9: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseCondition
	(*EnterpriseSubscriptionLicense)(nil),                  // 10: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicense
	(*GetEnterpriseSubscriptionRequest)(nil),               // 11: enterpriseportal.subscriptions.v1.GetEnterpriseSubscriptionRequest
	(*GetEnterpriseSubscriptionResponse)(nil),              // 12: enterpriseportal.subscriptions.v1.GetEnterpriseSubscriptionResponse
	(*ListEnterpriseSubscriptionsFilter)(nil),              // 13: enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionsFilter
	(*ListEnterpriseSubscriptionsRequest)(nil),             // 14: enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionsRequest
	(*ListEnterpriseSubscriptionsResponse)(nil),            // 15: enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionsResponse
	(*ListEnterpriseSubscriptionLicensesFilter)(nil),       // 16: enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionLicensesFilter
	(*ListEnterpriseSubscriptionLicensesRequest)(nil),      // 17: enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionLicensesRequest
	(*ListEnterpriseSubscriptionLicensesResponse)(nil),     // 18: enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionLicensesResponse
	(*CreateEnterpriseSubscriptionLicenseRequest)(nil),     // 19: enterpriseportal.subscriptions.v1.CreateEnterpriseSubscriptionLicenseRequest
	(*CreateEnterpriseSubscriptionLicenseResponse)(nil),    // 20: enterpriseportal.subscriptions.v1.CreateEnterpriseSubscriptionLicenseResponse
	(*RevokeEnterpriseSubscriptionLicenseRequest)(nil),     // 21: enterpriseportal.subscriptions.v1.RevokeEnterpriseSubscriptionLicenseRequest
	(*RevokeEnterpriseSubscriptionLicenseResponse)(nil),    // 22: enterpriseportal.subscriptions.v1.RevokeEnterpriseSubscriptionLicenseResponse
	(*UpdateEnterpriseSubscriptionRequest)(nil),            // 23: enterpriseportal.subscriptions.v1.UpdateEnterpriseSubscriptionRequest
	(*UpdateEnterpriseSubscriptionResponse)(nil),           // 24: enterpriseportal.subscriptions.v1.UpdateEnterpriseSubscriptionResponse
	(*ArchiveEnterpriseSubscriptionRequest)(nil),           // 25: enterpriseportal.subscriptions.v1.ArchiveEnterpriseSubscriptionRequest
	(*ArchiveEnterpriseSubscriptionResponse)(nil),          // 26: enterpriseportal.subscriptions.v1.ArchiveEnterpriseSubscriptionResponse
	(*CreateEnterpriseSubscriptionRequest)(nil),            // 27: enterpriseportal.subscriptions.v1.CreateEnterpriseSubscriptionRequest
	(*CreateEnterpriseSubscriptionResponse)(nil),           // 28: enterpriseportal.subscriptions.v1.CreateEnterpriseSubscriptionResponse
	(*EnterpriseSubscriptionMembership)(nil),               // 29: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionMembership
	(*UpdateEnterpriseSubscriptionMembershipRequest)(nil),  // 30: enterpriseportal.subscriptions.v1.UpdateEnterpriseSubscriptionMembershipRequest
	(*UpdateEnterpriseSubscriptionMembershipResponse)(nil), // 31: enterpriseportal.subscriptions.v1.UpdateEnterpriseSubscriptionMembershipResponse
	(*Permission)(nil),                                     // 32: enterpriseportal.subscriptions.v1.Permission
	(*EnterpriseSubscription_SalesforceMetadata)(nil),      // 33: enterpriseportal.subscriptions.v1.EnterpriseSubscription.SalesforceMetadata
	(*EnterpriseSubscriptionLicenseKey_Info)(nil),          // 34: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseKey.Info
	(*timestamppb.Timestamp)(nil),                          // 35: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),                          // 36: google.protobuf.FieldMask
}
var file_subscriptions_proto_depIdxs = []int32{
	35, // 0: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionCondition.last_transition_time:type_name -> google.protobuf.Timestamp
	4,  // 1: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionCondition.status:type_name -> enterpriseportal.subscriptions.v1.EnterpriseSubscriptionCondition.Status
	6,  // 2: enterpriseportal.subscriptions.v1.EnterpriseSubscription.conditions:type_name -> enterpriseportal.subscriptions.v1.EnterpriseSubscriptionCondition
	33, // 3: enterpriseportal.subscriptions.v1.EnterpriseSubscription.salesforce:type_name -> enterpriseportal.subscriptions.v1.EnterpriseSubscription.SalesforceMetadata
	34, // 4: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseKey.info:type_name -> enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseKey.Info
	35, // 5: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseCondition.last_transition_time:type_name -> google.protobuf.Timestamp
	5,  // 6: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseCondition.status:type_name -> enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseCondition.Status
	9,  // 7: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicense.conditions:type_name -> enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseCondition
	8,  // 8: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicense.key:type_name -> enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseKey
	7,  // 9: enterpriseportal.subscriptions.v1.GetEnterpriseSubscriptionResponse.subscription:type_name -> enterpriseportal.subscriptions.v1.EnterpriseSubscription
	32, // 10: enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionsFilter.permission:type_name -> enterpriseportal.subscriptions.v1.Permission
	13, // 11: enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionsRequest.filters:type_name -> enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionsFilter
	7,  // 12: enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionsResponse.subscriptions:type_name -> enterpriseportal.subscriptions.v1.EnterpriseSubscription
	0,  // 13: enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionLicensesFilter.type:type_name -> enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseType
	16, // 14: enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionLicensesRequest.filters:type_name -> enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionLicensesFilter
	10, // 15: enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionLicensesResponse.licenses:type_name -> enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicense
	10, // 16: enterpriseportal.subscriptions.v1.CreateEnterpriseSubscriptionLicenseRequest.license:type_name -> enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicense
	10, // 17: enterpriseportal.subscriptions.v1.CreateEnterpriseSubscriptionLicenseResponse.license:type_name -> enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicense
	7,  // 18: enterpriseportal.subscriptions.v1.UpdateEnterpriseSubscriptionRequest.subscription:type_name -> enterpriseportal.subscriptions.v1.EnterpriseSubscription
	36, // 19: enterpriseportal.subscriptions.v1.UpdateEnterpriseSubscriptionRequest.update_mask:type_name -> google.protobuf.FieldMask
	7,  // 20: enterpriseportal.subscriptions.v1.UpdateEnterpriseSubscriptionResponse.subscription:type_name -> enterpriseportal.subscriptions.v1.EnterpriseSubscription
	7,  // 21: enterpriseportal.subscriptions.v1.CreateEnterpriseSubscriptionRequest.subscription:type_name -> enterpriseportal.subscriptions.v1.EnterpriseSubscription
	7,  // 22: enterpriseportal.subscriptions.v1.CreateEnterpriseSubscriptionResponse.subscription:type_name -> enterpriseportal.subscriptions.v1.EnterpriseSubscription
	1,  // 23: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionMembership.member_roles:type_name -> enterpriseportal.subscriptions.v1.Role
	29, // 24: enterpriseportal.subscriptions.v1.UpdateEnterpriseSubscriptionMembershipRequest.membership:type_name -> enterpriseportal.subscriptions.v1.EnterpriseSubscriptionMembership
	2,  // 25: enterpriseportal.subscriptions.v1.Permission.type:type_name -> enterpriseportal.subscriptions.v1.PermissionType
	3,  // 26: enterpriseportal.subscriptions.v1.Permission.relation:type_name -> enterpriseportal.subscriptions.v1.PermissionRelation
	35, // 27: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseKey.Info.expire_time:type_name -> google.protobuf.Timestamp
	11, // 28: enterpriseportal.subscriptions.v1.SubscriptionsService.GetEnterpriseSubscription:input_type -> enterpriseportal.subscriptions.v1.GetEnterpriseSubscriptionRequest
	14, // 29: enterpriseportal.subscriptions.v1.SubscriptionsService.ListEnterpriseSubscriptions:input_type -> enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionsRequest
	17, // 30: enterpriseportal.subscriptions.v1.SubscriptionsService.ListEnterpriseSubscriptionLicenses:input_type -> enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionLicensesRequest
	19, // 31: enterpriseportal.subscriptions.v1.SubscriptionsService.CreateEnterpriseSubscriptionLicense:input_type -> enterpriseportal.subscriptions.v1.CreateEnterpriseSubscriptionLicenseRequest
	21, // 32: enterpriseportal.subscriptions.v1.SubscriptionsService.RevokeEnterpriseSubscriptionLicense:input_type -> enterpriseportal.subscriptions.v1.RevokeEnterpriseSubscriptionLicenseRequest
	23, // 33: enterpriseportal.subscriptions.v1.SubscriptionsService.UpdateEnterpriseSubscription:input_type -> enterpriseportal.subscriptions.v1.UpdateEnterpriseSubscriptionRequest
	25, // 34: enterpriseportal.subscriptions.v1.SubscriptionsService.ArchiveEnterpriseSubscription:input_type -> enterpriseportal.subscriptions.v1.ArchiveEnterpriseSubscriptionRequest
	27, // 35: enterpriseportal.subscriptions.v1.SubscriptionsService.CreateEnterpriseSubscription:input_type -> enterpriseportal.subscriptions.v1.CreateEnterpriseSubscriptionRequest
	30, // 36: enterpriseportal.subscriptions.v1.SubscriptionsService.UpdateEnterpriseSubscriptionMembership:input_type -> enterpriseportal.subscriptions.v1.UpdateEnterpriseSubscriptionMembershipRequest
	12, // 37: enterpriseportal.subscriptions.v1.SubscriptionsService.GetEnterpriseSubscription:output_type -> enterpriseportal.subscriptions.v1.GetEnterpriseSubscriptionResponse
	15, // 38: enterpriseportal.subscriptions.v1.SubscriptionsService.ListEnterpriseSubscriptions:output_type -> enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionsResponse
	18, // 39: enterpriseportal.subscriptions.v1.SubscriptionsService.ListEnterpriseSubscriptionLicenses:output_type -> enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionLicensesResponse
	20, // 40: enterpriseportal.subscriptions.v1.SubscriptionsService.CreateEnterpriseSubscriptionLicense:output_type -> enterpriseportal.subscriptions.v1.CreateEnterpriseSubscriptionLicenseResponse
	22, // 41: enterpriseportal.subscriptions.v1.SubscriptionsService.RevokeEnterpriseSubscriptionLicense:output_type -> enterpriseportal.subscriptions.v1.RevokeEnterpriseSubscriptionLicenseResponse
	24, // 42: enterpriseportal.subscriptions.v1.SubscriptionsService.UpdateEnterpriseSubscription:output_type -> enterpriseportal.subscriptions.v1.UpdateEnterpriseSubscriptionResponse
	26, // 43: enterpriseportal.subscriptions.v1.SubscriptionsService.ArchiveEnterpriseSubscription:output_type -> enterpriseportal.subscriptions.v1.ArchiveEnterpriseSubscriptionResponse
	28, // 44: enterpriseportal.subscriptions.v1.SubscriptionsService.CreateEnterpriseSubscription:output_type -> enterpriseportal.subscriptions.v1.CreateEnterpriseSubscriptionResponse
	31, // 45: enterpriseportal.subscriptions.v1.SubscriptionsService.UpdateEnterpriseSubscriptionMembership:output_type -> enterpriseportal.subscriptions.v1.UpdateEnterpriseSubscriptionMembershipResponse
	37, // [37:46] is the sub-list for method output_type
	28, // [28:37] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_subscriptions_proto_init() }
func file_subscriptions_proto_init() {
	if File_subscriptions_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_subscriptions_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseSubscriptionCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseSubscriptionLicenseKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseSubscriptionLicenseCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseSubscriptionLicense); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEnterpriseSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEnterpriseSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnterpriseSubscriptionsFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnterpriseSubscriptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnterpriseSubscriptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnterpriseSubscriptionLicensesFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnterpriseSubscriptionLicensesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnterpriseSubscriptionLicensesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEnterpriseSubscriptionLicenseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEnterpriseSubscriptionLicenseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeEnterpriseSubscriptionLicenseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeEnterpriseSubscriptionLicenseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEnterpriseSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEnterpriseSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveEnterpriseSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveEnterpriseSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEnterpriseSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEnterpriseSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseSubscriptionMembership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEnterpriseSubscriptionMembershipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEnterpriseSubscriptionMembershipResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Permission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseSubscription_SalesforceMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscriptions_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseSubscriptionLicenseKey_Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_subscriptions_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*EnterpriseSubscriptionLicense_Key)(nil),
	}
	file_subscriptions_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*GetEnterpriseSubscriptionRequest_Id)(nil),
	}
	file_subscriptions_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*ListEnterpriseSubscriptionsFilter_SubscriptionId)(nil),
		(*ListEnterpriseSubscriptionsFilter_IsArchived)(nil),
		(*ListEnterpriseSubscriptionsFilter_Permission)(nil),
	}
	file_subscriptions_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*ListEnterpriseSubscriptionLicensesFilter_SubscriptionId)(nil),
		(*ListEnterpriseSubscriptionLicensesFilter_Type)(nil),
		(*ListEnterpriseSubscriptionLicensesFilter_IsRevoked)(nil),
		(*ListEnterpriseSubscriptionLicensesFilter_LicenseKeySubstring)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_subscriptions_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_subscriptions_proto_goTypes,
		DependencyIndexes: file_subscriptions_proto_depIdxs,
		EnumInfos:         file_subscriptions_proto_enumTypes,
		MessageInfos:      file_subscriptions_proto_msgTypes,
	}.Build()
	File_subscriptions_proto = out.File
	file_subscriptions_proto_rawDesc = nil
	file_subscriptions_proto_goTypes = nil
	file_subscriptions_proto_depIdxs = nil
}
