// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package inference

import (
	"context"
	"regexp"
	"sync"
)

// MockGitClient is a mock implementation of the GitClient interface (from
// the package
// github.com/sourcegraph/sourcegraph/lib/codeintel/autoindex/inference)
// used for unit testing.
type MockGitClient struct {
	// FileExistsFunc is an instance of a mock function object controlling
	// the behavior of the method FileExists.
	FileExistsFunc *GitClientFileExistsFunc
	// ListFilesFunc is an instance of a mock function object controlling
	// the behavior of the method ListFiles.
	ListFilesFunc *GitClientListFilesFunc
	// RawContentsFunc is an instance of a mock function object controlling
	// the behavior of the method RawContents.
	RawContentsFunc *GitClientRawContentsFunc
}

// NewMockGitClient creates a new mock of the GitClient interface. All
// methods return zero values for all results, unless overwritten.
func NewMockGitClient() *MockGitClient {
	return &MockGitClient{
		FileExistsFunc: &GitClientFileExistsFunc{
			defaultHook: func(context.Context, string) (bool, error) {
				return false, nil
			},
		},
		ListFilesFunc: &GitClientListFilesFunc{
			defaultHook: func(context.Context, *regexp.Regexp) ([]string, error) {
				return nil, nil
			},
		},
		RawContentsFunc: &GitClientRawContentsFunc{
			defaultHook: func(context.Context, string) ([]byte, error) {
				return nil, nil
			},
		},
	}
}

// NewMockGitClientFrom creates a new mock of the MockGitClient interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockGitClientFrom(i GitClient) *MockGitClient {
	return &MockGitClient{
		FileExistsFunc: &GitClientFileExistsFunc{
			defaultHook: i.FileExists,
		},
		ListFilesFunc: &GitClientListFilesFunc{
			defaultHook: i.ListFiles,
		},
		RawContentsFunc: &GitClientRawContentsFunc{
			defaultHook: i.RawContents,
		},
	}
}

// GitClientFileExistsFunc describes the behavior when the FileExists method
// of the parent MockGitClient instance is invoked.
type GitClientFileExistsFunc struct {
	defaultHook func(context.Context, string) (bool, error)
	hooks       []func(context.Context, string) (bool, error)
	history     []GitClientFileExistsFuncCall
	mutex       sync.Mutex
}

// FileExists delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitClient) FileExists(v0 context.Context, v1 string) (bool, error) {
	r0, r1 := m.FileExistsFunc.nextHook()(v0, v1)
	m.FileExistsFunc.appendCall(GitClientFileExistsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FileExists method of
// the parent MockGitClient instance is invoked and the hook queue is empty.
func (f *GitClientFileExistsFunc) SetDefaultHook(hook func(context.Context, string) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FileExists method of the parent MockGitClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GitClientFileExistsFunc) PushHook(hook func(context.Context, string) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GitClientFileExistsFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GitClientFileExistsFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, string) (bool, error) {
		return r0, r1
	})
}

func (f *GitClientFileExistsFunc) nextHook() func(context.Context, string) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitClientFileExistsFunc) appendCall(r0 GitClientFileExistsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitClientFileExistsFuncCall objects
// describing the invocations of this function.
func (f *GitClientFileExistsFunc) History() []GitClientFileExistsFuncCall {
	f.mutex.Lock()
	history := make([]GitClientFileExistsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitClientFileExistsFuncCall is an object that describes an invocation of
// method FileExists on an instance of MockGitClient.
type GitClientFileExistsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitClientFileExistsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitClientFileExistsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitClientListFilesFunc describes the behavior when the ListFiles method
// of the parent MockGitClient instance is invoked.
type GitClientListFilesFunc struct {
	defaultHook func(context.Context, *regexp.Regexp) ([]string, error)
	hooks       []func(context.Context, *regexp.Regexp) ([]string, error)
	history     []GitClientListFilesFuncCall
	mutex       sync.Mutex
}

// ListFiles delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitClient) ListFiles(v0 context.Context, v1 *regexp.Regexp) ([]string, error) {
	r0, r1 := m.ListFilesFunc.nextHook()(v0, v1)
	m.ListFilesFunc.appendCall(GitClientListFilesFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListFiles method of
// the parent MockGitClient instance is invoked and the hook queue is empty.
func (f *GitClientListFilesFunc) SetDefaultHook(hook func(context.Context, *regexp.Regexp) ([]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListFiles method of the parent MockGitClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GitClientListFilesFunc) PushHook(hook func(context.Context, *regexp.Regexp) ([]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GitClientListFilesFunc) SetDefaultReturn(r0 []string, r1 error) {
	f.SetDefaultHook(func(context.Context, *regexp.Regexp) ([]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GitClientListFilesFunc) PushReturn(r0 []string, r1 error) {
	f.PushHook(func(context.Context, *regexp.Regexp) ([]string, error) {
		return r0, r1
	})
}

func (f *GitClientListFilesFunc) nextHook() func(context.Context, *regexp.Regexp) ([]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitClientListFilesFunc) appendCall(r0 GitClientListFilesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitClientListFilesFuncCall objects
// describing the invocations of this function.
func (f *GitClientListFilesFunc) History() []GitClientListFilesFuncCall {
	f.mutex.Lock()
	history := make([]GitClientListFilesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitClientListFilesFuncCall is an object that describes an invocation of
// method ListFiles on an instance of MockGitClient.
type GitClientListFilesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *regexp.Regexp
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitClientListFilesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitClientListFilesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitClientRawContentsFunc describes the behavior when the RawContents
// method of the parent MockGitClient instance is invoked.
type GitClientRawContentsFunc struct {
	defaultHook func(context.Context, string) ([]byte, error)
	hooks       []func(context.Context, string) ([]byte, error)
	history     []GitClientRawContentsFuncCall
	mutex       sync.Mutex
}

// RawContents delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitClient) RawContents(v0 context.Context, v1 string) ([]byte, error) {
	r0, r1 := m.RawContentsFunc.nextHook()(v0, v1)
	m.RawContentsFunc.appendCall(GitClientRawContentsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RawContents method
// of the parent MockGitClient instance is invoked and the hook queue is
// empty.
func (f *GitClientRawContentsFunc) SetDefaultHook(hook func(context.Context, string) ([]byte, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RawContents method of the parent MockGitClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GitClientRawContentsFunc) PushHook(hook func(context.Context, string) ([]byte, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GitClientRawContentsFunc) SetDefaultReturn(r0 []byte, r1 error) {
	f.SetDefaultHook(func(context.Context, string) ([]byte, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GitClientRawContentsFunc) PushReturn(r0 []byte, r1 error) {
	f.PushHook(func(context.Context, string) ([]byte, error) {
		return r0, r1
	})
}

func (f *GitClientRawContentsFunc) nextHook() func(context.Context, string) ([]byte, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitClientRawContentsFunc) appendCall(r0 GitClientRawContentsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitClientRawContentsFuncCall objects
// describing the invocations of this function.
func (f *GitClientRawContentsFunc) History() []GitClientRawContentsFuncCall {
	f.mutex.Lock()
	history := make([]GitClientRawContentsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitClientRawContentsFuncCall is an object that describes an invocation of
// method RawContents on an instance of MockGitClient.
type GitClientRawContentsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []byte
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitClientRawContentsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitClientRawContentsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
