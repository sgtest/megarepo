package inference

import (
	"path/filepath"
	"strings"

	"github.com/grafana/regexp"

	"github.com/sourcegraph/sourcegraph/lib/codeintel/autoindex/config"
)

func InferJavaIndexJobs(gitserver GitClient, paths []string) (indexes []config.IndexJob) {
	if buildTool := javaBuildTool(paths); buildTool != "" {
		indexes = append(indexes, config.IndexJob{
			Indexer: "sourcegraph/lsif-java",
			IndexerArgs: []string{
				"lsif-java index --build-tool=" + buildTool,
			},
			Outfile: "dump.lsif",
			Root:    "",
			Steps:   []config.DockerStep{},
		})
	}
	return
}

func InferJavaIndexJobHints(gitserver GitClient, paths []string) (hints []config.IndexJobHint) {
	inferredDir := make(map[string]bool)
	for _, path := range paths {
		dir := filepath.Dir(path)
		if inferredDir[dir] {
			continue
		}
		base := filepath.Base(path)
		if base == "pom.xml" || base == "build.gradle" || base == "build.gradle.kts" {
			hints = append(hints, config.IndexJobHint{
				Root:           dir,
				Indexer:        "sourcegraph/lsif-java",
				HintConfidence: config.HintConfidenceProjectStructureSupported,
			})
			inferredDir[dir] = true
			continue
		}
		// if we get here, then build config hasnt been found in this directory
		// so we will attempt to see if any known languages reside here.
		ext := filepath.Ext(path)
		if ext == ".java" || ext == ".scala" || ext == ".kt" {
			hints = append(hints, config.IndexJobHint{
				Root:           dir,
				Indexer:        "sourcegraph/lsif-java",
				HintConfidence: config.HintConfidenceLanguageSupport,
			})
		}
	}

	return
}

func JavaPatterns() []*regexp.Regexp {
	return []*regexp.Regexp{
		suffixPattern(pathPattern(rawPattern("lsif-java.json"))),
		suffixPattern(rawPattern(".java")),
		suffixPattern(rawPattern(".scala")),
		suffixPattern(rawPattern(".kt")),
		suffixPattern(pathPattern(rawPattern("pom.xml"))),
		suffixPattern(pathPattern(rawPattern("build.gradle(.kts)?"))),
	}
}

func javaBuildTool(paths []string) string {
	for _, buildToolPath := range paths {
		// The "lsif-java.json" file is generated by the JVMPACKAGES
		// external service type. This file is used to index package
		// repositories such as the JDK sources and published Java
		// libraries.
		if buildToolPath == "lsif-java.json" {
			for _, path := range paths {
				if isLsifJavaIndexablePath(path) {
					return "lsif"
				}
			}
			return ""
		}
		// Maven, Gradle and sbt are intentionally left out to begin
		// with as we gain more experience with auto-indexing package
		// repos, which have a higher likelyhood of indexing
		// successfully because they have a simpler build structure
		// compared to Gradle/Maven repos.
	}
	return ""
}

func isLsifJavaIndexablePath(path string) bool {
	return strings.HasSuffix(path, ".java") ||
		strings.HasSuffix(path, ".scala") ||
		strings.HasSuffix(path, ".kt")
}
