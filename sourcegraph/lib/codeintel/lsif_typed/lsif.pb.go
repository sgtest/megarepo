// Protobuf schema for the new "LSIF typed" format. See RFC 519 for more
// details:
// https://docs.google.com/document/d/1bfAZm4K2KUHCMoZiO4qFV7yZmK7wyYxI8MsEL-I6IJg/edit#heading=h.trqab8y0kufp

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: lib/codeintel/lsif_typed/lsif.proto

package lsif_typed

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Metadata_PositionEncoding int32

const (
	Metadata_POSITION_ENCODING_UNSPECIFIED Metadata_PositionEncoding = 0
	Metadata_POSITION_ENCODING_UTF8        Metadata_PositionEncoding = 1
	Metadata_POSITION_ENCODING_UTF16       Metadata_PositionEncoding = 2
)

// Enum value maps for Metadata_PositionEncoding.
var (
	Metadata_PositionEncoding_name = map[int32]string{
		0: "POSITION_ENCODING_UNSPECIFIED",
		1: "POSITION_ENCODING_UTF8",
		2: "POSITION_ENCODING_UTF16",
	}
	Metadata_PositionEncoding_value = map[string]int32{
		"POSITION_ENCODING_UNSPECIFIED": 0,
		"POSITION_ENCODING_UTF8":        1,
		"POSITION_ENCODING_UTF16":       2,
	}
)

func (x Metadata_PositionEncoding) Enum() *Metadata_PositionEncoding {
	p := new(Metadata_PositionEncoding)
	*p = x
	return p
}

func (x Metadata_PositionEncoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Metadata_PositionEncoding) Descriptor() protoreflect.EnumDescriptor {
	return file_lib_codeintel_lsif_typed_lsif_proto_enumTypes[0].Descriptor()
}

func (Metadata_PositionEncoding) Type() protoreflect.EnumType {
	return &file_lib_codeintel_lsif_typed_lsif_proto_enumTypes[0]
}

func (x Metadata_PositionEncoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Metadata_PositionEncoding.Descriptor instead.
func (Metadata_PositionEncoding) EnumDescriptor() ([]byte, []int) {
	return file_lib_codeintel_lsif_typed_lsif_proto_rawDescGZIP(), []int{1, 0}
}

type Symbol_Unique int32

const (
	Symbol_UNIQUE_UNSPECIFIED Symbol_Unique = 0
	Symbol_UNIQUE_DOCUMENT    Symbol_Unique = 1
	Symbol_UNIQUE_GLOBAL      Symbol_Unique = 2
)

// Enum value maps for Symbol_Unique.
var (
	Symbol_Unique_name = map[int32]string{
		0: "UNIQUE_UNSPECIFIED",
		1: "UNIQUE_DOCUMENT",
		2: "UNIQUE_GLOBAL",
	}
	Symbol_Unique_value = map[string]int32{
		"UNIQUE_UNSPECIFIED": 0,
		"UNIQUE_DOCUMENT":    1,
		"UNIQUE_GLOBAL":      2,
	}
)

func (x Symbol_Unique) Enum() *Symbol_Unique {
	p := new(Symbol_Unique)
	*p = x
	return p
}

func (x Symbol_Unique) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Symbol_Unique) Descriptor() protoreflect.EnumDescriptor {
	return file_lib_codeintel_lsif_typed_lsif_proto_enumTypes[1].Descriptor()
}

func (Symbol_Unique) Type() protoreflect.EnumType {
	return &file_lib_codeintel_lsif_typed_lsif_proto_enumTypes[1]
}

func (x Symbol_Unique) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Symbol_Unique.Descriptor instead.
func (Symbol_Unique) EnumDescriptor() ([]byte, []int) {
	return file_lib_codeintel_lsif_typed_lsif_proto_rawDescGZIP(), []int{5, 0}
}

type Occurrence_Role int32

const (
	Occurrence_ROLE_UNSPECIFIED Occurrence_Role = 0
	Occurrence_ROLE_DEFINITION  Occurrence_Role = 1
	Occurrence_ROLE_REFERENCE   Occurrence_Role = 2
)

// Enum value maps for Occurrence_Role.
var (
	Occurrence_Role_name = map[int32]string{
		0: "ROLE_UNSPECIFIED",
		1: "ROLE_DEFINITION",
		2: "ROLE_REFERENCE",
	}
	Occurrence_Role_value = map[string]int32{
		"ROLE_UNSPECIFIED": 0,
		"ROLE_DEFINITION":  1,
		"ROLE_REFERENCE":   2,
	}
)

func (x Occurrence_Role) Enum() *Occurrence_Role {
	p := new(Occurrence_Role)
	*p = x
	return p
}

func (x Occurrence_Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Occurrence_Role) Descriptor() protoreflect.EnumDescriptor {
	return file_lib_codeintel_lsif_typed_lsif_proto_enumTypes[2].Descriptor()
}

func (Occurrence_Role) Type() protoreflect.EnumType {
	return &file_lib_codeintel_lsif_typed_lsif_proto_enumTypes[2]
}

func (x Occurrence_Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Occurrence_Role.Descriptor instead.
func (Occurrence_Role) EnumDescriptor() ([]byte, []int) {
	return file_lib_codeintel_lsif_typed_lsif_proto_rawDescGZIP(), []int{6, 0}
}

type Occurrence_Highlight int32

const (
	Occurrence_HIGHLIGHT_UNSPECIFIED        Occurrence_Highlight = 0
	Occurrence_HIGHLIGHT_STRING_LITERAL     Occurrence_Highlight = 1
	Occurrence_HIGHLIGHT_NUMERIC_LITERAL    Occurrence_Highlight = 2
	Occurrence_HIGHLIGHT_IDENTIFIER         Occurrence_Highlight = 3
	Occurrence_HIGHLIGHT_METHOD_IDENTIFIER  Occurrence_Highlight = 4
	Occurrence_HIGHLIGHT_TYPE_IDENTIFIER    Occurrence_Highlight = 5
	Occurrence_HIGHLIGHT_TERM_IDENTIFIER    Occurrence_Highlight = 6
	Occurrence_HIGHLIGHT_LOCAL_IDENTIFIER   Occurrence_Highlight = 7
	Occurrence_HIGHLIGHT_SHADED_IDENTIFIER  Occurrence_Highlight = 8
	Occurrence_HIGHLIGHT_PACKAGE_IDENTIFIER Occurrence_Highlight = 9
)

// Enum value maps for Occurrence_Highlight.
var (
	Occurrence_Highlight_name = map[int32]string{
		0: "HIGHLIGHT_UNSPECIFIED",
		1: "HIGHLIGHT_STRING_LITERAL",
		2: "HIGHLIGHT_NUMERIC_LITERAL",
		3: "HIGHLIGHT_IDENTIFIER",
		4: "HIGHLIGHT_METHOD_IDENTIFIER",
		5: "HIGHLIGHT_TYPE_IDENTIFIER",
		6: "HIGHLIGHT_TERM_IDENTIFIER",
		7: "HIGHLIGHT_LOCAL_IDENTIFIER",
		8: "HIGHLIGHT_SHADED_IDENTIFIER",
		9: "HIGHLIGHT_PACKAGE_IDENTIFIER",
	}
	Occurrence_Highlight_value = map[string]int32{
		"HIGHLIGHT_UNSPECIFIED":        0,
		"HIGHLIGHT_STRING_LITERAL":     1,
		"HIGHLIGHT_NUMERIC_LITERAL":    2,
		"HIGHLIGHT_IDENTIFIER":         3,
		"HIGHLIGHT_METHOD_IDENTIFIER":  4,
		"HIGHLIGHT_TYPE_IDENTIFIER":    5,
		"HIGHLIGHT_TERM_IDENTIFIER":    6,
		"HIGHLIGHT_LOCAL_IDENTIFIER":   7,
		"HIGHLIGHT_SHADED_IDENTIFIER":  8,
		"HIGHLIGHT_PACKAGE_IDENTIFIER": 9,
	}
)

func (x Occurrence_Highlight) Enum() *Occurrence_Highlight {
	p := new(Occurrence_Highlight)
	*p = x
	return p
}

func (x Occurrence_Highlight) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Occurrence_Highlight) Descriptor() protoreflect.EnumDescriptor {
	return file_lib_codeintel_lsif_typed_lsif_proto_enumTypes[3].Descriptor()
}

func (Occurrence_Highlight) Type() protoreflect.EnumType {
	return &file_lib_codeintel_lsif_typed_lsif_proto_enumTypes[3]
}

func (x Occurrence_Highlight) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Occurrence_Highlight.Descriptor instead.
func (Occurrence_Highlight) EnumDescriptor() ([]byte, []int) {
	return file_lib_codeintel_lsif_typed_lsif_proto_rawDescGZIP(), []int{6, 1}
}

// Index represents an LSIF index. An index can be consumed in a streaming
// fashion by consuming one value at a time. In Java, use `parseDelimetedFrom`
// to consume the index in a streaming fashion. For other languages like Go, you
// need to write custom logic that decodes one LSIF `Value` at a time.
type Index struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata about this index.
	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Documents that belong to this index or the packages that are defined by
	// this index.
	Document []*Document `protobuf:"bytes,2,rep,name=document,proto3" json:"document,omitempty"`
	// Packages that are either referenced from this index or the packages that
	// are defined by this index.
	Package []*Package `protobuf:"bytes,3,rep,name=package,proto3" json:"package,omitempty"`
	// Symbols that are defined outside of this index but are referenced from
	// inside this index.
	ExternalSymbols []*Symbol `protobuf:"bytes,4,rep,name=external_symbols,json=externalSymbols,proto3" json:"external_symbols,omitempty"`
}

func (x *Index) Reset() {
	*x = Index{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Index) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Index) ProtoMessage() {}

func (x *Index) ProtoReflect() protoreflect.Message {
	mi := &file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Index.ProtoReflect.Descriptor instead.
func (*Index) Descriptor() ([]byte, []int) {
	return file_lib_codeintel_lsif_typed_lsif_proto_rawDescGZIP(), []int{0}
}

func (x *Index) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Index) GetDocument() []*Document {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *Index) GetPackage() []*Package {
	if x != nil {
		return x.Package
	}
	return nil
}

func (x *Index) GetExternalSymbols() []*Symbol {
	if x != nil {
		return x.ExternalSymbols
	}
	return nil
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToolInfo *ToolInfo `protobuf:"bytes,1,opt,name=tool_info,json=toolInfo,proto3" json:"tool_info,omitempty"`
	// URI-encoded absolute path to the root directory of this index. All
	// documents in this index must appear in a subdirectory of this root
	// directory.
	ProjectRoot      string                    `protobuf:"bytes,2,opt,name=project_root,json=projectRoot,proto3" json:"project_root,omitempty"`
	PositionEncoding Metadata_PositionEncoding `protobuf:"varint,3,opt,name=position_encoding,json=positionEncoding,proto3,enum=lib.codeintel.lsif_typed.Metadata_PositionEncoding" json:"position_encoding,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_lib_codeintel_lsif_typed_lsif_proto_rawDescGZIP(), []int{1}
}

func (x *Metadata) GetToolInfo() *ToolInfo {
	if x != nil {
		return x.ToolInfo
	}
	return nil
}

func (x *Metadata) GetProjectRoot() string {
	if x != nil {
		return x.ProjectRoot
	}
	return ""
}

func (x *Metadata) GetPositionEncoding() Metadata_PositionEncoding {
	if x != nil {
		return x.PositionEncoding
	}
	return Metadata_POSITION_ENCODING_UNSPECIFIED
}

type ToolInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ToolInfo) Reset() {
	*x = ToolInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolInfo) ProtoMessage() {}

func (x *ToolInfo) ProtoReflect() protoreflect.Message {
	mi := &file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolInfo.ProtoReflect.Descriptor instead.
func (*ToolInfo) Descriptor() ([]byte, []int) {
	return file_lib_codeintel_lsif_typed_lsif_proto_rawDescGZIP(), []int{2}
}

func (x *ToolInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ToolInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Document defines information about a particular source file.
type Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Relative path to the `Index.project_root` directory.
	RelativePath string `protobuf:"bytes,1,opt,name=relative_path,json=relativePath,proto3" json:"relative_path,omitempty"`
	// Symbol occurrences that appear in this file.
	Occurrences []*Occurrence `protobuf:"bytes,2,rep,name=occurrences,proto3" json:"occurrences,omitempty"`
	// Symbols that are defined within this document.
	Symbols []*Symbol `protobuf:"bytes,3,rep,name=symbols,proto3" json:"symbols,omitempty"`
}

func (x *Document) Reset() {
	*x = Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_lib_codeintel_lsif_typed_lsif_proto_rawDescGZIP(), []int{3}
}

func (x *Document) GetRelativePath() string {
	if x != nil {
		return x.RelativePath
	}
	return ""
}

func (x *Document) GetOccurrences() []*Occurrence {
	if x != nil {
		return x.Occurrences
	}
	return nil
}

func (x *Document) GetSymbols() []*Symbol {
	if x != nil {
		return x.Symbols
	}
	return nil
}

// Package defines a publishable artifact such as an npm package, Docker
// container, JVM dependency, or a Cargo crate.
type Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of this package that can be referenced from
	// `Symbol.package_uri`.  This URI is not intended to be displayed to humans,
	// but it's recommended to use a human-readable format to aid with debugging.
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// Name of this package, for example "@types/react" or
	// "com.google.guava:guava".
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Version of this package, for example "0.1.0" or "2.1.5".
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// Package manager, for example "npm", "maven" or "cargo".
	Manager string `protobuf:"bytes,4,opt,name=manager,proto3" json:"manager,omitempty"`
}

func (x *Package) Reset() {
	*x = Package{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package) ProtoMessage() {}

func (x *Package) ProtoReflect() protoreflect.Message {
	mi := &file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package.ProtoReflect.Descriptor instead.
func (*Package) Descriptor() ([]byte, []int) {
	return file_lib_codeintel_lsif_typed_lsif_proto_rawDescGZIP(), []int{4}
}

func (x *Package) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *Package) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Package) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Package) GetManager() string {
	if x != nil {
		return x.Manager
	}
	return ""
}

// Symbol defines a symbol, such as a function or an interface.
type Symbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of this symbol, which can be referenced from
	// Occurence. An empty uri means this symbol can be ignored.
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// Determines whether this symbol is local to a single document or if can be
	// referenced from multiple documents.
	// Document symbols (`Document.symbols`) can be either local or global.
	// External symbols (`Index.external_symbols`) must be global.
	Unique Symbol_Unique `protobuf:"varint,2,opt,name=unique,proto3,enum=lib.codeintel.lsif_typed.Symbol_Unique" json:"unique,omitempty"`
	// (optional, but strongly recommended) The markdown-formatted documentation
	// for this symbol. This field is repeated to allow different kinds of
	// documentation.  For example, it's nice to include both the signature of a
	// method (parameters and return type) along with the accompanying docstring.
	Documentation []string `protobuf:"bytes,3,rep,name=documentation,proto3" json:"documentation,omitempty"`
	// (optional) Links to the original package that defines this symbol to
	// enable navigation across different LSIF indexes (whether they come from
	// different projects or git repositories). This field must be non-empty for
	// toplevel symbols (`Value.value`).
	PackageUri string `protobuf:"bytes,4,opt,name=package_uri,json=packageUri,proto3" json:"package_uri,omitempty"`
	// (optional) Symbols that should be included together with this symbol when
	// resolving "find references".  For example, the symbol of a TypeScript or
	// Java method that implements an interface method should list the interface
	// method here.
	ReferenceSymbols []string `protobuf:"bytes,5,rep,name=reference_symbols,json=referenceSymbols,proto3" json:"reference_symbols,omitempty"`
	// (optional) Symbols that are "implemented" by this symbol. For example,
	// the symbol of a TypeScript or Java class that implements an interface
	// should list the interface here.
	ImplementationSymbols []string `protobuf:"bytes,6,rep,name=implementation_symbols,json=implementationSymbols,proto3" json:"implementation_symbols,omitempty"`
}

func (x *Symbol) Reset() {
	*x = Symbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Symbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Symbol) ProtoMessage() {}

func (x *Symbol) ProtoReflect() protoreflect.Message {
	mi := &file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Symbol.ProtoReflect.Descriptor instead.
func (*Symbol) Descriptor() ([]byte, []int) {
	return file_lib_codeintel_lsif_typed_lsif_proto_rawDescGZIP(), []int{5}
}

func (x *Symbol) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *Symbol) GetUnique() Symbol_Unique {
	if x != nil {
		return x.Unique
	}
	return Symbol_UNIQUE_UNSPECIFIED
}

func (x *Symbol) GetDocumentation() []string {
	if x != nil {
		return x.Documentation
	}
	return nil
}

func (x *Symbol) GetPackageUri() string {
	if x != nil {
		return x.PackageUri
	}
	return ""
}

func (x *Symbol) GetReferenceSymbols() []string {
	if x != nil {
		return x.ReferenceSymbols
	}
	return nil
}

func (x *Symbol) GetImplementationSymbols() []string {
	if x != nil {
		return x.ImplementationSymbols
	}
	return nil
}

// Occurrence associates a source position with a symbol and/or highlighting
// information.
type Occurrence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The source position of this occurrence. Must be exactly three or four
	// elements:
	//
	// - Four elements: [startLine, startCharacter, endLine, endCharacter]
	// - Three elements: [startLine, startCharacter, endCharacter] (endLine ==
	// startLine)
	//
	// Line numbers and characters are always 0-based. Make sure to increment the
	// line/character values before displaying them in an editor-like UI because
	// editors conventionally use 1-based numbers.
	//
	// Ranges appear frequently in real-world LSIF payloads, the `repeated int32`
	// encoding was chosen over the LSP `Range(start:Position,end:Position)`
	// encoding for performance reasons.  Benchmarks reveal that this change alone
	// reduces the total payload size by ~2x in both compressed JSON or Protobuf
	// encoding. This encoding is admittedly more embarrassing to work with in
	// some programming languages but we hope the increased performance
	// improvements make up for it.
	Range []int32 `protobuf:"varint,1,rep,packed,name=range,proto3" json:"range,omitempty"`
	// (optional) References the `Symbol.uri` field. Can be empty if this is only
	// a highlighting occurrence.
	SymbolUri string `protobuf:"bytes,2,opt,name=symbol_uri,json=symbolUri,proto3" json:"symbol_uri,omitempty"`
	// (optional) Is the symbol_uri defined or referenced at this occurrence?
	SymbolRole Occurrence_Role `protobuf:"varint,3,opt,name=symbol_role,json=symbolRole,proto3,enum=lib.codeintel.lsif_typed.Occurrence_Role" json:"symbol_role,omitempty"`
	// (optional) Markdown-formatted documentation for this specific range.  If
	// empty, the `Symbol.documentation` field is used instead. One example
	// where this field might be useful is when the symbol represents a generic
	// function (with abstract type parameters such as `List<T>`) and at this
	// occurrence we know the exact values (such as `List<String>`).
	SymbolDocumentation []string `protobuf:"bytes,4,rep,name=symbol_documentation,json=symbolDocumentation,proto3" json:"symbol_documentation,omitempty"`
	// (optional) What syntax highlighting class should be used for this range?
	Highlight Occurrence_Highlight `protobuf:"varint,5,opt,name=highlight,proto3,enum=lib.codeintel.lsif_typed.Occurrence_Highlight" json:"highlight,omitempty"`
}

func (x *Occurrence) Reset() {
	*x = Occurrence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Occurrence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Occurrence) ProtoMessage() {}

func (x *Occurrence) ProtoReflect() protoreflect.Message {
	mi := &file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Occurrence.ProtoReflect.Descriptor instead.
func (*Occurrence) Descriptor() ([]byte, []int) {
	return file_lib_codeintel_lsif_typed_lsif_proto_rawDescGZIP(), []int{6}
}

func (x *Occurrence) GetRange() []int32 {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *Occurrence) GetSymbolUri() string {
	if x != nil {
		return x.SymbolUri
	}
	return ""
}

func (x *Occurrence) GetSymbolRole() Occurrence_Role {
	if x != nil {
		return x.SymbolRole
	}
	return Occurrence_ROLE_UNSPECIFIED
}

func (x *Occurrence) GetSymbolDocumentation() []string {
	if x != nil {
		return x.SymbolDocumentation
	}
	return nil
}

func (x *Occurrence) GetHighlight() Occurrence_Highlight {
	if x != nil {
		return x.Highlight
	}
	return Occurrence_HIGHLIGHT_UNSPECIFIED
}

var File_lib_codeintel_lsif_typed_lsif_proto protoreflect.FileDescriptor

var file_lib_codeintel_lsif_typed_lsif_proto_rawDesc = []byte{
	0x0a, 0x23, 0x6c, 0x69, 0x62, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2f,
	0x6c, 0x73, 0x69, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x64, 0x2f, 0x6c, 0x73, 0x69, 0x66, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x6c, 0x69, 0x62, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x69,
	0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x6c, 0x73, 0x69, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x64, 0x22,
	0x91, 0x02, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69,
	0x62, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x6c, 0x73, 0x69, 0x66,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x64, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x08, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69,
	0x62, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x6c, 0x73, 0x69, 0x66,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x64, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x69, 0x62,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x6c, 0x73, 0x69, 0x66, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x64, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x07, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6c, 0x69, 0x62, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x6c,
	0x2e, 0x6c, 0x73, 0x69, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x64, 0x2e, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x73, 0x22, 0xc0, 0x02, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x3f, 0x0a, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x62, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x69, 0x6e,
	0x74, 0x65, 0x6c, 0x2e, 0x6c, 0x73, 0x69, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x64, 0x2e, 0x54,
	0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x74, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x6f, 0x6f, 0x74, 0x12, 0x60, 0x0a, 0x11, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x33, 0x2e, 0x6c, 0x69, 0x62, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e,
	0x6c, 0x73, 0x69, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x64, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x6e, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a,
	0x16, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x55, 0x54, 0x46, 0x38, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55,
	0x54, 0x46, 0x31, 0x36, 0x10, 0x02, 0x22, 0x38, 0x0a, 0x08, 0x54, 0x6f, 0x6f, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xb3, 0x01, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x46, 0x0a, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x69, 0x62, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x6c, 0x73, 0x69, 0x66, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x64, 0x2e, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x6f,
	0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x69,
	0x62, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x6c, 0x73, 0x69, 0x66,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x64, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x07, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x22, 0x63, 0x0a, 0x07, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x22, 0xd0, 0x02, 0x0a, 0x06,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x3f, 0x0a, 0x06, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6c, 0x69, 0x62, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x6c, 0x73, 0x69, 0x66, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x64, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x55, 0x72, 0x69,
	0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x35, 0x0a,
	0x16, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x73, 0x22, 0x48, 0x0a, 0x06, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x16,
	0x0a, 0x12, 0x55, 0x4e, 0x49, 0x51, 0x55, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x49, 0x51, 0x55, 0x45,
	0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x55,
	0x4e, 0x49, 0x51, 0x55, 0x45, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10, 0x02, 0x22, 0x97,
	0x05, 0x0a, 0x0a, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x75, 0x72,
	0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x55,
	0x72, 0x69, 0x12, 0x4a, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6c, 0x69, 0x62, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x6c, 0x73, 0x69, 0x66, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x64, 0x2e, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x31,
	0x0a, 0x14, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4c, 0x0a, 0x09, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6c, 0x69, 0x62, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x69,
	0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x6c, 0x73, 0x69, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x64, 0x2e,
	0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x22,
	0x45, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52,
	0x45, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x22, 0xbf, 0x02, 0x0a, 0x09, 0x48, 0x69, 0x67, 0x68, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x49, 0x47, 0x48, 0x4c, 0x49, 0x47, 0x48,
	0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1c, 0x0a, 0x18, 0x48, 0x49, 0x47, 0x48, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x53, 0x54, 0x52,
	0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x49, 0x54, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1d, 0x0a,
	0x19, 0x48, 0x49, 0x47, 0x48, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x45, 0x52,
	0x49, 0x43, 0x5f, 0x4c, 0x49, 0x54, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14,
	0x48, 0x49, 0x47, 0x48, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49,
	0x46, 0x49, 0x45, 0x52, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x48, 0x49, 0x47, 0x48, 0x4c, 0x49,
	0x47, 0x48, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54,
	0x49, 0x46, 0x49, 0x45, 0x52, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x48, 0x49, 0x47, 0x48, 0x4c,
	0x49, 0x47, 0x48, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49,
	0x46, 0x49, 0x45, 0x52, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x48, 0x49, 0x47, 0x48, 0x4c, 0x49,
	0x47, 0x48, 0x54, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46,
	0x49, 0x45, 0x52, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x48, 0x49, 0x47, 0x48, 0x4c, 0x49, 0x47,
	0x48, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46,
	0x49, 0x45, 0x52, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x48, 0x49, 0x47, 0x48, 0x4c, 0x49, 0x47,
	0x48, 0x54, 0x5f, 0x53, 0x48, 0x41, 0x44, 0x45, 0x44, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49,
	0x46, 0x49, 0x45, 0x52, 0x10, 0x08, 0x12, 0x20, 0x0a, 0x1c, 0x48, 0x49, 0x47, 0x48, 0x4c, 0x49,
	0x47, 0x48, 0x54, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x44, 0x45, 0x4e,
	0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x10, 0x09, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x6c,
	0x69, 0x62, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2f, 0x6c, 0x73, 0x69,
	0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x64, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lib_codeintel_lsif_typed_lsif_proto_rawDescOnce sync.Once
	file_lib_codeintel_lsif_typed_lsif_proto_rawDescData = file_lib_codeintel_lsif_typed_lsif_proto_rawDesc
)

func file_lib_codeintel_lsif_typed_lsif_proto_rawDescGZIP() []byte {
	file_lib_codeintel_lsif_typed_lsif_proto_rawDescOnce.Do(func() {
		file_lib_codeintel_lsif_typed_lsif_proto_rawDescData = protoimpl.X.CompressGZIP(file_lib_codeintel_lsif_typed_lsif_proto_rawDescData)
	})
	return file_lib_codeintel_lsif_typed_lsif_proto_rawDescData
}

var file_lib_codeintel_lsif_typed_lsif_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_lib_codeintel_lsif_typed_lsif_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_lib_codeintel_lsif_typed_lsif_proto_goTypes = []interface{}{
	(Metadata_PositionEncoding)(0), // 0: lib.codeintel.lsif_typed.Metadata.PositionEncoding
	(Symbol_Unique)(0),             // 1: lib.codeintel.lsif_typed.Symbol.Unique
	(Occurrence_Role)(0),           // 2: lib.codeintel.lsif_typed.Occurrence.Role
	(Occurrence_Highlight)(0),      // 3: lib.codeintel.lsif_typed.Occurrence.Highlight
	(*Index)(nil),                  // 4: lib.codeintel.lsif_typed.Index
	(*Metadata)(nil),               // 5: lib.codeintel.lsif_typed.Metadata
	(*ToolInfo)(nil),               // 6: lib.codeintel.lsif_typed.ToolInfo
	(*Document)(nil),               // 7: lib.codeintel.lsif_typed.Document
	(*Package)(nil),                // 8: lib.codeintel.lsif_typed.Package
	(*Symbol)(nil),                 // 9: lib.codeintel.lsif_typed.Symbol
	(*Occurrence)(nil),             // 10: lib.codeintel.lsif_typed.Occurrence
}
var file_lib_codeintel_lsif_typed_lsif_proto_depIdxs = []int32{
	5,  // 0: lib.codeintel.lsif_typed.Index.metadata:type_name -> lib.codeintel.lsif_typed.Metadata
	7,  // 1: lib.codeintel.lsif_typed.Index.document:type_name -> lib.codeintel.lsif_typed.Document
	8,  // 2: lib.codeintel.lsif_typed.Index.package:type_name -> lib.codeintel.lsif_typed.Package
	9,  // 3: lib.codeintel.lsif_typed.Index.external_symbols:type_name -> lib.codeintel.lsif_typed.Symbol
	6,  // 4: lib.codeintel.lsif_typed.Metadata.tool_info:type_name -> lib.codeintel.lsif_typed.ToolInfo
	0,  // 5: lib.codeintel.lsif_typed.Metadata.position_encoding:type_name -> lib.codeintel.lsif_typed.Metadata.PositionEncoding
	10, // 6: lib.codeintel.lsif_typed.Document.occurrences:type_name -> lib.codeintel.lsif_typed.Occurrence
	9,  // 7: lib.codeintel.lsif_typed.Document.symbols:type_name -> lib.codeintel.lsif_typed.Symbol
	1,  // 8: lib.codeintel.lsif_typed.Symbol.unique:type_name -> lib.codeintel.lsif_typed.Symbol.Unique
	2,  // 9: lib.codeintel.lsif_typed.Occurrence.symbol_role:type_name -> lib.codeintel.lsif_typed.Occurrence.Role
	3,  // 10: lib.codeintel.lsif_typed.Occurrence.highlight:type_name -> lib.codeintel.lsif_typed.Occurrence.Highlight
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_lib_codeintel_lsif_typed_lsif_proto_init() }
func file_lib_codeintel_lsif_typed_lsif_proto_init() {
	if File_lib_codeintel_lsif_typed_lsif_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Index); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToolInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Symbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Occurrence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lib_codeintel_lsif_typed_lsif_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_lib_codeintel_lsif_typed_lsif_proto_goTypes,
		DependencyIndexes: file_lib_codeintel_lsif_typed_lsif_proto_depIdxs,
		EnumInfos:         file_lib_codeintel_lsif_typed_lsif_proto_enumTypes,
		MessageInfos:      file_lib_codeintel_lsif_typed_lsif_proto_msgTypes,
	}.Build()
	File_lib_codeintel_lsif_typed_lsif_proto = out.File
	file_lib_codeintel_lsif_typed_lsif_proto_rawDesc = nil
	file_lib_codeintel_lsif_typed_lsif_proto_goTypes = nil
	file_lib_codeintel_lsif_typed_lsif_proto_depIdxs = nil
}
