// An index contains one or more pieces of information about a given piece of
// source code or software artifact. Complementary information can be merged
// together from multiple sources to provide a unified code intelligence
// experience.
//
// Programs producing a file of this format is an "indexer" and may operate
// somewhere on the spectrum between precision, such as indexes produced by
// compiler-backed indexers, and heurstics, such as indexes produced by local
// syntax-directed analysis for scope rules.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: lib/codeintel/lsif_typed/lsif.proto

package lsif_typed

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProtocolVersion int32

const (
	ProtocolVersion_UnspecifiedProtocolVersion ProtocolVersion = 0
)

// Enum value maps for ProtocolVersion.
var (
	ProtocolVersion_name = map[int32]string{
		0: "UnspecifiedProtocolVersion",
	}
	ProtocolVersion_value = map[string]int32{
		"UnspecifiedProtocolVersion": 0,
	}
)

func (x ProtocolVersion) Enum() *ProtocolVersion {
	p := new(ProtocolVersion)
	*p = x
	return p
}

func (x ProtocolVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtocolVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_lib_codeintel_lsif_typed_lsif_proto_enumTypes[0].Descriptor()
}

func (ProtocolVersion) Type() protoreflect.EnumType {
	return &file_lib_codeintel_lsif_typed_lsif_proto_enumTypes[0]
}

func (x ProtocolVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtocolVersion.Descriptor instead.
func (ProtocolVersion) EnumDescriptor() ([]byte, []int) {
	return file_lib_codeintel_lsif_typed_lsif_proto_rawDescGZIP(), []int{0}
}

type TextEncoding int32

const (
	TextEncoding_UnspecifiedTextEncoding TextEncoding = 0
	TextEncoding_UTF8                    TextEncoding = 1
	TextEncoding_UTF16                   TextEncoding = 2
)

// Enum value maps for TextEncoding.
var (
	TextEncoding_name = map[int32]string{
		0: "UnspecifiedTextEncoding",
		1: "UTF8",
		2: "UTF16",
	}
	TextEncoding_value = map[string]int32{
		"UnspecifiedTextEncoding": 0,
		"UTF8":                    1,
		"UTF16":                   2,
	}
)

func (x TextEncoding) Enum() *TextEncoding {
	p := new(TextEncoding)
	*p = x
	return p
}

func (x TextEncoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TextEncoding) Descriptor() protoreflect.EnumDescriptor {
	return file_lib_codeintel_lsif_typed_lsif_proto_enumTypes[1].Descriptor()
}

func (TextEncoding) Type() protoreflect.EnumType {
	return &file_lib_codeintel_lsif_typed_lsif_proto_enumTypes[1]
}

func (x TextEncoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TextEncoding.Descriptor instead.
func (TextEncoding) EnumDescriptor() ([]byte, []int) {
	return file_lib_codeintel_lsif_typed_lsif_proto_rawDescGZIP(), []int{1}
}

// SymbolRole declares what "role" a symbol has in an occurrence.  A role is
// encoded as a bitmask where each bit represents a different role. For example,
// to determine if the `Import` role is set test whether the second bit of the
// enum value is defined. In psuedo-code, this can be implemented with the
// logic: `const isImportRole = (role.value & SymbolRole.Import.value) > 0`.
type SymbolRole int32

const (
	SymbolRole_UnspecifiedSymbolRole SymbolRole = 0
	// Is the symbol defined here? If not, then this is a symbol reference.
	SymbolRole_Definition SymbolRole = 1
	// Is the symbol imported here?
	SymbolRole_Import SymbolRole = 2
	// Is the symbol written here?
	SymbolRole_WriteAccess SymbolRole = 4
	// Is the symbol read here?
	SymbolRole_ReadAccess SymbolRole = 8
	// Is the symbol in generated code?
	SymbolRole_Generated SymbolRole = 16
	// Is the symbol in test code?
	SymbolRole_Test SymbolRole = 32
)

// Enum value maps for SymbolRole.
var (
	SymbolRole_name = map[int32]string{
		0:  "UnspecifiedSymbolRole",
		1:  "Definition",
		2:  "Import",
		4:  "WriteAccess",
		8:  "ReadAccess",
		16: "Generated",
		32: "Test",
	}
	SymbolRole_value = map[string]int32{
		"UnspecifiedSymbolRole": 0,
		"Definition":            1,
		"Import":                2,
		"WriteAccess":           4,
		"ReadAccess":            8,
		"Generated":             16,
		"Test":                  32,
	}
)

func (x SymbolRole) Enum() *SymbolRole {
	p := new(SymbolRole)
	*p = x
	return p
}

func (x SymbolRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SymbolRole) Descriptor() protoreflect.EnumDescriptor {
	return file_lib_codeintel_lsif_typed_lsif_proto_enumTypes[2].Descriptor()
}

func (SymbolRole) Type() protoreflect.EnumType {
	return &file_lib_codeintel_lsif_typed_lsif_proto_enumTypes[2]
}

func (x SymbolRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SymbolRole.Descriptor instead.
func (SymbolRole) EnumDescriptor() ([]byte, []int) {
	return file_lib_codeintel_lsif_typed_lsif_proto_rawDescGZIP(), []int{2}
}

type SyntaxKind int32

const (
	SyntaxKind_UnspecifiedSyntaxKind SyntaxKind = 0
	SyntaxKind_StringLiteral         SyntaxKind = 1
	SyntaxKind_NumericLiteral        SyntaxKind = 2
	SyntaxKind_Identifier            SyntaxKind = 3
	SyntaxKind_MethodIdentifier      SyntaxKind = 4
	SyntaxKind_TypeIdentifier        SyntaxKind = 5
	SyntaxKind_TermIdentifier        SyntaxKind = 6
	SyntaxKind_LocalIdentifier       SyntaxKind = 7
	SyntaxKind_ShadedIdentifier      SyntaxKind = 8
	SyntaxKind_PackageIdentifier     SyntaxKind = 9
)

// Enum value maps for SyntaxKind.
var (
	SyntaxKind_name = map[int32]string{
		0: "UnspecifiedSyntaxKind",
		1: "StringLiteral",
		2: "NumericLiteral",
		3: "Identifier",
		4: "MethodIdentifier",
		5: "TypeIdentifier",
		6: "TermIdentifier",
		7: "LocalIdentifier",
		8: "ShadedIdentifier",
		9: "PackageIdentifier",
	}
	SyntaxKind_value = map[string]int32{
		"UnspecifiedSyntaxKind": 0,
		"StringLiteral":         1,
		"NumericLiteral":        2,
		"Identifier":            3,
		"MethodIdentifier":      4,
		"TypeIdentifier":        5,
		"TermIdentifier":        6,
		"LocalIdentifier":       7,
		"ShadedIdentifier":      8,
		"PackageIdentifier":     9,
	}
)

func (x SyntaxKind) Enum() *SyntaxKind {
	p := new(SyntaxKind)
	*p = x
	return p
}

func (x SyntaxKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyntaxKind) Descriptor() protoreflect.EnumDescriptor {
	return file_lib_codeintel_lsif_typed_lsif_proto_enumTypes[3].Descriptor()
}

func (SyntaxKind) Type() protoreflect.EnumType {
	return &file_lib_codeintel_lsif_typed_lsif_proto_enumTypes[3]
}

func (x SyntaxKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyntaxKind.Descriptor instead.
func (SyntaxKind) EnumDescriptor() ([]byte, []int) {
	return file_lib_codeintel_lsif_typed_lsif_proto_rawDescGZIP(), []int{3}
}

// Index represents a complete LSIF index for a workspace this is rooted at a
// single directory. An Index message payload can have a large memory footprint
// and it's therefore recommended to emit and consume an Index payload one field
// value at a time.  To permit streaming consumption of an Index payload, the
// `metadata` field must appear at the start of the stream and must only appear
// once in the stream. Other field values may appear in any order.
type Index struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata about this index.
	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Documents that belong to this index.
	Document []*Document `protobuf:"bytes,2,rep,name=document,proto3" json:"document,omitempty"`
	// Symbols that are referenced from this index and not defined in this index.
	ExternalSymbols []*SymbolInformation `protobuf:"bytes,3,rep,name=external_symbols,json=externalSymbols,proto3" json:"external_symbols,omitempty"`
}

func (x *Index) Reset() {
	*x = Index{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Index) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Index) ProtoMessage() {}

func (x *Index) ProtoReflect() protoreflect.Message {
	mi := &file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Index.ProtoReflect.Descriptor instead.
func (*Index) Descriptor() ([]byte, []int) {
	return file_lib_codeintel_lsif_typed_lsif_proto_rawDescGZIP(), []int{0}
}

func (x *Index) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Index) GetDocument() []*Document {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *Index) GetExternalSymbols() []*SymbolInformation {
	if x != nil {
		return x.ExternalSymbols
	}
	return nil
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Which version of this protocol was used to generate this index?
	Version ProtocolVersion `protobuf:"varint,1,opt,name=version,proto3,enum=lib.codeintel.lsif_typed.ProtocolVersion" json:"version,omitempty"`
	// Information about the tool that produced this index.
	ToolInfo *ToolInfo `protobuf:"bytes,2,opt,name=tool_info,json=toolInfo,proto3" json:"tool_info,omitempty"`
	// URI-encoded absolute path to the root directory of this index. All
	// documents in this index must appear in a subdirectory of this root
	// directory.
	ProjectRoot string `protobuf:"bytes,3,opt,name=project_root,json=projectRoot,proto3" json:"project_root,omitempty"`
	// Text encoding of the source files on disk that are referenced from
	// `Document.relative_path`.
	TextDocumentEncoding TextEncoding `protobuf:"varint,4,opt,name=text_document_encoding,json=textDocumentEncoding,proto3,enum=lib.codeintel.lsif_typed.TextEncoding" json:"text_document_encoding,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_lib_codeintel_lsif_typed_lsif_proto_rawDescGZIP(), []int{1}
}

func (x *Metadata) GetVersion() ProtocolVersion {
	if x != nil {
		return x.Version
	}
	return ProtocolVersion_UnspecifiedProtocolVersion
}

func (x *Metadata) GetToolInfo() *ToolInfo {
	if x != nil {
		return x.ToolInfo
	}
	return nil
}

func (x *Metadata) GetProjectRoot() string {
	if x != nil {
		return x.ProjectRoot
	}
	return ""
}

func (x *Metadata) GetTextDocumentEncoding() TextEncoding {
	if x != nil {
		return x.TextDocumentEncoding
	}
	return TextEncoding_UnspecifiedTextEncoding
}

type ToolInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the indexer that produced this index.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Version of the indexer that produced this index.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Command-line arguments that were used to invoke this indexer.
	Arguments []string `protobuf:"bytes,3,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *ToolInfo) Reset() {
	*x = ToolInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolInfo) ProtoMessage() {}

func (x *ToolInfo) ProtoReflect() protoreflect.Message {
	mi := &file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolInfo.ProtoReflect.Descriptor instead.
func (*ToolInfo) Descriptor() ([]byte, []int) {
	return file_lib_codeintel_lsif_typed_lsif_proto_rawDescGZIP(), []int{2}
}

func (x *ToolInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ToolInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ToolInfo) GetArguments() []string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

// Document defines the metadata about a source file on disk.
type Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Required) Path to the text document relative to the directory supplied in
	// the associated `Metadata.project_root`. Not URI-encoded. This value should
	// not begin with a directory separator.
	RelativePath string `protobuf:"bytes,1,opt,name=relative_path,json=relativePath,proto3" json:"relative_path,omitempty"`
	// Occurrences that appear in this file.
	Occurrences []*Occurrence `protobuf:"bytes,2,rep,name=occurrences,proto3" json:"occurrences,omitempty"`
	// Symbols that are defined within this document.
	Symbols []*SymbolInformation `protobuf:"bytes,3,rep,name=symbols,proto3" json:"symbols,omitempty"`
}

func (x *Document) Reset() {
	*x = Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_lib_codeintel_lsif_typed_lsif_proto_rawDescGZIP(), []int{3}
}

func (x *Document) GetRelativePath() string {
	if x != nil {
		return x.RelativePath
	}
	return ""
}

func (x *Document) GetOccurrences() []*Occurrence {
	if x != nil {
		return x.Occurrences
	}
	return nil
}

func (x *Document) GetSymbols() []*SymbolInformation {
	if x != nil {
		return x.Symbols
	}
	return nil
}

// SymbolInformation defines metadata about a symbol, such as the symbol's
// docstring or what package it's defined it.
type SymbolInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique dentifier of this symbol, which can be referenced from
	// `Occurence.symbol`.
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// (optional, but strongly recommended) The markdown-formatted documentation
	// for this symbol. This field is repeated to allow different kinds of
	// documentation.  For example, it's nice to include both the signature of a
	// method (parameters and return type) along with the accompanying docstring.
	Documentation []string `protobuf:"bytes,3,rep,name=documentation,proto3" json:"documentation,omitempty"`
	// (optional) To enable cross-index navigation, specify which package this
	// symbol is defined in. A package must be encoded as a space-separated string
	// with the value `"$manager $name $version"` where:
	// - `$manager` is the name of the package manager, for example `npm`.
	// - `$name` is the name of the package, for example `react`.
	// - `$version` is the version of the package, for example `1.2.0`.
	Package string `protobuf:"bytes,4,opt,name=package,proto3" json:"package,omitempty"`
	// (optional) When resolving "Find references", this field documents what
	// other symbols should be included together with this symbol. For example,
	// consider the following TypeScript code that defines two symbols
	// `Animal#sound()` and `Dog#sound()`:
	// ```ts
	// interface Animal {
	//           ^^^^^^ definition Animal#
	//   sound(): string
	//   ^^^^^ definition Animal#sound()
	// }
	// class Dog implements Animal {
	//       ^^^ definition Dog#, implementation_symbols = Animal#
	//   public sound(): string { return "woof" }
	//          ^^^^^ definition Dog#sound(), references_symbols = Animal#sound(), implementation_symbols = Animal#sound()
	// }
	// const animal: Animal = new Dog()
	//               ^^^^^^ reference Animal#
	// console.log(animal.sound())
	//                    ^^^^^ reference Animal#sound()
	// ```
	// Doing "Find references" on the symbol `Animal#sound()` should return
	// references to the `Dog#sound()` method as well. Vice-versa, doing "Find
	// references" on the `Dog#sound()` method should include references to the
	// `Animal#sound()` method as well.
	ReferenceSymbols []string `protobuf:"bytes,5,rep,name=reference_symbols,json=referenceSymbols,proto3" json:"reference_symbols,omitempty"`
	// (optional) Similar to `references_symbols` but for "Go to implementation".
	// It's common for the `implementation_symbols` and `references_symbols` fields
	// have the same values but that's not always the case.
	// In the TypeScript example above, observe that `implementation_symbols` has
	// the value `"Animal#"` for the "Dog#" symbol while `references_symbols` is
	// empty. When requesting "Find references" on the "Animal#" symbol we don't
	// want to include references to "Dog#" even if "Go to implementation" on the
	// "Animal#" symbol should navigate to the "Dog#" symbol.
	ImplementationSymbols []string `protobuf:"bytes,6,rep,name=implementation_symbols,json=implementationSymbols,proto3" json:"implementation_symbols,omitempty"`
	// (optional) Similar to `references_symbols` but for "Go to type definition".
	TypeDefinitionSymbols []string `protobuf:"bytes,7,rep,name=type_definition_symbols,json=typeDefinitionSymbols,proto3" json:"type_definition_symbols,omitempty"`
}

func (x *SymbolInformation) Reset() {
	*x = SymbolInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolInformation) ProtoMessage() {}

func (x *SymbolInformation) ProtoReflect() protoreflect.Message {
	mi := &file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolInformation.ProtoReflect.Descriptor instead.
func (*SymbolInformation) Descriptor() ([]byte, []int) {
	return file_lib_codeintel_lsif_typed_lsif_proto_rawDescGZIP(), []int{4}
}

func (x *SymbolInformation) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SymbolInformation) GetDocumentation() []string {
	if x != nil {
		return x.Documentation
	}
	return nil
}

func (x *SymbolInformation) GetPackage() string {
	if x != nil {
		return x.Package
	}
	return ""
}

func (x *SymbolInformation) GetReferenceSymbols() []string {
	if x != nil {
		return x.ReferenceSymbols
	}
	return nil
}

func (x *SymbolInformation) GetImplementationSymbols() []string {
	if x != nil {
		return x.ImplementationSymbols
	}
	return nil
}

func (x *SymbolInformation) GetTypeDefinitionSymbols() []string {
	if x != nil {
		return x.TypeDefinitionSymbols
	}
	return nil
}

// Occurrence associates a source position with a symbol and/or highlighting
// information.
type Occurrence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source position of this occurrence. Must be exactly three or four
	// elements:
	//
	// - Four elements: `[startLine, startCharacter, endLine, endCharacter]`
	// - Three elements: `[startLine, startCharacter, endCharacter]`. The end line
	//   is inferred to have the same value as the start line.
	//
	// Line numbers and characters are always 0-based. Make sure to increment the
	// line/character values before displaying them in an editor-like UI because
	// editors conventionally use 1-based numbers.
	//
	// Historical note: the original draft of this schema had a `Range` message
	// type with `start` and `end` fields of type `Position`, mirroring LSP.
	// Benchmarks revealed that this encoding was inefficient and that we could
	// reduce the total payload size of an index by 50% by using `repeated int32`
	// instead.  The `repeated int32` encoding is admittedly more embarrassing to
	// work with in some programming languages but we hope the performance
	// improvements make up for it.
	Range []int32 `protobuf:"varint,1,rep,packed,name=range,proto3" json:"range,omitempty"`
	// (optional) References the `Symbol.uri` field. Can be empty if this is only
	// a highlighting occurrence.
	SymbolUri string `protobuf:"bytes,2,opt,name=symbol_uri,json=symbolUri,proto3" json:"symbol_uri,omitempty"`
	// (optional) Is the symbol_uri defined or referenced at this occurrence?
	SymbolRoles int32 `protobuf:"varint,3,opt,name=symbol_roles,json=symbolRoles,proto3" json:"symbol_roles,omitempty"`
	// (optional) Markdown-formatted documentation for this specific range.  If
	// empty, the `Symbol.documentation` field is used instead. One example
	// where this field might be useful is when the symbol represents a generic
	// function (with abstract type parameters such as `List<T>`) and at this
	// occurrence we know the exact values (such as `List<String>`).
	OverrideDocumentation []string `protobuf:"bytes,4,rep,name=override_documentation,json=overrideDocumentation,proto3" json:"override_documentation,omitempty"`
	// (optional) What syntax highlighting class should be used for this range?
	SyntaxKind SyntaxKind `protobuf:"varint,5,opt,name=syntax_kind,json=syntaxKind,proto3,enum=lib.codeintel.lsif_typed.SyntaxKind" json:"syntax_kind,omitempty"`
}

func (x *Occurrence) Reset() {
	*x = Occurrence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Occurrence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Occurrence) ProtoMessage() {}

func (x *Occurrence) ProtoReflect() protoreflect.Message {
	mi := &file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Occurrence.ProtoReflect.Descriptor instead.
func (*Occurrence) Descriptor() ([]byte, []int) {
	return file_lib_codeintel_lsif_typed_lsif_proto_rawDescGZIP(), []int{5}
}

func (x *Occurrence) GetRange() []int32 {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *Occurrence) GetSymbolUri() string {
	if x != nil {
		return x.SymbolUri
	}
	return ""
}

func (x *Occurrence) GetSymbolRoles() int32 {
	if x != nil {
		return x.SymbolRoles
	}
	return 0
}

func (x *Occurrence) GetOverrideDocumentation() []string {
	if x != nil {
		return x.OverrideDocumentation
	}
	return nil
}

func (x *Occurrence) GetSyntaxKind() SyntaxKind {
	if x != nil {
		return x.SyntaxKind
	}
	return SyntaxKind_UnspecifiedSyntaxKind
}

var File_lib_codeintel_lsif_typed_lsif_proto protoreflect.FileDescriptor

var file_lib_codeintel_lsif_typed_lsif_proto_rawDesc = []byte{
	0x0a, 0x23, 0x6c, 0x69, 0x62, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2f,
	0x6c, 0x73, 0x69, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x64, 0x2f, 0x6c, 0x73, 0x69, 0x66, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x6c, 0x69, 0x62, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x69,
	0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x6c, 0x73, 0x69, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x64, 0x22,
	0xdf, 0x01, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69,
	0x62, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x6c, 0x73, 0x69, 0x66,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x64, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x08, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69,
	0x62, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x6c, 0x73, 0x69, 0x66,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x64, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x10, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x69, 0x62, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x69, 0x6e,
	0x74, 0x65, 0x6c, 0x2e, 0x6c, 0x73, 0x69, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x64, 0x2e, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x73, 0x22, 0x91, 0x02, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x43,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x6c, 0x69, 0x62, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e,
	0x6c, 0x73, 0x69, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x62, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x6c, 0x73, 0x69, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x64, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x74, 0x6f, 0x6f, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x5c, 0x0a, 0x16, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6c, 0x69, 0x62, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x6c, 0x73, 0x69, 0x66, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x64, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x14, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x56, 0x0a, 0x08, 0x54, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xbe, 0x01,
	0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x46, 0x0a, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x69, 0x62, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x69,
	0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x6c, 0x73, 0x69, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x64, 0x2e,
	0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x6f, 0x63, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x69, 0x62, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x6c, 0x73, 0x69, 0x66, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x64, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x22, 0x87,
	0x02, 0x0a, 0x11, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x24, 0x0a, 0x0d,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x35, 0x0a, 0x16, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73,
	0x12, 0x36, 0x0a, 0x17, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x15, 0x74, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x0a, 0x4f, 0x63, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x55, 0x72, 0x69, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12,
	0x35, 0x0a, 0x16, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x15, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0b, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78,
	0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x69,
	0x62, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e, 0x6c, 0x73, 0x69, 0x66,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x64, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x0a, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x4b, 0x69, 0x6e, 0x64, 0x2a, 0x31, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x00,
	0x2a, 0x40, 0x0a, 0x0c, 0x54, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x1b, 0x0a, 0x17, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54,
	0x65, 0x78, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x55, 0x54, 0x46, 0x38, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x54, 0x46, 0x31, 0x36,
	0x10, 0x02, 0x2a, 0x7d, 0x0a, 0x0a, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x65, 0x61, 0x64,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x10, 0x10, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x65, 0x73, 0x74, 0x10,
	0x20, 0x2a, 0xde, 0x01, 0x0a, 0x0a, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x19, 0x0a, 0x15, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53,
	0x79, 0x6e, 0x74, 0x61, 0x78, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e,
	0x54, 0x65, 0x72, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x10, 0x06,
	0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x68, 0x61, 0x64, 0x65, 0x64, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x10, 0x09, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x63, 0x6f, 0x64,
	0x65, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2f, 0x6c, 0x73, 0x69, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x64, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lib_codeintel_lsif_typed_lsif_proto_rawDescOnce sync.Once
	file_lib_codeintel_lsif_typed_lsif_proto_rawDescData = file_lib_codeintel_lsif_typed_lsif_proto_rawDesc
)

func file_lib_codeintel_lsif_typed_lsif_proto_rawDescGZIP() []byte {
	file_lib_codeintel_lsif_typed_lsif_proto_rawDescOnce.Do(func() {
		file_lib_codeintel_lsif_typed_lsif_proto_rawDescData = protoimpl.X.CompressGZIP(file_lib_codeintel_lsif_typed_lsif_proto_rawDescData)
	})
	return file_lib_codeintel_lsif_typed_lsif_proto_rawDescData
}

var file_lib_codeintel_lsif_typed_lsif_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_lib_codeintel_lsif_typed_lsif_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_lib_codeintel_lsif_typed_lsif_proto_goTypes = []interface{}{
	(ProtocolVersion)(0),      // 0: lib.codeintel.lsif_typed.ProtocolVersion
	(TextEncoding)(0),         // 1: lib.codeintel.lsif_typed.TextEncoding
	(SymbolRole)(0),           // 2: lib.codeintel.lsif_typed.SymbolRole
	(SyntaxKind)(0),           // 3: lib.codeintel.lsif_typed.SyntaxKind
	(*Index)(nil),             // 4: lib.codeintel.lsif_typed.Index
	(*Metadata)(nil),          // 5: lib.codeintel.lsif_typed.Metadata
	(*ToolInfo)(nil),          // 6: lib.codeintel.lsif_typed.ToolInfo
	(*Document)(nil),          // 7: lib.codeintel.lsif_typed.Document
	(*SymbolInformation)(nil), // 8: lib.codeintel.lsif_typed.SymbolInformation
	(*Occurrence)(nil),        // 9: lib.codeintel.lsif_typed.Occurrence
}
var file_lib_codeintel_lsif_typed_lsif_proto_depIdxs = []int32{
	5, // 0: lib.codeintel.lsif_typed.Index.metadata:type_name -> lib.codeintel.lsif_typed.Metadata
	7, // 1: lib.codeintel.lsif_typed.Index.document:type_name -> lib.codeintel.lsif_typed.Document
	8, // 2: lib.codeintel.lsif_typed.Index.external_symbols:type_name -> lib.codeintel.lsif_typed.SymbolInformation
	0, // 3: lib.codeintel.lsif_typed.Metadata.version:type_name -> lib.codeintel.lsif_typed.ProtocolVersion
	6, // 4: lib.codeintel.lsif_typed.Metadata.tool_info:type_name -> lib.codeintel.lsif_typed.ToolInfo
	1, // 5: lib.codeintel.lsif_typed.Metadata.text_document_encoding:type_name -> lib.codeintel.lsif_typed.TextEncoding
	9, // 6: lib.codeintel.lsif_typed.Document.occurrences:type_name -> lib.codeintel.lsif_typed.Occurrence
	8, // 7: lib.codeintel.lsif_typed.Document.symbols:type_name -> lib.codeintel.lsif_typed.SymbolInformation
	3, // 8: lib.codeintel.lsif_typed.Occurrence.syntax_kind:type_name -> lib.codeintel.lsif_typed.SyntaxKind
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_lib_codeintel_lsif_typed_lsif_proto_init() }
func file_lib_codeintel_lsif_typed_lsif_proto_init() {
	if File_lib_codeintel_lsif_typed_lsif_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Index); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToolInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lib_codeintel_lsif_typed_lsif_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Occurrence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lib_codeintel_lsif_typed_lsif_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_lib_codeintel_lsif_typed_lsif_proto_goTypes,
		DependencyIndexes: file_lib_codeintel_lsif_typed_lsif_proto_depIdxs,
		EnumInfos:         file_lib_codeintel_lsif_typed_lsif_proto_enumTypes,
		MessageInfos:      file_lib_codeintel_lsif_typed_lsif_proto_msgTypes,
	}.Build()
	File_lib_codeintel_lsif_typed_lsif_proto = out.File
	file_lib_codeintel_lsif_typed_lsif_proto_rawDesc = nil
	file_lib_codeintel_lsif_typed_lsif_proto_goTypes = nil
	file_lib_codeintel_lsif_typed_lsif_proto_depIdxs = nil
}
