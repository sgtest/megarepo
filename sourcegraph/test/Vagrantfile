# -*- mode: ruby -*-
# # vi: set ft=ruby :
# Specify minimum Vagrant version and Vagrant API version
Vagrant.require_version '>= 1.6.0'
VAGRANTFILE_API_VERSION = '2'.freeze
# Require YAML module
require 'yaml'

# Read YAML file with box details
servers = YAML.load_file('servers.yaml')
# Create boxes
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # Iterate through entries in YAML file
  servers.each do |server|
    config.env.enable
    config.vm.define server['name'] do |srv|
      srv.vm.box = server['box']
      srv.vm.synced_folder '../', '/sourcegraph', type: "rsync", rsync__args: ["--verbose", "--archive", "--delete", "-z"]
      srv.vm.boot_timeout = 600

      # Setup for CI or Local
      case ENV['VAGRANT_RUN_ENV']
      when 'CI'
        project_id = server['project_id']
        external_ip = server['external_ip']
        use_private_ip = server['use_private_ip']
        username = server['username']
        ssh_key_path = server['ssh_key_path']
      else
        project_id = ENV['VAGRANT_GCP_PROJECT_ID'] || 'sourcegraph-server'
        external_ip = nil
        use_private_ip = false
        username = ENV['VAGRANT_SSH_USER'] || ENV['USER']
        ssh_key_path = ENV['VAGRANT_SSH_KEY'] || '~/.ssh/id_rsa'
      end

      srv.vm.provider :google do |g, o|
        g.machine_type = server['machine_type']
        g.image = 'e2e-491e9f27-2020-10-28t17-32-00z'
        g.image_project_id = 'sourcegraph-ci'
        g.google_project_id = project_id
        g.name = "#{server['name']}-"+"#{Time.now.to_i}"
        g.network = server['network']
        g.external_ip = external_ip
        g.use_private_ip = use_private_ip
        g.disk_size = 20
        g.disk_type = 'pd-ssd'
        g.scopes = [
            "compute-rw"
        ]

        o.ssh.username = username
        o.ssh.private_key_path = ssh_key_path
      end
      srv.vm.provision 'shell', inline: <<-SHELL
        #!/usr/bin/env bash
        apt-get update -y
        cat << EOF >> /root/.profile
# Env vars required by the e2e tests - see:
# https://my.1password.com/vaults/dnrhbauihkhjs5ag6vszsme45a/allitems/zpxz7vl3ek7j3yxbnjvh6utrei
export ENTERPRISE=#{ENV['ENTERPRISE']}
export DOCKER_BUILDKIT=#{ENV['DOCKER_BUILDKIT']}
export FORCE_COLOR=#{ENV['FORCE_COLOR']}
export GO111MODULE=#{ENV['GO111MODULE']}
export IMAGE=#{ENV['IMAGE']}
export TAG=#{ENV['TAG']}
export COVERAGE_INSTRUMENT=#{ENV['COVERAGE_INSTRUMENT']}
export PGUSER=#{ENV['PGUSER']}
export PGDATABASE=#{ENV['PGDATABASE']}
export PGSSLMODE=#{ENV['PGSSLMODE']}
export PERCY_TOKEN=#{ENV['PERCY_TOKEN']}
export CI=#{ENV['CI']}

# Env vars shared by e2e and QA tests - see:
export TEST_USER_PASSWORD=#{ENV['TEST_USER_PASSWORD']}
export SLOMO=#{ENV['SLOMO']}
export DISPLAY=#{ENV['DISPLAY']}
export CI_DEBUG_PROFILE=#{ENV['CI_DEBUG_PROFILE']}
export GITHUB_TOKEN=#{ENV['GITHUB_TOKEN']}
export BITBUCKET_SERVER_URL=#{ENV['BITBUCKET_SERVER_URL']}
export BITBUCKET_SERVER_TOKEN=#{ENV['BITBUCKET_SERVER_TOKEN']}
export BITBUCKET_SERVER_USERNAME=#{ENV['BITBUCKET_SERVER_USERNAME']}
export SGDEV_OVERRIDE_AUTH_SECRET=#{ENV['SGDEV_OVERRIDE_AUTH_SECRET']}

# Env vars required by the QA tests - see:
# https://my.1password.com/vaults/dnrhbauihkhjs5ag6vszsme45a/allitems/mn37wmu5dzhll6qxcnpmutvlq4
export AWS_ACCESS_KEY_ID=#{ENV['AWS_ACCESS_KEY_ID']}
export AWS_SECRET_ACCESS_KEY=#{ENV['AWS_SECRET_ACCESS_KEY']}
export AWS_CODE_COMMIT_USERNAME=#{ENV['AWS_CODE_COMMIT_USERNAME']}
export AWS_CODE_COMMIT_PASSWORD=#{ENV['AWS_CODE_COMMIT_PASSWORD']}
export SOURCEGRAPH_BASE_URL=#{ENV['SOURCEGRAPH_BASE_URL']}
export SOURCEGRAPH_SUDO_TOKEN=#{ENV['SOURCEGRAPH_SUDO_TOKEN']}
export SOURCEGRAPH_SUDO_USER=#{ENV['SOURCEGRAPH_SUDO_USER']}
export GITLAB_TOKEN=#{ENV['GITLAB_TOKEN']}
export INCLUDE_ADMIN_ONBOARDING=#{ENV['INCLUDE_ADMIN_ONBOARDING']}
export NO_CLEANUP=#{ENV['NO_CLEANUP']}
export TEST_USER_PASSWORD=#{ENV['TEST_USER_PASSWORD']}
export JEST_CIRCUS=#{ENV['JEST_CIRCUS']}
export GITHUB_USER_AMY_PASSWORD=#{ENV['GITHUB_USER_AMY_PASSWORD']}
export GITHUB_USER_BOB_PASSWORD=#{ENV['GITHUB_USER_BOB_PASSWORD']}
export GITHUB_USER_BOB_TOKEN=#{ENV['GITHUB_USER_BOB_TOKEN']}
export GITHUB_CLIENT_SECRET=#{ENV['GITHUB_CLIENT_SECRET']}
export LOG_STATUS_MESSAGES=#{ENV['LOG_STATUS_MESSAGES']}
export GITLAB_CLIENT_ID=#{ENV['GITLAB_CLIENT_ID']}
export GITLAB_CLIENT_SECRET=#{ENV['GITLAB_CLIENT_SECRET']}
export GITLAB_USER_AMY_PASSWORD=#{ENV['GITLAB_USER_AMY_PASSWORD']}
export OKTA_USER_AMY_PASSWORD=#{ENV['OKTA_USER_AMY_PASSWORD']}
export OKTA_METADATA_URL=#{ENV['OKTA_METADATA_URL']}
export NODE_TLS_REJECT_UNAUTHORIZED=#{ENV['NODE_TLS_REJECT_UNAUTHORIZED']}
export BITBUCKET_CLOUD_USER_BOB_APP_PASSWORD=#{ENV['BITBUCKET_CLOUD_USER_BOB_APP_PASSWORD']}
export KEEP_BROWSER=#{ENV['KEEP_BROWSER']}
export VERSION=#{ENV['VERSION']}

EOF
      SHELL

        server['shell_commands'].each do |sh|
          srv.vm.provision 'shell', inline: sh
        end
    end
  end
end
