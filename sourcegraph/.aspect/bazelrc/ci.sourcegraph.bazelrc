# Provides secrets like GH_TOKEN and PERCY_TOKEN via --define flag.
# Generated via the `.buildkite/hooks/post-checkout` hook.
try-import %workspace%/.aspect/bazelrc/ci.generated.bazelrc

# Use repo caching for building and testing.
# Article: https://buildkite.com/blog/how-bazel-built-its-ci-system-on-top-of-buildkite
# Docs: https://bazel.build/reference/command-line-reference#flag--repository_cache
build --repository_cache=/home/buildkite/repocache-sourcegraph

# We need /usr/local/bin
# TODO(DevX) we should be narrower here.
build --test_env=PATH

# Needed for DB in CI
test --test_env=PGUSER=postgres
test --test_env=PGPASSWORD=postgres
test --test_env=PGSSLMODE=disable
test --test_env=PGDATABASE=postgres

# Allow tests to understand they're running in CI, which forces dbtest to drop database even in case of failures.
# TODO(JH) we should instead wipe all templates after a job finishes.
build --test_env=CI

# Ensure we're not exhausting database connections.
build --test_env=GOMAXPROCS=10
build --test_env=TESTDB_MAXOPENCONNS=15

# Needed for E2E
build --test_env=BUILDKITE

# Needed for mocha tests
# We have to use the `--define` flag here instead of `--test_env` because
# the mocha tests target is the build target and it's tested with `build_test`.
test --define=E2E_HEADLESS=false
# if we set this to localhost, chrome will refuse to conenct since local host is in its HTTP Strict Transport Security
# by setting the loopback address we get passed that
test --define=E2E_SOURCEGRAPH_BASE_URL="http://127.0.0.1:7080"
test --define=DISPLAY=:99

# Provides git commit, branch information to build targets like Percy via status file.
# https://bazel.build/docs/user-manual#workspace-status
build --workspace_status_command=./dev/bazel_buildkite_stamp_vars.sh

# temp
build --test_env=INCLUDE_ADMIN_ONBOARDING=false

# Used for container_structure_tests
build --test_env=DOCKER_HOST

# Used by migration rules
build --action_env=PGUSER=postgres
