/* eslint-disable @typescript-eslint/consistent-type-definitions */
/* This is an autogenerated file. Do not edit this file directly! */
export interface SharedGraphQlOperations {
    ResolveRawRepoName: /* src/backend/repo.ts */ (variables: ResolveRawRepoNameVariables) => ResolveRawRepoNameResult
    Extensions: /* src/extensions/helpers.ts */ (variables: ExtensionsVariables) => ExtensionsResult
    EditSettings: /* src/settings/edit.ts */ (variables: EditSettingsVariables) => EditSettingsResult
    OverwriteSettings: /* src/settings/edit.ts */ (variables: OverwriteSettingsVariables) => OverwriteSettingsResult
    ExternalServicesForTests: /* src/testing/driver.ts */ (
        variables: ExternalServicesForTestsVariables
    ) => ExternalServicesForTestsResult
    SiteForTests: /* src/testing/driver.ts */ (variables: SiteForTestsVariables) => SiteForTestsResult
    UpdateSiteConfigurationForTests: /* src/testing/driver.ts */ (
        variables: UpdateSiteConfigurationForTestsVariables
    ) => UpdateSiteConfigurationForTestsResult
    UserSettingsForTests: /* src/testing/driver.ts */ (
        variables: UserSettingsForTestsVariables
    ) => UserSettingsForTestsResult
    OverwriteSettingsForTests: /* src/testing/driver.ts */ (
        variables: OverwriteSettingsForTestsVariables
    ) => OverwriteSettingsForTestsResult
}
export type ResolveRawRepoNameVariables = {
    repoName: string
}
export type ResolveRawRepoNameResult = {
    repository: {
        uri: string
        mirrorInfo: {
            cloned: boolean
        }
    } | null
}
export type ExtensionsVariables = {
    first: number
    prioritizeExtensionIDs: string[]
}
export type ExtensionsResult = {
    extensionRegistry: {
        extensions: {
            nodes: {
                id: string
                extensionID: string
                url: string
                manifest: {
                    raw: string
                } | null
                viewerCanAdminister: boolean
            }[]
        }
    }
}
export type EditSettingsVariables = {
    subject: string
    lastID: number | null
    edit: {
        keyPath: {
            property: string | null
            index: number | null
        }[]
        value: any | null
        valueIsJSONCEncodedString: boolean | null
    }
}
export type EditSettingsResult = {
    configurationMutation: {
        editConfiguration: {
            empty: {
                alwaysNil: string | null
            } | null
        } | null
    } | null
}
export type OverwriteSettingsVariables = {
    subject: string
    lastID: number | null
    contents: string
}
export type OverwriteSettingsResult = {
    settingsMutation: {
        overwriteSettings: {
            empty: {
                alwaysNil: string | null
            } | null
        } | null
    } | null
}
export type ExternalServicesForTestsVariables = {}
export type ExternalServicesForTestsResult = {
    externalServices: {
        totalCount: number
    }
}
export type SiteForTestsVariables = {}
export type SiteForTestsResult = {
    site: {
        id: string
        configuration: {
            id: number
            effectiveContents: any
            validationMessages: string[]
        }
    }
}
export type UpdateSiteConfigurationForTestsVariables = {
    lastID: number
    input: string
}
export type UpdateSiteConfigurationForTestsResult = {
    updateSiteConfiguration: boolean
}
export type UserSettingsForTestsVariables = {}
export type UserSettingsForTestsResult = {
    currentUser: {
        id: string
        latestSettings: {
            id: number
            contents: any
        } | null
    } | null
}
export type OverwriteSettingsForTestsVariables = {
    subject: string
    lastID: number | null
    contents: string
}
export type OverwriteSettingsForTestsResult = {
    settingsMutation: {
        overwriteSettings: {
            empty: {
                alwaysNil: string | null
            } | null
        } | null
    } | null
}
