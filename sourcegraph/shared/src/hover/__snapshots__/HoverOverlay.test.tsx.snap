// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`HoverOverlay actions and hover empty 1`] = `
<div
  className="hover-overlay"
  style={
    Object {
      "left": "0px",
      "opacity": 1,
      "top": "0px",
      "visibility": "visible",
    }
  }
>
  <div
    className="hover-overlay__contents"
  >
    <em>
      No hover information available.
    </em>
  </div>
</div>
`;

exports[`HoverOverlay actions and hover error 1`] = `
<div
  className="hover-overlay"
  style={
    Object {
      "left": "0px",
      "opacity": 1,
      "top": "0px",
      "visibility": "visible",
    }
  }
>
  <div
    className="hover-overlay__contents"
  >
    <div
      className="hover-overlay__hover-error"
    >
      M2
    </div>
  </div>
</div>
`;

exports[`HoverOverlay actions and hover loading 1`] = `
<div
  className="hover-overlay"
  style={
    Object {
      "left": "0px",
      "opacity": 1,
      "top": "0px",
      "visibility": "visible",
    }
  }
>
  <div
    className="hover-overlay__contents"
  >
    <div
      className="hover-overlay__loader-row"
    >
      <div
        className="loading-spinner "
      />
    </div>
  </div>
</div>
`;

exports[`HoverOverlay actions and hover present 1`] = `
<div
  className="hover-overlay"
  style={
    Object {
      "left": "0px",
      "opacity": 1,
      "top": "0px",
      "visibility": "visible",
    }
  }
>
  <div
    className="hover-overlay__contents"
  >
    <React.Fragment>
      <span
        className="hover-overlay__content test-tooltip-content"
        dangerouslySetInnerHTML={
          Object {
            "__html": "<p>v</p>
",
          }
        }
      />
    </React.Fragment>
  </div>
  <div
    className="hover-overlay__actions"
  >
    <ActionItem
      action={
        Object {
          "command": "c",
          "id": "a",
        }
      }
      className="hover-overlay__action test-tooltip-untitled"
      disabledDuringExecution={true}
      extensionsController={
        Object {
          "executeCommand": [Function],
        }
      }
      location={
        Object {
          "hash": "",
          "key": undefined,
          "pathname": "/",
          "search": "",
          "state": undefined,
        }
      }
      platformContext={
        Object {
          "forceUpdateTooltip": [Function],
          "settings": Observable {
            "_isScalar": false,
            "_subscribe": [Function],
          },
        }
      }
      showInlineError={true}
      showLoadingSpinnerDuringExecution={true}
      telemetryService={
        Object {
          "log": [Function],
          "logViewEvent": [Function],
        }
      }
      variant="actionItem"
    />
  </div>
</div>
`;

exports[`HoverOverlay actions and hover undefined 1`] = `null`;

exports[`HoverOverlay actions empty 1`] = `
<div
  className="hover-overlay"
  style={
    Object {
      "left": "0px",
      "opacity": 1,
      "top": "0px",
      "visibility": "visible",
    }
  }
>
  <div
    className="hover-overlay__contents"
  />
</div>
`;

exports[`HoverOverlay actions error 1`] = `null`;

exports[`HoverOverlay actions error, hover present 1`] = `
<div
  className="hover-overlay"
  style={
    Object {
      "left": "0px",
      "opacity": 1,
      "top": "0px",
      "visibility": "visible",
    }
  }
>
  <div
    className="hover-overlay__contents"
  >
    <React.Fragment>
      <span
        className="hover-overlay__content test-tooltip-content"
        dangerouslySetInnerHTML={
          Object {
            "__html": "<p>v</p>
",
          }
        }
      />
    </React.Fragment>
  </div>
</div>
`;

exports[`HoverOverlay actions loading 1`] = `
<div
  className="hover-overlay"
  style={
    Object {
      "left": "0px",
      "opacity": 1,
      "top": "0px",
      "visibility": "visible",
    }
  }
>
  <div
    className="hover-overlay__contents"
  />
</div>
`;

exports[`HoverOverlay actions present 1`] = `
<div
  className="hover-overlay"
  style={
    Object {
      "left": "0px",
      "opacity": 1,
      "top": "0px",
      "visibility": "visible",
    }
  }
>
  <div
    className="hover-overlay__contents"
  />
  <div
    className="hover-overlay__actions"
  >
    <ActionItem
      action={
        Object {
          "command": "c",
          "id": "a",
          "title": "Some title",
        }
      }
      className="hover-overlay__action test-tooltip-some-title"
      disabledDuringExecution={true}
      extensionsController={
        Object {
          "executeCommand": [Function],
        }
      }
      location={
        Object {
          "hash": "",
          "key": undefined,
          "pathname": "/",
          "search": "",
          "state": undefined,
        }
      }
      platformContext={
        Object {
          "forceUpdateTooltip": [Function],
          "settings": Observable {
            "_isScalar": false,
            "_subscribe": [Function],
          },
        }
      }
      showInlineError={true}
      showLoadingSpinnerDuringExecution={true}
      telemetryService={
        Object {
          "log": [Function],
          "logViewEvent": [Function],
        }
      }
      variant="actionItem"
    />
  </div>
</div>
`;

exports[`HoverOverlay actions present, hover loading 1`] = `
<div
  className="hover-overlay"
  style={
    Object {
      "left": "0px",
      "opacity": 1,
      "top": "0px",
      "visibility": "visible",
    }
  }
>
  <div
    className="hover-overlay__contents"
  >
    <div
      className="hover-overlay__loader-row"
    >
      <LoadingSpinner />
    </div>
  </div>
  <div
    className="hover-overlay__actions"
  >
    <ActionItem
      action={
        Object {
          "command": "c",
          "id": "a",
        }
      }
      className="hover-overlay__action test-tooltip-untitled"
      disabledDuringExecution={true}
      extensionsController={
        Object {
          "executeCommand": [Function],
        }
      }
      location={
        Object {
          "hash": "",
          "key": undefined,
          "pathname": "/",
          "search": "",
          "state": undefined,
        }
      }
      platformContext={
        Object {
          "forceUpdateTooltip": [Function],
          "settings": Observable {
            "_isScalar": false,
            "_subscribe": [Function],
          },
        }
      }
      showInlineError={true}
      showLoadingSpinnerDuringExecution={true}
      telemetryService={
        Object {
          "log": [Function],
          "logViewEvent": [Function],
        }
      }
      variant="actionItem"
    />
  </div>
</div>
`;

exports[`HoverOverlay actions, hover and alert present 1`] = `
<div
  className="hover-overlay"
  style={
    Object {
      "left": "0px",
      "opacity": 1,
      "top": "0px",
      "visibility": "visible",
    }
  }
>
  <div
    className="hover-overlay__contents"
  >
    <React.Fragment>
      <span
        className="hover-overlay__content test-tooltip-content"
        dangerouslySetInnerHTML={
          Object {
            "__html": "<p>v</p>
",
          }
        }
      />
    </React.Fragment>
  </div>
  <div
    className="hover-overlay__alerts"
  >
    <div
      className="hover-overlay__alert"
    >
      <span
        className="hover-overlay__content"
        dangerouslySetInnerHTML={
          Object {
            "__html": "<p>Testing <code>markdown</code> rendering.</p>
",
          }
        }
      />
      <div
        className="hover-overlay__alert-actions"
      >
        <a
          href=""
          onClick={[Function]}
        >
          <small>
            Dismiss
          </small>
        </a>
      </div>
    </div>
  </div>
  <div
    className="hover-overlay__actions"
  >
    <ActionItem
      action={
        Object {
          "command": "c",
          "id": "a",
        }
      }
      className="hover-overlay__action test-tooltip-untitled"
      disabledDuringExecution={true}
      extensionsController={
        Object {
          "executeCommand": [Function],
        }
      }
      location={
        Object {
          "hash": "",
          "key": undefined,
          "pathname": "/",
          "search": "",
          "state": undefined,
        }
      }
      platformContext={
        Object {
          "forceUpdateTooltip": [Function],
          "settings": Observable {
            "_isScalar": false,
            "_subscribe": [Function],
          },
        }
      }
      showInlineError={true}
      showLoadingSpinnerDuringExecution={true}
      telemetryService={
        Object {
          "log": [Function],
          "logViewEvent": [Function],
        }
      }
      variant="actionItem"
    />
  </div>
</div>
`;

exports[`HoverOverlay hover empty 1`] = `null`;

exports[`HoverOverlay hover error 1`] = `
<div
  className="hover-overlay"
  style={
    Object {
      "left": "0px",
      "opacity": 1,
      "top": "0px",
      "visibility": "visible",
    }
  }
>
  <div
    className="hover-overlay__contents"
  >
    <div
      className="hover-overlay__hover-error"
    >
      M
    </div>
  </div>
</div>
`;

exports[`HoverOverlay hover error, actions present 1`] = `
<div
  className="hover-overlay"
  style={
    Object {
      "left": "0px",
      "opacity": 1,
      "top": "0px",
      "visibility": "visible",
    }
  }
>
  <div
    className="hover-overlay__contents"
  >
    <div
      className="hover-overlay__hover-error"
    >
      M
    </div>
  </div>
  <div
    className="hover-overlay__actions"
  >
    <ActionItem
      action={
        Object {
          "command": "c",
          "id": "a",
        }
      }
      className="hover-overlay__action test-tooltip-untitled"
      disabledDuringExecution={true}
      extensionsController={
        Object {
          "executeCommand": [Function],
        }
      }
      location={
        Object {
          "hash": "",
          "key": undefined,
          "pathname": "/",
          "search": "",
          "state": undefined,
        }
      }
      platformContext={
        Object {
          "forceUpdateTooltip": [Function],
          "settings": Observable {
            "_isScalar": false,
            "_subscribe": [Function],
          },
        }
      }
      showInlineError={true}
      showLoadingSpinnerDuringExecution={true}
      telemetryService={
        Object {
          "log": [Function],
          "logViewEvent": [Function],
        }
      }
      variant="actionItem"
    />
  </div>
</div>
`;

exports[`HoverOverlay hover loading 1`] = `
<div
  className="hover-overlay"
  style={
    Object {
      "left": "0px",
      "opacity": 1,
      "top": "0px",
      "visibility": "visible",
    }
  }
>
  <div
    className="hover-overlay__contents"
  >
    <div
      className="hover-overlay__loader-row"
    >
      <div
        className="loading-spinner "
      />
    </div>
  </div>
</div>
`;

exports[`HoverOverlay hover present 1`] = `
<div
  className="hover-overlay"
  style={
    Object {
      "left": "0px",
      "opacity": 1,
      "top": "0px",
      "visibility": "visible",
    }
  }
>
  <div
    className="hover-overlay__contents"
  >
    <span
      className="hover-overlay__content test-tooltip-content"
      dangerouslySetInnerHTML={
        Object {
          "__html": "<p>v</p>
",
        }
      }
    />
  </div>
</div>
`;

exports[`HoverOverlay hover present, actions loading 1`] = `
<div
  className="hover-overlay"
  style={
    Object {
      "left": "0px",
      "opacity": 1,
      "top": "0px",
      "visibility": "visible",
    }
  }
>
  <div
    className="hover-overlay__contents"
  >
    <React.Fragment>
      <span
        className="hover-overlay__content test-tooltip-content"
        dangerouslySetInnerHTML={
          Object {
            "__html": "<p>v</p>
",
          }
        }
      />
    </React.Fragment>
  </div>
</div>
`;

exports[`HoverOverlay multiple hovers present 1`] = `
<div
  className="hover-overlay"
  style={
    Object {
      "left": "0px",
      "opacity": 1,
      "top": "0px",
      "visibility": "visible",
    }
  }
>
  <div
    className="hover-overlay__contents"
  >
    <span
      className="hover-overlay__content test-tooltip-content"
      dangerouslySetInnerHTML={
        Object {
          "__html": "<p>v</p>
",
        }
      }
    />
    <hr />
    <span
      className="hover-overlay__content test-tooltip-content"
      dangerouslySetInnerHTML={
        Object {
          "__html": "<p>v2</p>
",
        }
      }
    />
  </div>
</div>
`;
