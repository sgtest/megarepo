// Code generated by go-bindata. DO NOT EDIT.
// sources:
// state.html.tmpl (4.868kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stateHtmlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5b\x53\xe3\x38\x16\x7e\xe7\x57\x9c\x75\xcd\x6c\x77\x17\x6d\x3b\x57\x68\x58\x27\xd5\x0c\x97\x21\x4c\x03\x0d\x01\xa6\xe9\xad\x7d\x50\xec\xe3\x58\x89\x2c\x19\xe9\x38\x21\xa4\xf8\xef\x5b\xb6\x73\x23\x84\x2c\xf4\x3e\x6c\xd7\xd6\xe8\x01\x1c\xe9\xe8\xe8\x5c\x3e\x7d\x47\x92\xf7\xb7\x40\xf9\x34\x4a\x10\x22\x8a\x45\x73\xc3\xcb\xfe\x81\x60\xb2\xdb\xb0\x50\x5a\xcd\x8d\x0d\x2f\x42\x16\x34\x37\x00\x00\x3c\xe2\x24\xb0\xa9\x31\x51\x76\x9a\x04\x8c\x50\xdb\x86\x18\xa1\xe7\x16\x23\x85\x94\xe0\xb2\x0f\x1a\x45\xc3\x32\x34\x12\x68\x22\x44\xb2\x20\xd2\x18\x36\xac\x88\x28\x31\xbb\xae\x6b\x88\xf9\xfd\x84\x51\xe4\x74\x94\x22\x43\x9a\x25\x7e\x20\x1d\x5f\xc5\xee\xac\xc3\xad\x39\x75\xa7\xe4\xfa\xc6\xcc\xfb\x9c\x98\x4b\xc7\x37\xc6\x02\x2e\x09\xbb\x9a\xd3\xa8\x61\x99\x88\x55\x3f\xd5\xec\x1d\xd6\xa2\x8a\xbc\x4c\xf6\xcb\x95\xeb\xfe\x4e\xb7\xbd\xd3\x61\x07\xa2\x56\x2e\x9f\x5d\xec\x25\x47\xf1\x7e\x65\xeb\x70\xb8\x77\x7e\xfc\xe9\xcf\xee\x77\x51\x3f\xbd\xbd\xbd\x3f\x0a\xfd\xcd\x33\xff\x6b\xa7\x1c\xfc\xf1\x7b\x6f\xbb\xdd\xb7\xc0\xd7\xca\x18\xa5\x79\x97\xcb\x86\xc5\xa4\x92\xa3\x58\xa5\xc6\x7a\x83\x5f\x99\x13\x3d\x13\xa0\xe0\x03\xed\x48\x24\x57\x26\xb1\xfb\x39\x54\x9a\xd8\x10\x8d\x8a\xd1\x0d\x95\x9c\x7e\xdb\xa1\x46\xfc\x5c\x77\xca\xb5\x89\x9b\x4c\x88\x99\x83\x93\x45\xf3\xa5\x8a\xef\xac\x39\x1d\x63\x93\x52\x82\x78\x62\x77\x14\x91\x8a\xc1\x99\xfe\xe6\x52\xa2\x86\xf1\x4c\x36\x6b\x31\xbb\xb7\x87\x3c\xa0\x68\x17\xca\xa5\xd2\xaf\xff\x98\x0d\x3e\x16\xea\xdd\x89\x7e\xcf\x2d\xd2\xbc\xe1\x75\x54\x30\x9a\xac\x1d\xf0\x01\xf8\x82\x19\xd3\xb0\xfc\xcc\x6a\x2e\x51\x5b\x73\x5b\xc6\xe3\x5f\x8c\x1f\x61\x90\x0a\xd4\x07\x69\x9c\xc0\x6e\x03\xb8\x0c\xf0\x1e\x1c\x28\x3d\x3e\x2e\xc8\xf1\x10\xba\x04\xef\x05\x4a\x70\x3e\x40\x79\x61\x6c\x79\x1d\x26\x50\x13\xe4\x7f\x6d\x2e\x43\x05\x31\xd9\x75\x88\xef\x6d\x96\x92\x02\xc2\x7b\xb2\x7d\x94\x84\xda\x02\x25\x7d\xc1\xfd\x7e\xc3\x12\x8a\x05\x27\xed\xf3\xb3\xf7\x1f\x2c\xd0\x4a\x60\xc3\xea\xa4\x44\x4a\x2e\x98\x3a\x6d\x57\x0a\x06\x1c\x87\xc0\x82\x80\x13\x57\x92\x09\x08\xb0\x93\x76\x21\x48\xe3\xc4\x7c\x84\x44\x20\x33\x08\x1a\xef\x52\x34\x04\x0c\x32\xbd\xa0\xd1\x24\x4a\x1a\x7c\xa6\xce\xe3\x53\xbb\x43\x66\x20\x64\x76\x0e\x91\x58\xd8\x15\xab\xe9\xb9\xfc\xe9\xfa\x9e\x1b\xf0\xc1\x62\xf4\x50\x06\x0b\x91\x58\x8c\x42\xee\xf4\xd0\xde\x71\xcb\x95\x25\x27\xbc\xa8\x36\x13\xea\xd8\x55\xab\xd9\x9e\x64\xc0\x73\xa3\xda\x92\x68\xb2\xc2\xff\x08\x61\x9a\x33\x50\x21\x0c\x23\x94\x90\xed\x67\xc3\x49\x69\x8e\x06\xba\x48\x80\xf2\x2e\xc5\x14\x83\x6c\x8f\x29\xa0\x08\xe1\x3a\xdf\xed\x70\x91\x75\x3b\x4b\x5e\x2d\x2d\xe3\x11\xeb\x08\x9c\x1a\x59\xfc\xc8\xf3\x26\x30\xa4\x2c\x9d\xb5\x15\x79\xf1\x28\x83\xdf\x6c\x52\xf6\xc3\x16\xbc\x1b\xd1\x4a\x59\xfd\xbc\x73\xa2\x04\x72\x38\x37\xac\x19\xe4\x7f\xb5\x9a\xad\x03\xcf\xa5\xe8\xb5\x53\x6a\xd9\x94\x33\x16\xe3\xda\x49\xab\x07\xf2\x41\x93\x30\xd9\x9c\xc4\xab\x95\x21\x75\xc0\x84\xe7\xe6\xbd\x2f\x4f\x5a\xc6\x51\x06\x7d\xdb\xe7\xda\x17\x08\xf1\xa8\x00\x7f\x2c\xec\xaa\x05\x01\x23\x66\x93\xea\x76\x33\x9b\x27\x3b\xdf\x7a\x51\x31\x00\xe4\xcc\xdc\xb0\xf6\x99\xf0\x53\xc1\x08\x03\xe8\x30\x83\x01\x28\x99\x67\x96\x78\x8c\x40\x11\x23\x88\x98\x01\x14\x2c\xc9\x06\x0d\x97\x3e\xe6\xe3\x82\x19\x02\x5f\xc5\x31\xa7\x8f\x10\xf0\x01\x0f\x32\x0d\x23\x60\xe0\x2b\x69\x88\x49\x82\x90\xf9\xa4\x74\x06\xa7\x8a\xb3\x22\x5f\x33\x27\x97\x37\xc4\x7c\x60\x5d\xa4\xcf\xf0\x9e\x26\xf8\x5b\x2d\xe8\xb9\xab\x00\x91\xc9\xce\x0a\xd7\x53\x9d\x73\x86\x5b\x6c\xe3\xb1\x66\xb2\x8b\xf0\x94\xd3\x9c\xe9\xfe\x5a\xe2\xac\xb9\xb6\x17\xc0\x58\x0c\x06\xcd\xf1\xd8\xb9\xc4\x44\x39\xad\x83\xc7\x47\xcf\xa5\x15\x06\x2d\x4a\xaf\x4b\x24\x4c\x55\x65\xe8\x7c\xc1\x1c\x28\x3c\xff\x0f\xab\x8c\xc7\xa4\x53\xe9\x33\xc2\x83\x54\xb3\x8c\x07\xc1\x99\x42\xf5\x35\x56\x8e\xc7\xce\x41\x8a\xce\x91\xd2\x31\x23\xb0\x4e\x95\xfc\x08\xa5\x0a\x9c\x30\x09\x95\x52\x69\x0b\xca\xf5\xdd\x52\x6d\xb7\x54\x87\xd3\xf6\x95\xb5\x4e\xe1\xea\xd4\x8d\xc7\x28\xcc\x8f\x06\x1c\x7c\x25\xb2\xcd\xd6\xb0\xca\xa5\x92\x35\x63\x94\x85\xc2\xb1\x3e\xc8\x5e\xf2\xa4\x14\x59\xcd\x33\xf5\x94\x20\xb9\x9c\x31\xe8\x33\xee\x5b\xf2\xed\xad\x5e\x3f\xa9\x07\x0b\xd2\xcf\x01\xeb\xb9\x39\xb1\xce\x3b\x97\x8a\xcb\x0f\x16\x93\x45\x9a\x7f\x5d\x41\xd9\x83\x44\x73\x95\x1d\xc3\x20\xaf\x19\x19\x0b\x3c\x09\x17\x29\x28\x8e\x8a\xce\x8a\xb9\x43\xa5\xfb\xa8\x33\x26\x21\x2e\x53\x95\x1a\x31\x82\x00\x73\x45\x26\x63\x9f\x18\x98\x0c\xc0\xa0\x0c\xcc\x44\x4b\xae\xb0\xcb\xc9\xa0\x1e\xa0\xfe\xab\x14\x51\x54\x24\x8d\xcb\xee\x7a\xa9\xaf\x93\x34\xad\x97\x6a\x67\xc1\x97\xfe\xff\x84\x69\x0b\xf0\xe5\xd8\xfb\x09\xc8\xd6\x63\x93\x93\xfd\x54\xe7\xf5\xe5\x97\xc7\xc7\xb5\x95\x36\x6b\x2b\xcb\x73\xd1\x9b\x08\xe6\x63\x8c\x92\x1a\x56\x71\x72\xb7\xa6\xb5\xf9\xe9\x12\xeb\xed\x82\xd7\x17\x82\xdc\x0d\x97\xfd\x08\x45\xc1\x3c\xa0\x53\x78\xbd\xb2\x30\x4c\x71\xf6\x4a\xf1\x36\xde\xfd\x1f\x16\x88\xbb\x82\x40\x7f\xc6\xea\xb0\xf8\x69\x7c\xcd\x13\x02\xa3\xfd\x85\x0b\xac\x0a\xd0\xe9\xdd\xa5\xa8\x47\xf9\x6d\xbc\xf8\xb4\xab\x4e\xdd\x29\x3b\x46\xf0\x38\xbf\xa0\xf6\x56\x5e\xc0\x0f\xc2\x6f\xc1\x43\x25\xa2\xaf\xc7\x25\x61\xda\x6d\x53\x97\xfb\x57\x49\xda\x73\x1f\x46\xb5\xfd\xcd\xf3\xdf\x13\x16\xab\xa3\x9b\x51\xf5\xd3\xe9\xcd\x6f\xf2\x70\xb3\xd5\xe9\xdc\xdc\x5e\xe3\x70\xf3\x5c\xef\x7f\x63\x97\xfd\xb0\xf7\xf2\x05\xdc\x73\x0b\x5b\xd7\x19\xbe\xea\xe6\x9d\xa8\x24\x41\xed\xf4\xcc\xe7\xb2\x53\xde\x72\x4a\x6e\xc0\x0d\xb9\x69\x1c\x4c\x47\x5e\x76\xe6\x62\xeb\x70\xe7\xf2\x78\xd0\x69\x8d\xbe\x1f\x9d\xa8\x90\x36\x2b\xf1\x49\xe7\x98\x1d\xfe\x29\x02\x31\x68\xed\xb4\xce\x6f\x47\x75\x59\x7d\xb8\xd9\x79\x78\xb8\xa2\xb8\x55\xbd\xee\x9b\xe0\xe2\xf2\x66\xa0\xee\x4f\x43\xa5\xf6\xd4\x7f\xe5\xcc\x1b\x9e\x47\x7a\xcb\xaf\x23\xab\xdd\x39\xef\xde\x5c\x0e\xd2\xbd\xab\xaf\xe5\x87\xed\x93\xde\xf1\x97\x7e\x7a\x7e\xbd\xfd\x6d\xb8\x5d\xaa\x6d\x46\x9f\xaa\xf5\x2f\x7a\x73\xeb\xe2\xcb\xce\xf5\xe0\xb6\xf7\xfd\xb0\xda\x4a\xd2\xad\xab\x64\xbb\xde\xdb\xfe\x2d\x72\xfb\x97\xa5\x93\x3f\x5a\x6f\x74\x67\x8e\xbd\x5f\xde\xbf\xfb\xe7\x4a\x56\xfc\xd7\xbb\x0f\xd3\xa7\x8b\xf7\x1f\x66\xe2\x61\x2a\xfd\xfc\x44\x3a\xbf\xd5\x2f\x3d\x69\x0c\xb9\x0c\xd4\xd0\x11\xca\xcf\x8f\xae\x8e\x41\xa6\xfd\x08\x36\x1b\xf0\xee\xef\x61\x7e\x24\x6d\xf4\x8c\x92\xef\x9e\x3f\x75\x4c\x2c\xf3\xdc\x62\xcb\x78\x6e\xf1\xe6\xf5\xef\x00\x00\x00\xff\xff\xeb\x2f\x53\xc8\x04\x13\x00\x00")

func stateHtmlTmplBytes() ([]byte, error) {
	return bindataRead(
		_stateHtmlTmpl,
		"state.html.tmpl",
	)
}

func stateHtmlTmpl() (*asset, error) {
	bytes, err := stateHtmlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "state.html.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb1, 0x8d, 0x22, 0x4e, 0x63, 0x3c, 0x2a, 0x9a, 0x6, 0xc, 0x9a, 0x1, 0x56, 0x64, 0xbd, 0x53, 0xe2, 0x76, 0x7, 0x43, 0x83, 0xa3, 0xc1, 0xd5, 0x3a, 0xfb, 0xda, 0x6b, 0x8a, 0x81, 0x5e, 0xe1}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"state.html.tmpl": stateHtmlTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"state.html.tmpl": {stateHtmlTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
