// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package auth

import (
	"sync"

	productsubscription "github.com/sourcegraph/sourcegraph/cmd/cody-gateway/internal/actor/productsubscription"
)

// MockListingCache is a mock implementation of the ListingCache interface
// (from the package
// github.com/sourcegraph/sourcegraph/cmd/cody-gateway/internal/actor/productsubscription)
// used for unit testing.
type MockListingCache struct {
	// DeleteFunc is an instance of a mock function object controlling the
	// behavior of the method Delete.
	DeleteFunc *ListingCacheDeleteFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *ListingCacheGetFunc
	// ListAllKeysFunc is an instance of a mock function object controlling
	// the behavior of the method ListAllKeys.
	ListAllKeysFunc *ListingCacheListAllKeysFunc
	// SetFunc is an instance of a mock function object controlling the
	// behavior of the method Set.
	SetFunc *ListingCacheSetFunc
}

// NewMockListingCache creates a new mock of the ListingCache interface. All
// methods return zero values for all results, unless overwritten.
func NewMockListingCache() *MockListingCache {
	return &MockListingCache{
		DeleteFunc: &ListingCacheDeleteFunc{
			defaultHook: func(string) {
				return
			},
		},
		GetFunc: &ListingCacheGetFunc{
			defaultHook: func(string) (r0 []byte, r1 bool) {
				return
			},
		},
		ListAllKeysFunc: &ListingCacheListAllKeysFunc{
			defaultHook: func() (r0 []string) {
				return
			},
		},
		SetFunc: &ListingCacheSetFunc{
			defaultHook: func(string, []byte) {
				return
			},
		},
	}
}

// NewStrictMockListingCache creates a new mock of the ListingCache
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockListingCache() *MockListingCache {
	return &MockListingCache{
		DeleteFunc: &ListingCacheDeleteFunc{
			defaultHook: func(string) {
				panic("unexpected invocation of MockListingCache.Delete")
			},
		},
		GetFunc: &ListingCacheGetFunc{
			defaultHook: func(string) ([]byte, bool) {
				panic("unexpected invocation of MockListingCache.Get")
			},
		},
		ListAllKeysFunc: &ListingCacheListAllKeysFunc{
			defaultHook: func() []string {
				panic("unexpected invocation of MockListingCache.ListAllKeys")
			},
		},
		SetFunc: &ListingCacheSetFunc{
			defaultHook: func(string, []byte) {
				panic("unexpected invocation of MockListingCache.Set")
			},
		},
	}
}

// NewMockListingCacheFrom creates a new mock of the MockListingCache
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockListingCacheFrom(i productsubscription.ListingCache) *MockListingCache {
	return &MockListingCache{
		DeleteFunc: &ListingCacheDeleteFunc{
			defaultHook: i.Delete,
		},
		GetFunc: &ListingCacheGetFunc{
			defaultHook: i.Get,
		},
		ListAllKeysFunc: &ListingCacheListAllKeysFunc{
			defaultHook: i.ListAllKeys,
		},
		SetFunc: &ListingCacheSetFunc{
			defaultHook: i.Set,
		},
	}
}

// ListingCacheDeleteFunc describes the behavior when the Delete method of
// the parent MockListingCache instance is invoked.
type ListingCacheDeleteFunc struct {
	defaultHook func(string)
	hooks       []func(string)
	history     []ListingCacheDeleteFuncCall
	mutex       sync.Mutex
}

// Delete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockListingCache) Delete(v0 string) {
	m.DeleteFunc.nextHook()(v0)
	m.DeleteFunc.appendCall(ListingCacheDeleteFuncCall{v0})
	return
}

// SetDefaultHook sets function that is called when the Delete method of the
// parent MockListingCache instance is invoked and the hook queue is empty.
func (f *ListingCacheDeleteFunc) SetDefaultHook(hook func(string)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Delete method of the parent MockListingCache instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ListingCacheDeleteFunc) PushHook(hook func(string)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ListingCacheDeleteFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(string) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ListingCacheDeleteFunc) PushReturn() {
	f.PushHook(func(string) {
		return
	})
}

func (f *ListingCacheDeleteFunc) nextHook() func(string) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ListingCacheDeleteFunc) appendCall(r0 ListingCacheDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ListingCacheDeleteFuncCall objects
// describing the invocations of this function.
func (f *ListingCacheDeleteFunc) History() []ListingCacheDeleteFuncCall {
	f.mutex.Lock()
	history := make([]ListingCacheDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ListingCacheDeleteFuncCall is an object that describes an invocation of
// method Delete on an instance of MockListingCache.
type ListingCacheDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ListingCacheDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ListingCacheDeleteFuncCall) Results() []interface{} {
	return []interface{}{}
}

// ListingCacheGetFunc describes the behavior when the Get method of the
// parent MockListingCache instance is invoked.
type ListingCacheGetFunc struct {
	defaultHook func(string) ([]byte, bool)
	hooks       []func(string) ([]byte, bool)
	history     []ListingCacheGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockListingCache) Get(v0 string) ([]byte, bool) {
	r0, r1 := m.GetFunc.nextHook()(v0)
	m.GetFunc.appendCall(ListingCacheGetFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockListingCache instance is invoked and the hook queue is empty.
func (f *ListingCacheGetFunc) SetDefaultHook(hook func(string) ([]byte, bool)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockListingCache instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ListingCacheGetFunc) PushHook(hook func(string) ([]byte, bool)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ListingCacheGetFunc) SetDefaultReturn(r0 []byte, r1 bool) {
	f.SetDefaultHook(func(string) ([]byte, bool) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ListingCacheGetFunc) PushReturn(r0 []byte, r1 bool) {
	f.PushHook(func(string) ([]byte, bool) {
		return r0, r1
	})
}

func (f *ListingCacheGetFunc) nextHook() func(string) ([]byte, bool) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ListingCacheGetFunc) appendCall(r0 ListingCacheGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ListingCacheGetFuncCall objects describing
// the invocations of this function.
func (f *ListingCacheGetFunc) History() []ListingCacheGetFuncCall {
	f.mutex.Lock()
	history := make([]ListingCacheGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ListingCacheGetFuncCall is an object that describes an invocation of
// method Get on an instance of MockListingCache.
type ListingCacheGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []byte
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ListingCacheGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ListingCacheGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ListingCacheListAllKeysFunc describes the behavior when the ListAllKeys
// method of the parent MockListingCache instance is invoked.
type ListingCacheListAllKeysFunc struct {
	defaultHook func() []string
	hooks       []func() []string
	history     []ListingCacheListAllKeysFuncCall
	mutex       sync.Mutex
}

// ListAllKeys delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockListingCache) ListAllKeys() []string {
	r0 := m.ListAllKeysFunc.nextHook()()
	m.ListAllKeysFunc.appendCall(ListingCacheListAllKeysFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ListAllKeys method
// of the parent MockListingCache instance is invoked and the hook queue is
// empty.
func (f *ListingCacheListAllKeysFunc) SetDefaultHook(hook func() []string) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListAllKeys method of the parent MockListingCache instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ListingCacheListAllKeysFunc) PushHook(hook func() []string) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ListingCacheListAllKeysFunc) SetDefaultReturn(r0 []string) {
	f.SetDefaultHook(func() []string {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ListingCacheListAllKeysFunc) PushReturn(r0 []string) {
	f.PushHook(func() []string {
		return r0
	})
}

func (f *ListingCacheListAllKeysFunc) nextHook() func() []string {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ListingCacheListAllKeysFunc) appendCall(r0 ListingCacheListAllKeysFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ListingCacheListAllKeysFuncCall objects
// describing the invocations of this function.
func (f *ListingCacheListAllKeysFunc) History() []ListingCacheListAllKeysFuncCall {
	f.mutex.Lock()
	history := make([]ListingCacheListAllKeysFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ListingCacheListAllKeysFuncCall is an object that describes an invocation
// of method ListAllKeys on an instance of MockListingCache.
type ListingCacheListAllKeysFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ListingCacheListAllKeysFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ListingCacheListAllKeysFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ListingCacheSetFunc describes the behavior when the Set method of the
// parent MockListingCache instance is invoked.
type ListingCacheSetFunc struct {
	defaultHook func(string, []byte)
	hooks       []func(string, []byte)
	history     []ListingCacheSetFuncCall
	mutex       sync.Mutex
}

// Set delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockListingCache) Set(v0 string, v1 []byte) {
	m.SetFunc.nextHook()(v0, v1)
	m.SetFunc.appendCall(ListingCacheSetFuncCall{v0, v1})
	return
}

// SetDefaultHook sets function that is called when the Set method of the
// parent MockListingCache instance is invoked and the hook queue is empty.
func (f *ListingCacheSetFunc) SetDefaultHook(hook func(string, []byte)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Set method of the parent MockListingCache instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ListingCacheSetFunc) PushHook(hook func(string, []byte)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ListingCacheSetFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(string, []byte) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ListingCacheSetFunc) PushReturn() {
	f.PushHook(func(string, []byte) {
		return
	})
}

func (f *ListingCacheSetFunc) nextHook() func(string, []byte) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ListingCacheSetFunc) appendCall(r0 ListingCacheSetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ListingCacheSetFuncCall objects describing
// the invocations of this function.
func (f *ListingCacheSetFunc) History() []ListingCacheSetFuncCall {
	f.mutex.Lock()
	history := make([]ListingCacheSetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ListingCacheSetFuncCall is an object that describes an invocation of
// method Set on an instance of MockListingCache.
type ListingCacheSetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []byte
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ListingCacheSetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ListingCacheSetFuncCall) Results() []interface{} {
	return []interface{}{}
}
