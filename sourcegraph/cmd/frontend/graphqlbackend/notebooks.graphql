extend type Mutation {
    """
    Create a notebook.
    """
    createNotebook(
        """
        Notebook input.
        """
        notebook: NotebookInput!
    ): Notebook!
    """
    Update a notebook. Only the owner can update it.
    """
    updateNotebook(
        """
        Notebook ID.
        """
        id: ID!
        """
        Notebook input.
        """
        notebook: NotebookInput!
    ): Notebook!
    """
    Delete a notebook. Only the owner can delete it.
    """
    deleteNotebook(id: ID!): EmptyResponse!
    """
    Create a notebook star for the current user.
    Only one star can be created per notebook and user pair.
    """
    createNotebookStar(notebookID: ID!): NotebookStar!
    """
    Delete the notebook star for the current user, if exists.
    """
    deleteNotebookStar(notebookID: ID!): EmptyResponse!
}

extend type Query {
    """
    All available notebooks.
    """
    notebooks(
        """
        Returns the first n notebooks from the list.
        """
        first: Int = 50
        """
        Opaque pagination cursor.
        """
        after: String
        """
        Query to filter notebooks by title and blocks content.
        """
        query: String
        """
        Filter to notebooks made by a single creator.
        """
        creatorUserID: ID
        """
        Filter to notebooks that were starred by the user.
        """
        starredByUserID: ID
        """
        Filter to notebooks associated with a specific namespace (user or org).
        """
        namespace: ID
        """
        Sort field.
        """
        orderBy: NotebooksOrderBy = NOTEBOOK_UPDATED_AT
        """
        Sort direction.
        """
        descending: Boolean = false
    ): NotebookConnection!
}

"""
A paginated list of notebooks.
"""
type NotebookConnection {
    """
    A list of notebooks.
    """
    nodes: [Notebook!]!
    """
    The total number of notebooks in the connection.
    """
    totalCount: Int!
    """
    Pagination information.
    """
    pageInfo: PageInfo!
}

"""
NotebooksOrderBy enumerates the ways notebooks can be ordered.
"""
enum NotebooksOrderBy {
    NOTEBOOK_UPDATED_AT
    NOTEBOOK_CREATED_AT
    NOTEBOOK_STAR_COUNT
}

"""
Markdown block renders the Markdown formatted input string into HTML.
"""
type MarkdownBlock {
    """
    ID of the block.
    """
    id: String!
    """
    Markdown formatted input string.
    """
    markdownInput: String!
}

"""
Query block allows performing inline search queries within a notebook.
"""
type QueryBlock {
    """
    ID of the block.
    """
    id: String!
    """
    A Sourcegraph search query string.
    """
    queryInput: String!
}

"""
A line range inside a file.
"""
type FileBlockLineRange {
    """
    The first line to fetch (0-indexed, inclusive).
    """
    startLine: Int!
    """
    The last line to fetch (0-indexed, exclusive).
    """
    endLine: Int!
}

"""
FileBlockInput contains the information necessary to fetch the file.
"""
type FileBlockInput {
    """
    Name of the repository, e.g. "github.com/sourcegraph/sourcegraph".
    """
    repositoryName: String!
    """
    Path within the repository, e.g. "client/web/file.tsx".
    """
    filePath: String!
    """
    An optional revision, e.g. "pr/feature-1", "a9505a2947d3df53558e8c88ff8bcef390fc4e3e".
    If omitted, we use the latest revision (HEAD).
    """
    revision: String
    """
    An optional line range. If omitted, we display the entire file.
    """
    lineRange: FileBlockLineRange
}

"""
FileBlock specifies a file (or part of a file) to display within the block.
"""
type FileBlock {
    """
    ID of the block.
    """
    id: String!
    """
    File block input.
    """
    fileInput: FileBlockInput!
}

"""
SymbolBlockInput contains the information necessary to find the symbol.
"""
type SymbolBlockInput {
    """
    Name of the repository, e.g. "github.com/sourcegraph/sourcegraph".
    """
    repositoryName: String!
    """
    Path within the repository, e.g. "client/web/file.tsx".
    """
    filePath: String!
    """
    An optional revision, e.g. "pr/feature-1", "a9505a2947d3df53558e8c88ff8bcef390fc4e3e".
    If omitted, we use the latest revision (HEAD).
    """
    revision: String
    """
    Number of lines to show before and after the matched symbol line.
    """
    lineContext: Int!
    """
    The symbol name.
    """
    symbolName: String!
    """
    Name of the symbol container.
    """
    symbolContainerName: String!
    """
    The symbol kind.
    """
    symbolKind: SymbolKind!
}

"""
FileBlock specifies a symbol to display within the block.
"""
type SymbolBlock {
    """
    ID of the block.
    """
    id: String!
    """
    Symbol block input.
    """
    symbolInput: SymbolBlockInput!
}

"""
Notebook blocks are a union of distinct block types: Markdown, Query, File, Symbol, and Compute.
"""
union NotebookBlock = MarkdownBlock | QueryBlock | FileBlock | SymbolBlock

"""
A notebook with an array of blocks.
"""
type Notebook implements Node {
    """
    The unique id of the notebook.
    """
    id: ID!
    """
    The title of the notebook.
    """
    title: String!
    """
    Array of notebook blocks.
    """
    blocks: [NotebookBlock!]!
    """
    User that created the notebook or null if the user was removed.
    """
    creator: User
    """
    User that last updated the notebook or null if that user was removed.
    """
    updater: User
    """
    Notebook namespace or null if the namespace (user or org) was removed.
    """
    namespace: Namespace
    """
    Public property controls the visibility of the notebook. A public notebook is available to
    any user on the instance. Private notebooks are only available to their creators.
    """
    public: Boolean!
    """
    Date and time the notebook was last updated.
    """
    updatedAt: DateTime!
    """
    Date and time the notebook was created.
    """
    createdAt: DateTime!
    """
    If current viewer can manage (edit, delete) the notebook.
    """
    viewerCanManage: Boolean!
    """
    If current viewer has starred the notebook.
    """
    viewerHasStarred: Boolean!
    """
    Notebook stars.
    """
    stars(
        """
        Returns the first n notebook stars from the list.
        """
        first: Int = 50
        """
        Opaque pagination cursor.
        """
        after: String
    ): NotebookStarConnection!
}

"""
A paginated list of notebook stars.
"""
type NotebookStarConnection {
    """
    A list of notebook stars.
    """
    nodes: [NotebookStar!]!
    """
    The total number of notebook stars in the connection.
    """
    totalCount: Int!
    """
    Pagination information.
    """
    pageInfo: PageInfo!
}

"""
A notebook star.
"""
type NotebookStar {
    """
    User that starred the notebook.
    """
    user: User!
    """
    Date and time the notebook star was created.
    """
    createdAt: DateTime!
}

"""
Input to create a line range for a file block.
"""
input CreateFileBlockLineRangeInput {
    """
    The first line to fetch (0-indexed, inclusive).
    """
    startLine: Int!
    """
    The last line to fetch (0-indexed, exclusive).
    """
    endLine: Int!
}

"""
CreateFileBlockInput contains the information necessary to create a file block.
"""
input CreateFileBlockInput {
    """
    Name of the repository, e.g. "github.com/sourcegraph/sourcegraph".
    """
    repositoryName: String!
    """
    Path within the repository, e.g. "client/web/file.tsx".
    """
    filePath: String!
    """
    An optional revision, e.g. "pr/feature-1", "a9505a2947d3df53558e8c88ff8bcef390fc4e3e".
    If omitted, we use the latest revision (HEAD).
    """
    revision: String
    """
    An optional line range. If omitted, we display the entire file.
    """
    lineRange: CreateFileBlockLineRangeInput
}

"""
CreateSymbolBlockInput contains the information necessary to create a symbol block.
"""
input CreateSymbolBlockInput {
    """
    Name of the repository, e.g. "github.com/sourcegraph/sourcegraph".
    """
    repositoryName: String!
    """
    Path within the repository, e.g. "client/web/file.tsx".
    """
    filePath: String!
    """
    An optional revision, e.g. "pr/feature-1", "a9505a2947d3df53558e8c88ff8bcef390fc4e3e".
    If omitted, we use the latest revision (HEAD).
    """
    revision: String
    """
    Number of lines to show before and after the matched symbol line.
    """
    lineContext: Int!
    """
    The symbol name.
    """
    symbolName: String!
    """
    Name of the symbol container.
    """
    symbolContainerName: String!
    """
    The symbol kind.
    """
    symbolKind: SymbolKind!
}

"""
Enum of possible block types.
"""
enum NotebookBlockType {
    MARKDOWN
    QUERY
    FILE
    SYMBOL
}

"""
GraphQL does not accept union types as inputs, so we have to use
all possible optional inputs with an enum to select the actual block input we want to use.
"""
input CreateNotebookBlockInput {
    """
    ID of the block.
    """
    id: String!
    """
    Block type.
    """
    type: NotebookBlockType!
    """
    Markdown input.
    """
    markdownInput: String
    """
    Query input.
    """
    queryInput: String
    """
    File input.
    """
    fileInput: CreateFileBlockInput
    """
    Symbol input.
    """
    symbolInput: CreateSymbolBlockInput
}

"""
Input for a new notebook.
"""
input NotebookInput {
    """
    The title of the notebook.
    """
    title: String!
    """
    Array of notebook blocks.
    """
    blocks: [CreateNotebookBlockInput!]!
    """
    Notebook namespace (user or org). Controls the visibility of the notebook
    and who can edit the notebook. Only the notebook creator can update the namespace.
    """
    namespace: ID!
    """
    Public property controls the visibility of the notebook. A public notebook is available to
    any user on the instance. Private notebooks are only available to their creators.
    """
    public: Boolean!
}
