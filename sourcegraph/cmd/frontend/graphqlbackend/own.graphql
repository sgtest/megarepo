"""
Ownables are resources that can have ownership information attached.
"""
interface Ownable {
    """
    Ownership summary for this entity.
    """
    ownership(
        """
        Returns the first n ownership records from the list.
        """
        first: Int
        """
        Opaque pagination cursor.
        """
        after: String
        """
        Return only ownership for the given reasons.
        """
        reasons: [OwnershipReasonType!]
    ): OwnershipConnection!
}

extend type GitBlob implements Ownable {
    """
    Ownership summary for this file.
    """
    ownership(
        """
        Returns the first n ownership records from the list.
        """
        first: Int
        """
        Opaque pagination cursor.
        """
        after: String
        """
        Return only ownership for the given reasons.
        """
        reasons: [OwnershipReasonType!]
    ): OwnershipConnection!
}

extend type GitTree {
    """
    Owners of the directory at revision.
    """
    ownership(
        """
        Returns the first n ownership records from the list.
        """
        first: Int
        """
        Opaque pagination cursor.
        """
        after: String
    ): OwnershipConnection!

    """
    Ownership statistics for all the files (deeply) contained in this tree.
    """
    ownershipStats: OwnershipStats!
}

extend type GitCommit {
    """
    Owners of the repository at this commit.
    """
    ownership(
        """
        Returns the first n ownership records from the list.
        """
        first: Int
        """
        Opaque pagination cursor.
        """
        after: String
    ): OwnershipConnection!
}

"""
Statistics about code ownership computed for given context (usually a repository or directory).
"""
type OwnershipStats {
    """
    Total files considered for ownership statistics (owned + unowned).
    """
    totalFiles: Int!

    """
    Total files with ownership assigned by CODEOWNERS.
    """
    totalCodeownedFiles: Int!
}

"""
A list of ownership entries.
"""
type OwnershipConnection {
    """
    The total count of items in the connection.
    """
    totalCount: Int!
    """
    The total number of owners in this connection.
    Here an owner is as opposed to an ownership inference signal.
    """
    totalOwners: Int!
    """
    The pagination info for the connection.
    """
    pageInfo: PageInfo!
    """
    The page set of Ownership entries in this connection.
    """
    nodes: [Ownership!]!
}

"""
An owner is any entity that can own other resources.
"""
union Owner = Person | Team

"""
Ownership is the collection of data points that make Sourcegraph suggest the contained
owner as owner of the Ownable this is attached to.
"""
type Ownership {
    """
    The owner this entry refers to. Can be a person or a team.
    """
    owner: Owner!
    """
    The reasons why Sourcegraph determined this entity as an owner.
    """
    reasons: [OwnershipReason!]!
}

"""
The only way we can recognize ownership at this point is through CODEOWNERS file entry.
"""
enum OwnershipReasonType {
    CODEOWNERS_FILE_ENTRY
    ASSIGNED_OWNER
    RECENT_CONTRIBUTOR_OWNERSHIP_SIGNAL
    RECENT_VIEW_OWNERSHIP_SIGNAL
}

"""
A union of all the different ownership reasons.
"""
union OwnershipReason =
      CodeownersFileEntry
    | RecentContributorOwnershipSignal
    | RecentViewOwnershipSignal
    | AssignedOwner

"""
A signal derived from recent code contributors.
"""
type RecentContributorOwnershipSignal {
    """
    Descriptive title to display in the UI for the determination.
    """
    title: String!

    """
    More detailed description to display in the UI for the determination.
    """
    description: String!
}

"""
A signal derived from recent code file views.
"""
type RecentViewOwnershipSignal {
    """
    Descriptive title to display in the UI for the determination.
    """
    title: String!

    """
    More detailed description to display in the UI for the determination.
    """
    description: String!
}

"""
Manually assigned owner.
"""
type AssignedOwner {
    """
    Descriptive title to display in the UI for the determination.
    """
    title: String!

    """
    More detailed description to display in the UI for the determination.
    """
    description: String!
}

"""
The entity is an owner because they were manually assigned as an owner.
"""
type CodeownersFileEntry {
    """
    Descriptive title to display in the UI for the determination.
    """
    title: String!
    """
    More detailed description to display in the UI for the determination.
    """
    description: String!
    """
    Either GitBlob or VirtualFile. This points to the CODEOWNERS file that yielded the
    determination.
    """
    codeownersFile: File2!
    """
    The line in the CODEOWNERS file that matched for this determination.
    """
    ruleLineMatch: Int!
}

"""
CodeownersIngestedFile represents a manually ingested Codeowners file.
"""
type CodeownersIngestedFile implements Node {
    """
    A graphql ID for this file.
    """
    id: ID!
    """
    The string contents of the codeowners file.
    """
    contents: String!
    """
    The repository this codeowners file has been manually ingested for.
    """
    repository: Repository!
    """
    The creation date of this codeowners file.
    """
    createdAt: DateTime!
    """
    The last updated date of this codeowners file.
    """
    updatedAt: DateTime!
}

extend type Mutation {
    """
    addCodeownersFile creates a new Codeowners file for the given repository and file contents.
    """
    addCodeownersFile(input: CodeownersFileInput!): CodeownersIngestedFile!
    """
    updateCodeownersFile updates an existing Codeowners file for a repository.
    """
    updateCodeownersFile(input: CodeownersFileInput!): CodeownersIngestedFile!
    """
    deleteCodeownersFiles deletes any existing Codeowners file for the given repositories.
    """
    deleteCodeownersFiles(repositories: [DeleteCodeownersFilesInput!]!): EmptyResponse
    """
    updateOwnSignalConfigurations updates any configurations keyed by name. It will do nothing if the key doesn't exist.
    """
    updateOwnSignalConfigurations(input: UpdateSignalConfigurationsInput!): [OwnSignalConfiguration!]!
    """
    assignOwner creates a new assigned owner.
    """
    assignOwner(input: AssignOwnerOrTeamInput!): EmptyResponse
    """
    removeAssignedOwner removes an assigned owner.
    """
    removeAssignedOwner(input: AssignOwnerOrTeamInput!): EmptyResponse
    """
    assignTeam creates a new assigned team.
    """
    assignTeam(input: AssignOwnerOrTeamInput!): EmptyResponse
    """
    removeAssignedTeam removes an assigned owner.
    """
    removeAssignedTeam(input: AssignOwnerOrTeamInput!): EmptyResponse
}

"""
A repository to pass to the deleteCodeownersFiles mutation. Either repoID or repoName
must be provided.
"""
input DeleteCodeownersFilesInput {
    """
    The repo ID to ingest the file for. Cannot be set with repositoryName.
    """
    repoID: ID
    """
    The repo name to ingest the file for. Cannot be set with repositoryID.
    """
    repoName: String
}

"""
CodeownersFileInput represents the input for ingesting codeowners files
"""
input CodeownersFileInput {
    """
    fileContents is the text of the codeowners file
    """
    fileContents: String!
    """
    The repo ID to ingest the file for. Cannot be set with repositoryName.
    """
    repoID: ID
    """
    The repo name to ingest the file for. Cannot be set with repositoryID.
    """
    repoName: String
}

extend type Query {
    """
    codeownersIngestedFiles returns all existing manually ingested codeowners files.
    """
    codeownersIngestedFiles(first: Int, after: Int): CodeownersIngestedFileConnection!

    """
    List all ownership signal configurations
    """
    ownSignalConfigurations: [OwnSignalConfiguration!]!

    """
    Returns ownership stats for the whole Sourcegraph instance
    """
    instanceOwnershipStats: OwnershipStats!
}

"""
OwnSignalConfiguration represents the configuration for an ownership signal.
"""
type OwnSignalConfiguration {
    """
    The name of the signal configuration, this serves as the primary key.
    """
    name: String!
    """
    The description of the signal configuration.
    """
    description: String!
    """
    Whether or not the signal configuration is enabled.
    """
    isEnabled: Boolean!
    """
    A list of repository name patterns to exclude from the signal.
    """
    excludedRepoPatterns: [String!]!
}

"""
OwnSignalConfigurationUpdate represents an update to an OwnSignalConfiguration.
"""
input OwnSignalConfigurationUpdate {
    """
    A list of repository name patterns to exclude from the signal.
    """
    excludedRepoPatterns: [String!]!
    """
    Whether or not the signal configuration should be enabled.
    """
    enabled: Boolean!
    """
    The new name for the signal configuration.
    """
    name: String!
}

"""
UpdateSignalConfigurationsInput represents the input for updating multiple signal configurations.
"""
input UpdateSignalConfigurationsInput {
    """
    The signal configuration updates.
    """
    configs: [OwnSignalConfigurationUpdate!]!
}

"""
AssignOwnerOrTeamInput represents the input for assigning or deleting an owner team or person.
"""
input AssignOwnerOrTeamInput {
    """
    ID of an assigned owner or team.
    """
    assignedOwnerID: ID!
    """
    ID of a repo, which (or which directory/file) is assigned for ownership.
    """
    repoID: ID!
    """
    Path of the file/directory or a root path of the repo, which is assigned for ownership.
    """
    absolutePath: String!
}

"""
A list of CodeownersIngestedFiles.
"""
type CodeownersIngestedFileConnection {
    """
    The total count of items in the connection.
    """
    totalCount: Int!

    """
    The pagination info for the connection.
    """
    pageInfo: PageInfo!

    """
    The current page of codeowners files in this connection.
    """
    nodes: [CodeownersIngestedFile!]!
}

extend type Repository {
    """
    A file containing manually ingested codeowners data, if any. Null if no data has been uploaded.
    """
    ingestedCodeowners: CodeownersIngestedFile
}
