extend type Query {
    """
    Experimental: Searches a repository for similar code and text results using embeddings.
    We separated code and text results because text results tended to always feature at the top of the combined results,
    and didn't leave room for the code.
    """
    embeddingsSearch(
        """
        The repository to search.
        """
        repo: ID!
        """
        The query used for embeddings search.
        """
        query: String!
        """
        The number of code results to return.
        """
        codeResultsCount: Int!
        """
        The number of text results to return. Text results contain Markdown files and similar file types primarily used for writing documentation.
        """
        textResultsCount: Int!
    ): EmbeddingsSearchResults!

    """
    Experimental: Searches a set of repositories for similar code and text results using embeddings.
    We separated code and text results because text results tended to always feature at the top of the combined results,
    and didn't leave room for the code.
    """
    embeddingsMultiSearch(
        """
        The repository to search.
        """
        repos: [ID!]!
        """
        The query used for embeddings search.
        """
        query: String!
        """
        The number of code results to return.
        """
        codeResultsCount: Int!
        """
        The number of text results to return. Text results contain Markdown files and similar file types primarily used for writing documentation.
        """
        textResultsCount: Int!
    ): EmbeddingsSearchResults!

    """
    Experimental: Determines whether the given query requires further context before it can be answered.
    For example:
      - "What are Sourcegraph Notebooks" requires additional information from the Sourcegraph repository (Notebooks Markdown docs, etc.).
      - "Translate the previous code to Typescript" does not need additional context since it is referring to the existing context (or conversation).
    """
    isContextRequiredForChatQuery(query: String!): Boolean!
    """
    Experimental: Repo embedding jobs list.
    """
    repoEmbeddingJobs(
        """
        Number of jobs returned. Up to 100 jobs are returned by default.
        """
        first: Int
        """
        The number of nodes to return starting from the end (latest).
        Note: Use either last or first (see above) in the query. Setting both will
        return an error.
        """
        last: Int
        """
        Opaque pagination cursor to be used when paginating forwards that may be also used
        in conjunction with "first" to return the first N nodes.
        """
        after: String
        """
        Opaque pagination cursor to be used when paginating backwards that may be
        also used in conjunction with "last" to return the last N nodes.
        """
        before: String
    ): RepoEmbeddingJobsConnection!
}

extend type Mutation {
    """
    Experimental: Schedules a job to create an embedding search index for each listed repository. The indices are used for embeddings search.
    """
    scheduleRepositoriesForEmbedding(repoNames: [String!]!): EmptyResponse!
    """
    Experimental: Schedules a job to create an embedding index used for context detection. The index is used to determine wheter a query requires additional context.
    """
    scheduleContextDetectionForEmbedding: EmptyResponse!
}

"""
A single embeddings search result.
"""
type EmbeddingsSearchResult {
    """
    The name of the repository containing the search result.
    """
    repoName: String!
    """
    The commitID of the repository containing the search result.
    """
    revision: String!
    """
    The search result file name.
    """
    fileName: String!
    """
    The start line of the content (inclusive).
    """
    startLine: Int!
    """
    The end line of the content (exclusive).
    """
    endLine: Int!
    """
    The content of the file from start line to end line.
    """
    content: String!
}

"""
Embeddings search results. Contains a list of code results and a list of text results.
"""
type EmbeddingsSearchResults {
    """
    A list of code file results.
    """
    codeResults: [EmbeddingsSearchResult!]!
    """
    A list of text file results.
    """
    textResults: [EmbeddingsSearchResult!]!
}

"""
State types of repo embedding sync jobs.
"""
enum RepoEmbeddingJobState {
    QUEUED
    PROCESSING
    FAILED
    ERRORED
    COMPLETED
    CANCELED
}

"""
A repo embedding job.
"""
type RepoEmbeddingJob implements Node {
    """
    Unique node ID.
    """
    id: ID!
    """
    State of a repo embedding job.
    """
    state: RepoEmbeddingJobState!
    """
    Failure message for failed job.
    """
    failureMessage: String
    """
    Time when repo embedding job was queued.
    """
    queuedAt: DateTime!
    """
    Time when repo embedding job processing was started.
    """
    startedAt: DateTime
    """
    Time when repo embedding job processing finished.
    """
    finishedAt: DateTime
    """
    Time after which repo embedding job processing should be started.
    """
    processAfter: DateTime
    """
    Number of repo embedding job processing resets.
    """
    numResets: Int!
    """
    Number of repo embedding job processing failures.
    """
    numFailures: Int!
    """
    Time of last heartbeat of a repo embedding job processing.
    """
    lastHeartbeatAt: DateTime
    """
    Hostname of a worker on which repo embedding job is processing.
    """
    workerHostname: String!
    """
    Flag showing that given repo embedding job should be canceled instead of being processed.
    """
    cancel: Boolean!
    """
    The embedded repository.
    """
    repo: Repository
    """
    The revision at which the repo was embedded.
    """
    revision: GitCommit
}

"""
Repo embedding jobs.
"""
type RepoEmbeddingJobsConnection implements Connection {
    """
    Repo embedding jobs.
    """
    nodes: [RepoEmbeddingJob!]!
    """
    The total number of jobs in the connection.
    """
    totalCount: Int!
    """
    Pagination information.
    """
    pageInfo: ConnectionPageInfo!
}
