extend type Mutation {
    """
    Create search context.
    """
    createSearchContext(
        """
        Search context input.
        """
        searchContext: SearchContextInput!
        """
        List of search context repository revisions.
        """
        repositories: [SearchContextRepositoryRevisionsInput!]!
    ): SearchContext!
    """
    Delete search context.
    """
    deleteSearchContext(id: ID!): EmptyResponse!
    """
    Update search context.
    """
    updateSearchContext(
        """
        Search context ID.
        """
        id: ID!
        """
        Search context input.
        """
        searchContext: SearchContextEditInput!
        """
        List of search context repository revisions.
        """
        repositories: [SearchContextRepositoryRevisionsInput!]!
    ): SearchContext!
    """
    Add a star on a search context for the specified user.
    Only one star can be created per context and user pair.
    If the star already exists, this is a no-op.
    """
    createSearchContextStar(searchContextID: ID!, userID: ID!): EmptyResponse!
    """
    Delete a star on a search context for the specified user.
    If the star does not exist, this is a no-op.
    """
    deleteSearchContextStar(searchContextID: ID!, userID: ID!): EmptyResponse!
    """
    Set the default search context for the specified user.
    """
    setDefaultSearchContext(searchContextID: ID!, userID: ID!): EmptyResponse!
}

extend type Query {
    """
    All available user-defined search contexts. Excludes auto-defined contexts.
    """
    searchContexts(
        """
        Returns the first n search contexts from the list.
        """
        first: Int = 50
        """
        Opaque pagination cursor.
        """
        after: String
        """
        Query to filter the search contexts by spec.
        """
        query: String
        """
        Include search contexts matching the provided namespaces. A union of all matching search contexts is returned.
        ID can either be a user ID, org ID, or nil to match instance-level contexts. Empty namespaces list
        defaults to returning all available search contexts.
        Example: `namespaces: [user1, org1, org2, nil]` will return search contexts created by user1 + contexts
        created by org1 + contexts created by org2 + all instance-level contexts.
        """
        namespaces: [ID] = []
        """
        Sort field.
        Despite the value, the results are always sorted with the global context first,
        user's default context next, followed by the user's starred contexts,
        followed by the rest of the contexts.
        This controls the order of these internal groups.
        """
        orderBy: SearchContextsOrderBy = SEARCH_CONTEXT_SPEC
        """
        Sort direction.
        """
        descending: Boolean = false
    ): SearchContextConnection!
    """
    Fetch search context by spec (global, @username, @username/ctx, etc.).
    """
    searchContextBySpec(spec: String!): SearchContext
    """
    Determines whether the search context is within the set of search contexts available to the current user.
    The set consists of contexts created by the user, contexts created by the users' organizations, and instance-level contexts.
    """
    isSearchContextAvailable(spec: String!): Boolean!
    """
    Gets the default search context for the current user. This context is guaranteed to be available to the user.
    """
    defaultSearchContext: SearchContext
}

"""
A search context. Specifies a set of repositories to be searched.
"""
type SearchContext implements Node {
    """
    The unique id of the search context.
    """
    id: ID!
    """
    The name of the search context.
    """
    name: String!
    """
    The owner (user or org) of the search context. If nil, search context is considered instance-level.
    """
    namespace: Namespace
    """
    The description of the search context.
    """
    description: String!
    """
    Fully-qualified search context spec for use when querying.
    Examples: global, @username, @username/ctx, and @org/ctx.
    """
    spec: String!
    """
    Whether the search context is autodefined by Sourcegraph.
    The only autodefined context currently is the global search context ("global").
    """
    autoDefined: Boolean!
    """
    Sourcegraph search query that defines the search context.
    e.g. "r:^github\.com/org (rev:bar or rev:HEAD) file:^sub/dir"
    """
    query: String!
    """
    Repositories and their revisions that will be searched when querying.
    """
    repositories: [SearchContextRepositoryRevisions!]!
    """
    Public property controls the visibility of the search context. Public search context is available to
    any user on the instance. If a public search context contains private repositories, those are filtered out
    for unauthorized users. Private search contexts are only available to their owners. Private user search context
    is available only to the user, private org search context is available only to the members of the org, and private
    instance-level search contexts are available only to site-admins.
    """
    public: Boolean!
    """
    Date and time the search context was last updated.
    """
    updatedAt: DateTime!
    """
    If current viewer can manage (edit, delete) the search context.
    """
    viewerCanManage: Boolean!
    """
    If the viewer has set this context as default.
    """
    viewerHasAsDefault: Boolean!
    """
    If the viewer has starred this context.
    """
    viewerHasStarred: Boolean!
}

"""
Specifies a set of revisions to be searched within a repository.
"""
type SearchContextRepositoryRevisions {
    """
    The repository to be searched.
    """
    repository: Repository!
    """
    The set of revisions to be searched.
    """
    revisions: [String!]!
}

"""
SearchContextsOrderBy enumerates the ways a search contexts list can be ordered.
"""
enum SearchContextsOrderBy {
    SEARCH_CONTEXT_SPEC
    SEARCH_CONTEXT_UPDATED_AT
}

"""
A list of search contexts
"""
type SearchContextConnection {
    """
    A list of search contexts.
    """
    nodes: [SearchContext!]!

    """
    The total number of search contexts in the connection.
    """
    totalCount: Int!

    """
    Pagination information.
    """
    pageInfo: PageInfo!
}

"""
Input for a new search context.
"""
input SearchContextInput {
    """
    Search context name. Not the same as the search context spec. Search context namespace and search context name
    are used to construct the fully-qualified search context spec.
    Example mappings from search context spec to search context name: global -> global, @user -> user, @org -> org,
    @user/ctx1 -> ctx1, @org/ctxs/ctx -> ctxs/ctx.
    """
    name: String!
    """
    Search context description.
    """
    description: String!
    """
    Public property controls the visibility of the search context. Public search context is available to
    any user on the instance. If a public search context contains private repositories, those are filtered out
    for unauthorized users. Private search contexts are only available to their owners. Private user search context
    is available only to the user, private org search context is available only to the members of the org, and private
    instance-level search contexts are available only to site-admins.
    """
    public: Boolean!
    """
    Namespace of the search context (user or org). If not set, search context is considered instance-level.
    """
    namespace: ID
    """
    Sourcegraph search query that defines the search context.
    e.g. "r:^github\.com/org (rev:bar or rev:HEAD) file:^sub/dir"
    """
    query: String!
}

"""
Input for editing an existing search context.
"""
input SearchContextEditInput {
    """
    Search context name. Not the same as the search context spec. Search context namespace and search context name
    are used to construct the fully-qualified search context spec.
    Example mappings from search context spec to search context name: global -> global, @user -> user, @org -> org,
    @user/ctx1 -> ctx1, @org/ctxs/ctx -> ctxs/ctx.
    """
    name: String!
    """
    Search context description.
    """
    description: String!
    """
    Public property controls the visibility of the search context. Public search context is available to
    any user on the instance. If a public search context contains private repositories, those are filtered out
    for unauthorized users. Private search contexts are only available to their owners. Private user search context
    is available only to the user, private org search context is available only to the members of the org, and private
    instance-level search contexts are available only to site-admins.
    """
    public: Boolean!
    """
    Sourcegraph search query that defines the search context.
    e.g. "r:^github\.com/org (rev:bar or rev:HEAD) file:^sub/dir"
    """
    query: String!
}

"""
Input for a set of revisions to be searched within a repository.
"""
input SearchContextRepositoryRevisionsInput {
    """
    ID of the repository to be searched.
    """
    repositoryID: ID!
    """
    Revisions in the repository to be searched.
    """
    revisions: [String!]!
}
