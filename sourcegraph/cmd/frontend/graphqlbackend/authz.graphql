extend type Mutation {
    """
    Set the permissions of a repository (i.e., which users may view it on Sourcegraph). This
    operation overwrites the previous permissions for the repository.
    """
    setRepositoryPermissionsForUsers(
        """
        The repository whose permissions to set.
        """
        repository: ID!
        """
        A list of user identifiers and their repository permissions, which defines the set of
        users who may view the repository. All users not included in the list will not be
        permitted to view the repository on Sourcegraph.
        """
        userPermissions: [UserPermissionInput!]!
    ): EmptyResponse!
    """
    Set 'unrestricted' to true or false on a set of repositories. Repositories with
    'unrestricted' true will be visible to all users on the Sourcegraph instance.
    """
    setRepositoryPermissionsUnrestricted(
        """
        The repository ids we want to set unrestricted permissions on. Must not contain duplicates.
        """
        repositories: [ID!]!
        """
        true: Any user can view the repo
        false: Use existing repo permissions
        """
        unrestricted: Boolean!
    ): EmptyResponse!
    """
    Schedule a permissions sync for given repository. This queries the repository's code host for
    all users' permissions associated with the repository, so that the current permissions apply
    to all users' operations on that repository on Sourcegraph.
    """
    scheduleRepositoryPermissionsSync(repository: ID!): EmptyResponse!
    """
    Schedule a permissions sync for given user. This queries all code hosts for the user's current
    repository permissions and syncs them to Sourcegraph, so that the current permissions apply to
    the user's operations on Sourcegraph.
    """
    scheduleUserPermissionsSync(
        """
        User to schedule a sync for.
        """
        user: ID!
        """
        Additional options when performing a sync.
        """
        options: FetchPermissionsOptions
    ): EmptyResponse!
    """
    Set the sub-repo permissions of a repository (i.e., which paths are allowed or disallowed for
    a particular user). This operation overwrites the previous sub-repo permissions for the
    repository.
    """
    setSubRepositoryPermissionsForUsers(
        """
        The repository whose permissions to set.
        """
        repository: ID!
        """
        A list of user identifiers and their sub-repository permissions, which defines the set of
        paths within the repository they can access.
        """
        userPermissions: [UserSubRepoPermission!]!
    ): EmptyResponse!
    """
    Set the repository permissions for a given Bitbucket project. This mutation will apply the user
    given permissions to all the repositories that are part of the Bitbucket project as identified by the
    project key and all the users that have access to each repository.
    """
    setRepositoryPermissionsForBitbucketProject(
        """
        Bitbucket project key of which all repository permissions will be updated.
        """
        projectKey: String!
        """
        The bitbucket code host's GraphQL ID where this project is located.
        """
        codeHost: ID!
        """
        A list of user identifiers and their repository permissions, which defines the set of
        users who may view the repository. All users not included in the list will not be
        permitted to view the repository on Sourcegraph.
        """
        userPermissions: [UserPermissionInput!]!

        """
        Flag to indicate if ALL repositories under the project will allow unrestricted access to all users who have access to the code host.
        """
        unrestricted: Boolean
    ): EmptyResponse!

    """
    Cancel permissions sync job with given ID.
    No error is returned when the job is not in `queued` state or there is no such job
    with the given ID (latter means that most probably, the job has already been cleaned up).
    """
    cancelPermissionsSyncJob(
        """
        ID of the job to be canceled.
        """
        job: ID!
        """
        Optional cancellation reason.
        """
        reason: String
    ): CancelPermissionsSyncJobResultMessage!
}

"""
A status message of a permissions sync job cancellation.
"""
enum CancelPermissionsSyncJobResultMessage {
    SUCCESS
    NOT_FOUND
    ERROR
}

extend type Query {
    """
    The repositories a user is authorized to access with the given permission.
    This isn’t defined in the User type because we store permissions for users
    that don’t yet exist (i.e. late binding). Only one of "username" or "email"
    is required to identify a user.
    """
    authorizedUserRepositories(
        """
        The username.
        """
        username: String
        """
        One of the email addresses.
        """
        email: String
        """
        Permission that the user has on the repositories.
        """
        perm: RepositoryPermission = READ
        """
        Number of repositories to return after the given cursor.
        """
        first: Int!
        """
        Opaque pagination cursor.
        """
        after: String
    ): RepositoryConnection!

    """
    Returns a list of usernames or emails that have associated pending permissions.
    The returned list can be used to query authorizedUserRepositories for pending permissions.
    """
    usersWithPendingPermissions: [String!]!

    """
    INTERNAL ONLY: Returns a list of the types of authz providers that have been configured and will be used for
    determining which repositories the user has access to.
    """
    authzProviderTypes: [String!]!

    """
    Returns a list of recent permissions sync jobs for a given set of parameters.
    """
    permissionsSyncJobs(
        """
        Number of jobs returned. Maximum number of returned jobs is 500. Up to 100 jobs are returned by default.
        """
        first: Int
        """
        The number of nodes to return starting from the end (latest).
        Note: Use either last or first (see above) in the query. Setting both will
        return an error.
        """
        last: Int
        """
        Opaque pagination cursor to be used when paginating forwards that may be also used
        in conjunction with "first" to return the first N nodes.
        """
        after: String
        """
        Opaque pagination cursor to be used when paginating backwards that may be
        also used in conjunction with "last" to return the last N nodes.
        """
        before: String
        """
        Optional filter for PermissionsSyncJobReasonGroup.
        """
        reasonGroup: PermissionsSyncJobReasonGroup
        """
        Optional filter for PermissionsSyncJobState.
        """
        state: PermissionsSyncJobState
        """
        Type of search for permissions sync jobs: user or repository.
        """
        searchType: PermissionsSyncJobsSearchType
        """
        Term used to search for permissions sync jobs.
        """
        query: String
        """
        Optional filter to find permissions sync jobs for a user. Please provide either this or repoID, but not both.
        """
        userID: ID
        """
        Optional filter to find permissions sync jobs for a repository. Please provide either this or userID, but not both.
        """
        repoID: ID
        """
        Optional filter to filter only partially successful sync jobs.
        """
        partial: Boolean
    ): PermissionsSyncJobsConnection!

    """
    Returns various permissions syncing statistics.
    """
    permissionsSyncingStats: PermissionsSyncingStats!

    """
    Returns a list of Bitbucket Project permissions sync jobs for a given set of parameters.
    """
    bitbucketProjectPermissionJobs(
        """
        Bitbucket project keys which sync jobs are queried
        """
        projectKeys: [String!]
        """
        Job status, one of the following: queued, processing, completed, errored, failed.
        """
        status: String
        """
        Number of jobs returned. Maximum number of returned jobs is 500. 100 jobs are returned by default.
        """
        count: Int
    ): BitbucketProjectPermissionJobs!
}

extend type Repository {
    """
    A list of authorized users to access this repository with the given permission.
    This API currently only returns permissions from the Sourcegraph provider, i.e.
    "permissions.userMapping" in site configuration.
    """
    authorizedUsers(
        """
        Permission that the user has on this repository.
        """
        permission: RepositoryPermission = READ
        """
        Number of users to return after the given cursor.
        """
        first: Int!
        """
        Opaque pagination cursor.
        """
        after: String
    ): UserConnection!

    """
    The permissions information of the repository for the authenticated user.
    It is null when there is no permissions data stored for the repository.
    """
    permissionsInfo: PermissionsInfo
}

extend type User {
    """
    The permissions information of the user over repositories.
    It is null when there is no permissions data stored for the user.
    """
    permissionsInfo: PermissionsInfo
}

"""
Input type of a user (identified either by username or email address) with its repository permission.
"""
input UserPermissionInput {
    """
    Depending on the bindID option in the permissions.userMapping site configuration property,
    the elements of the list are either all usernames (bindID of "username") or all email
    addresses (bindID of "email").
    """
    bindID: String!
    """
    The highest level of repository permission.
    """
    permission: RepositoryPermission = READ
}

"""
A user (identified either by username or email address) with its repository permission.
"""
type UserPermission {
    """
    Depending on the bindID option in the permissions.userMapping site configuration property,
    the elements of the list are either all usernames (bindID of "username") or all email
    addresses (bindID of "email").
    """
    bindID: String!
    """
    The highest level of repository permission.
    """
    permission: RepositoryPermission!
}

"""
A user (identified either by username or email address) with its sub-repository permissions.
"""
input UserSubRepoPermission {
    """
    Depending on the bindID option in the permissions.userMapping site configuration property,
    the elements of the list are either all usernames (bindID of "username") or all email
    addresses (bindID of "email").
    """
    bindID: String!
    """
    DEPRECATED
    An array of paths that the user is allowed to access, in glob format.
    """
    pathIncludes: [String!] @deprecated(reason: "use paths instead.")
    """
    DEPRECATED
    An array of paths that the user is not allowed to access, in glob format.
    """
    pathExcludes: [String!] @deprecated(reason: "use paths instead.")
    """
    An array of paths in glob format. Paths starting with a minus (-)
    (i.e. "-/dev/private") prevent access, otherwise paths grant access.
    The last applicable path takes precedence.
    When paths is set, pathIncludes and pathExcludes are ignored.
    """
    paths: [String!]
}

"""
Different repository permission levels.
"""
enum RepositoryPermission {
    READ
}

"""
Permissions information of a repository or a user.
"""
type PermissionsInfo {
    """
    The permission levels that a user has on the repository.
    """
    permissions: [RepositoryPermission!]!
    """
    The last complete synced time, the value is updated only after a user- or repo-
    centric sync of permissions. It is null when the complete sync never happened.
    """
    syncedAt: DateTime
    """
    The last updated time of permissions, the value is updated whenever there is a
    change to the database row (i.e. incremental update).
    """
    updatedAt: DateTime
    """
    If true for a repo, it indicates access to the repo is allowed for all users.
    It will always be false for users.
    """
    unrestricted: Boolean!

    """
    The connection for repository permissions accessible to the user.
    """
    repositories(
        """
        Number of nodes returned during forward pagination. Maximum number of returned nodes is 100. Up to 20 nodes are returned by default.
        """
        first: Int
        """
        Number of nodes returned during backward pagination. Maximum number of returned nodes is 100. Up to 20 nodes are returned by default.
        """
        last: Int
        """
        Opaque pagination cursor to be used when paginating forwards.
        """
        after: String
        """
        Opaque pagination cursor to be used when paginating backwards.
        """
        before: String
        """
        Search query to filter repositories based on name.
        """
        query: String
    ): PermissionsInfoRepositoriesConnection
    """
    The connection for users who have access to the repository.
    """
    users(
        """
        Number of nodes returned during forward pagination. Maximum number of returned nodes is 100.
        """
        first: Int
        """
        Number of nodes returned during backward pagination. Maximum number of returned nodes is 100.
        """
        last: Int
        """
        Opaque pagination cursor to be used when paginating forwards.
        """
        after: String
        """
        Opaque pagination cursor to be used when paginating backwards.
        """
        before: String
        """
        Search query to filter users based on username or display name.
        """
        query: String
    ): PermissionsInfoUsersConnection
}

"""
Connection for repository permissions accessible to the user
"""
type PermissionsInfoRepositoriesConnection implements Connection {
    """
    List of repository permission info nodes
    """
    nodes: [PermissionsInfoRepositoryNode!]!
    """
    The total number of repository permission info nodes in the connection.
    """
    totalCount: Int!
    """
    Pagination information.
    """
    pageInfo: ConnectionPageInfo!
}

"""
Repository permission node defining why the repository is accessible to the user
"""
type PermissionsInfoRepositoryNode {
    """
    The ID of the repository.
    """
    id: ID!
    """
    The repository corresponding to the permission.
    """
    repository: Repository
    """
    The reason why the current user has permission to access the repository.
    """
    reason: String!
    """
    The timestamp when the permission was last updated at.
    """
    updatedAt: DateTime
}

"""
Connection for user permission who has access to the repository.
"""
type PermissionsInfoUsersConnection implements Connection {
    """
    List of repository permission info nodes
    """
    nodes: [PermissionsInfoUserNode!]!
    """
    The total number of repository permission info nodes in the connection.
    """
    totalCount: Int!
    """
    Pagination information.
    """
    pageInfo: ConnectionPageInfo!
}

"""
Repository permission node defining why the repository is accessible to the user.
"""
type PermissionsInfoUserNode {
    """
    The ID of the User.
    """
    id: ID!
    """
    The user corresponding to the permission.
    """
    user: User
    """
    The reason why the user has access to the repository.
    """
    reason: String!
    """
    The timestamp when the permission was last updated at.
    """
    updatedAt: DateTime
}

"""
Additional options when performing a permissions sync.
"""
input FetchPermissionsOptions {
    """
    Indicate that any caches added for optimization encountered during this permissions
    sync should be invalidated.
    """
    invalidateCaches: Boolean
}

"""
Permissions sync jobs.
"""
type PermissionsSyncJobsConnection implements Connection {
    """
    Permissions sync jobs.
    """
    nodes: [PermissionsSyncJob!]!
    """
    The total number of jobs in the connection.
    """
    totalCount: Int!
    """
    Pagination information.
    """
    pageInfo: ConnectionPageInfo!
}

"""
Type of search for permissions sync jobs: user or repository.
"""
enum PermissionsSyncJobsSearchType {
    USER
    REPOSITORY
}

"""
State types of permissions sync jobs.
"""
enum PermissionsSyncJobState {
    QUEUED
    PROCESSING
    FAILED
    ERRORED
    COMPLETED
    CANCELED
}

"""
Compound type for a permissions sync job trigger reason.
Consists of a reason group (PermissionsSyncJobReasonGroup) and a reason itself, providing details
about why/how the sync was triggered.
"""
type PermissionsSyncJobReasonWithGroup {
    """
    PermissionsSyncJobReasonGroup combines multiple permission sync job trigger reasons into groups with similar grounds.
    """
    group: PermissionsSyncJobReasonGroup!
    """
    Reason with details about why/how the sync was triggered.
    """
    reason: PermissionsSyncJobReason
}

"""
State types of permission sync jobs.
"""
enum PermissionsSyncJobReason {
    REASON_USER_OUTDATED_PERMS
    REASON_USER_NO_PERMS
    REASON_REPO_OUTDATED_PERMS
    REASON_REPO_NO_PERMS
    REASON_REPO_UPDATED_FROM_CODE_HOST
    REASON_USER_EMAIL_REMOVED
    REASON_USER_EMAIL_VERIFIED
    REASON_USER_ADDED_TO_ORG
    REASON_USER_REMOVED_FROM_ORG
    REASON_USER_ACCEPTED_ORG_INVITE
    REASON_GITHUB_USER_EVENT
    REASON_GITHUB_USER_ADDED_EVENT
    REASON_GITHUB_USER_REMOVED_EVENT
    REASON_GITHUB_USER_MEMBERSHIP_ADDED_EVENT
    REASON_GITHUB_USER_MEMBERSHIP_REMOVED_EVENT
    REASON_GITHUB_TEAM_ADDED_TO_REPO_EVENT
    REASON_GITHUB_TEAM_REMOVED_FROM_REPO_EVENT
    REASON_GITHUB_ORG_MEMBER_ADDED_EVENT
    REASON_GITHUB_ORG_MEMBER_REMOVED_EVENT
    REASON_GITHUB_REPO_EVENT
    REASON_GITHUB_REPO_MADE_PRIVATE_EVENT
    REASON_MANUAL_REPO_SYNC
    REASON_MANUAL_USER_SYNC
    REASON_EXTERNAL_ACCOUNT_ADDED
    REASON_EXTERNAL_ACCOUNT_DELETED
}

"""
Sync reason groups of permission sync jobs.
"""
enum PermissionsSyncJobReasonGroup {
    MANUAL
    WEBHOOK
    SCHEDULE
    SOURCEGRAPH
    UNKNOWN
}

"""
Union type for a subject of a permission sync job (repository or user).
"""
union PermissionsSyncJobSubject = User | Repository

"""
Permission sync job priority.
"""
enum PermissionsSyncJobPriority {
    LOW
    MEDIUM
    HIGH
}

"""
Describes the status of a permissions sync for a given provider (code host).
"""
enum CodeHostStatus {
    SUCCESS
    ERROR
}

"""
Describes the state of a provider (code host) during a permission sync job.
"""
type CodeHostState {
    """
    ID of a permissions provider (code host).
    """
    providerID: String!
    """
    Permissions provider (code host) type.
    """
    providerType: String!
    """
    Status of permission sync of a given provider.
    """
    status: CodeHostStatus!
    """
    Status message.
    """
    message: String!
}

"""
State of a permission sync job.
"""
type PermissionsSyncJob implements Node {
    """
    Unique node ID.
    """
    id: ID!
    """
    State of a permission sync job.
    """
    state: PermissionsSyncJobState!
    """
    Failure message for failed sync job.
    """
    failureMessage: String
    """
    Reason for triggering a permission sync job.
    """
    reason: PermissionsSyncJobReasonWithGroup!
    """
    Reason for cancellation of a given permission sync job.
    """
    cancellationReason: String
    """
    User who triggered this permission sync job.
    """
    triggeredByUser: User
    """
    Time when permission sync job was queued.
    """
    queuedAt: DateTime!
    """
    Time when permission sync job processing was started.
    """
    startedAt: DateTime
    """
    Time when permission sync job processing finished.
    """
    finishedAt: DateTime
    """
    Time after which permission sync job processing should be started.
    """
    processAfter: DateTime
    """
    How long did it take for permission sync job to complete.
    """
    ranForMs: Int
    """
    Number of permission sync job processing resets.
    """
    numResets: Int
    """
    Number of permission sync job processing failures.
    """
    numFailures: Int
    """
    Time of last heartbeat of a permission sync job processing.
    """
    lastHeartbeatAt: DateTime
    """
    Hostname of a worker on which permission sync job is processing.
    """
    workerHostname: String!
    """
    Flag showing that given permission sync job should be canceled instead of being processed.
    """
    cancel: Boolean!
    """
    Subject of a permission sync job (repository or user).
    """
    subject: PermissionsSyncJobSubject!
    """
    Priority of a permission sync job.
    """
    priority: PermissionsSyncJobPriority!
    """
    Flag showing that there are no permissions for a given repository/user.
    """
    noPerms: Boolean!
    """
    Flag showing that caches should be invalidated during permission sync job processing.
    """
    invalidateCaches: Boolean!
    """
    Number of added permissions during permission sync job processing.
    """
    permissionsAdded: Int!
    """
    Number of removed permissions during permission sync job processing.
    """
    permissionsRemoved: Int!
    """
    Number of found permissions during permission sync job processing.
    """
    permissionsFound: Int!
    """
    State of providers (code hosts) during permission sync job.
    """
    codeHostStates: [CodeHostState!]!
    """
    Show if the job has finished with a partially successful result.
    """
    partialSuccess: Boolean!
    """
    Rank of the permissions syncing job in processing queue.
    """
    placeInQueue: Int
}

"""
Information about Bitbucket Projects permission synchronization jobs.
"""
type BitbucketProjectPermissionJobs {
    """
    Number of jobs.
    """
    totalCount: Int!
    """
    Bitbucket Projects permission sync jobs.
    """
    nodes: [BitbucketProjectPermissionJob!]!
}

"""
Information about a single Projects permission synchronization job.
"""
type BitbucketProjectPermissionJob {
    """
    Internal ID of the job.
    """
    InternalJobID: Int!
    """
    State of the job (queued, processing, completed, canceled, errored, failed).
    """
    State: String!
    """
    Failure message in case of unsuccessful job execution.
    """
    FailureMessage: String
    """
    The time when the job was enqueued for processing.
    """
    QueuedAt: DateTime!
    """
    The time when the job started processing. Null, if not yet started.
    """
    StartedAt: DateTime
    """
    The time when the job finished processing. Null, if not yet finished.
    """
    FinishedAt: DateTime
    """
    Controls the time after which the job is visible for processing.
    """
    ProcessAfter: DateTime
    """
    The number of times when the job is moved back from failed to queued.
    """
    NumResets: Int!
    """
    The number of times when the job entered the errored state.
    """
    NumFailures: Int!
    """
    Bitbucket project key.
    """
    ProjectKey: String!
    """
    ID of external service which project is being synchronized.
    """
    ExternalServiceID: ID!
    """
    User permissions to be granted.
    """
    Permissions: [UserPermission!]!
    """
    Shows that current project is accessible by any user of the project.
    """
    Unrestricted: Boolean!
}

"""
Various permissions syncing statistics.
"""
type PermissionsSyncingStats {
    """
    The number of permissions sync jobs in the queue.
    """
    queueSize: Int!
    """
    The number of users with latest permissions sync job failing.
    """
    usersWithLatestJobFailing: Int!
    """
    The number of repositories with latest permissions sync job failing.
    """
    reposWithLatestJobFailing: Int!
    """
    The number of users with no permissions.
    """
    usersWithNoPermissions: Int!
    """
    The number of repositories with no permissions.
    """
    reposWithNoPermissions: Int!
    """
    The number of users with old permissions.
    """
    usersWithStalePermissions: Int!
    """
    The number of repository with old permissions.
    """
    reposWithStalePermissions: Int!
}
