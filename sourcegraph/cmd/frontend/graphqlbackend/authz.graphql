extend type Mutation {
    """
    Set the permissions of a repository (i.e., which users may view it on Sourcegraph). This
    operation overwrites the previous permissions for the repository.
    """
    setRepositoryPermissionsForUsers(
        """
        The repository whose permissions to set.
        """
        repository: ID!
        """
        A list of user identifiers and their repository permissions, which defines the set of
        users who may view the repository. All users not included in the list will not be
        permitted to view the repository on Sourcegraph.
        """
        userPermissions: [UserPermission!]!
    ): EmptyResponse!
    """
    Schedule a permissions sync for given repository. This queries the repository's code host for
    all users' permissions associated with the repository, so that the current permissions apply
    to all users' operations on that repository on Sourcegraph.
    """
    scheduleRepositoryPermissionsSync(repository: ID!): EmptyResponse!
    """
    Schedule a permissions sync for given user. This queries all code hosts for the user's current
    repository permissions and syncs them to Sourcegraph, so that the current permissions apply to
    the user's operations on Sourcegraph.
    """
    scheduleUserPermissionsSync(user: ID!): EmptyResponse!
}

extend type Query {
    """
    The repositories a user is authorized to access with the given permission.
    This isn’t defined in the User type because we store permissions for users
    that don’t yet exist (i.e. late binding). Only one of "username" or "email"
    is required to identify a user.
    """
    authorizedUserRepositories(
        """
        The username.
        """
        username: String
        """
        One of the email addresses.
        """
        email: String
        """
        Permission that the user has on the repositories.
        """
        perm: RepositoryPermission = READ
        """
        Number of repositories to return after the given cursor.
        """
        first: Int!
        """
        Opaque pagination cursor.
        """
        after: String
    ): RepositoryConnection!

    """
    Returns a list of usernames or emails that have associated pending permissions.
    The returned list can be used to query authorizedUserRepositories for pending permissions.
    """
    usersWithPendingPermissions: [String!]!
}

extend type Repository {
    """
    A list of authorized users to access this repository with the given permission.
    This API currently only returns permissions from the Sourcegraph provider, i.e.
    "permissions.userMapping" in site configuration.
    """
    authorizedUsers(
        """
        Permission that the user has on this repository.
        """
        permission: RepositoryPermission = READ
        """
        Number of users to return after the given cursor.
        """
        first: Int!
        """
        Opaque pagination cursor.
        """
        after: String
    ): UserConnection!

    """
    The permissions information of the repository for the authenticated user.
    It is null when there is no permissions data stored for the repository.
    """
    permissionsInfo: PermissionsInfo
}

extend type User {
    """
    The permissions information of the user over repositories.
    It is null when there is no permissions data stored for the user.
    """
    permissionsInfo: PermissionsInfo
}

"""
A user (identified either by username or email address) with its repository permission.
"""
input UserPermission {
    """
    Depending on the bindID option in the permissions.userMapping site configuration property,
    the elements of the list are either all usernames (bindID of "username") or all email
    addresses (bindID of "email").
    """
    bindID: String!
    """
    The highest level of repository permission.
    """
    permission: RepositoryPermission = READ
}

"""
Different repository permission levels.
"""
enum RepositoryPermission {
    READ
}

"""
Permissions information of a repository or a user.
"""
type PermissionsInfo {
    """
    The permission levels that a user has on the repository.
    """
    permissions: [RepositoryPermission!]!
    """
    The last complete synced time, the value is updated only after a user- or repo-
    centric sync of permissions. It is null when the complete sync never happened.
    """
    syncedAt: DateTime
    """
    The last updated time of permissions, the value is updated whenever there is a
    change to the database row (i.e. incremental update).
    """
    updatedAt: DateTime!
}
