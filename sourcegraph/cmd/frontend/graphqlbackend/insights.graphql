"""
An insight about code.
"""
type Insight {
    """
    The short title of the insight.
    """
    title: String!

    """
    The description of the insight.
    """
    description: String!

    """
    Data points over a time range (inclusive)
    """
    series: [InsightsSeries!]!

    """
    Unique identifier for this insight.
    """
    id: String!
}

"""
A series of data about a code insight.
"""
type InsightsSeries {
    """
    Unique ID for the series.
    """
    seriesId: String!

    """
    The label used to describe this series of data points.
    """
    label: String!

    """
    Data points over a time range (inclusive)

    The 'from', 'to', 'includeRepoRegex' and 'excludeRepoRegex' arguments have been deprecated.
    They will have no affect on the points returned and will be removed in a future version.
    """
    points(from: DateTime, to: DateTime, includeRepoRegex: String, excludeRepoRegex: String): [InsightDataPoint!]!

    """
    The status of this series of data, e.g. progress collecting it.
    """
    status: InsightSeriesStatus!
}

"""
A code insight data point.
"""
type InsightDataPoint {
    """
    The time of this data point.
    """
    dateTime: DateTime!

    """
    The value of the insight at this point in time.
    """
    value: Float!

    """
    A search query that will show the diff between this point and the previous point
    """
    diffQuery: String
}

"""
Status indicators for a specific series of insight data.
"""
type InsightSeriesStatus {
    """
    The total number of points stored for this series, at the finest level
    (e.g. per repository, or per-repository-per-language) Has no strict relation
    to the data points shown in the web UI or returned by `points()`, because those
    are aggregated and this number _can_ report some duplicates points which get
    stored but removed at query time for the web UI.

    Why its useful: an insight may look like "it is doing nothing" but in reality
    this number will be increasing by e.g. several thousands of points rapidly.
    """
    totalPoints: Int!

    """
    The total number of jobs currently pending to add new data points for this series.

    Each job may create multiple data points (e.g. a job may create one data point per
    repo, or language, etc.) This number will go up and down over time until all work
    is completed (discovering work takes almost as long as doing the work.)

    Why its useful: signals "amount of work still to be done."
    """
    pendingJobs: Int!

    """
    The total number of jobs completed for this series. Note that since pendingJobs will
    go up/down over time, you CANNOT divide these two numbers to get a percentage as it
    would be nonsense ("it says 90% complete but has been like that for a really long
    time!").

    Does not include 'failedJobs'.

    Why its useful: gives an indication of "how much work has been done?"
    """
    completedJobs: Int!

    """
    The total number of jobs that were tried multiple times and outright failed. They will
    not be retried again, and indicates the series has incomplete data.

    Use ((failedJobs / completedJobs) * 100.0) to get an approximate percentage of how
    much data the series data may be missing (e.g. ((30 / 150)*100.0) == 20% of the series
    data is incomplete (rough approximation, not precise).

    Why its useful: signals if there are problems, and how severe they are.
    """
    failedJobs: Int!

    """
    The time that the insight series completed a full iteration and queued up records for processing. This can
    effectively be used as a status that the insight is still processing if returned null.
    """
    backfillQueuedAt: DateTime

    """
    Indicates if the series is currently loading additional data
    """
    isLoadingData: Boolean

    """
    Data points that are flagged terminally incomplete for this series.
    """
    incompleteDatapoints: [IncompleteDatapointAlert!]!
}

"""
Represents a terminally incomplete data point at a specific time, and optionally for a specific repository.
"""
interface IncompleteDatapointAlert {
    """
    The data point that is incomplete.
    """
    time: DateTime!
}

"""
Represents a terminally incomplete data point at a specific time, and optionally for a specific repository.
"""
type TimeoutDatapointAlert implements IncompleteDatapointAlert {
    """
    The data point that is incomplete.
    """
    time: DateTime!
}

"""
Represents a terminally incomplete data point at a specific time. Only returns alerts that do not satisfy a specific implementation.
"""
type GenericIncompleteDatapointAlert implements IncompleteDatapointAlert {
    """
    The data point that is incomplete.
    """
    time: DateTime!

    """
    A message describing why the datapoint was marked incomplete.
    """
    reason: String!
}

extend type Query {
    """
    Return dashboards visible to the authenticated user.
    """
    insightsDashboards(first: Int, after: String, id: ID): InsightsDashboardConnection!

    """
    Return all insight views visible to the authenticated user.
    """
    insightViews(
        first: Int
        after: String
        id: ID
        """
        Allow you to exclude subset of insights by their ids.
        """
        excludeIds: [ID!]
        """
        Allow you to search insight views by their title or data series labels.
        """
        find: String
        isFrozen: Boolean
        filters: InsightViewFiltersInput
        seriesDisplayOptions: SeriesDisplayOptionsInput
    ): InsightViewConnection!

    """
    Generate an ephemeral time series for a Search based code insight, generally for the purposes of live preview.
    """
    searchInsightLivePreview(input: SearchInsightLivePreviewInput!): [SearchInsightLivePreviewSeries!]!

    """
    Generate an ephemeral set of time series for a code insight, generally for the purposes of live preview.
    """
    searchInsightPreview(input: SearchInsightPreviewInput!): [SearchInsightLivePreviewSeries!]!
}

extend type Mutation {
    """
    Create a new dashboard.
    """
    createInsightsDashboard(input: CreateInsightsDashboardInput!): InsightsDashboardPayload!

    """
    Edit an existing dashboard.
    """
    updateInsightsDashboard(id: ID!, input: UpdateInsightsDashboardInput!): InsightsDashboardPayload!

    """
    Delete a dashboard.
    """
    deleteInsightsDashboard(id: ID!): EmptyResponse!

    """
    Associate an existing insight view with this dashboard.
    """
    addInsightViewToDashboard(input: AddInsightViewToDashboardInput!): InsightsDashboardPayload!

    """
    Remove an insight view from a dashboard.
    """
    removeInsightViewFromDashboard(input: RemoveInsightViewFromDashboardInput!): InsightsDashboardPayload!
}

"""
A paginated list of dashboards.
"""
type InsightsDashboardConnection {
    """
    A list of dashboards.
    """
    nodes: [InsightsDashboard!]!

    """
    Pagination information.
    """
    pageInfo: PageInfo!
}

"""
A dashboard of insights.
"""
type InsightsDashboard implements Node {
    """
    The Dashboard ID.
    """
    id: ID!

    """
    The Dashboard Title.
    """
    title: String!

    """
    The list of associated insights to the dashboard.
    """
    views(first: Int, after: ID): InsightViewConnection

    """
    The permission grants assossiated with the dashboard.
    """
    grants: InsightsPermissionGrants!
}

"""
Input object for creating a new dashboard.
"""
input CreateInsightsDashboardInput {
    """
    Dashboard title.
    """
    title: String!
    """
    Permissions to grant to the dashboard.
    """
    grants: InsightsPermissionGrantsInput!
}

"""
Input object for updating a dashboard.
"""
input UpdateInsightsDashboardInput {
    """
    Dashboard title.
    """
    title: String
    """
    Permissions to grant to the dashboard.
    """
    grants: InsightsPermissionGrantsInput
}

"""
Permissions object. Note: only organizations the user has access to will be included.
"""
type InsightsPermissionGrants {
    """
    Specific users that have permission.
    """
    users: [ID!]!
    """
    Organizations that have permission.
    """
    organizations: [ID!]!
    """
    True if the permission is set to global.
    """
    global: Boolean!
}

"""
Input object for permissions to grant.
"""
input InsightsPermissionGrantsInput {
    """
    Specific users to grant permissions to.
    """
    users: [ID!]
    """
    Organizations to grant permissions to.
    """
    organizations: [ID!]
    """
    Set global to true to grant global permission.
    """
    global: Boolean
}

"""
A dashboard of insight views.
"""
type InsightViewConnection {
    """
    A list of insights.
    """
    nodes: [InsightView]!

    """
    Pagination information.
    """
    pageInfo: PageInfo!

    """
    The total number of insights in the connection.
    """
    totalCount: Int
}

"""
Response wrapper object for insight dashboard mutations.
"""
type InsightsDashboardPayload {
    """
    The result dashboard after mutation.
    """
    dashboard: InsightsDashboard!
}

"""
Input object for adding insight view to dashboard.
"""
input AddInsightViewToDashboardInput {
    """
    ID of the insight view to attach to the dashboard
    """
    insightViewId: ID!

    """
    ID of the dashboard.
    """
    dashboardId: ID!
}

"""
Input object for adding insight view to dashboard.
"""
input RemoveInsightViewFromDashboardInput {
    """
    ID of the insight view to remove from the dashboard
    """
    insightViewId: ID!

    """
    ID of the dashboard.
    """
    dashboardId: ID!
}

"""
Metadata about a specific data series for an insight.
"""
type InsightSeriesMetadata {
    """
    Unique ID for the series.
    """
    seriesId: String!

    """
    Sourcegraph query string used to generate the series.
    """
    query: String!

    """
    Current status of the series.
    """
    enabled: Boolean!
}

extend type Mutation {
    """
    Update an insight series. Restricted to admins only.
    """
    updateInsightSeries(input: UpdateInsightSeriesInput!): InsightSeriesMetadataPayload
}

"""
Wrapper payload object for insight series metadata.
"""
type InsightSeriesMetadataPayload {
    """
    The series metadata.
    """
    series: InsightSeriesMetadata!
}

"""
Input object for update insight series mutation.
"""
input UpdateInsightSeriesInput {
    """
    Unique ID for the series.
    """
    seriesId: String!

    """
    The desired activity state (enabled or disabled) for the series.
    """
    enabled: Boolean
}

extend type Query {
    """
    Retrieve information about queued insights series and their breakout by status. Restricted to admins only.
    """
    insightSeriesQueryStatus: [InsightSeriesQueryStatus!]!

    """
    Retrieve information about an insight view and its status. Restricted to admins only.
    """
    insightViewDebug(id: ID!): InsightViewDebug
}

"""
Debugging information related to an InsightView
"""
type InsightViewDebug {
    """
    A JSON dump of debug information for series on the insight view
    """
    raw: [String!]!
}

"""
Information about queue status for insight series queries.
"""
type InsightSeriesQueryStatus {
    """
    Unique ID for the series.
    """
    seriesId: String!

    """
    Sourcegraph query string used to generate the series. This is the base query string that was input by the user,
    and does not include each repository specific query that would be generated to backfill an entire series.
    """
    query: String!

    """
    The current activity status for this series.
    """
    enabled: Boolean!

    """
    The number of queries belonging to the series with errored status. Errored is a transient state representing a retryable error that has not
    yet exceeded the max retry count. This count only represents the queries that have yet to be pruned by the background maintenance workers.
    """
    errored: Int!

    """
    The number of queries belonging to the series that are successfully completed.
    This count only represents the queries that have yet to be pruned by the background maintenance workers.
    """
    completed: Int!

    """
    The number of queries belonging to the series that are currently processing.
    This count only represents the queries that have yet to be pruned by the background maintenance workers.
    """
    processing: Int!

    """
    The number of queries belonging to the series that are terminally failed. These have either been marked as non-retryable or exceeded
    the max retry limit. This count only represents the queries that have yet to be pruned by the background maintenance workers.
    """
    failed: Int!

    """
    The number of queries belonging to the series that are queued for processing.
    This count only represents the queries that have yet to be pruned by the background maintenance workers.
    """
    queued: Int!
}

"""
A custom time scope for an insight data series.
"""
input TimeScopeInput {
    """
    Sets a time scope using a step interval (intervals of time).
    """
    stepInterval: TimeIntervalStepInput
}

"""
A time scope defined using a time interval (ex. 5 days)
"""
input TimeIntervalStepInput {
    """
    The time unit for the interval.
    """
    unit: TimeIntervalStepUnit!

    """
    The value for the interval.
    """
    value: Int!
}

"""
Time interval units.
"""
enum TimeIntervalStepUnit {
    HOUR
    DAY
    WEEK
    MONTH
    YEAR
}

"""
A custom repository scope for an insight data series.
"""
input RepositoryScopeInput {
    """
    The list of repositories included in this scope.
    """
    repositories: [String!]!

    """
    A search query to select repositories for this scope.
    """
    repositoryCriteria: String
}

"""
Options for a line chart
"""
input LineChartOptionsInput {
    """
    The chart title.
    """
    title: String
}

"""
Input for a line chart search insight.
"""
input LineChartSearchInsightInput {
    """
    The list of data series to create (or add) to this insight.
    """
    dataSeries: [LineChartSearchInsightDataSeriesInput!]!

    """
    The scope of repositories for the insight. If provided here it will apply to all series unless overwritten.
    """
    repositoryScope: RepositoryScopeInput

    """
    The scope of time for the insight view. If provided here it will apply to all series unless overwritten.
    """
    timeScope: TimeScopeInput

    """
    The options for this line chart.
    """
    options: LineChartOptionsInput!

    """
    The dashboard IDs to associate this insight with once created.
    """
    dashboards: [ID!]

    """
    The default values for filters and aggregates for this line chart.
    """
    viewControls: InsightViewControlsInput
}

"""
Input for updating a line chart search insight.
"""
input UpdateLineChartSearchInsightInput {
    """
    The complete list of data series on this line chart. Note: excluding a data series will remove it.
    """
    dataSeries: [LineChartSearchInsightDataSeriesInput!]!

    """
    The scope of repositories for the insight, this scope will apply to all dataSeries unless another scope is provided by a series.
    """
    repositoryScope: RepositoryScopeInput

    """
    The time scope for this insight, this scope will apply to all dataSeries unless another scope is provided by a series.
    """
    timeScope: TimeScopeInput

    """
    The presentation options for this line chart.
    """
    presentationOptions: LineChartOptionsInput!

    """
    The default values for filters and aggregates for this line chart.
    """
    viewControls: InsightViewControlsInput!
}

"""
Input for the default values for filters and aggregates for an insight.
"""
input InsightViewControlsInput {
    """
    Input for the default filters for an insight.
    """
    filters: InsightViewFiltersInput!
    """
    Input for series' sort order.
    """
    seriesDisplayOptions: SeriesDisplayOptionsInput!
}

"""
Options that affect which series to display for an insight.
"""
type SeriesDisplayOptions {
    """
    Sort options for the series.
    """
    sortOptions: SeriesSortOptions!
    """
    Max number of series to return.
    """
    limit: Int
    """
    Max number of samples to return for all the series on the view.
    """
    numSamples: Int
}

"""
Input type for series display options.
"""
input SeriesDisplayOptionsInput {
    """
    Sort options for the series.
    """
    sortOptions: SeriesSortOptionsInput
    """
    Max number of series to return.
    """
    limit: Int
    """
    Max number of samples to return.
    """
    numSamples: Int
}

"""
Sort mode for series.
"""
enum SeriesSortMode {
    RESULT_COUNT
    LEXICOGRAPHICAL
    DATE_ADDED
}

"""
Sort direction for series.
"""
enum SeriesSortDirection {
    ASC
    DESC
}

"""
Series sort options.
"""
type SeriesSortOptions {
    """
    Sort mode for series.
    """
    mode: SeriesSortMode
    """
    Sort direction for series.
    """
    direction: SeriesSortDirection
}

"""
Input type for series sort options.
"""
input SeriesSortOptionsInput {
    """
    Sort mode for series.
    """
    mode: SeriesSortMode!
    """
    Sort direction for series.
    """
    direction: SeriesSortDirection!
}

"""
Input for the default values by which the insight is filtered.
"""
input InsightViewFiltersInput {
    """
    A regex string for which to include repositories in a filter.
    """
    includeRepoRegex: String
    """
    A regex string for which to exclude repositories in a filter.
    """
    excludeRepoRegex: String

    """
    A list of query based search contexts to include in the filters for the view.
    """
    searchContexts: [String!]
}

"""
Input for a line chart search insight data series.
"""
input LineChartSearchInsightDataSeriesInput {
    """
    Unique ID for the series. Omit this field if it's a new series.
    """
    seriesId: String
    """
    The query string.
    """
    query: String!
    """
    Options for this line chart data series.
    """
    options: LineChartDataSeriesOptionsInput!
    """
    The scope of repositories. The repository scope can be provided at the LineChartSearchInsightInput level.
    If scope is provided here will take priority of any other scope provide at a higher level in the input.
    """
    repositoryScope: RepositoryScopeInput

    """
    The scope of time. This time scope can also be provided at the LineChartSearchInsightInput level.
    If the scope is provided here it will take priority over any other scope provided at a higher level in the input.
    """
    timeScope: TimeScopeInput

    """
    Whether or not to generate the timeseries results from the query capture groups. Defaults to false if not provided.
    """
    generatedFromCaptureGroups: Boolean

    """
    The field to group results by. (For compute powered insights only.) This field is experimental and should be considered unstable in the API.
    """
    groupBy: GroupByField
}

"""
Fields that can be grouped on for compute powered insights.
"""
enum GroupByField {
    REPO
    LANG
    PATH
    AUTHOR
    DATE
}

"""
Options for a line chart data series
"""
input LineChartDataSeriesOptionsInput {
    """
    The label for the data series.
    """
    label: String
    """
    The line color for the data series.
    """
    lineColor: String
}

"""
Input for a pie chart search insight
"""
input PieChartSearchInsightInput {
    """
    The query string.
    """
    query: String!

    """
    The scope of repositories.
    """
    repositoryScope: RepositoryScopeInput!

    """
    Options for this pie chart.
    """
    presentationOptions: PieChartOptionsInput!

    """
    The dashboard IDs to associate this insight with once created.
    """
    dashboards: [ID!]
}

"""
Input for updating a pie chart search insight
"""
input UpdatePieChartSearchInsightInput {
    """
    The query string.
    """
    query: String!

    """
    The scope of repositories.
    """
    repositoryScope: RepositoryScopeInput!

    """
    Options for this pie chart.
    """
    presentationOptions: PieChartOptionsInput!
}

"""
Options for a pie chart
"""
input PieChartOptionsInput {
    """
    The title for the pie chart.
    """
    title: String!

    """
    The threshold for which groups fall into the "other category". Only categories with a percentage greater than
    this value will be separately rendered.
    """
    otherThreshold: Float!
}

"""
Response wrapper object for insight view mutations.
"""
type InsightViewPayload {
    """
    The resulting view.
    """
    view: InsightView!
}

extend type Mutation {
    """
    Create a line chart backed by search insights.
    """
    createLineChartSearchInsight(input: LineChartSearchInsightInput!): InsightViewPayload!

    """
    Create a pie chart backed by search insights.
    """
    createPieChartSearchInsight(input: PieChartSearchInsightInput!): InsightViewPayload!

    """
    Update a line chart backed by search insights.
    """
    updateLineChartSearchInsight(id: ID!, input: UpdateLineChartSearchInsightInput!): InsightViewPayload!

    """
    Update a pie chart backed by search insights.
    """
    updatePieChartSearchInsight(id: ID!, input: UpdatePieChartSearchInsightInput!): InsightViewPayload!

    """
    Delete an insight view given the graphql ID.
    """
    deleteInsightView(id: ID!): EmptyResponse!

    """
    Create a new insight view from an existing view.
    """
    saveInsightAsNewView(input: SaveInsightAsNewViewInput!): InsightViewPayload!
}

"""
An Insight View is a lens to view insight data series. In most cases this corresponds to a visualization of an insight, containing multiple series.
"""
type InsightView implements Node {
    """
    The View ID.
    """
    id: ID!

    """
    The default filters saved on the insight. This will differ from the applied filters if they are overwritten but not saved.
    """
    defaultFilters: InsightViewFilters!

    """
    The filters currently applied to the insight and the data.
    """
    appliedFilters: InsightViewFilters!

    """
    The time series data for this insight.
    """
    dataSeries: [InsightsSeries!]!

    """
    Presentation options for the insight.
    """
    presentation: InsightPresentation!

    """
    Information on how each data series was generated
    """
    dataSeriesDefinitions: [InsightDataSeriesDefinition!]!

    """
    The total number of dashboards on which this insight is referenced. The count is global and disregards permissions.
    """
    dashboardReferenceCount: Int!

    """
    Represents if this insight is in a frozen state or not. A frozen state is relevant when a license is downgraded and the number of insights exceed the free plan limits.
    """
    isFrozen: Boolean!

    """
    The default series display options saved on the insight. This will differ from the applied options if they are overwritten but not saved.
    """
    defaultSeriesDisplayOptions: SeriesDisplayOptions!

    """
    The series display options currently applied to the insight.
    """
    appliedSeriesDisplayOptions: SeriesDisplayOptions!

    """
    Dashboards this insight has been added to that the current user has permission to view
    """
    dashboards(first: Int, after: String, id: ID): InsightsDashboardConnection

    """
    The total number of series on this insight.
    """
    seriesCount: Int

    """
    The Repositories the dataSeries on this insight will operate over.
    """
    repositoryDefinition: InsightRepositoryDefinition!

    """
    The scope of time for which the insight data is generated.
    """
    timeScope: InsightTimeScope!
}

"""
Defines how the data series is generated.
"""
union InsightDataSeriesDefinition = SearchInsightDataSeriesDefinition

"""
Defines presentation options for the insight.
"""
union InsightPresentation = LineChartInsightViewPresentation | PieChartInsightViewPresentation

"""
Defines a scope of time for which the insight data is generated.
"""
union InsightTimeScope = InsightIntervalTimeScope

"""
A custom repository scope for an insight. A scope with all empty fields implies a global scope.
"""
type InsightRepositoryScope {
    """
    The list of repositories in the scope.
    """
    repositories: [String!]!
}
"""
Defines a time scope using an interval of time
"""
type InsightIntervalTimeScope {
    """
    The unit of time.
    """
    unit: TimeIntervalStepUnit!
    """
    The value of time.
    """
    value: Int!
}

"""
Defines an insight data series that is constructed from a Sourcegraph search query.
"""
type SearchInsightDataSeriesDefinition {
    """
    Unique ID for the series.
    """
    seriesId: String!
    """
    The query string.
    """
    query: String!

    """
    A scope of repositories defined for this series. Series with repository scopes defined by a search query are not identifiable via this field
    """
    repositoryScope: InsightRepositoryScope! @deprecated(reason: "use repositoryDefinition instead")

    """
    A definition of Repositories this series will operate over.
    """
    repositoryDefinition: InsightRepositoryDefinition!

    """
    The scope of time for which the insight data is generated.
    """
    timeScope: InsightTimeScope!

    """
    Whether or not the the time series are derived from the captured groups of the search results.
    """
    generatedFromCaptureGroups: Boolean!

    """
    Whether or not the series has been pre-calculated, or still needs to be resolved. This field is largely only used
    for the code insights webapp, and should be considered unstable (planned to be deprecated in a future release).
    """
    isCalculated: Boolean!

    """
    The field to group results by. (For compute powered insights only.) This field is experimental and should be considered unstable in the API.
    """
    groupBy: GroupByField
}

"""
Describes a scope of repositories, this type is used for both the search based scopes and all repositories
"""
type RepositorySearchScope {
    """
    The user provided search used to generate the list of repositories the insight runs over.
    """
    search: String!
    """
    Indicates if this search scope represents all repositories
    """
    allRepositories: Boolean!
}

"""
Defines how the scope of repositories was generated
"""
union InsightRepositoryDefinition = RepositorySearchScope | InsightRepositoryScope

"""
View presentation for a line chart insight
"""
type LineChartInsightViewPresentation {
    """
    The title for the line chart.
    """
    title: String!

    """
    The presentation options for the line chart.
    """
    seriesPresentation: [LineChartDataSeriesPresentation!]!
}

"""
View presentation for a single insight line chart data series
"""
type LineChartDataSeriesPresentation {
    """
    Unique ID for the series.
    """
    seriesId: String!
    """
    The label for the series.
    """
    label: String!
    """
    The color for the series.
    """
    color: String!
}

"""
View presentation for an insight pie chart.
"""
type PieChartInsightViewPresentation {
    """
    The title for the pie chart.
    """
    title: String!
    """
    The threshold for which groups fall into the "other category". Only categories with a percentage greater than
    this value will be separately rendered.
    """
    otherThreshold: Float!
}

"""
The fields and values for which the insight is filtered.
"""
type InsightViewFilters {
    """
    A regex string for which to include repositories in a filter.
    """
    includeRepoRegex: String

    """
    A regex string for which to exclude repositories from a filter.
    """
    excludeRepoRegex: String

    """
    The names of query based search contexts that are used as a filter.
    """
    searchContexts: [String!]
}

"""
Required input to generate a time series for a search insight using live preview.
"""
input SearchInsightLivePreviewInput {
    """
    The query string.
    """
    query: String!

    """
    The desired label for the series. Will be overwritten when series are dynamically generated.
    """
    label: String!

    """
    The scope of repositories.
    """
    repositoryScope: RepositoryScopeInput!
    """
    The scope of time.
    """
    timeScope: TimeScopeInput!

    """
    Whether or not to generate the timeseries results from the query capture groups.
    """
    generatedFromCaptureGroups: Boolean!

    """
    Use this field to specify a compute insight. Note: this is experimental and should be considered unstable
    """
    groupBy: GroupByField
}

"""
Required input to generate a live preview for an insight.
"""
input SearchInsightPreviewInput {
    """
    The scope of repositories.
    """
    repositoryScope: RepositoryScopeInput!
    """
    The scope of time.
    """
    timeScope: TimeScopeInput!

    """
    The series to generate previews for
    """
    series: [SearchSeriesPreviewInput!]!
}

"""
Required input to generate a live preview for a series.
"""
input SearchSeriesPreviewInput {
    """
    The query string.
    """
    query: String!

    """
    The desired label for the series. Will be overwritten when series are dynamically generated.
    """
    label: String!

    """
    Whether or not to generate the timeseries results from the query capture groups.
    """
    generatedFromCaptureGroups: Boolean!

    """
    Use this field to specify a compute insight. Note: this is experimental and should be considered unstable
    """
    groupBy: GroupByField
}

"""
Input object for a live preview search based code insight.
"""
type SearchInsightLivePreviewSeries {
    """
    The data points for the time series.
    """
    points: [InsightDataPoint!]!

    """
    The label for the data series.
    """
    label: String!
}

"""
Input for saving a new view on an insight.
"""
input SaveInsightAsNewViewInput {
    """
    The insight view ID we are creating a new view from.
    """
    insightViewId: ID!

    """
    The options for this line chart.
    """
    options: LineChartOptionsInput!

    """
    The dashboard ID to associate this insight with once created.
    """
    dashboard: ID

    """
    The default values for filters and aggregates for this line chart.
    """
    viewControls: InsightViewControlsInput
}

extend type Query {
    """
    Validates a query for determining insight scope and returns the number of repositories it matches for the caller.
    """
    validateScopedInsightQuery(query: String!): ScopedInsightQueryPayload!
    """
    Returns the number of repositories matched given a valid query.
    """
    previewRepositoriesFromQuery(query: String!): RepositoryPreviewPayload!
}

"""
Information about scope query validity
"""
type ScopedInsightQueryPayload {
    """
    The original query.
    """
    query: String!
    """
    Whether the query is valid.
    """
    isValid: Boolean!
    """
    The reason why the query is invalid.
    """
    invalidReason: String
}

"""
Information about the number of repositories matched from a query
"""
type RepositoryPreviewPayload {
    """
    The query used to find number of repository matches.
    """
    query: String!
    """
    The number of repositories matched.
    """
    numberOfRepositories: Int
}

extend type Query {
    """
    Fetch information related to the queue of backfilling insights.
    """
    insightAdminBackfillQueue(
        """
        Returns the first n queue items from the list.
        """
        first: Int
        """
        Returns the last n queue items from the list.
        """
        last: Int
        """
        An opaque cursor that is used for pagination.
        """
        after: String
        """
        An opaque cursor that is used for pagination.
        """
        before: String
        """
        How to order the list.
        """
        orderBy: BackfillQueueOrderBy = STATE
        """
        Sort direction.
        """
        descending: Boolean = false
        """
        List of states to filter list by.
        """
        states: [InsightQueueItemState!]
        """
        Text to filter the list, checking the Insight Title and Series Label
        """
        textSearch: String
    ): InsightBackfillQueueItemConnection!
}

"""
BackfillQueueOrderBy enumerates the ways a backfill queue list can be ordered.
"""
enum BackfillQueueOrderBy {
    STATE
    QUEUE_POSITION
}

"""
Returns information regarding the insights backfill queue to admin users.
"""
type InsightBackfillQueueItemConnection implements Connection {
    """
    A list of insight backfill queue items.
    """
    nodes: [InsightBackfillQueueItem!]!

    """
    The total number of insight backfill queue items in the connection.
    """
    totalCount: Int!

    """
    Pagination information.
    """
    pageInfo: ConnectionPageInfo!
}

"""
Information about an item in the insights backfill queue
"""
type InsightBackfillQueueItem {
    """
    The ID of the Backfill item
    """
    id: ID!
    """
    The title of the insight view
    """
    insightViewTitle: String!
    """
    The user that originally created the insight view
    """
    creator: User
    """
    The name of the series on the associated insight view
    """
    seriesLabel: String!
    """
    The search query for the series
    """
    seriesSearchQuery: String!
    """
    Information on the current backfill status
    """
    backfillQueueStatus: BackfillStatus!
}

"""
The status of an insights backfill
"""
type BackfillStatus {
    """
    The current backfill queue state
    """
    state: InsightQueueItemState!
    """
    If the item is queued the position in the queue of
    """
    queuePosition: Int
    """
    A list of errors that have occurred during backfilling
    """
    errors: [String!]
    """
    The estimated cost of the backfill process
    """
    cost: Int
    """
    The percent complete of the backfill
    """
    percentComplete: Int
    """
    The date/time when the backfill was created
    """
    createdAt: DateTime
    """
    The date/time when the backfill started processing
    """
    startedAt: DateTime
    """
    The date/time when the backfill completed processing
    """
    completedAt: DateTime
    """
    The actual runtime duration spent processing the backfill
    """
    runtime: String
}

"""
Possible queue states
"""
enum InsightQueueItemState {
    NEW
    QUEUED
    COMPLETED
    PROCESSING
    FAILED
    UNKNOWN
}

extend type Mutation {
    """
    Retry the backfill for a failed insight series given the graphql ID of the InsightBackfillQueueItem. Can only be used by a site admin.
    """
    retryInsightSeriesBackfill(id: ID!): InsightBackfillQueueItem!

    """
    Updates the priority of an insight series backfill making it the highest priority given the graphql ID of the InsightBackfillQueueItem.
    """
    moveInsightSeriesBackfillToFrontOfQueue(id: ID!): InsightBackfillQueueItem!

    """
    Updates the priority of an insight series backfill making it the lowest priority given the graphql ID of the InsightBackfillQueueItem
    """
    moveInsightSeriesBackfillToBackOfQueue(id: ID!): InsightBackfillQueueItem!
}
