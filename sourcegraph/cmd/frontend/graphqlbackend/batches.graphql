"""
The counts of changesets in certain states at a specific point in time.
"""
type ChangesetCounts {
    """
    The point in time these counts were recorded.
    """
    date: DateTime!
    """
    The total number of changesets.
    """
    total: Int!
    """
    The number of merged changesets.
    """
    merged: Int!
    """
    The number of closed changesets.
    """
    closed: Int!
    """
    The number of draft changesets (independent of review state).
    """
    draft: Int!
    """
    The number of open changesets (independent of review state).
    """
    open: Int!
    """
    The number of changesets that are both open and approved.
    """
    openApproved: Int!
    """
    The number of changesets that are both open and have requested changes.
    """
    openChangesRequested: Int!
    """
    The number of changesets that are both open and are pending review.
    """
    openPending: Int!
}

"""
The publication state of a changeset on Sourcegraph
"""
enum ChangesetPublicationState {
    """
    The changeset has not yet been created on the code host.
    """
    UNPUBLISHED
    """
    The changeset has been created on the code host.
    """
    PUBLISHED
}

"""
The reconciler state of a changeset on Sourcegraph
"""
enum ChangesetReconcilerState {
    """
    The changeset is scheduled, and will be enqueued when its turn comes in Sourcegraph's rollout window.
    """
    SCHEDULED
    """
    The changeset is enqueued for the reconciler to process it.
    """
    QUEUED

    """
    The changeset reconciler is currently computing the delta between the
    If a delta exists, the reconciler tries to update the state of the
    changeset on the code host and on Sourcegraph to the desired state.
    """
    PROCESSING

    """
    The changeset reconciler ran into a problem while processing the
    changeset and will retry it for a number of retries.
    """
    ERRORED
    """
    The changeset reconciler ran into a problem while processing the
    changeset that can't be fixed by retrying.
    """
    FAILED

    """
    The changeset is not enqueued for processing.
    """
    COMPLETED
}

"""
The state of a changeset on the code host on which it's hosted.
"""
enum ChangesetExternalState {
    DRAFT
    OPEN
    CLOSED
    MERGED
    READONLY
    DELETED
}

"""
The review state of a changeset.
"""
enum ChangesetReviewState {
    APPROVED
    CHANGES_REQUESTED
    PENDING
    COMMENTED
    DISMISSED
}

"""
The state of checks (e.g., for continuous integration) on a changeset.
"""
enum ChangesetCheckState {
    PENDING
    PASSED
    FAILED
}

"""
A label attached to a changeset on a code host.
"""
type ChangesetLabel {
    """
    The label's text.
    """
    text: String!
    """
    The label's color, as a hex color code without the . For example: "93ba13".
    """
    color: String!
    """
    An optional description of the label.
    """
    description: String
}

"""
The visual state a changeset is currently in.
"""
enum ChangesetState {
    """
    The changeset has not been marked as to be published.
    """
    UNPUBLISHED
    """
    The changeset reconciler ran into a problem while processing the
    changeset that can't be fixed by retrying.
    """
    FAILED
    """
    The changeset reconciler ran into a problem while processing the
    changeset and will retry it for a number of retries.
    """
    RETRYING
    """
    The changeset is scheduled, and will be enqueued when its turn comes in Sourcegraph's rollout window.
    """
    SCHEDULED
    """
    The changeset reconciler is currently computing the delta between the
    If a delta exists, the reconciler tries to update the state of the
    changeset on the code host and on Sourcegraph to the desired state.
    """
    PROCESSING
    """
    The changeset is published, not being reconciled and open on the code host.
    """
    OPEN
    """
    The changeset is published, not being reconciled and in draft state on the code host.
    """
    DRAFT
    """
    The changeset is published, not being reconciled and closed on the code host.
    """
    CLOSED
    """
    The changeset is published, not being reconciled and merged on the code host.
    """
    MERGED
    """
    The changeset is published, and is now read-only, most likely due to the
    repository being archived.
    """
    READONLY
    """
    The changeset is published, not being reconciled and has been deleted on the code host.
    """
    DELETED
}

"""
A changeset on a codehost.
"""
interface Changeset {
    """
    The unique ID for the changeset.
    """
    id: ID!

    """
    The batch changes that contain this changeset.
    """
    batchChanges(
        """
        Returns the first n batch changes from the list.
        """
        first: Int = 50
        """
        Opaque pagination cursor.
        """
        after: String
        """
        Only return batch changes in this state. If `states` is also specified, it will take precedence over `state`.
        """
        state: BatchChangeState
        """
        Only return batch changes in any of these states. If `state` is also specified, `states` will take precedence over it.
        """
        states: [BatchChangeState!]
        """
        Only include batch changes that the viewer can administer.
        """
        viewerCanAdminister: Boolean
    ): BatchChangeConnection!

    """
    The state of the changeset.
    """
    state: ChangesetState!

    """
    The date and time when the changeset was created.
    """
    createdAt: DateTime!

    """
    The date and time when the changeset was updated.
    """
    updatedAt: DateTime!

    """
    The date and time when the next changeset sync is scheduled, or null if none is scheduled.
    """
    nextSyncAt: DateTime
}

"""
A changeset on a code host that the user does not have access to.
"""
type HiddenExternalChangeset implements Node & Changeset {
    """
    The unique ID for the changeset.
    """
    id: ID!

    """
    The batch changes that contain this changeset.
    """
    batchChanges(
        """
        Returns the first n batch changes from the list.
        """
        first: Int = 50
        """
        Opaque pagination cursor.
        """
        after: String
        """
        Only return batch changes in this state. If `states` is also specified, it will take precedence over `state`.
        """
        state: BatchChangeState
        """
        Only return batch changes in any of these states. If `state` is also specified, `states` will take precedence over it.
        """
        states: [BatchChangeState!]
        """
        Only include batch changes that the viewer can administer.
        """
        viewerCanAdminister: Boolean
    ): BatchChangeConnection!

    """
    The state of the changeset.
    """
    state: ChangesetState!

    """
    The date and time when the changeset was created.
    """
    createdAt: DateTime!

    """
    The date and time when the changeset was updated.
    """
    updatedAt: DateTime!

    """
    The date and time when the next changeset sync is scheduled, or null if none is scheduled.
    """
    nextSyncAt: DateTime
}

"""
A changeset on a code host (e.g., a pull request on GitHub).
"""
type ExternalChangeset implements Node & Changeset {
    """
    The unique ID for the changeset.
    """
    id: ID!

    """
    The external ID that uniquely identifies this ExternalChangeset on the
    code host. For example, on GitHub this is the pull request number. This is only set once the changeset is published on the code host.
    """
    externalID: String

    """
    The repository changed by this changeset.
    """
    repository: Repository!

    """
    The batch changes that contain this changeset.
    """
    batchChanges(
        """
        Returns the first n batch changes from the list.
        """
        first: Int = 50
        """
        Opaque pagination cursor.
        """
        after: String
        """
        Only return batch changes in this state. If `states` is also specified, it will take precedence over `state`.
        """
        state: BatchChangeState
        """
        Only return batch changes in any of these states. If `state` is also specified, `states` will take precedence over it.
        """
        states: [BatchChangeState!]
        """
        Only include batch changes that the viewer can administer.
        """
        viewerCanAdminister: Boolean
    ): BatchChangeConnection!

    """
    The batch change that "owns" this changeset: If this is null, it is imported/tracked by a batch change.
    """
    ownedByBatchChange: ID

    """
    The events belonging to this changeset.
    """
    events(first: Int = 50, after: String): ChangesetEventConnection!

    """
    The date and time when the changeset was created.
    """
    createdAt: DateTime!

    """
    The date and time when the changeset was updated.
    """
    updatedAt: DateTime!

    """
    The date and time when the next changeset sync is scheduled, or null if none is scheduled or when the initial sync hasn't happened.
    """
    nextSyncAt: DateTime

    """
    The time the changeset is expected to be enqueued at. This is an estimate, and may change depending on other code host and Batch Changes activity.

    Null if the changeset is not currently scheduled.
    """
    scheduleEstimateAt: DateTime

    """
    The title of the changeset, or null if the data hasn't been synced from the code host yet.
    """
    title: String

    """
    The body of the changeset, or null if the data hasn't been synced from the code host yet.
    """
    body: String

    """
    The author of the changeset, or null if the data is unavailable or hasn't been synced
    from the code host yet.

    Note that author is not fully supported by some code host APIs:
    * GitHub - only author.name
    * GitLab - only author.name
    * Bitbucket Server - author is not always available
    * Bitbucket Cloud - author is never available
    * Azure DevOps - author is always available
    """
    author: Person

    """
    The state of the changeset.
    """
    state: ChangesetState!

    """
    The labels attached to the changeset on the code host.
    """
    labels: [ChangesetLabel!]!

    """
    The external URL of the changeset on the code host. Not set when changeset state is UNPUBLISHED, externalState is DELETED, or the changeset's data hasn't been synced yet.
    """
    externalURL: ExternalLink

    """
    If the changeset was opened from a fork, this is the namespace of the fork
    (which will generally correspond to a user or organisation name on the code
    host).
    """
    forkNamespace: String
    """
    If the changeset was opened from a fork, this is the name of the fork repository.
    """
    forkName: String

    """
    The review state of this changeset. This is only set once the changeset is published on the code host.

    Note: The COMMENTED and DISMISSED review states are not yet implemented.
    """
    reviewState: ChangesetReviewState

    """
    The diff of this changeset, or null if the changeset is closed (without merging) or is already merged.
    """
    diff: RepositoryComparisonInterface

    """
    The diffstat of this changeset, or null if the changeset is closed
    (without merging) or is already merged. This data is also available
    indirectly through the diff field above, but if only the diffStat is
    required, this field is cheaper to access.
    """
    diffStat: DiffStat

    """
    The state of the checks (e.g., for continuous integration) on this changeset, or null if no
    checks have been configured.
    """
    checkState: ChangesetCheckState

    """
    An error that has occurred when publishing or updating the changeset. This is only set when the changeset state is ERRORED and the viewer can administer this changeset.
    """
    error: String

    """
    An error that has occured during the last sync of the changeset. Null, if was successful.
    """
    syncerError: String

    """
    The current changeset spec for this changeset. Use this to get access to the
    workspace execution that generated this changeset.

    Null if the changeset was only imported.
    """
    currentSpec: VisibleChangesetSpec
}

"""
Used in the batch change page for the overview component.
"""
type ChangesetsStats {
    """
    The count of unpublished changesets.
    """
    unpublished: Int!
    """
    The count of draft changesets.
    """
    draft: Int!
    """
    The count of open changesets.
    """
    open: Int!
    """
    The count of merged changesets.
    """
    merged: Int!
    """
    The count of closed changesets.
    """
    closed: Int!
    """
    The count of deleted changesets.
    """
    deleted: Int!
    """
    The count of changesets in retrying state.
    """
    retrying: Int!
    """
    The count of changesets in failed state.
    """
    failed: Int!
    """
    The count of changesets in the scheduled state.
    """
    scheduled: Int!
    """
    The count of changesets that are currently processing or enqueued to be.
    """
    processing: Int!
    """
    The count of archived changesets.
    """
    archived: Int!
    """
    The count of all changesets.
    """
    total: Int!
    """
    If true, then all changesets are either merged or closed. This indicates that the batch change is completed.
    """
    isCompleted: Boolean!
    """
    The count of changesets that are complete (i.e in a merged or closed state) and not archived or deleted.
    """
    percentComplete: Int!
}

"""
Stats on all the changesets that have been applied to this repository by batch changes.
"""
type RepoChangesetsStats {
    """
    The count of unpublished changesets.
    """
    unpublished: Int!
    """
    The count of draft changesets.
    """
    draft: Int!
    """
    The count of open changesets.
    """
    open: Int!
    """
    The count of merged changesets.
    """
    merged: Int!
    """
    The count of closed changesets.
    """
    closed: Int!
    """
    The count of all changesets.
    """
    total: Int!
}

"""
Stats on all the changesets across the instance.
"""
type GlobalChangesetsStats {
    """
    The count of unpublished changesets.
    """
    unpublished: Int!
    """
    The count of draft changesets.
    """
    draft: Int!
    """
    The count of open changesets.
    """
    open: Int!
    """
    The count of merged changesets.
    """
    merged: Int!
    """
    The count of closed changesets.
    """
    closed: Int!
    """
    The count of all changesets.
    """
    total: Int!
}

"""
A list of changesets.
"""
type ChangesetConnection {
    """
    A list of changesets.
    """
    nodes: [Changeset!]!

    """
    The total number of changesets in the connection.
    """
    totalCount: Int!

    """
    Pagination information.
    """
    pageInfo: PageInfo!
}

"""
A changeset event in a code host (e.g., a comment on a pull request on GitHub).
"""
type ChangesetEvent implements Node {
    """
    The unique ID for the changeset event.
    """
    id: ID!

    """
    The changeset this event belongs to.
    """
    changeset: ExternalChangeset!

    """
    The date and time when the changeset was created.
    """
    createdAt: DateTime!
}

"""
A list of changeset events.
"""
type ChangesetEventConnection {
    """
    A list of changeset events.
    """
    nodes: [ChangesetEvent!]!

    """
    The total number of changeset events in the connection.
    """
    totalCount: Int!

    """
    Pagination information.
    """
    pageInfo: PageInfo!
}

"""
This enum declares all operations supported by the reconciler.
"""
enum ChangesetSpecOperation {
    """
    Push a new commit to the code host.
    """
    PUSH
    """
    Update the existing changeset on the codehost. This is purely the changeset resource on the code host,
    not the git commit. For updates to the commit, see 'PUSH'.
    """
    UPDATE
    """
    Move the existing changeset out of being a draft.
    """
    UNDRAFT
    """
    Publish a changeset to the codehost.
    """
    PUBLISH
    """
    Publish a changeset to the codehost as a draft changeset. (Only on supported code hosts).
    """
    PUBLISH_DRAFT
    """
    Sync the changeset with the current state on the codehost.
    """
    SYNC
    """
    Import an existing changeset from the code host with the ExternalID from the spec.
    """
    IMPORT
    """
    Close the changeset on the codehost.
    """
    CLOSE
    """
    Reopen the changeset on the codehost.
    """
    REOPEN
    """
    Internal operation to get around slow code host updates.
    """
    SLEEP
    """
    The changeset is removed from some of the associated batch changes.
    """
    DETACH
    """
    The changeset is kept in the batch change, but it's marked as archived.
    """
    ARCHIVE
    """
    The changeset is re-added to the batch change.
    """
    REATTACH
}

"""
Description of the current changeset state vs the changeset spec desired state.
"""
type ChangesetSpecDelta {
    """
    When run, the title of the changeset will be updated.
    """
    titleChanged: Boolean!
    """
    When run, the body of the changeset will be updated.
    """
    bodyChanged: Boolean!
    """
    When run, the changeset will be taken out of draft mode.
    """
    undraft: Boolean!
    """
    When run, the target branch of the changeset will be updated.
    """
    baseRefChanged: Boolean!
    """
    When run, a new commit will be created on the branch of the changeset.
    """
    diffChanged: Boolean!
    """
    When run, a new commit will be created on the branch of the changeset.
    """
    commitMessageChanged: Boolean!
    """
    When run, a new commit in the name of the specified author will be created on the branch of the changeset.
    """
    authorNameChanged: Boolean!
    """
    When run, a new commit in the name of the specified author will be created on the branch of the changeset.
    """
    authorEmailChanged: Boolean!
}

"""
The type of the changeset spec.
"""
enum ChangesetSpecType {
    """
    References an existing changeset on a code host to be imported.
    """
    EXISTING
    """
    References a branch and a patch to be applied to create the changeset from.
    """
    BRANCH
}

"""
A changeset spec is an immutable description of the desired state of a changeset in a batch change. To
create a changeset spec, use the createChangesetSpec mutation.
"""
interface ChangesetSpec {
    """
    The unique ID for a changeset spec.

    The ID is unguessable (i.e., long and randomly generated, not sequential). This is important
    even though repository permissions also apply to viewers of changeset specs, because being
    allowed to view a repository should not entitle a person to view all not-yet-published
    changesets for that repository. Consider a batch change to fix a security vulnerability: the
    batch change author may prefer to prepare all of the changesets in private so that the window
    between revealing the problem and merging the fixes is as short as possible.
    """
    id: ID!

    """
    The type of changeset spec.
    """
    type: ChangesetSpecType!

    """
    The date, if any, when this changeset spec expires and is automatically purged. A changeset
    spec never expires (and this field is null) if its batch spec has been applied.
    """
    expiresAt: DateTime
}

"""
A changeset spec is an immutable description of the desired state of a changeset in a batch change. To
create a changeset spec, use the createChangesetSpec mutation.
"""
type HiddenChangesetSpec implements ChangesetSpec & Node {
    """
    The unique ID for a changeset spec.

    The ID is unguessable (i.e., long and randomly generated, not sequential). This is important
    even though repository permissions also apply to viewers of changeset specs, because being
    allowed to view a repository should not entitle a person to view all not-yet-published
    changesets for that repository. Consider a batch change to fix a security vulnerability: the
    batch change author may prefer to prepare all of the changesets in private so that the window
    between revealing the problem and merging the fixes is as short as possible.
    """
    id: ID!

    """
    The type of changeset spec.
    """
    type: ChangesetSpecType!

    """
    The date, if any, when this changeset spec expires and is automatically purged. A changeset
    spec never expires (and this field is null) if its batch spec has been applied.
    """
    expiresAt: DateTime
}

"""
A changeset spec is an immutable description of the desired state of a changeset in a batch change. To
create a changeset spec, use the createChangesetSpec mutation.
"""
type VisibleChangesetSpec implements ChangesetSpec & Node {
    """
    The unique ID for a changeset spec.

    The ID is unguessable (i.e., long and randomly generated, not sequential). This is important
    even though repository permissions also apply to viewers of changeset specs, because being
    allowed to view a repository should not entitle a person to view all not-yet-published
    changesets for that repository. Consider a batch change to fix a security vulnerability: the
    batch change author may prefer to prepare all of the changesets in private so that the window
    between revealing the problem and merging the fixes is as short as possible.
    """
    id: ID!

    """
    The type of changeset spec.
    """
    type: ChangesetSpecType!

    """
    The description of the changeset.
    """
    description: ChangesetDescription!

    """
    The date, if any, when this changeset spec expires and is automatically purged. A changeset
    spec never expires (and this field is null) if its batch spec has been applied.
    """
    expiresAt: DateTime

    """
    The fork the changeset will be pushed to, if any.
    """
    forkTarget: ForkTarget

    """
    The workspace this resulted from. Null, if not run server-side.
    """
    workspace: BatchSpecWorkspace
}

"""
All possible types of changesets that can be specified in a changeset spec.
"""
union ChangesetDescription = ExistingChangesetReference | GitBranchChangesetDescription

"""
A reference to a changeset that already exists on a code host (and was not created by the
batch change).
"""
type ExistingChangesetReference {
    """
    The repository that contains the existing changeset on the code host.
    """
    baseRepository: Repository!

    """
    The ID that uniquely identifies the existing changeset on the code host.

    For GitHub and Bitbucket Server, this is the pull request number (as a string) in the
    base repository. For example, "1234" for PR 1234.
    """
    externalID: String!
}

"""
A quadruple that represents all possible states of the published value: true, false, 'draft', or null.
"""
scalar PublishedValue

"""
A description of a changeset that represents the proposal to merge one branch into another.
This is used to describe a pull request (on GitHub and Bitbucket Server).
"""
type GitBranchChangesetDescription {
    """
    The repository that this changeset spec is proposing to change.
    """
    baseRepository: Repository!

    """
    The full name of the Git ref in the base repository that this changeset is based on (and is
    proposing to be merged into). This ref must exist on the base repository. For example,
    "refs/heads/master" or "refs/heads/main".
    """
    baseRef: String!

    """
    The base revision this changeset is based on. It is the latest commit in
    baseRef at the time when the changeset spec was created.
    For example: "4095572721c6234cd72013fd49dff4fb48f0f8a4"
    """
    baseRev: String!

    """
    The full name of the Git ref that holds the changes proposed by this changeset. This ref will
    be created or updated with the commits. For example, "refs/heads/fix-foo" (for
    the Git branch "fix-foo").
    """
    headRef: String!

    """
    The title of the changeset on the code host.

    On Bitbucket Server or GitHub this is the title of the pull request.
    """
    title: String!

    """
    The body of the changeset on the code host.

    On Bitbucket Server or GitHub this is the body/description of the pull request.
    """
    body: String!

    """
    The Git commits with the proposed changes. These commits are pushed to the head ref.

    Only 1 commit is supported.
    """
    commits: [GitCommitDescription!]!

    """
    The total diff of the changeset diff.
    """
    diff: PreviewRepositoryComparison!

    """
    The diffstat of this changeset spec. This data is also available
    indirectly through the diff field above, but if only the diffStat is
    required, this field is cheaper to access.
    """
    diffStat: DiffStat!

    """
    Whether or not the changeset described here should be created right after
    applying the ChangesetSpec this description belongs to.

    If this is false, the changeset will only be created on Sourcegraph and
    can be previewed.

    Another ChangesetSpec with the same description, but "published: true",
    can later be applied to publish the changeset.
    """
    published: PublishedValue
}

"""
A description of a Git commit.
"""
type GitCommitDescription {
    """
    The full commit message.
    """
    message: String!

    """
    The first line of the commit message.
    """
    subject: String!

    """
    The contents of the commit message after the first line.
    """
    body: String

    """
    The Git commit author.
    """
    author: Person!

    """
    The commit diff (in unified diff format).

    The filenames must not be prefixed (e.g., with 'a/' and 'b/'). Tip: use 'git diff --no-prefix'
    to omit the prefix.
    """
    diff: String!
}

"""
A list of changeset specs.
"""
type ChangesetSpecConnection {
    """
    The total number of changeset specs in the connection.
    """
    totalCount: Int!
    """
    Pagination information.
    """
    pageInfo: PageInfo!
    """
    A list of changeset specs.
    """
    nodes: [ChangesetSpec!]!
}

"""
A preview for which actions applyBatchChange would result in when called at the point of time this preview was created at.
"""
union ChangesetApplyPreview = VisibleChangesetApplyPreview | HiddenChangesetApplyPreview

"""
A preview entry to a repository to which the user has access.
"""
union VisibleApplyPreviewTargets =
      VisibleApplyPreviewTargetsAttach
    | VisibleApplyPreviewTargetsUpdate
    | VisibleApplyPreviewTargetsDetach

"""
A preview entry where no changeset existed before matching the changeset spec.
"""
type VisibleApplyPreviewTargetsAttach {
    """
    The changeset spec from this entry.
    """
    changesetSpec: VisibleChangesetSpec!
}

"""
A preview entry where a changeset matches the changeset spec.
"""
type VisibleApplyPreviewTargetsUpdate {
    """
    The changeset spec from this entry.
    """
    changesetSpec: VisibleChangesetSpec!
    """
    The changeset from this entry.
    """
    changeset: ExternalChangeset!
}

"""
A preview entry where no changeset spec exists for the changeset currently in
the target batch change.
"""
type VisibleApplyPreviewTargetsDetach {
    """
    The changeset from this entry.
    """
    changeset: ExternalChangeset!
}

"""
A preview entry to a repository to which the user has no access.
"""
union HiddenApplyPreviewTargets =
      HiddenApplyPreviewTargetsAttach
    | HiddenApplyPreviewTargetsUpdate
    | HiddenApplyPreviewTargetsDetach

"""
A preview entry where no changeset existed before matching the changeset spec.
"""
type HiddenApplyPreviewTargetsAttach {
    """
    The changeset spec from this entry.
    """
    changesetSpec: HiddenChangesetSpec!
}

"""
A preview entry where a changeset matches the changeset spec.
"""
type HiddenApplyPreviewTargetsUpdate {
    """
    The changeset spec from this entry.
    """
    changesetSpec: HiddenChangesetSpec!
    """
    The changeset from this entry.
    """
    changeset: HiddenExternalChangeset!
}

"""
A preview entry where no changeset spec exists for the changeset currently in
the target batch change.
"""
type HiddenApplyPreviewTargetsDetach {
    """
    The changeset from this entry.
    """
    changeset: HiddenExternalChangeset!
}

"""
One preview entry in the list of all previews against a batch spec. Each mapping
between changeset specs and current changesets yields one of these. It describes
which operations are taken against which changeset spec and changeset to ensure the
desired state is met.
"""
type HiddenChangesetApplyPreview {
    """
    The operations to take to achieve the desired state.
    """
    operations: [ChangesetSpecOperation!]!

    """
    The delta between the current changeset state and what the new changeset spec
    envisions the changeset to look like.
    """
    delta: ChangesetSpecDelta!

    """
    The target entities in this preview entry.
    """
    targets: HiddenApplyPreviewTargets!
}

"""
One preview entry in the list of all previews against a batch spec. Each mapping
between changeset specs and current changesets yields one of these. It describes
which operations are taken against which changeset spec and changeset to ensure the
desired state is met.
"""
type VisibleChangesetApplyPreview {
    """
    The operations to take to achieve the desired state.
    """
    operations: [ChangesetSpecOperation!]!

    """
    The delta between the current changeset state and what the new changeset spec
    envisions the changeset to look like.
    """
    delta: ChangesetSpecDelta!

    """
    The target entities in this preview entry.
    """
    targets: VisibleApplyPreviewTargets!
}

"""
Aggregated stats on nodes in this connection.
"""
type ChangesetApplyPreviewConnectionStats {
    """
    The amount of new commits from the batch change in this operation.
    """
    push: Int!
    """
    The amount of existing changeset that will be updated from the batch change in this operation.
    """
    update: Int!
    """
    The amount of changesets that will be un-drafted from the batch change in this operation.
    """
    undraft: Int!
    """
    The amount of changesets that will be pubished from the batch change in this operation.
    """
    publish: Int!
    """
    The amount of changesets that will be published as a draft from the batch change in this operation.
    """
    publishDraft: Int!
    """
    The amount of changesets that will be synced from the batch change in this operation.
    """
    sync: Int!
    """
    The amount of changesets that will be imported from the batch change in this operation.
    """
    import: Int!
    """
    The amount of changesets that will be closed from the batch change in this operation.
    """
    close: Int!
    """
    The amount of changesets that will be re-opened from the batch change in this operation.
    """
    reopen: Int!
    """
    Internal operation to get around slow code host updates.
    """
    sleep: Int!
    """
    The amount of changesets that will be removed from the batch change in this operation.
    """
    detach: Int!
    """
    The amount of changesets that will be archived from the batch change in this operation.
    """
    archive: Int!
    """
    The amount of changesets that are added to the batch change in this operation.
    """
    added: Int!
    """
    The amount of changesets that are already attached to the batch change and modified in this operation.
    """
    modified: Int!
    """
    The amount of changesets that are disassociated from the batch change in this operation.
    """
    removed: Int!
    """
    The amount of changesets that will be re-added from the batch change in this operation.
    """
    reattach: Int!
}

"""
A list of preview entries.
"""
type ChangesetApplyPreviewConnection {
    """
    The total number of entries in the connection.
    """
    totalCount: Int!

    """
    Pagination information.
    """
    pageInfo: PageInfo!

    """
    A list of preview entries.
    """
    nodes: [ChangesetApplyPreview!]!

    """
    Stats on the elements in this connnection. Does not respect pagination parameters.
    """
    stats: ChangesetApplyPreviewConnectionStats!
}

"""
The target repository that a changeset will be pushed to, if it's not the origin
repository.
"""
type ForkTarget {
    """
    True if the remote target is a fork in the user namespace associated with
    the credential used to push the changeset.
    """
    pushUser: Boolean!

    """
    The specific named fork that the changeset will be pushed to.
    """
    namespace: String
}

extend type Mutation {
    """
    Upload a changeset spec that will be used in a future update to a batch change. The changeset spec
    is stored and can be referenced by its ID in the applyBatchChange mutation. Just uploading the
    changeset spec does not result in changes to the batch change or any of its changesets; you need
    to call applyBatchChange to use it.

    You can use this mutation to upload large changeset specs (e.g., containing large diffs) in
    individual HTTP requests. Then, in the eventual applyBatchChange call, you just refer to the
    changeset specs by their IDs. This lets you avoid problems when updating large batch changes where
    a large HTTP request body (e.g., with many large diffs in the changeset specs) would be
    rejected by the web server/proxy or would be very slow.

    The returned ChangesetSpec is immutable and expires after a certain period of time (if not
    used in a call to applyBatchChange), which can be queried on ChangesetSpec.expiresAt.
    """
    createChangesetSpec(
        """
        The raw changeset spec (as JSON). See
        https://sourcegraph.com/github.com/sourcegraph/sourcegraph/-/blob/schema/changeset_spec.schema.json
        for the JSON Schema that describes the structure of this input.
        """
        changesetSpec: String!
    ): ChangesetSpec!

    """
    FOR INTERNAL USE ONLY.

    Upload multiple changeset specs that will be used in a future update to a batch change. The changeset specs
    are stored and can be referenced by their ID in the applyBatchChange mutation. Just uploading the
    changeset specs does not result in changes to the batch change or any of its changesets; you need
    to call applyBatchChange to use it.

    The returned ChangesetSpecs is immutable and expires after a certain period of time (if not
    used in a call to applyBatchChange), which can be queried on ChangesetSpec.expiresAt.
    """
    createChangesetSpecs(
        """
        The raw changeset specs (as JSON). See
        https://sourcegraph.com/github.com/sourcegraph/sourcegraph/-/blob/schema/changeset_spec.schema.json
        for the JSON Schema that describes the structure of this input.
        """
        changesetSpecs: [String!]!
    ): [ChangesetSpec!]!

    """
    Enqueue the given changeset for high-priority syncing.
    """
    syncChangeset(changeset: ID!): EmptyResponse!

    """
    Re-enqueue the changeset for processing by the reconciler. The changeset must be in FAILED state.
    """
    reenqueueChangeset(changeset: ID!): Changeset!

    """
    Create a batch change from a batch spec and locally computed changeset specs. The newly created
    batch change is returned.
    If a batch change in the same namespace with the same name already exists,
    an error with the error code ErrMatchingBatchChangeExists is returned.
    """
    createBatchChange(
        """
        The batch spec that describes the desired state of the batch change.
        It must be in COMPLETED state.
        """
        batchSpec: ID!

        """
        If set, these changeset specs will have their UI publication states set
        to the given values.

        An error will be returned if the same changeset spec ID is included
        more than once in the array, or if a changeset spec ID is included with
        a publication state set in its spec.
        """
        publicationStates: [ChangesetSpecPublicationStateInput!]
    ): BatchChange!

    """
    Create a batch spec that will be used to create a batch change (with the createBatchChange
    mutation), or to update an existing batch change (with the applyBatchChange mutation).

    The returned BatchSpec is immutable and expires after a certain period of time (if not used
    in a call to applyBatchChange), which can be queried on BatchSpec.expiresAt.

    If batch changes are unlicensed and the number of changesetSpecIDs is higher than what's allowed in
    the free tier, an error with the error code ErrBatchChangesUnlicensed is returned.
    """
    createBatchSpec(
        """
        The namespace (either a user or organization). A batch spec can only be applied to (or
        used to create) batch changes in this namespace.
        """
        namespace: ID!

        """
        The batch spec as YAML (or the equivalent JSON). See
        https://sourcegraph.com/github.com/sourcegraph/sourcegraph/-/blob/schema/batch_spec.schema.json
        for the JSON Schema that describes the structure of this input.
        """
        batchSpec: String!

        """
        Changeset specs that were locally computed and then uploaded using createChangesetSpec.
        """
        changesetSpecs: [ID!]!
    ): BatchSpec!

    """
    Creates a batch change with an empty batch spec, such as for drafting a new batch
    change. The user creating the batch change must have permission to create it in the
    namespace provided. Use `createBatchSpecFromRaw` and `replaceBatchSpecInput` to update
    the input batch spec after creating.
    """
    createEmptyBatchChange(
        """
        The namespace (either a user or organization) that this batch change should belong to.
        """
        namespace: ID!

        """
        The (unique) name to identify the batch change by in its namespace.
        """
        name: String!
    ): BatchChange!

    """
    Checks if a batch change with the specified name exists, if it doesn't, it creates a batch change
    with an empty batch spec otherwise returns the existing batch change, this is useful for drafting
    server-side batch changes with the src-cli tool.
    The user creating the batch change must have permission to create it in the
    namespace provided. Use `createBatchSpecFromRaw` and `replaceBatchSpecInput` to update
    the input batch spec after creating.
    """
    upsertEmptyBatchChange(
        """
        The namespace (either a user or organization) that this batch change should belong to.
        """
        namespace: ID!

        """
        The (unique) name to identify the batch change by in its namespace.
        """
        name: String!
    ): BatchChange!

    """
    Creates a batch spec and triggers a job to evaluate the workspaces. Consumers need to
    poll the batch spec until the resolution is completed to get a full list of all
    workspaces. This might become streaming so the results will come in over time.

    This mutation should be used when updating an existing batch change whose previous
    batch spec was already applied. When the previous batch spec was not yet applied, you
    can use `replaceBatchSpecInput` instead.
    """
    createBatchSpecFromRaw(
        """
        The raw batch spec as YAML (or the equivalent JSON). See
        https://sourcegraph.com/github.com/sourcegraph/sourcegraph/-/blob/schema/batch_spec.schema.json
        for the JSON Schema that describes the structure of this input.
        """
        batchSpec: String!

        """
        If true, repos with a .batchignore file will still be included.
        """
        allowIgnored: Boolean = false

        """
        If true, repos on unsupported codehosts will be included. Resulting changesets in these repos cannot
        be published.
        """
        allowUnsupported: Boolean = false

        """
        Right away set the execute flag.

        TODO: Not implemented yet.
        """
        execute: Boolean = false

        """
        Don't use cache entries.
        """
        noCache: Boolean = false

        """
        The namespace (either a user or organization). A batch spec can only be applied to (or
        used to create) batch changes in this namespace.
        """
        namespace: ID!

        """
        The batch change this batch spec is associated with.
        """
        batchChange: ID!
    ): BatchSpec!

    """
    Replaces the original input of the batch spec. All existing resolution jobs and
    workspaces are deleted and recreated in the background as the `on` section is
    evaluated. This mutation is used for overwriting existing resolutions on unapplied
    batch specs, so after typing in the editor, we don't create 10s of batch specs. The ID
    of the batch spec to update should NEVER be that of a batch spec that was already
    applied to a batch change, or it will be lost.

    For creating a new batch spec for a batch change whose previous spec was already
    applied, use `createBatchSpecFromRaw` instead.
    """
    replaceBatchSpecInput(
        """
        The ID of the batch spec resource to update.
        """
        previousSpec: ID!

        """
        The raw batch spec as YAML (or the equivalent JSON). See
        https://sourcegraph.com/github.com/sourcegraph/sourcegraph/-/blob/schema/batch_spec.schema.json
        for the JSON Schema that describes the structure of this input.
        """
        batchSpec: String!

        """
        If true, repos with a .batchignore file will still be included.
        """
        allowIgnored: Boolean = false

        """
        If true, repos on unsupported codehosts will be included. Resulting changesets in these repos cannot
        be published.
        """
        allowUnsupported: Boolean = false

        """
        Right away set the execute flag.

        TODO: Not implemented yet.
        """
        execute: Boolean = false

        """
        Don't use cache entries.
        """
        noCache: Boolean = false
    ): BatchSpec!

    """
    Creates or updates a batch spec based on the given namespace and name, then
    triggers a job to evaluate the workspaces.

    This is essentially a wrapper for `createBatchSpecFromRaw` and
    `replaceBatchSpecInput` to facilitate src-cli, and should not be used
    otherwise.
    """
    upsertBatchSpecInput(
        """
        The raw batch spec as YAML (or the equivalent JSON). See
        https://sourcegraph.com/github.com/sourcegraph/sourcegraph/-/blob/schema/batch_spec.schema.json
        for the JSON Schema that describes the structure of this input.
        """
        batchSpec: String!

        """
        If true, repos with a .batchignore file will still be included.
        """
        allowIgnored: Boolean = false

        """
        If true, repos on unsupported codehosts will be included. Resulting changesets in these repos cannot
        be published.
        """
        allowUnsupported: Boolean = false

        """
        Right away set the execute flag.

        TODO: Not implemented yet.
        """
        execute: Boolean = false

        """
        Don't use cache entries.
        """
        noCache: Boolean = false

        """
        The namespace (either a user or organization). A batch spec can only be applied to (or
        used to create) batch changes in this namespace.
        """
        namespace: ID!
    ): BatchSpec!

    """
    Deletes the batch spec. All associated jobs will be canceled, if still running.
    This is called by the client, whenever a new run is triggered, to support
    faster cleanups. We will also purge these in the background, but this'll be
    faster.
    """
    deleteBatchSpec(batchSpec: ID!): EmptyResponse!

    """
    Enqueue the workspaces that resulted from evaluation in
    `createBatchSpecFromRaw`to be executed. These will eventually be moved into
    running state. resolution is done, to support fast edits.
    Once the workspace resolution is done, workspace jobs are move to state QUEUED.
    If resolving is already done by the time this mutation is called, they are
    enqueued immediately.

    Must be invoked by the _same_ user that called createBatchSpecFromRaw before.
    Can only be invoked once.
    If workspace resolution fails, the running flag should be reset to false. API
    consumers can find this state by looking at BatchSpecWorkspaceResolution.failureMessage.

    TODO: This might be blocking with an error for now.
    """
    executeBatchSpec(
        """
        The ID of the batch spec.
        """
        batchSpec: ID!
        """
        Don't use cache entries. If set, will overwrite the current batchSpec.NoCache
        state.
        """
        noCache: Boolean
        """
        Right away set the autoApplyEnabled flag on the batch spec.

        TODO: Not implemented yet.
        """
        autoApply: Boolean = false
    ): BatchSpec!

    """
    Create or update a batch change from a batch spec and locally computed changeset specs. If no
    batch change exists in the namespace with the name given in the batch spec, a batch change will be
    created. Otherwise, the existing batch change will be updated. The batch change is returned.
    Closed batch changes cannot be applied to. In that case, an error with the error code ErrApplyClosedbatch change
    will be returned.
    """
    applyBatchChange(
        """
        The batch spec that describes the new desired state of the batch change.
        It must be in COMPLETED state.
        """
        batchSpec: ID!

        """
        If set, return an error if the batch change identified using the namespace and batch changeSpec
        parameters does not match the batch change with this ID. This lets callers use a stable ID
        that refers to a specific batch change during an edit session (and is not susceptible to
        conflicts if the underlying batch change is moved to a different namespace, renamed, or
        deleted). The returned error has the error code ErrEnsureBatchChangeFailed.
        """
        ensureBatchChange: ID

        """
        If set, these changeset specs will have their UI publication states set
        to the given values. This will overwrite any existing UI publication
        states on the changesets.

        An error will be returned if the same changeset spec ID is included
        more than once in the array, or if a changeset spec ID is included with
        a publication state set in its spec.
        """
        publicationStates: [ChangesetSpecPublicationStateInput!]
    ): BatchChange!

    """
    Close a batch change.
    """
    closeBatchChange(
        batchChange: ID!
        """
        Whether to close the changesets associated with this batch change on their respective code
        hosts. "Close" means the appropriate final state on the code host (e.g., "closed" on
        GitHub and "declined" on Bitbucket Server).
        """
        closeChangesets: Boolean = false
    ): BatchChange!

    """
    Move a batch change to a different namespace, or rename it in the current namespace.
    """
    moveBatchChange(batchChange: ID!, newName: String, newNamespace: ID): BatchChange!

    """
    Delete a batch change. A deleted batch change is completely removed and can't be un-deleted. The
    batch change's changesets are kept as-is; to close them, use the closeBatchChange mutation first.
    """
    deleteBatchChange(batchChange: ID!): EmptyResponse

    """
    Create a new credential for the given user for the given code host.
    If another token for that code host already exists, an error with the error code
    ErrDuplicateCredential is returned.
    """
    createBatchChangesCredential(
        """
        The user for which to create the credential. If null is provided, a site-wide credential is created.
        """
        user: ID

        """
        The kind of external service being configured.
        """
        externalServiceKind: ExternalServiceKind!

        """
        The URL of the external service being configured.
        """
        externalServiceURL: String!

        """
        The username associated with the credential, if required by the external
        service kind.
        """
        username: String

        """
        The credential to be stored. This can never be retrieved through the API and will be stored encrypted.
        """
        credential: String!
    ): BatchChangesCredential!

    """
    Hard-deletes a given credential.
    """
    deleteBatchChangesCredential(batchChangesCredential: ID!): EmptyResponse!

    """
    Detach archived changesets from a batch change.

    Experimental: This API is likely to change in the future.
    """
    detachChangesets(batchChange: ID!, changesets: [ID!]!): BulkOperation!

    """
    Comment on multiple changesets from a batch change.

    Experimental: This API is likely to change in the future.
    """
    createChangesetComments(batchChange: ID!, changesets: [ID!]!, body: String!): BulkOperation!

    """
    Reenqueue multiple changesets for processing.

    Experimental: This API is likely to change in the future.
    """
    reenqueueChangesets(batchChange: ID!, changesets: [ID!]!): BulkOperation!

    """
    Merge multiple changesets. If squash is true, the commits will be squashed
    into a single commit on code hosts that support squash-and-merge.

    Experimental: This API is likely to change in the future.
    """
    mergeChangesets(batchChange: ID!, changesets: [ID!]!, squash: Boolean = false): BulkOperation!

    """
    Close multiple changesets.

    Experimental: This API is likely to change in the future.
    """
    closeChangesets(batchChange: ID!, changesets: [ID!]!): BulkOperation!

    """
    Set the UI publication state for multiple changesets. If draft is true, the
    changesets are published as drafts, provided the code host supports it.

    Experimental: This API is likely to change in the future.
    """
    publishChangesets(batchChange: ID!, changesets: [ID!]!, draft: Boolean = false): BulkOperation!

    """
    Attempts to cancel the execution of the given batch spec. All workspace jobs
    that are QUEUED or PROCESSING will be cancelled. The execution must not have completed yet.
    """
    cancelBatchSpecExecution(batchSpec: ID!): BatchSpec!

    """
    Cancel a single workspace execution. Mostly useful in the "try out" UI, but
    can also be used at later stages. Must be in PROCESSING or QUEUED state.
    """
    cancelBatchSpecWorkspaceExecution(batchSpecWorkspaces: [ID!]!): EmptyResponse!

    """
    Requeue the workspaces for execution. Previous results and logs will be deleted and
    the executions are _replaced_. The workspaces must be in a final state (COMPLETED, FAILED)
    to be retryable.
    """
    retryBatchSpecWorkspaceExecution(batchSpecWorkspaces: [ID!]!): EmptyResponse!

    """
    Requeue all workspaces in the batch spec for execution. Previous results and
    logs will be deleted and the executions are _replaced_. The workspaces must be in
    a final state (COMPLETED, FAILED, CANCELED) to be retryable.

    If includeCompleted is set, then workspaces that successfully completed
    execution will also be retried and their changeset specs deleted.
    """
    retryBatchSpecExecution(batchSpec: ID!, includeCompleted: Boolean = false): BatchSpec!

    """
    Enqueue the workspace for execution. The workspace must not be running, and
    not be in a final state. This can be used for running single workspaces before
    running the full set.
    """
    enqueueBatchSpecWorkspaceExecution(batchSpecWorkspaces: [ID!]!): EmptyResponse!

    """
    Sets the autoApplyEnabled on the given batch spec. Must be in PROCESSING state.

    TODO: Not implemented yet.
    """
    toggleBatchSpecAutoApply(batchSpec: ID!, value: Boolean!): BatchSpec!
}

extend type Query {
    """
    A list of batch changes.
    """
    batchChanges(
        """
        Returns the first n batch changes from the list.
        """
        first: Int = 50
        """
        Opaque pagination cursor.
        """
        after: String
        """
        Only return batch changes in this state. If `states` is also specified, it will take precedence over `state`.
        """
        state: BatchChangeState
        """
        Only return batch changes in any of these states. If `state` is also specified, `states` will take precedence over it.
        """
        states: [BatchChangeState!]
        """
        Only include batch changes that the viewer can administer.
        """
        viewerCanAdminister: Boolean
    ): BatchChangeConnection!
    """
    Looks up a batch change by namespace and name.
    """
    batchChange(
        """
        The namespace where the batch change lives.
        """
        namespace: ID!
        """
        The batch changes name.
        """
        name: String!
    ): BatchChange
    """
    Stats on all the changesets across the instance for Batch Changes.
    """
    globalChangesetsStats: GlobalChangesetsStats!

    """
    All globally configured code hosts usable with Batch Changes.
    """
    batchChangesCodeHosts(
        """
        Returns the first n code hosts from the list.
        """
        first: Int = 50
        """
        Opaque pagination cursor.
        """
        after: String
    ): BatchChangesCodeHostConnection!

    """
    Returns a list of available bulk operations for changesets belonging to a batch change.
    """
    availableBulkOperations(
        """
        The batch change the selected changesets belong to.
        """
        batchChange: ID!
        """
        The changesets to query for bulk operations applicable to.
        """
        changesets: [ID!]!
    ): [BulkOperationType!]!

    """
    A list of batch specs.


    Site-admin only.

    Experimental: This API is likely to change in the future.
    """
    batchSpecs(
        """
        Returns the first n batch specs from the list.
        """
        first: Int = 50
        """
        Opaque pagination cursor.
        """
        after: String
        """
        Include locally executed (i.e. with src-cli) batch specs in the list of specs returned.
        """
        includeLocallyExecutedSpecs: Boolean
        """
        Exclude the empty batch specs that are initially created and applied to draft batch changes.
        """
        excludeEmptySpecs: Boolean
    ): BatchSpecConnection!

    """
    Determines if a batch change credential is authorized for a code host.
    """
    checkBatchChangesCredential(batchChangesCredential: ID!): EmptyResponse!

    """
    Takes the batch spec as input and resolves the workspaces for it, without persisting them.
    This endpoint is used in src-cli to resolve workspaces.
    """
    resolveWorkspacesForBatchSpec(batchSpec: String!): [ResolvedBatchSpecWorkspace!]!

    """
    Returns the max number of changesets are allowed for License that does not have the batch change feature.
    """
    maxUnlicensedChangesets: Int!
}

"""
A not persisted resolved workspace, returned from resolveWorkspacesForBatchSpec.
"""
type ResolvedBatchSpecWorkspace {
    """
    The repository to run over.
    """
    repository: Repository!

    """
    The branch to run over.
    """
    branch: GitRef!

    """
    The path to run in.
    """
    path: String!

    """
    If true, only the files within the workspace will be fetched.
    """
    onlyFetchWorkspace: Boolean!

    """
    If true, this workspace has been skipped, because some rule forced this.
    For now, the only one is a .batchignore file existing in the repository.
    """
    ignored: Boolean!

    """
    If true, this workspace has been skipped, because the code host on which
    the repository is hosted is not supported.
    """
    unsupported: Boolean!

    """
    If this workspace was resolved based on a search, this is the list of paths
    to files that have been included in the search results.
    """
    searchResultPaths: [String!]!
}

"""
State of the workspace resolution.
"""
enum BatchSpecWorkspaceResolutionState {
    """
    Not yet started resolving. Will be picked up by a worker eventually.
    """
    QUEUED
    """
    Currently resolving workspaces.
    """
    PROCESSING
    """
    An error occured while resolving workspaces. Will be retried eventually.
    """
    ERRORED
    """
    A fatal error occured while resolving workspaces. No retries will be made.
    """
    FAILED
    """
    Resolving workspaces finished successfully.
    """
    COMPLETED
}

"""
Possible sort orderings for a workspace connection.
"""
enum WorkspacesSortOrder {
    """
    Sort by repository name in ascending order.
    """
    REPO_NAME_ASC
    """
    Sort by repository name in descending order.
    """
    REPO_NAME_DESC
}

"""
A bag for all info around resolving workspaces.
"""
type BatchSpecWorkspaceResolution {
    """
    Error message, if the evaluation failed.
    """
    failureMessage: String

    """
    Set when evaluating workspaces begins.
    """
    startedAt: DateTime

    """
    Set when evaluating workspaces finished.
    """
    finishedAt: DateTime

    """
    State of evaluating the workspaces.
    """
    state: BatchSpecWorkspaceResolutionState!

    """
    The actual list of determined workspaces.
    """
    workspaces(
        first: Int = 50
        after: String
        """
        Not implemented.
        """
        orderBy: WorkspacesSortOrder
        """
        Search for workspaces matching this query. Queries may include quoted substrings
        to match phrases, and words may be preceded by - to negate them.
        Currently, this supports searching repository names only.
        Repos that are not visible to the viewer will be omitted entirely when
        this argument is passed.
        """
        search: String
        """
        Filter workspaces by given state.
        """
        state: BatchSpecWorkspaceState
    ): BatchSpecWorkspaceConnection!

    """
    Returns the workspaces where most recently a step completed that yielded a diff.
    """
    recentlyCompleted(first: Int = 50, after: String): BatchSpecWorkspaceConnection!

    """
    Returns the most recently failed workspace executions.
    """
    recentlyErrored(first: Int = 50, after: String): BatchSpecWorkspaceConnection!
}

"""
Statistics on all workspaces in a connection.
"""
type BatchSpecWorkspacesStats {
    """
    Number of errored workspaces.
    """
    errored: Int!
    """
    Number of completed workspaces.
    """
    completed: Int!
    """
    Number of processing workspaces.
    """
    processing: Int!
    """
    Number of queued workspaces.
    """
    queued: Int!
    """
    Number of ignored workspaces.
    """
    ignored: Int!
}

"""
A list of workspaces.
"""
type BatchSpecWorkspaceConnection {
    """
    The total number of workspaces in the connection.
    """
    totalCount: Int!
    """
    Pagination information.
    """
    pageInfo: PageInfo!
    """
    A list of workspaces.
    """
    nodes: [BatchSpecWorkspace!]!
    """
    Statistics on the workspaces in this connection.
    """
    stats: BatchSpecWorkspacesStats!
}

"""
Configuration and execution summary of a batch spec execution. This is mostly
meant for internal consumption, for the timeline view.
"""
type BatchSpecWorkspaceStages {
    """
    Execution log entries related to setting up the workspace.
    """
    setup: [ExecutionLogEntry!]!

    """
    Execution log entries related to running the steps of the batch spec.
    """
    srcExec: [ExecutionLogEntry!]!

    """
    Execution log entries related to tearing down the workspace.
    """
    teardown: [ExecutionLogEntry!]!
}

"""
The states a workspace can be in.
"""
enum BatchSpecWorkspaceState {
    """
    The workspace will not be enqueued for execution, because either the
    workspace is unsupported/ignored or has 0 steps to execute.
    """
    SKIPPED
    """
    The workspace is not yet enqueued for execution.
    """
    PENDING
    """
    Not yet started executing. Will be picked up by a worker eventually.
    """
    QUEUED
    """
    Currently executing on the workspace.
    """
    PROCESSING
    """
    A fatal error occured while executing. No retries will be made.
    """
    FAILED
    """
    Execution finished successfully.
    """
    COMPLETED
    """
    Execution is being canceled. This is an async process.
    """
    CANCELING
    """
    Execution has been canceled.
    """
    CANCELED
}

"""
The common interface for a batch spec workspace. Depending on access to the repository,
either a HiddenBatchSpecWorkspace or a VisibleBatchSpecWorkspace will be serving this
interface.
"""
interface BatchSpecWorkspace {
    """
    The unique ID for the workspace.
    """
    id: ID!

    """
    Used for reverse querying.
    """
    batchSpec: BatchSpec!

    """
    If true, only the files within the workspace will be fetched.
    """
    onlyFetchWorkspace: Boolean!

    """
    If true, this workspace has been skipped, because some rule forced this.
    For now, the only one is a .batchignore file existing in the repository.
    """
    ignored: Boolean!

    """
    If true, this workspace has been skipped, because the code host on which
    the repository is hosted is not supported.
    """
    unsupported: Boolean!

    """
    Whether we found a task cache result.
    """
    cachedResultFound: Boolean!

    """
    How many steps had a cached result.
    """
    stepCacheResultCount: Int!

    """
    The time when the workspace was enqueued for processing. Null, if not yet enqueued.
    """
    queuedAt: DateTime

    """
    The time when the workspace started processing. Null, if not yet started.
    """
    startedAt: DateTime

    """
    The time when the workspace finished processing. Null, if not yet finished.
    """
    finishedAt: DateTime

    """
    The current state the workspace is in.
    """
    state: BatchSpecWorkspaceState!

    """
    The rank of this execution in the queue of the user. The value of this field is null if the
    execution has started.
    """
    placeInQueue: Int

    """
    The rank of this execution in the global queue. The value of this field is null if the
    execution has started.
    """
    placeInGlobalQueue: Int

    """
    The diff stat over all created changeset specs. Null, if not yet finished or
    failed.
    """
    diffStat: DiffStat
}

"""
A workspace to which the requesting user has access.
"""
type VisibleBatchSpecWorkspace implements BatchSpecWorkspace & Node {
    """
    The unique ID for the workspace.
    """
    id: ID!

    """
    The repository to run over.
    """
    repository: Repository!

    """
    Used for reverse querying.
    """
    batchSpec: BatchSpec!

    """
    The branch to run over.
    """
    branch: GitRef!

    """
    The path to run in.
    """
    path: String!

    """
    If true, only the files within the workspace will be fetched.
    """
    onlyFetchWorkspace: Boolean!

    """
    If true, this workspace has been skipped, because some rule forced this.
    For now, the only one is a .batchignore file existing in the repository.
    """
    ignored: Boolean!

    """
    If true, this workspace has been skipped, because the code host on which
    the repository is hosted is not supported.
    """
    unsupported: Boolean!

    """
    Whether we found a task cache result.
    """
    cachedResultFound: Boolean!

    """
    How many steps had a cached result.
    """
    stepCacheResultCount: Int!

    """
    Executor stages of running in this workspace. Null, if the execution hasn't
    started yet.
    """
    stages: BatchSpecWorkspaceStages

    """
    List of steps that will need to run over this workspace.
    """
    steps: [BatchSpecWorkspaceStep!]!

    """
    Get a specific step by its index. Index is 1-based.
    """
    step(index: Int!): BatchSpecWorkspaceStep

    """
    If this workspace was resolved based on a search, this is the list of paths
    to files that have been included in the search results.
    """
    searchResultPaths: [String!]!

    """
    The time when the workspace was enqueued for processing. Null, if not yet enqueued.
    """
    queuedAt: DateTime

    """
    The time when the workspace started processing. Null, if not yet started.
    """
    startedAt: DateTime

    """
    The time when the workspace finished processing. Null, if not yet finished.
    """
    finishedAt: DateTime

    """
    Optional failure message, set when the execution failed.
    """
    failureMessage: String

    """
    The current state the workspace is in.
    """
    state: BatchSpecWorkspaceState!

    """
    Populated, when the execution is finished. This is where you get the combined
    diffs.
    """
    changesetSpecs: [VisibleChangesetSpec!]

    """
    The rank of this execution in the queue of the user. The value of this field is null if the
    execution has started.
    """
    placeInQueue: Int

    """
    The rank of this execution in the global queue. The value of this field is null if the
    execution has started.
    """
    placeInGlobalQueue: Int

    """
    The diff stat over all created changeset specs. Null, if not yet finished or
    failed.
    """
    diffStat: DiffStat

    """
    The executor that picked up this job. Null, if the executor has been pruned
    from the data set or if the job has not started yet.
    Only available to site-admins.
    """
    executor: Executor
}

"""
A workspace to which the requesting user does not have access.
"""
type HiddenBatchSpecWorkspace implements BatchSpecWorkspace & Node {
    """
    The unique ID for the workspace.
    """
    id: ID!

    """
    Used for reverse querying.
    """
    batchSpec: BatchSpec!

    """
    If true, only the files within the workspace will be fetched.
    """
    onlyFetchWorkspace: Boolean!

    """
    If true, this workspace has been skipped, because some rule forced this.
    For now, the only one is a .batchignore file existing in the repository.
    """
    ignored: Boolean!

    """
    If true, this workspace has been skipped, because the code host on which
    the repository is hosted is not supported.
    """
    unsupported: Boolean!

    """
    Whether we found a task cache result.
    """
    cachedResultFound: Boolean!

    """
    How many steps had a cached result.
    """
    stepCacheResultCount: Int!

    """
    The time when the workspace was enqueued for processing. Null, if not yet enqueued.
    """
    queuedAt: DateTime

    """
    The time when the workspace started processing. Null, if not yet started.
    """
    startedAt: DateTime

    """
    The time when the workspace finished processing. Null, if not yet finished.
    """
    finishedAt: DateTime

    """
    The current state the workspace is in.
    """
    state: BatchSpecWorkspaceState!

    """
    The rank of this execution in the queue of the user. The value of this field is null if the
    execution has started.
    """
    placeInQueue: Int

    """
    The rank of this execution in the global queue. The value of this field is null if the
    execution has started.
    """
    placeInGlobalQueue: Int

    """
    The diff stat over all created changeset specs. Null, if not yet finished or
    failed.
    """
    diffStat: DiffStat
}

"""
Description of one step in the execution of a workspace.
"""
type BatchSpecWorkspaceStep {
    """
    The number of the step.
    """
    number: Int!

    """
    The command to run.
    """
    run: String!

    """
    The docker container image to use to run this command.
    """
    container: String!

    """
    The if condition, under which the step is executed. Null, if not set.
    """
    ifCondition: String

    """
    True, if a cached result has been found.
    """
    cachedResultFound: Boolean!

    """
    True, when the `if` condition evaluated that this step doesn't need to run.
    """
    skipped: Boolean!

    """
    The output logs, prefixed with either "stdout " or "stderr ". Null, if the
    step has not run yet.
    """
    outputLines(
        """
        Return the first N lines of logs.
        """
        first: Int = 500
        """
        Return the log lines after N lines.
        """
        after: String
    ): BatchSpecWorkspaceStepOutputLineConnection!

    """
    The time when the step started processing. Null, if not yet started.
    """
    startedAt: DateTime

    """
    The time when the step finished processing. Null, if not yet finished.
    """
    finishedAt: DateTime

    """
    The exit code of the command. Null, if not yet finished.
    """
    exitCode: Int

    """
    The environment variables passed to this step.
    """
    environment: [BatchSpecWorkspaceEnvironmentVariable!]!

    """
    The output variables the step produced. Null, if not yet finished.
    """
    outputVariables: [BatchSpecWorkspaceOutputVariable!]

    """
    The diff stat of the step result. Null, if not yet finished.
    """
    diffStat: DiffStat

    """
    The generated diff from this step. Null, if not yet finished.
    """
    diff: PreviewRepositoryComparison
}

"""
A list of Output lines from a Batch spec workspace.
"""
type BatchSpecWorkspaceStepOutputLineConnection {
    """
    The total number of output lines in the connection.
    """
    totalCount: Int!

    """
    Pagination information.
    """
    pageInfo: PageInfo!

    """
    A list of output lines.
    """
    nodes: [String!]!
}

"""
An output variable in a step.
"""
type BatchSpecWorkspaceOutputVariable {
    """
    The variable name.
    """
    name: String!
    """
    The variable value.
    """
    value: JSONValue!
}

"""
An enviroment variable passed to a command in a step.
"""
type BatchSpecWorkspaceEnvironmentVariable {
    """
    The variable name.
    """
    name: String!
    """
    The variable value.
    If null, the variable will be populated from a secret.
    """
    value: String
}

"""
The state of the batch change.
"""
enum BatchChangeState {
    OPEN
    CLOSED
    DRAFT
}

"""
A batch change is a set of related changes to apply to code across one or more repositories.
"""
type BatchChange implements Node {
    """
    The unique ID for the batch change.
    """
    id: ID!

    """
    The namespace where this batch change is defined.
    """
    namespace: Namespace!

    """
    The name of the batch change.
    """
    name: String!

    """
    The description (as Markdown).
    """
    description: String

    """
    The state of the batch change.
    """
    state: BatchChangeState!

    """
    The user who created the batch change, or null if the user was deleted.
    """
    creator: User

    """
    The user who last updated the batch change by applying a spec to this batch change.
    If the batch change hasn't been updated, the lastApplier is the initialApplier, or null if the user was deleted.
    """
    lastApplier: User

    """
    Whether the current user can edit or delete this batch change.
    """
    viewerCanAdminister: Boolean!

    """
    The URL to this batch change.
    """
    url: String!

    """
    The date and time when the batch change was created.
    """
    createdAt: DateTime!

    """
    The date and time when the batch change was updated. That can be by applying a spec, or by an internal process.
    For reading the time the batch change spec was changed last, see lastAppliedAt.
    """
    updatedAt: DateTime!

    """
    The date and time when the batch change was last updated with a new spec. Null, if a batch spec has never been
    applied yet.
    """
    lastAppliedAt: DateTime

    """
    The date and time when the batch change was closed. If set, applying a spec for this batch change will fail with an error.
    """
    closedAt: DateTime

    """
    Stats on all the changesets that are tracked in this batch change.
    """
    changesetsStats: ChangesetsStats!

    """
    The changesets in this batch change that already exist on the code host.
    """
    changesets(
        first: Int = 50
        """
        Opaque pagination cursor.
        """
        after: String
        """
        Only include changesets with the given state.
        """
        state: ChangesetState
        """
        Query only changesets that are either open or draft. This is used on the close page to list changesets that remain open.
        When set, passing state is not allowed.
        """
        onlyClosable: Boolean
        """
        Only include changesets with the given review state.

        Note: The COMMENTED and DISMISSED review states are not yet implemented.
        """
        reviewState: ChangesetReviewState
        """
        Only include changesets with the given check state.
        """
        checkState: ChangesetCheckState
        """
        Only return changesets that have been published by this batch change. Imported changesets will be omitted.
        """
        onlyPublishedByThisBatchChange: Boolean
        """
        Search for changesets matching this query. Queries may include quoted substrings to match phrases, and words may be preceded by - to negate them.
        """
        search: String
        """
        Only return changesets that are archived in this batch change.
        """
        onlyArchived: Boolean = false
        """
        Only include changesets belonging to the given repository.
        """
        repo: ID
    ): ChangesetConnection!

    """
    The changeset counts over time, in 1-day intervals backwards from the point in time given in
    the "to" parameter.
    """
    changesetCountsOverTime(
        """
        Only include changeset counts up to this point in time (inclusive). Defaults to BatchChange.createdAt.
        """
        from: DateTime
        """
        Only include changeset counts up to this point in time (inclusive). Defaults to the
        current time.
        """
        to: DateTime
        """
        Include archived changesets in the calculation.
        """
        includeArchived: Boolean = false
    ): [ChangesetCounts!]!

    """
    The diff stat for all the changesets in the batch change.
    """
    diffStat: DiffStat!

    """
    The last batch spec applied to this batch change, or an "empty" spec if the batch
    change has never had a spec applied.
    """
    currentSpec: BatchSpec!

    """
    The bulk operations that have been run over this batch change.
    """
    bulkOperations(
        """
        Returns the first n entries from the list.
        """
        first: Int = 50
        """
        Opaque pagination cursor.
        """
        after: String
        """
        Filter by createdAt value.
        """
        createdAfter: DateTime
    ): BulkOperationConnection!

    """
    The batch specs that have been running on this batch change.

    Site-admins can see all of them, non admins can only see batch specs that they
    created.
    """
    batchSpecs(
        """
        Returns the first n entries from the list.
        """
        first: Int = 50
        """
        Opaque pagination cursor.
        """
        after: String
        """
        Include locally executed (i.e. with src-cli) batch specs in the list of specs returned.
        """
        includeLocallyExecutedSpecs: Boolean
        """
        Exclude the empty batch specs that are initially created and applied to draft batch changes.
        """
        excludeEmptySpecs: Boolean
    ): BatchSpecConnection!
}

"""
A list of bulk operations.
"""
type BulkOperationConnection {
    """
    The total number of bulk operations in the connection.
    """
    totalCount: Int!

    """
    Pagination information.
    """
    pageInfo: PageInfo!

    """
    A list of bulk operations.
    """
    nodes: [BulkOperation!]!
}

"""
The available types of jobs that can be run over a batch change.
"""
enum BulkOperationType {
    """
    Bulk post comments over all involved changesets.
    """
    COMMENT
    """
    Bulk detach changesets from a batch change.
    """
    DETACH
    """
    Bulk reenqueue failed changesets.
    """
    REENQUEUE
    """
    Bulk merge changesets.
    """
    MERGE
    """
    Bulk close changesets.
    """
    CLOSE
    """
    Bulk publish changesets.
    """
    PUBLISH
}

"""
All valid states a bulk operation can be in.
"""
enum BulkOperationState {
    """
    The bulk operation is still processing on some changesets.
    """
    PROCESSING

    """
    No operations are still running and all of them finished without error.
    """
    COMPLETED

    """
    No operations are still running and at least one of them finished with an error.
    """
    FAILED
}

"""
A bulk operation represents a group of jobs run over a set of changesets in a batch change.
"""
type BulkOperation implements Node {
    """
    The unique ID for the bulk operation.
    """
    id: ID!

    """
    The type of task that is run.
    """
    type: BulkOperationType!

    """
    The current state of the bulk operation.
    """
    state: BulkOperationState!

    """
    The progress to completion of all executions involved in this bulk operation. Value
    ranges from 0.0 to 1.0.
    """
    progress: Float!

    """
    The list of all errors that occured while processing the bulk action.
    """
    errors: [ChangesetJobError!]!

    """
    The time the bulk operation was created at.
    """
    createdAt: DateTime!

    """
    The time the bulk operation finished. Also set, when some operations failed. Null,
    when some operations are still processing.
    """
    finishedAt: DateTime

    """
    The user who triggered this bulk operation.
    """
    initiator: User!

    """
    The number of changesets involved in this bulk operation.
    """
    changesetCount: Int!
}

"""
A reported error on a changeset in a bulk operation.
"""
type ChangesetJobError {
    """
    The changeset this error is related to.
    """
    changeset: Changeset!
    """
    The error message. Null, if the changeset is not accessible by the requesting
    user.
    """
    error: String
}

"""
The possible states of a batch spec.
"""
enum BatchSpecState {
    """
    The spec is not yet enqueued for processing.
    """
    PENDING

    """
    This spec is being processed.
    """
    PROCESSING

    """
    This spec failed to be processed.
    """
    FAILED

    """
    This spec was processed successfully.
    """
    COMPLETED

    """
    This spec is queued to be processed.
    """
    QUEUED

    """
    The execution is being canceled.
    """
    CANCELING

    """
    The execution has been canceled.
    """
    CANCELED
}

"""
The possible sources of a batch spec.
"""
enum BatchSpecSource {
    """
    The spec was created from the local src-cli workflow.
    """
    LOCAL

    """
    This spec was created for remote server-side execution, e.g. from the web UI editor,
    or with src batch remote.
    """
    REMOTE
}

"""
A list of batch specs.
"""
type BatchSpecConnection {
    """
    The total number of batch specs in the connection.
    """
    totalCount: Int!

    """
    Pagination information.
    """
    pageInfo: PageInfo!

    """
    A list of batch specs.
    """
    nodes: [BatchSpec!]!
}

"""
A batch spec is an immutable description of the desired state of a batch change. To create a
batch spec, use the createBatchSpec mutation.
"""
type BatchSpec implements Node {
    """
    The unique ID for a batch spec.

    The ID is unguessable (i.e., long and randomly generated, not sequential).
    Consider a batch change to fix a security vulnerability: the batch change author may prefer
    to prepare the batch change, including the description in private so that the window
    between revealing the problem and merging the fixes is as short as possible.
    """
    id: ID!

    """
    Future: Flag that calls applyBatchChange automatically when this execution completes.
    Useful for integrations with code monitoring etc.

    TODO: Not implemented yet.
    """
    autoApplyEnabled: Boolean!

    """
    The current execution state of the batch spec. For manually created ones (src-cli workflow),
    this will always be COMPLETED. This is an accumulated state over all the associated
    workspaces for convenience.
    """
    state: BatchSpecState!

    """
    The original YAML or JSON input that was used to create this batch spec.
    """
    originalInput: String!

    """
    The parsed JSON value of the original input. If the original input was YAML, the YAML is
    converted to the equivalent JSON.
    """
    parsedInput: JSONValue!

    """
    The BatchChangeDescription that describes this batch change.
    """
    description: BatchChangeDescription!

    """
    Generates a preview showing the operations that would be performed if the
    batch spec was applied. This preview is not a guarantee, since the state
    of the changesets can change between the time the preview is generated and
    when the batch spec is applied.
    """
    applyPreview(
        """
        Returns the first n entries from the list.
        """
        first: Int = 50
        """
        Opaque pagination cursor.
        """
        after: String
        """
        Search for changesets matching this query. Queries may include quoted substrings to match phrases, and words may be preceded by - to negate them.
        """
        search: String
        """
        Search for changesets that are currently in this state.
        """
        currentState: ChangesetState
        """
        Search for changesets that will have the given action performed.
        """
        action: ChangesetSpecOperation
        """
        If set, it will be assumed that these changeset specs will have their
        UI publication states set to the given values when the batch spec is
        applied.

        An error will be returned if the same changeset spec ID is included
        more than once in the array, or if a changeset spec ID returned within
        this page has a publication state set in its spec.

        Note: Unlike createBatchChange(), this query will not validate that all
        changeset specs in the array correspond to valid changeset specs within
        the batch spec, as they may not all be loaded on the current page.
        """
        publicationStates: [ChangesetSpecPublicationStateInput!]
    ): ChangesetApplyPreviewConnection!

    """
    The specs for changesets associated with this batch spec.
    """
    changesetSpecs(first: Int = 50, after: String): ChangesetSpecConnection!

    """
    The user who created this batch spec. Their permissions will be honored when
    executing the batch spec. Null, if the user has been deleted.
    """
    creator: User

    """
    The time when the batch spec was created at. At this time, it is also added to
    the queue for execution, if created from raw.
    """
    createdAt: DateTime!

    """
    The time when the execution started. Null, if the execution hasn't started
    yet, or if the batch spec was created in COMPLETED state.
    """
    startedAt: DateTime

    """
    The time when the execution finished. Null, if the execution hasn't finished
    yet, or if the batch spec was created in COMPLETED state.
    This value is the time of when the batch spec has been sealed.
    """
    finishedAt: DateTime

    """
    The namespace (either a user or organization) of the batch spec.
    """
    namespace: Namespace!

    """
    The date, if any, when this batch spec expires and is automatically purged. A batch spec
    never expires if it has been applied.
    """
    expiresAt: DateTime

    """
    The URL of a web page that allows applying this batch spec and
    displays a preview of which changesets will be created by applying it.
    Null, if the execution has not finished yet.
    """
    applyURL: String

    """
    When true, the viewing user can apply this spec, modify it, and run workspace
    resolution jobs.
    """
    viewerCanAdminister: Boolean!

    """
    The diff stat for all the changeset specs in the batch spec. Null if state is
    not COMPLETED.
    """
    diffStat: DiffStat

    """
    The batch change this spec will update when applied. If it's null, the
    batch change doesn't yet exist.
    """
    appliesToBatchChange: BatchChange

    """
    The newest version of this batch spec, as identified by its namespace
    and name. If this is the newest version, this field will be null.
    """
    supersedingBatchSpec: BatchSpec

    """
    The code host connections required for applying this spec. Includes the credentials of the current user.
    Only returns useful information if state is COMPLETED.
    """
    viewerBatchChangesCodeHosts(
        """
        Returns the first n code hosts from the list.
        """
        first: Int = 50
        """
        Opaque pagination cursor.
        """
        after: String
        """
        Only returns the code hosts for which the viewer doesn't have credentials.
        """
        onlyWithoutCredential: Boolean = false
        """
        Only returns code hosts that don't have webhooks configured.
        """
        onlyWithoutWebhooks: Boolean = false
    ): BatchChangesCodeHostConnection!

    """
    A wrapper for the workspace resolution on this batch spec. Contains access to
    all workspaces that have been resolved, as well as insight into the state of
    the resolution.
    Null, if the batch spec was created in COMPLETED state.
    """
    workspaceResolution: BatchSpecWorkspaceResolution

    """
    The set of changeset specs for importing changesets, as determined from the
    raw spec.
    Null, if not created through createBatchSpecFromRaw.
    """
    importingChangesets(first: Int = 50, after: String, search: String): ChangesetSpecConnection

    """
    Set when something about this batch spec is not right. For example, the input spec
    is invalid, or if ValidateChangesetSpecs throws an error when the last job completes.
    """
    failureMessage: String

    """
    If true, repos with a .batchignore file will still be included in the
    execution.

    Null, if not created through createBatchSpecFromRaw.
    """
    allowIgnored: Boolean

    """
    If true, repos on unsupported codehosts will be included in the execution.
    These cannot be published.

    Null, if not created through createBatchSpecFromRaw.
    """
    allowUnsupported: Boolean

    """
    If true, workspaces will not run with cached results.

    Null, if not created through createBatchSpecFromRaw.
    """
    noCache: Boolean

    """
    If true, viewer can retry the batch spec execution by calling
    retryBatchSpecExecution.
    """
    viewerCanRetry: Boolean!

    """
    Whether the batch spec was created from the local src-cli workflow or remotely for
    server-side execution.
    """
    source: BatchSpecSource!

    """
    The files that are mounted in the steps of a batch spec.
    """
    files(
        """
        Returns the first n files from the list.
        """
        first: Int = 50
        """
        Opaque pagination cursor.
        """
        after: String
    ): BatchSpecWorkspaceFileConnection
}

"""
A list of batch changes.
"""
type BatchChangeConnection {
    """
    A list of batch changes.
    """
    nodes: [BatchChange!]!

    """
    The total number of batch changes in the connection.
    """
    totalCount: Int!

    """
    Pagination information.
    """
    pageInfo: PageInfo!
}

extend type Org {
    """
    A list of batch changes initially applied in this organization.
    """
    batchChanges(
        """
        Returns the first n batch changes from the list.
        """
        first: Int = 50
        """
        Opaque pagination cursor.
        """
        after: String
        """
        Only return batch changes in this state. If `states` is also specified, it will take precedence over `state`.
        """
        state: BatchChangeState
        """
        Only return batch changes in any of these states. If `state` is also specified, `states` will take precedence over it.
        """
        states: [BatchChangeState!]
        """
        Only include batch changes that the viewer can administer.
        """
        viewerCanAdminister: Boolean
    ): BatchChangeConnection!
}

extend type User {
    """
    A list of batch changes applied under this user's namespace.
    """
    batchChanges(
        """
        Returns the first n batch changes from the list.
        """
        first: Int = 50
        """
        Opaque pagination cursor.
        """
        after: String
        """
        Only return batch changes in this state. If `states` is also specified, it will take precedence over `state`.
        """
        state: BatchChangeState
        """
        Only return batch changes in any of these states. If `state` is also specified, `states` will take precedence over it.
        """
        states: [BatchChangeState!]
        """
        Only include batch changes that the viewer can administer.
        """
        viewerCanAdminister: Boolean
    ): BatchChangeConnection!

    """
    Returns a connection of configured external services accessible by this user, for usage with batch changes.
    These are all code hosts configured on the Sourcegraph instance that are supported by batch changes. They are
    connected to BatchChangesCredential resources, if one has been created for the code host connection before.
    """
    batchChangesCodeHosts(
        """
        Returns the first n code hosts from the list.
        """
        first: Int = 50
        """
        Opaque pagination cursor.
        """
        after: String
    ): BatchChangesCodeHostConnection!
}

extend type Repository {
    """
    Stats on all the changesets that have been created in this repository by batch
    changes.
    """
    changesetsStats: RepoChangesetsStats!

    """
    A list of batch changes that have applied a changeset to this repository.
    """
    batchChanges(
        """
        Returns the first n batch changes from the list.
        """
        first: Int = 50
        """
        Opaque pagination cursor.
        """
        after: String
        """
        Only return batch changes in this state. If `states` is also specified, it will take precedence over `state`.
        """
        state: BatchChangeState
        """
        Only return batch changes in any of these states. If `state` is also specified, `states` will take precedence over it.
        """
        states: [BatchChangeState!]
        """
        Only include batch changes that the viewer can administer.
        """
        viewerCanAdminister: Boolean
    ): BatchChangeConnection!

    """
    A diff stat for all the changesets that have been applied to this repository
    by batch changes.
    """
    batchChangesDiffStat: DiffStat!
}

"""
A connection of all code hosts usable with batch changes and accessible by the user
this is requested on.
"""
type BatchChangesCodeHostConnection {
    """
    A list of code hosts.
    """
    nodes: [BatchChangesCodeHost!]!

    """
    The total number of configured external services in the connection.
    """
    totalCount: Int!

    """
    Pagination information.
    """
    pageInfo: PageInfo!
}

"""
A code host usable with batch changes. This service is accessible by the user it belongs to.
"""
type BatchChangesCodeHost {
    """
    The kind of external service.
    """
    externalServiceKind: ExternalServiceKind!

    """
    The URL of the external service.
    """
    externalServiceURL: String!

    """
    The configured credential, if any.
    """
    credential: BatchChangesCredential

    """
    Configuration for commit signing, if any has been set up. Always nil if the code
    host type doesn't have commit signing support yet.
    """
    commitSigningConfiguration: CommitSigningConfiguration

    """
    If true, some of the repositories on this code host require
    an SSH key to be configured.
    """
    requiresSSH: Boolean!

    """
    If true, this code host requires credentials to have a username as well as a personal access token.
    """
    requiresUsername: Boolean!

    """
    If true, this code host can setup commit signing.
    """
    supportsCommitSigning: Boolean!

    """
    If true, the code host has webhooks configured.
    """
    hasWebhooks: Boolean!
}

"""
Commit signing configuration for a code host, e.g. GitHubApp or SSHKey. Today, the
only supported form of commit signing is via a GitHub App.
"""
union CommitSigningConfiguration = GitHubApp

"""
A user token configured for batch changes use on the specified code host.
"""
type BatchChangesCredential implements Node {
    """
    A globally unique identifier.
    """
    id: ID!

    """
    The kind of external service.
    """
    externalServiceKind: ExternalServiceKind!

    """
    The URL of the external service.
    """
    externalServiceURL: String!

    """
    The public key to use on the external service for SSH keypair authentication.
    Not set if the credential doesn't support SSH access.
    """
    sshPublicKey: String

    """
    The date and time this token has been created at.
    """
    createdAt: DateTime!

    """
    Whether the configured credential is a site credential, that is available globally.
    """
    isSiteCredential: Boolean!
}

"""
A BatchChangeDescription describes a batch change.
"""
type BatchChangeDescription {
    """
    The name as parsed from the input.
    """
    name: String!

    """
    The description as parsed from the input.
    """
    description: String!
}

"""
A ChangesetSpecPublicationStateInput is a tuple containing a changeset spec ID
and its desired UI publication state.
"""
input ChangesetSpecPublicationStateInput {
    """
    The changeset spec ID.
    """
    changesetSpec: ID!

    """
    The desired publication state.
    """
    publicationState: PublishedValue!
}

"""
A list of BatchSpecMounts.
"""
type BatchSpecWorkspaceFileConnection {
    """
    The total number of files.
    """
    totalCount: Int!
    """
    Pagination information.
    """
    pageInfo: PageInfo!
    """
    A list of workspace files in a batch spec.
    """
    nodes: [BatchSpecWorkspaceFile!]!
}

"""
The metadata of a file being used in a batch spec step.
"""
type BatchSpecWorkspaceFile implements File2 & Node {
    """
    The ID of the file.
    """
    id: ID!
    """
    When the file was last touched.
    """
    modifiedAt: DateTime!
    """
    When the file is initially created at.
    """
    createdAt: DateTime!
    """
    When the file is updated at.
    """
    updatedAt: DateTime!

    """
    The full path (relative to the root) of this file.
    """
    path: String!
    """
    The base name (i.e., file name only) of this file.
    """
    name: String!
    """
    False because this is a file, not a directory.
    """
    isDirectory: Boolean!
    """
    The content of this file.
    """
    content(
        """
        Return file content starting at line "startLine". A value <= 0 will be the start of the file.
        """
        startLine: Int
        """
        Return file content ending at line "endLine". A value < 0 or > totalLines will set endLine to the end of the file.
        """
        endLine: Int
    ): String!
    """
    The file size in bytes.
    """
    byteSize: Int!
    """
    Total line count for the Blob. Returns 0 for binary files.
    """
    totalLines: Int!
    """
    Whether or not it is binary.
    """
    binary: Boolean!
    """
    The file rendered as rich HTML, or an empty string if it is not a supported
    rich file type.
    This HTML string is already escaped and thus is always safe to render.
    """
    richHTML(
        """
        Return richHTML content starting at line "startLine". A value <= 0 will be the start of the file.
        """
        startLine: Int
        """
        Return richHTML content ending at line "endLine". A value < 0 or > totalLines will set endLine to the end of the file.
        """
        endLine: Int
    ): String!
    """
    The URL to this file (using the input revision specifier, which may not be immutable).
    """
    url: String!
    """
    The canonical URL to this file (using an immutable revision specifier).
    """
    canonicalURL: String!
    """
    The URLs to this file on external services.
    """
    externalURLs: [ExternalLink!]!
    """
    Highlight the file.
    """
    highlight(
        disableTimeout: Boolean!
        isLightTheme: Boolean
            @deprecated(reason: "Not required anymore, highlighting is based on dynamic CSS variables now.")
        """
        If highlightLongLines is true, lines which are longer than 2000 bytes are highlighted.
        2000 bytes is enabled. This may produce a significant amount of HTML
        which some browsers (such as Chrome, but not Firefox) may have trouble
        rendering efficiently.
        """
        highlightLongLines: Boolean = false
        """
        Specifies which format/highlighting technique to use.
        """
        format: HighlightResponseFormat = HTML_HIGHLIGHT
        """
        Return highlight content starting at line "startLine". A value <= 0 will be the start of the file.
        Warning: Pagination only works with the HTML_PLAINTEXT format type at the moment.
        """
        startLine: Int
        """
        Return highlight content ending at line "endLine". A value < 0 or > totalLines will set endLine to the end of the file.
        Warning: Pagination only works with the HTML_PLAINTEXT format type at the moment.
        """
        endLine: Int
    ): HighlightedFile!
}
