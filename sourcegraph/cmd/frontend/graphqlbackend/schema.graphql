# See docs/api.md for guidance on schema evolution.
#
schema {
    query: Query
    mutation: Mutation
}

"""
This type is not returned by any resolver, but serves to document what an error
response will look like.
"""
type Error {
    """
    A string giving more context about the error that occurred.
    """
    message: String!
    """
    The GraphQL path to where the error happened. For an error in the query
    query {
        user {
            externalID # This is a nullable field that failed computing.
        }
    }
    the path would be ["user", "externalID"].
    """
    path: [String!]!
    """
    Optional additional context on the error.
    """
    extensions: ErrorExtensions
}

"""
Optional additional context on an error returned from a resolver.
It may also contain more properties, which aren't strictly typed here.
"""
type ErrorExtensions {
    """
    An error code, which can be asserted on.
    Possible error codes are communicated in the doc string of the field.
    """
    code: String
}

"""
Represents a null return value.
"""
type EmptyResponse {
    """
    A dummy null value.
    """
    alwaysNil: String
}

"""
An object with an ID.
"""
interface Node {
    """
    The ID of the node.
    """
    id: ID!
}

"""
A valid JSON value.
"""
scalar JSONValue

"""
A string that contains valid JSON, with additional support for //-style comments and trailing commas.
"""
scalar JSONCString

"""
A mutation.
"""
type Mutation {
    """
    INTERNAL ONLY: Sets the value of versions.auto_upgrade in the frontend db.
    Determines behavior of multiversion upgrades.

    Only site admins may perform this mutation.
    """
    setAutoUpgrade(enable: Boolean!): EmptyResponse!
    """
    Updates the user profile information for the user with the given ID.

    Only the user and site admins may perform this mutation.
    """
    updateUser(user: ID!, username: String, displayName: String, avatarURL: String): User!
    """
    Creates an organization. The caller is added as a member of the newly created organization.

    Only authenticated users may perform this mutation.
    """
    createOrganization(name: String!, displayName: String, statsID: ID): Org!
    """
    Updates an organization.

    Only site admins and any member of the organization may perform this mutation.
    """
    updateOrganization(id: ID!, displayName: String): Org!
    """
    Soft deletes an organization.

    Only site admins may perform this mutation.
    """
    deleteOrganization(organization: ID!): EmptyResponse

    """
    Creates a webhook for the specified code host. Only site admins may perform this mutation.
    """
    createWebhook(name: String!, codeHostKind: String!, codeHostURN: String!, secret: String): Webhook!

    """
    Deletes a webhook by given ID. Only site admins may perform this mutation.
    """
    deleteWebhook(id: ID!): EmptyResponse!

    """
    Updates a webhook with given ID. Null values aren't updated.
    """
    updateWebhook(id: ID!, name: String, codeHostKind: String, codeHostURN: String, secret: String): Webhook!

    """
    Adds a external service. Only site admins may perform this mutation.
    """
    addExternalService(input: AddExternalServiceInput!): ExternalService!
    """
    Updates a external service. Only site admins may perform this mutation.
    """
    updateExternalService(input: UpdateExternalServiceInput!): ExternalService!
    """
    Delete an external service. Only site admins may perform this mutation.
    """
    deleteExternalService(externalService: ID!, async: Boolean = false): EmptyResponse!
    """
    Excludes a repo from external services configs. Only site admins may perform this mutation.
    """
    excludeRepoFromExternalServices(externalServices: [ID!]!, repo: ID!): EmptyResponse!
    """
    Tests the connection to a mirror repository's original source repository. This is an
    expensive and slow operation, so it should only be used for interactive diagnostics.

    Only site admins may perform this mutation.
    """
    checkMirrorRepositoryConnection(
        """
        The ID of the existing repository whose mirror to check.
        """
        repository: ID
        """
        The name of a repository whose mirror to check. If the name is provided, the repository need not be added
        to the site (but the site configuration must define a code host that knows how to handle the name).
        """
        name: String
    ): CheckMirrorRepositoryConnectionResult!
    """
    Schedule the mirror repository to be updated from its original source repository. Updating
    occurs automatically, so this should not normally be needed.

    Only site admins may perform this mutation.
    """
    updateMirrorRepository(
        """
        The mirror repository to update.
        """
        repository: ID!
    ): EmptyResponse!
    """
    Force Zoekt to reindex the repository right now. Reindexing occurs
    automatically, so this should not normally be needed.
    """
    reindexRepository(
        """
        The repository to index
        """
        repository: ID!
    ): EmptyResponse!

    """
    Creates a new user account.

    Only site admins may perform this mutation.
    """
    # ðŸš§ CLOUD: This mutation is used by Cloud automation - please do not
    # introduce any breaking changes, and let new parameters be optional with
    # reasonable defaults instead.
    createUser(
        """
        The new user's username.
        """
        username: String!
        """
        The new user's optional email address. If given, it must be verified by the user.
        """
        email: String
        """
        Whether or not to mark the provided email address as verified. If unset or set to
        true, then the email address is immediately marked as verified - otherwise, the
        email may be marked as unverified if SMTP and password resets are enabled.
        """
        verifiedEmail: Boolean
    ): CreateUserResult!
    """
    Randomize a user's password so that they need to reset it before they can sign in again.

    Only site admins may perform this mutation.
    """
    # ðŸš§ CLOUD: This mutation is used by Cloud automation - please do not
    # introduce any breaking changes, and let new parameters be optional with
    # reasonable defaults instead.
    randomizeUserPassword(user: ID!): RandomizeUserPasswordResult!
    """
    Adds an email address to the user's account. The email address will be marked as unverified until the user
    has followed the email verification process.

    Only the user and site admins may perform this mutation.
    """
    addUserEmail(user: ID!, email: String!): EmptyResponse!
    """
    Removes an email address from the user's account.

    Only the user and site admins may perform this mutation.
    """
    removeUserEmail(user: ID!, email: String!): EmptyResponse!
    """
    Set an email address as the user's primary.

    Only the user and site admins may perform this mutation.
    """
    setUserEmailPrimary(user: ID!, email: String!): EmptyResponse!
    """
    Manually set the verification status of a user's email, without going through the normal verification process
    (of clicking on a link in the email with a verification code).

    Only site admins may perform this mutation.
    """
    setUserEmailVerified(user: ID!, email: String!, verified: Boolean!): EmptyResponse!
    """
    Resend a verification email, no op if the email is already verified.

    Only the user and site admins may perform this mutation.
    """
    resendVerificationEmail(user: ID!, email: String!): EmptyResponse!
    """
    Deletes a user account. Only site admins may perform this mutation.

    If hard == true, a hard delete is performed. By default, deletes are
    'soft deletes' and could theoretically be undone with manual DB commands.
    If a hard delete is performed, the data is truly removed from the
    database and deletion can NEVER be undone.

    Data that is deleted as part of this operation:

    - All user data (access tokens, email addresses, external account info, survey responses, etc)
    - Organization membership information (which organizations the user is a part of, any invitations created by or targeting the user).
    - User, Organization, or Global settings authored by the user.
    """
    deleteUser(user: ID!, hard: Boolean): EmptyResponse
    """
    Bulk "deleteUser" action.
    """
    deleteUsers(users: [ID!]!, hard: Boolean): EmptyResponse
    """
    Bulk "recoverUser" action.
    """
    recoverUsers(userIDs: [ID!]!): EmptyResponse
    """
    Updates the current user's password. The oldPassword arg must match the user's current password.
    """
    updatePassword(oldPassword: String!, newPassword: String!): EmptyResponse
    """
    Creates a password for the current user. It is only permitted if the user does not have a password.
    """
    createPassword(newPassword: String!): EmptyResponse
    """
    Sets the user to accept the site's Terms of Service and Privacy Policy.
    If the ID is omitted, the current user is assumed.

    Only the user or site admins may perform this mutation.
    """
    setTosAccepted(userID: ID): EmptyResponse!
    """
    Current user opt in/out from being searchable in the users picker.
    """
    setSearchable(searchable: Boolean!): EmptyResponse!
    """
    Creates an access token that grants the privileges of the specified user (referred to as the access token's
    "subject" user after token creation). The result is the access token value, which the caller is responsible
    for storing (it is not accessible by Sourcegraph after creation).

    The supported scopes are:

    - "user:all": Full control of all resources accessible to the user account.
    - "site-admin:sudo": Ability to perform any action as any other user. (Only site admins may create tokens
      with this scope.)

    Only the user or site admins may perform this mutation.
    """
    # ðŸš§ CLOUD: This mutation is used by Cloud automation - please do not
    # introduce any breaking changes, and let new parameters be optional with
    # reasonable defaults instead.
    createAccessToken(user: ID!, scopes: [String!]!, note: String!): CreateAccessTokenResult!
    """
    Deletes and immediately revokes the specified access token, specified by either its ID or by the token
    itself.

    Only site admins or the user who owns the token may perform this mutation.
    """
    # ðŸš§ CLOUD: This mutation is used by Cloud automation - please do not
    # introduce any breaking changes, and let new parameters be optional with
    # reasonable defaults instead.
    deleteAccessToken(byID: ID, byToken: String): EmptyResponse!
    """
    Deletes the association between an external account and its Sourcegraph user. It does NOT delete the external
    account on the external service where it resides.

    Only site admins or the user who is associated with the external account may perform this mutation.
    """
    deleteExternalAccount(externalAccount: ID!): EmptyResponse!
    """
    Adds an external account to the authenticated user's account. The service type and service ID
    must correspond to a valid auth provider on the site. The account details must be a stringified
    JSON object that contains valid credentials for the provided service type.
    """
    # ðŸš§ CLOUD: This mutation is used by Cloud automation - please do not
    # introduce any breaking changes, and let new parameters be optional with
    # reasonable defaults instead.
    addExternalAccount(serviceType: String!, serviceID: String!, accountDetails: String!): EmptyResponse!
    """
    Sends an invitation to join Sourcegraph to the given email address.

    Returns instantly regardless of whether or not an invitation email was actually sent. For example, the email
    may fail to send if there is a typo or it is invalid, or Sourcegraph may refuse to send it due to spam concerns
    or if the user has been invited too recently.
    """
    inviteEmailToSourcegraph(email: String!): EmptyResponse!
    """
    Invite the user with the given username to join the organization. The invited user account must already
    exist.

    Only site admins and any organization member may perform this mutation.
    """
    inviteUserToOrganization(organization: ID!, username: String, email: String): InviteUserToOrganizationResult!
    """
    Accept or reject an existing organization invitation.

    Only the recipient of the invitation may perform this mutation.
    """
    respondToOrganizationInvitation(
        """
        The organization invitation.
        """
        organizationInvitation: ID!
        """
        The response to the invitation.
        """
        responseType: OrganizationInvitationResponseType!
    ): EmptyResponse!
    """
    Resend the notification about an organization invitation to the recipient.

    Only site admins and any member of the organization may perform this mutation.
    """
    resendOrganizationInvitationNotification(
        """
        The organization invitation.
        """
        organizationInvitation: ID!
    ): EmptyResponse!
    """
    Revoke an existing organization invitation.

    If the invitation has been accepted or rejected, it may no longer be revoked. After an
    invitation is revoked, the recipient may not accept or reject it. Both cases yield an error.

    Only site admins and any member of the organization may perform this mutation.
    """
    revokeOrganizationInvitation(
        """
        The organization invitation.
        """
        organizationInvitation: ID!
    ): EmptyResponse!
    """
    Immediately add a user as a member to the organization, without sending an invitation email.

    Only site admins may perform this mutation. Organization members may use the inviteUserToOrganization
    mutation to invite users.
    """
    addUserToOrganization(organization: ID!, username: String!): EmptyResponse!
    """
    Removes a user as a member from an organization.

    Only site admins and any member of the organization may perform this mutation.
    """
    removeUserFromOrganization(user: ID!, organization: ID!): EmptyResponse
    """
    Adds a Phabricator repository to Sourcegraph.
    """
    addPhabricatorRepo(
        """
        The callsign, for example "MUX".
        """
        callsign: String!
        """
        The name, for example "github.com/gorilla/mux".
        """
        name: String
        """
        An alias for name. DEPRECATED: use name instead.
        """
        uri: String
        """
        The URL to the phabricator instance (e.g. http://phabricator.sgdev.org).
        """
        url: String!
    ): EmptyResponse
    """
    Resolves a revision for a given diff from Phabricator.
    """
    resolvePhabricatorDiff(
        """
        The name of the repository that the diff is based on.
        """
        repoName: String!
        """
        The ID of the diff on Phabricator.
        """
        diffID: ID!
        """
        The base revision this diff is based on.
        """
        baseRev: String!
        """
        The raw contents of the diff from Phabricator.
        Required if Sourcegraph doesn't have a Conduit API token.
        """
        patch: String
        """
        The description of the diff. This will be used as the commit message.
        """
        description: String
        """
        The name of author of the diff.
        """
        authorName: String
        """
        The author's email.
        """
        authorEmail: String
        """
        When the diff was created.
        """
        date: String
    ): GitCommit
    """
    Logs a user event. No longer used, only here for backwards compatibility with IDE and browser extensions.
    """
    logUserEvent(event: UserEvent!, userCookieID: String!): EmptyResponse @deprecated(reason: "use logEvent instead")
    """
    Logs an event.
    """
    logEvent(
        """
        The name of the event.
        """
        event: String!
        """
        The randomly generated unique user ID stored in a browser cookie.
        """
        userCookieID: String!
        """
        The first sourcegraph URL visited by the user, stored in a browser cookie.
        """
        firstSourceURL: String
        """
        The last sourcegraph URL visited by the user, stored in a browser cookie.
        """
        lastSourceURL: String
        """
        The URL when the event was logged.
        """
        url: String!
        """
        The source of the event.
        """
        source: EventSource!
        """
        An optional cohort ID to identify the user as part of a specific A/B test.
        The cohort ID is expected to be a date in the form YYYY-MM-DD
        """
        cohortID: String
        """
        An optional referrer parameter for the user's current session.
        Only captured and stored on Sourcegraph Cloud.
        """
        referrer: String
        """
        The original referrer for a user
        """
        originalReferrer: String
        """
        The session referrer for a user
        """
        sessionReferrer: String
        """
        The sessions first url for a user
        """
        sessionFirstURL: String
        """
        Device session ID to identify the user's session for analytics.
        """
        deviceSessionID: String
        """
        The additional argument information.
        """
        argument: String
        """
        Public argument information. PRIVACY: Do NOT include any potentially private information in this field.
        These properties get sent to our analytics tools for Cloud, so must not include private information,
        such as search queries or repository names.
        """
        publicArgument: String
        """
        Device ID used for Amplitude analytics. Used on Sourcegraph Cloud only.
        """
        deviceID: String
        """
        Event ID used to deduplicate events that occur simultaneously in Amplitude analytics.
        See https://developers.amplitude.com/docs/http-api-v2#optional-keys. Used on Sourcegraph Cloud only.
        """
        eventID: Int
        """
        Insert ID used to deduplicate events that re-occur in the event of retries or
        backfills in Amplitude analytics. See https://developers.amplitude.com/docs/http-api-v2#optional-keys.
        Used on Sourcegraph Cloud only.
        """
        insertID: String
    ): EmptyResponse
    """
    Logs a batch of events.
    """
    logEvents(events: [Event!]): EmptyResponse
    """
    All mutations that update settings (global, organization, and user settings) are under this field.

    Only the settings subject whose settings are being mutated (and site admins) may perform this mutation.

    This mutation only affects global, organization, and user settings, not site configuration. For site
    configuration (which is a separate set of configuration properties from global/organization/user settings),
    use updateSiteConfiguration.
    """
    settingsMutation(input: SettingsMutationGroupInput!): SettingsMutation
    """
    DEPRECATED: Use settingsMutation instead. This field is a deprecated alias for settingsMutation and will be
    removed in a future release.
    """
    configurationMutation(input: SettingsMutationGroupInput!): SettingsMutation
        @deprecated(reason: "use settingsMutation instead")
    """
    Updates the site configuration. Returns whether or not a restart is required for the update to be applied.

    Only site admins may perform this mutation.
    """
    # ðŸš§ CLOUD: This mutation is used by Cloud automation - please do not
    # introduce any breaking changes, and let new parameters be optional with
    # reasonable defaults instead.
    updateSiteConfiguration(
        """
        The last ID of the site configuration that is known by the client, to
        prevent race conditions. An error will be returned if someone else
        has already written a new update.
        """
        lastID: Int!
        """
        A JSON object containing the entire site configuration. The previous site configuration will be replaced
        with this new value.
        """
        input: String!
    ): Boolean!
    """
    Sets whether the user with the specified user ID is a site admin.

    Only site admins may perform this mutation.
    """
    # ðŸš¨ SECURITY: Only trusted users should be given site admin permissions.
    # Site admins have full access to the site configuration and other
    # sensitive data, and they can perform destructive actions such as
    # restarting the site.
    # ðŸš§ CLOUD: This mutation is used by Cloud automation - please do not
    # introduce any breaking changes, and let new parameters be optional with
    # reasonable defaults instead.
    setUserIsSiteAdmin(userID: ID!, siteAdmin: Boolean!): EmptyResponse
    """
    Invalidates all sessions belonging to a user.

    Only site admins may perform this mutation.
    """
    invalidateSessionsByID(userID: ID!): EmptyResponse
    """
    Bulk "invalidateSessionsByID" action.
    """
    invalidateSessionsByIDs(userIDs: [ID!]!): EmptyResponse
    """
    Reloads the site by restarting the server. This is not supported for all deployment
    types. This may cause downtime.

    Only site admins may perform this mutation.
    """
    reloadSite: EmptyResponse
    """
    Submits a user satisfaction (NPS) survey.
    """
    submitSurvey(input: SurveySubmissionInput!): EmptyResponse
    """
    Submits happiness feedback.
    """
    submitHappinessFeedback(input: HappinessFeedbackSubmissionInput!): EmptyResponse
    """
    Creates a saved search.
    """
    createSavedSearch(
        description: String!
        query: String!
        notifyOwner: Boolean!
        notifySlack: Boolean!
        orgID: ID
        userID: ID
    ): SavedSearch!
    """
    Updates a saved search
    """
    updateSavedSearch(
        id: ID!
        description: String!
        query: String!
        notifyOwner: Boolean!
        notifySlack: Boolean!
        orgID: ID
        userID: ID
    ): SavedSearch!
    """
    Deletes a saved search
    """
    deleteSavedSearch(id: ID!): EmptyResponse

    """
    OBSERVABILITY

    Set the status of a test alert of the specified parameters - useful for validating
    'observability.alerts' configuration. Alerts may take up to a minute to fire.
    """
    triggerObservabilityTestAlert(
        """
        Level of alert to test - either warning or critical.
        """
        level: String!
    ): EmptyResponse!

    """
    Updates an out-of-band migration to run in a particular direction.

    Applied in the forward direction, an out-of-band migration migrates data into a format that
    is readable by newer Sourcegraph instances. This may be destructive or non-destructive process,
    depending on the nature and implementation of the migration.

    Applied in the reverse direction, an out-of-band migration ensures that data is moved back into
    a format that is readable by the previous Sourcegraph instance. Recently introduced migrations
    should be applied in reverse prior to downgrading the instance.
    """
    setMigrationDirection(id: ID!, applyReverse: Boolean!): EmptyResponse!

    """
    EXPERIMENTAL: Create a new feature flag
    """
    # ðŸš§ CLOUD: This mutation is used by Cloud automation - please do not
    # introduce any breaking changes, and let new parameters be optional with
    # reasonable defaults instead.
    createFeatureFlag(
        """
        The name of the feature flag
        """
        name: String!

        """
        The value of the feature flag. Only set if the new feature flag
        will be a concrete boolean flag. Mutually exclusive with rolloutBasisPoints.
        """
        value: Boolean

        """
        The ratio of users the feature flag will apply to, expressed in basis points (0.01%).
        Only set if the new feature flag will be a rollout flag.
        Mutually exclusive with value.
        """
        rolloutBasisPoints: Int
    ): FeatureFlag!

    """
    EXPERIMENTAL: Delete a feature flag
    """
    # ðŸš§ CLOUD: This mutation is used by Cloud automation - please do not
    # introduce any breaking changes, and let new parameters be optional with
    # reasonable defaults instead.
    deleteFeatureFlag(
        """
        The name of the feature flag
        """
        name: String!
    ): EmptyResponse!

    """
    EXPERIMENTAL: Update a feature flag
    """
    # ðŸš§ CLOUD: This mutation is used by Cloud automation - please do not
    # introduce any breaking changes, and let new parameters be optional with
    # reasonable defaults instead.
    updateFeatureFlag(
        """
        The name of the feature flag
        """
        name: String!

        """
        The value of the feature flag. Only set if the new feature flag
        will be a concrete boolean flag. Mutually exclusive with rollout.
        """
        value: Boolean

        """
        The ratio of users the feature flag will apply to, expressed in basis points (0.01%).
        Mutually exclusive with value.
        """
        rolloutBasisPoints: Int
    ): FeatureFlag!

    """
    EXPERIMENTAL: Create a new feature flag override for the given org or user
    """
    createFeatureFlagOverride(
        """
        The namespace for this feature flag. Must be either a user ID or an org ID.
        """
        namespace: ID!

        """
        The name of the feature flag this override applies to
        """
        flagName: String!

        """
        The overridden value
        """
        value: Boolean!
    ): FeatureFlagOverride!

    """
    Delete a feature flag override
    """
    deleteFeatureFlagOverride(
        """
        The ID of the feature flag override to delete
        """
        id: ID!
    ): EmptyResponse!

    """
    Update a feature flag override
    """
    updateFeatureFlagOverride(
        """
        The ID of the feature flag override to update
        """
        id: ID!

        """
        The updated value of the feature flag override
        """
        value: Boolean!
    ): FeatureFlagOverride!

    """
    Overwrites and saves the temporary settings for the current user.
    If temporary settings for the user do not exist, they are created.
    """
    overwriteTemporarySettings(
        """
        The new temporary settings for the current user, as a JSON string.
        """
        contents: String!
    ): EmptyResponse!

    """
    Merges the given settings edit with the current temporary settings for the current user.
    Keys in the given edit take priority over key in the temporary settings. The merge is
    not recursive.
    If temporary settings for the user do not exist, they are created.
    """
    editTemporarySettings(
        """
        The settings to merge with the current temporary settings for the current user, as a JSON string.
        """
        settingsToEdit: String!
    ): EmptyResponse!

    """
    Sends an email for testing Sourcegraph's email configuration.

    Only administrators can use this API.
    """
    # ðŸš§ CLOUD: This mutation is used by Cloud automation - please do not
    # introduce any breaking changes, and let new parameters be optional with
    # reasonable defaults instead.
    sendTestEmail(to: String!): String!

    """
    Enqueues a sync for the external service. It will be picked up in the background.

    Site-admin or owner of the external service only.
    """
    syncExternalService(id: ID!): EmptyResponse!

    """
    Cancels an external service sync job. Must be in queued or processing state.

    Site-admin or owner of the external service only.
    """
    cancelExternalServiceSync(id: ID!): EmptyResponse!

    """
    Associate a new key-value pair with a repo.
    """
    addRepoKeyValuePair(repo: ID!, key: String!, value: String): EmptyResponse!
        @deprecated(
            reason: "Use addRepoMetadata instead. This field is a deprecated and will be removed in a future release."
        )

    """
    Associate a new key-value pair metadata with a repo.
    """
    addRepoMetadata(repo: ID!, key: String!, value: String): EmptyResponse!

    """
    Update a key-value pair associated with a repo.
    """
    updateRepoKeyValuePair(repo: ID!, key: String!, value: String): EmptyResponse!
        @deprecated(
            reason: "Use updateRepoMetadata instead. This field is a deprecated and will be removed in a future release."
        )

    """
    Update metadata value for a given metadata key for associated with a repo.
    """
    updateRepoMetadata(repo: ID!, key: String!, value: String): EmptyResponse!

    """
    Delete a key-value pair associated with a repo.
    """
    deleteRepoKeyValuePair(repo: ID!, key: String!): EmptyResponse!
        @deprecated(
            reason: "Use deleteRepoMetadata instead. This field is a deprecated and will be removed in a future release."
        )

    """
    Delete a key-value pair metadata associated with a repo.
    """
    deleteRepoMetadata(repo: ID!, key: String!): EmptyResponse!

    """
    INTERNAL ONLY: Reclone a repository from the gitserver. This involves deleting
    the file on disk, marking it as not-cloned in the database, and then initiating
    a repo clone.
    """
    recloneRepository(repo: ID!): EmptyResponse!

    """
    INTERNAL ONLY: Delete a repository from the gitserver. This involves deleting
    the file on disk, and marking it as not-cloned in the database.
    """
    deleteRepositoryFromDisk(repo: ID!): EmptyResponse!

    """
    Create a new package repo reference filter.
    """
    addPackageRepoFilter(
        """
        Whether the matcher should be for allowlisting or blocklisting.
        """
        behaviour: PackageMatchBehaviour!
        """
        The ecosystem of the package repo reference this matcher should apply to.
        Maps to the external service whos config would be updated when used in the
        set query.
        """
        kind: PackageRepoReferenceKind!
        """
        The package repo reference matcher to persist.
        """
        filter: PackageVersionOrNameFilterInput!
    ): PackageFilter!

    """
    Updates a package repo reference filter.
    """
    updatePackageRepoFilter(
        """
        The ID of the package repo reference filter to update.
        """
        id: ID!

        behaviour: PackageMatchBehaviour!
        """
        The ecosystem of the package repo reference this matcher should apply to.
        Maps to the external service whos config would be updated when used in the
        set query.
        """
        kind: PackageRepoReferenceKind!

        filter: PackageVersionOrNameFilterInput!
    ): EmptyResponse!

    """
    Deletes a package repo reference filter.
    """
    deletePackageRepoFilter(id: ID!): EmptyResponse!

    """
    Sets the completions requests quota for the user per day. Quota: Null means
    use the default quota.
    """
    setUserCompletionsQuota(user: ID!, quota: Int): User!
    """
    Sets the code completions requests quota for the user per day. Quota: Null means
    use the default quota.
    """
    setUserCodeCompletionsQuota(user: ID!, quota: Int): User!
    """
    Submits a post-signup user survey about intended Cody usage.
    """
    submitCodySurvey(isForWork: Boolean!, isForPersonal: Boolean!): EmptyResponse!
}

"""
A description of a user event.
"""
input Event {
    """
    The name of the event.
    """
    event: String!
    """
    The randomly generated unique user ID stored in a browser cookie.
    """
    userCookieID: String!
    """
    The first sourcegraph URL visited by the user, stored in a browser cookie.
    """
    firstSourceURL: String
    """
    The last sourcegraph URL visited by the user, stored in a browser cookie.
    """
    lastSourceURL: String
    """
    The URL when the event was logged.
    """
    url: String!
    """
    The source of the event.
    """
    source: EventSource!
    """
    An optional cohort ID to identify the user as part of a specific A/B test.
    The cohort ID is expected to be a date in the form YYYY-MM-DD
    """
    cohortID: String
    """
    An optional referrer parameter for the user's current session.
    Only captured and stored on Sourcegraph Cloud.
    """
    referrer: String
    """
    The original referrer for a user
    """
    originalReferrer: String
    """
    The session referrer for a user
    """
    sessionReferrer: String
    """
    The sessions first url for a user
    """
    sessionFirstURL: String
    """
    Device session ID to identify the user's session for analytics.
    """
    deviceSessionID: String
    """
    The additional argument information.
    """
    argument: String
    """
    Public argument information. PRIVACY: Do NOT include any potentially private information in this field.
    These properties get sent to our analytics tools for Cloud, so must not include private information,
    such as search queries or repository names.
    """
    publicArgument: String
    """
    Device ID used for Amplitude analytics. Used on Sourcegraph Cloud only.
    """
    deviceID: String
    """
    Event ID used to deduplicate events that occur simultaneously in Amplitude analytics.
    See https://developers.amplitude.com/docs/http-api-v2#optional-keys. Used on Sourcegraph Cloud only.
    """
    eventID: Int
    """
    Insert ID used to deduplicate events that re-occur in the event of retries or
    backfills in Amplitude analytics. See https://developers.amplitude.com/docs/http-api-v2#optional-keys.
    Used on Sourcegraph Cloud only.
    """
    insertID: String
}

"""
A new external service.
"""
input AddExternalServiceInput {
    """
    The kind of the external service.
    """
    kind: ExternalServiceKind!
    """
    The display name of the external service.
    """
    displayName: String!
    """
    The JSON configuration of the external service.
    """
    config: String!
    """
    The namespace this external service belongs to.
    This can be used both for a user and an organization.
    """
    namespace: ID
}

"""
Fields to update for an existing external service.
"""
input UpdateExternalServiceInput {
    """
    The id of the external service to update.
    """
    id: ID!
    """
    The updated display name, if provided.
    """
    displayName: String
    """
    The updated config, if provided.
    """
    config: String
}

"""
Describes options for rendering Markdown.
"""
input MarkdownOptions {
    """
    A dummy null value (empty input types are not allowed yet).
    """
    alwaysNil: String
}

"""
The product sources where events can come from.
"""
enum EventSource {
    WEB
    CODEHOSTINTEGRATION
    BACKEND
    STATICWEB
    IDEEXTENSION
    CODY
}

"""
Input for Mutation.settingsMutation, which contains fields that all settings (global, organization, and user
settings) mutations need.
"""
input SettingsMutationGroupInput {
    # ðŸš§ CLOUD: This mutation is used by Cloud automation - please do not
    # introduce any breaking changes, and let new parameters be optional with
    # reasonable defaults instead.
    """
    The subject whose settings to mutate (organization, user, etc.).
    """
    subject: ID!
    """
    The ID of the last-known settings known to the client, or null if there is none. This field is used to
    prevent race conditions when there are concurrent editors.
    """
    lastID: Int
}

"""
Mutations that update settings (global, organization, or user settings). These mutations are grouped together
because they:
- are all versioned to avoid race conditions with concurrent editors
- all apply to a specific settings subject (i.e., a user, an organization, or the whole site)

Grouping them lets us extract those common parameters to the Mutation.settingsMutation field.
"""
type SettingsMutation {
    """
    Edit a single property in the settings object.
    """
    editSettings(
        """
        The edit to apply to the settings.
        """
        edit: SettingsEdit!
    ): UpdateSettingsPayload
    """
    DEPRECATED
    """
    editConfiguration(edit: ConfigurationEdit!): UpdateSettingsPayload
        @deprecated(
            reason: "Use editSettings instead. This field is a deprecated alias for it and will be removed in a future release."
        )
    """
    Overwrite the existing settings with the new settings.
    """
    overwriteSettings(
        """
        A JSON object (stringified) of the settings. Trailing commas and "//"-style comments are supported. The
        entire previous settings value will be overwritten by this new value.
        """
        contents: String!
    ): UpdateSettingsPayload
}

"""
An edit to a JSON property in a settings JSON object. The JSON property to edit can be nested.
"""
input SettingsEdit {
    """
    The key path of the property to update.

    Inserting into an existing array is not yet supported.
    """
    keyPath: [KeyPathSegment!]!
    """
    The new JSON-encoded value to insert. If the field's value is not set, the property is removed. (This is
    different from the field's value being the JSON null value.)

    When the value is a non-primitive type, it must be specified using a GraphQL variable, not an inline literal,
    or else the GraphQL parser will return an error.
    """
    value: JSONValue
    """
    Whether to treat the value as a JSONC-encoded string, which makes it possible to perform an edit that
    preserves (or adds/removes) comments.
    """
    valueIsJSONCEncodedString: Boolean = false
}

"""
DEPRECATED: This type was renamed to SettingsEdit.
NOTE: GraphQL does not support @deprecated directives on INPUT_FIELD_DEFINITION (input fields).
"""
input ConfigurationEdit {
    """
    DEPRECATED
    """
    keyPath: [KeyPathSegment!]!
    """
    DEPRECATED
    """
    value: JSONValue
    """
    DEPRECATED
    """
    valueIsJSONCEncodedString: Boolean = false
}

"""
A segment of a key path that locates a nested JSON value in a root JSON value. Exactly one field in each
KeyPathSegment must be non-null.
For example, in {"a": [0, {"b": 3}]}, the value 3 is located at the key path ["a", 1, "b"].
"""
input KeyPathSegment {
    """
    The name of the property in the object at this location to descend into.
    """
    property: String
    """
    The index of the array at this location to descend into.
    """
    index: Int
}

"""
The payload for SettingsMutation.updateConfiguration.
"""
type UpdateSettingsPayload {
    """
    An empty response.
    """
    empty: EmptyResponse
}

"""
The result for Mutation.createAccessToken.
"""
type CreateAccessTokenResult {
    """
    The ID of the newly created access token.
    """
    id: ID!
    """
    The secret token value that is used to authenticate API clients. The caller is responsible for storing this
    value.
    """
    token: String!
}

"""
The result for Mutation.checkMirrorRepositoryConnection.
"""
type CheckMirrorRepositoryConnectionResult {
    """
    The error message encountered during the update operation, if any. If null, then
    the connection check succeeded.
    """
    error: String
}
"""
The result for Mutation.createUser.
"""
type CreateUserResult {
    """
    The new user.
    """
    user: User!
    """
    The reset password URL that the new user must visit to sign into their account. If the builtin
    username-password authentication provider is not enabled, this field's value is null.

    If email sending (SMTP) is configured on this instance and an email was provided, an email
    containing this URL will also be sent to the primary email address associated with the user.
    """
    resetPasswordURL: String
}

"""
The result for Mutation.randomizeUserPassword.
"""
type RandomizeUserPasswordResult {
    """
    The reset password URL that the user must visit to sign into their account again. If the builtin
    username-password authentication provider is not enabled, this field's value is null.

    If email sending (SMTP) is configured on this instance, an email containing this URL
    will also be sent to the primary email address associated with the user.
    """
    resetPasswordURL: String
    """
    If true, then an email with the password reset URL was sent to the primary email
    address associated with the user. If false, email sending (SMTP) might not be configured
    on this instance, or an error may have occurred - check the error logs with log scope
    'randomizeUserPassword' for more details.
    """
    emailSent: Boolean!
}

"""
Possible answers to "You use Sourcegraph to..." in the NPS Survey.
"""
enum SurveyUseCase {
    UNDERSTAND_NEW_CODE
    FIX_SECURITY_VULNERABILITIES
    REUSE_CODE
    RESPOND_TO_INCIDENTS
    IMPROVE_CODE_QUALITY
}

"""
Input for a user satisfaction (NPS) survey submission.
"""
input SurveySubmissionInput {
    """
    User-provided email address, if there is no currently authenticated user. If there is, this value
    will not be used.
    """
    email: String
    """
    User's likelihood of recommending Sourcegraph to a friend, from 0-10.
    """
    score: Int!
    """
    The answer to "What do you use Sourcegraph for?".
    """
    otherUseCase: String
    """
    The answer to "What would make Sourcegraph better?"
    """
    better: String
}

"""
Input for a happiness feedback submission.
"""
input HappinessFeedbackSubmissionInput {
    """
    The feedback text from the user.
    """
    feedback: String
    """
    The path that the happiness feedback will be submitted from.
    """
    currentPath: String
}

"""
A query.
"""
type Query {
    """
    The root of the query.
    """
    root: Query! @deprecated(reason: "this will be removed.")
    """
    Looks up a node by ID.
    """
    node(id: ID!): Node

    """
    Looks up a repository by either name or cloneURL.
    """
    repository(
        """
        Query the repository by name, for example "github.com/gorilla/mux".
        """
        name: String
        """
        Query the repository by a Git clone URL (format documented here: https://git-scm.com/docs/git-clone_git_urls_a_id_urls_a)
        by checking for a code host configuration that matches the clone URL.
        Will not actually check the code host to see if the repository actually exists.
        """
        cloneURL: String
        """
        An alias for name. DEPRECATED: use name instead.
        """
        uri: String
    ): Repository
    """
    Looks up a repository by either name or cloneURL or hashedName. When the repository does not exist on the server
    and "disablePublicRepoRedirects" is "false" in the site configuration, it returns a Redirect to
    an external Sourcegraph URL that may have this repository instead. Otherwise, this query returns
    null.
    """
    repositoryRedirect(
        """
        Query the repository by name, for example "github.com/gorilla/mux".
        """
        name: String
        """
        Query the repository by a Git clone URL (format documented here: https://git-scm.com/docs/git-clone_git_urls_a_id_urls_a)
        by checking for a code host configuration that matches the clone URL.
        Will not actually check the code host to see if the repository actually exists.
        """
        cloneURL: String
        """
        Query the repository by hashed name.
        Hashed name is a SHA256 checksum of the absolute repo name in lower case,
        for example "github.com/sourcegraph/sourcegraph" -> "a6c905ceb7dec9a565945ceded8c7fa4154250df8b928fb40673b535d9a24c2f"
        """
        hashedName: String
    ): RepositoryRedirect
    """
    Lists external services under given namespace.
    If no namespace is given, it returns all external services.
    """
    externalServices(
        """
        Returns the first n external services from the list.
        """
        first: Int
        """
        Opaque pagination cursor.
        """
        after: String
    ): ExternalServiceConnection!
    """
    Lists all namespaces for a given external service connection.
    A namespace is an entity on the code host that repositories are assignable to.
    """
    externalServiceNamespaces(
        """
        The GraphQL ID of the external service whose configuration will be used to define the code host remote url to
        submit requests to and the token value to authenticate with.
        If no external service exists which provides the necessary request parameters then leave ID nil and
        provide kind, remote code host token and url.
        """
        id: ID
        """
        The kind of the external service.
        """
        kind: ExternalServiceKind!
        """
        The secret token value that is used to authenticate.
        """
        token: String!
        """
        The url of the external service.
        """
        url: String!
    ): ExternalServiceNamespaceConnection!
    """
    Lists all repositories for a given external service connection.
    """
    externalServiceRepositories(
        """
        The GraphQL ID of the external service whose configuration will be used to define the code host remote url to
        submit requests to and the token value to authenticate with.
        If no external service exists which provides the necessary request parameters then leave ID nil and
        provide kind, remote code host token and url.
        """
        id: ID
        """
        The kind of the external service.
        """
        kind: ExternalServiceKind!
        """
        The secret token value that is used to authenticate.
        """
        token: String!
        """
        The url of the external service.
        """
        url: String!
        """
        Repository query string.
        """
        query: String!
        """
        A list of repository names to exclude from results (in the form of owner/name).
        """
        excludeRepos: [String!]!
        """
        Returns the first n repositories matching the query and excludeRepos criteria.
        """
        first: Int
    ): ExternalServiceRepositoryConnection!
    """
    List all repositories.
    """
    repositories(
        """
        Returns the first n repositories from the list.
        """
        first: Int
        """
        Returns the last n repositories from the list.
        """
        last: Int
        """
        Return repositories whose names match the query.
        """
        query: String
        """
        An opaque cursor that is used for pagination.
        """
        after: String
        """
        An opaque cursor that is used for pagination.
        """
        before: String
        """
        Return repositories whose names are in the list.
        """
        names: [String!]
        """
        Include cloned repositories.
        """
        cloned: Boolean = true
        """
        Include only repositories of the given clone status.
        """
        cloneStatus: CloneStatus
        """
        Include repositories that are not yet cloned and for which cloning is not in progress.
        """
        notCloned: Boolean = true
        """
        Include repositories that have a text search index.
        """
        indexed: Boolean = true
        """
        Include repositories that do not have a text search index.
        """
        notIndexed: Boolean = true
        """
        Include only repositories that have encountered errors when cloning or fetching
        """
        failedFetch: Boolean = false
        """
        Include repositories that are corrupt
        """
        corrupted: Boolean = false
        """
        Return repositories that are associated with the given external service.
        """
        externalService: ID
        """
        Sort field.
        """
        orderBy: RepositoryOrderBy = REPOSITORY_NAME
        """
        Sort direction.
        """
        descending: Boolean = false
    ): NewRepositoryConnection!

    """
    Query package repo references.
    """
    packageRepoReferences(
        """
        The exact package repo reference kind to filter by.
        """
        kind: PackageRepoReferenceKind
        """
        If supplied, only package repo references that match the given
        terms by their name will be returned.
        TODO: fuzzy vs exact?
        """
        name: String
        """
        Returns the first n package repo references from the list.
        """
        first: Int
        """
        Opaque pagination cursor.
        """
        after: String
    ): PackageRepoReferenceConnection!

    """
    Query package repo reference filters.
    """
    packageRepoFilters(
        """
        Whether the matcher should be for allowlisting or blocklisting.
        """
        behaviour: PackageMatchBehaviour
        """
        The ecosystem of the package repo reference this matcher should apply to.
        Maps to the external service whos config would be updated when used in the
        set query.
        """
        kind: PackageRepoReferenceKind
    ): [PackageFilter!]

    """
    Returns either a list of package repo references,
    or the versions of a single package repo reference,
    that match the provided matcher.
    """
    packageRepoReferencesMatchingFilter(
        """
        The kind of the package repo reference this matcher should apply to.
        """
        kind: PackageRepoReferenceKind!
        """
        The matcher for which to return matching results.
        """
        filter: PackageVersionOrNameFilterInput!
        """
        Returns the first n package/package version matches from the list.
        """
        first: Int
        """
        Opaque pagination cursor.
        """
        after: String
    ): PackageRepoOrVersionConnection!

    """
    Looks up a Phabricator repository by name.
    """
    phabricatorRepo(
        """
        The name, for example "github.com/gorilla/mux".
        """
        name: String
        """
        An alias for name. DEPRECATED: use name instead.
        """
        uri: String
    ): PhabricatorRepo
    """
    The current user.
    """
    currentUser: User
    """
    Looks up a user by username or email address.
    """
    user(
        """
        Query the user by username.
        """
        username: String
        """
        Query the user by verified email address.
        """
        email: String
    ): User
    """
    List all users.
    """
    users(
        """
        Returns the first n users from the list.
        """
        first: Int
        """
        Opaque pagination cursor.
        """
        after: String
        """
        Return users whose usernames or display names match the query.
        """
        query: String
        """
        Returns users who have been active in a given period of time.
        """
        activePeriod: UserActivePeriod
        """
        Returns users who have NOT been active since a given point in time.
        """
        inactiveSince: DateTime
    ): UserConnection!
    """
    Looks up an organization by name.
    """
    organization(name: String!): Org
    """
    List all organizations.
    """
    organizations(
        """
        Returns the first n organizations from the list.
        """
        first: Int
        """
        Return organizations whose names or display names match the query.
        """
        query: String
    ): OrgConnection!
    """
    Renders Markdown to HTML. The returned HTML is already sanitized and
    escaped and thus is always safe to render.
    """
    renderMarkdown(markdown: String!, options: MarkdownOptions): String!
    """
    EXPERIMENTAL: Syntax highlights a code string.
    """
    highlightCode(
        code: String!
        fuzzyLanguage: String!
        disableTimeout: Boolean!
        isLightTheme: Boolean
            @deprecated(reason: "Not required anymore, highlighting is based on dynamic CSS variables now.")
    ): String!
    """
    Looks up an instance of a type that implements SettingsSubject (i.e., something that has settings). This can
    be a site (which has global settings), an organization, or a user.
    """
    settingsSubject(id: ID!): SettingsSubject
    """
    The settings for the viewer. The viewer is either an anonymous visitor (in which case viewer settings is
    global settings) or an authenticated user (in which case viewer settings are the user's settings).
    """
    viewerSettings: SettingsCascade!
    """
    DEPRECATED
    """
    viewerConfiguration: ConfigurationCascade! @deprecated(reason: "use viewerSettings instead")
    """
    The configuration for clients.
    """
    clientConfiguration: ClientConfigurationDetails!
    """
    Runs a search.
    """
    search(
        """
        The version of the search syntax being used.
        All new clients should use the latest version.
        """
        version: SearchVersion = V1
        """
        PatternType controls the search pattern type, if and only if it is not specified in the query string using
        the patternType: field.
        """
        patternType: SearchPatternType
        """
        The search query (such as "foo" or "repo:myrepo foo").
        """
        query: String = ""
    ): Search
    """
    List of saved searches based on namespace
    """
    savedSearches(
        """
        The namespace to list the saved searches for.
        """
        namespace: ID!
        """
        The limit argument for forward pagination.
        """
        first: Int
        """
        The limit argument for backward pagination.
        """
        last: Int
        """
        The cursor argument for forward pagination.
        """
        after: String
        """
        The cursor argument for backward pagination.
        """
        before: String
    ): SavedSearchesConnection!
    """
    EXPERIMENTAL: Return the parse tree of a search query.
    """
    parseSearchQuery(
        """
        The search query (such as "repo:myrepo foo").
        """
        query: String = ""
        """
        The parser to use for this query.
        """
        patternType: SearchPatternType = standard
        """
        The output corresponding to a phase in the parser pipeline.
        """
        outputPhase: SearchQueryOutputPhase = PARSE_TREE
        """
        The parser output format.
        """
        outputFormat: SearchQueryOutputFormat = JSON
        """
        The level of output format verbosity.
        """
        outputVerbosity: SearchQueryOutputVerbosity = BASIC
    ): String!
    """
    The current site.
    """
    site: Site!
    """
    Retrieve responses to surveys.
    """
    surveyResponses(
        """
        Returns the first n survey responses from the list.
        """
        first: Int
    ): SurveyResponseConnection!
    """
    FOR INTERNAL USE ONLY: Lists all status messages
    """
    statusMessages: [StatusMessage!]!
    """
    FOR INTERNAL USE ONLY: Query repository statistics for the site.
    """
    repositoryStats: RepositoryStats!

    """
    Look up a namespace by ID.
    """
    namespace(id: ID!): Namespace

    """
    Look up a namespace by name, which is a username or organization name.
    """
    namespaceByName(
        """
        The name of the namespace.
        """
        name: String!
    ): Namespace

    """
    Returns true if any of the code hosts supplied are syncing now or within "seconds" from now.
    """
    codeHostSyncDue(ids: [ID!]!, seconds: Int!): Boolean!

    """
    Retrieve all registered out-of-band migrations.
    """
    outOfBandMigrations: [OutOfBandMigration!]!

    """
    Retrieve the list of defined feature flags
    """
    featureFlags: [FeatureFlag!]!

    """
    Retrieve a feature flag
    """
    featureFlag(name: String!): FeatureFlag!

    """
    Evaluates a feature flag for the current user
    Returns null if feature flag does not exist
    """
    evaluateFeatureFlag(flagName: String!): Boolean

    """
    Retrieve all evaluated feature flags for the current user
    """
    evaluatedFeatureFlags: [EvaluatedFeatureFlag!]!

    """
    Retrieve the value of a feature flag for the organization
    """
    organizationFeatureFlagValue(orgID: ID!, flagName: String!): Boolean!

    """
    Retrieve all organization feature flag overrides for the current user
    """
    organizationFeatureFlagOverrides: [FeatureFlagOverride!]!

    """
    Retrieves the temporary settings for the current user.
    """
    temporarySettings: TemporarySettings!

    """
    Returns recently received webhooks across all external services, optionally
    limiting the returned values to only those that didn't match any external
    service.

    Only site admins can access this field.
    """
    webhookLogs(
        """
        Returns the first n webhook logs.
        """
        first: Int

        """
        Opaque pagination cursor.
        """
        after: String

        """
        Only include webhook logs that resulted in errors.
        """
        onlyErrors: Boolean

        """
        Only include webhook logs that were not matched to an external service.
        """
        onlyUnmatched: Boolean

        """
        Only include webhook logs on or after this time.
        """
        since: DateTime

        """
        Only include webhook logs on or before this time.
        """
        until: DateTime

        """
        Only include webhook logs of given webhook ID.
        """
        webhookID: ID
        """
        Only include webhook logs that have no webhook ID set.
        """
        legacyOnly: Boolean
    ): WebhookLogConnection!

    """
    Get a log of the latest outbound external requests. Only available to site admins.
    """
    outboundRequests(
        """
        Returns the first n log items. If omitted then it returns all of them.
        """
        first: Int

        """
        Opaque pagination cursor.
        """
        after: String
    ): OutboundRequestConnection!

    """
    Get a list of background jobs that are currently known in the system.
    """
    backgroundJobs(
        """
        Returns the first n jobs. If omitted then it returns all of them.
        """
        first: Int

        """
        Opaque pagination cursor.
        """
        after: String

        """
        The maximum number of recent runs to return for each routine.
        """
        recentRunCount: Int
    ): BackgroundJobConnection!

    """
    EXPERIMENTAL: Get invitation based on the JWT in the invitation URL
    """
    invitationByToken(
        """
        The token that uniquely identifies the invitation
        """
        token: String!
    ): OrganizationInvitation!

    """
    Get pending invitations for the specific organization
    """
    pendingInvitations(
        """
        The organization ID
        """
        organization: ID!
    ): [OrganizationInvitation!]!

    """
    Search for users that opt-in to search autocomplete.
    """
    autocompleteMembersSearch(
        """
        The organization ID
        """
        organization: ID!
        """
        Return users whose usernames or display names match the query.
        """
        query: String!
    ): [AutocompleteMemberSearchItem!]!

    """
    Get started organization summary
    """
    orgMembersSummary(
        """
        The organization ID
        """
        organization: ID!
    ): OrgMembersSummary!

    """
    Lists webhooks. Only available to site admins.
    If no kind is given, it returns all webhooks.
    If first is omitted, 20 items are returned
    """
    webhooks(
        """
        Returns the first n webhooks from the list.
        """
        first: Int
        """
        Opaque pagination cursor.
        """
        after: String
        """
        Optionally filter by kind.
        """
        kind: ExternalServiceKind
    ): WebhookConnection!

    """
    List slow GraphQL requests that were recently captured (requires site-admin permissions).
    """
    slowRequests(
        """
        Opaque pagnination cursor.
        """
        after: String
    ): SlowRequestConnection!

    """
    Roles returns all the roles in the database that matches the arguments.
    """
    roles(
        """
        The limit argument for forward pagination.
        """
        first: Int
        """
        The limit argument for backward pagination.
        """
        last: Int
        """
        The cursor argument for forward pagination.
        """
        after: String
        """
        The cursor argument for backward pagination.
        """
        before: String
    ): RoleConnection!

    """
    This returns all permissions in a paginated format.
    """
    permissions(
        """
        The limit argument for forward pagination.
        """
        first: Int
        """
        The limit argument for backward pagination.
        """
        last: Int
        """
        The cursor argument for forward pagination.
        """
        after: String
        """
        The cursor argument for backward pagination.
        """
        before: String
    ): PermissionConnection!
}

"""
Enum of the possible scopes for executor secrets.
"""
enum ExecutorSecretScope {
    """
    The secret is meant to be used with Batch Changes execution.
    """
    BATCHES

    """
    The secret is meant to be used with Auto-indexing.
    """
    CODEINTEL
}

"""
A secret to be used in executor jobs.
"""
type ExecutorSecret implements Node {
    """
    The unique identifier of the secret.
    """
    id: ID!
    """
    The key under which the secret is available. Secrets are usually exposed
    as environment variables named using this key.
    Recommended format: uppercase letters, numbers and underscores.
    """
    key: String!
    """
    The scope of this secret. The secret will only be usable for jobs in this
    particular scope.
    """
    scope: ExecutorSecretScope!
    """
    If true, this secret is defined in a namespace and a secret with the same key
    is also defined in the global namespace, which this secret overwrites.
    """
    overwritesGlobalSecret: Boolean!
    """
    The namespace this secret belongs to. Null, if a global secret.
    Global secrets are available to every execution.
    """
    namespace: Namespace
    """
    The creator of the secret. Null, if the creator has been deleted.
    """
    creator: User
    """
    The date and time this secret has been created.
    """
    createdAt: DateTime!
    """
    The date and time this secret has been last updated.
    """
    updatedAt: DateTime!
    """
    The list of access events to this secret. Every time the secret value is
    decoded and used, one of these entries is created.
    """
    accessLogs(
        """
        Only return N records.
        """
        first: Int = 50
        """
        Opaque cursor for pagination.
        """
        after: String
    ): ExecutorSecretAccessLogConnection!
}

"""
A list of executor secrets.
"""
type ExecutorSecretConnection {
    """
    A list of executor secrets.
    """
    nodes: [ExecutorSecret!]!

    """
    The total number of records in this result set.
    """
    totalCount: Int!

    """
    Pagination information.
    """
    pageInfo: PageInfo!
}

"""
A list of executor secret access logs.
"""
type ExecutorSecretAccessLogConnection {
    """
    A list of access logs.
    """
    nodes: [ExecutorSecretAccessLog!]!

    """
    The total number of records in this result set.
    """
    totalCount: Int!

    """
    Pagination information.
    """
    pageInfo: PageInfo!
}

"""
An access log entry for an executor secret.
These are created every time the secret value is decoded.
"""
type ExecutorSecretAccessLog implements Node {
    """
    The unique identifier of the log entry.
    """
    id: ID!
    """
    The secret that this log entry belongs to.
    """
    executorSecret: ExecutorSecret!
    """
    The user in which name the secret has been used.
    This is null when the access was not by a user account, or
    when the user account was deleted.
    """
    user: User
    """
    True when the secret was accessed by an internal procedure.
    """
    machineUser: String!
    """
    The date and time when the secret has been used.
    """
    createdAt: DateTime!
}

extend type Query {
    """
    The list of all globally available executor secrets.
    """
    executorSecrets(
        """
        The scope for which secrets shall be returned.
        """
        scope: ExecutorSecretScope!
        """
        Only return N records.
        """
        first: Int = 50
        """
        Opaque cursor for pagination.
        """
        after: String
    ): ExecutorSecretConnection!
}

extend type User {
    """
    The list of all available executor secrets for execution in this users namespace.
    """
    executorSecrets(
        """
        The scope for which secrets shall be returned.
        """
        scope: ExecutorSecretScope!
        """
        Only return N records.
        """
        first: Int = 50
        """
        Opaque cursor for pagination.
        """
        after: String
    ): ExecutorSecretConnection!
}

extend type Org {
    """
    The list of all available executor secrets for execution in this orgs namespace.
    """
    executorSecrets(
        """
        The scope for which secrets shall be returned.
        """
        scope: ExecutorSecretScope!
        """
        Only return N records.
        """
        first: Int = 50
        """
        Opaque cursor for pagination.
        """
        after: String
    ): ExecutorSecretConnection!
}

extend type Mutation {
    """
    Create a new executor secret.
    See argument descriptions for more details.
    """
    createExecutorSecret(
        """
        The scope for which the secret is usable.
        """
        scope: ExecutorSecretScope!
        """
        The key under which the secret is known. For executions, this is the name
        of the environment variable this secret will be accessible under.
        It is therefore advised that key only contains uppercase letters, numbers
        and underscores.
        """
        key: String!
        """
        The secret value.
        """
        value: String!
        """
        The namespace this secret is for. If not set, a global secret is created
        that is accessible by all users.
        Creating a global secret requires site-admin permissions.
        Creating a namespaced secret requires write-access to the namespace.
        """
        namespace: ID
    ): ExecutorSecret!

    """
    Update the value of an existing executor secret.
    """
    updateExecutorSecret(
        """
        The scope of the secret.
        """
        scope: ExecutorSecretScope!
        """
        The identifier of the secret that shall be updated.
        """
        id: ID!
        """
        The new secret value.
        """
        value: String!
    ): ExecutorSecret!

    """
    Deletes the given executor secret.
    """
    deleteExecutorSecret(
        """
        The scope of the secret.
        """
        scope: ExecutorSecretScope!
        """
        The identifier of the secret that shall be deleted.
        """
        id: ID!
    ): EmptyResponse
}

"""
A feature flag is either a static boolean feature flag or a rollout feature flag
"""
union FeatureFlag = FeatureFlagBoolean | FeatureFlagRollout

"""
A feature flag that has a statically configured value
"""
type FeatureFlagBoolean {
    """
    The name of the feature flag
    """
    name: String!

    """
    The static value of the feature flag
    """
    value: Boolean!

    """
    Overrides that apply to the feature flag
    """
    overrides: [FeatureFlagOverride!]!
    """
    When the feature flag was created.
    """
    createdAt: DateTime!

    """
    When the feature flag was last updated.
    """
    updatedAt: DateTime!
}

"""
A feature flag that is randomly evaluated to a boolean based on the rollout parameter
"""
type FeatureFlagRollout {
    """
    The name of the feature flag
    """
    name: String!

    """
    The ratio of users that will be assigned this this feature flag, expressed in
    basis points (0.01%).
    """
    rolloutBasisPoints: Int!

    """
    Overrides that apply to the feature flag
    """
    overrides: [FeatureFlagOverride!]!
    """
    When the feature flag was created.
    """
    createdAt: DateTime!

    """
    When the feature flag was last updated.
    """
    updatedAt: DateTime!
}

"""
A feature flag override is an override of a feature flag's value for a specific org or user
"""
type FeatureFlagOverride {
    """
    A unique ID for this feature flag override
    """
    id: ID!

    """
    The namespace for this override. Will always be a user or org.
    """
    namespace: Namespace!

    """
    The name of the feature flag being overridden
    """
    targetFlag: FeatureFlag!

    """
    The overridden value of the feature flag
    """
    value: Boolean!
}

"""
An evaluated feature flag is any feature flag (static or random) that has been evaluated to
a concrete value for a given viewer.
"""
type EvaluatedFeatureFlag {
    """
    The name of the feature flag
    """
    name: String!

    """
    The concrete evaluated value of the feature flag
    """
    value: Boolean!
}

"""
An out-of-band migration is a process that runs in the background of the instance that moves
data from one format into another format. Out-of-band migrations
"""
type OutOfBandMigration implements Node {
    """
    The unique identifier of this migration.
    """
    id: ID!

    """
    The team that owns this migration (e.g., code-intelligence).
    """
    team: String!

    """
    The component this migration affects (e.g., codeintel-db.lsif_data_documents).
    """
    component: String!

    """
    A human-readable summary of the migration.
    """
    description: String!

    """
    The Sourcegraph version in which this migration was introduced. The format of this version
    includes only major and minor parts separated by a dot. The patch version can always be assumed
    to be zero as we'll never introduce or deprecate an out-of-band migration within a patch release.

    It is necessary to completely this migration in reverse (if destructive) before downgrading
    to or past this version. Otherwise, the previous instance version will not be aware of the
    new data format.
    """
    introduced: String!

    """
    The Sourcegraph version by which this migration is assumed to have completed. The format of
    this version mirrors introduced and includes only major and minor parts separated by a dot.

    It is necessary to have completed this migration before upgrading to or past this version.
    Otherwise, the next instance version will no longer be aware of the old data format.
    """
    deprecated: String

    """
    The progress of the migration (in the forward direction). In the range [0, 1].
    """
    progress: Float!

    """
    The time the migration record was inserted.
    """
    created: DateTime!

    """
    The last time the migration progress or error list was updated.
    """
    lastUpdated: DateTime

    """
    If false, the migration moves data destructively, and a previous version of Sourcegraph
    will encounter errors when interfacing with the target data unless the migration is first
    run in reverse prior to a downgrade.
    """
    nonDestructive: Boolean!

    """
    If true, the migration will run in reverse.
    """
    applyReverse: Boolean!

    """
    A list of errors that have occurred while performing this migration (in either direction).
    This list is bounded by a maximum size, and older errors will replaced by newer errors as
    the list capacity is reached.
    """
    errors: [OutOfBandMigrationError!]!
}

"""
An error that occurred while performing an out-of-band migration.
"""
type OutOfBandMigrationError {
    """
    The error message.
    """
    message: String!

    """
    The time the error occurred.
    """
    created: DateTime!
}

"""
The version of the search syntax.
"""
enum SearchVersion {
    """
    Search syntax that defaults to regexp search.
    """
    V1
    """
    Search syntax that defaults to literal-only search.
    """
    V2
    """
    Search syntax that defaults to standard search.
    """
    V3
}

"""
The search pattern type.
"""
enum SearchPatternType {
    standard
    literal
    regexp
    structural
    lucky
    keyword
}

"""
Represents phases in query parsing. The parse tree corresponds closely to the
input query syntax. A subsequent processing phase on the parse tree generates a
job tree. The job tree is an internal representation analogous to a database
query plan. The job tree discards information about query syntax and corresponds
closely to backend services (text search, git commit search, etc.).
"""
enum SearchQueryOutputPhase {
    PARSE_TREE
    JOB_TREE
}

"""
The output format to emit for a parsed query.
"""
enum SearchQueryOutputVerbosity {
    """
    Minimal verbosity outputs only nodes.
    """
    MINIMAL
    """
    Basic verbosity outputs nodes and essential fields associated with nodes.
    """
    BASIC
    """
    Maximal verbosity outputs nodes and all information associated with nodes.
    """
    MAXIMAL
}

"""
The output format to emit for a parsed query.
"""
enum SearchQueryOutputFormat {
    """
    JSON format.
    """
    JSON
    """
    S-expression format.
    """
    SEXP
    """
    Mermaid flowchart format.
    """
    MERMAID
}

"""
Configuration details for the browser extension, editor extensions, etc.
"""
type ClientConfigurationDetails {
    """
    The list of phabricator/gitlab/bitbucket/etc instance URLs that specifies which pages the content script will be injected into.
    """
    contentScriptUrls: [String!]!
    """
    Returns details about the parent Sourcegraph instance.
    """
    parentSourcegraph: ParentSourcegraphDetails!
}

"""
Parent Sourcegraph instance
"""
type ParentSourcegraphDetails {
    """
    Sourcegraph instance URL.
    """
    url: String!
}

"""
A search.
"""
type Search {
    """
    The results.
    """
    results: SearchResults!
    """
    A subset of results (excluding actual search results) which are heavily
    cached and thus quicker to query. Useful for e.g. querying sparkline
    data.
    """
    stats: SearchResultsStats!
}

"""
A search result.
"""
union SearchResult = FileMatch | CommitSearchResult | Repository

"""
An object representing a markdown string.
"""
type Markdown {
    """
    The raw markdown string.
    """
    text: String!
    """
    HTML for the rendered markdown string, or null if there is no HTML representation provided.
    If specified, clients should render this directly.
    """
    html: String!
}

"""
A search result. Every type of search result, except FileMatch, must implement this interface.
"""
interface GenericSearchResultInterface {
    """
    A markdown string that is rendered prominently.
    """
    label: Markdown!
    """
    The URL of the result.
    """
    url: String!
    """
    A markdown string that is rendered less prominently.
    """
    detail: Markdown!
    """
    A list of matches in this search result.
    """
    matches: [SearchResultMatch!]!
}

"""
A match in a search result. Matches make up the body content of a search result.
"""
type SearchResultMatch {
    """
    URL for the individual result match.
    """
    url: String!
    """
    A markdown string containing the preview contents of the result match.
    """
    body: Markdown!
    """
    A list of highlights that specify locations of matches of the query in the body. Each highlight is
    a line number, character offset, and length. Currently, highlights are only displayed on match bodies
    that are code blocks. If the result body is a code block, exclude the markdown code fence lines in
    the line and character count. Leave as an empty list if no highlights are available.
    """
    highlights: [Highlight!]!
}

"""
Search results.
"""
type SearchResults {
    """
    The results. Inside each SearchResult there may be multiple matches, e.g.
    a FileMatch may contain multiple line matches.
    """
    results: [SearchResult!]!
    """
    The total number of matches returned by this search. This is different
    than the length of the results array in that e.g. a single results array
    entry may contain multiple matches. For example, the results array may
    contain two file matches and this field would report 6 ("3 line matches
    per file") while the length of the results array would report 3
    ("3 FileMatch results").
    Typically, 'approximateResultCount', not this field, is shown to users.
    """
    matchCount: Int!
    """
    DEPRECATED: Renamed to 'matchCount' for less ambiguity.
    """
    resultCount: Int! @deprecated(reason: "renamed to matchCount for less ambiguity")
    """
    The approximate number of results. This is like the length of the results
    array, except it can indicate the number of results regardless of whether
    or not the limit was hit. Currently, this is represented as e.g. "5+"
    results.
    This string is typically shown to users to indicate the true result count.
    """
    approximateResultCount: String!
    """
    Whether or not the results limit was hit.
    In paginated requests, this field is always false. Use 'pageInfo.hasNextPage' instead.
    """
    limitHit: Boolean!
    """
    Integers representing the sparkline for the search results.
    """
    sparkline: [Int!]!
    """
    Repositories from results.
    """
    repositories: [Repository!]!
    """
    The number of repositories that had results (for clients
    that just wish to know how many without querying the, sometimes extremely
    large, list).
    """
    repositoriesCount: Int!
    """
    Repositories that are busy cloning onto gitserver.
    In paginated search requests, some repositories may be cloning. These are reported here
    and you may choose to retry the paginated request with the same cursor after they have
    cloned OR you may simply continue making further paginated requests and choose to skip
    the cloning repositories.
    """
    cloning: [Repository!]!
    """
    Repositories or commits that do not exist.
    In paginated search requests, some repositories may be missing (e.g. if Sourcegraph is
    aware of them but is temporarily unable to serve them). These are reported here and you
    may choose to retry the paginated request with the same cursor and they may no longer be
    missing OR you may simply continue making further paginated requests and choose to skip
    the missing repositories.
    """
    missing: [Repository!]!
    """
    Repositories or commits which we did not manage to search in time. Trying
    again usually will work.
    In paginated search requests, this field is not relevant.
    """
    timedout: [Repository!]!
    """
    DEPRECATED: This field is not used in known clients, and will always return `false`.
    True if indexed search is enabled but was not available during this search.
    """
    indexUnavailable: Boolean!
    """
    An alert message that should be displayed before any results.
    """
    alert: SearchAlert
    """
    The time it took to generate these results.
    """
    elapsedMilliseconds: Int!
    """
    Dynamic filters generated by the search results
    """
    dynamicFilters: [SearchFilter!]!
}

"""
Statistics about search results.
"""
type SearchResultsStats {
    """
    The approximate number of results returned.
    """
    approximateResultCount: String!
    """
    The sparkline.
    """
    sparkline: [Int!]!

    """
    Statistics about the languages represented in the search results.
    Known issue: The LanguageStatistics.totalBytes field values are incorrect in the result.
    """
    languages: [LanguageStatistics!]!
}

"""
A search filter.
"""
type SearchFilter {
    """
    The value.
    """
    value: String!
    """
    The string to be displayed in the UI.
    """
    label: String!
    """
    Number of matches for a given filter.
    """
    count: Int!
    """
    Whether the results returned are incomplete.
    """
    limitHit: Boolean!
    """
    The kind of filter. Should be "file" or "repo".
    """
    kind: String!
}

"""
A programming language.
"""
type Language {
    """
    Name of the programming language.
    """
    name: String!
}

"""
A search-related alert message.
"""
type SearchAlert {
    """
    The title.
    """
    title: String!
    """
    The description.
    """
    description: String
    """
    An identifier indicating the kind of alert
    """
    kind: String
    """
    "Did you mean: ____" query proposals
    """
    proposedQueries: [SearchQueryDescription!]
}

"""
A paginated connection for saved search queries, defined in settings.
"""
type SavedSearchesConnection implements Connection {
    """
    A list of saved searches.
    """
    nodes: [SavedSearch!]!

    """
    The total number of saved searches in the connection.
    """
    totalCount: Int!

    """
    Pagination information.
    """
    pageInfo: ConnectionPageInfo!
}

"""
A saved search query, defined in settings.
"""
type SavedSearch implements Node {
    """
    The unique ID of this saved query.
    """
    id: ID!
    """
    The description.
    """
    description: String!
    """
    The query.
    """
    query: String!
    """
    Whether or not to notify the owner of the saved search via email. This owner is either
    a single user, or every member of an organization that owns the saved search.
    """
    notify: Boolean!
    """
    Whether or not to notify on Slack.
    """
    notifySlack: Boolean!
    """
    The user or org that owns this saved search.
    """
    namespace: Namespace!
    """
    The Slack webhook URL associated with this saved search, if any.
    """
    slackWebhookURL: String
}

"""
A search query description.
"""
type SearchQueryDescription {
    """
    The description.
    """
    description: String
    """
    The query.
    """
    query: String!
    """
    Additional optional information describing attributes of this query.
    """
    annotations: [SearchQueryAnnotation!]
}

"""
Additional information describing attributes of a query.
"""
type SearchQueryAnnotation {
    """
    A name for this query annotation label.
    """
    name: String!
    """
    An opaque value for this query annotation.
    """
    value: String!
}

"""
A diff between two diffable Git objects.
"""
type Diff {
    """
    The diff's repository.
    """
    repository: Repository!
    """
    The revision range of the diff.
    """
    range: GitRevisionRange!
}

"""
A search result that is a Git commit.
"""
type CommitSearchResult implements GenericSearchResultInterface {
    """
    A markdown string that is rendered prominently.
    """
    label: Markdown!
    """
    The URL of the result.
    """
    url: String!
    """
    A markdown string of that is rendered less prominently.
    """
    detail: Markdown!
    """
    The result previews of the result.
    """
    matches: [SearchResultMatch!]!
    """
    The commit that matched the search query.
    """
    commit: GitCommit!
    """
    The ref names of the commit.
    """
    refs: [GitRef!]!
    """
    The refs by which this commit was reached.
    """
    sourceRefs: [GitRef!]!
    """
    The matching portion of the commit message, if any.
    """
    messagePreview: HighlightedString
    """
    The matching portion of the diff, if any.
    """
    diffPreview: HighlightedString
}

"""
A string that has highlights (e.g, query matches).
"""
type HighlightedString {
    """
    The full contents of the string.
    """
    value: String!
    """
    Highlighted matches of the query in the preview string.
    """
    highlights: [Highlight!]!
}

"""
A highlighted region in a string (e.g., matched by a query).
"""
type Highlight {
    """
    The 1-indexed line number.
    """
    line: Int!
    """
    The 1-indexed character on the line.
    """
    character: Int!
    """
    The length of the highlight, in characters (on the same line).
    """
    length: Int!
}

"""
A list of external services.
"""
type ExternalServiceConnection {
    """
    A list of external services.
    """
    nodes: [ExternalService!]!

    """
    The total number of external services in the connection.
    """
    totalCount: Int!

    """
    Pagination information.
    """
    pageInfo: PageInfo!
}

"""
A specific kind of external service.
"""
enum ExternalServiceKind {
    AWSCODECOMMIT
    AZUREDEVOPS
    BITBUCKETCLOUD
    BITBUCKETSERVER
    GERRIT
    GITHUB
    GITLAB
    GITOLITE
    GOMODULES
    JVMPACKAGES
    NPMPACKAGES
    OTHER
    LOCALGIT
    PAGURE
    PERFORCE
    PHABRICATOR
    PYTHONPACKAGES
    RUSTPACKAGES
    RUBYPACKAGES
}

"""
A configured external service.
"""
type ExternalService implements Node {
    """
    The external service's unique ID.
    """
    id: ID!

    """
    The kind of external service.
    """
    kind: ExternalServiceKind!

    """
    The display name of the external service.
    """
    displayName: String!

    """
    The JSON configuration of the external service.
    """
    config: JSONCString!

    """
    When the external service was created.
    """
    createdAt: DateTime!

    """
    When the external service was last updated.
    """
    updatedAt: DateTime!

    """
    The number of repos synced by the external service.
    """
    repoCount: Int!

    """
    An optional URL that will be populated when webhooks have been configured for the external service.
    """
    webhookURL: String

    """
    This is an optional field that's populated when we ran into errors on the
    backend side when trying to create/update an ExternalService, but the
    create/update still succeeded.
    It is a field on ExternalService instead of a separate thing in order to
    not break the API and stay backwards compatible.
    """
    warning: String

    """
    External services are synced with code hosts in the background. This optional field
    will contain any errors that occurred during the most recent completed sync.
    """
    lastSyncError: String

    """
    LastSyncAt is the time the last sync job was run for this code host. Null if it
    has never been synced so far.
    """
    lastSyncAt: DateTime

    """
    The timestamp of the next sync job. Null if not scheduled for a re-sync.
    """
    nextSyncAt: DateTime

    """
    Returns recently received webhooks on this external service.

    Only site admins may access this field.

    DEPRECATED: Webhook logs linked directly to an external service will be removed. See https://docs.sourcegraph.com/admin/config/webhooks/incoming#deprecation-notice
    """
    webhookLogs(
        """
        Returns the first n webhook logs.
        """
        first: Int

        """
        Opaque pagination cursor.
        """
        after: String

        """
        Only include webhook logs that resulted in errors.
        """
        onlyErrors: Boolean

        """
        Only include webhook logs on or after this time.
        """
        since: DateTime

        """
        Only include webhook logs on or before this time.
        """
        until: DateTime
    ): WebhookLogConnection!
        @deprecated(
            reason: "Webhook logs linked directly to an external service will be removed. See https://docs.sourcegraph.com/admin/config/webhooks/incoming#deprecation-notice"
        )

    """
    The list of recent sync jobs for this external service.
    """
    syncJobs(first: Int): ExternalServiceSyncJobConnection!

    """
    Checks the availability of the external service.
    """
    checkConnection: ExternalServiceAvailability!

    """
    True if this external service can perform availability check by running checkConnection.

    If this is false, then checkConnection responds with ExternalServiceAvailabilityUnknown.
    """
    hasConnectionCheck: Boolean!

    """
    True if this external service configuration supports `exclude` parameter.
    """
    supportsRepoExclusion: Boolean!
}

"""
Availability status of an external service for diagnostic purposes.

This is so that the UI can surface whether the external service
can serve requests, and if not, why is the reason for that.
"""
union ExternalServiceAvailability =
      ExternalServiceAvailable
    | ExternalServiceUnavailable
    | ExternalServiceAvailabilityUnknown

"""
Indicator that the external service was recently found to be available.
"""
type ExternalServiceAvailable {
    """
    The timestamp of the last successful availability check that was performed.
    """
    lastCheckedAt: DateTime!
}

"""
Indicator that the external service was recently not found available.
"""
type ExternalServiceUnavailable {
    """
    User-friendly textual description of supposed reason why the service is not available.
    """
    suspectedReason: String!
}

"""
Availability for some external services may not be determined, or only partially
supported. In that case unknown variant of ExternalServiceAvailability is returned.
"""
type ExternalServiceAvailabilityUnknown {
    """
    User-friendly textual description of the implementation status of availability.
    This is expected to be tied to specific kinds of external services.
    """
    implementationNote: String!
}

"""
A list of external service sync jobs.
"""
type ExternalServiceSyncJobConnection {
    """
    A list of sync jobs.
    """
    nodes: [ExternalServiceSyncJob!]!

    """
    The total number of jobs in the connection.
    """
    totalCount: Int!

    """
    Pagination information.
    """
    pageInfo: PageInfo!
}

"""
The possible states of an external service sync job.
"""
enum ExternalServiceSyncJobState {
    """
    Not yet started. Will be picked up by a worker eventually.
    """
    QUEUED

    """
    Currently syncing.
    """
    PROCESSING

    """
    An error occurred while syncing. Will be retried eventually.
    """
    ERRORED

    """
    A fatal error occurred while syncing. No retries will be made.
    """
    FAILED

    """
    Sync finished successfully.
    """
    COMPLETED

    """
    Sync job is being canceled.
    """
    CANCELING

    """
    Sync job has been canceled.
    """
    CANCELED
}

"""
An external service sync job represents one sync with the code host. It's a background
job that will eventually be run by the repo syncer.
"""
type ExternalServiceSyncJob implements Node {
    """
    The unique identifier of the sync job.
    """
    id: ID!

    """
    The current state of the sync job.
    """
    state: ExternalServiceSyncJobState!

    """
    When the sync job was added to the queue.
    """
    queuedAt: DateTime!

    """
    Set when sync begins.
    """
    startedAt: DateTime

    """
    Set when sync finished.
    """
    finishedAt: DateTime

    """
    Error message, if the sync failed.
    """
    failureMessage: String

    """
    The number of repos synced during this sync job.
    """
    reposSynced: Int!

    """
    The number of times an error occurred syncing a repo during this sync job.
    """
    repoSyncErrors: Int!

    """
    The number of new repos discovered during this sync job.
    """
    reposAdded: Int!

    """
    The number of repos deleted as a result of this sync job.
    """
    reposDeleted: Int!

    """
    The number of existing repos whose metadata has changed during this sync job.
    """
    reposModified: Int!

    """
    The number of existing repos whose metadata did not change during this sync job.
    """
    reposUnmodified: Int!
}

"""
A list of namespaces available to an external service configuration.
"""
type ExternalServiceNamespaceConnection {
    """
    A list of namespaces available on the source.
    Namespaces are used to organize which members and users can access repositories
    and are defined by external service kind (e.g. Github organizations, Bitbucket projects, etc.)
    """
    nodes: [ExternalServiceNamespace!]!

    """
    The total number of source repos in the connection.
    """
    totalCount: Int!
}

"""
A namespace sourced from a defined external service (such as GitHub, GitLab, Phabricator, etc.) that can be discovered
before any sync or mirror operations.
"""
type ExternalServiceNamespace {
    """
    The unique identifier of the external service namespace.
    """
    id: ID!
    """
    The name of the external service namespace.
    """
    name: String!
    """
    The Namespace's ID on the external service.
    Example: For GitHub, this is the GitHub GraphQL API's node ID for the organization.
    """
    externalID: String!
}

"""
A list of repositories available to an external service configuration.
"""
type ExternalServiceRepositoryConnection {
    """
    A list of repositories available on the source.
    """
    nodes: [ExternalServiceRepository!]!
}

"""
A repository sourced from a defined external service (such as GitHub, GitLab, Phabricator, etc.) that can be discovered
before any sync or mirror operations.
"""
type ExternalServiceRepository {
    """
    The unique identifier of the external service repository.
    """
    id: ID!
    """
    The name of the external service repository.
    """
    name: String!
    """
    The repository's ID on the external service.
    Example: For GitHub, this is the GitHub GraphQL API's node ID for the repository.
    """
    externalID: String!
}
"""
A list of repositories.

The old `RepositoryConnection` is deprecated and is replaced by
this new connection which support proper cursor based pagination.
The new connection does not include `precise` argument for totalCount.
"""
type NewRepositoryConnection {
    """
    A list of repositories.
    """
    nodes: [Repository!]!
    """
    The total count of repositories in the connection.
    """
    totalCount: Int!
    """
    Pagination information.
    """
    pageInfo: ConnectionPageInfo!
}

"""
Deprecated! A list of repositories.
"""
type RepositoryConnection {
    """
    A list of repositories.
    """
    nodes: [Repository!]!
    """
    The total count of repositories in the connection. This total count may be larger
    than the number of nodes in this object when the result is paginated.
    This requires admin permissions and will return null for all non-admin users.
    In some cases, the total count can't be computed quickly; if so, it is null. Pass
    precise: true to always compute total counts even if it takes a while.
    """
    totalCount(precise: Boolean = false): Int
    """
    Pagination information.
    """
    pageInfo: PageInfo!
}

"""
All possible types of currently supported repositories, even though they may be stored
as a git repository on disk.
"""
enum RepositoryType {
    GIT_REPOSITORY
    PERFORCE_DEPOT
}

"""
A repository is a Git source control repository that is mirrored from some origin code host.
"""
type Repository implements Node & GenericSearchResultInterface {
    """
    The repository's unique ID.
    """
    id: ID!
    """
    The repository's name, as a path with one or more components. It conventionally consists of
    the repository's hostname and path (joined by "/"), minus any suffixes (such as ".git").
    Examples:
    - github.com/foo/bar
    - my-code-host.example.com/myrepo
    - myrepo
    """
    name: String!
    """
    DEPRECATED: Use name.
    """
    uri: String! @deprecated(reason: "Use name.")
    """
    The source of this repository from where it was imported / converted.
    """
    sourceType: RepositoryType!
    """
    The repository's description.
    """
    description: String!
    """
    The primary programming language in the repository.
    """
    language: String!
    """
    DEPRECATED: This field is unused in known clients.
    The date when this repository was created on Sourcegraph.
    """
    createdAt: DateTime!
    """
    DEPRECATED: This field is unused in known clients.
    The date when this repository's metadata was last updated on Sourcegraph.
    """
    updatedAt: DateTime
    """
    Returns information about the given commit in the repository, or null if no commit exists with the given rev.
    """
    commit(
        """
        The Git revision specifier (revspec) for the commit.
        """
        rev: String!
        """
        Optional input revspec used to construct non-canonical URLs and other "friendly" field values. Used by
        clients that must ensure consistency of revision resolution within a session/request (so they use full
        SHAs) but also preserve the user input rev (for user friendliness).
        """
        inputRevspec: String
    ): GitCommit

    """
    EXPERIMENTAL: Returns infomration about the given changelist of the perforce depot, or null if
    no changelist exists with the given cid or it is not a perforce depot.
    """
    changelist(cid: String!): PerforceChangelist

    """
    The first commit inside the repo
    """
    firstEverCommit: GitCommit
    """
    Information and status related to mirroring, if this repository is a mirror of another repository (e.g., on
    some code host). In this case, the remote source repository is external to Sourcegraph and the mirror is
    maintained by the Sourcegraph site (not the other way around).
    """
    mirrorInfo: MirrorRepositoryInfo!
    """
    Information about this repository from the external service that it originates from (such as GitHub, GitLab,
    Phabricator, etc.).
    """
    externalRepository: ExternalRepository!

    """
    Whether the repository is a fork.
    """
    isFork: Boolean!
    """
    Whether the repository has been archived.
    """
    isArchived: Boolean!
    """
    Whether the repository is private.
    """
    isPrivate: Boolean!
    """
    Lists all external services which yield this repository.
    """
    externalServices(
        """
        Returns the first n external services from the list.
        """
        first: Int
    ): ExternalServiceConnection!
    """
    Whether the repository is currently being cloned.
    """
    cloneInProgress: Boolean! @deprecated(reason: "use Repository.mirrorInfo.cloneInProgress instead")
    """
    Information about the text search index for this repository, or null if text search indexing
    is not enabled or supported for this repository.
    """
    textSearchIndex: RepositoryTextSearchIndex
    """
    The URL to this repository.
    """
    url: String!
    """
    The URLs to this repository on external services associated with it.
    """
    externalURLs: [ExternalLink!]!
    """
    The repository's default Git branch (HEAD symbolic ref). If the repository is currently being cloned or is
    empty, this field will be null.
    """
    defaultBranch: GitRef
    """
    The repository's Git refs.
    """
    gitRefs(
        """
        Returns the first n Git refs from the list.
        """
        first: Int
        """
        Return Git refs whose names match the query.
        """
        query: String
        """
        Return only Git refs of the given type.
        Known issue: It is only supported to retrieve Git branch and tag refs, not
        other Git refs.
        """
        type: GitRefType
        """
        Ordering for Git refs in the list.
        """
        orderBy: GitRefOrder
        """
        Ordering is an expensive operation that doesn't scale for lots of
        references. If this is true we fallback on not ordering. This should
        never be false in interactive API requests.
        """
        interactive: Boolean = true
    ): GitRefConnection!
    """
    The repository's Git branches.
    """
    branches(
        """
        Returns the first n Git branches from the list.
        """
        first: Int
        """
        Return Git branches whose names match the query.
        """
        query: String
        """
        Ordering for Git branches in the list.
        """
        orderBy: GitRefOrder
        """
        Ordering is an expensive operation that doesn't scale for lots of
        references. If this is true we fallback on not ordering. This should
        never be false in interactive API requests.
        """
        interactive: Boolean = true
    ): GitRefConnection!
    """
    The repository's Git tags.
    """
    tags(
        """
        Returns the first n Git tags from the list.
        """
        first: Int
        """
        Return Git tags whose names match the query.
        """
        query: String
    ): GitRefConnection!
    """
    A Git comparison in this repository between a base and head commit.
    """
    comparison(
        """
        The base of the diff ("old" or "left-hand side"), or "HEAD" if not specified.
        """
        base: String
        """
        The head of the diff ("new" or "right-hand side"), or "HEAD" if not specified.
        """
        head: String
        """
        Attempt to fetch missing revisions from remote if they are not found
        """
        fetchMissing: Boolean = true
    ): RepositoryComparison!
    """
    The repository's contributors.
    """
    contributors(
        """
        The Git revision range to compute contributors in.
        """
        revisionRange: String
        """
        The date after which to count contributions.
        """
        afterDate: String
        """
        Return contributors to files in this path.
        """
        path: String
        """
        Returns the first n contributors from the list.
        """
        first: Int
        last: Int
        after: String
        before: String
    ): RepositoryContributorConnection!
    """
    Whether the viewer has admin privileges on this repository.
    """
    viewerCanAdminister: Boolean!
    """
    A markdown string that is rendered prominently.
    """
    label: Markdown!
    """
    A markdown string of that is rendered less prominently.
    """
    detail: Markdown!
    """
    The result previews of the result.
    """
    matches: [SearchResultMatch!]!

    """
    Information and status related to the commit graph of this repository calculated
    for use by code intelligence features.
    """
    codeIntelligenceCommitGraph: CodeIntelligenceCommitGraph!

    """
    The star count the repository has in the code host.
    """
    stars: Int!

    """
    A set of user-defined key-value pairs associated with the repo.
    """
    keyValuePairs: [KeyValuePair!]!
        @deprecated(
            reason: "Use repo.metadata instead. This field is a deprecated and will be removed in a future release."
        )

    """
    A set of user-defined key-value pairs metadata associated with the repo.
    """
    metadata: [KeyValuePair!]!

    """
    The size of repo when cloned on disk
    """
    diskSizeBytes: BigInt

    """
    Returns true if embeddings for the repo are generated.
    """
    embeddingExists: Boolean!
}

"""
A key-value pair
"""
type KeyValuePair {
    """
    The non-nullable key.
    """
    key: String!

    """
    The nullable value. A null value indicates this key-value pair should be treated as a tag.
    """
    value: String
}

"""
List of package repo references.
"""
type PackageRepoReferenceConnection {
    """
    A list of package repo references.
    """
    nodes: [PackageRepoReference!]!

    """
    The total number of package repo references in the connection.
    """
    totalCount: Int!

    """
    Pagination information.
    """
    pageInfo: PageInfo!
}

"""
Connection resolver for either a list of package repo references or versions.
"""
union PackageRepoOrVersionConnection = PackageRepoReferenceConnection | PackageRepoReferenceVersionConnection

"""
List of package repo reference versions.
"""
type PackageRepoReferenceVersionConnection {
    """
    A list of package repo versions.
    """
    nodes: [PackageRepoReferenceVersion!]!

    """
    The total number of package repo versions in the connection.
    """
    totalCount: Int!

    """
    Pagination information.
    """
    pageInfo: PageInfo!
}

"""
A kind of package repo reference.
ExternalServiceKind, with a more specific set of values.
"""
enum PackageRepoReferenceKind {
    GOMODULES
    JVMPACKAGES
    NPMPACKAGES
    PYTHONPACKAGES
    RUSTPACKAGES
    RUBYPACKAGES
}

"""
A reference to a package repo, such as a maven artifact, rust crate etc.
"""
type PackageRepoReference {
    """
    A unique ID for the package repo reference.
    """
    id: ID!

    """
    The external service kind under which this package repo
    reference is uniquely identified.
    """
    kind: PackageRepoReferenceKind!

    """
    The name of the package, in a format relevant to the specific ecosystem e.g.
    maven artifact coordinates (com.sample:text), npm scoped packages (@monkeys/banana).
    """
    name: String!

    """
    The versions of this package known to the sourcegraph instance.
    """
    versions: [PackageRepoReferenceVersion!]!

    """
    Indicates whether a package repo reference has been blocked by a blocklist entry and/or
    no matching entry in a non-empty allowlist
    """
    blocked: Boolean!

    """
    The synthetic repository (aka the package repo) created to store the contents of the
    synced versions of the package repo reference. This type is subject to change once
    package repos and other non-git code hosts become first-class.
    """
    repository: Repository
}

"""
A version of a package repo reference.
"""
type PackageRepoReferenceVersion {
    """
    A unique ID for the package repo reference version.
    """
    id: ID!

    """
    The package repo reference that this ID is for.
    """
    packageRepoReferenceID: ID!

    """
    The version string. Not guaranteed to be semver or any other format.
    """
    version: String!
}

"""
Whether a package repo reference filter is part of the allowlist or blocklist
"""
enum PackageMatchBehaviour {
    """
    Blocks a package repo reference from syncing.
    """
    BLOCK
    """
    Allows a package repo reference to be synced.
    """
    ALLOW
}

"""
Filters package repo references of the matching scheme/kind, applying to either
references of matching names or versions of a specific package name.
One of either nameFilter or versionFilter must be provided.
"""
type PackageFilter {
    """
    Opaque ID string.
    """
    id: ID!

    """
    The behaviour of the filter when applied to a matching package repo reference or version.
    """
    behaviour: PackageMatchBehaviour!

    """
    The schemes/kinds of package repo references this filter should apply to only.
    """
    kind: PackageRepoReferenceKind!

    """
    Optional name-matching filter.
    """
    nameFilter: PackageNameFilter

    """
    Optional package-specific version-matching filter.
    """
    versionFilter: PackageVersionFilter
}

"""
A package repo reference filter that matches names.
"""
type PackageNameFilter {
    """
    Glob string to match names.
    """
    packageGlob: String!
}

"""
A package repo reference filter that matches versions for a specific name.
"""
type PackageVersionFilter {
    """
    Exact package name to match.
    """
    packageName: String!

    """
    Glob string to match versions.
    """
    versionGlob: String!
}

"""
A name or version matching filter for. One of either nameFilter or versionFilter must be provided.
"""
input PackageVersionOrNameFilterInput {
    """
    Optional name-matching filter.
    """
    nameFilter: PackageNameFilterInput
    """
    Optional package-specific version-matching filter.
    """
    versionFilter: PackageVersionFilterInput
}

"""
A package repo reference filter that matches names.
"""
input PackageNameFilterInput {
    """
    Glob string to match names.
    """
    packageGlob: String!
}

"""
A package repo reference filter that matches versions for a specific name.
"""
input PackageVersionFilterInput {
    """
    Exact package name to match.
    """
    packageName: String!

    """
    Glob string to match versions.
    """
    versionGlob: String!
}

"""
Information and status related to the commit graph of this repository calculated
for use by code intelligence features.
"""
type CodeIntelligenceCommitGraph {
    """
    Whether or not the commit graph needs to be updated.
    """
    stale: Boolean!

    """
    When, if ever, the commit graph was last refreshed.
    """
    updatedAt: DateTime
}

"""
A reference to another Sourcegraph instance.
"""
type Redirect {
    """
    The URL of the other Sourcegraph instance.
    """
    url: String!
}

"""
A repository or a link to another Sourcegraph instance location where this repository may be located.
"""
union RepositoryRedirect = Repository | Redirect

"""
A URL to a resource on an external service, such as the URL to a repository on its external (origin) code host.
"""
type ExternalLink {
    """
    The URL to the resource.
    """
    url: String!
    """
    The kind of external service, such as "GITHUB", or null if unknown/unrecognized. This is used solely for
    displaying an icon that represents the service.
    """
    serviceKind: ExternalServiceKind

    """
    The type of external service, such as "github", or null if unknown/unrecognized. This is used solely for
    displaying an icon that represents the service.
    """
    serviceType: String @deprecated(reason: "use name serviceKind instead")
}

"""
Information and status about the mirroring of a repository. In this case, the remote source repository
is external to Sourcegraph and the mirror is maintained by the Sourcegraph site (not the other way
around).
"""
type MirrorRepositoryInfo {
    """
    The URL of the remote source repository.
    """
    remoteURL: String!
    """
    Whether the clone of the repository has begun but not yet completed.
    """
    cloneInProgress: Boolean!
    """
    A single line of text that contains progress information for the running clone command.
    The format of the progress text is not specified.
    It is intended to be displayed directly to a user.
    e.g.
    "Receiving objects:  95% (2041/2148), 292.01 KiB | 515.00 KiB/s"
    "Resolving deltas:   9% (117/1263)"
    """
    cloneProgress: String
    """
    Whether the repository has ever been successfully cloned.
    """
    cloned: Boolean!
    """
    Whether the repository is currently corrupt.
    """
    isCorrupted: Boolean!
    """
    A Log of the corruption events that have been detected on this repository. Only 10 events are kept and the events
    are ordered from most recent to least.
    """
    corruptionLogs: [RepoCorruptionLog!]!
    """
    When the repository was last successfully updated from the remote source repository.
    """
    updatedAt: DateTime
    """
    When the repository is next scheduled to be updated from the remote source repository.
    """
    nextSyncAt: DateTime
    """
    The state of this repository in the update schedule.
    """
    updateSchedule: UpdateSchedule
    """
    The state of this repository in the update queue.
    """
    updateQueue: UpdateQueue
    """
    The last error message, if any, returned when fetching or cloning the repo
    """
    lastError: String
    """
    The output of the most recent repo sync job
    """
    lastSyncOutput: String
    """
    The byte size of the repo.
    """
    byteSize: BigInt!
    """
    The gitserver shard on which the repository is or will be cloned.
    Only site admins can access this field.
    """
    shard: String
}

"""
A corruption log entry that that records the time of when corruption was detected and a reason why the repo is regarded
as corrupt
"""
type RepoCorruptionLog {
    """
    The time at which the repository was detected to be corrupt
    """
    timestamp: DateTime!
    """
    The reason why this repository was regarded as corrupt
    """
    reason: String!
}

"""
The state of a repository in the update schedule.
"""
type UpdateSchedule {
    """
    The interval that was used when scheduling the current due time.
    """
    intervalSeconds: Int!
    """
    The next time that the repo will be inserted into the update queue.
    """
    due: DateTime!
    """
    The index of the repo in the schedule.
    """
    index: Int!
    """
    The total number of repos in the schedule.
    """
    total: Int!
}

"""
The state of a repository in the update queue.
"""
type UpdateQueue {
    """
    The index of the repo in the update queue.
    Updating repos are placed at the end of the queue until they finish updating
    so don't display this if updating is true.
    """
    index: Int!
    """
    True if the repo is currently updating.
    """
    updating: Boolean!
    """
    The total number of repos in the update queue (including updating repos).
    """
    total: Int!
}

"""
A repository on an external service (such as GitHub, GitLab, Phabricator, etc.).
"""
type ExternalRepository {
    """
    The repository's ID on the external service.
    Example: For GitHub, this is the GitHub GraphQL API's node ID for the repository.
    """
    id: String!
    """
    The type of external service where this repository resides.
    Example: "github", "gitlab", etc.
    """
    serviceType: String!
    """
    The particular instance of the external service where this repository resides. Its value is
    opaque but typically consists of the canonical base URL to the service.
    Example: For GitHub.com, this is "https://github.com/".
    """
    serviceID: String!
}

"""
Information about a repository's text search index.
"""
type RepositoryTextSearchIndex {
    """
    The indexed repository.
    """
    repository: Repository!
    """
    The status of the text search index, if available.
    """
    status: RepositoryTextSearchIndexStatus
    """
    Git refs in the repository that are configured for text search indexing.
    """
    refs: [RepositoryTextSearchIndexedRef!]!
    """
    Information about the indexserver that hosts the repo's index.
    """
    host: repositoryIndexserverHost
}

"""
The status of a repository's text search index.
"""
type RepositoryTextSearchIndexStatus {
    """
    The date that the index was last updated.
    """
    updatedAt: DateTime!
    """
    The byte size of the original content.
    """
    contentByteSize: BigInt!
    """
    The number of files in the original content.
    """
    contentFilesCount: Int!
    """
    The byte size of the index.
    """
    indexByteSize: Int!
    """
    The number of index shards.
    """
    indexShardsCount: Int!

    """
    EXPERIMENTAL: The number of newlines appearing in the index.
    """
    newLinesCount: Int!

    """
    EXPERIMENTAL: The number of newlines in the default branch.
    """
    defaultBranchNewLinesCount: Int!

    """
    EXPERIMENTAL: The number of newlines in the other branches.
    """
    otherBranchesNewLinesCount: Int!
}

"""
Information about the indexserver that hosts the repo's index.
"""
type repositoryIndexserverHost {
    """
    The hostname of the indexserver.
    """
    name: String!
}

"""
A Git ref (usually a branch) in a repository that is configured to be indexed for text search.
"""
type RepositoryTextSearchIndexedRef {
    """
    The Git ref (usually a branch) that is configured to be indexed for text search. To find the specific commit
    SHA that was indexed, use RepositoryTextSearchIndexedRef.indexedCommit; this field's ref target resolves to
    the current target, not the target at the time of indexing.
    """
    ref: GitRef!
    """
    Whether a text search index exists for this ref.
    """
    indexed: Boolean!
    """
    Whether the text search index is of the current commit for the Git ref. If false, the index is stale.
    """
    current: Boolean!
    """
    The indexed Git commit (which may differ from the ref's current target if the index is out of date). If
    indexed is false, this field's value is null.
    """
    indexedCommit: GitObject
    """
    EXPERIMENTAL: Information about the files that were not indexed.
    """
    skippedIndexed: SkippedIndexed
}

"""
EXPERIMENTAL: Information about the files that were not indexed.
"""
type SkippedIndexed {
    """
    The count of files that were not indexed.
    """
    count: BigInt!
    """
    The query to retrieve the list of files that were not indexed.
    """
    query: String!
}

"""
A list of Git refs.
"""
type GitRefConnection {
    """
    A list of Git refs.
    """
    nodes: [GitRef!]!
    """
    The total count of Git refs in the connection. This total count may be larger
    than the number of nodes in this object when the result is paginated.
    """
    totalCount: Int!
    """
    Pagination information.
    """
    pageInfo: PageInfo!
}

"""
Either a preview or an actual repository comparison.
"""
union RepositoryComparisonInterface = RepositoryComparison | PreviewRepositoryComparison

"""
A not-yet-committed preview of a diff on a repository.
"""
type PreviewRepositoryComparison {
    """
    The repository that is the base (left-hand side) of this comparison.
    """
    baseRepository: Repository!

    """
    The file diffs for each changed file.
    """
    fileDiffs(
        """
        Return the first n file diffs from the list.
        """
        first: Int
        """
        Return file diffs after the given cursor.
        """
        after: String
        """
        A list of paths or directories used to filter the diffs
        """
        paths: [String!]
    ): FileDiffConnection!
}

"""
The differences between two concrete Git commits in a repository.
"""
type RepositoryComparison {
    """
    The repository that is the base (left-hand side) of this comparison.
    """
    baseRepository: Repository!

    """
    The repository that is the head (right-hand side) of this comparison. Cross-repository
    comparisons are not yet supported, so this is always equal to
    RepositoryComparison.baseRepository.
    """
    headRepository: Repository!

    """
    The range that this comparison represents.
    """
    range: GitRevisionRange!
    """
    The commits in the comparison range, excluding the base and including the head.
    """
    commits(
        """
        Return the first n commits from the list.
        """
        first: Int

        """
        Filter to only the commits that modify files that match path.
        Path can be either a file or a containing directory.
        """
        path: String
    ): GitCommitConnection!
    """
    The file diffs for each changed file.
    """
    fileDiffs(
        """
        Return the first n file diffs from the list.
        """
        first: Int
        """
        Return file diffs after the given cursor.
        """
        after: String
        """
        A list of paths or directories used to filter the diffs
        """
        paths: [String!]
    ): FileDiffConnection!
}

"""
A list of file diffs.
"""
type FileDiffConnection {
    """
    A list of file diffs.
    """
    nodes: [FileDiff!]!
    """
    The total count of file diffs in the connection, if available. This total count may be larger than the number
    of nodes in this object when the result is paginated.
    """
    totalCount: Int
    """
    Pagination information.
    """
    pageInfo: PageInfo!
    """
    The diff stat for the file diffs in this object, which may be a subset of the entire diff if the result is
    paginated.
    """
    diffStat: DiffStat!
    """
    The raw diff for the file diffs in this object, which may be a subset of the entire diff if the result is
    paginated.
    """
    rawDiff: String!
}

"""
A diff for a single file.
"""
type FileDiff {
    """
    The old (original) path of the file, or null if the file was added.
    """
    oldPath: String
    """
    The old file, or null if the file was created (oldFile.path == oldPath).
    """
    oldFile: File2
    """
    The new (changed) path of the file, or null if the file was deleted.
    """
    newPath: String
    """
    The new file, or null if the file was deleted (newFile.path == newPath).
    """
    newFile: File2
    """
    The old file (if the file was deleted) and otherwise the new file. This file field is typically used by
    clients that want to show a "View" link to the file.
    """
    mostRelevantFile: File2!
    """
    Hunks that were changed from old to new.
    """
    hunks: [FileDiffHunk!]!
    """
    The diff stat for the whole file.
    """
    stat: DiffStat!
    """
    FOR INTERNAL USE ONLY.
    An identifier for the file diff that is unique among all other file diffs in the list that
    contains it.
    """
    internalID: String!
}

"""
The type of content in a hunk line.
"""
enum DiffHunkLineType {
    """
    Added line.
    """
    ADDED
    """
    Unchanged line.
    """
    UNCHANGED
    """
    Deleted line.
    """
    DELETED
}

"""
A single highlighted line, including the kind of line.
"""
type HighlightedDiffHunkLine {
    """
    The HTML containing the syntax-highlighted line of code.
    """
    html: String!
    """
    The operation that happened on this line, in patches it is prefixed with '+', '-', ' '.
    Can be either add, delete, or no change.
    """
    kind: DiffHunkLineType!
}

"""
A highlighted hunk, consisting of all its lines.
"""
type HighlightedDiffHunkBody {
    """
    Whether highlighting was aborted.
    """
    aborted: Boolean!
    """
    The highlighted lines.
    """
    lines: [HighlightedDiffHunkLine!]!
}

"""
A specific highlighted line range to fetch.
"""
input HighlightLineRange {
    """
    The first line to fetch (0-indexed, inclusive). Values outside the bounds of the file will
    automatically be clamped within the valid range.
    """
    startLine: Int!
    """
    The last line to fetch (0-indexed, inclusive). Values outside the bounds of the file will
    automatically be clamped within the valid range.
    """
    endLine: Int!
}

"""
A changed region ("hunk") in a file diff.
"""
type FileDiffHunk {
    """
    The range of the old file that the hunk applies to.
    """
    oldRange: FileDiffHunkRange!
    """
    Whether the old file had a trailing newline.
    """
    oldNoNewlineAt: Boolean!
    """
    The range of the new file that the hunk applies to.
    """
    newRange: FileDiffHunkRange!
    """
    The diff hunk section heading, if any.
    """
    section: String
    """
    The hunk body, with lines prefixed with '-', '+', or ' '.
    """
    body: String!
    """
    Highlight the hunk.
    """
    highlight(
        disableTimeout: Boolean!
        isLightTheme: Boolean
            @deprecated(reason: "Not required anymore, highlighting is based on dynamic CSS variables now.")
        """
        If highlightLongLines is true, lines which are longer than 2000 bytes are highlighted.
        2000 bytes is enabled. This may produce a significant amount of HTML
        which some browsers (such as Chrome, but not Firefox) may have trouble
        rendering efficiently.
        """
        highlightLongLines: Boolean = false
        """
        Specifies which format/highlighting technique to use.
        """
        format: HighlightResponseFormat = HTML_HIGHLIGHT
    ): HighlightedDiffHunkBody!
}

"""
A hunk range in one side (old/new) of a diff.
"""
type FileDiffHunkRange {
    """
    The first line that the hunk applies to.
    """
    startLine: Int!
    """
    The number of lines that the hunk applies to.
    """
    lines: Int!
}

"""
Statistics about a diff.
"""
type DiffStat {
    """
    Number of lines added.
    """
    added: Int!
    """
    Number of lines deleted.
    """
    deleted: Int!
}

"""
A list of contributors to a repository.
"""
type RepositoryContributorConnection {
    """
    A list of contributors to a repository.
    """
    nodes: [RepositoryContributor!]!
    """
    The total count of contributors in the connection, if available. This total count may be larger than the
    number of nodes in this object when the result is paginated.
    """
    totalCount: Int!
    """
    Pagination information.
    """
    pageInfo: BidirectionalPageInfo!
}

"""
A contributor to a repository.
"""
type RepositoryContributor {
    """
    The personal information for the contributor.
    """
    person: Person!
    """
    The number of contributions made by this contributor.
    """
    count: Int!
    """
    The repository in which the contributions occurred.
    """
    repository: Repository!
    """
    Commits by the contributor.
    """
    commits(
        """
        Return the first n commits.
        """
        first: Int
    ): GitCommitConnection!
}

"""
A Git object ID (SHA-1 hash, 40 hexadecimal characters).
"""
scalar GitObjectID

"""
A Git ref.
"""
type GitRef implements Node {
    """
    The globally addressable ID for the Git ref.
    """
    id: ID!
    """
    The full ref name (e.g., "refs/heads/mybranch" or "refs/tags/mytag").
    """
    name: String!
    """
    An unambiguous short name for the ref.
    """
    abbrevName: String!
    """
    The display name of the ref. For branches ("refs/heads/foo"), this is the branch
    name ("foo").
    As a special case, for GitHub pull request refs of the form refs/pull/NUMBER/head,
    this is "NUMBER".
    """
    displayName: String!
    """
    The prefix of the ref, either "", "refs/", "refs/heads/", "refs/pull/", or
    "refs/tags/". This prefix is always a prefix of the ref's name.
    """
    prefix: String!
    """
    The type of this Git ref.
    """
    type: GitRefType!
    """
    The object that the ref points to.
    """
    target: GitObject!
    """
    The associated repository.
    """
    repository: Repository!
    """
    The URL to this Git ref.
    """
    url: String!
}

"""
All possible types of Git refs.
"""
enum GitRefType {
    """
    A Git branch (in refs/heads/).
    """
    GIT_BRANCH
    """
    A Git tag (in refs/tags/).
    """
    GIT_TAG
    """
    A Git ref that is neither a branch nor tag.
    """
    GIT_REF_OTHER
}

"""
Ordering options for Git refs.
"""
enum GitRefOrder {
    """
    By the authored or committed at date, whichever is more recent.
    """
    AUTHORED_OR_COMMITTED_AT
}

"""
A Git object.
"""
type GitObject {
    """
    This object's OID.
    """
    oid: GitObjectID!
    """
    The abbreviated form of this object's OID.
    """
    abbreviatedOID: String!
    """
    The commit object, if it is a commit and it exists; otherwise null.
    """
    commit: GitCommit
    """
    The Git object's type.
    """
    type: GitObjectType!
}

"""
All possible types of Git objects.
"""
enum GitObjectType {
    """
    A Git commit object.
    """
    GIT_COMMIT
    """
    A Git tag object.
    """
    GIT_TAG
    """
    A Git tree object.
    """
    GIT_TREE
    """
    A Git blob object.
    """
    GIT_BLOB
    """
    A Git object of unknown type.
    """
    GIT_UNKNOWN
}

"""
A Git revspec expression that (possibly) resolves to a Git revision.
"""
type GitRevSpecExpr {
    """
    The original Git revspec expression.
    """
    expr: String!
    """
    The Git object that the revspec resolves to, or null otherwise.
    """
    object: GitObject
}

"""
A Git revspec.
"""
union GitRevSpec = GitRef | GitRevSpecExpr | GitObject

"""
A Git revision range of the form "base..head" or "base...head". Other revision
range formats are not supported.
"""
type GitRevisionRange {
    """
    The Git revision range expression of the form "base..head" or "base...head".
    """
    expr: String!
    """
    The base (left-hand side) of the range.
    """
    base: GitRevSpec!
    """
    The base's revspec as an expression.
    """
    baseRevSpec: GitRevSpecExpr!
    """
    The head (right-hand side) of the range.
    """
    head: GitRevSpec!
    """
    The head's revspec as an expression.
    """
    headRevSpec: GitRevSpecExpr!
    """
    The merge-base of the base and head revisions, if this is a "base...head"
    revision range. If this is a "base..head" revision range, then this field is null.
    """
    mergeBase: GitObject
}

"""
A Phabricator repository.
"""
type PhabricatorRepo {
    """
    The canonical repo name (e.g. "github.com/gorilla/mux").
    """
    name: String!
    """
    An alias for name.
    """
    uri: String! @deprecated(reason: "use name instead")
    """
    The unique Phabricator identifier for the repo, like "MUX"
    """
    callsign: String!
    """
    The URL to the phabricator instance (e.g. http://phabricator.sgdev.org)
    """
    url: String!
}

"""
Pagination information for forward-only pagination. See https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo.
"""
type PageInfo {
    """
    When paginating forwards, the cursor to continue.
    """
    endCursor: String
    """
    When paginating forwards, are there more items?
    """
    hasNextPage: Boolean!
}

"""
Pagination information for bi-directional pagination. See https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo.
"""
type BidirectionalPageInfo {
    """
    When paginating backwards, the cursor to continue.
    """
    startCursor: String
    """
    When paginating forwards, the cursor to continue.
    """
    endCursor: String
    """
    When paginating backwards, are there more items?
    """
    hasPreviousPage: Boolean!
    """
    When paginating forwards, are there more items?
    """
    hasNextPage: Boolean!
}

"""
A list of Git commits.
"""
type GitCommitConnection {
    """
    A list of Git commits.
    """
    nodes: [GitCommit!]!
    """
    The total number of Git commits in the connection. If the GitCommitConnection is paginated
    (e.g., because a "first" parameter was provided to the field that produced it), this field is
    null to avoid it taking unexpectedly long to compute the total count. Remove the pagination
    parameters to obtain a non-null value for this field.
    """
    totalCount: Int
    """
    Pagination information.
    """
    pageInfo: PageInfo!
}

"""
Statistics about a language's usage.
"""
type LanguageStatistics {
    """
    The name of the language.
    """
    name: String!

    """
    The total bytes in the language.
    """
    totalBytes: Float!

    """
    The total number of lines in the language.
    """
    totalLines: Int!
}

"""
A Git commit.
"""
type GitCommit implements Node {
    """
    The globally addressable ID for this commit.
    """
    id: ID!
    """
    The repository that contains this commit.
    """
    repository: Repository!
    """
    This commit's Git object ID (OID), a 40-character SHA-1 hash.
    """
    oid: GitObjectID!
    """
    The abbreviated form of this commit's OID.
    """
    abbreviatedOID: String!
    """
    EXPERIMENTAL: The perforce changelist ID if this git commit was originally converted from a perforce depot.
    """
    perforceChangelist: PerforceChangelist
    """
    This commit's author.
    """
    author: Signature!
    """
    This commit's committer, if any.
    """
    committer: Signature
    """
    The full commit message.
    """
    message: String!
    """
    The first line of the commit message.
    """
    subject: String!
    """
    The contents of the commit message after the first line.
    """
    body: String
    """
    Parent commits of this commit.
    """
    parents: [GitCommit!]!
    """
    The URL to this commit (using the input revision specifier, which may not be immutable).
    """
    url: String!
    """
    The canonical URL to this commit (using an immutable revision specifier).
    """
    canonicalURL: String!
    """
    The URLs to this commit on its repository's external services.
    """
    externalURLs: [ExternalLink!]!
    """
    The Git tree or blob in this commit at the given path.
    """
    path(
        """
        The path of the tree or blob.
        """
        path: String = ""
    ): GitTreeOrBlob
    """
    The Git tree in this commit at the given path.
    """
    tree(
        """
        The path of the tree.
        """
        path: String = ""
        """
        Whether to recurse into sub-trees. If true, it overrides the value of the "recursive" parameter on all of
        GitTree's fields.
        DEPRECATED: Use the "recursive" parameter on GitTree's fields instead.
        """
        recursive: Boolean = false
    ): GitTree
    """
    A list of file names in this repository.
    """
    fileNames: [String!]!
    """
    The Git blob in this commit at the given path.
    """
    blob(path: String!): GitBlob
    """
    The file at the given path for this commit.
    See "File" documentation for the difference between this field and the "blob" field.
    """
    file(path: String!): File2
    """
    Lists the programming languages present in the tree at this commit.
    """
    languages: [String!]!
    """
    List statistics for each language present in the repository.
    """
    languageStatistics: [LanguageStatistics!]!
    """
    The log of commits consisting of this commit and its ancestors.
    """
    ancestors(
        """
        Returns the first n commits from the list.
        """
        first: Int
        """
        Return commits that match the query.
        """
        query: String
        """
        Return commits that affect the path.
        """
        path: String
        """
        Follow history beyond renames (only works for a single file).
        """
        follow: Boolean = false
        """
        Return commits more recent than the specified date.
        """
        after: String
        """
        Skip the first N commits of the repo before returning the number of commits as set in the field "first".
        """
        afterCursor: String
        """
        Return commits older than the specified date.
        """
        before: String
    ): GitCommitConnection!
    """
    Returns the number of commits that this commit is behind and ahead of revspec.
    """
    behindAhead(revspec: String!): BehindAheadCounts!
    """
    Symbols defined as of this commit. (All symbols, not just symbols that were newly defined in this commit.)
    """
    symbols(
        """
        Returns the first n symbols from the list.
        """
        first: Int
        """
        Return symbols matching the query.
        """
        query: String
        """
        A list of regular expressions, all of which must match all
        file paths returned in the list.
        """
        includePatterns: [String!]
    ): SymbolConnection!

    """
    Returns the comparison with another revision.
    """
    diff(
        """
        The base commit to compare to. Defaults to the commit's first parent.
        """
        base: String
    ): RepositoryComparison!
}

"""
Either a git tree or blob.
"""
union GitTreeOrBlob = GitTree | GitBlob

"""
A set of Git behind/ahead counts for one commit relative to another.
"""
type BehindAheadCounts {
    """
    The number of commits behind the other commit.
    """
    behind: Int!
    """
    The number of commits ahead of the other commit.
    """
    ahead: Int!
}

"""
A signature.
"""
type Signature {
    """
    The person.
    """
    person: Person!
    """
    The date.
    """
    date: String!
}

"""
A person.
"""
type Person {
    """
    The name.
    """
    name: String!
    """
    The email.
    """
    email: String!
    """
    The name if set; otherwise the email username.
    """
    displayName: String!
    """
    The avatar URL, if known.
    """
    avatarURL: String
    """
    The corresponding user account for this person, if one exists.
    """
    user: User
}

"""
A Git submodule
"""
type Submodule {
    """
    The remote repository URL of the submodule.
    """
    url: String!
    """
    The commit of the submodule.
    """
    commit: String!
    """
    The path to which the submodule is checked out.
    """
    path: String!
}

"""
A file, directory, or other tree entry.
"""
interface TreeEntry {
    """
    The full path (relative to the repository root) of this tree entry.
    """
    path: String!
    """
    The base name (i.e., file name only) of this tree entry.
    """
    name: String!
    """
    Whether this tree entry is a directory.
    """
    isDirectory: Boolean!
    """
    The URL to this tree entry (using the input revision specifier, which may not be immutable).
    """
    url: String!
    """
    The canonical URL to this tree entry (using an immutable revision specifier).
    """
    canonicalURL: String!
    """
    The URLs to this tree entry on external services.
    """
    externalURLs: [ExternalLink!]!
    """
    Symbols defined in this file or directory.
    """
    symbols(
        """
        Returns the first n symbols from the list.
        """
        first: Int
        """
        Return symbols matching the query.
        """
        query: String
    ): SymbolConnection!
    """
    Submodule metadata if this tree points to a submodule
    """
    submodule: Submodule
    """
    Whether this tree entry is a single child
    """
    isSingleChild(
        """
        Returns the first n files in the tree.
        """
        first: Int
        """
        Recurse into sub-trees.
        """
        recursive: Boolean = false
        """
        Recurse into sub-trees of single-child directories
        """
        recursiveSingleChild: Boolean = false
    ): Boolean!
}

"""
A Git tree in a repository.
"""
type GitTree implements TreeEntry {
    """
    The full path (relative to the root) of this tree.
    """
    path: String!
    """
    Whether this tree is the root (top-level) tree.
    """
    isRoot: Boolean!
    """
    The base name (i.e., last path component only) of this tree.
    """
    name: String!
    """
    True because this is a directory. (The value differs for other TreeEntry interface implementations, such as
    File.)
    """
    isDirectory: Boolean!
    """
    The Git commit containing this tree.
    """
    commit: GitCommit!
    """
    The repository containing this tree.
    """
    repository: Repository!
    """
    The URL to this tree (using the input revision specifier, which may not be immutable).
    """
    url: String!
    """
    The canonical URL to this tree (using an immutable revision specifier).
    """
    canonicalURL: String!
    """
    The URLs to this tree on external services.
    """
    externalURLs: [ExternalLink!]!
    """
    The URL to this entry's raw contents as a Zip archive.
    """
    rawZipArchiveURL: String!
    """
    Submodule metadata if this tree points to a submodule
    """
    submodule: Submodule
    """
    A list of directories in this tree.
    """
    directories(
        """
        Returns the first n files in the tree.
        """
        first: Int
        """
        Recurse into sub-trees.
        """
        recursive: Boolean = false
    ): [GitTree!]!
    """
    A list of files in this tree.
    """
    files(
        """
        Returns the first n files in the tree.
        """
        first: Int
        """
        Recurse into sub-trees.
        """
        recursive: Boolean = false
    ): [File!]!
    """
    A list of entries in this tree.
    """
    entries(
        """
        Returns the first n files in the tree.
        """
        first: Int
        """
        Recurse into sub-trees. If true, implies recursiveSingleChild.
        """
        recursive: Boolean = false
        """
        Recurse into sub-trees of single-child directories. If true, we return a flat list of
        every directory that is a single child, and any directories or files that are
        nested in a single child.
        """
        recursiveSingleChild: Boolean = false
        """
        Includes all parent directories and their entries. For example, if the path is
        `/client/web/something`, it will return the following entries in this order:

          - `/*`
          - `/client/*`
          - `/client/web/*`
          - `/client/web/something/*`

        This is useful for rendering a collapsed tree view for the entry.
        """
        ancestors: Boolean = false
    ): [TreeEntry!]!
    """
    Symbols defined in this tree.
    """
    symbols(
        """
        Returns the first n symbols from the list.
        """
        first: Int
        """
        Return symbols matching the query.
        """
        query: String
    ): SymbolConnection!
    """
    Whether this tree entry is a single child
    """
    isSingleChild(
        """
        Returns the first n files in the tree.
        """
        first: Int
        """
        Recurse into sub-trees.
        """
        recursive: Boolean = false
        """
        Recurse into sub-trees of single-child directories
        """
        recursiveSingleChild: Boolean = false
    ): Boolean!
}

"""
The format and highlighting to use when requesting highlighting information for a file.
"""
enum HighlightResponseFormat {
    """
    HTML formatted file content without syntax highlighting.
    """
    HTML_PLAINTEXT
    """
    HTML formatted file content with syntax highlighting.
    """
    HTML_HIGHLIGHT
    """
    SCIP highlighting information as JSON.
    """
    JSON_SCIP
}

"""
A file.
In a future version of Sourcegraph, a repository's files may be distinct from a repository's blobs
(for example, to support searching/browsing generated files that aren't committed and don't exist
as Git blobs). Clients should generally use the GitBlob concrete type and GitCommit.blobs (not
GitCommit.files), unless they explicitly want to opt-in to different behavior in the future.
INTERNAL: This is temporarily named File2 during a migration. Do not refer to the name File2 in
any API clients as the name will change soon.
"""
interface File2 {
    """
    The full path (relative to the root) of this file.
    """
    path: String!
    """
    The base name (i.e., file name only) of this file.
    """
    name: String!
    """
    False because this is a file, not a directory.
    """
    isDirectory: Boolean!
    """
    The content of this file.
    """
    content(
        """
        Return file content starting at line "startLine". A value <= 0 will be the start of the file.
        """
        startLine: Int
        """
        Return file content ending at line "endLine". A value < 0 or > totalLines will set endLine to the end of the file.
        """
        endLine: Int
    ): String!
    """
    The file size in bytes.
    """
    byteSize: Int!
    """
    Total line count for the file. Returns 0 for binary files.
    """
    totalLines: Int!
    """
    Whether or not it is binary.
    """
    binary: Boolean!
    """
    The file rendered as rich HTML, or an empty string if it is not a supported
    rich file type.
    This HTML string is already escaped and thus is always safe to render.
    """
    richHTML(
        """
        Return richHTML content starting at line "startLine". A value <= 0 will be the start of the file.
        """
        startLine: Int
        """
        Return richHTML content ending at line "endLine". A value < 0 or > totalLines will set endLine to the end of the file.
        """
        endLine: Int
    ): String!
    """
    The URL to this file (using the input revision specifier, which may not be immutable).
    """
    url: String!
    """
    The canonical URL to this file (using an immutable revision specifier).
    """
    canonicalURL: String!
    """
    The URL to this file using the changelist ID if this file is inside a perforce depot.
    """
    changelistURL: String
    """
    The URLs to this file on external services.
    """
    externalURLs: [ExternalLink!]!
    """
    Highlight the file.
    """
    highlight(
        disableTimeout: Boolean!
        isLightTheme: Boolean
            @deprecated(reason: "Not required anymore, highlighting is based on dynamic CSS variables now.")
        """
        If highlightLongLines is true, lines which are longer than 2000 bytes are highlighted.
        2000 bytes is enabled. This may produce a significant amount of HTML
        which some browsers (such as Chrome, but not Firefox) may have trouble
        rendering efficiently.
        """
        highlightLongLines: Boolean = false
        """
        Specifies which format/highlighting technique to use.
        """
        format: HighlightResponseFormat = HTML_HIGHLIGHT
        """
        Return highlight content starting at line "startLine". A value <= 0 will be the start of the file.
        Warning: Pagination only works with the HTML_PLAINTEXT format type at the moment.
        """
        startLine: Int
        """
        Return blob highlight ending at line "endLine". A value < 0 or > totalLines will set endLine to the end of the file.
        Warning: Pagination only works with the HTML_PLAINTEXT format type at the moment.
        """
        endLine: Int
    ): HighlightedFile!
}

"""
A virtual file is an arbitrary file that is generated in memory.
"""
type VirtualFile implements File2 {
    """
    The full path (relative to the root) of this file.
    """
    path: String!
    """
    The base name (i.e., file name only) of this file.
    """
    name: String!
    """
    False because this is a file, not a directory.
    """
    isDirectory: Boolean!
    """
    The content of this file.
    """
    content(
        """
        Return file content starting at line "startLine". A value <= 0 will be the start of the file.
        """
        startLine: Int
        """
        Return file content ending at line "endLine". A value < 0 or > totalLines will set endLine to the end of the file.
        """
        endLine: Int
    ): String!
    """
    The file size in bytes.
    """
    byteSize: Int!
    """
    Total line count for the file. Returns 0 for binary files.
    """
    totalLines: Int!
    """
    Whether or not it is binary.
    """
    binary: Boolean!
    """
    The file rendered as rich HTML, or an empty string if it is not a supported
    rich file type.
    This HTML string is already escaped and thus is always safe to render.
    """
    richHTML(
        """
        Return richHTML content starting at line "startLine". A value <= 0 will be the start of the file.
        """
        startLine: Int
        """
        Return richHTML content ending at line "endLine". A value < 0 or > totalLines will set endLine to the end of the file.
        """
        endLine: Int
    ): String!
    """
    Not implemented.
    """
    url: String!
    """
    Not implemented.
    """
    canonicalURL: String!
    """
    Not impleemented.
    """
    changelistURL: String
    """
    Not implemented.
    """
    externalURLs: [ExternalLink!]!
    """
    Highlight the file.
    """
    highlight(
        disableTimeout: Boolean!
        isLightTheme: Boolean
            @deprecated(reason: "Not required anymore, highlighting is based on dynamic CSS variables now.")
        """
        If highlightLongLines is true, lines which are longer than 2000 bytes are highlighted.
        2000 bytes is enabled. This may produce a significant amount of HTML
        which some browsers (such as Chrome, but not Firefox) may have trouble
        rendering efficiently.
        """
        highlightLongLines: Boolean = false
        """
        Specifies which format/highlighting technique to use.
        """
        format: HighlightResponseFormat = HTML_HIGHLIGHT
        """
        Return highlight content starting at line "startLine". A value <= 0 will be the start of the file.
        Warning: Pagination only works with the HTML_PLAINTEXT format type at the moment.
        """
        startLine: Int
        """
        Return highlight content ending at line "endLine". A value < 0 or > totalLines will set endLine to the end of the file.
        Warning: Pagination only works with the HTML_PLAINTEXT format type at the moment.
        """
        endLine: Int
    ): HighlightedFile!
}

"""
File is temporarily preserved for backcompat with browser extension search API client code.
"""
type File {
    """
    The full path (relative to the repository root) of this file.
    """
    path: String!
    """
    The base name (i.e., file name only) of this file's path.
    """
    name: String!
    """
    Whether this is a directory.
    """
    isDirectory: Boolean!
    """
    The URL to this file on Sourcegraph.
    """
    url: String!
    """
    The repository that contains this file.
    """
    repository: Repository!
}

"""
A Git blob in a repository.
"""
type GitBlob implements TreeEntry & File2 {
    """
    The full path (relative to the repository root) of this blob.
    """
    path: String!
    """
    The base name (i.e., file name only) of this blob's path.
    """
    name: String!
    """
    False because this is a blob (file), not a directory.
    """
    isDirectory: Boolean!
    """
    The content of this blob.
    """
    content(
        """
        Return blob content starting at line "startLine". A value <= 0 will be the start of the file.
        """
        startLine: Int
        """
        Return blob content ending at line "endLine". A value < 0 or > totalLines will set endLine to the end of the file.
        """
        endLine: Int
    ): String!
    """
    The file size in bytes.
    """
    byteSize: Int!
    """
    Total line count for the Blob. Returns 0 for binary files.
    """
    totalLines: Int!
    """
    Whether or not it is binary.
    """
    binary: Boolean!
    """
    The blob contents rendered as rich HTML, or an empty string if it is not a supported
    rich file type.
    This HTML string is already escaped and thus is always safe to render.
    """
    richHTML(
        """
        Return richHTML content starting at line "startLine". A value <= 0 will be the start of the file.
        """
        startLine: Int
        """
        Return richHTML content ending at line "endLine". A value < 0 or > totalLines will set endLine to the end of the file.
        """
        endLine: Int
    ): String!
    """
    The Git commit containing this blob.
    """
    commit: GitCommit!
    """
    The repository containing this Git blob.
    """
    repository: Repository!
    """
    The URL to this blob (using the input revision specifier, which may not be immutable).
    """
    url: String!
    """
    The canonical URL to this blob (using an immutable revision specifier).
    """
    canonicalURL: String!

    """
    The URL to this file using the changelist ID if this file is inside a perforce depot.
    """
    changelistURL: String

    """
    The URLs to this blob on its repository's external services.
    """
    externalURLs: [ExternalLink!]!
    """
    Blame the blob.
    """
    blame(startLine: Int!, endLine: Int!): [Hunk!]!
    """
    Highlight the blob contents.
    """
    highlight(
        disableTimeout: Boolean!
        isLightTheme: Boolean
            @deprecated(reason: "Not required anymore, highlighting is based on dynamic CSS variables now.")
        """
        If highlightLongLines is true, lines which are longer than 2000 bytes are highlighted.
        2000 bytes is enabled. This may produce a significant amount of HTML
        which some browsers (such as Chrome, but not Firefox) may have trouble
        rendering efficiently.
        """
        highlightLongLines: Boolean = false
        """
        Specifies which format/highlighting technique to use.
        """
        format: HighlightResponseFormat = HTML_HIGHLIGHT
        """
        Return highlight content starting at line "startLine". A value <= 0 will be the start of the file.
        Warning: Pagination only works with the HTML_PLAINTEXT format type at the moment.
        """
        startLine: Int
        """
        Return highlight content ending at line "endLine". A value < 0 or > totalLines will set endLine to the end of the file.
        Warning: Pagination only works with the HTML_PLAINTEXT format type at the moment.
        """
        endLine: Int
    ): HighlightedFile!
    """
    Submodule metadata if this tree points to a submodule
    """
    submodule: Submodule
    """
    Symbols defined in this blob.
    """
    symbols(
        """
        Returns the first n symbols from the list.
        """
        first: Int
        """
        Return symbols matching the query.
        """
        query: String
    ): SymbolConnection!
    """
    EXPERIMENTAL: Symbol defined in this blob at the specific line number and character offset.
    """
    symbol(
        """
        The line number (0-based).
        """
        line: Int!
        """
        The character offset (0-based). The offset is measured in characters, not bytes.
        """
        character: Int!
    ): Symbol
    """
    Always false, since a blob is a file, not directory.
    """
    isSingleChild(
        """
        Returns the first n files in the tree.
        """
        first: Int
        """
        Recurse into sub-trees.
        """
        recursive: Boolean = false
        """
        Recurse into sub-trees of single-child directories
        """
        recursiveSingleChild: Boolean = false
    ): Boolean!
    """
    LFS is set if the GitBlob is a pointer to a file stored in LFS.
    """
    lfs: LFS
}

"""
Information about a blob stored in Git Large File Storage (LFS).
"""
type LFS {
    """
    The size of the file in LFS in bytes.
    Note: the file size in the GitBlob will be the size of the pointer not the file a
    user checks out.
    """
    byteSize: BigInt!
}

"""
A highlighted file.
"""
type HighlightedFile {
    """
    Whether or not it was aborted.
    """
    aborted: Boolean!
    """
    The HTML table that can be used to display the highlighted file.
    """
    html: String!
    """
    Base64 encoded JSON payload of LSIF Typed with syntax highlighting data.
    """
    lsif: String!
    """
    A list of the desired line ranges. Each list is a list of lines, where each element is an HTML
    table row '<tr>...</tr>' string. This is useful if you only need to display specific subsets of
    the file.
    """
    lineRanges(ranges: [HighlightLineRange!]!): [[String!]!]!
}

"""
A file match.
"""
type FileMatch {
    """
    The file containing the match.
    KNOWN ISSUE: This file's "commit" field contains incomplete data.
    KNOWN ISSUE: This field's type should be File! not GitBlob!.
    """
    file: GitBlob!
    """
    The repository containing the file match.
    """
    repository: Repository!
    """
    The revspec of the revision that contains this match. If no revspec was given (such as when no
    repository filter or revspec is specified in the search query), it is null.
    """
    revSpec: GitRevSpec
    """
    The symbols found in this file that match the query.
    """
    symbols: [Symbol!]!
    """
    The line matches.
    """
    lineMatches: [LineMatch!]!
    """
    EXPERIMENTAL: This field is experimental and may be unstable.
    The chunk matches.
    """
    chunkMatches: [ChunkMatch!]!
    """
    Whether or not the limit was hit.
    """
    limitHit: Boolean!
}

"""
A line match.
"""
type LineMatch {
    """
    The preview.
    """
    preview: String!
    """
    The line number. 0-based. The first line will have lineNumber 0. Note: A
    UI will normally display line numbers 1-based.
    """
    lineNumber: Int!
    """
    Tuples of [offset, length] measured in characters (not bytes).
    """
    offsetAndLengths: [[Int!]!]!
    """
    Whether or not the limit was hit.
    """
    limitHit: Boolean! @deprecated(reason: "will always be false")
}

"""
A set of matched ranges contained in a chunk of contiguous lines.
"""
type ChunkMatch {
    """
    The contiguous set of full lines which contain the matches in ranges.
    """
    content: String!
    """
    The location of the beginning of content.
    """
    contentStart: Position!
    """
    The set of ranges within the content that matched the search query.
    """
    ranges: [Range!]!
}

"""
A hunk.
"""
type Hunk {
    """
    The startLine.
    """
    startLine: Int!
    """
    The endLine.
    """
    endLine: Int!
    """
    The startByte.
    """
    startByte: Int!
    """
    The endByte.
    """
    endByte: Int!
    """
    The rev.
    """
    rev: String!
    """
    The author.
    """
    author: Signature!
    """
    The message.
    """
    message: String!
    """
    The commit that contains the hunk.
    """
    commit: GitCommit!
    """
    The original filename at the commit. Use this filename if you're reading the
    text contents of the file at the `commit` field of this hunk. The file may
    have been renamed after the commit so name of file where this hunk got computed
    may not exist.
    """
    filename: String!
}

"""
A namespace is a container for certain types of data and settings, such as a user or organization.
"""
interface Namespace {
    """
    The globally unique ID of this namespace.
    """
    id: ID!

    """
    The name of this namespace's component. For a user, this is the username. For an organization,
    this is the organization name.
    """
    namespaceName: String!

    """
    The URL to this namespace.
    """
    url: String!
}

"""
A list of users.
"""
type UserConnection {
    """
    A list of users.
    """
    nodes: [User!]!
    """
    The total count of users in the connection. This total count may be larger
    than the number of nodes in this object when the result is paginated.
    """
    totalCount: Int!
    """
    Pagination information.
    """
    pageInfo: PageInfo!
}

"""
A paginated connection for users.
"""
type NewUsersConnection implements Connection {
    """
    A list of users.
    """
    nodes: [User!]!

    """
    The total number of users in the connection.
    """
    totalCount: Int!

    """
    Pagination information.
    """
    pageInfo: ConnectionPageInfo!
}

"""
A user.
"""
type User implements Node & SettingsSubject & Namespace {
    """
    The unique ID for the user.
    """
    id: ID!
    """
    The user's username.
    """
    username: String!
    """
    The user's primary email address.
    Only the user and site admins can access this field.
    """
    email: String! @deprecated(reason: "use emails instead")
    """
    The display name chosen by the user.
    """
    displayName: String
    """
    The URL of the user's avatar image.
    """
    avatarURL: String
    """
    The URL to the user's profile on Sourcegraph.
    """
    url: String!
    """
    The URL to the user's settings.
    """
    settingsURL: String
    """
    The date when the user account was created on Sourcegraph.
    """
    createdAt: DateTime!
    """
    The date when the user account was last updated on Sourcegraph.
    """
    updatedAt: DateTime
    """
    Whether the user is a site admin.
    Only the user and site admins can access this field.
    """
    siteAdmin: Boolean!
    """
    Whether the user account uses built in auth.
    """
    builtinAuth: Boolean!
    """
    The latest settings for the user.
    Only the user and site admins can access this field.
    """
    latestSettings: Settings
    """
    All settings for this user, and the individual levels in the settings cascade (global > organization > user)
    that were merged to produce the final merged settings.
    Only the user and site admins can access this field.
    """
    settingsCascade: SettingsCascade!
    """
    DEPRECATED
    """
    configurationCascade: ConfigurationCascade!
        @deprecated(
            reason: "Use settingsCascade instead. This field is a deprecated alias for it and will be removed in a future release."
        )
    """
    The organizations that this user is a member of.
    """
    organizations: OrgConnection!
    """
    This user's organization memberships.
    """
    organizationMemberships: OrganizationMembershipConnection!
    """
    Whether the user has already accepted the terms of service or not.
    """
    tosAccepted: Boolean!
    """
    Whether the user accepted to be searched in the users picker or not.
    """
    searchable: Boolean!
    """
    The user's usage statistics on Sourcegraph.
    """
    usageStatistics: UserUsageStatistics!
    """
    The user's events on Sourcegraph.
    """
    eventLogs(
        """
        Returns the first n event logs from the list.
        """
        first: Int
        """
        Only return events matching this event name
        """
        eventName: String
    ): EventLogsConnection!
    """
    The user's email addresses.
    Only the user and site admins can access this field.
    """
    emails: [UserEmail!]!
    """
    Whether the user has a verified email or not.
    Only the user and site admins can access this field.
    """
    hasVerifiedEmail: Boolean!
    """
    The user's verified primary email address (if any).
    On dotcom only the user and site admins can access this field.
    """
    primaryEmail: UserEmail
    """
    The user's access tokens (which grant to the holder the privileges of the user). This consists
    of all access tokens whose subject is this user.
    Only the user and site admins can access this field.
    """
    accessTokens(
        """
        Returns the first n access tokens from the list.
        """
        first: Int
    ): AccessTokenConnection!
    """
    A list of external accounts that are associated with the user.
    """
    externalAccounts(
        """
        Returns the first n external accounts from the list.
        """
        first: Int
    ): ExternalAccountConnection!
    """
    The user's currently active session.
    Only the currently authenticated user can access this field. Site admins are not able to access sessions for
    other users.
    """
    session: Session!
    """
    Whether the viewer has admin privileges on this user. The user has admin privileges on their own user, and
    site admins have admin privileges on all users.
    """
    viewerCanAdminister: Boolean!
    """
    Whether the viewer can change the username of this user.
    The user can change their username unless auth.disableUsernameChanges is set.
    Site admins can always change the username of any user.
    """
    viewerCanChangeUsername: Boolean!
    """
    The user's survey responses.
    Only the user and site admins can access this field.
    """
    surveyResponses: [SurveyResponse!]!
    """
    The unique numeric ID for the user.
    FOR INTERNAL USE ONLY.
    """
    databaseID: Int!

    """
    The name of this user namespace's component. For users, this is the username.
    """
    namespaceName: String!

    """
    Whether the user is controlled externally through SCIM.
    """
    scimControlled: Boolean!

    """
    EXPERIMENTAL: Collaborators who can be invited to Sourcegraph. This typically comes from a few
    repositories this user has access to, and is derived from recent commit history of those.
    """
    invitableCollaborators: [Person!]!
    """
    The list of all roles assigned to this user.
    """
    roles(
        """
        The limit argument for forward pagination.
        """
        first: Int
        """
        The limit argument for backward pagination.
        """
        last: Int
        """
        The cursor argument for forward pagination.
        """
        after: String
        """
        The cursor argument for backward pagination.
        """
        before: String
    ): RoleConnection!
    """
    The list of permissions granted to this user based on their roles.
    """
    permissions: PermissionConnection!
    """
    The configured override for the user to the completions request quota per day.
    Null, if not overwritten.
    """
    completionsQuotaOverride: Int
    """
    The configured override for the user to the code completions request quota
    per day.
    Null, if not overwritten.
    """
    codeCompletionsQuotaOverride: Int
}

"""
An access token that grants to the holder the privileges of the user who created it.
"""
type AccessToken implements Node {
    """
    The unique ID for the access token.
    """
    id: ID!
    """
    The user whose privileges the access token grants.
    """
    subject: User!
    """
    The scopes that define the allowed set of operations that can be performed using this access token.
    """
    scopes: [String!]!
    """
    A user-supplied descriptive note for the access token.
    """
    note: String!
    """
    The user who created the access token. This is either the subject user (if the access token
    was created by the same user) or a site admin (who can create access tokens for any user).
    """
    creator: User!
    """
    The date when the access token was created.
    """
    createdAt: DateTime!
    """
    The date when the access token was last used to authenticate a request.
    """
    lastUsedAt: DateTime
}

"""
A list of access tokens.
"""
type AccessTokenConnection {
    """
    A list of access tokens.
    """
    nodes: [AccessToken!]!
    """
    The total count of access tokens in the connection. This total count may be larger than the number of nodes
    in this object when the result is paginated.
    """
    totalCount: Int!
    """
    Pagination information.
    """
    pageInfo: PageInfo!
}

"""
A list of authentication providers.
"""
type AuthProviderConnection {
    """
    A list of authentication providers.
    """
    nodes: [AuthProvider!]!
    """
    The total count of authentication providers in the connection. This total count may be larger than the number of nodes
    in this object when the result is paginated.
    """
    totalCount: Int!
    """
    Pagination information.
    """
    pageInfo: PageInfo!
}

"""
A provider of user authentication, such as an external single-sign-on service (e.g., using OpenID Connect or
SAML). The provider information in this type is visible to all viewers and does not contain any secret values.
"""
type AuthProvider {
    """
    The type of the auth provider.
    """
    serviceType: String!
    """
    An identifier for the service that the auth provider represents.
    """
    serviceID: String!
    """
    An identifier for the client of the service that the auth provider represents.
    """
    clientID: String!
    """
    The human-readable name of the provider.
    """
    displayName: String!
    """
    Whether this auth provider is the builtin username-password auth provider.
    """
    isBuiltin: Boolean!
    """
    A URL that, when visited, initiates the authentication process for this auth provider.
    """
    authenticationURL: String
}

"""
A list of external accounts.
"""
type ExternalAccountConnection {
    """
    A list of external accounts.
    """
    nodes: [ExternalAccount!]!
    """
    The total count of external accounts in the connection. This total count may be larger than the number of nodes
    in this object when the result is paginated.
    """
    totalCount: Int!
    """
    Pagination information.
    """
    pageInfo: PageInfo!
}

"""
An external account associated with a user.
"""
type ExternalAccount implements Node {
    """
    The unique ID for the external account.
    """
    id: ID!
    """
    The user on Sourcegraph.
    """
    user: User!
    """
    The type of the external service where the external account resides.
    """
    serviceType: String!
    """
    An identifier for the external service where the external account resides.
    """
    serviceID: String!
    """
    An identifier for the client of the external service where the external account resides. This distinguishes
    among multiple authentication providers that access the same service with different parameters.
    """
    clientID: String!
    """
    An identifier for the external account (typically equal to or derived from the ID on the external service).
    """
    accountID: String!
    """
    The creation date of this external account on Sourcegraph.
    """
    createdAt: DateTime!
    """
    The last-updated date of this external account on Sourcegraph.
    """
    updatedAt: DateTime!
    """
    A URL that, when visited, re-initiates the authentication process.
    """
    refreshURL: String
    """
    Provider-specific data about the external account.
    Only site admins may query this field.
    """
    accountData: JSONValue
    """
    Public provider-specific data about the external account.
    Only users that are linked to the external account and site admins
    may query this field.
    """
    publicAccountData: PublicExternalAccountData
}

"""
Public provider-specific data about the external account.
"""
type PublicExternalAccountData {
    """
    The text name the user is using on the external account, if any.
    """
    displayName: String
    """
    The login or username the user is using on the external account, if any.
    """
    login: String
    """
    Link to the user profile page for the external account.
    """
    url: String
}

"""
An active user session.
"""
type Session {
    """
    Whether the user can sign out of this session on Sourcegraph.
    """
    canSignOut: Boolean!
}

"""
An organization membership.
"""
type OrganizationMembership {
    """
    The organization.
    """
    organization: Org!
    """
    The user.
    """
    user: User!
    """
    The time when this was created.
    """
    createdAt: DateTime!
    """
    The time when this was updated.
    """
    updatedAt: DateTime!
}

"""
A list of organization memberships.
"""
type OrganizationMembershipConnection {
    """
    A list of organization memberships.
    """
    nodes: [OrganizationMembership!]!
    """
    The total count of organization memberships in the connection. This total count may be larger than the number
    of nodes in this object when the result is paginated.
    """
    totalCount: Int!
}

"""
A user's email address.
"""
type UserEmail {
    """
    The email address.
    """
    email: String!
    """
    Whether the email address is the user's primary email address. Currently this is defined as the earliest
    email address associated with the user, preferring verified emails to unverified emails.
    """
    isPrimary: Boolean!
    """
    Whether the email address has been verified by the user.
    """
    verified: Boolean!
    """
    Whether the email address is pending verification.
    """
    verificationPending: Boolean!
    """
    The user associated with this email address.
    """
    user: User!
    """
    Whether the viewer has privileges to manually mark this email address as verified (without the user going
    through the normal verification process). Only site admins have this privilege.
    """
    viewerCanManuallyVerify: Boolean!
}

"""
A list of organizations.
"""
type OrgConnection {
    """
    A list of organizations.
    """
    nodes: [Org!]!
    """
    The total count of organizations in the connection. This total count may be larger
    than the number of nodes in this object when the result is paginated.
    """
    totalCount: Int!
}

"""
An organization, which is a group of users.
"""
type Org implements Node & SettingsSubject & Namespace {
    """
    The unique ID for the organization.
    """
    id: ID!
    """
    The organization's name. This is unique among all organizations on this Sourcegraph site.
    """
    name: String!
    """
    The organization's chosen display name.
    """
    displayName: String
    """
    The date when the organization was created.
    """
    createdAt: DateTime!
    """
    A list of users who are members of this organization.
    """
    members(
        """
        The limit argument for forward pagination.
        """
        first: Int
        """
        The limit argument for backward pagination.
        """
        last: Int
        """
        The cursor argument for forward pagination.
        """
        after: String
        """
        The cursor argument for backward pagination.
        """
        before: String
        """
        Return users whose usernames or display names match the query.
        """
        query: String
    ): NewUsersConnection!
    """
    The latest settings for the organization.
    Only organization members and site admins can access this field.
    """
    latestSettings: Settings
    """
    All settings for this organization, and the individual levels in the settings cascade (global > organization)
    that were merged to produce the final merged settings.
    Only organization members and site admins can access this field.
    """
    settingsCascade: SettingsCascade!
    """
    DEPRECATED
    """
    configurationCascade: ConfigurationCascade!
        @deprecated(
            reason: "Use settingsCascade instead. This field is a deprecated alias for it and will be removed in a future release."
        )
    """
    DEPRECATED
    A pending invitation for the viewer to join this organization, if any.
    """
    viewerPendingInvitation: OrganizationInvitation
        @deprecated(
            reason: "Use invitationByToken operation instead. This field is deprecated and will be removed in a future release."
        )
    """
    Whether the viewer has admin privileges on this organization. Currently, all of an organization's members
    have admin privileges on the organization.
    """
    viewerCanAdminister: Boolean!
    """
    Whether the viewer is a member of this organization.
    """
    viewerIsMember: Boolean!
    """
    The URL to the organization.
    """
    url: String!
    """
    The URL to the organization's settings.
    """
    settingsURL: String

    """
    The name of this user namespace's component. For organizations, this is the organization's name.
    """
    namespaceName: String!
}

"""
The result of Mutation.inviteUserToOrganization.
"""
type InviteUserToOrganizationResult {
    """
    Whether an invitation email was sent. If emails are not enabled on this site or if the user has no verified
    email address, an email will not be sent.
    """
    sentInvitationEmail: Boolean!
    """
    The URL that the invited user can visit to accept or reject the invitation.
    """
    invitationURL: String!
}

"""
An invitation to join an organization as a member.
"""
type OrganizationInvitation implements Node {
    """
    The ID of the invitation.
    """
    id: ID!
    """
    The organization that the invitation is for.
    """
    organization: Org!
    """
    The user who sent the invitation.
    """
    sender: User!
    """
    The user who received the invitation.
    """
    recipient: User
    """
    The email address that the invitation was sent to.
    """
    recipientEmail: String
    """
    The date when this invitation was created.
    """
    createdAt: DateTime!
    """
    The most recent date when a notification was sent to the recipient about this invitation.
    """
    notifiedAt: DateTime
    """
    The date when this invitation was responded to by the recipient.
    """
    respondedAt: DateTime
    """
    The recipient's response to this invitation, or no response (null).
    """
    responseType: OrganizationInvitationResponseType
    """
    The URL where the recipient can respond to the invitation when pending, or null if not pending.
    """
    respondURL: String
    """
    The date when this invitation was revoked.
    """
    revokedAt: DateTime
    """
    The date when this invitation is going to expire.
    """
    expiresAt: DateTime
    """
    Boolean flag which returns true if the email on the invite matches a verified email of the user
    """
    isVerifiedEmail: Boolean
}
"""
Result user returned by invite members autocomplete search.
"""
type AutocompleteMemberSearchItem {
    """
    The unique ID for the user.
    """
    id: ID!
    """
    The user's username.
    """
    username: String!
    """
    The display name chosen by the user.
    """
    displayName: String
    """
    The URL of the user's avatar image.
    """
    avatarURL: String
    """
    If the user belongs to current Organization.
    """
    inOrg: Boolean
}

"""
Result organization members count and pending invitations count.
"""
type OrgMembersSummary {
    """
    The unique ID for the Org.
    """
    id: ID!
    """
    Total number of members for the org.
    """
    membersCount: Int!
    """
    Total number of pending invites for the org.
    """
    invitesCount: Int!
}

"""
The recipient's possible responses to an invitation to join an organization as a member.
"""
enum OrganizationInvitationResponseType {
    """
    The invitation was accepted by the recipient.
    """
    ACCEPT
    """
    The invitation was rejected by the recipient.
    """
    REJECT
}

"""
RepositoryOrderBy enumerates the ways a repositories list can be ordered.
"""
enum RepositoryOrderBy {
    REPOSITORY_NAME
    REPO_CREATED_AT
    """
    deprecated (use the equivalent REPOSITORY_CREATED_AT)
    """
    REPOSITORY_CREATED_AT
    SIZE
}

"""
The default settings for the Sourcegraph instance. This is hardcoded in
Sourcegraph, but may change from release to release.
"""
type DefaultSettings implements SettingsSubject {
    """
    The opaque GraphQL ID.
    """
    id: ID!
    """
    The latest default settings (this never changes).
    """
    latestSettings: Settings
    """
    The URL to the default settings. This URL does not exist because you
    cannot edit or directly view default settings.
    """
    settingsURL: String
    """
    Whether the viewer can modify the subject's settings. Always false for
    default settings.
    """
    viewerCanAdminister: Boolean!
    """
    The default settings, and the final merged settings.
    All viewers can access this field.
    """
    settingsCascade: SettingsCascade!
    """
    DEPRECATED
    """
    configurationCascade: ConfigurationCascade!
        @deprecated(
            reason: "Use settingsCascade instead. This field is a deprecated alias for it and will be removed in a future release."
        )
}

"""
A site is an installation of Sourcegraph that consists of one or more
servers that share the same configuration and database.
The site is a singleton; the API only ever returns the single global site.
"""
type Site implements SettingsSubject {
    """
    The site's opaque GraphQL ID. This is NOT the "site ID" as it is referred to elsewhere;
    use the siteID field for that. (GraphQL node types conventionally have an id field of type
    ID! that globally identifies the node.)
    """
    id: ID!
    """
    The site ID.
    """
    siteID: String!
    """
    The site's configuration. Only visible to site admins.

    If returnSafeConfigsOnly is true, returns a subset of the configuration classified
    as safe config.
    """
    configuration(returnSafeConfigsOnly: Boolean): SiteConfiguration!
    """
    The site's latest site-wide settings (which are the second-lowest-precedence
    in the configuration cascade for a user).
    """
    latestSettings: Settings
    """
    The global settings for this site, and the final merged settings.
    All viewers can access this field.
    """
    settingsCascade: SettingsCascade!
    """
    DEPRECATED
    """
    configurationCascade: ConfigurationCascade!
        @deprecated(
            reason: "Use settingsCascade instead. This field is a deprecated alias for it and will be removed in a future release."
        )
    """
    The URL to the site's settings.
    """
    settingsURL: String
    """
    Whether the viewer can reload the site (with the reloadSite mutation).
    """
    canReloadSite: Boolean!
    """
    Whether the viewer can modify the subject's settings.
    """
    viewerCanAdminister: Boolean!
    """
    A list of all access tokens on this site.
    """
    accessTokens(
        """
        Returns the first n access tokens from the list.
        """
        first: Int
    ): AccessTokenConnection!
    """
    A list of all authentication providers. This information is visible to all viewers and does not contain any
    secret information.
    """
    authProviders: AuthProviderConnection!
    """
    A list of all user external accounts on this site.
    """
    externalAccounts(
        """
        Returns the first n external accounts from the list.
        """
        first: Int
        """
        Include only external accounts associated with this user.
        """
        user: ID
        """
        Include only external accounts with this service type.
        """
        serviceType: String
        """
        Include only external accounts with this service ID.
        """
        serviceID: String
        """
        Include only external accounts with this client ID.
        """
        clientID: String
    ): ExternalAccountConnection!
    """
    The build version of the Sourcegraph software that is running on this site (of the form
    NNNNN_YYYY-MM-DD_XXXXX, like 12345_2018-01-01_abcdef).
    """
    buildVersion: String!
    """
    The product version of the Sourcegraph software that is running on this site.
    """
    productVersion: String!
    """
    Information about software updates for the version of Sourcegraph that this site is running.
    """
    updateCheck: UpdateCheck!
    """
    Whether the site needs to be configured to add repositories.
    """
    needsRepositoryConfiguration: Boolean!
    """
    Whether the external services haven been created from a configuration file
    specified in the EXTSVC_CONFIG_FILE.
    """
    externalServicesFromFile: Boolean!
    """
    Whether the external services can be updated even if `externalServicesFromFile` is
    true. All changes made while `externalServicesFromFile` is true will be discarded once
    Sourcegraph restarts.
    """
    allowEditExternalServicesWithFile: Boolean!
    """
    The number of external services distinguished by local repositories and remote repositories.
    Local repository code host connections are only supported in Sourcegraph App.
    """
    externalServicesCounts: ExternalServicesCounts!
    """
    Whether the site is over the limit for free user accounts, and a warning needs to be shown to all users.
    Only applies if the site does not have a valid license.
    """
    freeUsersExceeded: Boolean!
    """
    Alerts to display to the viewer.
    """
    alerts: [Alert!]!
    """
    BACKCOMPAT: Always returns true.
    """
    hasCodeIntelligence: Boolean!
    """
    Whether the server sends emails to users to verify email addresses. If false, then site admins must manually
    verify users' email addresses.
    """
    sendsEmailVerificationEmails: Boolean!
    """
    Information about this site's product subscription status.
    """
    productSubscription: ProductSubscriptionStatus!
    """
    Usage statistics for this site.
    """
    usageStatistics(
        """
        Days of history (based on current UTC time).
        """
        days: Int
        """
        Weeks of history (based on current UTC time).
        """
        weeks: Int
        """
        Months of history (based on current UTC time).
        """
        months: Int
    ): SiteUsageStatistics!

    """
    New usage statistics/analytics for this site.
    """
    analytics: Analytics!

    """
    List all users.
    """
    users(
        """
        Return users whose usernames or display names match the query.
        """
        query: String
        """
        Returns users who have been active in a given period of time.
        """
        siteAdmin: Boolean
        """
        Returns users that contain filter in the username field.
        """
        username: String
        """
        Returns users that contain filter in the email field.
        """
        email: String
        """
        Returns users for the given lastActive enum period.
        When omitted does NOT apply and returns for all period available.
        """
        lastActiveAt: SiteUsersDateRangeInput
        """
        Returns either deleted or not deleted users. Returns all users when omitted.
        """
        deletedAt: SiteUsersDateRangeInput
        """
        Returns users who where created within a given date time range.
        """
        createdAt: SiteUsersDateRangeInput
        """
        Returns users whose events count within a given range.
        """
        eventsCount: SiteUsersNumberRangeInput
    ): SiteUsers!

    """
    Monitoring overview for this site.
    Note: This is primarily used for displaying recently-fired alerts in the web app. If your intent
    is to monitor Sourcegraph, it is better to configure alerting or query Prometheus directly in
    order to ensure that if the frontend goes down you still receive alerts:
    Configure alerting: https://docs.sourcegraph.com/admin/observability/alerting
    Query Prometheus directly: https://docs.sourcegraph.com/admin/observability/alerting_custom_consumption
    """
    monitoringStatistics(
        """
        Days of history (based on current UTC time).
        """
        days: Int @deprecated(reason: "No longer supported - will be removed after Sourcegraph 4.5")
    ): MonitoringStatistics!
    """
    Whether changes can be made to site settings through the API. When global settings are configured through
    the GLOBAL_SETTINGS_FILE environment variable, site settings edits cannot be made through the API.
    """
    allowSiteSettingsEdits: Boolean!

    """
    FOR INTERNAL USE ONLY: Returns information about instance upgrade readiness.
    """
    upgradeReadiness: UpgradeReadiness!
    """
    FOR INTERNAL USE ONLY: The state of readiness to auto upgrade the Sourcegraph instance via migrator commands.
    """
    autoUpgradeEnabled: Boolean!

    """
    Wether the current App installation has a connected Sourcegraph.com account.
    """
    appHasConnectedDotComAccount: Boolean!

    """
    The quota of completions requests allowed per user in a day. Null, if unlimited.
    """
    perUserCompletionsQuota: Int

    """
    The quota of code completions requests allowed per user in a day. Null, if unlimited.
    """
    perUserCodeCompletionsQuota: Int

    """
    Whether users are required to have a verified email in order to access Cody.
    """
    requiresVerifiedEmailForCody: Boolean!

    """
    Whether Cody is enabled for this site.
    """
    isCodyEnabled: Boolean!

    """
    If Cody is enabled, this returns how Cody is configured to talk to the LLM.
    """
    codyLLMConfiguration: CodyLLMConfiguration
}

"""
Cody LLM configuration contains information about how the main LLM used by Cody
is configured.
"""
type CodyLLMConfiguration {
    """
    Name of the model being used for chat.
    """
    chatModel: String!
    """
    Maximum number of tokens client should use when talking to the chatModel.
    """
    chatModelMaxTokens: Int
    """
    Name of the model being used for fast chat.
    """
    fastChatModel: String!
    """
    Maximum number of tokens client should use when talking to the fastChatModel.
    """
    fastChatModelMaxTokens: Int
    """
    Name of the model being used for code completions.
    """
    completionModel: String!
    """
    Maximum number of tokens client should use when talking to the completionModel.
    """
    completionModelMaxTokens: Int
}

"""
External services count information includes a count of services for remote code host connections and a count of services
for local code host connections (local is only supported for Sourcegraph App).
"""
type ExternalServicesCounts {
    """
    The count of external services configured for remote code host connections.
    """
    remoteExternalServicesCount: Int!
    """
    The count of external services configured for local code host connections.
    """
    localExternalServicesCount: Int!
}

"""
Instance upgrade readiness information includes schema drifts and deprecated-but-unfinished out-of-band migrations.
"""
type UpgradeReadiness {
    """
    The schema drift details.
    """
    schemaDrift: [SchemaDriftSummary!]!
    """
    The list of deprecated-but-unfinished out-of-band migrations.
    """
    requiredOutOfBandMigrations: [OutOfBandMigration!]!
}

"""
A summary of a schema drift.
"""
type SchemaDriftSummary {
    """
    Name of the table that contains the drift
    """
    name: String!
    """
    The problem that was found
    """
    problem: String!
    """
    The suggested solution to the problem
    """
    solution: String!
    """
    The diff of the schema drift
    """
    diff: String
    """
    The SQL to fix the schema drift
    """
    statements: [String!]
    """
    The Sourcegraph URL that contains the potential fix
    """
    urlHint: String
}

"""
The configuration for a site.
"""
type SiteConfiguration {
    """
    The unique identifier of this site configuration version.
    """
    id: Int!
    """
    The effective configuration JSON.
    """
    effectiveContents: JSONCString!
    """
    Messages describing validation problems or usage of deprecated configuration in the configuration JSON.
    This includes both JSON Schema validation problems and other messages that perform more advanced checks
    on the configuration (that can't be expressed in the JSON Schema).
    """
    validationMessages: [String!]!
    """
    EXPERIMENTAL: A list of diffs to depict what changed since the previous version of this
    configuration.
    Only site admins may perform this query.
    """
    history(
        """
        The number of nodes to return starting from the beginning (oldest).
        Note: Use either first or last (see below) in the query. Setting both will
        return an error.
        """
        first: Int
        """
        The number of nodes to return starting from the end (latest).
        Note: Use either last or first (see above) in the query. Setting both will
        return an error.
        """
        last: Int
        """
        Opaque pagination cursor to be used when paginating forwards that may be also used
        in conjunction with "first" to return the first N nodes.
        """
        after: String
        """
        Opaque pagination cursor to be used when paginating backwards that may be
        also used in conjunction with "last" to return the last N nodes.
        """
        before: String
    ): SiteConfigurationChangeConnection
}

"""
A list of site config diffs. Diff generation may not be available from the very
start depending on when the value of redacted_contents is available in the
database.
"""
type SiteConfigurationChangeConnection implements Connection {
    """
    A list of diffs in the site config
    """
    nodes: [SiteConfigurationChange!]!
    """
    The total number of diffs in the connection.
    """
    totalCount: Int!
    """
    Pagination information.
    """
    pageInfo: ConnectionPageInfo!
}

"""
A diff representing the change in the site config compared to the previous version.
"""
type SiteConfigurationChange implements Node {
    """
    The ID of the site config in the history.
    """
    id: ID!
    """
    The user who made this change. If empty, it indicates that either the
    author's information is not available or the change in the site config was applied
    via an internal process (example: site startup or SITE_CONFIG_FILE being reloaded).
    """
    author: User

    """
    The diff string when diffed against the previous site config.
    """
    diff: String!
    """
    The timestamp when this change in the site config was applied.
    """
    createdAt: DateTime!
    """
    The timestamp when this change in the site config was modified. Usually
    this should be the same as createdAt as entries in the site config history are
    considered immutable.
    """
    updatedAt: DateTime!
}

"""
Information about software updates for Sourcegraph.
"""
type UpdateCheck {
    """
    Whether an update check is currently in progress.
    """
    pending: Boolean!
    """
    When the last update check was completed, or null if no update check has
    been completed (or performed) yet.
    """
    checkedAt: DateTime
    """
    If an error occurred during the last update check, this message describes
    the error.
    """
    errorMessage: String
    """
    If an update is available, the version string of the updated version.
    """
    updateVersionAvailable: String
}

"""
The possible types of alerts (Alert.type values).
"""
enum AlertType {
    INFO
    WARNING
    ERROR
}

"""
An alert message shown to the viewer.
"""
type Alert {
    """
    The type of this alert.
    """
    type: AlertType!
    """
    The message body of this alert. Markdown is supported.
    """
    message: String!
    """
    If set, this alert is dismissible. After being dismissed, no other alerts with the same
    isDismissibleWithKey value will be shown. If null, this alert is not dismissible.
    """
    isDismissibleWithKey: String
}

"""
SettingsSubject is something that can have settings: a site ("global settings", which is different from "site
configuration"), an organization, or a user.
"""
interface SettingsSubject {
    """
    The ID.
    """
    id: ID!
    """
    The latest settings.
    """
    latestSettings: Settings
    """
    The URL to the settings.
    """
    settingsURL: String
    """
    Whether the viewer can modify the subject's settings.
    """
    viewerCanAdminister: Boolean!
    """
    All settings for this subject, and the individual levels in the settings cascade (global > organization > user)
    that were merged to produce the final merged settings.
    """
    settingsCascade: SettingsCascade!
    """
    DEPRECATED
    """
    configurationCascade: ConfigurationCascade!
        @deprecated(
            reason: "Use settingsCascade instead. This field is a deprecated alias for it and will be removed in a future release."
        )
}

"""
The configurations for all of the relevant settings subjects, plus the merged settings.
"""
type SettingsCascade {
    """
    The other settings subjects that are applied with lower precedence than this subject to
    form the final merged settings. For example, a user in 2 organizations would have the following
    settings subjects: site (global settings), org 1, org 2, and the user.
    """
    subjects: [SettingsSubject!]!
    """
    The effective final merged settings as (stringified) JSON, merged from all of the subjects.
    """
    final: String!
    """
    DEPRECATED: This field will be removed in a future release.
    The effective final merged settings, merged from all of the subjects.
    """
    merged: Configuration! @deprecated(reason: "use final instead")
}

"""
DEPRECATED: Renamed to SettingsCascade.
"""
type ConfigurationCascade {
    """
    DEPRECATED
    """
    subjects: [SettingsSubject!]! @deprecated(reason: "use SettingsCascade.subjects instead")
    """
    DEPRECATED
    """
    merged: Configuration! @deprecated(reason: "use SettingsCascade.final instead")
}

"""
Settings is a version of a configuration settings file.
"""
type Settings {
    """
    The ID.
    """
    id: Int!
    """
    The subject that these settings are for.
    """
    subject: SettingsSubject!
    """
    The author, or null if there is no author or the authoring user was deleted.
    """
    author: User
    """
    The time when this was created.
    """
    createdAt: DateTime!
    """
    The stringified JSON contents of the settings. The contents may include "//"-style comments and trailing
    commas in the JSON.
    """
    contents: JSONCString!
    """
    DEPRECATED: This field will be removed in a future release.
    The configuration.
    """
    configuration: Configuration! @deprecated(reason: "use the contents field instead")
}

"""
DEPRECATED: Use the contents field on the parent type instead. This type will be removed in a future release.
"""
type Configuration {
    """
    DEPRECATED: This field will be removed in a future release.
    The raw JSON contents, encoded as a string.
    """
    contents: JSONCString! @deprecated(reason: "use the contents field on the parent type instead")
    """
    DEPRECATED: This field is always empty. It will be removed in a future release.
    """
    messages: [String!]! @deprecated(reason: "use client-side JSON Schema validation instead")
}

"""
UserUsageStatistics describes a user's usage statistics.
This information is visible to all viewers.
"""
type UserUsageStatistics {
    """
    The number of search queries that the user has performed.
    """
    searchQueries: Int!
    """
    The number of page views that the user has performed.
    """
    pageViews: Int!
    """
    The number of code intelligence actions that the user has performed.
    """
    codeIntelligenceActions: Int!
    """
    The number of find-refs actions that the user has performed.
    """
    findReferencesActions: Int!
    """
    The last time the user was active (any action, any platform).
    """
    lastActiveTime: String
    """
    The last time the user was active on a code host integration.
    """
    lastActiveCodeHostIntegrationTime: String
}

"""
A user event.
"""
enum UserEvent {
    PAGEVIEW
    SEARCHQUERY
    CODEINTEL
    CODEINTELREFS
    CODEINTELINTEGRATION
    CODEINTELINTEGRATIONREFS

    """
    Product stages
    """
    STAGEMANAGE
    STAGEPLAN
    STAGECODE
    STAGEREVIEW
    STAGEVERIFY
    STAGEPACKAGE
    STAGEDEPLOY
    STAGECONFIGURE
    STAGEMONITOR
    STAGESECURE
    STAGEAUTOMATE
}

"""
A period of time in which a set of users have been active.
"""
enum UserActivePeriod {
    """
    Since today at 00:00 UTC.
    """
    TODAY
    """
    Since the latest Monday at 00:00 UTC.
    """
    THIS_WEEK
    """
    Since the first day of the current month at 00:00 UTC.
    """
    THIS_MONTH
    """
    All time.
    """
    ALL_TIME
}

"""
SiteUsageStatistics describes a site's aggregate usage statistics.
This information is visible to all viewers.
"""
type SiteUsageStatistics {
    """
    Recent daily active users.
    """
    daus: [SiteUsagePeriod!]!
    """
    Recent weekly active users.
    """
    waus: [SiteUsagePeriod!]!
    """
    Recent monthly active users.
    """
    maus: [SiteUsagePeriod!]!
}

"""
A pre-defined periods to get site analytics.
"""
enum AnalyticsDateRange {
    """
    Last 3 months date range.
    """
    LAST_THREE_MONTHS
    """
    Last month date range.
    """
    LAST_MONTH
    """
    Last week date range.
    """
    LAST_WEEK
    """
    Custom date range.
    """
    CUSTOM
}

"""
Group site analytics by period.
"""
enum AnalyticsGrouping {
    """
    Group data by day.
    """
    DAILY
    """
    Group data by week.
    """
    WEEKLY
}

"""
Analytics for certain date.
"""
type AnalyticsStatItemNode {
    """
    A date in ISO format
    """
    date: String!
    """
    Total number of events.
    """
    count: Float!
    """
    Unique number of users who triggered event.
    This counts deleted users as well as anonymous users.
    """
    uniqueUsers: Float!
    """
    Unique number of currently registered users who triggered event.
    """
    registeredUsers: Float!
}

"""
Analytics summary.
"""
type AnalyticsStatItemSummary {
    """
    Total number of events.
    """
    totalCount: Float!
    """
    Total unique number of users who triggered event.
    This counts deleted users as well as anonymous users.
    """
    totalUniqueUsers: Float!
    """
    Total unique number of currently registered users who triggered event.
    """
    totalRegisteredUsers: Float!
}

"""
Analytics result item.
"""
type AnalyticsStatItem {
    """
    Analytics summary.
    """
    summary: AnalyticsStatItemSummary!
    """
    Array of analytics by period.
    """
    nodes: [AnalyticsStatItemNode!]!
}

"""
Search analytics.
"""
type AnalyticsSearchResult {
    """
    Searches analytics
    """
    searches: AnalyticsStatItem!
    """
    Search result click analytics
    """
    resultClicks: AnalyticsStatItem!
    """
    File view analytics
    """
    fileViews: AnalyticsStatItem!
    """
    File open analytics
    """
    fileOpens: AnalyticsStatItem!
    """
    Code copied from search results analytics
    """
    codeCopied: AnalyticsStatItem!
}

"""
Notebook analytics.
"""
type AnalyticsNotebooksResults {
    """
    Notebooks creation analytics.
    """
    creations: AnalyticsStatItem!
    """
    Notebooks views analytics.
    """
    views: AnalyticsStatItem!
    """
    Notebooks block run analytics.
    """
    blockRuns: AnalyticsStatItem!
}

"""
Users frequency by days used.
"""
type AnalyticsUsersFrequencyItem {
    """
    Number of days used
    """
    daysUsed: Float!
    """
    Number of users.
    """
    frequency: Float!
    """
    Percentage of users from total frequencies.
    """
    percentage: Float!
}

"""
Monthly active users
"""
type AnalyticsMonthlyActiveUsers {
    """
    year-month for which the total active users are calculated
    """
    date: String!
    """
    total count of active users
    """
    count: Float!
}

"""
Users' analytics.
"""
type AnalyticsUsersResult {
    """
    Users' activity analytics.
    """
    activity: AnalyticsStatItem!
    """
    Frequency of usage by day.
    """
    frequencies: [AnalyticsUsersFrequencyItem!]!
    """
    Monthly active users for last 3 months.
    """
    monthlyActiveUsers: [AnalyticsMonthlyActiveUsers!]!
}

"""
CodeIntel' analytics.
"""
type AnalyticsCodeIntelResult {
    """
    "GoToRef" click
    """
    referenceClicks: AnalyticsStatItem!
    """
    "GoToDef" click
    """
    definitionClicks: AnalyticsStatItem!
    """
    Code Intel events made from web
    """
    inAppEvents: AnalyticsStatItem!
    """
    Code Intel events made from code host
    """
    codeHostEvents: AnalyticsStatItem!
    """
    Search based events
    """
    searchBasedEvents: AnalyticsStatItem!
    """
    Precise events
    """
    preciseEvents: AnalyticsStatItem!
    """
    Cross-repo events
    """
    crossRepoEvents: AnalyticsStatItem!
}

"""
CodeIntelByLanguage analytics.
"""
type AnalyticsCodeIntelByLanguageResult {
    """
    Language
    """
    language: String!
    """
    Precision
    """
    precision: String!
    """
    Count
    """
    count: Float!
}

"""
CodeIntelTopRepositories analytics.
"""
type AnalyticsCodeIntelRepositoryResult {
    """
    Repository name
    """
    name: String!
    """
    Language
    """
    language: String!
    """
    Event kind
    """
    kind: String!
    """
    Event precision (either "search-based" or "precise")
    """
    precision: String!
    """
    Event count
    """
    events: Float!
    """
    Has precise
    """
    hasPrecise: Boolean!
}

"""
Repositories summary.
"""
type AnalyticsReposSummartResult {
    """
    Total number of repositories.
    """
    count: Float!
    """
    Total number of repositories with precise code-intel.
    """
    preciseCodeIntelCount: Float!
}

"""
Batch changes analytics.
"""
type AnalyticsBatchChangesResult {
    """
    Changesets created
    """
    changesetsCreated: AnalyticsStatItem!
    """
    Changesets merged
    """
    changesetsMerged: AnalyticsStatItem!
}

"""
Extentions analytics.
"""
type AnalyticsExtensionsResult {
    """
    JetBrains IDE plugin search events.
    """
    jetbrains: AnalyticsStatItem!
    """
    VSCode IDE extension search events.
    """
    vscode: AnalyticsStatItem!
    """
    Browser (chrome, firefox, safari) extensions code navigation events.
    This includes events like "Go to Def", "Find ref" and "Find implementation"
    """
    browser: AnalyticsStatItem!
}

"""
Code insights analytics.
"""
type AnalyticsCodesInsightsResult {
    """
    Insights hovers statistics.
    """
    insightHovers: AnalyticsStatItem!
    """
    Insights data point clicks statistics.
    """
    insightDataPointClicks: AnalyticsStatItem!
}
"""
Analytics describes a new site statistics.
"""
type Analytics {
    """
    Search statistics.
    """
    search(dateRange: AnalyticsDateRange, grouping: AnalyticsGrouping): AnalyticsSearchResult!
    """
    Notebooks statistics.
    """
    notebooks(dateRange: AnalyticsDateRange, grouping: AnalyticsGrouping): AnalyticsNotebooksResults!
    """
    Users statistics.
    """
    users(dateRange: AnalyticsDateRange, grouping: AnalyticsGrouping): AnalyticsUsersResult!
    """
    Code-intelligence statistics.
    """
    codeIntel(dateRange: AnalyticsDateRange, grouping: AnalyticsGrouping): AnalyticsCodeIntelResult!
    """
    Code-intelligence statistics grouped by language and precision.
    """
    codeIntelByLanguage(dateRange: AnalyticsDateRange): [AnalyticsCodeIntelByLanguageResult!]!
    """
    Top repositories by code-intelligence events.
    """
    codeIntelTopRepositories(dateRange: AnalyticsDateRange): [AnalyticsCodeIntelRepositoryResult!]!
    """
    Repositories summary statistics.
    """
    repos: AnalyticsReposSummartResult!
    """
    Batch changes statistics
    """
    batchChanges(dateRange: AnalyticsDateRange, grouping: AnalyticsGrouping): AnalyticsBatchChangesResult!
    """
    Extensions statistics
    """
    extensions(dateRange: AnalyticsDateRange, grouping: AnalyticsGrouping): AnalyticsExtensionsResult!
    """
    Code insights statistics
    """
    codeInsights(dateRange: AnalyticsDateRange, grouping: AnalyticsGrouping): AnalyticsCodesInsightsResult!
}

"""
Site user.
"""
type SiteUser {
    """
    The unique ID for the user.
    """
    id: ID!
    """
    User's username.
    """
    username: String!
    """
    User's primary email.
    """
    email: String
    """
    User's display name
    """
    displayName: String
    """
    The datetime when user was created in the system.
    """
    createdAt: String!
    """
    The datetime when user was last active.
    """
    lastActiveAt: String
    """
    The datetime when user was deleted.
    """
    deletedAt: String
    """
    Whether user is site admin or not.
    """
    siteAdmin: Boolean!
    """
    Whether the user is controlled through SCIM.
    """
    scimControlled: Boolean!
    """
    Total number of user's event_logs.
    """
    eventsCount: Float!
    """
    Whether or not the user account is locked.
    """
    locked: Boolean!
}

"""
SiteUserOrderBy enumerates the ways a users list can be ordered.
"""
enum SiteUserOrderBy {
    USERNAME
    """
    User's primary email.
    """
    EMAIL
    """
    The total number of user's event_logs.
    """
    EVENTS_COUNT
    """
    The last event_log datetime.
    """
    LAST_ACTIVE_AT
    """
    The datetime when user was added to the system.
    """
    CREATED_AT
    """
    The datetime when user was soft deleted.
    """
    DELETED_AT
    """
    Whether the user is site admin or not.
    """
    SITE_ADMIN
}

"""
SiteUsersDateRangeInput argument to filter based on date range or date equals to null
"""
input SiteUsersDateRangeInput {
    """
    Less than or equal to
    """
    lte: DateTime
    """
    Greater than or equal to
    """
    gte: DateTime
    """
    Negation
    """
    not: Boolean
    """
    Equal to Null
    """
    empty: Boolean
}

"""
SiteUsersNumberRangeInput argument to filter based on the number range
"""
input SiteUsersNumberRangeInput {
    """
    Less than or equal to
    """
    gte: Float
    """
    Greater than or equal to
    """
    lte: Float
}

"""
Site users.
"""
type SiteUsers {
    """
    User total count.
    """
    totalCount: Float!
    """
    List of users.
    """
    nodes(
        """
        Returns the "limit" number users from the list.
        """
        limit: Int
        """
        Skips initial "offset" number of users.
        """
        offset: Int
        """
        Returns users ordered by a given column.
        """
        orderBy: SiteUserOrderBy
        """
        Returns ordered users in descending order provided by orderBy field.
        """
        descending: Boolean
    ): [SiteUser!]!
}

"""
SiteUsagePeriod describes a site's usage statistics for a given timespan.
This information is visible to all viewers.
"""
type SiteUsagePeriod {
    """
    The time when this started.
    """
    startTime: String!
    """
    The user count.
    """
    userCount: Int!
    """
    The registered user count.
    """
    registeredUserCount: Int!
    """
    The anonymous user count.
    """
    anonymousUserCount: Int!
    """
    The count of registered users that have been active on a code host integration.
    Excludes anonymous users.
    """
    integrationUserCount: Int!
}

"""
Monitoring overview.
"""
type MonitoringStatistics {
    """
    Alerts fired in this time span.
    """
    alerts: [MonitoringAlert!]!
        @deprecated(
            reason: "No longer supported, and will no longer return data - query will be removed after Sourcegraph 4.5"
        )
}

"""
A high-level monitoring alert, for details see https://docs.sourcegraph.com/admin/observability/metrics#high-level-alerting-metrics
"""
type MonitoringAlert {
    """
    End time of this event, which describes the past 12h of recorded data.
    """
    timestamp: DateTime!
    """
    Name of alert that the service fired.
    """
    name: String!
    """
    Name of the service that fired the alert.
    """
    serviceName: String!
    """
    Owner of the fired alert.
    """
    owner: String!
    """
    Average percentage of time (between [0, 1]) that the event was firing over the 12h of recorded data. e.g.
    1.0 if it was firing 100% of the time on average during that 12h window, 0.5 if it was firing 50% of the
    time on average, etc.
    """
    average: Float!
}

"""
A list of survey responses
"""
type SurveyResponseConnection {
    """
    A list of survey responses.
    """
    nodes: [SurveyResponse!]!
    """
    The total count of survey responses in the connection. This total count may be larger
    than the number of nodes in this object when the result is paginated.
    """
    totalCount: Int!
    """
    The count of survey responses submitted since 30 calendar days ago at 00:00 UTC.
    """
    last30DaysCount: Int!
    """
    The average score of survey responses in the connection submitted since 30 calendar days ago at 00:00 UTC.
    """
    averageScore: Float!
    """
    The net promoter score (NPS) of survey responses in the connection submitted since 30 calendar days ago at 00:00 UTC.
    Return value is a signed integer, scaled from -100 (all detractors) to +100 (all promoters).
    See https://en.wikipedia.org/wiki/Net_Promoter for explanation.
    """
    netPromoterScore: Int!
}

"""
An individual response to a user satisfaction (NPS) survey.
"""
type SurveyResponse {
    """
    The unique ID of the survey response
    """
    id: ID!
    """
    The user who submitted the survey (if they were authenticated at the time).
    """
    user: User
    """
    The email that the user manually entered (if they were NOT authenticated at the time).
    """
    email: String
    """
    User's likelihood of recommending Sourcegraph to a friend, from 0-10.
    """
    score: Int!
    """
    The answer to "What is the most important reason for the score you gave".
    """
    reason: String
    """
    The answer to "What can Sourcegraph do to provide a better product"
    """
    better: String
    """
    The answer to "What do you use Sourcegraph for?".
    """
    otherUseCase: String
    """
    The time when this response was created.
    """
    createdAt: DateTime!
}

"""
Information about this site's product subscription (which enables access to and renewals of a product license).
"""
type ProductSubscriptionStatus {
    """
    The full name of the product in use, such as "Sourcegraph Enterprise".
    """
    productNameWithBrand: String!
    """
    The max number of user accounts that have been active on this Sourcegraph site for the current license.
    If no license is in use, returns zero.
    """
    actualUserCount: Int!
    """
    The date and time when the max number of user accounts that have been active on this Sourcegraph site for
    the current license was reached. If no license is in use, returns an empty string.
    """
    actualUserCountDate: String!
    """
    The number of users allowed. If there is a license, this is equal to ProductLicenseInfo.userCount. Otherwise,
    it is the user limit for instances without a license, or null if there is no limit.
    """
    maximumAllowedUserCount: Int
    """
    The number of free users allowed on a site without a license before a warning is shown to all users, or null
    if a valid license is in use.
    """
    noLicenseWarningUserCount: Int
    """
    The product license associated with this subscription, if any.
    """
    license: ProductLicenseInfo
}

"""
Information about this site's product license (which activates certain Sourcegraph features).
"""
type ProductLicenseInfo {
    """
    The full name of the product that this license is for. To get the product name for the current
    Sourcegraph site, use ProductSubscriptionStatus.productNameWithBrand instead (to handle cases where there is
    no license).
    """
    productNameWithBrand: String!
    """
    Tags indicating the product plan and features activated by this license.
    """
    tags: [String!]!
    """
    The number of users allowed by this license.
    """
    userCount: Int!
    """
    The date when this license expires.
    """
    expiresAt: DateTime!
    """
    The Salesforce subscription ID associated with this license.
    """
    salesforceSubscriptionID: String
    """
    The Salesforce opportunity ID associated with this license.
    """
    salesforceOpportunityID: String
}

"""
FOR INTERNAL USE ONLY: A status message produced when disableAutoGitUpdates is
set to true in the site configuration
"""
type GitUpdatesDisabled {
    """
    The message of this status message
    """
    message: String!
}

"""
FOR INTERNAL USE ONLY: A status message produced when there are no repositories and no sync jobs in process
"""
type NoRepositoriesDetected {
    """
    The message of this status message
    """
    message: String!
}

"""
FOR INTERNAL USE ONLY: A status message produced when repositories are being
cloned
"""
type CloningProgress {
    """
    The message of this status message
    """
    message: String!
}

"""
FOR INTERNAL USE ONLY: A status message produced when repositories could not
be synced from an external service
"""
type ExternalServiceSyncError {
    """
    The message of this status message
    """
    message: String!
    """
    The external service that failed to sync
    """
    externalService: ExternalService!
}

"""
FOR INTERNAL USE ONLY: A status message produced when repositories could not
be synced
"""
type SyncError {
    """
    The message of this status message
    """
    message: String!
}

"""
FOR INTERNAL USE ONLY: A status message produced when repositories are being
indexed for search.
"""
type IndexingProgress {
    """
    The number of repositories that have not been indexed yet.
    """
    notIndexed: Int!
    """
    The number of repositories that have been indexed.
    """
    indexed: Int!
}

"""
FOR INTERNAL USE ONLY: A status message
"""
union StatusMessage =
      GitUpdatesDisabled
    | NoRepositoriesDetected
    | CloningProgress
    | ExternalServiceSyncError
    | SyncError
    | IndexingProgress

"""
An arbitrarily large integer encoded as a decimal string.
"""
scalar BigInt

"""
FOR INTERNAL USE ONLY: A repository statistic
"""
type RepositoryStats {
    """
    The amount of bytes stored in .git directories
    """
    gitDirBytes: BigInt!
    """
    The number of lines indexed
    """
    indexedLinesCount: BigInt!

    """
    The number of all repositories in the instance, without soft-deleted or blocked repositories.
    """
    total: Int!
    """
    The number of cloned repositories in the instance. This number might be
    higher than 'total', if soft-deleted repositories haven't been cleaned up
    yet.
    """
    cloned: Int!
    """
    The number of repositories in the instance that are currently being cloned.
    """
    cloning: Int!
    """
    The number of repositories in the instance that not cloned yet.
    """
    notCloned: Int!
    """
    The number of repositories where initial cloning or subsequent fetching resulted in an error.
    """
    failedFetch: Int!
    """
    The number of indexed repositories
    """
    indexed: Int!
    """
    The number of repositories that are currently corrupt
    """
    corrupted: Int!
}

"""
An RFC 3339-encoded UTC date string, such as 1973-11-29T21:33:09Z. This value can be parsed into a
JavaScript Date using Date.parse. To produce this value from a JavaScript Date instance, use
Date#toISOString.
"""
scalar DateTime

"""
A single user event that has been logged.
"""
type EventLog {
    """
    The name of the event.
    """
    name: String!
    """
    The user who executed the event, if one exists.
    """
    user: User
    """
    The randomly generated unique user ID stored in a browser cookie.
    """
    anonymousUserID: String!
    """
    The URL when the event was logged.
    """
    url: String!
    """
    The source of the event.
    """
    source: EventSource!
    """
    The additional argument information.
    """
    argument: String
    """
    The Sourcegraph version when the event was logged.
    """
    version: String!
    """
    The timestamp when the event was logged.
    """
    timestamp: DateTime!
}

"""
A list of event logs.
"""
type EventLogsConnection {
    """
    A list of event logs.
    """
    nodes: [EventLog!]!
    """
    The total count of event logs in the connection. This total count may be larger than the number of nodes
    in this object when the result is paginated.
    """
    totalCount: Int!
    """
    Pagination information.
    """
    pageInfo: PageInfo!
}

"""
A description of a command run inside the executor to during processing of the parent record.
"""
type ExecutionLogEntry {
    """
    An internal tag used to correlate this log entry with other records.
    """
    key: String!

    """
    The arguments of the command run inside the executor.
    """
    command: [String!]!

    """
    The date when this command started.
    """
    startTime: DateTime!

    """
    The exit code of the command. Null, if the command has not finished yet.
    """
    exitCode: Int

    """
    The combined stdout and stderr logs of the command.
    """
    out: String!

    """
    The duration in milliseconds of the command. Null, if the command has not finished yet.
    """
    durationMilliseconds: Int
}

"""
Temporary settings for a user.
"""
type TemporarySettings {
    """
    A JSON string representing the temporary settings.
    """
    contents: String!
}

"""
Represents an incoming webhook from a code host.
"""
type Webhook implements Node {
    """
    The unique ID of the webhook.
    """
    id: ID!
    """
    The user facing UUID of the webhook.
    """
    uuid: String!
    """
    The URL of the webhook in the instance. This is the location where we expect to receive payloads.
    """
    url: String!
    """
    Descriptive webhook name.
    """
    name: String!
    """
    The kind of code host sending payloads. (eg. GitHub, GitLab)
    """
    codeHostKind: ExternalServiceKind!
    """
    The URN of the code host instance. (eg. https://gitlab.com)
    """
    codeHostURN: String!
    """
    Optional secret.
    """
    secret: String
    """
    The last time this webhook was updated.
    """
    updatedAt: DateTime!
    """
    The user who last updated this webhook.
    Null if the user was deleted or if the webhook hasn't been updated yet.
    """
    updatedBy: User
    """
    When the webhook was created.
    """
    createdAt: DateTime!
    """
    The user who created this webhook.
    Null if the user was deleted.
    """
    createdBy: User
    """
    The logs related to this webhook.
    """
    webhookLogs(
        """
        Returns the first n webhook logs.
        """
        first: Int

        """
        Opaque pagination cursor.
        """
        after: String

        """
        Only include webhook logs that resulted in errors.
        """
        onlyErrors: Boolean

        """
        Only include webhook logs on or after this time.
        """
        since: DateTime

        """
        Only include webhook logs on or before this time.
        """
        until: DateTime
    ): WebhookLogConnection!
}

"""
A list of webhooks
"""
type WebhookConnection {
    """
    A list of webhooks.
    """
    nodes: [Webhook!]!

    """
    The total number of webhooks in the connection.
    """
    totalCount: Int!

    """
    Pagination information.
    """
    pageInfo: PageInfo!
}

"""
A list of logged webhook deliveries.
"""
type WebhookLogConnection {
    """
    A list of webhook logs.
    """
    nodes: [WebhookLog!]!

    """
    The total number of webhook logs in the connection.
    """
    totalCount: Int!

    """
    Pagination information.
    """
    pageInfo: PageInfo!
}

"""
A single logged webhook delivery.
"""
type WebhookLog implements Node {
    """
    The webhook log ID.
    """
    id: ID!

    """
    The time the webhook was received at.
    """
    receivedAt: DateTime!

    """
    The external service the webhook was matched to, if any.
    """
    externalService: ExternalService

    """
    The HTTP status code returned from the webhook handler.
    """
    statusCode: Int!

    """
    The received webhook request.
    """
    request: WebhookLogRequest!

    """
    The response sent by the webhook handler.
    """
    response: WebhookLogResponse!
}

"""
A HTTP message (request or response) within a webhook log.
"""
interface WebhookLogMessage {
    """
    The headers in the HTTP message.
    """
    headers: [HTTPHeader!]!

    """
    The body content of the HTTP message.
    """
    body: String!
}

"""
A HTTP request within a webhook log.
"""
type WebhookLogRequest implements WebhookLogMessage {
    """
    The headers in the HTTP message.
    """
    headers: [HTTPHeader!]!

    """
    The body content of the HTTP message.
    """
    body: String!

    """
    The method used in the HTTP request.
    """
    method: String!

    """
    The requested URL.
    """
    url: String!

    """
    The HTTP version in use.
    """
    version: String!
}

"""
A HTTP response within a webhook log.
"""
type WebhookLogResponse implements WebhookLogMessage {
    """
    The headers in the HTTP message.
    """
    headers: [HTTPHeader!]!

    """
    The body content of the HTTP message.
    """
    body: String!
}

"""
A list of logged outbound requests.
"""
type OutboundRequestConnection {
    """
    A list of outbound requests.
    """
    nodes: [OutboundRequest!]!

    """
    The total number of outbound request log items in the connection.
    """
    totalCount: Int!

    """
    Pagination information.
    """
    pageInfo: PageInfo!
}

"""
A single outbound request.
"""
type OutboundRequest implements Node {
    """
    The request log item ID.
    """
    id: ID!

    """
    The time the request was sent at.
    """
    startedAt: DateTime!

    """
    The method used in the HTTP request. E.g. GET, POST, etc.
    """
    method: String!

    """
    The full URL the request was sent to.
    """
    url: String!

    """
    The headers sent with the HTTP request.
    """
    requestHeaders: [HTTPHeader!]!

    """
    The body content of the HTTP message.
    """
    requestBody: String!

    """
    The HTTP status code received.
    """
    statusCode: Int!

    """
    The headers received with the HTTP response.
    """
    responseHeaders: [HTTPHeader!]!

    """
    The total time the request took to complete, in milliseconds.
    """
    durationMs: Int!

    """
    Any error message got from the request Doer in case of an error, otherwise an empty string.
    """
    errorMessage: String!

    """
    Stack information to figure out where the ExternalClientFactory was created.
    """
    creationStackFrame: String!

    """
    Stack information to figure out where in the code base the request was initiated.
    """
    callStack: String!
}

"""
A key-value pair
"""
type HTTPHeader {
    """
    The header name
    """
    name: String!

    """
    Can be multiple values
    """
    values: [String!]!
}

"""
A list of background jobs that are currently known in the system
"""
type BackgroundJobConnection {
    """
    A list of outbound requests.
    """
    nodes: [BackgroundJob!]!

    """
    The total number of outbound request log items in the connection.
    """
    totalCount: Int!

    """
    Pagination information.
    """
    pageInfo: PageInfo!
}

"""
A single background job.
"""
type BackgroundJob implements Node {
    """
    The background job ID.
    """
    id: ID!

    """
    The name of the job.
    """
    name: String!

    """
    The routines that run inside this job.
    """
    routines: [BackgroundRoutine!]!
}

"""
A routine that runs inside a background job.
"""
type BackgroundRoutine {
    """
    The name of the routine.
    """
    name: String!

    """
    Tells whether this is a periodic goroutine, a DB worker, or something else
    """
    type: BackgroundRoutineType!

    """
    Explains what the routine does.
    """
    description: String!

    """
    The interval at which the routine runs, if it's periodic.
    """
    intervalMs: Int

    """
    The instances of this routine that are running or ran recently. An instance means one routine on one host.
    """
    instances: [BackgroundRoutineInstance!]!

    """
    The recent runs of this routine.
    """
    recentRuns: [BackgroundRoutineRecentRun!]!

    """
    Some stats of the runs of this routine in the past few days.
    """
    stats: BackgroundRoutineStats!
}

"""
Enum of the possible background routine types
"""
enum BackgroundRoutineType {
    """
    Periodic routine
    """
    PERIODIC

    """
    Periodic routine with metrics set up
    """
    PERIODIC_WITH_METRICS

    """
    DB-backed worker
    """
    DB_BACKED

    """
    Custom routine
    """
    CUSTOM
}

"""
One instance of the background routine, running on a host.
"""
type BackgroundRoutineInstance {
    """
    The ID of the instance.
    """
    hostName: String!

    """
    The time the instance was last started. (If it's unknown, this will be null.)
    """
    lastStartedAt: DateTime

    """
    The time the instance was last stopped. (If it's unknown, this will be null.)
    """
    lastStoppedAt: DateTime
}

"""
A single run of the routine. A run is not the start/stop event but the actual execution of the routine handler.
"""
type BackgroundRoutineRecentRun {
    """
    The time the run started.
    """
    at: DateTime!

    """
    The name of the host that ran the routine.
    """
    hostName: String!

    """
    The duration of the run.
    """
    durationMs: Int!

    """
    The error message, if any.
    """
    errorMessage: String
}

"""
Holds statistics about a background routine.
"""
type BackgroundRoutineStats {
    """
    The start of the earliest day for which we have any runs registered.
    """
    since: DateTime

    """
    The number of times the routine ran in the period.
    """
    runCount: Int!

    """
    The number of times the routine run ended with an error.
    """
    errorCount: Int!

    """
    The minimum duration of a run, in milliseconds.
    """
    minDurationMs: Int!

    """
    The average duration of a run, in milliseconds.
    """
    avgDurationMs: Int!

    """
    The maximum duration of a run, in milliseconds.
    """
    maxDurationMs: Int!
}

"""
The clone status of a repository.
"""
enum CloneStatus {
    NOT_CLONED
    CLONING
    CLONED
}

extend type Query {
    """
    Retrieve active executor compute instances.
    """
    executors(
        """
        An (optional) search query that searches over the hostname, queue name, os, architecture, and
        version properties.
        """
        query: String

        """
        Whether to show only executors that have sent a heartbeat in the last fifteen minutes.
        """
        active: Boolean

        """
        Returns the first n executors.
        """
        first: Int = 50

        """
        Opaque pagination cursor.
        """
        after: String
    ): ExecutorConnection!

    """
    Returns true if executors have been configured on the Sourcegraph instance.
    This is based on heuristics and doesn't necessarily mean that they would be
    working.
    """
    areExecutorsConfigured: Boolean!
}

"""
A list of active executors compute instances.
"""
type ExecutorConnection {
    """
    A list of executors.
    """
    nodes: [Executor!]!

    """
    The total number of executors in this result set.
    """
    totalCount: Int!

    """
    Pagination information.
    """
    pageInfo: PageInfo!
}

"""
An active executor compute instance.
"""
type Executor implements Node {
    """
    The unique identifier of this executor.
    """
    id: ID!

    """
    The hostname of the executor instance.
    """
    hostname: String!

    """
    The queue name that the executor polls for work.
    """
    queueName: String

    """
    The queue name that the executor polls for work.
    """
    queueNames: [String!]

    """
    Active is true, if a heartbeat from the executor has been received at most three heartbeat intervals ago.
    """
    active: Boolean!

    """
    The operating system running the executor.
    """
    os: String!

    """
    The machine architecture running the executor.
    """
    architecture: String!

    """
    The version of Git used by the executor.
    """
    dockerVersion: String!

    """
    The version of the executor.
    """
    executorVersion: String!

    """
    The version of Docker used by the executor.
    """
    gitVersion: String!

    """
    The version of Ignite used by the executor.
    """
    igniteVersion: String!

    """
    The version of src-cli used by the executor.
    """
    srcCliVersion: String!

    """
    The first time the executor sent a heartbeat to the Sourcegraph instance.
    """
    firstSeenAt: DateTime!

    """
    The last time the executor sent a heartbeat to the Sourcegraph instance.
    """
    lastSeenAt: DateTime!
    """
    The compatibility of the executor with respect to the Sourcegraph instance.
    If outdated, please make sure that the executor and the Sourcegraph backend are of compatible versions. This means they should match in major and minor version, but they may be 1 minor version apart.
    If too new, please update the Sourcegraph instance to match the version of the executor or downgrade the executor.

    Compatibility can be null if the executor or Sourcegraph instance runs in dev mode or there's a version mismatch.
    """
    compatibility: ExecutorCompatibility
}

"""
The compatibility of the executor with the sourcegraph instance.
"""
enum ExecutorCompatibility {
    """
    Executor version is more than one version behind the Sourcegraph instance.
    """
    OUTDATED

    """
    Executor is up-to-date with the Sourcegraph instance.
    """
    UP_TO_DATE

    """
    Executor version is more than one version ahead of the Sourcegraph instance.
    """
    VERSION_AHEAD
}

"""
The result for Query.slowRequests.
"""
type SlowRequestConnection {
    """
    A list of slow graphql requests logs.
    """
    nodes: [SlowRequest!]!

    """
    The total number of slow graphql logs in the connection.
    """
    totalCount: Int!

    """
    Pagination information.
    """
    pageInfo: PageInfo!
}

"""
A logged slow GraphQL request, captured by the backend.
"""
type SlowRequest {
    """
    The index of this request.
    """
    index: String!
    """
    The date at which this request was started.
    """
    start: DateTime!
    """
    The duration of the request.
    """
    duration: Float!
    """
    The user associated with that request, if any.
    """
    user: User
    """
    The name of the GraphQL request.
    """
    name: String!
    """
    The source from which the request originated.
    """
    source: String!
    """
    The repository referenced by the request, if any.
    """
    repository: Repository
    """
    The variables used to build the GraphQL request.
    """
    variables: String!
    """
    The errors returned if the request failed.
    """
    errors: [String!]!
    """
    The GraphQL query.
    """
    query: String!
    """
    The file path referenced by the request, if any.
    """
    filepath: String
}

"""
An object with totalCount and PageInfo.
"""
interface Connection {
    """
    The total count of items in the connection.
    """
    totalCount: Int!
    """
    The pagination info for the connection.
    """
    pageInfo: ConnectionPageInfo!
}

"""
Pagination information.
"""
type ConnectionPageInfo {
    """
    When paginating forwards, the cursor to continue.
    """
    endCursor: String
    """
    When paginating forwards, are there more items?
    """
    hasNextPage: Boolean!
    """
    When paginating backward, the cursor to continue.
    """
    startCursor: String
    """
    When paginating backward, are there more items?
    """
    hasPreviousPage: Boolean!
}

"""
A team is a grouping of users/persons into a common handle. Teams are commonly used to define
codeowners.
"""
type Team implements Node {
    """
    The unique ID of the team.
    """
    id: ID!

    """
    The name of the team. Needs to be globally unique across usernames, organization
    names, and team names. Team names can use alphanumeric characters, - dash
    and / forward slash.
    """
    name: String!

    """
    URL to link to the teams profile page.
    """
    url: String!

    """
    URL to an avatar of this team.
    """
    avatarURL: String

    """
    A human readable name substitute for the name. Null, if not defined.
    """
    displayName: String

    """
    A team can be made read-only from the CLI instructing the UI to show a warning
    banner that this is managed externally, and management features will only be
    available to site-admins. It can also still be manipulated from the CLI.
    """
    readonly: Boolean!

    """
    The teams direct members. That is members that are strictly part of this team,
    but not members of child teams. Team membership is NOT inherited.
    """
    members(
        """
        Returns the first n team members from the list.
        """
        first: Int

        """
        Opaque pagination cursor.
        """
        after: String

        """
        Optionally apply a text search filter over the results.
        """
        search: String
    ): TeamMemberConnection!

    """
    Parent team can be null, if this is a root team.
    """
    parentTeam: Team

    """
    The list of direct child teams.
    """
    childTeams(
        """
        Returns the first n teams from the list.
        """
        first: Int

        """
        Opaque pagination cursor.
        """
        after: String

        """
        Optionally apply a text search filter over the results.
        """
        search: String
    ): TeamConnection!

    """
    True, if the current user can modify this team.
    """
    viewerCanAdminister: Boolean!

    """
    The creator of this team. Null, if the user was deleted.
    """
    creator: User

    """
    True, if the team is external, i.e. not found in our database.
    Example: CODEOWNERS files can contain references to GitHub teams which are not the part of Sourcegraph teams.
    """
    external: Boolean!
}

"""
A list of teams.
"""
type TeamConnection {
    """
    The total count of items in the connection.
    """
    totalCount: Int!

    """
    The pagination info for the connection.
    """
    pageInfo: PageInfo!

    """
    The current page of teams in this connection.
    """
    nodes: [Team!]!
}

"""
A list of team members.
"""
type TeamMemberConnection {
    """
    The total count of items in the connection.
    """
    totalCount: Int!

    """
    The pagination info for the connection.
    """
    pageInfo: PageInfo!

    """
    The current page of team members in this connection.
    """
    nodes: [TeamMember!]!
}

"""
A team member is an entity that can be associated to a team.

For now, this will be User, and will be expanded to User | Person later.
"""
interface TeamMember {
    """
    All the teams this TeamMember is a direct member of.
    """
    teams(
        """
        Returns the first n teams from the list.
        """
        first: Int

        """
        Opaque pagination cursor.
        """
        after: String

        """
        Optionally apply a text search filter over the results.
        """
        search: String
    ): TeamConnection!
}

extend type User implements TeamMember {
    """
    All the teams this user is a direct member of.
    """
    teams(
        """
        Returns the first n teams from the list.
        """
        first: Int

        """
        Opaque pagination cursor.
        """
        after: String

        """
        Optionally apply a text search filter over the results.
        """
        search: String
    ): TeamConnection!
}

extend type Query {
    """
    Get a single team by name. Returns null if not found.
    """
    team(name: String!): Team

    """
    Get the global list of all root teams. (Those without a parent team).
    """
    teams(
        """
        Returns the first n teams from the list.
        """
        first: Int

        """
        Opaque pagination cursor.
        """
        after: String
        """
        Search can be used to do a text-search over the team names.
        """
        search: String
        """
        Do not include any teams that have this ancestor in parent-team relationship.
        This includes the team with the ID mentioned (that is a team is considered
        its own ancestor).
        """
        exceptAncestor: ID
        """
        If set to true, child teams (ones that have parent set) are also returned.
        If not specified, the default behavior is to only include top-level teams.
        """
        includeChildTeams: Boolean
    ): TeamConnection!
}

extend type Mutation {
    """
    Creates a team. The name must be unique, display name can be used to set a custom
    display value for the team inside Sourcegraph.

    If readonly is true, the Sourcegraph UI will show a warning banner that this team
    is managed externally, and it can only be modified by site-admins.
    This is to prevent state drift from external systems that ingest team information into Sourcegraph.
    Readonly can only be set by site-admins.

    Either parentTeam XOR parentTeamName can be specified to make the team a child
    team of the given parent. Only members of the parent team or site-admis can create
    a child team.
    """
    createTeam(
        name: String!
        displayName: String
        readonly: Boolean = false
        parentTeam: ID
        parentTeamName: String
    ): Team!

    """
    Update an existing team. ID or Name must be specified, but not both.

    To unset the display name, pass an empty string. Null will make it ignore updates.

    Either parentTeam XOR parentTeamName XOR makeRoot can be specified to make the team a child
    team of the given parent or conversely to make a team a root team (with no parent team).
    The user has to be a team-member of both the child and parent team for that, and
    neither can be read-only. Site-admin can modify all teams without constraints.
    """
    updateTeam(
        id: ID
        name: String
        displayName: String
        parentTeam: ID
        parentTeamName: String
        makeRoot: Boolean
    ): Team!

    """
    Delete team deletes a team. ID or Name must be specified, but not both.
    Must be team-member to delete. If the team is marked as read-only, must be site-admin.
    """
    deleteTeam(id: ID, name: String): EmptyResponse

    """
    Add a list of team members to an existing team.
    People that already are part of the team are ignored.

    Either team XOR teamName can be specified to specify the team.
    Must be team member to add new team members, or site-admin.

    For now, members can only be the IDs of User entities in Sourcegraph.
    Later, we will expand this to allow Persons as well.

    If skipUnmatchedMembers is true, members that are not matched to a user are skipped.
    """
    addTeamMembers(
        team: ID
        teamName: String
        members: [TeamMemberInput!]!
        skipUnmatchedMembers: Boolean = false
    ): Team!

    """
    This is a convenience method to forcefully overwrite the full set of members
    of a team. This is handy to sync external state without diffing the current
    members vs the desired set of members.

    Either team XOR teamName can be specified to specify the team.
    Must be team member to modify team members, or site-admin.

    For now, members can only be the IDs of User entities in Sourcegraph.
    Later, we will expand this to allow Persons as well.

    If skipUnmatchedMembers is true, members that are not matched to a user are skipped.
    """
    setTeamMembers(
        team: ID
        teamName: String
        members: [TeamMemberInput!]!
        skipUnmatchedMembers: Boolean = false
    ): Team!

    """
    This mutation removes team membership for the given team and set of members.
    Members that weren't part of the team are ignored.

    Either team XOR teamName can be specified to specify the team.
    Must be team member to remove team members, or site-admin.

    For now, members can only be the IDs of User entities in Sourcegraph.
    Later, we will expand this to allow Persons as well.

    If skipUnmatchedMembers is true, members that are not matched to a user are skipped.
    """
    removeTeamMembers(
        team: ID
        teamName: String
        members: [TeamMemberInput!]!
        skipUnmatchedMembers: Boolean = false
    ): Team!
}

"""
Options to specify a user for team membership. Multiple options can be provided,
with the following precedence order: (Other mismatches will be discarded)
- UserID
- Username
- Email
- External Account fields

Examples:
- If ID is set and no match, return.
- If ID and username is set, and ID matches but username doesn't, match.
"""
input TeamMemberInput {
    """
    Explicitly define a user by ID.
    """
    userID: ID
    """
    Explicitly define a user by username in Sourcegraph.
    """
    username: String
    """
    If the email is associated to a user and verified, the user account will be matched.
    """
    email: String

    """
    If the user has an associated external account, use this.
    externalAccountServiceID and externalAccountServiceType must be set and
    either of externalAccountAccountID externalAccountLogin are required as well.
    Service ID for the GitHub OAuth provider, for example, is https://github.com/.
    """
    externalAccountServiceID: String
    """
    If the user has an associated external account, use this.
    externalAccountServiceID and externalAccountServiceType must be set and
    either of externalAccountAccountID externalAccountLogin are required as well.
    Service Type for the GitHub OAuth provider, for example, is github.
    """
    externalAccountServiceType: String
    """
    If the user has an associated external account, use this.
    externalAccountServiceID and externalAccountServiceType must be set and
    either of externalAccountAccountID externalAccountLogin are required as well.
    Account ID is the unique identifier on the external account platform.
    """
    externalAccountAccountID: String
    """
    If the user has an associated external account, use this.
    externalAccountServiceID and externalAccountServiceType must be set and
    either of externalAccountAccountID externalAccountLogin are required as well.
    Account Login is usually the username on the external account platform.
    """
    externalAccountLogin: String
}

"""
A list of access requests
"""
type AccessRequestConnection {
    """
    Total count of access requests
    """
    totalCount: Int!
    """
    A list of access requests
    """
    nodes: [AccessRequest!]!

    """
    Pagination information.
    """
    pageInfo: BidirectionalPageInfo!
}

"""
Access request status enum
"""
enum AccessRequestStatus {
    """
    Access request is submitted and waiting for actions
    """
    PENDING
    """
    Access request was approved
    """
    APPROVED
    """
    Access request was rejected
    """
    REJECTED
}

"""
Access request
"""
type AccessRequest implements Node {
    """
    The unique identifier of the secret.
    """
    id: ID!

    """
    Name of a person requested access
    """
    name: String!

    """
    Email of a person requested access
    """
    email: String!

    """
    The date and time when request access was created
    """
    createdAt: DateTime!

    """
    Additional information submitted by person requested access
    """
    additionalInfo: String

    """
    Access request status
    """
    status: AccessRequestStatus!
}

extend type Query {
    """
    List access requests.
    """
    accessRequests(
        status: AccessRequestStatus
        """
        Returns the first n access requests from the list.
        """
        first: Int
        last: Int
        after: String
        before: String
    ): AccessRequestConnection!
}

"""
Repo metadata key or value connection result`
"""
type RepoMetadataKeyOrValueConnection {
    """
    Total count of repo key-value pair metadata
    """
    totalCount: Int!
    """
    A list of repo key-value pair metadata
    """
    nodes: [String!]!

    """
    Pagination information.
    """
    pageInfo: BidirectionalPageInfo!
}

"""
Repo metadata key result
"""
type RepoMetadataKeyResult {
    """
    Returns paginated list of repo metadata distinct values matching a query
    """
    values(
        query: String
        """
        Pagination paramters
        """
        first: Int
        last: Int
        after: String
        before: String
    ): RepoMetadataKeyOrValueConnection!
}

"""
Repo key-value pair metadata
"""
type RepoMetadata {
    """
    Returns paginated list of repo metadata distinct keys matching a query
    """
    keys(
        query: String
        """
        Pagination paramters
        """
        first: Int
        last: Int
        after: String
        before: String
    ): RepoMetadataKeyOrValueConnection!

    """
    Repo metadata key
    """
    key(key: String!): RepoMetadataKeyResult
}

extend type Query {
    """
    Repository key-value pair metadata
    """
    repoMeta: RepoMetadata
}

extend type Mutation {
    """
    Marks access_request as rejected
    """
    setAccessRequestStatus(id: ID!, status: AccessRequestStatus!): EmptyResponse
}

"""
A role
"""
type Role implements Node {
    """
    The globally unique identifier for this role.
    """
    id: ID!
    """
    The human readable name for this role.
    """
    name: String!
    """
    Indicates whether a role is a default system role, which cannot be modified or deleted, or a custom role added by a site admin.
    """
    system: Boolean!
    """
    The list of permissions that will be granted to any user with this role.
    """
    permissions(
        """
        The limit argument for forward pagination.
        """
        first: Int
        """
        The limit argument for backward pagination.
        """
        last: Int
        """
        The cursor argument for forward pagination.
        """
        after: String
        """
        The cursor argument for backward pagination.
        """
        before: String
    ): PermissionConnection!
    """
    The date and time when the role was created.
    """
    createdAt: DateTime!
}

"""
A list of roles.
"""
type RoleConnection {
    """
    A list of roles.
    """
    nodes: [Role!]!
    """
    The total count of roles in the connection.
    """
    totalCount: Int!
    """
    Pagination information.
    """
    pageInfo: ConnectionPageInfo!
}

"""
A list of permissions.
"""
type PermissionConnection {
    """
    A list of permissions.
    """
    nodes: [Permission!]!
    """
    The total count of permissions in the connection.
    """
    totalCount: Int!
    """
    Pagination information.
    """
    pageInfo: ConnectionPageInfo!
}

"""
A namespace represents a distinct context within which permission policies
are defined and enforced.
"""
enum PermissionNamespace {
    """
    This represents the Batch Changes namespace.
    """
    BATCH_CHANGES
    """
    Code ownership namespace used for permitting to assign ownership
    within Sourcegraph.
    """
    OWNERSHIP

    """
    Repo Metadata namespace used for permitting to edit repository
    key-value pair metadata.
    """
    REPO_METADATA
}

"""
A permission
"""
type Permission implements Node {
    """
    The globally unique identifier for this permission.
    """
    id: ID!
    """
    The namespace in which this permission belongs to.
    """
    namespace: PermissionNamespace!
    """
    The unique action which is granted to a bearer of this permission.
    """
    action: String!
    """
    A unique, human-readable string used to represent a permission, taking the form: <namespace>:<object_id>#<relation>@<user_id | user_group>
    """
    displayName: String!
    """
    The date and time when the permission was created.
    """
    createdAt: DateTime!
}

"""
A list of symbols.
"""
type SymbolConnection {
    """
    A list of symbols.
    """
    nodes: [Symbol!]!
    """
    Pagination information.
    """
    pageInfo: PageInfo!
}

"""
A code symbol (e.g., a function, variable, type, class, etc.).
It is derived from DocumentSymbol as defined in the Language Server Protocol (see https://microsoft.github.io/language-server-protocol/specifications/specification-3-14/#textDocument_documentSymbol).
"""
type Symbol {
    """
    The name of the symbol.
    """
    name: String!
    """
    The name of the symbol that contains this symbol, if any. This field's value is not guaranteed to be
    structured in such a way that callers can infer a hierarchy of symbols.
    """
    containerName: String
    """
    The kind of the symbol.
    """
    kind: SymbolKind!
    """
    The programming language of the symbol.
    """
    language: String!
    """
    The location where this symbol is defined.
    """
    location: Location!
    """
    The URL to this symbol (using the input revision specifier, which may not be immutable).
    """
    url: String!
    """
    The canonical URL to this symbol (using an immutable revision specifier).
    """
    canonicalURL: String!
    """
    Whether or not the symbol is local to the file it's defined in.
    """
    fileLocal: Boolean!
}

"""
All possible kinds of symbols. This set matches that of the Language Server Protocol
(https://microsoft.github.io/language-server-protocol/specification#workspace_symbol).
"""
enum SymbolKind {
    UNKNOWN
    FILE
    MODULE
    NAMESPACE
    PACKAGE
    CLASS
    METHOD
    PROPERTY
    FIELD
    CONSTRUCTOR
    ENUM
    INTERFACE
    FUNCTION
    VARIABLE
    CONSTANT
    STRING
    NUMBER
    BOOLEAN
    ARRAY
    OBJECT
    KEY
    NULL
    ENUMMEMBER
    STRUCT
    EVENT
    OPERATOR
    TYPEPARAMETER
}

"""
A list of locations within a file.
"""
type LocationConnection {
    """
    A list of locations within a file.
    """
    nodes: [Location!]!

    """
    Pagination information.
    """
    pageInfo: PageInfo!
}

"""
A location inside a resource (in a repository at a specific commit).
"""
type Location {
    """
    The file that this location refers to.
    """
    resource: CodeIntelGitBlob!
    """
    The range inside the file that this location refers to.
    """
    range: Range
    """
    The URL to this location (using the input revision specifier, which may not be immutable).
    """
    url: String!
    """
    The canonical URL to this location (using an immutable revision specifier).
    """
    canonicalURL: String!
}

"""
A range inside a file. The start position is inclusive, and the end position is exclusive.
"""
type Range {
    """
    The start position of the range (inclusive).
    """
    start: Position!
    """
    The end position of the range (exclusive).
    """
    end: Position!
}

"""
A zero-based position inside a file.
"""
type Position {
    """
    The line number (zero-based) of the position.
    """
    line: Int!
    """
    The character offset (zero-based) in the line of the position.
    """
    character: Int!
}

"""
A gitblob resolver specific to code intel.
"""
type CodeIntelGitBlob {
    """
    The full path (relative to the root) of this tree.
    """
    path: String!
    """
    The base name (i.e., last path component only) of this tree.
    """
    name: String!
    """
    The Git commit containing this tree.
    """
    commit: CodeIntelCommit!
    """
    The URL to this tree (using the input revision specifier, which may not be immutable).
    """
    url: String!
    """
    The repository containing this tree.
    """
    repository: CodeIntelRepository!
    """
    The content of this blob.
    """
    content(
        """
        Return file content starting at line "startLine". A value <= 0 will be the start of the file.
        """
        startLine: Int
        """
        Return file content ending at line "endLine". A value < 0 or > totalLines will set endLine to the end of the file.
        """
        endLine: Int
    ): String!
}

"""
A Code Intel Git Tree.
"""
type CodeIntelGitTree {
    """
    The full path (relative to the root) of this tree.
    """
    path: String!
    """
    The base name (i.e., last path component only) of this tree.
    """
    name: String!
    """
    The Git commit containing this tree.
    """
    commit: CodeIntelCommit!
    """
    The URL to this tree (using the input revision specifier, which may not be immutable).
    """
    url: String!
    """
    The repository containing this tree.
    """
    repository: CodeIntelRepository!
    """
    The content of this blob.
    """
    content(
        """
        Return file content starting at line "startLine". A value <= 0 will be the start of the file.
        """
        startLine: Int
        """
        Return file content ending at line "endLine". A value < 0 or > totalLines will set endLine to the end of the file.
        """
        endLine: Int
    ): String!
}

"""
A codeintel repository is a Git source control repository that is mirrored from some origin code host and it is specific to code intel.
"""
type CodeIntelRepository {
    """
    The globally addressable ID for this commit.
    """
    id: ID!
    """
    The repository's name, as a path with one or more components. It conventionally consists of
    the repository's hostname and path (joined by "/"), minus any suffixes (such as ".git").
    Examples:
    - github.com/foo/bar
    - my-code-host.example.com/myrepo
    - myrepo
    """
    name: String!
    """
    The URL to this repository.
    """
    url: String!
    """
    Information about this repository from the external service that it originates from (such as GitHub, GitLab,
    Phabricator, etc.). Only populated when used as part of repository list previews for configuration policies.
    """
    externalRepository: CodeIntelExternalRepository
}

"""
A repository on an external service (such as GitHub, GitLab, Phabricator, etc.).
"""
type CodeIntelExternalRepository {
    """
    The type of external service where this repository resides.
    Example: "github", "gitlab", etc.
    """
    serviceType: String!
    """
    The particular instance of the external service where this repository resides. Its value is
    opaque but typically consists of the canonical base URL to the service.
    Example: For GitHub.com, this is "https://github.com/".
    """
    serviceID: String!
}

"""
A Code Intel Commit.
"""
type CodeIntelCommit {
    """
    The globally addressable ID for this commit.
    """
    id: ID!
    """
    This commit's Git object ID (OID), a 40-character SHA-1 hash.
    """
    oid: GitObjectID!
    """
    The abbreviated form of this commit's OID.
    """
    abbreviatedOID: String!
    """
    The URL to this commit (using the input revision specifier, which may not be immutable).
    """
    url: String!
    """
    The repository that contains this commit.
    """
    repository: CodeIntelRepository!
}

"""
EXPERIMENTAL: A Perforce changelist.
"""
type PerforceChangelist {
    """
    The changelist ID.
    """
    cid: String!
    """
    The canonical URL to this changelist.
    """
    canonicalURL: String!
    """
    The corresponding git commit of this changelist.
    """
    commit: GitCommit!
}
