// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package backend

import (
	"context"
	"sync"

	api "github.com/sourcegraph/sourcegraph/internal/api"
	database "github.com/sourcegraph/sourcegraph/internal/database"
	gitdomain "github.com/sourcegraph/sourcegraph/internal/gitserver/gitdomain"
	inventory "github.com/sourcegraph/sourcegraph/internal/inventory"
	types "github.com/sourcegraph/sourcegraph/internal/types"
)

// MockReposService is a mock implementation of the ReposService interface
// (from the package
// github.com/sourcegraph/sourcegraph/cmd/frontend/backend) used for unit
// testing.
type MockReposService struct {
	// AddFunc is an instance of a mock function object controlling the
	// behavior of the method Add.
	AddFunc *ReposServiceAddFunc
	// DeleteRepositoryFromDiskFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteRepositoryFromDisk.
	DeleteRepositoryFromDiskFunc *ReposServiceDeleteRepositoryFromDiskFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *ReposServiceGetFunc
	// GetByNameFunc is an instance of a mock function object controlling
	// the behavior of the method GetByName.
	GetByNameFunc *ReposServiceGetByNameFunc
	// GetCommitFunc is an instance of a mock function object controlling
	// the behavior of the method GetCommit.
	GetCommitFunc *ReposServiceGetCommitFunc
	// GetInventoryFunc is an instance of a mock function object controlling
	// the behavior of the method GetInventory.
	GetInventoryFunc *ReposServiceGetInventoryFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *ReposServiceListFunc
	// ListIndexableFunc is an instance of a mock function object
	// controlling the behavior of the method ListIndexable.
	ListIndexableFunc *ReposServiceListIndexableFunc
	// RequestRepositoryCloneFunc is an instance of a mock function object
	// controlling the behavior of the method RequestRepositoryClone.
	RequestRepositoryCloneFunc *ReposServiceRequestRepositoryCloneFunc
	// ResolveRevFunc is an instance of a mock function object controlling
	// the behavior of the method ResolveRev.
	ResolveRevFunc *ReposServiceResolveRevFunc
}

// NewMockReposService creates a new mock of the ReposService interface. All
// methods return zero values for all results, unless overwritten.
func NewMockReposService() *MockReposService {
	return &MockReposService{
		AddFunc: &ReposServiceAddFunc{
			defaultHook: func(context.Context, api.RepoName) (r0 api.RepoName, r1 error) {
				return
			},
		},
		DeleteRepositoryFromDiskFunc: &ReposServiceDeleteRepositoryFromDiskFunc{
			defaultHook: func(context.Context, api.RepoID) (r0 error) {
				return
			},
		},
		GetFunc: &ReposServiceGetFunc{
			defaultHook: func(context.Context, api.RepoID) (r0 *types.Repo, r1 error) {
				return
			},
		},
		GetByNameFunc: &ReposServiceGetByNameFunc{
			defaultHook: func(context.Context, api.RepoName) (r0 *types.Repo, r1 error) {
				return
			},
		},
		GetCommitFunc: &ReposServiceGetCommitFunc{
			defaultHook: func(context.Context, *types.Repo, api.CommitID) (r0 *gitdomain.Commit, r1 error) {
				return
			},
		},
		GetInventoryFunc: &ReposServiceGetInventoryFunc{
			defaultHook: func(context.Context, *types.Repo, api.CommitID, bool) (r0 *inventory.Inventory, r1 error) {
				return
			},
		},
		ListFunc: &ReposServiceListFunc{
			defaultHook: func(context.Context, database.ReposListOptions) (r0 []*types.Repo, r1 error) {
				return
			},
		},
		ListIndexableFunc: &ReposServiceListIndexableFunc{
			defaultHook: func(context.Context) (r0 []types.MinimalRepo, r1 error) {
				return
			},
		},
		RequestRepositoryCloneFunc: &ReposServiceRequestRepositoryCloneFunc{
			defaultHook: func(context.Context, api.RepoID) (r0 error) {
				return
			},
		},
		ResolveRevFunc: &ReposServiceResolveRevFunc{
			defaultHook: func(context.Context, *types.Repo, string) (r0 api.CommitID, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockReposService creates a new mock of the ReposService
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockReposService() *MockReposService {
	return &MockReposService{
		AddFunc: &ReposServiceAddFunc{
			defaultHook: func(context.Context, api.RepoName) (api.RepoName, error) {
				panic("unexpected invocation of MockReposService.Add")
			},
		},
		DeleteRepositoryFromDiskFunc: &ReposServiceDeleteRepositoryFromDiskFunc{
			defaultHook: func(context.Context, api.RepoID) error {
				panic("unexpected invocation of MockReposService.DeleteRepositoryFromDisk")
			},
		},
		GetFunc: &ReposServiceGetFunc{
			defaultHook: func(context.Context, api.RepoID) (*types.Repo, error) {
				panic("unexpected invocation of MockReposService.Get")
			},
		},
		GetByNameFunc: &ReposServiceGetByNameFunc{
			defaultHook: func(context.Context, api.RepoName) (*types.Repo, error) {
				panic("unexpected invocation of MockReposService.GetByName")
			},
		},
		GetCommitFunc: &ReposServiceGetCommitFunc{
			defaultHook: func(context.Context, *types.Repo, api.CommitID) (*gitdomain.Commit, error) {
				panic("unexpected invocation of MockReposService.GetCommit")
			},
		},
		GetInventoryFunc: &ReposServiceGetInventoryFunc{
			defaultHook: func(context.Context, *types.Repo, api.CommitID, bool) (*inventory.Inventory, error) {
				panic("unexpected invocation of MockReposService.GetInventory")
			},
		},
		ListFunc: &ReposServiceListFunc{
			defaultHook: func(context.Context, database.ReposListOptions) ([]*types.Repo, error) {
				panic("unexpected invocation of MockReposService.List")
			},
		},
		ListIndexableFunc: &ReposServiceListIndexableFunc{
			defaultHook: func(context.Context) ([]types.MinimalRepo, error) {
				panic("unexpected invocation of MockReposService.ListIndexable")
			},
		},
		RequestRepositoryCloneFunc: &ReposServiceRequestRepositoryCloneFunc{
			defaultHook: func(context.Context, api.RepoID) error {
				panic("unexpected invocation of MockReposService.RequestRepositoryClone")
			},
		},
		ResolveRevFunc: &ReposServiceResolveRevFunc{
			defaultHook: func(context.Context, *types.Repo, string) (api.CommitID, error) {
				panic("unexpected invocation of MockReposService.ResolveRev")
			},
		},
	}
}

// NewMockReposServiceFrom creates a new mock of the MockReposService
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockReposServiceFrom(i ReposService) *MockReposService {
	return &MockReposService{
		AddFunc: &ReposServiceAddFunc{
			defaultHook: i.Add,
		},
		DeleteRepositoryFromDiskFunc: &ReposServiceDeleteRepositoryFromDiskFunc{
			defaultHook: i.DeleteRepositoryFromDisk,
		},
		GetFunc: &ReposServiceGetFunc{
			defaultHook: i.Get,
		},
		GetByNameFunc: &ReposServiceGetByNameFunc{
			defaultHook: i.GetByName,
		},
		GetCommitFunc: &ReposServiceGetCommitFunc{
			defaultHook: i.GetCommit,
		},
		GetInventoryFunc: &ReposServiceGetInventoryFunc{
			defaultHook: i.GetInventory,
		},
		ListFunc: &ReposServiceListFunc{
			defaultHook: i.List,
		},
		ListIndexableFunc: &ReposServiceListIndexableFunc{
			defaultHook: i.ListIndexable,
		},
		RequestRepositoryCloneFunc: &ReposServiceRequestRepositoryCloneFunc{
			defaultHook: i.RequestRepositoryClone,
		},
		ResolveRevFunc: &ReposServiceResolveRevFunc{
			defaultHook: i.ResolveRev,
		},
	}
}

// ReposServiceAddFunc describes the behavior when the Add method of the
// parent MockReposService instance is invoked.
type ReposServiceAddFunc struct {
	defaultHook func(context.Context, api.RepoName) (api.RepoName, error)
	hooks       []func(context.Context, api.RepoName) (api.RepoName, error)
	history     []ReposServiceAddFuncCall
	mutex       sync.Mutex
}

// Add delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockReposService) Add(v0 context.Context, v1 api.RepoName) (api.RepoName, error) {
	r0, r1 := m.AddFunc.nextHook()(v0, v1)
	m.AddFunc.appendCall(ReposServiceAddFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Add method of the
// parent MockReposService instance is invoked and the hook queue is empty.
func (f *ReposServiceAddFunc) SetDefaultHook(hook func(context.Context, api.RepoName) (api.RepoName, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Add method of the parent MockReposService instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ReposServiceAddFunc) PushHook(hook func(context.Context, api.RepoName) (api.RepoName, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ReposServiceAddFunc) SetDefaultReturn(r0 api.RepoName, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) (api.RepoName, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ReposServiceAddFunc) PushReturn(r0 api.RepoName, r1 error) {
	f.PushHook(func(context.Context, api.RepoName) (api.RepoName, error) {
		return r0, r1
	})
}

func (f *ReposServiceAddFunc) nextHook() func(context.Context, api.RepoName) (api.RepoName, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReposServiceAddFunc) appendCall(r0 ReposServiceAddFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ReposServiceAddFuncCall objects describing
// the invocations of this function.
func (f *ReposServiceAddFunc) History() []ReposServiceAddFuncCall {
	f.mutex.Lock()
	history := make([]ReposServiceAddFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReposServiceAddFuncCall is an object that describes an invocation of
// method Add on an instance of MockReposService.
type ReposServiceAddFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 api.RepoName
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReposServiceAddFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReposServiceAddFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ReposServiceDeleteRepositoryFromDiskFunc describes the behavior when the
// DeleteRepositoryFromDisk method of the parent MockReposService instance
// is invoked.
type ReposServiceDeleteRepositoryFromDiskFunc struct {
	defaultHook func(context.Context, api.RepoID) error
	hooks       []func(context.Context, api.RepoID) error
	history     []ReposServiceDeleteRepositoryFromDiskFuncCall
	mutex       sync.Mutex
}

// DeleteRepositoryFromDisk delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockReposService) DeleteRepositoryFromDisk(v0 context.Context, v1 api.RepoID) error {
	r0 := m.DeleteRepositoryFromDiskFunc.nextHook()(v0, v1)
	m.DeleteRepositoryFromDiskFunc.appendCall(ReposServiceDeleteRepositoryFromDiskFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// DeleteRepositoryFromDisk method of the parent MockReposService instance
// is invoked and the hook queue is empty.
func (f *ReposServiceDeleteRepositoryFromDiskFunc) SetDefaultHook(hook func(context.Context, api.RepoID) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteRepositoryFromDisk method of the parent MockReposService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ReposServiceDeleteRepositoryFromDiskFunc) PushHook(hook func(context.Context, api.RepoID) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ReposServiceDeleteRepositoryFromDiskFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, api.RepoID) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ReposServiceDeleteRepositoryFromDiskFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, api.RepoID) error {
		return r0
	})
}

func (f *ReposServiceDeleteRepositoryFromDiskFunc) nextHook() func(context.Context, api.RepoID) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReposServiceDeleteRepositoryFromDiskFunc) appendCall(r0 ReposServiceDeleteRepositoryFromDiskFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ReposServiceDeleteRepositoryFromDiskFuncCall objects describing the
// invocations of this function.
func (f *ReposServiceDeleteRepositoryFromDiskFunc) History() []ReposServiceDeleteRepositoryFromDiskFuncCall {
	f.mutex.Lock()
	history := make([]ReposServiceDeleteRepositoryFromDiskFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReposServiceDeleteRepositoryFromDiskFuncCall is an object that describes
// an invocation of method DeleteRepositoryFromDisk on an instance of
// MockReposService.
type ReposServiceDeleteRepositoryFromDiskFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReposServiceDeleteRepositoryFromDiskFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReposServiceDeleteRepositoryFromDiskFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ReposServiceGetFunc describes the behavior when the Get method of the
// parent MockReposService instance is invoked.
type ReposServiceGetFunc struct {
	defaultHook func(context.Context, api.RepoID) (*types.Repo, error)
	hooks       []func(context.Context, api.RepoID) (*types.Repo, error)
	history     []ReposServiceGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockReposService) Get(v0 context.Context, v1 api.RepoID) (*types.Repo, error) {
	r0, r1 := m.GetFunc.nextHook()(v0, v1)
	m.GetFunc.appendCall(ReposServiceGetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockReposService instance is invoked and the hook queue is empty.
func (f *ReposServiceGetFunc) SetDefaultHook(hook func(context.Context, api.RepoID) (*types.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockReposService instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ReposServiceGetFunc) PushHook(hook func(context.Context, api.RepoID) (*types.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ReposServiceGetFunc) SetDefaultReturn(r0 *types.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoID) (*types.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ReposServiceGetFunc) PushReturn(r0 *types.Repo, r1 error) {
	f.PushHook(func(context.Context, api.RepoID) (*types.Repo, error) {
		return r0, r1
	})
}

func (f *ReposServiceGetFunc) nextHook() func(context.Context, api.RepoID) (*types.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReposServiceGetFunc) appendCall(r0 ReposServiceGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ReposServiceGetFuncCall objects describing
// the invocations of this function.
func (f *ReposServiceGetFunc) History() []ReposServiceGetFuncCall {
	f.mutex.Lock()
	history := make([]ReposServiceGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReposServiceGetFuncCall is an object that describes an invocation of
// method Get on an instance of MockReposService.
type ReposServiceGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReposServiceGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReposServiceGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ReposServiceGetByNameFunc describes the behavior when the GetByName
// method of the parent MockReposService instance is invoked.
type ReposServiceGetByNameFunc struct {
	defaultHook func(context.Context, api.RepoName) (*types.Repo, error)
	hooks       []func(context.Context, api.RepoName) (*types.Repo, error)
	history     []ReposServiceGetByNameFuncCall
	mutex       sync.Mutex
}

// GetByName delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockReposService) GetByName(v0 context.Context, v1 api.RepoName) (*types.Repo, error) {
	r0, r1 := m.GetByNameFunc.nextHook()(v0, v1)
	m.GetByNameFunc.appendCall(ReposServiceGetByNameFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByName method of
// the parent MockReposService instance is invoked and the hook queue is
// empty.
func (f *ReposServiceGetByNameFunc) SetDefaultHook(hook func(context.Context, api.RepoName) (*types.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByName method of the parent MockReposService instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ReposServiceGetByNameFunc) PushHook(hook func(context.Context, api.RepoName) (*types.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ReposServiceGetByNameFunc) SetDefaultReturn(r0 *types.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) (*types.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ReposServiceGetByNameFunc) PushReturn(r0 *types.Repo, r1 error) {
	f.PushHook(func(context.Context, api.RepoName) (*types.Repo, error) {
		return r0, r1
	})
}

func (f *ReposServiceGetByNameFunc) nextHook() func(context.Context, api.RepoName) (*types.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReposServiceGetByNameFunc) appendCall(r0 ReposServiceGetByNameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ReposServiceGetByNameFuncCall objects
// describing the invocations of this function.
func (f *ReposServiceGetByNameFunc) History() []ReposServiceGetByNameFuncCall {
	f.mutex.Lock()
	history := make([]ReposServiceGetByNameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReposServiceGetByNameFuncCall is an object that describes an invocation
// of method GetByName on an instance of MockReposService.
type ReposServiceGetByNameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReposServiceGetByNameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReposServiceGetByNameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ReposServiceGetCommitFunc describes the behavior when the GetCommit
// method of the parent MockReposService instance is invoked.
type ReposServiceGetCommitFunc struct {
	defaultHook func(context.Context, *types.Repo, api.CommitID) (*gitdomain.Commit, error)
	hooks       []func(context.Context, *types.Repo, api.CommitID) (*gitdomain.Commit, error)
	history     []ReposServiceGetCommitFuncCall
	mutex       sync.Mutex
}

// GetCommit delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockReposService) GetCommit(v0 context.Context, v1 *types.Repo, v2 api.CommitID) (*gitdomain.Commit, error) {
	r0, r1 := m.GetCommitFunc.nextHook()(v0, v1, v2)
	m.GetCommitFunc.appendCall(ReposServiceGetCommitFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetCommit method of
// the parent MockReposService instance is invoked and the hook queue is
// empty.
func (f *ReposServiceGetCommitFunc) SetDefaultHook(hook func(context.Context, *types.Repo, api.CommitID) (*gitdomain.Commit, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetCommit method of the parent MockReposService instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ReposServiceGetCommitFunc) PushHook(hook func(context.Context, *types.Repo, api.CommitID) (*gitdomain.Commit, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ReposServiceGetCommitFunc) SetDefaultReturn(r0 *gitdomain.Commit, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.Repo, api.CommitID) (*gitdomain.Commit, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ReposServiceGetCommitFunc) PushReturn(r0 *gitdomain.Commit, r1 error) {
	f.PushHook(func(context.Context, *types.Repo, api.CommitID) (*gitdomain.Commit, error) {
		return r0, r1
	})
}

func (f *ReposServiceGetCommitFunc) nextHook() func(context.Context, *types.Repo, api.CommitID) (*gitdomain.Commit, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReposServiceGetCommitFunc) appendCall(r0 ReposServiceGetCommitFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ReposServiceGetCommitFuncCall objects
// describing the invocations of this function.
func (f *ReposServiceGetCommitFunc) History() []ReposServiceGetCommitFuncCall {
	f.mutex.Lock()
	history := make([]ReposServiceGetCommitFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReposServiceGetCommitFuncCall is an object that describes an invocation
// of method GetCommit on an instance of MockReposService.
type ReposServiceGetCommitFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.Repo
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.CommitID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *gitdomain.Commit
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReposServiceGetCommitFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReposServiceGetCommitFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ReposServiceGetInventoryFunc describes the behavior when the GetInventory
// method of the parent MockReposService instance is invoked.
type ReposServiceGetInventoryFunc struct {
	defaultHook func(context.Context, *types.Repo, api.CommitID, bool) (*inventory.Inventory, error)
	hooks       []func(context.Context, *types.Repo, api.CommitID, bool) (*inventory.Inventory, error)
	history     []ReposServiceGetInventoryFuncCall
	mutex       sync.Mutex
}

// GetInventory delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockReposService) GetInventory(v0 context.Context, v1 *types.Repo, v2 api.CommitID, v3 bool) (*inventory.Inventory, error) {
	r0, r1 := m.GetInventoryFunc.nextHook()(v0, v1, v2, v3)
	m.GetInventoryFunc.appendCall(ReposServiceGetInventoryFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetInventory method
// of the parent MockReposService instance is invoked and the hook queue is
// empty.
func (f *ReposServiceGetInventoryFunc) SetDefaultHook(hook func(context.Context, *types.Repo, api.CommitID, bool) (*inventory.Inventory, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetInventory method of the parent MockReposService instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ReposServiceGetInventoryFunc) PushHook(hook func(context.Context, *types.Repo, api.CommitID, bool) (*inventory.Inventory, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ReposServiceGetInventoryFunc) SetDefaultReturn(r0 *inventory.Inventory, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.Repo, api.CommitID, bool) (*inventory.Inventory, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ReposServiceGetInventoryFunc) PushReturn(r0 *inventory.Inventory, r1 error) {
	f.PushHook(func(context.Context, *types.Repo, api.CommitID, bool) (*inventory.Inventory, error) {
		return r0, r1
	})
}

func (f *ReposServiceGetInventoryFunc) nextHook() func(context.Context, *types.Repo, api.CommitID, bool) (*inventory.Inventory, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReposServiceGetInventoryFunc) appendCall(r0 ReposServiceGetInventoryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ReposServiceGetInventoryFuncCall objects
// describing the invocations of this function.
func (f *ReposServiceGetInventoryFunc) History() []ReposServiceGetInventoryFuncCall {
	f.mutex.Lock()
	history := make([]ReposServiceGetInventoryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReposServiceGetInventoryFuncCall is an object that describes an
// invocation of method GetInventory on an instance of MockReposService.
type ReposServiceGetInventoryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.Repo
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.CommitID
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *inventory.Inventory
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReposServiceGetInventoryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReposServiceGetInventoryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ReposServiceListFunc describes the behavior when the List method of the
// parent MockReposService instance is invoked.
type ReposServiceListFunc struct {
	defaultHook func(context.Context, database.ReposListOptions) ([]*types.Repo, error)
	hooks       []func(context.Context, database.ReposListOptions) ([]*types.Repo, error)
	history     []ReposServiceListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockReposService) List(v0 context.Context, v1 database.ReposListOptions) ([]*types.Repo, error) {
	r0, r1 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(ReposServiceListFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockReposService instance is invoked and the hook queue is empty.
func (f *ReposServiceListFunc) SetDefaultHook(hook func(context.Context, database.ReposListOptions) ([]*types.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockReposService instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ReposServiceListFunc) PushHook(hook func(context.Context, database.ReposListOptions) ([]*types.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ReposServiceListFunc) SetDefaultReturn(r0 []*types.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, database.ReposListOptions) ([]*types.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ReposServiceListFunc) PushReturn(r0 []*types.Repo, r1 error) {
	f.PushHook(func(context.Context, database.ReposListOptions) ([]*types.Repo, error) {
		return r0, r1
	})
}

func (f *ReposServiceListFunc) nextHook() func(context.Context, database.ReposListOptions) ([]*types.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReposServiceListFunc) appendCall(r0 ReposServiceListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ReposServiceListFuncCall objects describing
// the invocations of this function.
func (f *ReposServiceListFunc) History() []ReposServiceListFuncCall {
	f.mutex.Lock()
	history := make([]ReposServiceListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReposServiceListFuncCall is an object that describes an invocation of
// method List on an instance of MockReposService.
type ReposServiceListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.ReposListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReposServiceListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReposServiceListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ReposServiceListIndexableFunc describes the behavior when the
// ListIndexable method of the parent MockReposService instance is invoked.
type ReposServiceListIndexableFunc struct {
	defaultHook func(context.Context) ([]types.MinimalRepo, error)
	hooks       []func(context.Context) ([]types.MinimalRepo, error)
	history     []ReposServiceListIndexableFuncCall
	mutex       sync.Mutex
}

// ListIndexable delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockReposService) ListIndexable(v0 context.Context) ([]types.MinimalRepo, error) {
	r0, r1 := m.ListIndexableFunc.nextHook()(v0)
	m.ListIndexableFunc.appendCall(ReposServiceListIndexableFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListIndexable method
// of the parent MockReposService instance is invoked and the hook queue is
// empty.
func (f *ReposServiceListIndexableFunc) SetDefaultHook(hook func(context.Context) ([]types.MinimalRepo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListIndexable method of the parent MockReposService instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ReposServiceListIndexableFunc) PushHook(hook func(context.Context) ([]types.MinimalRepo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ReposServiceListIndexableFunc) SetDefaultReturn(r0 []types.MinimalRepo, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]types.MinimalRepo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ReposServiceListIndexableFunc) PushReturn(r0 []types.MinimalRepo, r1 error) {
	f.PushHook(func(context.Context) ([]types.MinimalRepo, error) {
		return r0, r1
	})
}

func (f *ReposServiceListIndexableFunc) nextHook() func(context.Context) ([]types.MinimalRepo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReposServiceListIndexableFunc) appendCall(r0 ReposServiceListIndexableFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ReposServiceListIndexableFuncCall objects
// describing the invocations of this function.
func (f *ReposServiceListIndexableFunc) History() []ReposServiceListIndexableFuncCall {
	f.mutex.Lock()
	history := make([]ReposServiceListIndexableFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReposServiceListIndexableFuncCall is an object that describes an
// invocation of method ListIndexable on an instance of MockReposService.
type ReposServiceListIndexableFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.MinimalRepo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReposServiceListIndexableFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReposServiceListIndexableFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ReposServiceRequestRepositoryCloneFunc describes the behavior when the
// RequestRepositoryClone method of the parent MockReposService instance is
// invoked.
type ReposServiceRequestRepositoryCloneFunc struct {
	defaultHook func(context.Context, api.RepoID) error
	hooks       []func(context.Context, api.RepoID) error
	history     []ReposServiceRequestRepositoryCloneFuncCall
	mutex       sync.Mutex
}

// RequestRepositoryClone delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockReposService) RequestRepositoryClone(v0 context.Context, v1 api.RepoID) error {
	r0 := m.RequestRepositoryCloneFunc.nextHook()(v0, v1)
	m.RequestRepositoryCloneFunc.appendCall(ReposServiceRequestRepositoryCloneFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// RequestRepositoryClone method of the parent MockReposService instance is
// invoked and the hook queue is empty.
func (f *ReposServiceRequestRepositoryCloneFunc) SetDefaultHook(hook func(context.Context, api.RepoID) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RequestRepositoryClone method of the parent MockReposService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ReposServiceRequestRepositoryCloneFunc) PushHook(hook func(context.Context, api.RepoID) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ReposServiceRequestRepositoryCloneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, api.RepoID) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ReposServiceRequestRepositoryCloneFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, api.RepoID) error {
		return r0
	})
}

func (f *ReposServiceRequestRepositoryCloneFunc) nextHook() func(context.Context, api.RepoID) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReposServiceRequestRepositoryCloneFunc) appendCall(r0 ReposServiceRequestRepositoryCloneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ReposServiceRequestRepositoryCloneFuncCall
// objects describing the invocations of this function.
func (f *ReposServiceRequestRepositoryCloneFunc) History() []ReposServiceRequestRepositoryCloneFuncCall {
	f.mutex.Lock()
	history := make([]ReposServiceRequestRepositoryCloneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReposServiceRequestRepositoryCloneFuncCall is an object that describes an
// invocation of method RequestRepositoryClone on an instance of
// MockReposService.
type ReposServiceRequestRepositoryCloneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReposServiceRequestRepositoryCloneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReposServiceRequestRepositoryCloneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ReposServiceResolveRevFunc describes the behavior when the ResolveRev
// method of the parent MockReposService instance is invoked.
type ReposServiceResolveRevFunc struct {
	defaultHook func(context.Context, *types.Repo, string) (api.CommitID, error)
	hooks       []func(context.Context, *types.Repo, string) (api.CommitID, error)
	history     []ReposServiceResolveRevFuncCall
	mutex       sync.Mutex
}

// ResolveRev delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockReposService) ResolveRev(v0 context.Context, v1 *types.Repo, v2 string) (api.CommitID, error) {
	r0, r1 := m.ResolveRevFunc.nextHook()(v0, v1, v2)
	m.ResolveRevFunc.appendCall(ReposServiceResolveRevFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ResolveRev method of
// the parent MockReposService instance is invoked and the hook queue is
// empty.
func (f *ReposServiceResolveRevFunc) SetDefaultHook(hook func(context.Context, *types.Repo, string) (api.CommitID, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ResolveRev method of the parent MockReposService instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ReposServiceResolveRevFunc) PushHook(hook func(context.Context, *types.Repo, string) (api.CommitID, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ReposServiceResolveRevFunc) SetDefaultReturn(r0 api.CommitID, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.Repo, string) (api.CommitID, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ReposServiceResolveRevFunc) PushReturn(r0 api.CommitID, r1 error) {
	f.PushHook(func(context.Context, *types.Repo, string) (api.CommitID, error) {
		return r0, r1
	})
}

func (f *ReposServiceResolveRevFunc) nextHook() func(context.Context, *types.Repo, string) (api.CommitID, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReposServiceResolveRevFunc) appendCall(r0 ReposServiceResolveRevFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ReposServiceResolveRevFuncCall objects
// describing the invocations of this function.
func (f *ReposServiceResolveRevFunc) History() []ReposServiceResolveRevFuncCall {
	f.mutex.Lock()
	history := make([]ReposServiceResolveRevFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReposServiceResolveRevFuncCall is an object that describes an invocation
// of method ResolveRev on an instance of MockReposService.
type ReposServiceResolveRevFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.Repo
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 api.CommitID
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReposServiceResolveRevFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReposServiceResolveRevFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
