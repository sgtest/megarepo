// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package httpapi

import (
	"net/http"
	"sync"

	httpcli "github.com/sourcegraph/sourcegraph/internal/httpcli"
)

// MockDoer is a mock implementation of the Doer interface (from the package
// github.com/sourcegraph/sourcegraph/internal/httpcli) used for unit
// testing.
type MockDoer struct {
	// DoFunc is an instance of a mock function object controlling the
	// behavior of the method Do.
	DoFunc *DoerDoFunc
}

// NewMockDoer creates a new mock of the Doer interface. All methods return
// zero values for all results, unless overwritten.
func NewMockDoer() *MockDoer {
	return &MockDoer{
		DoFunc: &DoerDoFunc{
			defaultHook: func(*http.Request) (r0 *http.Response, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockDoer creates a new mock of the Doer interface. All methods
// panic on invocation, unless overwritten.
func NewStrictMockDoer() *MockDoer {
	return &MockDoer{
		DoFunc: &DoerDoFunc{
			defaultHook: func(*http.Request) (*http.Response, error) {
				panic("unexpected invocation of MockDoer.Do")
			},
		},
	}
}

// NewMockDoerFrom creates a new mock of the MockDoer interface. All methods
// delegate to the given implementation, unless overwritten.
func NewMockDoerFrom(i httpcli.Doer) *MockDoer {
	return &MockDoer{
		DoFunc: &DoerDoFunc{
			defaultHook: i.Do,
		},
	}
}

// DoerDoFunc describes the behavior when the Do method of the parent
// MockDoer instance is invoked.
type DoerDoFunc struct {
	defaultHook func(*http.Request) (*http.Response, error)
	hooks       []func(*http.Request) (*http.Response, error)
	history     []DoerDoFuncCall
	mutex       sync.Mutex
}

// Do delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDoer) Do(v0 *http.Request) (*http.Response, error) {
	r0, r1 := m.DoFunc.nextHook()(v0)
	m.DoFunc.appendCall(DoerDoFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Do method of the
// parent MockDoer instance is invoked and the hook queue is empty.
func (f *DoerDoFunc) SetDefaultHook(hook func(*http.Request) (*http.Response, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Do method of the parent MockDoer instance invokes the hook at the front
// of the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *DoerDoFunc) PushHook(hook func(*http.Request) (*http.Response, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DoerDoFunc) SetDefaultReturn(r0 *http.Response, r1 error) {
	f.SetDefaultHook(func(*http.Request) (*http.Response, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DoerDoFunc) PushReturn(r0 *http.Response, r1 error) {
	f.PushHook(func(*http.Request) (*http.Response, error) {
		return r0, r1
	})
}

func (f *DoerDoFunc) nextHook() func(*http.Request) (*http.Response, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DoerDoFunc) appendCall(r0 DoerDoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DoerDoFuncCall objects describing the
// invocations of this function.
func (f *DoerDoFunc) History() []DoerDoFuncCall {
	f.mutex.Lock()
	history := make([]DoerDoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DoerDoFuncCall is an object that describes an invocation of method Do on
// an instance of MockDoer.
type DoerDoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *http.Request
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *http.Response
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DoerDoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DoerDoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
