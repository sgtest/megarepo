// Code generated by go-mockgen 1.1.5; DO NOT EDIT.

package userpasswd

import "sync"

// MockLockoutStore is a mock implementation of the LockoutStore interface
// (from the package
// github.com/sourcegraph/sourcegraph/cmd/frontend/internal/auth/userpasswd)
// used for unit testing.
type MockLockoutStore struct {
	// IncreaseFailedAttemptFunc is an instance of a mock function object
	// controlling the behavior of the method IncreaseFailedAttempt.
	IncreaseFailedAttemptFunc *LockoutStoreIncreaseFailedAttemptFunc
	// IsLockedOutFunc is an instance of a mock function object controlling
	// the behavior of the method IsLockedOut.
	IsLockedOutFunc *LockoutStoreIsLockedOutFunc
	// ResetFunc is an instance of a mock function object controlling the
	// behavior of the method Reset.
	ResetFunc *LockoutStoreResetFunc
}

// NewMockLockoutStore creates a new mock of the LockoutStore interface. All
// methods return zero values for all results, unless overwritten.
func NewMockLockoutStore() *MockLockoutStore {
	return &MockLockoutStore{
		IncreaseFailedAttemptFunc: &LockoutStoreIncreaseFailedAttemptFunc{
			defaultHook: func(int32) {
				return
			},
		},
		IsLockedOutFunc: &LockoutStoreIsLockedOutFunc{
			defaultHook: func(int32) (string, bool) {
				return "", false
			},
		},
		ResetFunc: &LockoutStoreResetFunc{
			defaultHook: func(int32) {
				return
			},
		},
	}
}

// NewStrictMockLockoutStore creates a new mock of the LockoutStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockLockoutStore() *MockLockoutStore {
	return &MockLockoutStore{
		IncreaseFailedAttemptFunc: &LockoutStoreIncreaseFailedAttemptFunc{
			defaultHook: func(int32) {
				panic("unexpected invocation of MockLockoutStore.IncreaseFailedAttempt")
			},
		},
		IsLockedOutFunc: &LockoutStoreIsLockedOutFunc{
			defaultHook: func(int32) (string, bool) {
				panic("unexpected invocation of MockLockoutStore.IsLockedOut")
			},
		},
		ResetFunc: &LockoutStoreResetFunc{
			defaultHook: func(int32) {
				panic("unexpected invocation of MockLockoutStore.Reset")
			},
		},
	}
}

// NewMockLockoutStoreFrom creates a new mock of the MockLockoutStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockLockoutStoreFrom(i LockoutStore) *MockLockoutStore {
	return &MockLockoutStore{
		IncreaseFailedAttemptFunc: &LockoutStoreIncreaseFailedAttemptFunc{
			defaultHook: i.IncreaseFailedAttempt,
		},
		IsLockedOutFunc: &LockoutStoreIsLockedOutFunc{
			defaultHook: i.IsLockedOut,
		},
		ResetFunc: &LockoutStoreResetFunc{
			defaultHook: i.Reset,
		},
	}
}

// LockoutStoreIncreaseFailedAttemptFunc describes the behavior when the
// IncreaseFailedAttempt method of the parent MockLockoutStore instance is
// invoked.
type LockoutStoreIncreaseFailedAttemptFunc struct {
	defaultHook func(int32)
	hooks       []func(int32)
	history     []LockoutStoreIncreaseFailedAttemptFuncCall
	mutex       sync.Mutex
}

// IncreaseFailedAttempt delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockLockoutStore) IncreaseFailedAttempt(v0 int32) {
	m.IncreaseFailedAttemptFunc.nextHook()(v0)
	m.IncreaseFailedAttemptFunc.appendCall(LockoutStoreIncreaseFailedAttemptFuncCall{v0})
	return
}

// SetDefaultHook sets function that is called when the
// IncreaseFailedAttempt method of the parent MockLockoutStore instance is
// invoked and the hook queue is empty.
func (f *LockoutStoreIncreaseFailedAttemptFunc) SetDefaultHook(hook func(int32)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IncreaseFailedAttempt method of the parent MockLockoutStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *LockoutStoreIncreaseFailedAttemptFunc) PushHook(hook func(int32)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LockoutStoreIncreaseFailedAttemptFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(int32) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LockoutStoreIncreaseFailedAttemptFunc) PushReturn() {
	f.PushHook(func(int32) {
		return
	})
}

func (f *LockoutStoreIncreaseFailedAttemptFunc) nextHook() func(int32) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LockoutStoreIncreaseFailedAttemptFunc) appendCall(r0 LockoutStoreIncreaseFailedAttemptFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LockoutStoreIncreaseFailedAttemptFuncCall
// objects describing the invocations of this function.
func (f *LockoutStoreIncreaseFailedAttemptFunc) History() []LockoutStoreIncreaseFailedAttemptFuncCall {
	f.mutex.Lock()
	history := make([]LockoutStoreIncreaseFailedAttemptFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LockoutStoreIncreaseFailedAttemptFuncCall is an object that describes an
// invocation of method IncreaseFailedAttempt on an instance of
// MockLockoutStore.
type LockoutStoreIncreaseFailedAttemptFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 int32
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LockoutStoreIncreaseFailedAttemptFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LockoutStoreIncreaseFailedAttemptFuncCall) Results() []interface{} {
	return []interface{}{}
}

// LockoutStoreIsLockedOutFunc describes the behavior when the IsLockedOut
// method of the parent MockLockoutStore instance is invoked.
type LockoutStoreIsLockedOutFunc struct {
	defaultHook func(int32) (string, bool)
	hooks       []func(int32) (string, bool)
	history     []LockoutStoreIsLockedOutFuncCall
	mutex       sync.Mutex
}

// IsLockedOut delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockLockoutStore) IsLockedOut(v0 int32) (string, bool) {
	r0, r1 := m.IsLockedOutFunc.nextHook()(v0)
	m.IsLockedOutFunc.appendCall(LockoutStoreIsLockedOutFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IsLockedOut method
// of the parent MockLockoutStore instance is invoked and the hook queue is
// empty.
func (f *LockoutStoreIsLockedOutFunc) SetDefaultHook(hook func(int32) (string, bool)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsLockedOut method of the parent MockLockoutStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *LockoutStoreIsLockedOutFunc) PushHook(hook func(int32) (string, bool)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LockoutStoreIsLockedOutFunc) SetDefaultReturn(r0 string, r1 bool) {
	f.SetDefaultHook(func(int32) (string, bool) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LockoutStoreIsLockedOutFunc) PushReturn(r0 string, r1 bool) {
	f.PushHook(func(int32) (string, bool) {
		return r0, r1
	})
}

func (f *LockoutStoreIsLockedOutFunc) nextHook() func(int32) (string, bool) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LockoutStoreIsLockedOutFunc) appendCall(r0 LockoutStoreIsLockedOutFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LockoutStoreIsLockedOutFuncCall objects
// describing the invocations of this function.
func (f *LockoutStoreIsLockedOutFunc) History() []LockoutStoreIsLockedOutFuncCall {
	f.mutex.Lock()
	history := make([]LockoutStoreIsLockedOutFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LockoutStoreIsLockedOutFuncCall is an object that describes an invocation
// of method IsLockedOut on an instance of MockLockoutStore.
type LockoutStoreIsLockedOutFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LockoutStoreIsLockedOutFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LockoutStoreIsLockedOutFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// LockoutStoreResetFunc describes the behavior when the Reset method of the
// parent MockLockoutStore instance is invoked.
type LockoutStoreResetFunc struct {
	defaultHook func(int32)
	hooks       []func(int32)
	history     []LockoutStoreResetFuncCall
	mutex       sync.Mutex
}

// Reset delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockLockoutStore) Reset(v0 int32) {
	m.ResetFunc.nextHook()(v0)
	m.ResetFunc.appendCall(LockoutStoreResetFuncCall{v0})
	return
}

// SetDefaultHook sets function that is called when the Reset method of the
// parent MockLockoutStore instance is invoked and the hook queue is empty.
func (f *LockoutStoreResetFunc) SetDefaultHook(hook func(int32)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Reset method of the parent MockLockoutStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *LockoutStoreResetFunc) PushHook(hook func(int32)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LockoutStoreResetFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(int32) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LockoutStoreResetFunc) PushReturn() {
	f.PushHook(func(int32) {
		return
	})
}

func (f *LockoutStoreResetFunc) nextHook() func(int32) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LockoutStoreResetFunc) appendCall(r0 LockoutStoreResetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LockoutStoreResetFuncCall objects
// describing the invocations of this function.
func (f *LockoutStoreResetFunc) History() []LockoutStoreResetFuncCall {
	f.mutex.Lock()
	history := make([]LockoutStoreResetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LockoutStoreResetFuncCall is an object that describes an invocation of
// method Reset on an instance of MockLockoutStore.
type LockoutStoreResetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 int32
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LockoutStoreResetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LockoutStoreResetFuncCall) Results() []interface{} {
	return []interface{}{}
}
