// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: searcher.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SearcherClient is the client API for Searcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearcherClient interface {
	// Search executes a search, streaming back its results
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (Searcher_SearchClient, error)
}

type searcherClient struct {
	cc grpc.ClientConnInterface
}

func NewSearcherClient(cc grpc.ClientConnInterface) SearcherClient {
	return &searcherClient{cc}
}

func (c *searcherClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (Searcher_SearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Searcher_ServiceDesc.Streams[0], "/searcher.Searcher/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &searcherSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Searcher_SearchClient interface {
	Recv() (*SearchResponse, error)
	grpc.ClientStream
}

type searcherSearchClient struct {
	grpc.ClientStream
}

func (x *searcherSearchClient) Recv() (*SearchResponse, error) {
	m := new(SearchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SearcherServer is the server API for Searcher service.
// All implementations must embed UnimplementedSearcherServer
// for forward compatibility
type SearcherServer interface {
	// Search executes a search, streaming back its results
	Search(*SearchRequest, Searcher_SearchServer) error
	mustEmbedUnimplementedSearcherServer()
}

// UnimplementedSearcherServer must be embedded to have forward compatible implementations.
type UnimplementedSearcherServer struct {
}

func (UnimplementedSearcherServer) Search(*SearchRequest, Searcher_SearchServer) error {
	return status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedSearcherServer) mustEmbedUnimplementedSearcherServer() {}

// UnsafeSearcherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearcherServer will
// result in compilation errors.
type UnsafeSearcherServer interface {
	mustEmbedUnimplementedSearcherServer()
}

func RegisterSearcherServer(s grpc.ServiceRegistrar, srv SearcherServer) {
	s.RegisterService(&Searcher_ServiceDesc, srv)
}

func _Searcher_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SearcherServer).Search(m, &searcherSearchServer{stream})
}

type Searcher_SearchServer interface {
	Send(*SearchResponse) error
	grpc.ServerStream
}

type searcherSearchServer struct {
	grpc.ServerStream
}

func (x *searcherSearchServer) Send(m *SearchResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Searcher_ServiceDesc is the grpc.ServiceDesc for Searcher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Searcher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "searcher.Searcher",
	HandlerType: (*SearcherServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Search",
			Handler:       _Searcher_Search_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "searcher.proto",
}
