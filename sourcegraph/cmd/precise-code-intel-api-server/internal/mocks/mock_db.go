// Code generated by github.com/efritz/go-mockgen 0.1.0; DO NOT EDIT.

package mocks

import (
	"context"
	db "github.com/sourcegraph/sourcegraph/internal/codeintel/db"
	"sync"
	"time"
)

// MockDB is a mock impelementation of the DB interface (from the package
// github.com/sourcegraph/sourcegraph/internal/codeintel/db) used for unit
// testing.
type MockDB struct {
	// DeleteOldestDumpFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteOldestDump.
	DeleteOldestDumpFunc *DBDeleteOldestDumpFunc
	// DeleteUploadByIDFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteUploadByID.
	DeleteUploadByIDFunc *DBDeleteUploadByIDFunc
	// EnqueueFunc is an instance of a mock function object controlling the
	// behavior of the method Enqueue.
	EnqueueFunc *DBEnqueueFunc
	// FindClosestDumpsFunc is an instance of a mock function object
	// controlling the behavior of the method FindClosestDumps.
	FindClosestDumpsFunc *DBFindClosestDumpsFunc
	// GetDumpByIDFunc is an instance of a mock function object controlling
	// the behavior of the method GetDumpByID.
	GetDumpByIDFunc *DBGetDumpByIDFunc
	// GetPackageFunc is an instance of a mock function object controlling
	// the behavior of the method GetPackage.
	GetPackageFunc *DBGetPackageFunc
	// GetStatesFunc is an instance of a mock function object controlling
	// the behavior of the method GetStates.
	GetStatesFunc *DBGetStatesFunc
	// GetUploadByIDFunc is an instance of a mock function object
	// controlling the behavior of the method GetUploadByID.
	GetUploadByIDFunc *DBGetUploadByIDFunc
	// GetUploadsByRepoFunc is an instance of a mock function object
	// controlling the behavior of the method GetUploadsByRepo.
	GetUploadsByRepoFunc *DBGetUploadsByRepoFunc
	// PackageReferencePagerFunc is an instance of a mock function object
	// controlling the behavior of the method PackageReferencePager.
	PackageReferencePagerFunc *DBPackageReferencePagerFunc
	// ResetStalledFunc is an instance of a mock function object controlling
	// the behavior of the method ResetStalled.
	ResetStalledFunc *DBResetStalledFunc
	// SameRepoPagerFunc is an instance of a mock function object
	// controlling the behavior of the method SameRepoPager.
	SameRepoPagerFunc *DBSameRepoPagerFunc
}

// NewMockDB creates a new mock of the DB interface. All methods return zero
// values for all results, unless overwritten.
func NewMockDB() *MockDB {
	return &MockDB{
		DeleteOldestDumpFunc: &DBDeleteOldestDumpFunc{
			defaultHook: func(context.Context) (int, bool, error) {
				return 0, false, nil
			},
		},
		DeleteUploadByIDFunc: &DBDeleteUploadByIDFunc{
			defaultHook: func(context.Context, int, func(repositoryID int) (string, error)) (bool, error) {
				return false, nil
			},
		},
		EnqueueFunc: &DBEnqueueFunc{
			defaultHook: func(context.Context, string, string, string, int, string) (int, db.TxCloser, error) {
				return 0, nil, nil
			},
		},
		FindClosestDumpsFunc: &DBFindClosestDumpsFunc{
			defaultHook: func(context.Context, int, string, string) ([]db.Dump, error) {
				return nil, nil
			},
		},
		GetDumpByIDFunc: &DBGetDumpByIDFunc{
			defaultHook: func(context.Context, int) (db.Dump, bool, error) {
				return db.Dump{}, false, nil
			},
		},
		GetPackageFunc: &DBGetPackageFunc{
			defaultHook: func(context.Context, string, string, string) (db.Dump, bool, error) {
				return db.Dump{}, false, nil
			},
		},
		GetStatesFunc: &DBGetStatesFunc{
			defaultHook: func(context.Context, []int) (map[int]string, error) {
				return nil, nil
			},
		},
		GetUploadByIDFunc: &DBGetUploadByIDFunc{
			defaultHook: func(context.Context, int) (db.Upload, bool, error) {
				return db.Upload{}, false, nil
			},
		},
		GetUploadsByRepoFunc: &DBGetUploadsByRepoFunc{
			defaultHook: func(context.Context, int, string, string, bool, int, int) ([]db.Upload, int, error) {
				return nil, 0, nil
			},
		},
		PackageReferencePagerFunc: &DBPackageReferencePagerFunc{
			defaultHook: func(context.Context, string, string, string, int, int) (int, db.ReferencePager, error) {
				return 0, nil, nil
			},
		},
		ResetStalledFunc: &DBResetStalledFunc{
			defaultHook: func(context.Context, time.Time) ([]int, error) {
				return nil, nil
			},
		},
		SameRepoPagerFunc: &DBSameRepoPagerFunc{
			defaultHook: func(context.Context, int, string, string, string, string, int) (int, db.ReferencePager, error) {
				return 0, nil, nil
			},
		},
	}
}

// NewMockDBFrom creates a new mock of the MockDB interface. All methods
// delegate to the given implementation, unless overwritten.
func NewMockDBFrom(i db.DB) *MockDB {
	return &MockDB{
		DeleteOldestDumpFunc: &DBDeleteOldestDumpFunc{
			defaultHook: i.DeleteOldestDump,
		},
		DeleteUploadByIDFunc: &DBDeleteUploadByIDFunc{
			defaultHook: i.DeleteUploadByID,
		},
		EnqueueFunc: &DBEnqueueFunc{
			defaultHook: i.Enqueue,
		},
		FindClosestDumpsFunc: &DBFindClosestDumpsFunc{
			defaultHook: i.FindClosestDumps,
		},
		GetDumpByIDFunc: &DBGetDumpByIDFunc{
			defaultHook: i.GetDumpByID,
		},
		GetPackageFunc: &DBGetPackageFunc{
			defaultHook: i.GetPackage,
		},
		GetStatesFunc: &DBGetStatesFunc{
			defaultHook: i.GetStates,
		},
		GetUploadByIDFunc: &DBGetUploadByIDFunc{
			defaultHook: i.GetUploadByID,
		},
		GetUploadsByRepoFunc: &DBGetUploadsByRepoFunc{
			defaultHook: i.GetUploadsByRepo,
		},
		PackageReferencePagerFunc: &DBPackageReferencePagerFunc{
			defaultHook: i.PackageReferencePager,
		},
		ResetStalledFunc: &DBResetStalledFunc{
			defaultHook: i.ResetStalled,
		},
		SameRepoPagerFunc: &DBSameRepoPagerFunc{
			defaultHook: i.SameRepoPager,
		},
	}
}

// DBDeleteOldestDumpFunc describes the behavior when the DeleteOldestDump
// method of the parent MockDB instance is invoked.
type DBDeleteOldestDumpFunc struct {
	defaultHook func(context.Context) (int, bool, error)
	hooks       []func(context.Context) (int, bool, error)
	history     []DBDeleteOldestDumpFuncCall
	mutex       sync.Mutex
}

// DeleteOldestDump delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) DeleteOldestDump(v0 context.Context) (int, bool, error) {
	r0, r1, r2 := m.DeleteOldestDumpFunc.nextHook()(v0)
	m.DeleteOldestDumpFunc.appendCall(DBDeleteOldestDumpFuncCall{v0, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the DeleteOldestDump
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBDeleteOldestDumpFunc) SetDefaultHook(hook func(context.Context) (int, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteOldestDump method of the parent MockDB instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBDeleteOldestDumpFunc) PushHook(hook func(context.Context) (int, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBDeleteOldestDumpFunc) SetDefaultReturn(r0 int, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context) (int, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBDeleteOldestDumpFunc) PushReturn(r0 int, r1 bool, r2 error) {
	f.PushHook(func(context.Context) (int, bool, error) {
		return r0, r1, r2
	})
}

func (f *DBDeleteOldestDumpFunc) nextHook() func(context.Context) (int, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBDeleteOldestDumpFunc) appendCall(r0 DBDeleteOldestDumpFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBDeleteOldestDumpFuncCall objects
// describing the invocations of this function.
func (f *DBDeleteOldestDumpFunc) History() []DBDeleteOldestDumpFuncCall {
	f.mutex.Lock()
	history := make([]DBDeleteOldestDumpFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBDeleteOldestDumpFuncCall is an object that describes an invocation of
// method DeleteOldestDump on an instance of MockDB.
type DBDeleteOldestDumpFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBDeleteOldestDumpFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBDeleteOldestDumpFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// DBDeleteUploadByIDFunc describes the behavior when the DeleteUploadByID
// method of the parent MockDB instance is invoked.
type DBDeleteUploadByIDFunc struct {
	defaultHook func(context.Context, int, func(repositoryID int) (string, error)) (bool, error)
	hooks       []func(context.Context, int, func(repositoryID int) (string, error)) (bool, error)
	history     []DBDeleteUploadByIDFuncCall
	mutex       sync.Mutex
}

// DeleteUploadByID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) DeleteUploadByID(v0 context.Context, v1 int, v2 func(repositoryID int) (string, error)) (bool, error) {
	r0, r1 := m.DeleteUploadByIDFunc.nextHook()(v0, v1, v2)
	m.DeleteUploadByIDFunc.appendCall(DBDeleteUploadByIDFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DeleteUploadByID
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBDeleteUploadByIDFunc) SetDefaultHook(hook func(context.Context, int, func(repositoryID int) (string, error)) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteUploadByID method of the parent MockDB instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBDeleteUploadByIDFunc) PushHook(hook func(context.Context, int, func(repositoryID int) (string, error)) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBDeleteUploadByIDFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int, func(repositoryID int) (string, error)) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBDeleteUploadByIDFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int, func(repositoryID int) (string, error)) (bool, error) {
		return r0, r1
	})
}

func (f *DBDeleteUploadByIDFunc) nextHook() func(context.Context, int, func(repositoryID int) (string, error)) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBDeleteUploadByIDFunc) appendCall(r0 DBDeleteUploadByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBDeleteUploadByIDFuncCall objects
// describing the invocations of this function.
func (f *DBDeleteUploadByIDFunc) History() []DBDeleteUploadByIDFuncCall {
	f.mutex.Lock()
	history := make([]DBDeleteUploadByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBDeleteUploadByIDFuncCall is an object that describes an invocation of
// method DeleteUploadByID on an instance of MockDB.
type DBDeleteUploadByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 func(repositoryID int) (string, error)
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBDeleteUploadByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBDeleteUploadByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DBEnqueueFunc describes the behavior when the Enqueue method of the
// parent MockDB instance is invoked.
type DBEnqueueFunc struct {
	defaultHook func(context.Context, string, string, string, int, string) (int, db.TxCloser, error)
	hooks       []func(context.Context, string, string, string, int, string) (int, db.TxCloser, error)
	history     []DBEnqueueFuncCall
	mutex       sync.Mutex
}

// Enqueue delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) Enqueue(v0 context.Context, v1 string, v2 string, v3 string, v4 int, v5 string) (int, db.TxCloser, error) {
	r0, r1, r2 := m.EnqueueFunc.nextHook()(v0, v1, v2, v3, v4, v5)
	m.EnqueueFunc.appendCall(DBEnqueueFuncCall{v0, v1, v2, v3, v4, v5, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the Enqueue method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBEnqueueFunc) SetDefaultHook(hook func(context.Context, string, string, string, int, string) (int, db.TxCloser, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Enqueue method of the parent MockDB instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBEnqueueFunc) PushHook(hook func(context.Context, string, string, string, int, string) (int, db.TxCloser, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBEnqueueFunc) SetDefaultReturn(r0 int, r1 db.TxCloser, r2 error) {
	f.SetDefaultHook(func(context.Context, string, string, string, int, string) (int, db.TxCloser, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBEnqueueFunc) PushReturn(r0 int, r1 db.TxCloser, r2 error) {
	f.PushHook(func(context.Context, string, string, string, int, string) (int, db.TxCloser, error) {
		return r0, r1, r2
	})
}

func (f *DBEnqueueFunc) nextHook() func(context.Context, string, string, string, int, string) (int, db.TxCloser, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBEnqueueFunc) appendCall(r0 DBEnqueueFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBEnqueueFuncCall objects describing the
// invocations of this function.
func (f *DBEnqueueFunc) History() []DBEnqueueFuncCall {
	f.mutex.Lock()
	history := make([]DBEnqueueFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBEnqueueFuncCall is an object that describes an invocation of method
// Enqueue on an instance of MockDB.
type DBEnqueueFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 db.TxCloser
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBEnqueueFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBEnqueueFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// DBFindClosestDumpsFunc describes the behavior when the FindClosestDumps
// method of the parent MockDB instance is invoked.
type DBFindClosestDumpsFunc struct {
	defaultHook func(context.Context, int, string, string) ([]db.Dump, error)
	hooks       []func(context.Context, int, string, string) ([]db.Dump, error)
	history     []DBFindClosestDumpsFuncCall
	mutex       sync.Mutex
}

// FindClosestDumps delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) FindClosestDumps(v0 context.Context, v1 int, v2 string, v3 string) ([]db.Dump, error) {
	r0, r1 := m.FindClosestDumpsFunc.nextHook()(v0, v1, v2, v3)
	m.FindClosestDumpsFunc.appendCall(DBFindClosestDumpsFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FindClosestDumps
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBFindClosestDumpsFunc) SetDefaultHook(hook func(context.Context, int, string, string) ([]db.Dump, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FindClosestDumps method of the parent MockDB instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBFindClosestDumpsFunc) PushHook(hook func(context.Context, int, string, string) ([]db.Dump, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBFindClosestDumpsFunc) SetDefaultReturn(r0 []db.Dump, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string, string) ([]db.Dump, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBFindClosestDumpsFunc) PushReturn(r0 []db.Dump, r1 error) {
	f.PushHook(func(context.Context, int, string, string) ([]db.Dump, error) {
		return r0, r1
	})
}

func (f *DBFindClosestDumpsFunc) nextHook() func(context.Context, int, string, string) ([]db.Dump, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBFindClosestDumpsFunc) appendCall(r0 DBFindClosestDumpsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBFindClosestDumpsFuncCall objects
// describing the invocations of this function.
func (f *DBFindClosestDumpsFunc) History() []DBFindClosestDumpsFuncCall {
	f.mutex.Lock()
	history := make([]DBFindClosestDumpsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBFindClosestDumpsFuncCall is an object that describes an invocation of
// method FindClosestDumps on an instance of MockDB.
type DBFindClosestDumpsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []db.Dump
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBFindClosestDumpsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBFindClosestDumpsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DBGetDumpByIDFunc describes the behavior when the GetDumpByID method of
// the parent MockDB instance is invoked.
type DBGetDumpByIDFunc struct {
	defaultHook func(context.Context, int) (db.Dump, bool, error)
	hooks       []func(context.Context, int) (db.Dump, bool, error)
	history     []DBGetDumpByIDFuncCall
	mutex       sync.Mutex
}

// GetDumpByID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) GetDumpByID(v0 context.Context, v1 int) (db.Dump, bool, error) {
	r0, r1, r2 := m.GetDumpByIDFunc.nextHook()(v0, v1)
	m.GetDumpByIDFunc.appendCall(DBGetDumpByIDFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetDumpByID method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBGetDumpByIDFunc) SetDefaultHook(hook func(context.Context, int) (db.Dump, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDumpByID method of the parent MockDB instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBGetDumpByIDFunc) PushHook(hook func(context.Context, int) (db.Dump, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBGetDumpByIDFunc) SetDefaultReturn(r0 db.Dump, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, int) (db.Dump, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBGetDumpByIDFunc) PushReturn(r0 db.Dump, r1 bool, r2 error) {
	f.PushHook(func(context.Context, int) (db.Dump, bool, error) {
		return r0, r1, r2
	})
}

func (f *DBGetDumpByIDFunc) nextHook() func(context.Context, int) (db.Dump, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBGetDumpByIDFunc) appendCall(r0 DBGetDumpByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBGetDumpByIDFuncCall objects describing
// the invocations of this function.
func (f *DBGetDumpByIDFunc) History() []DBGetDumpByIDFuncCall {
	f.mutex.Lock()
	history := make([]DBGetDumpByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBGetDumpByIDFuncCall is an object that describes an invocation of method
// GetDumpByID on an instance of MockDB.
type DBGetDumpByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 db.Dump
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBGetDumpByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBGetDumpByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// DBGetPackageFunc describes the behavior when the GetPackage method of the
// parent MockDB instance is invoked.
type DBGetPackageFunc struct {
	defaultHook func(context.Context, string, string, string) (db.Dump, bool, error)
	hooks       []func(context.Context, string, string, string) (db.Dump, bool, error)
	history     []DBGetPackageFuncCall
	mutex       sync.Mutex
}

// GetPackage delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) GetPackage(v0 context.Context, v1 string, v2 string, v3 string) (db.Dump, bool, error) {
	r0, r1, r2 := m.GetPackageFunc.nextHook()(v0, v1, v2, v3)
	m.GetPackageFunc.appendCall(DBGetPackageFuncCall{v0, v1, v2, v3, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetPackage method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBGetPackageFunc) SetDefaultHook(hook func(context.Context, string, string, string) (db.Dump, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPackage method of the parent MockDB instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBGetPackageFunc) PushHook(hook func(context.Context, string, string, string) (db.Dump, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBGetPackageFunc) SetDefaultReturn(r0 db.Dump, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, string, string, string) (db.Dump, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBGetPackageFunc) PushReturn(r0 db.Dump, r1 bool, r2 error) {
	f.PushHook(func(context.Context, string, string, string) (db.Dump, bool, error) {
		return r0, r1, r2
	})
}

func (f *DBGetPackageFunc) nextHook() func(context.Context, string, string, string) (db.Dump, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBGetPackageFunc) appendCall(r0 DBGetPackageFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBGetPackageFuncCall objects describing the
// invocations of this function.
func (f *DBGetPackageFunc) History() []DBGetPackageFuncCall {
	f.mutex.Lock()
	history := make([]DBGetPackageFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBGetPackageFuncCall is an object that describes an invocation of method
// GetPackage on an instance of MockDB.
type DBGetPackageFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 db.Dump
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBGetPackageFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBGetPackageFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// DBGetStatesFunc describes the behavior when the GetStates method of the
// parent MockDB instance is invoked.
type DBGetStatesFunc struct {
	defaultHook func(context.Context, []int) (map[int]string, error)
	hooks       []func(context.Context, []int) (map[int]string, error)
	history     []DBGetStatesFuncCall
	mutex       sync.Mutex
}

// GetStates delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) GetStates(v0 context.Context, v1 []int) (map[int]string, error) {
	r0, r1 := m.GetStatesFunc.nextHook()(v0, v1)
	m.GetStatesFunc.appendCall(DBGetStatesFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetStates method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBGetStatesFunc) SetDefaultHook(hook func(context.Context, []int) (map[int]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetStates method of the parent MockDB instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBGetStatesFunc) PushHook(hook func(context.Context, []int) (map[int]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBGetStatesFunc) SetDefaultReturn(r0 map[int]string, r1 error) {
	f.SetDefaultHook(func(context.Context, []int) (map[int]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBGetStatesFunc) PushReturn(r0 map[int]string, r1 error) {
	f.PushHook(func(context.Context, []int) (map[int]string, error) {
		return r0, r1
	})
}

func (f *DBGetStatesFunc) nextHook() func(context.Context, []int) (map[int]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBGetStatesFunc) appendCall(r0 DBGetStatesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBGetStatesFuncCall objects describing the
// invocations of this function.
func (f *DBGetStatesFunc) History() []DBGetStatesFuncCall {
	f.mutex.Lock()
	history := make([]DBGetStatesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBGetStatesFuncCall is an object that describes an invocation of method
// GetStates on an instance of MockDB.
type DBGetStatesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[int]string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBGetStatesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBGetStatesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DBGetUploadByIDFunc describes the behavior when the GetUploadByID method
// of the parent MockDB instance is invoked.
type DBGetUploadByIDFunc struct {
	defaultHook func(context.Context, int) (db.Upload, bool, error)
	hooks       []func(context.Context, int) (db.Upload, bool, error)
	history     []DBGetUploadByIDFuncCall
	mutex       sync.Mutex
}

// GetUploadByID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) GetUploadByID(v0 context.Context, v1 int) (db.Upload, bool, error) {
	r0, r1, r2 := m.GetUploadByIDFunc.nextHook()(v0, v1)
	m.GetUploadByIDFunc.appendCall(DBGetUploadByIDFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetUploadByID method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBGetUploadByIDFunc) SetDefaultHook(hook func(context.Context, int) (db.Upload, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUploadByID method of the parent MockDB instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBGetUploadByIDFunc) PushHook(hook func(context.Context, int) (db.Upload, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBGetUploadByIDFunc) SetDefaultReturn(r0 db.Upload, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, int) (db.Upload, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBGetUploadByIDFunc) PushReturn(r0 db.Upload, r1 bool, r2 error) {
	f.PushHook(func(context.Context, int) (db.Upload, bool, error) {
		return r0, r1, r2
	})
}

func (f *DBGetUploadByIDFunc) nextHook() func(context.Context, int) (db.Upload, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBGetUploadByIDFunc) appendCall(r0 DBGetUploadByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBGetUploadByIDFuncCall objects describing
// the invocations of this function.
func (f *DBGetUploadByIDFunc) History() []DBGetUploadByIDFuncCall {
	f.mutex.Lock()
	history := make([]DBGetUploadByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBGetUploadByIDFuncCall is an object that describes an invocation of
// method GetUploadByID on an instance of MockDB.
type DBGetUploadByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 db.Upload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBGetUploadByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBGetUploadByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// DBGetUploadsByRepoFunc describes the behavior when the GetUploadsByRepo
// method of the parent MockDB instance is invoked.
type DBGetUploadsByRepoFunc struct {
	defaultHook func(context.Context, int, string, string, bool, int, int) ([]db.Upload, int, error)
	hooks       []func(context.Context, int, string, string, bool, int, int) ([]db.Upload, int, error)
	history     []DBGetUploadsByRepoFuncCall
	mutex       sync.Mutex
}

// GetUploadsByRepo delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) GetUploadsByRepo(v0 context.Context, v1 int, v2 string, v3 string, v4 bool, v5 int, v6 int) ([]db.Upload, int, error) {
	r0, r1, r2 := m.GetUploadsByRepoFunc.nextHook()(v0, v1, v2, v3, v4, v5, v6)
	m.GetUploadsByRepoFunc.appendCall(DBGetUploadsByRepoFuncCall{v0, v1, v2, v3, v4, v5, v6, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetUploadsByRepo
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBGetUploadsByRepoFunc) SetDefaultHook(hook func(context.Context, int, string, string, bool, int, int) ([]db.Upload, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUploadsByRepo method of the parent MockDB instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBGetUploadsByRepoFunc) PushHook(hook func(context.Context, int, string, string, bool, int, int) ([]db.Upload, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBGetUploadsByRepoFunc) SetDefaultReturn(r0 []db.Upload, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, int, string, string, bool, int, int) ([]db.Upload, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBGetUploadsByRepoFunc) PushReturn(r0 []db.Upload, r1 int, r2 error) {
	f.PushHook(func(context.Context, int, string, string, bool, int, int) ([]db.Upload, int, error) {
		return r0, r1, r2
	})
}

func (f *DBGetUploadsByRepoFunc) nextHook() func(context.Context, int, string, string, bool, int, int) ([]db.Upload, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBGetUploadsByRepoFunc) appendCall(r0 DBGetUploadsByRepoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBGetUploadsByRepoFuncCall objects
// describing the invocations of this function.
func (f *DBGetUploadsByRepoFunc) History() []DBGetUploadsByRepoFuncCall {
	f.mutex.Lock()
	history := make([]DBGetUploadsByRepoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBGetUploadsByRepoFuncCall is an object that describes an invocation of
// method GetUploadsByRepo on an instance of MockDB.
type DBGetUploadsByRepoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 bool
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 int
	// Arg6 is the value of the 7th argument passed to this method
	// invocation.
	Arg6 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []db.Upload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBGetUploadsByRepoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5, c.Arg6}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBGetUploadsByRepoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// DBPackageReferencePagerFunc describes the behavior when the
// PackageReferencePager method of the parent MockDB instance is invoked.
type DBPackageReferencePagerFunc struct {
	defaultHook func(context.Context, string, string, string, int, int) (int, db.ReferencePager, error)
	hooks       []func(context.Context, string, string, string, int, int) (int, db.ReferencePager, error)
	history     []DBPackageReferencePagerFuncCall
	mutex       sync.Mutex
}

// PackageReferencePager delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockDB) PackageReferencePager(v0 context.Context, v1 string, v2 string, v3 string, v4 int, v5 int) (int, db.ReferencePager, error) {
	r0, r1, r2 := m.PackageReferencePagerFunc.nextHook()(v0, v1, v2, v3, v4, v5)
	m.PackageReferencePagerFunc.appendCall(DBPackageReferencePagerFuncCall{v0, v1, v2, v3, v4, v5, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// PackageReferencePager method of the parent MockDB instance is invoked and
// the hook queue is empty.
func (f *DBPackageReferencePagerFunc) SetDefaultHook(hook func(context.Context, string, string, string, int, int) (int, db.ReferencePager, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PackageReferencePager method of the parent MockDB instance inovkes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *DBPackageReferencePagerFunc) PushHook(hook func(context.Context, string, string, string, int, int) (int, db.ReferencePager, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBPackageReferencePagerFunc) SetDefaultReturn(r0 int, r1 db.ReferencePager, r2 error) {
	f.SetDefaultHook(func(context.Context, string, string, string, int, int) (int, db.ReferencePager, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBPackageReferencePagerFunc) PushReturn(r0 int, r1 db.ReferencePager, r2 error) {
	f.PushHook(func(context.Context, string, string, string, int, int) (int, db.ReferencePager, error) {
		return r0, r1, r2
	})
}

func (f *DBPackageReferencePagerFunc) nextHook() func(context.Context, string, string, string, int, int) (int, db.ReferencePager, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBPackageReferencePagerFunc) appendCall(r0 DBPackageReferencePagerFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBPackageReferencePagerFuncCall objects
// describing the invocations of this function.
func (f *DBPackageReferencePagerFunc) History() []DBPackageReferencePagerFuncCall {
	f.mutex.Lock()
	history := make([]DBPackageReferencePagerFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBPackageReferencePagerFuncCall is an object that describes an invocation
// of method PackageReferencePager on an instance of MockDB.
type DBPackageReferencePagerFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 db.ReferencePager
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBPackageReferencePagerFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBPackageReferencePagerFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// DBResetStalledFunc describes the behavior when the ResetStalled method of
// the parent MockDB instance is invoked.
type DBResetStalledFunc struct {
	defaultHook func(context.Context, time.Time) ([]int, error)
	hooks       []func(context.Context, time.Time) ([]int, error)
	history     []DBResetStalledFuncCall
	mutex       sync.Mutex
}

// ResetStalled delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) ResetStalled(v0 context.Context, v1 time.Time) ([]int, error) {
	r0, r1 := m.ResetStalledFunc.nextHook()(v0, v1)
	m.ResetStalledFunc.appendCall(DBResetStalledFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ResetStalled method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBResetStalledFunc) SetDefaultHook(hook func(context.Context, time.Time) ([]int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ResetStalled method of the parent MockDB instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBResetStalledFunc) PushHook(hook func(context.Context, time.Time) ([]int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBResetStalledFunc) SetDefaultReturn(r0 []int, r1 error) {
	f.SetDefaultHook(func(context.Context, time.Time) ([]int, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBResetStalledFunc) PushReturn(r0 []int, r1 error) {
	f.PushHook(func(context.Context, time.Time) ([]int, error) {
		return r0, r1
	})
}

func (f *DBResetStalledFunc) nextHook() func(context.Context, time.Time) ([]int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBResetStalledFunc) appendCall(r0 DBResetStalledFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBResetStalledFuncCall objects describing
// the invocations of this function.
func (f *DBResetStalledFunc) History() []DBResetStalledFuncCall {
	f.mutex.Lock()
	history := make([]DBResetStalledFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBResetStalledFuncCall is an object that describes an invocation of
// method ResetStalled on an instance of MockDB.
type DBResetStalledFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBResetStalledFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBResetStalledFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DBSameRepoPagerFunc describes the behavior when the SameRepoPager method
// of the parent MockDB instance is invoked.
type DBSameRepoPagerFunc struct {
	defaultHook func(context.Context, int, string, string, string, string, int) (int, db.ReferencePager, error)
	hooks       []func(context.Context, int, string, string, string, string, int) (int, db.ReferencePager, error)
	history     []DBSameRepoPagerFuncCall
	mutex       sync.Mutex
}

// SameRepoPager delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) SameRepoPager(v0 context.Context, v1 int, v2 string, v3 string, v4 string, v5 string, v6 int) (int, db.ReferencePager, error) {
	r0, r1, r2 := m.SameRepoPagerFunc.nextHook()(v0, v1, v2, v3, v4, v5, v6)
	m.SameRepoPagerFunc.appendCall(DBSameRepoPagerFuncCall{v0, v1, v2, v3, v4, v5, v6, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the SameRepoPager method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBSameRepoPagerFunc) SetDefaultHook(hook func(context.Context, int, string, string, string, string, int) (int, db.ReferencePager, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SameRepoPager method of the parent MockDB instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBSameRepoPagerFunc) PushHook(hook func(context.Context, int, string, string, string, string, int) (int, db.ReferencePager, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBSameRepoPagerFunc) SetDefaultReturn(r0 int, r1 db.ReferencePager, r2 error) {
	f.SetDefaultHook(func(context.Context, int, string, string, string, string, int) (int, db.ReferencePager, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBSameRepoPagerFunc) PushReturn(r0 int, r1 db.ReferencePager, r2 error) {
	f.PushHook(func(context.Context, int, string, string, string, string, int) (int, db.ReferencePager, error) {
		return r0, r1, r2
	})
}

func (f *DBSameRepoPagerFunc) nextHook() func(context.Context, int, string, string, string, string, int) (int, db.ReferencePager, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBSameRepoPagerFunc) appendCall(r0 DBSameRepoPagerFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBSameRepoPagerFuncCall objects describing
// the invocations of this function.
func (f *DBSameRepoPagerFunc) History() []DBSameRepoPagerFuncCall {
	f.mutex.Lock()
	history := make([]DBSameRepoPagerFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBSameRepoPagerFuncCall is an object that describes an invocation of
// method SameRepoPager on an instance of MockDB.
type DBSameRepoPagerFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 string
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 string
	// Arg6 is the value of the 7th argument passed to this method
	// invocation.
	Arg6 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 db.ReferencePager
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBSameRepoPagerFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5, c.Arg6}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBSameRepoPagerFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}
