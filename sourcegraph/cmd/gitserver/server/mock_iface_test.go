// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package server

import (
	"context"
	"sync"

	dbstore "github.com/sourcegraph/sourcegraph/internal/codeintel/stores/dbstore"
)

// MockDBStore is a mock implementation of the DBStore interface (from the
// package github.com/sourcegraph/sourcegraph/cmd/gitserver/server) used for
// unit testing.
type MockDBStore struct {
	// GetNPMDependencyReposFunc is an instance of a mock function object
	// controlling the behavior of the method GetNPMDependencyRepos.
	GetNPMDependencyReposFunc *DBStoreGetNPMDependencyReposFunc
}

// NewMockDBStore creates a new mock of the DBStore interface. All methods
// return zero values for all results, unless overwritten.
func NewMockDBStore() *MockDBStore {
	return &MockDBStore{
		GetNPMDependencyReposFunc: &DBStoreGetNPMDependencyReposFunc{
			defaultHook: func(context.Context, dbstore.GetNPMDependencyReposOpts) ([]dbstore.NPMDependencyRepo, error) {
				return nil, nil
			},
		},
	}
}

// NewStrictMockDBStore creates a new mock of the DBStore interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockDBStore() *MockDBStore {
	return &MockDBStore{
		GetNPMDependencyReposFunc: &DBStoreGetNPMDependencyReposFunc{
			defaultHook: func(context.Context, dbstore.GetNPMDependencyReposOpts) ([]dbstore.NPMDependencyRepo, error) {
				panic("unexpected invocation of MockDBStore.GetNPMDependencyRepos")
			},
		},
	}
}

// NewMockDBStoreFrom creates a new mock of the MockDBStore interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockDBStoreFrom(i DBStore) *MockDBStore {
	return &MockDBStore{
		GetNPMDependencyReposFunc: &DBStoreGetNPMDependencyReposFunc{
			defaultHook: i.GetNPMDependencyRepos,
		},
	}
}

// DBStoreGetNPMDependencyReposFunc describes the behavior when the
// GetNPMDependencyRepos method of the parent MockDBStore instance is
// invoked.
type DBStoreGetNPMDependencyReposFunc struct {
	defaultHook func(context.Context, dbstore.GetNPMDependencyReposOpts) ([]dbstore.NPMDependencyRepo, error)
	hooks       []func(context.Context, dbstore.GetNPMDependencyReposOpts) ([]dbstore.NPMDependencyRepo, error)
	history     []DBStoreGetNPMDependencyReposFuncCall
	mutex       sync.Mutex
}

// GetNPMDependencyRepos delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockDBStore) GetNPMDependencyRepos(v0 context.Context, v1 dbstore.GetNPMDependencyReposOpts) ([]dbstore.NPMDependencyRepo, error) {
	r0, r1 := m.GetNPMDependencyReposFunc.nextHook()(v0, v1)
	m.GetNPMDependencyReposFunc.appendCall(DBStoreGetNPMDependencyReposFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetNPMDependencyRepos method of the parent MockDBStore instance is
// invoked and the hook queue is empty.
func (f *DBStoreGetNPMDependencyReposFunc) SetDefaultHook(hook func(context.Context, dbstore.GetNPMDependencyReposOpts) ([]dbstore.NPMDependencyRepo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetNPMDependencyRepos method of the parent MockDBStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *DBStoreGetNPMDependencyReposFunc) PushHook(hook func(context.Context, dbstore.GetNPMDependencyReposOpts) ([]dbstore.NPMDependencyRepo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBStoreGetNPMDependencyReposFunc) SetDefaultReturn(r0 []dbstore.NPMDependencyRepo, r1 error) {
	f.SetDefaultHook(func(context.Context, dbstore.GetNPMDependencyReposOpts) ([]dbstore.NPMDependencyRepo, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBStoreGetNPMDependencyReposFunc) PushReturn(r0 []dbstore.NPMDependencyRepo, r1 error) {
	f.PushHook(func(context.Context, dbstore.GetNPMDependencyReposOpts) ([]dbstore.NPMDependencyRepo, error) {
		return r0, r1
	})
}

func (f *DBStoreGetNPMDependencyReposFunc) nextHook() func(context.Context, dbstore.GetNPMDependencyReposOpts) ([]dbstore.NPMDependencyRepo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBStoreGetNPMDependencyReposFunc) appendCall(r0 DBStoreGetNPMDependencyReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBStoreGetNPMDependencyReposFuncCall
// objects describing the invocations of this function.
func (f *DBStoreGetNPMDependencyReposFunc) History() []DBStoreGetNPMDependencyReposFuncCall {
	f.mutex.Lock()
	history := make([]DBStoreGetNPMDependencyReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBStoreGetNPMDependencyReposFuncCall is an object that describes an
// invocation of method GetNPMDependencyRepos on an instance of MockDBStore.
type DBStoreGetNPMDependencyReposFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 dbstore.GetNPMDependencyReposOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []dbstore.NPMDependencyRepo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBStoreGetNPMDependencyReposFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBStoreGetNPMDependencyReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
