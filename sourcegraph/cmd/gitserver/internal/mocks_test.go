// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package internal

import (
	"context"
	"io"
	"sync"
	"time"

	api "github.com/sourcegraph/sourcegraph/internal/api"
	protocol "github.com/sourcegraph/sourcegraph/internal/gitserver/protocol"
)

// MockRepositoryLock is a mock implementation of the RepositoryLock
// interface (from the package
// github.com/sourcegraph/sourcegraph/cmd/gitserver/internal) used for unit
// testing.
type MockRepositoryLock struct {
	// ReleaseFunc is an instance of a mock function object controlling the
	// behavior of the method Release.
	ReleaseFunc *RepositoryLockReleaseFunc
	// SetStatusFunc is an instance of a mock function object controlling
	// the behavior of the method SetStatus.
	SetStatusFunc *RepositoryLockSetStatusFunc
}

// NewMockRepositoryLock creates a new mock of the RepositoryLock interface.
// All methods return zero values for all results, unless overwritten.
func NewMockRepositoryLock() *MockRepositoryLock {
	return &MockRepositoryLock{
		ReleaseFunc: &RepositoryLockReleaseFunc{
			defaultHook: func() {
				return
			},
		},
		SetStatusFunc: &RepositoryLockSetStatusFunc{
			defaultHook: func(string) {
				return
			},
		},
	}
}

// NewStrictMockRepositoryLock creates a new mock of the RepositoryLock
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockRepositoryLock() *MockRepositoryLock {
	return &MockRepositoryLock{
		ReleaseFunc: &RepositoryLockReleaseFunc{
			defaultHook: func() {
				panic("unexpected invocation of MockRepositoryLock.Release")
			},
		},
		SetStatusFunc: &RepositoryLockSetStatusFunc{
			defaultHook: func(string) {
				panic("unexpected invocation of MockRepositoryLock.SetStatus")
			},
		},
	}
}

// NewMockRepositoryLockFrom creates a new mock of the MockRepositoryLock
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockRepositoryLockFrom(i RepositoryLock) *MockRepositoryLock {
	return &MockRepositoryLock{
		ReleaseFunc: &RepositoryLockReleaseFunc{
			defaultHook: i.Release,
		},
		SetStatusFunc: &RepositoryLockSetStatusFunc{
			defaultHook: i.SetStatus,
		},
	}
}

// RepositoryLockReleaseFunc describes the behavior when the Release method
// of the parent MockRepositoryLock instance is invoked.
type RepositoryLockReleaseFunc struct {
	defaultHook func()
	hooks       []func()
	history     []RepositoryLockReleaseFuncCall
	mutex       sync.Mutex
}

// Release delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepositoryLock) Release() {
	m.ReleaseFunc.nextHook()()
	m.ReleaseFunc.appendCall(RepositoryLockReleaseFuncCall{})
	return
}

// SetDefaultHook sets function that is called when the Release method of
// the parent MockRepositoryLock instance is invoked and the hook queue is
// empty.
func (f *RepositoryLockReleaseFunc) SetDefaultHook(hook func()) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Release method of the parent MockRepositoryLock instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *RepositoryLockReleaseFunc) PushHook(hook func()) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepositoryLockReleaseFunc) SetDefaultReturn() {
	f.SetDefaultHook(func() {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepositoryLockReleaseFunc) PushReturn() {
	f.PushHook(func() {
		return
	})
}

func (f *RepositoryLockReleaseFunc) nextHook() func() {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepositoryLockReleaseFunc) appendCall(r0 RepositoryLockReleaseFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepositoryLockReleaseFuncCall objects
// describing the invocations of this function.
func (f *RepositoryLockReleaseFunc) History() []RepositoryLockReleaseFuncCall {
	f.mutex.Lock()
	history := make([]RepositoryLockReleaseFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepositoryLockReleaseFuncCall is an object that describes an invocation
// of method Release on an instance of MockRepositoryLock.
type RepositoryLockReleaseFuncCall struct{}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepositoryLockReleaseFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepositoryLockReleaseFuncCall) Results() []interface{} {
	return []interface{}{}
}

// RepositoryLockSetStatusFunc describes the behavior when the SetStatus
// method of the parent MockRepositoryLock instance is invoked.
type RepositoryLockSetStatusFunc struct {
	defaultHook func(string)
	hooks       []func(string)
	history     []RepositoryLockSetStatusFuncCall
	mutex       sync.Mutex
}

// SetStatus delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepositoryLock) SetStatus(v0 string) {
	m.SetStatusFunc.nextHook()(v0)
	m.SetStatusFunc.appendCall(RepositoryLockSetStatusFuncCall{v0})
	return
}

// SetDefaultHook sets function that is called when the SetStatus method of
// the parent MockRepositoryLock instance is invoked and the hook queue is
// empty.
func (f *RepositoryLockSetStatusFunc) SetDefaultHook(hook func(string)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetStatus method of the parent MockRepositoryLock instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *RepositoryLockSetStatusFunc) PushHook(hook func(string)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepositoryLockSetStatusFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(string) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepositoryLockSetStatusFunc) PushReturn() {
	f.PushHook(func(string) {
		return
	})
}

func (f *RepositoryLockSetStatusFunc) nextHook() func(string) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepositoryLockSetStatusFunc) appendCall(r0 RepositoryLockSetStatusFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepositoryLockSetStatusFuncCall objects
// describing the invocations of this function.
func (f *RepositoryLockSetStatusFunc) History() []RepositoryLockSetStatusFuncCall {
	f.mutex.Lock()
	history := make([]RepositoryLockSetStatusFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepositoryLockSetStatusFuncCall is an object that describes an invocation
// of method SetStatus on an instance of MockRepositoryLock.
type RepositoryLockSetStatusFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepositoryLockSetStatusFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepositoryLockSetStatusFuncCall) Results() []interface{} {
	return []interface{}{}
}

// MockRepositoryLocker is a mock implementation of the RepositoryLocker
// interface (from the package
// github.com/sourcegraph/sourcegraph/cmd/gitserver/internal) used for unit
// testing.
type MockRepositoryLocker struct {
	// AllStatusesFunc is an instance of a mock function object controlling
	// the behavior of the method AllStatuses.
	AllStatusesFunc *RepositoryLockerAllStatusesFunc
	// StatusFunc is an instance of a mock function object controlling the
	// behavior of the method Status.
	StatusFunc *RepositoryLockerStatusFunc
	// TryAcquireFunc is an instance of a mock function object controlling
	// the behavior of the method TryAcquire.
	TryAcquireFunc *RepositoryLockerTryAcquireFunc
}

// NewMockRepositoryLocker creates a new mock of the RepositoryLocker
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockRepositoryLocker() *MockRepositoryLocker {
	return &MockRepositoryLocker{
		AllStatusesFunc: &RepositoryLockerAllStatusesFunc{
			defaultHook: func() (r0 map[api.RepoName]string) {
				return
			},
		},
		StatusFunc: &RepositoryLockerStatusFunc{
			defaultHook: func(api.RepoName) (r0 string, r1 bool) {
				return
			},
		},
		TryAcquireFunc: &RepositoryLockerTryAcquireFunc{
			defaultHook: func(api.RepoName, string) (r0 RepositoryLock, r1 bool) {
				return
			},
		},
	}
}

// NewStrictMockRepositoryLocker creates a new mock of the RepositoryLocker
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockRepositoryLocker() *MockRepositoryLocker {
	return &MockRepositoryLocker{
		AllStatusesFunc: &RepositoryLockerAllStatusesFunc{
			defaultHook: func() map[api.RepoName]string {
				panic("unexpected invocation of MockRepositoryLocker.AllStatuses")
			},
		},
		StatusFunc: &RepositoryLockerStatusFunc{
			defaultHook: func(api.RepoName) (string, bool) {
				panic("unexpected invocation of MockRepositoryLocker.Status")
			},
		},
		TryAcquireFunc: &RepositoryLockerTryAcquireFunc{
			defaultHook: func(api.RepoName, string) (RepositoryLock, bool) {
				panic("unexpected invocation of MockRepositoryLocker.TryAcquire")
			},
		},
	}
}

// NewMockRepositoryLockerFrom creates a new mock of the
// MockRepositoryLocker interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockRepositoryLockerFrom(i RepositoryLocker) *MockRepositoryLocker {
	return &MockRepositoryLocker{
		AllStatusesFunc: &RepositoryLockerAllStatusesFunc{
			defaultHook: i.AllStatuses,
		},
		StatusFunc: &RepositoryLockerStatusFunc{
			defaultHook: i.Status,
		},
		TryAcquireFunc: &RepositoryLockerTryAcquireFunc{
			defaultHook: i.TryAcquire,
		},
	}
}

// RepositoryLockerAllStatusesFunc describes the behavior when the
// AllStatuses method of the parent MockRepositoryLocker instance is
// invoked.
type RepositoryLockerAllStatusesFunc struct {
	defaultHook func() map[api.RepoName]string
	hooks       []func() map[api.RepoName]string
	history     []RepositoryLockerAllStatusesFuncCall
	mutex       sync.Mutex
}

// AllStatuses delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockRepositoryLocker) AllStatuses() map[api.RepoName]string {
	r0 := m.AllStatusesFunc.nextHook()()
	m.AllStatusesFunc.appendCall(RepositoryLockerAllStatusesFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the AllStatuses method
// of the parent MockRepositoryLocker instance is invoked and the hook queue
// is empty.
func (f *RepositoryLockerAllStatusesFunc) SetDefaultHook(hook func() map[api.RepoName]string) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AllStatuses method of the parent MockRepositoryLocker instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *RepositoryLockerAllStatusesFunc) PushHook(hook func() map[api.RepoName]string) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepositoryLockerAllStatusesFunc) SetDefaultReturn(r0 map[api.RepoName]string) {
	f.SetDefaultHook(func() map[api.RepoName]string {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepositoryLockerAllStatusesFunc) PushReturn(r0 map[api.RepoName]string) {
	f.PushHook(func() map[api.RepoName]string {
		return r0
	})
}

func (f *RepositoryLockerAllStatusesFunc) nextHook() func() map[api.RepoName]string {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepositoryLockerAllStatusesFunc) appendCall(r0 RepositoryLockerAllStatusesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepositoryLockerAllStatusesFuncCall objects
// describing the invocations of this function.
func (f *RepositoryLockerAllStatusesFunc) History() []RepositoryLockerAllStatusesFuncCall {
	f.mutex.Lock()
	history := make([]RepositoryLockerAllStatusesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepositoryLockerAllStatusesFuncCall is an object that describes an
// invocation of method AllStatuses on an instance of MockRepositoryLocker.
type RepositoryLockerAllStatusesFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[api.RepoName]string
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepositoryLockerAllStatusesFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepositoryLockerAllStatusesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RepositoryLockerStatusFunc describes the behavior when the Status method
// of the parent MockRepositoryLocker instance is invoked.
type RepositoryLockerStatusFunc struct {
	defaultHook func(api.RepoName) (string, bool)
	hooks       []func(api.RepoName) (string, bool)
	history     []RepositoryLockerStatusFuncCall
	mutex       sync.Mutex
}

// Status delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepositoryLocker) Status(v0 api.RepoName) (string, bool) {
	r0, r1 := m.StatusFunc.nextHook()(v0)
	m.StatusFunc.appendCall(RepositoryLockerStatusFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Status method of the
// parent MockRepositoryLocker instance is invoked and the hook queue is
// empty.
func (f *RepositoryLockerStatusFunc) SetDefaultHook(hook func(api.RepoName) (string, bool)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Status method of the parent MockRepositoryLocker instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *RepositoryLockerStatusFunc) PushHook(hook func(api.RepoName) (string, bool)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepositoryLockerStatusFunc) SetDefaultReturn(r0 string, r1 bool) {
	f.SetDefaultHook(func(api.RepoName) (string, bool) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepositoryLockerStatusFunc) PushReturn(r0 string, r1 bool) {
	f.PushHook(func(api.RepoName) (string, bool) {
		return r0, r1
	})
}

func (f *RepositoryLockerStatusFunc) nextHook() func(api.RepoName) (string, bool) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepositoryLockerStatusFunc) appendCall(r0 RepositoryLockerStatusFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepositoryLockerStatusFuncCall objects
// describing the invocations of this function.
func (f *RepositoryLockerStatusFunc) History() []RepositoryLockerStatusFuncCall {
	f.mutex.Lock()
	history := make([]RepositoryLockerStatusFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepositoryLockerStatusFuncCall is an object that describes an invocation
// of method Status on an instance of MockRepositoryLocker.
type RepositoryLockerStatusFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepositoryLockerStatusFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepositoryLockerStatusFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepositoryLockerTryAcquireFunc describes the behavior when the TryAcquire
// method of the parent MockRepositoryLocker instance is invoked.
type RepositoryLockerTryAcquireFunc struct {
	defaultHook func(api.RepoName, string) (RepositoryLock, bool)
	hooks       []func(api.RepoName, string) (RepositoryLock, bool)
	history     []RepositoryLockerTryAcquireFuncCall
	mutex       sync.Mutex
}

// TryAcquire delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockRepositoryLocker) TryAcquire(v0 api.RepoName, v1 string) (RepositoryLock, bool) {
	r0, r1 := m.TryAcquireFunc.nextHook()(v0, v1)
	m.TryAcquireFunc.appendCall(RepositoryLockerTryAcquireFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the TryAcquire method of
// the parent MockRepositoryLocker instance is invoked and the hook queue is
// empty.
func (f *RepositoryLockerTryAcquireFunc) SetDefaultHook(hook func(api.RepoName, string) (RepositoryLock, bool)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TryAcquire method of the parent MockRepositoryLocker instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *RepositoryLockerTryAcquireFunc) PushHook(hook func(api.RepoName, string) (RepositoryLock, bool)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepositoryLockerTryAcquireFunc) SetDefaultReturn(r0 RepositoryLock, r1 bool) {
	f.SetDefaultHook(func(api.RepoName, string) (RepositoryLock, bool) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepositoryLockerTryAcquireFunc) PushReturn(r0 RepositoryLock, r1 bool) {
	f.PushHook(func(api.RepoName, string) (RepositoryLock, bool) {
		return r0, r1
	})
}

func (f *RepositoryLockerTryAcquireFunc) nextHook() func(api.RepoName, string) (RepositoryLock, bool) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepositoryLockerTryAcquireFunc) appendCall(r0 RepositoryLockerTryAcquireFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepositoryLockerTryAcquireFuncCall objects
// describing the invocations of this function.
func (f *RepositoryLockerTryAcquireFunc) History() []RepositoryLockerTryAcquireFuncCall {
	f.mutex.Lock()
	history := make([]RepositoryLockerTryAcquireFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepositoryLockerTryAcquireFuncCall is an object that describes an
// invocation of method TryAcquire on an instance of MockRepositoryLocker.
type RepositoryLockerTryAcquireFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 api.RepoName
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 RepositoryLock
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepositoryLockerTryAcquireFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepositoryLockerTryAcquireFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockService is a mock implementation of the service interface (from the
// package github.com/sourcegraph/sourcegraph/cmd/gitserver/internal) used
// for unit testing.
type MockService struct {
	// CreateCommitFromPatchFunc is an instance of a mock function object
	// controlling the behavior of the method CreateCommitFromPatch.
	CreateCommitFromPatchFunc *ServiceCreateCommitFromPatchFunc
	// EnsureRevisionFunc is an instance of a mock function object
	// controlling the behavior of the method EnsureRevision.
	EnsureRevisionFunc *ServiceEnsureRevisionFunc
	// FetchRepositoryFunc is an instance of a mock function object
	// controlling the behavior of the method FetchRepository.
	FetchRepositoryFunc *ServiceFetchRepositoryFunc
	// IsRepoCloneableFunc is an instance of a mock function object
	// controlling the behavior of the method IsRepoCloneable.
	IsRepoCloneableFunc *ServiceIsRepoCloneableFunc
	// LogIfCorruptFunc is an instance of a mock function object controlling
	// the behavior of the method LogIfCorrupt.
	LogIfCorruptFunc *ServiceLogIfCorruptFunc
}

// NewMockService creates a new mock of the service interface. All methods
// return zero values for all results, unless overwritten.
func NewMockService() *MockService {
	return &MockService{
		CreateCommitFromPatchFunc: &ServiceCreateCommitFromPatchFunc{
			defaultHook: func(context.Context, protocol.CreateCommitFromPatchRequest, io.Reader) (r0 protocol.CreateCommitFromPatchResponse) {
				return
			},
		},
		EnsureRevisionFunc: &ServiceEnsureRevisionFunc{
			defaultHook: func(context.Context, api.RepoName, string) (r0 bool) {
				return
			},
		},
		FetchRepositoryFunc: &ServiceFetchRepositoryFunc{
			defaultHook: func(context.Context, api.RepoName) (r0 time.Time, r1 time.Time, r2 error) {
				return
			},
		},
		IsRepoCloneableFunc: &ServiceIsRepoCloneableFunc{
			defaultHook: func(context.Context, api.RepoName) (r0 protocol.IsRepoCloneableResponse, r1 error) {
				return
			},
		},
		LogIfCorruptFunc: &ServiceLogIfCorruptFunc{
			defaultHook: func(context.Context, api.RepoName, error) {
				return
			},
		},
	}
}

// NewStrictMockService creates a new mock of the service interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockService() *MockService {
	return &MockService{
		CreateCommitFromPatchFunc: &ServiceCreateCommitFromPatchFunc{
			defaultHook: func(context.Context, protocol.CreateCommitFromPatchRequest, io.Reader) protocol.CreateCommitFromPatchResponse {
				panic("unexpected invocation of MockService.CreateCommitFromPatch")
			},
		},
		EnsureRevisionFunc: &ServiceEnsureRevisionFunc{
			defaultHook: func(context.Context, api.RepoName, string) bool {
				panic("unexpected invocation of MockService.EnsureRevision")
			},
		},
		FetchRepositoryFunc: &ServiceFetchRepositoryFunc{
			defaultHook: func(context.Context, api.RepoName) (time.Time, time.Time, error) {
				panic("unexpected invocation of MockService.FetchRepository")
			},
		},
		IsRepoCloneableFunc: &ServiceIsRepoCloneableFunc{
			defaultHook: func(context.Context, api.RepoName) (protocol.IsRepoCloneableResponse, error) {
				panic("unexpected invocation of MockService.IsRepoCloneable")
			},
		},
		LogIfCorruptFunc: &ServiceLogIfCorruptFunc{
			defaultHook: func(context.Context, api.RepoName, error) {
				panic("unexpected invocation of MockService.LogIfCorrupt")
			},
		},
	}
}

// surrogateMockService is a copy of the service interface (from the package
// github.com/sourcegraph/sourcegraph/cmd/gitserver/internal). It is
// redefined here as it is unexported in the source package.
type surrogateMockService interface {
	CreateCommitFromPatch(context.Context, protocol.CreateCommitFromPatchRequest, io.Reader) protocol.CreateCommitFromPatchResponse
	EnsureRevision(context.Context, api.RepoName, string) bool
	FetchRepository(context.Context, api.RepoName) (time.Time, time.Time, error)
	IsRepoCloneable(context.Context, api.RepoName) (protocol.IsRepoCloneableResponse, error)
	LogIfCorrupt(context.Context, api.RepoName, error)
}

// NewMockServiceFrom creates a new mock of the MockService interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockServiceFrom(i surrogateMockService) *MockService {
	return &MockService{
		CreateCommitFromPatchFunc: &ServiceCreateCommitFromPatchFunc{
			defaultHook: i.CreateCommitFromPatch,
		},
		EnsureRevisionFunc: &ServiceEnsureRevisionFunc{
			defaultHook: i.EnsureRevision,
		},
		FetchRepositoryFunc: &ServiceFetchRepositoryFunc{
			defaultHook: i.FetchRepository,
		},
		IsRepoCloneableFunc: &ServiceIsRepoCloneableFunc{
			defaultHook: i.IsRepoCloneable,
		},
		LogIfCorruptFunc: &ServiceLogIfCorruptFunc{
			defaultHook: i.LogIfCorrupt,
		},
	}
}

// ServiceCreateCommitFromPatchFunc describes the behavior when the
// CreateCommitFromPatch method of the parent MockService instance is
// invoked.
type ServiceCreateCommitFromPatchFunc struct {
	defaultHook func(context.Context, protocol.CreateCommitFromPatchRequest, io.Reader) protocol.CreateCommitFromPatchResponse
	hooks       []func(context.Context, protocol.CreateCommitFromPatchRequest, io.Reader) protocol.CreateCommitFromPatchResponse
	history     []ServiceCreateCommitFromPatchFuncCall
	mutex       sync.Mutex
}

// CreateCommitFromPatch delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockService) CreateCommitFromPatch(v0 context.Context, v1 protocol.CreateCommitFromPatchRequest, v2 io.Reader) protocol.CreateCommitFromPatchResponse {
	r0 := m.CreateCommitFromPatchFunc.nextHook()(v0, v1, v2)
	m.CreateCommitFromPatchFunc.appendCall(ServiceCreateCommitFromPatchFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// CreateCommitFromPatch method of the parent MockService instance is
// invoked and the hook queue is empty.
func (f *ServiceCreateCommitFromPatchFunc) SetDefaultHook(hook func(context.Context, protocol.CreateCommitFromPatchRequest, io.Reader) protocol.CreateCommitFromPatchResponse) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateCommitFromPatch method of the parent MockService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ServiceCreateCommitFromPatchFunc) PushHook(hook func(context.Context, protocol.CreateCommitFromPatchRequest, io.Reader) protocol.CreateCommitFromPatchResponse) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ServiceCreateCommitFromPatchFunc) SetDefaultReturn(r0 protocol.CreateCommitFromPatchResponse) {
	f.SetDefaultHook(func(context.Context, protocol.CreateCommitFromPatchRequest, io.Reader) protocol.CreateCommitFromPatchResponse {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ServiceCreateCommitFromPatchFunc) PushReturn(r0 protocol.CreateCommitFromPatchResponse) {
	f.PushHook(func(context.Context, protocol.CreateCommitFromPatchRequest, io.Reader) protocol.CreateCommitFromPatchResponse {
		return r0
	})
}

func (f *ServiceCreateCommitFromPatchFunc) nextHook() func(context.Context, protocol.CreateCommitFromPatchRequest, io.Reader) protocol.CreateCommitFromPatchResponse {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ServiceCreateCommitFromPatchFunc) appendCall(r0 ServiceCreateCommitFromPatchFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ServiceCreateCommitFromPatchFuncCall
// objects describing the invocations of this function.
func (f *ServiceCreateCommitFromPatchFunc) History() []ServiceCreateCommitFromPatchFuncCall {
	f.mutex.Lock()
	history := make([]ServiceCreateCommitFromPatchFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ServiceCreateCommitFromPatchFuncCall is an object that describes an
// invocation of method CreateCommitFromPatch on an instance of MockService.
type ServiceCreateCommitFromPatchFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 protocol.CreateCommitFromPatchRequest
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 io.Reader
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 protocol.CreateCommitFromPatchResponse
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ServiceCreateCommitFromPatchFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ServiceCreateCommitFromPatchFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ServiceEnsureRevisionFunc describes the behavior when the EnsureRevision
// method of the parent MockService instance is invoked.
type ServiceEnsureRevisionFunc struct {
	defaultHook func(context.Context, api.RepoName, string) bool
	hooks       []func(context.Context, api.RepoName, string) bool
	history     []ServiceEnsureRevisionFuncCall
	mutex       sync.Mutex
}

// EnsureRevision delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockService) EnsureRevision(v0 context.Context, v1 api.RepoName, v2 string) bool {
	r0 := m.EnsureRevisionFunc.nextHook()(v0, v1, v2)
	m.EnsureRevisionFunc.appendCall(ServiceEnsureRevisionFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the EnsureRevision
// method of the parent MockService instance is invoked and the hook queue
// is empty.
func (f *ServiceEnsureRevisionFunc) SetDefaultHook(hook func(context.Context, api.RepoName, string) bool) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EnsureRevision method of the parent MockService instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ServiceEnsureRevisionFunc) PushHook(hook func(context.Context, api.RepoName, string) bool) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ServiceEnsureRevisionFunc) SetDefaultReturn(r0 bool) {
	f.SetDefaultHook(func(context.Context, api.RepoName, string) bool {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ServiceEnsureRevisionFunc) PushReturn(r0 bool) {
	f.PushHook(func(context.Context, api.RepoName, string) bool {
		return r0
	})
}

func (f *ServiceEnsureRevisionFunc) nextHook() func(context.Context, api.RepoName, string) bool {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ServiceEnsureRevisionFunc) appendCall(r0 ServiceEnsureRevisionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ServiceEnsureRevisionFuncCall objects
// describing the invocations of this function.
func (f *ServiceEnsureRevisionFunc) History() []ServiceEnsureRevisionFuncCall {
	f.mutex.Lock()
	history := make([]ServiceEnsureRevisionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ServiceEnsureRevisionFuncCall is an object that describes an invocation
// of method EnsureRevision on an instance of MockService.
type ServiceEnsureRevisionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ServiceEnsureRevisionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ServiceEnsureRevisionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ServiceFetchRepositoryFunc describes the behavior when the
// FetchRepository method of the parent MockService instance is invoked.
type ServiceFetchRepositoryFunc struct {
	defaultHook func(context.Context, api.RepoName) (time.Time, time.Time, error)
	hooks       []func(context.Context, api.RepoName) (time.Time, time.Time, error)
	history     []ServiceFetchRepositoryFuncCall
	mutex       sync.Mutex
}

// FetchRepository delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockService) FetchRepository(v0 context.Context, v1 api.RepoName) (time.Time, time.Time, error) {
	r0, r1, r2 := m.FetchRepositoryFunc.nextHook()(v0, v1)
	m.FetchRepositoryFunc.appendCall(ServiceFetchRepositoryFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the FetchRepository
// method of the parent MockService instance is invoked and the hook queue
// is empty.
func (f *ServiceFetchRepositoryFunc) SetDefaultHook(hook func(context.Context, api.RepoName) (time.Time, time.Time, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FetchRepository method of the parent MockService instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ServiceFetchRepositoryFunc) PushHook(hook func(context.Context, api.RepoName) (time.Time, time.Time, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ServiceFetchRepositoryFunc) SetDefaultReturn(r0 time.Time, r1 time.Time, r2 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) (time.Time, time.Time, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ServiceFetchRepositoryFunc) PushReturn(r0 time.Time, r1 time.Time, r2 error) {
	f.PushHook(func(context.Context, api.RepoName) (time.Time, time.Time, error) {
		return r0, r1, r2
	})
}

func (f *ServiceFetchRepositoryFunc) nextHook() func(context.Context, api.RepoName) (time.Time, time.Time, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ServiceFetchRepositoryFunc) appendCall(r0 ServiceFetchRepositoryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ServiceFetchRepositoryFuncCall objects
// describing the invocations of this function.
func (f *ServiceFetchRepositoryFunc) History() []ServiceFetchRepositoryFuncCall {
	f.mutex.Lock()
	history := make([]ServiceFetchRepositoryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ServiceFetchRepositoryFuncCall is an object that describes an invocation
// of method FetchRepository on an instance of MockService.
type ServiceFetchRepositoryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 time.Time
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 time.Time
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ServiceFetchRepositoryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ServiceFetchRepositoryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ServiceIsRepoCloneableFunc describes the behavior when the
// IsRepoCloneable method of the parent MockService instance is invoked.
type ServiceIsRepoCloneableFunc struct {
	defaultHook func(context.Context, api.RepoName) (protocol.IsRepoCloneableResponse, error)
	hooks       []func(context.Context, api.RepoName) (protocol.IsRepoCloneableResponse, error)
	history     []ServiceIsRepoCloneableFuncCall
	mutex       sync.Mutex
}

// IsRepoCloneable delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockService) IsRepoCloneable(v0 context.Context, v1 api.RepoName) (protocol.IsRepoCloneableResponse, error) {
	r0, r1 := m.IsRepoCloneableFunc.nextHook()(v0, v1)
	m.IsRepoCloneableFunc.appendCall(ServiceIsRepoCloneableFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IsRepoCloneable
// method of the parent MockService instance is invoked and the hook queue
// is empty.
func (f *ServiceIsRepoCloneableFunc) SetDefaultHook(hook func(context.Context, api.RepoName) (protocol.IsRepoCloneableResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsRepoCloneable method of the parent MockService instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ServiceIsRepoCloneableFunc) PushHook(hook func(context.Context, api.RepoName) (protocol.IsRepoCloneableResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ServiceIsRepoCloneableFunc) SetDefaultReturn(r0 protocol.IsRepoCloneableResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) (protocol.IsRepoCloneableResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ServiceIsRepoCloneableFunc) PushReturn(r0 protocol.IsRepoCloneableResponse, r1 error) {
	f.PushHook(func(context.Context, api.RepoName) (protocol.IsRepoCloneableResponse, error) {
		return r0, r1
	})
}

func (f *ServiceIsRepoCloneableFunc) nextHook() func(context.Context, api.RepoName) (protocol.IsRepoCloneableResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ServiceIsRepoCloneableFunc) appendCall(r0 ServiceIsRepoCloneableFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ServiceIsRepoCloneableFuncCall objects
// describing the invocations of this function.
func (f *ServiceIsRepoCloneableFunc) History() []ServiceIsRepoCloneableFuncCall {
	f.mutex.Lock()
	history := make([]ServiceIsRepoCloneableFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ServiceIsRepoCloneableFuncCall is an object that describes an invocation
// of method IsRepoCloneable on an instance of MockService.
type ServiceIsRepoCloneableFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 protocol.IsRepoCloneableResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ServiceIsRepoCloneableFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ServiceIsRepoCloneableFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ServiceLogIfCorruptFunc describes the behavior when the LogIfCorrupt
// method of the parent MockService instance is invoked.
type ServiceLogIfCorruptFunc struct {
	defaultHook func(context.Context, api.RepoName, error)
	hooks       []func(context.Context, api.RepoName, error)
	history     []ServiceLogIfCorruptFuncCall
	mutex       sync.Mutex
}

// LogIfCorrupt delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockService) LogIfCorrupt(v0 context.Context, v1 api.RepoName, v2 error) {
	m.LogIfCorruptFunc.nextHook()(v0, v1, v2)
	m.LogIfCorruptFunc.appendCall(ServiceLogIfCorruptFuncCall{v0, v1, v2})
	return
}

// SetDefaultHook sets function that is called when the LogIfCorrupt method
// of the parent MockService instance is invoked and the hook queue is
// empty.
func (f *ServiceLogIfCorruptFunc) SetDefaultHook(hook func(context.Context, api.RepoName, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LogIfCorrupt method of the parent MockService instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ServiceLogIfCorruptFunc) PushHook(hook func(context.Context, api.RepoName, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ServiceLogIfCorruptFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(context.Context, api.RepoName, error) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ServiceLogIfCorruptFunc) PushReturn() {
	f.PushHook(func(context.Context, api.RepoName, error) {
		return
	})
}

func (f *ServiceLogIfCorruptFunc) nextHook() func(context.Context, api.RepoName, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ServiceLogIfCorruptFunc) appendCall(r0 ServiceLogIfCorruptFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ServiceLogIfCorruptFuncCall objects
// describing the invocations of this function.
func (f *ServiceLogIfCorruptFunc) History() []ServiceLogIfCorruptFuncCall {
	f.mutex.Lock()
	history := make([]ServiceLogIfCorruptFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ServiceLogIfCorruptFuncCall is an object that describes an invocation of
// method LogIfCorrupt on an instance of MockService.
type ServiceLogIfCorruptFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ServiceLogIfCorruptFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ServiceLogIfCorruptFuncCall) Results() []interface{} {
	return []interface{}{}
}
