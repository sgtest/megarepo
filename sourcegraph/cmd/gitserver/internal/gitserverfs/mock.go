// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package gitserverfs

import (
	"sync"

	common "github.com/sourcegraph/sourcegraph/cmd/gitserver/internal/common"
	api "github.com/sourcegraph/sourcegraph/internal/api"
	diskusage "github.com/sourcegraph/sourcegraph/internal/diskusage"
)

// MockFS is a mock implementation of the FS interface (from the package
// github.com/sourcegraph/sourcegraph/cmd/gitserver/internal/gitserverfs)
// used for unit testing.
type MockFS struct {
	// DirSizeFunc is an instance of a mock function object controlling the
	// behavior of the method DirSize.
	DirSizeFunc *FSDirSizeFunc
	// DiskUsageFunc is an instance of a mock function object controlling
	// the behavior of the method DiskUsage.
	DiskUsageFunc *FSDiskUsageFunc
	// ForEachRepoFunc is an instance of a mock function object controlling
	// the behavior of the method ForEachRepo.
	ForEachRepoFunc *FSForEachRepoFunc
	// IgnorePathFunc is an instance of a mock function object controlling
	// the behavior of the method IgnorePath.
	IgnorePathFunc *FSIgnorePathFunc
	// InitializeFunc is an instance of a mock function object controlling
	// the behavior of the method Initialize.
	InitializeFunc *FSInitializeFunc
	// P4HomeDirFunc is an instance of a mock function object controlling
	// the behavior of the method P4HomeDir.
	P4HomeDirFunc *FSP4HomeDirFunc
	// RemoveRepoFunc is an instance of a mock function object controlling
	// the behavior of the method RemoveRepo.
	RemoveRepoFunc *FSRemoveRepoFunc
	// RepoClonedFunc is an instance of a mock function object controlling
	// the behavior of the method RepoCloned.
	RepoClonedFunc *FSRepoClonedFunc
	// RepoDirFunc is an instance of a mock function object controlling the
	// behavior of the method RepoDir.
	RepoDirFunc *FSRepoDirFunc
	// ResolveRepoNameFunc is an instance of a mock function object
	// controlling the behavior of the method ResolveRepoName.
	ResolveRepoNameFunc *FSResolveRepoNameFunc
	// TempDirFunc is an instance of a mock function object controlling the
	// behavior of the method TempDir.
	TempDirFunc *FSTempDirFunc
	// VisitReposFunc is an instance of a mock function object controlling
	// the behavior of the method VisitRepos.
	VisitReposFunc *FSVisitReposFunc
}

// NewMockFS creates a new mock of the FS interface. All methods return zero
// values for all results, unless overwritten.
func NewMockFS() *MockFS {
	return &MockFS{
		DirSizeFunc: &FSDirSizeFunc{
			defaultHook: func(string) (r0 int64, r1 error) {
				return
			},
		},
		DiskUsageFunc: &FSDiskUsageFunc{
			defaultHook: func() (r0 diskusage.DiskUsage, r1 error) {
				return
			},
		},
		ForEachRepoFunc: &FSForEachRepoFunc{
			defaultHook: func(func(api.RepoName, common.GitDir) bool) (r0 error) {
				return
			},
		},
		IgnorePathFunc: &FSIgnorePathFunc{
			defaultHook: func(string) (r0 bool) {
				return
			},
		},
		InitializeFunc: &FSInitializeFunc{
			defaultHook: func() (r0 error) {
				return
			},
		},
		P4HomeDirFunc: &FSP4HomeDirFunc{
			defaultHook: func() (r0 string, r1 error) {
				return
			},
		},
		RemoveRepoFunc: &FSRemoveRepoFunc{
			defaultHook: func(api.RepoName) (r0 error) {
				return
			},
		},
		RepoClonedFunc: &FSRepoClonedFunc{
			defaultHook: func(api.RepoName) (r0 bool, r1 error) {
				return
			},
		},
		RepoDirFunc: &FSRepoDirFunc{
			defaultHook: func(api.RepoName) (r0 common.GitDir) {
				return
			},
		},
		ResolveRepoNameFunc: &FSResolveRepoNameFunc{
			defaultHook: func(common.GitDir) (r0 api.RepoName) {
				return
			},
		},
		TempDirFunc: &FSTempDirFunc{
			defaultHook: func(string) (r0 string, r1 error) {
				return
			},
		},
		VisitReposFunc: &FSVisitReposFunc{
			defaultHook: func(func(api.RepoName, common.GitDir) (bool, error)) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockFS creates a new mock of the FS interface. All methods panic
// on invocation, unless overwritten.
func NewStrictMockFS() *MockFS {
	return &MockFS{
		DirSizeFunc: &FSDirSizeFunc{
			defaultHook: func(string) (int64, error) {
				panic("unexpected invocation of MockFS.DirSize")
			},
		},
		DiskUsageFunc: &FSDiskUsageFunc{
			defaultHook: func() (diskusage.DiskUsage, error) {
				panic("unexpected invocation of MockFS.DiskUsage")
			},
		},
		ForEachRepoFunc: &FSForEachRepoFunc{
			defaultHook: func(func(api.RepoName, common.GitDir) bool) error {
				panic("unexpected invocation of MockFS.ForEachRepo")
			},
		},
		IgnorePathFunc: &FSIgnorePathFunc{
			defaultHook: func(string) bool {
				panic("unexpected invocation of MockFS.IgnorePath")
			},
		},
		InitializeFunc: &FSInitializeFunc{
			defaultHook: func() error {
				panic("unexpected invocation of MockFS.Initialize")
			},
		},
		P4HomeDirFunc: &FSP4HomeDirFunc{
			defaultHook: func() (string, error) {
				panic("unexpected invocation of MockFS.P4HomeDir")
			},
		},
		RemoveRepoFunc: &FSRemoveRepoFunc{
			defaultHook: func(api.RepoName) error {
				panic("unexpected invocation of MockFS.RemoveRepo")
			},
		},
		RepoClonedFunc: &FSRepoClonedFunc{
			defaultHook: func(api.RepoName) (bool, error) {
				panic("unexpected invocation of MockFS.RepoCloned")
			},
		},
		RepoDirFunc: &FSRepoDirFunc{
			defaultHook: func(api.RepoName) common.GitDir {
				panic("unexpected invocation of MockFS.RepoDir")
			},
		},
		ResolveRepoNameFunc: &FSResolveRepoNameFunc{
			defaultHook: func(common.GitDir) api.RepoName {
				panic("unexpected invocation of MockFS.ResolveRepoName")
			},
		},
		TempDirFunc: &FSTempDirFunc{
			defaultHook: func(string) (string, error) {
				panic("unexpected invocation of MockFS.TempDir")
			},
		},
		VisitReposFunc: &FSVisitReposFunc{
			defaultHook: func(func(api.RepoName, common.GitDir) (bool, error)) error {
				panic("unexpected invocation of MockFS.VisitRepos")
			},
		},
	}
}

// NewMockFSFrom creates a new mock of the MockFS interface. All methods
// delegate to the given implementation, unless overwritten.
func NewMockFSFrom(i FS) *MockFS {
	return &MockFS{
		DirSizeFunc: &FSDirSizeFunc{
			defaultHook: i.DirSize,
		},
		DiskUsageFunc: &FSDiskUsageFunc{
			defaultHook: i.DiskUsage,
		},
		ForEachRepoFunc: &FSForEachRepoFunc{
			defaultHook: i.ForEachRepo,
		},
		IgnorePathFunc: &FSIgnorePathFunc{
			defaultHook: i.IgnorePath,
		},
		InitializeFunc: &FSInitializeFunc{
			defaultHook: i.Initialize,
		},
		P4HomeDirFunc: &FSP4HomeDirFunc{
			defaultHook: i.P4HomeDir,
		},
		RemoveRepoFunc: &FSRemoveRepoFunc{
			defaultHook: i.RemoveRepo,
		},
		RepoClonedFunc: &FSRepoClonedFunc{
			defaultHook: i.RepoCloned,
		},
		RepoDirFunc: &FSRepoDirFunc{
			defaultHook: i.RepoDir,
		},
		ResolveRepoNameFunc: &FSResolveRepoNameFunc{
			defaultHook: i.ResolveRepoName,
		},
		TempDirFunc: &FSTempDirFunc{
			defaultHook: i.TempDir,
		},
		VisitReposFunc: &FSVisitReposFunc{
			defaultHook: i.VisitRepos,
		},
	}
}

// FSDirSizeFunc describes the behavior when the DirSize method of the
// parent MockFS instance is invoked.
type FSDirSizeFunc struct {
	defaultHook func(string) (int64, error)
	hooks       []func(string) (int64, error)
	history     []FSDirSizeFuncCall
	mutex       sync.Mutex
}

// DirSize delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockFS) DirSize(v0 string) (int64, error) {
	r0, r1 := m.DirSizeFunc.nextHook()(v0)
	m.DirSizeFunc.appendCall(FSDirSizeFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DirSize method of
// the parent MockFS instance is invoked and the hook queue is empty.
func (f *FSDirSizeFunc) SetDefaultHook(hook func(string) (int64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DirSize method of the parent MockFS instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *FSDirSizeFunc) PushHook(hook func(string) (int64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FSDirSizeFunc) SetDefaultReturn(r0 int64, r1 error) {
	f.SetDefaultHook(func(string) (int64, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FSDirSizeFunc) PushReturn(r0 int64, r1 error) {
	f.PushHook(func(string) (int64, error) {
		return r0, r1
	})
}

func (f *FSDirSizeFunc) nextHook() func(string) (int64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FSDirSizeFunc) appendCall(r0 FSDirSizeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FSDirSizeFuncCall objects describing the
// invocations of this function.
func (f *FSDirSizeFunc) History() []FSDirSizeFuncCall {
	f.mutex.Lock()
	history := make([]FSDirSizeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FSDirSizeFuncCall is an object that describes an invocation of method
// DirSize on an instance of MockFS.
type FSDirSizeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FSDirSizeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FSDirSizeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FSDiskUsageFunc describes the behavior when the DiskUsage method of the
// parent MockFS instance is invoked.
type FSDiskUsageFunc struct {
	defaultHook func() (diskusage.DiskUsage, error)
	hooks       []func() (diskusage.DiskUsage, error)
	history     []FSDiskUsageFuncCall
	mutex       sync.Mutex
}

// DiskUsage delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockFS) DiskUsage() (diskusage.DiskUsage, error) {
	r0, r1 := m.DiskUsageFunc.nextHook()()
	m.DiskUsageFunc.appendCall(FSDiskUsageFuncCall{r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DiskUsage method of
// the parent MockFS instance is invoked and the hook queue is empty.
func (f *FSDiskUsageFunc) SetDefaultHook(hook func() (diskusage.DiskUsage, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DiskUsage method of the parent MockFS instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *FSDiskUsageFunc) PushHook(hook func() (diskusage.DiskUsage, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FSDiskUsageFunc) SetDefaultReturn(r0 diskusage.DiskUsage, r1 error) {
	f.SetDefaultHook(func() (diskusage.DiskUsage, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FSDiskUsageFunc) PushReturn(r0 diskusage.DiskUsage, r1 error) {
	f.PushHook(func() (diskusage.DiskUsage, error) {
		return r0, r1
	})
}

func (f *FSDiskUsageFunc) nextHook() func() (diskusage.DiskUsage, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FSDiskUsageFunc) appendCall(r0 FSDiskUsageFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FSDiskUsageFuncCall objects describing the
// invocations of this function.
func (f *FSDiskUsageFunc) History() []FSDiskUsageFuncCall {
	f.mutex.Lock()
	history := make([]FSDiskUsageFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FSDiskUsageFuncCall is an object that describes an invocation of method
// DiskUsage on an instance of MockFS.
type FSDiskUsageFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 diskusage.DiskUsage
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FSDiskUsageFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FSDiskUsageFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FSForEachRepoFunc describes the behavior when the ForEachRepo method of
// the parent MockFS instance is invoked.
type FSForEachRepoFunc struct {
	defaultHook func(func(api.RepoName, common.GitDir) bool) error
	hooks       []func(func(api.RepoName, common.GitDir) bool) error
	history     []FSForEachRepoFuncCall
	mutex       sync.Mutex
}

// ForEachRepo delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockFS) ForEachRepo(v0 func(api.RepoName, common.GitDir) bool) error {
	r0 := m.ForEachRepoFunc.nextHook()(v0)
	m.ForEachRepoFunc.appendCall(FSForEachRepoFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the ForEachRepo method
// of the parent MockFS instance is invoked and the hook queue is empty.
func (f *FSForEachRepoFunc) SetDefaultHook(hook func(func(api.RepoName, common.GitDir) bool) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ForEachRepo method of the parent MockFS instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *FSForEachRepoFunc) PushHook(hook func(func(api.RepoName, common.GitDir) bool) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FSForEachRepoFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(func(api.RepoName, common.GitDir) bool) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FSForEachRepoFunc) PushReturn(r0 error) {
	f.PushHook(func(func(api.RepoName, common.GitDir) bool) error {
		return r0
	})
}

func (f *FSForEachRepoFunc) nextHook() func(func(api.RepoName, common.GitDir) bool) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FSForEachRepoFunc) appendCall(r0 FSForEachRepoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FSForEachRepoFuncCall objects describing
// the invocations of this function.
func (f *FSForEachRepoFunc) History() []FSForEachRepoFuncCall {
	f.mutex.Lock()
	history := make([]FSForEachRepoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FSForEachRepoFuncCall is an object that describes an invocation of method
// ForEachRepo on an instance of MockFS.
type FSForEachRepoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 func(api.RepoName, common.GitDir) bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FSForEachRepoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FSForEachRepoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// FSIgnorePathFunc describes the behavior when the IgnorePath method of the
// parent MockFS instance is invoked.
type FSIgnorePathFunc struct {
	defaultHook func(string) bool
	hooks       []func(string) bool
	history     []FSIgnorePathFuncCall
	mutex       sync.Mutex
}

// IgnorePath delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockFS) IgnorePath(v0 string) bool {
	r0 := m.IgnorePathFunc.nextHook()(v0)
	m.IgnorePathFunc.appendCall(FSIgnorePathFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the IgnorePath method of
// the parent MockFS instance is invoked and the hook queue is empty.
func (f *FSIgnorePathFunc) SetDefaultHook(hook func(string) bool) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IgnorePath method of the parent MockFS instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *FSIgnorePathFunc) PushHook(hook func(string) bool) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FSIgnorePathFunc) SetDefaultReturn(r0 bool) {
	f.SetDefaultHook(func(string) bool {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FSIgnorePathFunc) PushReturn(r0 bool) {
	f.PushHook(func(string) bool {
		return r0
	})
}

func (f *FSIgnorePathFunc) nextHook() func(string) bool {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FSIgnorePathFunc) appendCall(r0 FSIgnorePathFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FSIgnorePathFuncCall objects describing the
// invocations of this function.
func (f *FSIgnorePathFunc) History() []FSIgnorePathFuncCall {
	f.mutex.Lock()
	history := make([]FSIgnorePathFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FSIgnorePathFuncCall is an object that describes an invocation of method
// IgnorePath on an instance of MockFS.
type FSIgnorePathFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FSIgnorePathFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FSIgnorePathFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// FSInitializeFunc describes the behavior when the Initialize method of the
// parent MockFS instance is invoked.
type FSInitializeFunc struct {
	defaultHook func() error
	hooks       []func() error
	history     []FSInitializeFuncCall
	mutex       sync.Mutex
}

// Initialize delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockFS) Initialize() error {
	r0 := m.InitializeFunc.nextHook()()
	m.InitializeFunc.appendCall(FSInitializeFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Initialize method of
// the parent MockFS instance is invoked and the hook queue is empty.
func (f *FSInitializeFunc) SetDefaultHook(hook func() error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Initialize method of the parent MockFS instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *FSInitializeFunc) PushHook(hook func() error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FSInitializeFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func() error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FSInitializeFunc) PushReturn(r0 error) {
	f.PushHook(func() error {
		return r0
	})
}

func (f *FSInitializeFunc) nextHook() func() error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FSInitializeFunc) appendCall(r0 FSInitializeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FSInitializeFuncCall objects describing the
// invocations of this function.
func (f *FSInitializeFunc) History() []FSInitializeFuncCall {
	f.mutex.Lock()
	history := make([]FSInitializeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FSInitializeFuncCall is an object that describes an invocation of method
// Initialize on an instance of MockFS.
type FSInitializeFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FSInitializeFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FSInitializeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// FSP4HomeDirFunc describes the behavior when the P4HomeDir method of the
// parent MockFS instance is invoked.
type FSP4HomeDirFunc struct {
	defaultHook func() (string, error)
	hooks       []func() (string, error)
	history     []FSP4HomeDirFuncCall
	mutex       sync.Mutex
}

// P4HomeDir delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockFS) P4HomeDir() (string, error) {
	r0, r1 := m.P4HomeDirFunc.nextHook()()
	m.P4HomeDirFunc.appendCall(FSP4HomeDirFuncCall{r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the P4HomeDir method of
// the parent MockFS instance is invoked and the hook queue is empty.
func (f *FSP4HomeDirFunc) SetDefaultHook(hook func() (string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// P4HomeDir method of the parent MockFS instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *FSP4HomeDirFunc) PushHook(hook func() (string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FSP4HomeDirFunc) SetDefaultReturn(r0 string, r1 error) {
	f.SetDefaultHook(func() (string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FSP4HomeDirFunc) PushReturn(r0 string, r1 error) {
	f.PushHook(func() (string, error) {
		return r0, r1
	})
}

func (f *FSP4HomeDirFunc) nextHook() func() (string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FSP4HomeDirFunc) appendCall(r0 FSP4HomeDirFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FSP4HomeDirFuncCall objects describing the
// invocations of this function.
func (f *FSP4HomeDirFunc) History() []FSP4HomeDirFuncCall {
	f.mutex.Lock()
	history := make([]FSP4HomeDirFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FSP4HomeDirFuncCall is an object that describes an invocation of method
// P4HomeDir on an instance of MockFS.
type FSP4HomeDirFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FSP4HomeDirFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FSP4HomeDirFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FSRemoveRepoFunc describes the behavior when the RemoveRepo method of the
// parent MockFS instance is invoked.
type FSRemoveRepoFunc struct {
	defaultHook func(api.RepoName) error
	hooks       []func(api.RepoName) error
	history     []FSRemoveRepoFuncCall
	mutex       sync.Mutex
}

// RemoveRepo delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockFS) RemoveRepo(v0 api.RepoName) error {
	r0 := m.RemoveRepoFunc.nextHook()(v0)
	m.RemoveRepoFunc.appendCall(FSRemoveRepoFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the RemoveRepo method of
// the parent MockFS instance is invoked and the hook queue is empty.
func (f *FSRemoveRepoFunc) SetDefaultHook(hook func(api.RepoName) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RemoveRepo method of the parent MockFS instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *FSRemoveRepoFunc) PushHook(hook func(api.RepoName) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FSRemoveRepoFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(api.RepoName) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FSRemoveRepoFunc) PushReturn(r0 error) {
	f.PushHook(func(api.RepoName) error {
		return r0
	})
}

func (f *FSRemoveRepoFunc) nextHook() func(api.RepoName) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FSRemoveRepoFunc) appendCall(r0 FSRemoveRepoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FSRemoveRepoFuncCall objects describing the
// invocations of this function.
func (f *FSRemoveRepoFunc) History() []FSRemoveRepoFuncCall {
	f.mutex.Lock()
	history := make([]FSRemoveRepoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FSRemoveRepoFuncCall is an object that describes an invocation of method
// RemoveRepo on an instance of MockFS.
type FSRemoveRepoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FSRemoveRepoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FSRemoveRepoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// FSRepoClonedFunc describes the behavior when the RepoCloned method of the
// parent MockFS instance is invoked.
type FSRepoClonedFunc struct {
	defaultHook func(api.RepoName) (bool, error)
	hooks       []func(api.RepoName) (bool, error)
	history     []FSRepoClonedFuncCall
	mutex       sync.Mutex
}

// RepoCloned delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockFS) RepoCloned(v0 api.RepoName) (bool, error) {
	r0, r1 := m.RepoClonedFunc.nextHook()(v0)
	m.RepoClonedFunc.appendCall(FSRepoClonedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RepoCloned method of
// the parent MockFS instance is invoked and the hook queue is empty.
func (f *FSRepoClonedFunc) SetDefaultHook(hook func(api.RepoName) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepoCloned method of the parent MockFS instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *FSRepoClonedFunc) PushHook(hook func(api.RepoName) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FSRepoClonedFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(api.RepoName) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FSRepoClonedFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(api.RepoName) (bool, error) {
		return r0, r1
	})
}

func (f *FSRepoClonedFunc) nextHook() func(api.RepoName) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FSRepoClonedFunc) appendCall(r0 FSRepoClonedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FSRepoClonedFuncCall objects describing the
// invocations of this function.
func (f *FSRepoClonedFunc) History() []FSRepoClonedFuncCall {
	f.mutex.Lock()
	history := make([]FSRepoClonedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FSRepoClonedFuncCall is an object that describes an invocation of method
// RepoCloned on an instance of MockFS.
type FSRepoClonedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FSRepoClonedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FSRepoClonedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FSRepoDirFunc describes the behavior when the RepoDir method of the
// parent MockFS instance is invoked.
type FSRepoDirFunc struct {
	defaultHook func(api.RepoName) common.GitDir
	hooks       []func(api.RepoName) common.GitDir
	history     []FSRepoDirFuncCall
	mutex       sync.Mutex
}

// RepoDir delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockFS) RepoDir(v0 api.RepoName) common.GitDir {
	r0 := m.RepoDirFunc.nextHook()(v0)
	m.RepoDirFunc.appendCall(FSRepoDirFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the RepoDir method of
// the parent MockFS instance is invoked and the hook queue is empty.
func (f *FSRepoDirFunc) SetDefaultHook(hook func(api.RepoName) common.GitDir) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepoDir method of the parent MockFS instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *FSRepoDirFunc) PushHook(hook func(api.RepoName) common.GitDir) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FSRepoDirFunc) SetDefaultReturn(r0 common.GitDir) {
	f.SetDefaultHook(func(api.RepoName) common.GitDir {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FSRepoDirFunc) PushReturn(r0 common.GitDir) {
	f.PushHook(func(api.RepoName) common.GitDir {
		return r0
	})
}

func (f *FSRepoDirFunc) nextHook() func(api.RepoName) common.GitDir {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FSRepoDirFunc) appendCall(r0 FSRepoDirFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FSRepoDirFuncCall objects describing the
// invocations of this function.
func (f *FSRepoDirFunc) History() []FSRepoDirFuncCall {
	f.mutex.Lock()
	history := make([]FSRepoDirFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FSRepoDirFuncCall is an object that describes an invocation of method
// RepoDir on an instance of MockFS.
type FSRepoDirFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 common.GitDir
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FSRepoDirFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FSRepoDirFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// FSResolveRepoNameFunc describes the behavior when the ResolveRepoName
// method of the parent MockFS instance is invoked.
type FSResolveRepoNameFunc struct {
	defaultHook func(common.GitDir) api.RepoName
	hooks       []func(common.GitDir) api.RepoName
	history     []FSResolveRepoNameFuncCall
	mutex       sync.Mutex
}

// ResolveRepoName delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockFS) ResolveRepoName(v0 common.GitDir) api.RepoName {
	r0 := m.ResolveRepoNameFunc.nextHook()(v0)
	m.ResolveRepoNameFunc.appendCall(FSResolveRepoNameFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the ResolveRepoName
// method of the parent MockFS instance is invoked and the hook queue is
// empty.
func (f *FSResolveRepoNameFunc) SetDefaultHook(hook func(common.GitDir) api.RepoName) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ResolveRepoName method of the parent MockFS instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *FSResolveRepoNameFunc) PushHook(hook func(common.GitDir) api.RepoName) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FSResolveRepoNameFunc) SetDefaultReturn(r0 api.RepoName) {
	f.SetDefaultHook(func(common.GitDir) api.RepoName {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FSResolveRepoNameFunc) PushReturn(r0 api.RepoName) {
	f.PushHook(func(common.GitDir) api.RepoName {
		return r0
	})
}

func (f *FSResolveRepoNameFunc) nextHook() func(common.GitDir) api.RepoName {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FSResolveRepoNameFunc) appendCall(r0 FSResolveRepoNameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FSResolveRepoNameFuncCall objects
// describing the invocations of this function.
func (f *FSResolveRepoNameFunc) History() []FSResolveRepoNameFuncCall {
	f.mutex.Lock()
	history := make([]FSResolveRepoNameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FSResolveRepoNameFuncCall is an object that describes an invocation of
// method ResolveRepoName on an instance of MockFS.
type FSResolveRepoNameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 common.GitDir
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 api.RepoName
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FSResolveRepoNameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FSResolveRepoNameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// FSTempDirFunc describes the behavior when the TempDir method of the
// parent MockFS instance is invoked.
type FSTempDirFunc struct {
	defaultHook func(string) (string, error)
	hooks       []func(string) (string, error)
	history     []FSTempDirFuncCall
	mutex       sync.Mutex
}

// TempDir delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockFS) TempDir(v0 string) (string, error) {
	r0, r1 := m.TempDirFunc.nextHook()(v0)
	m.TempDirFunc.appendCall(FSTempDirFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the TempDir method of
// the parent MockFS instance is invoked and the hook queue is empty.
func (f *FSTempDirFunc) SetDefaultHook(hook func(string) (string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TempDir method of the parent MockFS instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *FSTempDirFunc) PushHook(hook func(string) (string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FSTempDirFunc) SetDefaultReturn(r0 string, r1 error) {
	f.SetDefaultHook(func(string) (string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FSTempDirFunc) PushReturn(r0 string, r1 error) {
	f.PushHook(func(string) (string, error) {
		return r0, r1
	})
}

func (f *FSTempDirFunc) nextHook() func(string) (string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FSTempDirFunc) appendCall(r0 FSTempDirFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FSTempDirFuncCall objects describing the
// invocations of this function.
func (f *FSTempDirFunc) History() []FSTempDirFuncCall {
	f.mutex.Lock()
	history := make([]FSTempDirFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FSTempDirFuncCall is an object that describes an invocation of method
// TempDir on an instance of MockFS.
type FSTempDirFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FSTempDirFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FSTempDirFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FSVisitReposFunc describes the behavior when the VisitRepos method of the
// parent MockFS instance is invoked.
type FSVisitReposFunc struct {
	defaultHook func(func(api.RepoName, common.GitDir) (bool, error)) error
	hooks       []func(func(api.RepoName, common.GitDir) (bool, error)) error
	history     []FSVisitReposFuncCall
	mutex       sync.Mutex
}

// VisitRepos delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockFS) VisitRepos(v0 func(api.RepoName, common.GitDir) (bool, error)) error {
	r0 := m.VisitReposFunc.nextHook()(v0)
	m.VisitReposFunc.appendCall(FSVisitReposFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the VisitRepos method of
// the parent MockFS instance is invoked and the hook queue is empty.
func (f *FSVisitReposFunc) SetDefaultHook(hook func(func(api.RepoName, common.GitDir) (bool, error)) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// VisitRepos method of the parent MockFS instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *FSVisitReposFunc) PushHook(hook func(func(api.RepoName, common.GitDir) (bool, error)) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FSVisitReposFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(func(api.RepoName, common.GitDir) (bool, error)) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FSVisitReposFunc) PushReturn(r0 error) {
	f.PushHook(func(func(api.RepoName, common.GitDir) (bool, error)) error {
		return r0
	})
}

func (f *FSVisitReposFunc) nextHook() func(func(api.RepoName, common.GitDir) (bool, error)) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FSVisitReposFunc) appendCall(r0 FSVisitReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FSVisitReposFuncCall objects describing the
// invocations of this function.
func (f *FSVisitReposFunc) History() []FSVisitReposFuncCall {
	f.mutex.Lock()
	history := make([]FSVisitReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FSVisitReposFuncCall is an object that describes an invocation of method
// VisitRepos on an instance of MockFS.
type FSVisitReposFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 func(api.RepoName, common.GitDir) (bool, error)
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FSVisitReposFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FSVisitReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
