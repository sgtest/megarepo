// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package git

import (
	"context"
	"io"
	"sync"

	api "github.com/sourcegraph/sourcegraph/internal/api"
	gitdomain "github.com/sourcegraph/sourcegraph/internal/gitserver/gitdomain"
)

// MockBlameHunkReader is a mock implementation of the BlameHunkReader
// interface (from the package
// github.com/sourcegraph/sourcegraph/cmd/gitserver/internal/git) used for
// unit testing.
type MockBlameHunkReader struct {
	// CloseFunc is an instance of a mock function object controlling the
	// behavior of the method Close.
	CloseFunc *BlameHunkReaderCloseFunc
	// ReadFunc is an instance of a mock function object controlling the
	// behavior of the method Read.
	ReadFunc *BlameHunkReaderReadFunc
}

// NewMockBlameHunkReader creates a new mock of the BlameHunkReader
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockBlameHunkReader() *MockBlameHunkReader {
	return &MockBlameHunkReader{
		CloseFunc: &BlameHunkReaderCloseFunc{
			defaultHook: func() (r0 error) {
				return
			},
		},
		ReadFunc: &BlameHunkReaderReadFunc{
			defaultHook: func() (r0 *gitdomain.Hunk, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockBlameHunkReader creates a new mock of the BlameHunkReader
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockBlameHunkReader() *MockBlameHunkReader {
	return &MockBlameHunkReader{
		CloseFunc: &BlameHunkReaderCloseFunc{
			defaultHook: func() error {
				panic("unexpected invocation of MockBlameHunkReader.Close")
			},
		},
		ReadFunc: &BlameHunkReaderReadFunc{
			defaultHook: func() (*gitdomain.Hunk, error) {
				panic("unexpected invocation of MockBlameHunkReader.Read")
			},
		},
	}
}

// NewMockBlameHunkReaderFrom creates a new mock of the MockBlameHunkReader
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockBlameHunkReaderFrom(i BlameHunkReader) *MockBlameHunkReader {
	return &MockBlameHunkReader{
		CloseFunc: &BlameHunkReaderCloseFunc{
			defaultHook: i.Close,
		},
		ReadFunc: &BlameHunkReaderReadFunc{
			defaultHook: i.Read,
		},
	}
}

// BlameHunkReaderCloseFunc describes the behavior when the Close method of
// the parent MockBlameHunkReader instance is invoked.
type BlameHunkReaderCloseFunc struct {
	defaultHook func() error
	hooks       []func() error
	history     []BlameHunkReaderCloseFuncCall
	mutex       sync.Mutex
}

// Close delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBlameHunkReader) Close() error {
	r0 := m.CloseFunc.nextHook()()
	m.CloseFunc.appendCall(BlameHunkReaderCloseFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Close method of the
// parent MockBlameHunkReader instance is invoked and the hook queue is
// empty.
func (f *BlameHunkReaderCloseFunc) SetDefaultHook(hook func() error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Close method of the parent MockBlameHunkReader instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *BlameHunkReaderCloseFunc) PushHook(hook func() error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BlameHunkReaderCloseFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func() error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BlameHunkReaderCloseFunc) PushReturn(r0 error) {
	f.PushHook(func() error {
		return r0
	})
}

func (f *BlameHunkReaderCloseFunc) nextHook() func() error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BlameHunkReaderCloseFunc) appendCall(r0 BlameHunkReaderCloseFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BlameHunkReaderCloseFuncCall objects
// describing the invocations of this function.
func (f *BlameHunkReaderCloseFunc) History() []BlameHunkReaderCloseFuncCall {
	f.mutex.Lock()
	history := make([]BlameHunkReaderCloseFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BlameHunkReaderCloseFuncCall is an object that describes an invocation of
// method Close on an instance of MockBlameHunkReader.
type BlameHunkReaderCloseFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BlameHunkReaderCloseFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BlameHunkReaderCloseFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BlameHunkReaderReadFunc describes the behavior when the Read method of
// the parent MockBlameHunkReader instance is invoked.
type BlameHunkReaderReadFunc struct {
	defaultHook func() (*gitdomain.Hunk, error)
	hooks       []func() (*gitdomain.Hunk, error)
	history     []BlameHunkReaderReadFuncCall
	mutex       sync.Mutex
}

// Read delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBlameHunkReader) Read() (*gitdomain.Hunk, error) {
	r0, r1 := m.ReadFunc.nextHook()()
	m.ReadFunc.appendCall(BlameHunkReaderReadFuncCall{r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Read method of the
// parent MockBlameHunkReader instance is invoked and the hook queue is
// empty.
func (f *BlameHunkReaderReadFunc) SetDefaultHook(hook func() (*gitdomain.Hunk, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Read method of the parent MockBlameHunkReader instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *BlameHunkReaderReadFunc) PushHook(hook func() (*gitdomain.Hunk, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BlameHunkReaderReadFunc) SetDefaultReturn(r0 *gitdomain.Hunk, r1 error) {
	f.SetDefaultHook(func() (*gitdomain.Hunk, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BlameHunkReaderReadFunc) PushReturn(r0 *gitdomain.Hunk, r1 error) {
	f.PushHook(func() (*gitdomain.Hunk, error) {
		return r0, r1
	})
}

func (f *BlameHunkReaderReadFunc) nextHook() func() (*gitdomain.Hunk, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BlameHunkReaderReadFunc) appendCall(r0 BlameHunkReaderReadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of BlameHunkReaderReadFuncCall objects
// describing the invocations of this function.
func (f *BlameHunkReaderReadFunc) History() []BlameHunkReaderReadFuncCall {
	f.mutex.Lock()
	history := make([]BlameHunkReaderReadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BlameHunkReaderReadFuncCall is an object that describes an invocation of
// method Read on an instance of MockBlameHunkReader.
type BlameHunkReaderReadFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *gitdomain.Hunk
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BlameHunkReaderReadFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BlameHunkReaderReadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockGitBackend is a mock implementation of the GitBackend interface (from
// the package
// github.com/sourcegraph/sourcegraph/cmd/gitserver/internal/git) used for
// unit testing.
type MockGitBackend struct {
	// BlameFunc is an instance of a mock function object controlling the
	// behavior of the method Blame.
	BlameFunc *GitBackendBlameFunc
	// ConfigFunc is an instance of a mock function object controlling the
	// behavior of the method Config.
	ConfigFunc *GitBackendConfigFunc
	// ExecFunc is an instance of a mock function object controlling the
	// behavior of the method Exec.
	ExecFunc *GitBackendExecFunc
	// GetObjectFunc is an instance of a mock function object controlling
	// the behavior of the method GetObject.
	GetObjectFunc *GitBackendGetObjectFunc
	// MergeBaseFunc is an instance of a mock function object controlling
	// the behavior of the method MergeBase.
	MergeBaseFunc *GitBackendMergeBaseFunc
}

// NewMockGitBackend creates a new mock of the GitBackend interface. All
// methods return zero values for all results, unless overwritten.
func NewMockGitBackend() *MockGitBackend {
	return &MockGitBackend{
		BlameFunc: &GitBackendBlameFunc{
			defaultHook: func(context.Context, string, BlameOptions) (r0 BlameHunkReader, r1 error) {
				return
			},
		},
		ConfigFunc: &GitBackendConfigFunc{
			defaultHook: func() (r0 GitConfigBackend) {
				return
			},
		},
		ExecFunc: &GitBackendExecFunc{
			defaultHook: func(context.Context, ...string) (r0 io.ReadCloser, r1 error) {
				return
			},
		},
		GetObjectFunc: &GitBackendGetObjectFunc{
			defaultHook: func(context.Context, string) (r0 *gitdomain.GitObject, r1 error) {
				return
			},
		},
		MergeBaseFunc: &GitBackendMergeBaseFunc{
			defaultHook: func(context.Context, string, string) (r0 api.CommitID, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockGitBackend creates a new mock of the GitBackend interface.
// All methods panic on invocation, unless overwritten.
func NewStrictMockGitBackend() *MockGitBackend {
	return &MockGitBackend{
		BlameFunc: &GitBackendBlameFunc{
			defaultHook: func(context.Context, string, BlameOptions) (BlameHunkReader, error) {
				panic("unexpected invocation of MockGitBackend.Blame")
			},
		},
		ConfigFunc: &GitBackendConfigFunc{
			defaultHook: func() GitConfigBackend {
				panic("unexpected invocation of MockGitBackend.Config")
			},
		},
		ExecFunc: &GitBackendExecFunc{
			defaultHook: func(context.Context, ...string) (io.ReadCloser, error) {
				panic("unexpected invocation of MockGitBackend.Exec")
			},
		},
		GetObjectFunc: &GitBackendGetObjectFunc{
			defaultHook: func(context.Context, string) (*gitdomain.GitObject, error) {
				panic("unexpected invocation of MockGitBackend.GetObject")
			},
		},
		MergeBaseFunc: &GitBackendMergeBaseFunc{
			defaultHook: func(context.Context, string, string) (api.CommitID, error) {
				panic("unexpected invocation of MockGitBackend.MergeBase")
			},
		},
	}
}

// NewMockGitBackendFrom creates a new mock of the MockGitBackend interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockGitBackendFrom(i GitBackend) *MockGitBackend {
	return &MockGitBackend{
		BlameFunc: &GitBackendBlameFunc{
			defaultHook: i.Blame,
		},
		ConfigFunc: &GitBackendConfigFunc{
			defaultHook: i.Config,
		},
		ExecFunc: &GitBackendExecFunc{
			defaultHook: i.Exec,
		},
		GetObjectFunc: &GitBackendGetObjectFunc{
			defaultHook: i.GetObject,
		},
		MergeBaseFunc: &GitBackendMergeBaseFunc{
			defaultHook: i.MergeBase,
		},
	}
}

// GitBackendBlameFunc describes the behavior when the Blame method of the
// parent MockGitBackend instance is invoked.
type GitBackendBlameFunc struct {
	defaultHook func(context.Context, string, BlameOptions) (BlameHunkReader, error)
	hooks       []func(context.Context, string, BlameOptions) (BlameHunkReader, error)
	history     []GitBackendBlameFuncCall
	mutex       sync.Mutex
}

// Blame delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitBackend) Blame(v0 context.Context, v1 string, v2 BlameOptions) (BlameHunkReader, error) {
	r0, r1 := m.BlameFunc.nextHook()(v0, v1, v2)
	m.BlameFunc.appendCall(GitBackendBlameFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Blame method of the
// parent MockGitBackend instance is invoked and the hook queue is empty.
func (f *GitBackendBlameFunc) SetDefaultHook(hook func(context.Context, string, BlameOptions) (BlameHunkReader, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Blame method of the parent MockGitBackend instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GitBackendBlameFunc) PushHook(hook func(context.Context, string, BlameOptions) (BlameHunkReader, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitBackendBlameFunc) SetDefaultReturn(r0 BlameHunkReader, r1 error) {
	f.SetDefaultHook(func(context.Context, string, BlameOptions) (BlameHunkReader, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitBackendBlameFunc) PushReturn(r0 BlameHunkReader, r1 error) {
	f.PushHook(func(context.Context, string, BlameOptions) (BlameHunkReader, error) {
		return r0, r1
	})
}

func (f *GitBackendBlameFunc) nextHook() func(context.Context, string, BlameOptions) (BlameHunkReader, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitBackendBlameFunc) appendCall(r0 GitBackendBlameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitBackendBlameFuncCall objects describing
// the invocations of this function.
func (f *GitBackendBlameFunc) History() []GitBackendBlameFuncCall {
	f.mutex.Lock()
	history := make([]GitBackendBlameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitBackendBlameFuncCall is an object that describes an invocation of
// method Blame on an instance of MockGitBackend.
type GitBackendBlameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 BlameOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 BlameHunkReader
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitBackendBlameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitBackendBlameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitBackendConfigFunc describes the behavior when the Config method of the
// parent MockGitBackend instance is invoked.
type GitBackendConfigFunc struct {
	defaultHook func() GitConfigBackend
	hooks       []func() GitConfigBackend
	history     []GitBackendConfigFuncCall
	mutex       sync.Mutex
}

// Config delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitBackend) Config() GitConfigBackend {
	r0 := m.ConfigFunc.nextHook()()
	m.ConfigFunc.appendCall(GitBackendConfigFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Config method of the
// parent MockGitBackend instance is invoked and the hook queue is empty.
func (f *GitBackendConfigFunc) SetDefaultHook(hook func() GitConfigBackend) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Config method of the parent MockGitBackend instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GitBackendConfigFunc) PushHook(hook func() GitConfigBackend) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitBackendConfigFunc) SetDefaultReturn(r0 GitConfigBackend) {
	f.SetDefaultHook(func() GitConfigBackend {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitBackendConfigFunc) PushReturn(r0 GitConfigBackend) {
	f.PushHook(func() GitConfigBackend {
		return r0
	})
}

func (f *GitBackendConfigFunc) nextHook() func() GitConfigBackend {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitBackendConfigFunc) appendCall(r0 GitBackendConfigFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitBackendConfigFuncCall objects describing
// the invocations of this function.
func (f *GitBackendConfigFunc) History() []GitBackendConfigFuncCall {
	f.mutex.Lock()
	history := make([]GitBackendConfigFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitBackendConfigFuncCall is an object that describes an invocation of
// method Config on an instance of MockGitBackend.
type GitBackendConfigFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 GitConfigBackend
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitBackendConfigFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitBackendConfigFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitBackendExecFunc describes the behavior when the Exec method of the
// parent MockGitBackend instance is invoked.
type GitBackendExecFunc struct {
	defaultHook func(context.Context, ...string) (io.ReadCloser, error)
	hooks       []func(context.Context, ...string) (io.ReadCloser, error)
	history     []GitBackendExecFuncCall
	mutex       sync.Mutex
}

// Exec delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitBackend) Exec(v0 context.Context, v1 ...string) (io.ReadCloser, error) {
	r0, r1 := m.ExecFunc.nextHook()(v0, v1...)
	m.ExecFunc.appendCall(GitBackendExecFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Exec method of the
// parent MockGitBackend instance is invoked and the hook queue is empty.
func (f *GitBackendExecFunc) SetDefaultHook(hook func(context.Context, ...string) (io.ReadCloser, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Exec method of the parent MockGitBackend instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *GitBackendExecFunc) PushHook(hook func(context.Context, ...string) (io.ReadCloser, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitBackendExecFunc) SetDefaultReturn(r0 io.ReadCloser, r1 error) {
	f.SetDefaultHook(func(context.Context, ...string) (io.ReadCloser, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitBackendExecFunc) PushReturn(r0 io.ReadCloser, r1 error) {
	f.PushHook(func(context.Context, ...string) (io.ReadCloser, error) {
		return r0, r1
	})
}

func (f *GitBackendExecFunc) nextHook() func(context.Context, ...string) (io.ReadCloser, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitBackendExecFunc) appendCall(r0 GitBackendExecFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitBackendExecFuncCall objects describing
// the invocations of this function.
func (f *GitBackendExecFunc) History() []GitBackendExecFuncCall {
	f.mutex.Lock()
	history := make([]GitBackendExecFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitBackendExecFuncCall is an object that describes an invocation of
// method Exec on an instance of MockGitBackend.
type GitBackendExecFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 io.ReadCloser
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitBackendExecFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitBackendExecFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitBackendGetObjectFunc describes the behavior when the GetObject method
// of the parent MockGitBackend instance is invoked.
type GitBackendGetObjectFunc struct {
	defaultHook func(context.Context, string) (*gitdomain.GitObject, error)
	hooks       []func(context.Context, string) (*gitdomain.GitObject, error)
	history     []GitBackendGetObjectFuncCall
	mutex       sync.Mutex
}

// GetObject delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitBackend) GetObject(v0 context.Context, v1 string) (*gitdomain.GitObject, error) {
	r0, r1 := m.GetObjectFunc.nextHook()(v0, v1)
	m.GetObjectFunc.appendCall(GitBackendGetObjectFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetObject method of
// the parent MockGitBackend instance is invoked and the hook queue is
// empty.
func (f *GitBackendGetObjectFunc) SetDefaultHook(hook func(context.Context, string) (*gitdomain.GitObject, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetObject method of the parent MockGitBackend instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GitBackendGetObjectFunc) PushHook(hook func(context.Context, string) (*gitdomain.GitObject, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitBackendGetObjectFunc) SetDefaultReturn(r0 *gitdomain.GitObject, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*gitdomain.GitObject, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitBackendGetObjectFunc) PushReturn(r0 *gitdomain.GitObject, r1 error) {
	f.PushHook(func(context.Context, string) (*gitdomain.GitObject, error) {
		return r0, r1
	})
}

func (f *GitBackendGetObjectFunc) nextHook() func(context.Context, string) (*gitdomain.GitObject, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitBackendGetObjectFunc) appendCall(r0 GitBackendGetObjectFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitBackendGetObjectFuncCall objects
// describing the invocations of this function.
func (f *GitBackendGetObjectFunc) History() []GitBackendGetObjectFuncCall {
	f.mutex.Lock()
	history := make([]GitBackendGetObjectFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitBackendGetObjectFuncCall is an object that describes an invocation of
// method GetObject on an instance of MockGitBackend.
type GitBackendGetObjectFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *gitdomain.GitObject
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitBackendGetObjectFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitBackendGetObjectFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitBackendMergeBaseFunc describes the behavior when the MergeBase method
// of the parent MockGitBackend instance is invoked.
type GitBackendMergeBaseFunc struct {
	defaultHook func(context.Context, string, string) (api.CommitID, error)
	hooks       []func(context.Context, string, string) (api.CommitID, error)
	history     []GitBackendMergeBaseFuncCall
	mutex       sync.Mutex
}

// MergeBase delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitBackend) MergeBase(v0 context.Context, v1 string, v2 string) (api.CommitID, error) {
	r0, r1 := m.MergeBaseFunc.nextHook()(v0, v1, v2)
	m.MergeBaseFunc.appendCall(GitBackendMergeBaseFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MergeBase method of
// the parent MockGitBackend instance is invoked and the hook queue is
// empty.
func (f *GitBackendMergeBaseFunc) SetDefaultHook(hook func(context.Context, string, string) (api.CommitID, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MergeBase method of the parent MockGitBackend instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GitBackendMergeBaseFunc) PushHook(hook func(context.Context, string, string) (api.CommitID, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitBackendMergeBaseFunc) SetDefaultReturn(r0 api.CommitID, r1 error) {
	f.SetDefaultHook(func(context.Context, string, string) (api.CommitID, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitBackendMergeBaseFunc) PushReturn(r0 api.CommitID, r1 error) {
	f.PushHook(func(context.Context, string, string) (api.CommitID, error) {
		return r0, r1
	})
}

func (f *GitBackendMergeBaseFunc) nextHook() func(context.Context, string, string) (api.CommitID, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitBackendMergeBaseFunc) appendCall(r0 GitBackendMergeBaseFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitBackendMergeBaseFuncCall objects
// describing the invocations of this function.
func (f *GitBackendMergeBaseFunc) History() []GitBackendMergeBaseFuncCall {
	f.mutex.Lock()
	history := make([]GitBackendMergeBaseFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitBackendMergeBaseFuncCall is an object that describes an invocation of
// method MergeBase on an instance of MockGitBackend.
type GitBackendMergeBaseFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 api.CommitID
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitBackendMergeBaseFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitBackendMergeBaseFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockGitConfigBackend is a mock implementation of the GitConfigBackend
// interface (from the package
// github.com/sourcegraph/sourcegraph/cmd/gitserver/internal/git) used for
// unit testing.
type MockGitConfigBackend struct {
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *GitConfigBackendGetFunc
	// SetFunc is an instance of a mock function object controlling the
	// behavior of the method Set.
	SetFunc *GitConfigBackendSetFunc
	// UnsetFunc is an instance of a mock function object controlling the
	// behavior of the method Unset.
	UnsetFunc *GitConfigBackendUnsetFunc
}

// NewMockGitConfigBackend creates a new mock of the GitConfigBackend
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockGitConfigBackend() *MockGitConfigBackend {
	return &MockGitConfigBackend{
		GetFunc: &GitConfigBackendGetFunc{
			defaultHook: func(context.Context, string) (r0 string, r1 error) {
				return
			},
		},
		SetFunc: &GitConfigBackendSetFunc{
			defaultHook: func(context.Context, string, string) (r0 error) {
				return
			},
		},
		UnsetFunc: &GitConfigBackendUnsetFunc{
			defaultHook: func(context.Context, string) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockGitConfigBackend creates a new mock of the GitConfigBackend
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockGitConfigBackend() *MockGitConfigBackend {
	return &MockGitConfigBackend{
		GetFunc: &GitConfigBackendGetFunc{
			defaultHook: func(context.Context, string) (string, error) {
				panic("unexpected invocation of MockGitConfigBackend.Get")
			},
		},
		SetFunc: &GitConfigBackendSetFunc{
			defaultHook: func(context.Context, string, string) error {
				panic("unexpected invocation of MockGitConfigBackend.Set")
			},
		},
		UnsetFunc: &GitConfigBackendUnsetFunc{
			defaultHook: func(context.Context, string) error {
				panic("unexpected invocation of MockGitConfigBackend.Unset")
			},
		},
	}
}

// NewMockGitConfigBackendFrom creates a new mock of the
// MockGitConfigBackend interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockGitConfigBackendFrom(i GitConfigBackend) *MockGitConfigBackend {
	return &MockGitConfigBackend{
		GetFunc: &GitConfigBackendGetFunc{
			defaultHook: i.Get,
		},
		SetFunc: &GitConfigBackendSetFunc{
			defaultHook: i.Set,
		},
		UnsetFunc: &GitConfigBackendUnsetFunc{
			defaultHook: i.Unset,
		},
	}
}

// GitConfigBackendGetFunc describes the behavior when the Get method of the
// parent MockGitConfigBackend instance is invoked.
type GitConfigBackendGetFunc struct {
	defaultHook func(context.Context, string) (string, error)
	hooks       []func(context.Context, string) (string, error)
	history     []GitConfigBackendGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitConfigBackend) Get(v0 context.Context, v1 string) (string, error) {
	r0, r1 := m.GetFunc.nextHook()(v0, v1)
	m.GetFunc.appendCall(GitConfigBackendGetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockGitConfigBackend instance is invoked and the hook queue is
// empty.
func (f *GitConfigBackendGetFunc) SetDefaultHook(hook func(context.Context, string) (string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockGitConfigBackend instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GitConfigBackendGetFunc) PushHook(hook func(context.Context, string) (string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitConfigBackendGetFunc) SetDefaultReturn(r0 string, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitConfigBackendGetFunc) PushReturn(r0 string, r1 error) {
	f.PushHook(func(context.Context, string) (string, error) {
		return r0, r1
	})
}

func (f *GitConfigBackendGetFunc) nextHook() func(context.Context, string) (string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitConfigBackendGetFunc) appendCall(r0 GitConfigBackendGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitConfigBackendGetFuncCall objects
// describing the invocations of this function.
func (f *GitConfigBackendGetFunc) History() []GitConfigBackendGetFuncCall {
	f.mutex.Lock()
	history := make([]GitConfigBackendGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitConfigBackendGetFuncCall is an object that describes an invocation of
// method Get on an instance of MockGitConfigBackend.
type GitConfigBackendGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitConfigBackendGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitConfigBackendGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitConfigBackendSetFunc describes the behavior when the Set method of the
// parent MockGitConfigBackend instance is invoked.
type GitConfigBackendSetFunc struct {
	defaultHook func(context.Context, string, string) error
	hooks       []func(context.Context, string, string) error
	history     []GitConfigBackendSetFuncCall
	mutex       sync.Mutex
}

// Set delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitConfigBackend) Set(v0 context.Context, v1 string, v2 string) error {
	r0 := m.SetFunc.nextHook()(v0, v1, v2)
	m.SetFunc.appendCall(GitConfigBackendSetFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Set method of the
// parent MockGitConfigBackend instance is invoked and the hook queue is
// empty.
func (f *GitConfigBackendSetFunc) SetDefaultHook(hook func(context.Context, string, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Set method of the parent MockGitConfigBackend instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GitConfigBackendSetFunc) PushHook(hook func(context.Context, string, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitConfigBackendSetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitConfigBackendSetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string, string) error {
		return r0
	})
}

func (f *GitConfigBackendSetFunc) nextHook() func(context.Context, string, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitConfigBackendSetFunc) appendCall(r0 GitConfigBackendSetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitConfigBackendSetFuncCall objects
// describing the invocations of this function.
func (f *GitConfigBackendSetFunc) History() []GitConfigBackendSetFuncCall {
	f.mutex.Lock()
	history := make([]GitConfigBackendSetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitConfigBackendSetFuncCall is an object that describes an invocation of
// method Set on an instance of MockGitConfigBackend.
type GitConfigBackendSetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitConfigBackendSetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitConfigBackendSetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitConfigBackendUnsetFunc describes the behavior when the Unset method of
// the parent MockGitConfigBackend instance is invoked.
type GitConfigBackendUnsetFunc struct {
	defaultHook func(context.Context, string) error
	hooks       []func(context.Context, string) error
	history     []GitConfigBackendUnsetFuncCall
	mutex       sync.Mutex
}

// Unset delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitConfigBackend) Unset(v0 context.Context, v1 string) error {
	r0 := m.UnsetFunc.nextHook()(v0, v1)
	m.UnsetFunc.appendCall(GitConfigBackendUnsetFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Unset method of the
// parent MockGitConfigBackend instance is invoked and the hook queue is
// empty.
func (f *GitConfigBackendUnsetFunc) SetDefaultHook(hook func(context.Context, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Unset method of the parent MockGitConfigBackend instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GitConfigBackendUnsetFunc) PushHook(hook func(context.Context, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitConfigBackendUnsetFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitConfigBackendUnsetFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string) error {
		return r0
	})
}

func (f *GitConfigBackendUnsetFunc) nextHook() func(context.Context, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitConfigBackendUnsetFunc) appendCall(r0 GitConfigBackendUnsetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitConfigBackendUnsetFuncCall objects
// describing the invocations of this function.
func (f *GitConfigBackendUnsetFunc) History() []GitConfigBackendUnsetFuncCall {
	f.mutex.Lock()
	history := make([]GitConfigBackendUnsetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitConfigBackendUnsetFuncCall is an object that describes an invocation
// of method Unset on an instance of MockGitConfigBackend.
type GitConfigBackendUnsetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitConfigBackendUnsetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitConfigBackendUnsetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
