// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package subscriptionsservice

import (
	"context"
	"sync"

	sourcegraphaccountssdkgo "github.com/sourcegraph/sourcegraph-accounts-sdk-go"
	v1 "github.com/sourcegraph/sourcegraph-accounts-sdk-go/clients/v1"
	database "github.com/sourcegraph/sourcegraph/cmd/enterprise-portal/internal/database"
	dotcomdb "github.com/sourcegraph/sourcegraph/cmd/enterprise-portal/internal/dotcomdb"
	v11 "github.com/sourcegraph/sourcegraph/lib/enterpriseportal/subscriptions/v1"
	iam "github.com/sourcegraph/sourcegraph/lib/managedservicesplatform/iam"
)

// MockStoreV1 is a mock implementation of the StoreV1 interface (from the
// package
// github.com/sourcegraph/sourcegraph/cmd/enterprise-portal/internal/subscriptionsservice)
// used for unit testing.
type MockStoreV1 struct {
	// GetSAMSUserByIDFunc is an instance of a mock function object
	// controlling the behavior of the method GetSAMSUserByID.
	GetSAMSUserByIDFunc *StoreV1GetSAMSUserByIDFunc
	// IAMCheckFunc is an instance of a mock function object controlling the
	// behavior of the method IAMCheck.
	IAMCheckFunc *StoreV1IAMCheckFunc
	// IAMListObjectsFunc is an instance of a mock function object
	// controlling the behavior of the method IAMListObjects.
	IAMListObjectsFunc *StoreV1IAMListObjectsFunc
	// IAMWriteFunc is an instance of a mock function object controlling the
	// behavior of the method IAMWrite.
	IAMWriteFunc *StoreV1IAMWriteFunc
	// IntrospectSAMSTokenFunc is an instance of a mock function object
	// controlling the behavior of the method IntrospectSAMSToken.
	IntrospectSAMSTokenFunc *StoreV1IntrospectSAMSTokenFunc
	// ListDotcomEnterpriseSubscriptionLicensesFunc is an instance of a mock
	// function object controlling the behavior of the method
	// ListDotcomEnterpriseSubscriptionLicenses.
	ListDotcomEnterpriseSubscriptionLicensesFunc *StoreV1ListDotcomEnterpriseSubscriptionLicensesFunc
	// ListDotcomEnterpriseSubscriptionsFunc is an instance of a mock
	// function object controlling the behavior of the method
	// ListDotcomEnterpriseSubscriptions.
	ListDotcomEnterpriseSubscriptionsFunc *StoreV1ListDotcomEnterpriseSubscriptionsFunc
	// ListEnterpriseSubscriptionsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// ListEnterpriseSubscriptions.
	ListEnterpriseSubscriptionsFunc *StoreV1ListEnterpriseSubscriptionsFunc
	// UpsertEnterpriseSubscriptionFunc is an instance of a mock function
	// object controlling the behavior of the method
	// UpsertEnterpriseSubscription.
	UpsertEnterpriseSubscriptionFunc *StoreV1UpsertEnterpriseSubscriptionFunc
}

// NewMockStoreV1 creates a new mock of the StoreV1 interface. All methods
// return zero values for all results, unless overwritten.
func NewMockStoreV1() *MockStoreV1 {
	return &MockStoreV1{
		GetSAMSUserByIDFunc: &StoreV1GetSAMSUserByIDFunc{
			defaultHook: func(context.Context, string) (r0 *v1.User, r1 error) {
				return
			},
		},
		IAMCheckFunc: &StoreV1IAMCheckFunc{
			defaultHook: func(context.Context, iam.CheckOptions) (r0 bool, r1 error) {
				return
			},
		},
		IAMListObjectsFunc: &StoreV1IAMListObjectsFunc{
			defaultHook: func(context.Context, iam.ListObjectsOptions) (r0 []string, r1 error) {
				return
			},
		},
		IAMWriteFunc: &StoreV1IAMWriteFunc{
			defaultHook: func(context.Context, iam.WriteOptions) (r0 error) {
				return
			},
		},
		IntrospectSAMSTokenFunc: &StoreV1IntrospectSAMSTokenFunc{
			defaultHook: func(context.Context, string) (r0 *sourcegraphaccountssdkgo.IntrospectTokenResponse, r1 error) {
				return
			},
		},
		ListDotcomEnterpriseSubscriptionLicensesFunc: &StoreV1ListDotcomEnterpriseSubscriptionLicensesFunc{
			defaultHook: func(context.Context, []*v11.ListEnterpriseSubscriptionLicensesFilter, int) (r0 []*dotcomdb.LicenseAttributes, r1 error) {
				return
			},
		},
		ListDotcomEnterpriseSubscriptionsFunc: &StoreV1ListDotcomEnterpriseSubscriptionsFunc{
			defaultHook: func(context.Context, ...string) (r0 []*dotcomdb.SubscriptionAttributes, r1 error) {
				return
			},
		},
		ListEnterpriseSubscriptionsFunc: &StoreV1ListEnterpriseSubscriptionsFunc{
			defaultHook: func(context.Context, database.ListEnterpriseSubscriptionsOptions) (r0 []*database.Subscription, r1 error) {
				return
			},
		},
		UpsertEnterpriseSubscriptionFunc: &StoreV1UpsertEnterpriseSubscriptionFunc{
			defaultHook: func(context.Context, string, database.UpsertSubscriptionOptions) (r0 *database.Subscription, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockStoreV1 creates a new mock of the StoreV1 interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockStoreV1() *MockStoreV1 {
	return &MockStoreV1{
		GetSAMSUserByIDFunc: &StoreV1GetSAMSUserByIDFunc{
			defaultHook: func(context.Context, string) (*v1.User, error) {
				panic("unexpected invocation of MockStoreV1.GetSAMSUserByID")
			},
		},
		IAMCheckFunc: &StoreV1IAMCheckFunc{
			defaultHook: func(context.Context, iam.CheckOptions) (bool, error) {
				panic("unexpected invocation of MockStoreV1.IAMCheck")
			},
		},
		IAMListObjectsFunc: &StoreV1IAMListObjectsFunc{
			defaultHook: func(context.Context, iam.ListObjectsOptions) ([]string, error) {
				panic("unexpected invocation of MockStoreV1.IAMListObjects")
			},
		},
		IAMWriteFunc: &StoreV1IAMWriteFunc{
			defaultHook: func(context.Context, iam.WriteOptions) error {
				panic("unexpected invocation of MockStoreV1.IAMWrite")
			},
		},
		IntrospectSAMSTokenFunc: &StoreV1IntrospectSAMSTokenFunc{
			defaultHook: func(context.Context, string) (*sourcegraphaccountssdkgo.IntrospectTokenResponse, error) {
				panic("unexpected invocation of MockStoreV1.IntrospectSAMSToken")
			},
		},
		ListDotcomEnterpriseSubscriptionLicensesFunc: &StoreV1ListDotcomEnterpriseSubscriptionLicensesFunc{
			defaultHook: func(context.Context, []*v11.ListEnterpriseSubscriptionLicensesFilter, int) ([]*dotcomdb.LicenseAttributes, error) {
				panic("unexpected invocation of MockStoreV1.ListDotcomEnterpriseSubscriptionLicenses")
			},
		},
		ListDotcomEnterpriseSubscriptionsFunc: &StoreV1ListDotcomEnterpriseSubscriptionsFunc{
			defaultHook: func(context.Context, ...string) ([]*dotcomdb.SubscriptionAttributes, error) {
				panic("unexpected invocation of MockStoreV1.ListDotcomEnterpriseSubscriptions")
			},
		},
		ListEnterpriseSubscriptionsFunc: &StoreV1ListEnterpriseSubscriptionsFunc{
			defaultHook: func(context.Context, database.ListEnterpriseSubscriptionsOptions) ([]*database.Subscription, error) {
				panic("unexpected invocation of MockStoreV1.ListEnterpriseSubscriptions")
			},
		},
		UpsertEnterpriseSubscriptionFunc: &StoreV1UpsertEnterpriseSubscriptionFunc{
			defaultHook: func(context.Context, string, database.UpsertSubscriptionOptions) (*database.Subscription, error) {
				panic("unexpected invocation of MockStoreV1.UpsertEnterpriseSubscription")
			},
		},
	}
}

// NewMockStoreV1From creates a new mock of the MockStoreV1 interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockStoreV1From(i StoreV1) *MockStoreV1 {
	return &MockStoreV1{
		GetSAMSUserByIDFunc: &StoreV1GetSAMSUserByIDFunc{
			defaultHook: i.GetSAMSUserByID,
		},
		IAMCheckFunc: &StoreV1IAMCheckFunc{
			defaultHook: i.IAMCheck,
		},
		IAMListObjectsFunc: &StoreV1IAMListObjectsFunc{
			defaultHook: i.IAMListObjects,
		},
		IAMWriteFunc: &StoreV1IAMWriteFunc{
			defaultHook: i.IAMWrite,
		},
		IntrospectSAMSTokenFunc: &StoreV1IntrospectSAMSTokenFunc{
			defaultHook: i.IntrospectSAMSToken,
		},
		ListDotcomEnterpriseSubscriptionLicensesFunc: &StoreV1ListDotcomEnterpriseSubscriptionLicensesFunc{
			defaultHook: i.ListDotcomEnterpriseSubscriptionLicenses,
		},
		ListDotcomEnterpriseSubscriptionsFunc: &StoreV1ListDotcomEnterpriseSubscriptionsFunc{
			defaultHook: i.ListDotcomEnterpriseSubscriptions,
		},
		ListEnterpriseSubscriptionsFunc: &StoreV1ListEnterpriseSubscriptionsFunc{
			defaultHook: i.ListEnterpriseSubscriptions,
		},
		UpsertEnterpriseSubscriptionFunc: &StoreV1UpsertEnterpriseSubscriptionFunc{
			defaultHook: i.UpsertEnterpriseSubscription,
		},
	}
}

// StoreV1GetSAMSUserByIDFunc describes the behavior when the
// GetSAMSUserByID method of the parent MockStoreV1 instance is invoked.
type StoreV1GetSAMSUserByIDFunc struct {
	defaultHook func(context.Context, string) (*v1.User, error)
	hooks       []func(context.Context, string) (*v1.User, error)
	history     []StoreV1GetSAMSUserByIDFuncCall
	mutex       sync.Mutex
}

// GetSAMSUserByID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStoreV1) GetSAMSUserByID(v0 context.Context, v1 string) (*v1.User, error) {
	r0, r1 := m.GetSAMSUserByIDFunc.nextHook()(v0, v1)
	m.GetSAMSUserByIDFunc.appendCall(StoreV1GetSAMSUserByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetSAMSUserByID
// method of the parent MockStoreV1 instance is invoked and the hook queue
// is empty.
func (f *StoreV1GetSAMSUserByIDFunc) SetDefaultHook(hook func(context.Context, string) (*v1.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetSAMSUserByID method of the parent MockStoreV1 instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StoreV1GetSAMSUserByIDFunc) PushHook(hook func(context.Context, string) (*v1.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreV1GetSAMSUserByIDFunc) SetDefaultReturn(r0 *v1.User, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*v1.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreV1GetSAMSUserByIDFunc) PushReturn(r0 *v1.User, r1 error) {
	f.PushHook(func(context.Context, string) (*v1.User, error) {
		return r0, r1
	})
}

func (f *StoreV1GetSAMSUserByIDFunc) nextHook() func(context.Context, string) (*v1.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreV1GetSAMSUserByIDFunc) appendCall(r0 StoreV1GetSAMSUserByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreV1GetSAMSUserByIDFuncCall objects
// describing the invocations of this function.
func (f *StoreV1GetSAMSUserByIDFunc) History() []StoreV1GetSAMSUserByIDFuncCall {
	f.mutex.Lock()
	history := make([]StoreV1GetSAMSUserByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreV1GetSAMSUserByIDFuncCall is an object that describes an invocation
// of method GetSAMSUserByID on an instance of MockStoreV1.
type StoreV1GetSAMSUserByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreV1GetSAMSUserByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreV1GetSAMSUserByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreV1IAMCheckFunc describes the behavior when the IAMCheck method of
// the parent MockStoreV1 instance is invoked.
type StoreV1IAMCheckFunc struct {
	defaultHook func(context.Context, iam.CheckOptions) (bool, error)
	hooks       []func(context.Context, iam.CheckOptions) (bool, error)
	history     []StoreV1IAMCheckFuncCall
	mutex       sync.Mutex
}

// IAMCheck delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStoreV1) IAMCheck(v0 context.Context, v1 iam.CheckOptions) (bool, error) {
	r0, r1 := m.IAMCheckFunc.nextHook()(v0, v1)
	m.IAMCheckFunc.appendCall(StoreV1IAMCheckFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IAMCheck method of
// the parent MockStoreV1 instance is invoked and the hook queue is empty.
func (f *StoreV1IAMCheckFunc) SetDefaultHook(hook func(context.Context, iam.CheckOptions) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IAMCheck method of the parent MockStoreV1 instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreV1IAMCheckFunc) PushHook(hook func(context.Context, iam.CheckOptions) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreV1IAMCheckFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, iam.CheckOptions) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreV1IAMCheckFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, iam.CheckOptions) (bool, error) {
		return r0, r1
	})
}

func (f *StoreV1IAMCheckFunc) nextHook() func(context.Context, iam.CheckOptions) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreV1IAMCheckFunc) appendCall(r0 StoreV1IAMCheckFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreV1IAMCheckFuncCall objects describing
// the invocations of this function.
func (f *StoreV1IAMCheckFunc) History() []StoreV1IAMCheckFuncCall {
	f.mutex.Lock()
	history := make([]StoreV1IAMCheckFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreV1IAMCheckFuncCall is an object that describes an invocation of
// method IAMCheck on an instance of MockStoreV1.
type StoreV1IAMCheckFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 iam.CheckOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreV1IAMCheckFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreV1IAMCheckFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreV1IAMListObjectsFunc describes the behavior when the IAMListObjects
// method of the parent MockStoreV1 instance is invoked.
type StoreV1IAMListObjectsFunc struct {
	defaultHook func(context.Context, iam.ListObjectsOptions) ([]string, error)
	hooks       []func(context.Context, iam.ListObjectsOptions) ([]string, error)
	history     []StoreV1IAMListObjectsFuncCall
	mutex       sync.Mutex
}

// IAMListObjects delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStoreV1) IAMListObjects(v0 context.Context, v1 iam.ListObjectsOptions) ([]string, error) {
	r0, r1 := m.IAMListObjectsFunc.nextHook()(v0, v1)
	m.IAMListObjectsFunc.appendCall(StoreV1IAMListObjectsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IAMListObjects
// method of the parent MockStoreV1 instance is invoked and the hook queue
// is empty.
func (f *StoreV1IAMListObjectsFunc) SetDefaultHook(hook func(context.Context, iam.ListObjectsOptions) ([]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IAMListObjects method of the parent MockStoreV1 instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreV1IAMListObjectsFunc) PushHook(hook func(context.Context, iam.ListObjectsOptions) ([]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreV1IAMListObjectsFunc) SetDefaultReturn(r0 []string, r1 error) {
	f.SetDefaultHook(func(context.Context, iam.ListObjectsOptions) ([]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreV1IAMListObjectsFunc) PushReturn(r0 []string, r1 error) {
	f.PushHook(func(context.Context, iam.ListObjectsOptions) ([]string, error) {
		return r0, r1
	})
}

func (f *StoreV1IAMListObjectsFunc) nextHook() func(context.Context, iam.ListObjectsOptions) ([]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreV1IAMListObjectsFunc) appendCall(r0 StoreV1IAMListObjectsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreV1IAMListObjectsFuncCall objects
// describing the invocations of this function.
func (f *StoreV1IAMListObjectsFunc) History() []StoreV1IAMListObjectsFuncCall {
	f.mutex.Lock()
	history := make([]StoreV1IAMListObjectsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreV1IAMListObjectsFuncCall is an object that describes an invocation
// of method IAMListObjects on an instance of MockStoreV1.
type StoreV1IAMListObjectsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 iam.ListObjectsOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreV1IAMListObjectsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreV1IAMListObjectsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreV1IAMWriteFunc describes the behavior when the IAMWrite method of
// the parent MockStoreV1 instance is invoked.
type StoreV1IAMWriteFunc struct {
	defaultHook func(context.Context, iam.WriteOptions) error
	hooks       []func(context.Context, iam.WriteOptions) error
	history     []StoreV1IAMWriteFuncCall
	mutex       sync.Mutex
}

// IAMWrite delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStoreV1) IAMWrite(v0 context.Context, v1 iam.WriteOptions) error {
	r0 := m.IAMWriteFunc.nextHook()(v0, v1)
	m.IAMWriteFunc.appendCall(StoreV1IAMWriteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the IAMWrite method of
// the parent MockStoreV1 instance is invoked and the hook queue is empty.
func (f *StoreV1IAMWriteFunc) SetDefaultHook(hook func(context.Context, iam.WriteOptions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IAMWrite method of the parent MockStoreV1 instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreV1IAMWriteFunc) PushHook(hook func(context.Context, iam.WriteOptions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreV1IAMWriteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, iam.WriteOptions) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreV1IAMWriteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, iam.WriteOptions) error {
		return r0
	})
}

func (f *StoreV1IAMWriteFunc) nextHook() func(context.Context, iam.WriteOptions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreV1IAMWriteFunc) appendCall(r0 StoreV1IAMWriteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreV1IAMWriteFuncCall objects describing
// the invocations of this function.
func (f *StoreV1IAMWriteFunc) History() []StoreV1IAMWriteFuncCall {
	f.mutex.Lock()
	history := make([]StoreV1IAMWriteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreV1IAMWriteFuncCall is an object that describes an invocation of
// method IAMWrite on an instance of MockStoreV1.
type StoreV1IAMWriteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 iam.WriteOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreV1IAMWriteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreV1IAMWriteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreV1IntrospectSAMSTokenFunc describes the behavior when the
// IntrospectSAMSToken method of the parent MockStoreV1 instance is invoked.
type StoreV1IntrospectSAMSTokenFunc struct {
	defaultHook func(context.Context, string) (*sourcegraphaccountssdkgo.IntrospectTokenResponse, error)
	hooks       []func(context.Context, string) (*sourcegraphaccountssdkgo.IntrospectTokenResponse, error)
	history     []StoreV1IntrospectSAMSTokenFuncCall
	mutex       sync.Mutex
}

// IntrospectSAMSToken delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStoreV1) IntrospectSAMSToken(v0 context.Context, v1 string) (*sourcegraphaccountssdkgo.IntrospectTokenResponse, error) {
	r0, r1 := m.IntrospectSAMSTokenFunc.nextHook()(v0, v1)
	m.IntrospectSAMSTokenFunc.appendCall(StoreV1IntrospectSAMSTokenFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IntrospectSAMSToken
// method of the parent MockStoreV1 instance is invoked and the hook queue
// is empty.
func (f *StoreV1IntrospectSAMSTokenFunc) SetDefaultHook(hook func(context.Context, string) (*sourcegraphaccountssdkgo.IntrospectTokenResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IntrospectSAMSToken method of the parent MockStoreV1 instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StoreV1IntrospectSAMSTokenFunc) PushHook(hook func(context.Context, string) (*sourcegraphaccountssdkgo.IntrospectTokenResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreV1IntrospectSAMSTokenFunc) SetDefaultReturn(r0 *sourcegraphaccountssdkgo.IntrospectTokenResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*sourcegraphaccountssdkgo.IntrospectTokenResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreV1IntrospectSAMSTokenFunc) PushReturn(r0 *sourcegraphaccountssdkgo.IntrospectTokenResponse, r1 error) {
	f.PushHook(func(context.Context, string) (*sourcegraphaccountssdkgo.IntrospectTokenResponse, error) {
		return r0, r1
	})
}

func (f *StoreV1IntrospectSAMSTokenFunc) nextHook() func(context.Context, string) (*sourcegraphaccountssdkgo.IntrospectTokenResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreV1IntrospectSAMSTokenFunc) appendCall(r0 StoreV1IntrospectSAMSTokenFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreV1IntrospectSAMSTokenFuncCall objects
// describing the invocations of this function.
func (f *StoreV1IntrospectSAMSTokenFunc) History() []StoreV1IntrospectSAMSTokenFuncCall {
	f.mutex.Lock()
	history := make([]StoreV1IntrospectSAMSTokenFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreV1IntrospectSAMSTokenFuncCall is an object that describes an
// invocation of method IntrospectSAMSToken on an instance of MockStoreV1.
type StoreV1IntrospectSAMSTokenFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *sourcegraphaccountssdkgo.IntrospectTokenResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreV1IntrospectSAMSTokenFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreV1IntrospectSAMSTokenFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreV1ListDotcomEnterpriseSubscriptionLicensesFunc describes the
// behavior when the ListDotcomEnterpriseSubscriptionLicenses method of the
// parent MockStoreV1 instance is invoked.
type StoreV1ListDotcomEnterpriseSubscriptionLicensesFunc struct {
	defaultHook func(context.Context, []*v11.ListEnterpriseSubscriptionLicensesFilter, int) ([]*dotcomdb.LicenseAttributes, error)
	hooks       []func(context.Context, []*v11.ListEnterpriseSubscriptionLicensesFilter, int) ([]*dotcomdb.LicenseAttributes, error)
	history     []StoreV1ListDotcomEnterpriseSubscriptionLicensesFuncCall
	mutex       sync.Mutex
}

// ListDotcomEnterpriseSubscriptionLicenses delegates to the next hook
// function in the queue and stores the parameter and result values of this
// invocation.
func (m *MockStoreV1) ListDotcomEnterpriseSubscriptionLicenses(v0 context.Context, v1 []*v11.ListEnterpriseSubscriptionLicensesFilter, v2 int) ([]*dotcomdb.LicenseAttributes, error) {
	r0, r1 := m.ListDotcomEnterpriseSubscriptionLicensesFunc.nextHook()(v0, v1, v2)
	m.ListDotcomEnterpriseSubscriptionLicensesFunc.appendCall(StoreV1ListDotcomEnterpriseSubscriptionLicensesFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ListDotcomEnterpriseSubscriptionLicenses method of the parent MockStoreV1
// instance is invoked and the hook queue is empty.
func (f *StoreV1ListDotcomEnterpriseSubscriptionLicensesFunc) SetDefaultHook(hook func(context.Context, []*v11.ListEnterpriseSubscriptionLicensesFilter, int) ([]*dotcomdb.LicenseAttributes, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListDotcomEnterpriseSubscriptionLicenses method of the parent MockStoreV1
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *StoreV1ListDotcomEnterpriseSubscriptionLicensesFunc) PushHook(hook func(context.Context, []*v11.ListEnterpriseSubscriptionLicensesFilter, int) ([]*dotcomdb.LicenseAttributes, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreV1ListDotcomEnterpriseSubscriptionLicensesFunc) SetDefaultReturn(r0 []*dotcomdb.LicenseAttributes, r1 error) {
	f.SetDefaultHook(func(context.Context, []*v11.ListEnterpriseSubscriptionLicensesFilter, int) ([]*dotcomdb.LicenseAttributes, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreV1ListDotcomEnterpriseSubscriptionLicensesFunc) PushReturn(r0 []*dotcomdb.LicenseAttributes, r1 error) {
	f.PushHook(func(context.Context, []*v11.ListEnterpriseSubscriptionLicensesFilter, int) ([]*dotcomdb.LicenseAttributes, error) {
		return r0, r1
	})
}

func (f *StoreV1ListDotcomEnterpriseSubscriptionLicensesFunc) nextHook() func(context.Context, []*v11.ListEnterpriseSubscriptionLicensesFilter, int) ([]*dotcomdb.LicenseAttributes, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreV1ListDotcomEnterpriseSubscriptionLicensesFunc) appendCall(r0 StoreV1ListDotcomEnterpriseSubscriptionLicensesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// StoreV1ListDotcomEnterpriseSubscriptionLicensesFuncCall objects
// describing the invocations of this function.
func (f *StoreV1ListDotcomEnterpriseSubscriptionLicensesFunc) History() []StoreV1ListDotcomEnterpriseSubscriptionLicensesFuncCall {
	f.mutex.Lock()
	history := make([]StoreV1ListDotcomEnterpriseSubscriptionLicensesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreV1ListDotcomEnterpriseSubscriptionLicensesFuncCall is an object that
// describes an invocation of method
// ListDotcomEnterpriseSubscriptionLicenses on an instance of MockStoreV1.
type StoreV1ListDotcomEnterpriseSubscriptionLicensesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []*v11.ListEnterpriseSubscriptionLicensesFilter
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*dotcomdb.LicenseAttributes
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreV1ListDotcomEnterpriseSubscriptionLicensesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreV1ListDotcomEnterpriseSubscriptionLicensesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreV1ListDotcomEnterpriseSubscriptionsFunc describes the behavior when
// the ListDotcomEnterpriseSubscriptions method of the parent MockStoreV1
// instance is invoked.
type StoreV1ListDotcomEnterpriseSubscriptionsFunc struct {
	defaultHook func(context.Context, ...string) ([]*dotcomdb.SubscriptionAttributes, error)
	hooks       []func(context.Context, ...string) ([]*dotcomdb.SubscriptionAttributes, error)
	history     []StoreV1ListDotcomEnterpriseSubscriptionsFuncCall
	mutex       sync.Mutex
}

// ListDotcomEnterpriseSubscriptions delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockStoreV1) ListDotcomEnterpriseSubscriptions(v0 context.Context, v1 ...string) ([]*dotcomdb.SubscriptionAttributes, error) {
	r0, r1 := m.ListDotcomEnterpriseSubscriptionsFunc.nextHook()(v0, v1...)
	m.ListDotcomEnterpriseSubscriptionsFunc.appendCall(StoreV1ListDotcomEnterpriseSubscriptionsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ListDotcomEnterpriseSubscriptions method of the parent MockStoreV1
// instance is invoked and the hook queue is empty.
func (f *StoreV1ListDotcomEnterpriseSubscriptionsFunc) SetDefaultHook(hook func(context.Context, ...string) ([]*dotcomdb.SubscriptionAttributes, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListDotcomEnterpriseSubscriptions method of the parent MockStoreV1
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *StoreV1ListDotcomEnterpriseSubscriptionsFunc) PushHook(hook func(context.Context, ...string) ([]*dotcomdb.SubscriptionAttributes, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreV1ListDotcomEnterpriseSubscriptionsFunc) SetDefaultReturn(r0 []*dotcomdb.SubscriptionAttributes, r1 error) {
	f.SetDefaultHook(func(context.Context, ...string) ([]*dotcomdb.SubscriptionAttributes, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreV1ListDotcomEnterpriseSubscriptionsFunc) PushReturn(r0 []*dotcomdb.SubscriptionAttributes, r1 error) {
	f.PushHook(func(context.Context, ...string) ([]*dotcomdb.SubscriptionAttributes, error) {
		return r0, r1
	})
}

func (f *StoreV1ListDotcomEnterpriseSubscriptionsFunc) nextHook() func(context.Context, ...string) ([]*dotcomdb.SubscriptionAttributes, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreV1ListDotcomEnterpriseSubscriptionsFunc) appendCall(r0 StoreV1ListDotcomEnterpriseSubscriptionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// StoreV1ListDotcomEnterpriseSubscriptionsFuncCall objects describing the
// invocations of this function.
func (f *StoreV1ListDotcomEnterpriseSubscriptionsFunc) History() []StoreV1ListDotcomEnterpriseSubscriptionsFuncCall {
	f.mutex.Lock()
	history := make([]StoreV1ListDotcomEnterpriseSubscriptionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreV1ListDotcomEnterpriseSubscriptionsFuncCall is an object that
// describes an invocation of method ListDotcomEnterpriseSubscriptions on an
// instance of MockStoreV1.
type StoreV1ListDotcomEnterpriseSubscriptionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*dotcomdb.SubscriptionAttributes
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c StoreV1ListDotcomEnterpriseSubscriptionsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreV1ListDotcomEnterpriseSubscriptionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreV1ListEnterpriseSubscriptionsFunc describes the behavior when the
// ListEnterpriseSubscriptions method of the parent MockStoreV1 instance is
// invoked.
type StoreV1ListEnterpriseSubscriptionsFunc struct {
	defaultHook func(context.Context, database.ListEnterpriseSubscriptionsOptions) ([]*database.Subscription, error)
	hooks       []func(context.Context, database.ListEnterpriseSubscriptionsOptions) ([]*database.Subscription, error)
	history     []StoreV1ListEnterpriseSubscriptionsFuncCall
	mutex       sync.Mutex
}

// ListEnterpriseSubscriptions delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockStoreV1) ListEnterpriseSubscriptions(v0 context.Context, v1 database.ListEnterpriseSubscriptionsOptions) ([]*database.Subscription, error) {
	r0, r1 := m.ListEnterpriseSubscriptionsFunc.nextHook()(v0, v1)
	m.ListEnterpriseSubscriptionsFunc.appendCall(StoreV1ListEnterpriseSubscriptionsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ListEnterpriseSubscriptions method of the parent MockStoreV1 instance is
// invoked and the hook queue is empty.
func (f *StoreV1ListEnterpriseSubscriptionsFunc) SetDefaultHook(hook func(context.Context, database.ListEnterpriseSubscriptionsOptions) ([]*database.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListEnterpriseSubscriptions method of the parent MockStoreV1 instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StoreV1ListEnterpriseSubscriptionsFunc) PushHook(hook func(context.Context, database.ListEnterpriseSubscriptionsOptions) ([]*database.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreV1ListEnterpriseSubscriptionsFunc) SetDefaultReturn(r0 []*database.Subscription, r1 error) {
	f.SetDefaultHook(func(context.Context, database.ListEnterpriseSubscriptionsOptions) ([]*database.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreV1ListEnterpriseSubscriptionsFunc) PushReturn(r0 []*database.Subscription, r1 error) {
	f.PushHook(func(context.Context, database.ListEnterpriseSubscriptionsOptions) ([]*database.Subscription, error) {
		return r0, r1
	})
}

func (f *StoreV1ListEnterpriseSubscriptionsFunc) nextHook() func(context.Context, database.ListEnterpriseSubscriptionsOptions) ([]*database.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreV1ListEnterpriseSubscriptionsFunc) appendCall(r0 StoreV1ListEnterpriseSubscriptionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreV1ListEnterpriseSubscriptionsFuncCall
// objects describing the invocations of this function.
func (f *StoreV1ListEnterpriseSubscriptionsFunc) History() []StoreV1ListEnterpriseSubscriptionsFuncCall {
	f.mutex.Lock()
	history := make([]StoreV1ListEnterpriseSubscriptionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreV1ListEnterpriseSubscriptionsFuncCall is an object that describes an
// invocation of method ListEnterpriseSubscriptions on an instance of
// MockStoreV1.
type StoreV1ListEnterpriseSubscriptionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.ListEnterpriseSubscriptionsOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*database.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreV1ListEnterpriseSubscriptionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreV1ListEnterpriseSubscriptionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreV1UpsertEnterpriseSubscriptionFunc describes the behavior when the
// UpsertEnterpriseSubscription method of the parent MockStoreV1 instance is
// invoked.
type StoreV1UpsertEnterpriseSubscriptionFunc struct {
	defaultHook func(context.Context, string, database.UpsertSubscriptionOptions) (*database.Subscription, error)
	hooks       []func(context.Context, string, database.UpsertSubscriptionOptions) (*database.Subscription, error)
	history     []StoreV1UpsertEnterpriseSubscriptionFuncCall
	mutex       sync.Mutex
}

// UpsertEnterpriseSubscription delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockStoreV1) UpsertEnterpriseSubscription(v0 context.Context, v1 string, v2 database.UpsertSubscriptionOptions) (*database.Subscription, error) {
	r0, r1 := m.UpsertEnterpriseSubscriptionFunc.nextHook()(v0, v1, v2)
	m.UpsertEnterpriseSubscriptionFunc.appendCall(StoreV1UpsertEnterpriseSubscriptionFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// UpsertEnterpriseSubscription method of the parent MockStoreV1 instance is
// invoked and the hook queue is empty.
func (f *StoreV1UpsertEnterpriseSubscriptionFunc) SetDefaultHook(hook func(context.Context, string, database.UpsertSubscriptionOptions) (*database.Subscription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpsertEnterpriseSubscription method of the parent MockStoreV1 instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StoreV1UpsertEnterpriseSubscriptionFunc) PushHook(hook func(context.Context, string, database.UpsertSubscriptionOptions) (*database.Subscription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreV1UpsertEnterpriseSubscriptionFunc) SetDefaultReturn(r0 *database.Subscription, r1 error) {
	f.SetDefaultHook(func(context.Context, string, database.UpsertSubscriptionOptions) (*database.Subscription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreV1UpsertEnterpriseSubscriptionFunc) PushReturn(r0 *database.Subscription, r1 error) {
	f.PushHook(func(context.Context, string, database.UpsertSubscriptionOptions) (*database.Subscription, error) {
		return r0, r1
	})
}

func (f *StoreV1UpsertEnterpriseSubscriptionFunc) nextHook() func(context.Context, string, database.UpsertSubscriptionOptions) (*database.Subscription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreV1UpsertEnterpriseSubscriptionFunc) appendCall(r0 StoreV1UpsertEnterpriseSubscriptionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreV1UpsertEnterpriseSubscriptionFuncCall
// objects describing the invocations of this function.
func (f *StoreV1UpsertEnterpriseSubscriptionFunc) History() []StoreV1UpsertEnterpriseSubscriptionFuncCall {
	f.mutex.Lock()
	history := make([]StoreV1UpsertEnterpriseSubscriptionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreV1UpsertEnterpriseSubscriptionFuncCall is an object that describes
// an invocation of method UpsertEnterpriseSubscription on an instance of
// MockStoreV1.
type StoreV1UpsertEnterpriseSubscriptionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 database.UpsertSubscriptionOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *database.Subscription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreV1UpsertEnterpriseSubscriptionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreV1UpsertEnterpriseSubscriptionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
