// Code generated by go-bindata. DO NOT EDIT.
// sources:
// nginx.conf (1.364kB)
// redis.conf.tmpl (300B)
// nginx/sourcegraph_backend.conf (193B)
// nginx/sourcegraph_http.conf (212B)
// nginx/sourcegraph_main.conf (174B)
// nginx/sourcegraph_server.conf (176B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _nginxConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x94\x31\x6f\xdb\x30\x10\x85\x77\xfe\x8a\x07\x38\x6b\xa5\x6c\x2d\xe2\xb5\x28\x32\x74\x08\x1a\x0f\xed\x24\x9c\xc9\xb3\xc4\xc6\xe2\x09\x47\x4a\xb6\x11\xf8\xbf\x17\x94\x94\x46\x68\x93\x16\x6e\x86\x12\x30\x40\x53\xef\xde\xbd\x8f\x07\x69\x85\x4d\xe3\x23\xac\x84\x9d\xaf\x71\xa0\x88\x9a\x03\x2b\x25\x76\xd8\x9e\x70\x2f\xbd\x5a\xae\x95\xba\xa6\x30\x2b\x7c\x93\x1e\x96\x02\xc8\x7d\xef\x63\x42\x6a\x78\xae\xec\x95\x92\x97\x80\x24\x20\xe7\xf2\xcf\xe7\xff\xb4\xc7\xe6\xf3\x3d\x44\x71\xbb\xd9\xdc\x61\xc7\x94\x7a\xe5\x98\xad\xbe\x30\x39\xb4\xa2\x0c\x4a\x68\x52\xea\xe2\x4d\x59\x3a\xb1\xb1\x88\x8b\x9e\x56\xda\x92\x5c\xeb\x43\x19\x6a\x1f\x8e\xc6\xb0\xaa\x68\xb5\x97\x1a\x31\x39\x56\x5d\x9b\xce\x3b\x94\x03\x69\xa9\xfd\xac\x2a\x3a\xef\xd6\xc6\xac\xf0\x51\x10\x24\x41\xb9\x95\x81\x0b\x6c\xa6\xb8\x89\x43\x8a\x90\x1d\x16\x8d\xaa\x96\x7c\x28\x32\xcb\xc8\x67\x1b\x0a\x35\x63\xcb\xe9\xc0\x1c\xcc\x0a\x03\x6b\xf4\x12\x22\x28\x38\xb4\x74\x82\x0f\x76\xdf\x3b\x86\x6f\x3b\x95\x81\xdb\xd1\x33\xc9\xef\x57\x52\x98\x27\xe9\x98\xad\x7c\xb1\xe9\xda\x18\x1e\x46\x8b\x47\x73\x36\x26\x5f\x07\x1e\x0d\x00\x44\xd6\x81\xb5\x4a\xf2\xc0\x21\x87\xce\xd2\x7c\x7e\x11\x5c\xf6\x7b\x15\x6e\x72\x7b\x0b\x60\x76\x78\x1d\xf2\x67\xf3\x39\x39\x59\xcb\x31\x8e\x23\x1c\x71\xf2\x59\xdf\xc5\xa4\x4c\x2d\xb6\x64\x1f\x38\xb8\x19\xfe\x62\xd0\xb9\xfc\x57\xd6\x85\xd9\x4c\xfd\x66\xde\x3f\x33\x2f\x73\x4c\x84\x67\xb3\x18\xe7\xbf\xe2\x4d\xd5\xff\x9d\x6e\x11\x63\x9e\x69\x5e\x7b\x1f\x13\x07\xbc\xbf\xfe\x70\xbd\x7e\x3e\x14\x3b\x7d\x18\xca\x05\x73\x5e\x9d\xca\xf1\x54\x75\x14\xe3\xf8\xf2\xdf\x94\xe5\x7c\x67\xeb\x17\x64\x91\x53\xd5\x30\x39\x56\xdc\x4a\x4c\xb8\xca\x25\x55\x23\x31\xfd\x45\xfd\xf5\xdd\x27\xd1\x03\xa9\x63\x97\x77\xb8\x9a\x14\xe4\x5c\x75\xac\x76\x4f\x8f\xf2\xee\x02\xa3\x3b\x95\x24\xb8\x8a\xb6\xe1\x96\x9f\xeb\xce\xf3\x9c\xcf\xe6\x47\x00\x00\x00\xff\xff\xc2\x9a\x8b\x05\x54\x05\x00\x00")

func nginxConfBytes() ([]byte, error) {
	return bindataRead(
		_nginxConf,
		"nginx.conf",
	)
}

func nginxConf() (*asset, error) {
	bytes, err := nginxConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nginx.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x41, 0x3, 0xed, 0x3b, 0x7b, 0xef, 0x6f, 0x89, 0xa4, 0x95, 0x89, 0x3a, 0x9d, 0xb, 0x88, 0x8e, 0x5, 0x92, 0x51, 0xc4, 0xc4, 0xdd, 0xd, 0xe4, 0x84, 0xdc, 0xfe, 0xdd, 0xf4, 0x22, 0xa2, 0xc9}}
	return a, nil
}

var _redisConfTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcd\x41\x6e\x02\x31\x0c\x05\xd0\x7d\x4e\xf1\x25\xb6\x50\xc1\xa6\x27\xe8\x45\x42\xe2\x06\xab\x89\x3d\xb2\xcd\x4c\x47\x88\xbb\x57\x29\x95\xba\xf4\xd7\xf7\x7f\x07\xe4\xde\x75\x43\x2e\x85\xdc\xf1\x69\x3a\x66\x02\x16\x8f\x2c\x85\x3c\x2d\xa6\x41\x25\xa8\x9e\x86\x56\x82\x68\x4a\x07\x74\x1e\x1c\x18\x34\xd4\x76\xdc\x3d\x37\x3a\xc2\x28\xee\x26\x20\x33\x35\x6c\x37\x12\xdc\x38\x82\xa5\xbd\xda\x69\xe4\xef\xbf\x87\x4b\xbb\xfe\x5f\xa7\x45\x3b\x97\x1d\xa2\xb4\x72\x09\x56\x79\x01\x2b\xa1\xe8\x98\x4c\xd7\x86\x50\x54\xf6\xaf\x23\x72\xad\x3c\x4b\xb9\xf7\x1d\x2e\x79\xf1\x9b\x86\x83\x56\x9a\xc3\x67\x0c\x96\x7b\x90\xa7\xca\x86\xc7\x03\x6f\x1f\x6c\x78\x3e\x53\x5e\x16\x92\xaa\xd2\x77\xec\xe4\xc9\xf3\x4a\x78\x3f\x9f\x71\xf9\xc5\x28\x7b\x60\x25\xbb\xaa\xd3\xe4\x1a\x4b\x4b\x5d\x5b\xa7\x95\x3a\xb6\x6c\x32\x83\x9f\x00\x00\x00\xff\xff\x3d\xe3\xfc\x7d\x2c\x01\x00\x00")

func redisConfTmplBytes() ([]byte, error) {
	return bindataRead(
		_redisConfTmpl,
		"redis.conf.tmpl",
	)
}

func redisConfTmpl() (*asset, error) {
	bytes, err := redisConfTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "redis.conf.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x39, 0xdc, 0xa1, 0x4e, 0x7, 0x3e, 0xee, 0x45, 0xc6, 0x63, 0x5d, 0xf, 0x9c, 0xfc, 0xc1, 0x41, 0xd0, 0xc1, 0xc5, 0x78, 0xf2, 0x89, 0xe0, 0xe1, 0x8f, 0x38, 0xbc, 0x9b, 0x8d, 0xff, 0xcf, 0x0}}
	return a, nil
}

var _nginxSourcegraph_backendConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcd\x41\x4e\x80\x30\x10\x46\xe1\x7d\x4f\xf1\x27\x6c\x4d\x53\xdc\x48\x74\xeb\x0d\xf4\x02\xa5\x1d\xca\x44\x98\x92\xe9\x54\xe0\xf6\x86\xad\xfb\x97\xef\x0d\xf8\x5e\xb9\x21\x55\x59\xb8\x80\x1b\x0a\x09\x69\x34\xca\x98\x6f\x7c\xd5\xae\x89\x8a\xc6\x63\xf5\xf8\xac\x90\x6a\xd8\x6b\xe6\xe5\x7e\x01\x1b\x4e\xde\x36\xcc\x04\xa5\x53\xd9\x8c\xc4\x0d\xa8\x82\x66\x51\xad\x1f\xfe\x3f\xcd\x92\xb6\x9e\x29\x83\x05\xb6\x12\xfa\xd1\x4c\x29\xee\x4f\x62\x74\x19\x96\xaa\x98\x63\xfa\x21\x79\xee\x6e\x80\x14\x96\xcb\x3f\x82\x73\x8d\xf4\x97\x14\xe3\xeb\x9b\x0f\x3e\xf8\xf1\x7d\x0a\x53\xf8\x70\x7f\x01\x00\x00\xff\xff\x05\x45\x7e\x49\xc1\x00\x00\x00")

func nginxSourcegraph_backendConfBytes() ([]byte, error) {
	return bindataRead(
		_nginxSourcegraph_backendConf,
		"nginx/sourcegraph_backend.conf",
	)
}

func nginxSourcegraph_backendConf() (*asset, error) {
	bytes, err := nginxSourcegraph_backendConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nginx/sourcegraph_backend.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7b, 0x2d, 0x35, 0xf4, 0x4f, 0xee, 0x2c, 0x1e, 0x2a, 0x41, 0xd4, 0xf4, 0xa0, 0x53, 0x8e, 0x46, 0xad, 0x74, 0xe9, 0x93, 0xaf, 0x8e, 0x6b, 0xa3, 0x7d, 0x96, 0x87, 0x8, 0x29, 0x90, 0x9c, 0x97}}
	return a, nil
}

var _nginxSourcegraph_httpConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8d\xb1\x6a\xc4\x30\x10\x05\x7b\x7d\xc5\x03\xb7\xc1\x24\x45\xaa\xb4\x69\x53\x25\x90\xd2\xc8\xd2\x3b\x79\x41\xb7\x6b\xa4\x35\x27\xe7\xeb\x83\xdb\xab\x67\x98\x99\xf0\xb3\x49\x47\x32\xbd\x49\x81\x74\x14\x2a\x5b\x74\x66\xac\x27\xbe\xed\x68\x89\xa5\xc5\x7d\x9b\xf1\x69\x50\x73\xdc\x2d\xcb\xed\x7c\x81\x38\x1e\x52\x2b\x56\xa2\xf1\xd1\xc4\x9d\x1a\x26\x98\xa2\x7b\x6c\x7e\xec\xf3\x73\x5a\x34\xd5\x23\x33\x43\x14\xbe\x11\x9b\xfb\x7e\x61\xe7\xf0\xeb\xa6\x45\x74\xcc\x97\x1f\xc2\x84\x5f\x22\x45\xc5\xb1\x57\x8b\x19\x35\xb6\x42\x70\x38\xb5\x8b\x69\x0f\xa9\x0a\xd5\x97\x7b\x1c\xcb\x6a\xf9\x5c\xba\xfc\x11\x6f\xef\xaf\x5f\x1f\xe1\x3f\x00\x00\xff\xff\xfc\xc0\xaa\xd0\xd4\x00\x00\x00")

func nginxSourcegraph_httpConfBytes() ([]byte, error) {
	return bindataRead(
		_nginxSourcegraph_httpConf,
		"nginx/sourcegraph_http.conf",
	)
}

func nginxSourcegraph_httpConf() (*asset, error) {
	bytes, err := nginxSourcegraph_httpConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nginx/sourcegraph_http.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf, 0xd5, 0xb, 0x20, 0x74, 0xdb, 0xe1, 0xb2, 0x81, 0x38, 0x2c, 0xcc, 0x13, 0x1f, 0x9c, 0x78, 0xa4, 0xe3, 0x3d, 0xce, 0x37, 0xe4, 0x7e, 0x1b, 0x9a, 0x7e, 0x75, 0x8f, 0x92, 0x34, 0x9, 0x82}}
	return a, nil
}

var _nginxSourcegraph_mainConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8d\x31\x0e\x83\x30\x10\x04\x7b\xbf\x62\x25\xda\x88\x57\xa4\x49\x9d\x7c\xc0\xe0\xc3\x9c\x62\xf6\xd0\x71\x08\xf8\x7d\x44\x9b\x7a\x46\x33\x1d\x3e\xb3\x6e\x18\x8d\x93\x56\xe8\x86\x2a\x14\xcf\x21\x05\xc3\x85\xb7\xed\x3e\x4a\xf5\xbc\xce\x3d\x9e\x06\x5a\x60\xb1\xa2\xd3\xf5\x80\x06\x0e\x6d\x0d\x83\xc0\xe5\x70\x8d\x10\xa6\x0e\x46\x6c\x91\x3d\xf6\xb5\xff\x4f\x2b\xc7\xb6\x17\x29\x50\x22\x66\xc1\x92\x95\x37\x0e\x39\xe3\xbe\xb1\x2a\xcf\xfe\xf6\x53\xea\xf0\x62\x08\x43\x8d\xb9\xb5\x0b\x43\xcb\xfc\xa6\x5f\x00\x00\x00\xff\xff\x7d\xc8\x2e\x34\xae\x00\x00\x00")

func nginxSourcegraph_mainConfBytes() ([]byte, error) {
	return bindataRead(
		_nginxSourcegraph_mainConf,
		"nginx/sourcegraph_main.conf",
	)
}

func nginxSourcegraph_mainConf() (*asset, error) {
	bytes, err := nginxSourcegraph_mainConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nginx/sourcegraph_main.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2b, 0xe0, 0x54, 0x8, 0x8b, 0xc7, 0xfa, 0x50, 0x47, 0x74, 0x8f, 0x86, 0xcf, 0xef, 0xde, 0xc5, 0x8b, 0x99, 0xb0, 0xc2, 0xf9, 0x95, 0x17, 0x94, 0xc0, 0x22, 0x48, 0x47, 0x6b, 0x1b, 0x8e, 0x3c}}
	return a, nil
}

var _nginxSourcegraph_serverConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8d\x3d\x8e\x83\x30\x10\x85\x7b\x9f\xe2\x49\xb4\x2b\x4e\xb1\xcd\xd6\x9b\x0b\x18\x3c\x98\x51\x9c\x37\x68\x3c\x04\xb8\x7d\x44\x9b\xfe\xfb\x19\xf0\x58\xb5\x63\x36\x2e\x5a\xa1\x1d\x55\x28\x9e\x43\x0a\xa6\x0b\xff\xb6\xfb\x2c\xd5\xf3\xb6\x8e\xf8\x35\xd0\x02\x2f\x2b\xba\x5c\x3f\xd0\xc0\xa1\xad\x61\x12\xb8\x1c\xae\x11\xc2\x34\xc0\x88\x1e\xd9\x63\xdf\xc6\xef\xb4\x72\x6e\x7b\x91\x02\x25\x62\x15\x74\xf1\xb7\xf8\x0d\x84\x9c\x71\xff\x58\x95\xe7\x78\x1b\x29\x0d\xf8\x63\x08\x43\x8d\xb9\xb5\x0b\x53\xcb\x7c\xa6\x4f\x00\x00\x00\xff\xff\x9c\x8c\x8b\x56\xb0\x00\x00\x00")

func nginxSourcegraph_serverConfBytes() ([]byte, error) {
	return bindataRead(
		_nginxSourcegraph_serverConf,
		"nginx/sourcegraph_server.conf",
	)
}

func nginxSourcegraph_serverConf() (*asset, error) {
	bytes, err := nginxSourcegraph_serverConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nginx/sourcegraph_server.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5, 0xe0, 0x16, 0xbe, 0xd, 0x61, 0x2d, 0xed, 0xc, 0x94, 0x64, 0xfa, 0x64, 0x3c, 0x78, 0x30, 0xb, 0x84, 0xdf, 0x75, 0x70, 0xfe, 0x5a, 0x9b, 0xd8, 0x70, 0xad, 0x81, 0xd9, 0x30, 0x73, 0x67}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"nginx.conf": nginxConf,

	"redis.conf.tmpl": redisConfTmpl,

	"nginx/sourcegraph_backend.conf": nginxSourcegraph_backendConf,

	"nginx/sourcegraph_http.conf": nginxSourcegraph_httpConf,

	"nginx/sourcegraph_main.conf": nginxSourcegraph_mainConf,

	"nginx/sourcegraph_server.conf": nginxSourcegraph_serverConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"nginx": {nil, map[string]*bintree{
		"sourcegraph_backend.conf": {nginxSourcegraph_backendConf, map[string]*bintree{}},
		"sourcegraph_http.conf":    {nginxSourcegraph_httpConf, map[string]*bintree{}},
		"sourcegraph_main.conf":    {nginxSourcegraph_mainConf, map[string]*bintree{}},
		"sourcegraph_server.conf":  {nginxSourcegraph_serverConf, map[string]*bintree{}},
	}},
	"nginx.conf":      {nginxConf, map[string]*bintree{}},
	"redis.conf.tmpl": {redisConfTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
