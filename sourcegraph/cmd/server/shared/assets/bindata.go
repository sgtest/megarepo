// Code generated by go-bindata. DO NOT EDIT.
// sources:
// nginx.conf (1.392kB)
// redis.conf.tmpl (300B)
// nginx/sourcegraph_backend.conf (192B)
// nginx/sourcegraph_http.conf (212B)
// nginx/sourcegraph_main.conf (174B)
// nginx/sourcegraph_server.conf (176B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _nginxConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x94\x41\x6b\xdc\x30\x10\x85\xef\xfa\x15\x0f\x36\xd7\xda\xb9\x35\x64\xaf\xa5\xe4\xd0\x43\x68\xf6\xd0\x9e\xcc\x44\x9a\xb5\xd5\xd8\x1a\x33\x92\x9d\x84\xb0\xff\xbd\xc8\x76\x36\xa6\x4d\x5a\xb6\x39\xd4\x60\x90\xc7\x33\x6f\xde\x37\x03\xda\x60\xd7\xf8\x08\x2b\x61\xef\x6b\xdc\x53\x44\xcd\x81\x95\x12\x3b\xdc\x3e\xe2\x46\x06\xb5\x5c\x2b\xf5\x4d\x61\x36\xf8\x2e\x03\x2c\x05\x90\xfb\x31\xc4\x84\xd4\xf0\x52\x39\x28\x25\x2f\x01\x49\x40\xce\xe5\xd7\xe7\x6f\x6a\xb1\xfb\x72\x03\x51\x5c\xed\x76\xd7\xd8\x33\xa5\x41\x39\x66\xa9\xaf\x4c\x0e\x9d\x28\x83\x12\x9a\x94\xfa\x78\x59\x96\x4e\x6c\x2c\xe2\xaa\xa7\x95\xae\x24\xd7\xf9\x50\x86\xda\x87\x07\x63\x58\x55\xb4\x6a\xa5\x46\x4c\x8e\x55\xb7\xa6\xf7\x0e\xe5\x48\x5a\xea\xb0\x64\x15\xbd\x77\x5b\x63\x36\xf8\x24\x08\x92\xa0\xdc\xc9\xc8\x05\x76\xb3\xdd\xc4\x21\x45\xc8\x1e\xab\x46\x55\x47\x3e\x14\x99\x65\xe2\xb3\x0d\x85\x9a\x71\xcb\xe9\x9e\x39\x98\x0d\x46\xd6\xe8\x25\x44\x50\x70\xe8\xe8\x11\x3e\xd8\x76\x70\x0c\xdf\xf5\x2a\x23\x77\x93\x66\x92\xdf\x47\x52\x98\xe7\xd4\xc9\x5b\xf9\x6a\x53\x63\x78\x9c\x14\x9e\xcc\xc1\x98\x3c\x0d\x3c\x19\x00\x88\xac\x23\x6b\x95\xe4\x8e\x43\xf6\xbc\xdf\x9a\x29\x7e\x12\x5b\xd6\x7b\x93\x6d\x56\x7b\x0f\x5f\x56\x78\x9b\xf1\xd8\x7c\x36\x4e\xd6\x72\x8c\xd3\x02\x27\x9a\x1c\x1b\xfa\x98\x94\xa9\xc3\x2d\xd9\x3b\x0e\x6e\x61\x3f\x99\x73\x29\xff\x15\x75\x25\xb6\x40\xbf\x1b\xf7\xcf\xc8\x6b\x1f\xe6\x98\x3f\xaf\x12\xad\x58\x6a\x1b\x89\xe9\xf2\xe2\xfc\xe2\x7c\x1e\xc0\xc1\xac\x96\xfd\xaf\xf4\x73\xf5\x7f\x87\x5f\xd9\x78\x61\x6f\x7d\x4c\x1c\xf0\xf1\x48\x3c\x05\xc5\xce\x97\x46\xb9\x42\xce\x4f\xaf\xf2\xf0\x58\xf5\x14\xe3\x74\x31\x5c\x96\xe5\x32\xd1\xed\x2b\x69\x91\x53\xd5\x30\x39\x56\x5c\x49\x4c\x38\xcb\x25\x55\x1e\xf0\x5f\xb2\xbf\x7d\xf8\x2c\x7a\x4f\xea\xd8\xe5\x13\xce\xe6\x0c\x72\xae\x7a\xa8\xf6\xcf\xbf\xf2\xe9\x04\xa1\x6b\x95\x24\x38\x8b\xb6\xe1\x8e\x5f\xea\x0e\xcb\x9a\x0f\xe6\x67\x00\x00\x00\xff\xff\xaf\x2f\x39\x47\x70\x05\x00\x00")

func nginxConfBytes() ([]byte, error) {
	return bindataRead(
		_nginxConf,
		"nginx.conf",
	)
}

func nginxConf() (*asset, error) {
	bytes, err := nginxConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nginx.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x64, 0x53, 0x5d, 0x9c, 0x34, 0x51, 0x21, 0xff, 0xb4, 0x5, 0x4, 0xca, 0xff, 0x1f, 0xa9, 0x39, 0xcd, 0x48, 0xe, 0xda, 0x77, 0xc4, 0xcf, 0x93, 0x33, 0xf7, 0xb9, 0xca, 0xfc, 0x41, 0x93, 0xaa}}
	return a, nil
}

var _redisConfTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcd\x41\x6e\x02\x31\x0c\x05\xd0\x7d\x4e\xf1\x25\xb6\x50\xc1\xa6\x27\xe8\x45\x42\xe2\x06\xab\x89\x3d\xb2\xcd\x4c\x47\x88\xbb\x57\x29\x95\xba\xf4\xd7\xf7\x7f\x07\xe4\xde\x75\x43\x2e\x85\xdc\xf1\x69\x3a\x66\x02\x16\x8f\x2c\x85\x3c\x2d\xa6\x41\x25\xa8\x9e\x86\x56\x82\x68\x4a\x07\x74\x1e\x1c\x18\x34\xd4\x76\xdc\x3d\x37\x3a\xc2\x28\xee\x26\x20\x33\x35\x6c\x37\x12\xdc\x38\x82\xa5\xbd\xda\x69\xe4\xef\xbf\x87\x4b\xbb\xfe\x5f\xa7\x45\x3b\x97\x1d\xa2\xb4\x72\x09\x56\x79\x01\x2b\xa1\xe8\x98\x4c\xd7\x86\x50\x54\xf6\xaf\x23\x72\xad\x3c\x4b\xb9\xf7\x1d\x2e\x79\xf1\x9b\x86\x83\x56\x9a\xc3\x67\x0c\x96\x7b\x90\xa7\xca\x86\xc7\x03\x6f\x1f\x6c\x78\x3e\x53\x5e\x16\x92\xaa\xd2\x77\xec\xe4\xc9\xf3\x4a\x78\x3f\x9f\x71\xf9\xc5\x28\x7b\x60\x25\xbb\xaa\xd3\xe4\x1a\x4b\x4b\x5d\x5b\xa7\x95\x3a\xb6\x6c\x32\x83\x9f\x00\x00\x00\xff\xff\x3d\xe3\xfc\x7d\x2c\x01\x00\x00")

func redisConfTmplBytes() ([]byte, error) {
	return bindataRead(
		_redisConfTmpl,
		"redis.conf.tmpl",
	)
}

func redisConfTmpl() (*asset, error) {
	bytes, err := redisConfTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "redis.conf.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x39, 0xdc, 0xa1, 0x4e, 0x7, 0x3e, 0xee, 0x45, 0xc6, 0x63, 0x5d, 0xf, 0x9c, 0xfc, 0xc1, 0x41, 0xd0, 0xc1, 0xc5, 0x78, 0xf2, 0x89, 0xe0, 0xe1, 0x8f, 0x38, 0xbc, 0x9b, 0x8d, 0xff, 0xcf, 0x0}}
	return a, nil
}

var _nginxSourcegraph_backendConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcd\x3f\x6e\x87\x30\x0c\x47\xf1\x3d\xa7\xf8\x4a\x59\x2b\x4e\xd1\xa5\x73\x7b\x81\xfc\x31\xc1\x22\xd8\xc8\x71\x04\xdc\xbe\x62\xfd\xed\x4f\x9f\x17\xf1\xb7\xf1\x40\x51\x59\xb9\x81\x07\x1a\x09\x59\x72\xaa\xc8\x0f\x7e\x75\x5a\xa1\x66\xe9\xdc\x16\x7c\x2b\x44\x1d\x87\x56\x5e\x9f\x2f\xb0\xe3\xe2\xde\x91\x09\x46\x97\xb1\x3b\x49\x88\x50\xc1\xf0\x64\x3e\xcf\xe5\x93\x66\x29\x7d\x56\xaa\x60\x81\x6f\x84\x79\x0e\x37\x4a\xc7\x9b\x38\xdd\x8e\x55\x0d\x39\x95\x9d\xe4\xbd\x87\x08\x69\x2c\xf7\xf2\x0a\x21\x44\xfc\x88\x93\x38\xab\xa4\xde\x1f\xe4\x9e\x64\x0f\xff\x01\x00\x00\xff\xff\xfa\xe3\xdf\xcd\xc0\x00\x00\x00")

func nginxSourcegraph_backendConfBytes() ([]byte, error) {
	return bindataRead(
		_nginxSourcegraph_backendConf,
		"nginx/sourcegraph_backend.conf",
	)
}

func nginxSourcegraph_backendConf() (*asset, error) {
	bytes, err := nginxSourcegraph_backendConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nginx/sourcegraph_backend.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcf, 0x33, 0xf6, 0x61, 0xa1, 0x6e, 0xb8, 0x59, 0xc2, 0xa0, 0x57, 0x56, 0xfa, 0x3d, 0xb3, 0x7e, 0xf7, 0xef, 0x1b, 0x71, 0x2e, 0x54, 0x57, 0x34, 0xdf, 0x8b, 0x6c, 0xbd, 0x68, 0x36, 0xde, 0x47}}
	return a, nil
}

var _nginxSourcegraph_httpConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8d\xb1\x6a\xc4\x30\x10\x05\x7b\x7d\xc5\x03\xb7\xc1\x24\x45\xaa\xb4\x69\x53\x25\x90\xd2\xc8\xd2\x3b\x79\x41\xb7\x6b\xa4\x35\x27\xe7\xeb\x83\xdb\xab\x67\x98\x99\xf0\xb3\x49\x47\x32\xbd\x49\x81\x74\x14\x2a\x5b\x74\x66\xac\x27\xbe\xed\x68\x89\xa5\xc5\x7d\x9b\xf1\x69\x50\x73\xdc\x2d\xcb\xed\x7c\x81\x38\x1e\x52\x2b\x56\xa2\xf1\xd1\xc4\x9d\x1a\x26\x98\xa2\x7b\x6c\x7e\xec\xf3\x73\x5a\x34\xd5\x23\x33\x43\x14\xbe\x11\x9b\xfb\x7e\x61\xe7\xf0\xeb\xa6\x45\x74\xcc\x97\x1f\xc2\x84\x5f\x22\x45\xc5\xb1\x57\x8b\x19\x35\xb6\x42\x70\x38\xb5\x8b\x69\x0f\xa9\x0a\xd5\x97\x7b\x1c\xcb\x6a\xf9\x5c\xba\xfc\x11\x6f\xef\xaf\x5f\x1f\xe1\x3f\x00\x00\xff\xff\xfc\xc0\xaa\xd0\xd4\x00\x00\x00")

func nginxSourcegraph_httpConfBytes() ([]byte, error) {
	return bindataRead(
		_nginxSourcegraph_httpConf,
		"nginx/sourcegraph_http.conf",
	)
}

func nginxSourcegraph_httpConf() (*asset, error) {
	bytes, err := nginxSourcegraph_httpConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nginx/sourcegraph_http.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf, 0xd5, 0xb, 0x20, 0x74, 0xdb, 0xe1, 0xb2, 0x81, 0x38, 0x2c, 0xcc, 0x13, 0x1f, 0x9c, 0x78, 0xa4, 0xe3, 0x3d, 0xce, 0x37, 0xe4, 0x7e, 0x1b, 0x9a, 0x7e, 0x75, 0x8f, 0x92, 0x34, 0x9, 0x82}}
	return a, nil
}

var _nginxSourcegraph_mainConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8d\x31\x0e\x83\x30\x10\x04\x7b\xbf\x62\x25\xda\x88\x57\xa4\x49\x9d\x7c\xc0\xe0\xc3\x9c\x62\xf6\xd0\x71\x08\xf8\x7d\x44\x9b\x7a\x46\x33\x1d\x3e\xb3\x6e\x18\x8d\x93\x56\xe8\x86\x2a\x14\xcf\x21\x05\xc3\x85\xb7\xed\x3e\x4a\xf5\xbc\xce\x3d\x9e\x06\x5a\x60\xb1\xa2\xd3\xf5\x80\x06\x0e\x6d\x0d\x83\xc0\xe5\x70\x8d\x10\xa6\x0e\x46\x6c\x91\x3d\xf6\xb5\xff\x4f\x2b\xc7\xb6\x17\x29\x50\x22\x66\xc1\x92\x95\x37\x0e\x39\xe3\xbe\xb1\x2a\xcf\xfe\xf6\x53\xea\xf0\x62\x08\x43\x8d\xb9\xb5\x0b\x43\xcb\xfc\xa6\x5f\x00\x00\x00\xff\xff\x7d\xc8\x2e\x34\xae\x00\x00\x00")

func nginxSourcegraph_mainConfBytes() ([]byte, error) {
	return bindataRead(
		_nginxSourcegraph_mainConf,
		"nginx/sourcegraph_main.conf",
	)
}

func nginxSourcegraph_mainConf() (*asset, error) {
	bytes, err := nginxSourcegraph_mainConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nginx/sourcegraph_main.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2b, 0xe0, 0x54, 0x8, 0x8b, 0xc7, 0xfa, 0x50, 0x47, 0x74, 0x8f, 0x86, 0xcf, 0xef, 0xde, 0xc5, 0x8b, 0x99, 0xb0, 0xc2, 0xf9, 0x95, 0x17, 0x94, 0xc0, 0x22, 0x48, 0x47, 0x6b, 0x1b, 0x8e, 0x3c}}
	return a, nil
}

var _nginxSourcegraph_serverConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8d\x3d\x8e\x83\x30\x10\x85\x7b\x9f\xe2\x49\xb4\x2b\x4e\xb1\xcd\xd6\x9b\x0b\x18\x3c\x98\x51\x9c\x37\x68\x3c\x04\xb8\x7d\x44\x9b\xfe\xfb\x19\xf0\x58\xb5\x63\x36\x2e\x5a\xa1\x1d\x55\x28\x9e\x43\x0a\xa6\x0b\xff\xb6\xfb\x2c\xd5\xf3\xb6\x8e\xf8\x35\xd0\x02\x2f\x2b\xba\x5c\x3f\xd0\xc0\xa1\xad\x61\x12\xb8\x1c\xae\x11\xc2\x34\xc0\x88\x1e\xd9\x63\xdf\xc6\xef\xb4\x72\x6e\x7b\x91\x02\x25\x62\x15\x74\xf1\xb7\xf8\x0d\x84\x9c\x71\xff\x58\x95\xe7\x78\x1b\x29\x0d\xf8\x63\x08\x43\x8d\xb9\xb5\x0b\x53\xcb\x7c\xa6\x4f\x00\x00\x00\xff\xff\x9c\x8c\x8b\x56\xb0\x00\x00\x00")

func nginxSourcegraph_serverConfBytes() ([]byte, error) {
	return bindataRead(
		_nginxSourcegraph_serverConf,
		"nginx/sourcegraph_server.conf",
	)
}

func nginxSourcegraph_serverConf() (*asset, error) {
	bytes, err := nginxSourcegraph_serverConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nginx/sourcegraph_server.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5, 0xe0, 0x16, 0xbe, 0xd, 0x61, 0x2d, 0xed, 0xc, 0x94, 0x64, 0xfa, 0x64, 0x3c, 0x78, 0x30, 0xb, 0x84, 0xdf, 0x75, 0x70, 0xfe, 0x5a, 0x9b, 0xd8, 0x70, 0xad, 0x81, 0xd9, 0x30, 0x73, 0x67}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"nginx.conf": nginxConf,

	"redis.conf.tmpl": redisConfTmpl,

	"nginx/sourcegraph_backend.conf": nginxSourcegraph_backendConf,

	"nginx/sourcegraph_http.conf": nginxSourcegraph_httpConf,

	"nginx/sourcegraph_main.conf": nginxSourcegraph_mainConf,

	"nginx/sourcegraph_server.conf": nginxSourcegraph_serverConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"nginx": {nil, map[string]*bintree{
		"sourcegraph_backend.conf": {nginxSourcegraph_backendConf, map[string]*bintree{}},
		"sourcegraph_http.conf":    {nginxSourcegraph_httpConf, map[string]*bintree{}},
		"sourcegraph_main.conf":    {nginxSourcegraph_mainConf, map[string]*bintree{}},
		"sourcegraph_server.conf":  {nginxSourcegraph_serverConf, map[string]*bintree{}},
	}},
	"nginx.conf":      {nginxConf, map[string]*bintree{}},
	"redis.conf.tmpl": {redisConfTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
