import { ExtCodeEditor } from './codeEditor';
/**
 * @todo Send the show{Notification,Message,InputBox} requests to the same window (right now they are global).
 * @internal
 */
class ExtWindow {
    constructor(windowsProxy, visibleViewComponents) {
        this.windowsProxy = windowsProxy;
        this.visibleViewComponents = visibleViewComponents;
    }
    showNotification(message) {
        this.windowsProxy.$showNotification(message);
    }
    showMessage(message) {
        return this.windowsProxy.$showMessage(message);
    }
    showInputBox(options) {
        return this.windowsProxy.$showInputBox(options);
    }
    toJSON() {
        return { visibleViewComponents: this.visibleViewComponents };
    }
}
/** @internal */
export class ExtWindows {
    /** @internal */
    constructor(windowsProxy, codeEditorProxy, documents) {
        this.windowsProxy = windowsProxy;
        this.codeEditorProxy = codeEditorProxy;
        this.documents = documents;
        this.data = [];
    }
    /** @internal */
    getActive() {
        return this.getAll()[0];
    }
    /**
     * Returns all known windows.
     *
     * @internal
     */
    getAll() {
        return this.data.map(window => new ExtWindow(this.windowsProxy, window.visibleTextDocument
            ? [new ExtCodeEditor(window.visibleTextDocument, this.codeEditorProxy, this.documents)]
            : []));
    }
    /** @internal */
    $acceptWindowData(allWindows) {
        this.data = allWindows;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2luZG93cy5qcyIsInNvdXJjZVJvb3QiOiJzcmMvIiwic291cmNlcyI6WyJleHRlbnNpb24vYXBpL3dpbmRvd3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGNBQWMsQ0FBQTtBQU81Qzs7O0dBR0c7QUFDSCxNQUFNLFNBQVM7SUFDWCxZQUNZLFlBQThCLEVBQ3RCLHFCQUFrRDtRQUQxRCxpQkFBWSxHQUFaLFlBQVksQ0FBa0I7UUFDdEIsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUE2QjtJQUNuRSxDQUFDO0lBRUcsZ0JBQWdCLENBQUMsT0FBZTtRQUNuQyxJQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ2hELENBQUM7SUFFTSxXQUFXLENBQUMsT0FBZTtRQUM5QixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ2xELENBQUM7SUFFTSxZQUFZLENBQUMsT0FBcUM7UUFDckQsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUNuRCxDQUFDO0lBRU0sTUFBTTtRQUNULE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQTtJQUNoRSxDQUFDO0NBQ0o7QUFPRCxnQkFBZ0I7QUFDaEIsTUFBTSxPQUFPLFVBQVU7SUFHbkIsZ0JBQWdCO0lBQ2hCLFlBQ1ksWUFBOEIsRUFDOUIsZUFBb0MsRUFDcEMsU0FBdUI7UUFGdkIsaUJBQVksR0FBWixZQUFZLENBQWtCO1FBQzlCLG9CQUFlLEdBQWYsZUFBZSxDQUFxQjtRQUNwQyxjQUFTLEdBQVQsU0FBUyxDQUFjO1FBTjNCLFNBQUksR0FBaUIsRUFBRSxDQUFBO0lBTzVCLENBQUM7SUFFSixnQkFBZ0I7SUFDVCxTQUFTO1FBQ1osT0FBTyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDM0IsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxNQUFNO1FBQ1QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FDaEIsTUFBTSxDQUFDLEVBQUUsQ0FDTCxJQUFJLFNBQVMsQ0FDVCxJQUFJLENBQUMsWUFBWSxFQUNqQixNQUFNLENBQUMsbUJBQW1CO1lBQ3RCLENBQUMsQ0FBQyxDQUFDLElBQUksYUFBYSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN2RixDQUFDLENBQUMsRUFBRSxDQUNYLENBQ1IsQ0FBQTtJQUNMLENBQUM7SUFFRCxnQkFBZ0I7SUFDVCxpQkFBaUIsQ0FBQyxVQUF3QjtRQUM3QyxJQUFJLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQTtJQUMxQixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBzb3VyY2VncmFwaCBmcm9tICdzb3VyY2VncmFwaCdcbmltcG9ydCB7IENsaWVudENvZGVFZGl0b3JBUEkgfSBmcm9tICcuLi8uLi9jbGllbnQvYXBpL2NvZGVFZGl0b3InXG5pbXBvcnQgeyBDbGllbnRXaW5kb3dzQVBJIH0gZnJvbSAnLi4vLi4vY2xpZW50L2FwaS93aW5kb3dzJ1xuaW1wb3J0IHsgRXh0Q29kZUVkaXRvciB9IGZyb20gJy4vY29kZUVkaXRvcidcbmltcG9ydCB7IEV4dERvY3VtZW50cyB9IGZyb20gJy4vZG9jdW1lbnRzJ1xuXG5leHBvcnQgaW50ZXJmYWNlIFdpbmRvd0RhdGEge1xuICAgIHZpc2libGVUZXh0RG9jdW1lbnQ6IHN0cmluZyB8IG51bGxcbn1cblxuLyoqXG4gKiBAdG9kbyBTZW5kIHRoZSBzaG93e05vdGlmaWNhdGlvbixNZXNzYWdlLElucHV0Qm94fSByZXF1ZXN0cyB0byB0aGUgc2FtZSB3aW5kb3cgKHJpZ2h0IG5vdyB0aGV5IGFyZSBnbG9iYWwpLlxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIEV4dFdpbmRvdyBpbXBsZW1lbnRzIHNvdXJjZWdyYXBoLldpbmRvdyB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgd2luZG93c1Byb3h5OiBDbGllbnRXaW5kb3dzQVBJLFxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgdmlzaWJsZVZpZXdDb21wb25lbnRzOiBzb3VyY2VncmFwaC5WaWV3Q29tcG9uZW50W11cbiAgICApIHt9XG5cbiAgICBwdWJsaWMgc2hvd05vdGlmaWNhdGlvbihtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy53aW5kb3dzUHJveHkuJHNob3dOb3RpZmljYXRpb24obWVzc2FnZSlcbiAgICB9XG5cbiAgICBwdWJsaWMgc2hvd01lc3NhZ2UobWVzc2FnZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiB0aGlzLndpbmRvd3NQcm94eS4kc2hvd01lc3NhZ2UobWVzc2FnZSlcbiAgICB9XG5cbiAgICBwdWJsaWMgc2hvd0lucHV0Qm94KG9wdGlvbnM/OiBzb3VyY2VncmFwaC5JbnB1dEJveE9wdGlvbnMpOiBQcm9taXNlPHN0cmluZyB8IHVuZGVmaW5lZD4ge1xuICAgICAgICByZXR1cm4gdGhpcy53aW5kb3dzUHJveHkuJHNob3dJbnB1dEJveChvcHRpb25zKVxuICAgIH1cblxuICAgIHB1YmxpYyB0b0pTT04oKTogYW55IHtcbiAgICAgICAgcmV0dXJuIHsgdmlzaWJsZVZpZXdDb21wb25lbnRzOiB0aGlzLnZpc2libGVWaWV3Q29tcG9uZW50cyB9XG4gICAgfVxufVxuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgaW50ZXJmYWNlIEV4dFdpbmRvd3NBUEkge1xuICAgICRhY2NlcHRXaW5kb3dEYXRhKGFsbFdpbmRvd3M6IFdpbmRvd0RhdGFbXSk6IHZvaWRcbn1cblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNsYXNzIEV4dFdpbmRvd3MgaW1wbGVtZW50cyBFeHRXaW5kb3dzQVBJIHtcbiAgICBwcml2YXRlIGRhdGE6IFdpbmRvd0RhdGFbXSA9IFtdXG5cbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgd2luZG93c1Byb3h5OiBDbGllbnRXaW5kb3dzQVBJLFxuICAgICAgICBwcml2YXRlIGNvZGVFZGl0b3JQcm94eTogQ2xpZW50Q29kZUVkaXRvckFQSSxcbiAgICAgICAgcHJpdmF0ZSBkb2N1bWVudHM6IEV4dERvY3VtZW50c1xuICAgICkge31cblxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBwdWJsaWMgZ2V0QWN0aXZlKCk6IHNvdXJjZWdyYXBoLldpbmRvdyB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEFsbCgpWzBdXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbGwga25vd24gd2luZG93cy5cbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRBbGwoKTogc291cmNlZ3JhcGguV2luZG93W10ge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLm1hcChcbiAgICAgICAgICAgIHdpbmRvdyA9PlxuICAgICAgICAgICAgICAgIG5ldyBFeHRXaW5kb3coXG4gICAgICAgICAgICAgICAgICAgIHRoaXMud2luZG93c1Byb3h5LFxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cudmlzaWJsZVRleHREb2N1bWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBbbmV3IEV4dENvZGVFZGl0b3Iod2luZG93LnZpc2libGVUZXh0RG9jdW1lbnQsIHRoaXMuY29kZUVkaXRvclByb3h5LCB0aGlzLmRvY3VtZW50cyldXG4gICAgICAgICAgICAgICAgICAgICAgICA6IFtdXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICApXG4gICAgfVxuXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHB1YmxpYyAkYWNjZXB0V2luZG93RGF0YShhbGxXaW5kb3dzOiBXaW5kb3dEYXRhW10pOiB2b2lkIHtcbiAgICAgICAgdGhpcy5kYXRhID0gYWxsV2luZG93c1xuICAgIH1cbn1cbiJdfQ==