import { Position } from './position';
import { Range } from './range';
export class Selection extends Range {
    static isSelection(thing) {
        if (thing instanceof Selection) {
            return true;
        }
        if (!thing) {
            return false;
        }
        return (Range.isRange(thing) &&
            Position.isPosition(thing.anchor) &&
            Position.isPosition(thing.active) &&
            typeof thing.isReversed === 'boolean');
    }
    get anchor() {
        return this._anchor;
    }
    get active() {
        return this._active;
    }
    constructor(anchorLineOrAnchor, anchorColumnOrActive, activeLine, activeColumn) {
        let anchor;
        let active;
        if (typeof anchorLineOrAnchor === 'number' &&
            typeof anchorColumnOrActive === 'number' &&
            typeof activeLine === 'number' &&
            typeof activeColumn === 'number') {
            anchor = new Position(anchorLineOrAnchor, anchorColumnOrActive);
            active = new Position(activeLine, activeColumn);
        }
        else if (anchorLineOrAnchor instanceof Position && anchorColumnOrActive instanceof Position) {
            anchor = anchorLineOrAnchor;
            active = anchorColumnOrActive;
        }
        if (!anchor || !active) {
            throw new Error('Invalid arguments');
        }
        super(anchor, active);
        this._anchor = anchor;
        this._active = active;
    }
    get isReversed() {
        return this._anchor === this._end;
    }
    toJSON() {
        return {
            start: this.start,
            end: this.end,
            active: this.active,
            anchor: this.anchor,
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0aW9uLmpzIiwic291cmNlUm9vdCI6InNyYy8iLCJzb3VyY2VzIjpbImV4dGVuc2lvbi90eXBlcy9zZWxlY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQTtBQUNyQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sU0FBUyxDQUFBO0FBRS9CLE1BQU0sT0FBTyxTQUFVLFNBQVEsS0FBSztJQUN6QixNQUFNLENBQUMsV0FBVyxDQUFDLEtBQVU7UUFDaEMsSUFBSSxLQUFLLFlBQVksU0FBUyxFQUFFO1lBQzVCLE9BQU8sSUFBSSxDQUFBO1NBQ2Q7UUFDRCxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1IsT0FBTyxLQUFLLENBQUE7U0FDZjtRQUNELE9BQU8sQ0FDSCxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztZQUNwQixRQUFRLENBQUMsVUFBVSxDQUFFLEtBQW1CLENBQUMsTUFBTSxDQUFDO1lBQ2hELFFBQVEsQ0FBQyxVQUFVLENBQUUsS0FBbUIsQ0FBQyxNQUFNLENBQUM7WUFDaEQsT0FBUSxLQUFtQixDQUFDLFVBQVUsS0FBSyxTQUFTLENBQ3ZELENBQUE7SUFDTCxDQUFDO0lBSUQsSUFBVyxNQUFNO1FBQ2IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFBO0lBQ3ZCLENBQUM7SUFJRCxJQUFXLE1BQU07UUFDYixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUE7SUFDdkIsQ0FBQztJQUlELFlBQ0ksa0JBQXFDLEVBQ3JDLG9CQUF1QyxFQUN2QyxVQUFtQixFQUNuQixZQUFxQjtRQUVyQixJQUFJLE1BQTRCLENBQUE7UUFDaEMsSUFBSSxNQUE0QixDQUFBO1FBRWhDLElBQ0ksT0FBTyxrQkFBa0IsS0FBSyxRQUFRO1lBQ3RDLE9BQU8sb0JBQW9CLEtBQUssUUFBUTtZQUN4QyxPQUFPLFVBQVUsS0FBSyxRQUFRO1lBQzlCLE9BQU8sWUFBWSxLQUFLLFFBQVEsRUFDbEM7WUFDRSxNQUFNLEdBQUcsSUFBSSxRQUFRLENBQUMsa0JBQWtCLEVBQUUsb0JBQW9CLENBQUMsQ0FBQTtZQUMvRCxNQUFNLEdBQUcsSUFBSSxRQUFRLENBQUMsVUFBVSxFQUFFLFlBQVksQ0FBQyxDQUFBO1NBQ2xEO2FBQU0sSUFBSSxrQkFBa0IsWUFBWSxRQUFRLElBQUksb0JBQW9CLFlBQVksUUFBUSxFQUFFO1lBQzNGLE1BQU0sR0FBRyxrQkFBa0IsQ0FBQTtZQUMzQixNQUFNLEdBQUcsb0JBQW9CLENBQUE7U0FDaEM7UUFFRCxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ3BCLE1BQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtTQUN2QztRQUVELEtBQUssQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFFckIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUE7UUFDckIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUE7SUFDekIsQ0FBQztJQUVELElBQVcsVUFBVTtRQUNqQixPQUFPLElBQUksQ0FBQyxPQUFPLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQTtJQUNyQyxDQUFDO0lBRU0sTUFBTTtRQUNULE9BQU87WUFDSCxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDakIsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHO1lBQ2IsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ25CLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtTQUN0QixDQUFBO0lBQ0wsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgc291cmNlZ3JhcGggZnJvbSAnc291cmNlZ3JhcGgnXG5pbXBvcnQgeyBQb3NpdGlvbiB9IGZyb20gJy4vcG9zaXRpb24nXG5pbXBvcnQgeyBSYW5nZSB9IGZyb20gJy4vcmFuZ2UnXG5cbmV4cG9ydCBjbGFzcyBTZWxlY3Rpb24gZXh0ZW5kcyBSYW5nZSBpbXBsZW1lbnRzIHNvdXJjZWdyYXBoLlNlbGVjdGlvbiB7XG4gICAgcHVibGljIHN0YXRpYyBpc1NlbGVjdGlvbih0aGluZzogYW55KTogdGhpbmcgaXMgU2VsZWN0aW9uIHtcbiAgICAgICAgaWYgKHRoaW5nIGluc3RhbmNlb2YgU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBSYW5nZS5pc1JhbmdlKHRoaW5nKSAmJlxuICAgICAgICAgICAgUG9zaXRpb24uaXNQb3NpdGlvbigodGhpbmcgYXMgU2VsZWN0aW9uKS5hbmNob3IpICYmXG4gICAgICAgICAgICBQb3NpdGlvbi5pc1Bvc2l0aW9uKCh0aGluZyBhcyBTZWxlY3Rpb24pLmFjdGl2ZSkgJiZcbiAgICAgICAgICAgIHR5cGVvZiAodGhpbmcgYXMgU2VsZWN0aW9uKS5pc1JldmVyc2VkID09PSAnYm9vbGVhbidcbiAgICAgICAgKVxuICAgIH1cblxuICAgIHByaXZhdGUgX2FuY2hvcjogUG9zaXRpb25cblxuICAgIHB1YmxpYyBnZXQgYW5jaG9yKCk6IFBvc2l0aW9uIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FuY2hvclxuICAgIH1cblxuICAgIHByaXZhdGUgX2FjdGl2ZTogUG9zaXRpb25cblxuICAgIHB1YmxpYyBnZXQgYWN0aXZlKCk6IFBvc2l0aW9uIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZVxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKGFuY2hvcjogUG9zaXRpb24sIGFjdGl2ZTogUG9zaXRpb24pXG4gICAgY29uc3RydWN0b3IoYW5jaG9yTGluZTogbnVtYmVyLCBhbmNob3JDb2x1bW46IG51bWJlciwgYWN0aXZlTGluZTogbnVtYmVyLCBhY3RpdmVDb2x1bW46IG51bWJlcilcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgYW5jaG9yTGluZU9yQW5jaG9yOiBudW1iZXIgfCBQb3NpdGlvbixcbiAgICAgICAgYW5jaG9yQ29sdW1uT3JBY3RpdmU6IG51bWJlciB8IFBvc2l0aW9uLFxuICAgICAgICBhY3RpdmVMaW5lPzogbnVtYmVyLFxuICAgICAgICBhY3RpdmVDb2x1bW4/OiBudW1iZXJcbiAgICApIHtcbiAgICAgICAgbGV0IGFuY2hvcjogUG9zaXRpb24gfCB1bmRlZmluZWRcbiAgICAgICAgbGV0IGFjdGl2ZTogUG9zaXRpb24gfCB1bmRlZmluZWRcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0eXBlb2YgYW5jaG9yTGluZU9yQW5jaG9yID09PSAnbnVtYmVyJyAmJlxuICAgICAgICAgICAgdHlwZW9mIGFuY2hvckNvbHVtbk9yQWN0aXZlID09PSAnbnVtYmVyJyAmJlxuICAgICAgICAgICAgdHlwZW9mIGFjdGl2ZUxpbmUgPT09ICdudW1iZXInICYmXG4gICAgICAgICAgICB0eXBlb2YgYWN0aXZlQ29sdW1uID09PSAnbnVtYmVyJ1xuICAgICAgICApIHtcbiAgICAgICAgICAgIGFuY2hvciA9IG5ldyBQb3NpdGlvbihhbmNob3JMaW5lT3JBbmNob3IsIGFuY2hvckNvbHVtbk9yQWN0aXZlKVxuICAgICAgICAgICAgYWN0aXZlID0gbmV3IFBvc2l0aW9uKGFjdGl2ZUxpbmUsIGFjdGl2ZUNvbHVtbilcbiAgICAgICAgfSBlbHNlIGlmIChhbmNob3JMaW5lT3JBbmNob3IgaW5zdGFuY2VvZiBQb3NpdGlvbiAmJiBhbmNob3JDb2x1bW5PckFjdGl2ZSBpbnN0YW5jZW9mIFBvc2l0aW9uKSB7XG4gICAgICAgICAgICBhbmNob3IgPSBhbmNob3JMaW5lT3JBbmNob3JcbiAgICAgICAgICAgIGFjdGl2ZSA9IGFuY2hvckNvbHVtbk9yQWN0aXZlXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWFuY2hvciB8fCAhYWN0aXZlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYXJndW1lbnRzJylcbiAgICAgICAgfVxuXG4gICAgICAgIHN1cGVyKGFuY2hvciwgYWN0aXZlKVxuXG4gICAgICAgIHRoaXMuX2FuY2hvciA9IGFuY2hvclxuICAgICAgICB0aGlzLl9hY3RpdmUgPSBhY3RpdmVcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGlzUmV2ZXJzZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hbmNob3IgPT09IHRoaXMuX2VuZFxuICAgIH1cblxuICAgIHB1YmxpYyB0b0pTT04oKTogYW55IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXJ0OiB0aGlzLnN0YXJ0LFxuICAgICAgICAgICAgZW5kOiB0aGlzLmVuZCxcbiAgICAgICAgICAgIGFjdGl2ZTogdGhpcy5hY3RpdmUsXG4gICAgICAgICAgICBhbmNob3I6IHRoaXMuYW5jaG9yLFxuICAgICAgICB9XG4gICAgfVxufVxuIl19