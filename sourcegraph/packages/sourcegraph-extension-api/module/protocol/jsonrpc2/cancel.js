import { Emitter, Event } from './events';
export var CancelNotification;
(function (CancelNotification) {
    CancelNotification.type = '$/cancelRequest';
})(CancelNotification || (CancelNotification = {}));
export var CancellationToken;
(function (CancellationToken) {
    CancellationToken.None = Object.freeze({
        isCancellationRequested: false,
        onCancellationRequested: Event.None,
    });
    CancellationToken.Cancelled = Object.freeze({
        isCancellationRequested: true,
        onCancellationRequested: Event.None,
    });
    function is(value) {
        const candidate = value;
        return (candidate &&
            // tslint:disable-next-line:no-unnecessary-qualifier
            (candidate === CancellationToken.None ||
                // tslint:disable-next-line:no-unnecessary-qualifier
                candidate === CancellationToken.Cancelled ||
                (typeof candidate.isCancellationRequested === 'boolean' && !!candidate.onCancellationRequested)));
    }
    CancellationToken.is = is;
})(CancellationToken || (CancellationToken = {}));
const shortcutEvent = Object.freeze((callback, context) => {
    const handle = setTimeout(callback.bind(context), 0);
    return {
        unsubscribe() {
            clearTimeout(handle);
        },
    };
});
class MutableToken {
    constructor() {
        this._isCancelled = false;
    }
    cancel() {
        if (!this._isCancelled) {
            this._isCancelled = true;
            if (this._emitter) {
                this._emitter.fire(undefined);
                this._emitter = undefined;
            }
        }
    }
    get isCancellationRequested() {
        return this._isCancelled;
    }
    get onCancellationRequested() {
        if (this._isCancelled) {
            return shortcutEvent;
        }
        if (!this._emitter) {
            this._emitter = new Emitter();
        }
        return this._emitter.event;
    }
}
export class CancellationTokenSource {
    get token() {
        if (!this._token) {
            // be lazy and create the token only when
            // actually needed
            this._token = new MutableToken();
        }
        return this._token;
    }
    cancel() {
        if (!this._token) {
            // save an object by returning the default
            // cancelled token when cancellation happens
            // before someone asks for the token
            this._token = CancellationToken.Cancelled;
        }
        else {
            ;
            this._token.cancel();
        }
    }
    unsubscribe() {
        this.cancel();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FuY2VsLmpzIiwic291cmNlUm9vdCI6InNyYy8iLCJzb3VyY2VzIjpbInByb3RvY29sL2pzb25ycGMyL2NhbmNlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQVd6QyxNQUFNLEtBQVcsa0JBQWtCLENBRWxDO0FBRkQsV0FBaUIsa0JBQWtCO0lBQ2xCLHVCQUFJLEdBQUcsaUJBQWlCLENBQUE7QUFDekMsQ0FBQyxFQUZnQixrQkFBa0IsS0FBbEIsa0JBQWtCLFFBRWxDO0FBbUJELE1BQU0sS0FBVyxpQkFBaUIsQ0FzQmpDO0FBdEJELFdBQWlCLGlCQUFpQjtJQUNqQixzQkFBSSxHQUFzQixNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ2pELHVCQUF1QixFQUFFLEtBQUs7UUFDOUIsdUJBQXVCLEVBQUUsS0FBSyxDQUFDLElBQUk7S0FDdEMsQ0FBQyxDQUFBO0lBRVcsMkJBQVMsR0FBc0IsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUN0RCx1QkFBdUIsRUFBRSxJQUFJO1FBQzdCLHVCQUF1QixFQUFFLEtBQUssQ0FBQyxJQUFJO0tBQ3RDLENBQUMsQ0FBQTtJQUVGLFNBQWdCLEVBQUUsQ0FBQyxLQUFVO1FBQ3pCLE1BQU0sU0FBUyxHQUFHLEtBQTBCLENBQUE7UUFDNUMsT0FBTyxDQUNILFNBQVM7WUFDVCxvREFBb0Q7WUFDcEQsQ0FBQyxTQUFTLEtBQUssaUJBQWlCLENBQUMsSUFBSTtnQkFDakMsb0RBQW9EO2dCQUNwRCxTQUFTLEtBQUssaUJBQWlCLENBQUMsU0FBUztnQkFDekMsQ0FBQyxPQUFPLFNBQVMsQ0FBQyx1QkFBdUIsS0FBSyxTQUFTLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQ3ZHLENBQUE7SUFDTCxDQUFDO0lBVmUsb0JBQUUsS0FVakIsQ0FBQTtBQUNMLENBQUMsRUF0QmdCLGlCQUFpQixLQUFqQixpQkFBaUIsUUFzQmpDO0FBRUQsTUFBTSxhQUFhLEdBQWUsTUFBTSxDQUFDLE1BQU0sQ0FDM0MsQ0FBQyxRQUFpQyxFQUFFLE9BQWEsRUFBTyxFQUFFO0lBQ3RELE1BQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQ3BELE9BQU87UUFDSCxXQUFXO1lBQ1AsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ3hCLENBQUM7S0FDSixDQUFBO0FBQ0wsQ0FBQyxDQUNKLENBQUE7QUFFRCxNQUFNLFlBQVk7SUFBbEI7UUFDWSxpQkFBWSxHQUFHLEtBQUssQ0FBQTtJQTBCaEMsQ0FBQztJQXZCVSxNQUFNO1FBQ1QsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDcEIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUE7WUFDeEIsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNmLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBO2dCQUM3QixJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQTthQUM1QjtTQUNKO0lBQ0wsQ0FBQztJQUVELElBQVcsdUJBQXVCO1FBQzlCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQTtJQUM1QixDQUFDO0lBRUQsSUFBVyx1QkFBdUI7UUFDOUIsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ25CLE9BQU8sYUFBYSxDQUFBO1NBQ3ZCO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDaEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLE9BQU8sRUFBTyxDQUFBO1NBQ3JDO1FBQ0QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQTtJQUM5QixDQUFDO0NBQ0o7QUFFRCxNQUFNLE9BQU8sdUJBQXVCO0lBR2hDLElBQVcsS0FBSztRQUNaLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2QseUNBQXlDO1lBQ3pDLGtCQUFrQjtZQUNsQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUE7U0FDbkM7UUFDRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUE7SUFDdEIsQ0FBQztJQUVNLE1BQU07UUFDVCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNkLDBDQUEwQztZQUMxQyw0Q0FBNEM7WUFDNUMsb0NBQW9DO1lBQ3BDLElBQUksQ0FBQyxNQUFNLEdBQUcsaUJBQWlCLENBQUMsU0FBUyxDQUFBO1NBQzVDO2FBQU07WUFDSCxDQUFDO1lBQUMsSUFBSSxDQUFDLE1BQXVCLENBQUMsTUFBTSxFQUFFLENBQUE7U0FDMUM7SUFDTCxDQUFDO0lBRU0sV0FBVztRQUNkLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQTtJQUNqQixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbWl0dGVyLCBFdmVudCB9IGZyb20gJy4vZXZlbnRzJ1xuXG4vLyBDb3BpZWQgZnJvbSB2c2NvZGUtanNvbnJwYyB0byBhdm9pZCBhZGRpbmcgZXh0cmFuZW91cyBkZXBlbmRlbmNpZXMuXG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2FuY2VsUGFyYW1zIHtcbiAgICAvKipcbiAgICAgKiBUaGUgcmVxdWVzdCBpZCB0byBjYW5jZWwuXG4gICAgICovXG4gICAgaWQ6IG51bWJlciB8IHN0cmluZ1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIENhbmNlbE5vdGlmaWNhdGlvbiB7XG4gICAgZXhwb3J0IGNvbnN0IHR5cGUgPSAnJC9jYW5jZWxSZXF1ZXN0J1xufVxuXG4vKipcbiAqIERlZmluZXMgYSBDYW5jZWxsYXRpb25Ub2tlbi4gVGhpcyBpbnRlcmZhY2UgaXMgbm90XG4gKiBpbnRlbmRlZCB0byBiZSBpbXBsZW1lbnRlZC4gQSBDYW5jZWxsYXRpb25Ub2tlbiBtdXN0XG4gKiBiZSBjcmVhdGVkIHZpYSBhIENhbmNlbGxhdGlvblRva2VuU291cmNlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENhbmNlbGxhdGlvblRva2VuIHtcbiAgICAvKipcbiAgICAgKiBJcyBgdHJ1ZWAgd2hlbiB0aGUgdG9rZW4gaGFzIGJlZW4gY2FuY2VsbGVkLCBgZmFsc2VgIG90aGVyd2lzZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBpc0NhbmNlbGxhdGlvblJlcXVlc3RlZDogYm9vbGVhblxuXG4gICAgLyoqXG4gICAgICogQW4gW2V2ZW50XSgjRXZlbnQpIHdoaWNoIGZpcmVzIHVwb24gY2FuY2VsbGF0aW9uLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG9uQ2FuY2VsbGF0aW9uUmVxdWVzdGVkOiBFdmVudDxhbnk+XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgQ2FuY2VsbGF0aW9uVG9rZW4ge1xuICAgIGV4cG9ydCBjb25zdCBOb25lOiBDYW5jZWxsYXRpb25Ub2tlbiA9IE9iamVjdC5mcmVlemUoe1xuICAgICAgICBpc0NhbmNlbGxhdGlvblJlcXVlc3RlZDogZmFsc2UsXG4gICAgICAgIG9uQ2FuY2VsbGF0aW9uUmVxdWVzdGVkOiBFdmVudC5Ob25lLFxuICAgIH0pXG5cbiAgICBleHBvcnQgY29uc3QgQ2FuY2VsbGVkOiBDYW5jZWxsYXRpb25Ub2tlbiA9IE9iamVjdC5mcmVlemUoe1xuICAgICAgICBpc0NhbmNlbGxhdGlvblJlcXVlc3RlZDogdHJ1ZSxcbiAgICAgICAgb25DYW5jZWxsYXRpb25SZXF1ZXN0ZWQ6IEV2ZW50Lk5vbmUsXG4gICAgfSlcblxuICAgIGV4cG9ydCBmdW5jdGlvbiBpcyh2YWx1ZTogYW55KTogdmFsdWUgaXMgQ2FuY2VsbGF0aW9uVG9rZW4ge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZSBhcyBDYW5jZWxsYXRpb25Ub2tlblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgY2FuZGlkYXRlICYmXG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdW5uZWNlc3NhcnktcXVhbGlmaWVyXG4gICAgICAgICAgICAoY2FuZGlkYXRlID09PSBDYW5jZWxsYXRpb25Ub2tlbi5Ob25lIHx8XG4gICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXVubmVjZXNzYXJ5LXF1YWxpZmllclxuICAgICAgICAgICAgICAgIGNhbmRpZGF0ZSA9PT0gQ2FuY2VsbGF0aW9uVG9rZW4uQ2FuY2VsbGVkIHx8XG4gICAgICAgICAgICAgICAgKHR5cGVvZiBjYW5kaWRhdGUuaXNDYW5jZWxsYXRpb25SZXF1ZXN0ZWQgPT09ICdib29sZWFuJyAmJiAhIWNhbmRpZGF0ZS5vbkNhbmNlbGxhdGlvblJlcXVlc3RlZCkpXG4gICAgICAgIClcbiAgICB9XG59XG5cbmNvbnN0IHNob3J0Y3V0RXZlbnQ6IEV2ZW50PGFueT4gPSBPYmplY3QuZnJlZXplKFxuICAgIChjYWxsYmFjazogKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnksIGNvbnRleHQ/OiBhbnkpOiBhbnkgPT4ge1xuICAgICAgICBjb25zdCBoYW5kbGUgPSBzZXRUaW1lb3V0KGNhbGxiYWNrLmJpbmQoY29udGV4dCksIDApXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB1bnN1YnNjcmliZSgpOiB2b2lkIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoaGFuZGxlKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfVxuICAgIH1cbilcblxuY2xhc3MgTXV0YWJsZVRva2VuIGltcGxlbWVudHMgQ2FuY2VsbGF0aW9uVG9rZW4ge1xuICAgIHByaXZhdGUgX2lzQ2FuY2VsbGVkID0gZmFsc2VcbiAgICBwcml2YXRlIF9lbWl0dGVyOiBFbWl0dGVyPGFueT4gfCB1bmRlZmluZWRcblxuICAgIHB1YmxpYyBjYW5jZWwoKTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5faXNDYW5jZWxsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2lzQ2FuY2VsbGVkID0gdHJ1ZVxuICAgICAgICAgICAgaWYgKHRoaXMuX2VtaXR0ZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0dGVyLmZpcmUodW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHRoaXMuX2VtaXR0ZXIgPSB1bmRlZmluZWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgaXNDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0NhbmNlbGxlZFxuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgb25DYW5jZWxsYXRpb25SZXF1ZXN0ZWQoKTogRXZlbnQ8YW55PiB7XG4gICAgICAgIGlmICh0aGlzLl9pc0NhbmNlbGxlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHNob3J0Y3V0RXZlbnRcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2VtaXR0ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2VtaXR0ZXIgPSBuZXcgRW1pdHRlcjxhbnk+KClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fZW1pdHRlci5ldmVudFxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIENhbmNlbGxhdGlvblRva2VuU291cmNlIHtcbiAgICBwcml2YXRlIF90b2tlbj86IENhbmNlbGxhdGlvblRva2VuXG5cbiAgICBwdWJsaWMgZ2V0IHRva2VuKCk6IENhbmNlbGxhdGlvblRva2VuIHtcbiAgICAgICAgaWYgKCF0aGlzLl90b2tlbikge1xuICAgICAgICAgICAgLy8gYmUgbGF6eSBhbmQgY3JlYXRlIHRoZSB0b2tlbiBvbmx5IHdoZW5cbiAgICAgICAgICAgIC8vIGFjdHVhbGx5IG5lZWRlZFxuICAgICAgICAgICAgdGhpcy5fdG9rZW4gPSBuZXcgTXV0YWJsZVRva2VuKClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fdG9rZW5cbiAgICB9XG5cbiAgICBwdWJsaWMgY2FuY2VsKCk6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMuX3Rva2VuKSB7XG4gICAgICAgICAgICAvLyBzYXZlIGFuIG9iamVjdCBieSByZXR1cm5pbmcgdGhlIGRlZmF1bHRcbiAgICAgICAgICAgIC8vIGNhbmNlbGxlZCB0b2tlbiB3aGVuIGNhbmNlbGxhdGlvbiBoYXBwZW5zXG4gICAgICAgICAgICAvLyBiZWZvcmUgc29tZW9uZSBhc2tzIGZvciB0aGUgdG9rZW5cbiAgICAgICAgICAgIHRoaXMuX3Rva2VuID0gQ2FuY2VsbGF0aW9uVG9rZW4uQ2FuY2VsbGVkXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICA7KHRoaXMuX3Rva2VuIGFzIE11dGFibGVUb2tlbikuY2FuY2VsKClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyB1bnN1YnNjcmliZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jYW5jZWwoKVxuICAgIH1cbn1cbiJdfQ==