export var Event;
(function (Event) {
    const _unsubscribable = {
        unsubscribe() {
            /* noop */
        },
    };
    Event.None = () => _unsubscribable;
})(Event || (Event = {}));
class CallbackList {
    add(callback, context = null, bucket) {
        if (!this._callbacks) {
            this._callbacks = [];
            this._contexts = [];
        }
        this._callbacks.push(callback);
        this._contexts.push(context);
        if (Array.isArray(bucket)) {
            bucket.push({ unsubscribe: () => this.remove(callback, context) });
        }
    }
    remove(callback, context = null) {
        if (!this._callbacks) {
            return;
        }
        let foundCallbackWithDifferentContext = false;
        for (let i = 0, len = this._callbacks.length; i < len; i++) {
            if (this._callbacks[i] === callback) {
                if (this._contexts[i] === context) {
                    // callback & context match => remove it
                    this._callbacks.splice(i, 1);
                    this._contexts.splice(i, 1);
                    return;
                }
                else {
                    foundCallbackWithDifferentContext = true;
                }
            }
        }
        if (foundCallbackWithDifferentContext) {
            throw new Error('When adding a listener with a context, you should remove it with the same context');
        }
    }
    invoke(...args) {
        if (!this._callbacks) {
            return [];
        }
        const ret = [];
        const callbacks = this._callbacks.slice(0);
        const contexts = this._contexts.slice(0);
        for (let i = 0; i < callbacks.length; i++) {
            try {
                ret.push(callbacks[i].apply(contexts[i], args));
            }
            catch (e) {
                console.error(e);
            }
        }
        return ret;
    }
    isEmpty() {
        return !this._callbacks || this._callbacks.length === 0;
    }
    unsubscribe() {
        this._callbacks = undefined;
        this._contexts = undefined;
    }
}
export class Emitter {
    /**
     * For the public to allow to subscribe
     * to events from this Emitter
     */
    get event() {
        if (!this._event) {
            this._event = (listener, thisArgs, Unsubscribables) => {
                if (!this._callbacks) {
                    this._callbacks = new CallbackList();
                }
                this._callbacks.add(listener, thisArgs);
                let result;
                result = {
                    unsubscribe: () => {
                        this._callbacks.remove(listener, thisArgs);
                        result.unsubscribe = Emitter._noop;
                    },
                };
                if (Array.isArray(Unsubscribables)) {
                    Unsubscribables.push(result);
                }
                return result;
            };
        }
        return this._event;
    }
    /**
     * To be kept private to fire an event to
     * subscribers
     */
    fire(event) {
        if (this._callbacks) {
            this._callbacks.invoke.call(this._callbacks, event);
        }
    }
    unsubscribe() {
        if (this._callbacks) {
            this._callbacks.unsubscribe();
            this._callbacks = undefined;
        }
    }
}
Emitter._noop = () => void 0;
//# sourceMappingURL=data:application/json;base64,