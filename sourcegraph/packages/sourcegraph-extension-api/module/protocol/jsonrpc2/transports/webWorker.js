import { AbstractMessageReader, AbstractMessageWriter } from '../transport';
class WebWorkerMessageReader extends AbstractMessageReader {
    constructor(worker) {
        super();
        this.worker = worker;
        this.pending = [];
        this.callback = null;
        worker.addEventListener('message', (e) => {
            try {
                this.processMessage(e);
            }
            catch (err) {
                this.fireError(err);
            }
        });
        worker.addEventListener('error', err => {
            this.fireError(err);
            terminateWorker(worker);
            this.fireClose();
        });
    }
    processMessage(e) {
        const message = e.data;
        if (this.callback) {
            this.callback(message);
        }
        else {
            this.pending.push(message);
        }
    }
    listen(callback) {
        if (this.callback) {
            throw new Error('callback is already set');
        }
        this.callback = callback;
        while (this.pending.length !== 0) {
            callback(this.pending.pop());
        }
    }
    unsubscribe() {
        super.unsubscribe();
        this.callback = null;
        terminateWorker(this.worker);
    }
}
class WebWorkerMessageWriter extends AbstractMessageWriter {
    constructor(worker) {
        super();
        this.worker = worker;
        this.errorCount = 0;
    }
    write(message) {
        try {
            this.worker.postMessage(message);
        }
        catch (error) {
            this.fireError(error, message, ++this.errorCount);
        }
    }
    unsubscribe() {
        super.unsubscribe();
        terminateWorker(this.worker);
    }
}
function terminateWorker(worker) {
    if (worker.terminate) {
        worker.terminate(); // in window (worker parent) scope
    }
    else if (worker.close) {
        worker.close(); // in worker scope
    }
}
/**
 * Creates JSON-RPC2 message transports for the Web Worker message communication interface.
 *
 * @param worker The Worker to communicate with (e.g., created with `new Worker(...)`), or the global scope (i.e.,
 *               `self`) if the current execution context is in a Worker. Defaults to the global scope.
 */
export function createWebWorkerMessageTransports(worker = globalWorkerScope()) {
    return {
        reader: new WebWorkerMessageReader(worker),
        writer: new WebWorkerMessageWriter(worker),
    };
}
function globalWorkerScope() {
    const worker = global;
    // tslint:disable-next-line no-unbound-method
    if (!worker.postMessage || 'document' in worker) {
        throw new Error('global scope is not a Worker');
    }
    return worker;
}
//# sourceMappingURL=data:application/json;base64,