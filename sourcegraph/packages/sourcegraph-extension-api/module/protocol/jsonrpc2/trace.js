// Copied from vscode-jsonrpc to avoid adding extraneous dependencies.
export var Trace;
(function (Trace) {
    Trace["Off"] = "off";
    Trace["Messages"] = "messages";
    Trace["Verbose"] = "verbose";
})(Trace || (Trace = {}));
/** A tracer that implements the Tracer interface with noop methods. */
export const noopTracer = {
    log: () => void 0,
    requestSent: () => void 0,
    requestReceived: () => void 0,
    notificationSent: () => void 0,
    notificationReceived: () => void 0,
    responseSent: () => void 0,
    responseCanceled: () => void 0,
    responseReceived: () => void 0,
    unknownResponseReceived: () => void 0,
};
/** A tracer that implements the Tracer interface with console API calls, intended for a web browser. */
export class BrowserConsoleTracer {
    constructor(name) {
        this.name = name;
    }
    prefix(level, label, title) {
        let color;
        let backgroundColor;
        if (level === 'info') {
            color = '#000';
            backgroundColor = '#eee';
        }
        else {
            color = 'white';
            backgroundColor = 'red';
        }
        return [
            '%c%s%c %s%c%s%c',
            `font-weight:bold;background-color:#d8f7ff;color:black`,
            this.name,
            '',
            label,
            `background-color:${backgroundColor};color:${color};font-weight:bold`,
            title,
            '',
        ];
    }
    log(message, details) {
        if (details) {
            ;
            console.groupCollapsed(...this.prefix('info', 'log', ''), message);
            console.log(details);
            console.groupEnd();
        }
        else {
            console.log(...this.prefix('info', 'log', ''), message);
        }
    }
    requestSent(message) {
        console.log(...this.prefix('info', `◀◀ sent request #${message.id}: `, message.method), message.params);
    }
    requestReceived(message) {
        console.log(...this.prefix('info', `▶▶ recv request #${message.id}: `, message.method), message.params);
    }
    notificationSent(message) {
        console.log(...this.prefix('info', `◀◀ sent notif: `, message.method), message.params);
    }
    notificationReceived(message) {
        console.log(...this.prefix('info', `▶▶ recv notif: `, message.method), message.params);
    }
    responseSent(message, request, startTime) {
        const prefix = this.prefix(message.error ? 'error' : 'info', `◀▶ sent response #${message.id}: `, typeof request === 'string' ? request : request.method);
        console.groupCollapsed(...prefix);
        if (message.error) {
            console.log('Error:', message.error);
        }
        else {
            console.log('Result:', message.result);
        }
        console.log('Request:', request);
        console.log('Duration: %d msec', Date.now() - startTime);
        console.groupEnd();
    }
    responseCanceled(_message, request, _cancelMessage) {
        console.log(...this.prefix('info', '× cancel: ', request.method));
    }
    responseReceived(message, request, startTime) {
        const prefix = this.prefix(message.error ? 'error' : 'info', `◀▶ recv response #${message.id}: `, typeof request === 'string' ? request : request.method);
        if (typeof request === 'string') {
            console.log(...prefix, message.error || message.result);
        }
        else {
            ;
            console.groupCollapsed(...prefix);
            if (message.error) {
                console.log('Error:', message.error);
            }
            else {
                console.log('Result:', message.result);
            }
            console.log('Request:', request);
            console.log('Duration: %d msec', Date.now() - startTime);
            console.groupEnd();
        }
    }
    unknownResponseReceived(message) {
        console.log(...this.prefix('error', 'UNKNOWN', ''), message);
    }
}
//# sourceMappingURL=data:application/json;base64,