import { Emitter } from './events';
export class AbstractMessageReader {
    constructor() {
        this.errorEmitter = new Emitter();
        this.closeEmitter = new Emitter();
    }
    unsubscribe() {
        this.errorEmitter.unsubscribe();
        this.closeEmitter.unsubscribe();
    }
    get onError() {
        return this.errorEmitter.event;
    }
    fireError(error) {
        this.errorEmitter.fire(this.asError(error));
    }
    get onClose() {
        return this.closeEmitter.event;
    }
    fireClose() {
        this.closeEmitter.fire(undefined);
    }
    asError(error) {
        if (error instanceof Error) {
            return error;
        }
        return new Error(`Reader received error. Reason: ${typeof error.message === 'string' ? error.message : 'unknown'}`);
    }
}
export class AbstractMessageWriter {
    constructor() {
        this.errorEmitter = new Emitter();
        this.closeEmitter = new Emitter();
    }
    unsubscribe() {
        this.errorEmitter.unsubscribe();
        this.closeEmitter.unsubscribe();
    }
    get onError() {
        return this.errorEmitter.event;
    }
    fireError(error, message, count) {
        this.errorEmitter.fire([this.asError(error), message, count]);
    }
    get onClose() {
        return this.closeEmitter.event;
    }
    fireClose() {
        this.closeEmitter.fire(undefined);
    }
    asError(error) {
        if (error instanceof Error) {
            return error;
        }
        return new Error(`Writer received error. Reason: ${typeof error.message === 'string' ? error.message : 'unknown'}`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNwb3J0LmpzIiwic291cmNlUm9vdCI6InNyYy8iLCJzb3VyY2VzIjpbInByb3RvY29sL2pzb25ycGMyL3RyYW5zcG9ydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFTLE1BQU0sVUFBVSxDQUFBO0FBY3pDLE1BQU0sT0FBZ0IscUJBQXFCO0lBSXZDO1FBQ0ksSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLE9BQU8sRUFBUyxDQUFBO1FBQ3hDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQTtJQUMzQyxDQUFDO0lBRU0sV0FBVztRQUNkLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUE7UUFDL0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQTtJQUNuQyxDQUFDO0lBRUQsSUFBVyxPQUFPO1FBQ2QsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQTtJQUNsQyxDQUFDO0lBRVMsU0FBUyxDQUFDLEtBQVU7UUFDMUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO0lBQy9DLENBQUM7SUFFRCxJQUFXLE9BQU87UUFDZCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFBO0lBQ2xDLENBQUM7SUFFUyxTQUFTO1FBQ2YsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUE7SUFDckMsQ0FBQztJQUVPLE9BQU8sQ0FBQyxLQUFVO1FBQ3RCLElBQUksS0FBSyxZQUFZLEtBQUssRUFBRTtZQUN4QixPQUFPLEtBQUssQ0FBQTtTQUNmO1FBQ0QsT0FBTyxJQUFJLEtBQUssQ0FDWixrQ0FBa0MsT0FBTyxLQUFLLENBQUMsT0FBTyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQ3BHLENBQUE7SUFDTCxDQUFDO0NBQ0o7QUFTRCxNQUFNLE9BQWdCLHFCQUFxQjtJQUEzQztRQUNZLGlCQUFZLEdBQUcsSUFBSSxPQUFPLEVBQW9ELENBQUE7UUFDOUUsaUJBQVksR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFBO0lBK0I5QyxDQUFDO0lBN0JVLFdBQVc7UUFDZCxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFBO1FBQy9CLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUE7SUFDbkMsQ0FBQztJQUVELElBQVcsT0FBTztRQUNkLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUE7SUFDbEMsQ0FBQztJQUVTLFNBQVMsQ0FBQyxLQUFVLEVBQUUsT0FBaUIsRUFBRSxLQUFjO1FBQzdELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQTtJQUNqRSxDQUFDO0lBRUQsSUFBVyxPQUFPO1FBQ2QsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQTtJQUNsQyxDQUFDO0lBRVMsU0FBUztRQUNmLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQ3JDLENBQUM7SUFFTyxPQUFPLENBQUMsS0FBVTtRQUN0QixJQUFJLEtBQUssWUFBWSxLQUFLLEVBQUU7WUFDeEIsT0FBTyxLQUFLLENBQUE7U0FDZjtRQUNELE9BQU8sSUFBSSxLQUFLLENBQ1osa0NBQWtDLE9BQU8sS0FBSyxDQUFDLE9BQU8sS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUNwRyxDQUFBO0lBQ0wsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRW1pdHRlciwgRXZlbnQgfSBmcm9tICcuL2V2ZW50cydcbmltcG9ydCB7IE1lc3NhZ2UgfSBmcm9tICcuL21lc3NhZ2VzJ1xuXG4vLyBDb3BpZWQgZnJvbSB2c2NvZGUtanNvbnJwYyB0byBhdm9pZCBhZGRpbmcgZXh0cmFuZW91cyBkZXBlbmRlbmNpZXMuXG5cbmV4cG9ydCB0eXBlIERhdGFDYWxsYmFjayA9IChkYXRhOiBNZXNzYWdlKSA9PiB2b2lkXG5cbmV4cG9ydCBpbnRlcmZhY2UgTWVzc2FnZVJlYWRlciB7XG4gICAgcmVhZG9ubHkgb25FcnJvcjogRXZlbnQ8RXJyb3I+XG4gICAgcmVhZG9ubHkgb25DbG9zZTogRXZlbnQ8dm9pZD5cbiAgICBsaXN0ZW4oY2FsbGJhY2s6IERhdGFDYWxsYmFjayk6IHZvaWRcbiAgICB1bnN1YnNjcmliZSgpOiB2b2lkXG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdE1lc3NhZ2VSZWFkZXIge1xuICAgIHByaXZhdGUgZXJyb3JFbWl0dGVyOiBFbWl0dGVyPEVycm9yPlxuICAgIHByaXZhdGUgY2xvc2VFbWl0dGVyOiBFbWl0dGVyPHZvaWQ+XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5lcnJvckVtaXR0ZXIgPSBuZXcgRW1pdHRlcjxFcnJvcj4oKVxuICAgICAgICB0aGlzLmNsb3NlRW1pdHRlciA9IG5ldyBFbWl0dGVyPHZvaWQ+KClcbiAgICB9XG5cbiAgICBwdWJsaWMgdW5zdWJzY3JpYmUoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZXJyb3JFbWl0dGVyLnVuc3Vic2NyaWJlKClcbiAgICAgICAgdGhpcy5jbG9zZUVtaXR0ZXIudW5zdWJzY3JpYmUoKVxuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgb25FcnJvcigpOiBFdmVudDxFcnJvcj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5lcnJvckVtaXR0ZXIuZXZlbnRcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZmlyZUVycm9yKGVycm9yOiBhbnkpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5lcnJvckVtaXR0ZXIuZmlyZSh0aGlzLmFzRXJyb3IoZXJyb3IpKVxuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgb25DbG9zZSgpOiBFdmVudDx2b2lkPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsb3NlRW1pdHRlci5ldmVudFxuICAgIH1cblxuICAgIHByb3RlY3RlZCBmaXJlQ2xvc2UoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY2xvc2VFbWl0dGVyLmZpcmUodW5kZWZpbmVkKVxuICAgIH1cblxuICAgIHByaXZhdGUgYXNFcnJvcihlcnJvcjogYW55KTogRXJyb3Ige1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICAgICAgIGBSZWFkZXIgcmVjZWl2ZWQgZXJyb3IuIFJlYXNvbjogJHt0eXBlb2YgZXJyb3IubWVzc2FnZSA9PT0gJ3N0cmluZycgPyBlcnJvci5tZXNzYWdlIDogJ3Vua25vd24nfWBcbiAgICAgICAgKVxuICAgIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBNZXNzYWdlV3JpdGVyIHtcbiAgICByZWFkb25seSBvbkVycm9yOiBFdmVudDxbRXJyb3IsIE1lc3NhZ2UgfCB1bmRlZmluZWQsIG51bWJlciB8IHVuZGVmaW5lZF0+XG4gICAgcmVhZG9ubHkgb25DbG9zZTogRXZlbnQ8dm9pZD5cbiAgICB3cml0ZShtc2c6IE1lc3NhZ2UpOiB2b2lkXG4gICAgdW5zdWJzY3JpYmUoKTogdm9pZFxufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RNZXNzYWdlV3JpdGVyIHtcbiAgICBwcml2YXRlIGVycm9yRW1pdHRlciA9IG5ldyBFbWl0dGVyPFtFcnJvciwgTWVzc2FnZSB8IHVuZGVmaW5lZCwgbnVtYmVyIHwgdW5kZWZpbmVkXT4oKVxuICAgIHByaXZhdGUgY2xvc2VFbWl0dGVyID0gbmV3IEVtaXR0ZXI8dm9pZD4oKVxuXG4gICAgcHVibGljIHVuc3Vic2NyaWJlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmVycm9yRW1pdHRlci51bnN1YnNjcmliZSgpXG4gICAgICAgIHRoaXMuY2xvc2VFbWl0dGVyLnVuc3Vic2NyaWJlKClcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IG9uRXJyb3IoKTogRXZlbnQ8W0Vycm9yLCBNZXNzYWdlIHwgdW5kZWZpbmVkLCBudW1iZXIgfCB1bmRlZmluZWRdPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmVycm9yRW1pdHRlci5ldmVudFxuICAgIH1cblxuICAgIHByb3RlY3RlZCBmaXJlRXJyb3IoZXJyb3I6IGFueSwgbWVzc2FnZT86IE1lc3NhZ2UsIGNvdW50PzogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZXJyb3JFbWl0dGVyLmZpcmUoW3RoaXMuYXNFcnJvcihlcnJvciksIG1lc3NhZ2UsIGNvdW50XSlcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IG9uQ2xvc2UoKTogRXZlbnQ8dm9pZD4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jbG9zZUVtaXR0ZXIuZXZlbnRcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZmlyZUNsb3NlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNsb3NlRW1pdHRlci5maXJlKHVuZGVmaW5lZClcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzRXJyb3IoZXJyb3I6IGFueSk6IEVycm9yIHtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBlcnJvclxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgICAgICBgV3JpdGVyIHJlY2VpdmVkIGVycm9yLiBSZWFzb246ICR7dHlwZW9mIGVycm9yLm1lc3NhZ2UgPT09ICdzdHJpbmcnID8gZXJyb3IubWVzc2FnZSA6ICd1bmtub3duJ31gXG4gICAgICAgIClcbiAgICB9XG59XG4iXX0=