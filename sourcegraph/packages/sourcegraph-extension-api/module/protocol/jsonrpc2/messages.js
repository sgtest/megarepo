/**
 * Predefined error codes.
 */
export var ErrorCodes;
(function (ErrorCodes) {
    // Defined by JSON-RPC 2.0.
    ErrorCodes.ParseError = -32700;
    ErrorCodes.InvalidRequest = -32600;
    ErrorCodes.MethodNotFound = -32601;
    ErrorCodes.InvalidParams = -32602;
    ErrorCodes.InternalError = -32603;
    ErrorCodes.serverErrorStart = -32099;
    ErrorCodes.serverErrorEnd = -32000;
    ErrorCodes.ServerNotInitialized = -32002;
    ErrorCodes.UnknownErrorCode = -32001;
    // Defined by the protocol.
    ErrorCodes.RequestCancelled = -32800;
    // Defined by this library.
    ErrorCodes.MessageWriteError = 1;
    ErrorCodes.MessageReadError = 2;
})(ErrorCodes || (ErrorCodes = {}));
/**
 * An error object return in a response in case a request
 * has failed.
 */
export class ResponseError extends Error {
    constructor(code, message, data) {
        super(message);
        this.code = typeof code === 'number' ? code : ErrorCodes.UnknownErrorCode;
        this.data = data;
        Object.setPrototypeOf(this, ResponseError.prototype);
    }
    toJSON() {
        return {
            code: this.code,
            message: this.message,
            data: this.data,
        };
    }
}
/**
 * Tests if the given message is a request message
 */
export function isRequestMessage(message) {
    const candidate = message;
    return (candidate &&
        typeof candidate.method === 'string' &&
        (typeof candidate.id === 'string' || typeof candidate.id === 'number'));
}
/**
 * Tests if the given message is a notification message
 */
export function isNotificationMessage(message) {
    const candidate = message;
    return candidate && typeof candidate.method === 'string' && message.id === void 0;
}
/**
 * Tests if the given message is a response message
 */
export function isResponseMessage(message) {
    const candidate = message;
    return (candidate &&
        (candidate.result !== void 0 || !!candidate.error) &&
        (typeof candidate.id === 'string' || typeof candidate.id === 'number' || candidate.id === null));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZXMuanMiLCJzb3VyY2VSb290Ijoic3JjLyIsInNvdXJjZXMiOlsicHJvdG9jb2wvanNvbnJwYzIvbWVzc2FnZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMkJBOztHQUVHO0FBQ0gsTUFBTSxLQUFXLFVBQVUsQ0FrQjFCO0FBbEJELFdBQWlCLFVBQVU7SUFDdkIsMkJBQTJCO0lBQ2QscUJBQVUsR0FBRyxDQUFDLEtBQUssQ0FBQTtJQUNuQix5QkFBYyxHQUFHLENBQUMsS0FBSyxDQUFBO0lBQ3ZCLHlCQUFjLEdBQUcsQ0FBQyxLQUFLLENBQUE7SUFDdkIsd0JBQWEsR0FBRyxDQUFDLEtBQUssQ0FBQTtJQUN0Qix3QkFBYSxHQUFHLENBQUMsS0FBSyxDQUFBO0lBQ3RCLDJCQUFnQixHQUFHLENBQUMsS0FBSyxDQUFBO0lBQ3pCLHlCQUFjLEdBQUcsQ0FBQyxLQUFLLENBQUE7SUFDdkIsK0JBQW9CLEdBQUcsQ0FBQyxLQUFLLENBQUE7SUFDN0IsMkJBQWdCLEdBQUcsQ0FBQyxLQUFLLENBQUE7SUFFdEMsMkJBQTJCO0lBQ2QsMkJBQWdCLEdBQUcsQ0FBQyxLQUFLLENBQUE7SUFFdEMsMkJBQTJCO0lBQ2QsNEJBQWlCLEdBQUcsQ0FBQyxDQUFBO0lBQ3JCLDJCQUFnQixHQUFHLENBQUMsQ0FBQTtBQUNyQyxDQUFDLEVBbEJnQixVQUFVLEtBQVYsVUFBVSxRQWtCMUI7QUFvQkQ7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLGFBQWlCLFNBQVEsS0FBSztJQUl2QyxZQUFZLElBQVksRUFBRSxPQUFlLEVBQUUsSUFBUTtRQUMvQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDZCxJQUFJLENBQUMsSUFBSSxHQUFHLE9BQU8sSUFBSSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUE7UUFDekUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUE7UUFDaEIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQ3hELENBQUM7SUFFTSxNQUFNO1FBQ1QsT0FBTztZQUNILElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztZQUNyQixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7U0FDbEIsQ0FBQTtJQUNMLENBQUM7Q0FDSjtBQXNDRDs7R0FFRztBQUNILE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxPQUE0QjtJQUN6RCxNQUFNLFNBQVMsR0FBRyxPQUF5QixDQUFBO0lBQzNDLE9BQU8sQ0FDSCxTQUFTO1FBQ1QsT0FBTyxTQUFTLENBQUMsTUFBTSxLQUFLLFFBQVE7UUFDcEMsQ0FBQyxPQUFPLFNBQVMsQ0FBQyxFQUFFLEtBQUssUUFBUSxJQUFJLE9BQU8sU0FBUyxDQUFDLEVBQUUsS0FBSyxRQUFRLENBQUMsQ0FDekUsQ0FBQTtBQUNMLENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sVUFBVSxxQkFBcUIsQ0FBQyxPQUE0QjtJQUM5RCxNQUFNLFNBQVMsR0FBRyxPQUE4QixDQUFBO0lBQ2hELE9BQU8sU0FBUyxJQUFJLE9BQU8sU0FBUyxDQUFDLE1BQU0sS0FBSyxRQUFRLElBQUssT0FBZSxDQUFDLEVBQUUsS0FBSyxLQUFLLENBQUMsQ0FBQTtBQUM5RixDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsaUJBQWlCLENBQUMsT0FBNEI7SUFDMUQsTUFBTSxTQUFTLEdBQUcsT0FBMEIsQ0FBQTtJQUM1QyxPQUFPLENBQ0gsU0FBUztRQUNULENBQUMsU0FBUyxDQUFDLE1BQU0sS0FBSyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztRQUNsRCxDQUFDLE9BQU8sU0FBUyxDQUFDLEVBQUUsS0FBSyxRQUFRLElBQUksT0FBTyxTQUFTLENBQUMsRUFBRSxLQUFLLFFBQVEsSUFBSSxTQUFTLENBQUMsRUFBRSxLQUFLLElBQUksQ0FBQyxDQUNsRyxDQUFBO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBsYW5ndWFnZSBzZXJ2ZXIgbWVzc2FnZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIE1lc3NhZ2Uge1xuICAgIGpzb25ycGM6IHN0cmluZ1xufVxuXG4vKipcbiAqIFJlcXVlc3QgbWVzc2FnZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlcXVlc3RNZXNzYWdlIGV4dGVuZHMgTWVzc2FnZSB7XG4gICAgLyoqXG4gICAgICogVGhlIHJlcXVlc3QgaWQuXG4gICAgICovXG4gICAgaWQ6IG51bWJlciB8IHN0cmluZ1xuXG4gICAgLyoqXG4gICAgICogVGhlIG1ldGhvZCB0byBiZSBpbnZva2VkLlxuICAgICAqL1xuICAgIG1ldGhvZDogc3RyaW5nXG5cbiAgICAvKipcbiAgICAgKiBUaGUgbWV0aG9kJ3MgcGFyYW1zLlxuICAgICAqL1xuICAgIHBhcmFtcz86IGFueVxufVxuXG4vKipcbiAqIFByZWRlZmluZWQgZXJyb3IgY29kZXMuXG4gKi9cbmV4cG9ydCBuYW1lc3BhY2UgRXJyb3JDb2RlcyB7XG4gICAgLy8gRGVmaW5lZCBieSBKU09OLVJQQyAyLjAuXG4gICAgZXhwb3J0IGNvbnN0IFBhcnNlRXJyb3IgPSAtMzI3MDBcbiAgICBleHBvcnQgY29uc3QgSW52YWxpZFJlcXVlc3QgPSAtMzI2MDBcbiAgICBleHBvcnQgY29uc3QgTWV0aG9kTm90Rm91bmQgPSAtMzI2MDFcbiAgICBleHBvcnQgY29uc3QgSW52YWxpZFBhcmFtcyA9IC0zMjYwMlxuICAgIGV4cG9ydCBjb25zdCBJbnRlcm5hbEVycm9yID0gLTMyNjAzXG4gICAgZXhwb3J0IGNvbnN0IHNlcnZlckVycm9yU3RhcnQgPSAtMzIwOTlcbiAgICBleHBvcnQgY29uc3Qgc2VydmVyRXJyb3JFbmQgPSAtMzIwMDBcbiAgICBleHBvcnQgY29uc3QgU2VydmVyTm90SW5pdGlhbGl6ZWQgPSAtMzIwMDJcbiAgICBleHBvcnQgY29uc3QgVW5rbm93bkVycm9yQ29kZSA9IC0zMjAwMVxuXG4gICAgLy8gRGVmaW5lZCBieSB0aGUgcHJvdG9jb2wuXG4gICAgZXhwb3J0IGNvbnN0IFJlcXVlc3RDYW5jZWxsZWQgPSAtMzI4MDBcblxuICAgIC8vIERlZmluZWQgYnkgdGhpcyBsaWJyYXJ5LlxuICAgIGV4cG9ydCBjb25zdCBNZXNzYWdlV3JpdGVFcnJvciA9IDFcbiAgICBleHBvcnQgY29uc3QgTWVzc2FnZVJlYWRFcnJvciA9IDJcbn1cblxuaW50ZXJmYWNlIFJlc3BvbnNlRXJyb3JMaXRlcmFsPEQ+IHtcbiAgICAvKipcbiAgICAgKiBBIG51bWJlciBpbmRpY2F0aW5nIHRoZSBlcnJvciB0eXBlIHRoYXQgb2NjdXJlZC5cbiAgICAgKi9cbiAgICBjb2RlOiBudW1iZXJcblxuICAgIC8qKlxuICAgICAqIEEgc3RyaW5nIHByb3ZpZGluZyBhIHNob3J0IGRlY3JpcHRpb24gb2YgdGhlIGVycm9yLlxuICAgICAqL1xuICAgIG1lc3NhZ2U6IHN0cmluZ1xuXG4gICAgLyoqXG4gICAgICogQSBQcmltaXRpdmUgb3IgU3RydWN0dXJlZCB2YWx1ZSB0aGF0IGNvbnRhaW5zIGFkZGl0aW9uYWxcbiAgICAgKiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgZXJyb3IuIENhbiBiZSBvbWl0dGVkLlxuICAgICAqL1xuICAgIGRhdGE/OiBEXG59XG5cbi8qKlxuICogQW4gZXJyb3Igb2JqZWN0IHJldHVybiBpbiBhIHJlc3BvbnNlIGluIGNhc2UgYSByZXF1ZXN0XG4gKiBoYXMgZmFpbGVkLlxuICovXG5leHBvcnQgY2xhc3MgUmVzcG9uc2VFcnJvcjxEPiBleHRlbmRzIEVycm9yIHtcbiAgICBwdWJsaWMgcmVhZG9ubHkgY29kZTogbnVtYmVyXG4gICAgcHVibGljIHJlYWRvbmx5IGRhdGE6IEQgfCB1bmRlZmluZWRcblxuICAgIGNvbnN0cnVjdG9yKGNvZGU6IG51bWJlciwgbWVzc2FnZTogc3RyaW5nLCBkYXRhPzogRCkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKVxuICAgICAgICB0aGlzLmNvZGUgPSB0eXBlb2YgY29kZSA9PT0gJ251bWJlcicgPyBjb2RlIDogRXJyb3JDb2Rlcy5Vbmtub3duRXJyb3JDb2RlXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGFcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFJlc3BvbnNlRXJyb3IucHJvdG90eXBlKVxuICAgIH1cblxuICAgIHB1YmxpYyB0b0pTT04oKTogUmVzcG9uc2VFcnJvckxpdGVyYWw8RD4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29kZTogdGhpcy5jb2RlLFxuICAgICAgICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgICAgICAgZGF0YTogdGhpcy5kYXRhLFxuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIEEgcmVzcG9uc2UgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZU1lc3NhZ2UgZXh0ZW5kcyBNZXNzYWdlIHtcbiAgICAvKipcbiAgICAgKiBUaGUgcmVxdWVzdCBpZC5cbiAgICAgKi9cbiAgICBpZDogbnVtYmVyIHwgc3RyaW5nIHwgbnVsbFxuXG4gICAgLyoqXG4gICAgICogVGhlIHJlc3VsdCBvZiBhIHJlcXVlc3QuIFRoaXMgY2FuIGJlIG9taXR0ZWQgaW5cbiAgICAgKiB0aGUgY2FzZSBvZiBhbiBlcnJvci5cbiAgICAgKi9cbiAgICByZXN1bHQ/OiBhbnlcblxuICAgIC8qKlxuICAgICAqIFRoZSBlcnJvciBvYmplY3QgaW4gY2FzZSBhIHJlcXVlc3QgZmFpbHMuXG4gICAgICovXG4gICAgZXJyb3I/OiBSZXNwb25zZUVycm9yTGl0ZXJhbDxhbnk+XG59XG5cbi8qKlxuICogTm90aWZpY2F0aW9uIE1lc3NhZ2VcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBOb3RpZmljYXRpb25NZXNzYWdlIGV4dGVuZHMgTWVzc2FnZSB7XG4gICAgLyoqXG4gICAgICogVGhlIG1ldGhvZCB0byBiZSBpbnZva2VkLlxuICAgICAqL1xuICAgIG1ldGhvZDogc3RyaW5nXG5cbiAgICAvKipcbiAgICAgKiBUaGUgbm90aWZpY2F0aW9uJ3MgcGFyYW1zLlxuICAgICAqL1xuICAgIHBhcmFtcz86IGFueVxufVxuXG4vKipcbiAqIFRlc3RzIGlmIHRoZSBnaXZlbiBtZXNzYWdlIGlzIGEgcmVxdWVzdCBtZXNzYWdlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1JlcXVlc3RNZXNzYWdlKG1lc3NhZ2U6IE1lc3NhZ2UgfCB1bmRlZmluZWQpOiBtZXNzYWdlIGlzIFJlcXVlc3RNZXNzYWdlIHtcbiAgICBjb25zdCBjYW5kaWRhdGUgPSBtZXNzYWdlIGFzIFJlcXVlc3RNZXNzYWdlXG4gICAgcmV0dXJuIChcbiAgICAgICAgY2FuZGlkYXRlICYmXG4gICAgICAgIHR5cGVvZiBjYW5kaWRhdGUubWV0aG9kID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAodHlwZW9mIGNhbmRpZGF0ZS5pZCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGNhbmRpZGF0ZS5pZCA9PT0gJ251bWJlcicpXG4gICAgKVxufVxuXG4vKipcbiAqIFRlc3RzIGlmIHRoZSBnaXZlbiBtZXNzYWdlIGlzIGEgbm90aWZpY2F0aW9uIG1lc3NhZ2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTm90aWZpY2F0aW9uTWVzc2FnZShtZXNzYWdlOiBNZXNzYWdlIHwgdW5kZWZpbmVkKTogbWVzc2FnZSBpcyBOb3RpZmljYXRpb25NZXNzYWdlIHtcbiAgICBjb25zdCBjYW5kaWRhdGUgPSBtZXNzYWdlIGFzIE5vdGlmaWNhdGlvbk1lc3NhZ2VcbiAgICByZXR1cm4gY2FuZGlkYXRlICYmIHR5cGVvZiBjYW5kaWRhdGUubWV0aG9kID09PSAnc3RyaW5nJyAmJiAobWVzc2FnZSBhcyBhbnkpLmlkID09PSB2b2lkIDBcbn1cblxuLyoqXG4gKiBUZXN0cyBpZiB0aGUgZ2l2ZW4gbWVzc2FnZSBpcyBhIHJlc3BvbnNlIG1lc3NhZ2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUmVzcG9uc2VNZXNzYWdlKG1lc3NhZ2U6IE1lc3NhZ2UgfCB1bmRlZmluZWQpOiBtZXNzYWdlIGlzIFJlc3BvbnNlTWVzc2FnZSB7XG4gICAgY29uc3QgY2FuZGlkYXRlID0gbWVzc2FnZSBhcyBSZXNwb25zZU1lc3NhZ2VcbiAgICByZXR1cm4gKFxuICAgICAgICBjYW5kaWRhdGUgJiZcbiAgICAgICAgKGNhbmRpZGF0ZS5yZXN1bHQgIT09IHZvaWQgMCB8fCAhIWNhbmRpZGF0ZS5lcnJvcikgJiZcbiAgICAgICAgKHR5cGVvZiBjYW5kaWRhdGUuaWQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBjYW5kaWRhdGUuaWQgPT09ICdudW1iZXInIHx8IGNhbmRpZGF0ZS5pZCA9PT0gbnVsbClcbiAgICApXG59XG4iXX0=