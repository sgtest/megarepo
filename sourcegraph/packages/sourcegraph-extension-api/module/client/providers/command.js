import { BehaviorSubject } from 'rxjs';
/** Manages and executes commands from all extensions. */
export class CommandRegistry {
    constructor() {
        this.entries = new BehaviorSubject([]);
        /** All commands, emitted whenever the set of registered commands changed. */
        this.commands = this.entries;
    }
    registerCommand(entry) {
        // Enforce uniqueness of command IDs.
        for (const e of this.entries.value) {
            if (e.command === entry.command) {
                throw new Error(`command is already registered: ${JSON.stringify(entry.command)}`);
            }
        }
        this.entries.next([...this.entries.value, entry]);
        return {
            unsubscribe: () => {
                this.entries.next(this.entries.value.filter(e => e !== entry));
            },
        };
    }
    executeCommand(params) {
        return executeCommand(this.commandsSnapshot, params);
    }
    /**
     * The current set of commands. Used by callers that do not need to react to commands being registered or
     * unregistered.
     */
    get commandsSnapshot() {
        return this.entries.value;
    }
}
/**
 * Executes the command (in the commands list) specified in params.
 *
 * Most callers should use CommandRegistry's getHover method, which uses the registered commands.
 */
export function executeCommand(commands, params) {
    const command = commands.find(c => c.command === params.command);
    if (!command) {
        throw new Error(`command not found: ${JSON.stringify(params.command)}`);
    }
    return Promise.resolve(command.run(...(params.arguments || [])));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiJzcmMvIiwic291cmNlcyI6WyJjbGllbnQvcHJvdmlkZXJzL2NvbW1hbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBOEIsTUFBTSxNQUFNLENBQUE7QUF1QmxFLHlEQUF5RDtBQUN6RCxNQUFNLE9BQU8sZUFBZTtJQUE1QjtRQUNZLFlBQU8sR0FBRyxJQUFJLGVBQWUsQ0FBaUIsRUFBRSxDQUFDLENBQUE7UUFzQnpELDZFQUE2RTtRQUM3RCxhQUFRLEdBQStCLElBQUksQ0FBQyxPQUFPLENBQUE7SUFTdkUsQ0FBQztJQTlCVSxlQUFlLENBQUMsS0FBbUI7UUFDdEMscUNBQXFDO1FBQ3JDLEtBQUssTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUU7WUFDaEMsSUFBSSxDQUFDLENBQUMsT0FBTyxLQUFLLEtBQUssQ0FBQyxPQUFPLEVBQUU7Z0JBQzdCLE1BQU0sSUFBSSxLQUFLLENBQUMsa0NBQWtDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTthQUNyRjtTQUNKO1FBRUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUE7UUFDakQsT0FBTztZQUNILFdBQVcsRUFBRSxHQUFHLEVBQUU7Z0JBQ2QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUE7WUFDbEUsQ0FBQztTQUNKLENBQUE7SUFDTCxDQUFDO0lBRU0sY0FBYyxDQUFDLE1BQTRCO1FBQzlDLE9BQU8sY0FBYyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUN4RCxDQUFDO0lBS0Q7OztPQUdHO0lBQ0gsSUFBVyxnQkFBZ0I7UUFDdkIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQTtJQUM3QixDQUFDO0NBQ0o7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLGNBQWMsQ0FBQyxRQUF3QixFQUFFLE1BQTRCO0lBQ2pGLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxLQUFLLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUNoRSxJQUFJLENBQUMsT0FBTyxFQUFFO1FBQ1YsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQkFBc0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0tBQzFFO0lBQ0QsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ3BFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIFVuc3Vic2NyaWJhYmxlIH0gZnJvbSAncnhqcydcblxuLyoqIEEgcmVnaXN0ZXJlZCBjb21tYW5kIGluIHRoZSBjb21tYW5kIHJlZ2lzdHJ5LiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb21tYW5kRW50cnkge1xuICAgIC8qKiBUaGUgY29tbWFuZCBJRCAoY29udmVudGlvbmFsbHksIGUuZy4sIFwibXlleHRlbnNpb24ubXljb21tYW5kXCIpLiAqL1xuICAgIGNvbW1hbmQ6IHN0cmluZ1xuXG4gICAgLyoqIFRoZSBmdW5jdGlvbiBjYWxsZWQgdG8gcnVuIHRoZSBjb21tYW5kIGFuZCByZXR1cm4gYW4gYXN5bmMgdmFsdWUuICovXG4gICAgcnVuOiAoLi4uYXJnczogYW55W10pID0+IFByb21pc2U8YW55PlxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEV4ZWN1dGVDb21tYW5kUGFyYW1zIHtcbiAgICAvKipcbiAgICAgKiBUaGUgaWRlbnRpZmllciBvZiB0aGUgYWN0dWFsIGNvbW1hbmQgaGFuZGxlci5cbiAgICAgKi9cbiAgICBjb21tYW5kOiBzdHJpbmdcblxuICAgIC8qKlxuICAgICAqIEFyZ3VtZW50cyB0aGF0IHRoZSBjb21tYW5kIHNob3VsZCBiZSBpbnZva2VkIHdpdGguXG4gICAgICovXG4gICAgYXJndW1lbnRzPzogYW55W11cbn1cblxuLyoqIE1hbmFnZXMgYW5kIGV4ZWN1dGVzIGNvbW1hbmRzIGZyb20gYWxsIGV4dGVuc2lvbnMuICovXG5leHBvcnQgY2xhc3MgQ29tbWFuZFJlZ2lzdHJ5IHtcbiAgICBwcml2YXRlIGVudHJpZXMgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PENvbW1hbmRFbnRyeVtdPihbXSlcblxuICAgIHB1YmxpYyByZWdpc3RlckNvbW1hbmQoZW50cnk6IENvbW1hbmRFbnRyeSk6IFVuc3Vic2NyaWJhYmxlIHtcbiAgICAgICAgLy8gRW5mb3JjZSB1bmlxdWVuZXNzIG9mIGNvbW1hbmQgSURzLlxuICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdGhpcy5lbnRyaWVzLnZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoZS5jb21tYW5kID09PSBlbnRyeS5jb21tYW5kKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjb21tYW5kIGlzIGFscmVhZHkgcmVnaXN0ZXJlZDogJHtKU09OLnN0cmluZ2lmeShlbnRyeS5jb21tYW5kKX1gKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5lbnRyaWVzLm5leHQoWy4uLnRoaXMuZW50cmllcy52YWx1ZSwgZW50cnldKVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdW5zdWJzY3JpYmU6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmVudHJpZXMubmV4dCh0aGlzLmVudHJpZXMudmFsdWUuZmlsdGVyKGUgPT4gZSAhPT0gZW50cnkpKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBleGVjdXRlQ29tbWFuZChwYXJhbXM6IEV4ZWN1dGVDb21tYW5kUGFyYW1zKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIGV4ZWN1dGVDb21tYW5kKHRoaXMuY29tbWFuZHNTbmFwc2hvdCwgcGFyYW1zKVxuICAgIH1cblxuICAgIC8qKiBBbGwgY29tbWFuZHMsIGVtaXR0ZWQgd2hlbmV2ZXIgdGhlIHNldCBvZiByZWdpc3RlcmVkIGNvbW1hbmRzIGNoYW5nZWQuICovXG4gICAgcHVibGljIHJlYWRvbmx5IGNvbW1hbmRzOiBPYnNlcnZhYmxlPENvbW1hbmRFbnRyeVtdPiA9IHRoaXMuZW50cmllc1xuXG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnQgc2V0IG9mIGNvbW1hbmRzLiBVc2VkIGJ5IGNhbGxlcnMgdGhhdCBkbyBub3QgbmVlZCB0byByZWFjdCB0byBjb21tYW5kcyBiZWluZyByZWdpc3RlcmVkIG9yXG4gICAgICogdW5yZWdpc3RlcmVkLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgY29tbWFuZHNTbmFwc2hvdCgpOiBDb21tYW5kRW50cnlbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVudHJpZXMudmFsdWVcbiAgICB9XG59XG5cbi8qKlxuICogRXhlY3V0ZXMgdGhlIGNvbW1hbmQgKGluIHRoZSBjb21tYW5kcyBsaXN0KSBzcGVjaWZpZWQgaW4gcGFyYW1zLlxuICpcbiAqIE1vc3QgY2FsbGVycyBzaG91bGQgdXNlIENvbW1hbmRSZWdpc3RyeSdzIGdldEhvdmVyIG1ldGhvZCwgd2hpY2ggdXNlcyB0aGUgcmVnaXN0ZXJlZCBjb21tYW5kcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4ZWN1dGVDb21tYW5kKGNvbW1hbmRzOiBDb21tYW5kRW50cnlbXSwgcGFyYW1zOiBFeGVjdXRlQ29tbWFuZFBhcmFtcyk6IFByb21pc2U8YW55PiB7XG4gICAgY29uc3QgY29tbWFuZCA9IGNvbW1hbmRzLmZpbmQoYyA9PiBjLmNvbW1hbmQgPT09IHBhcmFtcy5jb21tYW5kKVxuICAgIGlmICghY29tbWFuZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNvbW1hbmQgbm90IGZvdW5kOiAke0pTT04uc3RyaW5naWZ5KHBhcmFtcy5jb21tYW5kKX1gKVxuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNvbW1hbmQucnVuKC4uLihwYXJhbXMuYXJndW1lbnRzIHx8IFtdKSkpXG59XG4iXX0=