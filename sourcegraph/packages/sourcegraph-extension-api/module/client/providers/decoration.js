var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import { combineLatest } from 'rxjs';
import { map, switchMap } from 'rxjs/operators';
import { FeatureProviderRegistry } from './registry';
import { flattenAndCompact } from './util';
/** Provides text document decorations from all extensions. */
export class TextDocumentDecorationProviderRegistry extends FeatureProviderRegistry {
    getDecorations(params) {
        return getDecorations(this.providers, params);
    }
}
/**
 * Returns an observable that emits all decorations whenever any of the last-emitted set of providers emits
 * decorations.
 *
 * Most callers should use TextDocumentDecorationProviderRegistry, which uses the registered decoration providers.
 */
export function getDecorations(providers, params) {
    return providers
        .pipe(switchMap(providers => {
        if (providers.length === 0) {
            return [null];
        }
        return combineLatest(providers.map(provider => provider(params)));
    }))
        .pipe(map(flattenAndCompact));
}
/**
 * Resolves the actual styles to use for the attachment based on the current theme.
 */
export function decorationStyleForTheme(attachment, isLightTheme) {
    const overrides = isLightTheme ? attachment.light : attachment.dark;
    if (!overrides) {
        return attachment;
    }
    // Discard non-ThemableDecorationStyle properties so they aren't included in result.
    const { range, isWholeLine, after, light, dark } = attachment, base = __rest(attachment, ["range", "isWholeLine", "after", "light", "dark"]);
    return Object.assign({}, base, overrides);
}
/**
 * Resolves the actual styles to use for the attachment based on the current theme.
 */
export function decorationAttachmentStyleForTheme(attachment, isLightTheme) {
    const overrides = isLightTheme ? attachment.light : attachment.dark;
    if (!overrides) {
        return attachment;
    }
    // Discard non-ThemableDecorationAttachmentStyle properties so they aren't included in result.
    const { contentText, hoverMessage, linkURL, light, dark } = attachment, base = __rest(attachment, ["contentText", "hoverMessage", "linkURL", "light", "dark"]);
    return Object.assign({}, base, overrides);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb3JhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJzcmMvIiwic291cmNlcyI6WyJjbGllbnQvcHJvdmlkZXJzL2RlY29yYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsT0FBTyxFQUFFLGFBQWEsRUFBYyxNQUFNLE1BQU0sQ0FBQTtBQUNoRCxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFBO0FBUS9DLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLFlBQVksQ0FBQTtBQUNwRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxRQUFRLENBQUE7QUFNMUMsOERBQThEO0FBQzlELE1BQU0sT0FBTyxzQ0FBdUMsU0FBUSx1QkFHM0Q7SUFDVSxjQUFjLENBQUMsTUFBOEI7UUFDaEQsT0FBTyxjQUFjLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUNqRCxDQUFDO0NBQ0o7QUFFRDs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSxjQUFjLENBQzFCLFNBQStELEVBQy9ELE1BQThCO0lBRTlCLE9BQU8sU0FBUztTQUNYLElBQUksQ0FDRCxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUU7UUFDbEIsSUFBSSxTQUFTLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUN4QixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDaEI7UUFDRCxPQUFPLGFBQWEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNyRSxDQUFDLENBQUMsQ0FDTDtTQUNBLElBQUksQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFBO0FBQ3JDLENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sVUFBVSx1QkFBdUIsQ0FDbkMsVUFBa0MsRUFDbEMsWUFBcUI7SUFFckIsTUFBTSxTQUFTLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFBO0lBQ25FLElBQUksQ0FBQyxTQUFTLEVBQUU7UUFDWixPQUFPLFVBQVUsQ0FBQTtLQUNwQjtJQUNELG9GQUFvRjtJQUNwRixNQUFNLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksS0FBYyxVQUFVLEVBQXRCLDZFQUFzQixDQUFBO0lBQ3RFLHlCQUFZLElBQUksRUFBSyxTQUFTLEVBQUU7QUFDcEMsQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLGlDQUFpQyxDQUM3QyxVQUE2QyxFQUM3QyxZQUFxQjtJQUVyQixNQUFNLFNBQVMsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUE7SUFDbkUsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUNaLE9BQU8sVUFBVSxDQUFBO0tBQ3BCO0lBQ0QsOEZBQThGO0lBQzlGLE1BQU0sRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsSUFBSSxLQUFjLFVBQVUsRUFBdEIsc0ZBQXNCLENBQUE7SUFDL0UseUJBQVksSUFBSSxFQUFLLFNBQVMsRUFBRTtBQUNwQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29tYmluZUxhdGVzdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnXG5pbXBvcnQgeyBtYXAsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJ1xuaW1wb3J0IHtcbiAgICBEZWNvcmF0aW9uQXR0YWNobWVudFJlbmRlck9wdGlvbnMsXG4gICAgVGhlbWFibGVEZWNvcmF0aW9uQXR0YWNobWVudFN0eWxlLFxuICAgIFRoZW1hYmxlRGVjb3JhdGlvblN0eWxlLFxufSBmcm9tICdzb3VyY2VncmFwaCdcbmltcG9ydCB7IFRleHREb2N1bWVudElkZW50aWZpZXIgfSBmcm9tICcuLi8uLi9jbGllbnQvdHlwZXMvdGV4dERvY3VtZW50J1xuaW1wb3J0IHsgVGV4dERvY3VtZW50RGVjb3JhdGlvbiB9IGZyb20gJy4uLy4uL3Byb3RvY29sL3BsYWluVHlwZXMnXG5pbXBvcnQgeyBGZWF0dXJlUHJvdmlkZXJSZWdpc3RyeSB9IGZyb20gJy4vcmVnaXN0cnknXG5pbXBvcnQgeyBmbGF0dGVuQW5kQ29tcGFjdCB9IGZyb20gJy4vdXRpbCdcblxuZXhwb3J0IHR5cGUgUHJvdmlkZVRleHREb2N1bWVudERlY29yYXRpb25TaWduYXR1cmUgPSAoXG4gICAgdGV4dERvY3VtZW50OiBUZXh0RG9jdW1lbnRJZGVudGlmaWVyXG4pID0+IE9ic2VydmFibGU8VGV4dERvY3VtZW50RGVjb3JhdGlvbltdIHwgbnVsbD5cblxuLyoqIFByb3ZpZGVzIHRleHQgZG9jdW1lbnQgZGVjb3JhdGlvbnMgZnJvbSBhbGwgZXh0ZW5zaW9ucy4gKi9cbmV4cG9ydCBjbGFzcyBUZXh0RG9jdW1lbnREZWNvcmF0aW9uUHJvdmlkZXJSZWdpc3RyeSBleHRlbmRzIEZlYXR1cmVQcm92aWRlclJlZ2lzdHJ5PFxuICAgIHVuZGVmaW5lZCxcbiAgICBQcm92aWRlVGV4dERvY3VtZW50RGVjb3JhdGlvblNpZ25hdHVyZVxuPiB7XG4gICAgcHVibGljIGdldERlY29yYXRpb25zKHBhcmFtczogVGV4dERvY3VtZW50SWRlbnRpZmllcik6IE9ic2VydmFibGU8VGV4dERvY3VtZW50RGVjb3JhdGlvbltdIHwgbnVsbD4ge1xuICAgICAgICByZXR1cm4gZ2V0RGVjb3JhdGlvbnModGhpcy5wcm92aWRlcnMsIHBhcmFtcylcbiAgICB9XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYnNlcnZhYmxlIHRoYXQgZW1pdHMgYWxsIGRlY29yYXRpb25zIHdoZW5ldmVyIGFueSBvZiB0aGUgbGFzdC1lbWl0dGVkIHNldCBvZiBwcm92aWRlcnMgZW1pdHNcbiAqIGRlY29yYXRpb25zLlxuICpcbiAqIE1vc3QgY2FsbGVycyBzaG91bGQgdXNlIFRleHREb2N1bWVudERlY29yYXRpb25Qcm92aWRlclJlZ2lzdHJ5LCB3aGljaCB1c2VzIHRoZSByZWdpc3RlcmVkIGRlY29yYXRpb24gcHJvdmlkZXJzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVjb3JhdGlvbnMoXG4gICAgcHJvdmlkZXJzOiBPYnNlcnZhYmxlPFByb3ZpZGVUZXh0RG9jdW1lbnREZWNvcmF0aW9uU2lnbmF0dXJlW10+LFxuICAgIHBhcmFtczogVGV4dERvY3VtZW50SWRlbnRpZmllclxuKTogT2JzZXJ2YWJsZTxUZXh0RG9jdW1lbnREZWNvcmF0aW9uW10gfCBudWxsPiB7XG4gICAgcmV0dXJuIHByb3ZpZGVyc1xuICAgICAgICAucGlwZShcbiAgICAgICAgICAgIHN3aXRjaE1hcChwcm92aWRlcnMgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChwcm92aWRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbbnVsbF1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbWJpbmVMYXRlc3QocHJvdmlkZXJzLm1hcChwcm92aWRlciA9PiBwcm92aWRlcihwYXJhbXMpKSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIClcbiAgICAgICAgLnBpcGUobWFwKGZsYXR0ZW5BbmRDb21wYWN0KSlcbn1cblxuLyoqXG4gKiBSZXNvbHZlcyB0aGUgYWN0dWFsIHN0eWxlcyB0byB1c2UgZm9yIHRoZSBhdHRhY2htZW50IGJhc2VkIG9uIHRoZSBjdXJyZW50IHRoZW1lLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb3JhdGlvblN0eWxlRm9yVGhlbWUoXG4gICAgYXR0YWNobWVudDogVGV4dERvY3VtZW50RGVjb3JhdGlvbixcbiAgICBpc0xpZ2h0VGhlbWU6IGJvb2xlYW5cbik6IFRoZW1hYmxlRGVjb3JhdGlvblN0eWxlIHtcbiAgICBjb25zdCBvdmVycmlkZXMgPSBpc0xpZ2h0VGhlbWUgPyBhdHRhY2htZW50LmxpZ2h0IDogYXR0YWNobWVudC5kYXJrXG4gICAgaWYgKCFvdmVycmlkZXMpIHtcbiAgICAgICAgcmV0dXJuIGF0dGFjaG1lbnRcbiAgICB9XG4gICAgLy8gRGlzY2FyZCBub24tVGhlbWFibGVEZWNvcmF0aW9uU3R5bGUgcHJvcGVydGllcyBzbyB0aGV5IGFyZW4ndCBpbmNsdWRlZCBpbiByZXN1bHQuXG4gICAgY29uc3QgeyByYW5nZSwgaXNXaG9sZUxpbmUsIGFmdGVyLCBsaWdodCwgZGFyaywgLi4uYmFzZSB9ID0gYXR0YWNobWVudFxuICAgIHJldHVybiB7IC4uLmJhc2UsIC4uLm92ZXJyaWRlcyB9XG59XG5cbi8qKlxuICogUmVzb2x2ZXMgdGhlIGFjdHVhbCBzdHlsZXMgdG8gdXNlIGZvciB0aGUgYXR0YWNobWVudCBiYXNlZCBvbiB0aGUgY3VycmVudCB0aGVtZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29yYXRpb25BdHRhY2htZW50U3R5bGVGb3JUaGVtZShcbiAgICBhdHRhY2htZW50OiBEZWNvcmF0aW9uQXR0YWNobWVudFJlbmRlck9wdGlvbnMsXG4gICAgaXNMaWdodFRoZW1lOiBib29sZWFuXG4pOiBUaGVtYWJsZURlY29yYXRpb25BdHRhY2htZW50U3R5bGUge1xuICAgIGNvbnN0IG92ZXJyaWRlcyA9IGlzTGlnaHRUaGVtZSA/IGF0dGFjaG1lbnQubGlnaHQgOiBhdHRhY2htZW50LmRhcmtcbiAgICBpZiAoIW92ZXJyaWRlcykge1xuICAgICAgICByZXR1cm4gYXR0YWNobWVudFxuICAgIH1cbiAgICAvLyBEaXNjYXJkIG5vbi1UaGVtYWJsZURlY29yYXRpb25BdHRhY2htZW50U3R5bGUgcHJvcGVydGllcyBzbyB0aGV5IGFyZW4ndCBpbmNsdWRlZCBpbiByZXN1bHQuXG4gICAgY29uc3QgeyBjb250ZW50VGV4dCwgaG92ZXJNZXNzYWdlLCBsaW5rVVJMLCBsaWdodCwgZGFyaywgLi4uYmFzZSB9ID0gYXR0YWNobWVudFxuICAgIHJldHVybiB7IC4uLmJhc2UsIC4uLm92ZXJyaWRlcyB9XG59XG4iXX0=