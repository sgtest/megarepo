import { combineLatest } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';
import { FeatureProviderRegistry } from './registry';
/** Provides views from all extensions. */
export class ViewProviderRegistry extends FeatureProviderRegistry {
    /**
     * Returns an observable that emits the specified view whenever it or the set of registered view providers
     * changes. If the provider emits an error, the returned observable also emits an error (and completes).
     */
    getView(id) {
        return getView(this.entries, id);
    }
    /**
     * Returns an observable that emits all views whenever the set of registered view providers or their properties
     * change. If any provider emits an error, the error is logged and the provider is omitted from the emission of
     * the observable (the observable does not emit the error).
     */
    getViews(container) {
        return getViews(this.entries, container);
    }
}
/**
 * Exported for testing only. Most callers should use {@link ViewProviderRegistry#getView}, which uses the
 * registered view providers.
 *
 * @internal
 */
export function getView(entries, id) {
    return entries.pipe(map(entries => entries.find(entry => entry.registrationOptions.id === id)), switchMap(entry => (entry ? addRegistrationOptions(entry) : [null])));
}
/**
 * Exported for testing only. Most callers should use {@link ViewProviderRegistry#getViews}, which uses the
 * registered view providers.
 *
 * @internal
 */
export function getViews(entries, container) {
    return entries.pipe(switchMap(entries => entries && entries.length > 0
        ? combineLatest(entries.filter(e => e.registrationOptions.container === container).map(entry => addRegistrationOptions(entry).pipe(catchError(err => {
            console.error(err);
            return [null];
        })))).pipe(map(entries => entries.filter((result) => result !== null)))
        : [null]));
}
function addRegistrationOptions(entry) {
    return entry.provider.pipe(map(view => (Object.assign({}, view, entry.registrationOptions))));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy5qcyIsInNvdXJjZVJvb3QiOiJzcmMvIiwic291cmNlcyI6WyJjbGllbnQvcHJvdmlkZXJzL3ZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBYyxNQUFNLE1BQU0sQ0FBQTtBQUNoRCxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQTtBQUczRCxPQUFPLEVBQVMsdUJBQXVCLEVBQUUsTUFBTSxZQUFZLENBQUE7QUFTM0QsMENBQTBDO0FBQzFDLE1BQU0sT0FBTyxvQkFBcUIsU0FBUSx1QkFHekM7SUFDRzs7O09BR0c7SUFDSSxPQUFPLENBQUMsRUFBVTtRQUNyQixPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQ3BDLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksUUFBUSxDQUNYLFNBQXFDO1FBRXJDLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUE7SUFDNUMsQ0FBQztDQUNKO0FBRUQ7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsT0FBTyxDQUNuQixPQUEwRixFQUMxRixFQUFVO0lBRVYsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUNmLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQzFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQ3ZFLENBQUE7QUFDTCxDQUFDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsUUFBUSxDQUNwQixPQUEwRixFQUMxRixTQUFxQztJQUVyQyxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQ2YsU0FBUyxDQUNMLE9BQU8sQ0FBQyxFQUFFLENBQ04sT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQztRQUN6QixDQUFDLENBQUMsYUFBYSxDQUNULE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsU0FBUyxLQUFLLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUMzRSxzQkFBc0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQzlCLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNiLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDbEIsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ2pCLENBQUMsQ0FBQyxDQUNMLENBQ0osQ0FDSixDQUFDLElBQUksQ0FDRixHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FDVixPQUFPLENBQUMsTUFBTSxDQUNWLENBQUMsTUFBTSxFQUErRCxFQUFFLENBQ3BFLE1BQU0sS0FBSyxJQUFJLENBQ3RCLENBQ0osQ0FDSjtRQUNILENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUNuQixDQUNKLENBQUE7QUFDTCxDQUFDO0FBRUQsU0FBUyxzQkFBc0IsQ0FDM0IsS0FBMEU7SUFFMUUsT0FBTyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxtQkFBTSxJQUFJLEVBQUssS0FBSyxDQUFDLG1CQUFtQixFQUFHLENBQUMsQ0FBQyxDQUFBO0FBQ3hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb21iaW5lTGF0ZXN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcydcbmltcG9ydCB7IGNhdGNoRXJyb3IsIG1hcCwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnXG5pbXBvcnQgeyBDb250cmlidXRhYmxlVmlld0NvbnRhaW5lciB9IGZyb20gJy4uLy4uL3Byb3RvY29sJ1xuaW1wb3J0ICogYXMgcGxhaW4gZnJvbSAnLi4vLi4vcHJvdG9jb2wvcGxhaW5UeXBlcydcbmltcG9ydCB7IEVudHJ5LCBGZWF0dXJlUHJvdmlkZXJSZWdpc3RyeSB9IGZyb20gJy4vcmVnaXN0cnknXG5cbmV4cG9ydCBpbnRlcmZhY2UgVmlld1Byb3ZpZGVyUmVnaXN0cmF0aW9uT3B0aW9ucyB7XG4gICAgaWQ6IHN0cmluZ1xuICAgIGNvbnRhaW5lcjogQ29udHJpYnV0YWJsZVZpZXdDb250YWluZXJcbn1cblxuZXhwb3J0IHR5cGUgUHJvdmlkZVZpZXdTaWduYXR1cmUgPSBPYnNlcnZhYmxlPHBsYWluLlBhbmVsVmlldz5cblxuLyoqIFByb3ZpZGVzIHZpZXdzIGZyb20gYWxsIGV4dGVuc2lvbnMuICovXG5leHBvcnQgY2xhc3MgVmlld1Byb3ZpZGVyUmVnaXN0cnkgZXh0ZW5kcyBGZWF0dXJlUHJvdmlkZXJSZWdpc3RyeTxcbiAgICBWaWV3UHJvdmlkZXJSZWdpc3RyYXRpb25PcHRpb25zLFxuICAgIFByb3ZpZGVWaWV3U2lnbmF0dXJlXG4+IHtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIG9ic2VydmFibGUgdGhhdCBlbWl0cyB0aGUgc3BlY2lmaWVkIHZpZXcgd2hlbmV2ZXIgaXQgb3IgdGhlIHNldCBvZiByZWdpc3RlcmVkIHZpZXcgcHJvdmlkZXJzXG4gICAgICogY2hhbmdlcy4gSWYgdGhlIHByb3ZpZGVyIGVtaXRzIGFuIGVycm9yLCB0aGUgcmV0dXJuZWQgb2JzZXJ2YWJsZSBhbHNvIGVtaXRzIGFuIGVycm9yIChhbmQgY29tcGxldGVzKS5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0VmlldyhpZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxwbGFpbi5QYW5lbFZpZXcgfCBudWxsPiB7XG4gICAgICAgIHJldHVybiBnZXRWaWV3KHRoaXMuZW50cmllcywgaWQpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBvYnNlcnZhYmxlIHRoYXQgZW1pdHMgYWxsIHZpZXdzIHdoZW5ldmVyIHRoZSBzZXQgb2YgcmVnaXN0ZXJlZCB2aWV3IHByb3ZpZGVycyBvciB0aGVpciBwcm9wZXJ0aWVzXG4gICAgICogY2hhbmdlLiBJZiBhbnkgcHJvdmlkZXIgZW1pdHMgYW4gZXJyb3IsIHRoZSBlcnJvciBpcyBsb2dnZWQgYW5kIHRoZSBwcm92aWRlciBpcyBvbWl0dGVkIGZyb20gdGhlIGVtaXNzaW9uIG9mXG4gICAgICogdGhlIG9ic2VydmFibGUgKHRoZSBvYnNlcnZhYmxlIGRvZXMgbm90IGVtaXQgdGhlIGVycm9yKS5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0Vmlld3MoXG4gICAgICAgIGNvbnRhaW5lcjogQ29udHJpYnV0YWJsZVZpZXdDb250YWluZXJcbiAgICApOiBPYnNlcnZhYmxlPChwbGFpbi5QYW5lbFZpZXcgJiBWaWV3UHJvdmlkZXJSZWdpc3RyYXRpb25PcHRpb25zKVtdIHwgbnVsbD4ge1xuICAgICAgICByZXR1cm4gZ2V0Vmlld3ModGhpcy5lbnRyaWVzLCBjb250YWluZXIpXG4gICAgfVxufVxuXG4vKipcbiAqIEV4cG9ydGVkIGZvciB0ZXN0aW5nIG9ubHkuIE1vc3QgY2FsbGVycyBzaG91bGQgdXNlIHtAbGluayBWaWV3UHJvdmlkZXJSZWdpc3RyeSNnZXRWaWV3fSwgd2hpY2ggdXNlcyB0aGVcbiAqIHJlZ2lzdGVyZWQgdmlldyBwcm92aWRlcnMuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRWaWV3KFxuICAgIGVudHJpZXM6IE9ic2VydmFibGU8RW50cnk8Vmlld1Byb3ZpZGVyUmVnaXN0cmF0aW9uT3B0aW9ucywgT2JzZXJ2YWJsZTxwbGFpbi5QYW5lbFZpZXc+PltdPixcbiAgICBpZDogc3RyaW5nXG4pOiBPYnNlcnZhYmxlPChwbGFpbi5QYW5lbFZpZXcgJiBWaWV3UHJvdmlkZXJSZWdpc3RyYXRpb25PcHRpb25zKSB8IG51bGw+IHtcbiAgICByZXR1cm4gZW50cmllcy5waXBlKFxuICAgICAgICBtYXAoZW50cmllcyA9PiBlbnRyaWVzLmZpbmQoZW50cnkgPT4gZW50cnkucmVnaXN0cmF0aW9uT3B0aW9ucy5pZCA9PT0gaWQpKSxcbiAgICAgICAgc3dpdGNoTWFwKGVudHJ5ID0+IChlbnRyeSA/IGFkZFJlZ2lzdHJhdGlvbk9wdGlvbnMoZW50cnkpIDogW251bGxdKSlcbiAgICApXG59XG5cbi8qKlxuICogRXhwb3J0ZWQgZm9yIHRlc3Rpbmcgb25seS4gTW9zdCBjYWxsZXJzIHNob3VsZCB1c2Uge0BsaW5rIFZpZXdQcm92aWRlclJlZ2lzdHJ5I2dldFZpZXdzfSwgd2hpY2ggdXNlcyB0aGVcbiAqIHJlZ2lzdGVyZWQgdmlldyBwcm92aWRlcnMuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRWaWV3cyhcbiAgICBlbnRyaWVzOiBPYnNlcnZhYmxlPEVudHJ5PFZpZXdQcm92aWRlclJlZ2lzdHJhdGlvbk9wdGlvbnMsIE9ic2VydmFibGU8cGxhaW4uUGFuZWxWaWV3Pj5bXT4sXG4gICAgY29udGFpbmVyOiBDb250cmlidXRhYmxlVmlld0NvbnRhaW5lclxuKTogT2JzZXJ2YWJsZTwocGxhaW4uUGFuZWxWaWV3ICYgVmlld1Byb3ZpZGVyUmVnaXN0cmF0aW9uT3B0aW9ucylbXSB8IG51bGw+IHtcbiAgICByZXR1cm4gZW50cmllcy5waXBlKFxuICAgICAgICBzd2l0Y2hNYXAoXG4gICAgICAgICAgICBlbnRyaWVzID0+XG4gICAgICAgICAgICAgICAgZW50cmllcyAmJiBlbnRyaWVzLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICAgICAgPyBjb21iaW5lTGF0ZXN0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRyaWVzLmZpbHRlcihlID0+IGUucmVnaXN0cmF0aW9uT3B0aW9ucy5jb250YWluZXIgPT09IGNvbnRhaW5lcikubWFwKGVudHJ5ID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRSZWdpc3RyYXRpb25PcHRpb25zKGVudHJ5KS5waXBlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoRXJyb3IoZXJyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbbnVsbF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgKS5waXBlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBtYXAoZW50cmllcyA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cmllcy5maWx0ZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHJlc3VsdCk6IHJlc3VsdCBpcyBwbGFpbi5QYW5lbFZpZXcgJiBWaWV3UHJvdmlkZXJSZWdpc3RyYXRpb25PcHRpb25zID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCAhPT0gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICA6IFtudWxsXVxuICAgICAgICApXG4gICAgKVxufVxuXG5mdW5jdGlvbiBhZGRSZWdpc3RyYXRpb25PcHRpb25zKFxuICAgIGVudHJ5OiBFbnRyeTxWaWV3UHJvdmlkZXJSZWdpc3RyYXRpb25PcHRpb25zLCBPYnNlcnZhYmxlPHBsYWluLlBhbmVsVmlldz4+XG4pOiBPYnNlcnZhYmxlPHBsYWluLlBhbmVsVmlldyAmIFZpZXdQcm92aWRlclJlZ2lzdHJhdGlvbk9wdGlvbnM+IHtcbiAgICByZXR1cm4gZW50cnkucHJvdmlkZXIucGlwZShtYXAodmlldyA9PiAoeyAuLi52aWV3LCAuLi5lbnRyeS5yZWdpc3RyYXRpb25PcHRpb25zIH0pKSlcbn1cbiJdfQ==