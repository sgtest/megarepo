import { combineLatest, from } from 'rxjs';
import { map, switchMap } from 'rxjs/operators';
import { FeatureProviderRegistry } from './registry';
import { flattenAndCompact } from './util';
/** Provides location results from all extensions for definition, implementation, and type definition requests. */
export class TextDocumentLocationProviderRegistry extends FeatureProviderRegistry {
    getLocation(params) {
        return getLocation(this.providers, params);
    }
}
/**
 * Returns an observable that emits all providers' location results whenever any of the last-emitted set of
 * providers emits hovers.
 *
 * Most callers should use the TextDocumentLocationProviderRegistry class, which uses the registered providers.
 */
export function getLocation(providers, params) {
    return getLocations(providers, params).pipe(map(results => {
        if (results !== null && results.length === 1) {
            return results[0];
        }
        return results;
    }));
}
/**
 * Like getLocation, except the returned observable never emits singular values, always either an array or null.
 */
export function getLocations(providers, params) {
    return providers.pipe(switchMap(providers => {
        if (providers.length === 0) {
            return [null];
        }
        return combineLatest(providers.map(provider => from(provider(params))));
    }), map(flattenAndCompact));
}
/**
 * Provides reference results from all extensions.
 *
 * Reference results are always an array or null, unlike results from other location providers (e.g., from
 * textDocument/definition), which can be a single item, an array, or null.
 */
export class TextDocumentReferencesProviderRegistry extends TextDocumentLocationProviderRegistry {
    /** Gets reference locations from all extensions. */
    getLocation(params) {
        // References are always an array (unlike other locations, which can be returned as L | L[] |
        // null).
        return getLocations(this.providers, params);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYXRpb24uanMiLCJzb3VyY2VSb290Ijoic3JjLyIsInNvdXJjZXMiOlsiY2xpZW50L3Byb3ZpZGVycy9sb2NhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBYyxNQUFNLE1BQU0sQ0FBQTtBQUN0RCxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFBO0FBRy9DLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLFlBQVksQ0FBQTtBQUNwRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxRQUFRLENBQUE7QUFXMUMsa0hBQWtIO0FBQ2xILE1BQU0sT0FBTyxvQ0FHWCxTQUFRLHVCQUFvRztJQUNuRyxXQUFXLENBQUMsTUFBUztRQUN4QixPQUFPLFdBQVcsQ0FBTyxJQUFJLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQ3BELENBQUM7Q0FDSjtBQUVEOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLFdBQVcsQ0FHekIsU0FBbUUsRUFBRSxNQUFTO0lBQzVFLE9BQU8sWUFBWSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQ3ZDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUNWLElBQUksT0FBTyxLQUFLLElBQUksSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUMxQyxPQUFPLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUNwQjtRQUNELE9BQU8sT0FBTyxDQUFBO0lBQ2xCLENBQUMsQ0FBQyxDQUNMLENBQUE7QUFDTCxDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsWUFBWSxDQUcxQixTQUFtRSxFQUFFLE1BQVM7SUFDNUUsT0FBTyxTQUFTLENBQUMsSUFBSSxDQUNqQixTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUU7UUFDbEIsSUFBSSxTQUFTLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUN4QixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDaEI7UUFDRCxPQUFPLGFBQWEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUMzRSxDQUFDLENBQUMsRUFDRixHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FDekIsQ0FBQTtBQUNMLENBQUM7QUFFRDs7Ozs7R0FLRztBQUNILE1BQU0sT0FBTyxzQ0FBdUMsU0FBUSxvQ0FBcUQ7SUFDN0csb0RBQW9EO0lBQzdDLFdBQVcsQ0FBQyxNQUF1QjtRQUN0Qyw2RkFBNkY7UUFDN0YsU0FBUztRQUNULE9BQU8sWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFDL0MsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29tYmluZUxhdGVzdCwgZnJvbSwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnXG5pbXBvcnQgeyBtYXAsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJ1xuaW1wb3J0IHsgUmVmZXJlbmNlUGFyYW1zLCBUZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtcywgVGV4dERvY3VtZW50UmVnaXN0cmF0aW9uT3B0aW9ucyB9IGZyb20gJy4uLy4uL3Byb3RvY29sJ1xuaW1wb3J0IHsgTG9jYXRpb24gfSBmcm9tICcuLi8uLi9wcm90b2NvbC9wbGFpblR5cGVzJ1xuaW1wb3J0IHsgRmVhdHVyZVByb3ZpZGVyUmVnaXN0cnkgfSBmcm9tICcuL3JlZ2lzdHJ5J1xuaW1wb3J0IHsgZmxhdHRlbkFuZENvbXBhY3QgfSBmcm9tICcuL3V0aWwnXG5cbi8qKlxuICogRnVuY3Rpb24gc2lnbmF0dXJlIGZvciByZXRyaWV2aW5nIHJlbGF0ZWQgbG9jYXRpb25zIGdpdmVuIGEgbG9jYXRpb24gKGUuZy4sIGRlZmluaXRpb24sIGltcGxlbWVudGF0aW9uLCBhbmQgdHlwZVxuICogZGVmaW5pdGlvbikuXG4gKi9cbmV4cG9ydCB0eXBlIFByb3ZpZGVUZXh0RG9jdW1lbnRMb2NhdGlvblNpZ25hdHVyZTxcbiAgICBQIGV4dGVuZHMgVGV4dERvY3VtZW50UG9zaXRpb25QYXJhbXMgPSBUZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtcyxcbiAgICBMIGV4dGVuZHMgTG9jYXRpb24gPSBMb2NhdGlvblxuPiA9IChwYXJhbXM6IFApID0+IE9ic2VydmFibGU8TCB8IExbXSB8IG51bGw+XG5cbi8qKiBQcm92aWRlcyBsb2NhdGlvbiByZXN1bHRzIGZyb20gYWxsIGV4dGVuc2lvbnMgZm9yIGRlZmluaXRpb24sIGltcGxlbWVudGF0aW9uLCBhbmQgdHlwZSBkZWZpbml0aW9uIHJlcXVlc3RzLiAqL1xuZXhwb3J0IGNsYXNzIFRleHREb2N1bWVudExvY2F0aW9uUHJvdmlkZXJSZWdpc3RyeTxcbiAgICBQIGV4dGVuZHMgVGV4dERvY3VtZW50UG9zaXRpb25QYXJhbXMgPSBUZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtcyxcbiAgICBMIGV4dGVuZHMgTG9jYXRpb24gPSBMb2NhdGlvblxuPiBleHRlbmRzIEZlYXR1cmVQcm92aWRlclJlZ2lzdHJ5PFRleHREb2N1bWVudFJlZ2lzdHJhdGlvbk9wdGlvbnMsIFByb3ZpZGVUZXh0RG9jdW1lbnRMb2NhdGlvblNpZ25hdHVyZTxQLCBMPj4ge1xuICAgIHB1YmxpYyBnZXRMb2NhdGlvbihwYXJhbXM6IFApOiBPYnNlcnZhYmxlPEwgfCBMW10gfCBudWxsPiB7XG4gICAgICAgIHJldHVybiBnZXRMb2NhdGlvbjxQLCBMPih0aGlzLnByb3ZpZGVycywgcGFyYW1zKVxuICAgIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9ic2VydmFibGUgdGhhdCBlbWl0cyBhbGwgcHJvdmlkZXJzJyBsb2NhdGlvbiByZXN1bHRzIHdoZW5ldmVyIGFueSBvZiB0aGUgbGFzdC1lbWl0dGVkIHNldCBvZlxuICogcHJvdmlkZXJzIGVtaXRzIGhvdmVycy5cbiAqXG4gKiBNb3N0IGNhbGxlcnMgc2hvdWxkIHVzZSB0aGUgVGV4dERvY3VtZW50TG9jYXRpb25Qcm92aWRlclJlZ2lzdHJ5IGNsYXNzLCB3aGljaCB1c2VzIHRoZSByZWdpc3RlcmVkIHByb3ZpZGVycy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldExvY2F0aW9uPFxuICAgIFAgZXh0ZW5kcyBUZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtcyA9IFRleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zLFxuICAgIEwgZXh0ZW5kcyBMb2NhdGlvbiA9IExvY2F0aW9uXG4+KHByb3ZpZGVyczogT2JzZXJ2YWJsZTxQcm92aWRlVGV4dERvY3VtZW50TG9jYXRpb25TaWduYXR1cmU8UCwgTD5bXT4sIHBhcmFtczogUCk6IE9ic2VydmFibGU8TCB8IExbXSB8IG51bGw+IHtcbiAgICByZXR1cm4gZ2V0TG9jYXRpb25zKHByb3ZpZGVycywgcGFyYW1zKS5waXBlKFxuICAgICAgICBtYXAocmVzdWx0cyA9PiB7XG4gICAgICAgICAgICBpZiAocmVzdWx0cyAhPT0gbnVsbCAmJiByZXN1bHRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRzWzBdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0c1xuICAgICAgICB9KVxuICAgIClcbn1cblxuLyoqXG4gKiBMaWtlIGdldExvY2F0aW9uLCBleGNlcHQgdGhlIHJldHVybmVkIG9ic2VydmFibGUgbmV2ZXIgZW1pdHMgc2luZ3VsYXIgdmFsdWVzLCBhbHdheXMgZWl0aGVyIGFuIGFycmF5IG9yIG51bGwuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRMb2NhdGlvbnM8XG4gICAgUCBleHRlbmRzIFRleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zID0gVGV4dERvY3VtZW50UG9zaXRpb25QYXJhbXMsXG4gICAgTCBleHRlbmRzIExvY2F0aW9uID0gTG9jYXRpb25cbj4ocHJvdmlkZXJzOiBPYnNlcnZhYmxlPFByb3ZpZGVUZXh0RG9jdW1lbnRMb2NhdGlvblNpZ25hdHVyZTxQLCBMPltdPiwgcGFyYW1zOiBQKTogT2JzZXJ2YWJsZTxMW10gfCBudWxsPiB7XG4gICAgcmV0dXJuIHByb3ZpZGVycy5waXBlKFxuICAgICAgICBzd2l0Y2hNYXAocHJvdmlkZXJzID0+IHtcbiAgICAgICAgICAgIGlmIChwcm92aWRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtudWxsXVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvbWJpbmVMYXRlc3QocHJvdmlkZXJzLm1hcChwcm92aWRlciA9PiBmcm9tKHByb3ZpZGVyKHBhcmFtcykpKSlcbiAgICAgICAgfSksXG4gICAgICAgIG1hcChmbGF0dGVuQW5kQ29tcGFjdClcbiAgICApXG59XG5cbi8qKlxuICogUHJvdmlkZXMgcmVmZXJlbmNlIHJlc3VsdHMgZnJvbSBhbGwgZXh0ZW5zaW9ucy5cbiAqXG4gKiBSZWZlcmVuY2UgcmVzdWx0cyBhcmUgYWx3YXlzIGFuIGFycmF5IG9yIG51bGwsIHVubGlrZSByZXN1bHRzIGZyb20gb3RoZXIgbG9jYXRpb24gcHJvdmlkZXJzIChlLmcuLCBmcm9tXG4gKiB0ZXh0RG9jdW1lbnQvZGVmaW5pdGlvbiksIHdoaWNoIGNhbiBiZSBhIHNpbmdsZSBpdGVtLCBhbiBhcnJheSwgb3IgbnVsbC5cbiAqL1xuZXhwb3J0IGNsYXNzIFRleHREb2N1bWVudFJlZmVyZW5jZXNQcm92aWRlclJlZ2lzdHJ5IGV4dGVuZHMgVGV4dERvY3VtZW50TG9jYXRpb25Qcm92aWRlclJlZ2lzdHJ5PFJlZmVyZW5jZVBhcmFtcz4ge1xuICAgIC8qKiBHZXRzIHJlZmVyZW5jZSBsb2NhdGlvbnMgZnJvbSBhbGwgZXh0ZW5zaW9ucy4gKi9cbiAgICBwdWJsaWMgZ2V0TG9jYXRpb24ocGFyYW1zOiBSZWZlcmVuY2VQYXJhbXMpOiBPYnNlcnZhYmxlPExvY2F0aW9uW10gfCBudWxsPiB7XG4gICAgICAgIC8vIFJlZmVyZW5jZXMgYXJlIGFsd2F5cyBhbiBhcnJheSAodW5saWtlIG90aGVyIGxvY2F0aW9ucywgd2hpY2ggY2FuIGJlIHJldHVybmVkIGFzIEwgfCBMW10gfFxuICAgICAgICAvLyBudWxsKS5cbiAgICAgICAgcmV0dXJuIGdldExvY2F0aW9ucyh0aGlzLnByb3ZpZGVycywgcGFyYW1zKVxuICAgIH1cbn1cbiJdfQ==