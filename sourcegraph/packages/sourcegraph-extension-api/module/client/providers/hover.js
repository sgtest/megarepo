import { combineLatest, from } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';
import { HoverMerged } from '../../client/types/hover';
import { FeatureProviderRegistry } from './registry';
/** Provides hovers from all extensions. */
export class TextDocumentHoverProviderRegistry extends FeatureProviderRegistry {
    /**
     * Returns an observable that emits all providers' hovers whenever any of the last-emitted set of providers emits
     * hovers. If any provider emits an error, the error is logged and the provider is omitted from the emission of
     * the observable (the observable does not emit the error).
     */
    getHover(params) {
        return getHover(this.providers, params);
    }
}
/**
 * Returns an observable that emits all providers' hovers whenever any of the last-emitted set of providers emits
 * hovers. If any provider emits an error, the error is logged and the provider is omitted from the emission of
 * the observable (the observable does not emit the error).
 *
 * Most callers should use TextDocumentHoverProviderRegistry's getHover method, which uses the registered hover
 * providers.
 */
export function getHover(providers, params) {
    return providers
        .pipe(switchMap(providers => {
        if (providers.length === 0) {
            return [[null]];
        }
        return combineLatest(providers.map(provider => from(provider(params).pipe(catchError(err => {
            console.error(err);
            return [null];
        })))));
    }))
        .pipe(map(HoverMerged.from));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG92ZXIuanMiLCJzb3VyY2VSb290Ijoic3JjLyIsInNvdXJjZXMiOlsiY2xpZW50L3Byb3ZpZGVycy9ob3Zlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBYyxNQUFNLE1BQU0sQ0FBQTtBQUN0RCxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQTtBQUMzRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sMEJBQTBCLENBQUE7QUFHdEQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sWUFBWSxDQUFBO0FBTXBELDJDQUEyQztBQUMzQyxNQUFNLE9BQU8saUNBQWtDLFNBQVEsdUJBR3REO0lBQ0c7Ozs7T0FJRztJQUNJLFFBQVEsQ0FBQyxNQUFrQztRQUM5QyxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQzNDLENBQUM7Q0FDSjtBQUVEOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLFVBQVUsUUFBUSxDQUNwQixTQUEwRCxFQUMxRCxNQUFrQztJQUVsQyxPQUFPLFNBQVM7U0FDWCxJQUFJLENBQ0QsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1FBQ2xCLElBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDeEIsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtTQUNsQjtRQUNELE9BQU8sYUFBYSxDQUNoQixTQUFTLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQ3JCLElBQUksQ0FDQSxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUNqQixVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDYixPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQ2xCLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNqQixDQUFDLENBQUMsQ0FDTCxDQUNKLENBQ0osQ0FDSixDQUFBO0lBQ0wsQ0FBQyxDQUFDLENBQ0w7U0FDQSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO0FBQ3BDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb21iaW5lTGF0ZXN0LCBmcm9tLCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcydcbmltcG9ydCB7IGNhdGNoRXJyb3IsIG1hcCwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnXG5pbXBvcnQgeyBIb3Zlck1lcmdlZCB9IGZyb20gJy4uLy4uL2NsaWVudC90eXBlcy9ob3ZlcidcbmltcG9ydCB7IFRleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zLCBUZXh0RG9jdW1lbnRSZWdpc3RyYXRpb25PcHRpb25zIH0gZnJvbSAnLi4vLi4vcHJvdG9jb2wnXG5pbXBvcnQgeyBIb3ZlciB9IGZyb20gJy4uLy4uL3Byb3RvY29sL3BsYWluVHlwZXMnXG5pbXBvcnQgeyBGZWF0dXJlUHJvdmlkZXJSZWdpc3RyeSB9IGZyb20gJy4vcmVnaXN0cnknXG5cbmV4cG9ydCB0eXBlIFByb3ZpZGVUZXh0RG9jdW1lbnRIb3ZlclNpZ25hdHVyZSA9IChcbiAgICBwYXJhbXM6IFRleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zXG4pID0+IE9ic2VydmFibGU8SG92ZXIgfCBudWxsIHwgdW5kZWZpbmVkPlxuXG4vKiogUHJvdmlkZXMgaG92ZXJzIGZyb20gYWxsIGV4dGVuc2lvbnMuICovXG5leHBvcnQgY2xhc3MgVGV4dERvY3VtZW50SG92ZXJQcm92aWRlclJlZ2lzdHJ5IGV4dGVuZHMgRmVhdHVyZVByb3ZpZGVyUmVnaXN0cnk8XG4gICAgVGV4dERvY3VtZW50UmVnaXN0cmF0aW9uT3B0aW9ucyxcbiAgICBQcm92aWRlVGV4dERvY3VtZW50SG92ZXJTaWduYXR1cmVcbj4ge1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gb2JzZXJ2YWJsZSB0aGF0IGVtaXRzIGFsbCBwcm92aWRlcnMnIGhvdmVycyB3aGVuZXZlciBhbnkgb2YgdGhlIGxhc3QtZW1pdHRlZCBzZXQgb2YgcHJvdmlkZXJzIGVtaXRzXG4gICAgICogaG92ZXJzLiBJZiBhbnkgcHJvdmlkZXIgZW1pdHMgYW4gZXJyb3IsIHRoZSBlcnJvciBpcyBsb2dnZWQgYW5kIHRoZSBwcm92aWRlciBpcyBvbWl0dGVkIGZyb20gdGhlIGVtaXNzaW9uIG9mXG4gICAgICogdGhlIG9ic2VydmFibGUgKHRoZSBvYnNlcnZhYmxlIGRvZXMgbm90IGVtaXQgdGhlIGVycm9yKS5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0SG92ZXIocGFyYW1zOiBUZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtcyk6IE9ic2VydmFibGU8SG92ZXJNZXJnZWQgfCBudWxsPiB7XG4gICAgICAgIHJldHVybiBnZXRIb3Zlcih0aGlzLnByb3ZpZGVycywgcGFyYW1zKVxuICAgIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9ic2VydmFibGUgdGhhdCBlbWl0cyBhbGwgcHJvdmlkZXJzJyBob3ZlcnMgd2hlbmV2ZXIgYW55IG9mIHRoZSBsYXN0LWVtaXR0ZWQgc2V0IG9mIHByb3ZpZGVycyBlbWl0c1xuICogaG92ZXJzLiBJZiBhbnkgcHJvdmlkZXIgZW1pdHMgYW4gZXJyb3IsIHRoZSBlcnJvciBpcyBsb2dnZWQgYW5kIHRoZSBwcm92aWRlciBpcyBvbWl0dGVkIGZyb20gdGhlIGVtaXNzaW9uIG9mXG4gKiB0aGUgb2JzZXJ2YWJsZSAodGhlIG9ic2VydmFibGUgZG9lcyBub3QgZW1pdCB0aGUgZXJyb3IpLlxuICpcbiAqIE1vc3QgY2FsbGVycyBzaG91bGQgdXNlIFRleHREb2N1bWVudEhvdmVyUHJvdmlkZXJSZWdpc3RyeSdzIGdldEhvdmVyIG1ldGhvZCwgd2hpY2ggdXNlcyB0aGUgcmVnaXN0ZXJlZCBob3ZlclxuICogcHJvdmlkZXJzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SG92ZXIoXG4gICAgcHJvdmlkZXJzOiBPYnNlcnZhYmxlPFByb3ZpZGVUZXh0RG9jdW1lbnRIb3ZlclNpZ25hdHVyZVtdPixcbiAgICBwYXJhbXM6IFRleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zXG4pOiBPYnNlcnZhYmxlPEhvdmVyTWVyZ2VkIHwgbnVsbD4ge1xuICAgIHJldHVybiBwcm92aWRlcnNcbiAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICBzd2l0Y2hNYXAocHJvdmlkZXJzID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocHJvdmlkZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW1tudWxsXV1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbWJpbmVMYXRlc3QoXG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGVycy5tYXAocHJvdmlkZXIgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb20oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXIocGFyYW1zKS5waXBlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaEVycm9yKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbbnVsbF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgICAgIC5waXBlKG1hcChIb3Zlck1lcmdlZC5mcm9tKSlcbn1cbiJdfQ==