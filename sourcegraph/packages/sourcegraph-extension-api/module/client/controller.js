import { BehaviorSubject, Subject, Subscription } from 'rxjs';
import { distinctUntilChanged, map } from 'rxjs/operators';
import { createConnection } from '../protocol/jsonrpc2/connection';
import { BrowserConsoleTracer } from '../protocol/jsonrpc2/trace';
import { isEqual } from '../util';
import { ClientCodeEditor } from './api/codeEditor';
import { ClientCommands } from './api/commands';
import { ClientConfiguration } from './api/configuration';
import { ClientContext } from './api/context';
import { ClientDocuments } from './api/documents';
import { ClientLanguageFeatures } from './api/languageFeatures';
import { Search } from './api/search';
import { ClientViews } from './api/views';
import { ClientWindows } from './api/windows';
import { applyContextUpdate, EMPTY_CONTEXT } from './context/context';
import { EMPTY_ENVIRONMENT } from './environment';
import { Registries } from './registries';
/**
 * The controller for the environment.
 *
 * @template X extension type
 * @template C configuration cascade type
 */
export class Controller {
    constructor(options) {
        this.options = options;
        this._environment = new BehaviorSubject(EMPTY_ENVIRONMENT);
        /** The environment. */
        this.environment = this._environment;
        this._clientEntries = new BehaviorSubject([]);
        this.subscriptions = new Subscription();
        this._logMessages = new Subject();
        this._showMessages = new Subject();
        this._showMessageRequests = new Subject();
        this._showInputs = new Subject();
        this._configurationUpdates = new Subject();
        /** Log messages from extensions. */
        this.logMessages = this._logMessages;
        /** Messages from extensions intended for display to the user. */
        this.showMessages = this._showMessages;
        /** Messages from extensions requesting the user to select an action. */
        this.showMessageRequests = this._showMessageRequests;
        /** Messages from extensions requesting text input from the user. */
        this.showInputs = this._showInputs;
        /** Configuration updates from extensions. */
        this.configurationUpdates = this._configurationUpdates;
        /**
         * Detect when setEnvironment is called within a setEnvironment call, which probably means there is a bug.
         */
        this.inSetEnvironment = false;
        this.subscriptions.add(() => {
            for (const c of this._clientEntries.value) {
                c.subscription.unsubscribe();
            }
        });
        this.registries = new Registries(this.environment);
    }
    /** An observable that emits whenever the set of clients managed by this controller changes. */
    get clientEntries() {
        return this._clientEntries;
    }
    setEnvironment(nextEnvironment) {
        if (this.inSetEnvironment) {
            throw new Error('setEnvironment may not be called recursively');
        }
        this.inSetEnvironment = true;
        if (this.options.environmentFilter) {
            nextEnvironment = this.options.environmentFilter(nextEnvironment);
        }
        // External consumers don't see context, and their setEnvironment args lack context.
        if (nextEnvironment.context === EMPTY_CONTEXT) {
            nextEnvironment = Object.assign({}, nextEnvironment, { context: this._environment.value.context });
        }
        if (isEqual(this._environment.value, nextEnvironment)) {
            this.inSetEnvironment = false;
            return; // no change
        }
        this._environment.next(nextEnvironment);
        this.onEnvironmentChange();
        this.inSetEnvironment = false;
    }
    onEnvironmentChange() {
        const environment = this._environment.value; // new environment
        // Diff clients.
        const newClients = computeClients(environment);
        const nextClients = [];
        const unusedClients = [];
        for (const oldClient of this._clientEntries.value) {
            const newIndex = newClients.findIndex(newClient => isEqual(oldClient.key, newClient));
            if (newIndex === -1) {
                // Client is no longer needed.
                unusedClients.push(oldClient);
            }
            else {
                // Client already exists. Settings may have changed, but ConfigurationFeature is responsible for
                // notifying the server of configuration changes.
                newClients.splice(newIndex, 1);
                nextClients.push(oldClient);
            }
        }
        // Remove clients that are no longer in use.
        for (const unusedClient of unusedClients) {
            unusedClient.subscription.unsubscribe();
        }
        // Create new clients.
        for (const key of newClients) {
            // Find the extension that this client is for.
            const extension = environment.extensions.find(x => x.id === key.id);
            if (!extension) {
                throw new Error(`extension not found: ${key.id}`);
            }
            // Construct client.
            const clientOptions = this.options.clientOptions(key, extension);
            const subscription = new Subscription();
            const extensionConnection = {
                key,
                subscription,
                connection: Promise.resolve(clientOptions.createMessageTransports()).then(transports => {
                    const connection = createConnection(transports);
                    subscription.add(connection);
                    connection.listen();
                    connection.onRequest('ping', () => 'pong');
                    this.registerClientFeatures(connection, subscription, this.environment.pipe(map(({ configuration }) => configuration), distinctUntilChanged()));
                    return connection;
                }),
            };
            nextClients.push(extensionConnection);
        }
        this._clientEntries.next(nextClients);
    }
    registerClientFeatures(client, subscription, configuration) {
        subscription.add(new ClientConfiguration(client, configuration, (params) => new Promise(resolve => this._configurationUpdates.next(Object.assign({}, params, { resolve })))));
        subscription.add(new ClientContext(client, (updates) => 
        // Set environment manually, not via Controller#setEnvironment, to avoid recursive setEnvironment calls
        // (when this callback is called during setEnvironment's teardown of unused clients).
        this._environment.next(Object.assign({}, this._environment.value, { context: applyContextUpdate(this._environment.value.context, updates) }))));
        subscription.add(new ClientWindows(client, this.environment.pipe(map(({ visibleTextDocuments }) => visibleTextDocuments), distinctUntilChanged()), (params) => this._showMessages.next(Object.assign({}, params)), (params) => new Promise(resolve => {
            this._showMessageRequests.next(Object.assign({}, params, { resolve }));
        }), (params) => new Promise(resolve => {
            this._showInputs.next(Object.assign({}, params, { resolve }));
        })));
        subscription.add(new ClientViews(client, this.registries.views));
        subscription.add(new ClientCodeEditor(client, this.registries.textDocumentDecoration));
        subscription.add(new ClientDocuments(client, this.environment.pipe(map(({ visibleTextDocuments }) => visibleTextDocuments), distinctUntilChanged())));
        subscription.add(new ClientLanguageFeatures(client, this.registries.textDocumentHover, this.registries.textDocumentDefinition, this.registries.textDocumentTypeDefinition, this.registries.textDocumentImplementation, this.registries.textDocumentReferences));
        subscription.add(new Search(client, this.registries.queryTransformer));
        subscription.add(new ClientCommands(client, this.registries.commands));
    }
    set trace(value) {
        for (const client of this._clientEntries.value) {
            client.connection
                .then(connection => {
                connection.trace(value, new BrowserConsoleTracer(client.key.id));
            })
                .catch(() => void 0);
        }
    }
    unsubscribe() {
        this.subscriptions.unsubscribe();
    }
}
function computeClients(environment) {
    const clients = [];
    if (!environment.extensions) {
        return clients;
    }
    for (const x of environment.extensions) {
        clients.push({ id: x.id });
    }
    return clients;
}
//# sourceMappingURL=data:application/json;base64,