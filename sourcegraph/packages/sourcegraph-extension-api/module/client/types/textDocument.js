import minimatch from 'minimatch';
export function match(selectors, document) {
    for (const selector of isSingleDocumentSelector(selectors) ? [selectors] : selectors) {
        if (match1(selector, document)) {
            return true;
        }
    }
    return false;
}
function isSingleDocumentSelector(value) {
    return Array.isArray(value) && (value.length === 0 || isDocumentSelectorElement(value[0]));
}
function isDocumentSelectorElement(value) {
    return typeof value === 'string' || isDocumentFilter(value);
}
function isDocumentFilter(value) {
    const candidate = value;
    return (typeof candidate.language === 'string' ||
        typeof candidate.scheme === 'string' ||
        typeof candidate.pattern === 'string');
}
function match1(selector, document) {
    return score(selector, document.uri, document.languageId) !== 0;
}
/**
 * Taken from
 * https://github.com/Microsoft/vscode/blob/3d35801127f0a62d58d752bc613506e836c5d120/src/vs/editor/common/modes/languageSelector.ts#L24.
 */
export function score(selector, candidateUri, candidateLanguage) {
    // array -> take max individual value
    let ret = 0;
    for (const filter of selector) {
        const value = score1(filter, candidateUri, candidateLanguage);
        if (value === 10) {
            return value; // already at the highest
        }
        if (value > ret) {
            ret = value;
        }
    }
    return ret;
}
function score1(selector, candidateUri, candidateLanguage) {
    if (typeof selector === 'string') {
        // Shorthand notation: "mylang" -> {language: "mylang"}, "*" -> {language: "*""}.
        if (selector === '*') {
            return 5;
        }
        else if (selector === candidateLanguage) {
            return 10;
        }
        else {
            return 0;
        }
    }
    const { language, scheme, pattern } = selector;
    let ret = 0;
    if (scheme) {
        if (candidateUri.startsWith(scheme + ':')) {
            ret = 10;
        }
        else if (scheme === '*') {
            ret = 5;
        }
        else {
            return 0;
        }
    }
    if (language) {
        if (language === candidateLanguage) {
            ret = 10;
        }
        else if (language === '*') {
            ret = Math.max(ret, 5);
        }
        else {
            return 0;
        }
    }
    if (pattern) {
        if (pattern === candidateUri || candidateUri.endsWith(pattern) || minimatch(candidateUri, pattern)) {
            ret = 10;
        }
        else if (minimatch(candidateUri, '**/' + pattern)) {
            ret = 5;
        }
        else {
            return 0;
        }
    }
    return ret;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dERvY3VtZW50LmpzIiwic291cmNlUm9vdCI6InNyYy8iLCJzb3VyY2VzIjpbImNsaWVudC90eXBlcy90ZXh0RG9jdW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxTQUFTLE1BQU0sV0FBVyxDQUFBO0FBc0JqQyxNQUFNLFVBQVUsS0FBSyxDQUNqQixTQUFnRSxFQUNoRSxRQUEwQjtJQUUxQixLQUFLLE1BQU0sUUFBUSxJQUFJLHdCQUF3QixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUU7UUFDbEYsSUFBSSxNQUFNLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxFQUFFO1lBQzVCLE9BQU8sSUFBSSxDQUFBO1NBQ2Q7S0FDSjtJQUNELE9BQU8sS0FBSyxDQUFBO0FBQ2hCLENBQUM7QUFFRCxTQUFTLHdCQUF3QixDQUM3QixLQUE0RDtJQUU1RCxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSx5QkFBeUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQzlGLENBQUM7QUFFRCxTQUFTLHlCQUF5QixDQUFDLEtBQVU7SUFDekMsT0FBTyxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUE7QUFDL0QsQ0FBQztBQUVELFNBQVMsZ0JBQWdCLENBQUMsS0FBVTtJQUNoQyxNQUFNLFNBQVMsR0FBbUIsS0FBSyxDQUFBO0lBQ3ZDLE9BQU8sQ0FDSCxPQUFPLFNBQVMsQ0FBQyxRQUFRLEtBQUssUUFBUTtRQUN0QyxPQUFPLFNBQVMsQ0FBQyxNQUFNLEtBQUssUUFBUTtRQUNwQyxPQUFPLFNBQVMsQ0FBQyxPQUFPLEtBQUssUUFBUSxDQUN4QyxDQUFBO0FBQ0wsQ0FBQztBQUVELFNBQVMsTUFBTSxDQUFDLFFBQTBCLEVBQUUsUUFBMEI7SUFDbEUsT0FBTyxLQUFLLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUNuRSxDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxVQUFVLEtBQUssQ0FBQyxRQUEwQixFQUFFLFlBQW9CLEVBQUUsaUJBQXlCO0lBQzdGLHFDQUFxQztJQUNyQyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUE7SUFDWCxLQUFLLE1BQU0sTUFBTSxJQUFJLFFBQVEsRUFBRTtRQUMzQixNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLFlBQVksRUFBRSxpQkFBaUIsQ0FBQyxDQUFBO1FBQzdELElBQUksS0FBSyxLQUFLLEVBQUUsRUFBRTtZQUNkLE9BQU8sS0FBSyxDQUFBLENBQUMseUJBQXlCO1NBQ3pDO1FBQ0QsSUFBSSxLQUFLLEdBQUcsR0FBRyxFQUFFO1lBQ2IsR0FBRyxHQUFHLEtBQUssQ0FBQTtTQUNkO0tBQ0o7SUFDRCxPQUFPLEdBQUcsQ0FBQTtBQUNkLENBQUM7QUFFRCxTQUFTLE1BQU0sQ0FBQyxRQUE2QixFQUFFLFlBQW9CLEVBQUUsaUJBQXlCO0lBQzFGLElBQUksT0FBTyxRQUFRLEtBQUssUUFBUSxFQUFFO1FBQzlCLGlGQUFpRjtRQUNqRixJQUFJLFFBQVEsS0FBSyxHQUFHLEVBQUU7WUFDbEIsT0FBTyxDQUFDLENBQUE7U0FDWDthQUFNLElBQUksUUFBUSxLQUFLLGlCQUFpQixFQUFFO1lBQ3ZDLE9BQU8sRUFBRSxDQUFBO1NBQ1o7YUFBTTtZQUNILE9BQU8sQ0FBQyxDQUFBO1NBQ1g7S0FDSjtJQUVELE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLFFBQVEsQ0FBQTtJQUM5QyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUE7SUFDWCxJQUFJLE1BQU0sRUFBRTtRQUNSLElBQUksWUFBWSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLEVBQUU7WUFDdkMsR0FBRyxHQUFHLEVBQUUsQ0FBQTtTQUNYO2FBQU0sSUFBSSxNQUFNLEtBQUssR0FBRyxFQUFFO1lBQ3ZCLEdBQUcsR0FBRyxDQUFDLENBQUE7U0FDVjthQUFNO1lBQ0gsT0FBTyxDQUFDLENBQUE7U0FDWDtLQUNKO0lBQ0QsSUFBSSxRQUFRLEVBQUU7UUFDVixJQUFJLFFBQVEsS0FBSyxpQkFBaUIsRUFBRTtZQUNoQyxHQUFHLEdBQUcsRUFBRSxDQUFBO1NBQ1g7YUFBTSxJQUFJLFFBQVEsS0FBSyxHQUFHLEVBQUU7WUFDekIsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFBO1NBQ3pCO2FBQU07WUFDSCxPQUFPLENBQUMsQ0FBQTtTQUNYO0tBQ0o7SUFDRCxJQUFJLE9BQU8sRUFBRTtRQUNULElBQUksT0FBTyxLQUFLLFlBQVksSUFBSSxZQUFZLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLFNBQVMsQ0FBQyxZQUFZLEVBQUUsT0FBTyxDQUFDLEVBQUU7WUFDaEcsR0FBRyxHQUFHLEVBQUUsQ0FBQTtTQUNYO2FBQU0sSUFBSSxTQUFTLENBQUMsWUFBWSxFQUFFLEtBQUssR0FBRyxPQUFPLENBQUMsRUFBRTtZQUNqRCxHQUFHLEdBQUcsQ0FBQyxDQUFBO1NBQ1Y7YUFBTTtZQUNILE9BQU8sQ0FBQyxDQUFBO1NBQ1g7S0FDSjtJQUNELE9BQU8sR0FBRyxDQUFBO0FBQ2QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtaW5pbWF0Y2ggZnJvbSAnbWluaW1hdGNoJ1xuaW1wb3J0IHsgRG9jdW1lbnRGaWx0ZXIsIERvY3VtZW50U2VsZWN0b3IgfSBmcm9tICdzb3VyY2VncmFwaCdcblxuLyoqXG4gKiBBIGxpdGVyYWwgdG8gaWRlbnRpZnkgYSB0ZXh0IGRvY3VtZW50IGluIHRoZSBjbGllbnQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGV4dERvY3VtZW50SWRlbnRpZmllciB7XG4gICAgLyoqXG4gICAgICogVGhlIHRleHQgZG9jdW1lbnQncyB1cmkuXG4gICAgICovXG4gICAgdXJpOiBzdHJpbmdcbn1cblxuLyoqXG4gKiBBbiBpdGVtIHRvIHRyYW5zZmVyIGEgdGV4dCBkb2N1bWVudCBmcm9tIHRoZSBjbGllbnQgdG8gdGhlIHNlcnZlci5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUZXh0RG9jdW1lbnRJdGVtIHtcbiAgICB1cmk6IHN0cmluZ1xuICAgIGxhbmd1YWdlSWQ6IHN0cmluZ1xuICAgIHRleHQ6IHN0cmluZ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWF0Y2goXG4gICAgc2VsZWN0b3JzOiBEb2N1bWVudFNlbGVjdG9yIHwgSXRlcmFibGVJdGVyYXRvcjxEb2N1bWVudFNlbGVjdG9yPixcbiAgICBkb2N1bWVudDogVGV4dERvY3VtZW50SXRlbVxuKTogYm9vbGVhbiB7XG4gICAgZm9yIChjb25zdCBzZWxlY3RvciBvZiBpc1NpbmdsZURvY3VtZW50U2VsZWN0b3Ioc2VsZWN0b3JzKSA/IFtzZWxlY3RvcnNdIDogc2VsZWN0b3JzKSB7XG4gICAgICAgIGlmIChtYXRjaDEoc2VsZWN0b3IsIGRvY3VtZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gaXNTaW5nbGVEb2N1bWVudFNlbGVjdG9yKFxuICAgIHZhbHVlOiBEb2N1bWVudFNlbGVjdG9yIHwgSXRlcmFibGVJdGVyYXRvcjxEb2N1bWVudFNlbGVjdG9yPlxuKTogdmFsdWUgaXMgRG9jdW1lbnRTZWxlY3RvciB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpICYmICh2YWx1ZS5sZW5ndGggPT09IDAgfHwgaXNEb2N1bWVudFNlbGVjdG9yRWxlbWVudCh2YWx1ZVswXSkpXG59XG5cbmZ1bmN0aW9uIGlzRG9jdW1lbnRTZWxlY3RvckVsZW1lbnQodmFsdWU6IGFueSk6IHZhbHVlIGlzIERvY3VtZW50U2VsZWN0b3JbMF0ge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IGlzRG9jdW1lbnRGaWx0ZXIodmFsdWUpXG59XG5cbmZ1bmN0aW9uIGlzRG9jdW1lbnRGaWx0ZXIodmFsdWU6IGFueSk6IHZhbHVlIGlzIERvY3VtZW50RmlsdGVyIHtcbiAgICBjb25zdCBjYW5kaWRhdGU6IERvY3VtZW50RmlsdGVyID0gdmFsdWVcbiAgICByZXR1cm4gKFxuICAgICAgICB0eXBlb2YgY2FuZGlkYXRlLmxhbmd1YWdlID09PSAnc3RyaW5nJyB8fFxuICAgICAgICB0eXBlb2YgY2FuZGlkYXRlLnNjaGVtZSA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgdHlwZW9mIGNhbmRpZGF0ZS5wYXR0ZXJuID09PSAnc3RyaW5nJ1xuICAgIClcbn1cblxuZnVuY3Rpb24gbWF0Y2gxKHNlbGVjdG9yOiBEb2N1bWVudFNlbGVjdG9yLCBkb2N1bWVudDogVGV4dERvY3VtZW50SXRlbSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBzY29yZShzZWxlY3RvciwgZG9jdW1lbnQudXJpLCBkb2N1bWVudC5sYW5ndWFnZUlkKSAhPT0gMFxufVxuXG4vKipcbiAqIFRha2VuIGZyb21cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvdnNjb2RlL2Jsb2IvM2QzNTgwMTEyN2YwYTYyZDU4ZDc1MmJjNjEzNTA2ZTgzNmM1ZDEyMC9zcmMvdnMvZWRpdG9yL2NvbW1vbi9tb2Rlcy9sYW5ndWFnZVNlbGVjdG9yLnRzI0wyNC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNjb3JlKHNlbGVjdG9yOiBEb2N1bWVudFNlbGVjdG9yLCBjYW5kaWRhdGVVcmk6IHN0cmluZywgY2FuZGlkYXRlTGFuZ3VhZ2U6IHN0cmluZyk6IG51bWJlciB7XG4gICAgLy8gYXJyYXkgLT4gdGFrZSBtYXggaW5kaXZpZHVhbCB2YWx1ZVxuICAgIGxldCByZXQgPSAwXG4gICAgZm9yIChjb25zdCBmaWx0ZXIgb2Ygc2VsZWN0b3IpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBzY29yZTEoZmlsdGVyLCBjYW5kaWRhdGVVcmksIGNhbmRpZGF0ZUxhbmd1YWdlKVxuICAgICAgICBpZiAodmFsdWUgPT09IDEwKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUgLy8gYWxyZWFkeSBhdCB0aGUgaGlnaGVzdFxuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSA+IHJldCkge1xuICAgICAgICAgICAgcmV0ID0gdmFsdWVcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIHNjb3JlMShzZWxlY3RvcjogRG9jdW1lbnRTZWxlY3RvclswXSwgY2FuZGlkYXRlVXJpOiBzdHJpbmcsIGNhbmRpZGF0ZUxhbmd1YWdlOiBzdHJpbmcpOiBudW1iZXIge1xuICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIFNob3J0aGFuZCBub3RhdGlvbjogXCJteWxhbmdcIiAtPiB7bGFuZ3VhZ2U6IFwibXlsYW5nXCJ9LCBcIipcIiAtPiB7bGFuZ3VhZ2U6IFwiKlwiXCJ9LlxuICAgICAgICBpZiAoc2VsZWN0b3IgPT09ICcqJykge1xuICAgICAgICAgICAgcmV0dXJuIDVcbiAgICAgICAgfSBlbHNlIGlmIChzZWxlY3RvciA9PT0gY2FuZGlkYXRlTGFuZ3VhZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiAxMFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIDBcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHsgbGFuZ3VhZ2UsIHNjaGVtZSwgcGF0dGVybiB9ID0gc2VsZWN0b3JcbiAgICBsZXQgcmV0ID0gMFxuICAgIGlmIChzY2hlbWUpIHtcbiAgICAgICAgaWYgKGNhbmRpZGF0ZVVyaS5zdGFydHNXaXRoKHNjaGVtZSArICc6JykpIHtcbiAgICAgICAgICAgIHJldCA9IDEwXG4gICAgICAgIH0gZWxzZSBpZiAoc2NoZW1lID09PSAnKicpIHtcbiAgICAgICAgICAgIHJldCA9IDVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAwXG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGxhbmd1YWdlKSB7XG4gICAgICAgIGlmIChsYW5ndWFnZSA9PT0gY2FuZGlkYXRlTGFuZ3VhZ2UpIHtcbiAgICAgICAgICAgIHJldCA9IDEwXG4gICAgICAgIH0gZWxzZSBpZiAobGFuZ3VhZ2UgPT09ICcqJykge1xuICAgICAgICAgICAgcmV0ID0gTWF0aC5tYXgocmV0LCA1KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIDBcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAocGF0dGVybikge1xuICAgICAgICBpZiAocGF0dGVybiA9PT0gY2FuZGlkYXRlVXJpIHx8IGNhbmRpZGF0ZVVyaS5lbmRzV2l0aChwYXR0ZXJuKSB8fCBtaW5pbWF0Y2goY2FuZGlkYXRlVXJpLCBwYXR0ZXJuKSkge1xuICAgICAgICAgICAgcmV0ID0gMTBcbiAgICAgICAgfSBlbHNlIGlmIChtaW5pbWF0Y2goY2FuZGlkYXRlVXJpLCAnKiovJyArIHBhdHRlcm4pKSB7XG4gICAgICAgICAgICByZXQgPSA1XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gMFxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXRcbn1cbiJdfQ==