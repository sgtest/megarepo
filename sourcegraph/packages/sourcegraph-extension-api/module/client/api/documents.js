import { Subscription } from 'rxjs';
import { createProxyAndHandleRequests } from '../../common/proxy';
import { SubscriptionMap } from './common';
/** @internal */
export class ClientDocuments {
    constructor(connection, environmentTextDocuments) {
        this.subscriptions = new Subscription();
        this.registrations = new SubscriptionMap();
        this.proxy = createProxyAndHandleRequests('documents', connection, this);
        this.subscriptions.add(environmentTextDocuments.subscribe(docs => {
            this.proxy.$acceptDocumentData(docs || []);
        }));
        this.subscriptions.add(this.registrations);
    }
    unsubscribe() {
        this.subscriptions.unsubscribe();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9jdW1lbnRzLmpzIiwic291cmNlUm9vdCI6InNyYy8iLCJzb3VyY2VzIjpbImNsaWVudC9hcGkvZG9jdW1lbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBYyxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUE7QUFFL0MsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sb0JBQW9CLENBQUE7QUFHakUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQUUxQyxnQkFBZ0I7QUFDaEIsTUFBTSxPQUFPLGVBQWU7SUFLeEIsWUFDSSxVQUFzQixFQUN0Qix3QkFBZ0c7UUFONUYsa0JBQWEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFBO1FBQ2xDLGtCQUFhLEdBQUcsSUFBSSxlQUFlLEVBQUUsQ0FBQTtRQU96QyxJQUFJLENBQUMsS0FBSyxHQUFHLDRCQUE0QixDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFFeEUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQ2xCLHdCQUF3QixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN0QyxJQUFJLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQTtRQUM5QyxDQUFDLENBQUMsQ0FDTCxDQUFBO1FBRUQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFBO0lBQzlDLENBQUM7SUFFTSxXQUFXO1FBQ2QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtJQUNwQyxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJ1xuaW1wb3J0IHsgVGV4dERvY3VtZW50IH0gZnJvbSAnc291cmNlZ3JhcGgnXG5pbXBvcnQgeyBjcmVhdGVQcm94eUFuZEhhbmRsZVJlcXVlc3RzIH0gZnJvbSAnLi4vLi4vY29tbW9uL3Byb3h5J1xuaW1wb3J0IHsgRXh0RG9jdW1lbnRzQVBJIH0gZnJvbSAnLi4vLi4vZXh0ZW5zaW9uL2FwaS9kb2N1bWVudHMnXG5pbXBvcnQgeyBDb25uZWN0aW9uIH0gZnJvbSAnLi4vLi4vcHJvdG9jb2wvanNvbnJwYzIvY29ubmVjdGlvbidcbmltcG9ydCB7IFN1YnNjcmlwdGlvbk1hcCB9IGZyb20gJy4vY29tbW9uJ1xuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgY2xhc3MgQ2xpZW50RG9jdW1lbnRzIHtcbiAgICBwcml2YXRlIHN1YnNjcmlwdGlvbnMgPSBuZXcgU3Vic2NyaXB0aW9uKClcbiAgICBwcml2YXRlIHJlZ2lzdHJhdGlvbnMgPSBuZXcgU3Vic2NyaXB0aW9uTWFwKClcbiAgICBwcml2YXRlIHByb3h5OiBFeHREb2N1bWVudHNBUElcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBjb25uZWN0aW9uOiBDb25uZWN0aW9uLFxuICAgICAgICBlbnZpcm9ubWVudFRleHREb2N1bWVudHM6IE9ic2VydmFibGU8UGljazxUZXh0RG9jdW1lbnQsICd1cmknIHwgJ2xhbmd1YWdlSWQnIHwgJ3RleHQnPltdIHwgbnVsbD5cbiAgICApIHtcbiAgICAgICAgdGhpcy5wcm94eSA9IGNyZWF0ZVByb3h5QW5kSGFuZGxlUmVxdWVzdHMoJ2RvY3VtZW50cycsIGNvbm5lY3Rpb24sIHRoaXMpXG5cbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLmFkZChcbiAgICAgICAgICAgIGVudmlyb25tZW50VGV4dERvY3VtZW50cy5zdWJzY3JpYmUoZG9jcyA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm94eS4kYWNjZXB0RG9jdW1lbnREYXRhKGRvY3MgfHwgW10pXG4gICAgICAgICAgICB9KVxuICAgICAgICApXG5cbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLmFkZCh0aGlzLnJlZ2lzdHJhdGlvbnMpXG4gICAgfVxuXG4gICAgcHVibGljIHVuc3Vic2NyaWJlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMudW5zdWJzY3JpYmUoKVxuICAgIH1cbn1cbiJdfQ==