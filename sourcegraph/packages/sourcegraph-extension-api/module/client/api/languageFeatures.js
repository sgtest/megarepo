import { from, Subscription } from 'rxjs';
import { map } from 'rxjs/operators';
import { createProxyAndHandleRequests } from '../../common/proxy';
import { SubscriptionMap } from './common';
/** @internal */
export class ClientLanguageFeatures {
    constructor(connection, hoverRegistry, definitionRegistry, typeDefinitionRegistry, implementationRegistry, referencesRegistry) {
        this.hoverRegistry = hoverRegistry;
        this.definitionRegistry = definitionRegistry;
        this.typeDefinitionRegistry = typeDefinitionRegistry;
        this.implementationRegistry = implementationRegistry;
        this.referencesRegistry = referencesRegistry;
        this.subscriptions = new Subscription();
        this.registrations = new SubscriptionMap();
        this.subscriptions.add(this.registrations);
        this.proxy = createProxyAndHandleRequests('languageFeatures', connection, this);
    }
    $unregister(id) {
        this.registrations.remove(id);
    }
    $registerHoverProvider(id, selector) {
        this.registrations.add(id, this.hoverRegistry.registerProvider({ documentSelector: selector }, (params) => from(this.proxy.$provideHover(id, params.textDocument.uri, params.position))));
    }
    $registerDefinitionProvider(id, selector) {
        this.registrations.add(id, this.definitionRegistry.registerProvider({ documentSelector: selector }, (params) => from(this.proxy.$provideDefinition(id, params.textDocument.uri, params.position)).pipe(map(result => result || []))));
    }
    $registerTypeDefinitionProvider(id, selector) {
        this.registrations.add(id, this.typeDefinitionRegistry.registerProvider({ documentSelector: selector }, (params) => from(this.proxy.$provideTypeDefinition(id, params.textDocument.uri, params.position)).pipe(map(result => result || []))));
    }
    $registerImplementationProvider(id, selector) {
        this.registrations.add(id, this.implementationRegistry.registerProvider({ documentSelector: selector }, (params) => from(this.proxy.$provideImplementation(id, params.textDocument.uri, params.position)).pipe(map(result => result || []))));
    }
    $registerReferenceProvider(id, selector) {
        this.registrations.add(id, this.referencesRegistry.registerProvider({ documentSelector: selector }, (params) => from(this.proxy.$provideReferences(id, params.textDocument.uri, params.position, params.context)).pipe(map(result => result || []))));
    }
    unsubscribe() {
        this.subscriptions.unsubscribe();
    }
}
//# sourceMappingURL=data:application/json;base64,