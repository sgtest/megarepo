import { Subscription } from 'rxjs';
import { createProxyAndHandleRequests } from '../../common/proxy';
import { SubscriptionMap } from './common';
/** @internal */
export class ClientCommands {
    constructor(connection, registry) {
        this.registry = registry;
        this.subscriptions = new Subscription();
        this.registrations = new SubscriptionMap();
        this.subscriptions.add(this.registrations);
        this.proxy = createProxyAndHandleRequests('commands', connection, this);
    }
    $unregister(id) {
        this.registrations.remove(id);
    }
    $registerCommand(id, command) {
        this.registrations.add(id, this.registry.registerCommand({
            command,
            run: (...args) => this.proxy.$executeCommand(id, args),
        }));
    }
    $executeCommand(command, args) {
        return this.registry.executeCommand({ command, arguments: args });
    }
    unsubscribe() {
        this.subscriptions.unsubscribe();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZHMuanMiLCJzb3VyY2VSb290Ijoic3JjLyIsInNvdXJjZXMiOlsiY2xpZW50L2FwaS9jb21tYW5kcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFBO0FBQ25DLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBSWpFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFTMUMsZ0JBQWdCO0FBQ2hCLE1BQU0sT0FBTyxjQUFjO0lBS3ZCLFlBQVksVUFBc0IsRUFBVSxRQUF5QjtRQUF6QixhQUFRLEdBQVIsUUFBUSxDQUFpQjtRQUo3RCxrQkFBYSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUE7UUFDbEMsa0JBQWEsR0FBRyxJQUFJLGVBQWUsRUFBRSxDQUFBO1FBSXpDLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQTtRQUUxQyxJQUFJLENBQUMsS0FBSyxHQUFHLDRCQUE0QixDQUFDLFVBQVUsRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUE7SUFDM0UsQ0FBQztJQUVNLFdBQVcsQ0FBQyxFQUFVO1FBQ3pCLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ2pDLENBQUM7SUFFTSxnQkFBZ0IsQ0FBQyxFQUFVLEVBQUUsT0FBZTtRQUMvQyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FDbEIsRUFBRSxFQUNGLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDO1lBQzFCLE9BQU87WUFDUCxHQUFHLEVBQUUsQ0FBQyxHQUFHLElBQVcsRUFBTyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQztTQUNyRSxDQUFDLENBQ0wsQ0FBQTtJQUNMLENBQUM7SUFFTSxlQUFlLENBQUMsT0FBZSxFQUFFLElBQVc7UUFDL0MsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtJQUNyRSxDQUFDO0lBRU0sV0FBVztRQUNkLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLENBQUE7SUFDcEMsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcydcbmltcG9ydCB7IGNyZWF0ZVByb3h5QW5kSGFuZGxlUmVxdWVzdHMgfSBmcm9tICcuLi8uLi9jb21tb24vcHJveHknXG5pbXBvcnQgeyBFeHRDb21tYW5kc0FQSSB9IGZyb20gJy4uLy4uL2V4dGVuc2lvbi9hcGkvY29tbWFuZHMnXG5pbXBvcnQgeyBDb25uZWN0aW9uIH0gZnJvbSAnLi4vLi4vcHJvdG9jb2wvanNvbnJwYzIvY29ubmVjdGlvbidcbmltcG9ydCB7IENvbW1hbmRSZWdpc3RyeSB9IGZyb20gJy4uL3Byb3ZpZGVycy9jb21tYW5kJ1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uTWFwIH0gZnJvbSAnLi9jb21tb24nXG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ2xpZW50Q29tbWFuZHNBUEkge1xuICAgICR1bnJlZ2lzdGVyKGlkOiBudW1iZXIpOiB2b2lkXG4gICAgJHJlZ2lzdGVyQ29tbWFuZChpZDogbnVtYmVyLCBjb21tYW5kOiBzdHJpbmcpOiB2b2lkXG4gICAgJGV4ZWN1dGVDb21tYW5kKGNvbW1hbmQ6IHN0cmluZywgYXJnczogYW55W10pOiBQcm9taXNlPGFueT5cbn1cblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNsYXNzIENsaWVudENvbW1hbmRzIGltcGxlbWVudHMgQ2xpZW50Q29tbWFuZHNBUEkge1xuICAgIHByaXZhdGUgc3Vic2NyaXB0aW9ucyA9IG5ldyBTdWJzY3JpcHRpb24oKVxuICAgIHByaXZhdGUgcmVnaXN0cmF0aW9ucyA9IG5ldyBTdWJzY3JpcHRpb25NYXAoKVxuICAgIHByaXZhdGUgcHJveHk6IEV4dENvbW1hbmRzQVBJXG5cbiAgICBjb25zdHJ1Y3Rvcihjb25uZWN0aW9uOiBDb25uZWN0aW9uLCBwcml2YXRlIHJlZ2lzdHJ5OiBDb21tYW5kUmVnaXN0cnkpIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLmFkZCh0aGlzLnJlZ2lzdHJhdGlvbnMpXG5cbiAgICAgICAgdGhpcy5wcm94eSA9IGNyZWF0ZVByb3h5QW5kSGFuZGxlUmVxdWVzdHMoJ2NvbW1hbmRzJywgY29ubmVjdGlvbiwgdGhpcylcbiAgICB9XG5cbiAgICBwdWJsaWMgJHVucmVnaXN0ZXIoaWQ6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB0aGlzLnJlZ2lzdHJhdGlvbnMucmVtb3ZlKGlkKVxuICAgIH1cblxuICAgIHB1YmxpYyAkcmVnaXN0ZXJDb21tYW5kKGlkOiBudW1iZXIsIGNvbW1hbmQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlZ2lzdHJhdGlvbnMuYWRkKFxuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICB0aGlzLnJlZ2lzdHJ5LnJlZ2lzdGVyQ29tbWFuZCh7XG4gICAgICAgICAgICAgICAgY29tbWFuZCxcbiAgICAgICAgICAgICAgICBydW46ICguLi5hcmdzOiBhbnlbXSk6IGFueSA9PiB0aGlzLnByb3h5LiRleGVjdXRlQ29tbWFuZChpZCwgYXJncyksXG4gICAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgfVxuXG4gICAgcHVibGljICRleGVjdXRlQ29tbWFuZChjb21tYW5kOiBzdHJpbmcsIGFyZ3M6IGFueVtdKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVnaXN0cnkuZXhlY3V0ZUNvbW1hbmQoeyBjb21tYW5kLCBhcmd1bWVudHM6IGFyZ3MgfSlcbiAgICB9XG5cbiAgICBwdWJsaWMgdW5zdWJzY3JpYmUoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy51bnN1YnNjcmliZSgpXG4gICAgfVxufVxuIl19