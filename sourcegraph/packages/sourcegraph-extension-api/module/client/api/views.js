import { combineLatest, ReplaySubject, Subscription } from 'rxjs';
import { map } from 'rxjs/operators';
import { handleRequests } from '../../common/proxy';
import { ContributableViewContainer } from '../../protocol';
import { SubscriptionMap } from './common';
/** @internal */
export class ClientViews {
    constructor(connection, viewRegistry) {
        this.viewRegistry = viewRegistry;
        this.subscriptions = new Subscription();
        this.panelViews = new Map();
        this.registrations = new SubscriptionMap();
        this.subscriptions.add(this.registrations);
        handleRequests(connection, 'views', this);
    }
    $unregister(id) {
        this.registrations.remove(id);
    }
    $registerPanelViewProvider(id, provider) {
        const panelView = {
            title: new ReplaySubject(1),
            content: new ReplaySubject(1),
        };
        this.panelViews.set(id, panelView);
        const registryUnsubscribable = this.viewRegistry.registerProvider(Object.assign({}, provider, { container: ContributableViewContainer.Panel }), combineLatest(panelView.title, panelView.content).pipe(map(([title, content]) => ({ title, content }))));
        this.registrations.add(id, {
            unsubscribe: () => {
                registryUnsubscribable.unsubscribe();
                this.panelViews.delete(id);
            },
        });
    }
    $acceptPanelViewUpdate(id, params) {
        const panelView = this.panelViews.get(id);
        if (panelView === undefined) {
            throw new Error(`no panel view with ID ${id}`);
        }
        if (params.title !== undefined) {
            panelView.title.next(params.title);
        }
        if (params.content !== undefined) {
            panelView.content.next(params.content);
        }
    }
    unsubscribe() {
        this.subscriptions.unsubscribe();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlld3MuanMiLCJzb3VyY2VSb290Ijoic3JjLyIsInNvdXJjZXMiOlsiY2xpZW50L2FwaS92aWV3cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBVyxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUE7QUFDMUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFBO0FBQ3BDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQTtBQUNuRCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQTtBQUkzRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBYzFDLGdCQUFnQjtBQUNoQixNQUFNLE9BQU8sV0FBVztJQUtwQixZQUFZLFVBQXNCLEVBQVUsWUFBa0M7UUFBbEMsaUJBQVksR0FBWixZQUFZLENBQXNCO1FBSnRFLGtCQUFhLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQTtRQUNsQyxlQUFVLEdBQUcsSUFBSSxHQUFHLEVBQTBELENBQUE7UUFDOUUsa0JBQWEsR0FBRyxJQUFJLGVBQWUsRUFBRSxDQUFBO1FBR3pDLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQTtRQUUxQyxjQUFjLENBQUMsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUM3QyxDQUFDO0lBRU0sV0FBVyxDQUFDLEVBQVU7UUFDekIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDakMsQ0FBQztJQUVNLDBCQUEwQixDQUFDLEVBQVUsRUFBRSxRQUF3QjtRQUNsRSxNQUFNLFNBQVMsR0FBc0I7WUFDakMsS0FBSyxFQUFFLElBQUksYUFBYSxDQUFTLENBQUMsQ0FBQztZQUNuQyxPQUFPLEVBQUUsSUFBSSxhQUFhLENBQVMsQ0FBQyxDQUFDO1NBQ3hDLENBQUE7UUFDRCxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUE7UUFDbEMsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixtQkFDeEQsUUFBUSxJQUFFLFNBQVMsRUFBRSwwQkFBMEIsQ0FBQyxLQUFLLEtBQzFELGFBQWEsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQzFHLENBQUE7UUFDRCxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUU7WUFDdkIsV0FBVyxFQUFFLEdBQUcsRUFBRTtnQkFDZCxzQkFBc0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtnQkFDcEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUE7WUFDOUIsQ0FBQztTQUNKLENBQUMsQ0FBQTtJQUNOLENBQUM7SUFFTSxzQkFBc0IsQ0FBQyxFQUFVLEVBQUUsTUFBNEM7UUFDbEYsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUE7UUFDekMsSUFBSSxTQUFTLEtBQUssU0FBUyxFQUFFO1lBQ3pCLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLEVBQUUsRUFBRSxDQUFDLENBQUE7U0FDakQ7UUFDRCxJQUFJLE1BQU0sQ0FBQyxLQUFLLEtBQUssU0FBUyxFQUFFO1lBQzVCLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtTQUNyQztRQUNELElBQUksTUFBTSxDQUFDLE9BQU8sS0FBSyxTQUFTLEVBQUU7WUFDOUIsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1NBQ3pDO0lBQ0wsQ0FBQztJQUVNLFdBQVc7UUFDZCxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFBO0lBQ3BDLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbWJpbmVMYXRlc3QsIFJlcGxheVN1YmplY3QsIFN1YmplY3QsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnXG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycydcbmltcG9ydCB7IGhhbmRsZVJlcXVlc3RzIH0gZnJvbSAnLi4vLi4vY29tbW9uL3Byb3h5J1xuaW1wb3J0IHsgQ29udHJpYnV0YWJsZVZpZXdDb250YWluZXIgfSBmcm9tICcuLi8uLi9wcm90b2NvbCdcbmltcG9ydCB7IENvbm5lY3Rpb24gfSBmcm9tICcuLi8uLi9wcm90b2NvbC9qc29ucnBjMi9jb25uZWN0aW9uJ1xuaW1wb3J0ICogYXMgcGxhaW4gZnJvbSAnLi4vLi4vcHJvdG9jb2wvcGxhaW5UeXBlcydcbmltcG9ydCB7IFZpZXdQcm92aWRlclJlZ2lzdHJ5IH0gZnJvbSAnLi4vcHJvdmlkZXJzL3ZpZXcnXG5pbXBvcnQgeyBTdWJzY3JpcHRpb25NYXAgfSBmcm9tICcuL2NvbW1vbidcblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGludGVyZmFjZSBDbGllbnRWaWV3c0FQSSB7XG4gICAgJHVucmVnaXN0ZXIoaWQ6IG51bWJlcik6IHZvaWRcbiAgICAkcmVnaXN0ZXJQYW5lbFZpZXdQcm92aWRlcihpZDogbnVtYmVyLCBwcm92aWRlcjogeyBpZDogc3RyaW5nIH0pOiB2b2lkXG4gICAgJGFjY2VwdFBhbmVsVmlld1VwZGF0ZShpZDogbnVtYmVyLCBwYXJhbXM6IFBhcnRpYWw8cGxhaW4uUGFuZWxWaWV3Pik6IHZvaWRcbn1cblxuaW50ZXJmYWNlIFBhbmVsVmlld1N1YmplY3RzIHtcbiAgICB0aXRsZTogU3ViamVjdDxzdHJpbmc+XG4gICAgY29udGVudDogU3ViamVjdDxzdHJpbmc+XG59XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjbGFzcyBDbGllbnRWaWV3cyBpbXBsZW1lbnRzIENsaWVudFZpZXdzQVBJIHtcbiAgICBwcml2YXRlIHN1YnNjcmlwdGlvbnMgPSBuZXcgU3Vic2NyaXB0aW9uKClcbiAgICBwcml2YXRlIHBhbmVsVmlld3MgPSBuZXcgTWFwPG51bWJlciwgUmVjb3JkPGtleW9mIHBsYWluLlBhbmVsVmlldywgU3ViamVjdDxzdHJpbmc+Pj4oKVxuICAgIHByaXZhdGUgcmVnaXN0cmF0aW9ucyA9IG5ldyBTdWJzY3JpcHRpb25NYXAoKVxuXG4gICAgY29uc3RydWN0b3IoY29ubmVjdGlvbjogQ29ubmVjdGlvbiwgcHJpdmF0ZSB2aWV3UmVnaXN0cnk6IFZpZXdQcm92aWRlclJlZ2lzdHJ5KSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5hZGQodGhpcy5yZWdpc3RyYXRpb25zKVxuXG4gICAgICAgIGhhbmRsZVJlcXVlc3RzKGNvbm5lY3Rpb24sICd2aWV3cycsIHRoaXMpXG4gICAgfVxuXG4gICAgcHVibGljICR1bnJlZ2lzdGVyKGlkOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5yZWdpc3RyYXRpb25zLnJlbW92ZShpZClcbiAgICB9XG5cbiAgICBwdWJsaWMgJHJlZ2lzdGVyUGFuZWxWaWV3UHJvdmlkZXIoaWQ6IG51bWJlciwgcHJvdmlkZXI6IHsgaWQ6IHN0cmluZyB9KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHBhbmVsVmlldzogUGFuZWxWaWV3U3ViamVjdHMgPSB7XG4gICAgICAgICAgICB0aXRsZTogbmV3IFJlcGxheVN1YmplY3Q8c3RyaW5nPigxKSxcbiAgICAgICAgICAgIGNvbnRlbnQ6IG5ldyBSZXBsYXlTdWJqZWN0PHN0cmluZz4oMSksXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYW5lbFZpZXdzLnNldChpZCwgcGFuZWxWaWV3KVxuICAgICAgICBjb25zdCByZWdpc3RyeVVuc3Vic2NyaWJhYmxlID0gdGhpcy52aWV3UmVnaXN0cnkucmVnaXN0ZXJQcm92aWRlcihcbiAgICAgICAgICAgIHsgLi4ucHJvdmlkZXIsIGNvbnRhaW5lcjogQ29udHJpYnV0YWJsZVZpZXdDb250YWluZXIuUGFuZWwgfSxcbiAgICAgICAgICAgIGNvbWJpbmVMYXRlc3QocGFuZWxWaWV3LnRpdGxlLCBwYW5lbFZpZXcuY29udGVudCkucGlwZShtYXAoKFt0aXRsZSwgY29udGVudF0pID0+ICh7IHRpdGxlLCBjb250ZW50IH0pKSlcbiAgICAgICAgKVxuICAgICAgICB0aGlzLnJlZ2lzdHJhdGlvbnMuYWRkKGlkLCB7XG4gICAgICAgICAgICB1bnN1YnNjcmliZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlZ2lzdHJ5VW5zdWJzY3JpYmFibGUudW5zdWJzY3JpYmUoKVxuICAgICAgICAgICAgICAgIHRoaXMucGFuZWxWaWV3cy5kZWxldGUoaWQpXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHB1YmxpYyAkYWNjZXB0UGFuZWxWaWV3VXBkYXRlKGlkOiBudW1iZXIsIHBhcmFtczogeyB0aXRsZT86IHN0cmluZzsgY29udGVudD86IHN0cmluZyB9KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHBhbmVsVmlldyA9IHRoaXMucGFuZWxWaWV3cy5nZXQoaWQpXG4gICAgICAgIGlmIChwYW5lbFZpZXcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBubyBwYW5lbCB2aWV3IHdpdGggSUQgJHtpZH1gKVxuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJhbXMudGl0bGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcGFuZWxWaWV3LnRpdGxlLm5leHQocGFyYW1zLnRpdGxlKVxuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJhbXMuY29udGVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwYW5lbFZpZXcuY29udGVudC5uZXh0KHBhcmFtcy5jb250ZW50KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHVuc3Vic2NyaWJlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMudW5zdWJzY3JpYmUoKVxuICAgIH1cbn1cbiJdfQ==