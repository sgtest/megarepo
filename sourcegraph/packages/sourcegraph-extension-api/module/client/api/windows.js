import { Subscription } from 'rxjs';
import { createProxyAndHandleRequests } from '../../common/proxy';
import { MessageType, } from '../../protocol';
import { SubscriptionMap } from './common';
/** @internal */
export class ClientWindows {
    constructor(connection, environmentTextDocuments, 
    /** Called when the client receives a window/showMessage notification. */
    showMessage, 
    /**
     * Called when the client receives a window/showMessageRequest request and expected to return a promise
     * that resolves to the selected action.
     */
    showMessageRequest, 
    /**
     * Called when the client receives a window/showInput request and expected to return a promise that
     * resolves to the user's input.
     */
    showInput) {
        this.showMessage = showMessage;
        this.showMessageRequest = showMessageRequest;
        this.showInput = showInput;
        this.subscriptions = new Subscription();
        this.registrations = new SubscriptionMap();
        this.proxy = createProxyAndHandleRequests('windows', connection, this);
        this.subscriptions.add(environmentTextDocuments.subscribe(textDocuments => {
            this.proxy.$acceptWindowData(textDocuments ? textDocuments.map(textDocument => ({ visibleTextDocument: textDocument.uri })) : []);
        }));
        this.subscriptions.add(this.registrations);
    }
    $showNotification(message) {
        return this.showMessage({ type: MessageType.Info, message });
    }
    $showMessage(message) {
        return this.showMessageRequest({ type: MessageType.Info, message }).then(v => 
        // TODO(sqs): update the showInput API to unify null/undefined etc between the old internal API and the new
        // external API.
        undefined);
    }
    $showInputBox(options) {
        return this.showInput({
            message: options && options.prompt ? options.prompt : '',
            defaultValue: options && options.value,
        }).then(v => 
        // TODO(sqs): update the showInput API to unify null/undefined etc between the old internal API and the new
        // external API.
        v === null ? undefined : v);
    }
    unsubscribe() {
        this.subscriptions.unsubscribe();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2luZG93cy5qcyIsInNvdXJjZVJvb3QiOiJzcmMvIiwic291cmNlcyI6WyJjbGllbnQvYXBpL3dpbmRvd3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFjLFlBQVksRUFBRSxNQUFNLE1BQU0sQ0FBQTtBQUUvQyxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQTtBQUVqRSxPQUFPLEVBRUgsV0FBVyxHQUlkLE1BQU0sZ0JBQWdCLENBQUE7QUFHdkIsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQVMxQyxnQkFBZ0I7QUFDaEIsTUFBTSxPQUFPLGFBQWE7SUFLdEIsWUFDSSxVQUFzQixFQUN0Qix3QkFBK0Q7SUFDL0QseUVBQXlFO0lBQ2pFLFdBQWdEO0lBQ3hEOzs7T0FHRztJQUNLLGtCQUEyRjtJQUNuRzs7O09BR0c7SUFDSyxTQUE4RDtRQVY5RCxnQkFBVyxHQUFYLFdBQVcsQ0FBcUM7UUFLaEQsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUF5RTtRQUszRixjQUFTLEdBQVQsU0FBUyxDQUFxRDtRQWxCbEUsa0JBQWEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFBO1FBQ2xDLGtCQUFhLEdBQUcsSUFBSSxlQUFlLEVBQUUsQ0FBQTtRQW1CekMsSUFBSSxDQUFDLEtBQUssR0FBRyw0QkFBNEIsQ0FBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFBO1FBRXRFLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUNsQix3QkFBd0IsQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFDL0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FDeEIsYUFBYSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLG1CQUFtQixFQUFFLFlBQVksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDdEcsQ0FBQTtRQUNMLENBQUMsQ0FBQyxDQUNMLENBQUE7UUFFRCxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUE7SUFDOUMsQ0FBQztJQUVNLGlCQUFpQixDQUFDLE9BQWU7UUFDcEMsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQTtJQUNoRSxDQUFDO0lBRU0sWUFBWSxDQUFDLE9BQWU7UUFDL0IsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsRUFBRSxJQUFJLEVBQUUsV0FBVyxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDcEUsQ0FBQyxDQUFDLEVBQUU7UUFDQSwyR0FBMkc7UUFDM0csZ0JBQWdCO1FBQ2hCLFNBQVMsQ0FDaEIsQ0FBQTtJQUNMLENBQUM7SUFFTSxhQUFhLENBQUMsT0FBcUM7UUFDdEQsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ2xCLE9BQU8sRUFBRSxPQUFPLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN4RCxZQUFZLEVBQUUsT0FBTyxJQUFJLE9BQU8sQ0FBQyxLQUFLO1NBQ3pDLENBQUMsQ0FBQyxJQUFJLENBQ0gsQ0FBQyxDQUFDLEVBQUU7UUFDQSwyR0FBMkc7UUFDM0csZ0JBQWdCO1FBQ2hCLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUNqQyxDQUFBO0lBQ0wsQ0FBQztJQUVNLFdBQVc7UUFDZCxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFBO0lBQ3BDLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnXG5pbXBvcnQgKiBhcyBzb3VyY2VncmFwaCBmcm9tICdzb3VyY2VncmFwaCdcbmltcG9ydCB7IGNyZWF0ZVByb3h5QW5kSGFuZGxlUmVxdWVzdHMgfSBmcm9tICcuLi8uLi9jb21tb24vcHJveHknXG5pbXBvcnQgeyBFeHRXaW5kb3dzQVBJIH0gZnJvbSAnLi4vLi4vZXh0ZW5zaW9uL2FwaS93aW5kb3dzJ1xuaW1wb3J0IHtcbiAgICBNZXNzYWdlQWN0aW9uSXRlbSxcbiAgICBNZXNzYWdlVHlwZSxcbiAgICBTaG93SW5wdXRQYXJhbXMsXG4gICAgU2hvd01lc3NhZ2VQYXJhbXMsXG4gICAgU2hvd01lc3NhZ2VSZXF1ZXN0UGFyYW1zLFxufSBmcm9tICcuLi8uLi9wcm90b2NvbCdcbmltcG9ydCB7IENvbm5lY3Rpb24gfSBmcm9tICcuLi8uLi9wcm90b2NvbC9qc29ucnBjMi9jb25uZWN0aW9uJ1xuaW1wb3J0IHsgVGV4dERvY3VtZW50SXRlbSB9IGZyb20gJy4uL3R5cGVzL3RleHREb2N1bWVudCdcbmltcG9ydCB7IFN1YnNjcmlwdGlvbk1hcCB9IGZyb20gJy4vY29tbW9uJ1xuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgaW50ZXJmYWNlIENsaWVudFdpbmRvd3NBUEkge1xuICAgICRzaG93Tm90aWZpY2F0aW9uKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWRcbiAgICAkc2hvd01lc3NhZ2UobWVzc2FnZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPlxuICAgICRzaG93SW5wdXRCb3gob3B0aW9ucz86IHNvdXJjZWdyYXBoLklucHV0Qm94T3B0aW9ucyk6IFByb21pc2U8c3RyaW5nIHwgdW5kZWZpbmVkPlxufVxuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgY2xhc3MgQ2xpZW50V2luZG93cyBpbXBsZW1lbnRzIENsaWVudFdpbmRvd3NBUEkge1xuICAgIHByaXZhdGUgc3Vic2NyaXB0aW9ucyA9IG5ldyBTdWJzY3JpcHRpb24oKVxuICAgIHByaXZhdGUgcmVnaXN0cmF0aW9ucyA9IG5ldyBTdWJzY3JpcHRpb25NYXAoKVxuICAgIHByaXZhdGUgcHJveHk6IEV4dFdpbmRvd3NBUElcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBjb25uZWN0aW9uOiBDb25uZWN0aW9uLFxuICAgICAgICBlbnZpcm9ubWVudFRleHREb2N1bWVudHM6IE9ic2VydmFibGU8VGV4dERvY3VtZW50SXRlbVtdIHwgbnVsbD4sXG4gICAgICAgIC8qKiBDYWxsZWQgd2hlbiB0aGUgY2xpZW50IHJlY2VpdmVzIGEgd2luZG93L3Nob3dNZXNzYWdlIG5vdGlmaWNhdGlvbi4gKi9cbiAgICAgICAgcHJpdmF0ZSBzaG93TWVzc2FnZTogKHBhcmFtczogU2hvd01lc3NhZ2VQYXJhbXMpID0+IHZvaWQsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxsZWQgd2hlbiB0aGUgY2xpZW50IHJlY2VpdmVzIGEgd2luZG93L3Nob3dNZXNzYWdlUmVxdWVzdCByZXF1ZXN0IGFuZCBleHBlY3RlZCB0byByZXR1cm4gYSBwcm9taXNlXG4gICAgICAgICAqIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIHNlbGVjdGVkIGFjdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIHByaXZhdGUgc2hvd01lc3NhZ2VSZXF1ZXN0OiAocGFyYW1zOiBTaG93TWVzc2FnZVJlcXVlc3RQYXJhbXMpID0+IFByb21pc2U8TWVzc2FnZUFjdGlvbkl0ZW0gfCBudWxsPixcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGxlZCB3aGVuIHRoZSBjbGllbnQgcmVjZWl2ZXMgYSB3aW5kb3cvc2hvd0lucHV0IHJlcXVlc3QgYW5kIGV4cGVjdGVkIHRvIHJldHVybiBhIHByb21pc2UgdGhhdFxuICAgICAgICAgKiByZXNvbHZlcyB0byB0aGUgdXNlcidzIGlucHV0LlxuICAgICAgICAgKi9cbiAgICAgICAgcHJpdmF0ZSBzaG93SW5wdXQ6IChwYXJhbXM6IFNob3dJbnB1dFBhcmFtcykgPT4gUHJvbWlzZTxzdHJpbmcgfCBudWxsPlxuICAgICkge1xuICAgICAgICB0aGlzLnByb3h5ID0gY3JlYXRlUHJveHlBbmRIYW5kbGVSZXF1ZXN0cygnd2luZG93cycsIGNvbm5lY3Rpb24sIHRoaXMpXG5cbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLmFkZChcbiAgICAgICAgICAgIGVudmlyb25tZW50VGV4dERvY3VtZW50cy5zdWJzY3JpYmUodGV4dERvY3VtZW50cyA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm94eS4kYWNjZXB0V2luZG93RGF0YShcbiAgICAgICAgICAgICAgICAgICAgdGV4dERvY3VtZW50cyA/IHRleHREb2N1bWVudHMubWFwKHRleHREb2N1bWVudCA9PiAoeyB2aXNpYmxlVGV4dERvY3VtZW50OiB0ZXh0RG9jdW1lbnQudXJpIH0pKSA6IFtdXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgKVxuXG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5hZGQodGhpcy5yZWdpc3RyYXRpb25zKVxuICAgIH1cblxuICAgIHB1YmxpYyAkc2hvd05vdGlmaWNhdGlvbihtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2hvd01lc3NhZ2UoeyB0eXBlOiBNZXNzYWdlVHlwZS5JbmZvLCBtZXNzYWdlIH0pXG4gICAgfVxuXG4gICAgcHVibGljICRzaG93TWVzc2FnZShtZXNzYWdlOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2hvd01lc3NhZ2VSZXF1ZXN0KHsgdHlwZTogTWVzc2FnZVR5cGUuSW5mbywgbWVzc2FnZSB9KS50aGVuKFxuICAgICAgICAgICAgdiA9PlxuICAgICAgICAgICAgICAgIC8vIFRPRE8oc3FzKTogdXBkYXRlIHRoZSBzaG93SW5wdXQgQVBJIHRvIHVuaWZ5IG51bGwvdW5kZWZpbmVkIGV0YyBiZXR3ZWVuIHRoZSBvbGQgaW50ZXJuYWwgQVBJIGFuZCB0aGUgbmV3XG4gICAgICAgICAgICAgICAgLy8gZXh0ZXJuYWwgQVBJLlxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZFxuICAgICAgICApXG4gICAgfVxuXG4gICAgcHVibGljICRzaG93SW5wdXRCb3gob3B0aW9ucz86IHNvdXJjZWdyYXBoLklucHV0Qm94T3B0aW9ucyk6IFByb21pc2U8c3RyaW5nIHwgdW5kZWZpbmVkPiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNob3dJbnB1dCh7XG4gICAgICAgICAgICBtZXNzYWdlOiBvcHRpb25zICYmIG9wdGlvbnMucHJvbXB0ID8gb3B0aW9ucy5wcm9tcHQgOiAnJyxcbiAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogb3B0aW9ucyAmJiBvcHRpb25zLnZhbHVlLFxuICAgICAgICB9KS50aGVuKFxuICAgICAgICAgICAgdiA9PlxuICAgICAgICAgICAgICAgIC8vIFRPRE8oc3FzKTogdXBkYXRlIHRoZSBzaG93SW5wdXQgQVBJIHRvIHVuaWZ5IG51bGwvdW5kZWZpbmVkIGV0YyBiZXR3ZWVuIHRoZSBvbGQgaW50ZXJuYWwgQVBJIGFuZCB0aGUgbmV3XG4gICAgICAgICAgICAgICAgLy8gZXh0ZXJuYWwgQVBJLlxuICAgICAgICAgICAgICAgIHYgPT09IG51bGwgPyB1bmRlZmluZWQgOiB2XG4gICAgICAgIClcbiAgICB9XG5cbiAgICBwdWJsaWMgdW5zdWJzY3JpYmUoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy51bnN1YnNjcmliZSgpXG4gICAgfVxufVxuIl19