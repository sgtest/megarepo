:root {
    --btn-padding-y-sm: 0.375rem;
    --icon-inline-md-size: #{(20 / 14)}em;
    --icon-inline-size: #{(16 / 14)}em;
    --btn-padding-y-lg: 0.5rem;
    --btn-padding-x-lg: 1rem;
    --font-size-lg: 1.09375rem;
    --btn-line-height-lg: 1.5;
    --btn-border-width: 1px;
    --btn-padding-x: 0.75rem;
    --btn-active-box-shadow: inset 0 3px 5px rgba(var(--black), 0.125);
    --btn-icon-disabled-light-color: #797d8a;
    --btn-icon-disabled-dark-color: #959ba7;
}

.btn {
    // Use placeholder-selector to extend only styles defined for `label`.
    font-weight: 500;
    letter-spacing: -(0.1/14) + em;
    display: inline-block;
    text-align: center;
    vertical-align: middle;
    color: var(--body-color);
    background-color: transparent;
    border: 1px solid transparent;
    user-select: none;
    font-size: 0.875rem;
    line-height: 1.4285714286;
    border-radius: var(--border-radius);
    padding: 0.375rem 0.75rem;

    &:disabled,
    &[aria-disabled='true'] {
        cursor: not-allowed;
    }

    &:hover {
        color: var(--body-color);
        text-decoration: none;
    }
}

// Handle a special case for Button as="input" type="checkbox | radio"
// since button doesn't use disabled attribute we enforce/mimic the native
// disabled control styles.
input.btn {
    &:focus {
        outline: 2px solid var(--primary-2);
        outline-offset: 2px;
    }

    &[aria-disabled='true'] {
        cursor: not-allowed;

        :global(.theme-light) & {
            filter: brightness(0.9);
        }

        :global(.theme-dark) & {
            filter: brightness(0.5);
        }
    }
}

.btn-link {
    color: var(--link-color);
    background-color: var(--link-1);

    &:global(.disabled),
    &:disabled,
    &[aria-disabled='true'] {
        :global(.theme-light) & {
            opacity: 0.2;
        }

        :global(.theme-dark) & {
            opacity: 0.4;
        }
    }

    &:not(:disabled):not(:global(.disabled)):not([aria-disabled='true']) {
        &:hover:not(:global(.focus)):not(:focus),
        &:active,
        &:global(.active) {
            text-decoration: underline;
            color: var(--link-hover-color);
        }

        &:focus,
        &:global(.focus) {
            text-decoration: underline;

            :global(.theme-light) & {
                box-shadow: 0 0 0 2px var(--primary-2);
            }

            :global(.theme-dark) & {
                box-shadow: 0 0 0 2px var(--primary-3);
            }
        }
    }
}

.btn.btn-block {
    display: block;
    width: 100%;
}

.btn-inline {
    display: inline-block;
}

.btn-sm {
    // Use string interpolation and calc() to avoid using Sass own max() function.
    // See: https://github.com/sass/node-sass/issues/2815#issuecomment-575926329
    font-size: calc(min(0.75rem, #{(11/12)}em));
    line-height: 1rem;
    letter-spacing: -(0.25/12) + em;
    padding: var(--btn-padding-y-sm) 0.5rem;
}

.btn.btn-lg {
    padding: var(--btn-padding-y-lg) var(--btn-padding-x-lg);
    font-size: var(--font-size-lg);
    line-height: var(--btn-line-height-lg);
}

// This class is meant for clickable icons. It is NOT meant for buttons with icons in it or for nav
// items.
.btn-icon {
    margin: 0;
    padding: 0;
    background: transparent;
    color: inherit;
    display: flex;
    align-items: center;
    border: none;
    cursor: pointer;

    &:focus-visible:not(:disabled):not(:global(.disabled)):not([aria-disabled='true']) {
        box-shadow: 0 0 0 2px var(--primary-2);
    }

    &:hover:not(:disabled):not(:global(.disabled)):not([aria-disabled='true']) {
        color: var(--body-color);
    }

    // Add color for disabled state of button icon
    &:disabled,
    &[aria-disabled='true'] {
        :global(.theme-light) & {
            color: var(--btn-icon-disabled-light-color);
        }

        :global(.theme-dark) & {
            color: var(--btn-icon-disabled-dark-color);
        }
    }
}

.btn-primary,
.btn-secondary,
.btn-success,
.btn-danger,
.btn-warning,
.btn-info,
.btn-merged {
    --btn-text-color: var(--light-text);
    --btn-base-color: var(--primary);
    --btn-light-color-variant: var(--primary-2);
    --btn-dark-color-variant: var(--primary-3);
    --btn-light-disabled-text-color: var(--light-text);
    --btn-dark-disabled-text-color: var(--text-disabled);

    color: var(--btn-text-color);
    border-color: var(--btn-base-color);
    background-color: var(--btn-base-color);

    &:global(.disabled),
    &:disabled,
    &[aria-disabled='true'] {
        opacity: 1;
        background-color: var(--btn-light-color-variant);
        border-color: var(--btn-light-color-variant);

        :global(.theme-light) & {
            color: var(--btn-light-disabled-text-color);
        }
        :global(.theme-dark) & {
            color: var(--btn-dark-disabled-text-color);
        }
    }

    &:not(:disabled):not(:global(.disabled)):not([aria-disabled='true']) {
        &:hover:not(:global(.focus)):not(:focus),
        &:active,
        &:global(.active) {
            color: var(--btn-text-color);
            background-color: var(--btn-dark-color-variant);
        }

        &:focus,
        &:global(.focus) {
            color: var(--btn-text-color);
            background-color: var(--btn-base-color);
            border-color: var(--body-bg);

            :global(.theme-light) & {
                box-shadow: 0 0 0 2px var(--btn-light-color-variant);
            }

            :global(.theme-dark) & {
                box-shadow: 0 0 0 2px var(--btn-dark-color-variant);
            }
        }
    }

    :global(.show) > &:global(.dropdown-toggle) {
        border-color: var(--body-bg);

        :global(.theme-light) & {
            box-shadow: 0 0 0 2px var(--btn-light-color-variant);
        }
        :global(.theme-dark) & {
            box-shadow: 0 0 0 2px var(--btn-dark-color-variant);
        }
    }
}

.btn-outline {
    color: var(--body-color);
    background-color: transparent;

    &:global(.disabled),
    &:disabled,
    &[aria-disabled='true'] {
        --btn-light-disabled-text-color: var(--text-disabled);
        --btn-dark-disabled-text-color: var(--text-disabled);

        background-color: transparent;
    }

    &:not(:disabled):not(:global(.disabled)):not([aria-disabled='true']) {
        // Set inlined icons to match outline border
        // except [data-caret] attribute (which can be used for button carret
        svg:not([data-caret]) {
            fill: var(--btn-base-color);
        }

        &:hover:not(:global(.focus)):not(:focus),
        &:active,
        &:global(.active) {
            background-color: var(--color-bg-1);

            :global(.theme-light) & {
                color: var(--btn-dark-color-variant);
                border-color: var(--btn-dark-color-variant);

                svg {
                    fill: var(--btn-dark-color-variant);
                }
            }

            :global(.theme-dark) & {
                color: var(--btn-base-color);
                border-color: var(--btn-base-color);
            }
        }

        &:focus,
        &:global(.focus) {
            color: var(--body-color);
            background-color: var(--body-bg);
            border-color: var(--body-bg);
            outline: none;
        }
    }

    :global(.show) > &:global(.dropdown-toggle) {
        border-color: var(--body-bg);
        background-color: var(--body-bg);

        :global(.theme-light) & {
            box-shadow: 0 0 0 2px var(--btn-light-color-variant);
        }
        :global(.theme-dark) & {
            box-shadow: 0 0 0 2px var(--btn-dark-color-variant);
        }
    }
}

.btn-primary {
    --btn-text-color: var(--light-text);
    --btn-base-color: var(--primary);
    --btn-light-color-variant: var(--primary-2);
    --btn-dark-color-variant: var(--primary-3);
    --btn-light-disabled-text-color: var(--light-text);
    --btn-dark-disabled-text-color: var(--light-text-disabled);
}

.btn-secondary {
    --btn-base-color: var(--secondary);
    --btn-light-color-variant: var(--secondary-2);
    --btn-dark-color-variant: var(--secondary-3);
    // Use darker text colors for contrast
    --btn-text-color: var(--body-color);
    --btn-light-disabled-text-color: var(--text-disabled);
    --btn-dark-disabled-text-color: var(--text-muted);
}

.btn-success {
    --btn-base-color: var(--success);
    --btn-light-color-variant: var(--success-2);
    --btn-dark-color-variant: var(--success-3);
}

.btn-danger {
    --btn-base-color: var(--danger);
    --btn-light-color-variant: var(--danger-2);
    --btn-dark-color-variant: var(--danger-3);
}

.btn-warning {
    --btn-base-color: var(--warning);
    --btn-light-color-variant: var(--warning-2);
    --btn-dark-color-variant: var(--warning-3);
    // Use darker text colors for contrast
    --btn-text-color: var(--dark-text);
    --btn-light-disabled-text-color: var(--text-muted);
    --btn-dark-disabled-text-color: var(--text-muted);
}

.btn-info {
    --btn-base-color: var(--info);
    --btn-light-color-variant: var(--info-2);
    --btn-dark-color-variant: var(--info-3);
    // Use darker text colors for contrast
    --btn-text-color: var(--dark-text);
    --btn-light-disabled-text-color: var(--text-muted);
    --btn-dark-disabled-text-color: var(--text-muted);
}

.btn-merged {
    --btn-base-color: var(--merged);
    --btn-light-color-variant: var(--merged-2);
    --btn-dark-color-variant: var(--merged-3);
    --btn-dark-disabled-text-color: var(--light-text);
}

:global(.theme-dark),
:global(.theme-light) {
    // btn-secondary needs specific styles to ensure good contrast
    .btn-secondary {
        &:global(.disabled),
        &:disabled,
        &[aria-disabled='true'] {
            border-color: var(--input-disabled-bg);
        }

        &:not(:disabled):not(:global(.disabled)):not([aria-disabled='true']) {
            &:hover:not(:global(.focus)):not(:focus),
            &:active,
            &:global(.active) {
                text-decoration: none;
                color: var(--body-color);
                border-color: var(--secondary);

                svg {
                    fill: var(--icon-color);
                }
            }

            &:focus,
            &:global(.focus) {
                box-shadow: 0 0 0 2px var(--primary-2);
            }

            svg {
                fill: var(--icon-color);
            }
        }
    }
}

// Make the div behave like a button
.btn-group,
.btn-group-vertical {
    position: relative;
    display: inline-flex;
    vertical-align: middle; // match .btn alignment given font-size hack above

    > .btn {
        position: relative;
        flex: 1 1 auto;
    }
}

.btn-group {
    // Prevent double borders when buttons are next to each other
    > *:not(:first-child) {
        margin-left: calc(-1 * var(--btn-border-width));
    }

    // Reset rounded corners
    > .btn:not(:last-child):not(:global(.dropdown-toggle)),
    > *:not(:last-child) .btn {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
    }

    > .btn:not(:first-child),
    > *:not(:first-child) .btn {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
    }
}

//
// Vertical button groups
//

.btn-group-vertical {
    flex-direction: column;
    align-items: flex-start;
    justify-content: center;

    > .btn,
    > .btn-group {
        width: 100%;
    }

    > .btn:not(:first-child),
    > .btn-group:not(:first-child) {
        margin-top: var(--btn-border-width);
    }

    // Reset rounded corners
    > .btn:not(:last-child):not(:global(.dropdown-toggle)),
    > .btn-group:not(:last-child) > .btn {
        border-bottom-left-radius: 0;
        border-bottom-right-radius: 0;
    }

    > .btn:not(:first-child),
    > .btn-group:not(:first-child) > .btn {
        border-top-left-radius: 0;
        border-top-right-radius: 0;
    }
}
