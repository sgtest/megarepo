load("@aspect_bazel_lib//lib:copy_to_bin.bzl", "copy_to_bin")
load("@aspect_rules_ts//ts:defs.bzl", "ts_config")
load("@npm//:defs.bzl", "npm_link_all_packages")
load("//dev:defs.bzl", "jest_test", "npm_package", "sass", "ts_project")
load("//client/shared/dev:tools.bzl", "module_style_typings")
load("//dev:eslint.bzl", "eslint_config_and_lint_root", "eslint_test_with_types")

# TODO(bazel): storybook build
# gazelle:exclude **/*.story.{ts,tsx}

# gazelle:js_resolve **/*.module.scss :module_style_typings
# gazelle:js_ignore_imports **/global-styles/index.scss

npm_link_all_packages(name = "node_modules")

eslint_config_and_lint_root()

# Temporary ESLint target to lint stories. This will be removed once we have a
# custom gazelle targets. E.g., `gazelle:custom_js_files stories src/**/*.story.tsx`
eslint_test_with_types(
    name = "stories_eslint",
    srcs = glob([
        "src/**/*.story.tsx",
        "src/**/*.fixtures.ts",
    ]),
    config = ":eslint_config",
    deps = [
        "//:jest_config",  # required for import/extensions rule not to fail on the `jest.config.base` import.
        "//:node_modules/@types/node",
    ],
)

ts_config(
    name = "tsconfig",
    src = "tsconfig.json",
    visibility = ["//client:__subpackages__"],
    deps = [
        "//:tsconfig",
        "//client/common:tsconfig",
        "//client/testing:tsconfig",
    ],
)

module_style_typings(
    name = "module_style_typings",
    deps = [
        ":sass-breakpoints",
        "//:node_modules/@reach/dialog",
        "//:node_modules/@reach/tabs",
    ],
)

sass(
    name = "module_styles",
    srcs = glob(["src/**/*.module.scss"]),
    deps = [
        ":sass-breakpoints",
        "//:node_modules/@reach/dialog",
        "//:node_modules/@reach/tabs",
    ],
)

# Files that can be loaded or imported as css.
GLOBAL_SASS_ENTRY_POINTS = [
    "src/global-styles/base.scss",
    "src/global-styles/index.scss",
    "src/global-styles/forms.scss",
]

# Files that can be loaded as sass utils.
SASS_UTILS = [
    "src/global-styles/colors.scss",
    "src/global-styles/functions.scss",
    "src/global-styles/icons.scss",
    "src/global-styles/mixins.scss",
    "src/global-styles/variables.scss",
    "src/global-styles/utilities/text.scss",
    "src/global-styles/utilities/screenreaders.scss",
]

sass(
    name = "global-styles",
    srcs = GLOBAL_SASS_ENTRY_POINTS,
    visibility = ["//visibility:public"],
    runtime_deps = ["//:node_modules/open-color"],
    deps = glob(
        ["src/global-styles/**/*.scss"],
        exclude = ["**/*.module.scss"] + GLOBAL_SASS_ENTRY_POINTS,
    ) + [
        "//:node_modules/@reach/combobox",
        "//:node_modules/@reach/menu-button",
        "//:node_modules/@reach/tabs",
        "//:node_modules/open-color",
        "//:node_modules/react-resizable",
    ],
)

copy_to_bin(
    name = "sass-breakpoints",
    srcs = [
        "src/global-styles/breakpoints.scss",
    ],
    visibility = ["//visibility:public"],
)

copy_to_bin(
    name = "sass-utils",
    srcs = SASS_UTILS,
    visibility = ["//visibility:public"],
)

ts_project(
    name = "wildcard_lib",
    srcs = [
        "globals.d.ts",
        "src/components/Alert/Alert.tsx",
        "src/components/Alert/AlertLink.tsx",
        "src/components/Alert/constants.ts",
        "src/components/Alert/index.ts",
        "src/components/Alert/utils.ts",
        "src/components/Badge/Badge.tsx",
        "src/components/Badge/ProductStatusBadge.tsx",
        "src/components/Badge/constants.ts",
        "src/components/Badge/index.ts",
        "src/components/BeforeUnloadPrompt/BeforeUnloadPrompt.tsx",
        "src/components/BeforeUnloadPrompt/index.ts",
        "src/components/Button/Button.tsx",
        "src/components/Button/ButtonGroup.tsx",
        "src/components/Button/constants.ts",
        "src/components/Button/index.ts",
        "src/components/Button/story/ButtonVariants.tsx",
        "src/components/Button/utils.ts",
        "src/components/ButtonLink/ButtonLink.tsx",
        "src/components/ButtonLink/index.ts",
        "src/components/Card/Card.tsx",
        "src/components/Card/components/CardBody.tsx",
        "src/components/Card/components/CardFooter.tsx",
        "src/components/Card/components/CardHeader.tsx",
        "src/components/Card/components/CardList.tsx",
        "src/components/Card/components/CardSubtitle.tsx",
        "src/components/Card/components/CardText.tsx",
        "src/components/Card/components/CardTitle.tsx",
        "src/components/Card/components/index.ts",
        "src/components/Card/constants.ts",
        "src/components/Card/index.ts",
        "src/components/Charts/components/bar-chart/BarChart.tsx",
        "src/components/Charts/components/bar-chart/BarChartContent.tsx",
        "src/components/Charts/components/bar-chart/components/GroupedBars.tsx",
        "src/components/Charts/components/bar-chart/components/StackedBars.tsx",
        "src/components/Charts/components/bar-chart/components/TooltipContent.tsx",
        "src/components/Charts/components/bar-chart/index.ts",
        "src/components/Charts/components/bar-chart/types.ts",
        "src/components/Charts/components/bar-chart/utils/get-grouped-categories.ts",
        "src/components/Charts/components/line-chart/LineChart.tsx",
        "src/components/Charts/components/line-chart/LineChartContent.tsx",
        "src/components/Charts/components/line-chart/components/LineDataSeries.tsx",
        "src/components/Charts/components/line-chart/components/PointGlyph.tsx",
        "src/components/Charts/components/line-chart/components/index.ts",
        "src/components/Charts/components/line-chart/components/legend-list/LegendList.tsx",
        "src/components/Charts/components/line-chart/components/stacked-area/StackedArea.tsx",
        "src/components/Charts/components/line-chart/components/stacked-area/get-stacked-area-paths.ts",
        "src/components/Charts/components/line-chart/components/tooltip/TooltipContent.tsx",
        "src/components/Charts/components/line-chart/components/tooltip/index.ts",
        "src/components/Charts/components/line-chart/components/tooltip/utils/get-list-window.ts",
        "src/components/Charts/components/line-chart/event-helpers.ts",
        "src/components/Charts/components/line-chart/index.ts",
        "src/components/Charts/components/line-chart/keyboard-navigation.ts",
        "src/components/Charts/components/line-chart/types.ts",
        "src/components/Charts/components/line-chart/utils/colors.ts",
        "src/components/Charts/components/line-chart/utils/data-guards.ts",
        "src/components/Charts/components/line-chart/utils/data-series-processing/get-series-data.ts",
        "src/components/Charts/components/line-chart/utils/data-series-processing/get-stacked-series-data.ts",
        "src/components/Charts/components/line-chart/utils/data-series-processing/helpers.ts",
        "src/components/Charts/components/line-chart/utils/data-series-processing/index.ts",
        "src/components/Charts/components/line-chart/utils/data-series-processing/types.ts",
        "src/components/Charts/components/line-chart/utils/generate-points-field.ts",
        "src/components/Charts/components/line-chart/utils/get-chart-content-sizes.ts",
        "src/components/Charts/components/line-chart/utils/get-min-max-boundary.ts",
        "src/components/Charts/components/line-chart/utils/index.ts",
        "src/components/Charts/components/pie-chart/PieChart.tsx",
        "src/components/Charts/components/pie-chart/components/PieArc.tsx",
        "src/components/Charts/components/pie-chart/index.ts",
        "src/components/Charts/components/stacked-meter/StackedMeter.tsx",
        "src/components/Charts/components/stacked-meter/index.ts",
        "src/components/Charts/constants.ts",
        "src/components/Charts/core/components/MaybeLink.tsx",
        "src/components/Charts/core/components/SvgRoot.tsx",
        "src/components/Charts/core/components/axis/Axis.tsx",
        "src/components/Charts/core/components/axis/Tick.tsx",
        "src/components/Charts/core/components/axis/tick-formatters.ts",
        "src/components/Charts/core/components/scroll-box/ScrollBox.tsx",
        "src/components/Charts/core/components/scroll-box/index.ts",
        "src/components/Charts/core/components/tooltip/Tooltip.tsx",
        "src/components/Charts/core/index.ts",
        "src/components/Charts/index.ts",
        "src/components/Charts/types.ts",
        "src/components/Collapse/Collapse.tsx",
        "src/components/Collapse/index.ts",
        "src/components/Combobox/Combobox.tsx",
        "src/components/Combobox/MultiCombobox.tsx",
        "src/components/Combobox/index.ts",
        "src/components/Container/Container.tsx",
        "src/components/Container/index.ts",
        "src/components/ErrorAlert/ErrorAlert.tsx",
        "src/components/ErrorAlert/index.ts",
        "src/components/ErrorMessage/ErrorMessage.tsx",
        "src/components/ErrorMessage/index.ts",
        "src/components/Feedback/FeedbackBadge/FeedbackBadge.tsx",
        "src/components/Feedback/FeedbackBadge/constant.ts",
        "src/components/Feedback/FeedbackBadge/index.ts",
        "src/components/Feedback/FeedbackPrompt/FeedbackPrompt.tsx",
        "src/components/Feedback/FeedbackPrompt/index.ts",
        "src/components/Feedback/FeedbackText/FeedbackText.tsx",
        "src/components/Feedback/FeedbackText/index.ts",
        "src/components/Feedback/index.ts",
        "src/components/Form/Checkbox/Checkbox.tsx",
        "src/components/Form/Checkbox/index.tsx",
        "src/components/Form/FlexTextArea/FlexTextArea.tsx",
        "src/components/Form/FlexTextArea/index.ts",
        "src/components/Form/Form/Form.tsx",
        "src/components/Form/Form/getDefaultInputProps.ts",
        "src/components/Form/Form/hooks/index.ts",
        "src/components/Form/Form/hooks/useCheckboxes.ts",
        "src/components/Form/Form/hooks/useField.ts",
        "src/components/Form/Form/hooks/useForm.ts",
        "src/components/Form/Form/hooks/utils/get-event-value.ts",
        "src/components/Form/Form/hooks/utils/use-async-validation.ts",
        "src/components/Form/Form/hooks/validators.ts",
        "src/components/Form/Form/index.ts",
        "src/components/Form/FormGroup/FormGroup.tsx",
        "src/components/Form/FormGroup/index.ts",
        "src/components/Form/Input/Input.tsx",
        "src/components/Form/Input/index.tsx",
        "src/components/Form/Input/utils/getInputStatus.ts",
        "src/components/Form/LoaderInput/LoaderInput.tsx",
        "src/components/Form/LoaderInput/index.ts",
        "src/components/Form/RadioButton/RadioButton.tsx",
        "src/components/Form/RadioButton/index.tsx",
        "src/components/Form/Select/Select.tsx",
        "src/components/Form/Select/index.ts",
        "src/components/Form/TextArea/TextArea.tsx",
        "src/components/Form/TextArea/index.ts",
        "src/components/Form/index.ts",
        "src/components/Form/internal/AccessibleFieldType.ts",
        "src/components/Form/internal/BaseControlInput.tsx",
        "src/components/Form/internal/FormFieldLabel.tsx",
        "src/components/Form/internal/FormFieldMessage.tsx",
        "src/components/Form/internal/utils.ts",
        "src/components/Grid/Grid.tsx",
        "src/components/Grid/index.tsx",
        "src/components/Icon/Icon.tsx",
        "src/components/Icon/constants.ts",
        "src/components/Icon/index.ts",
        "src/components/Link/AnchorLink/AnchorLink.tsx",
        "src/components/Link/AnchorLink/index.ts",
        "src/components/Link/Link/Link.tsx",
        "src/components/Link/Link/index.ts",
        "src/components/Link/LinkOrSpan/LinkOrSpan.tsx",
        "src/components/Link/LinkOrSpan/index.ts",
        "src/components/Link/RouterLink/RouterLink.tsx",
        "src/components/Link/RouterLink/index.ts",
        "src/components/Link/createLinkUrl.tsx",
        "src/components/Link/index.ts",
        "src/components/LoadingSpinner/LoadingSpinner.tsx",
        "src/components/LoadingSpinner/index.ts",
        "src/components/Markdown/Markdown.tsx",
        "src/components/Markdown/index.ts",
        "src/components/Menu/Menu.tsx",
        "src/components/Menu/MenuButton.tsx",
        "src/components/Menu/MenuDisabledItem.tsx",
        "src/components/Menu/MenuDivider.tsx",
        "src/components/Menu/MenuHeader.tsx",
        "src/components/Menu/MenuItem.tsx",
        "src/components/Menu/MenuLink.tsx",
        "src/components/Menu/MenuList.tsx",
        "src/components/Menu/MenuText.tsx",
        "src/components/Menu/index.ts",
        "src/components/Modal/Modal.tsx",
        "src/components/Modal/constants.ts",
        "src/components/Modal/index.ts",
        "src/components/NavMenu/NavMenu.tsx",
        "src/components/NavMenu/index.ts",
        "src/components/PageHeader/Breadcrumb/Breadcrumb.tsx",
        "src/components/PageHeader/Breadcrumb/index.ts",
        "src/components/PageHeader/Heading/Heading.tsx",
        "src/components/PageHeader/Heading/index.ts",
        "src/components/PageHeader/PageHeader.tsx",
        "src/components/PageHeader/index.ts",
        "src/components/PageSelector/PageSelector.tsx",
        "src/components/PageSelector/index.tsx",
        "src/components/PageSwitcher/PageSwitcher.tsx",
        "src/components/PageSwitcher/index.tsx",
        "src/components/Panel/Panel.tsx",
        "src/components/Panel/constants.ts",
        "src/components/Panel/index.ts",
        "src/components/Panel/story/TabbedPanelContent.fixtures.ts",
        "src/components/Panel/useResizablePanel.ts",
        "src/components/Panel/utils.ts",
        "src/components/Popover/Popover.tsx",
        "src/components/Popover/components/PopoverTrigger.tsx",
        "src/components/Popover/components/floating-panel/FloatingPanel.tsx",
        "src/components/Popover/components/popover-content/PopoverContent.tsx",
        "src/components/Popover/components/popover-content/index.ts",
        "src/components/Popover/components/popover-tail/PopoverTail.tsx",
        "src/components/Popover/components/popover-tail/index.ts",
        "src/components/Popover/contexts/internal-context.ts",
        "src/components/Popover/contexts/public-context.ts",
        "src/components/Popover/index.ts",
        "src/components/Popover/tether/index.ts",
        "src/components/Popover/tether/models/geometry/point.ts",
        "src/components/Popover/tether/models/geometry/rectangle.ts",
        "src/components/Popover/tether/models/tether-models.ts",
        "src/components/Popover/tether/services/geometry/actions/get-constrained-element.ts",
        "src/components/Popover/tether/services/geometry/actions/get-element-constraints.ts",
        "src/components/Popover/tether/services/geometry/actions/get-elements-intersection.ts",
        "src/components/Popover/tether/services/geometry/actions/get-extended-constraint.ts",
        "src/components/Popover/tether/services/geometry/actions/get-joined-element.ts",
        "src/components/Popover/tether/services/geometry/actions/get-target-element.ts",
        "src/components/Popover/tether/services/geometry/actions/rectangle-position-helpers.ts",
        "src/components/Popover/tether/services/geometry/actions/tooltip-marker-utils.ts",
        "src/components/Popover/tether/services/geometry/constants.ts",
        "src/components/Popover/tether/services/geometry/index.ts",
        "src/components/Popover/tether/services/tether-browser.ts",
        "src/components/Popover/tether/services/tether-layout.ts",
        "src/components/Popover/tether/services/tether-position.ts",
        "src/components/Popover/tether/services/tether-registry.ts",
        "src/components/Popover/tether/services/tether-render.ts",
        "src/components/Popover/tether/services/tether-state.ts",
        "src/components/Popover/tether/services/types.ts",
        "src/components/Popover/types.ts",
        "src/components/SourcegraphIcon/SourcegraphIcon.tsx",
        "src/components/SourcegraphIcon/index.ts",
        "src/components/Tabs/Tabs.tsx",
        "src/components/Tabs/context.ts",
        "src/components/Tabs/index.ts",
        "src/components/Tabs/useScrollBackToActive.ts",
        "src/components/Tabs/useShouldPanelRender.ts",
        "src/components/Tooltip/Tooltip.tsx",
        "src/components/Tooltip/index.ts",
        "src/components/Tree/Tree.tsx",
        "src/components/Tree/index.ts",
        "src/components/Tree/react-accessible-treeview/index.tsx",
        "src/components/Tree/react-accessible-treeview/utils.ts",
        "src/components/Typography/Code/Code.tsx",
        "src/components/Typography/Code/index.ts",
        "src/components/Typography/Heading/H1.tsx",
        "src/components/Typography/Heading/H2.tsx",
        "src/components/Typography/Heading/H3.tsx",
        "src/components/Typography/Heading/H4.tsx",
        "src/components/Typography/Heading/H5.tsx",
        "src/components/Typography/Heading/H6.tsx",
        "src/components/Typography/Heading/Heading.tsx",
        "src/components/Typography/Heading/index.ts",
        "src/components/Typography/Label/Label.tsx",
        "src/components/Typography/Label/index.ts",
        "src/components/Typography/Label/utils.ts",
        "src/components/Typography/Text/Text.tsx",
        "src/components/Typography/Text/index.ts",
        "src/components/Typography/constants.ts",
        "src/components/Typography/index.ts",
        "src/components/Typography/utils.ts",
        "src/components/index.ts",
        "src/global-styles/GlobalStylesStory/ColorVariants/ColorVariants.tsx",
        "src/global-styles/GlobalStylesStory/ColorVariants/index.ts",
        "src/global-styles/GlobalStylesStory/FormFieldVariants/FormFieldVariants.tsx",
        "src/global-styles/GlobalStylesStory/FormFieldVariants/index.ts",
        "src/global-styles/GlobalStylesStory/TextVariants/TextVariants.tsx",
        "src/global-styles/GlobalStylesStory/TextVariants/index.ts",
        "src/global-styles/GlobalStylesStory/constants.ts",
        "src/global-styles/GlobalStylesStory/utils.ts",
        "src/hooks/index.ts",
        "src/hooks/useAccordion.ts",
        "src/hooks/useAutoFocus.ts",
        "src/hooks/useControlledState.ts",
        "src/hooks/useCookieStorage.ts",
        "src/hooks/useDebounce.ts",
        "src/hooks/useDeepMemo.ts",
        "src/hooks/useElementObscuredArea.ts",
        "src/hooks/useFocusOnLoadedMore.ts",
        "src/hooks/useInterval.ts",
        "src/hooks/useIsMounted.ts",
        "src/hooks/useIsTruncated.ts",
        "src/hooks/useKeyboard.ts",
        "src/hooks/useLocalStorage.ts",
        "src/hooks/useMatchMedia.ts",
        "src/hooks/useMeasure.ts",
        "src/hooks/useObservable.ts",
        "src/hooks/useOffsetPagination.ts",
        "src/hooks/useOnClickOutside.ts",
        "src/hooks/usePrompt.tsx",
        "src/hooks/useSearchParameters.ts",
        "src/hooks/useSessionStorage.ts",
        "src/hooks/useStopwatch.ts",
        "src/hooks/useStorageHook.ts",
        "src/hooks/useTimeoutManager.ts",
        "src/hooks/useUpdateEffect.ts",
        "src/hooks/useWildcardTheme.tsx",
        "src/hooks/useWindowSize.ts",
        "src/index.ts",
        "src/stories/BrandedStory.tsx",
        "src/stories/hooks/index.ts",
        "src/stories/hooks/useChromaticTheme.ts",
        "src/stories/hooks/usePrependStyles.ts",
        "src/stories/hooks/useStorybookTheme.ts",
        "src/stories/index.ts",
        "src/stories/utils/isChromatic.ts",
        "src/testing/index.ts",
        "src/testing/render-with-branded-context.tsx",
        "src/types.ts",
        "src/utils/index.ts",
        "src/utils/joinWithAnd.tsx",
        "src/utils/linkClickHandler.ts",
        "src/utils/screenReaderAnnounce.ts",
        "src/viewports.ts",
    ],
    data = [
        ":global-styles",
    ],
    tsconfig = ":tsconfig",
    deps = [
        ":module_style_typings",
        ":node_modules/@sourcegraph/common",
        "//:node_modules/@mdi/js",
        "//:node_modules/@reach/auto-id",
        "//:node_modules/@reach/combobox",
        "//:node_modules/@reach/dialog",
        "//:node_modules/@reach/menu-button",
        "//:node_modules/@reach/tabs",
        "//:node_modules/@reach/visually-hidden",
        "//:node_modules/@react-aria/live-announcer",
        "//:node_modules/@testing-library/react",
        "//:node_modules/@types/classnames",
        "//:node_modules/@types/d3-format",
        "//:node_modules/@types/d3-scale",
        "//:node_modules/@types/d3-shape",
        "//:node_modules/@types/d3-time-format",
        "//:node_modules/@types/d3-voronoi",
        "//:node_modules/@types/history",
        "//:node_modules/@types/js-cookie",
        "//:node_modules/@types/lodash",
        "//:node_modules/@types/node",  #keep
        "//:node_modules/@types/react",
        "//:node_modules/@types/react-dom",
        "//:node_modules/@types/uuid",
        "//:node_modules/@visx/annotation",
        "//:node_modules/@visx/axis",
        "//:node_modules/@visx/event",
        "//:node_modules/@visx/glyph",
        "//:node_modules/@visx/grid",
        "//:node_modules/@visx/group",
        "//:node_modules/@visx/responsive",
        "//:node_modules/@visx/scale",
        "//:node_modules/@visx/shape",
        "//:node_modules/@visx/text",
        "//:node_modules/@visx/voronoi",
        "//:node_modules/chromatic",
        "//:node_modules/classnames",
        "//:node_modules/d3-format",
        "//:node_modules/d3-scale",
        "//:node_modules/d3-shape",
        "//:node_modules/d3-time-format",
        "//:node_modules/d3-voronoi",
        "//:node_modules/history",
        "//:node_modules/is-absolute-url",
        "//:node_modules/js-cookie",
        "//:node_modules/lodash",
        "//:node_modules/mdi-react",
        "//:node_modules/react",
        "//:node_modules/react-dom",
        "//:node_modules/react-focus-lock",
        "//:node_modules/react-router-dom",
        "//:node_modules/react-spring",
        "//:node_modules/rxjs",
        "//:node_modules/storybook-addon-designs",
        "//:node_modules/storybook-dark-mode",
        "//:node_modules/ts-key-enum",
        "//:node_modules/use-callback-ref",
        "//:node_modules/use-resize-observer",
        "//:node_modules/utility-types",
        "//:node_modules/uuid",
    ],
)

ts_project(
    name = "wildcard_tests",
    testonly = True,
    srcs = [
        "src/components/Alert/Alert.test.tsx",
        "src/components/Button/Button.test.tsx",
        "src/components/ButtonLink/ButtonLink.test.tsx",
        "src/components/Card/Card.test.tsx",
        "src/components/Charts/components/line-chart/LineChart.test.tsx",
        "src/components/Charts/components/line-chart/components/tooltip/utils/get-list-window.test.ts",
        "src/components/Charts/components/line-chart/story/mocks.ts",
        "src/components/Charts/components/line-chart/utils/data-series-processing/get-series-data.test.ts",
        "src/components/Charts/components/line-chart/utils/get-min-max-boundary.test.ts",
        "src/components/Charts/components/stacked-meter/StackedMeter.test.tsx",
        "src/components/Collapse/Collapse.test.tsx",
        "src/components/ErrorAlert/ErrorAlert.test.tsx",
        "src/components/Feedback/FeedbackBadge/FeedbackBadge.test.tsx",
        "src/components/Feedback/FeedbackPrompt/FeedbackPrompt.test.tsx",
        "src/components/Feedback/FeedbackText/FeedbackText.test.tsx",
        "src/components/Form/Input/Input.test.tsx",
        "src/components/Form/LoaderInput/LoaderInput.test.tsx",
        "src/components/Form/Select/Select.test.tsx",
        "src/components/Form/TextArea/TextArea.test.tsx",
        "src/components/Form/internal/BaseControlInput.test.tsx",
        "src/components/Icon/Icon.test.tsx",
        "src/components/Link/AnchorLink/AnchorLink.test.tsx",
        "src/components/Link/LinkOrSpan/LinkOrSpan.test.tsx",
        "src/components/Link/RouterLink/RouterLink.test.tsx",
        "src/components/Link/createLinkUrl.test.tsx",
        "src/components/Markdown/Markdown.test.tsx",
        "src/components/NavMenu/NavMenu.test.tsx",
        "src/components/PageHeader/PageHeader.test.tsx",
        "src/components/PageSelector/PageSelector.test.tsx",
        "src/components/PageSwitcher/PageSwitcher.test.tsx",
        "src/components/Panel/Panel.test.tsx",
        "src/components/Popover/tether/models/geometry/rectangle.spec.ts",
        "src/components/Popover/tether/services/geometry/actions/get-constrained-element.spec.ts",
        "src/components/Tabs/Tabs.test.tsx",
        "src/components/Tooltip/Tooltip.test.tsx",
        "src/components/Tree/Tree.test.tsx",
        "src/components/Typography/Code/Code.test.tsx",
        "src/components/Typography/Heading/H1.test.tsx",
        "src/components/Typography/Heading/H2.test.tsx",
        "src/components/Typography/Heading/H3.test.tsx",
        "src/components/Typography/Heading/H4.test.tsx",
        "src/components/Typography/Heading/H5.test.tsx",
        "src/components/Typography/Heading/H6.test.tsx",
        "src/components/Typography/Label/Label.test.tsx",
        "src/components/Typography/Text/Text.test.tsx",
        "src/hooks/useCookieStorage.test.ts",
        "src/hooks/useObservable.test.ts",
        "src/hooks/useTimeoutManager.test.ts",
        "src/utils/linkClickHandler.test.tsx",
    ],
    tsconfig = ":tsconfig",
    deps = [
        ":node_modules/@sourcegraph/testing",
        ":wildcard_lib",
        "//:node_modules/@mdi/js",
        "//:node_modules/@storybook/react",  #keep
        "//:node_modules/@testing-library/react",
        "//:node_modules/@testing-library/user-event",
        "//:node_modules/@types/history",
        "//:node_modules/@types/js-cookie",
        "//:node_modules/@types/node",
        "//:node_modules/@types/react",
        "//:node_modules/@types/sinon",
        "//:node_modules/expect",
        "//:node_modules/history",
        "//:node_modules/js-cookie",
        "//:node_modules/mdi-react",
        "//:node_modules/react",
        "//:node_modules/rxjs",
        "//:node_modules/sinon",
    ],
)

npm_package(
    name = "wildcard_pkg",
    srcs = [
        "package.json",
        ":module_styles",  #keep
        ":wildcard_lib",
    ],
)

jest_test(
    name = "test",
    timeout = "short",
    data = [
        ":wildcard_tests",
    ],
    patch_node_fs = False,
    shard_count = 6,
    tags = ["no-sandbox"],
)
