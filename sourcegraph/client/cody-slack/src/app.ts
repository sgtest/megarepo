import { ENVIRONMENT_CONFIG, DEFAULT_CODEBASES, AppContext, DEFAULT_APP_SETTINGS } from './constants'
import { handleHumanMessage } from './mention-handler'
import { createCodebaseContext } from './services/codebase-context'
import { getVectorStore } from './services/local-vector-store'
import { isBotEvent } from './slack/helpers'
import { app } from './slack/init'

const { PORT } = ENVIRONMENT_CONFIG

async function createAppContext() {
    // Init codebase context clients for specified Slack channels.
    const appContext = { codebaseContexts: {} } as AppContext
    for (const codebase of DEFAULT_CODEBASES) {
        appContext.codebaseContexts[codebase] = await createCodebaseContext(
            codebase,
            DEFAULT_APP_SETTINGS.contextType,
            DEFAULT_APP_SETTINGS.serverEndpoint
        )
    }

    appContext.vectorStore = await getVectorStore()

    return appContext
}

// Main function to start the bot
async function startBot() {
    const appContext = await createAppContext()

    // Listen for mentions in the Slack app
    app.event<'app_mention'>('app_mention', async ({ event }) => {
        // Ignore events generated by bots
        if (isBotEvent(event)) {
            return
        }

        console.log('APP_MENTION:', event.text)
        // Process the mention event generated by a human user
        await handleHumanMessage(event, appContext)
    })

    // Start the Slack app on the specified port
    return app.start(PORT)
}

// Start the bot and log the status
startBot()
    .then(() => console.log(`⚡️ Cody Slack-bot is running on port ${PORT}!`))
    .catch(error => {
        console.error('Error starting the bot:', error)
        process.exit(1)
    })
