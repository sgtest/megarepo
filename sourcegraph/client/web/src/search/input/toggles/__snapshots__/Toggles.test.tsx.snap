// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Toggles Query input toggle state case toggle for case subexpressions 1`] = `
Array [
  <QueryInputToggle
    activeClassName="test-case-sensitivity-toggle--active"
    caseSensitive={false}
    className="test-case-sensitivity-toggle"
    copyQueryButton={false}
    disableOn={
      Array [
        Object {
          "condition": true,
          "reason": "Query already contains one or more case subexpressions",
        },
        Object {
          "condition": false,
          "reason": "Query contains one or more patterntype subexpressions, cannot apply global case-sensitivity",
        },
        Object {
          "condition": false,
          "reason": "Structural search is always case sensitive",
        },
      ]
    }
    history="[History]"
    icon={
      Object {
        "$$typeof": Symbol(react.memo),
        "compare": null,
        "type": [Function],
      }
    }
    isActive={false}
    location="[Location path=/]"
    navbarSearchQuery="(case:yes foo) or (case:no bar)"
    onToggle={[Function]}
    patternType="literal"
    selectedSearchContextSpec="global"
    setCaseSensitivity={[Function]}
    setPatternType={[Function]}
    settingsCascade={
      Object {
        "final": Object {},
        "subjects": null,
      }
    }
    showSearchContext={false}
    title="Case sensitivity"
  >
    <div
      aria-checked={false}
      aria-disabled={true}
      aria-label="Case sensitivity toggle"
      className="btn btn-icon icon-inline toggle-container__toggle test-case-sensitivity-toggle disabled test-case-sensitivity-toggle--active"
      data-tooltip="Query already contains one or more case subexpressions"
      onClick={[Function]}
      role="checkbox"
      tabIndex={0}
    >
      <Memo(FormatLetterCaseIcon) />
    </div>
  </QueryInputToggle>,
  <div
    aria-checked={false}
    aria-disabled={true}
    aria-label="Case sensitivity toggle"
    className="btn btn-icon icon-inline toggle-container__toggle test-case-sensitivity-toggle disabled test-case-sensitivity-toggle--active"
    data-tooltip="Query already contains one or more case subexpressions"
    onClick={[Function]}
    role="checkbox"
    tabIndex={0}
  >
    <Memo(FormatLetterCaseIcon) />
  </div>,
]
`;

exports[`Toggles Query input toggle state case toggle for patterntype subexpressions 1`] = `
Array [
  <QueryInputToggle
    activeClassName="test-case-sensitivity-toggle--active"
    caseSensitive={false}
    className="test-case-sensitivity-toggle"
    copyQueryButton={false}
    disableOn={
      Array [
        Object {
          "condition": false,
          "reason": "Query already contains one or more case subexpressions",
        },
        Object {
          "condition": true,
          "reason": "Query contains one or more patterntype subexpressions, cannot apply global case-sensitivity",
        },
        Object {
          "condition": false,
          "reason": "Structural search is always case sensitive",
        },
      ]
    }
    history="[History]"
    icon={
      Object {
        "$$typeof": Symbol(react.memo),
        "compare": null,
        "type": [Function],
      }
    }
    isActive={false}
    location="[Location path=/]"
    navbarSearchQuery="(foo patterntype:literal) or (bar patterntype:structural)"
    onToggle={[Function]}
    patternType="literal"
    selectedSearchContextSpec="global"
    setCaseSensitivity={[Function]}
    setPatternType={[Function]}
    settingsCascade={
      Object {
        "final": Object {},
        "subjects": null,
      }
    }
    showSearchContext={false}
    title="Case sensitivity"
  >
    <div
      aria-checked={false}
      aria-disabled={true}
      aria-label="Case sensitivity toggle"
      className="btn btn-icon icon-inline toggle-container__toggle test-case-sensitivity-toggle disabled test-case-sensitivity-toggle--active"
      data-tooltip="Query contains one or more patterntype subexpressions, cannot apply global case-sensitivity"
      onClick={[Function]}
      role="checkbox"
      tabIndex={0}
    >
      <Memo(FormatLetterCaseIcon) />
    </div>
  </QueryInputToggle>,
  <div
    aria-checked={false}
    aria-disabled={true}
    aria-label="Case sensitivity toggle"
    className="btn btn-icon icon-inline toggle-container__toggle test-case-sensitivity-toggle disabled test-case-sensitivity-toggle--active"
    data-tooltip="Query contains one or more patterntype subexpressions, cannot apply global case-sensitivity"
    onClick={[Function]}
    role="checkbox"
    tabIndex={0}
  >
    <Memo(FormatLetterCaseIcon) />
  </div>,
]
`;

exports[`Toggles Query input toggle state regexp toggle for patterntype subexpressions 1`] = `
Array [
  <QueryInputToggle
    activeClassName="test-regexp-toggle--active"
    caseSensitive={false}
    className="toggle-container__regexp-button test-regexp-toggle"
    copyQueryButton={false}
    disableOn={
      Array [
        Object {
          "condition": true,
          "reason": "Query already contains one or more patterntype subexpressions",
        },
      ]
    }
    history="[History]"
    icon={
      Object {
        "$$typeof": Symbol(react.memo),
        "compare": null,
        "type": [Function],
      }
    }
    isActive={false}
    location="[Location path=/]"
    navbarSearchQuery="(foo patterntype:literal) or (bar patterntype:structural)"
    onToggle={[Function]}
    patternType="literal"
    selectedSearchContextSpec="global"
    setCaseSensitivity={[Function]}
    setPatternType={[Function]}
    settingsCascade={
      Object {
        "final": Object {},
        "subjects": null,
      }
    }
    showSearchContext={false}
    title="Regular expression"
  >
    <div
      aria-checked={false}
      aria-disabled={true}
      aria-label="Regular expression toggle"
      className="btn btn-icon icon-inline toggle-container__toggle toggle-container__regexp-button test-regexp-toggle disabled test-regexp-toggle--active"
      data-tooltip="Query already contains one or more patterntype subexpressions"
      onClick={[Function]}
      role="checkbox"
      tabIndex={0}
    >
      <Memo(RegexIcon) />
    </div>
  </QueryInputToggle>,
  <div
    aria-checked={false}
    aria-disabled={true}
    aria-label="Regular expression toggle"
    className="btn btn-icon icon-inline toggle-container__toggle toggle-container__regexp-button test-regexp-toggle disabled test-regexp-toggle--active"
    data-tooltip="Query already contains one or more patterntype subexpressions"
    onClick={[Function]}
    role="checkbox"
    tabIndex={0}
  >
    <Memo(RegexIcon) />
  </div>,
]
`;
