load("@aspect_rules_ts//ts:defs.bzl", "ts_config")
load("//dev:defs.bzl", "ts_project")
load("//dev:mocha.bzl", "mocha_test")

# end-to-end/ does not contain a src/
# gazelle:js_files **/*.{ts,tsx}

ts_config(
    name = "tsconfig",
    src = "tsconfig.json",
    visibility = ["//client:__subpackages__"],
    deps = [
        "//:node_modules/@types/mocha",
        "//:node_modules/@types/node",
        "//client/shared/src/testing:tsconfig",
        "//client/web:tsconfig",
        "//schema:tsconfig",
    ],
)

ts_project(
    name = "end-to-end",
    srcs = [
        "utils/cloneRepos.ts",
        "utils/initEndToEndTest.ts",
    ],
    tsconfig = ":tsconfig",
    usePresetEnv = False,
    deps = [
        "//:node_modules/@types/mockdate",
        "//:node_modules/mockdate",
        "//client/web:node_modules/@sourcegraph/shared",
    ],
)

ts_project(
    name = "end-to-end_tests",
    testonly = True,
    srcs = [
        "code-intel/repository-component.test.ts",
        "frontend-platform/site-admin.test.ts",
        "frontend-platform/theme-switcher.test.ts",
    ],
    tsconfig = ":tsconfig",
    usePresetEnv = False,
    deps = [
        ":end-to-end",
        "//:node_modules/@types/lodash",
        "//:node_modules/@types/mocha",
        "//:node_modules/expect",
        "//:node_modules/lodash",
        "//:node_modules/mocha",
        "//client/web:node_modules/@sourcegraph/shared",
    ],
)

mocha_test(
    name = "e2e",
    timeout = "moderate",
    env = {"INCLUDE_ADMIN_ONBOARDING": "false"},
    tags = [
        "manual",
        "requires-network",
    ],
    tests = [test.replace(".ts", ".js") for test in glob(["**/*.test.ts"])],
    deps = [":end-to-end_tests"],
)
