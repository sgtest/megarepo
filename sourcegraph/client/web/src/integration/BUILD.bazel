load("@aspect_rules_ts//ts:defs.bzl", "ts_config")
load("//dev:defs.bzl", "ts_project")
load("//dev:mocha.bzl", "mocha_test")

# integration/ does not contain a src/
# gazelle:js_files **/*.{ts,tsx}

# gazelle:js_resolve sourcegraph //client/shared:node_modules/@sourcegraph/client-api

ts_config(
    name = "tsconfig",
    src = "tsconfig.json",
    visibility = ["//client:__subpackages__"],
    deps = [
        "//client/shared/src/testing:tsconfig",
        "//client/web:tsconfig",
    ],
)

ts_project(
    name = "integration",
    srcs = [
        "context.ts",
        "graphQlResponseHelpers.ts",
        "graphQlResults.ts",
        "insights/utils/override-insights-graphql-api.ts",
        "jscontext.ts",
        "temporarySettingsContext.ts",
        "utils.ts",
    ],
    module = "commonjs",
    tsconfig = ":tsconfig",
    deps = [
        "//:node_modules/@codemirror/view",
        "//:node_modules/@types/lodash",
        "//:node_modules/@types/pollyjs__core",  #keep
        "//:node_modules/@types/puppeteer",
        "//:node_modules/lodash",
        "//:node_modules/puppeteer",
        "//client/web:graphql_operations",
        "//client/web:node_modules/@sourcegraph/common",
        "//client/web:node_modules/@sourcegraph/shared",
        "//client/web:web_lib",
        "//client/web/dev",
    ],
)

ts_project(
    name = "integration_tests",
    testonly = True,
    srcs = [
        "batches.test.ts",
        "code-monitoring.test.ts",
        "codemirror-blob-view.test.ts",
        "commit-page.test.ts",
        "insights/create-insights.test.ts",
        "insights/dashboards/add-remove-insights.test.ts",
        "insights/dashboards/create-dashboard.test.ts",
        "insights/dashboards/delete-dashboard.test.ts",
        "insights/dashboards/render-empty-dashboard.test.ts",
        "insights/dashboards/render-populated-dashboard.test.ts",
        "insights/dashboards/update-dashboard.test.ts",
        "insights/delete-insights.test.ts",
        "insights/drill-down-filters.test.ts",
        "insights/edit-search-insights.test.ts",
        "insights/fixtures/calculated-insights.ts",
        "insights/fixtures/dashboards.ts",
        "insights/fixtures/insights-metadata.ts",
        "insights/fixtures/runtime-insights.ts",
        "insights/insight/dashboard-cards.test.ts",
        "insights/insight/insight-chart-focus.test.ts",
        "insights/single-insight-page.test.ts",
        "insights/utils/mock-helpers.ts",
        "nav.test.ts",
        "notebook.test.ts",
        "org.test.ts",
        "profile.test.ts",
        "repository.test.ts",
        "request-access.test.ts",
        "search.test.ts",
        "search-aggregation.test.ts",
        "search-contexts.test.ts",
        "settings.test.ts",
        "sign-in.test.ts",
    ],
    tsconfig = ":tsconfig",
    use_preset_env = False,
    deps = [
        ":integration",
        "//:node_modules/@types/lodash",
        "//:node_modules/@types/mocha",
        "//:node_modules/@types/node",
        "//:node_modules/@types/puppeteer",
        "//:node_modules/date-fns",
        "//:node_modules/delay",
        "//:node_modules/expect",
        "//:node_modules/lodash",
        "//:node_modules/mocha",
        "//:node_modules/puppeteer",
        "//:node_modules/ts-key-enum",
        "//client/web:graphql_operations",
        "//client/web:node_modules/@sourcegraph/common",
        "//client/web:node_modules/@sourcegraph/shared",
        "//client/web:web_lib",
    ],
)

mocha_test(
    name = "integration-tests",
    timeout = "moderate",
    args = [
        "--parallel",
        "--jobs 16",
    ],
    data = ["//client/web:app-enterprise"],
    env = {
        "WEB_BUNDLE_PATH": "$(rootpath //client/web:app-enterprise)",
    },
    flaky = True,
    is_percy_enabled = True,
    tags = [
        "no-sandbox",
        "requires-network",
    ],
    tests = [test.replace(".ts", ".js") for test in glob(["**/*.test.ts"])],
    deps = [":integration_tests"],
)
