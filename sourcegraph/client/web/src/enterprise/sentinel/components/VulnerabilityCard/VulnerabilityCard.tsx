import type { FC } from 'react'

import { mdiEyeOff, mdiCheckCircle } from '@mdi/js'
import classNames from 'classnames'
import { format, formatDistance } from 'date-fns'

import { Badge, Button, Icon, Text } from '@sourcegraph/wildcard'

import type { VulnerabilitiesFields } from '../../../../graphql-operations'

import styles from './VulnerabilityCard.module.scss'

interface VulnerabilityCardProps {
    vulnerability: VulnerabilitiesFields
}

export function VulnerabilityCard({ vulnerability }: VulnerabilityCardProps): JSX.Element {
    const {
        vulnerability: { sourceID, summary, affectedPackages, published, modified, cvssScore, severity },
    } = vulnerability

    const dependency = affectedPackages.length ? affectedPackages[0].packageName : ''
    const language = affectedPackages.length ? affectedPackages[0].language : ''
    const affectedVersion = affectedPackages.length
        ? affectedPackages[0].versionConstraint.length
            ? affectedPackages[0].versionConstraint[0]
            : ''
        : ''

    return (
        <CardContainer>
            <Header cve={sourceID} severityScore={cvssScore} severityString={severity} />
            <Content>
                <Description description={summary} />
                <Versions affectedVersion={affectedVersion} />
                <DescriptionTable
                    dependency={dependency}
                    language={language}
                    publishedDate={published || ''}
                    lastUpdate={modified || ''}
                />
            </Content>
        </CardContainer>
    )
}

/*
 * CardContainer
 */

interface CardContainerProps {
    children: React.ReactNode
}
const CardContainer: FC<CardContainerProps> = ({ children }) => <div className={styles.container}>{children}</div>

/*
 * Header
 */

interface HeaderProps {
    cve: string
    severityScore: string
    severityString: string
}
const Header: FC<HeaderProps> = ({ cve, severityScore, severityString }) => (
    <div className={styles.headerContainer}>
        <div className={styles.title}>
            <div>
                <Badge variant="warning">
                    {severityScore} {severityString}
                </Badge>
                <span className={styles.cve}>{cve}</span>
            </div>
        </div>
        <div className={styles.buttonContainer}>
            <Button variant="secondary">
                <Icon aria-hidden={true} svgPath={mdiEyeOff} />
                Ignore
            </Button>
            <Button variant="secondary">
                <Icon aria-hidden={true} svgPath={mdiCheckCircle} />
                Mark as Resolved
            </Button>
        </div>
    </div>
)

/*
 * Content
 */

interface ContentProps {
    children: React.ReactNode
}
const Content: FC<ContentProps> = ({ children }) => <div className={styles.content}>{children}</div>

/*
 * DescriptionTable
 */

interface DescriptionTableProps {
    dependency: string
    language: string
    publishedDate: string
    lastUpdate: string
}
const DescriptionTable: FC<DescriptionTableProps> = ({ dependency, language, publishedDate, lastUpdate }) => {
    const headers = ['Dependency', 'Language', 'Published Date', 'Last Updated']
    const values = [dependency, language, formatDate(publishedDate), formatDate(lastUpdate)]

    const data = headers.map((header, index) => (
        <div key={header}>
            <div className={styles.subheader}>{header}</div>
            <div className={styles.value}>{values[index]}</div>
        </div>
    ))
    return <div className={styles.tableContainer}>{data}</div>
}

function formatDate(date: string): string {
    if (!date) {
        return ''
    }
    const formattedDate = format(new Date(date), 'MMMM d, yyyy')
    const distance = formatDistance(new Date(date), new Date(), { addSuffix: true })

    return `${formattedDate} (${distance})`
}

/*
 * Versions
 */

interface VersionsProps {
    affectedVersion: string
}
const Versions: FC<VersionsProps> = ({ affectedVersion }) => (
    <div className={styles.versions}>
        <div>
            <div className={styles.title}>Affected Version</div>
            <div className={classNames(styles.number, styles.red)}>{affectedVersion}</div>
        </div>
        <div>
            <div className={styles.title}>Patch Version</div>
            <div className={classNames(styles.number, styles.green)}>N/A</div>
        </div>
    </div>
)

/*
 * Description
 */

interface DescriptionProps {
    description: string
}
const Description: FC<DescriptionProps> = ({ description }) => (
    <div className={styles.descriptionContainer}>
        <Text>{description}</Text>
    </div>
)
