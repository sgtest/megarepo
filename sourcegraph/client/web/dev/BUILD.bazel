load("@aspect_rules_ts//ts:defs.bzl", "ts_config")
load("//dev:defs.bzl", "ts_project")

# dev/ does not contain a src/
# gazelle:js_files **/*.{ts,tsx}
# gazelle:js_test_files there-are-no-tests

# TODO(bazel): wip - currently broken
# gazelle:exclude **/server/development.server.ts

ts_config(
    name = "tsconfig",
    src = "tsconfig.json",
    visibility = ["//client:__subpackages__"],
    deps = [
        "//client/web:tsconfig",
    ],
)

ts_project(
    name = "dev",
    srcs = [
        "mocks/mockEventLogger.ts",
        "server/bazel.server.ts",
        "server/production.server.ts",
        "utils/constants.ts",
        "utils/create-js-context.ts",
        "utils/environment-config.ts",
        "utils/get-api-proxy-settings.ts",
        "utils/get-index-html.ts",
        "utils/get-site-config.ts",
        "utils/index.ts",
        "utils/should-compress-response.ts",
        "utils/success-banner.ts",
    ],
    module = "commonjs",
    tsconfig = ":tsconfig",
    visibility = ["//client/web:__subpackages__"],
    deps = [
        "//:node_modules/@types/compression",
        "//:node_modules/@types/connect-history-api-fallback",
        "//:node_modules/@types/express",
        "//:node_modules/@types/jest",  #keep
        "//:node_modules/@types/lodash",
        "//:node_modules/@types/node",
        "//:node_modules/@types/signale",
        "//:node_modules/chalk",
        "//:node_modules/compression",
        "//:node_modules/connect-history-api-fallback",
        "//:node_modules/express",
        "//:node_modules/express-static-gzip",
        "//:node_modules/http-proxy-middleware",
        "//:node_modules/jsonc-parser",
        "//:node_modules/lodash",
        "//:node_modules/signale",
        "//:node_modules/webpack",  #keep
        "//:node_modules/webpack-dev-server",  #keep
        "//client/web:node_modules/@sourcegraph/build-config",
        "//client/web:web_lib",  #keep
    ],
)
