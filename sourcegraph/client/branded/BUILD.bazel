load("@npm//:defs.bzl", "npm_link_all_packages")
load("//dev:defs.bzl", "jest_test", "npm_package", "sass", "ts_project")
load("//client/shared/dev:tools.bzl", "module_style_typings")
load("//dev:eslint.bzl", "eslint_config_and_lint_root", "eslint_test_with_types")

# TODO(bazel): storybook build
# gazelle:exclude **/*.story.{ts,tsx}

# gazelle:js_resolve **/*.module.scss :module_style_typings

load("@aspect_rules_ts//ts:defs.bzl", "ts_config")

npm_link_all_packages(name = "node_modules")

eslint_config_and_lint_root()

# Temporary ESLint target to lint stories. This will be removed once we have a
# custom gazelle targets. E.g., `gazelle:custom_js_files stories src/**/*.story.tsx`
eslint_test_with_types(
    name = "stories_eslint",
    srcs = glob([
        "src/**/*.story.tsx",
        "src/**/*.fixtures.ts",
    ]),
    config = ":eslint_config",
    deps = [
        "//:jest_config",  # required for import/extensions rule not to fail on the `jest.config.base` import.
        "//:node_modules/@types/node",
    ],
)

ts_config(
    name = "tsconfig",
    src = "tsconfig.json",
    visibility = ["//client:__subpackages__"],
    deps = [
        "//:tsconfig",
        "//client/client-api:tsconfig",
        "//client/codeintellify:tsconfig",
        "//client/common:tsconfig",
        "//client/extension-api-types:tsconfig",
        "//client/observability-client:tsconfig",
        "//client/shared:tsconfig",
        "//client/testing:tsconfig",
        "//client/wildcard:tsconfig",
    ],
)

module_style_typings(
    name = "module_style_typings",
    deps = ["//client/wildcard:sass-breakpoints"],
)

sass(
    name = "module_styles",
    srcs = glob(["src/**/*.module.scss"]),
    deps = ["//client/wildcard:sass-breakpoints"],
)

ts_project(
    name = "branded_lib",
    srcs = [
        "src/components/CodeSnippet.tsx",
        "src/components/DownloadSourcegraphIcon.tsx",
        "src/components/SourcegraphLogo.tsx",
        "src/components/Timestamp/Timestamp.tsx",
        "src/components/Timestamp/index.ts",
        "src/components/Toggle.tsx",
        "src/components/ToggleBig.tsx",
        "src/components/constants.ts",
        "src/components/panel/MixPreciseAndSearchBasedReferencesToggle.tsx",
        "src/components/panel/TabbedPanelContent.fixtures.ts",
        "src/components/panel/TabbedPanelContent.tsx",
        "src/components/panel/views/EmptyPanelView.tsx",
        "src/components/panel/views/ExtensionsLoadingView.tsx",
        "src/components/panel/views/FileLocations.tsx",
        "src/components/panel/views/PanelContent.tsx",
        "src/components/panel/views/locations.ts",
        "src/globals.d.ts",
        "src/index.ts",
        "src/search-ui/components/CodeExcerpt.tsx",
        "src/search-ui/components/CodeHostIcon.tsx",
        "src/search-ui/components/CommitSearchResult.tsx",
        "src/search-ui/components/CommitSearchResultMatch.tsx",
        "src/search-ui/components/CopyPathAction.tsx",
        "src/search-ui/components/FileContentSearchResult.tsx",
        "src/search-ui/components/FileMatchChildren.tsx",
        "src/search-ui/components/FilePathSearchResult.tsx",
        "src/search-ui/components/LastSyncedIcon.tsx",
        "src/search-ui/components/LegacyResultContainer.tsx",
        "src/search-ui/components/OwnerSearchResult.tsx",
        "src/search-ui/components/QueryExamples.constants.ts",
        "src/search-ui/components/QueryExamples.tsx",
        "src/search-ui/components/RepoFileLink.tsx",
        "src/search-ui/components/RepoMetadata.tsx",
        "src/search-ui/components/RepoSearchResult.tsx",
        "src/search-ui/components/ResultContainer.tsx",
        "src/search-ui/components/SearchResultStar.tsx",
        "src/search-ui/components/SmartSearchPreview.tsx",
        "src/search-ui/components/SymbolSearchResult.tsx",
        "src/search-ui/components/SyntaxHighlightedSearchQuery.tsx",
        "src/search-ui/components/codeLinkNavigation.ts",
        "src/search-ui/components/index.ts",
        "src/search-ui/components/useQueryExamples.tsx",
        "src/search-ui/documentation/ModalVideo.tsx",
        "src/search-ui/experimental.ts",
        "src/search-ui/index.ts",
        "src/search-ui/input/CodeMirrorQueryInput.tsx",
        "src/search-ui/input/LazyQueryInput.tsx",
        "src/search-ui/input/QueryInput.ts",
        "src/search-ui/input/SearchBox.tsx",
        "src/search-ui/input/SearchButton.tsx",
        "src/search-ui/input/SearchContextDropdown.tsx",
        "src/search-ui/input/SearchContextMenu.tsx",
        "src/search-ui/input/SearchHelpDropdownButton.tsx",
        "src/search-ui/input/SearchHistoryDropdown.tsx",
        "src/search-ui/input/codemirror/active-filter.ts",
        "src/search-ui/input/codemirror/completion.ts",
        "src/search-ui/input/codemirror/diagnostics.ts",
        "src/search-ui/input/codemirror/history.ts",
        "src/search-ui/input/codemirror/index.ts",
        "src/search-ui/input/codemirror/loading-indicator.ts",
        "src/search-ui/input/codemirror/parsedQuery.ts",
        "src/search-ui/input/codemirror/placeholder.ts",
        "src/search-ui/input/codemirror/syntax-highlighting.ts",
        "src/search-ui/input/codemirror/token-info.ts",
        "src/search-ui/input/experimental/CodeMirrorQueryInputWrapper.tsx",
        "src/search-ui/input/experimental/LazyCodeMirrorQueryInput.tsx",
        "src/search-ui/input/experimental/Suggestions.tsx",
        "src/search-ui/input/experimental/SyntaxHighlightedSearchQuery.tsx",
        "src/search-ui/input/experimental/codemirror/example-suggestions.ts",
        "src/search-ui/input/experimental/codemirror/history.ts",
        "src/search-ui/input/experimental/codemirror/searchcontext.ts",
        "src/search-ui/input/experimental/codemirror/syntax-highlighting.ts",
        "src/search-ui/input/experimental/filters.ts",
        "src/search-ui/input/experimental/index.ts",
        "src/search-ui/input/experimental/modes.ts",
        "src/search-ui/input/experimental/optionRenderer.tsx",
        "src/search-ui/input/experimental/suggestionsExtension.ts",
        "src/search-ui/input/experimental/utils.ts",
        "src/search-ui/input/toggles/CopyQueryButton.tsx",
        "src/search-ui/input/toggles/QueryInputToggle.tsx",
        "src/search-ui/input/toggles/SmartSearchToggle.tsx",
        "src/search-ui/input/toggles/Toggles.tsx",
        "src/search-ui/input/toggles/index.ts",
        "src/search-ui/results/AnnotatedSearchExample.tsx",
        "src/search-ui/results/NoResultsPage.tsx",
        "src/search-ui/results/StreamingSearchResultsFooter.tsx",
        "src/search-ui/results/StreamingSearchResultsList.tsx",
        "src/search-ui/results/progress/StreamingProgress.tsx",
        "src/search-ui/results/progress/StreamingProgressCount.tsx",
        "src/search-ui/results/progress/StreamingProgressSkippedButton.tsx",
        "src/search-ui/results/progress/StreamingProgressSkippedPopover.tsx",
        "src/search-ui/results/progress/utils.ts",
        "src/search-ui/results/sidebar/FilterLink.tsx",
        "src/search-ui/results/sidebar/QuickLink.tsx",
        "src/search-ui/results/sidebar/SearchFilterSection.tsx",
        "src/search-ui/results/sidebar/SearchReference.tsx",
        "src/search-ui/results/sidebar/SearchSidebar.tsx",
        "src/search-ui/results/sidebar/SearchTypeLink.tsx",
        "src/search-ui/results/sidebar/helpers.ts",
        "src/search-ui/results/sidebar/revisions.ts",
        "src/search-ui/results/use-items-to-show.ts",
        "src/search-ui/results/useSearchResultsKeyboardNavigation.ts",
        "src/search-ui/util/index.ts",
        "src/search-ui/util/query.ts",
        "src/search-ui/util/stars.ts",
    ],
    tsconfig = ":tsconfig",
    # TODO(bazel): type-only #keep imports
    deps = [
        ":module_style_typings",
        ":node_modules/@sourcegraph/codeintellify",  #keep
        ":node_modules/@sourcegraph/common",
        ":node_modules/@sourcegraph/extension-api-types",  #keep
        ":node_modules/@sourcegraph/observability-client",
        ":node_modules/@sourcegraph/shared",
        ":node_modules/@sourcegraph/wildcard",
        "//:node_modules/@codemirror/autocomplete",
        "//:node_modules/@codemirror/commands",
        "//:node_modules/@codemirror/lint",
        "//:node_modules/@codemirror/state",
        "//:node_modules/@codemirror/view",
        "//:node_modules/@mdi/js",
        "//:node_modules/@reach/visually-hidden",
        "//:node_modules/@types/classnames",
        "//:node_modules/@types/dompurify",
        "//:node_modules/@types/history",  #keep
        "//:node_modules/@types/lodash",
        "//:node_modules/@types/node",
        "//:node_modules/@types/react",
        "//:node_modules/@types/react-dom",
        "//:node_modules/classnames",
        "//:node_modules/comlink",  #keep
        "//:node_modules/copy-to-clipboard",
        "//:node_modules/date-fns",
        "//:node_modules/dompurify",
        "//:node_modules/fzf",
        "//:node_modules/history",  #keep
        "//:node_modules/lodash",
        "//:node_modules/mdi-react",
        "//:node_modules/react",
        "//:node_modules/react-dom",
        "//:node_modules/react-router-dom",
        "//:node_modules/react-sticky-box",
        "//:node_modules/react-visibility-sensor",
        "//:node_modules/rxjs",
        "//:node_modules/ts-key-enum",
        "//:node_modules/use-resize-observer",
        "//client/shared:graphql_operations",
        "//client/shared:shared_lib",  #keep
    ],
)

ts_project(
    name = "branded_tests",
    testonly = True,
    srcs = [
        "src/components/Timestamp/Timestamp.test.tsx",
        "src/components/Toggle.test.tsx",
        "src/components/ToggleBig.test.tsx",
        "src/components/panel/TabbedPanelContent.test.tsx",
        "src/components/panel/views/locations.test.ts",
        "src/search-ui/components/CodeExcerpt.test.tsx",
        "src/search-ui/components/FileContentSearchResult.test.tsx",
        "src/search-ui/components/FileMatchChildren.test.tsx",
        "src/search-ui/components/LegacyResultContainer.test.tsx",
        "src/search-ui/components/RepoFileLink.test.tsx",
        "src/search-ui/components/SyntaxHighlightedSearchQuery.test.tsx",
        "src/search-ui/input/LazyQueryInput.test.tsx",
        "src/search-ui/input/SearchContextDropdown.test.tsx",
        "src/search-ui/input/SearchContextMenu.test.tsx",
        "src/search-ui/input/codemirror/completion.test.ts",
        "src/search-ui/input/experimental/codemirror/searchcontext.test.ts",
        "src/search-ui/input/experimental/utils.test.ts",
        "src/search-ui/input/toggles/Toggles.test.tsx",
        "src/search-ui/results/progress/StreamingProgressCount.test.tsx",
        "src/search-ui/results/progress/StreamingProgressSkippedButton.test.tsx",
        "src/search-ui/results/progress/StreamingProgressSkippedPopover.test.tsx",
        "src/search-ui/results/sidebar/FilterLink.test.tsx",
        "src/search-ui/results/sidebar/QuickLink.test.tsx",
        "src/search-ui/results/sidebar/SearchFilterSection.test.tsx",
        "src/search-ui/results/sidebar/helpers.test.ts",
        "src/search-ui/results/use-items-to-show.test.ts",
    ],
    tsconfig = ":tsconfig",
    deps = [
        ":branded_lib",
        ":node_modules/@sourcegraph/shared",
        ":node_modules/@sourcegraph/testing",
        ":node_modules/@sourcegraph/wildcard",
        "//:node_modules/@codemirror/state",
        "//:node_modules/@testing-library/react",
        "//:node_modules/@testing-library/user-event",
        "//:node_modules/@types/history",
        "//:node_modules/@types/lodash",
        "//:node_modules/@types/react",
        "//:node_modules/@types/react-dom",
        "//:node_modules/@types/sinon",
        "//:node_modules/history",
        "//:node_modules/lodash",
        "//:node_modules/mdi-react",
        "//:node_modules/react",
        "//:node_modules/react-dom",
        "//:node_modules/rxjs",
        "//:node_modules/sinon",
    ],
)

npm_package(
    name = "branded_pkg",
    srcs = [
        "package.json",
        ":branded_lib",
        ":module_styles",  #keep
    ],
)

jest_test(
    name = "test",
    timeout = "moderate",
    data = [
        ":branded_tests",
    ],
    patch_node_fs = False,
    shard_count = 6,
    tags = ["no-sandbox"],
)
