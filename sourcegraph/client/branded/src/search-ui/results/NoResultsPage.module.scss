@import 'wildcard/src/global-styles/breakpoints';

.root {
    align-self: stretch;

    > .panels {
        display: flex;
        flex-direction: row-reverse;

        @media (--lg-breakpoint-down) {
            flex-direction: column;
        }
    }
}

.container {
    &:last-of-type {
        margin-bottom: 1rem;
    }

    .title {
        margin-top: 1.25rem;
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
    }

    .content {
        background-color: var(--color-bg-1);
        border: 1px solid var(--border-color);
        padding: 1.5rem;
        border-radius: 3px;

        > :last-child {
            margin-bottom: 0;
        }
    }

    h4 {
        margin-top: 2rem;
    }

    h4:first-of-type {
        margin-top: initial;
    }

    p {
        margin: 1rem 0;
    }
}

.video-container {
    margin-left: 1rem;

    @media (--lg-breakpoint-down) {
        margin-left: 0;
    }

    figure {
        width: 13rem;
        margin-bottom: 1rem;
    }
    figcaption {
        text-align: center;
    }

    .content {
        padding: 0;
        background-color: transparent;
        border: 0;

        @media (--lg-breakpoint-down) {
            display: flex;
            flex-wrap: wrap;

            > .video {
                padding: 0 1rem;
                margin: 0 0 1rem;
            }
        }
    }
}

.annotated-search-input {
    overflow-x: auto;
    display: flex;

    > svg {
        /* Text in the SVG seems pretty readable at this size */
        min-width: 618px;
        margin: auto;
    }
}

.search-input-example {
    display: flex;
    align-items: center;

    @media (--xs-breakpoint-down) {
        flex-direction: column;
        align-items: stretch;
    }
}

.fake-searchbox {
    @media (--xs-breakpoint-down) {
        background-color: var(--body-bg);
        margin-bottom: 0.25rem;
    }
}

.fake-search-context {
    @media (--xs-breakpoint-down) {
        margin-bottom: 0.5rem;
    }

    > :global(.btn) {
        @media (--xs-breakpoint-down) {
            background-color: var(--color-bg-1);
        }
    }

    .fake-search-context-button {
        /* marked !important to overwrite .btn's cursor property */
        cursor: unset !important;

        &,
        &:hover {
            background-color: transparent;
            border-color: transparent;

            @media (--xs-breakpoint-down) {
                background-color: var(--color-bg-1);
                border-color: var(--input-border-color);
            }
        }
    }
}

/* Unlike the real search input, the fake search input wraps the query on white
 * space, so the box can be multiple lines heigh. This changes the separator to
 * cover the whole height of the input.
 */
.fake-searchbox-separator {
    align-self: stretch;
    height: auto;
    margin: 0.125rem 0;
}

.fake-searchbox-background-container {
    background-color: var(--body-bg);
    border-right-color: var(--input-border-color);
    border-radius: 3px;

    @media (--sm-breakpoint-up) {
        display: flex;
        padding: 0.25rem 0.5rem 0.25rem 0;
    }
}

.fake-searchbox-focus-container {
    @media (--xs-breakpoint-down) {
        display: block;
    }
}

.fake-search-input {
    margin-right: 1rem;
    font-size: 0.75rem;
    font-weight: 500;

    @media (--xs-breakpoint-down) {
        background-color: var(--input-bg);
    }

    > span {
        /* This is used to prevent the text inside from being underlined when
         * the ancestor link is hovered... everything else didn't work and I'm
         * done with text-decoration now...
         */
        display: inline-block;
    }
}

.fake-searchbox-toggles {
    color: var(--body-color);

    @media (--xs-breakpoint-down) {
        margin-top: 0.75rem;
    }
}

.query-examples-container {
    display: flex;
    justify-content: center;
}
