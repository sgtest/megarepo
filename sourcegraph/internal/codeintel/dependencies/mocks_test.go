// Code generated by go-mockgen 1.3.3; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package dependencies

import (
	"context"
	"sync"
	"time"

	api "github.com/sourcegraph/sourcegraph/internal/api"
	lockfiles "github.com/sourcegraph/sourcegraph/internal/codeintel/dependencies/internal/lockfiles"
	store "github.com/sourcegraph/sourcegraph/internal/codeintel/dependencies/internal/store"
	shared "github.com/sourcegraph/sourcegraph/internal/codeintel/dependencies/shared"
	types "github.com/sourcegraph/sourcegraph/internal/codeintel/types"
	gitdomain "github.com/sourcegraph/sourcegraph/internal/gitserver/gitdomain"
)

// MockLockfilesService is a mock implementation of the LockfilesService
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/codeintel/dependencies) used
// for unit testing.
type MockLockfilesService struct {
	// ListDependenciesFunc is an instance of a mock function object
	// controlling the behavior of the method ListDependencies.
	ListDependenciesFunc *LockfilesServiceListDependenciesFunc
}

// NewMockLockfilesService creates a new mock of the LockfilesService
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockLockfilesService() *MockLockfilesService {
	return &MockLockfilesService{
		ListDependenciesFunc: &LockfilesServiceListDependenciesFunc{
			defaultHook: func(context.Context, api.RepoName, string) (r0 []lockfiles.Result, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockLockfilesService creates a new mock of the LockfilesService
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockLockfilesService() *MockLockfilesService {
	return &MockLockfilesService{
		ListDependenciesFunc: &LockfilesServiceListDependenciesFunc{
			defaultHook: func(context.Context, api.RepoName, string) ([]lockfiles.Result, error) {
				panic("unexpected invocation of MockLockfilesService.ListDependencies")
			},
		},
	}
}

// NewMockLockfilesServiceFrom creates a new mock of the
// MockLockfilesService interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockLockfilesServiceFrom(i LockfilesService) *MockLockfilesService {
	return &MockLockfilesService{
		ListDependenciesFunc: &LockfilesServiceListDependenciesFunc{
			defaultHook: i.ListDependencies,
		},
	}
}

// LockfilesServiceListDependenciesFunc describes the behavior when the
// ListDependencies method of the parent MockLockfilesService instance is
// invoked.
type LockfilesServiceListDependenciesFunc struct {
	defaultHook func(context.Context, api.RepoName, string) ([]lockfiles.Result, error)
	hooks       []func(context.Context, api.RepoName, string) ([]lockfiles.Result, error)
	history     []LockfilesServiceListDependenciesFuncCall
	mutex       sync.Mutex
}

// ListDependencies delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockLockfilesService) ListDependencies(v0 context.Context, v1 api.RepoName, v2 string) ([]lockfiles.Result, error) {
	r0, r1 := m.ListDependenciesFunc.nextHook()(v0, v1, v2)
	m.ListDependenciesFunc.appendCall(LockfilesServiceListDependenciesFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListDependencies
// method of the parent MockLockfilesService instance is invoked and the
// hook queue is empty.
func (f *LockfilesServiceListDependenciesFunc) SetDefaultHook(hook func(context.Context, api.RepoName, string) ([]lockfiles.Result, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListDependencies method of the parent MockLockfilesService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *LockfilesServiceListDependenciesFunc) PushHook(hook func(context.Context, api.RepoName, string) ([]lockfiles.Result, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LockfilesServiceListDependenciesFunc) SetDefaultReturn(r0 []lockfiles.Result, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, string) ([]lockfiles.Result, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LockfilesServiceListDependenciesFunc) PushReturn(r0 []lockfiles.Result, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, string) ([]lockfiles.Result, error) {
		return r0, r1
	})
}

func (f *LockfilesServiceListDependenciesFunc) nextHook() func(context.Context, api.RepoName, string) ([]lockfiles.Result, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LockfilesServiceListDependenciesFunc) appendCall(r0 LockfilesServiceListDependenciesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LockfilesServiceListDependenciesFuncCall
// objects describing the invocations of this function.
func (f *LockfilesServiceListDependenciesFunc) History() []LockfilesServiceListDependenciesFuncCall {
	f.mutex.Lock()
	history := make([]LockfilesServiceListDependenciesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LockfilesServiceListDependenciesFuncCall is an object that describes an
// invocation of method ListDependencies on an instance of
// MockLockfilesService.
type LockfilesServiceListDependenciesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []lockfiles.Result
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LockfilesServiceListDependenciesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LockfilesServiceListDependenciesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockSyncer is a mock implementation of the Syncer interface (from the
// package
// github.com/sourcegraph/sourcegraph/internal/codeintel/dependencies) used
// for unit testing.
type MockSyncer struct {
	// SyncFunc is an instance of a mock function object controlling the
	// behavior of the method Sync.
	SyncFunc *SyncerSyncFunc
}

// NewMockSyncer creates a new mock of the Syncer interface. All methods
// return zero values for all results, unless overwritten.
func NewMockSyncer() *MockSyncer {
	return &MockSyncer{
		SyncFunc: &SyncerSyncFunc{
			defaultHook: func(context.Context, api.RepoName) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockSyncer creates a new mock of the Syncer interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockSyncer() *MockSyncer {
	return &MockSyncer{
		SyncFunc: &SyncerSyncFunc{
			defaultHook: func(context.Context, api.RepoName) error {
				panic("unexpected invocation of MockSyncer.Sync")
			},
		},
	}
}

// NewMockSyncerFrom creates a new mock of the MockSyncer interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockSyncerFrom(i Syncer) *MockSyncer {
	return &MockSyncer{
		SyncFunc: &SyncerSyncFunc{
			defaultHook: i.Sync,
		},
	}
}

// SyncerSyncFunc describes the behavior when the Sync method of the parent
// MockSyncer instance is invoked.
type SyncerSyncFunc struct {
	defaultHook func(context.Context, api.RepoName) error
	hooks       []func(context.Context, api.RepoName) error
	history     []SyncerSyncFuncCall
	mutex       sync.Mutex
}

// Sync delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSyncer) Sync(v0 context.Context, v1 api.RepoName) error {
	r0 := m.SyncFunc.nextHook()(v0, v1)
	m.SyncFunc.appendCall(SyncerSyncFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Sync method of the
// parent MockSyncer instance is invoked and the hook queue is empty.
func (f *SyncerSyncFunc) SetDefaultHook(hook func(context.Context, api.RepoName) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Sync method of the parent MockSyncer instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *SyncerSyncFunc) PushHook(hook func(context.Context, api.RepoName) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SyncerSyncFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SyncerSyncFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, api.RepoName) error {
		return r0
	})
}

func (f *SyncerSyncFunc) nextHook() func(context.Context, api.RepoName) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SyncerSyncFunc) appendCall(r0 SyncerSyncFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SyncerSyncFuncCall objects describing the
// invocations of this function.
func (f *SyncerSyncFunc) History() []SyncerSyncFuncCall {
	f.mutex.Lock()
	history := make([]SyncerSyncFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SyncerSyncFuncCall is an object that describes an invocation of method
// Sync on an instance of MockSyncer.
type SyncerSyncFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SyncerSyncFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SyncerSyncFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockLocalGitService is a mock implementation of the localGitService
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/codeintel/dependencies) used
// for unit testing.
type MockLocalGitService struct {
	// GetCommitsFunc is an instance of a mock function object controlling
	// the behavior of the method GetCommits.
	GetCommitsFunc *LocalGitServiceGetCommitsFunc
}

// NewMockLocalGitService creates a new mock of the localGitService
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockLocalGitService() *MockLocalGitService {
	return &MockLocalGitService{
		GetCommitsFunc: &LocalGitServiceGetCommitsFunc{
			defaultHook: func(context.Context, []api.RepoCommit, bool) (r0 []*gitdomain.Commit, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockLocalGitService creates a new mock of the localGitService
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockLocalGitService() *MockLocalGitService {
	return &MockLocalGitService{
		GetCommitsFunc: &LocalGitServiceGetCommitsFunc{
			defaultHook: func(context.Context, []api.RepoCommit, bool) ([]*gitdomain.Commit, error) {
				panic("unexpected invocation of MockLocalGitService.GetCommits")
			},
		},
	}
}

// surrogateMockLocalGitService is a copy of the localGitService interface
// (from the package
// github.com/sourcegraph/sourcegraph/internal/codeintel/dependencies). It
// is redefined here as it is unexported in the source package.
type surrogateMockLocalGitService interface {
	GetCommits(context.Context, []api.RepoCommit, bool) ([]*gitdomain.Commit, error)
}

// NewMockLocalGitServiceFrom creates a new mock of the MockLocalGitService
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockLocalGitServiceFrom(i surrogateMockLocalGitService) *MockLocalGitService {
	return &MockLocalGitService{
		GetCommitsFunc: &LocalGitServiceGetCommitsFunc{
			defaultHook: i.GetCommits,
		},
	}
}

// LocalGitServiceGetCommitsFunc describes the behavior when the GetCommits
// method of the parent MockLocalGitService instance is invoked.
type LocalGitServiceGetCommitsFunc struct {
	defaultHook func(context.Context, []api.RepoCommit, bool) ([]*gitdomain.Commit, error)
	hooks       []func(context.Context, []api.RepoCommit, bool) ([]*gitdomain.Commit, error)
	history     []LocalGitServiceGetCommitsFuncCall
	mutex       sync.Mutex
}

// GetCommits delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockLocalGitService) GetCommits(v0 context.Context, v1 []api.RepoCommit, v2 bool) ([]*gitdomain.Commit, error) {
	r0, r1 := m.GetCommitsFunc.nextHook()(v0, v1, v2)
	m.GetCommitsFunc.appendCall(LocalGitServiceGetCommitsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetCommits method of
// the parent MockLocalGitService instance is invoked and the hook queue is
// empty.
func (f *LocalGitServiceGetCommitsFunc) SetDefaultHook(hook func(context.Context, []api.RepoCommit, bool) ([]*gitdomain.Commit, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetCommits method of the parent MockLocalGitService instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *LocalGitServiceGetCommitsFunc) PushHook(hook func(context.Context, []api.RepoCommit, bool) ([]*gitdomain.Commit, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LocalGitServiceGetCommitsFunc) SetDefaultReturn(r0 []*gitdomain.Commit, r1 error) {
	f.SetDefaultHook(func(context.Context, []api.RepoCommit, bool) ([]*gitdomain.Commit, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LocalGitServiceGetCommitsFunc) PushReturn(r0 []*gitdomain.Commit, r1 error) {
	f.PushHook(func(context.Context, []api.RepoCommit, bool) ([]*gitdomain.Commit, error) {
		return r0, r1
	})
}

func (f *LocalGitServiceGetCommitsFunc) nextHook() func(context.Context, []api.RepoCommit, bool) ([]*gitdomain.Commit, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LocalGitServiceGetCommitsFunc) appendCall(r0 LocalGitServiceGetCommitsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LocalGitServiceGetCommitsFuncCall objects
// describing the invocations of this function.
func (f *LocalGitServiceGetCommitsFunc) History() []LocalGitServiceGetCommitsFuncCall {
	f.mutex.Lock()
	history := make([]LocalGitServiceGetCommitsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LocalGitServiceGetCommitsFuncCall is an object that describes an
// invocation of method GetCommits on an instance of MockLocalGitService.
type LocalGitServiceGetCommitsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []api.RepoCommit
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*gitdomain.Commit
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LocalGitServiceGetCommitsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LocalGitServiceGetCommitsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockStore is a mock implementation of the Store interface (from the
// package
// github.com/sourcegraph/sourcegraph/internal/codeintel/dependencies/internal/store)
// used for unit testing.
type MockStore struct {
	// DeleteDependencyReposByIDFunc is an instance of a mock function
	// object controlling the behavior of the method
	// DeleteDependencyReposByID.
	DeleteDependencyReposByIDFunc *StoreDeleteDependencyReposByIDFunc
	// ListDependencyReposFunc is an instance of a mock function object
	// controlling the behavior of the method ListDependencyRepos.
	ListDependencyReposFunc *StoreListDependencyReposFunc
	// ListLockfileIndexesFunc is an instance of a mock function object
	// controlling the behavior of the method ListLockfileIndexes.
	ListLockfileIndexesFunc *StoreListLockfileIndexesFunc
	// LockfileDependenciesFunc is an instance of a mock function object
	// controlling the behavior of the method LockfileDependencies.
	LockfileDependenciesFunc *StoreLockfileDependenciesFunc
	// LockfileDependentsFunc is an instance of a mock function object
	// controlling the behavior of the method LockfileDependents.
	LockfileDependentsFunc *StoreLockfileDependentsFunc
	// PreciseDependenciesFunc is an instance of a mock function object
	// controlling the behavior of the method PreciseDependencies.
	PreciseDependenciesFunc *StorePreciseDependenciesFunc
	// PreciseDependentsFunc is an instance of a mock function object
	// controlling the behavior of the method PreciseDependents.
	PreciseDependentsFunc *StorePreciseDependentsFunc
	// SelectRepoRevisionsToResolveFunc is an instance of a mock function
	// object controlling the behavior of the method
	// SelectRepoRevisionsToResolve.
	SelectRepoRevisionsToResolveFunc *StoreSelectRepoRevisionsToResolveFunc
	// UpdateResolvedRevisionsFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateResolvedRevisions.
	UpdateResolvedRevisionsFunc *StoreUpdateResolvedRevisionsFunc
	// UpsertDependencyReposFunc is an instance of a mock function object
	// controlling the behavior of the method UpsertDependencyRepos.
	UpsertDependencyReposFunc *StoreUpsertDependencyReposFunc
	// UpsertLockfileGraphFunc is an instance of a mock function object
	// controlling the behavior of the method UpsertLockfileGraph.
	UpsertLockfileGraphFunc *StoreUpsertLockfileGraphFunc
}

// NewMockStore creates a new mock of the Store interface. All methods
// return zero values for all results, unless overwritten.
func NewMockStore() *MockStore {
	return &MockStore{
		DeleteDependencyReposByIDFunc: &StoreDeleteDependencyReposByIDFunc{
			defaultHook: func(context.Context, ...int) (r0 error) {
				return
			},
		},
		ListDependencyReposFunc: &StoreListDependencyReposFunc{
			defaultHook: func(context.Context, store.ListDependencyReposOpts) (r0 []shared.Repo, r1 error) {
				return
			},
		},
		ListLockfileIndexesFunc: &StoreListLockfileIndexesFunc{
			defaultHook: func(context.Context, store.ListLockfileIndexesOpts) (r0 []shared.LockfileIndex, r1 int, r2 error) {
				return
			},
		},
		LockfileDependenciesFunc: &StoreLockfileDependenciesFunc{
			defaultHook: func(context.Context, store.LockfileDependenciesOpts) (r0 []shared.PackageDependency, r1 bool, r2 error) {
				return
			},
		},
		LockfileDependentsFunc: &StoreLockfileDependentsFunc{
			defaultHook: func(context.Context, string, string) (r0 []api.RepoCommit, r1 error) {
				return
			},
		},
		PreciseDependenciesFunc: &StorePreciseDependenciesFunc{
			defaultHook: func(context.Context, string, string) (r0 map[api.RepoName]types.RevSpecSet, r1 error) {
				return
			},
		},
		PreciseDependentsFunc: &StorePreciseDependentsFunc{
			defaultHook: func(context.Context, string, string) (r0 map[api.RepoName]types.RevSpecSet, r1 error) {
				return
			},
		},
		SelectRepoRevisionsToResolveFunc: &StoreSelectRepoRevisionsToResolveFunc{
			defaultHook: func(context.Context, int, time.Duration) (r0 map[string][]string, r1 error) {
				return
			},
		},
		UpdateResolvedRevisionsFunc: &StoreUpdateResolvedRevisionsFunc{
			defaultHook: func(context.Context, map[string]map[string]string) (r0 error) {
				return
			},
		},
		UpsertDependencyReposFunc: &StoreUpsertDependencyReposFunc{
			defaultHook: func(context.Context, []shared.Repo) (r0 []shared.Repo, r1 error) {
				return
			},
		},
		UpsertLockfileGraphFunc: &StoreUpsertLockfileGraphFunc{
			defaultHook: func(context.Context, string, string, string, []shared.PackageDependency, shared.DependencyGraph) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockStore creates a new mock of the Store interface. All methods
// panic on invocation, unless overwritten.
func NewStrictMockStore() *MockStore {
	return &MockStore{
		DeleteDependencyReposByIDFunc: &StoreDeleteDependencyReposByIDFunc{
			defaultHook: func(context.Context, ...int) error {
				panic("unexpected invocation of MockStore.DeleteDependencyReposByID")
			},
		},
		ListDependencyReposFunc: &StoreListDependencyReposFunc{
			defaultHook: func(context.Context, store.ListDependencyReposOpts) ([]shared.Repo, error) {
				panic("unexpected invocation of MockStore.ListDependencyRepos")
			},
		},
		ListLockfileIndexesFunc: &StoreListLockfileIndexesFunc{
			defaultHook: func(context.Context, store.ListLockfileIndexesOpts) ([]shared.LockfileIndex, int, error) {
				panic("unexpected invocation of MockStore.ListLockfileIndexes")
			},
		},
		LockfileDependenciesFunc: &StoreLockfileDependenciesFunc{
			defaultHook: func(context.Context, store.LockfileDependenciesOpts) ([]shared.PackageDependency, bool, error) {
				panic("unexpected invocation of MockStore.LockfileDependencies")
			},
		},
		LockfileDependentsFunc: &StoreLockfileDependentsFunc{
			defaultHook: func(context.Context, string, string) ([]api.RepoCommit, error) {
				panic("unexpected invocation of MockStore.LockfileDependents")
			},
		},
		PreciseDependenciesFunc: &StorePreciseDependenciesFunc{
			defaultHook: func(context.Context, string, string) (map[api.RepoName]types.RevSpecSet, error) {
				panic("unexpected invocation of MockStore.PreciseDependencies")
			},
		},
		PreciseDependentsFunc: &StorePreciseDependentsFunc{
			defaultHook: func(context.Context, string, string) (map[api.RepoName]types.RevSpecSet, error) {
				panic("unexpected invocation of MockStore.PreciseDependents")
			},
		},
		SelectRepoRevisionsToResolveFunc: &StoreSelectRepoRevisionsToResolveFunc{
			defaultHook: func(context.Context, int, time.Duration) (map[string][]string, error) {
				panic("unexpected invocation of MockStore.SelectRepoRevisionsToResolve")
			},
		},
		UpdateResolvedRevisionsFunc: &StoreUpdateResolvedRevisionsFunc{
			defaultHook: func(context.Context, map[string]map[string]string) error {
				panic("unexpected invocation of MockStore.UpdateResolvedRevisions")
			},
		},
		UpsertDependencyReposFunc: &StoreUpsertDependencyReposFunc{
			defaultHook: func(context.Context, []shared.Repo) ([]shared.Repo, error) {
				panic("unexpected invocation of MockStore.UpsertDependencyRepos")
			},
		},
		UpsertLockfileGraphFunc: &StoreUpsertLockfileGraphFunc{
			defaultHook: func(context.Context, string, string, string, []shared.PackageDependency, shared.DependencyGraph) error {
				panic("unexpected invocation of MockStore.UpsertLockfileGraph")
			},
		},
	}
}

// NewMockStoreFrom creates a new mock of the MockStore interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockStoreFrom(i store.Store) *MockStore {
	return &MockStore{
		DeleteDependencyReposByIDFunc: &StoreDeleteDependencyReposByIDFunc{
			defaultHook: i.DeleteDependencyReposByID,
		},
		ListDependencyReposFunc: &StoreListDependencyReposFunc{
			defaultHook: i.ListDependencyRepos,
		},
		ListLockfileIndexesFunc: &StoreListLockfileIndexesFunc{
			defaultHook: i.ListLockfileIndexes,
		},
		LockfileDependenciesFunc: &StoreLockfileDependenciesFunc{
			defaultHook: i.LockfileDependencies,
		},
		LockfileDependentsFunc: &StoreLockfileDependentsFunc{
			defaultHook: i.LockfileDependents,
		},
		PreciseDependenciesFunc: &StorePreciseDependenciesFunc{
			defaultHook: i.PreciseDependencies,
		},
		PreciseDependentsFunc: &StorePreciseDependentsFunc{
			defaultHook: i.PreciseDependents,
		},
		SelectRepoRevisionsToResolveFunc: &StoreSelectRepoRevisionsToResolveFunc{
			defaultHook: i.SelectRepoRevisionsToResolve,
		},
		UpdateResolvedRevisionsFunc: &StoreUpdateResolvedRevisionsFunc{
			defaultHook: i.UpdateResolvedRevisions,
		},
		UpsertDependencyReposFunc: &StoreUpsertDependencyReposFunc{
			defaultHook: i.UpsertDependencyRepos,
		},
		UpsertLockfileGraphFunc: &StoreUpsertLockfileGraphFunc{
			defaultHook: i.UpsertLockfileGraph,
		},
	}
}

// StoreDeleteDependencyReposByIDFunc describes the behavior when the
// DeleteDependencyReposByID method of the parent MockStore instance is
// invoked.
type StoreDeleteDependencyReposByIDFunc struct {
	defaultHook func(context.Context, ...int) error
	hooks       []func(context.Context, ...int) error
	history     []StoreDeleteDependencyReposByIDFuncCall
	mutex       sync.Mutex
}

// DeleteDependencyReposByID delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockStore) DeleteDependencyReposByID(v0 context.Context, v1 ...int) error {
	r0 := m.DeleteDependencyReposByIDFunc.nextHook()(v0, v1...)
	m.DeleteDependencyReposByIDFunc.appendCall(StoreDeleteDependencyReposByIDFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// DeleteDependencyReposByID method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreDeleteDependencyReposByIDFunc) SetDefaultHook(hook func(context.Context, ...int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteDependencyReposByID method of the parent MockStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *StoreDeleteDependencyReposByIDFunc) PushHook(hook func(context.Context, ...int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreDeleteDependencyReposByIDFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ...int) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreDeleteDependencyReposByIDFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ...int) error {
		return r0
	})
}

func (f *StoreDeleteDependencyReposByIDFunc) nextHook() func(context.Context, ...int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreDeleteDependencyReposByIDFunc) appendCall(r0 StoreDeleteDependencyReposByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreDeleteDependencyReposByIDFuncCall
// objects describing the invocations of this function.
func (f *StoreDeleteDependencyReposByIDFunc) History() []StoreDeleteDependencyReposByIDFuncCall {
	f.mutex.Lock()
	history := make([]StoreDeleteDependencyReposByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreDeleteDependencyReposByIDFuncCall is an object that describes an
// invocation of method DeleteDependencyReposByID on an instance of
// MockStore.
type StoreDeleteDependencyReposByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c StoreDeleteDependencyReposByIDFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreDeleteDependencyReposByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreListDependencyReposFunc describes the behavior when the
// ListDependencyRepos method of the parent MockStore instance is invoked.
type StoreListDependencyReposFunc struct {
	defaultHook func(context.Context, store.ListDependencyReposOpts) ([]shared.Repo, error)
	hooks       []func(context.Context, store.ListDependencyReposOpts) ([]shared.Repo, error)
	history     []StoreListDependencyReposFuncCall
	mutex       sync.Mutex
}

// ListDependencyRepos delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) ListDependencyRepos(v0 context.Context, v1 store.ListDependencyReposOpts) ([]shared.Repo, error) {
	r0, r1 := m.ListDependencyReposFunc.nextHook()(v0, v1)
	m.ListDependencyReposFunc.appendCall(StoreListDependencyReposFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListDependencyRepos
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreListDependencyReposFunc) SetDefaultHook(hook func(context.Context, store.ListDependencyReposOpts) ([]shared.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListDependencyRepos method of the parent MockStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StoreListDependencyReposFunc) PushHook(hook func(context.Context, store.ListDependencyReposOpts) ([]shared.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreListDependencyReposFunc) SetDefaultReturn(r0 []shared.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, store.ListDependencyReposOpts) ([]shared.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreListDependencyReposFunc) PushReturn(r0 []shared.Repo, r1 error) {
	f.PushHook(func(context.Context, store.ListDependencyReposOpts) ([]shared.Repo, error) {
		return r0, r1
	})
}

func (f *StoreListDependencyReposFunc) nextHook() func(context.Context, store.ListDependencyReposOpts) ([]shared.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreListDependencyReposFunc) appendCall(r0 StoreListDependencyReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreListDependencyReposFuncCall objects
// describing the invocations of this function.
func (f *StoreListDependencyReposFunc) History() []StoreListDependencyReposFuncCall {
	f.mutex.Lock()
	history := make([]StoreListDependencyReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreListDependencyReposFuncCall is an object that describes an
// invocation of method ListDependencyRepos on an instance of MockStore.
type StoreListDependencyReposFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 store.ListDependencyReposOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreListDependencyReposFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreListDependencyReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreListLockfileIndexesFunc describes the behavior when the
// ListLockfileIndexes method of the parent MockStore instance is invoked.
type StoreListLockfileIndexesFunc struct {
	defaultHook func(context.Context, store.ListLockfileIndexesOpts) ([]shared.LockfileIndex, int, error)
	hooks       []func(context.Context, store.ListLockfileIndexesOpts) ([]shared.LockfileIndex, int, error)
	history     []StoreListLockfileIndexesFuncCall
	mutex       sync.Mutex
}

// ListLockfileIndexes delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) ListLockfileIndexes(v0 context.Context, v1 store.ListLockfileIndexesOpts) ([]shared.LockfileIndex, int, error) {
	r0, r1, r2 := m.ListLockfileIndexesFunc.nextHook()(v0, v1)
	m.ListLockfileIndexesFunc.appendCall(StoreListLockfileIndexesFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the ListLockfileIndexes
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreListLockfileIndexesFunc) SetDefaultHook(hook func(context.Context, store.ListLockfileIndexesOpts) ([]shared.LockfileIndex, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListLockfileIndexes method of the parent MockStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StoreListLockfileIndexesFunc) PushHook(hook func(context.Context, store.ListLockfileIndexesOpts) ([]shared.LockfileIndex, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreListLockfileIndexesFunc) SetDefaultReturn(r0 []shared.LockfileIndex, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, store.ListLockfileIndexesOpts) ([]shared.LockfileIndex, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreListLockfileIndexesFunc) PushReturn(r0 []shared.LockfileIndex, r1 int, r2 error) {
	f.PushHook(func(context.Context, store.ListLockfileIndexesOpts) ([]shared.LockfileIndex, int, error) {
		return r0, r1, r2
	})
}

func (f *StoreListLockfileIndexesFunc) nextHook() func(context.Context, store.ListLockfileIndexesOpts) ([]shared.LockfileIndex, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreListLockfileIndexesFunc) appendCall(r0 StoreListLockfileIndexesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreListLockfileIndexesFuncCall objects
// describing the invocations of this function.
func (f *StoreListLockfileIndexesFunc) History() []StoreListLockfileIndexesFuncCall {
	f.mutex.Lock()
	history := make([]StoreListLockfileIndexesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreListLockfileIndexesFuncCall is an object that describes an
// invocation of method ListLockfileIndexes on an instance of MockStore.
type StoreListLockfileIndexesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 store.ListLockfileIndexesOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.LockfileIndex
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreListLockfileIndexesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreListLockfileIndexesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreLockfileDependenciesFunc describes the behavior when the
// LockfileDependencies method of the parent MockStore instance is invoked.
type StoreLockfileDependenciesFunc struct {
	defaultHook func(context.Context, store.LockfileDependenciesOpts) ([]shared.PackageDependency, bool, error)
	hooks       []func(context.Context, store.LockfileDependenciesOpts) ([]shared.PackageDependency, bool, error)
	history     []StoreLockfileDependenciesFuncCall
	mutex       sync.Mutex
}

// LockfileDependencies delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) LockfileDependencies(v0 context.Context, v1 store.LockfileDependenciesOpts) ([]shared.PackageDependency, bool, error) {
	r0, r1, r2 := m.LockfileDependenciesFunc.nextHook()(v0, v1)
	m.LockfileDependenciesFunc.appendCall(StoreLockfileDependenciesFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the LockfileDependencies
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreLockfileDependenciesFunc) SetDefaultHook(hook func(context.Context, store.LockfileDependenciesOpts) ([]shared.PackageDependency, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LockfileDependencies method of the parent MockStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StoreLockfileDependenciesFunc) PushHook(hook func(context.Context, store.LockfileDependenciesOpts) ([]shared.PackageDependency, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreLockfileDependenciesFunc) SetDefaultReturn(r0 []shared.PackageDependency, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, store.LockfileDependenciesOpts) ([]shared.PackageDependency, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreLockfileDependenciesFunc) PushReturn(r0 []shared.PackageDependency, r1 bool, r2 error) {
	f.PushHook(func(context.Context, store.LockfileDependenciesOpts) ([]shared.PackageDependency, bool, error) {
		return r0, r1, r2
	})
}

func (f *StoreLockfileDependenciesFunc) nextHook() func(context.Context, store.LockfileDependenciesOpts) ([]shared.PackageDependency, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreLockfileDependenciesFunc) appendCall(r0 StoreLockfileDependenciesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreLockfileDependenciesFuncCall objects
// describing the invocations of this function.
func (f *StoreLockfileDependenciesFunc) History() []StoreLockfileDependenciesFuncCall {
	f.mutex.Lock()
	history := make([]StoreLockfileDependenciesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreLockfileDependenciesFuncCall is an object that describes an
// invocation of method LockfileDependencies on an instance of MockStore.
type StoreLockfileDependenciesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 store.LockfileDependenciesOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.PackageDependency
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreLockfileDependenciesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreLockfileDependenciesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreLockfileDependentsFunc describes the behavior when the
// LockfileDependents method of the parent MockStore instance is invoked.
type StoreLockfileDependentsFunc struct {
	defaultHook func(context.Context, string, string) ([]api.RepoCommit, error)
	hooks       []func(context.Context, string, string) ([]api.RepoCommit, error)
	history     []StoreLockfileDependentsFuncCall
	mutex       sync.Mutex
}

// LockfileDependents delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) LockfileDependents(v0 context.Context, v1 string, v2 string) ([]api.RepoCommit, error) {
	r0, r1 := m.LockfileDependentsFunc.nextHook()(v0, v1, v2)
	m.LockfileDependentsFunc.appendCall(StoreLockfileDependentsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the LockfileDependents
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreLockfileDependentsFunc) SetDefaultHook(hook func(context.Context, string, string) ([]api.RepoCommit, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LockfileDependents method of the parent MockStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StoreLockfileDependentsFunc) PushHook(hook func(context.Context, string, string) ([]api.RepoCommit, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreLockfileDependentsFunc) SetDefaultReturn(r0 []api.RepoCommit, r1 error) {
	f.SetDefaultHook(func(context.Context, string, string) ([]api.RepoCommit, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreLockfileDependentsFunc) PushReturn(r0 []api.RepoCommit, r1 error) {
	f.PushHook(func(context.Context, string, string) ([]api.RepoCommit, error) {
		return r0, r1
	})
}

func (f *StoreLockfileDependentsFunc) nextHook() func(context.Context, string, string) ([]api.RepoCommit, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreLockfileDependentsFunc) appendCall(r0 StoreLockfileDependentsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreLockfileDependentsFuncCall objects
// describing the invocations of this function.
func (f *StoreLockfileDependentsFunc) History() []StoreLockfileDependentsFuncCall {
	f.mutex.Lock()
	history := make([]StoreLockfileDependentsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreLockfileDependentsFuncCall is an object that describes an invocation
// of method LockfileDependents on an instance of MockStore.
type StoreLockfileDependentsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []api.RepoCommit
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreLockfileDependentsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreLockfileDependentsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StorePreciseDependenciesFunc describes the behavior when the
// PreciseDependencies method of the parent MockStore instance is invoked.
type StorePreciseDependenciesFunc struct {
	defaultHook func(context.Context, string, string) (map[api.RepoName]types.RevSpecSet, error)
	hooks       []func(context.Context, string, string) (map[api.RepoName]types.RevSpecSet, error)
	history     []StorePreciseDependenciesFuncCall
	mutex       sync.Mutex
}

// PreciseDependencies delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) PreciseDependencies(v0 context.Context, v1 string, v2 string) (map[api.RepoName]types.RevSpecSet, error) {
	r0, r1 := m.PreciseDependenciesFunc.nextHook()(v0, v1, v2)
	m.PreciseDependenciesFunc.appendCall(StorePreciseDependenciesFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the PreciseDependencies
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StorePreciseDependenciesFunc) SetDefaultHook(hook func(context.Context, string, string) (map[api.RepoName]types.RevSpecSet, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PreciseDependencies method of the parent MockStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StorePreciseDependenciesFunc) PushHook(hook func(context.Context, string, string) (map[api.RepoName]types.RevSpecSet, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorePreciseDependenciesFunc) SetDefaultReturn(r0 map[api.RepoName]types.RevSpecSet, r1 error) {
	f.SetDefaultHook(func(context.Context, string, string) (map[api.RepoName]types.RevSpecSet, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorePreciseDependenciesFunc) PushReturn(r0 map[api.RepoName]types.RevSpecSet, r1 error) {
	f.PushHook(func(context.Context, string, string) (map[api.RepoName]types.RevSpecSet, error) {
		return r0, r1
	})
}

func (f *StorePreciseDependenciesFunc) nextHook() func(context.Context, string, string) (map[api.RepoName]types.RevSpecSet, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorePreciseDependenciesFunc) appendCall(r0 StorePreciseDependenciesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StorePreciseDependenciesFuncCall objects
// describing the invocations of this function.
func (f *StorePreciseDependenciesFunc) History() []StorePreciseDependenciesFuncCall {
	f.mutex.Lock()
	history := make([]StorePreciseDependenciesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorePreciseDependenciesFuncCall is an object that describes an
// invocation of method PreciseDependencies on an instance of MockStore.
type StorePreciseDependenciesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[api.RepoName]types.RevSpecSet
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorePreciseDependenciesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorePreciseDependenciesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StorePreciseDependentsFunc describes the behavior when the
// PreciseDependents method of the parent MockStore instance is invoked.
type StorePreciseDependentsFunc struct {
	defaultHook func(context.Context, string, string) (map[api.RepoName]types.RevSpecSet, error)
	hooks       []func(context.Context, string, string) (map[api.RepoName]types.RevSpecSet, error)
	history     []StorePreciseDependentsFuncCall
	mutex       sync.Mutex
}

// PreciseDependents delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) PreciseDependents(v0 context.Context, v1 string, v2 string) (map[api.RepoName]types.RevSpecSet, error) {
	r0, r1 := m.PreciseDependentsFunc.nextHook()(v0, v1, v2)
	m.PreciseDependentsFunc.appendCall(StorePreciseDependentsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the PreciseDependents
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StorePreciseDependentsFunc) SetDefaultHook(hook func(context.Context, string, string) (map[api.RepoName]types.RevSpecSet, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PreciseDependents method of the parent MockStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StorePreciseDependentsFunc) PushHook(hook func(context.Context, string, string) (map[api.RepoName]types.RevSpecSet, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorePreciseDependentsFunc) SetDefaultReturn(r0 map[api.RepoName]types.RevSpecSet, r1 error) {
	f.SetDefaultHook(func(context.Context, string, string) (map[api.RepoName]types.RevSpecSet, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorePreciseDependentsFunc) PushReturn(r0 map[api.RepoName]types.RevSpecSet, r1 error) {
	f.PushHook(func(context.Context, string, string) (map[api.RepoName]types.RevSpecSet, error) {
		return r0, r1
	})
}

func (f *StorePreciseDependentsFunc) nextHook() func(context.Context, string, string) (map[api.RepoName]types.RevSpecSet, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorePreciseDependentsFunc) appendCall(r0 StorePreciseDependentsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StorePreciseDependentsFuncCall objects
// describing the invocations of this function.
func (f *StorePreciseDependentsFunc) History() []StorePreciseDependentsFuncCall {
	f.mutex.Lock()
	history := make([]StorePreciseDependentsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorePreciseDependentsFuncCall is an object that describes an invocation
// of method PreciseDependents on an instance of MockStore.
type StorePreciseDependentsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[api.RepoName]types.RevSpecSet
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorePreciseDependentsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorePreciseDependentsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreSelectRepoRevisionsToResolveFunc describes the behavior when the
// SelectRepoRevisionsToResolve method of the parent MockStore instance is
// invoked.
type StoreSelectRepoRevisionsToResolveFunc struct {
	defaultHook func(context.Context, int, time.Duration) (map[string][]string, error)
	hooks       []func(context.Context, int, time.Duration) (map[string][]string, error)
	history     []StoreSelectRepoRevisionsToResolveFuncCall
	mutex       sync.Mutex
}

// SelectRepoRevisionsToResolve delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockStore) SelectRepoRevisionsToResolve(v0 context.Context, v1 int, v2 time.Duration) (map[string][]string, error) {
	r0, r1 := m.SelectRepoRevisionsToResolveFunc.nextHook()(v0, v1, v2)
	m.SelectRepoRevisionsToResolveFunc.appendCall(StoreSelectRepoRevisionsToResolveFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// SelectRepoRevisionsToResolve method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreSelectRepoRevisionsToResolveFunc) SetDefaultHook(hook func(context.Context, int, time.Duration) (map[string][]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SelectRepoRevisionsToResolve method of the parent MockStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StoreSelectRepoRevisionsToResolveFunc) PushHook(hook func(context.Context, int, time.Duration) (map[string][]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreSelectRepoRevisionsToResolveFunc) SetDefaultReturn(r0 map[string][]string, r1 error) {
	f.SetDefaultHook(func(context.Context, int, time.Duration) (map[string][]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreSelectRepoRevisionsToResolveFunc) PushReturn(r0 map[string][]string, r1 error) {
	f.PushHook(func(context.Context, int, time.Duration) (map[string][]string, error) {
		return r0, r1
	})
}

func (f *StoreSelectRepoRevisionsToResolveFunc) nextHook() func(context.Context, int, time.Duration) (map[string][]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreSelectRepoRevisionsToResolveFunc) appendCall(r0 StoreSelectRepoRevisionsToResolveFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreSelectRepoRevisionsToResolveFuncCall
// objects describing the invocations of this function.
func (f *StoreSelectRepoRevisionsToResolveFunc) History() []StoreSelectRepoRevisionsToResolveFuncCall {
	f.mutex.Lock()
	history := make([]StoreSelectRepoRevisionsToResolveFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreSelectRepoRevisionsToResolveFuncCall is an object that describes an
// invocation of method SelectRepoRevisionsToResolve on an instance of
// MockStore.
type StoreSelectRepoRevisionsToResolveFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Duration
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[string][]string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreSelectRepoRevisionsToResolveFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreSelectRepoRevisionsToResolveFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreUpdateResolvedRevisionsFunc describes the behavior when the
// UpdateResolvedRevisions method of the parent MockStore instance is
// invoked.
type StoreUpdateResolvedRevisionsFunc struct {
	defaultHook func(context.Context, map[string]map[string]string) error
	hooks       []func(context.Context, map[string]map[string]string) error
	history     []StoreUpdateResolvedRevisionsFuncCall
	mutex       sync.Mutex
}

// UpdateResolvedRevisions delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockStore) UpdateResolvedRevisions(v0 context.Context, v1 map[string]map[string]string) error {
	r0 := m.UpdateResolvedRevisionsFunc.nextHook()(v0, v1)
	m.UpdateResolvedRevisionsFunc.appendCall(StoreUpdateResolvedRevisionsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// UpdateResolvedRevisions method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreUpdateResolvedRevisionsFunc) SetDefaultHook(hook func(context.Context, map[string]map[string]string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateResolvedRevisions method of the parent MockStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *StoreUpdateResolvedRevisionsFunc) PushHook(hook func(context.Context, map[string]map[string]string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreUpdateResolvedRevisionsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, map[string]map[string]string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreUpdateResolvedRevisionsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, map[string]map[string]string) error {
		return r0
	})
}

func (f *StoreUpdateResolvedRevisionsFunc) nextHook() func(context.Context, map[string]map[string]string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreUpdateResolvedRevisionsFunc) appendCall(r0 StoreUpdateResolvedRevisionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreUpdateResolvedRevisionsFuncCall
// objects describing the invocations of this function.
func (f *StoreUpdateResolvedRevisionsFunc) History() []StoreUpdateResolvedRevisionsFuncCall {
	f.mutex.Lock()
	history := make([]StoreUpdateResolvedRevisionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreUpdateResolvedRevisionsFuncCall is an object that describes an
// invocation of method UpdateResolvedRevisions on an instance of MockStore.
type StoreUpdateResolvedRevisionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 map[string]map[string]string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreUpdateResolvedRevisionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreUpdateResolvedRevisionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreUpsertDependencyReposFunc describes the behavior when the
// UpsertDependencyRepos method of the parent MockStore instance is invoked.
type StoreUpsertDependencyReposFunc struct {
	defaultHook func(context.Context, []shared.Repo) ([]shared.Repo, error)
	hooks       []func(context.Context, []shared.Repo) ([]shared.Repo, error)
	history     []StoreUpsertDependencyReposFuncCall
	mutex       sync.Mutex
}

// UpsertDependencyRepos delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockStore) UpsertDependencyRepos(v0 context.Context, v1 []shared.Repo) ([]shared.Repo, error) {
	r0, r1 := m.UpsertDependencyReposFunc.nextHook()(v0, v1)
	m.UpsertDependencyReposFunc.appendCall(StoreUpsertDependencyReposFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// UpsertDependencyRepos method of the parent MockStore instance is invoked
// and the hook queue is empty.
func (f *StoreUpsertDependencyReposFunc) SetDefaultHook(hook func(context.Context, []shared.Repo) ([]shared.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpsertDependencyRepos method of the parent MockStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StoreUpsertDependencyReposFunc) PushHook(hook func(context.Context, []shared.Repo) ([]shared.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreUpsertDependencyReposFunc) SetDefaultReturn(r0 []shared.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, []shared.Repo) ([]shared.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreUpsertDependencyReposFunc) PushReturn(r0 []shared.Repo, r1 error) {
	f.PushHook(func(context.Context, []shared.Repo) ([]shared.Repo, error) {
		return r0, r1
	})
}

func (f *StoreUpsertDependencyReposFunc) nextHook() func(context.Context, []shared.Repo) ([]shared.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreUpsertDependencyReposFunc) appendCall(r0 StoreUpsertDependencyReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreUpsertDependencyReposFuncCall objects
// describing the invocations of this function.
func (f *StoreUpsertDependencyReposFunc) History() []StoreUpsertDependencyReposFuncCall {
	f.mutex.Lock()
	history := make([]StoreUpsertDependencyReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreUpsertDependencyReposFuncCall is an object that describes an
// invocation of method UpsertDependencyRepos on an instance of MockStore.
type StoreUpsertDependencyReposFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []shared.Repo
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreUpsertDependencyReposFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreUpsertDependencyReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreUpsertLockfileGraphFunc describes the behavior when the
// UpsertLockfileGraph method of the parent MockStore instance is invoked.
type StoreUpsertLockfileGraphFunc struct {
	defaultHook func(context.Context, string, string, string, []shared.PackageDependency, shared.DependencyGraph) error
	hooks       []func(context.Context, string, string, string, []shared.PackageDependency, shared.DependencyGraph) error
	history     []StoreUpsertLockfileGraphFuncCall
	mutex       sync.Mutex
}

// UpsertLockfileGraph delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) UpsertLockfileGraph(v0 context.Context, v1 string, v2 string, v3 string, v4 []shared.PackageDependency, v5 shared.DependencyGraph) error {
	r0 := m.UpsertLockfileGraphFunc.nextHook()(v0, v1, v2, v3, v4, v5)
	m.UpsertLockfileGraphFunc.appendCall(StoreUpsertLockfileGraphFuncCall{v0, v1, v2, v3, v4, v5, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UpsertLockfileGraph
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreUpsertLockfileGraphFunc) SetDefaultHook(hook func(context.Context, string, string, string, []shared.PackageDependency, shared.DependencyGraph) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpsertLockfileGraph method of the parent MockStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StoreUpsertLockfileGraphFunc) PushHook(hook func(context.Context, string, string, string, []shared.PackageDependency, shared.DependencyGraph) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreUpsertLockfileGraphFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string, string, string, []shared.PackageDependency, shared.DependencyGraph) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreUpsertLockfileGraphFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string, string, string, []shared.PackageDependency, shared.DependencyGraph) error {
		return r0
	})
}

func (f *StoreUpsertLockfileGraphFunc) nextHook() func(context.Context, string, string, string, []shared.PackageDependency, shared.DependencyGraph) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreUpsertLockfileGraphFunc) appendCall(r0 StoreUpsertLockfileGraphFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreUpsertLockfileGraphFuncCall objects
// describing the invocations of this function.
func (f *StoreUpsertLockfileGraphFunc) History() []StoreUpsertLockfileGraphFuncCall {
	f.mutex.Lock()
	history := make([]StoreUpsertLockfileGraphFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreUpsertLockfileGraphFuncCall is an object that describes an
// invocation of method UpsertLockfileGraph on an instance of MockStore.
type StoreUpsertLockfileGraphFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 []shared.PackageDependency
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 shared.DependencyGraph
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreUpsertLockfileGraphFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreUpsertLockfileGraphFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
