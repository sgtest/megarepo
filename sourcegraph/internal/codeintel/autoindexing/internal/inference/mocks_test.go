// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package inference

import (
	"context"
	"io"
	"io/fs"
	"sync"

	api "github.com/sourcegraph/sourcegraph/internal/api"
	gitserver "github.com/sourcegraph/sourcegraph/internal/gitserver"
	luasandbox "github.com/sourcegraph/sourcegraph/internal/luasandbox"
)

// MockGitService is a mock implementation of the GitService interface (from
// the package
// github.com/sourcegraph/sourcegraph/internal/codeintel/autoindexing/internal/inference)
// used for unit testing.
type MockGitService struct {
	// ArchiveFunc is an instance of a mock function object controlling the
	// behavior of the method Archive.
	ArchiveFunc *GitServiceArchiveFunc
	// ReadDirFunc is an instance of a mock function object controlling the
	// behavior of the method ReadDir.
	ReadDirFunc *GitServiceReadDirFunc
}

// NewMockGitService creates a new mock of the GitService interface. All
// methods return zero values for all results, unless overwritten.
func NewMockGitService() *MockGitService {
	return &MockGitService{
		ArchiveFunc: &GitServiceArchiveFunc{
			defaultHook: func(context.Context, api.RepoName, gitserver.ArchiveOptions) (r0 io.ReadCloser, r1 error) {
				return
			},
		},
		ReadDirFunc: &GitServiceReadDirFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID, string, bool) (r0 []fs.FileInfo, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockGitService creates a new mock of the GitService interface.
// All methods panic on invocation, unless overwritten.
func NewStrictMockGitService() *MockGitService {
	return &MockGitService{
		ArchiveFunc: &GitServiceArchiveFunc{
			defaultHook: func(context.Context, api.RepoName, gitserver.ArchiveOptions) (io.ReadCloser, error) {
				panic("unexpected invocation of MockGitService.Archive")
			},
		},
		ReadDirFunc: &GitServiceReadDirFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID, string, bool) ([]fs.FileInfo, error) {
				panic("unexpected invocation of MockGitService.ReadDir")
			},
		},
	}
}

// NewMockGitServiceFrom creates a new mock of the MockGitService interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockGitServiceFrom(i GitService) *MockGitService {
	return &MockGitService{
		ArchiveFunc: &GitServiceArchiveFunc{
			defaultHook: i.Archive,
		},
		ReadDirFunc: &GitServiceReadDirFunc{
			defaultHook: i.ReadDir,
		},
	}
}

// GitServiceArchiveFunc describes the behavior when the Archive method of
// the parent MockGitService instance is invoked.
type GitServiceArchiveFunc struct {
	defaultHook func(context.Context, api.RepoName, gitserver.ArchiveOptions) (io.ReadCloser, error)
	hooks       []func(context.Context, api.RepoName, gitserver.ArchiveOptions) (io.ReadCloser, error)
	history     []GitServiceArchiveFuncCall
	mutex       sync.Mutex
}

// Archive delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitService) Archive(v0 context.Context, v1 api.RepoName, v2 gitserver.ArchiveOptions) (io.ReadCloser, error) {
	r0, r1 := m.ArchiveFunc.nextHook()(v0, v1, v2)
	m.ArchiveFunc.appendCall(GitServiceArchiveFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Archive method of
// the parent MockGitService instance is invoked and the hook queue is
// empty.
func (f *GitServiceArchiveFunc) SetDefaultHook(hook func(context.Context, api.RepoName, gitserver.ArchiveOptions) (io.ReadCloser, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Archive method of the parent MockGitService instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GitServiceArchiveFunc) PushHook(hook func(context.Context, api.RepoName, gitserver.ArchiveOptions) (io.ReadCloser, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitServiceArchiveFunc) SetDefaultReturn(r0 io.ReadCloser, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, gitserver.ArchiveOptions) (io.ReadCloser, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitServiceArchiveFunc) PushReturn(r0 io.ReadCloser, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, gitserver.ArchiveOptions) (io.ReadCloser, error) {
		return r0, r1
	})
}

func (f *GitServiceArchiveFunc) nextHook() func(context.Context, api.RepoName, gitserver.ArchiveOptions) (io.ReadCloser, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitServiceArchiveFunc) appendCall(r0 GitServiceArchiveFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitServiceArchiveFuncCall objects
// describing the invocations of this function.
func (f *GitServiceArchiveFunc) History() []GitServiceArchiveFuncCall {
	f.mutex.Lock()
	history := make([]GitServiceArchiveFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitServiceArchiveFuncCall is an object that describes an invocation of
// method Archive on an instance of MockGitService.
type GitServiceArchiveFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 gitserver.ArchiveOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 io.ReadCloser
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitServiceArchiveFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitServiceArchiveFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitServiceReadDirFunc describes the behavior when the ReadDir method of
// the parent MockGitService instance is invoked.
type GitServiceReadDirFunc struct {
	defaultHook func(context.Context, api.RepoName, api.CommitID, string, bool) ([]fs.FileInfo, error)
	hooks       []func(context.Context, api.RepoName, api.CommitID, string, bool) ([]fs.FileInfo, error)
	history     []GitServiceReadDirFuncCall
	mutex       sync.Mutex
}

// ReadDir delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitService) ReadDir(v0 context.Context, v1 api.RepoName, v2 api.CommitID, v3 string, v4 bool) ([]fs.FileInfo, error) {
	r0, r1 := m.ReadDirFunc.nextHook()(v0, v1, v2, v3, v4)
	m.ReadDirFunc.appendCall(GitServiceReadDirFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ReadDir method of
// the parent MockGitService instance is invoked and the hook queue is
// empty.
func (f *GitServiceReadDirFunc) SetDefaultHook(hook func(context.Context, api.RepoName, api.CommitID, string, bool) ([]fs.FileInfo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReadDir method of the parent MockGitService instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GitServiceReadDirFunc) PushHook(hook func(context.Context, api.RepoName, api.CommitID, string, bool) ([]fs.FileInfo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitServiceReadDirFunc) SetDefaultReturn(r0 []fs.FileInfo, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, api.CommitID, string, bool) ([]fs.FileInfo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitServiceReadDirFunc) PushReturn(r0 []fs.FileInfo, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, api.CommitID, string, bool) ([]fs.FileInfo, error) {
		return r0, r1
	})
}

func (f *GitServiceReadDirFunc) nextHook() func(context.Context, api.RepoName, api.CommitID, string, bool) ([]fs.FileInfo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitServiceReadDirFunc) appendCall(r0 GitServiceReadDirFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitServiceReadDirFuncCall objects
// describing the invocations of this function.
func (f *GitServiceReadDirFunc) History() []GitServiceReadDirFuncCall {
	f.mutex.Lock()
	history := make([]GitServiceReadDirFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitServiceReadDirFuncCall is an object that describes an invocation of
// method ReadDir on an instance of MockGitService.
type GitServiceReadDirFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.CommitID
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []fs.FileInfo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitServiceReadDirFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitServiceReadDirFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockSandboxService is a mock implementation of the SandboxService
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/codeintel/autoindexing/internal/inference)
// used for unit testing.
type MockSandboxService struct {
	// CreateSandboxFunc is an instance of a mock function object
	// controlling the behavior of the method CreateSandbox.
	CreateSandboxFunc *SandboxServiceCreateSandboxFunc
}

// NewMockSandboxService creates a new mock of the SandboxService interface.
// All methods return zero values for all results, unless overwritten.
func NewMockSandboxService() *MockSandboxService {
	return &MockSandboxService{
		CreateSandboxFunc: &SandboxServiceCreateSandboxFunc{
			defaultHook: func(context.Context, luasandbox.CreateOptions) (r0 *luasandbox.Sandbox, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockSandboxService creates a new mock of the SandboxService
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockSandboxService() *MockSandboxService {
	return &MockSandboxService{
		CreateSandboxFunc: &SandboxServiceCreateSandboxFunc{
			defaultHook: func(context.Context, luasandbox.CreateOptions) (*luasandbox.Sandbox, error) {
				panic("unexpected invocation of MockSandboxService.CreateSandbox")
			},
		},
	}
}

// NewMockSandboxServiceFrom creates a new mock of the MockSandboxService
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockSandboxServiceFrom(i SandboxService) *MockSandboxService {
	return &MockSandboxService{
		CreateSandboxFunc: &SandboxServiceCreateSandboxFunc{
			defaultHook: i.CreateSandbox,
		},
	}
}

// SandboxServiceCreateSandboxFunc describes the behavior when the
// CreateSandbox method of the parent MockSandboxService instance is
// invoked.
type SandboxServiceCreateSandboxFunc struct {
	defaultHook func(context.Context, luasandbox.CreateOptions) (*luasandbox.Sandbox, error)
	hooks       []func(context.Context, luasandbox.CreateOptions) (*luasandbox.Sandbox, error)
	history     []SandboxServiceCreateSandboxFuncCall
	mutex       sync.Mutex
}

// CreateSandbox delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockSandboxService) CreateSandbox(v0 context.Context, v1 luasandbox.CreateOptions) (*luasandbox.Sandbox, error) {
	r0, r1 := m.CreateSandboxFunc.nextHook()(v0, v1)
	m.CreateSandboxFunc.appendCall(SandboxServiceCreateSandboxFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateSandbox method
// of the parent MockSandboxService instance is invoked and the hook queue
// is empty.
func (f *SandboxServiceCreateSandboxFunc) SetDefaultHook(hook func(context.Context, luasandbox.CreateOptions) (*luasandbox.Sandbox, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateSandbox method of the parent MockSandboxService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *SandboxServiceCreateSandboxFunc) PushHook(hook func(context.Context, luasandbox.CreateOptions) (*luasandbox.Sandbox, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SandboxServiceCreateSandboxFunc) SetDefaultReturn(r0 *luasandbox.Sandbox, r1 error) {
	f.SetDefaultHook(func(context.Context, luasandbox.CreateOptions) (*luasandbox.Sandbox, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SandboxServiceCreateSandboxFunc) PushReturn(r0 *luasandbox.Sandbox, r1 error) {
	f.PushHook(func(context.Context, luasandbox.CreateOptions) (*luasandbox.Sandbox, error) {
		return r0, r1
	})
}

func (f *SandboxServiceCreateSandboxFunc) nextHook() func(context.Context, luasandbox.CreateOptions) (*luasandbox.Sandbox, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SandboxServiceCreateSandboxFunc) appendCall(r0 SandboxServiceCreateSandboxFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SandboxServiceCreateSandboxFuncCall objects
// describing the invocations of this function.
func (f *SandboxServiceCreateSandboxFunc) History() []SandboxServiceCreateSandboxFuncCall {
	f.mutex.Lock()
	history := make([]SandboxServiceCreateSandboxFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SandboxServiceCreateSandboxFuncCall is an object that describes an
// invocation of method CreateSandbox on an instance of MockSandboxService.
type SandboxServiceCreateSandboxFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 luasandbox.CreateOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *luasandbox.Sandbox
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SandboxServiceCreateSandboxFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SandboxServiceCreateSandboxFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
