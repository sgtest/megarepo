// Code generated by go-mockgen 1.1.4; DO NOT EDIT.

package lockfiles

import (
	"context"
	"io"
	"sync"

	api "github.com/sourcegraph/sourcegraph/internal/api"
	gitserver "github.com/sourcegraph/sourcegraph/internal/gitserver"
)

// MockArchiveStreamer is a mock implementation of the ArchiveStreamer
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/codeintel/lockfiles) used for
// unit testing.
type MockArchiveStreamer struct {
	// StreamArchiveFunc is an instance of a mock function object
	// controlling the behavior of the method StreamArchive.
	StreamArchiveFunc *ArchiveStreamerStreamArchiveFunc
}

// NewMockArchiveStreamer creates a new mock of the ArchiveStreamer
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockArchiveStreamer() *MockArchiveStreamer {
	return &MockArchiveStreamer{
		StreamArchiveFunc: &ArchiveStreamerStreamArchiveFunc{
			defaultHook: func(context.Context, api.RepoName, gitserver.ArchiveOptions) (io.ReadCloser, error) {
				return nil, nil
			},
		},
	}
}

// NewStrictMockArchiveStreamer creates a new mock of the ArchiveStreamer
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockArchiveStreamer() *MockArchiveStreamer {
	return &MockArchiveStreamer{
		StreamArchiveFunc: &ArchiveStreamerStreamArchiveFunc{
			defaultHook: func(context.Context, api.RepoName, gitserver.ArchiveOptions) (io.ReadCloser, error) {
				panic("unexpected invocation of MockArchiveStreamer.StreamArchive")
			},
		},
	}
}

// NewMockArchiveStreamerFrom creates a new mock of the MockArchiveStreamer
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockArchiveStreamerFrom(i ArchiveStreamer) *MockArchiveStreamer {
	return &MockArchiveStreamer{
		StreamArchiveFunc: &ArchiveStreamerStreamArchiveFunc{
			defaultHook: i.StreamArchive,
		},
	}
}

// ArchiveStreamerStreamArchiveFunc describes the behavior when the
// StreamArchive method of the parent MockArchiveStreamer instance is
// invoked.
type ArchiveStreamerStreamArchiveFunc struct {
	defaultHook func(context.Context, api.RepoName, gitserver.ArchiveOptions) (io.ReadCloser, error)
	hooks       []func(context.Context, api.RepoName, gitserver.ArchiveOptions) (io.ReadCloser, error)
	history     []ArchiveStreamerStreamArchiveFuncCall
	mutex       sync.Mutex
}

// StreamArchive delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockArchiveStreamer) StreamArchive(v0 context.Context, v1 api.RepoName, v2 gitserver.ArchiveOptions) (io.ReadCloser, error) {
	r0, r1 := m.StreamArchiveFunc.nextHook()(v0, v1, v2)
	m.StreamArchiveFunc.appendCall(ArchiveStreamerStreamArchiveFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the StreamArchive method
// of the parent MockArchiveStreamer instance is invoked and the hook queue
// is empty.
func (f *ArchiveStreamerStreamArchiveFunc) SetDefaultHook(hook func(context.Context, api.RepoName, gitserver.ArchiveOptions) (io.ReadCloser, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// StreamArchive method of the parent MockArchiveStreamer instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ArchiveStreamerStreamArchiveFunc) PushHook(hook func(context.Context, api.RepoName, gitserver.ArchiveOptions) (io.ReadCloser, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ArchiveStreamerStreamArchiveFunc) SetDefaultReturn(r0 io.ReadCloser, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, gitserver.ArchiveOptions) (io.ReadCloser, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ArchiveStreamerStreamArchiveFunc) PushReturn(r0 io.ReadCloser, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, gitserver.ArchiveOptions) (io.ReadCloser, error) {
		return r0, r1
	})
}

func (f *ArchiveStreamerStreamArchiveFunc) nextHook() func(context.Context, api.RepoName, gitserver.ArchiveOptions) (io.ReadCloser, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ArchiveStreamerStreamArchiveFunc) appendCall(r0 ArchiveStreamerStreamArchiveFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ArchiveStreamerStreamArchiveFuncCall
// objects describing the invocations of this function.
func (f *ArchiveStreamerStreamArchiveFunc) History() []ArchiveStreamerStreamArchiveFuncCall {
	f.mutex.Lock()
	history := make([]ArchiveStreamerStreamArchiveFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ArchiveStreamerStreamArchiveFuncCall is an object that describes an
// invocation of method StreamArchive on an instance of MockArchiveStreamer.
type ArchiveStreamerStreamArchiveFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 gitserver.ArchiveOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 io.ReadCloser
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ArchiveStreamerStreamArchiveFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ArchiveStreamerStreamArchiveFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
