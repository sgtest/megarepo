// Code generated by github.com/efritz/go-mockgen 0.1.0; DO NOT EDIT.

package mocks

import (
	"context"
	types "github.com/sourcegraph/sourcegraph/internal/codeintel/bundles/types"
	db "github.com/sourcegraph/sourcegraph/internal/codeintel/db"
	"sync"
	"time"
)

// MockDB is a mock impelementation of the DB interface (from the package
// github.com/sourcegraph/sourcegraph/internal/codeintel/db) used for unit
// testing.
type MockDB struct {
	// AddUploadPartFunc is an instance of a mock function object
	// controlling the behavior of the method AddUploadPart.
	AddUploadPartFunc *DBAddUploadPartFunc
	// DeleteOldestDumpFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteOldestDump.
	DeleteOldestDumpFunc *DBDeleteOldestDumpFunc
	// DeleteOverlappingDumpsFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteOverlappingDumps.
	DeleteOverlappingDumpsFunc *DBDeleteOverlappingDumpsFunc
	// DeleteUploadByIDFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteUploadByID.
	DeleteUploadByIDFunc *DBDeleteUploadByIDFunc
	// DequeueFunc is an instance of a mock function object controlling the
	// behavior of the method Dequeue.
	DequeueFunc *DBDequeueFunc
	// DequeueIndexFunc is an instance of a mock function object controlling
	// the behavior of the method DequeueIndex.
	DequeueIndexFunc *DBDequeueIndexFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *DBDoneFunc
	// FindClosestDumpsFunc is an instance of a mock function object
	// controlling the behavior of the method FindClosestDumps.
	FindClosestDumpsFunc *DBFindClosestDumpsFunc
	// GetDumpByIDFunc is an instance of a mock function object controlling
	// the behavior of the method GetDumpByID.
	GetDumpByIDFunc *DBGetDumpByIDFunc
	// GetDumpIDsFunc is an instance of a mock function object controlling
	// the behavior of the method GetDumpIDs.
	GetDumpIDsFunc *DBGetDumpIDsFunc
	// GetIndexByIDFunc is an instance of a mock function object controlling
	// the behavior of the method GetIndexByID.
	GetIndexByIDFunc *DBGetIndexByIDFunc
	// GetPackageFunc is an instance of a mock function object controlling
	// the behavior of the method GetPackage.
	GetPackageFunc *DBGetPackageFunc
	// GetStatesFunc is an instance of a mock function object controlling
	// the behavior of the method GetStates.
	GetStatesFunc *DBGetStatesFunc
	// GetUploadByIDFunc is an instance of a mock function object
	// controlling the behavior of the method GetUploadByID.
	GetUploadByIDFunc *DBGetUploadByIDFunc
	// GetUploadsByRepoFunc is an instance of a mock function object
	// controlling the behavior of the method GetUploadsByRepo.
	GetUploadsByRepoFunc *DBGetUploadsByRepoFunc
	// HasCommitFunc is an instance of a mock function object controlling
	// the behavior of the method HasCommit.
	HasCommitFunc *DBHasCommitFunc
	// IndexQueueSizeFunc is an instance of a mock function object
	// controlling the behavior of the method IndexQueueSize.
	IndexQueueSizeFunc *DBIndexQueueSizeFunc
	// IndexableRepositoriesFunc is an instance of a mock function object
	// controlling the behavior of the method IndexableRepositories.
	IndexableRepositoriesFunc *DBIndexableRepositoriesFunc
	// InsertIndexFunc is an instance of a mock function object controlling
	// the behavior of the method InsertIndex.
	InsertIndexFunc *DBInsertIndexFunc
	// InsertUploadFunc is an instance of a mock function object controlling
	// the behavior of the method InsertUpload.
	InsertUploadFunc *DBInsertUploadFunc
	// IsQueuedFunc is an instance of a mock function object controlling the
	// behavior of the method IsQueued.
	IsQueuedFunc *DBIsQueuedFunc
	// MarkCompleteFunc is an instance of a mock function object controlling
	// the behavior of the method MarkComplete.
	MarkCompleteFunc *DBMarkCompleteFunc
	// MarkErroredFunc is an instance of a mock function object controlling
	// the behavior of the method MarkErrored.
	MarkErroredFunc *DBMarkErroredFunc
	// MarkIndexCompleteFunc is an instance of a mock function object
	// controlling the behavior of the method MarkIndexComplete.
	MarkIndexCompleteFunc *DBMarkIndexCompleteFunc
	// MarkIndexErroredFunc is an instance of a mock function object
	// controlling the behavior of the method MarkIndexErrored.
	MarkIndexErroredFunc *DBMarkIndexErroredFunc
	// MarkQueuedFunc is an instance of a mock function object controlling
	// the behavior of the method MarkQueued.
	MarkQueuedFunc *DBMarkQueuedFunc
	// PackageReferencePagerFunc is an instance of a mock function object
	// controlling the behavior of the method PackageReferencePager.
	PackageReferencePagerFunc *DBPackageReferencePagerFunc
	// QueueSizeFunc is an instance of a mock function object controlling
	// the behavior of the method QueueSize.
	QueueSizeFunc *DBQueueSizeFunc
	// RepoNameFunc is an instance of a mock function object controlling the
	// behavior of the method RepoName.
	RepoNameFunc *DBRepoNameFunc
	// RepoUsageStatisticsFunc is an instance of a mock function object
	// controlling the behavior of the method RepoUsageStatistics.
	RepoUsageStatisticsFunc *DBRepoUsageStatisticsFunc
	// ResetStalledFunc is an instance of a mock function object controlling
	// the behavior of the method ResetStalled.
	ResetStalledFunc *DBResetStalledFunc
	// ResetStalledIndexesFunc is an instance of a mock function object
	// controlling the behavior of the method ResetStalledIndexes.
	ResetStalledIndexesFunc *DBResetStalledIndexesFunc
	// RollbackToSavepointFunc is an instance of a mock function object
	// controlling the behavior of the method RollbackToSavepoint.
	RollbackToSavepointFunc *DBRollbackToSavepointFunc
	// SameRepoPagerFunc is an instance of a mock function object
	// controlling the behavior of the method SameRepoPager.
	SameRepoPagerFunc *DBSameRepoPagerFunc
	// SavepointFunc is an instance of a mock function object controlling
	// the behavior of the method Savepoint.
	SavepointFunc *DBSavepointFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *DBTransactFunc
	// UpdateCommitsFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateCommits.
	UpdateCommitsFunc *DBUpdateCommitsFunc
	// UpdateDumpsVisibleFromTipFunc is an instance of a mock function
	// object controlling the behavior of the method
	// UpdateDumpsVisibleFromTip.
	UpdateDumpsVisibleFromTipFunc *DBUpdateDumpsVisibleFromTipFunc
	// UpdateIndexableRepositoryFunc is an instance of a mock function
	// object controlling the behavior of the method
	// UpdateIndexableRepository.
	UpdateIndexableRepositoryFunc *DBUpdateIndexableRepositoryFunc
	// UpdatePackageReferencesFunc is an instance of a mock function object
	// controlling the behavior of the method UpdatePackageReferences.
	UpdatePackageReferencesFunc *DBUpdatePackageReferencesFunc
	// UpdatePackagesFunc is an instance of a mock function object
	// controlling the behavior of the method UpdatePackages.
	UpdatePackagesFunc *DBUpdatePackagesFunc
}

// NewMockDB creates a new mock of the DB interface. All methods return zero
// values for all results, unless overwritten.
func NewMockDB() *MockDB {
	return &MockDB{
		AddUploadPartFunc: &DBAddUploadPartFunc{
			defaultHook: func(context.Context, int, int) error {
				return nil
			},
		},
		DeleteOldestDumpFunc: &DBDeleteOldestDumpFunc{
			defaultHook: func(context.Context) (int, bool, error) {
				return 0, false, nil
			},
		},
		DeleteOverlappingDumpsFunc: &DBDeleteOverlappingDumpsFunc{
			defaultHook: func(context.Context, int, string, string, string) error {
				return nil
			},
		},
		DeleteUploadByIDFunc: &DBDeleteUploadByIDFunc{
			defaultHook: func(context.Context, int, db.GetTipCommitFn) (bool, error) {
				return false, nil
			},
		},
		DequeueFunc: &DBDequeueFunc{
			defaultHook: func(context.Context) (db.Upload, db.DB, bool, error) {
				return db.Upload{}, nil, false, nil
			},
		},
		DequeueIndexFunc: &DBDequeueIndexFunc{
			defaultHook: func(context.Context) (db.Index, db.DB, bool, error) {
				return db.Index{}, nil, false, nil
			},
		},
		DoneFunc: &DBDoneFunc{
			defaultHook: func(error) error {
				return nil
			},
		},
		FindClosestDumpsFunc: &DBFindClosestDumpsFunc{
			defaultHook: func(context.Context, int, string, string) ([]db.Dump, error) {
				return nil, nil
			},
		},
		GetDumpByIDFunc: &DBGetDumpByIDFunc{
			defaultHook: func(context.Context, int) (db.Dump, bool, error) {
				return db.Dump{}, false, nil
			},
		},
		GetDumpIDsFunc: &DBGetDumpIDsFunc{
			defaultHook: func(context.Context) ([]int, error) {
				return nil, nil
			},
		},
		GetIndexByIDFunc: &DBGetIndexByIDFunc{
			defaultHook: func(context.Context, int) (db.Index, bool, error) {
				return db.Index{}, false, nil
			},
		},
		GetPackageFunc: &DBGetPackageFunc{
			defaultHook: func(context.Context, string, string, string) (db.Dump, bool, error) {
				return db.Dump{}, false, nil
			},
		},
		GetStatesFunc: &DBGetStatesFunc{
			defaultHook: func(context.Context, []int) (map[int]string, error) {
				return nil, nil
			},
		},
		GetUploadByIDFunc: &DBGetUploadByIDFunc{
			defaultHook: func(context.Context, int) (db.Upload, bool, error) {
				return db.Upload{}, false, nil
			},
		},
		GetUploadsByRepoFunc: &DBGetUploadsByRepoFunc{
			defaultHook: func(context.Context, int, string, string, bool, int, int) ([]db.Upload, int, error) {
				return nil, 0, nil
			},
		},
		HasCommitFunc: &DBHasCommitFunc{
			defaultHook: func(context.Context, int, string) (bool, error) {
				return false, nil
			},
		},
		IndexQueueSizeFunc: &DBIndexQueueSizeFunc{
			defaultHook: func(context.Context) (int, error) {
				return 0, nil
			},
		},
		IndexableRepositoriesFunc: &DBIndexableRepositoriesFunc{
			defaultHook: func(context.Context, db.IndexableRepositoryQueryOptions) ([]db.IndexableRepository, error) {
				return nil, nil
			},
		},
		InsertIndexFunc: &DBInsertIndexFunc{
			defaultHook: func(context.Context, db.Index) (int, error) {
				return 0, nil
			},
		},
		InsertUploadFunc: &DBInsertUploadFunc{
			defaultHook: func(context.Context, db.Upload) (int, error) {
				return 0, nil
			},
		},
		IsQueuedFunc: &DBIsQueuedFunc{
			defaultHook: func(context.Context, int, string) (bool, error) {
				return false, nil
			},
		},
		MarkCompleteFunc: &DBMarkCompleteFunc{
			defaultHook: func(context.Context, int) error {
				return nil
			},
		},
		MarkErroredFunc: &DBMarkErroredFunc{
			defaultHook: func(context.Context, int, string, string) error {
				return nil
			},
		},
		MarkIndexCompleteFunc: &DBMarkIndexCompleteFunc{
			defaultHook: func(context.Context, int) error {
				return nil
			},
		},
		MarkIndexErroredFunc: &DBMarkIndexErroredFunc{
			defaultHook: func(context.Context, int, string, string) error {
				return nil
			},
		},
		MarkQueuedFunc: &DBMarkQueuedFunc{
			defaultHook: func(context.Context, int) error {
				return nil
			},
		},
		PackageReferencePagerFunc: &DBPackageReferencePagerFunc{
			defaultHook: func(context.Context, string, string, string, int, int) (int, db.ReferencePager, error) {
				return 0, nil, nil
			},
		},
		QueueSizeFunc: &DBQueueSizeFunc{
			defaultHook: func(context.Context) (int, error) {
				return 0, nil
			},
		},
		RepoNameFunc: &DBRepoNameFunc{
			defaultHook: func(context.Context, int) (string, error) {
				return "", nil
			},
		},
		RepoUsageStatisticsFunc: &DBRepoUsageStatisticsFunc{
			defaultHook: func(context.Context) ([]db.RepoUsageStatistics, error) {
				return nil, nil
			},
		},
		ResetStalledFunc: &DBResetStalledFunc{
			defaultHook: func(context.Context, time.Time) ([]int, error) {
				return nil, nil
			},
		},
		ResetStalledIndexesFunc: &DBResetStalledIndexesFunc{
			defaultHook: func(context.Context, time.Time) ([]int, error) {
				return nil, nil
			},
		},
		RollbackToSavepointFunc: &DBRollbackToSavepointFunc{
			defaultHook: func(context.Context, string) error {
				return nil
			},
		},
		SameRepoPagerFunc: &DBSameRepoPagerFunc{
			defaultHook: func(context.Context, int, string, string, string, string, int) (int, db.ReferencePager, error) {
				return 0, nil, nil
			},
		},
		SavepointFunc: &DBSavepointFunc{
			defaultHook: func(context.Context) (string, error) {
				return "", nil
			},
		},
		TransactFunc: &DBTransactFunc{
			defaultHook: func(context.Context) (db.DB, error) {
				return nil, nil
			},
		},
		UpdateCommitsFunc: &DBUpdateCommitsFunc{
			defaultHook: func(context.Context, int, map[string][]string) error {
				return nil
			},
		},
		UpdateDumpsVisibleFromTipFunc: &DBUpdateDumpsVisibleFromTipFunc{
			defaultHook: func(context.Context, int, string) error {
				return nil
			},
		},
		UpdateIndexableRepositoryFunc: &DBUpdateIndexableRepositoryFunc{
			defaultHook: func(context.Context, db.UpdateableIndexableRepository) error {
				return nil
			},
		},
		UpdatePackageReferencesFunc: &DBUpdatePackageReferencesFunc{
			defaultHook: func(context.Context, []types.PackageReference) error {
				return nil
			},
		},
		UpdatePackagesFunc: &DBUpdatePackagesFunc{
			defaultHook: func(context.Context, []types.Package) error {
				return nil
			},
		},
	}
}

// NewMockDBFrom creates a new mock of the MockDB interface. All methods
// delegate to the given implementation, unless overwritten.
func NewMockDBFrom(i db.DB) *MockDB {
	return &MockDB{
		AddUploadPartFunc: &DBAddUploadPartFunc{
			defaultHook: i.AddUploadPart,
		},
		DeleteOldestDumpFunc: &DBDeleteOldestDumpFunc{
			defaultHook: i.DeleteOldestDump,
		},
		DeleteOverlappingDumpsFunc: &DBDeleteOverlappingDumpsFunc{
			defaultHook: i.DeleteOverlappingDumps,
		},
		DeleteUploadByIDFunc: &DBDeleteUploadByIDFunc{
			defaultHook: i.DeleteUploadByID,
		},
		DequeueFunc: &DBDequeueFunc{
			defaultHook: i.Dequeue,
		},
		DequeueIndexFunc: &DBDequeueIndexFunc{
			defaultHook: i.DequeueIndex,
		},
		DoneFunc: &DBDoneFunc{
			defaultHook: i.Done,
		},
		FindClosestDumpsFunc: &DBFindClosestDumpsFunc{
			defaultHook: i.FindClosestDumps,
		},
		GetDumpByIDFunc: &DBGetDumpByIDFunc{
			defaultHook: i.GetDumpByID,
		},
		GetDumpIDsFunc: &DBGetDumpIDsFunc{
			defaultHook: i.GetDumpIDs,
		},
		GetIndexByIDFunc: &DBGetIndexByIDFunc{
			defaultHook: i.GetIndexByID,
		},
		GetPackageFunc: &DBGetPackageFunc{
			defaultHook: i.GetPackage,
		},
		GetStatesFunc: &DBGetStatesFunc{
			defaultHook: i.GetStates,
		},
		GetUploadByIDFunc: &DBGetUploadByIDFunc{
			defaultHook: i.GetUploadByID,
		},
		GetUploadsByRepoFunc: &DBGetUploadsByRepoFunc{
			defaultHook: i.GetUploadsByRepo,
		},
		HasCommitFunc: &DBHasCommitFunc{
			defaultHook: i.HasCommit,
		},
		IndexQueueSizeFunc: &DBIndexQueueSizeFunc{
			defaultHook: i.IndexQueueSize,
		},
		IndexableRepositoriesFunc: &DBIndexableRepositoriesFunc{
			defaultHook: i.IndexableRepositories,
		},
		InsertIndexFunc: &DBInsertIndexFunc{
			defaultHook: i.InsertIndex,
		},
		InsertUploadFunc: &DBInsertUploadFunc{
			defaultHook: i.InsertUpload,
		},
		IsQueuedFunc: &DBIsQueuedFunc{
			defaultHook: i.IsQueued,
		},
		MarkCompleteFunc: &DBMarkCompleteFunc{
			defaultHook: i.MarkComplete,
		},
		MarkErroredFunc: &DBMarkErroredFunc{
			defaultHook: i.MarkErrored,
		},
		MarkIndexCompleteFunc: &DBMarkIndexCompleteFunc{
			defaultHook: i.MarkIndexComplete,
		},
		MarkIndexErroredFunc: &DBMarkIndexErroredFunc{
			defaultHook: i.MarkIndexErrored,
		},
		MarkQueuedFunc: &DBMarkQueuedFunc{
			defaultHook: i.MarkQueued,
		},
		PackageReferencePagerFunc: &DBPackageReferencePagerFunc{
			defaultHook: i.PackageReferencePager,
		},
		QueueSizeFunc: &DBQueueSizeFunc{
			defaultHook: i.QueueSize,
		},
		RepoNameFunc: &DBRepoNameFunc{
			defaultHook: i.RepoName,
		},
		RepoUsageStatisticsFunc: &DBRepoUsageStatisticsFunc{
			defaultHook: i.RepoUsageStatistics,
		},
		ResetStalledFunc: &DBResetStalledFunc{
			defaultHook: i.ResetStalled,
		},
		ResetStalledIndexesFunc: &DBResetStalledIndexesFunc{
			defaultHook: i.ResetStalledIndexes,
		},
		RollbackToSavepointFunc: &DBRollbackToSavepointFunc{
			defaultHook: i.RollbackToSavepoint,
		},
		SameRepoPagerFunc: &DBSameRepoPagerFunc{
			defaultHook: i.SameRepoPager,
		},
		SavepointFunc: &DBSavepointFunc{
			defaultHook: i.Savepoint,
		},
		TransactFunc: &DBTransactFunc{
			defaultHook: i.Transact,
		},
		UpdateCommitsFunc: &DBUpdateCommitsFunc{
			defaultHook: i.UpdateCommits,
		},
		UpdateDumpsVisibleFromTipFunc: &DBUpdateDumpsVisibleFromTipFunc{
			defaultHook: i.UpdateDumpsVisibleFromTip,
		},
		UpdateIndexableRepositoryFunc: &DBUpdateIndexableRepositoryFunc{
			defaultHook: i.UpdateIndexableRepository,
		},
		UpdatePackageReferencesFunc: &DBUpdatePackageReferencesFunc{
			defaultHook: i.UpdatePackageReferences,
		},
		UpdatePackagesFunc: &DBUpdatePackagesFunc{
			defaultHook: i.UpdatePackages,
		},
	}
}

// DBAddUploadPartFunc describes the behavior when the AddUploadPart method
// of the parent MockDB instance is invoked.
type DBAddUploadPartFunc struct {
	defaultHook func(context.Context, int, int) error
	hooks       []func(context.Context, int, int) error
	history     []DBAddUploadPartFuncCall
	mutex       sync.Mutex
}

// AddUploadPart delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) AddUploadPart(v0 context.Context, v1 int, v2 int) error {
	r0 := m.AddUploadPartFunc.nextHook()(v0, v1, v2)
	m.AddUploadPartFunc.appendCall(DBAddUploadPartFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the AddUploadPart method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBAddUploadPartFunc) SetDefaultHook(hook func(context.Context, int, int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AddUploadPart method of the parent MockDB instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBAddUploadPartFunc) PushHook(hook func(context.Context, int, int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBAddUploadPartFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int, int) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBAddUploadPartFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int, int) error {
		return r0
	})
}

func (f *DBAddUploadPartFunc) nextHook() func(context.Context, int, int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBAddUploadPartFunc) appendCall(r0 DBAddUploadPartFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBAddUploadPartFuncCall objects describing
// the invocations of this function.
func (f *DBAddUploadPartFunc) History() []DBAddUploadPartFuncCall {
	f.mutex.Lock()
	history := make([]DBAddUploadPartFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBAddUploadPartFuncCall is an object that describes an invocation of
// method AddUploadPart on an instance of MockDB.
type DBAddUploadPartFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBAddUploadPartFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBAddUploadPartFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBDeleteOldestDumpFunc describes the behavior when the DeleteOldestDump
// method of the parent MockDB instance is invoked.
type DBDeleteOldestDumpFunc struct {
	defaultHook func(context.Context) (int, bool, error)
	hooks       []func(context.Context) (int, bool, error)
	history     []DBDeleteOldestDumpFuncCall
	mutex       sync.Mutex
}

// DeleteOldestDump delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) DeleteOldestDump(v0 context.Context) (int, bool, error) {
	r0, r1, r2 := m.DeleteOldestDumpFunc.nextHook()(v0)
	m.DeleteOldestDumpFunc.appendCall(DBDeleteOldestDumpFuncCall{v0, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the DeleteOldestDump
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBDeleteOldestDumpFunc) SetDefaultHook(hook func(context.Context) (int, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteOldestDump method of the parent MockDB instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBDeleteOldestDumpFunc) PushHook(hook func(context.Context) (int, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBDeleteOldestDumpFunc) SetDefaultReturn(r0 int, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context) (int, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBDeleteOldestDumpFunc) PushReturn(r0 int, r1 bool, r2 error) {
	f.PushHook(func(context.Context) (int, bool, error) {
		return r0, r1, r2
	})
}

func (f *DBDeleteOldestDumpFunc) nextHook() func(context.Context) (int, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBDeleteOldestDumpFunc) appendCall(r0 DBDeleteOldestDumpFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBDeleteOldestDumpFuncCall objects
// describing the invocations of this function.
func (f *DBDeleteOldestDumpFunc) History() []DBDeleteOldestDumpFuncCall {
	f.mutex.Lock()
	history := make([]DBDeleteOldestDumpFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBDeleteOldestDumpFuncCall is an object that describes an invocation of
// method DeleteOldestDump on an instance of MockDB.
type DBDeleteOldestDumpFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBDeleteOldestDumpFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBDeleteOldestDumpFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// DBDeleteOverlappingDumpsFunc describes the behavior when the
// DeleteOverlappingDumps method of the parent MockDB instance is invoked.
type DBDeleteOverlappingDumpsFunc struct {
	defaultHook func(context.Context, int, string, string, string) error
	hooks       []func(context.Context, int, string, string, string) error
	history     []DBDeleteOverlappingDumpsFuncCall
	mutex       sync.Mutex
}

// DeleteOverlappingDumps delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockDB) DeleteOverlappingDumps(v0 context.Context, v1 int, v2 string, v3 string, v4 string) error {
	r0 := m.DeleteOverlappingDumpsFunc.nextHook()(v0, v1, v2, v3, v4)
	m.DeleteOverlappingDumpsFunc.appendCall(DBDeleteOverlappingDumpsFuncCall{v0, v1, v2, v3, v4, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// DeleteOverlappingDumps method of the parent MockDB instance is invoked
// and the hook queue is empty.
func (f *DBDeleteOverlappingDumpsFunc) SetDefaultHook(hook func(context.Context, int, string, string, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteOverlappingDumps method of the parent MockDB instance inovkes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *DBDeleteOverlappingDumpsFunc) PushHook(hook func(context.Context, int, string, string, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBDeleteOverlappingDumpsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int, string, string, string) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBDeleteOverlappingDumpsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int, string, string, string) error {
		return r0
	})
}

func (f *DBDeleteOverlappingDumpsFunc) nextHook() func(context.Context, int, string, string, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBDeleteOverlappingDumpsFunc) appendCall(r0 DBDeleteOverlappingDumpsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBDeleteOverlappingDumpsFuncCall objects
// describing the invocations of this function.
func (f *DBDeleteOverlappingDumpsFunc) History() []DBDeleteOverlappingDumpsFuncCall {
	f.mutex.Lock()
	history := make([]DBDeleteOverlappingDumpsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBDeleteOverlappingDumpsFuncCall is an object that describes an
// invocation of method DeleteOverlappingDumps on an instance of MockDB.
type DBDeleteOverlappingDumpsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBDeleteOverlappingDumpsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBDeleteOverlappingDumpsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBDeleteUploadByIDFunc describes the behavior when the DeleteUploadByID
// method of the parent MockDB instance is invoked.
type DBDeleteUploadByIDFunc struct {
	defaultHook func(context.Context, int, db.GetTipCommitFn) (bool, error)
	hooks       []func(context.Context, int, db.GetTipCommitFn) (bool, error)
	history     []DBDeleteUploadByIDFuncCall
	mutex       sync.Mutex
}

// DeleteUploadByID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) DeleteUploadByID(v0 context.Context, v1 int, v2 db.GetTipCommitFn) (bool, error) {
	r0, r1 := m.DeleteUploadByIDFunc.nextHook()(v0, v1, v2)
	m.DeleteUploadByIDFunc.appendCall(DBDeleteUploadByIDFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DeleteUploadByID
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBDeleteUploadByIDFunc) SetDefaultHook(hook func(context.Context, int, db.GetTipCommitFn) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteUploadByID method of the parent MockDB instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBDeleteUploadByIDFunc) PushHook(hook func(context.Context, int, db.GetTipCommitFn) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBDeleteUploadByIDFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int, db.GetTipCommitFn) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBDeleteUploadByIDFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int, db.GetTipCommitFn) (bool, error) {
		return r0, r1
	})
}

func (f *DBDeleteUploadByIDFunc) nextHook() func(context.Context, int, db.GetTipCommitFn) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBDeleteUploadByIDFunc) appendCall(r0 DBDeleteUploadByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBDeleteUploadByIDFuncCall objects
// describing the invocations of this function.
func (f *DBDeleteUploadByIDFunc) History() []DBDeleteUploadByIDFuncCall {
	f.mutex.Lock()
	history := make([]DBDeleteUploadByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBDeleteUploadByIDFuncCall is an object that describes an invocation of
// method DeleteUploadByID on an instance of MockDB.
type DBDeleteUploadByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 db.GetTipCommitFn
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBDeleteUploadByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBDeleteUploadByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DBDequeueFunc describes the behavior when the Dequeue method of the
// parent MockDB instance is invoked.
type DBDequeueFunc struct {
	defaultHook func(context.Context) (db.Upload, db.DB, bool, error)
	hooks       []func(context.Context) (db.Upload, db.DB, bool, error)
	history     []DBDequeueFuncCall
	mutex       sync.Mutex
}

// Dequeue delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) Dequeue(v0 context.Context) (db.Upload, db.DB, bool, error) {
	r0, r1, r2, r3 := m.DequeueFunc.nextHook()(v0)
	m.DequeueFunc.appendCall(DBDequeueFuncCall{v0, r0, r1, r2, r3})
	return r0, r1, r2, r3
}

// SetDefaultHook sets function that is called when the Dequeue method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBDequeueFunc) SetDefaultHook(hook func(context.Context) (db.Upload, db.DB, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Dequeue method of the parent MockDB instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBDequeueFunc) PushHook(hook func(context.Context) (db.Upload, db.DB, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBDequeueFunc) SetDefaultReturn(r0 db.Upload, r1 db.DB, r2 bool, r3 error) {
	f.SetDefaultHook(func(context.Context) (db.Upload, db.DB, bool, error) {
		return r0, r1, r2, r3
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBDequeueFunc) PushReturn(r0 db.Upload, r1 db.DB, r2 bool, r3 error) {
	f.PushHook(func(context.Context) (db.Upload, db.DB, bool, error) {
		return r0, r1, r2, r3
	})
}

func (f *DBDequeueFunc) nextHook() func(context.Context) (db.Upload, db.DB, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBDequeueFunc) appendCall(r0 DBDequeueFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBDequeueFuncCall objects describing the
// invocations of this function.
func (f *DBDequeueFunc) History() []DBDequeueFuncCall {
	f.mutex.Lock()
	history := make([]DBDequeueFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBDequeueFuncCall is an object that describes an invocation of method
// Dequeue on an instance of MockDB.
type DBDequeueFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 db.Upload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 db.DB
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 bool
	// Result3 is the value of the 4th result returned from this method
	// invocation.
	Result3 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBDequeueFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBDequeueFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2, c.Result3}
}

// DBDequeueIndexFunc describes the behavior when the DequeueIndex method of
// the parent MockDB instance is invoked.
type DBDequeueIndexFunc struct {
	defaultHook func(context.Context) (db.Index, db.DB, bool, error)
	hooks       []func(context.Context) (db.Index, db.DB, bool, error)
	history     []DBDequeueIndexFuncCall
	mutex       sync.Mutex
}

// DequeueIndex delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) DequeueIndex(v0 context.Context) (db.Index, db.DB, bool, error) {
	r0, r1, r2, r3 := m.DequeueIndexFunc.nextHook()(v0)
	m.DequeueIndexFunc.appendCall(DBDequeueIndexFuncCall{v0, r0, r1, r2, r3})
	return r0, r1, r2, r3
}

// SetDefaultHook sets function that is called when the DequeueIndex method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBDequeueIndexFunc) SetDefaultHook(hook func(context.Context) (db.Index, db.DB, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DequeueIndex method of the parent MockDB instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBDequeueIndexFunc) PushHook(hook func(context.Context) (db.Index, db.DB, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBDequeueIndexFunc) SetDefaultReturn(r0 db.Index, r1 db.DB, r2 bool, r3 error) {
	f.SetDefaultHook(func(context.Context) (db.Index, db.DB, bool, error) {
		return r0, r1, r2, r3
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBDequeueIndexFunc) PushReturn(r0 db.Index, r1 db.DB, r2 bool, r3 error) {
	f.PushHook(func(context.Context) (db.Index, db.DB, bool, error) {
		return r0, r1, r2, r3
	})
}

func (f *DBDequeueIndexFunc) nextHook() func(context.Context) (db.Index, db.DB, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBDequeueIndexFunc) appendCall(r0 DBDequeueIndexFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBDequeueIndexFuncCall objects describing
// the invocations of this function.
func (f *DBDequeueIndexFunc) History() []DBDequeueIndexFuncCall {
	f.mutex.Lock()
	history := make([]DBDequeueIndexFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBDequeueIndexFuncCall is an object that describes an invocation of
// method DequeueIndex on an instance of MockDB.
type DBDequeueIndexFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 db.Index
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 db.DB
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 bool
	// Result3 is the value of the 4th result returned from this method
	// invocation.
	Result3 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBDequeueIndexFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBDequeueIndexFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2, c.Result3}
}

// DBDoneFunc describes the behavior when the Done method of the parent
// MockDB instance is invoked.
type DBDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []DBDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(DBDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockDB instance is invoked and the hook queue is empty.
func (f *DBDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockDB instance inovkes the hook at the front
// of the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *DBDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *DBDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBDoneFunc) appendCall(r0 DBDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBDoneFuncCall objects describing the
// invocations of this function.
func (f *DBDoneFunc) History() []DBDoneFuncCall {
	f.mutex.Lock()
	history := make([]DBDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBDoneFuncCall is an object that describes an invocation of method Done
// on an instance of MockDB.
type DBDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBFindClosestDumpsFunc describes the behavior when the FindClosestDumps
// method of the parent MockDB instance is invoked.
type DBFindClosestDumpsFunc struct {
	defaultHook func(context.Context, int, string, string) ([]db.Dump, error)
	hooks       []func(context.Context, int, string, string) ([]db.Dump, error)
	history     []DBFindClosestDumpsFuncCall
	mutex       sync.Mutex
}

// FindClosestDumps delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) FindClosestDumps(v0 context.Context, v1 int, v2 string, v3 string) ([]db.Dump, error) {
	r0, r1 := m.FindClosestDumpsFunc.nextHook()(v0, v1, v2, v3)
	m.FindClosestDumpsFunc.appendCall(DBFindClosestDumpsFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FindClosestDumps
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBFindClosestDumpsFunc) SetDefaultHook(hook func(context.Context, int, string, string) ([]db.Dump, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FindClosestDumps method of the parent MockDB instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBFindClosestDumpsFunc) PushHook(hook func(context.Context, int, string, string) ([]db.Dump, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBFindClosestDumpsFunc) SetDefaultReturn(r0 []db.Dump, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string, string) ([]db.Dump, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBFindClosestDumpsFunc) PushReturn(r0 []db.Dump, r1 error) {
	f.PushHook(func(context.Context, int, string, string) ([]db.Dump, error) {
		return r0, r1
	})
}

func (f *DBFindClosestDumpsFunc) nextHook() func(context.Context, int, string, string) ([]db.Dump, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBFindClosestDumpsFunc) appendCall(r0 DBFindClosestDumpsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBFindClosestDumpsFuncCall objects
// describing the invocations of this function.
func (f *DBFindClosestDumpsFunc) History() []DBFindClosestDumpsFuncCall {
	f.mutex.Lock()
	history := make([]DBFindClosestDumpsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBFindClosestDumpsFuncCall is an object that describes an invocation of
// method FindClosestDumps on an instance of MockDB.
type DBFindClosestDumpsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []db.Dump
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBFindClosestDumpsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBFindClosestDumpsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DBGetDumpByIDFunc describes the behavior when the GetDumpByID method of
// the parent MockDB instance is invoked.
type DBGetDumpByIDFunc struct {
	defaultHook func(context.Context, int) (db.Dump, bool, error)
	hooks       []func(context.Context, int) (db.Dump, bool, error)
	history     []DBGetDumpByIDFuncCall
	mutex       sync.Mutex
}

// GetDumpByID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) GetDumpByID(v0 context.Context, v1 int) (db.Dump, bool, error) {
	r0, r1, r2 := m.GetDumpByIDFunc.nextHook()(v0, v1)
	m.GetDumpByIDFunc.appendCall(DBGetDumpByIDFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetDumpByID method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBGetDumpByIDFunc) SetDefaultHook(hook func(context.Context, int) (db.Dump, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDumpByID method of the parent MockDB instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBGetDumpByIDFunc) PushHook(hook func(context.Context, int) (db.Dump, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBGetDumpByIDFunc) SetDefaultReturn(r0 db.Dump, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, int) (db.Dump, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBGetDumpByIDFunc) PushReturn(r0 db.Dump, r1 bool, r2 error) {
	f.PushHook(func(context.Context, int) (db.Dump, bool, error) {
		return r0, r1, r2
	})
}

func (f *DBGetDumpByIDFunc) nextHook() func(context.Context, int) (db.Dump, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBGetDumpByIDFunc) appendCall(r0 DBGetDumpByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBGetDumpByIDFuncCall objects describing
// the invocations of this function.
func (f *DBGetDumpByIDFunc) History() []DBGetDumpByIDFuncCall {
	f.mutex.Lock()
	history := make([]DBGetDumpByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBGetDumpByIDFuncCall is an object that describes an invocation of method
// GetDumpByID on an instance of MockDB.
type DBGetDumpByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 db.Dump
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBGetDumpByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBGetDumpByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// DBGetDumpIDsFunc describes the behavior when the GetDumpIDs method of the
// parent MockDB instance is invoked.
type DBGetDumpIDsFunc struct {
	defaultHook func(context.Context) ([]int, error)
	hooks       []func(context.Context) ([]int, error)
	history     []DBGetDumpIDsFuncCall
	mutex       sync.Mutex
}

// GetDumpIDs delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) GetDumpIDs(v0 context.Context) ([]int, error) {
	r0, r1 := m.GetDumpIDsFunc.nextHook()(v0)
	m.GetDumpIDsFunc.appendCall(DBGetDumpIDsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetDumpIDs method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBGetDumpIDsFunc) SetDefaultHook(hook func(context.Context) ([]int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDumpIDs method of the parent MockDB instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBGetDumpIDsFunc) PushHook(hook func(context.Context) ([]int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBGetDumpIDsFunc) SetDefaultReturn(r0 []int, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]int, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBGetDumpIDsFunc) PushReturn(r0 []int, r1 error) {
	f.PushHook(func(context.Context) ([]int, error) {
		return r0, r1
	})
}

func (f *DBGetDumpIDsFunc) nextHook() func(context.Context) ([]int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBGetDumpIDsFunc) appendCall(r0 DBGetDumpIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBGetDumpIDsFuncCall objects describing the
// invocations of this function.
func (f *DBGetDumpIDsFunc) History() []DBGetDumpIDsFuncCall {
	f.mutex.Lock()
	history := make([]DBGetDumpIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBGetDumpIDsFuncCall is an object that describes an invocation of method
// GetDumpIDs on an instance of MockDB.
type DBGetDumpIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBGetDumpIDsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBGetDumpIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DBGetIndexByIDFunc describes the behavior when the GetIndexByID method of
// the parent MockDB instance is invoked.
type DBGetIndexByIDFunc struct {
	defaultHook func(context.Context, int) (db.Index, bool, error)
	hooks       []func(context.Context, int) (db.Index, bool, error)
	history     []DBGetIndexByIDFuncCall
	mutex       sync.Mutex
}

// GetIndexByID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) GetIndexByID(v0 context.Context, v1 int) (db.Index, bool, error) {
	r0, r1, r2 := m.GetIndexByIDFunc.nextHook()(v0, v1)
	m.GetIndexByIDFunc.appendCall(DBGetIndexByIDFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetIndexByID method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBGetIndexByIDFunc) SetDefaultHook(hook func(context.Context, int) (db.Index, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetIndexByID method of the parent MockDB instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBGetIndexByIDFunc) PushHook(hook func(context.Context, int) (db.Index, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBGetIndexByIDFunc) SetDefaultReturn(r0 db.Index, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, int) (db.Index, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBGetIndexByIDFunc) PushReturn(r0 db.Index, r1 bool, r2 error) {
	f.PushHook(func(context.Context, int) (db.Index, bool, error) {
		return r0, r1, r2
	})
}

func (f *DBGetIndexByIDFunc) nextHook() func(context.Context, int) (db.Index, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBGetIndexByIDFunc) appendCall(r0 DBGetIndexByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBGetIndexByIDFuncCall objects describing
// the invocations of this function.
func (f *DBGetIndexByIDFunc) History() []DBGetIndexByIDFuncCall {
	f.mutex.Lock()
	history := make([]DBGetIndexByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBGetIndexByIDFuncCall is an object that describes an invocation of
// method GetIndexByID on an instance of MockDB.
type DBGetIndexByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 db.Index
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBGetIndexByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBGetIndexByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// DBGetPackageFunc describes the behavior when the GetPackage method of the
// parent MockDB instance is invoked.
type DBGetPackageFunc struct {
	defaultHook func(context.Context, string, string, string) (db.Dump, bool, error)
	hooks       []func(context.Context, string, string, string) (db.Dump, bool, error)
	history     []DBGetPackageFuncCall
	mutex       sync.Mutex
}

// GetPackage delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) GetPackage(v0 context.Context, v1 string, v2 string, v3 string) (db.Dump, bool, error) {
	r0, r1, r2 := m.GetPackageFunc.nextHook()(v0, v1, v2, v3)
	m.GetPackageFunc.appendCall(DBGetPackageFuncCall{v0, v1, v2, v3, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetPackage method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBGetPackageFunc) SetDefaultHook(hook func(context.Context, string, string, string) (db.Dump, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPackage method of the parent MockDB instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBGetPackageFunc) PushHook(hook func(context.Context, string, string, string) (db.Dump, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBGetPackageFunc) SetDefaultReturn(r0 db.Dump, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, string, string, string) (db.Dump, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBGetPackageFunc) PushReturn(r0 db.Dump, r1 bool, r2 error) {
	f.PushHook(func(context.Context, string, string, string) (db.Dump, bool, error) {
		return r0, r1, r2
	})
}

func (f *DBGetPackageFunc) nextHook() func(context.Context, string, string, string) (db.Dump, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBGetPackageFunc) appendCall(r0 DBGetPackageFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBGetPackageFuncCall objects describing the
// invocations of this function.
func (f *DBGetPackageFunc) History() []DBGetPackageFuncCall {
	f.mutex.Lock()
	history := make([]DBGetPackageFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBGetPackageFuncCall is an object that describes an invocation of method
// GetPackage on an instance of MockDB.
type DBGetPackageFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 db.Dump
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBGetPackageFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBGetPackageFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// DBGetStatesFunc describes the behavior when the GetStates method of the
// parent MockDB instance is invoked.
type DBGetStatesFunc struct {
	defaultHook func(context.Context, []int) (map[int]string, error)
	hooks       []func(context.Context, []int) (map[int]string, error)
	history     []DBGetStatesFuncCall
	mutex       sync.Mutex
}

// GetStates delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) GetStates(v0 context.Context, v1 []int) (map[int]string, error) {
	r0, r1 := m.GetStatesFunc.nextHook()(v0, v1)
	m.GetStatesFunc.appendCall(DBGetStatesFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetStates method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBGetStatesFunc) SetDefaultHook(hook func(context.Context, []int) (map[int]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetStates method of the parent MockDB instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBGetStatesFunc) PushHook(hook func(context.Context, []int) (map[int]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBGetStatesFunc) SetDefaultReturn(r0 map[int]string, r1 error) {
	f.SetDefaultHook(func(context.Context, []int) (map[int]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBGetStatesFunc) PushReturn(r0 map[int]string, r1 error) {
	f.PushHook(func(context.Context, []int) (map[int]string, error) {
		return r0, r1
	})
}

func (f *DBGetStatesFunc) nextHook() func(context.Context, []int) (map[int]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBGetStatesFunc) appendCall(r0 DBGetStatesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBGetStatesFuncCall objects describing the
// invocations of this function.
func (f *DBGetStatesFunc) History() []DBGetStatesFuncCall {
	f.mutex.Lock()
	history := make([]DBGetStatesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBGetStatesFuncCall is an object that describes an invocation of method
// GetStates on an instance of MockDB.
type DBGetStatesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[int]string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBGetStatesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBGetStatesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DBGetUploadByIDFunc describes the behavior when the GetUploadByID method
// of the parent MockDB instance is invoked.
type DBGetUploadByIDFunc struct {
	defaultHook func(context.Context, int) (db.Upload, bool, error)
	hooks       []func(context.Context, int) (db.Upload, bool, error)
	history     []DBGetUploadByIDFuncCall
	mutex       sync.Mutex
}

// GetUploadByID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) GetUploadByID(v0 context.Context, v1 int) (db.Upload, bool, error) {
	r0, r1, r2 := m.GetUploadByIDFunc.nextHook()(v0, v1)
	m.GetUploadByIDFunc.appendCall(DBGetUploadByIDFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetUploadByID method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBGetUploadByIDFunc) SetDefaultHook(hook func(context.Context, int) (db.Upload, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUploadByID method of the parent MockDB instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBGetUploadByIDFunc) PushHook(hook func(context.Context, int) (db.Upload, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBGetUploadByIDFunc) SetDefaultReturn(r0 db.Upload, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, int) (db.Upload, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBGetUploadByIDFunc) PushReturn(r0 db.Upload, r1 bool, r2 error) {
	f.PushHook(func(context.Context, int) (db.Upload, bool, error) {
		return r0, r1, r2
	})
}

func (f *DBGetUploadByIDFunc) nextHook() func(context.Context, int) (db.Upload, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBGetUploadByIDFunc) appendCall(r0 DBGetUploadByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBGetUploadByIDFuncCall objects describing
// the invocations of this function.
func (f *DBGetUploadByIDFunc) History() []DBGetUploadByIDFuncCall {
	f.mutex.Lock()
	history := make([]DBGetUploadByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBGetUploadByIDFuncCall is an object that describes an invocation of
// method GetUploadByID on an instance of MockDB.
type DBGetUploadByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 db.Upload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBGetUploadByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBGetUploadByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// DBGetUploadsByRepoFunc describes the behavior when the GetUploadsByRepo
// method of the parent MockDB instance is invoked.
type DBGetUploadsByRepoFunc struct {
	defaultHook func(context.Context, int, string, string, bool, int, int) ([]db.Upload, int, error)
	hooks       []func(context.Context, int, string, string, bool, int, int) ([]db.Upload, int, error)
	history     []DBGetUploadsByRepoFuncCall
	mutex       sync.Mutex
}

// GetUploadsByRepo delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) GetUploadsByRepo(v0 context.Context, v1 int, v2 string, v3 string, v4 bool, v5 int, v6 int) ([]db.Upload, int, error) {
	r0, r1, r2 := m.GetUploadsByRepoFunc.nextHook()(v0, v1, v2, v3, v4, v5, v6)
	m.GetUploadsByRepoFunc.appendCall(DBGetUploadsByRepoFuncCall{v0, v1, v2, v3, v4, v5, v6, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetUploadsByRepo
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBGetUploadsByRepoFunc) SetDefaultHook(hook func(context.Context, int, string, string, bool, int, int) ([]db.Upload, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUploadsByRepo method of the parent MockDB instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBGetUploadsByRepoFunc) PushHook(hook func(context.Context, int, string, string, bool, int, int) ([]db.Upload, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBGetUploadsByRepoFunc) SetDefaultReturn(r0 []db.Upload, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, int, string, string, bool, int, int) ([]db.Upload, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBGetUploadsByRepoFunc) PushReturn(r0 []db.Upload, r1 int, r2 error) {
	f.PushHook(func(context.Context, int, string, string, bool, int, int) ([]db.Upload, int, error) {
		return r0, r1, r2
	})
}

func (f *DBGetUploadsByRepoFunc) nextHook() func(context.Context, int, string, string, bool, int, int) ([]db.Upload, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBGetUploadsByRepoFunc) appendCall(r0 DBGetUploadsByRepoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBGetUploadsByRepoFuncCall objects
// describing the invocations of this function.
func (f *DBGetUploadsByRepoFunc) History() []DBGetUploadsByRepoFuncCall {
	f.mutex.Lock()
	history := make([]DBGetUploadsByRepoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBGetUploadsByRepoFuncCall is an object that describes an invocation of
// method GetUploadsByRepo on an instance of MockDB.
type DBGetUploadsByRepoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 bool
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 int
	// Arg6 is the value of the 7th argument passed to this method
	// invocation.
	Arg6 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []db.Upload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBGetUploadsByRepoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5, c.Arg6}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBGetUploadsByRepoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// DBHasCommitFunc describes the behavior when the HasCommit method of the
// parent MockDB instance is invoked.
type DBHasCommitFunc struct {
	defaultHook func(context.Context, int, string) (bool, error)
	hooks       []func(context.Context, int, string) (bool, error)
	history     []DBHasCommitFuncCall
	mutex       sync.Mutex
}

// HasCommit delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) HasCommit(v0 context.Context, v1 int, v2 string) (bool, error) {
	r0, r1 := m.HasCommitFunc.nextHook()(v0, v1, v2)
	m.HasCommitFunc.appendCall(DBHasCommitFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the HasCommit method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBHasCommitFunc) SetDefaultHook(hook func(context.Context, int, string) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// HasCommit method of the parent MockDB instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBHasCommitFunc) PushHook(hook func(context.Context, int, string) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBHasCommitFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBHasCommitFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int, string) (bool, error) {
		return r0, r1
	})
}

func (f *DBHasCommitFunc) nextHook() func(context.Context, int, string) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBHasCommitFunc) appendCall(r0 DBHasCommitFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBHasCommitFuncCall objects describing the
// invocations of this function.
func (f *DBHasCommitFunc) History() []DBHasCommitFuncCall {
	f.mutex.Lock()
	history := make([]DBHasCommitFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBHasCommitFuncCall is an object that describes an invocation of method
// HasCommit on an instance of MockDB.
type DBHasCommitFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBHasCommitFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBHasCommitFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DBIndexQueueSizeFunc describes the behavior when the IndexQueueSize
// method of the parent MockDB instance is invoked.
type DBIndexQueueSizeFunc struct {
	defaultHook func(context.Context) (int, error)
	hooks       []func(context.Context) (int, error)
	history     []DBIndexQueueSizeFuncCall
	mutex       sync.Mutex
}

// IndexQueueSize delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) IndexQueueSize(v0 context.Context) (int, error) {
	r0, r1 := m.IndexQueueSizeFunc.nextHook()(v0)
	m.IndexQueueSizeFunc.appendCall(DBIndexQueueSizeFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IndexQueueSize
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBIndexQueueSizeFunc) SetDefaultHook(hook func(context.Context) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IndexQueueSize method of the parent MockDB instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBIndexQueueSizeFunc) PushHook(hook func(context.Context) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBIndexQueueSizeFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBIndexQueueSizeFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

func (f *DBIndexQueueSizeFunc) nextHook() func(context.Context) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBIndexQueueSizeFunc) appendCall(r0 DBIndexQueueSizeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBIndexQueueSizeFuncCall objects describing
// the invocations of this function.
func (f *DBIndexQueueSizeFunc) History() []DBIndexQueueSizeFuncCall {
	f.mutex.Lock()
	history := make([]DBIndexQueueSizeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBIndexQueueSizeFuncCall is an object that describes an invocation of
// method IndexQueueSize on an instance of MockDB.
type DBIndexQueueSizeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBIndexQueueSizeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBIndexQueueSizeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DBIndexableRepositoriesFunc describes the behavior when the
// IndexableRepositories method of the parent MockDB instance is invoked.
type DBIndexableRepositoriesFunc struct {
	defaultHook func(context.Context, db.IndexableRepositoryQueryOptions) ([]db.IndexableRepository, error)
	hooks       []func(context.Context, db.IndexableRepositoryQueryOptions) ([]db.IndexableRepository, error)
	history     []DBIndexableRepositoriesFuncCall
	mutex       sync.Mutex
}

// IndexableRepositories delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockDB) IndexableRepositories(v0 context.Context, v1 db.IndexableRepositoryQueryOptions) ([]db.IndexableRepository, error) {
	r0, r1 := m.IndexableRepositoriesFunc.nextHook()(v0, v1)
	m.IndexableRepositoriesFunc.appendCall(DBIndexableRepositoriesFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// IndexableRepositories method of the parent MockDB instance is invoked and
// the hook queue is empty.
func (f *DBIndexableRepositoriesFunc) SetDefaultHook(hook func(context.Context, db.IndexableRepositoryQueryOptions) ([]db.IndexableRepository, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IndexableRepositories method of the parent MockDB instance inovkes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *DBIndexableRepositoriesFunc) PushHook(hook func(context.Context, db.IndexableRepositoryQueryOptions) ([]db.IndexableRepository, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBIndexableRepositoriesFunc) SetDefaultReturn(r0 []db.IndexableRepository, r1 error) {
	f.SetDefaultHook(func(context.Context, db.IndexableRepositoryQueryOptions) ([]db.IndexableRepository, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBIndexableRepositoriesFunc) PushReturn(r0 []db.IndexableRepository, r1 error) {
	f.PushHook(func(context.Context, db.IndexableRepositoryQueryOptions) ([]db.IndexableRepository, error) {
		return r0, r1
	})
}

func (f *DBIndexableRepositoriesFunc) nextHook() func(context.Context, db.IndexableRepositoryQueryOptions) ([]db.IndexableRepository, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBIndexableRepositoriesFunc) appendCall(r0 DBIndexableRepositoriesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBIndexableRepositoriesFuncCall objects
// describing the invocations of this function.
func (f *DBIndexableRepositoriesFunc) History() []DBIndexableRepositoriesFuncCall {
	f.mutex.Lock()
	history := make([]DBIndexableRepositoriesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBIndexableRepositoriesFuncCall is an object that describes an invocation
// of method IndexableRepositories on an instance of MockDB.
type DBIndexableRepositoriesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 db.IndexableRepositoryQueryOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []db.IndexableRepository
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBIndexableRepositoriesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBIndexableRepositoriesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DBInsertIndexFunc describes the behavior when the InsertIndex method of
// the parent MockDB instance is invoked.
type DBInsertIndexFunc struct {
	defaultHook func(context.Context, db.Index) (int, error)
	hooks       []func(context.Context, db.Index) (int, error)
	history     []DBInsertIndexFuncCall
	mutex       sync.Mutex
}

// InsertIndex delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) InsertIndex(v0 context.Context, v1 db.Index) (int, error) {
	r0, r1 := m.InsertIndexFunc.nextHook()(v0, v1)
	m.InsertIndexFunc.appendCall(DBInsertIndexFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the InsertIndex method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBInsertIndexFunc) SetDefaultHook(hook func(context.Context, db.Index) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// InsertIndex method of the parent MockDB instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBInsertIndexFunc) PushHook(hook func(context.Context, db.Index) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBInsertIndexFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, db.Index) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBInsertIndexFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, db.Index) (int, error) {
		return r0, r1
	})
}

func (f *DBInsertIndexFunc) nextHook() func(context.Context, db.Index) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBInsertIndexFunc) appendCall(r0 DBInsertIndexFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBInsertIndexFuncCall objects describing
// the invocations of this function.
func (f *DBInsertIndexFunc) History() []DBInsertIndexFuncCall {
	f.mutex.Lock()
	history := make([]DBInsertIndexFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBInsertIndexFuncCall is an object that describes an invocation of method
// InsertIndex on an instance of MockDB.
type DBInsertIndexFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 db.Index
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBInsertIndexFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBInsertIndexFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DBInsertUploadFunc describes the behavior when the InsertUpload method of
// the parent MockDB instance is invoked.
type DBInsertUploadFunc struct {
	defaultHook func(context.Context, db.Upload) (int, error)
	hooks       []func(context.Context, db.Upload) (int, error)
	history     []DBInsertUploadFuncCall
	mutex       sync.Mutex
}

// InsertUpload delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) InsertUpload(v0 context.Context, v1 db.Upload) (int, error) {
	r0, r1 := m.InsertUploadFunc.nextHook()(v0, v1)
	m.InsertUploadFunc.appendCall(DBInsertUploadFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the InsertUpload method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBInsertUploadFunc) SetDefaultHook(hook func(context.Context, db.Upload) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// InsertUpload method of the parent MockDB instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBInsertUploadFunc) PushHook(hook func(context.Context, db.Upload) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBInsertUploadFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, db.Upload) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBInsertUploadFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, db.Upload) (int, error) {
		return r0, r1
	})
}

func (f *DBInsertUploadFunc) nextHook() func(context.Context, db.Upload) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBInsertUploadFunc) appendCall(r0 DBInsertUploadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBInsertUploadFuncCall objects describing
// the invocations of this function.
func (f *DBInsertUploadFunc) History() []DBInsertUploadFuncCall {
	f.mutex.Lock()
	history := make([]DBInsertUploadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBInsertUploadFuncCall is an object that describes an invocation of
// method InsertUpload on an instance of MockDB.
type DBInsertUploadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 db.Upload
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBInsertUploadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBInsertUploadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DBIsQueuedFunc describes the behavior when the IsQueued method of the
// parent MockDB instance is invoked.
type DBIsQueuedFunc struct {
	defaultHook func(context.Context, int, string) (bool, error)
	hooks       []func(context.Context, int, string) (bool, error)
	history     []DBIsQueuedFuncCall
	mutex       sync.Mutex
}

// IsQueued delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) IsQueued(v0 context.Context, v1 int, v2 string) (bool, error) {
	r0, r1 := m.IsQueuedFunc.nextHook()(v0, v1, v2)
	m.IsQueuedFunc.appendCall(DBIsQueuedFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IsQueued method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBIsQueuedFunc) SetDefaultHook(hook func(context.Context, int, string) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsQueued method of the parent MockDB instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBIsQueuedFunc) PushHook(hook func(context.Context, int, string) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBIsQueuedFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBIsQueuedFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int, string) (bool, error) {
		return r0, r1
	})
}

func (f *DBIsQueuedFunc) nextHook() func(context.Context, int, string) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBIsQueuedFunc) appendCall(r0 DBIsQueuedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBIsQueuedFuncCall objects describing the
// invocations of this function.
func (f *DBIsQueuedFunc) History() []DBIsQueuedFuncCall {
	f.mutex.Lock()
	history := make([]DBIsQueuedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBIsQueuedFuncCall is an object that describes an invocation of method
// IsQueued on an instance of MockDB.
type DBIsQueuedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBIsQueuedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBIsQueuedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DBMarkCompleteFunc describes the behavior when the MarkComplete method of
// the parent MockDB instance is invoked.
type DBMarkCompleteFunc struct {
	defaultHook func(context.Context, int) error
	hooks       []func(context.Context, int) error
	history     []DBMarkCompleteFuncCall
	mutex       sync.Mutex
}

// MarkComplete delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) MarkComplete(v0 context.Context, v1 int) error {
	r0 := m.MarkCompleteFunc.nextHook()(v0, v1)
	m.MarkCompleteFunc.appendCall(DBMarkCompleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the MarkComplete method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBMarkCompleteFunc) SetDefaultHook(hook func(context.Context, int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MarkComplete method of the parent MockDB instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBMarkCompleteFunc) PushHook(hook func(context.Context, int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBMarkCompleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBMarkCompleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int) error {
		return r0
	})
}

func (f *DBMarkCompleteFunc) nextHook() func(context.Context, int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBMarkCompleteFunc) appendCall(r0 DBMarkCompleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBMarkCompleteFuncCall objects describing
// the invocations of this function.
func (f *DBMarkCompleteFunc) History() []DBMarkCompleteFuncCall {
	f.mutex.Lock()
	history := make([]DBMarkCompleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBMarkCompleteFuncCall is an object that describes an invocation of
// method MarkComplete on an instance of MockDB.
type DBMarkCompleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBMarkCompleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBMarkCompleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBMarkErroredFunc describes the behavior when the MarkErrored method of
// the parent MockDB instance is invoked.
type DBMarkErroredFunc struct {
	defaultHook func(context.Context, int, string, string) error
	hooks       []func(context.Context, int, string, string) error
	history     []DBMarkErroredFuncCall
	mutex       sync.Mutex
}

// MarkErrored delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) MarkErrored(v0 context.Context, v1 int, v2 string, v3 string) error {
	r0 := m.MarkErroredFunc.nextHook()(v0, v1, v2, v3)
	m.MarkErroredFunc.appendCall(DBMarkErroredFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the MarkErrored method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBMarkErroredFunc) SetDefaultHook(hook func(context.Context, int, string, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MarkErrored method of the parent MockDB instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBMarkErroredFunc) PushHook(hook func(context.Context, int, string, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBMarkErroredFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int, string, string) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBMarkErroredFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int, string, string) error {
		return r0
	})
}

func (f *DBMarkErroredFunc) nextHook() func(context.Context, int, string, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBMarkErroredFunc) appendCall(r0 DBMarkErroredFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBMarkErroredFuncCall objects describing
// the invocations of this function.
func (f *DBMarkErroredFunc) History() []DBMarkErroredFuncCall {
	f.mutex.Lock()
	history := make([]DBMarkErroredFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBMarkErroredFuncCall is an object that describes an invocation of method
// MarkErrored on an instance of MockDB.
type DBMarkErroredFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBMarkErroredFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBMarkErroredFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBMarkIndexCompleteFunc describes the behavior when the MarkIndexComplete
// method of the parent MockDB instance is invoked.
type DBMarkIndexCompleteFunc struct {
	defaultHook func(context.Context, int) error
	hooks       []func(context.Context, int) error
	history     []DBMarkIndexCompleteFuncCall
	mutex       sync.Mutex
}

// MarkIndexComplete delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) MarkIndexComplete(v0 context.Context, v1 int) error {
	r0 := m.MarkIndexCompleteFunc.nextHook()(v0, v1)
	m.MarkIndexCompleteFunc.appendCall(DBMarkIndexCompleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the MarkIndexComplete
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBMarkIndexCompleteFunc) SetDefaultHook(hook func(context.Context, int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MarkIndexComplete method of the parent MockDB instance inovkes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBMarkIndexCompleteFunc) PushHook(hook func(context.Context, int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBMarkIndexCompleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBMarkIndexCompleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int) error {
		return r0
	})
}

func (f *DBMarkIndexCompleteFunc) nextHook() func(context.Context, int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBMarkIndexCompleteFunc) appendCall(r0 DBMarkIndexCompleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBMarkIndexCompleteFuncCall objects
// describing the invocations of this function.
func (f *DBMarkIndexCompleteFunc) History() []DBMarkIndexCompleteFuncCall {
	f.mutex.Lock()
	history := make([]DBMarkIndexCompleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBMarkIndexCompleteFuncCall is an object that describes an invocation of
// method MarkIndexComplete on an instance of MockDB.
type DBMarkIndexCompleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBMarkIndexCompleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBMarkIndexCompleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBMarkIndexErroredFunc describes the behavior when the MarkIndexErrored
// method of the parent MockDB instance is invoked.
type DBMarkIndexErroredFunc struct {
	defaultHook func(context.Context, int, string, string) error
	hooks       []func(context.Context, int, string, string) error
	history     []DBMarkIndexErroredFuncCall
	mutex       sync.Mutex
}

// MarkIndexErrored delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) MarkIndexErrored(v0 context.Context, v1 int, v2 string, v3 string) error {
	r0 := m.MarkIndexErroredFunc.nextHook()(v0, v1, v2, v3)
	m.MarkIndexErroredFunc.appendCall(DBMarkIndexErroredFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the MarkIndexErrored
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBMarkIndexErroredFunc) SetDefaultHook(hook func(context.Context, int, string, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MarkIndexErrored method of the parent MockDB instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBMarkIndexErroredFunc) PushHook(hook func(context.Context, int, string, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBMarkIndexErroredFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int, string, string) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBMarkIndexErroredFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int, string, string) error {
		return r0
	})
}

func (f *DBMarkIndexErroredFunc) nextHook() func(context.Context, int, string, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBMarkIndexErroredFunc) appendCall(r0 DBMarkIndexErroredFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBMarkIndexErroredFuncCall objects
// describing the invocations of this function.
func (f *DBMarkIndexErroredFunc) History() []DBMarkIndexErroredFuncCall {
	f.mutex.Lock()
	history := make([]DBMarkIndexErroredFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBMarkIndexErroredFuncCall is an object that describes an invocation of
// method MarkIndexErrored on an instance of MockDB.
type DBMarkIndexErroredFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBMarkIndexErroredFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBMarkIndexErroredFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBMarkQueuedFunc describes the behavior when the MarkQueued method of the
// parent MockDB instance is invoked.
type DBMarkQueuedFunc struct {
	defaultHook func(context.Context, int) error
	hooks       []func(context.Context, int) error
	history     []DBMarkQueuedFuncCall
	mutex       sync.Mutex
}

// MarkQueued delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) MarkQueued(v0 context.Context, v1 int) error {
	r0 := m.MarkQueuedFunc.nextHook()(v0, v1)
	m.MarkQueuedFunc.appendCall(DBMarkQueuedFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the MarkQueued method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBMarkQueuedFunc) SetDefaultHook(hook func(context.Context, int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MarkQueued method of the parent MockDB instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBMarkQueuedFunc) PushHook(hook func(context.Context, int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBMarkQueuedFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBMarkQueuedFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int) error {
		return r0
	})
}

func (f *DBMarkQueuedFunc) nextHook() func(context.Context, int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBMarkQueuedFunc) appendCall(r0 DBMarkQueuedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBMarkQueuedFuncCall objects describing the
// invocations of this function.
func (f *DBMarkQueuedFunc) History() []DBMarkQueuedFuncCall {
	f.mutex.Lock()
	history := make([]DBMarkQueuedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBMarkQueuedFuncCall is an object that describes an invocation of method
// MarkQueued on an instance of MockDB.
type DBMarkQueuedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBMarkQueuedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBMarkQueuedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBPackageReferencePagerFunc describes the behavior when the
// PackageReferencePager method of the parent MockDB instance is invoked.
type DBPackageReferencePagerFunc struct {
	defaultHook func(context.Context, string, string, string, int, int) (int, db.ReferencePager, error)
	hooks       []func(context.Context, string, string, string, int, int) (int, db.ReferencePager, error)
	history     []DBPackageReferencePagerFuncCall
	mutex       sync.Mutex
}

// PackageReferencePager delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockDB) PackageReferencePager(v0 context.Context, v1 string, v2 string, v3 string, v4 int, v5 int) (int, db.ReferencePager, error) {
	r0, r1, r2 := m.PackageReferencePagerFunc.nextHook()(v0, v1, v2, v3, v4, v5)
	m.PackageReferencePagerFunc.appendCall(DBPackageReferencePagerFuncCall{v0, v1, v2, v3, v4, v5, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// PackageReferencePager method of the parent MockDB instance is invoked and
// the hook queue is empty.
func (f *DBPackageReferencePagerFunc) SetDefaultHook(hook func(context.Context, string, string, string, int, int) (int, db.ReferencePager, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PackageReferencePager method of the parent MockDB instance inovkes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *DBPackageReferencePagerFunc) PushHook(hook func(context.Context, string, string, string, int, int) (int, db.ReferencePager, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBPackageReferencePagerFunc) SetDefaultReturn(r0 int, r1 db.ReferencePager, r2 error) {
	f.SetDefaultHook(func(context.Context, string, string, string, int, int) (int, db.ReferencePager, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBPackageReferencePagerFunc) PushReturn(r0 int, r1 db.ReferencePager, r2 error) {
	f.PushHook(func(context.Context, string, string, string, int, int) (int, db.ReferencePager, error) {
		return r0, r1, r2
	})
}

func (f *DBPackageReferencePagerFunc) nextHook() func(context.Context, string, string, string, int, int) (int, db.ReferencePager, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBPackageReferencePagerFunc) appendCall(r0 DBPackageReferencePagerFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBPackageReferencePagerFuncCall objects
// describing the invocations of this function.
func (f *DBPackageReferencePagerFunc) History() []DBPackageReferencePagerFuncCall {
	f.mutex.Lock()
	history := make([]DBPackageReferencePagerFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBPackageReferencePagerFuncCall is an object that describes an invocation
// of method PackageReferencePager on an instance of MockDB.
type DBPackageReferencePagerFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 db.ReferencePager
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBPackageReferencePagerFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBPackageReferencePagerFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// DBQueueSizeFunc describes the behavior when the QueueSize method of the
// parent MockDB instance is invoked.
type DBQueueSizeFunc struct {
	defaultHook func(context.Context) (int, error)
	hooks       []func(context.Context) (int, error)
	history     []DBQueueSizeFuncCall
	mutex       sync.Mutex
}

// QueueSize delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) QueueSize(v0 context.Context) (int, error) {
	r0, r1 := m.QueueSizeFunc.nextHook()(v0)
	m.QueueSizeFunc.appendCall(DBQueueSizeFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the QueueSize method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBQueueSizeFunc) SetDefaultHook(hook func(context.Context) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueueSize method of the parent MockDB instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBQueueSizeFunc) PushHook(hook func(context.Context) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBQueueSizeFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBQueueSizeFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

func (f *DBQueueSizeFunc) nextHook() func(context.Context) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBQueueSizeFunc) appendCall(r0 DBQueueSizeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBQueueSizeFuncCall objects describing the
// invocations of this function.
func (f *DBQueueSizeFunc) History() []DBQueueSizeFuncCall {
	f.mutex.Lock()
	history := make([]DBQueueSizeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBQueueSizeFuncCall is an object that describes an invocation of method
// QueueSize on an instance of MockDB.
type DBQueueSizeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBQueueSizeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBQueueSizeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DBRepoNameFunc describes the behavior when the RepoName method of the
// parent MockDB instance is invoked.
type DBRepoNameFunc struct {
	defaultHook func(context.Context, int) (string, error)
	hooks       []func(context.Context, int) (string, error)
	history     []DBRepoNameFuncCall
	mutex       sync.Mutex
}

// RepoName delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) RepoName(v0 context.Context, v1 int) (string, error) {
	r0, r1 := m.RepoNameFunc.nextHook()(v0, v1)
	m.RepoNameFunc.appendCall(DBRepoNameFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RepoName method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBRepoNameFunc) SetDefaultHook(hook func(context.Context, int) (string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepoName method of the parent MockDB instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBRepoNameFunc) PushHook(hook func(context.Context, int) (string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBRepoNameFunc) SetDefaultReturn(r0 string, r1 error) {
	f.SetDefaultHook(func(context.Context, int) (string, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBRepoNameFunc) PushReturn(r0 string, r1 error) {
	f.PushHook(func(context.Context, int) (string, error) {
		return r0, r1
	})
}

func (f *DBRepoNameFunc) nextHook() func(context.Context, int) (string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBRepoNameFunc) appendCall(r0 DBRepoNameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBRepoNameFuncCall objects describing the
// invocations of this function.
func (f *DBRepoNameFunc) History() []DBRepoNameFuncCall {
	f.mutex.Lock()
	history := make([]DBRepoNameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBRepoNameFuncCall is an object that describes an invocation of method
// RepoName on an instance of MockDB.
type DBRepoNameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBRepoNameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBRepoNameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DBRepoUsageStatisticsFunc describes the behavior when the
// RepoUsageStatistics method of the parent MockDB instance is invoked.
type DBRepoUsageStatisticsFunc struct {
	defaultHook func(context.Context) ([]db.RepoUsageStatistics, error)
	hooks       []func(context.Context) ([]db.RepoUsageStatistics, error)
	history     []DBRepoUsageStatisticsFuncCall
	mutex       sync.Mutex
}

// RepoUsageStatistics delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) RepoUsageStatistics(v0 context.Context) ([]db.RepoUsageStatistics, error) {
	r0, r1 := m.RepoUsageStatisticsFunc.nextHook()(v0)
	m.RepoUsageStatisticsFunc.appendCall(DBRepoUsageStatisticsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RepoUsageStatistics
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBRepoUsageStatisticsFunc) SetDefaultHook(hook func(context.Context) ([]db.RepoUsageStatistics, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepoUsageStatistics method of the parent MockDB instance inovkes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBRepoUsageStatisticsFunc) PushHook(hook func(context.Context) ([]db.RepoUsageStatistics, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBRepoUsageStatisticsFunc) SetDefaultReturn(r0 []db.RepoUsageStatistics, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]db.RepoUsageStatistics, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBRepoUsageStatisticsFunc) PushReturn(r0 []db.RepoUsageStatistics, r1 error) {
	f.PushHook(func(context.Context) ([]db.RepoUsageStatistics, error) {
		return r0, r1
	})
}

func (f *DBRepoUsageStatisticsFunc) nextHook() func(context.Context) ([]db.RepoUsageStatistics, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBRepoUsageStatisticsFunc) appendCall(r0 DBRepoUsageStatisticsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBRepoUsageStatisticsFuncCall objects
// describing the invocations of this function.
func (f *DBRepoUsageStatisticsFunc) History() []DBRepoUsageStatisticsFuncCall {
	f.mutex.Lock()
	history := make([]DBRepoUsageStatisticsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBRepoUsageStatisticsFuncCall is an object that describes an invocation
// of method RepoUsageStatistics on an instance of MockDB.
type DBRepoUsageStatisticsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []db.RepoUsageStatistics
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBRepoUsageStatisticsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBRepoUsageStatisticsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DBResetStalledFunc describes the behavior when the ResetStalled method of
// the parent MockDB instance is invoked.
type DBResetStalledFunc struct {
	defaultHook func(context.Context, time.Time) ([]int, error)
	hooks       []func(context.Context, time.Time) ([]int, error)
	history     []DBResetStalledFuncCall
	mutex       sync.Mutex
}

// ResetStalled delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) ResetStalled(v0 context.Context, v1 time.Time) ([]int, error) {
	r0, r1 := m.ResetStalledFunc.nextHook()(v0, v1)
	m.ResetStalledFunc.appendCall(DBResetStalledFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ResetStalled method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBResetStalledFunc) SetDefaultHook(hook func(context.Context, time.Time) ([]int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ResetStalled method of the parent MockDB instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBResetStalledFunc) PushHook(hook func(context.Context, time.Time) ([]int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBResetStalledFunc) SetDefaultReturn(r0 []int, r1 error) {
	f.SetDefaultHook(func(context.Context, time.Time) ([]int, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBResetStalledFunc) PushReturn(r0 []int, r1 error) {
	f.PushHook(func(context.Context, time.Time) ([]int, error) {
		return r0, r1
	})
}

func (f *DBResetStalledFunc) nextHook() func(context.Context, time.Time) ([]int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBResetStalledFunc) appendCall(r0 DBResetStalledFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBResetStalledFuncCall objects describing
// the invocations of this function.
func (f *DBResetStalledFunc) History() []DBResetStalledFuncCall {
	f.mutex.Lock()
	history := make([]DBResetStalledFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBResetStalledFuncCall is an object that describes an invocation of
// method ResetStalled on an instance of MockDB.
type DBResetStalledFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBResetStalledFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBResetStalledFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DBResetStalledIndexesFunc describes the behavior when the
// ResetStalledIndexes method of the parent MockDB instance is invoked.
type DBResetStalledIndexesFunc struct {
	defaultHook func(context.Context, time.Time) ([]int, error)
	hooks       []func(context.Context, time.Time) ([]int, error)
	history     []DBResetStalledIndexesFuncCall
	mutex       sync.Mutex
}

// ResetStalledIndexes delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) ResetStalledIndexes(v0 context.Context, v1 time.Time) ([]int, error) {
	r0, r1 := m.ResetStalledIndexesFunc.nextHook()(v0, v1)
	m.ResetStalledIndexesFunc.appendCall(DBResetStalledIndexesFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ResetStalledIndexes
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBResetStalledIndexesFunc) SetDefaultHook(hook func(context.Context, time.Time) ([]int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ResetStalledIndexes method of the parent MockDB instance inovkes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBResetStalledIndexesFunc) PushHook(hook func(context.Context, time.Time) ([]int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBResetStalledIndexesFunc) SetDefaultReturn(r0 []int, r1 error) {
	f.SetDefaultHook(func(context.Context, time.Time) ([]int, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBResetStalledIndexesFunc) PushReturn(r0 []int, r1 error) {
	f.PushHook(func(context.Context, time.Time) ([]int, error) {
		return r0, r1
	})
}

func (f *DBResetStalledIndexesFunc) nextHook() func(context.Context, time.Time) ([]int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBResetStalledIndexesFunc) appendCall(r0 DBResetStalledIndexesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBResetStalledIndexesFuncCall objects
// describing the invocations of this function.
func (f *DBResetStalledIndexesFunc) History() []DBResetStalledIndexesFuncCall {
	f.mutex.Lock()
	history := make([]DBResetStalledIndexesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBResetStalledIndexesFuncCall is an object that describes an invocation
// of method ResetStalledIndexes on an instance of MockDB.
type DBResetStalledIndexesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBResetStalledIndexesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBResetStalledIndexesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DBRollbackToSavepointFunc describes the behavior when the
// RollbackToSavepoint method of the parent MockDB instance is invoked.
type DBRollbackToSavepointFunc struct {
	defaultHook func(context.Context, string) error
	hooks       []func(context.Context, string) error
	history     []DBRollbackToSavepointFuncCall
	mutex       sync.Mutex
}

// RollbackToSavepoint delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) RollbackToSavepoint(v0 context.Context, v1 string) error {
	r0 := m.RollbackToSavepointFunc.nextHook()(v0, v1)
	m.RollbackToSavepointFunc.appendCall(DBRollbackToSavepointFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the RollbackToSavepoint
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBRollbackToSavepointFunc) SetDefaultHook(hook func(context.Context, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RollbackToSavepoint method of the parent MockDB instance inovkes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBRollbackToSavepointFunc) PushHook(hook func(context.Context, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBRollbackToSavepointFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBRollbackToSavepointFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string) error {
		return r0
	})
}

func (f *DBRollbackToSavepointFunc) nextHook() func(context.Context, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBRollbackToSavepointFunc) appendCall(r0 DBRollbackToSavepointFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBRollbackToSavepointFuncCall objects
// describing the invocations of this function.
func (f *DBRollbackToSavepointFunc) History() []DBRollbackToSavepointFuncCall {
	f.mutex.Lock()
	history := make([]DBRollbackToSavepointFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBRollbackToSavepointFuncCall is an object that describes an invocation
// of method RollbackToSavepoint on an instance of MockDB.
type DBRollbackToSavepointFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBRollbackToSavepointFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBRollbackToSavepointFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBSameRepoPagerFunc describes the behavior when the SameRepoPager method
// of the parent MockDB instance is invoked.
type DBSameRepoPagerFunc struct {
	defaultHook func(context.Context, int, string, string, string, string, int) (int, db.ReferencePager, error)
	hooks       []func(context.Context, int, string, string, string, string, int) (int, db.ReferencePager, error)
	history     []DBSameRepoPagerFuncCall
	mutex       sync.Mutex
}

// SameRepoPager delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) SameRepoPager(v0 context.Context, v1 int, v2 string, v3 string, v4 string, v5 string, v6 int) (int, db.ReferencePager, error) {
	r0, r1, r2 := m.SameRepoPagerFunc.nextHook()(v0, v1, v2, v3, v4, v5, v6)
	m.SameRepoPagerFunc.appendCall(DBSameRepoPagerFuncCall{v0, v1, v2, v3, v4, v5, v6, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the SameRepoPager method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBSameRepoPagerFunc) SetDefaultHook(hook func(context.Context, int, string, string, string, string, int) (int, db.ReferencePager, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SameRepoPager method of the parent MockDB instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBSameRepoPagerFunc) PushHook(hook func(context.Context, int, string, string, string, string, int) (int, db.ReferencePager, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBSameRepoPagerFunc) SetDefaultReturn(r0 int, r1 db.ReferencePager, r2 error) {
	f.SetDefaultHook(func(context.Context, int, string, string, string, string, int) (int, db.ReferencePager, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBSameRepoPagerFunc) PushReturn(r0 int, r1 db.ReferencePager, r2 error) {
	f.PushHook(func(context.Context, int, string, string, string, string, int) (int, db.ReferencePager, error) {
		return r0, r1, r2
	})
}

func (f *DBSameRepoPagerFunc) nextHook() func(context.Context, int, string, string, string, string, int) (int, db.ReferencePager, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBSameRepoPagerFunc) appendCall(r0 DBSameRepoPagerFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBSameRepoPagerFuncCall objects describing
// the invocations of this function.
func (f *DBSameRepoPagerFunc) History() []DBSameRepoPagerFuncCall {
	f.mutex.Lock()
	history := make([]DBSameRepoPagerFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBSameRepoPagerFuncCall is an object that describes an invocation of
// method SameRepoPager on an instance of MockDB.
type DBSameRepoPagerFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 string
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 string
	// Arg6 is the value of the 7th argument passed to this method
	// invocation.
	Arg6 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 db.ReferencePager
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBSameRepoPagerFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5, c.Arg6}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBSameRepoPagerFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// DBSavepointFunc describes the behavior when the Savepoint method of the
// parent MockDB instance is invoked.
type DBSavepointFunc struct {
	defaultHook func(context.Context) (string, error)
	hooks       []func(context.Context) (string, error)
	history     []DBSavepointFuncCall
	mutex       sync.Mutex
}

// Savepoint delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) Savepoint(v0 context.Context) (string, error) {
	r0, r1 := m.SavepointFunc.nextHook()(v0)
	m.SavepointFunc.appendCall(DBSavepointFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Savepoint method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBSavepointFunc) SetDefaultHook(hook func(context.Context) (string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Savepoint method of the parent MockDB instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBSavepointFunc) PushHook(hook func(context.Context) (string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBSavepointFunc) SetDefaultReturn(r0 string, r1 error) {
	f.SetDefaultHook(func(context.Context) (string, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBSavepointFunc) PushReturn(r0 string, r1 error) {
	f.PushHook(func(context.Context) (string, error) {
		return r0, r1
	})
}

func (f *DBSavepointFunc) nextHook() func(context.Context) (string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBSavepointFunc) appendCall(r0 DBSavepointFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBSavepointFuncCall objects describing the
// invocations of this function.
func (f *DBSavepointFunc) History() []DBSavepointFuncCall {
	f.mutex.Lock()
	history := make([]DBSavepointFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBSavepointFuncCall is an object that describes an invocation of method
// Savepoint on an instance of MockDB.
type DBSavepointFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBSavepointFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBSavepointFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DBTransactFunc describes the behavior when the Transact method of the
// parent MockDB instance is invoked.
type DBTransactFunc struct {
	defaultHook func(context.Context) (db.DB, error)
	hooks       []func(context.Context) (db.DB, error)
	history     []DBTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) Transact(v0 context.Context) (db.DB, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(DBTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBTransactFunc) SetDefaultHook(hook func(context.Context) (db.DB, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockDB instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBTransactFunc) PushHook(hook func(context.Context) (db.DB, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBTransactFunc) SetDefaultReturn(r0 db.DB, r1 error) {
	f.SetDefaultHook(func(context.Context) (db.DB, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBTransactFunc) PushReturn(r0 db.DB, r1 error) {
	f.PushHook(func(context.Context) (db.DB, error) {
		return r0, r1
	})
}

func (f *DBTransactFunc) nextHook() func(context.Context) (db.DB, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBTransactFunc) appendCall(r0 DBTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBTransactFuncCall objects describing the
// invocations of this function.
func (f *DBTransactFunc) History() []DBTransactFuncCall {
	f.mutex.Lock()
	history := make([]DBTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBTransactFuncCall is an object that describes an invocation of method
// Transact on an instance of MockDB.
type DBTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 db.DB
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DBUpdateCommitsFunc describes the behavior when the UpdateCommits method
// of the parent MockDB instance is invoked.
type DBUpdateCommitsFunc struct {
	defaultHook func(context.Context, int, map[string][]string) error
	hooks       []func(context.Context, int, map[string][]string) error
	history     []DBUpdateCommitsFuncCall
	mutex       sync.Mutex
}

// UpdateCommits delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) UpdateCommits(v0 context.Context, v1 int, v2 map[string][]string) error {
	r0 := m.UpdateCommitsFunc.nextHook()(v0, v1, v2)
	m.UpdateCommitsFunc.appendCall(DBUpdateCommitsFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UpdateCommits method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBUpdateCommitsFunc) SetDefaultHook(hook func(context.Context, int, map[string][]string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateCommits method of the parent MockDB instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBUpdateCommitsFunc) PushHook(hook func(context.Context, int, map[string][]string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBUpdateCommitsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int, map[string][]string) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBUpdateCommitsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int, map[string][]string) error {
		return r0
	})
}

func (f *DBUpdateCommitsFunc) nextHook() func(context.Context, int, map[string][]string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBUpdateCommitsFunc) appendCall(r0 DBUpdateCommitsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBUpdateCommitsFuncCall objects describing
// the invocations of this function.
func (f *DBUpdateCommitsFunc) History() []DBUpdateCommitsFuncCall {
	f.mutex.Lock()
	history := make([]DBUpdateCommitsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBUpdateCommitsFuncCall is an object that describes an invocation of
// method UpdateCommits on an instance of MockDB.
type DBUpdateCommitsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 map[string][]string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBUpdateCommitsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBUpdateCommitsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBUpdateDumpsVisibleFromTipFunc describes the behavior when the
// UpdateDumpsVisibleFromTip method of the parent MockDB instance is
// invoked.
type DBUpdateDumpsVisibleFromTipFunc struct {
	defaultHook func(context.Context, int, string) error
	hooks       []func(context.Context, int, string) error
	history     []DBUpdateDumpsVisibleFromTipFuncCall
	mutex       sync.Mutex
}

// UpdateDumpsVisibleFromTip delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockDB) UpdateDumpsVisibleFromTip(v0 context.Context, v1 int, v2 string) error {
	r0 := m.UpdateDumpsVisibleFromTipFunc.nextHook()(v0, v1, v2)
	m.UpdateDumpsVisibleFromTipFunc.appendCall(DBUpdateDumpsVisibleFromTipFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// UpdateDumpsVisibleFromTip method of the parent MockDB instance is invoked
// and the hook queue is empty.
func (f *DBUpdateDumpsVisibleFromTipFunc) SetDefaultHook(hook func(context.Context, int, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateDumpsVisibleFromTip method of the parent MockDB instance inovkes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *DBUpdateDumpsVisibleFromTipFunc) PushHook(hook func(context.Context, int, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBUpdateDumpsVisibleFromTipFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int, string) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBUpdateDumpsVisibleFromTipFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int, string) error {
		return r0
	})
}

func (f *DBUpdateDumpsVisibleFromTipFunc) nextHook() func(context.Context, int, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBUpdateDumpsVisibleFromTipFunc) appendCall(r0 DBUpdateDumpsVisibleFromTipFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBUpdateDumpsVisibleFromTipFuncCall objects
// describing the invocations of this function.
func (f *DBUpdateDumpsVisibleFromTipFunc) History() []DBUpdateDumpsVisibleFromTipFuncCall {
	f.mutex.Lock()
	history := make([]DBUpdateDumpsVisibleFromTipFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBUpdateDumpsVisibleFromTipFuncCall is an object that describes an
// invocation of method UpdateDumpsVisibleFromTip on an instance of MockDB.
type DBUpdateDumpsVisibleFromTipFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBUpdateDumpsVisibleFromTipFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBUpdateDumpsVisibleFromTipFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBUpdateIndexableRepositoryFunc describes the behavior when the
// UpdateIndexableRepository method of the parent MockDB instance is
// invoked.
type DBUpdateIndexableRepositoryFunc struct {
	defaultHook func(context.Context, db.UpdateableIndexableRepository) error
	hooks       []func(context.Context, db.UpdateableIndexableRepository) error
	history     []DBUpdateIndexableRepositoryFuncCall
	mutex       sync.Mutex
}

// UpdateIndexableRepository delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockDB) UpdateIndexableRepository(v0 context.Context, v1 db.UpdateableIndexableRepository) error {
	r0 := m.UpdateIndexableRepositoryFunc.nextHook()(v0, v1)
	m.UpdateIndexableRepositoryFunc.appendCall(DBUpdateIndexableRepositoryFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// UpdateIndexableRepository method of the parent MockDB instance is invoked
// and the hook queue is empty.
func (f *DBUpdateIndexableRepositoryFunc) SetDefaultHook(hook func(context.Context, db.UpdateableIndexableRepository) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateIndexableRepository method of the parent MockDB instance inovkes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *DBUpdateIndexableRepositoryFunc) PushHook(hook func(context.Context, db.UpdateableIndexableRepository) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBUpdateIndexableRepositoryFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, db.UpdateableIndexableRepository) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBUpdateIndexableRepositoryFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, db.UpdateableIndexableRepository) error {
		return r0
	})
}

func (f *DBUpdateIndexableRepositoryFunc) nextHook() func(context.Context, db.UpdateableIndexableRepository) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBUpdateIndexableRepositoryFunc) appendCall(r0 DBUpdateIndexableRepositoryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBUpdateIndexableRepositoryFuncCall objects
// describing the invocations of this function.
func (f *DBUpdateIndexableRepositoryFunc) History() []DBUpdateIndexableRepositoryFuncCall {
	f.mutex.Lock()
	history := make([]DBUpdateIndexableRepositoryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBUpdateIndexableRepositoryFuncCall is an object that describes an
// invocation of method UpdateIndexableRepository on an instance of MockDB.
type DBUpdateIndexableRepositoryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 db.UpdateableIndexableRepository
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBUpdateIndexableRepositoryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBUpdateIndexableRepositoryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBUpdatePackageReferencesFunc describes the behavior when the
// UpdatePackageReferences method of the parent MockDB instance is invoked.
type DBUpdatePackageReferencesFunc struct {
	defaultHook func(context.Context, []types.PackageReference) error
	hooks       []func(context.Context, []types.PackageReference) error
	history     []DBUpdatePackageReferencesFuncCall
	mutex       sync.Mutex
}

// UpdatePackageReferences delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockDB) UpdatePackageReferences(v0 context.Context, v1 []types.PackageReference) error {
	r0 := m.UpdatePackageReferencesFunc.nextHook()(v0, v1)
	m.UpdatePackageReferencesFunc.appendCall(DBUpdatePackageReferencesFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// UpdatePackageReferences method of the parent MockDB instance is invoked
// and the hook queue is empty.
func (f *DBUpdatePackageReferencesFunc) SetDefaultHook(hook func(context.Context, []types.PackageReference) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdatePackageReferences method of the parent MockDB instance inovkes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *DBUpdatePackageReferencesFunc) PushHook(hook func(context.Context, []types.PackageReference) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBUpdatePackageReferencesFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []types.PackageReference) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBUpdatePackageReferencesFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []types.PackageReference) error {
		return r0
	})
}

func (f *DBUpdatePackageReferencesFunc) nextHook() func(context.Context, []types.PackageReference) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBUpdatePackageReferencesFunc) appendCall(r0 DBUpdatePackageReferencesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBUpdatePackageReferencesFuncCall objects
// describing the invocations of this function.
func (f *DBUpdatePackageReferencesFunc) History() []DBUpdatePackageReferencesFuncCall {
	f.mutex.Lock()
	history := make([]DBUpdatePackageReferencesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBUpdatePackageReferencesFuncCall is an object that describes an
// invocation of method UpdatePackageReferences on an instance of MockDB.
type DBUpdatePackageReferencesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []types.PackageReference
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBUpdatePackageReferencesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBUpdatePackageReferencesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBUpdatePackagesFunc describes the behavior when the UpdatePackages
// method of the parent MockDB instance is invoked.
type DBUpdatePackagesFunc struct {
	defaultHook func(context.Context, []types.Package) error
	hooks       []func(context.Context, []types.Package) error
	history     []DBUpdatePackagesFuncCall
	mutex       sync.Mutex
}

// UpdatePackages delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) UpdatePackages(v0 context.Context, v1 []types.Package) error {
	r0 := m.UpdatePackagesFunc.nextHook()(v0, v1)
	m.UpdatePackagesFunc.appendCall(DBUpdatePackagesFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UpdatePackages
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBUpdatePackagesFunc) SetDefaultHook(hook func(context.Context, []types.Package) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdatePackages method of the parent MockDB instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBUpdatePackagesFunc) PushHook(hook func(context.Context, []types.Package) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBUpdatePackagesFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []types.Package) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBUpdatePackagesFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []types.Package) error {
		return r0
	})
}

func (f *DBUpdatePackagesFunc) nextHook() func(context.Context, []types.Package) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBUpdatePackagesFunc) appendCall(r0 DBUpdatePackagesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBUpdatePackagesFuncCall objects describing
// the invocations of this function.
func (f *DBUpdatePackagesFunc) History() []DBUpdatePackagesFuncCall {
	f.mutex.Lock()
	history := make([]DBUpdatePackagesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBUpdatePackagesFuncCall is an object that describes an invocation of
// method UpdatePackages on an instance of MockDB.
type DBUpdatePackagesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []types.Package
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBUpdatePackagesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBUpdatePackagesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
