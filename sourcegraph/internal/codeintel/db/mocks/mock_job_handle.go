// Code generated by github.com/efritz/go-mockgen 0.1.0; DO NOT EDIT.

package mocks

import (
	"database/sql"
	db "github.com/sourcegraph/sourcegraph/internal/codeintel/db"
	"sync"
)

// MockJobHandle is a mock impelementation of the JobHandle interface (from
// the package github.com/sourcegraph/sourcegraph/internal/codeintel/db)
// used for unit testing.
type MockJobHandle struct {
	// CloseTxFunc is an instance of a mock function object controlling the
	// behavior of the method CloseTx.
	CloseTxFunc *JobHandleCloseTxFunc
	// MarkCompleteFunc is an instance of a mock function object controlling
	// the behavior of the method MarkComplete.
	MarkCompleteFunc *JobHandleMarkCompleteFunc
	// MarkErroredFunc is an instance of a mock function object controlling
	// the behavior of the method MarkErrored.
	MarkErroredFunc *JobHandleMarkErroredFunc
	// RollbackToLastSavepointFunc is an instance of a mock function object
	// controlling the behavior of the method RollbackToLastSavepoint.
	RollbackToLastSavepointFunc *JobHandleRollbackToLastSavepointFunc
	// SavepointFunc is an instance of a mock function object controlling
	// the behavior of the method Savepoint.
	SavepointFunc *JobHandleSavepointFunc
	// TxFunc is an instance of a mock function object controlling the
	// behavior of the method Tx.
	TxFunc *JobHandleTxFunc
}

// NewMockJobHandle creates a new mock of the JobHandle interface. All
// methods return zero values for all results, unless overwritten.
func NewMockJobHandle() *MockJobHandle {
	return &MockJobHandle{
		CloseTxFunc: &JobHandleCloseTxFunc{
			defaultHook: func(error) error {
				return nil
			},
		},
		MarkCompleteFunc: &JobHandleMarkCompleteFunc{
			defaultHook: func() error {
				return nil
			},
		},
		MarkErroredFunc: &JobHandleMarkErroredFunc{
			defaultHook: func(string, string) error {
				return nil
			},
		},
		RollbackToLastSavepointFunc: &JobHandleRollbackToLastSavepointFunc{
			defaultHook: func() error {
				return nil
			},
		},
		SavepointFunc: &JobHandleSavepointFunc{
			defaultHook: func() error {
				return nil
			},
		},
		TxFunc: &JobHandleTxFunc{
			defaultHook: func() *sql.Tx {
				return nil
			},
		},
	}
}

// NewMockJobHandleFrom creates a new mock of the MockJobHandle interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockJobHandleFrom(i db.JobHandle) *MockJobHandle {
	return &MockJobHandle{
		CloseTxFunc: &JobHandleCloseTxFunc{
			defaultHook: i.CloseTx,
		},
		MarkCompleteFunc: &JobHandleMarkCompleteFunc{
			defaultHook: i.MarkComplete,
		},
		MarkErroredFunc: &JobHandleMarkErroredFunc{
			defaultHook: i.MarkErrored,
		},
		RollbackToLastSavepointFunc: &JobHandleRollbackToLastSavepointFunc{
			defaultHook: i.RollbackToLastSavepoint,
		},
		SavepointFunc: &JobHandleSavepointFunc{
			defaultHook: i.Savepoint,
		},
		TxFunc: &JobHandleTxFunc{
			defaultHook: i.Tx,
		},
	}
}

// JobHandleCloseTxFunc describes the behavior when the CloseTx method of
// the parent MockJobHandle instance is invoked.
type JobHandleCloseTxFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []JobHandleCloseTxFuncCall
	mutex       sync.Mutex
}

// CloseTx delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockJobHandle) CloseTx(v0 error) error {
	r0 := m.CloseTxFunc.nextHook()(v0)
	m.CloseTxFunc.appendCall(JobHandleCloseTxFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the CloseTx method of
// the parent MockJobHandle instance is invoked and the hook queue is empty.
func (f *JobHandleCloseTxFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CloseTx method of the parent MockJobHandle instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *JobHandleCloseTxFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *JobHandleCloseTxFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *JobHandleCloseTxFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *JobHandleCloseTxFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *JobHandleCloseTxFunc) appendCall(r0 JobHandleCloseTxFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of JobHandleCloseTxFuncCall objects describing
// the invocations of this function.
func (f *JobHandleCloseTxFunc) History() []JobHandleCloseTxFuncCall {
	f.mutex.Lock()
	history := make([]JobHandleCloseTxFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// JobHandleCloseTxFuncCall is an object that describes an invocation of
// method CloseTx on an instance of MockJobHandle.
type JobHandleCloseTxFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c JobHandleCloseTxFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c JobHandleCloseTxFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// JobHandleMarkCompleteFunc describes the behavior when the MarkComplete
// method of the parent MockJobHandle instance is invoked.
type JobHandleMarkCompleteFunc struct {
	defaultHook func() error
	hooks       []func() error
	history     []JobHandleMarkCompleteFuncCall
	mutex       sync.Mutex
}

// MarkComplete delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockJobHandle) MarkComplete() error {
	r0 := m.MarkCompleteFunc.nextHook()()
	m.MarkCompleteFunc.appendCall(JobHandleMarkCompleteFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the MarkComplete method
// of the parent MockJobHandle instance is invoked and the hook queue is
// empty.
func (f *JobHandleMarkCompleteFunc) SetDefaultHook(hook func() error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MarkComplete method of the parent MockJobHandle instance inovkes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *JobHandleMarkCompleteFunc) PushHook(hook func() error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *JobHandleMarkCompleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func() error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *JobHandleMarkCompleteFunc) PushReturn(r0 error) {
	f.PushHook(func() error {
		return r0
	})
}

func (f *JobHandleMarkCompleteFunc) nextHook() func() error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *JobHandleMarkCompleteFunc) appendCall(r0 JobHandleMarkCompleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of JobHandleMarkCompleteFuncCall objects
// describing the invocations of this function.
func (f *JobHandleMarkCompleteFunc) History() []JobHandleMarkCompleteFuncCall {
	f.mutex.Lock()
	history := make([]JobHandleMarkCompleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// JobHandleMarkCompleteFuncCall is an object that describes an invocation
// of method MarkComplete on an instance of MockJobHandle.
type JobHandleMarkCompleteFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c JobHandleMarkCompleteFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c JobHandleMarkCompleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// JobHandleMarkErroredFunc describes the behavior when the MarkErrored
// method of the parent MockJobHandle instance is invoked.
type JobHandleMarkErroredFunc struct {
	defaultHook func(string, string) error
	hooks       []func(string, string) error
	history     []JobHandleMarkErroredFuncCall
	mutex       sync.Mutex
}

// MarkErrored delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockJobHandle) MarkErrored(v0 string, v1 string) error {
	r0 := m.MarkErroredFunc.nextHook()(v0, v1)
	m.MarkErroredFunc.appendCall(JobHandleMarkErroredFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the MarkErrored method
// of the parent MockJobHandle instance is invoked and the hook queue is
// empty.
func (f *JobHandleMarkErroredFunc) SetDefaultHook(hook func(string, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MarkErrored method of the parent MockJobHandle instance inovkes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *JobHandleMarkErroredFunc) PushHook(hook func(string, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *JobHandleMarkErroredFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(string, string) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *JobHandleMarkErroredFunc) PushReturn(r0 error) {
	f.PushHook(func(string, string) error {
		return r0
	})
}

func (f *JobHandleMarkErroredFunc) nextHook() func(string, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *JobHandleMarkErroredFunc) appendCall(r0 JobHandleMarkErroredFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of JobHandleMarkErroredFuncCall objects
// describing the invocations of this function.
func (f *JobHandleMarkErroredFunc) History() []JobHandleMarkErroredFuncCall {
	f.mutex.Lock()
	history := make([]JobHandleMarkErroredFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// JobHandleMarkErroredFuncCall is an object that describes an invocation of
// method MarkErrored on an instance of MockJobHandle.
type JobHandleMarkErroredFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c JobHandleMarkErroredFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c JobHandleMarkErroredFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// JobHandleRollbackToLastSavepointFunc describes the behavior when the
// RollbackToLastSavepoint method of the parent MockJobHandle instance is
// invoked.
type JobHandleRollbackToLastSavepointFunc struct {
	defaultHook func() error
	hooks       []func() error
	history     []JobHandleRollbackToLastSavepointFuncCall
	mutex       sync.Mutex
}

// RollbackToLastSavepoint delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockJobHandle) RollbackToLastSavepoint() error {
	r0 := m.RollbackToLastSavepointFunc.nextHook()()
	m.RollbackToLastSavepointFunc.appendCall(JobHandleRollbackToLastSavepointFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// RollbackToLastSavepoint method of the parent MockJobHandle instance is
// invoked and the hook queue is empty.
func (f *JobHandleRollbackToLastSavepointFunc) SetDefaultHook(hook func() error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RollbackToLastSavepoint method of the parent MockJobHandle instance
// inovkes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *JobHandleRollbackToLastSavepointFunc) PushHook(hook func() error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *JobHandleRollbackToLastSavepointFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func() error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *JobHandleRollbackToLastSavepointFunc) PushReturn(r0 error) {
	f.PushHook(func() error {
		return r0
	})
}

func (f *JobHandleRollbackToLastSavepointFunc) nextHook() func() error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *JobHandleRollbackToLastSavepointFunc) appendCall(r0 JobHandleRollbackToLastSavepointFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of JobHandleRollbackToLastSavepointFuncCall
// objects describing the invocations of this function.
func (f *JobHandleRollbackToLastSavepointFunc) History() []JobHandleRollbackToLastSavepointFuncCall {
	f.mutex.Lock()
	history := make([]JobHandleRollbackToLastSavepointFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// JobHandleRollbackToLastSavepointFuncCall is an object that describes an
// invocation of method RollbackToLastSavepoint on an instance of
// MockJobHandle.
type JobHandleRollbackToLastSavepointFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c JobHandleRollbackToLastSavepointFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c JobHandleRollbackToLastSavepointFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// JobHandleSavepointFunc describes the behavior when the Savepoint method
// of the parent MockJobHandle instance is invoked.
type JobHandleSavepointFunc struct {
	defaultHook func() error
	hooks       []func() error
	history     []JobHandleSavepointFuncCall
	mutex       sync.Mutex
}

// Savepoint delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockJobHandle) Savepoint() error {
	r0 := m.SavepointFunc.nextHook()()
	m.SavepointFunc.appendCall(JobHandleSavepointFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Savepoint method of
// the parent MockJobHandle instance is invoked and the hook queue is empty.
func (f *JobHandleSavepointFunc) SetDefaultHook(hook func() error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Savepoint method of the parent MockJobHandle instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *JobHandleSavepointFunc) PushHook(hook func() error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *JobHandleSavepointFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func() error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *JobHandleSavepointFunc) PushReturn(r0 error) {
	f.PushHook(func() error {
		return r0
	})
}

func (f *JobHandleSavepointFunc) nextHook() func() error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *JobHandleSavepointFunc) appendCall(r0 JobHandleSavepointFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of JobHandleSavepointFuncCall objects
// describing the invocations of this function.
func (f *JobHandleSavepointFunc) History() []JobHandleSavepointFuncCall {
	f.mutex.Lock()
	history := make([]JobHandleSavepointFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// JobHandleSavepointFuncCall is an object that describes an invocation of
// method Savepoint on an instance of MockJobHandle.
type JobHandleSavepointFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c JobHandleSavepointFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c JobHandleSavepointFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// JobHandleTxFunc describes the behavior when the Tx method of the parent
// MockJobHandle instance is invoked.
type JobHandleTxFunc struct {
	defaultHook func() *sql.Tx
	hooks       []func() *sql.Tx
	history     []JobHandleTxFuncCall
	mutex       sync.Mutex
}

// Tx delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockJobHandle) Tx() *sql.Tx {
	r0 := m.TxFunc.nextHook()()
	m.TxFunc.appendCall(JobHandleTxFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Tx method of the
// parent MockJobHandle instance is invoked and the hook queue is empty.
func (f *JobHandleTxFunc) SetDefaultHook(hook func() *sql.Tx) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Tx method of the parent MockJobHandle instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *JobHandleTxFunc) PushHook(hook func() *sql.Tx) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *JobHandleTxFunc) SetDefaultReturn(r0 *sql.Tx) {
	f.SetDefaultHook(func() *sql.Tx {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *JobHandleTxFunc) PushReturn(r0 *sql.Tx) {
	f.PushHook(func() *sql.Tx {
		return r0
	})
}

func (f *JobHandleTxFunc) nextHook() func() *sql.Tx {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *JobHandleTxFunc) appendCall(r0 JobHandleTxFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of JobHandleTxFuncCall objects describing the
// invocations of this function.
func (f *JobHandleTxFunc) History() []JobHandleTxFuncCall {
	f.mutex.Lock()
	history := make([]JobHandleTxFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// JobHandleTxFuncCall is an object that describes an invocation of method
// Tx on an instance of MockJobHandle.
type JobHandleTxFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *sql.Tx
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c JobHandleTxFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c JobHandleTxFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
