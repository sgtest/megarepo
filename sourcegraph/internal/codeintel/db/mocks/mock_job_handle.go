// Code generated by github.com/efritz/go-mockgen 0.1.0; DO NOT EDIT.

package mocks

import (
	"context"
	db "github.com/sourcegraph/sourcegraph/internal/codeintel/db"
	"sync"
)

// MockJobHandle is a mock impelementation of the JobHandle interface (from
// the package github.com/sourcegraph/sourcegraph/internal/codeintel/db)
// used for unit testing.
type MockJobHandle struct {
	// DBFunc is an instance of a mock function object controlling the
	// behavior of the method DB.
	DBFunc *JobHandleDBFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *JobHandleDoneFunc
	// MarkCompleteFunc is an instance of a mock function object controlling
	// the behavior of the method MarkComplete.
	MarkCompleteFunc *JobHandleMarkCompleteFunc
	// MarkErroredFunc is an instance of a mock function object controlling
	// the behavior of the method MarkErrored.
	MarkErroredFunc *JobHandleMarkErroredFunc
	// RollbackToLastSavepointFunc is an instance of a mock function object
	// controlling the behavior of the method RollbackToLastSavepoint.
	RollbackToLastSavepointFunc *JobHandleRollbackToLastSavepointFunc
	// SavepointFunc is an instance of a mock function object controlling
	// the behavior of the method Savepoint.
	SavepointFunc *JobHandleSavepointFunc
}

// NewMockJobHandle creates a new mock of the JobHandle interface. All
// methods return zero values for all results, unless overwritten.
func NewMockJobHandle() *MockJobHandle {
	return &MockJobHandle{
		DBFunc: &JobHandleDBFunc{
			defaultHook: func() db.DB {
				return nil
			},
		},
		DoneFunc: &JobHandleDoneFunc{
			defaultHook: func(error) error {
				return nil
			},
		},
		MarkCompleteFunc: &JobHandleMarkCompleteFunc{
			defaultHook: func(context.Context) error {
				return nil
			},
		},
		MarkErroredFunc: &JobHandleMarkErroredFunc{
			defaultHook: func(context.Context, string, string) error {
				return nil
			},
		},
		RollbackToLastSavepointFunc: &JobHandleRollbackToLastSavepointFunc{
			defaultHook: func(context.Context) error {
				return nil
			},
		},
		SavepointFunc: &JobHandleSavepointFunc{
			defaultHook: func(context.Context) error {
				return nil
			},
		},
	}
}

// NewMockJobHandleFrom creates a new mock of the MockJobHandle interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockJobHandleFrom(i db.JobHandle) *MockJobHandle {
	return &MockJobHandle{
		DBFunc: &JobHandleDBFunc{
			defaultHook: i.DB,
		},
		DoneFunc: &JobHandleDoneFunc{
			defaultHook: i.Done,
		},
		MarkCompleteFunc: &JobHandleMarkCompleteFunc{
			defaultHook: i.MarkComplete,
		},
		MarkErroredFunc: &JobHandleMarkErroredFunc{
			defaultHook: i.MarkErrored,
		},
		RollbackToLastSavepointFunc: &JobHandleRollbackToLastSavepointFunc{
			defaultHook: i.RollbackToLastSavepoint,
		},
		SavepointFunc: &JobHandleSavepointFunc{
			defaultHook: i.Savepoint,
		},
	}
}

// JobHandleDBFunc describes the behavior when the DB method of the parent
// MockJobHandle instance is invoked.
type JobHandleDBFunc struct {
	defaultHook func() db.DB
	hooks       []func() db.DB
	history     []JobHandleDBFuncCall
	mutex       sync.Mutex
}

// DB delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockJobHandle) DB() db.DB {
	r0 := m.DBFunc.nextHook()()
	m.DBFunc.appendCall(JobHandleDBFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the DB method of the
// parent MockJobHandle instance is invoked and the hook queue is empty.
func (f *JobHandleDBFunc) SetDefaultHook(hook func() db.DB) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DB method of the parent MockJobHandle instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *JobHandleDBFunc) PushHook(hook func() db.DB) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *JobHandleDBFunc) SetDefaultReturn(r0 db.DB) {
	f.SetDefaultHook(func() db.DB {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *JobHandleDBFunc) PushReturn(r0 db.DB) {
	f.PushHook(func() db.DB {
		return r0
	})
}

func (f *JobHandleDBFunc) nextHook() func() db.DB {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *JobHandleDBFunc) appendCall(r0 JobHandleDBFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of JobHandleDBFuncCall objects describing the
// invocations of this function.
func (f *JobHandleDBFunc) History() []JobHandleDBFuncCall {
	f.mutex.Lock()
	history := make([]JobHandleDBFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// JobHandleDBFuncCall is an object that describes an invocation of method
// DB on an instance of MockJobHandle.
type JobHandleDBFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 db.DB
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c JobHandleDBFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c JobHandleDBFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// JobHandleDoneFunc describes the behavior when the Done method of the
// parent MockJobHandle instance is invoked.
type JobHandleDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []JobHandleDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockJobHandle) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(JobHandleDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockJobHandle instance is invoked and the hook queue is empty.
func (f *JobHandleDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockJobHandle instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *JobHandleDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *JobHandleDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *JobHandleDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *JobHandleDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *JobHandleDoneFunc) appendCall(r0 JobHandleDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of JobHandleDoneFuncCall objects describing
// the invocations of this function.
func (f *JobHandleDoneFunc) History() []JobHandleDoneFuncCall {
	f.mutex.Lock()
	history := make([]JobHandleDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// JobHandleDoneFuncCall is an object that describes an invocation of method
// Done on an instance of MockJobHandle.
type JobHandleDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c JobHandleDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c JobHandleDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// JobHandleMarkCompleteFunc describes the behavior when the MarkComplete
// method of the parent MockJobHandle instance is invoked.
type JobHandleMarkCompleteFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []JobHandleMarkCompleteFuncCall
	mutex       sync.Mutex
}

// MarkComplete delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockJobHandle) MarkComplete(v0 context.Context) error {
	r0 := m.MarkCompleteFunc.nextHook()(v0)
	m.MarkCompleteFunc.appendCall(JobHandleMarkCompleteFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the MarkComplete method
// of the parent MockJobHandle instance is invoked and the hook queue is
// empty.
func (f *JobHandleMarkCompleteFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MarkComplete method of the parent MockJobHandle instance inovkes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *JobHandleMarkCompleteFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *JobHandleMarkCompleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *JobHandleMarkCompleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *JobHandleMarkCompleteFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *JobHandleMarkCompleteFunc) appendCall(r0 JobHandleMarkCompleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of JobHandleMarkCompleteFuncCall objects
// describing the invocations of this function.
func (f *JobHandleMarkCompleteFunc) History() []JobHandleMarkCompleteFuncCall {
	f.mutex.Lock()
	history := make([]JobHandleMarkCompleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// JobHandleMarkCompleteFuncCall is an object that describes an invocation
// of method MarkComplete on an instance of MockJobHandle.
type JobHandleMarkCompleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c JobHandleMarkCompleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c JobHandleMarkCompleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// JobHandleMarkErroredFunc describes the behavior when the MarkErrored
// method of the parent MockJobHandle instance is invoked.
type JobHandleMarkErroredFunc struct {
	defaultHook func(context.Context, string, string) error
	hooks       []func(context.Context, string, string) error
	history     []JobHandleMarkErroredFuncCall
	mutex       sync.Mutex
}

// MarkErrored delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockJobHandle) MarkErrored(v0 context.Context, v1 string, v2 string) error {
	r0 := m.MarkErroredFunc.nextHook()(v0, v1, v2)
	m.MarkErroredFunc.appendCall(JobHandleMarkErroredFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the MarkErrored method
// of the parent MockJobHandle instance is invoked and the hook queue is
// empty.
func (f *JobHandleMarkErroredFunc) SetDefaultHook(hook func(context.Context, string, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MarkErrored method of the parent MockJobHandle instance inovkes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *JobHandleMarkErroredFunc) PushHook(hook func(context.Context, string, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *JobHandleMarkErroredFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string, string) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *JobHandleMarkErroredFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string, string) error {
		return r0
	})
}

func (f *JobHandleMarkErroredFunc) nextHook() func(context.Context, string, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *JobHandleMarkErroredFunc) appendCall(r0 JobHandleMarkErroredFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of JobHandleMarkErroredFuncCall objects
// describing the invocations of this function.
func (f *JobHandleMarkErroredFunc) History() []JobHandleMarkErroredFuncCall {
	f.mutex.Lock()
	history := make([]JobHandleMarkErroredFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// JobHandleMarkErroredFuncCall is an object that describes an invocation of
// method MarkErrored on an instance of MockJobHandle.
type JobHandleMarkErroredFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c JobHandleMarkErroredFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c JobHandleMarkErroredFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// JobHandleRollbackToLastSavepointFunc describes the behavior when the
// RollbackToLastSavepoint method of the parent MockJobHandle instance is
// invoked.
type JobHandleRollbackToLastSavepointFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []JobHandleRollbackToLastSavepointFuncCall
	mutex       sync.Mutex
}

// RollbackToLastSavepoint delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockJobHandle) RollbackToLastSavepoint(v0 context.Context) error {
	r0 := m.RollbackToLastSavepointFunc.nextHook()(v0)
	m.RollbackToLastSavepointFunc.appendCall(JobHandleRollbackToLastSavepointFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// RollbackToLastSavepoint method of the parent MockJobHandle instance is
// invoked and the hook queue is empty.
func (f *JobHandleRollbackToLastSavepointFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RollbackToLastSavepoint method of the parent MockJobHandle instance
// inovkes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *JobHandleRollbackToLastSavepointFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *JobHandleRollbackToLastSavepointFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *JobHandleRollbackToLastSavepointFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *JobHandleRollbackToLastSavepointFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *JobHandleRollbackToLastSavepointFunc) appendCall(r0 JobHandleRollbackToLastSavepointFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of JobHandleRollbackToLastSavepointFuncCall
// objects describing the invocations of this function.
func (f *JobHandleRollbackToLastSavepointFunc) History() []JobHandleRollbackToLastSavepointFuncCall {
	f.mutex.Lock()
	history := make([]JobHandleRollbackToLastSavepointFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// JobHandleRollbackToLastSavepointFuncCall is an object that describes an
// invocation of method RollbackToLastSavepoint on an instance of
// MockJobHandle.
type JobHandleRollbackToLastSavepointFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c JobHandleRollbackToLastSavepointFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c JobHandleRollbackToLastSavepointFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// JobHandleSavepointFunc describes the behavior when the Savepoint method
// of the parent MockJobHandle instance is invoked.
type JobHandleSavepointFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []JobHandleSavepointFuncCall
	mutex       sync.Mutex
}

// Savepoint delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockJobHandle) Savepoint(v0 context.Context) error {
	r0 := m.SavepointFunc.nextHook()(v0)
	m.SavepointFunc.appendCall(JobHandleSavepointFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Savepoint method of
// the parent MockJobHandle instance is invoked and the hook queue is empty.
func (f *JobHandleSavepointFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Savepoint method of the parent MockJobHandle instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *JobHandleSavepointFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *JobHandleSavepointFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *JobHandleSavepointFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *JobHandleSavepointFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *JobHandleSavepointFunc) appendCall(r0 JobHandleSavepointFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of JobHandleSavepointFuncCall objects
// describing the invocations of this function.
func (f *JobHandleSavepointFunc) History() []JobHandleSavepointFuncCall {
	f.mutex.Lock()
	history := make([]JobHandleSavepointFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// JobHandleSavepointFuncCall is an object that describes an invocation of
// method Savepoint on an instance of MockJobHandle.
type JobHandleSavepointFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c JobHandleSavepointFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c JobHandleSavepointFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
