// Code generated by go-mockgen 1.3.3; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package codenav

import (
	"context"
	"sync"

	lsifstore "github.com/sourcegraph/sourcegraph/internal/codeintel/codenav/internal/lsifstore"
	shared "github.com/sourcegraph/sourcegraph/internal/codeintel/codenav/shared"
	precise "github.com/sourcegraph/sourcegraph/lib/codeintel/precise"
)

// MockLsifStore is a mock implementation of the LsifStore interface (from
// the package
// github.com/sourcegraph/sourcegraph/internal/codeintel/codenav/internal/lsifstore)
// used for unit testing.
type MockLsifStore struct {
	// GetBulkMonikerLocationsFunc is an instance of a mock function object
	// controlling the behavior of the method GetBulkMonikerLocations.
	GetBulkMonikerLocationsFunc *LsifStoreGetBulkMonikerLocationsFunc
	// GetDefinitionLocationsFunc is an instance of a mock function object
	// controlling the behavior of the method GetDefinitionLocations.
	GetDefinitionLocationsFunc *LsifStoreGetDefinitionLocationsFunc
	// GetDiagnosticsFunc is an instance of a mock function object
	// controlling the behavior of the method GetDiagnostics.
	GetDiagnosticsFunc *LsifStoreGetDiagnosticsFunc
	// GetHoverFunc is an instance of a mock function object controlling the
	// behavior of the method GetHover.
	GetHoverFunc *LsifStoreGetHoverFunc
	// GetImplementationLocationsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetImplementationLocations.
	GetImplementationLocationsFunc *LsifStoreGetImplementationLocationsFunc
	// GetMonikersByPositionFunc is an instance of a mock function object
	// controlling the behavior of the method GetMonikersByPosition.
	GetMonikersByPositionFunc *LsifStoreGetMonikersByPositionFunc
	// GetPackageInformationFunc is an instance of a mock function object
	// controlling the behavior of the method GetPackageInformation.
	GetPackageInformationFunc *LsifStoreGetPackageInformationFunc
	// GetRangesFunc is an instance of a mock function object controlling
	// the behavior of the method GetRanges.
	GetRangesFunc *LsifStoreGetRangesFunc
	// GetReferenceLocationsFunc is an instance of a mock function object
	// controlling the behavior of the method GetReferenceLocations.
	GetReferenceLocationsFunc *LsifStoreGetReferenceLocationsFunc
	// GetStencilFunc is an instance of a mock function object controlling
	// the behavior of the method GetStencil.
	GetStencilFunc *LsifStoreGetStencilFunc
}

// NewMockLsifStore creates a new mock of the LsifStore interface. All
// methods return zero values for all results, unless overwritten.
func NewMockLsifStore() *MockLsifStore {
	return &MockLsifStore{
		GetBulkMonikerLocationsFunc: &LsifStoreGetBulkMonikerLocationsFunc{
			defaultHook: func(context.Context, string, []int, []precise.MonikerData, int, int) (r0 []shared.Location, r1 int, r2 error) {
				return
			},
		},
		GetDefinitionLocationsFunc: &LsifStoreGetDefinitionLocationsFunc{
			defaultHook: func(context.Context, int, string, int, int, int, int) (r0 []shared.Location, r1 int, r2 error) {
				return
			},
		},
		GetDiagnosticsFunc: &LsifStoreGetDiagnosticsFunc{
			defaultHook: func(context.Context, int, string, int, int) (r0 []shared.Diagnostic, r1 int, r2 error) {
				return
			},
		},
		GetHoverFunc: &LsifStoreGetHoverFunc{
			defaultHook: func(context.Context, int, string, int, int) (r0 string, r1 shared.Range, r2 bool, r3 error) {
				return
			},
		},
		GetImplementationLocationsFunc: &LsifStoreGetImplementationLocationsFunc{
			defaultHook: func(context.Context, int, string, int, int, int, int) (r0 []shared.Location, r1 int, r2 error) {
				return
			},
		},
		GetMonikersByPositionFunc: &LsifStoreGetMonikersByPositionFunc{
			defaultHook: func(context.Context, int, string, int, int) (r0 [][]precise.MonikerData, r1 error) {
				return
			},
		},
		GetPackageInformationFunc: &LsifStoreGetPackageInformationFunc{
			defaultHook: func(context.Context, int, string, string) (r0 precise.PackageInformationData, r1 bool, r2 error) {
				return
			},
		},
		GetRangesFunc: &LsifStoreGetRangesFunc{
			defaultHook: func(context.Context, int, string, int, int) (r0 []shared.CodeIntelligenceRange, r1 error) {
				return
			},
		},
		GetReferenceLocationsFunc: &LsifStoreGetReferenceLocationsFunc{
			defaultHook: func(context.Context, int, string, int, int, int, int) (r0 []shared.Location, r1 int, r2 error) {
				return
			},
		},
		GetStencilFunc: &LsifStoreGetStencilFunc{
			defaultHook: func(context.Context, int, string) (r0 []shared.Range, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockLsifStore creates a new mock of the LsifStore interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockLsifStore() *MockLsifStore {
	return &MockLsifStore{
		GetBulkMonikerLocationsFunc: &LsifStoreGetBulkMonikerLocationsFunc{
			defaultHook: func(context.Context, string, []int, []precise.MonikerData, int, int) ([]shared.Location, int, error) {
				panic("unexpected invocation of MockLsifStore.GetBulkMonikerLocations")
			},
		},
		GetDefinitionLocationsFunc: &LsifStoreGetDefinitionLocationsFunc{
			defaultHook: func(context.Context, int, string, int, int, int, int) ([]shared.Location, int, error) {
				panic("unexpected invocation of MockLsifStore.GetDefinitionLocations")
			},
		},
		GetDiagnosticsFunc: &LsifStoreGetDiagnosticsFunc{
			defaultHook: func(context.Context, int, string, int, int) ([]shared.Diagnostic, int, error) {
				panic("unexpected invocation of MockLsifStore.GetDiagnostics")
			},
		},
		GetHoverFunc: &LsifStoreGetHoverFunc{
			defaultHook: func(context.Context, int, string, int, int) (string, shared.Range, bool, error) {
				panic("unexpected invocation of MockLsifStore.GetHover")
			},
		},
		GetImplementationLocationsFunc: &LsifStoreGetImplementationLocationsFunc{
			defaultHook: func(context.Context, int, string, int, int, int, int) ([]shared.Location, int, error) {
				panic("unexpected invocation of MockLsifStore.GetImplementationLocations")
			},
		},
		GetMonikersByPositionFunc: &LsifStoreGetMonikersByPositionFunc{
			defaultHook: func(context.Context, int, string, int, int) ([][]precise.MonikerData, error) {
				panic("unexpected invocation of MockLsifStore.GetMonikersByPosition")
			},
		},
		GetPackageInformationFunc: &LsifStoreGetPackageInformationFunc{
			defaultHook: func(context.Context, int, string, string) (precise.PackageInformationData, bool, error) {
				panic("unexpected invocation of MockLsifStore.GetPackageInformation")
			},
		},
		GetRangesFunc: &LsifStoreGetRangesFunc{
			defaultHook: func(context.Context, int, string, int, int) ([]shared.CodeIntelligenceRange, error) {
				panic("unexpected invocation of MockLsifStore.GetRanges")
			},
		},
		GetReferenceLocationsFunc: &LsifStoreGetReferenceLocationsFunc{
			defaultHook: func(context.Context, int, string, int, int, int, int) ([]shared.Location, int, error) {
				panic("unexpected invocation of MockLsifStore.GetReferenceLocations")
			},
		},
		GetStencilFunc: &LsifStoreGetStencilFunc{
			defaultHook: func(context.Context, int, string) ([]shared.Range, error) {
				panic("unexpected invocation of MockLsifStore.GetStencil")
			},
		},
	}
}

// NewMockLsifStoreFrom creates a new mock of the MockLsifStore interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockLsifStoreFrom(i lsifstore.LsifStore) *MockLsifStore {
	return &MockLsifStore{
		GetBulkMonikerLocationsFunc: &LsifStoreGetBulkMonikerLocationsFunc{
			defaultHook: i.GetBulkMonikerLocations,
		},
		GetDefinitionLocationsFunc: &LsifStoreGetDefinitionLocationsFunc{
			defaultHook: i.GetDefinitionLocations,
		},
		GetDiagnosticsFunc: &LsifStoreGetDiagnosticsFunc{
			defaultHook: i.GetDiagnostics,
		},
		GetHoverFunc: &LsifStoreGetHoverFunc{
			defaultHook: i.GetHover,
		},
		GetImplementationLocationsFunc: &LsifStoreGetImplementationLocationsFunc{
			defaultHook: i.GetImplementationLocations,
		},
		GetMonikersByPositionFunc: &LsifStoreGetMonikersByPositionFunc{
			defaultHook: i.GetMonikersByPosition,
		},
		GetPackageInformationFunc: &LsifStoreGetPackageInformationFunc{
			defaultHook: i.GetPackageInformation,
		},
		GetRangesFunc: &LsifStoreGetRangesFunc{
			defaultHook: i.GetRanges,
		},
		GetReferenceLocationsFunc: &LsifStoreGetReferenceLocationsFunc{
			defaultHook: i.GetReferenceLocations,
		},
		GetStencilFunc: &LsifStoreGetStencilFunc{
			defaultHook: i.GetStencil,
		},
	}
}

// LsifStoreGetBulkMonikerLocationsFunc describes the behavior when the
// GetBulkMonikerLocations method of the parent MockLsifStore instance is
// invoked.
type LsifStoreGetBulkMonikerLocationsFunc struct {
	defaultHook func(context.Context, string, []int, []precise.MonikerData, int, int) ([]shared.Location, int, error)
	hooks       []func(context.Context, string, []int, []precise.MonikerData, int, int) ([]shared.Location, int, error)
	history     []LsifStoreGetBulkMonikerLocationsFuncCall
	mutex       sync.Mutex
}

// GetBulkMonikerLocations delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockLsifStore) GetBulkMonikerLocations(v0 context.Context, v1 string, v2 []int, v3 []precise.MonikerData, v4 int, v5 int) ([]shared.Location, int, error) {
	r0, r1, r2 := m.GetBulkMonikerLocationsFunc.nextHook()(v0, v1, v2, v3, v4, v5)
	m.GetBulkMonikerLocationsFunc.appendCall(LsifStoreGetBulkMonikerLocationsFuncCall{v0, v1, v2, v3, v4, v5, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// GetBulkMonikerLocations method of the parent MockLsifStore instance is
// invoked and the hook queue is empty.
func (f *LsifStoreGetBulkMonikerLocationsFunc) SetDefaultHook(hook func(context.Context, string, []int, []precise.MonikerData, int, int) ([]shared.Location, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetBulkMonikerLocations method of the parent MockLsifStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *LsifStoreGetBulkMonikerLocationsFunc) PushHook(hook func(context.Context, string, []int, []precise.MonikerData, int, int) ([]shared.Location, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LsifStoreGetBulkMonikerLocationsFunc) SetDefaultReturn(r0 []shared.Location, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, string, []int, []precise.MonikerData, int, int) ([]shared.Location, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LsifStoreGetBulkMonikerLocationsFunc) PushReturn(r0 []shared.Location, r1 int, r2 error) {
	f.PushHook(func(context.Context, string, []int, []precise.MonikerData, int, int) ([]shared.Location, int, error) {
		return r0, r1, r2
	})
}

func (f *LsifStoreGetBulkMonikerLocationsFunc) nextHook() func(context.Context, string, []int, []precise.MonikerData, int, int) ([]shared.Location, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LsifStoreGetBulkMonikerLocationsFunc) appendCall(r0 LsifStoreGetBulkMonikerLocationsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LsifStoreGetBulkMonikerLocationsFuncCall
// objects describing the invocations of this function.
func (f *LsifStoreGetBulkMonikerLocationsFunc) History() []LsifStoreGetBulkMonikerLocationsFuncCall {
	f.mutex.Lock()
	history := make([]LsifStoreGetBulkMonikerLocationsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LsifStoreGetBulkMonikerLocationsFuncCall is an object that describes an
// invocation of method GetBulkMonikerLocations on an instance of
// MockLsifStore.
type LsifStoreGetBulkMonikerLocationsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []precise.MonikerData
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Location
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LsifStoreGetBulkMonikerLocationsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LsifStoreGetBulkMonikerLocationsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// LsifStoreGetDefinitionLocationsFunc describes the behavior when the
// GetDefinitionLocations method of the parent MockLsifStore instance is
// invoked.
type LsifStoreGetDefinitionLocationsFunc struct {
	defaultHook func(context.Context, int, string, int, int, int, int) ([]shared.Location, int, error)
	hooks       []func(context.Context, int, string, int, int, int, int) ([]shared.Location, int, error)
	history     []LsifStoreGetDefinitionLocationsFuncCall
	mutex       sync.Mutex
}

// GetDefinitionLocations delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockLsifStore) GetDefinitionLocations(v0 context.Context, v1 int, v2 string, v3 int, v4 int, v5 int, v6 int) ([]shared.Location, int, error) {
	r0, r1, r2 := m.GetDefinitionLocationsFunc.nextHook()(v0, v1, v2, v3, v4, v5, v6)
	m.GetDefinitionLocationsFunc.appendCall(LsifStoreGetDefinitionLocationsFuncCall{v0, v1, v2, v3, v4, v5, v6, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// GetDefinitionLocations method of the parent MockLsifStore instance is
// invoked and the hook queue is empty.
func (f *LsifStoreGetDefinitionLocationsFunc) SetDefaultHook(hook func(context.Context, int, string, int, int, int, int) ([]shared.Location, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDefinitionLocations method of the parent MockLsifStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *LsifStoreGetDefinitionLocationsFunc) PushHook(hook func(context.Context, int, string, int, int, int, int) ([]shared.Location, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LsifStoreGetDefinitionLocationsFunc) SetDefaultReturn(r0 []shared.Location, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, int, string, int, int, int, int) ([]shared.Location, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LsifStoreGetDefinitionLocationsFunc) PushReturn(r0 []shared.Location, r1 int, r2 error) {
	f.PushHook(func(context.Context, int, string, int, int, int, int) ([]shared.Location, int, error) {
		return r0, r1, r2
	})
}

func (f *LsifStoreGetDefinitionLocationsFunc) nextHook() func(context.Context, int, string, int, int, int, int) ([]shared.Location, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LsifStoreGetDefinitionLocationsFunc) appendCall(r0 LsifStoreGetDefinitionLocationsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LsifStoreGetDefinitionLocationsFuncCall
// objects describing the invocations of this function.
func (f *LsifStoreGetDefinitionLocationsFunc) History() []LsifStoreGetDefinitionLocationsFuncCall {
	f.mutex.Lock()
	history := make([]LsifStoreGetDefinitionLocationsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LsifStoreGetDefinitionLocationsFuncCall is an object that describes an
// invocation of method GetDefinitionLocations on an instance of
// MockLsifStore.
type LsifStoreGetDefinitionLocationsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 int
	// Arg6 is the value of the 7th argument passed to this method
	// invocation.
	Arg6 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Location
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LsifStoreGetDefinitionLocationsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5, c.Arg6}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LsifStoreGetDefinitionLocationsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// LsifStoreGetDiagnosticsFunc describes the behavior when the
// GetDiagnostics method of the parent MockLsifStore instance is invoked.
type LsifStoreGetDiagnosticsFunc struct {
	defaultHook func(context.Context, int, string, int, int) ([]shared.Diagnostic, int, error)
	hooks       []func(context.Context, int, string, int, int) ([]shared.Diagnostic, int, error)
	history     []LsifStoreGetDiagnosticsFuncCall
	mutex       sync.Mutex
}

// GetDiagnostics delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockLsifStore) GetDiagnostics(v0 context.Context, v1 int, v2 string, v3 int, v4 int) ([]shared.Diagnostic, int, error) {
	r0, r1, r2 := m.GetDiagnosticsFunc.nextHook()(v0, v1, v2, v3, v4)
	m.GetDiagnosticsFunc.appendCall(LsifStoreGetDiagnosticsFuncCall{v0, v1, v2, v3, v4, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetDiagnostics
// method of the parent MockLsifStore instance is invoked and the hook queue
// is empty.
func (f *LsifStoreGetDiagnosticsFunc) SetDefaultHook(hook func(context.Context, int, string, int, int) ([]shared.Diagnostic, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDiagnostics method of the parent MockLsifStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *LsifStoreGetDiagnosticsFunc) PushHook(hook func(context.Context, int, string, int, int) ([]shared.Diagnostic, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LsifStoreGetDiagnosticsFunc) SetDefaultReturn(r0 []shared.Diagnostic, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, int, string, int, int) ([]shared.Diagnostic, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LsifStoreGetDiagnosticsFunc) PushReturn(r0 []shared.Diagnostic, r1 int, r2 error) {
	f.PushHook(func(context.Context, int, string, int, int) ([]shared.Diagnostic, int, error) {
		return r0, r1, r2
	})
}

func (f *LsifStoreGetDiagnosticsFunc) nextHook() func(context.Context, int, string, int, int) ([]shared.Diagnostic, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LsifStoreGetDiagnosticsFunc) appendCall(r0 LsifStoreGetDiagnosticsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LsifStoreGetDiagnosticsFuncCall objects
// describing the invocations of this function.
func (f *LsifStoreGetDiagnosticsFunc) History() []LsifStoreGetDiagnosticsFuncCall {
	f.mutex.Lock()
	history := make([]LsifStoreGetDiagnosticsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LsifStoreGetDiagnosticsFuncCall is an object that describes an invocation
// of method GetDiagnostics on an instance of MockLsifStore.
type LsifStoreGetDiagnosticsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Diagnostic
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LsifStoreGetDiagnosticsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LsifStoreGetDiagnosticsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// LsifStoreGetHoverFunc describes the behavior when the GetHover method of
// the parent MockLsifStore instance is invoked.
type LsifStoreGetHoverFunc struct {
	defaultHook func(context.Context, int, string, int, int) (string, shared.Range, bool, error)
	hooks       []func(context.Context, int, string, int, int) (string, shared.Range, bool, error)
	history     []LsifStoreGetHoverFuncCall
	mutex       sync.Mutex
}

// GetHover delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockLsifStore) GetHover(v0 context.Context, v1 int, v2 string, v3 int, v4 int) (string, shared.Range, bool, error) {
	r0, r1, r2, r3 := m.GetHoverFunc.nextHook()(v0, v1, v2, v3, v4)
	m.GetHoverFunc.appendCall(LsifStoreGetHoverFuncCall{v0, v1, v2, v3, v4, r0, r1, r2, r3})
	return r0, r1, r2, r3
}

// SetDefaultHook sets function that is called when the GetHover method of
// the parent MockLsifStore instance is invoked and the hook queue is empty.
func (f *LsifStoreGetHoverFunc) SetDefaultHook(hook func(context.Context, int, string, int, int) (string, shared.Range, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetHover method of the parent MockLsifStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *LsifStoreGetHoverFunc) PushHook(hook func(context.Context, int, string, int, int) (string, shared.Range, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LsifStoreGetHoverFunc) SetDefaultReturn(r0 string, r1 shared.Range, r2 bool, r3 error) {
	f.SetDefaultHook(func(context.Context, int, string, int, int) (string, shared.Range, bool, error) {
		return r0, r1, r2, r3
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LsifStoreGetHoverFunc) PushReturn(r0 string, r1 shared.Range, r2 bool, r3 error) {
	f.PushHook(func(context.Context, int, string, int, int) (string, shared.Range, bool, error) {
		return r0, r1, r2, r3
	})
}

func (f *LsifStoreGetHoverFunc) nextHook() func(context.Context, int, string, int, int) (string, shared.Range, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LsifStoreGetHoverFunc) appendCall(r0 LsifStoreGetHoverFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LsifStoreGetHoverFuncCall objects
// describing the invocations of this function.
func (f *LsifStoreGetHoverFunc) History() []LsifStoreGetHoverFuncCall {
	f.mutex.Lock()
	history := make([]LsifStoreGetHoverFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LsifStoreGetHoverFuncCall is an object that describes an invocation of
// method GetHover on an instance of MockLsifStore.
type LsifStoreGetHoverFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 shared.Range
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 bool
	// Result3 is the value of the 4th result returned from this method
	// invocation.
	Result3 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LsifStoreGetHoverFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LsifStoreGetHoverFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2, c.Result3}
}

// LsifStoreGetImplementationLocationsFunc describes the behavior when the
// GetImplementationLocations method of the parent MockLsifStore instance is
// invoked.
type LsifStoreGetImplementationLocationsFunc struct {
	defaultHook func(context.Context, int, string, int, int, int, int) ([]shared.Location, int, error)
	hooks       []func(context.Context, int, string, int, int, int, int) ([]shared.Location, int, error)
	history     []LsifStoreGetImplementationLocationsFuncCall
	mutex       sync.Mutex
}

// GetImplementationLocations delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockLsifStore) GetImplementationLocations(v0 context.Context, v1 int, v2 string, v3 int, v4 int, v5 int, v6 int) ([]shared.Location, int, error) {
	r0, r1, r2 := m.GetImplementationLocationsFunc.nextHook()(v0, v1, v2, v3, v4, v5, v6)
	m.GetImplementationLocationsFunc.appendCall(LsifStoreGetImplementationLocationsFuncCall{v0, v1, v2, v3, v4, v5, v6, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// GetImplementationLocations method of the parent MockLsifStore instance is
// invoked and the hook queue is empty.
func (f *LsifStoreGetImplementationLocationsFunc) SetDefaultHook(hook func(context.Context, int, string, int, int, int, int) ([]shared.Location, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetImplementationLocations method of the parent MockLsifStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *LsifStoreGetImplementationLocationsFunc) PushHook(hook func(context.Context, int, string, int, int, int, int) ([]shared.Location, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LsifStoreGetImplementationLocationsFunc) SetDefaultReturn(r0 []shared.Location, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, int, string, int, int, int, int) ([]shared.Location, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LsifStoreGetImplementationLocationsFunc) PushReturn(r0 []shared.Location, r1 int, r2 error) {
	f.PushHook(func(context.Context, int, string, int, int, int, int) ([]shared.Location, int, error) {
		return r0, r1, r2
	})
}

func (f *LsifStoreGetImplementationLocationsFunc) nextHook() func(context.Context, int, string, int, int, int, int) ([]shared.Location, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LsifStoreGetImplementationLocationsFunc) appendCall(r0 LsifStoreGetImplementationLocationsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LsifStoreGetImplementationLocationsFuncCall
// objects describing the invocations of this function.
func (f *LsifStoreGetImplementationLocationsFunc) History() []LsifStoreGetImplementationLocationsFuncCall {
	f.mutex.Lock()
	history := make([]LsifStoreGetImplementationLocationsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LsifStoreGetImplementationLocationsFuncCall is an object that describes
// an invocation of method GetImplementationLocations on an instance of
// MockLsifStore.
type LsifStoreGetImplementationLocationsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 int
	// Arg6 is the value of the 7th argument passed to this method
	// invocation.
	Arg6 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Location
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LsifStoreGetImplementationLocationsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5, c.Arg6}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LsifStoreGetImplementationLocationsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// LsifStoreGetMonikersByPositionFunc describes the behavior when the
// GetMonikersByPosition method of the parent MockLsifStore instance is
// invoked.
type LsifStoreGetMonikersByPositionFunc struct {
	defaultHook func(context.Context, int, string, int, int) ([][]precise.MonikerData, error)
	hooks       []func(context.Context, int, string, int, int) ([][]precise.MonikerData, error)
	history     []LsifStoreGetMonikersByPositionFuncCall
	mutex       sync.Mutex
}

// GetMonikersByPosition delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockLsifStore) GetMonikersByPosition(v0 context.Context, v1 int, v2 string, v3 int, v4 int) ([][]precise.MonikerData, error) {
	r0, r1 := m.GetMonikersByPositionFunc.nextHook()(v0, v1, v2, v3, v4)
	m.GetMonikersByPositionFunc.appendCall(LsifStoreGetMonikersByPositionFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetMonikersByPosition method of the parent MockLsifStore instance is
// invoked and the hook queue is empty.
func (f *LsifStoreGetMonikersByPositionFunc) SetDefaultHook(hook func(context.Context, int, string, int, int) ([][]precise.MonikerData, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetMonikersByPosition method of the parent MockLsifStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *LsifStoreGetMonikersByPositionFunc) PushHook(hook func(context.Context, int, string, int, int) ([][]precise.MonikerData, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LsifStoreGetMonikersByPositionFunc) SetDefaultReturn(r0 [][]precise.MonikerData, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string, int, int) ([][]precise.MonikerData, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LsifStoreGetMonikersByPositionFunc) PushReturn(r0 [][]precise.MonikerData, r1 error) {
	f.PushHook(func(context.Context, int, string, int, int) ([][]precise.MonikerData, error) {
		return r0, r1
	})
}

func (f *LsifStoreGetMonikersByPositionFunc) nextHook() func(context.Context, int, string, int, int) ([][]precise.MonikerData, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LsifStoreGetMonikersByPositionFunc) appendCall(r0 LsifStoreGetMonikersByPositionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LsifStoreGetMonikersByPositionFuncCall
// objects describing the invocations of this function.
func (f *LsifStoreGetMonikersByPositionFunc) History() []LsifStoreGetMonikersByPositionFuncCall {
	f.mutex.Lock()
	history := make([]LsifStoreGetMonikersByPositionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LsifStoreGetMonikersByPositionFuncCall is an object that describes an
// invocation of method GetMonikersByPosition on an instance of
// MockLsifStore.
type LsifStoreGetMonikersByPositionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 [][]precise.MonikerData
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LsifStoreGetMonikersByPositionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LsifStoreGetMonikersByPositionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// LsifStoreGetPackageInformationFunc describes the behavior when the
// GetPackageInformation method of the parent MockLsifStore instance is
// invoked.
type LsifStoreGetPackageInformationFunc struct {
	defaultHook func(context.Context, int, string, string) (precise.PackageInformationData, bool, error)
	hooks       []func(context.Context, int, string, string) (precise.PackageInformationData, bool, error)
	history     []LsifStoreGetPackageInformationFuncCall
	mutex       sync.Mutex
}

// GetPackageInformation delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockLsifStore) GetPackageInformation(v0 context.Context, v1 int, v2 string, v3 string) (precise.PackageInformationData, bool, error) {
	r0, r1, r2 := m.GetPackageInformationFunc.nextHook()(v0, v1, v2, v3)
	m.GetPackageInformationFunc.appendCall(LsifStoreGetPackageInformationFuncCall{v0, v1, v2, v3, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// GetPackageInformation method of the parent MockLsifStore instance is
// invoked and the hook queue is empty.
func (f *LsifStoreGetPackageInformationFunc) SetDefaultHook(hook func(context.Context, int, string, string) (precise.PackageInformationData, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPackageInformation method of the parent MockLsifStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *LsifStoreGetPackageInformationFunc) PushHook(hook func(context.Context, int, string, string) (precise.PackageInformationData, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LsifStoreGetPackageInformationFunc) SetDefaultReturn(r0 precise.PackageInformationData, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, int, string, string) (precise.PackageInformationData, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LsifStoreGetPackageInformationFunc) PushReturn(r0 precise.PackageInformationData, r1 bool, r2 error) {
	f.PushHook(func(context.Context, int, string, string) (precise.PackageInformationData, bool, error) {
		return r0, r1, r2
	})
}

func (f *LsifStoreGetPackageInformationFunc) nextHook() func(context.Context, int, string, string) (precise.PackageInformationData, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LsifStoreGetPackageInformationFunc) appendCall(r0 LsifStoreGetPackageInformationFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LsifStoreGetPackageInformationFuncCall
// objects describing the invocations of this function.
func (f *LsifStoreGetPackageInformationFunc) History() []LsifStoreGetPackageInformationFuncCall {
	f.mutex.Lock()
	history := make([]LsifStoreGetPackageInformationFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LsifStoreGetPackageInformationFuncCall is an object that describes an
// invocation of method GetPackageInformation on an instance of
// MockLsifStore.
type LsifStoreGetPackageInformationFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 precise.PackageInformationData
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LsifStoreGetPackageInformationFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LsifStoreGetPackageInformationFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// LsifStoreGetRangesFunc describes the behavior when the GetRanges method
// of the parent MockLsifStore instance is invoked.
type LsifStoreGetRangesFunc struct {
	defaultHook func(context.Context, int, string, int, int) ([]shared.CodeIntelligenceRange, error)
	hooks       []func(context.Context, int, string, int, int) ([]shared.CodeIntelligenceRange, error)
	history     []LsifStoreGetRangesFuncCall
	mutex       sync.Mutex
}

// GetRanges delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockLsifStore) GetRanges(v0 context.Context, v1 int, v2 string, v3 int, v4 int) ([]shared.CodeIntelligenceRange, error) {
	r0, r1 := m.GetRangesFunc.nextHook()(v0, v1, v2, v3, v4)
	m.GetRangesFunc.appendCall(LsifStoreGetRangesFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetRanges method of
// the parent MockLsifStore instance is invoked and the hook queue is empty.
func (f *LsifStoreGetRangesFunc) SetDefaultHook(hook func(context.Context, int, string, int, int) ([]shared.CodeIntelligenceRange, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetRanges method of the parent MockLsifStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *LsifStoreGetRangesFunc) PushHook(hook func(context.Context, int, string, int, int) ([]shared.CodeIntelligenceRange, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LsifStoreGetRangesFunc) SetDefaultReturn(r0 []shared.CodeIntelligenceRange, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string, int, int) ([]shared.CodeIntelligenceRange, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LsifStoreGetRangesFunc) PushReturn(r0 []shared.CodeIntelligenceRange, r1 error) {
	f.PushHook(func(context.Context, int, string, int, int) ([]shared.CodeIntelligenceRange, error) {
		return r0, r1
	})
}

func (f *LsifStoreGetRangesFunc) nextHook() func(context.Context, int, string, int, int) ([]shared.CodeIntelligenceRange, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LsifStoreGetRangesFunc) appendCall(r0 LsifStoreGetRangesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LsifStoreGetRangesFuncCall objects
// describing the invocations of this function.
func (f *LsifStoreGetRangesFunc) History() []LsifStoreGetRangesFuncCall {
	f.mutex.Lock()
	history := make([]LsifStoreGetRangesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LsifStoreGetRangesFuncCall is an object that describes an invocation of
// method GetRanges on an instance of MockLsifStore.
type LsifStoreGetRangesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.CodeIntelligenceRange
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LsifStoreGetRangesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LsifStoreGetRangesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// LsifStoreGetReferenceLocationsFunc describes the behavior when the
// GetReferenceLocations method of the parent MockLsifStore instance is
// invoked.
type LsifStoreGetReferenceLocationsFunc struct {
	defaultHook func(context.Context, int, string, int, int, int, int) ([]shared.Location, int, error)
	hooks       []func(context.Context, int, string, int, int, int, int) ([]shared.Location, int, error)
	history     []LsifStoreGetReferenceLocationsFuncCall
	mutex       sync.Mutex
}

// GetReferenceLocations delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockLsifStore) GetReferenceLocations(v0 context.Context, v1 int, v2 string, v3 int, v4 int, v5 int, v6 int) ([]shared.Location, int, error) {
	r0, r1, r2 := m.GetReferenceLocationsFunc.nextHook()(v0, v1, v2, v3, v4, v5, v6)
	m.GetReferenceLocationsFunc.appendCall(LsifStoreGetReferenceLocationsFuncCall{v0, v1, v2, v3, v4, v5, v6, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// GetReferenceLocations method of the parent MockLsifStore instance is
// invoked and the hook queue is empty.
func (f *LsifStoreGetReferenceLocationsFunc) SetDefaultHook(hook func(context.Context, int, string, int, int, int, int) ([]shared.Location, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetReferenceLocations method of the parent MockLsifStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *LsifStoreGetReferenceLocationsFunc) PushHook(hook func(context.Context, int, string, int, int, int, int) ([]shared.Location, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LsifStoreGetReferenceLocationsFunc) SetDefaultReturn(r0 []shared.Location, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, int, string, int, int, int, int) ([]shared.Location, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LsifStoreGetReferenceLocationsFunc) PushReturn(r0 []shared.Location, r1 int, r2 error) {
	f.PushHook(func(context.Context, int, string, int, int, int, int) ([]shared.Location, int, error) {
		return r0, r1, r2
	})
}

func (f *LsifStoreGetReferenceLocationsFunc) nextHook() func(context.Context, int, string, int, int, int, int) ([]shared.Location, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LsifStoreGetReferenceLocationsFunc) appendCall(r0 LsifStoreGetReferenceLocationsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LsifStoreGetReferenceLocationsFuncCall
// objects describing the invocations of this function.
func (f *LsifStoreGetReferenceLocationsFunc) History() []LsifStoreGetReferenceLocationsFuncCall {
	f.mutex.Lock()
	history := make([]LsifStoreGetReferenceLocationsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LsifStoreGetReferenceLocationsFuncCall is an object that describes an
// invocation of method GetReferenceLocations on an instance of
// MockLsifStore.
type LsifStoreGetReferenceLocationsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 int
	// Arg6 is the value of the 7th argument passed to this method
	// invocation.
	Arg6 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Location
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LsifStoreGetReferenceLocationsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5, c.Arg6}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LsifStoreGetReferenceLocationsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// LsifStoreGetStencilFunc describes the behavior when the GetStencil method
// of the parent MockLsifStore instance is invoked.
type LsifStoreGetStencilFunc struct {
	defaultHook func(context.Context, int, string) ([]shared.Range, error)
	hooks       []func(context.Context, int, string) ([]shared.Range, error)
	history     []LsifStoreGetStencilFuncCall
	mutex       sync.Mutex
}

// GetStencil delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockLsifStore) GetStencil(v0 context.Context, v1 int, v2 string) ([]shared.Range, error) {
	r0, r1 := m.GetStencilFunc.nextHook()(v0, v1, v2)
	m.GetStencilFunc.appendCall(LsifStoreGetStencilFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetStencil method of
// the parent MockLsifStore instance is invoked and the hook queue is empty.
func (f *LsifStoreGetStencilFunc) SetDefaultHook(hook func(context.Context, int, string) ([]shared.Range, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetStencil method of the parent MockLsifStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *LsifStoreGetStencilFunc) PushHook(hook func(context.Context, int, string) ([]shared.Range, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LsifStoreGetStencilFunc) SetDefaultReturn(r0 []shared.Range, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string) ([]shared.Range, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LsifStoreGetStencilFunc) PushReturn(r0 []shared.Range, r1 error) {
	f.PushHook(func(context.Context, int, string) ([]shared.Range, error) {
		return r0, r1
	})
}

func (f *LsifStoreGetStencilFunc) nextHook() func(context.Context, int, string) ([]shared.Range, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LsifStoreGetStencilFunc) appendCall(r0 LsifStoreGetStencilFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LsifStoreGetStencilFuncCall objects
// describing the invocations of this function.
func (f *LsifStoreGetStencilFunc) History() []LsifStoreGetStencilFuncCall {
	f.mutex.Lock()
	history := make([]LsifStoreGetStencilFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LsifStoreGetStencilFuncCall is an object that describes an invocation of
// method GetStencil on an instance of MockLsifStore.
type LsifStoreGetStencilFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Range
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LsifStoreGetStencilFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LsifStoreGetStencilFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
