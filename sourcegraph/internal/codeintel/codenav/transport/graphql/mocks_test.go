// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package graphql

import (
	"context"
	"sync"

	codenav "github.com/sourcegraph/sourcegraph/internal/codeintel/codenav"
	shared1 "github.com/sourcegraph/sourcegraph/internal/codeintel/codenav/shared"
	shared "github.com/sourcegraph/sourcegraph/internal/codeintel/uploads/shared"
)

// MockAutoIndexingService is a mock implementation of the
// AutoIndexingService interface (from the package
// github.com/sourcegraph/sourcegraph/internal/codeintel/codenav/transport/graphql)
// used for unit testing.
type MockAutoIndexingService struct {
	// QueueRepoRevFunc is an instance of a mock function object controlling
	// the behavior of the method QueueRepoRev.
	QueueRepoRevFunc *AutoIndexingServiceQueueRepoRevFunc
}

// NewMockAutoIndexingService creates a new mock of the AutoIndexingService
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockAutoIndexingService() *MockAutoIndexingService {
	return &MockAutoIndexingService{
		QueueRepoRevFunc: &AutoIndexingServiceQueueRepoRevFunc{
			defaultHook: func(context.Context, int, string) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockAutoIndexingService creates a new mock of the
// AutoIndexingService interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockAutoIndexingService() *MockAutoIndexingService {
	return &MockAutoIndexingService{
		QueueRepoRevFunc: &AutoIndexingServiceQueueRepoRevFunc{
			defaultHook: func(context.Context, int, string) error {
				panic("unexpected invocation of MockAutoIndexingService.QueueRepoRev")
			},
		},
	}
}

// NewMockAutoIndexingServiceFrom creates a new mock of the
// MockAutoIndexingService interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockAutoIndexingServiceFrom(i AutoIndexingService) *MockAutoIndexingService {
	return &MockAutoIndexingService{
		QueueRepoRevFunc: &AutoIndexingServiceQueueRepoRevFunc{
			defaultHook: i.QueueRepoRev,
		},
	}
}

// AutoIndexingServiceQueueRepoRevFunc describes the behavior when the
// QueueRepoRev method of the parent MockAutoIndexingService instance is
// invoked.
type AutoIndexingServiceQueueRepoRevFunc struct {
	defaultHook func(context.Context, int, string) error
	hooks       []func(context.Context, int, string) error
	history     []AutoIndexingServiceQueueRepoRevFuncCall
	mutex       sync.Mutex
}

// QueueRepoRev delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAutoIndexingService) QueueRepoRev(v0 context.Context, v1 int, v2 string) error {
	r0 := m.QueueRepoRevFunc.nextHook()(v0, v1, v2)
	m.QueueRepoRevFunc.appendCall(AutoIndexingServiceQueueRepoRevFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the QueueRepoRev method
// of the parent MockAutoIndexingService instance is invoked and the hook
// queue is empty.
func (f *AutoIndexingServiceQueueRepoRevFunc) SetDefaultHook(hook func(context.Context, int, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueueRepoRev method of the parent MockAutoIndexingService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *AutoIndexingServiceQueueRepoRevFunc) PushHook(hook func(context.Context, int, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AutoIndexingServiceQueueRepoRevFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AutoIndexingServiceQueueRepoRevFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int, string) error {
		return r0
	})
}

func (f *AutoIndexingServiceQueueRepoRevFunc) nextHook() func(context.Context, int, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AutoIndexingServiceQueueRepoRevFunc) appendCall(r0 AutoIndexingServiceQueueRepoRevFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AutoIndexingServiceQueueRepoRevFuncCall
// objects describing the invocations of this function.
func (f *AutoIndexingServiceQueueRepoRevFunc) History() []AutoIndexingServiceQueueRepoRevFuncCall {
	f.mutex.Lock()
	history := make([]AutoIndexingServiceQueueRepoRevFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AutoIndexingServiceQueueRepoRevFuncCall is an object that describes an
// invocation of method QueueRepoRev on an instance of
// MockAutoIndexingService.
type AutoIndexingServiceQueueRepoRevFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AutoIndexingServiceQueueRepoRevFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AutoIndexingServiceQueueRepoRevFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockCodeNavService is a mock implementation of the CodeNavService
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/codeintel/codenav/transport/graphql)
// used for unit testing.
type MockCodeNavService struct {
	// GetClosestDumpsForBlobFunc is an instance of a mock function object
	// controlling the behavior of the method GetClosestDumpsForBlob.
	GetClosestDumpsForBlobFunc *CodeNavServiceGetClosestDumpsForBlobFunc
	// GetDiagnosticsFunc is an instance of a mock function object
	// controlling the behavior of the method GetDiagnostics.
	GetDiagnosticsFunc *CodeNavServiceGetDiagnosticsFunc
	// GetHoverFunc is an instance of a mock function object controlling the
	// behavior of the method GetHover.
	GetHoverFunc *CodeNavServiceGetHoverFunc
	// GetRangesFunc is an instance of a mock function object controlling
	// the behavior of the method GetRanges.
	GetRangesFunc *CodeNavServiceGetRangesFunc
	// GetStencilFunc is an instance of a mock function object controlling
	// the behavior of the method GetStencil.
	GetStencilFunc *CodeNavServiceGetStencilFunc
	// NewGetDefinitionsFunc is an instance of a mock function object
	// controlling the behavior of the method NewGetDefinitions.
	NewGetDefinitionsFunc *CodeNavServiceNewGetDefinitionsFunc
	// NewGetImplementationsFunc is an instance of a mock function object
	// controlling the behavior of the method NewGetImplementations.
	NewGetImplementationsFunc *CodeNavServiceNewGetImplementationsFunc
	// NewGetPrototypesFunc is an instance of a mock function object
	// controlling the behavior of the method NewGetPrototypes.
	NewGetPrototypesFunc *CodeNavServiceNewGetPrototypesFunc
	// NewGetReferencesFunc is an instance of a mock function object
	// controlling the behavior of the method NewGetReferences.
	NewGetReferencesFunc *CodeNavServiceNewGetReferencesFunc
	// SnapshotForDocumentFunc is an instance of a mock function object
	// controlling the behavior of the method SnapshotForDocument.
	SnapshotForDocumentFunc *CodeNavServiceSnapshotForDocumentFunc
	// VisibleUploadsForPathFunc is an instance of a mock function object
	// controlling the behavior of the method VisibleUploadsForPath.
	VisibleUploadsForPathFunc *CodeNavServiceVisibleUploadsForPathFunc
}

// NewMockCodeNavService creates a new mock of the CodeNavService interface.
// All methods return zero values for all results, unless overwritten.
func NewMockCodeNavService() *MockCodeNavService {
	return &MockCodeNavService{
		GetClosestDumpsForBlobFunc: &CodeNavServiceGetClosestDumpsForBlobFunc{
			defaultHook: func(context.Context, int, string, string, bool, string) (r0 []shared.Dump, r1 error) {
				return
			},
		},
		GetDiagnosticsFunc: &CodeNavServiceGetDiagnosticsFunc{
			defaultHook: func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState) (r0 []codenav.DiagnosticAtUpload, r1 int, r2 error) {
				return
			},
		},
		GetHoverFunc: &CodeNavServiceGetHoverFunc{
			defaultHook: func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState) (r0 string, r1 shared1.Range, r2 bool, r3 error) {
				return
			},
		},
		GetRangesFunc: &CodeNavServiceGetRangesFunc{
			defaultHook: func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState, int, int) (r0 []codenav.AdjustedCodeIntelligenceRange, r1 error) {
				return
			},
		},
		GetStencilFunc: &CodeNavServiceGetStencilFunc{
			defaultHook: func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState) (r0 []shared1.Range, r1 error) {
				return
			},
		},
		NewGetDefinitionsFunc: &CodeNavServiceNewGetDefinitionsFunc{
			defaultHook: func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState) (r0 []shared1.UploadLocation, r1 error) {
				return
			},
		},
		NewGetImplementationsFunc: &CodeNavServiceNewGetImplementationsFunc{
			defaultHook: func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState, codenav.Cursor) (r0 []shared1.UploadLocation, r1 codenav.Cursor, r2 error) {
				return
			},
		},
		NewGetPrototypesFunc: &CodeNavServiceNewGetPrototypesFunc{
			defaultHook: func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState, codenav.Cursor) (r0 []shared1.UploadLocation, r1 codenav.Cursor, r2 error) {
				return
			},
		},
		NewGetReferencesFunc: &CodeNavServiceNewGetReferencesFunc{
			defaultHook: func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState, codenav.Cursor) (r0 []shared1.UploadLocation, r1 codenav.Cursor, r2 error) {
				return
			},
		},
		SnapshotForDocumentFunc: &CodeNavServiceSnapshotForDocumentFunc{
			defaultHook: func(context.Context, int, string, string, int) (r0 []shared1.SnapshotData, r1 error) {
				return
			},
		},
		VisibleUploadsForPathFunc: &CodeNavServiceVisibleUploadsForPathFunc{
			defaultHook: func(context.Context, codenav.RequestState) (r0 []shared.Dump, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockCodeNavService creates a new mock of the CodeNavService
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockCodeNavService() *MockCodeNavService {
	return &MockCodeNavService{
		GetClosestDumpsForBlobFunc: &CodeNavServiceGetClosestDumpsForBlobFunc{
			defaultHook: func(context.Context, int, string, string, bool, string) ([]shared.Dump, error) {
				panic("unexpected invocation of MockCodeNavService.GetClosestDumpsForBlob")
			},
		},
		GetDiagnosticsFunc: &CodeNavServiceGetDiagnosticsFunc{
			defaultHook: func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState) ([]codenav.DiagnosticAtUpload, int, error) {
				panic("unexpected invocation of MockCodeNavService.GetDiagnostics")
			},
		},
		GetHoverFunc: &CodeNavServiceGetHoverFunc{
			defaultHook: func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState) (string, shared1.Range, bool, error) {
				panic("unexpected invocation of MockCodeNavService.GetHover")
			},
		},
		GetRangesFunc: &CodeNavServiceGetRangesFunc{
			defaultHook: func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState, int, int) ([]codenav.AdjustedCodeIntelligenceRange, error) {
				panic("unexpected invocation of MockCodeNavService.GetRanges")
			},
		},
		GetStencilFunc: &CodeNavServiceGetStencilFunc{
			defaultHook: func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState) ([]shared1.Range, error) {
				panic("unexpected invocation of MockCodeNavService.GetStencil")
			},
		},
		NewGetDefinitionsFunc: &CodeNavServiceNewGetDefinitionsFunc{
			defaultHook: func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState) ([]shared1.UploadLocation, error) {
				panic("unexpected invocation of MockCodeNavService.NewGetDefinitions")
			},
		},
		NewGetImplementationsFunc: &CodeNavServiceNewGetImplementationsFunc{
			defaultHook: func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState, codenav.Cursor) ([]shared1.UploadLocation, codenav.Cursor, error) {
				panic("unexpected invocation of MockCodeNavService.NewGetImplementations")
			},
		},
		NewGetPrototypesFunc: &CodeNavServiceNewGetPrototypesFunc{
			defaultHook: func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState, codenav.Cursor) ([]shared1.UploadLocation, codenav.Cursor, error) {
				panic("unexpected invocation of MockCodeNavService.NewGetPrototypes")
			},
		},
		NewGetReferencesFunc: &CodeNavServiceNewGetReferencesFunc{
			defaultHook: func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState, codenav.Cursor) ([]shared1.UploadLocation, codenav.Cursor, error) {
				panic("unexpected invocation of MockCodeNavService.NewGetReferences")
			},
		},
		SnapshotForDocumentFunc: &CodeNavServiceSnapshotForDocumentFunc{
			defaultHook: func(context.Context, int, string, string, int) ([]shared1.SnapshotData, error) {
				panic("unexpected invocation of MockCodeNavService.SnapshotForDocument")
			},
		},
		VisibleUploadsForPathFunc: &CodeNavServiceVisibleUploadsForPathFunc{
			defaultHook: func(context.Context, codenav.RequestState) ([]shared.Dump, error) {
				panic("unexpected invocation of MockCodeNavService.VisibleUploadsForPath")
			},
		},
	}
}

// NewMockCodeNavServiceFrom creates a new mock of the MockCodeNavService
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockCodeNavServiceFrom(i CodeNavService) *MockCodeNavService {
	return &MockCodeNavService{
		GetClosestDumpsForBlobFunc: &CodeNavServiceGetClosestDumpsForBlobFunc{
			defaultHook: i.GetClosestDumpsForBlob,
		},
		GetDiagnosticsFunc: &CodeNavServiceGetDiagnosticsFunc{
			defaultHook: i.GetDiagnostics,
		},
		GetHoverFunc: &CodeNavServiceGetHoverFunc{
			defaultHook: i.GetHover,
		},
		GetRangesFunc: &CodeNavServiceGetRangesFunc{
			defaultHook: i.GetRanges,
		},
		GetStencilFunc: &CodeNavServiceGetStencilFunc{
			defaultHook: i.GetStencil,
		},
		NewGetDefinitionsFunc: &CodeNavServiceNewGetDefinitionsFunc{
			defaultHook: i.NewGetDefinitions,
		},
		NewGetImplementationsFunc: &CodeNavServiceNewGetImplementationsFunc{
			defaultHook: i.NewGetImplementations,
		},
		NewGetPrototypesFunc: &CodeNavServiceNewGetPrototypesFunc{
			defaultHook: i.NewGetPrototypes,
		},
		NewGetReferencesFunc: &CodeNavServiceNewGetReferencesFunc{
			defaultHook: i.NewGetReferences,
		},
		SnapshotForDocumentFunc: &CodeNavServiceSnapshotForDocumentFunc{
			defaultHook: i.SnapshotForDocument,
		},
		VisibleUploadsForPathFunc: &CodeNavServiceVisibleUploadsForPathFunc{
			defaultHook: i.VisibleUploadsForPath,
		},
	}
}

// CodeNavServiceGetClosestDumpsForBlobFunc describes the behavior when the
// GetClosestDumpsForBlob method of the parent MockCodeNavService instance
// is invoked.
type CodeNavServiceGetClosestDumpsForBlobFunc struct {
	defaultHook func(context.Context, int, string, string, bool, string) ([]shared.Dump, error)
	hooks       []func(context.Context, int, string, string, bool, string) ([]shared.Dump, error)
	history     []CodeNavServiceGetClosestDumpsForBlobFuncCall
	mutex       sync.Mutex
}

// GetClosestDumpsForBlob delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockCodeNavService) GetClosestDumpsForBlob(v0 context.Context, v1 int, v2 string, v3 string, v4 bool, v5 string) ([]shared.Dump, error) {
	r0, r1 := m.GetClosestDumpsForBlobFunc.nextHook()(v0, v1, v2, v3, v4, v5)
	m.GetClosestDumpsForBlobFunc.appendCall(CodeNavServiceGetClosestDumpsForBlobFuncCall{v0, v1, v2, v3, v4, v5, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetClosestDumpsForBlob method of the parent MockCodeNavService instance
// is invoked and the hook queue is empty.
func (f *CodeNavServiceGetClosestDumpsForBlobFunc) SetDefaultHook(hook func(context.Context, int, string, string, bool, string) ([]shared.Dump, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetClosestDumpsForBlob method of the parent MockCodeNavService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeNavServiceGetClosestDumpsForBlobFunc) PushHook(hook func(context.Context, int, string, string, bool, string) ([]shared.Dump, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceGetClosestDumpsForBlobFunc) SetDefaultReturn(r0 []shared.Dump, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string, string, bool, string) ([]shared.Dump, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceGetClosestDumpsForBlobFunc) PushReturn(r0 []shared.Dump, r1 error) {
	f.PushHook(func(context.Context, int, string, string, bool, string) ([]shared.Dump, error) {
		return r0, r1
	})
}

func (f *CodeNavServiceGetClosestDumpsForBlobFunc) nextHook() func(context.Context, int, string, string, bool, string) ([]shared.Dump, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceGetClosestDumpsForBlobFunc) appendCall(r0 CodeNavServiceGetClosestDumpsForBlobFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeNavServiceGetClosestDumpsForBlobFuncCall objects describing the
// invocations of this function.
func (f *CodeNavServiceGetClosestDumpsForBlobFunc) History() []CodeNavServiceGetClosestDumpsForBlobFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceGetClosestDumpsForBlobFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceGetClosestDumpsForBlobFuncCall is an object that describes
// an invocation of method GetClosestDumpsForBlob on an instance of
// MockCodeNavService.
type CodeNavServiceGetClosestDumpsForBlobFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 bool
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Dump
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceGetClosestDumpsForBlobFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceGetClosestDumpsForBlobFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeNavServiceGetDiagnosticsFunc describes the behavior when the
// GetDiagnostics method of the parent MockCodeNavService instance is
// invoked.
type CodeNavServiceGetDiagnosticsFunc struct {
	defaultHook func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState) ([]codenav.DiagnosticAtUpload, int, error)
	hooks       []func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState) ([]codenav.DiagnosticAtUpload, int, error)
	history     []CodeNavServiceGetDiagnosticsFuncCall
	mutex       sync.Mutex
}

// GetDiagnostics delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeNavService) GetDiagnostics(v0 context.Context, v1 codenav.PositionalRequestArgs, v2 codenav.RequestState) ([]codenav.DiagnosticAtUpload, int, error) {
	r0, r1, r2 := m.GetDiagnosticsFunc.nextHook()(v0, v1, v2)
	m.GetDiagnosticsFunc.appendCall(CodeNavServiceGetDiagnosticsFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetDiagnostics
// method of the parent MockCodeNavService instance is invoked and the hook
// queue is empty.
func (f *CodeNavServiceGetDiagnosticsFunc) SetDefaultHook(hook func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState) ([]codenav.DiagnosticAtUpload, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDiagnostics method of the parent MockCodeNavService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeNavServiceGetDiagnosticsFunc) PushHook(hook func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState) ([]codenav.DiagnosticAtUpload, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceGetDiagnosticsFunc) SetDefaultReturn(r0 []codenav.DiagnosticAtUpload, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState) ([]codenav.DiagnosticAtUpload, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceGetDiagnosticsFunc) PushReturn(r0 []codenav.DiagnosticAtUpload, r1 int, r2 error) {
	f.PushHook(func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState) ([]codenav.DiagnosticAtUpload, int, error) {
		return r0, r1, r2
	})
}

func (f *CodeNavServiceGetDiagnosticsFunc) nextHook() func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState) ([]codenav.DiagnosticAtUpload, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceGetDiagnosticsFunc) appendCall(r0 CodeNavServiceGetDiagnosticsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeNavServiceGetDiagnosticsFuncCall
// objects describing the invocations of this function.
func (f *CodeNavServiceGetDiagnosticsFunc) History() []CodeNavServiceGetDiagnosticsFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceGetDiagnosticsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceGetDiagnosticsFuncCall is an object that describes an
// invocation of method GetDiagnostics on an instance of MockCodeNavService.
type CodeNavServiceGetDiagnosticsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 codenav.PositionalRequestArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 codenav.RequestState
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []codenav.DiagnosticAtUpload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceGetDiagnosticsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceGetDiagnosticsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// CodeNavServiceGetHoverFunc describes the behavior when the GetHover
// method of the parent MockCodeNavService instance is invoked.
type CodeNavServiceGetHoverFunc struct {
	defaultHook func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState) (string, shared1.Range, bool, error)
	hooks       []func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState) (string, shared1.Range, bool, error)
	history     []CodeNavServiceGetHoverFuncCall
	mutex       sync.Mutex
}

// GetHover delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCodeNavService) GetHover(v0 context.Context, v1 codenav.PositionalRequestArgs, v2 codenav.RequestState) (string, shared1.Range, bool, error) {
	r0, r1, r2, r3 := m.GetHoverFunc.nextHook()(v0, v1, v2)
	m.GetHoverFunc.appendCall(CodeNavServiceGetHoverFuncCall{v0, v1, v2, r0, r1, r2, r3})
	return r0, r1, r2, r3
}

// SetDefaultHook sets function that is called when the GetHover method of
// the parent MockCodeNavService instance is invoked and the hook queue is
// empty.
func (f *CodeNavServiceGetHoverFunc) SetDefaultHook(hook func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState) (string, shared1.Range, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetHover method of the parent MockCodeNavService instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *CodeNavServiceGetHoverFunc) PushHook(hook func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState) (string, shared1.Range, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceGetHoverFunc) SetDefaultReturn(r0 string, r1 shared1.Range, r2 bool, r3 error) {
	f.SetDefaultHook(func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState) (string, shared1.Range, bool, error) {
		return r0, r1, r2, r3
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceGetHoverFunc) PushReturn(r0 string, r1 shared1.Range, r2 bool, r3 error) {
	f.PushHook(func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState) (string, shared1.Range, bool, error) {
		return r0, r1, r2, r3
	})
}

func (f *CodeNavServiceGetHoverFunc) nextHook() func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState) (string, shared1.Range, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceGetHoverFunc) appendCall(r0 CodeNavServiceGetHoverFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeNavServiceGetHoverFuncCall objects
// describing the invocations of this function.
func (f *CodeNavServiceGetHoverFunc) History() []CodeNavServiceGetHoverFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceGetHoverFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceGetHoverFuncCall is an object that describes an invocation
// of method GetHover on an instance of MockCodeNavService.
type CodeNavServiceGetHoverFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 codenav.PositionalRequestArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 codenav.RequestState
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 shared1.Range
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 bool
	// Result3 is the value of the 4th result returned from this method
	// invocation.
	Result3 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceGetHoverFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceGetHoverFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2, c.Result3}
}

// CodeNavServiceGetRangesFunc describes the behavior when the GetRanges
// method of the parent MockCodeNavService instance is invoked.
type CodeNavServiceGetRangesFunc struct {
	defaultHook func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState, int, int) ([]codenav.AdjustedCodeIntelligenceRange, error)
	hooks       []func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState, int, int) ([]codenav.AdjustedCodeIntelligenceRange, error)
	history     []CodeNavServiceGetRangesFuncCall
	mutex       sync.Mutex
}

// GetRanges delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCodeNavService) GetRanges(v0 context.Context, v1 codenav.PositionalRequestArgs, v2 codenav.RequestState, v3 int, v4 int) ([]codenav.AdjustedCodeIntelligenceRange, error) {
	r0, r1 := m.GetRangesFunc.nextHook()(v0, v1, v2, v3, v4)
	m.GetRangesFunc.appendCall(CodeNavServiceGetRangesFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetRanges method of
// the parent MockCodeNavService instance is invoked and the hook queue is
// empty.
func (f *CodeNavServiceGetRangesFunc) SetDefaultHook(hook func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState, int, int) ([]codenav.AdjustedCodeIntelligenceRange, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetRanges method of the parent MockCodeNavService instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *CodeNavServiceGetRangesFunc) PushHook(hook func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState, int, int) ([]codenav.AdjustedCodeIntelligenceRange, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceGetRangesFunc) SetDefaultReturn(r0 []codenav.AdjustedCodeIntelligenceRange, r1 error) {
	f.SetDefaultHook(func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState, int, int) ([]codenav.AdjustedCodeIntelligenceRange, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceGetRangesFunc) PushReturn(r0 []codenav.AdjustedCodeIntelligenceRange, r1 error) {
	f.PushHook(func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState, int, int) ([]codenav.AdjustedCodeIntelligenceRange, error) {
		return r0, r1
	})
}

func (f *CodeNavServiceGetRangesFunc) nextHook() func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState, int, int) ([]codenav.AdjustedCodeIntelligenceRange, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceGetRangesFunc) appendCall(r0 CodeNavServiceGetRangesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeNavServiceGetRangesFuncCall objects
// describing the invocations of this function.
func (f *CodeNavServiceGetRangesFunc) History() []CodeNavServiceGetRangesFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceGetRangesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceGetRangesFuncCall is an object that describes an invocation
// of method GetRanges on an instance of MockCodeNavService.
type CodeNavServiceGetRangesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 codenav.PositionalRequestArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 codenav.RequestState
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []codenav.AdjustedCodeIntelligenceRange
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceGetRangesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceGetRangesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeNavServiceGetStencilFunc describes the behavior when the GetStencil
// method of the parent MockCodeNavService instance is invoked.
type CodeNavServiceGetStencilFunc struct {
	defaultHook func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState) ([]shared1.Range, error)
	hooks       []func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState) ([]shared1.Range, error)
	history     []CodeNavServiceGetStencilFuncCall
	mutex       sync.Mutex
}

// GetStencil delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCodeNavService) GetStencil(v0 context.Context, v1 codenav.PositionalRequestArgs, v2 codenav.RequestState) ([]shared1.Range, error) {
	r0, r1 := m.GetStencilFunc.nextHook()(v0, v1, v2)
	m.GetStencilFunc.appendCall(CodeNavServiceGetStencilFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetStencil method of
// the parent MockCodeNavService instance is invoked and the hook queue is
// empty.
func (f *CodeNavServiceGetStencilFunc) SetDefaultHook(hook func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState) ([]shared1.Range, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetStencil method of the parent MockCodeNavService instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *CodeNavServiceGetStencilFunc) PushHook(hook func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState) ([]shared1.Range, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceGetStencilFunc) SetDefaultReturn(r0 []shared1.Range, r1 error) {
	f.SetDefaultHook(func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState) ([]shared1.Range, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceGetStencilFunc) PushReturn(r0 []shared1.Range, r1 error) {
	f.PushHook(func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState) ([]shared1.Range, error) {
		return r0, r1
	})
}

func (f *CodeNavServiceGetStencilFunc) nextHook() func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState) ([]shared1.Range, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceGetStencilFunc) appendCall(r0 CodeNavServiceGetStencilFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeNavServiceGetStencilFuncCall objects
// describing the invocations of this function.
func (f *CodeNavServiceGetStencilFunc) History() []CodeNavServiceGetStencilFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceGetStencilFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceGetStencilFuncCall is an object that describes an
// invocation of method GetStencil on an instance of MockCodeNavService.
type CodeNavServiceGetStencilFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 codenav.PositionalRequestArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 codenav.RequestState
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared1.Range
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceGetStencilFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceGetStencilFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeNavServiceNewGetDefinitionsFunc describes the behavior when the
// NewGetDefinitions method of the parent MockCodeNavService instance is
// invoked.
type CodeNavServiceNewGetDefinitionsFunc struct {
	defaultHook func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState) ([]shared1.UploadLocation, error)
	hooks       []func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState) ([]shared1.UploadLocation, error)
	history     []CodeNavServiceNewGetDefinitionsFuncCall
	mutex       sync.Mutex
}

// NewGetDefinitions delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeNavService) NewGetDefinitions(v0 context.Context, v1 codenav.PositionalRequestArgs, v2 codenav.RequestState) ([]shared1.UploadLocation, error) {
	r0, r1 := m.NewGetDefinitionsFunc.nextHook()(v0, v1, v2)
	m.NewGetDefinitionsFunc.appendCall(CodeNavServiceNewGetDefinitionsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the NewGetDefinitions
// method of the parent MockCodeNavService instance is invoked and the hook
// queue is empty.
func (f *CodeNavServiceNewGetDefinitionsFunc) SetDefaultHook(hook func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState) ([]shared1.UploadLocation, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// NewGetDefinitions method of the parent MockCodeNavService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeNavServiceNewGetDefinitionsFunc) PushHook(hook func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState) ([]shared1.UploadLocation, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceNewGetDefinitionsFunc) SetDefaultReturn(r0 []shared1.UploadLocation, r1 error) {
	f.SetDefaultHook(func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState) ([]shared1.UploadLocation, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceNewGetDefinitionsFunc) PushReturn(r0 []shared1.UploadLocation, r1 error) {
	f.PushHook(func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState) ([]shared1.UploadLocation, error) {
		return r0, r1
	})
}

func (f *CodeNavServiceNewGetDefinitionsFunc) nextHook() func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState) ([]shared1.UploadLocation, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceNewGetDefinitionsFunc) appendCall(r0 CodeNavServiceNewGetDefinitionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeNavServiceNewGetDefinitionsFuncCall
// objects describing the invocations of this function.
func (f *CodeNavServiceNewGetDefinitionsFunc) History() []CodeNavServiceNewGetDefinitionsFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceNewGetDefinitionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceNewGetDefinitionsFuncCall is an object that describes an
// invocation of method NewGetDefinitions on an instance of
// MockCodeNavService.
type CodeNavServiceNewGetDefinitionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 codenav.PositionalRequestArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 codenav.RequestState
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared1.UploadLocation
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceNewGetDefinitionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceNewGetDefinitionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeNavServiceNewGetImplementationsFunc describes the behavior when the
// NewGetImplementations method of the parent MockCodeNavService instance is
// invoked.
type CodeNavServiceNewGetImplementationsFunc struct {
	defaultHook func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState, codenav.Cursor) ([]shared1.UploadLocation, codenav.Cursor, error)
	hooks       []func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState, codenav.Cursor) ([]shared1.UploadLocation, codenav.Cursor, error)
	history     []CodeNavServiceNewGetImplementationsFuncCall
	mutex       sync.Mutex
}

// NewGetImplementations delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockCodeNavService) NewGetImplementations(v0 context.Context, v1 codenav.PositionalRequestArgs, v2 codenav.RequestState, v3 codenav.Cursor) ([]shared1.UploadLocation, codenav.Cursor, error) {
	r0, r1, r2 := m.NewGetImplementationsFunc.nextHook()(v0, v1, v2, v3)
	m.NewGetImplementationsFunc.appendCall(CodeNavServiceNewGetImplementationsFuncCall{v0, v1, v2, v3, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// NewGetImplementations method of the parent MockCodeNavService instance is
// invoked and the hook queue is empty.
func (f *CodeNavServiceNewGetImplementationsFunc) SetDefaultHook(hook func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState, codenav.Cursor) ([]shared1.UploadLocation, codenav.Cursor, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// NewGetImplementations method of the parent MockCodeNavService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeNavServiceNewGetImplementationsFunc) PushHook(hook func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState, codenav.Cursor) ([]shared1.UploadLocation, codenav.Cursor, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceNewGetImplementationsFunc) SetDefaultReturn(r0 []shared1.UploadLocation, r1 codenav.Cursor, r2 error) {
	f.SetDefaultHook(func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState, codenav.Cursor) ([]shared1.UploadLocation, codenav.Cursor, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceNewGetImplementationsFunc) PushReturn(r0 []shared1.UploadLocation, r1 codenav.Cursor, r2 error) {
	f.PushHook(func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState, codenav.Cursor) ([]shared1.UploadLocation, codenav.Cursor, error) {
		return r0, r1, r2
	})
}

func (f *CodeNavServiceNewGetImplementationsFunc) nextHook() func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState, codenav.Cursor) ([]shared1.UploadLocation, codenav.Cursor, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceNewGetImplementationsFunc) appendCall(r0 CodeNavServiceNewGetImplementationsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeNavServiceNewGetImplementationsFuncCall
// objects describing the invocations of this function.
func (f *CodeNavServiceNewGetImplementationsFunc) History() []CodeNavServiceNewGetImplementationsFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceNewGetImplementationsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceNewGetImplementationsFuncCall is an object that describes
// an invocation of method NewGetImplementations on an instance of
// MockCodeNavService.
type CodeNavServiceNewGetImplementationsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 codenav.PositionalRequestArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 codenav.RequestState
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 codenav.Cursor
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared1.UploadLocation
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 codenav.Cursor
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceNewGetImplementationsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceNewGetImplementationsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// CodeNavServiceNewGetPrototypesFunc describes the behavior when the
// NewGetPrototypes method of the parent MockCodeNavService instance is
// invoked.
type CodeNavServiceNewGetPrototypesFunc struct {
	defaultHook func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState, codenav.Cursor) ([]shared1.UploadLocation, codenav.Cursor, error)
	hooks       []func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState, codenav.Cursor) ([]shared1.UploadLocation, codenav.Cursor, error)
	history     []CodeNavServiceNewGetPrototypesFuncCall
	mutex       sync.Mutex
}

// NewGetPrototypes delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeNavService) NewGetPrototypes(v0 context.Context, v1 codenav.PositionalRequestArgs, v2 codenav.RequestState, v3 codenav.Cursor) ([]shared1.UploadLocation, codenav.Cursor, error) {
	r0, r1, r2 := m.NewGetPrototypesFunc.nextHook()(v0, v1, v2, v3)
	m.NewGetPrototypesFunc.appendCall(CodeNavServiceNewGetPrototypesFuncCall{v0, v1, v2, v3, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the NewGetPrototypes
// method of the parent MockCodeNavService instance is invoked and the hook
// queue is empty.
func (f *CodeNavServiceNewGetPrototypesFunc) SetDefaultHook(hook func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState, codenav.Cursor) ([]shared1.UploadLocation, codenav.Cursor, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// NewGetPrototypes method of the parent MockCodeNavService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeNavServiceNewGetPrototypesFunc) PushHook(hook func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState, codenav.Cursor) ([]shared1.UploadLocation, codenav.Cursor, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceNewGetPrototypesFunc) SetDefaultReturn(r0 []shared1.UploadLocation, r1 codenav.Cursor, r2 error) {
	f.SetDefaultHook(func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState, codenav.Cursor) ([]shared1.UploadLocation, codenav.Cursor, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceNewGetPrototypesFunc) PushReturn(r0 []shared1.UploadLocation, r1 codenav.Cursor, r2 error) {
	f.PushHook(func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState, codenav.Cursor) ([]shared1.UploadLocation, codenav.Cursor, error) {
		return r0, r1, r2
	})
}

func (f *CodeNavServiceNewGetPrototypesFunc) nextHook() func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState, codenav.Cursor) ([]shared1.UploadLocation, codenav.Cursor, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceNewGetPrototypesFunc) appendCall(r0 CodeNavServiceNewGetPrototypesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeNavServiceNewGetPrototypesFuncCall
// objects describing the invocations of this function.
func (f *CodeNavServiceNewGetPrototypesFunc) History() []CodeNavServiceNewGetPrototypesFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceNewGetPrototypesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceNewGetPrototypesFuncCall is an object that describes an
// invocation of method NewGetPrototypes on an instance of
// MockCodeNavService.
type CodeNavServiceNewGetPrototypesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 codenav.PositionalRequestArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 codenav.RequestState
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 codenav.Cursor
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared1.UploadLocation
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 codenav.Cursor
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceNewGetPrototypesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceNewGetPrototypesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// CodeNavServiceNewGetReferencesFunc describes the behavior when the
// NewGetReferences method of the parent MockCodeNavService instance is
// invoked.
type CodeNavServiceNewGetReferencesFunc struct {
	defaultHook func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState, codenav.Cursor) ([]shared1.UploadLocation, codenav.Cursor, error)
	hooks       []func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState, codenav.Cursor) ([]shared1.UploadLocation, codenav.Cursor, error)
	history     []CodeNavServiceNewGetReferencesFuncCall
	mutex       sync.Mutex
}

// NewGetReferences delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeNavService) NewGetReferences(v0 context.Context, v1 codenav.PositionalRequestArgs, v2 codenav.RequestState, v3 codenav.Cursor) ([]shared1.UploadLocation, codenav.Cursor, error) {
	r0, r1, r2 := m.NewGetReferencesFunc.nextHook()(v0, v1, v2, v3)
	m.NewGetReferencesFunc.appendCall(CodeNavServiceNewGetReferencesFuncCall{v0, v1, v2, v3, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the NewGetReferences
// method of the parent MockCodeNavService instance is invoked and the hook
// queue is empty.
func (f *CodeNavServiceNewGetReferencesFunc) SetDefaultHook(hook func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState, codenav.Cursor) ([]shared1.UploadLocation, codenav.Cursor, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// NewGetReferences method of the parent MockCodeNavService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeNavServiceNewGetReferencesFunc) PushHook(hook func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState, codenav.Cursor) ([]shared1.UploadLocation, codenav.Cursor, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceNewGetReferencesFunc) SetDefaultReturn(r0 []shared1.UploadLocation, r1 codenav.Cursor, r2 error) {
	f.SetDefaultHook(func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState, codenav.Cursor) ([]shared1.UploadLocation, codenav.Cursor, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceNewGetReferencesFunc) PushReturn(r0 []shared1.UploadLocation, r1 codenav.Cursor, r2 error) {
	f.PushHook(func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState, codenav.Cursor) ([]shared1.UploadLocation, codenav.Cursor, error) {
		return r0, r1, r2
	})
}

func (f *CodeNavServiceNewGetReferencesFunc) nextHook() func(context.Context, codenav.PositionalRequestArgs, codenav.RequestState, codenav.Cursor) ([]shared1.UploadLocation, codenav.Cursor, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceNewGetReferencesFunc) appendCall(r0 CodeNavServiceNewGetReferencesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeNavServiceNewGetReferencesFuncCall
// objects describing the invocations of this function.
func (f *CodeNavServiceNewGetReferencesFunc) History() []CodeNavServiceNewGetReferencesFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceNewGetReferencesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceNewGetReferencesFuncCall is an object that describes an
// invocation of method NewGetReferences on an instance of
// MockCodeNavService.
type CodeNavServiceNewGetReferencesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 codenav.PositionalRequestArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 codenav.RequestState
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 codenav.Cursor
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared1.UploadLocation
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 codenav.Cursor
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceNewGetReferencesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceNewGetReferencesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// CodeNavServiceSnapshotForDocumentFunc describes the behavior when the
// SnapshotForDocument method of the parent MockCodeNavService instance is
// invoked.
type CodeNavServiceSnapshotForDocumentFunc struct {
	defaultHook func(context.Context, int, string, string, int) ([]shared1.SnapshotData, error)
	hooks       []func(context.Context, int, string, string, int) ([]shared1.SnapshotData, error)
	history     []CodeNavServiceSnapshotForDocumentFuncCall
	mutex       sync.Mutex
}

// SnapshotForDocument delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeNavService) SnapshotForDocument(v0 context.Context, v1 int, v2 string, v3 string, v4 int) ([]shared1.SnapshotData, error) {
	r0, r1 := m.SnapshotForDocumentFunc.nextHook()(v0, v1, v2, v3, v4)
	m.SnapshotForDocumentFunc.appendCall(CodeNavServiceSnapshotForDocumentFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SnapshotForDocument
// method of the parent MockCodeNavService instance is invoked and the hook
// queue is empty.
func (f *CodeNavServiceSnapshotForDocumentFunc) SetDefaultHook(hook func(context.Context, int, string, string, int) ([]shared1.SnapshotData, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SnapshotForDocument method of the parent MockCodeNavService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeNavServiceSnapshotForDocumentFunc) PushHook(hook func(context.Context, int, string, string, int) ([]shared1.SnapshotData, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceSnapshotForDocumentFunc) SetDefaultReturn(r0 []shared1.SnapshotData, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string, string, int) ([]shared1.SnapshotData, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceSnapshotForDocumentFunc) PushReturn(r0 []shared1.SnapshotData, r1 error) {
	f.PushHook(func(context.Context, int, string, string, int) ([]shared1.SnapshotData, error) {
		return r0, r1
	})
}

func (f *CodeNavServiceSnapshotForDocumentFunc) nextHook() func(context.Context, int, string, string, int) ([]shared1.SnapshotData, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceSnapshotForDocumentFunc) appendCall(r0 CodeNavServiceSnapshotForDocumentFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeNavServiceSnapshotForDocumentFuncCall
// objects describing the invocations of this function.
func (f *CodeNavServiceSnapshotForDocumentFunc) History() []CodeNavServiceSnapshotForDocumentFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceSnapshotForDocumentFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceSnapshotForDocumentFuncCall is an object that describes an
// invocation of method SnapshotForDocument on an instance of
// MockCodeNavService.
type CodeNavServiceSnapshotForDocumentFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared1.SnapshotData
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceSnapshotForDocumentFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceSnapshotForDocumentFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeNavServiceVisibleUploadsForPathFunc describes the behavior when the
// VisibleUploadsForPath method of the parent MockCodeNavService instance is
// invoked.
type CodeNavServiceVisibleUploadsForPathFunc struct {
	defaultHook func(context.Context, codenav.RequestState) ([]shared.Dump, error)
	hooks       []func(context.Context, codenav.RequestState) ([]shared.Dump, error)
	history     []CodeNavServiceVisibleUploadsForPathFuncCall
	mutex       sync.Mutex
}

// VisibleUploadsForPath delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockCodeNavService) VisibleUploadsForPath(v0 context.Context, v1 codenav.RequestState) ([]shared.Dump, error) {
	r0, r1 := m.VisibleUploadsForPathFunc.nextHook()(v0, v1)
	m.VisibleUploadsForPathFunc.appendCall(CodeNavServiceVisibleUploadsForPathFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// VisibleUploadsForPath method of the parent MockCodeNavService instance is
// invoked and the hook queue is empty.
func (f *CodeNavServiceVisibleUploadsForPathFunc) SetDefaultHook(hook func(context.Context, codenav.RequestState) ([]shared.Dump, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// VisibleUploadsForPath method of the parent MockCodeNavService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeNavServiceVisibleUploadsForPathFunc) PushHook(hook func(context.Context, codenav.RequestState) ([]shared.Dump, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceVisibleUploadsForPathFunc) SetDefaultReturn(r0 []shared.Dump, r1 error) {
	f.SetDefaultHook(func(context.Context, codenav.RequestState) ([]shared.Dump, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceVisibleUploadsForPathFunc) PushReturn(r0 []shared.Dump, r1 error) {
	f.PushHook(func(context.Context, codenav.RequestState) ([]shared.Dump, error) {
		return r0, r1
	})
}

func (f *CodeNavServiceVisibleUploadsForPathFunc) nextHook() func(context.Context, codenav.RequestState) ([]shared.Dump, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceVisibleUploadsForPathFunc) appendCall(r0 CodeNavServiceVisibleUploadsForPathFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeNavServiceVisibleUploadsForPathFuncCall
// objects describing the invocations of this function.
func (f *CodeNavServiceVisibleUploadsForPathFunc) History() []CodeNavServiceVisibleUploadsForPathFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceVisibleUploadsForPathFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceVisibleUploadsForPathFuncCall is an object that describes
// an invocation of method VisibleUploadsForPath on an instance of
// MockCodeNavService.
type CodeNavServiceVisibleUploadsForPathFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 codenav.RequestState
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Dump
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceVisibleUploadsForPathFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceVisibleUploadsForPathFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
