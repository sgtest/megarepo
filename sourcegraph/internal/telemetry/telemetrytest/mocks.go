// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package telemetrytest

import (
	"context"
	"sync"

	telemetry "github.com/sourcegraph/sourcegraph/internal/telemetry"
	v1 "github.com/sourcegraph/sourcegraph/internal/telemetrygateway/v1"
)

// MockEventsStore is a mock implementation of the EventsStore interface
// (from the package github.com/sourcegraph/sourcegraph/internal/telemetry)
// used for unit testing.
type MockEventsStore struct {
	// StoreEventsFunc is an instance of a mock function object controlling
	// the behavior of the method StoreEvents.
	StoreEventsFunc *EventsStoreStoreEventsFunc
}

// NewMockEventsStore creates a new mock of the EventsStore interface. All
// methods return zero values for all results, unless overwritten.
func NewMockEventsStore() *MockEventsStore {
	return &MockEventsStore{
		StoreEventsFunc: &EventsStoreStoreEventsFunc{
			defaultHook: func(context.Context, []*v1.Event) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockEventsStore creates a new mock of the EventsStore interface.
// All methods panic on invocation, unless overwritten.
func NewStrictMockEventsStore() *MockEventsStore {
	return &MockEventsStore{
		StoreEventsFunc: &EventsStoreStoreEventsFunc{
			defaultHook: func(context.Context, []*v1.Event) error {
				panic("unexpected invocation of MockEventsStore.StoreEvents")
			},
		},
	}
}

// NewMockEventsStoreFrom creates a new mock of the MockEventsStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockEventsStoreFrom(i telemetry.EventsStore) *MockEventsStore {
	return &MockEventsStore{
		StoreEventsFunc: &EventsStoreStoreEventsFunc{
			defaultHook: i.StoreEvents,
		},
	}
}

// EventsStoreStoreEventsFunc describes the behavior when the StoreEvents
// method of the parent MockEventsStore instance is invoked.
type EventsStoreStoreEventsFunc struct {
	defaultHook func(context.Context, []*v1.Event) error
	hooks       []func(context.Context, []*v1.Event) error
	history     []EventsStoreStoreEventsFuncCall
	mutex       sync.Mutex
}

// StoreEvents delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEventsStore) StoreEvents(v0 context.Context, v1 []*v1.Event) error {
	r0 := m.StoreEventsFunc.nextHook()(v0, v1)
	m.StoreEventsFunc.appendCall(EventsStoreStoreEventsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the StoreEvents method
// of the parent MockEventsStore instance is invoked and the hook queue is
// empty.
func (f *EventsStoreStoreEventsFunc) SetDefaultHook(hook func(context.Context, []*v1.Event) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// StoreEvents method of the parent MockEventsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EventsStoreStoreEventsFunc) PushHook(hook func(context.Context, []*v1.Event) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventsStoreStoreEventsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []*v1.Event) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventsStoreStoreEventsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []*v1.Event) error {
		return r0
	})
}

func (f *EventsStoreStoreEventsFunc) nextHook() func(context.Context, []*v1.Event) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventsStoreStoreEventsFunc) appendCall(r0 EventsStoreStoreEventsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventsStoreStoreEventsFuncCall objects
// describing the invocations of this function.
func (f *EventsStoreStoreEventsFunc) History() []EventsStoreStoreEventsFuncCall {
	f.mutex.Lock()
	history := make([]EventsStoreStoreEventsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventsStoreStoreEventsFuncCall is an object that describes an invocation
// of method StoreEvents on an instance of MockEventsStore.
type EventsStoreStoreEventsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []*v1.Event
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventsStoreStoreEventsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventsStoreStoreEventsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
