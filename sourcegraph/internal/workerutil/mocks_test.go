// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package workerutil

import (
	"context"
	"sync"

	log "github.com/sourcegraph/log"
)

// MockHandler is a mock implementation of the Handler interface (from the
// package github.com/sourcegraph/sourcegraph/internal/workerutil) used for
// unit testing.
type MockHandler[T Record] struct {
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *HandlerHandleFunc[T]
}

// NewMockHandler creates a new mock of the Handler interface. All methods
// return zero values for all results, unless overwritten.
func NewMockHandler[T Record]() *MockHandler[T] {
	return &MockHandler[T]{
		HandleFunc: &HandlerHandleFunc[T]{
			defaultHook: func(context.Context, log.Logger, T) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockHandler creates a new mock of the Handler interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockHandler[T Record]() *MockHandler[T] {
	return &MockHandler[T]{
		HandleFunc: &HandlerHandleFunc[T]{
			defaultHook: func(context.Context, log.Logger, T) error {
				panic("unexpected invocation of MockHandler.Handle")
			},
		},
	}
}

// NewMockHandlerFrom creates a new mock of the MockHandler interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockHandlerFrom[T Record](i Handler[T]) *MockHandler[T] {
	return &MockHandler[T]{
		HandleFunc: &HandlerHandleFunc[T]{
			defaultHook: i.Handle,
		},
	}
}

// HandlerHandleFunc describes the behavior when the Handle method of the
// parent MockHandler instance is invoked.
type HandlerHandleFunc[T Record] struct {
	defaultHook func(context.Context, log.Logger, T) error
	hooks       []func(context.Context, log.Logger, T) error
	history     []HandlerHandleFuncCall[T]
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockHandler[T]) Handle(v0 context.Context, v1 log.Logger, v2 T) error {
	r0 := m.HandleFunc.nextHook()(v0, v1, v2)
	m.HandleFunc.appendCall(HandlerHandleFuncCall[T]{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockHandler instance is invoked and the hook queue is empty.
func (f *HandlerHandleFunc[T]) SetDefaultHook(hook func(context.Context, log.Logger, T) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockHandler instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *HandlerHandleFunc[T]) PushHook(hook func(context.Context, log.Logger, T) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *HandlerHandleFunc[T]) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, log.Logger, T) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *HandlerHandleFunc[T]) PushReturn(r0 error) {
	f.PushHook(func(context.Context, log.Logger, T) error {
		return r0
	})
}

func (f *HandlerHandleFunc[T]) nextHook() func(context.Context, log.Logger, T) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *HandlerHandleFunc[T]) appendCall(r0 HandlerHandleFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of HandlerHandleFuncCall objects describing
// the invocations of this function.
func (f *HandlerHandleFunc[T]) History() []HandlerHandleFuncCall[T] {
	f.mutex.Lock()
	history := make([]HandlerHandleFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// HandlerHandleFuncCall is an object that describes an invocation of method
// Handle on an instance of MockHandler.
type HandlerHandleFuncCall[T Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 log.Logger
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 T
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c HandlerHandleFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c HandlerHandleFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockStore is a mock implementation of the Store interface (from the
// package github.com/sourcegraph/sourcegraph/internal/workerutil) used for
// unit testing.
type MockStore[T Record] struct {
	// DequeueFunc is an instance of a mock function object controlling the
	// behavior of the method Dequeue.
	DequeueFunc *StoreDequeueFunc[T]
	// HeartbeatFunc is an instance of a mock function object controlling
	// the behavior of the method Heartbeat.
	HeartbeatFunc *StoreHeartbeatFunc[T]
	// MarkCompleteFunc is an instance of a mock function object controlling
	// the behavior of the method MarkComplete.
	MarkCompleteFunc *StoreMarkCompleteFunc[T]
	// MarkErroredFunc is an instance of a mock function object controlling
	// the behavior of the method MarkErrored.
	MarkErroredFunc *StoreMarkErroredFunc[T]
	// MarkFailedFunc is an instance of a mock function object controlling
	// the behavior of the method MarkFailed.
	MarkFailedFunc *StoreMarkFailedFunc[T]
	// QueuedCountFunc is an instance of a mock function object controlling
	// the behavior of the method QueuedCount.
	QueuedCountFunc *StoreQueuedCountFunc[T]
}

// NewMockStore creates a new mock of the Store interface. All methods
// return zero values for all results, unless overwritten.
func NewMockStore[T Record]() *MockStore[T] {
	return &MockStore[T]{
		DequeueFunc: &StoreDequeueFunc[T]{
			defaultHook: func(context.Context, string, interface{}) (r0 T, r1 bool, r2 error) {
				return
			},
		},
		HeartbeatFunc: &StoreHeartbeatFunc[T]{
			defaultHook: func(context.Context, []string) (r0 []string, r1 []string, r2 error) {
				return
			},
		},
		MarkCompleteFunc: &StoreMarkCompleteFunc[T]{
			defaultHook: func(context.Context, T) (r0 bool, r1 error) {
				return
			},
		},
		MarkErroredFunc: &StoreMarkErroredFunc[T]{
			defaultHook: func(context.Context, T, string) (r0 bool, r1 error) {
				return
			},
		},
		MarkFailedFunc: &StoreMarkFailedFunc[T]{
			defaultHook: func(context.Context, T, string) (r0 bool, r1 error) {
				return
			},
		},
		QueuedCountFunc: &StoreQueuedCountFunc[T]{
			defaultHook: func(context.Context) (r0 int, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockStore creates a new mock of the Store interface. All methods
// panic on invocation, unless overwritten.
func NewStrictMockStore[T Record]() *MockStore[T] {
	return &MockStore[T]{
		DequeueFunc: &StoreDequeueFunc[T]{
			defaultHook: func(context.Context, string, interface{}) (T, bool, error) {
				panic("unexpected invocation of MockStore.Dequeue")
			},
		},
		HeartbeatFunc: &StoreHeartbeatFunc[T]{
			defaultHook: func(context.Context, []string) ([]string, []string, error) {
				panic("unexpected invocation of MockStore.Heartbeat")
			},
		},
		MarkCompleteFunc: &StoreMarkCompleteFunc[T]{
			defaultHook: func(context.Context, T) (bool, error) {
				panic("unexpected invocation of MockStore.MarkComplete")
			},
		},
		MarkErroredFunc: &StoreMarkErroredFunc[T]{
			defaultHook: func(context.Context, T, string) (bool, error) {
				panic("unexpected invocation of MockStore.MarkErrored")
			},
		},
		MarkFailedFunc: &StoreMarkFailedFunc[T]{
			defaultHook: func(context.Context, T, string) (bool, error) {
				panic("unexpected invocation of MockStore.MarkFailed")
			},
		},
		QueuedCountFunc: &StoreQueuedCountFunc[T]{
			defaultHook: func(context.Context) (int, error) {
				panic("unexpected invocation of MockStore.QueuedCount")
			},
		},
	}
}

// NewMockStoreFrom creates a new mock of the MockStore interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockStoreFrom[T Record](i Store[T]) *MockStore[T] {
	return &MockStore[T]{
		DequeueFunc: &StoreDequeueFunc[T]{
			defaultHook: i.Dequeue,
		},
		HeartbeatFunc: &StoreHeartbeatFunc[T]{
			defaultHook: i.Heartbeat,
		},
		MarkCompleteFunc: &StoreMarkCompleteFunc[T]{
			defaultHook: i.MarkComplete,
		},
		MarkErroredFunc: &StoreMarkErroredFunc[T]{
			defaultHook: i.MarkErrored,
		},
		MarkFailedFunc: &StoreMarkFailedFunc[T]{
			defaultHook: i.MarkFailed,
		},
		QueuedCountFunc: &StoreQueuedCountFunc[T]{
			defaultHook: i.QueuedCount,
		},
	}
}

// StoreDequeueFunc describes the behavior when the Dequeue method of the
// parent MockStore instance is invoked.
type StoreDequeueFunc[T Record] struct {
	defaultHook func(context.Context, string, interface{}) (T, bool, error)
	hooks       []func(context.Context, string, interface{}) (T, bool, error)
	history     []StoreDequeueFuncCall[T]
	mutex       sync.Mutex
}

// Dequeue delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStore[T]) Dequeue(v0 context.Context, v1 string, v2 interface{}) (T, bool, error) {
	r0, r1, r2 := m.DequeueFunc.nextHook()(v0, v1, v2)
	m.DequeueFunc.appendCall(StoreDequeueFuncCall[T]{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the Dequeue method of
// the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreDequeueFunc[T]) SetDefaultHook(hook func(context.Context, string, interface{}) (T, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Dequeue method of the parent MockStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StoreDequeueFunc[T]) PushHook(hook func(context.Context, string, interface{}) (T, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreDequeueFunc[T]) SetDefaultReturn(r0 T, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, string, interface{}) (T, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreDequeueFunc[T]) PushReturn(r0 T, r1 bool, r2 error) {
	f.PushHook(func(context.Context, string, interface{}) (T, bool, error) {
		return r0, r1, r2
	})
}

func (f *StoreDequeueFunc[T]) nextHook() func(context.Context, string, interface{}) (T, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreDequeueFunc[T]) appendCall(r0 StoreDequeueFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreDequeueFuncCall objects describing the
// invocations of this function.
func (f *StoreDequeueFunc[T]) History() []StoreDequeueFuncCall[T] {
	f.mutex.Lock()
	history := make([]StoreDequeueFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreDequeueFuncCall is an object that describes an invocation of method
// Dequeue on an instance of MockStore.
type StoreDequeueFuncCall[T Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 T
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreDequeueFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreDequeueFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreHeartbeatFunc describes the behavior when the Heartbeat method of
// the parent MockStore instance is invoked.
type StoreHeartbeatFunc[T Record] struct {
	defaultHook func(context.Context, []string) ([]string, []string, error)
	hooks       []func(context.Context, []string) ([]string, []string, error)
	history     []StoreHeartbeatFuncCall[T]
	mutex       sync.Mutex
}

// Heartbeat delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStore[T]) Heartbeat(v0 context.Context, v1 []string) ([]string, []string, error) {
	r0, r1, r2 := m.HeartbeatFunc.nextHook()(v0, v1)
	m.HeartbeatFunc.appendCall(StoreHeartbeatFuncCall[T]{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the Heartbeat method of
// the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreHeartbeatFunc[T]) SetDefaultHook(hook func(context.Context, []string) ([]string, []string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Heartbeat method of the parent MockStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StoreHeartbeatFunc[T]) PushHook(hook func(context.Context, []string) ([]string, []string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreHeartbeatFunc[T]) SetDefaultReturn(r0 []string, r1 []string, r2 error) {
	f.SetDefaultHook(func(context.Context, []string) ([]string, []string, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreHeartbeatFunc[T]) PushReturn(r0 []string, r1 []string, r2 error) {
	f.PushHook(func(context.Context, []string) ([]string, []string, error) {
		return r0, r1, r2
	})
}

func (f *StoreHeartbeatFunc[T]) nextHook() func(context.Context, []string) ([]string, []string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreHeartbeatFunc[T]) appendCall(r0 StoreHeartbeatFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreHeartbeatFuncCall objects describing
// the invocations of this function.
func (f *StoreHeartbeatFunc[T]) History() []StoreHeartbeatFuncCall[T] {
	f.mutex.Lock()
	history := make([]StoreHeartbeatFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreHeartbeatFuncCall is an object that describes an invocation of
// method Heartbeat on an instance of MockStore.
type StoreHeartbeatFuncCall[T Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 []string
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreHeartbeatFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreHeartbeatFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreMarkCompleteFunc describes the behavior when the MarkComplete method
// of the parent MockStore instance is invoked.
type StoreMarkCompleteFunc[T Record] struct {
	defaultHook func(context.Context, T) (bool, error)
	hooks       []func(context.Context, T) (bool, error)
	history     []StoreMarkCompleteFuncCall[T]
	mutex       sync.Mutex
}

// MarkComplete delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStore[T]) MarkComplete(v0 context.Context, v1 T) (bool, error) {
	r0, r1 := m.MarkCompleteFunc.nextHook()(v0, v1)
	m.MarkCompleteFunc.appendCall(StoreMarkCompleteFuncCall[T]{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MarkComplete method
// of the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreMarkCompleteFunc[T]) SetDefaultHook(hook func(context.Context, T) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MarkComplete method of the parent MockStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreMarkCompleteFunc[T]) PushHook(hook func(context.Context, T) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreMarkCompleteFunc[T]) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, T) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreMarkCompleteFunc[T]) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, T) (bool, error) {
		return r0, r1
	})
}

func (f *StoreMarkCompleteFunc[T]) nextHook() func(context.Context, T) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreMarkCompleteFunc[T]) appendCall(r0 StoreMarkCompleteFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreMarkCompleteFuncCall objects
// describing the invocations of this function.
func (f *StoreMarkCompleteFunc[T]) History() []StoreMarkCompleteFuncCall[T] {
	f.mutex.Lock()
	history := make([]StoreMarkCompleteFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreMarkCompleteFuncCall is an object that describes an invocation of
// method MarkComplete on an instance of MockStore.
type StoreMarkCompleteFuncCall[T Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 T
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreMarkCompleteFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreMarkCompleteFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreMarkErroredFunc describes the behavior when the MarkErrored method
// of the parent MockStore instance is invoked.
type StoreMarkErroredFunc[T Record] struct {
	defaultHook func(context.Context, T, string) (bool, error)
	hooks       []func(context.Context, T, string) (bool, error)
	history     []StoreMarkErroredFuncCall[T]
	mutex       sync.Mutex
}

// MarkErrored delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStore[T]) MarkErrored(v0 context.Context, v1 T, v2 string) (bool, error) {
	r0, r1 := m.MarkErroredFunc.nextHook()(v0, v1, v2)
	m.MarkErroredFunc.appendCall(StoreMarkErroredFuncCall[T]{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MarkErrored method
// of the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreMarkErroredFunc[T]) SetDefaultHook(hook func(context.Context, T, string) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MarkErrored method of the parent MockStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreMarkErroredFunc[T]) PushHook(hook func(context.Context, T, string) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreMarkErroredFunc[T]) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, T, string) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreMarkErroredFunc[T]) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, T, string) (bool, error) {
		return r0, r1
	})
}

func (f *StoreMarkErroredFunc[T]) nextHook() func(context.Context, T, string) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreMarkErroredFunc[T]) appendCall(r0 StoreMarkErroredFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreMarkErroredFuncCall objects describing
// the invocations of this function.
func (f *StoreMarkErroredFunc[T]) History() []StoreMarkErroredFuncCall[T] {
	f.mutex.Lock()
	history := make([]StoreMarkErroredFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreMarkErroredFuncCall is an object that describes an invocation of
// method MarkErrored on an instance of MockStore.
type StoreMarkErroredFuncCall[T Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 T
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreMarkErroredFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreMarkErroredFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreMarkFailedFunc describes the behavior when the MarkFailed method of
// the parent MockStore instance is invoked.
type StoreMarkFailedFunc[T Record] struct {
	defaultHook func(context.Context, T, string) (bool, error)
	hooks       []func(context.Context, T, string) (bool, error)
	history     []StoreMarkFailedFuncCall[T]
	mutex       sync.Mutex
}

// MarkFailed delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStore[T]) MarkFailed(v0 context.Context, v1 T, v2 string) (bool, error) {
	r0, r1 := m.MarkFailedFunc.nextHook()(v0, v1, v2)
	m.MarkFailedFunc.appendCall(StoreMarkFailedFuncCall[T]{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MarkFailed method of
// the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreMarkFailedFunc[T]) SetDefaultHook(hook func(context.Context, T, string) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MarkFailed method of the parent MockStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreMarkFailedFunc[T]) PushHook(hook func(context.Context, T, string) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreMarkFailedFunc[T]) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, T, string) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreMarkFailedFunc[T]) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, T, string) (bool, error) {
		return r0, r1
	})
}

func (f *StoreMarkFailedFunc[T]) nextHook() func(context.Context, T, string) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreMarkFailedFunc[T]) appendCall(r0 StoreMarkFailedFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreMarkFailedFuncCall objects describing
// the invocations of this function.
func (f *StoreMarkFailedFunc[T]) History() []StoreMarkFailedFuncCall[T] {
	f.mutex.Lock()
	history := make([]StoreMarkFailedFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreMarkFailedFuncCall is an object that describes an invocation of
// method MarkFailed on an instance of MockStore.
type StoreMarkFailedFuncCall[T Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 T
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreMarkFailedFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreMarkFailedFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreQueuedCountFunc describes the behavior when the QueuedCount method
// of the parent MockStore instance is invoked.
type StoreQueuedCountFunc[T Record] struct {
	defaultHook func(context.Context) (int, error)
	hooks       []func(context.Context) (int, error)
	history     []StoreQueuedCountFuncCall[T]
	mutex       sync.Mutex
}

// QueuedCount delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStore[T]) QueuedCount(v0 context.Context) (int, error) {
	r0, r1 := m.QueuedCountFunc.nextHook()(v0)
	m.QueuedCountFunc.appendCall(StoreQueuedCountFuncCall[T]{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the QueuedCount method
// of the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreQueuedCountFunc[T]) SetDefaultHook(hook func(context.Context) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueuedCount method of the parent MockStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreQueuedCountFunc[T]) PushHook(hook func(context.Context) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreQueuedCountFunc[T]) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreQueuedCountFunc[T]) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

func (f *StoreQueuedCountFunc[T]) nextHook() func(context.Context) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreQueuedCountFunc[T]) appendCall(r0 StoreQueuedCountFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreQueuedCountFuncCall objects describing
// the invocations of this function.
func (f *StoreQueuedCountFunc[T]) History() []StoreQueuedCountFuncCall[T] {
	f.mutex.Lock()
	history := make([]StoreQueuedCountFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreQueuedCountFuncCall is an object that describes an invocation of
// method QueuedCount on an instance of MockStore.
type StoreQueuedCountFuncCall[T Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreQueuedCountFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreQueuedCountFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockWithHooks is a mock implementation of the WithHooks interface (from
// the package github.com/sourcegraph/sourcegraph/internal/workerutil) used
// for unit testing.
type MockWithHooks[T Record] struct {
	// PostHandleFunc is an instance of a mock function object controlling
	// the behavior of the method PostHandle.
	PostHandleFunc *WithHooksPostHandleFunc[T]
	// PreHandleFunc is an instance of a mock function object controlling
	// the behavior of the method PreHandle.
	PreHandleFunc *WithHooksPreHandleFunc[T]
}

// NewMockWithHooks creates a new mock of the WithHooks interface. All
// methods return zero values for all results, unless overwritten.
func NewMockWithHooks[T Record]() *MockWithHooks[T] {
	return &MockWithHooks[T]{
		PostHandleFunc: &WithHooksPostHandleFunc[T]{
			defaultHook: func(context.Context, log.Logger, T) {
				return
			},
		},
		PreHandleFunc: &WithHooksPreHandleFunc[T]{
			defaultHook: func(context.Context, log.Logger, T) {
				return
			},
		},
	}
}

// NewStrictMockWithHooks creates a new mock of the WithHooks interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockWithHooks[T Record]() *MockWithHooks[T] {
	return &MockWithHooks[T]{
		PostHandleFunc: &WithHooksPostHandleFunc[T]{
			defaultHook: func(context.Context, log.Logger, T) {
				panic("unexpected invocation of MockWithHooks.PostHandle")
			},
		},
		PreHandleFunc: &WithHooksPreHandleFunc[T]{
			defaultHook: func(context.Context, log.Logger, T) {
				panic("unexpected invocation of MockWithHooks.PreHandle")
			},
		},
	}
}

// NewMockWithHooksFrom creates a new mock of the MockWithHooks interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockWithHooksFrom[T Record](i WithHooks[T]) *MockWithHooks[T] {
	return &MockWithHooks[T]{
		PostHandleFunc: &WithHooksPostHandleFunc[T]{
			defaultHook: i.PostHandle,
		},
		PreHandleFunc: &WithHooksPreHandleFunc[T]{
			defaultHook: i.PreHandle,
		},
	}
}

// WithHooksPostHandleFunc describes the behavior when the PostHandle method
// of the parent MockWithHooks instance is invoked.
type WithHooksPostHandleFunc[T Record] struct {
	defaultHook func(context.Context, log.Logger, T)
	hooks       []func(context.Context, log.Logger, T)
	history     []WithHooksPostHandleFuncCall[T]
	mutex       sync.Mutex
}

// PostHandle delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockWithHooks[T]) PostHandle(v0 context.Context, v1 log.Logger, v2 T) {
	m.PostHandleFunc.nextHook()(v0, v1, v2)
	m.PostHandleFunc.appendCall(WithHooksPostHandleFuncCall[T]{v0, v1, v2})
	return
}

// SetDefaultHook sets function that is called when the PostHandle method of
// the parent MockWithHooks instance is invoked and the hook queue is empty.
func (f *WithHooksPostHandleFunc[T]) SetDefaultHook(hook func(context.Context, log.Logger, T)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PostHandle method of the parent MockWithHooks instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *WithHooksPostHandleFunc[T]) PushHook(hook func(context.Context, log.Logger, T)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WithHooksPostHandleFunc[T]) SetDefaultReturn() {
	f.SetDefaultHook(func(context.Context, log.Logger, T) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WithHooksPostHandleFunc[T]) PushReturn() {
	f.PushHook(func(context.Context, log.Logger, T) {
		return
	})
}

func (f *WithHooksPostHandleFunc[T]) nextHook() func(context.Context, log.Logger, T) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WithHooksPostHandleFunc[T]) appendCall(r0 WithHooksPostHandleFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WithHooksPostHandleFuncCall objects
// describing the invocations of this function.
func (f *WithHooksPostHandleFunc[T]) History() []WithHooksPostHandleFuncCall[T] {
	f.mutex.Lock()
	history := make([]WithHooksPostHandleFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WithHooksPostHandleFuncCall is an object that describes an invocation of
// method PostHandle on an instance of MockWithHooks.
type WithHooksPostHandleFuncCall[T Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 log.Logger
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 T
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WithHooksPostHandleFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WithHooksPostHandleFuncCall[T]) Results() []interface{} {
	return []interface{}{}
}

// WithHooksPreHandleFunc describes the behavior when the PreHandle method
// of the parent MockWithHooks instance is invoked.
type WithHooksPreHandleFunc[T Record] struct {
	defaultHook func(context.Context, log.Logger, T)
	hooks       []func(context.Context, log.Logger, T)
	history     []WithHooksPreHandleFuncCall[T]
	mutex       sync.Mutex
}

// PreHandle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWithHooks[T]) PreHandle(v0 context.Context, v1 log.Logger, v2 T) {
	m.PreHandleFunc.nextHook()(v0, v1, v2)
	m.PreHandleFunc.appendCall(WithHooksPreHandleFuncCall[T]{v0, v1, v2})
	return
}

// SetDefaultHook sets function that is called when the PreHandle method of
// the parent MockWithHooks instance is invoked and the hook queue is empty.
func (f *WithHooksPreHandleFunc[T]) SetDefaultHook(hook func(context.Context, log.Logger, T)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PreHandle method of the parent MockWithHooks instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *WithHooksPreHandleFunc[T]) PushHook(hook func(context.Context, log.Logger, T)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WithHooksPreHandleFunc[T]) SetDefaultReturn() {
	f.SetDefaultHook(func(context.Context, log.Logger, T) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WithHooksPreHandleFunc[T]) PushReturn() {
	f.PushHook(func(context.Context, log.Logger, T) {
		return
	})
}

func (f *WithHooksPreHandleFunc[T]) nextHook() func(context.Context, log.Logger, T) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WithHooksPreHandleFunc[T]) appendCall(r0 WithHooksPreHandleFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WithHooksPreHandleFuncCall objects
// describing the invocations of this function.
func (f *WithHooksPreHandleFunc[T]) History() []WithHooksPreHandleFuncCall[T] {
	f.mutex.Lock()
	history := make([]WithHooksPreHandleFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WithHooksPreHandleFuncCall is an object that describes an invocation of
// method PreHandle on an instance of MockWithHooks.
type WithHooksPreHandleFuncCall[T Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 log.Logger
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 T
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WithHooksPreHandleFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WithHooksPreHandleFuncCall[T]) Results() []interface{} {
	return []interface{}{}
}

// MockWithPreDequeue is a mock implementation of the WithPreDequeue
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/workerutil) used for unit
// testing.
type MockWithPreDequeue struct {
	// PreDequeueFunc is an instance of a mock function object controlling
	// the behavior of the method PreDequeue.
	PreDequeueFunc *WithPreDequeuePreDequeueFunc
}

// NewMockWithPreDequeue creates a new mock of the WithPreDequeue interface.
// All methods return zero values for all results, unless overwritten.
func NewMockWithPreDequeue() *MockWithPreDequeue {
	return &MockWithPreDequeue{
		PreDequeueFunc: &WithPreDequeuePreDequeueFunc{
			defaultHook: func(context.Context, log.Logger) (r0 bool, r1 interface{}, r2 error) {
				return
			},
		},
	}
}

// NewStrictMockWithPreDequeue creates a new mock of the WithPreDequeue
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockWithPreDequeue() *MockWithPreDequeue {
	return &MockWithPreDequeue{
		PreDequeueFunc: &WithPreDequeuePreDequeueFunc{
			defaultHook: func(context.Context, log.Logger) (bool, interface{}, error) {
				panic("unexpected invocation of MockWithPreDequeue.PreDequeue")
			},
		},
	}
}

// NewMockWithPreDequeueFrom creates a new mock of the MockWithPreDequeue
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockWithPreDequeueFrom(i WithPreDequeue) *MockWithPreDequeue {
	return &MockWithPreDequeue{
		PreDequeueFunc: &WithPreDequeuePreDequeueFunc{
			defaultHook: i.PreDequeue,
		},
	}
}

// WithPreDequeuePreDequeueFunc describes the behavior when the PreDequeue
// method of the parent MockWithPreDequeue instance is invoked.
type WithPreDequeuePreDequeueFunc struct {
	defaultHook func(context.Context, log.Logger) (bool, interface{}, error)
	hooks       []func(context.Context, log.Logger) (bool, interface{}, error)
	history     []WithPreDequeuePreDequeueFuncCall
	mutex       sync.Mutex
}

// PreDequeue delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockWithPreDequeue) PreDequeue(v0 context.Context, v1 log.Logger) (bool, interface{}, error) {
	r0, r1, r2 := m.PreDequeueFunc.nextHook()(v0, v1)
	m.PreDequeueFunc.appendCall(WithPreDequeuePreDequeueFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the PreDequeue method of
// the parent MockWithPreDequeue instance is invoked and the hook queue is
// empty.
func (f *WithPreDequeuePreDequeueFunc) SetDefaultHook(hook func(context.Context, log.Logger) (bool, interface{}, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PreDequeue method of the parent MockWithPreDequeue instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *WithPreDequeuePreDequeueFunc) PushHook(hook func(context.Context, log.Logger) (bool, interface{}, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WithPreDequeuePreDequeueFunc) SetDefaultReturn(r0 bool, r1 interface{}, r2 error) {
	f.SetDefaultHook(func(context.Context, log.Logger) (bool, interface{}, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WithPreDequeuePreDequeueFunc) PushReturn(r0 bool, r1 interface{}, r2 error) {
	f.PushHook(func(context.Context, log.Logger) (bool, interface{}, error) {
		return r0, r1, r2
	})
}

func (f *WithPreDequeuePreDequeueFunc) nextHook() func(context.Context, log.Logger) (bool, interface{}, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WithPreDequeuePreDequeueFunc) appendCall(r0 WithPreDequeuePreDequeueFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WithPreDequeuePreDequeueFuncCall objects
// describing the invocations of this function.
func (f *WithPreDequeuePreDequeueFunc) History() []WithPreDequeuePreDequeueFuncCall {
	f.mutex.Lock()
	history := make([]WithPreDequeuePreDequeueFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WithPreDequeuePreDequeueFuncCall is an object that describes an
// invocation of method PreDequeue on an instance of MockWithPreDequeue.
type WithPreDequeuePreDequeueFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 log.Logger
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 interface{}
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WithPreDequeuePreDequeueFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WithPreDequeuePreDequeueFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}
