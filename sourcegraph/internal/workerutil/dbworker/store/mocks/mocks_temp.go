// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package mocks

import (
	"context"
	"sync"
	"time"

	sqlf "github.com/keegancsmith/sqlf"
	basestore "github.com/sourcegraph/sourcegraph/internal/database/basestore"
	executor "github.com/sourcegraph/sourcegraph/internal/executor"
	workerutil "github.com/sourcegraph/sourcegraph/internal/workerutil"
	store "github.com/sourcegraph/sourcegraph/internal/workerutil/dbworker/store"
)

// MockStore is a mock implementation of the Store interface (from the
// package
// github.com/sourcegraph/sourcegraph/internal/workerutil/dbworker/store)
// used for unit testing.
type MockStore[T workerutil.Record] struct {
	// AddExecutionLogEntryFunc is an instance of a mock function object
	// controlling the behavior of the method AddExecutionLogEntry.
	AddExecutionLogEntryFunc *StoreAddExecutionLogEntryFunc[T]
	// DequeueFunc is an instance of a mock function object controlling the
	// behavior of the method Dequeue.
	DequeueFunc *StoreDequeueFunc[T]
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *StoreHandleFunc[T]
	// HeartbeatFunc is an instance of a mock function object controlling
	// the behavior of the method Heartbeat.
	HeartbeatFunc *StoreHeartbeatFunc[T]
	// MarkCompleteFunc is an instance of a mock function object controlling
	// the behavior of the method MarkComplete.
	MarkCompleteFunc *StoreMarkCompleteFunc[T]
	// MarkErroredFunc is an instance of a mock function object controlling
	// the behavior of the method MarkErrored.
	MarkErroredFunc *StoreMarkErroredFunc[T]
	// MarkFailedFunc is an instance of a mock function object controlling
	// the behavior of the method MarkFailed.
	MarkFailedFunc *StoreMarkFailedFunc[T]
	// MaxDurationInQueueFunc is an instance of a mock function object
	// controlling the behavior of the method MaxDurationInQueue.
	MaxDurationInQueueFunc *StoreMaxDurationInQueueFunc[T]
	// QueuedCountFunc is an instance of a mock function object controlling
	// the behavior of the method QueuedCount.
	QueuedCountFunc *StoreQueuedCountFunc[T]
	// RequeueFunc is an instance of a mock function object controlling the
	// behavior of the method Requeue.
	RequeueFunc *StoreRequeueFunc[T]
	// ResetStalledFunc is an instance of a mock function object controlling
	// the behavior of the method ResetStalled.
	ResetStalledFunc *StoreResetStalledFunc[T]
	// UpdateExecutionLogEntryFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateExecutionLogEntry.
	UpdateExecutionLogEntryFunc *StoreUpdateExecutionLogEntryFunc[T]
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *StoreWithFunc[T]
}

// NewMockStore creates a new mock of the Store interface. All methods
// return zero values for all results, unless overwritten.
func NewMockStore[T workerutil.Record]() *MockStore[T] {
	return &MockStore[T]{
		AddExecutionLogEntryFunc: &StoreAddExecutionLogEntryFunc[T]{
			defaultHook: func(context.Context, int, executor.ExecutionLogEntry, store.ExecutionLogEntryOptions) (r0 int, r1 error) {
				return
			},
		},
		DequeueFunc: &StoreDequeueFunc[T]{
			defaultHook: func(context.Context, string, []*sqlf.Query) (r0 T, r1 bool, r2 error) {
				return
			},
		},
		HandleFunc: &StoreHandleFunc[T]{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		HeartbeatFunc: &StoreHeartbeatFunc[T]{
			defaultHook: func(context.Context, []string, store.HeartbeatOptions) (r0 []string, r1 []string, r2 error) {
				return
			},
		},
		MarkCompleteFunc: &StoreMarkCompleteFunc[T]{
			defaultHook: func(context.Context, int, store.MarkFinalOptions) (r0 bool, r1 error) {
				return
			},
		},
		MarkErroredFunc: &StoreMarkErroredFunc[T]{
			defaultHook: func(context.Context, int, string, store.MarkFinalOptions) (r0 bool, r1 error) {
				return
			},
		},
		MarkFailedFunc: &StoreMarkFailedFunc[T]{
			defaultHook: func(context.Context, int, string, store.MarkFinalOptions) (r0 bool, r1 error) {
				return
			},
		},
		MaxDurationInQueueFunc: &StoreMaxDurationInQueueFunc[T]{
			defaultHook: func(context.Context) (r0 time.Duration, r1 error) {
				return
			},
		},
		QueuedCountFunc: &StoreQueuedCountFunc[T]{
			defaultHook: func(context.Context, bool) (r0 int, r1 error) {
				return
			},
		},
		RequeueFunc: &StoreRequeueFunc[T]{
			defaultHook: func(context.Context, int, time.Time) (r0 error) {
				return
			},
		},
		ResetStalledFunc: &StoreResetStalledFunc[T]{
			defaultHook: func(context.Context) (r0 map[int]time.Duration, r1 map[int]time.Duration, r2 error) {
				return
			},
		},
		UpdateExecutionLogEntryFunc: &StoreUpdateExecutionLogEntryFunc[T]{
			defaultHook: func(context.Context, int, int, executor.ExecutionLogEntry, store.ExecutionLogEntryOptions) (r0 error) {
				return
			},
		},
		WithFunc: &StoreWithFunc[T]{
			defaultHook: func(basestore.ShareableStore) (r0 store.Store[T]) {
				return
			},
		},
	}
}

// NewStrictMockStore creates a new mock of the Store interface. All methods
// panic on invocation, unless overwritten.
func NewStrictMockStore[T workerutil.Record]() *MockStore[T] {
	return &MockStore[T]{
		AddExecutionLogEntryFunc: &StoreAddExecutionLogEntryFunc[T]{
			defaultHook: func(context.Context, int, executor.ExecutionLogEntry, store.ExecutionLogEntryOptions) (int, error) {
				panic("unexpected invocation of MockStore.AddExecutionLogEntry")
			},
		},
		DequeueFunc: &StoreDequeueFunc[T]{
			defaultHook: func(context.Context, string, []*sqlf.Query) (T, bool, error) {
				panic("unexpected invocation of MockStore.Dequeue")
			},
		},
		HandleFunc: &StoreHandleFunc[T]{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockStore.Handle")
			},
		},
		HeartbeatFunc: &StoreHeartbeatFunc[T]{
			defaultHook: func(context.Context, []string, store.HeartbeatOptions) ([]string, []string, error) {
				panic("unexpected invocation of MockStore.Heartbeat")
			},
		},
		MarkCompleteFunc: &StoreMarkCompleteFunc[T]{
			defaultHook: func(context.Context, int, store.MarkFinalOptions) (bool, error) {
				panic("unexpected invocation of MockStore.MarkComplete")
			},
		},
		MarkErroredFunc: &StoreMarkErroredFunc[T]{
			defaultHook: func(context.Context, int, string, store.MarkFinalOptions) (bool, error) {
				panic("unexpected invocation of MockStore.MarkErrored")
			},
		},
		MarkFailedFunc: &StoreMarkFailedFunc[T]{
			defaultHook: func(context.Context, int, string, store.MarkFinalOptions) (bool, error) {
				panic("unexpected invocation of MockStore.MarkFailed")
			},
		},
		MaxDurationInQueueFunc: &StoreMaxDurationInQueueFunc[T]{
			defaultHook: func(context.Context) (time.Duration, error) {
				panic("unexpected invocation of MockStore.MaxDurationInQueue")
			},
		},
		QueuedCountFunc: &StoreQueuedCountFunc[T]{
			defaultHook: func(context.Context, bool) (int, error) {
				panic("unexpected invocation of MockStore.QueuedCount")
			},
		},
		RequeueFunc: &StoreRequeueFunc[T]{
			defaultHook: func(context.Context, int, time.Time) error {
				panic("unexpected invocation of MockStore.Requeue")
			},
		},
		ResetStalledFunc: &StoreResetStalledFunc[T]{
			defaultHook: func(context.Context) (map[int]time.Duration, map[int]time.Duration, error) {
				panic("unexpected invocation of MockStore.ResetStalled")
			},
		},
		UpdateExecutionLogEntryFunc: &StoreUpdateExecutionLogEntryFunc[T]{
			defaultHook: func(context.Context, int, int, executor.ExecutionLogEntry, store.ExecutionLogEntryOptions) error {
				panic("unexpected invocation of MockStore.UpdateExecutionLogEntry")
			},
		},
		WithFunc: &StoreWithFunc[T]{
			defaultHook: func(basestore.ShareableStore) store.Store[T] {
				panic("unexpected invocation of MockStore.With")
			},
		},
	}
}

// NewMockStoreFrom creates a new mock of the MockStore interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockStoreFrom[T workerutil.Record](i store.Store[T]) *MockStore[T] {
	return &MockStore[T]{
		AddExecutionLogEntryFunc: &StoreAddExecutionLogEntryFunc[T]{
			defaultHook: i.AddExecutionLogEntry,
		},
		DequeueFunc: &StoreDequeueFunc[T]{
			defaultHook: i.Dequeue,
		},
		HandleFunc: &StoreHandleFunc[T]{
			defaultHook: i.Handle,
		},
		HeartbeatFunc: &StoreHeartbeatFunc[T]{
			defaultHook: i.Heartbeat,
		},
		MarkCompleteFunc: &StoreMarkCompleteFunc[T]{
			defaultHook: i.MarkComplete,
		},
		MarkErroredFunc: &StoreMarkErroredFunc[T]{
			defaultHook: i.MarkErrored,
		},
		MarkFailedFunc: &StoreMarkFailedFunc[T]{
			defaultHook: i.MarkFailed,
		},
		MaxDurationInQueueFunc: &StoreMaxDurationInQueueFunc[T]{
			defaultHook: i.MaxDurationInQueue,
		},
		QueuedCountFunc: &StoreQueuedCountFunc[T]{
			defaultHook: i.QueuedCount,
		},
		RequeueFunc: &StoreRequeueFunc[T]{
			defaultHook: i.Requeue,
		},
		ResetStalledFunc: &StoreResetStalledFunc[T]{
			defaultHook: i.ResetStalled,
		},
		UpdateExecutionLogEntryFunc: &StoreUpdateExecutionLogEntryFunc[T]{
			defaultHook: i.UpdateExecutionLogEntry,
		},
		WithFunc: &StoreWithFunc[T]{
			defaultHook: i.With,
		},
	}
}

// StoreAddExecutionLogEntryFunc describes the behavior when the
// AddExecutionLogEntry method of the parent MockStore instance is invoked.
type StoreAddExecutionLogEntryFunc[T workerutil.Record] struct {
	defaultHook func(context.Context, int, executor.ExecutionLogEntry, store.ExecutionLogEntryOptions) (int, error)
	hooks       []func(context.Context, int, executor.ExecutionLogEntry, store.ExecutionLogEntryOptions) (int, error)
	history     []StoreAddExecutionLogEntryFuncCall[T]
	mutex       sync.Mutex
}

// AddExecutionLogEntry delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore[T]) AddExecutionLogEntry(v0 context.Context, v1 int, v2 executor.ExecutionLogEntry, v3 store.ExecutionLogEntryOptions) (int, error) {
	r0, r1 := m.AddExecutionLogEntryFunc.nextHook()(v0, v1, v2, v3)
	m.AddExecutionLogEntryFunc.appendCall(StoreAddExecutionLogEntryFuncCall[T]{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the AddExecutionLogEntry
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreAddExecutionLogEntryFunc[T]) SetDefaultHook(hook func(context.Context, int, executor.ExecutionLogEntry, store.ExecutionLogEntryOptions) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AddExecutionLogEntry method of the parent MockStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StoreAddExecutionLogEntryFunc[T]) PushHook(hook func(context.Context, int, executor.ExecutionLogEntry, store.ExecutionLogEntryOptions) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreAddExecutionLogEntryFunc[T]) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, int, executor.ExecutionLogEntry, store.ExecutionLogEntryOptions) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreAddExecutionLogEntryFunc[T]) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, int, executor.ExecutionLogEntry, store.ExecutionLogEntryOptions) (int, error) {
		return r0, r1
	})
}

func (f *StoreAddExecutionLogEntryFunc[T]) nextHook() func(context.Context, int, executor.ExecutionLogEntry, store.ExecutionLogEntryOptions) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreAddExecutionLogEntryFunc[T]) appendCall(r0 StoreAddExecutionLogEntryFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreAddExecutionLogEntryFuncCall objects
// describing the invocations of this function.
func (f *StoreAddExecutionLogEntryFunc[T]) History() []StoreAddExecutionLogEntryFuncCall[T] {
	f.mutex.Lock()
	history := make([]StoreAddExecutionLogEntryFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreAddExecutionLogEntryFuncCall is an object that describes an
// invocation of method AddExecutionLogEntry on an instance of MockStore.
type StoreAddExecutionLogEntryFuncCall[T workerutil.Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 executor.ExecutionLogEntry
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 store.ExecutionLogEntryOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreAddExecutionLogEntryFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreAddExecutionLogEntryFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreDequeueFunc describes the behavior when the Dequeue method of the
// parent MockStore instance is invoked.
type StoreDequeueFunc[T workerutil.Record] struct {
	defaultHook func(context.Context, string, []*sqlf.Query) (T, bool, error)
	hooks       []func(context.Context, string, []*sqlf.Query) (T, bool, error)
	history     []StoreDequeueFuncCall[T]
	mutex       sync.Mutex
}

// Dequeue delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStore[T]) Dequeue(v0 context.Context, v1 string, v2 []*sqlf.Query) (T, bool, error) {
	r0, r1, r2 := m.DequeueFunc.nextHook()(v0, v1, v2)
	m.DequeueFunc.appendCall(StoreDequeueFuncCall[T]{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the Dequeue method of
// the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreDequeueFunc[T]) SetDefaultHook(hook func(context.Context, string, []*sqlf.Query) (T, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Dequeue method of the parent MockStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StoreDequeueFunc[T]) PushHook(hook func(context.Context, string, []*sqlf.Query) (T, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreDequeueFunc[T]) SetDefaultReturn(r0 T, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, string, []*sqlf.Query) (T, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreDequeueFunc[T]) PushReturn(r0 T, r1 bool, r2 error) {
	f.PushHook(func(context.Context, string, []*sqlf.Query) (T, bool, error) {
		return r0, r1, r2
	})
}

func (f *StoreDequeueFunc[T]) nextHook() func(context.Context, string, []*sqlf.Query) (T, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreDequeueFunc[T]) appendCall(r0 StoreDequeueFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreDequeueFuncCall objects describing the
// invocations of this function.
func (f *StoreDequeueFunc[T]) History() []StoreDequeueFuncCall[T] {
	f.mutex.Lock()
	history := make([]StoreDequeueFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreDequeueFuncCall is an object that describes an invocation of method
// Dequeue on an instance of MockStore.
type StoreDequeueFuncCall[T workerutil.Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []*sqlf.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 T
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreDequeueFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreDequeueFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreHandleFunc describes the behavior when the Handle method of the
// parent MockStore instance is invoked.
type StoreHandleFunc[T workerutil.Record] struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []StoreHandleFuncCall[T]
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStore[T]) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(StoreHandleFuncCall[T]{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreHandleFunc[T]) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StoreHandleFunc[T]) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreHandleFunc[T]) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreHandleFunc[T]) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *StoreHandleFunc[T]) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreHandleFunc[T]) appendCall(r0 StoreHandleFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreHandleFuncCall objects describing the
// invocations of this function.
func (f *StoreHandleFunc[T]) History() []StoreHandleFuncCall[T] {
	f.mutex.Lock()
	history := make([]StoreHandleFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreHandleFuncCall is an object that describes an invocation of method
// Handle on an instance of MockStore.
type StoreHandleFuncCall[T workerutil.Record] struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreHandleFuncCall[T]) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreHandleFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreHeartbeatFunc describes the behavior when the Heartbeat method of
// the parent MockStore instance is invoked.
type StoreHeartbeatFunc[T workerutil.Record] struct {
	defaultHook func(context.Context, []string, store.HeartbeatOptions) ([]string, []string, error)
	hooks       []func(context.Context, []string, store.HeartbeatOptions) ([]string, []string, error)
	history     []StoreHeartbeatFuncCall[T]
	mutex       sync.Mutex
}

// Heartbeat delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStore[T]) Heartbeat(v0 context.Context, v1 []string, v2 store.HeartbeatOptions) ([]string, []string, error) {
	r0, r1, r2 := m.HeartbeatFunc.nextHook()(v0, v1, v2)
	m.HeartbeatFunc.appendCall(StoreHeartbeatFuncCall[T]{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the Heartbeat method of
// the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreHeartbeatFunc[T]) SetDefaultHook(hook func(context.Context, []string, store.HeartbeatOptions) ([]string, []string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Heartbeat method of the parent MockStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StoreHeartbeatFunc[T]) PushHook(hook func(context.Context, []string, store.HeartbeatOptions) ([]string, []string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreHeartbeatFunc[T]) SetDefaultReturn(r0 []string, r1 []string, r2 error) {
	f.SetDefaultHook(func(context.Context, []string, store.HeartbeatOptions) ([]string, []string, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreHeartbeatFunc[T]) PushReturn(r0 []string, r1 []string, r2 error) {
	f.PushHook(func(context.Context, []string, store.HeartbeatOptions) ([]string, []string, error) {
		return r0, r1, r2
	})
}

func (f *StoreHeartbeatFunc[T]) nextHook() func(context.Context, []string, store.HeartbeatOptions) ([]string, []string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreHeartbeatFunc[T]) appendCall(r0 StoreHeartbeatFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreHeartbeatFuncCall objects describing
// the invocations of this function.
func (f *StoreHeartbeatFunc[T]) History() []StoreHeartbeatFuncCall[T] {
	f.mutex.Lock()
	history := make([]StoreHeartbeatFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreHeartbeatFuncCall is an object that describes an invocation of
// method Heartbeat on an instance of MockStore.
type StoreHeartbeatFuncCall[T workerutil.Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 store.HeartbeatOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 []string
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreHeartbeatFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreHeartbeatFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreMarkCompleteFunc describes the behavior when the MarkComplete method
// of the parent MockStore instance is invoked.
type StoreMarkCompleteFunc[T workerutil.Record] struct {
	defaultHook func(context.Context, int, store.MarkFinalOptions) (bool, error)
	hooks       []func(context.Context, int, store.MarkFinalOptions) (bool, error)
	history     []StoreMarkCompleteFuncCall[T]
	mutex       sync.Mutex
}

// MarkComplete delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStore[T]) MarkComplete(v0 context.Context, v1 int, v2 store.MarkFinalOptions) (bool, error) {
	r0, r1 := m.MarkCompleteFunc.nextHook()(v0, v1, v2)
	m.MarkCompleteFunc.appendCall(StoreMarkCompleteFuncCall[T]{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MarkComplete method
// of the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreMarkCompleteFunc[T]) SetDefaultHook(hook func(context.Context, int, store.MarkFinalOptions) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MarkComplete method of the parent MockStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreMarkCompleteFunc[T]) PushHook(hook func(context.Context, int, store.MarkFinalOptions) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreMarkCompleteFunc[T]) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int, store.MarkFinalOptions) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreMarkCompleteFunc[T]) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int, store.MarkFinalOptions) (bool, error) {
		return r0, r1
	})
}

func (f *StoreMarkCompleteFunc[T]) nextHook() func(context.Context, int, store.MarkFinalOptions) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreMarkCompleteFunc[T]) appendCall(r0 StoreMarkCompleteFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreMarkCompleteFuncCall objects
// describing the invocations of this function.
func (f *StoreMarkCompleteFunc[T]) History() []StoreMarkCompleteFuncCall[T] {
	f.mutex.Lock()
	history := make([]StoreMarkCompleteFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreMarkCompleteFuncCall is an object that describes an invocation of
// method MarkComplete on an instance of MockStore.
type StoreMarkCompleteFuncCall[T workerutil.Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 store.MarkFinalOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreMarkCompleteFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreMarkCompleteFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreMarkErroredFunc describes the behavior when the MarkErrored method
// of the parent MockStore instance is invoked.
type StoreMarkErroredFunc[T workerutil.Record] struct {
	defaultHook func(context.Context, int, string, store.MarkFinalOptions) (bool, error)
	hooks       []func(context.Context, int, string, store.MarkFinalOptions) (bool, error)
	history     []StoreMarkErroredFuncCall[T]
	mutex       sync.Mutex
}

// MarkErrored delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStore[T]) MarkErrored(v0 context.Context, v1 int, v2 string, v3 store.MarkFinalOptions) (bool, error) {
	r0, r1 := m.MarkErroredFunc.nextHook()(v0, v1, v2, v3)
	m.MarkErroredFunc.appendCall(StoreMarkErroredFuncCall[T]{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MarkErrored method
// of the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreMarkErroredFunc[T]) SetDefaultHook(hook func(context.Context, int, string, store.MarkFinalOptions) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MarkErrored method of the parent MockStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreMarkErroredFunc[T]) PushHook(hook func(context.Context, int, string, store.MarkFinalOptions) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreMarkErroredFunc[T]) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string, store.MarkFinalOptions) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreMarkErroredFunc[T]) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int, string, store.MarkFinalOptions) (bool, error) {
		return r0, r1
	})
}

func (f *StoreMarkErroredFunc[T]) nextHook() func(context.Context, int, string, store.MarkFinalOptions) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreMarkErroredFunc[T]) appendCall(r0 StoreMarkErroredFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreMarkErroredFuncCall objects describing
// the invocations of this function.
func (f *StoreMarkErroredFunc[T]) History() []StoreMarkErroredFuncCall[T] {
	f.mutex.Lock()
	history := make([]StoreMarkErroredFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreMarkErroredFuncCall is an object that describes an invocation of
// method MarkErrored on an instance of MockStore.
type StoreMarkErroredFuncCall[T workerutil.Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 store.MarkFinalOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreMarkErroredFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreMarkErroredFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreMarkFailedFunc describes the behavior when the MarkFailed method of
// the parent MockStore instance is invoked.
type StoreMarkFailedFunc[T workerutil.Record] struct {
	defaultHook func(context.Context, int, string, store.MarkFinalOptions) (bool, error)
	hooks       []func(context.Context, int, string, store.MarkFinalOptions) (bool, error)
	history     []StoreMarkFailedFuncCall[T]
	mutex       sync.Mutex
}

// MarkFailed delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStore[T]) MarkFailed(v0 context.Context, v1 int, v2 string, v3 store.MarkFinalOptions) (bool, error) {
	r0, r1 := m.MarkFailedFunc.nextHook()(v0, v1, v2, v3)
	m.MarkFailedFunc.appendCall(StoreMarkFailedFuncCall[T]{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MarkFailed method of
// the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreMarkFailedFunc[T]) SetDefaultHook(hook func(context.Context, int, string, store.MarkFinalOptions) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MarkFailed method of the parent MockStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreMarkFailedFunc[T]) PushHook(hook func(context.Context, int, string, store.MarkFinalOptions) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreMarkFailedFunc[T]) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string, store.MarkFinalOptions) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreMarkFailedFunc[T]) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int, string, store.MarkFinalOptions) (bool, error) {
		return r0, r1
	})
}

func (f *StoreMarkFailedFunc[T]) nextHook() func(context.Context, int, string, store.MarkFinalOptions) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreMarkFailedFunc[T]) appendCall(r0 StoreMarkFailedFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreMarkFailedFuncCall objects describing
// the invocations of this function.
func (f *StoreMarkFailedFunc[T]) History() []StoreMarkFailedFuncCall[T] {
	f.mutex.Lock()
	history := make([]StoreMarkFailedFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreMarkFailedFuncCall is an object that describes an invocation of
// method MarkFailed on an instance of MockStore.
type StoreMarkFailedFuncCall[T workerutil.Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 store.MarkFinalOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreMarkFailedFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreMarkFailedFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreMaxDurationInQueueFunc describes the behavior when the
// MaxDurationInQueue method of the parent MockStore instance is invoked.
type StoreMaxDurationInQueueFunc[T workerutil.Record] struct {
	defaultHook func(context.Context) (time.Duration, error)
	hooks       []func(context.Context) (time.Duration, error)
	history     []StoreMaxDurationInQueueFuncCall[T]
	mutex       sync.Mutex
}

// MaxDurationInQueue delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore[T]) MaxDurationInQueue(v0 context.Context) (time.Duration, error) {
	r0, r1 := m.MaxDurationInQueueFunc.nextHook()(v0)
	m.MaxDurationInQueueFunc.appendCall(StoreMaxDurationInQueueFuncCall[T]{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MaxDurationInQueue
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreMaxDurationInQueueFunc[T]) SetDefaultHook(hook func(context.Context) (time.Duration, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MaxDurationInQueue method of the parent MockStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StoreMaxDurationInQueueFunc[T]) PushHook(hook func(context.Context) (time.Duration, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreMaxDurationInQueueFunc[T]) SetDefaultReturn(r0 time.Duration, r1 error) {
	f.SetDefaultHook(func(context.Context) (time.Duration, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreMaxDurationInQueueFunc[T]) PushReturn(r0 time.Duration, r1 error) {
	f.PushHook(func(context.Context) (time.Duration, error) {
		return r0, r1
	})
}

func (f *StoreMaxDurationInQueueFunc[T]) nextHook() func(context.Context) (time.Duration, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreMaxDurationInQueueFunc[T]) appendCall(r0 StoreMaxDurationInQueueFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreMaxDurationInQueueFuncCall objects
// describing the invocations of this function.
func (f *StoreMaxDurationInQueueFunc[T]) History() []StoreMaxDurationInQueueFuncCall[T] {
	f.mutex.Lock()
	history := make([]StoreMaxDurationInQueueFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreMaxDurationInQueueFuncCall is an object that describes an invocation
// of method MaxDurationInQueue on an instance of MockStore.
type StoreMaxDurationInQueueFuncCall[T workerutil.Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 time.Duration
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreMaxDurationInQueueFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreMaxDurationInQueueFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreQueuedCountFunc describes the behavior when the QueuedCount method
// of the parent MockStore instance is invoked.
type StoreQueuedCountFunc[T workerutil.Record] struct {
	defaultHook func(context.Context, bool) (int, error)
	hooks       []func(context.Context, bool) (int, error)
	history     []StoreQueuedCountFuncCall[T]
	mutex       sync.Mutex
}

// QueuedCount delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStore[T]) QueuedCount(v0 context.Context, v1 bool) (int, error) {
	r0, r1 := m.QueuedCountFunc.nextHook()(v0, v1)
	m.QueuedCountFunc.appendCall(StoreQueuedCountFuncCall[T]{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the QueuedCount method
// of the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreQueuedCountFunc[T]) SetDefaultHook(hook func(context.Context, bool) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueuedCount method of the parent MockStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreQueuedCountFunc[T]) PushHook(hook func(context.Context, bool) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreQueuedCountFunc[T]) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, bool) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreQueuedCountFunc[T]) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, bool) (int, error) {
		return r0, r1
	})
}

func (f *StoreQueuedCountFunc[T]) nextHook() func(context.Context, bool) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreQueuedCountFunc[T]) appendCall(r0 StoreQueuedCountFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreQueuedCountFuncCall objects describing
// the invocations of this function.
func (f *StoreQueuedCountFunc[T]) History() []StoreQueuedCountFuncCall[T] {
	f.mutex.Lock()
	history := make([]StoreQueuedCountFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreQueuedCountFuncCall is an object that describes an invocation of
// method QueuedCount on an instance of MockStore.
type StoreQueuedCountFuncCall[T workerutil.Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreQueuedCountFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreQueuedCountFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreRequeueFunc describes the behavior when the Requeue method of the
// parent MockStore instance is invoked.
type StoreRequeueFunc[T workerutil.Record] struct {
	defaultHook func(context.Context, int, time.Time) error
	hooks       []func(context.Context, int, time.Time) error
	history     []StoreRequeueFuncCall[T]
	mutex       sync.Mutex
}

// Requeue delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStore[T]) Requeue(v0 context.Context, v1 int, v2 time.Time) error {
	r0 := m.RequeueFunc.nextHook()(v0, v1, v2)
	m.RequeueFunc.appendCall(StoreRequeueFuncCall[T]{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Requeue method of
// the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreRequeueFunc[T]) SetDefaultHook(hook func(context.Context, int, time.Time) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Requeue method of the parent MockStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StoreRequeueFunc[T]) PushHook(hook func(context.Context, int, time.Time) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreRequeueFunc[T]) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int, time.Time) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreRequeueFunc[T]) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int, time.Time) error {
		return r0
	})
}

func (f *StoreRequeueFunc[T]) nextHook() func(context.Context, int, time.Time) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreRequeueFunc[T]) appendCall(r0 StoreRequeueFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreRequeueFuncCall objects describing the
// invocations of this function.
func (f *StoreRequeueFunc[T]) History() []StoreRequeueFuncCall[T] {
	f.mutex.Lock()
	history := make([]StoreRequeueFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreRequeueFuncCall is an object that describes an invocation of method
// Requeue on an instance of MockStore.
type StoreRequeueFuncCall[T workerutil.Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreRequeueFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreRequeueFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreResetStalledFunc describes the behavior when the ResetStalled method
// of the parent MockStore instance is invoked.
type StoreResetStalledFunc[T workerutil.Record] struct {
	defaultHook func(context.Context) (map[int]time.Duration, map[int]time.Duration, error)
	hooks       []func(context.Context) (map[int]time.Duration, map[int]time.Duration, error)
	history     []StoreResetStalledFuncCall[T]
	mutex       sync.Mutex
}

// ResetStalled delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStore[T]) ResetStalled(v0 context.Context) (map[int]time.Duration, map[int]time.Duration, error) {
	r0, r1, r2 := m.ResetStalledFunc.nextHook()(v0)
	m.ResetStalledFunc.appendCall(StoreResetStalledFuncCall[T]{v0, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the ResetStalled method
// of the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreResetStalledFunc[T]) SetDefaultHook(hook func(context.Context) (map[int]time.Duration, map[int]time.Duration, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ResetStalled method of the parent MockStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreResetStalledFunc[T]) PushHook(hook func(context.Context) (map[int]time.Duration, map[int]time.Duration, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreResetStalledFunc[T]) SetDefaultReturn(r0 map[int]time.Duration, r1 map[int]time.Duration, r2 error) {
	f.SetDefaultHook(func(context.Context) (map[int]time.Duration, map[int]time.Duration, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreResetStalledFunc[T]) PushReturn(r0 map[int]time.Duration, r1 map[int]time.Duration, r2 error) {
	f.PushHook(func(context.Context) (map[int]time.Duration, map[int]time.Duration, error) {
		return r0, r1, r2
	})
}

func (f *StoreResetStalledFunc[T]) nextHook() func(context.Context) (map[int]time.Duration, map[int]time.Duration, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreResetStalledFunc[T]) appendCall(r0 StoreResetStalledFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreResetStalledFuncCall objects
// describing the invocations of this function.
func (f *StoreResetStalledFunc[T]) History() []StoreResetStalledFuncCall[T] {
	f.mutex.Lock()
	history := make([]StoreResetStalledFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreResetStalledFuncCall is an object that describes an invocation of
// method ResetStalled on an instance of MockStore.
type StoreResetStalledFuncCall[T workerutil.Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[int]time.Duration
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 map[int]time.Duration
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreResetStalledFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreResetStalledFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// StoreUpdateExecutionLogEntryFunc describes the behavior when the
// UpdateExecutionLogEntry method of the parent MockStore instance is
// invoked.
type StoreUpdateExecutionLogEntryFunc[T workerutil.Record] struct {
	defaultHook func(context.Context, int, int, executor.ExecutionLogEntry, store.ExecutionLogEntryOptions) error
	hooks       []func(context.Context, int, int, executor.ExecutionLogEntry, store.ExecutionLogEntryOptions) error
	history     []StoreUpdateExecutionLogEntryFuncCall[T]
	mutex       sync.Mutex
}

// UpdateExecutionLogEntry delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockStore[T]) UpdateExecutionLogEntry(v0 context.Context, v1 int, v2 int, v3 executor.ExecutionLogEntry, v4 store.ExecutionLogEntryOptions) error {
	r0 := m.UpdateExecutionLogEntryFunc.nextHook()(v0, v1, v2, v3, v4)
	m.UpdateExecutionLogEntryFunc.appendCall(StoreUpdateExecutionLogEntryFuncCall[T]{v0, v1, v2, v3, v4, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// UpdateExecutionLogEntry method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreUpdateExecutionLogEntryFunc[T]) SetDefaultHook(hook func(context.Context, int, int, executor.ExecutionLogEntry, store.ExecutionLogEntryOptions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateExecutionLogEntry method of the parent MockStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *StoreUpdateExecutionLogEntryFunc[T]) PushHook(hook func(context.Context, int, int, executor.ExecutionLogEntry, store.ExecutionLogEntryOptions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreUpdateExecutionLogEntryFunc[T]) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int, int, executor.ExecutionLogEntry, store.ExecutionLogEntryOptions) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreUpdateExecutionLogEntryFunc[T]) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int, int, executor.ExecutionLogEntry, store.ExecutionLogEntryOptions) error {
		return r0
	})
}

func (f *StoreUpdateExecutionLogEntryFunc[T]) nextHook() func(context.Context, int, int, executor.ExecutionLogEntry, store.ExecutionLogEntryOptions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreUpdateExecutionLogEntryFunc[T]) appendCall(r0 StoreUpdateExecutionLogEntryFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreUpdateExecutionLogEntryFuncCall
// objects describing the invocations of this function.
func (f *StoreUpdateExecutionLogEntryFunc[T]) History() []StoreUpdateExecutionLogEntryFuncCall[T] {
	f.mutex.Lock()
	history := make([]StoreUpdateExecutionLogEntryFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreUpdateExecutionLogEntryFuncCall is an object that describes an
// invocation of method UpdateExecutionLogEntry on an instance of MockStore.
type StoreUpdateExecutionLogEntryFuncCall[T workerutil.Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 executor.ExecutionLogEntry
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 store.ExecutionLogEntryOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreUpdateExecutionLogEntryFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreUpdateExecutionLogEntryFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreWithFunc describes the behavior when the With method of the parent
// MockStore instance is invoked.
type StoreWithFunc[T workerutil.Record] struct {
	defaultHook func(basestore.ShareableStore) store.Store[T]
	hooks       []func(basestore.ShareableStore) store.Store[T]
	history     []StoreWithFuncCall[T]
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStore[T]) With(v0 basestore.ShareableStore) store.Store[T] {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(StoreWithFuncCall[T]{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreWithFunc[T]) SetDefaultHook(hook func(basestore.ShareableStore) store.Store[T]) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StoreWithFunc[T]) PushHook(hook func(basestore.ShareableStore) store.Store[T]) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreWithFunc[T]) SetDefaultReturn(r0 store.Store[T]) {
	f.SetDefaultHook(func(basestore.ShareableStore) store.Store[T] {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreWithFunc[T]) PushReturn(r0 store.Store[T]) {
	f.PushHook(func(basestore.ShareableStore) store.Store[T] {
		return r0
	})
}

func (f *StoreWithFunc[T]) nextHook() func(basestore.ShareableStore) store.Store[T] {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreWithFunc[T]) appendCall(r0 StoreWithFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreWithFuncCall objects describing the
// invocations of this function.
func (f *StoreWithFunc[T]) History() []StoreWithFuncCall[T] {
	f.mutex.Lock()
	history := make([]StoreWithFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreWithFuncCall is an object that describes an invocation of method
// With on an instance of MockStore.
type StoreWithFuncCall[T workerutil.Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 store.Store[T]
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreWithFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreWithFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0}
}
