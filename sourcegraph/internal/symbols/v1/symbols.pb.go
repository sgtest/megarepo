// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: symbols.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo is the name of the repository to search in
	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	// commit id is the commit to search in
	CommitId string `protobuf:"bytes,2,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	// query is the search query
	Query string `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	// is_reg_exp, if true, will treat the Pattern as a regular expression
	IsRegExp bool `protobuf:"varint,4,opt,name=is_reg_exp,json=isRegExp,proto3" json:"is_reg_exp,omitempty"`
	// is_case_sensitive, if false, will ignore the case of query and file pattern when
	// finding matches
	IsCaseSensitive bool `protobuf:"varint,5,opt,name=is_case_sensitive,json=isCaseSensitive,proto3" json:"is_case_sensitive,omitempty"`
	// include_patterns is a list of regexes that symbol's file paths
	// need to match to get included in the result
	//
	// The patterns are ANDed together; a file's path must match all patterns
	// for it to be kept. That is also why it is a list (unlike the singular
	// ExcludePattern); it is not possible in general to construct a single
	// glob or Go regexp that represents multiple such patterns ANDed together.
	IncludePatterns []string `protobuf:"bytes,6,rep,name=include_patterns,json=includePatterns,proto3" json:"include_patterns,omitempty"`
	// exclude_pattern is an optional regex that symbol's file paths
	// need to match to get included in the result
	ExcludePattern string `protobuf:"bytes,7,opt,name=exclude_pattern,json=excludePattern,proto3" json:"exclude_pattern,omitempty"`
	// first indicates that only the first n symbols should be returned.
	First int32 `protobuf:"varint,8,opt,name=first,proto3" json:"first,omitempty"`
	// timeout is the maximum amount of time the symbols search should take.
	//
	// If timeout isn't specified, a default timeout of 60 seconds is used.
	Timeout *durationpb.Duration `protobuf:"bytes,9,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_symbols_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_symbols_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_symbols_proto_rawDescGZIP(), []int{0}
}

func (x *SearchRequest) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *SearchRequest) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

func (x *SearchRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchRequest) GetIsRegExp() bool {
	if x != nil {
		return x.IsRegExp
	}
	return false
}

func (x *SearchRequest) GetIsCaseSensitive() bool {
	if x != nil {
		return x.IsCaseSensitive
	}
	return false
}

func (x *SearchRequest) GetIncludePatterns() []string {
	if x != nil {
		return x.IncludePatterns
	}
	return nil
}

func (x *SearchRequest) GetExcludePattern() string {
	if x != nil {
		return x.ExcludePattern
	}
	return ""
}

func (x *SearchRequest) GetFirst() int32 {
	if x != nil {
		return x.First
	}
	return 0
}

func (x *SearchRequest) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type SearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// symbols is the list of symbols that matched the search query
	Symbols []*SearchResponse_Symbol `protobuf:"bytes,1,rep,name=symbols,proto3" json:"symbols,omitempty"`
	// error is the error message if the search failed
	Error *string `protobuf:"bytes,2,opt,name=error,proto3,oneof" json:"error,omitempty"` // TODO@ggilmore: Custom error type?
}

func (x *SearchResponse) Reset() {
	*x = SearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_symbols_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse) ProtoMessage() {}

func (x *SearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_symbols_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return file_symbols_proto_rawDescGZIP(), []int{1}
}

func (x *SearchResponse) GetSymbols() []*SearchResponse_Symbol {
	if x != nil {
		return x.Symbols
	}
	return nil
}

func (x *SearchResponse) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

// LocalCodeIntelRequest is the request to the LocalCodeIntel method.
type LocalCodeIntelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo_commit_path is the
	RepoCommitPath *RepoCommitPath `protobuf:"bytes,1,opt,name=repo_commit_path,json=repoCommitPath,proto3" json:"repo_commit_path,omitempty"`
}

func (x *LocalCodeIntelRequest) Reset() {
	*x = LocalCodeIntelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_symbols_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalCodeIntelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalCodeIntelRequest) ProtoMessage() {}

func (x *LocalCodeIntelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_symbols_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalCodeIntelRequest.ProtoReflect.Descriptor instead.
func (*LocalCodeIntelRequest) Descriptor() ([]byte, []int) {
	return file_symbols_proto_rawDescGZIP(), []int{2}
}

func (x *LocalCodeIntelRequest) GetRepoCommitPath() *RepoCommitPath {
	if x != nil {
		return x.RepoCommitPath
	}
	return nil
}

type LocalCodeIntelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbols []*LocalCodeIntelResponse_Symbol `protobuf:"bytes,1,rep,name=symbols,proto3" json:"symbols,omitempty"`
}

func (x *LocalCodeIntelResponse) Reset() {
	*x = LocalCodeIntelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_symbols_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalCodeIntelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalCodeIntelResponse) ProtoMessage() {}

func (x *LocalCodeIntelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_symbols_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalCodeIntelResponse.ProtoReflect.Descriptor instead.
func (*LocalCodeIntelResponse) Descriptor() ([]byte, []int) {
	return file_symbols_proto_rawDescGZIP(), []int{3}
}

func (x *LocalCodeIntelResponse) GetSymbols() []*LocalCodeIntelResponse_Symbol {
	if x != nil {
		return x.Symbols
	}
	return nil
}

// ListLanguagesRequest is the request to the ListLanguages method.
type ListLanguagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListLanguagesRequest) Reset() {
	*x = ListLanguagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_symbols_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLanguagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLanguagesRequest) ProtoMessage() {}

func (x *ListLanguagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_symbols_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLanguagesRequest.ProtoReflect.Descriptor instead.
func (*ListLanguagesRequest) Descriptor() ([]byte, []int) {
	return file_symbols_proto_rawDescGZIP(), []int{4}
}

// ListLanguagesResponse is the response from the ListLanguages method.
type ListLanguagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// language_file_name_map is a of map of language names to
	// glob patterns that match files of that language.
	//
	// Example: "Ruby" -> ["*.rb", "*.ruby"]
	LanguageFileNameMap map[string]*ListLanguagesResponse_GlobFilePatterns `protobuf:"bytes,1,rep,name=language_file_name_map,json=languageFileNameMap,proto3" json:"language_file_name_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListLanguagesResponse) Reset() {
	*x = ListLanguagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_symbols_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLanguagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLanguagesResponse) ProtoMessage() {}

func (x *ListLanguagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_symbols_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLanguagesResponse.ProtoReflect.Descriptor instead.
func (*ListLanguagesResponse) Descriptor() ([]byte, []int) {
	return file_symbols_proto_rawDescGZIP(), []int{5}
}

func (x *ListLanguagesResponse) GetLanguageFileNameMap() map[string]*ListLanguagesResponse_GlobFilePatterns {
	if x != nil {
		return x.LanguageFileNameMap
	}
	return nil
}

type SymbolInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo_commit_path is the repo, commit, and path to the file to get symbol information for
	RepoCommitPath *RepoCommitPath `protobuf:"bytes,1,opt,name=repo_commit_path,json=repoCommitPath,proto3" json:"repo_commit_path,omitempty"`
	// point is the point in the file to get symbol information for
	Point *Point `protobuf:"bytes,2,opt,name=point,proto3" json:"point,omitempty"`
}

func (x *SymbolInfoRequest) Reset() {
	*x = SymbolInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_symbols_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolInfoRequest) ProtoMessage() {}

func (x *SymbolInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_symbols_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolInfoRequest.ProtoReflect.Descriptor instead.
func (*SymbolInfoRequest) Descriptor() ([]byte, []int) {
	return file_symbols_proto_rawDescGZIP(), []int{6}
}

func (x *SymbolInfoRequest) GetRepoCommitPath() *RepoCommitPath {
	if x != nil {
		return x.RepoCommitPath
	}
	return nil
}

func (x *SymbolInfoRequest) GetPoint() *Point {
	if x != nil {
		return x.Point
	}
	return nil
}

// SymbolInfoResponse is the response from the SymbolInfo method.
type SymbolInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// result is the definition / hover information  for the symbol at the given point in the file,
	// if available.
	Result *SymbolInfoResponse_DefinitionResult `protobuf:"bytes,1,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (x *SymbolInfoResponse) Reset() {
	*x = SymbolInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_symbols_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolInfoResponse) ProtoMessage() {}

func (x *SymbolInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_symbols_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolInfoResponse.ProtoReflect.Descriptor instead.
func (*SymbolInfoResponse) Descriptor() ([]byte, []int) {
	return file_symbols_proto_rawDescGZIP(), []int{7}
}

func (x *SymbolInfoResponse) GetResult() *SymbolInfoResponse_DefinitionResult {
	if x != nil {
		return x.Result
	}
	return nil
}

// RepoCommitPath is an identifier that is  combination of a repository's name,
// git commit SHA, and a file path.
type RepoCommitPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo is the repository's name
	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	// commit is the git commit SHA
	Commit string `protobuf:"bytes,2,opt,name=commit,proto3" json:"commit,omitempty"`
	// path is the file path
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *RepoCommitPath) Reset() {
	*x = RepoCommitPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_symbols_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepoCommitPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoCommitPath) ProtoMessage() {}

func (x *RepoCommitPath) ProtoReflect() protoreflect.Message {
	mi := &file_symbols_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoCommitPath.ProtoReflect.Descriptor instead.
func (*RepoCommitPath) Descriptor() ([]byte, []int) {
	return file_symbols_proto_rawDescGZIP(), []int{8}
}

func (x *RepoCommitPath) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *RepoCommitPath) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *RepoCommitPath) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// Range describes the location and length of text associated with a symbol.
type Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// row is the line number of the range
	Row int32 `protobuf:"varint,1,opt,name=row,proto3" json:"row,omitempty"`
	// col is the character offset of the range
	Column int32 `protobuf:"varint,2,opt,name=column,proto3" json:"column,omitempty"`
	// length is the length (in number of characters) of the range
	Length int32 `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *Range) Reset() {
	*x = Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_symbols_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_symbols_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_symbols_proto_rawDescGZIP(), []int{9}
}

func (x *Range) GetRow() int32 {
	if x != nil {
		return x.Row
	}
	return 0
}

func (x *Range) GetColumn() int32 {
	if x != nil {
		return x.Column
	}
	return 0
}

func (x *Range) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

// Point describes a cursor's location within a file.
type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// row is the line number of the point
	Row int32 `protobuf:"varint,1,opt,name=row,proto3" json:"row,omitempty"`
	// col is the character offset of the point
	Column int32 `protobuf:"varint,2,opt,name=column,proto3" json:"column,omitempty"`
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_symbols_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_symbols_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_symbols_proto_rawDescGZIP(), []int{10}
}

func (x *Point) GetRow() int32 {
	if x != nil {
		return x.Row
	}
	return 0
}

func (x *Point) GetColumn() int32 {
	if x != nil {
		return x.Column
	}
	return 0
}

// TODO@ggilmore: Note - GRPC has its own healthchecking protocol that we should use instead of this.
// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md for more information.
type HealthzRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HealthzRequest) Reset() {
	*x = HealthzRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_symbols_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthzRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthzRequest) ProtoMessage() {}

func (x *HealthzRequest) ProtoReflect() protoreflect.Message {
	mi := &file_symbols_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthzRequest.ProtoReflect.Descriptor instead.
func (*HealthzRequest) Descriptor() ([]byte, []int) {
	return file_symbols_proto_rawDescGZIP(), []int{11}
}

// TODO@ggilmore: Note - GRPC has its own healthchecking protocol that we should use instead of this.
// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md for more information.
type HealthzResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HealthzResponse) Reset() {
	*x = HealthzResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_symbols_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthzResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthzResponse) ProtoMessage() {}

func (x *HealthzResponse) ProtoReflect() protoreflect.Message {
	mi := &file_symbols_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthzResponse.ProtoReflect.Descriptor instead.
func (*HealthzResponse) Descriptor() ([]byte, []int) {
	return file_symbols_proto_rawDescGZIP(), []int{12}
}

// Symbol is a code symbol
type SearchResponse_Symbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the symbol
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// path is the file path that the symbol occurs in
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// line is the line number in the file that the symbol occurs on
	Line int32 `protobuf:"varint,3,opt,name=line,proto3" json:"line,omitempty"`
	// character is the character offset in the line that the symbol occurs at
	Character int32 `protobuf:"varint,4,opt,name=character,proto3" json:"character,omitempty"`
	// kind is the kind of symbol
	Kind string `protobuf:"bytes,5,opt,name=kind,proto3" json:"kind,omitempty"`
	// language is the language (e.g. Go, TypeScript, Python) of the symbol
	Language string `protobuf:"bytes,6,opt,name=language,proto3" json:"language,omitempty"`
	// parent is the name of the symbol's parent
	Parent string `protobuf:"bytes,7,opt,name=parent,proto3" json:"parent,omitempty"`
	// parent_kind is the kind of the symbol's parent
	ParentKind string `protobuf:"bytes,8,opt,name=parent_kind,json=parentKind,proto3" json:"parent_kind,omitempty"`
	// signature is the signature of the symbol (TODO@ggilmore - what is this?)
	Signature string `protobuf:"bytes,9,opt,name=signature,proto3" json:"signature,omitempty"`
	// file_limited indicates that the search ran into the limit set by "first" in the request, and so the result
	// set may be incomplete.
	FileLimited bool `protobuf:"varint,10,opt,name=file_limited,json=fileLimited,proto3" json:"file_limited,omitempty"`
}

func (x *SearchResponse_Symbol) Reset() {
	*x = SearchResponse_Symbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_symbols_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResponse_Symbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse_Symbol) ProtoMessage() {}

func (x *SearchResponse_Symbol) ProtoReflect() protoreflect.Message {
	mi := &file_symbols_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse_Symbol.ProtoReflect.Descriptor instead.
func (*SearchResponse_Symbol) Descriptor() ([]byte, []int) {
	return file_symbols_proto_rawDescGZIP(), []int{1, 0}
}

func (x *SearchResponse_Symbol) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchResponse_Symbol) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *SearchResponse_Symbol) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *SearchResponse_Symbol) GetCharacter() int32 {
	if x != nil {
		return x.Character
	}
	return 0
}

func (x *SearchResponse_Symbol) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *SearchResponse_Symbol) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *SearchResponse_Symbol) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *SearchResponse_Symbol) GetParentKind() string {
	if x != nil {
		return x.ParentKind
	}
	return ""
}

func (x *SearchResponse_Symbol) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *SearchResponse_Symbol) GetFileLimited() bool {
	if x != nil {
		return x.FileLimited
	}
	return false
}

type LocalCodeIntelResponse_Symbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the symbol
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// hover is the hover text of the symbol
	Hover string `protobuf:"bytes,2,opt,name=hover,proto3" json:"hover,omitempty"`
	// def is the location of the symbol's definition
	Def *Range `protobuf:"bytes,3,opt,name=def,proto3" json:"def,omitempty"`
	// refs is the list of locations of references for the given symbol
	Refs []*Range `protobuf:"bytes,4,rep,name=refs,proto3" json:"refs,omitempty"`
}

func (x *LocalCodeIntelResponse_Symbol) Reset() {
	*x = LocalCodeIntelResponse_Symbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_symbols_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalCodeIntelResponse_Symbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalCodeIntelResponse_Symbol) ProtoMessage() {}

func (x *LocalCodeIntelResponse_Symbol) ProtoReflect() protoreflect.Message {
	mi := &file_symbols_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalCodeIntelResponse_Symbol.ProtoReflect.Descriptor instead.
func (*LocalCodeIntelResponse_Symbol) Descriptor() ([]byte, []int) {
	return file_symbols_proto_rawDescGZIP(), []int{3, 0}
}

func (x *LocalCodeIntelResponse_Symbol) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LocalCodeIntelResponse_Symbol) GetHover() string {
	if x != nil {
		return x.Hover
	}
	return ""
}

func (x *LocalCodeIntelResponse_Symbol) GetDef() *Range {
	if x != nil {
		return x.Def
	}
	return nil
}

func (x *LocalCodeIntelResponse_Symbol) GetRefs() []*Range {
	if x != nil {
		return x.Refs
	}
	return nil
}

type ListLanguagesResponse_GlobFilePatterns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Patterns []string `protobuf:"bytes,1,rep,name=patterns,proto3" json:"patterns,omitempty"`
}

func (x *ListLanguagesResponse_GlobFilePatterns) Reset() {
	*x = ListLanguagesResponse_GlobFilePatterns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_symbols_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLanguagesResponse_GlobFilePatterns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLanguagesResponse_GlobFilePatterns) ProtoMessage() {}

func (x *ListLanguagesResponse_GlobFilePatterns) ProtoReflect() protoreflect.Message {
	mi := &file_symbols_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLanguagesResponse_GlobFilePatterns.ProtoReflect.Descriptor instead.
func (*ListLanguagesResponse_GlobFilePatterns) Descriptor() ([]byte, []int) {
	return file_symbols_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ListLanguagesResponse_GlobFilePatterns) GetPatterns() []string {
	if x != nil {
		return x.Patterns
	}
	return nil
}

type SymbolInfoResponse_Definition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repo_commit_path is the repository name, commit, and file path for the symbol's definition.
	RepoCommitPath *RepoCommitPath `protobuf:"bytes,1,opt,name=repo_commit_path,json=repoCommitPath,proto3" json:"repo_commit_path,omitempty"`
	// range is the range of the symbol's definition, if it is known.
	Range *Range `protobuf:"bytes,2,opt,name=range,proto3,oneof" json:"range,omitempty"`
}

func (x *SymbolInfoResponse_Definition) Reset() {
	*x = SymbolInfoResponse_Definition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_symbols_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolInfoResponse_Definition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolInfoResponse_Definition) ProtoMessage() {}

func (x *SymbolInfoResponse_Definition) ProtoReflect() protoreflect.Message {
	mi := &file_symbols_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolInfoResponse_Definition.ProtoReflect.Descriptor instead.
func (*SymbolInfoResponse_Definition) Descriptor() ([]byte, []int) {
	return file_symbols_proto_rawDescGZIP(), []int{7, 0}
}

func (x *SymbolInfoResponse_Definition) GetRepoCommitPath() *RepoCommitPath {
	if x != nil {
		return x.RepoCommitPath
	}
	return nil
}

func (x *SymbolInfoResponse_Definition) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

type SymbolInfoResponse_DefinitionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// definition is the information associated with the location of the symbol's definition.
	Definition *SymbolInfoResponse_Definition `protobuf:"bytes,1,opt,name=definition,proto3" json:"definition,omitempty"`
	// hover is the hover text associated with the symbol
	Hover *string `protobuf:"bytes,2,opt,name=hover,proto3,oneof" json:"hover,omitempty"`
}

func (x *SymbolInfoResponse_DefinitionResult) Reset() {
	*x = SymbolInfoResponse_DefinitionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_symbols_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolInfoResponse_DefinitionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolInfoResponse_DefinitionResult) ProtoMessage() {}

func (x *SymbolInfoResponse_DefinitionResult) ProtoReflect() protoreflect.Message {
	mi := &file_symbols_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolInfoResponse_DefinitionResult.ProtoReflect.Descriptor instead.
func (*SymbolInfoResponse_DefinitionResult) Descriptor() ([]byte, []int) {
	return file_symbols_proto_rawDescGZIP(), []int{7, 1}
}

func (x *SymbolInfoResponse_DefinitionResult) GetDefinition() *SymbolInfoResponse_Definition {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *SymbolInfoResponse_DefinitionResult) GetHover() string {
	if x != nil && x.Hover != nil {
		return *x.Hover
	}
	return ""
}

var File_symbols_proto protoreflect.FileDescriptor

var file_symbols_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbf, 0x02, 0x0a, 0x0d,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70,
	0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x5f, 0x65,
	0x78, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x52, 0x65, 0x67, 0x45,
	0x78, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69,
	0x73, 0x43, 0x61, 0x73, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x81, 0x03,
	0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3b, 0x0a, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x19, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x1a, 0x8c, 0x02, 0x0a, 0x06, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x5d, 0x0a, 0x15, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x72, 0x65,
	0x70, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x22, 0xdd, 0x01, 0x0a, 0x16, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73,
	0x1a, 0x7e, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x68,
	0x6f, 0x76, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x03, 0x64, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x03, 0x64, 0x65, 0x66, 0x12, 0x25, 0x0a, 0x04, 0x72, 0x65, 0x66,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x04, 0x72, 0x65, 0x66, 0x73,
	0x22, 0x16, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb4, 0x02, 0x0a, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6f, 0x0a, 0x16, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x4d, 0x61, 0x70, 0x1a, 0x2e, 0x0a, 0x10, 0x47, 0x6c, 0x6f, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x73, 0x1a, 0x7a, 0x0a, 0x18, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x82, 0x01, 0x0a, 0x11, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0e, 0x72, 0x65, 0x70,
	0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x05, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x22, 0xff, 0x02, 0x0a, 0x12, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x8a, 0x01, 0x0a, 0x0a, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6f,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0e,
	0x72, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2c,
	0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x82, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x49, 0x0a, 0x0a, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x05, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x50, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x49, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x72, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x22, 0x31, 0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x10, 0x0a, 0x0e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x11, 0x0a, 0x0f, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x7a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x9b, 0x03, 0x0a, 0x0e,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x41,
	0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x19, 0x2e, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x59, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x6c, 0x12, 0x21, 0x2e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0d,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x20, 0x2e,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0a, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1d, 0x2e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x12, 0x1a,
	0x2e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x7a, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73,
	0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_symbols_proto_rawDescOnce sync.Once
	file_symbols_proto_rawDescData = file_symbols_proto_rawDesc
)

func file_symbols_proto_rawDescGZIP() []byte {
	file_symbols_proto_rawDescOnce.Do(func() {
		file_symbols_proto_rawDescData = protoimpl.X.CompressGZIP(file_symbols_proto_rawDescData)
	})
	return file_symbols_proto_rawDescData
}

var file_symbols_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_symbols_proto_goTypes = []interface{}{
	(*SearchRequest)(nil),                          // 0: symbols.v1.SearchRequest
	(*SearchResponse)(nil),                         // 1: symbols.v1.SearchResponse
	(*LocalCodeIntelRequest)(nil),                  // 2: symbols.v1.LocalCodeIntelRequest
	(*LocalCodeIntelResponse)(nil),                 // 3: symbols.v1.LocalCodeIntelResponse
	(*ListLanguagesRequest)(nil),                   // 4: symbols.v1.ListLanguagesRequest
	(*ListLanguagesResponse)(nil),                  // 5: symbols.v1.ListLanguagesResponse
	(*SymbolInfoRequest)(nil),                      // 6: symbols.v1.SymbolInfoRequest
	(*SymbolInfoResponse)(nil),                     // 7: symbols.v1.SymbolInfoResponse
	(*RepoCommitPath)(nil),                         // 8: symbols.v1.RepoCommitPath
	(*Range)(nil),                                  // 9: symbols.v1.Range
	(*Point)(nil),                                  // 10: symbols.v1.Point
	(*HealthzRequest)(nil),                         // 11: symbols.v1.HealthzRequest
	(*HealthzResponse)(nil),                        // 12: symbols.v1.HealthzResponse
	(*SearchResponse_Symbol)(nil),                  // 13: symbols.v1.SearchResponse.Symbol
	(*LocalCodeIntelResponse_Symbol)(nil),          // 14: symbols.v1.LocalCodeIntelResponse.Symbol
	(*ListLanguagesResponse_GlobFilePatterns)(nil), // 15: symbols.v1.ListLanguagesResponse.GlobFilePatterns
	nil,                                   // 16: symbols.v1.ListLanguagesResponse.LanguageFileNameMapEntry
	(*SymbolInfoResponse_Definition)(nil), // 17: symbols.v1.SymbolInfoResponse.Definition
	(*SymbolInfoResponse_DefinitionResult)(nil), // 18: symbols.v1.SymbolInfoResponse.DefinitionResult
	(*durationpb.Duration)(nil),                 // 19: google.protobuf.Duration
}
var file_symbols_proto_depIdxs = []int32{
	19, // 0: symbols.v1.SearchRequest.timeout:type_name -> google.protobuf.Duration
	13, // 1: symbols.v1.SearchResponse.symbols:type_name -> symbols.v1.SearchResponse.Symbol
	8,  // 2: symbols.v1.LocalCodeIntelRequest.repo_commit_path:type_name -> symbols.v1.RepoCommitPath
	14, // 3: symbols.v1.LocalCodeIntelResponse.symbols:type_name -> symbols.v1.LocalCodeIntelResponse.Symbol
	16, // 4: symbols.v1.ListLanguagesResponse.language_file_name_map:type_name -> symbols.v1.ListLanguagesResponse.LanguageFileNameMapEntry
	8,  // 5: symbols.v1.SymbolInfoRequest.repo_commit_path:type_name -> symbols.v1.RepoCommitPath
	10, // 6: symbols.v1.SymbolInfoRequest.point:type_name -> symbols.v1.Point
	18, // 7: symbols.v1.SymbolInfoResponse.result:type_name -> symbols.v1.SymbolInfoResponse.DefinitionResult
	9,  // 8: symbols.v1.LocalCodeIntelResponse.Symbol.def:type_name -> symbols.v1.Range
	9,  // 9: symbols.v1.LocalCodeIntelResponse.Symbol.refs:type_name -> symbols.v1.Range
	15, // 10: symbols.v1.ListLanguagesResponse.LanguageFileNameMapEntry.value:type_name -> symbols.v1.ListLanguagesResponse.GlobFilePatterns
	8,  // 11: symbols.v1.SymbolInfoResponse.Definition.repo_commit_path:type_name -> symbols.v1.RepoCommitPath
	9,  // 12: symbols.v1.SymbolInfoResponse.Definition.range:type_name -> symbols.v1.Range
	17, // 13: symbols.v1.SymbolInfoResponse.DefinitionResult.definition:type_name -> symbols.v1.SymbolInfoResponse.Definition
	0,  // 14: symbols.v1.SymbolsService.Search:input_type -> symbols.v1.SearchRequest
	2,  // 15: symbols.v1.SymbolsService.LocalCodeIntel:input_type -> symbols.v1.LocalCodeIntelRequest
	4,  // 16: symbols.v1.SymbolsService.ListLanguages:input_type -> symbols.v1.ListLanguagesRequest
	6,  // 17: symbols.v1.SymbolsService.SymbolInfo:input_type -> symbols.v1.SymbolInfoRequest
	11, // 18: symbols.v1.SymbolsService.Healthz:input_type -> symbols.v1.HealthzRequest
	1,  // 19: symbols.v1.SymbolsService.Search:output_type -> symbols.v1.SearchResponse
	3,  // 20: symbols.v1.SymbolsService.LocalCodeIntel:output_type -> symbols.v1.LocalCodeIntelResponse
	5,  // 21: symbols.v1.SymbolsService.ListLanguages:output_type -> symbols.v1.ListLanguagesResponse
	7,  // 22: symbols.v1.SymbolsService.SymbolInfo:output_type -> symbols.v1.SymbolInfoResponse
	12, // 23: symbols.v1.SymbolsService.Healthz:output_type -> symbols.v1.HealthzResponse
	19, // [19:24] is the sub-list for method output_type
	14, // [14:19] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_symbols_proto_init() }
func file_symbols_proto_init() {
	if File_symbols_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_symbols_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_symbols_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_symbols_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalCodeIntelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_symbols_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalCodeIntelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_symbols_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLanguagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_symbols_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLanguagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_symbols_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_symbols_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_symbols_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepoCommitPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_symbols_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_symbols_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_symbols_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthzRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_symbols_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthzResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_symbols_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResponse_Symbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_symbols_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalCodeIntelResponse_Symbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_symbols_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLanguagesResponse_GlobFilePatterns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_symbols_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolInfoResponse_Definition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_symbols_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolInfoResponse_DefinitionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_symbols_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_symbols_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_symbols_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_symbols_proto_msgTypes[18].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_symbols_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_symbols_proto_goTypes,
		DependencyIndexes: file_symbols_proto_depIdxs,
		MessageInfos:      file_symbols_proto_msgTypes,
	}.Build()
	File_symbols_proto = out.File
	file_symbols_proto_rawDesc = nil
	file_symbols_proto_goTypes = nil
	file_symbols_proto_depIdxs = nil
}
