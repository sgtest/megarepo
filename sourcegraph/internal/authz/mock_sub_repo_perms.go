// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package authz

import (
	"context"
	"sync"
)

// MockSubRepoPermissionChecker is a mock implementation of the
// SubRepoPermissionChecker interface (from the package
// github.com/sourcegraph/sourcegraph/internal/authz) used for unit testing.
type MockSubRepoPermissionChecker struct {
	// CurrentUserPermissionsFunc is an instance of a mock function object
	// controlling the behavior of the method CurrentUserPermissions.
	CurrentUserPermissionsFunc *SubRepoPermissionCheckerCurrentUserPermissionsFunc
}

// NewMockSubRepoPermissionChecker creates a new mock of the
// SubRepoPermissionChecker interface. All methods return zero values for
// all results, unless overwritten.
func NewMockSubRepoPermissionChecker() *MockSubRepoPermissionChecker {
	return &MockSubRepoPermissionChecker{
		CurrentUserPermissionsFunc: &SubRepoPermissionCheckerCurrentUserPermissionsFunc{
			defaultHook: func(context.Context, RepoContent) (Perms, error) {
				return 0, nil
			},
		},
	}
}

// NewMockSubRepoPermissionCheckerFrom creates a new mock of the
// MockSubRepoPermissionChecker interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockSubRepoPermissionCheckerFrom(i SubRepoPermissionChecker) *MockSubRepoPermissionChecker {
	return &MockSubRepoPermissionChecker{
		CurrentUserPermissionsFunc: &SubRepoPermissionCheckerCurrentUserPermissionsFunc{
			defaultHook: i.CurrentUserPermissions,
		},
	}
}

// SubRepoPermissionCheckerCurrentUserPermissionsFunc describes the behavior
// when the CurrentUserPermissions method of the parent
// MockSubRepoPermissionChecker instance is invoked.
type SubRepoPermissionCheckerCurrentUserPermissionsFunc struct {
	defaultHook func(context.Context, RepoContent) (Perms, error)
	hooks       []func(context.Context, RepoContent) (Perms, error)
	history     []SubRepoPermissionCheckerCurrentUserPermissionsFuncCall
	mutex       sync.Mutex
}

// CurrentUserPermissions delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockSubRepoPermissionChecker) CurrentUserPermissions(v0 context.Context, v1 RepoContent) (Perms, error) {
	r0, r1 := m.CurrentUserPermissionsFunc.nextHook()(v0, v1)
	m.CurrentUserPermissionsFunc.appendCall(SubRepoPermissionCheckerCurrentUserPermissionsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CurrentUserPermissions method of the parent MockSubRepoPermissionChecker
// instance is invoked and the hook queue is empty.
func (f *SubRepoPermissionCheckerCurrentUserPermissionsFunc) SetDefaultHook(hook func(context.Context, RepoContent) (Perms, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CurrentUserPermissions method of the parent MockSubRepoPermissionChecker
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *SubRepoPermissionCheckerCurrentUserPermissionsFunc) PushHook(hook func(context.Context, RepoContent) (Perms, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SubRepoPermissionCheckerCurrentUserPermissionsFunc) SetDefaultReturn(r0 Perms, r1 error) {
	f.SetDefaultHook(func(context.Context, RepoContent) (Perms, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SubRepoPermissionCheckerCurrentUserPermissionsFunc) PushReturn(r0 Perms, r1 error) {
	f.PushHook(func(context.Context, RepoContent) (Perms, error) {
		return r0, r1
	})
}

func (f *SubRepoPermissionCheckerCurrentUserPermissionsFunc) nextHook() func(context.Context, RepoContent) (Perms, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SubRepoPermissionCheckerCurrentUserPermissionsFunc) appendCall(r0 SubRepoPermissionCheckerCurrentUserPermissionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SubRepoPermissionCheckerCurrentUserPermissionsFuncCall objects describing
// the invocations of this function.
func (f *SubRepoPermissionCheckerCurrentUserPermissionsFunc) History() []SubRepoPermissionCheckerCurrentUserPermissionsFuncCall {
	f.mutex.Lock()
	history := make([]SubRepoPermissionCheckerCurrentUserPermissionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SubRepoPermissionCheckerCurrentUserPermissionsFuncCall is an object that
// describes an invocation of method CurrentUserPermissions on an instance
// of MockSubRepoPermissionChecker.
type SubRepoPermissionCheckerCurrentUserPermissionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 RepoContent
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 Perms
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SubRepoPermissionCheckerCurrentUserPermissionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SubRepoPermissionCheckerCurrentUserPermissionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
