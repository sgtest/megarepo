// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package ratelimit

import (
	"context"
	"sync"

	redispool "github.com/sourcegraph/sourcegraph/internal/redispool"
)

// MockRateLimiter is a mock implementation of the RateLimiter interface
// (from the package github.com/sourcegraph/sourcegraph/internal/redispool)
// used for unit testing.
type MockRateLimiter struct {
	// GetTokensFromBucketFunc is an instance of a mock function object
	// controlling the behavior of the method GetTokensFromBucket.
	GetTokensFromBucketFunc *RateLimiterGetTokensFromBucketFunc
	// SetTokenBucketReplenishmentFunc is an instance of a mock function
	// object controlling the behavior of the method
	// SetTokenBucketReplenishment.
	SetTokenBucketReplenishmentFunc *RateLimiterSetTokenBucketReplenishmentFunc
}

// NewMockRateLimiter creates a new mock of the RateLimiter interface. All
// methods return zero values for all results, unless overwritten.
func NewMockRateLimiter() *MockRateLimiter {
	return &MockRateLimiter{
		GetTokensFromBucketFunc: &RateLimiterGetTokensFromBucketFunc{
			defaultHook: func(context.Context, string, int) (r0 bool, r1 int, r2 error) {
				return
			},
		},
		SetTokenBucketReplenishmentFunc: &RateLimiterSetTokenBucketReplenishmentFunc{
			defaultHook: func(context.Context, string, int32, int32) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockRateLimiter creates a new mock of the RateLimiter interface.
// All methods panic on invocation, unless overwritten.
func NewStrictMockRateLimiter() *MockRateLimiter {
	return &MockRateLimiter{
		GetTokensFromBucketFunc: &RateLimiterGetTokensFromBucketFunc{
			defaultHook: func(context.Context, string, int) (bool, int, error) {
				panic("unexpected invocation of MockRateLimiter.GetTokensFromBucket")
			},
		},
		SetTokenBucketReplenishmentFunc: &RateLimiterSetTokenBucketReplenishmentFunc{
			defaultHook: func(context.Context, string, int32, int32) error {
				panic("unexpected invocation of MockRateLimiter.SetTokenBucketReplenishment")
			},
		},
	}
}

// NewMockRateLimiterFrom creates a new mock of the MockRateLimiter
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockRateLimiterFrom(i redispool.RateLimiter) *MockRateLimiter {
	return &MockRateLimiter{
		GetTokensFromBucketFunc: &RateLimiterGetTokensFromBucketFunc{
			defaultHook: i.GetTokensFromBucket,
		},
		SetTokenBucketReplenishmentFunc: &RateLimiterSetTokenBucketReplenishmentFunc{
			defaultHook: i.SetTokenBucketReplenishment,
		},
	}
}

// RateLimiterGetTokensFromBucketFunc describes the behavior when the
// GetTokensFromBucket method of the parent MockRateLimiter instance is
// invoked.
type RateLimiterGetTokensFromBucketFunc struct {
	defaultHook func(context.Context, string, int) (bool, int, error)
	hooks       []func(context.Context, string, int) (bool, int, error)
	history     []RateLimiterGetTokensFromBucketFuncCall
	mutex       sync.Mutex
}

// GetTokensFromBucket delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockRateLimiter) GetTokensFromBucket(v0 context.Context, v1 string, v2 int) (bool, int, error) {
	r0, r1, r2 := m.GetTokensFromBucketFunc.nextHook()(v0, v1, v2)
	m.GetTokensFromBucketFunc.appendCall(RateLimiterGetTokensFromBucketFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetTokensFromBucket
// method of the parent MockRateLimiter instance is invoked and the hook
// queue is empty.
func (f *RateLimiterGetTokensFromBucketFunc) SetDefaultHook(hook func(context.Context, string, int) (bool, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTokensFromBucket method of the parent MockRateLimiter instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *RateLimiterGetTokensFromBucketFunc) PushHook(hook func(context.Context, string, int) (bool, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RateLimiterGetTokensFromBucketFunc) SetDefaultReturn(r0 bool, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, string, int) (bool, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RateLimiterGetTokensFromBucketFunc) PushReturn(r0 bool, r1 int, r2 error) {
	f.PushHook(func(context.Context, string, int) (bool, int, error) {
		return r0, r1, r2
	})
}

func (f *RateLimiterGetTokensFromBucketFunc) nextHook() func(context.Context, string, int) (bool, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RateLimiterGetTokensFromBucketFunc) appendCall(r0 RateLimiterGetTokensFromBucketFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RateLimiterGetTokensFromBucketFuncCall
// objects describing the invocations of this function.
func (f *RateLimiterGetTokensFromBucketFunc) History() []RateLimiterGetTokensFromBucketFuncCall {
	f.mutex.Lock()
	history := make([]RateLimiterGetTokensFromBucketFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RateLimiterGetTokensFromBucketFuncCall is an object that describes an
// invocation of method GetTokensFromBucket on an instance of
// MockRateLimiter.
type RateLimiterGetTokensFromBucketFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RateLimiterGetTokensFromBucketFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RateLimiterGetTokensFromBucketFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// RateLimiterSetTokenBucketReplenishmentFunc describes the behavior when
// the SetTokenBucketReplenishment method of the parent MockRateLimiter
// instance is invoked.
type RateLimiterSetTokenBucketReplenishmentFunc struct {
	defaultHook func(context.Context, string, int32, int32) error
	hooks       []func(context.Context, string, int32, int32) error
	history     []RateLimiterSetTokenBucketReplenishmentFuncCall
	mutex       sync.Mutex
}

// SetTokenBucketReplenishment delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockRateLimiter) SetTokenBucketReplenishment(v0 context.Context, v1 string, v2 int32, v3 int32) error {
	r0 := m.SetTokenBucketReplenishmentFunc.nextHook()(v0, v1, v2, v3)
	m.SetTokenBucketReplenishmentFunc.appendCall(RateLimiterSetTokenBucketReplenishmentFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// SetTokenBucketReplenishment method of the parent MockRateLimiter instance
// is invoked and the hook queue is empty.
func (f *RateLimiterSetTokenBucketReplenishmentFunc) SetDefaultHook(hook func(context.Context, string, int32, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetTokenBucketReplenishment method of the parent MockRateLimiter instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *RateLimiterSetTokenBucketReplenishmentFunc) PushHook(hook func(context.Context, string, int32, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RateLimiterSetTokenBucketReplenishmentFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string, int32, int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RateLimiterSetTokenBucketReplenishmentFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string, int32, int32) error {
		return r0
	})
}

func (f *RateLimiterSetTokenBucketReplenishmentFunc) nextHook() func(context.Context, string, int32, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RateLimiterSetTokenBucketReplenishmentFunc) appendCall(r0 RateLimiterSetTokenBucketReplenishmentFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// RateLimiterSetTokenBucketReplenishmentFuncCall objects describing the
// invocations of this function.
func (f *RateLimiterSetTokenBucketReplenishmentFunc) History() []RateLimiterSetTokenBucketReplenishmentFuncCall {
	f.mutex.Lock()
	history := make([]RateLimiterSetTokenBucketReplenishmentFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RateLimiterSetTokenBucketReplenishmentFuncCall is an object that
// describes an invocation of method SetTokenBucketReplenishment on an
// instance of MockRateLimiter.
type RateLimiterSetTokenBucketReplenishmentFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int32
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RateLimiterSetTokenBucketReplenishmentFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RateLimiterSetTokenBucketReplenishmentFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
