// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package dbmock

import (
	"context"
	"sync"

	database "github.com/sourcegraph/sourcegraph/internal/database"
	basestore "github.com/sourcegraph/sourcegraph/internal/database/basestore"
)

// MockUserEmailsStore is a mock implementation of the UserEmailsStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockUserEmailsStore struct {
	// AddFunc is an instance of a mock function object controlling the
	// behavior of the method Add.
	AddFunc *UserEmailsStoreAddFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *UserEmailsStoreDoneFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *UserEmailsStoreGetFunc
	// GetInitialSiteAdminEmailFunc is an instance of a mock function object
	// controlling the behavior of the method GetInitialSiteAdminEmail.
	GetInitialSiteAdminEmailFunc *UserEmailsStoreGetInitialSiteAdminEmailFunc
	// GetLatestVerificationSentEmailFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetLatestVerificationSentEmail.
	GetLatestVerificationSentEmailFunc *UserEmailsStoreGetLatestVerificationSentEmailFunc
	// GetPrimaryEmailFunc is an instance of a mock function object
	// controlling the behavior of the method GetPrimaryEmail.
	GetPrimaryEmailFunc *UserEmailsStoreGetPrimaryEmailFunc
	// GetVerifiedEmailsFunc is an instance of a mock function object
	// controlling the behavior of the method GetVerifiedEmails.
	GetVerifiedEmailsFunc *UserEmailsStoreGetVerifiedEmailsFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *UserEmailsStoreHandleFunc
	// ListByUserFunc is an instance of a mock function object controlling
	// the behavior of the method ListByUser.
	ListByUserFunc *UserEmailsStoreListByUserFunc
	// RemoveFunc is an instance of a mock function object controlling the
	// behavior of the method Remove.
	RemoveFunc *UserEmailsStoreRemoveFunc
	// SetLastVerificationFunc is an instance of a mock function object
	// controlling the behavior of the method SetLastVerification.
	SetLastVerificationFunc *UserEmailsStoreSetLastVerificationFunc
	// SetPrimaryEmailFunc is an instance of a mock function object
	// controlling the behavior of the method SetPrimaryEmail.
	SetPrimaryEmailFunc *UserEmailsStoreSetPrimaryEmailFunc
	// SetVerifiedFunc is an instance of a mock function object controlling
	// the behavior of the method SetVerified.
	SetVerifiedFunc *UserEmailsStoreSetVerifiedFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *UserEmailsStoreTransactFunc
	// VerifyFunc is an instance of a mock function object controlling the
	// behavior of the method Verify.
	VerifyFunc *UserEmailsStoreVerifyFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *UserEmailsStoreWithFunc
}

// NewMockUserEmailsStore creates a new mock of the UserEmailsStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockUserEmailsStore() *MockUserEmailsStore {
	return &MockUserEmailsStore{
		AddFunc: &UserEmailsStoreAddFunc{
			defaultHook: func(context.Context, int32, string, *string) error {
				return nil
			},
		},
		DoneFunc: &UserEmailsStoreDoneFunc{
			defaultHook: func(error) error {
				return nil
			},
		},
		GetFunc: &UserEmailsStoreGetFunc{
			defaultHook: func(context.Context, int32, string) (string, bool, error) {
				return "", false, nil
			},
		},
		GetInitialSiteAdminEmailFunc: &UserEmailsStoreGetInitialSiteAdminEmailFunc{
			defaultHook: func(context.Context) (string, error) {
				return "", nil
			},
		},
		GetLatestVerificationSentEmailFunc: &UserEmailsStoreGetLatestVerificationSentEmailFunc{
			defaultHook: func(context.Context, string) (*database.UserEmail, error) {
				return nil, nil
			},
		},
		GetPrimaryEmailFunc: &UserEmailsStoreGetPrimaryEmailFunc{
			defaultHook: func(context.Context, int32) (string, bool, error) {
				return "", false, nil
			},
		},
		GetVerifiedEmailsFunc: &UserEmailsStoreGetVerifiedEmailsFunc{
			defaultHook: func(context.Context, ...string) ([]*database.UserEmail, error) {
				return nil, nil
			},
		},
		HandleFunc: &UserEmailsStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				return nil
			},
		},
		ListByUserFunc: &UserEmailsStoreListByUserFunc{
			defaultHook: func(context.Context, database.UserEmailsListOptions) ([]*database.UserEmail, error) {
				return nil, nil
			},
		},
		RemoveFunc: &UserEmailsStoreRemoveFunc{
			defaultHook: func(context.Context, int32, string) error {
				return nil
			},
		},
		SetLastVerificationFunc: &UserEmailsStoreSetLastVerificationFunc{
			defaultHook: func(context.Context, int32, string, string) error {
				return nil
			},
		},
		SetPrimaryEmailFunc: &UserEmailsStoreSetPrimaryEmailFunc{
			defaultHook: func(context.Context, int32, string) error {
				return nil
			},
		},
		SetVerifiedFunc: &UserEmailsStoreSetVerifiedFunc{
			defaultHook: func(context.Context, int32, string, bool) error {
				return nil
			},
		},
		TransactFunc: &UserEmailsStoreTransactFunc{
			defaultHook: func(context.Context) (database.UserEmailsStore, error) {
				return nil, nil
			},
		},
		VerifyFunc: &UserEmailsStoreVerifyFunc{
			defaultHook: func(context.Context, int32, string, string) (bool, error) {
				return false, nil
			},
		},
		WithFunc: &UserEmailsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) database.UserEmailsStore {
				return nil
			},
		},
	}
}

// NewMockUserEmailsStoreFrom creates a new mock of the MockUserEmailsStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockUserEmailsStoreFrom(i database.UserEmailsStore) *MockUserEmailsStore {
	return &MockUserEmailsStore{
		AddFunc: &UserEmailsStoreAddFunc{
			defaultHook: i.Add,
		},
		DoneFunc: &UserEmailsStoreDoneFunc{
			defaultHook: i.Done,
		},
		GetFunc: &UserEmailsStoreGetFunc{
			defaultHook: i.Get,
		},
		GetInitialSiteAdminEmailFunc: &UserEmailsStoreGetInitialSiteAdminEmailFunc{
			defaultHook: i.GetInitialSiteAdminEmail,
		},
		GetLatestVerificationSentEmailFunc: &UserEmailsStoreGetLatestVerificationSentEmailFunc{
			defaultHook: i.GetLatestVerificationSentEmail,
		},
		GetPrimaryEmailFunc: &UserEmailsStoreGetPrimaryEmailFunc{
			defaultHook: i.GetPrimaryEmail,
		},
		GetVerifiedEmailsFunc: &UserEmailsStoreGetVerifiedEmailsFunc{
			defaultHook: i.GetVerifiedEmails,
		},
		HandleFunc: &UserEmailsStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListByUserFunc: &UserEmailsStoreListByUserFunc{
			defaultHook: i.ListByUser,
		},
		RemoveFunc: &UserEmailsStoreRemoveFunc{
			defaultHook: i.Remove,
		},
		SetLastVerificationFunc: &UserEmailsStoreSetLastVerificationFunc{
			defaultHook: i.SetLastVerification,
		},
		SetPrimaryEmailFunc: &UserEmailsStoreSetPrimaryEmailFunc{
			defaultHook: i.SetPrimaryEmail,
		},
		SetVerifiedFunc: &UserEmailsStoreSetVerifiedFunc{
			defaultHook: i.SetVerified,
		},
		TransactFunc: &UserEmailsStoreTransactFunc{
			defaultHook: i.Transact,
		},
		VerifyFunc: &UserEmailsStoreVerifyFunc{
			defaultHook: i.Verify,
		},
		WithFunc: &UserEmailsStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// UserEmailsStoreAddFunc describes the behavior when the Add method of the
// parent MockUserEmailsStore instance is invoked.
type UserEmailsStoreAddFunc struct {
	defaultHook func(context.Context, int32, string, *string) error
	hooks       []func(context.Context, int32, string, *string) error
	history     []UserEmailsStoreAddFuncCall
	mutex       sync.Mutex
}

// Add delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserEmailsStore) Add(v0 context.Context, v1 int32, v2 string, v3 *string) error {
	r0 := m.AddFunc.nextHook()(v0, v1, v2, v3)
	m.AddFunc.appendCall(UserEmailsStoreAddFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Add method of the
// parent MockUserEmailsStore instance is invoked and the hook queue is
// empty.
func (f *UserEmailsStoreAddFunc) SetDefaultHook(hook func(context.Context, int32, string, *string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Add method of the parent MockUserEmailsStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserEmailsStoreAddFunc) PushHook(hook func(context.Context, int32, string, *string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserEmailsStoreAddFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, string, *string) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserEmailsStoreAddFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, string, *string) error {
		return r0
	})
}

func (f *UserEmailsStoreAddFunc) nextHook() func(context.Context, int32, string, *string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreAddFunc) appendCall(r0 UserEmailsStoreAddFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreAddFuncCall objects
// describing the invocations of this function.
func (f *UserEmailsStoreAddFunc) History() []UserEmailsStoreAddFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreAddFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreAddFuncCall is an object that describes an invocation of
// method Add on an instance of MockUserEmailsStore.
type UserEmailsStoreAddFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreAddFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreAddFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserEmailsStoreDoneFunc describes the behavior when the Done method of
// the parent MockUserEmailsStore instance is invoked.
type UserEmailsStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []UserEmailsStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserEmailsStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(UserEmailsStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockUserEmailsStore instance is invoked and the hook queue is
// empty.
func (f *UserEmailsStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockUserEmailsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserEmailsStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserEmailsStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserEmailsStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *UserEmailsStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreDoneFunc) appendCall(r0 UserEmailsStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreDoneFuncCall objects
// describing the invocations of this function.
func (f *UserEmailsStoreDoneFunc) History() []UserEmailsStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreDoneFuncCall is an object that describes an invocation of
// method Done on an instance of MockUserEmailsStore.
type UserEmailsStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserEmailsStoreGetFunc describes the behavior when the Get method of the
// parent MockUserEmailsStore instance is invoked.
type UserEmailsStoreGetFunc struct {
	defaultHook func(context.Context, int32, string) (string, bool, error)
	hooks       []func(context.Context, int32, string) (string, bool, error)
	history     []UserEmailsStoreGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserEmailsStore) Get(v0 context.Context, v1 int32, v2 string) (string, bool, error) {
	r0, r1, r2 := m.GetFunc.nextHook()(v0, v1, v2)
	m.GetFunc.appendCall(UserEmailsStoreGetFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockUserEmailsStore instance is invoked and the hook queue is
// empty.
func (f *UserEmailsStoreGetFunc) SetDefaultHook(hook func(context.Context, int32, string) (string, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockUserEmailsStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserEmailsStoreGetFunc) PushHook(hook func(context.Context, int32, string) (string, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserEmailsStoreGetFunc) SetDefaultReturn(r0 string, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, int32, string) (string, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserEmailsStoreGetFunc) PushReturn(r0 string, r1 bool, r2 error) {
	f.PushHook(func(context.Context, int32, string) (string, bool, error) {
		return r0, r1, r2
	})
}

func (f *UserEmailsStoreGetFunc) nextHook() func(context.Context, int32, string) (string, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreGetFunc) appendCall(r0 UserEmailsStoreGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreGetFuncCall objects
// describing the invocations of this function.
func (f *UserEmailsStoreGetFunc) History() []UserEmailsStoreGetFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreGetFuncCall is an object that describes an invocation of
// method Get on an instance of MockUserEmailsStore.
type UserEmailsStoreGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// UserEmailsStoreGetInitialSiteAdminEmailFunc describes the behavior when
// the GetInitialSiteAdminEmail method of the parent MockUserEmailsStore
// instance is invoked.
type UserEmailsStoreGetInitialSiteAdminEmailFunc struct {
	defaultHook func(context.Context) (string, error)
	hooks       []func(context.Context) (string, error)
	history     []UserEmailsStoreGetInitialSiteAdminEmailFuncCall
	mutex       sync.Mutex
}

// GetInitialSiteAdminEmail delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUserEmailsStore) GetInitialSiteAdminEmail(v0 context.Context) (string, error) {
	r0, r1 := m.GetInitialSiteAdminEmailFunc.nextHook()(v0)
	m.GetInitialSiteAdminEmailFunc.appendCall(UserEmailsStoreGetInitialSiteAdminEmailFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetInitialSiteAdminEmail method of the parent MockUserEmailsStore
// instance is invoked and the hook queue is empty.
func (f *UserEmailsStoreGetInitialSiteAdminEmailFunc) SetDefaultHook(hook func(context.Context) (string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetInitialSiteAdminEmail method of the parent MockUserEmailsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *UserEmailsStoreGetInitialSiteAdminEmailFunc) PushHook(hook func(context.Context) (string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserEmailsStoreGetInitialSiteAdminEmailFunc) SetDefaultReturn(r0 string, r1 error) {
	f.SetDefaultHook(func(context.Context) (string, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserEmailsStoreGetInitialSiteAdminEmailFunc) PushReturn(r0 string, r1 error) {
	f.PushHook(func(context.Context) (string, error) {
		return r0, r1
	})
}

func (f *UserEmailsStoreGetInitialSiteAdminEmailFunc) nextHook() func(context.Context) (string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreGetInitialSiteAdminEmailFunc) appendCall(r0 UserEmailsStoreGetInitialSiteAdminEmailFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UserEmailsStoreGetInitialSiteAdminEmailFuncCall objects describing the
// invocations of this function.
func (f *UserEmailsStoreGetInitialSiteAdminEmailFunc) History() []UserEmailsStoreGetInitialSiteAdminEmailFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreGetInitialSiteAdminEmailFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreGetInitialSiteAdminEmailFuncCall is an object that
// describes an invocation of method GetInitialSiteAdminEmail on an instance
// of MockUserEmailsStore.
type UserEmailsStoreGetInitialSiteAdminEmailFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreGetInitialSiteAdminEmailFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreGetInitialSiteAdminEmailFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserEmailsStoreGetLatestVerificationSentEmailFunc describes the behavior
// when the GetLatestVerificationSentEmail method of the parent
// MockUserEmailsStore instance is invoked.
type UserEmailsStoreGetLatestVerificationSentEmailFunc struct {
	defaultHook func(context.Context, string) (*database.UserEmail, error)
	hooks       []func(context.Context, string) (*database.UserEmail, error)
	history     []UserEmailsStoreGetLatestVerificationSentEmailFuncCall
	mutex       sync.Mutex
}

// GetLatestVerificationSentEmail delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockUserEmailsStore) GetLatestVerificationSentEmail(v0 context.Context, v1 string) (*database.UserEmail, error) {
	r0, r1 := m.GetLatestVerificationSentEmailFunc.nextHook()(v0, v1)
	m.GetLatestVerificationSentEmailFunc.appendCall(UserEmailsStoreGetLatestVerificationSentEmailFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetLatestVerificationSentEmail method of the parent MockUserEmailsStore
// instance is invoked and the hook queue is empty.
func (f *UserEmailsStoreGetLatestVerificationSentEmailFunc) SetDefaultHook(hook func(context.Context, string) (*database.UserEmail, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLatestVerificationSentEmail method of the parent MockUserEmailsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *UserEmailsStoreGetLatestVerificationSentEmailFunc) PushHook(hook func(context.Context, string) (*database.UserEmail, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserEmailsStoreGetLatestVerificationSentEmailFunc) SetDefaultReturn(r0 *database.UserEmail, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*database.UserEmail, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserEmailsStoreGetLatestVerificationSentEmailFunc) PushReturn(r0 *database.UserEmail, r1 error) {
	f.PushHook(func(context.Context, string) (*database.UserEmail, error) {
		return r0, r1
	})
}

func (f *UserEmailsStoreGetLatestVerificationSentEmailFunc) nextHook() func(context.Context, string) (*database.UserEmail, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreGetLatestVerificationSentEmailFunc) appendCall(r0 UserEmailsStoreGetLatestVerificationSentEmailFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UserEmailsStoreGetLatestVerificationSentEmailFuncCall objects describing
// the invocations of this function.
func (f *UserEmailsStoreGetLatestVerificationSentEmailFunc) History() []UserEmailsStoreGetLatestVerificationSentEmailFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreGetLatestVerificationSentEmailFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreGetLatestVerificationSentEmailFuncCall is an object that
// describes an invocation of method GetLatestVerificationSentEmail on an
// instance of MockUserEmailsStore.
type UserEmailsStoreGetLatestVerificationSentEmailFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *database.UserEmail
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreGetLatestVerificationSentEmailFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreGetLatestVerificationSentEmailFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserEmailsStoreGetPrimaryEmailFunc describes the behavior when the
// GetPrimaryEmail method of the parent MockUserEmailsStore instance is
// invoked.
type UserEmailsStoreGetPrimaryEmailFunc struct {
	defaultHook func(context.Context, int32) (string, bool, error)
	hooks       []func(context.Context, int32) (string, bool, error)
	history     []UserEmailsStoreGetPrimaryEmailFuncCall
	mutex       sync.Mutex
}

// GetPrimaryEmail delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserEmailsStore) GetPrimaryEmail(v0 context.Context, v1 int32) (string, bool, error) {
	r0, r1, r2 := m.GetPrimaryEmailFunc.nextHook()(v0, v1)
	m.GetPrimaryEmailFunc.appendCall(UserEmailsStoreGetPrimaryEmailFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetPrimaryEmail
// method of the parent MockUserEmailsStore instance is invoked and the hook
// queue is empty.
func (f *UserEmailsStoreGetPrimaryEmailFunc) SetDefaultHook(hook func(context.Context, int32) (string, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPrimaryEmail method of the parent MockUserEmailsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserEmailsStoreGetPrimaryEmailFunc) PushHook(hook func(context.Context, int32) (string, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserEmailsStoreGetPrimaryEmailFunc) SetDefaultReturn(r0 string, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, int32) (string, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserEmailsStoreGetPrimaryEmailFunc) PushReturn(r0 string, r1 bool, r2 error) {
	f.PushHook(func(context.Context, int32) (string, bool, error) {
		return r0, r1, r2
	})
}

func (f *UserEmailsStoreGetPrimaryEmailFunc) nextHook() func(context.Context, int32) (string, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreGetPrimaryEmailFunc) appendCall(r0 UserEmailsStoreGetPrimaryEmailFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreGetPrimaryEmailFuncCall
// objects describing the invocations of this function.
func (f *UserEmailsStoreGetPrimaryEmailFunc) History() []UserEmailsStoreGetPrimaryEmailFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreGetPrimaryEmailFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreGetPrimaryEmailFuncCall is an object that describes an
// invocation of method GetPrimaryEmail on an instance of
// MockUserEmailsStore.
type UserEmailsStoreGetPrimaryEmailFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreGetPrimaryEmailFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreGetPrimaryEmailFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// UserEmailsStoreGetVerifiedEmailsFunc describes the behavior when the
// GetVerifiedEmails method of the parent MockUserEmailsStore instance is
// invoked.
type UserEmailsStoreGetVerifiedEmailsFunc struct {
	defaultHook func(context.Context, ...string) ([]*database.UserEmail, error)
	hooks       []func(context.Context, ...string) ([]*database.UserEmail, error)
	history     []UserEmailsStoreGetVerifiedEmailsFuncCall
	mutex       sync.Mutex
}

// GetVerifiedEmails delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserEmailsStore) GetVerifiedEmails(v0 context.Context, v1 ...string) ([]*database.UserEmail, error) {
	r0, r1 := m.GetVerifiedEmailsFunc.nextHook()(v0, v1...)
	m.GetVerifiedEmailsFunc.appendCall(UserEmailsStoreGetVerifiedEmailsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetVerifiedEmails
// method of the parent MockUserEmailsStore instance is invoked and the hook
// queue is empty.
func (f *UserEmailsStoreGetVerifiedEmailsFunc) SetDefaultHook(hook func(context.Context, ...string) ([]*database.UserEmail, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetVerifiedEmails method of the parent MockUserEmailsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserEmailsStoreGetVerifiedEmailsFunc) PushHook(hook func(context.Context, ...string) ([]*database.UserEmail, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserEmailsStoreGetVerifiedEmailsFunc) SetDefaultReturn(r0 []*database.UserEmail, r1 error) {
	f.SetDefaultHook(func(context.Context, ...string) ([]*database.UserEmail, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserEmailsStoreGetVerifiedEmailsFunc) PushReturn(r0 []*database.UserEmail, r1 error) {
	f.PushHook(func(context.Context, ...string) ([]*database.UserEmail, error) {
		return r0, r1
	})
}

func (f *UserEmailsStoreGetVerifiedEmailsFunc) nextHook() func(context.Context, ...string) ([]*database.UserEmail, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreGetVerifiedEmailsFunc) appendCall(r0 UserEmailsStoreGetVerifiedEmailsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreGetVerifiedEmailsFuncCall
// objects describing the invocations of this function.
func (f *UserEmailsStoreGetVerifiedEmailsFunc) History() []UserEmailsStoreGetVerifiedEmailsFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreGetVerifiedEmailsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreGetVerifiedEmailsFuncCall is an object that describes an
// invocation of method GetVerifiedEmails on an instance of
// MockUserEmailsStore.
type UserEmailsStoreGetVerifiedEmailsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*database.UserEmail
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c UserEmailsStoreGetVerifiedEmailsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreGetVerifiedEmailsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserEmailsStoreHandleFunc describes the behavior when the Handle method
// of the parent MockUserEmailsStore instance is invoked.
type UserEmailsStoreHandleFunc struct {
	defaultHook func() *basestore.TransactableHandle
	hooks       []func() *basestore.TransactableHandle
	history     []UserEmailsStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserEmailsStore) Handle() *basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(UserEmailsStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockUserEmailsStore instance is invoked and the hook queue is
// empty.
func (f *UserEmailsStoreHandleFunc) SetDefaultHook(hook func() *basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockUserEmailsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserEmailsStoreHandleFunc) PushHook(hook func() *basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserEmailsStoreHandleFunc) SetDefaultReturn(r0 *basestore.TransactableHandle) {
	f.SetDefaultHook(func() *basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserEmailsStoreHandleFunc) PushReturn(r0 *basestore.TransactableHandle) {
	f.PushHook(func() *basestore.TransactableHandle {
		return r0
	})
}

func (f *UserEmailsStoreHandleFunc) nextHook() func() *basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreHandleFunc) appendCall(r0 UserEmailsStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *UserEmailsStoreHandleFunc) History() []UserEmailsStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreHandleFuncCall is an object that describes an invocation
// of method Handle on an instance of MockUserEmailsStore.
type UserEmailsStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserEmailsStoreListByUserFunc describes the behavior when the ListByUser
// method of the parent MockUserEmailsStore instance is invoked.
type UserEmailsStoreListByUserFunc struct {
	defaultHook func(context.Context, database.UserEmailsListOptions) ([]*database.UserEmail, error)
	hooks       []func(context.Context, database.UserEmailsListOptions) ([]*database.UserEmail, error)
	history     []UserEmailsStoreListByUserFuncCall
	mutex       sync.Mutex
}

// ListByUser delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserEmailsStore) ListByUser(v0 context.Context, v1 database.UserEmailsListOptions) ([]*database.UserEmail, error) {
	r0, r1 := m.ListByUserFunc.nextHook()(v0, v1)
	m.ListByUserFunc.appendCall(UserEmailsStoreListByUserFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListByUser method of
// the parent MockUserEmailsStore instance is invoked and the hook queue is
// empty.
func (f *UserEmailsStoreListByUserFunc) SetDefaultHook(hook func(context.Context, database.UserEmailsListOptions) ([]*database.UserEmail, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListByUser method of the parent MockUserEmailsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserEmailsStoreListByUserFunc) PushHook(hook func(context.Context, database.UserEmailsListOptions) ([]*database.UserEmail, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserEmailsStoreListByUserFunc) SetDefaultReturn(r0 []*database.UserEmail, r1 error) {
	f.SetDefaultHook(func(context.Context, database.UserEmailsListOptions) ([]*database.UserEmail, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserEmailsStoreListByUserFunc) PushReturn(r0 []*database.UserEmail, r1 error) {
	f.PushHook(func(context.Context, database.UserEmailsListOptions) ([]*database.UserEmail, error) {
		return r0, r1
	})
}

func (f *UserEmailsStoreListByUserFunc) nextHook() func(context.Context, database.UserEmailsListOptions) ([]*database.UserEmail, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreListByUserFunc) appendCall(r0 UserEmailsStoreListByUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreListByUserFuncCall objects
// describing the invocations of this function.
func (f *UserEmailsStoreListByUserFunc) History() []UserEmailsStoreListByUserFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreListByUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreListByUserFuncCall is an object that describes an
// invocation of method ListByUser on an instance of MockUserEmailsStore.
type UserEmailsStoreListByUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.UserEmailsListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*database.UserEmail
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreListByUserFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreListByUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserEmailsStoreRemoveFunc describes the behavior when the Remove method
// of the parent MockUserEmailsStore instance is invoked.
type UserEmailsStoreRemoveFunc struct {
	defaultHook func(context.Context, int32, string) error
	hooks       []func(context.Context, int32, string) error
	history     []UserEmailsStoreRemoveFuncCall
	mutex       sync.Mutex
}

// Remove delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserEmailsStore) Remove(v0 context.Context, v1 int32, v2 string) error {
	r0 := m.RemoveFunc.nextHook()(v0, v1, v2)
	m.RemoveFunc.appendCall(UserEmailsStoreRemoveFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Remove method of the
// parent MockUserEmailsStore instance is invoked and the hook queue is
// empty.
func (f *UserEmailsStoreRemoveFunc) SetDefaultHook(hook func(context.Context, int32, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Remove method of the parent MockUserEmailsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserEmailsStoreRemoveFunc) PushHook(hook func(context.Context, int32, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserEmailsStoreRemoveFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, string) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserEmailsStoreRemoveFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, string) error {
		return r0
	})
}

func (f *UserEmailsStoreRemoveFunc) nextHook() func(context.Context, int32, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreRemoveFunc) appendCall(r0 UserEmailsStoreRemoveFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreRemoveFuncCall objects
// describing the invocations of this function.
func (f *UserEmailsStoreRemoveFunc) History() []UserEmailsStoreRemoveFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreRemoveFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreRemoveFuncCall is an object that describes an invocation
// of method Remove on an instance of MockUserEmailsStore.
type UserEmailsStoreRemoveFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreRemoveFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreRemoveFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserEmailsStoreSetLastVerificationFunc describes the behavior when the
// SetLastVerification method of the parent MockUserEmailsStore instance is
// invoked.
type UserEmailsStoreSetLastVerificationFunc struct {
	defaultHook func(context.Context, int32, string, string) error
	hooks       []func(context.Context, int32, string, string) error
	history     []UserEmailsStoreSetLastVerificationFuncCall
	mutex       sync.Mutex
}

// SetLastVerification delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserEmailsStore) SetLastVerification(v0 context.Context, v1 int32, v2 string, v3 string) error {
	r0 := m.SetLastVerificationFunc.nextHook()(v0, v1, v2, v3)
	m.SetLastVerificationFunc.appendCall(UserEmailsStoreSetLastVerificationFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetLastVerification
// method of the parent MockUserEmailsStore instance is invoked and the hook
// queue is empty.
func (f *UserEmailsStoreSetLastVerificationFunc) SetDefaultHook(hook func(context.Context, int32, string, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetLastVerification method of the parent MockUserEmailsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserEmailsStoreSetLastVerificationFunc) PushHook(hook func(context.Context, int32, string, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserEmailsStoreSetLastVerificationFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, string, string) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserEmailsStoreSetLastVerificationFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, string, string) error {
		return r0
	})
}

func (f *UserEmailsStoreSetLastVerificationFunc) nextHook() func(context.Context, int32, string, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreSetLastVerificationFunc) appendCall(r0 UserEmailsStoreSetLastVerificationFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreSetLastVerificationFuncCall
// objects describing the invocations of this function.
func (f *UserEmailsStoreSetLastVerificationFunc) History() []UserEmailsStoreSetLastVerificationFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreSetLastVerificationFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreSetLastVerificationFuncCall is an object that describes an
// invocation of method SetLastVerification on an instance of
// MockUserEmailsStore.
type UserEmailsStoreSetLastVerificationFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreSetLastVerificationFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreSetLastVerificationFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserEmailsStoreSetPrimaryEmailFunc describes the behavior when the
// SetPrimaryEmail method of the parent MockUserEmailsStore instance is
// invoked.
type UserEmailsStoreSetPrimaryEmailFunc struct {
	defaultHook func(context.Context, int32, string) error
	hooks       []func(context.Context, int32, string) error
	history     []UserEmailsStoreSetPrimaryEmailFuncCall
	mutex       sync.Mutex
}

// SetPrimaryEmail delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserEmailsStore) SetPrimaryEmail(v0 context.Context, v1 int32, v2 string) error {
	r0 := m.SetPrimaryEmailFunc.nextHook()(v0, v1, v2)
	m.SetPrimaryEmailFunc.appendCall(UserEmailsStoreSetPrimaryEmailFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetPrimaryEmail
// method of the parent MockUserEmailsStore instance is invoked and the hook
// queue is empty.
func (f *UserEmailsStoreSetPrimaryEmailFunc) SetDefaultHook(hook func(context.Context, int32, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetPrimaryEmail method of the parent MockUserEmailsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserEmailsStoreSetPrimaryEmailFunc) PushHook(hook func(context.Context, int32, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserEmailsStoreSetPrimaryEmailFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, string) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserEmailsStoreSetPrimaryEmailFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, string) error {
		return r0
	})
}

func (f *UserEmailsStoreSetPrimaryEmailFunc) nextHook() func(context.Context, int32, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreSetPrimaryEmailFunc) appendCall(r0 UserEmailsStoreSetPrimaryEmailFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreSetPrimaryEmailFuncCall
// objects describing the invocations of this function.
func (f *UserEmailsStoreSetPrimaryEmailFunc) History() []UserEmailsStoreSetPrimaryEmailFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreSetPrimaryEmailFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreSetPrimaryEmailFuncCall is an object that describes an
// invocation of method SetPrimaryEmail on an instance of
// MockUserEmailsStore.
type UserEmailsStoreSetPrimaryEmailFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreSetPrimaryEmailFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreSetPrimaryEmailFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserEmailsStoreSetVerifiedFunc describes the behavior when the
// SetVerified method of the parent MockUserEmailsStore instance is invoked.
type UserEmailsStoreSetVerifiedFunc struct {
	defaultHook func(context.Context, int32, string, bool) error
	hooks       []func(context.Context, int32, string, bool) error
	history     []UserEmailsStoreSetVerifiedFuncCall
	mutex       sync.Mutex
}

// SetVerified delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserEmailsStore) SetVerified(v0 context.Context, v1 int32, v2 string, v3 bool) error {
	r0 := m.SetVerifiedFunc.nextHook()(v0, v1, v2, v3)
	m.SetVerifiedFunc.appendCall(UserEmailsStoreSetVerifiedFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetVerified method
// of the parent MockUserEmailsStore instance is invoked and the hook queue
// is empty.
func (f *UserEmailsStoreSetVerifiedFunc) SetDefaultHook(hook func(context.Context, int32, string, bool) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetVerified method of the parent MockUserEmailsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserEmailsStoreSetVerifiedFunc) PushHook(hook func(context.Context, int32, string, bool) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserEmailsStoreSetVerifiedFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, string, bool) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserEmailsStoreSetVerifiedFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, string, bool) error {
		return r0
	})
}

func (f *UserEmailsStoreSetVerifiedFunc) nextHook() func(context.Context, int32, string, bool) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreSetVerifiedFunc) appendCall(r0 UserEmailsStoreSetVerifiedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreSetVerifiedFuncCall objects
// describing the invocations of this function.
func (f *UserEmailsStoreSetVerifiedFunc) History() []UserEmailsStoreSetVerifiedFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreSetVerifiedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreSetVerifiedFuncCall is an object that describes an
// invocation of method SetVerified on an instance of MockUserEmailsStore.
type UserEmailsStoreSetVerifiedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreSetVerifiedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreSetVerifiedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserEmailsStoreTransactFunc describes the behavior when the Transact
// method of the parent MockUserEmailsStore instance is invoked.
type UserEmailsStoreTransactFunc struct {
	defaultHook func(context.Context) (database.UserEmailsStore, error)
	hooks       []func(context.Context) (database.UserEmailsStore, error)
	history     []UserEmailsStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserEmailsStore) Transact(v0 context.Context) (database.UserEmailsStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(UserEmailsStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockUserEmailsStore instance is invoked and the hook queue is
// empty.
func (f *UserEmailsStoreTransactFunc) SetDefaultHook(hook func(context.Context) (database.UserEmailsStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockUserEmailsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserEmailsStoreTransactFunc) PushHook(hook func(context.Context) (database.UserEmailsStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserEmailsStoreTransactFunc) SetDefaultReturn(r0 database.UserEmailsStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (database.UserEmailsStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserEmailsStoreTransactFunc) PushReturn(r0 database.UserEmailsStore, r1 error) {
	f.PushHook(func(context.Context) (database.UserEmailsStore, error) {
		return r0, r1
	})
}

func (f *UserEmailsStoreTransactFunc) nextHook() func(context.Context) (database.UserEmailsStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreTransactFunc) appendCall(r0 UserEmailsStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *UserEmailsStoreTransactFunc) History() []UserEmailsStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreTransactFuncCall is an object that describes an invocation
// of method Transact on an instance of MockUserEmailsStore.
type UserEmailsStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.UserEmailsStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserEmailsStoreVerifyFunc describes the behavior when the Verify method
// of the parent MockUserEmailsStore instance is invoked.
type UserEmailsStoreVerifyFunc struct {
	defaultHook func(context.Context, int32, string, string) (bool, error)
	hooks       []func(context.Context, int32, string, string) (bool, error)
	history     []UserEmailsStoreVerifyFuncCall
	mutex       sync.Mutex
}

// Verify delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserEmailsStore) Verify(v0 context.Context, v1 int32, v2 string, v3 string) (bool, error) {
	r0, r1 := m.VerifyFunc.nextHook()(v0, v1, v2, v3)
	m.VerifyFunc.appendCall(UserEmailsStoreVerifyFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Verify method of the
// parent MockUserEmailsStore instance is invoked and the hook queue is
// empty.
func (f *UserEmailsStoreVerifyFunc) SetDefaultHook(hook func(context.Context, int32, string, string) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Verify method of the parent MockUserEmailsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserEmailsStoreVerifyFunc) PushHook(hook func(context.Context, int32, string, string) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserEmailsStoreVerifyFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, string, string) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserEmailsStoreVerifyFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int32, string, string) (bool, error) {
		return r0, r1
	})
}

func (f *UserEmailsStoreVerifyFunc) nextHook() func(context.Context, int32, string, string) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreVerifyFunc) appendCall(r0 UserEmailsStoreVerifyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreVerifyFuncCall objects
// describing the invocations of this function.
func (f *UserEmailsStoreVerifyFunc) History() []UserEmailsStoreVerifyFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreVerifyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreVerifyFuncCall is an object that describes an invocation
// of method Verify on an instance of MockUserEmailsStore.
type UserEmailsStoreVerifyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreVerifyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreVerifyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserEmailsStoreWithFunc describes the behavior when the With method of
// the parent MockUserEmailsStore instance is invoked.
type UserEmailsStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) database.UserEmailsStore
	hooks       []func(basestore.ShareableStore) database.UserEmailsStore
	history     []UserEmailsStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserEmailsStore) With(v0 basestore.ShareableStore) database.UserEmailsStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(UserEmailsStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockUserEmailsStore instance is invoked and the hook queue is
// empty.
func (f *UserEmailsStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) database.UserEmailsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockUserEmailsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserEmailsStoreWithFunc) PushHook(hook func(basestore.ShareableStore) database.UserEmailsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserEmailsStoreWithFunc) SetDefaultReturn(r0 database.UserEmailsStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) database.UserEmailsStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserEmailsStoreWithFunc) PushReturn(r0 database.UserEmailsStore) {
	f.PushHook(func(basestore.ShareableStore) database.UserEmailsStore {
		return r0
	})
}

func (f *UserEmailsStoreWithFunc) nextHook() func(basestore.ShareableStore) database.UserEmailsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreWithFunc) appendCall(r0 UserEmailsStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreWithFuncCall objects
// describing the invocations of this function.
func (f *UserEmailsStoreWithFunc) History() []UserEmailsStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockUserEmailsStore.
type UserEmailsStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.UserEmailsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
