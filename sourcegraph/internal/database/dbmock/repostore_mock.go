// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package dbmock

import (
	"context"
	"database/sql"
	"sync"

	sqlf "github.com/keegancsmith/sqlf"
	api "github.com/sourcegraph/sourcegraph/internal/api"
	database "github.com/sourcegraph/sourcegraph/internal/database"
	basestore "github.com/sourcegraph/sourcegraph/internal/database/basestore"
	types "github.com/sourcegraph/sourcegraph/internal/types"
)

// MockRepoStore is a mock implementation of the RepoStore interface (from
// the package github.com/sourcegraph/sourcegraph/internal/database) used
// for unit testing.
type MockRepoStore struct {
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *RepoStoreCountFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *RepoStoreCreateFunc
	// DeleteFunc is an instance of a mock function object controlling the
	// behavior of the method Delete.
	DeleteFunc *RepoStoreDeleteFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *RepoStoreDoneFunc
	// ExternalServicesFunc is an instance of a mock function object
	// controlling the behavior of the method ExternalServices.
	ExternalServicesFunc *RepoStoreExternalServicesFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *RepoStoreGetFunc
	// GetByIDsFunc is an instance of a mock function object controlling the
	// behavior of the method GetByIDs.
	GetByIDsFunc *RepoStoreGetByIDsFunc
	// GetByNameFunc is an instance of a mock function object controlling
	// the behavior of the method GetByName.
	GetByNameFunc *RepoStoreGetByNameFunc
	// GetFirstRepoNamesByCloneURLFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetFirstRepoNamesByCloneURL.
	GetFirstRepoNamesByCloneURLFunc *RepoStoreGetFirstRepoNamesByCloneURLFunc
	// GetReposSetByIDsFunc is an instance of a mock function object
	// controlling the behavior of the method GetReposSetByIDs.
	GetReposSetByIDsFunc *RepoStoreGetReposSetByIDsFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *RepoStoreHandleFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *RepoStoreListFunc
	// ListEnabledNamesFunc is an instance of a mock function object
	// controlling the behavior of the method ListEnabledNames.
	ListEnabledNamesFunc *RepoStoreListEnabledNamesFunc
	// ListIndexableReposFunc is an instance of a mock function object
	// controlling the behavior of the method ListIndexableRepos.
	ListIndexableReposFunc *RepoStoreListIndexableReposFunc
	// ListMinimalReposFunc is an instance of a mock function object
	// controlling the behavior of the method ListMinimalRepos.
	ListMinimalReposFunc *RepoStoreListMinimalReposFunc
	// MetadataFunc is an instance of a mock function object controlling the
	// behavior of the method Metadata.
	MetadataFunc *RepoStoreMetadataFunc
	// QueryFunc is an instance of a mock function object controlling the
	// behavior of the method Query.
	QueryFunc *RepoStoreQueryFunc
	// StreamMinimalReposFunc is an instance of a mock function object
	// controlling the behavior of the method StreamMinimalRepos.
	StreamMinimalReposFunc *RepoStoreStreamMinimalReposFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *RepoStoreTransactFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *RepoStoreWithFunc
}

// NewMockRepoStore creates a new mock of the RepoStore interface. All
// methods return zero values for all results, unless overwritten.
func NewMockRepoStore() *MockRepoStore {
	return &MockRepoStore{
		CountFunc: &RepoStoreCountFunc{
			defaultHook: func(context.Context, database.ReposListOptions) (int, error) {
				return 0, nil
			},
		},
		CreateFunc: &RepoStoreCreateFunc{
			defaultHook: func(context.Context, ...*types.Repo) error {
				return nil
			},
		},
		DeleteFunc: &RepoStoreDeleteFunc{
			defaultHook: func(context.Context, ...api.RepoID) error {
				return nil
			},
		},
		DoneFunc: &RepoStoreDoneFunc{
			defaultHook: func(error) error {
				return nil
			},
		},
		ExternalServicesFunc: &RepoStoreExternalServicesFunc{
			defaultHook: func(context.Context, api.RepoID) ([]*types.ExternalService, error) {
				return nil, nil
			},
		},
		GetFunc: &RepoStoreGetFunc{
			defaultHook: func(context.Context, api.RepoID) (*types.Repo, error) {
				return nil, nil
			},
		},
		GetByIDsFunc: &RepoStoreGetByIDsFunc{
			defaultHook: func(context.Context, ...api.RepoID) ([]*types.Repo, error) {
				return nil, nil
			},
		},
		GetByNameFunc: &RepoStoreGetByNameFunc{
			defaultHook: func(context.Context, api.RepoName) (*types.Repo, error) {
				return nil, nil
			},
		},
		GetFirstRepoNamesByCloneURLFunc: &RepoStoreGetFirstRepoNamesByCloneURLFunc{
			defaultHook: func(context.Context, string) (api.RepoName, error) {
				return "", nil
			},
		},
		GetReposSetByIDsFunc: &RepoStoreGetReposSetByIDsFunc{
			defaultHook: func(context.Context, ...api.RepoID) (map[api.RepoID]*types.Repo, error) {
				return nil, nil
			},
		},
		HandleFunc: &RepoStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				return nil
			},
		},
		ListFunc: &RepoStoreListFunc{
			defaultHook: func(context.Context, database.ReposListOptions) ([]*types.Repo, error) {
				return nil, nil
			},
		},
		ListEnabledNamesFunc: &RepoStoreListEnabledNamesFunc{
			defaultHook: func(context.Context) ([]string, error) {
				return nil, nil
			},
		},
		ListIndexableReposFunc: &RepoStoreListIndexableReposFunc{
			defaultHook: func(context.Context, database.ListIndexableReposOptions) ([]types.MinimalRepo, error) {
				return nil, nil
			},
		},
		ListMinimalReposFunc: &RepoStoreListMinimalReposFunc{
			defaultHook: func(context.Context, database.ReposListOptions) ([]types.MinimalRepo, error) {
				return nil, nil
			},
		},
		MetadataFunc: &RepoStoreMetadataFunc{
			defaultHook: func(context.Context, ...api.RepoID) ([]*types.SearchedRepo, error) {
				return nil, nil
			},
		},
		QueryFunc: &RepoStoreQueryFunc{
			defaultHook: func(context.Context, *sqlf.Query) (*sql.Rows, error) {
				return nil, nil
			},
		},
		StreamMinimalReposFunc: &RepoStoreStreamMinimalReposFunc{
			defaultHook: func(context.Context, database.ReposListOptions, func(*types.MinimalRepo)) error {
				return nil
			},
		},
		TransactFunc: &RepoStoreTransactFunc{
			defaultHook: func(context.Context) (database.RepoStore, error) {
				return nil, nil
			},
		},
		WithFunc: &RepoStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) database.RepoStore {
				return nil
			},
		},
	}
}

// NewMockRepoStoreFrom creates a new mock of the MockRepoStore interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockRepoStoreFrom(i database.RepoStore) *MockRepoStore {
	return &MockRepoStore{
		CountFunc: &RepoStoreCountFunc{
			defaultHook: i.Count,
		},
		CreateFunc: &RepoStoreCreateFunc{
			defaultHook: i.Create,
		},
		DeleteFunc: &RepoStoreDeleteFunc{
			defaultHook: i.Delete,
		},
		DoneFunc: &RepoStoreDoneFunc{
			defaultHook: i.Done,
		},
		ExternalServicesFunc: &RepoStoreExternalServicesFunc{
			defaultHook: i.ExternalServices,
		},
		GetFunc: &RepoStoreGetFunc{
			defaultHook: i.Get,
		},
		GetByIDsFunc: &RepoStoreGetByIDsFunc{
			defaultHook: i.GetByIDs,
		},
		GetByNameFunc: &RepoStoreGetByNameFunc{
			defaultHook: i.GetByName,
		},
		GetFirstRepoNamesByCloneURLFunc: &RepoStoreGetFirstRepoNamesByCloneURLFunc{
			defaultHook: i.GetFirstRepoNamesByCloneURL,
		},
		GetReposSetByIDsFunc: &RepoStoreGetReposSetByIDsFunc{
			defaultHook: i.GetReposSetByIDs,
		},
		HandleFunc: &RepoStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListFunc: &RepoStoreListFunc{
			defaultHook: i.List,
		},
		ListEnabledNamesFunc: &RepoStoreListEnabledNamesFunc{
			defaultHook: i.ListEnabledNames,
		},
		ListIndexableReposFunc: &RepoStoreListIndexableReposFunc{
			defaultHook: i.ListIndexableRepos,
		},
		ListMinimalReposFunc: &RepoStoreListMinimalReposFunc{
			defaultHook: i.ListMinimalRepos,
		},
		MetadataFunc: &RepoStoreMetadataFunc{
			defaultHook: i.Metadata,
		},
		QueryFunc: &RepoStoreQueryFunc{
			defaultHook: i.Query,
		},
		StreamMinimalReposFunc: &RepoStoreStreamMinimalReposFunc{
			defaultHook: i.StreamMinimalRepos,
		},
		TransactFunc: &RepoStoreTransactFunc{
			defaultHook: i.Transact,
		},
		WithFunc: &RepoStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// RepoStoreCountFunc describes the behavior when the Count method of the
// parent MockRepoStore instance is invoked.
type RepoStoreCountFunc struct {
	defaultHook func(context.Context, database.ReposListOptions) (int, error)
	hooks       []func(context.Context, database.ReposListOptions) (int, error)
	history     []RepoStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) Count(v0 context.Context, v1 database.ReposListOptions) (int, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(RepoStoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreCountFunc) SetDefaultHook(hook func(context.Context, database.ReposListOptions) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockRepoStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *RepoStoreCountFunc) PushHook(hook func(context.Context, database.ReposListOptions) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *RepoStoreCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, database.ReposListOptions) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *RepoStoreCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, database.ReposListOptions) (int, error) {
		return r0, r1
	})
}

func (f *RepoStoreCountFunc) nextHook() func(context.Context, database.ReposListOptions) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreCountFunc) appendCall(r0 RepoStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreCountFuncCall objects describing
// the invocations of this function.
func (f *RepoStoreCountFunc) History() []RepoStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreCountFuncCall is an object that describes an invocation of
// method Count on an instance of MockRepoStore.
type RepoStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.ReposListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreCreateFunc describes the behavior when the Create method of the
// parent MockRepoStore instance is invoked.
type RepoStoreCreateFunc struct {
	defaultHook func(context.Context, ...*types.Repo) error
	hooks       []func(context.Context, ...*types.Repo) error
	history     []RepoStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) Create(v0 context.Context, v1 ...*types.Repo) error {
	r0 := m.CreateFunc.nextHook()(v0, v1...)
	m.CreateFunc.appendCall(RepoStoreCreateFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreCreateFunc) SetDefaultHook(hook func(context.Context, ...*types.Repo) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockRepoStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *RepoStoreCreateFunc) PushHook(hook func(context.Context, ...*types.Repo) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *RepoStoreCreateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ...*types.Repo) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *RepoStoreCreateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ...*types.Repo) error {
		return r0
	})
}

func (f *RepoStoreCreateFunc) nextHook() func(context.Context, ...*types.Repo) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreCreateFunc) appendCall(r0 RepoStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreCreateFuncCall objects describing
// the invocations of this function.
func (f *RepoStoreCreateFunc) History() []RepoStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreCreateFuncCall is an object that describes an invocation of
// method Create on an instance of MockRepoStore.
type RepoStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []*types.Repo
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c RepoStoreCreateFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RepoStoreDeleteFunc describes the behavior when the Delete method of the
// parent MockRepoStore instance is invoked.
type RepoStoreDeleteFunc struct {
	defaultHook func(context.Context, ...api.RepoID) error
	hooks       []func(context.Context, ...api.RepoID) error
	history     []RepoStoreDeleteFuncCall
	mutex       sync.Mutex
}

// Delete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) Delete(v0 context.Context, v1 ...api.RepoID) error {
	r0 := m.DeleteFunc.nextHook()(v0, v1...)
	m.DeleteFunc.appendCall(RepoStoreDeleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Delete method of the
// parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreDeleteFunc) SetDefaultHook(hook func(context.Context, ...api.RepoID) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Delete method of the parent MockRepoStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *RepoStoreDeleteFunc) PushHook(hook func(context.Context, ...api.RepoID) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *RepoStoreDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ...api.RepoID) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *RepoStoreDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ...api.RepoID) error {
		return r0
	})
}

func (f *RepoStoreDeleteFunc) nextHook() func(context.Context, ...api.RepoID) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreDeleteFunc) appendCall(r0 RepoStoreDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreDeleteFuncCall objects describing
// the invocations of this function.
func (f *RepoStoreDeleteFunc) History() []RepoStoreDeleteFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreDeleteFuncCall is an object that describes an invocation of
// method Delete on an instance of MockRepoStore.
type RepoStoreDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c RepoStoreDeleteFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RepoStoreDoneFunc describes the behavior when the Done method of the
// parent MockRepoStore instance is invoked.
type RepoStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []RepoStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(RepoStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockRepoStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *RepoStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *RepoStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *RepoStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *RepoStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreDoneFunc) appendCall(r0 RepoStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreDoneFuncCall objects describing
// the invocations of this function.
func (f *RepoStoreDoneFunc) History() []RepoStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreDoneFuncCall is an object that describes an invocation of method
// Done on an instance of MockRepoStore.
type RepoStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RepoStoreExternalServicesFunc describes the behavior when the
// ExternalServices method of the parent MockRepoStore instance is invoked.
type RepoStoreExternalServicesFunc struct {
	defaultHook func(context.Context, api.RepoID) ([]*types.ExternalService, error)
	hooks       []func(context.Context, api.RepoID) ([]*types.ExternalService, error)
	history     []RepoStoreExternalServicesFuncCall
	mutex       sync.Mutex
}

// ExternalServices delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockRepoStore) ExternalServices(v0 context.Context, v1 api.RepoID) ([]*types.ExternalService, error) {
	r0, r1 := m.ExternalServicesFunc.nextHook()(v0, v1)
	m.ExternalServicesFunc.appendCall(RepoStoreExternalServicesFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ExternalServices
// method of the parent MockRepoStore instance is invoked and the hook queue
// is empty.
func (f *RepoStoreExternalServicesFunc) SetDefaultHook(hook func(context.Context, api.RepoID) ([]*types.ExternalService, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExternalServices method of the parent MockRepoStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *RepoStoreExternalServicesFunc) PushHook(hook func(context.Context, api.RepoID) ([]*types.ExternalService, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *RepoStoreExternalServicesFunc) SetDefaultReturn(r0 []*types.ExternalService, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoID) ([]*types.ExternalService, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *RepoStoreExternalServicesFunc) PushReturn(r0 []*types.ExternalService, r1 error) {
	f.PushHook(func(context.Context, api.RepoID) ([]*types.ExternalService, error) {
		return r0, r1
	})
}

func (f *RepoStoreExternalServicesFunc) nextHook() func(context.Context, api.RepoID) ([]*types.ExternalService, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreExternalServicesFunc) appendCall(r0 RepoStoreExternalServicesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreExternalServicesFuncCall objects
// describing the invocations of this function.
func (f *RepoStoreExternalServicesFunc) History() []RepoStoreExternalServicesFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreExternalServicesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreExternalServicesFuncCall is an object that describes an
// invocation of method ExternalServices on an instance of MockRepoStore.
type RepoStoreExternalServicesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.ExternalService
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreExternalServicesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreExternalServicesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreGetFunc describes the behavior when the Get method of the parent
// MockRepoStore instance is invoked.
type RepoStoreGetFunc struct {
	defaultHook func(context.Context, api.RepoID) (*types.Repo, error)
	hooks       []func(context.Context, api.RepoID) (*types.Repo, error)
	history     []RepoStoreGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) Get(v0 context.Context, v1 api.RepoID) (*types.Repo, error) {
	r0, r1 := m.GetFunc.nextHook()(v0, v1)
	m.GetFunc.appendCall(RepoStoreGetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreGetFunc) SetDefaultHook(hook func(context.Context, api.RepoID) (*types.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockRepoStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *RepoStoreGetFunc) PushHook(hook func(context.Context, api.RepoID) (*types.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *RepoStoreGetFunc) SetDefaultReturn(r0 *types.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoID) (*types.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *RepoStoreGetFunc) PushReturn(r0 *types.Repo, r1 error) {
	f.PushHook(func(context.Context, api.RepoID) (*types.Repo, error) {
		return r0, r1
	})
}

func (f *RepoStoreGetFunc) nextHook() func(context.Context, api.RepoID) (*types.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreGetFunc) appendCall(r0 RepoStoreGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreGetFuncCall objects describing the
// invocations of this function.
func (f *RepoStoreGetFunc) History() []RepoStoreGetFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreGetFuncCall is an object that describes an invocation of method
// Get on an instance of MockRepoStore.
type RepoStoreGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreGetByIDsFunc describes the behavior when the GetByIDs method of
// the parent MockRepoStore instance is invoked.
type RepoStoreGetByIDsFunc struct {
	defaultHook func(context.Context, ...api.RepoID) ([]*types.Repo, error)
	hooks       []func(context.Context, ...api.RepoID) ([]*types.Repo, error)
	history     []RepoStoreGetByIDsFuncCall
	mutex       sync.Mutex
}

// GetByIDs delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) GetByIDs(v0 context.Context, v1 ...api.RepoID) ([]*types.Repo, error) {
	r0, r1 := m.GetByIDsFunc.nextHook()(v0, v1...)
	m.GetByIDsFunc.appendCall(RepoStoreGetByIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByIDs method of
// the parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreGetByIDsFunc) SetDefaultHook(hook func(context.Context, ...api.RepoID) ([]*types.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByIDs method of the parent MockRepoStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *RepoStoreGetByIDsFunc) PushHook(hook func(context.Context, ...api.RepoID) ([]*types.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *RepoStoreGetByIDsFunc) SetDefaultReturn(r0 []*types.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, ...api.RepoID) ([]*types.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *RepoStoreGetByIDsFunc) PushReturn(r0 []*types.Repo, r1 error) {
	f.PushHook(func(context.Context, ...api.RepoID) ([]*types.Repo, error) {
		return r0, r1
	})
}

func (f *RepoStoreGetByIDsFunc) nextHook() func(context.Context, ...api.RepoID) ([]*types.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreGetByIDsFunc) appendCall(r0 RepoStoreGetByIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreGetByIDsFuncCall objects
// describing the invocations of this function.
func (f *RepoStoreGetByIDsFunc) History() []RepoStoreGetByIDsFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreGetByIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreGetByIDsFuncCall is an object that describes an invocation of
// method GetByIDs on an instance of MockRepoStore.
type RepoStoreGetByIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c RepoStoreGetByIDsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreGetByIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreGetByNameFunc describes the behavior when the GetByName method
// of the parent MockRepoStore instance is invoked.
type RepoStoreGetByNameFunc struct {
	defaultHook func(context.Context, api.RepoName) (*types.Repo, error)
	hooks       []func(context.Context, api.RepoName) (*types.Repo, error)
	history     []RepoStoreGetByNameFuncCall
	mutex       sync.Mutex
}

// GetByName delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) GetByName(v0 context.Context, v1 api.RepoName) (*types.Repo, error) {
	r0, r1 := m.GetByNameFunc.nextHook()(v0, v1)
	m.GetByNameFunc.appendCall(RepoStoreGetByNameFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByName method of
// the parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreGetByNameFunc) SetDefaultHook(hook func(context.Context, api.RepoName) (*types.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByName method of the parent MockRepoStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *RepoStoreGetByNameFunc) PushHook(hook func(context.Context, api.RepoName) (*types.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *RepoStoreGetByNameFunc) SetDefaultReturn(r0 *types.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) (*types.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *RepoStoreGetByNameFunc) PushReturn(r0 *types.Repo, r1 error) {
	f.PushHook(func(context.Context, api.RepoName) (*types.Repo, error) {
		return r0, r1
	})
}

func (f *RepoStoreGetByNameFunc) nextHook() func(context.Context, api.RepoName) (*types.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreGetByNameFunc) appendCall(r0 RepoStoreGetByNameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreGetByNameFuncCall objects
// describing the invocations of this function.
func (f *RepoStoreGetByNameFunc) History() []RepoStoreGetByNameFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreGetByNameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreGetByNameFuncCall is an object that describes an invocation of
// method GetByName on an instance of MockRepoStore.
type RepoStoreGetByNameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreGetByNameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreGetByNameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreGetFirstRepoNamesByCloneURLFunc describes the behavior when the
// GetFirstRepoNamesByCloneURL method of the parent MockRepoStore instance
// is invoked.
type RepoStoreGetFirstRepoNamesByCloneURLFunc struct {
	defaultHook func(context.Context, string) (api.RepoName, error)
	hooks       []func(context.Context, string) (api.RepoName, error)
	history     []RepoStoreGetFirstRepoNamesByCloneURLFuncCall
	mutex       sync.Mutex
}

// GetFirstRepoNamesByCloneURL delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockRepoStore) GetFirstRepoNamesByCloneURL(v0 context.Context, v1 string) (api.RepoName, error) {
	r0, r1 := m.GetFirstRepoNamesByCloneURLFunc.nextHook()(v0, v1)
	m.GetFirstRepoNamesByCloneURLFunc.appendCall(RepoStoreGetFirstRepoNamesByCloneURLFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetFirstRepoNamesByCloneURL method of the parent MockRepoStore instance
// is invoked and the hook queue is empty.
func (f *RepoStoreGetFirstRepoNamesByCloneURLFunc) SetDefaultHook(hook func(context.Context, string) (api.RepoName, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetFirstRepoNamesByCloneURL method of the parent MockRepoStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *RepoStoreGetFirstRepoNamesByCloneURLFunc) PushHook(hook func(context.Context, string) (api.RepoName, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *RepoStoreGetFirstRepoNamesByCloneURLFunc) SetDefaultReturn(r0 api.RepoName, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (api.RepoName, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *RepoStoreGetFirstRepoNamesByCloneURLFunc) PushReturn(r0 api.RepoName, r1 error) {
	f.PushHook(func(context.Context, string) (api.RepoName, error) {
		return r0, r1
	})
}

func (f *RepoStoreGetFirstRepoNamesByCloneURLFunc) nextHook() func(context.Context, string) (api.RepoName, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreGetFirstRepoNamesByCloneURLFunc) appendCall(r0 RepoStoreGetFirstRepoNamesByCloneURLFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// RepoStoreGetFirstRepoNamesByCloneURLFuncCall objects describing the
// invocations of this function.
func (f *RepoStoreGetFirstRepoNamesByCloneURLFunc) History() []RepoStoreGetFirstRepoNamesByCloneURLFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreGetFirstRepoNamesByCloneURLFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreGetFirstRepoNamesByCloneURLFuncCall is an object that describes
// an invocation of method GetFirstRepoNamesByCloneURL on an instance of
// MockRepoStore.
type RepoStoreGetFirstRepoNamesByCloneURLFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 api.RepoName
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreGetFirstRepoNamesByCloneURLFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreGetFirstRepoNamesByCloneURLFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreGetReposSetByIDsFunc describes the behavior when the
// GetReposSetByIDs method of the parent MockRepoStore instance is invoked.
type RepoStoreGetReposSetByIDsFunc struct {
	defaultHook func(context.Context, ...api.RepoID) (map[api.RepoID]*types.Repo, error)
	hooks       []func(context.Context, ...api.RepoID) (map[api.RepoID]*types.Repo, error)
	history     []RepoStoreGetReposSetByIDsFuncCall
	mutex       sync.Mutex
}

// GetReposSetByIDs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockRepoStore) GetReposSetByIDs(v0 context.Context, v1 ...api.RepoID) (map[api.RepoID]*types.Repo, error) {
	r0, r1 := m.GetReposSetByIDsFunc.nextHook()(v0, v1...)
	m.GetReposSetByIDsFunc.appendCall(RepoStoreGetReposSetByIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetReposSetByIDs
// method of the parent MockRepoStore instance is invoked and the hook queue
// is empty.
func (f *RepoStoreGetReposSetByIDsFunc) SetDefaultHook(hook func(context.Context, ...api.RepoID) (map[api.RepoID]*types.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetReposSetByIDs method of the parent MockRepoStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *RepoStoreGetReposSetByIDsFunc) PushHook(hook func(context.Context, ...api.RepoID) (map[api.RepoID]*types.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *RepoStoreGetReposSetByIDsFunc) SetDefaultReturn(r0 map[api.RepoID]*types.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, ...api.RepoID) (map[api.RepoID]*types.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *RepoStoreGetReposSetByIDsFunc) PushReturn(r0 map[api.RepoID]*types.Repo, r1 error) {
	f.PushHook(func(context.Context, ...api.RepoID) (map[api.RepoID]*types.Repo, error) {
		return r0, r1
	})
}

func (f *RepoStoreGetReposSetByIDsFunc) nextHook() func(context.Context, ...api.RepoID) (map[api.RepoID]*types.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreGetReposSetByIDsFunc) appendCall(r0 RepoStoreGetReposSetByIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreGetReposSetByIDsFuncCall objects
// describing the invocations of this function.
func (f *RepoStoreGetReposSetByIDsFunc) History() []RepoStoreGetReposSetByIDsFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreGetReposSetByIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreGetReposSetByIDsFuncCall is an object that describes an
// invocation of method GetReposSetByIDs on an instance of MockRepoStore.
type RepoStoreGetReposSetByIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[api.RepoID]*types.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c RepoStoreGetReposSetByIDsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreGetReposSetByIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreHandleFunc describes the behavior when the Handle method of the
// parent MockRepoStore instance is invoked.
type RepoStoreHandleFunc struct {
	defaultHook func() *basestore.TransactableHandle
	hooks       []func() *basestore.TransactableHandle
	history     []RepoStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) Handle() *basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(RepoStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreHandleFunc) SetDefaultHook(hook func() *basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockRepoStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *RepoStoreHandleFunc) PushHook(hook func() *basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *RepoStoreHandleFunc) SetDefaultReturn(r0 *basestore.TransactableHandle) {
	f.SetDefaultHook(func() *basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *RepoStoreHandleFunc) PushReturn(r0 *basestore.TransactableHandle) {
	f.PushHook(func() *basestore.TransactableHandle {
		return r0
	})
}

func (f *RepoStoreHandleFunc) nextHook() func() *basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreHandleFunc) appendCall(r0 RepoStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreHandleFuncCall objects describing
// the invocations of this function.
func (f *RepoStoreHandleFunc) History() []RepoStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreHandleFuncCall is an object that describes an invocation of
// method Handle on an instance of MockRepoStore.
type RepoStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RepoStoreListFunc describes the behavior when the List method of the
// parent MockRepoStore instance is invoked.
type RepoStoreListFunc struct {
	defaultHook func(context.Context, database.ReposListOptions) ([]*types.Repo, error)
	hooks       []func(context.Context, database.ReposListOptions) ([]*types.Repo, error)
	history     []RepoStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) List(v0 context.Context, v1 database.ReposListOptions) ([]*types.Repo, error) {
	r0, r1 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(RepoStoreListFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreListFunc) SetDefaultHook(hook func(context.Context, database.ReposListOptions) ([]*types.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockRepoStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *RepoStoreListFunc) PushHook(hook func(context.Context, database.ReposListOptions) ([]*types.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *RepoStoreListFunc) SetDefaultReturn(r0 []*types.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, database.ReposListOptions) ([]*types.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *RepoStoreListFunc) PushReturn(r0 []*types.Repo, r1 error) {
	f.PushHook(func(context.Context, database.ReposListOptions) ([]*types.Repo, error) {
		return r0, r1
	})
}

func (f *RepoStoreListFunc) nextHook() func(context.Context, database.ReposListOptions) ([]*types.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreListFunc) appendCall(r0 RepoStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreListFuncCall objects describing
// the invocations of this function.
func (f *RepoStoreListFunc) History() []RepoStoreListFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreListFuncCall is an object that describes an invocation of method
// List on an instance of MockRepoStore.
type RepoStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.ReposListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreListEnabledNamesFunc describes the behavior when the
// ListEnabledNames method of the parent MockRepoStore instance is invoked.
type RepoStoreListEnabledNamesFunc struct {
	defaultHook func(context.Context) ([]string, error)
	hooks       []func(context.Context) ([]string, error)
	history     []RepoStoreListEnabledNamesFuncCall
	mutex       sync.Mutex
}

// ListEnabledNames delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockRepoStore) ListEnabledNames(v0 context.Context) ([]string, error) {
	r0, r1 := m.ListEnabledNamesFunc.nextHook()(v0)
	m.ListEnabledNamesFunc.appendCall(RepoStoreListEnabledNamesFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListEnabledNames
// method of the parent MockRepoStore instance is invoked and the hook queue
// is empty.
func (f *RepoStoreListEnabledNamesFunc) SetDefaultHook(hook func(context.Context) ([]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListEnabledNames method of the parent MockRepoStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *RepoStoreListEnabledNamesFunc) PushHook(hook func(context.Context) ([]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *RepoStoreListEnabledNamesFunc) SetDefaultReturn(r0 []string, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *RepoStoreListEnabledNamesFunc) PushReturn(r0 []string, r1 error) {
	f.PushHook(func(context.Context) ([]string, error) {
		return r0, r1
	})
}

func (f *RepoStoreListEnabledNamesFunc) nextHook() func(context.Context) ([]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreListEnabledNamesFunc) appendCall(r0 RepoStoreListEnabledNamesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreListEnabledNamesFuncCall objects
// describing the invocations of this function.
func (f *RepoStoreListEnabledNamesFunc) History() []RepoStoreListEnabledNamesFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreListEnabledNamesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreListEnabledNamesFuncCall is an object that describes an
// invocation of method ListEnabledNames on an instance of MockRepoStore.
type RepoStoreListEnabledNamesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreListEnabledNamesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreListEnabledNamesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreListIndexableReposFunc describes the behavior when the
// ListIndexableRepos method of the parent MockRepoStore instance is
// invoked.
type RepoStoreListIndexableReposFunc struct {
	defaultHook func(context.Context, database.ListIndexableReposOptions) ([]types.MinimalRepo, error)
	hooks       []func(context.Context, database.ListIndexableReposOptions) ([]types.MinimalRepo, error)
	history     []RepoStoreListIndexableReposFuncCall
	mutex       sync.Mutex
}

// ListIndexableRepos delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockRepoStore) ListIndexableRepos(v0 context.Context, v1 database.ListIndexableReposOptions) ([]types.MinimalRepo, error) {
	r0, r1 := m.ListIndexableReposFunc.nextHook()(v0, v1)
	m.ListIndexableReposFunc.appendCall(RepoStoreListIndexableReposFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListIndexableRepos
// method of the parent MockRepoStore instance is invoked and the hook queue
// is empty.
func (f *RepoStoreListIndexableReposFunc) SetDefaultHook(hook func(context.Context, database.ListIndexableReposOptions) ([]types.MinimalRepo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListIndexableRepos method of the parent MockRepoStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *RepoStoreListIndexableReposFunc) PushHook(hook func(context.Context, database.ListIndexableReposOptions) ([]types.MinimalRepo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *RepoStoreListIndexableReposFunc) SetDefaultReturn(r0 []types.MinimalRepo, r1 error) {
	f.SetDefaultHook(func(context.Context, database.ListIndexableReposOptions) ([]types.MinimalRepo, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *RepoStoreListIndexableReposFunc) PushReturn(r0 []types.MinimalRepo, r1 error) {
	f.PushHook(func(context.Context, database.ListIndexableReposOptions) ([]types.MinimalRepo, error) {
		return r0, r1
	})
}

func (f *RepoStoreListIndexableReposFunc) nextHook() func(context.Context, database.ListIndexableReposOptions) ([]types.MinimalRepo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreListIndexableReposFunc) appendCall(r0 RepoStoreListIndexableReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreListIndexableReposFuncCall objects
// describing the invocations of this function.
func (f *RepoStoreListIndexableReposFunc) History() []RepoStoreListIndexableReposFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreListIndexableReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreListIndexableReposFuncCall is an object that describes an
// invocation of method ListIndexableRepos on an instance of MockRepoStore.
type RepoStoreListIndexableReposFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.ListIndexableReposOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.MinimalRepo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreListIndexableReposFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreListIndexableReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreListMinimalReposFunc describes the behavior when the
// ListMinimalRepos method of the parent MockRepoStore instance is invoked.
type RepoStoreListMinimalReposFunc struct {
	defaultHook func(context.Context, database.ReposListOptions) ([]types.MinimalRepo, error)
	hooks       []func(context.Context, database.ReposListOptions) ([]types.MinimalRepo, error)
	history     []RepoStoreListMinimalReposFuncCall
	mutex       sync.Mutex
}

// ListMinimalRepos delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockRepoStore) ListMinimalRepos(v0 context.Context, v1 database.ReposListOptions) ([]types.MinimalRepo, error) {
	r0, r1 := m.ListMinimalReposFunc.nextHook()(v0, v1)
	m.ListMinimalReposFunc.appendCall(RepoStoreListMinimalReposFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListMinimalRepos
// method of the parent MockRepoStore instance is invoked and the hook queue
// is empty.
func (f *RepoStoreListMinimalReposFunc) SetDefaultHook(hook func(context.Context, database.ReposListOptions) ([]types.MinimalRepo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListMinimalRepos method of the parent MockRepoStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *RepoStoreListMinimalReposFunc) PushHook(hook func(context.Context, database.ReposListOptions) ([]types.MinimalRepo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *RepoStoreListMinimalReposFunc) SetDefaultReturn(r0 []types.MinimalRepo, r1 error) {
	f.SetDefaultHook(func(context.Context, database.ReposListOptions) ([]types.MinimalRepo, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *RepoStoreListMinimalReposFunc) PushReturn(r0 []types.MinimalRepo, r1 error) {
	f.PushHook(func(context.Context, database.ReposListOptions) ([]types.MinimalRepo, error) {
		return r0, r1
	})
}

func (f *RepoStoreListMinimalReposFunc) nextHook() func(context.Context, database.ReposListOptions) ([]types.MinimalRepo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreListMinimalReposFunc) appendCall(r0 RepoStoreListMinimalReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreListMinimalReposFuncCall objects
// describing the invocations of this function.
func (f *RepoStoreListMinimalReposFunc) History() []RepoStoreListMinimalReposFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreListMinimalReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreListMinimalReposFuncCall is an object that describes an
// invocation of method ListMinimalRepos on an instance of MockRepoStore.
type RepoStoreListMinimalReposFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.ReposListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.MinimalRepo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreListMinimalReposFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreListMinimalReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreMetadataFunc describes the behavior when the Metadata method of
// the parent MockRepoStore instance is invoked.
type RepoStoreMetadataFunc struct {
	defaultHook func(context.Context, ...api.RepoID) ([]*types.SearchedRepo, error)
	hooks       []func(context.Context, ...api.RepoID) ([]*types.SearchedRepo, error)
	history     []RepoStoreMetadataFuncCall
	mutex       sync.Mutex
}

// Metadata delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) Metadata(v0 context.Context, v1 ...api.RepoID) ([]*types.SearchedRepo, error) {
	r0, r1 := m.MetadataFunc.nextHook()(v0, v1...)
	m.MetadataFunc.appendCall(RepoStoreMetadataFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Metadata method of
// the parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreMetadataFunc) SetDefaultHook(hook func(context.Context, ...api.RepoID) ([]*types.SearchedRepo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Metadata method of the parent MockRepoStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *RepoStoreMetadataFunc) PushHook(hook func(context.Context, ...api.RepoID) ([]*types.SearchedRepo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *RepoStoreMetadataFunc) SetDefaultReturn(r0 []*types.SearchedRepo, r1 error) {
	f.SetDefaultHook(func(context.Context, ...api.RepoID) ([]*types.SearchedRepo, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *RepoStoreMetadataFunc) PushReturn(r0 []*types.SearchedRepo, r1 error) {
	f.PushHook(func(context.Context, ...api.RepoID) ([]*types.SearchedRepo, error) {
		return r0, r1
	})
}

func (f *RepoStoreMetadataFunc) nextHook() func(context.Context, ...api.RepoID) ([]*types.SearchedRepo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreMetadataFunc) appendCall(r0 RepoStoreMetadataFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreMetadataFuncCall objects
// describing the invocations of this function.
func (f *RepoStoreMetadataFunc) History() []RepoStoreMetadataFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreMetadataFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreMetadataFuncCall is an object that describes an invocation of
// method Metadata on an instance of MockRepoStore.
type RepoStoreMetadataFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.SearchedRepo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c RepoStoreMetadataFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreMetadataFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreQueryFunc describes the behavior when the Query method of the
// parent MockRepoStore instance is invoked.
type RepoStoreQueryFunc struct {
	defaultHook func(context.Context, *sqlf.Query) (*sql.Rows, error)
	hooks       []func(context.Context, *sqlf.Query) (*sql.Rows, error)
	history     []RepoStoreQueryFuncCall
	mutex       sync.Mutex
}

// Query delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) Query(v0 context.Context, v1 *sqlf.Query) (*sql.Rows, error) {
	r0, r1 := m.QueryFunc.nextHook()(v0, v1)
	m.QueryFunc.appendCall(RepoStoreQueryFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Query method of the
// parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreQueryFunc) SetDefaultHook(hook func(context.Context, *sqlf.Query) (*sql.Rows, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Query method of the parent MockRepoStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *RepoStoreQueryFunc) PushHook(hook func(context.Context, *sqlf.Query) (*sql.Rows, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *RepoStoreQueryFunc) SetDefaultReturn(r0 *sql.Rows, r1 error) {
	f.SetDefaultHook(func(context.Context, *sqlf.Query) (*sql.Rows, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *RepoStoreQueryFunc) PushReturn(r0 *sql.Rows, r1 error) {
	f.PushHook(func(context.Context, *sqlf.Query) (*sql.Rows, error) {
		return r0, r1
	})
}

func (f *RepoStoreQueryFunc) nextHook() func(context.Context, *sqlf.Query) (*sql.Rows, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreQueryFunc) appendCall(r0 RepoStoreQueryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreQueryFuncCall objects describing
// the invocations of this function.
func (f *RepoStoreQueryFunc) History() []RepoStoreQueryFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreQueryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreQueryFuncCall is an object that describes an invocation of
// method Query on an instance of MockRepoStore.
type RepoStoreQueryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sqlf.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *sql.Rows
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreQueryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreQueryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreStreamMinimalReposFunc describes the behavior when the
// StreamMinimalRepos method of the parent MockRepoStore instance is
// invoked.
type RepoStoreStreamMinimalReposFunc struct {
	defaultHook func(context.Context, database.ReposListOptions, func(*types.MinimalRepo)) error
	hooks       []func(context.Context, database.ReposListOptions, func(*types.MinimalRepo)) error
	history     []RepoStoreStreamMinimalReposFuncCall
	mutex       sync.Mutex
}

// StreamMinimalRepos delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockRepoStore) StreamMinimalRepos(v0 context.Context, v1 database.ReposListOptions, v2 func(*types.MinimalRepo)) error {
	r0 := m.StreamMinimalReposFunc.nextHook()(v0, v1, v2)
	m.StreamMinimalReposFunc.appendCall(RepoStoreStreamMinimalReposFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the StreamMinimalRepos
// method of the parent MockRepoStore instance is invoked and the hook queue
// is empty.
func (f *RepoStoreStreamMinimalReposFunc) SetDefaultHook(hook func(context.Context, database.ReposListOptions, func(*types.MinimalRepo)) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// StreamMinimalRepos method of the parent MockRepoStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *RepoStoreStreamMinimalReposFunc) PushHook(hook func(context.Context, database.ReposListOptions, func(*types.MinimalRepo)) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *RepoStoreStreamMinimalReposFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, database.ReposListOptions, func(*types.MinimalRepo)) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *RepoStoreStreamMinimalReposFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, database.ReposListOptions, func(*types.MinimalRepo)) error {
		return r0
	})
}

func (f *RepoStoreStreamMinimalReposFunc) nextHook() func(context.Context, database.ReposListOptions, func(*types.MinimalRepo)) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreStreamMinimalReposFunc) appendCall(r0 RepoStoreStreamMinimalReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreStreamMinimalReposFuncCall objects
// describing the invocations of this function.
func (f *RepoStoreStreamMinimalReposFunc) History() []RepoStoreStreamMinimalReposFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreStreamMinimalReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreStreamMinimalReposFuncCall is an object that describes an
// invocation of method StreamMinimalRepos on an instance of MockRepoStore.
type RepoStoreStreamMinimalReposFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.ReposListOptions
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 func(*types.MinimalRepo)
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreStreamMinimalReposFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreStreamMinimalReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RepoStoreTransactFunc describes the behavior when the Transact method of
// the parent MockRepoStore instance is invoked.
type RepoStoreTransactFunc struct {
	defaultHook func(context.Context) (database.RepoStore, error)
	hooks       []func(context.Context) (database.RepoStore, error)
	history     []RepoStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) Transact(v0 context.Context) (database.RepoStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(RepoStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreTransactFunc) SetDefaultHook(hook func(context.Context) (database.RepoStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockRepoStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *RepoStoreTransactFunc) PushHook(hook func(context.Context) (database.RepoStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *RepoStoreTransactFunc) SetDefaultReturn(r0 database.RepoStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (database.RepoStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *RepoStoreTransactFunc) PushReturn(r0 database.RepoStore, r1 error) {
	f.PushHook(func(context.Context) (database.RepoStore, error) {
		return r0, r1
	})
}

func (f *RepoStoreTransactFunc) nextHook() func(context.Context) (database.RepoStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreTransactFunc) appendCall(r0 RepoStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *RepoStoreTransactFunc) History() []RepoStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreTransactFuncCall is an object that describes an invocation of
// method Transact on an instance of MockRepoStore.
type RepoStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.RepoStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreWithFunc describes the behavior when the With method of the
// parent MockRepoStore instance is invoked.
type RepoStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) database.RepoStore
	hooks       []func(basestore.ShareableStore) database.RepoStore
	history     []RepoStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) With(v0 basestore.ShareableStore) database.RepoStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(RepoStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) database.RepoStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockRepoStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *RepoStoreWithFunc) PushHook(hook func(basestore.ShareableStore) database.RepoStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *RepoStoreWithFunc) SetDefaultReturn(r0 database.RepoStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) database.RepoStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *RepoStoreWithFunc) PushReturn(r0 database.RepoStore) {
	f.PushHook(func(basestore.ShareableStore) database.RepoStore {
		return r0
	})
}

func (f *RepoStoreWithFunc) nextHook() func(basestore.ShareableStore) database.RepoStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreWithFunc) appendCall(r0 RepoStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreWithFuncCall objects describing
// the invocations of this function.
func (f *RepoStoreWithFunc) History() []RepoStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreWithFuncCall is an object that describes an invocation of method
// With on an instance of MockRepoStore.
type RepoStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.RepoStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
