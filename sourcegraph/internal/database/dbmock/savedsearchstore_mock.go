// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package dbmock

import (
	"context"
	"sync"

	api "github.com/sourcegraph/sourcegraph/internal/api"
	database "github.com/sourcegraph/sourcegraph/internal/database"
	basestore "github.com/sourcegraph/sourcegraph/internal/database/basestore"
	types "github.com/sourcegraph/sourcegraph/internal/types"
)

// MockSavedSearchStore is a mock implementation of the SavedSearchStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockSavedSearchStore struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *SavedSearchStoreCreateFunc
	// DeleteFunc is an instance of a mock function object controlling the
	// behavior of the method Delete.
	DeleteFunc *SavedSearchStoreDeleteFunc
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *SavedSearchStoreGetByIDFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *SavedSearchStoreHandleFunc
	// IsEmptyFunc is an instance of a mock function object controlling the
	// behavior of the method IsEmpty.
	IsEmptyFunc *SavedSearchStoreIsEmptyFunc
	// ListAllFunc is an instance of a mock function object controlling the
	// behavior of the method ListAll.
	ListAllFunc *SavedSearchStoreListAllFunc
	// ListSavedSearchesByOrgIDFunc is an instance of a mock function object
	// controlling the behavior of the method ListSavedSearchesByOrgID.
	ListSavedSearchesByOrgIDFunc *SavedSearchStoreListSavedSearchesByOrgIDFunc
	// ListSavedSearchesByUserIDFunc is an instance of a mock function
	// object controlling the behavior of the method
	// ListSavedSearchesByUserID.
	ListSavedSearchesByUserIDFunc *SavedSearchStoreListSavedSearchesByUserIDFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *SavedSearchStoreTransactFunc
	// UpdateFunc is an instance of a mock function object controlling the
	// behavior of the method Update.
	UpdateFunc *SavedSearchStoreUpdateFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *SavedSearchStoreWithFunc
}

// NewMockSavedSearchStore creates a new mock of the SavedSearchStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockSavedSearchStore() *MockSavedSearchStore {
	return &MockSavedSearchStore{
		CreateFunc: &SavedSearchStoreCreateFunc{
			defaultHook: func(context.Context, *types.SavedSearch) (*types.SavedSearch, error) {
				return nil, nil
			},
		},
		DeleteFunc: &SavedSearchStoreDeleteFunc{
			defaultHook: func(context.Context, int32) error {
				return nil
			},
		},
		GetByIDFunc: &SavedSearchStoreGetByIDFunc{
			defaultHook: func(context.Context, int32) (*api.SavedQuerySpecAndConfig, error) {
				return nil, nil
			},
		},
		HandleFunc: &SavedSearchStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				return nil
			},
		},
		IsEmptyFunc: &SavedSearchStoreIsEmptyFunc{
			defaultHook: func(context.Context) (bool, error) {
				return false, nil
			},
		},
		ListAllFunc: &SavedSearchStoreListAllFunc{
			defaultHook: func(context.Context) ([]api.SavedQuerySpecAndConfig, error) {
				return nil, nil
			},
		},
		ListSavedSearchesByOrgIDFunc: &SavedSearchStoreListSavedSearchesByOrgIDFunc{
			defaultHook: func(context.Context, int32) ([]*types.SavedSearch, error) {
				return nil, nil
			},
		},
		ListSavedSearchesByUserIDFunc: &SavedSearchStoreListSavedSearchesByUserIDFunc{
			defaultHook: func(context.Context, int32) ([]*types.SavedSearch, error) {
				return nil, nil
			},
		},
		TransactFunc: &SavedSearchStoreTransactFunc{
			defaultHook: func(context.Context) (database.SavedSearchStore, error) {
				return nil, nil
			},
		},
		UpdateFunc: &SavedSearchStoreUpdateFunc{
			defaultHook: func(context.Context, *types.SavedSearch) (*types.SavedSearch, error) {
				return nil, nil
			},
		},
		WithFunc: &SavedSearchStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) database.SavedSearchStore {
				return nil
			},
		},
	}
}

// NewStrictMockSavedSearchStore creates a new mock of the SavedSearchStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockSavedSearchStore() *MockSavedSearchStore {
	return &MockSavedSearchStore{
		CreateFunc: &SavedSearchStoreCreateFunc{
			defaultHook: func(context.Context, *types.SavedSearch) (*types.SavedSearch, error) {
				panic("unexpected invocation of MockSavedSearchStore.Create")
			},
		},
		DeleteFunc: &SavedSearchStoreDeleteFunc{
			defaultHook: func(context.Context, int32) error {
				panic("unexpected invocation of MockSavedSearchStore.Delete")
			},
		},
		GetByIDFunc: &SavedSearchStoreGetByIDFunc{
			defaultHook: func(context.Context, int32) (*api.SavedQuerySpecAndConfig, error) {
				panic("unexpected invocation of MockSavedSearchStore.GetByID")
			},
		},
		HandleFunc: &SavedSearchStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				panic("unexpected invocation of MockSavedSearchStore.Handle")
			},
		},
		IsEmptyFunc: &SavedSearchStoreIsEmptyFunc{
			defaultHook: func(context.Context) (bool, error) {
				panic("unexpected invocation of MockSavedSearchStore.IsEmpty")
			},
		},
		ListAllFunc: &SavedSearchStoreListAllFunc{
			defaultHook: func(context.Context) ([]api.SavedQuerySpecAndConfig, error) {
				panic("unexpected invocation of MockSavedSearchStore.ListAll")
			},
		},
		ListSavedSearchesByOrgIDFunc: &SavedSearchStoreListSavedSearchesByOrgIDFunc{
			defaultHook: func(context.Context, int32) ([]*types.SavedSearch, error) {
				panic("unexpected invocation of MockSavedSearchStore.ListSavedSearchesByOrgID")
			},
		},
		ListSavedSearchesByUserIDFunc: &SavedSearchStoreListSavedSearchesByUserIDFunc{
			defaultHook: func(context.Context, int32) ([]*types.SavedSearch, error) {
				panic("unexpected invocation of MockSavedSearchStore.ListSavedSearchesByUserID")
			},
		},
		TransactFunc: &SavedSearchStoreTransactFunc{
			defaultHook: func(context.Context) (database.SavedSearchStore, error) {
				panic("unexpected invocation of MockSavedSearchStore.Transact")
			},
		},
		UpdateFunc: &SavedSearchStoreUpdateFunc{
			defaultHook: func(context.Context, *types.SavedSearch) (*types.SavedSearch, error) {
				panic("unexpected invocation of MockSavedSearchStore.Update")
			},
		},
		WithFunc: &SavedSearchStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) database.SavedSearchStore {
				panic("unexpected invocation of MockSavedSearchStore.With")
			},
		},
	}
}

// NewMockSavedSearchStoreFrom creates a new mock of the
// MockSavedSearchStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockSavedSearchStoreFrom(i database.SavedSearchStore) *MockSavedSearchStore {
	return &MockSavedSearchStore{
		CreateFunc: &SavedSearchStoreCreateFunc{
			defaultHook: i.Create,
		},
		DeleteFunc: &SavedSearchStoreDeleteFunc{
			defaultHook: i.Delete,
		},
		GetByIDFunc: &SavedSearchStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		HandleFunc: &SavedSearchStoreHandleFunc{
			defaultHook: i.Handle,
		},
		IsEmptyFunc: &SavedSearchStoreIsEmptyFunc{
			defaultHook: i.IsEmpty,
		},
		ListAllFunc: &SavedSearchStoreListAllFunc{
			defaultHook: i.ListAll,
		},
		ListSavedSearchesByOrgIDFunc: &SavedSearchStoreListSavedSearchesByOrgIDFunc{
			defaultHook: i.ListSavedSearchesByOrgID,
		},
		ListSavedSearchesByUserIDFunc: &SavedSearchStoreListSavedSearchesByUserIDFunc{
			defaultHook: i.ListSavedSearchesByUserID,
		},
		TransactFunc: &SavedSearchStoreTransactFunc{
			defaultHook: i.Transact,
		},
		UpdateFunc: &SavedSearchStoreUpdateFunc{
			defaultHook: i.Update,
		},
		WithFunc: &SavedSearchStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// SavedSearchStoreCreateFunc describes the behavior when the Create method
// of the parent MockSavedSearchStore instance is invoked.
type SavedSearchStoreCreateFunc struct {
	defaultHook func(context.Context, *types.SavedSearch) (*types.SavedSearch, error)
	hooks       []func(context.Context, *types.SavedSearch) (*types.SavedSearch, error)
	history     []SavedSearchStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSavedSearchStore) Create(v0 context.Context, v1 *types.SavedSearch) (*types.SavedSearch, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1)
	m.CreateFunc.appendCall(SavedSearchStoreCreateFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockSavedSearchStore instance is invoked and the hook queue is
// empty.
func (f *SavedSearchStoreCreateFunc) SetDefaultHook(hook func(context.Context, *types.SavedSearch) (*types.SavedSearch, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockSavedSearchStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SavedSearchStoreCreateFunc) PushHook(hook func(context.Context, *types.SavedSearch) (*types.SavedSearch, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SavedSearchStoreCreateFunc) SetDefaultReturn(r0 *types.SavedSearch, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.SavedSearch) (*types.SavedSearch, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SavedSearchStoreCreateFunc) PushReturn(r0 *types.SavedSearch, r1 error) {
	f.PushHook(func(context.Context, *types.SavedSearch) (*types.SavedSearch, error) {
		return r0, r1
	})
}

func (f *SavedSearchStoreCreateFunc) nextHook() func(context.Context, *types.SavedSearch) (*types.SavedSearch, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SavedSearchStoreCreateFunc) appendCall(r0 SavedSearchStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SavedSearchStoreCreateFuncCall objects
// describing the invocations of this function.
func (f *SavedSearchStoreCreateFunc) History() []SavedSearchStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]SavedSearchStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SavedSearchStoreCreateFuncCall is an object that describes an invocation
// of method Create on an instance of MockSavedSearchStore.
type SavedSearchStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.SavedSearch
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.SavedSearch
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SavedSearchStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SavedSearchStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SavedSearchStoreDeleteFunc describes the behavior when the Delete method
// of the parent MockSavedSearchStore instance is invoked.
type SavedSearchStoreDeleteFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []SavedSearchStoreDeleteFuncCall
	mutex       sync.Mutex
}

// Delete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSavedSearchStore) Delete(v0 context.Context, v1 int32) error {
	r0 := m.DeleteFunc.nextHook()(v0, v1)
	m.DeleteFunc.appendCall(SavedSearchStoreDeleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Delete method of the
// parent MockSavedSearchStore instance is invoked and the hook queue is
// empty.
func (f *SavedSearchStoreDeleteFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Delete method of the parent MockSavedSearchStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SavedSearchStoreDeleteFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SavedSearchStoreDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SavedSearchStoreDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *SavedSearchStoreDeleteFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SavedSearchStoreDeleteFunc) appendCall(r0 SavedSearchStoreDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SavedSearchStoreDeleteFuncCall objects
// describing the invocations of this function.
func (f *SavedSearchStoreDeleteFunc) History() []SavedSearchStoreDeleteFuncCall {
	f.mutex.Lock()
	history := make([]SavedSearchStoreDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SavedSearchStoreDeleteFuncCall is an object that describes an invocation
// of method Delete on an instance of MockSavedSearchStore.
type SavedSearchStoreDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SavedSearchStoreDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SavedSearchStoreDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SavedSearchStoreGetByIDFunc describes the behavior when the GetByID
// method of the parent MockSavedSearchStore instance is invoked.
type SavedSearchStoreGetByIDFunc struct {
	defaultHook func(context.Context, int32) (*api.SavedQuerySpecAndConfig, error)
	hooks       []func(context.Context, int32) (*api.SavedQuerySpecAndConfig, error)
	history     []SavedSearchStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSavedSearchStore) GetByID(v0 context.Context, v1 int32) (*api.SavedQuerySpecAndConfig, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(SavedSearchStoreGetByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockSavedSearchStore instance is invoked and the hook queue is
// empty.
func (f *SavedSearchStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int32) (*api.SavedQuerySpecAndConfig, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockSavedSearchStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SavedSearchStoreGetByIDFunc) PushHook(hook func(context.Context, int32) (*api.SavedQuerySpecAndConfig, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SavedSearchStoreGetByIDFunc) SetDefaultReturn(r0 *api.SavedQuerySpecAndConfig, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (*api.SavedQuerySpecAndConfig, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SavedSearchStoreGetByIDFunc) PushReturn(r0 *api.SavedQuerySpecAndConfig, r1 error) {
	f.PushHook(func(context.Context, int32) (*api.SavedQuerySpecAndConfig, error) {
		return r0, r1
	})
}

func (f *SavedSearchStoreGetByIDFunc) nextHook() func(context.Context, int32) (*api.SavedQuerySpecAndConfig, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SavedSearchStoreGetByIDFunc) appendCall(r0 SavedSearchStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SavedSearchStoreGetByIDFuncCall objects
// describing the invocations of this function.
func (f *SavedSearchStoreGetByIDFunc) History() []SavedSearchStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]SavedSearchStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SavedSearchStoreGetByIDFuncCall is an object that describes an invocation
// of method GetByID on an instance of MockSavedSearchStore.
type SavedSearchStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *api.SavedQuerySpecAndConfig
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SavedSearchStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SavedSearchStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SavedSearchStoreHandleFunc describes the behavior when the Handle method
// of the parent MockSavedSearchStore instance is invoked.
type SavedSearchStoreHandleFunc struct {
	defaultHook func() *basestore.TransactableHandle
	hooks       []func() *basestore.TransactableHandle
	history     []SavedSearchStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSavedSearchStore) Handle() *basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(SavedSearchStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockSavedSearchStore instance is invoked and the hook queue is
// empty.
func (f *SavedSearchStoreHandleFunc) SetDefaultHook(hook func() *basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockSavedSearchStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SavedSearchStoreHandleFunc) PushHook(hook func() *basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SavedSearchStoreHandleFunc) SetDefaultReturn(r0 *basestore.TransactableHandle) {
	f.SetDefaultHook(func() *basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SavedSearchStoreHandleFunc) PushReturn(r0 *basestore.TransactableHandle) {
	f.PushHook(func() *basestore.TransactableHandle {
		return r0
	})
}

func (f *SavedSearchStoreHandleFunc) nextHook() func() *basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SavedSearchStoreHandleFunc) appendCall(r0 SavedSearchStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SavedSearchStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *SavedSearchStoreHandleFunc) History() []SavedSearchStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]SavedSearchStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SavedSearchStoreHandleFuncCall is an object that describes an invocation
// of method Handle on an instance of MockSavedSearchStore.
type SavedSearchStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SavedSearchStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SavedSearchStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SavedSearchStoreIsEmptyFunc describes the behavior when the IsEmpty
// method of the parent MockSavedSearchStore instance is invoked.
type SavedSearchStoreIsEmptyFunc struct {
	defaultHook func(context.Context) (bool, error)
	hooks       []func(context.Context) (bool, error)
	history     []SavedSearchStoreIsEmptyFuncCall
	mutex       sync.Mutex
}

// IsEmpty delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSavedSearchStore) IsEmpty(v0 context.Context) (bool, error) {
	r0, r1 := m.IsEmptyFunc.nextHook()(v0)
	m.IsEmptyFunc.appendCall(SavedSearchStoreIsEmptyFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IsEmpty method of
// the parent MockSavedSearchStore instance is invoked and the hook queue is
// empty.
func (f *SavedSearchStoreIsEmptyFunc) SetDefaultHook(hook func(context.Context) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsEmpty method of the parent MockSavedSearchStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SavedSearchStoreIsEmptyFunc) PushHook(hook func(context.Context) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SavedSearchStoreIsEmptyFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SavedSearchStoreIsEmptyFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context) (bool, error) {
		return r0, r1
	})
}

func (f *SavedSearchStoreIsEmptyFunc) nextHook() func(context.Context) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SavedSearchStoreIsEmptyFunc) appendCall(r0 SavedSearchStoreIsEmptyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SavedSearchStoreIsEmptyFuncCall objects
// describing the invocations of this function.
func (f *SavedSearchStoreIsEmptyFunc) History() []SavedSearchStoreIsEmptyFuncCall {
	f.mutex.Lock()
	history := make([]SavedSearchStoreIsEmptyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SavedSearchStoreIsEmptyFuncCall is an object that describes an invocation
// of method IsEmpty on an instance of MockSavedSearchStore.
type SavedSearchStoreIsEmptyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SavedSearchStoreIsEmptyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SavedSearchStoreIsEmptyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SavedSearchStoreListAllFunc describes the behavior when the ListAll
// method of the parent MockSavedSearchStore instance is invoked.
type SavedSearchStoreListAllFunc struct {
	defaultHook func(context.Context) ([]api.SavedQuerySpecAndConfig, error)
	hooks       []func(context.Context) ([]api.SavedQuerySpecAndConfig, error)
	history     []SavedSearchStoreListAllFuncCall
	mutex       sync.Mutex
}

// ListAll delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSavedSearchStore) ListAll(v0 context.Context) ([]api.SavedQuerySpecAndConfig, error) {
	r0, r1 := m.ListAllFunc.nextHook()(v0)
	m.ListAllFunc.appendCall(SavedSearchStoreListAllFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListAll method of
// the parent MockSavedSearchStore instance is invoked and the hook queue is
// empty.
func (f *SavedSearchStoreListAllFunc) SetDefaultHook(hook func(context.Context) ([]api.SavedQuerySpecAndConfig, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListAll method of the parent MockSavedSearchStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SavedSearchStoreListAllFunc) PushHook(hook func(context.Context) ([]api.SavedQuerySpecAndConfig, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SavedSearchStoreListAllFunc) SetDefaultReturn(r0 []api.SavedQuerySpecAndConfig, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]api.SavedQuerySpecAndConfig, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SavedSearchStoreListAllFunc) PushReturn(r0 []api.SavedQuerySpecAndConfig, r1 error) {
	f.PushHook(func(context.Context) ([]api.SavedQuerySpecAndConfig, error) {
		return r0, r1
	})
}

func (f *SavedSearchStoreListAllFunc) nextHook() func(context.Context) ([]api.SavedQuerySpecAndConfig, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SavedSearchStoreListAllFunc) appendCall(r0 SavedSearchStoreListAllFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SavedSearchStoreListAllFuncCall objects
// describing the invocations of this function.
func (f *SavedSearchStoreListAllFunc) History() []SavedSearchStoreListAllFuncCall {
	f.mutex.Lock()
	history := make([]SavedSearchStoreListAllFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SavedSearchStoreListAllFuncCall is an object that describes an invocation
// of method ListAll on an instance of MockSavedSearchStore.
type SavedSearchStoreListAllFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []api.SavedQuerySpecAndConfig
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SavedSearchStoreListAllFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SavedSearchStoreListAllFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SavedSearchStoreListSavedSearchesByOrgIDFunc describes the behavior when
// the ListSavedSearchesByOrgID method of the parent MockSavedSearchStore
// instance is invoked.
type SavedSearchStoreListSavedSearchesByOrgIDFunc struct {
	defaultHook func(context.Context, int32) ([]*types.SavedSearch, error)
	hooks       []func(context.Context, int32) ([]*types.SavedSearch, error)
	history     []SavedSearchStoreListSavedSearchesByOrgIDFuncCall
	mutex       sync.Mutex
}

// ListSavedSearchesByOrgID delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockSavedSearchStore) ListSavedSearchesByOrgID(v0 context.Context, v1 int32) ([]*types.SavedSearch, error) {
	r0, r1 := m.ListSavedSearchesByOrgIDFunc.nextHook()(v0, v1)
	m.ListSavedSearchesByOrgIDFunc.appendCall(SavedSearchStoreListSavedSearchesByOrgIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ListSavedSearchesByOrgID method of the parent MockSavedSearchStore
// instance is invoked and the hook queue is empty.
func (f *SavedSearchStoreListSavedSearchesByOrgIDFunc) SetDefaultHook(hook func(context.Context, int32) ([]*types.SavedSearch, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListSavedSearchesByOrgID method of the parent MockSavedSearchStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *SavedSearchStoreListSavedSearchesByOrgIDFunc) PushHook(hook func(context.Context, int32) ([]*types.SavedSearch, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SavedSearchStoreListSavedSearchesByOrgIDFunc) SetDefaultReturn(r0 []*types.SavedSearch, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) ([]*types.SavedSearch, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SavedSearchStoreListSavedSearchesByOrgIDFunc) PushReturn(r0 []*types.SavedSearch, r1 error) {
	f.PushHook(func(context.Context, int32) ([]*types.SavedSearch, error) {
		return r0, r1
	})
}

func (f *SavedSearchStoreListSavedSearchesByOrgIDFunc) nextHook() func(context.Context, int32) ([]*types.SavedSearch, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SavedSearchStoreListSavedSearchesByOrgIDFunc) appendCall(r0 SavedSearchStoreListSavedSearchesByOrgIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SavedSearchStoreListSavedSearchesByOrgIDFuncCall objects describing the
// invocations of this function.
func (f *SavedSearchStoreListSavedSearchesByOrgIDFunc) History() []SavedSearchStoreListSavedSearchesByOrgIDFuncCall {
	f.mutex.Lock()
	history := make([]SavedSearchStoreListSavedSearchesByOrgIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SavedSearchStoreListSavedSearchesByOrgIDFuncCall is an object that
// describes an invocation of method ListSavedSearchesByOrgID on an instance
// of MockSavedSearchStore.
type SavedSearchStoreListSavedSearchesByOrgIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.SavedSearch
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SavedSearchStoreListSavedSearchesByOrgIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SavedSearchStoreListSavedSearchesByOrgIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SavedSearchStoreListSavedSearchesByUserIDFunc describes the behavior when
// the ListSavedSearchesByUserID method of the parent MockSavedSearchStore
// instance is invoked.
type SavedSearchStoreListSavedSearchesByUserIDFunc struct {
	defaultHook func(context.Context, int32) ([]*types.SavedSearch, error)
	hooks       []func(context.Context, int32) ([]*types.SavedSearch, error)
	history     []SavedSearchStoreListSavedSearchesByUserIDFuncCall
	mutex       sync.Mutex
}

// ListSavedSearchesByUserID delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockSavedSearchStore) ListSavedSearchesByUserID(v0 context.Context, v1 int32) ([]*types.SavedSearch, error) {
	r0, r1 := m.ListSavedSearchesByUserIDFunc.nextHook()(v0, v1)
	m.ListSavedSearchesByUserIDFunc.appendCall(SavedSearchStoreListSavedSearchesByUserIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ListSavedSearchesByUserID method of the parent MockSavedSearchStore
// instance is invoked and the hook queue is empty.
func (f *SavedSearchStoreListSavedSearchesByUserIDFunc) SetDefaultHook(hook func(context.Context, int32) ([]*types.SavedSearch, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListSavedSearchesByUserID method of the parent MockSavedSearchStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *SavedSearchStoreListSavedSearchesByUserIDFunc) PushHook(hook func(context.Context, int32) ([]*types.SavedSearch, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SavedSearchStoreListSavedSearchesByUserIDFunc) SetDefaultReturn(r0 []*types.SavedSearch, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) ([]*types.SavedSearch, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SavedSearchStoreListSavedSearchesByUserIDFunc) PushReturn(r0 []*types.SavedSearch, r1 error) {
	f.PushHook(func(context.Context, int32) ([]*types.SavedSearch, error) {
		return r0, r1
	})
}

func (f *SavedSearchStoreListSavedSearchesByUserIDFunc) nextHook() func(context.Context, int32) ([]*types.SavedSearch, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SavedSearchStoreListSavedSearchesByUserIDFunc) appendCall(r0 SavedSearchStoreListSavedSearchesByUserIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SavedSearchStoreListSavedSearchesByUserIDFuncCall objects describing the
// invocations of this function.
func (f *SavedSearchStoreListSavedSearchesByUserIDFunc) History() []SavedSearchStoreListSavedSearchesByUserIDFuncCall {
	f.mutex.Lock()
	history := make([]SavedSearchStoreListSavedSearchesByUserIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SavedSearchStoreListSavedSearchesByUserIDFuncCall is an object that
// describes an invocation of method ListSavedSearchesByUserID on an
// instance of MockSavedSearchStore.
type SavedSearchStoreListSavedSearchesByUserIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.SavedSearch
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SavedSearchStoreListSavedSearchesByUserIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SavedSearchStoreListSavedSearchesByUserIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SavedSearchStoreTransactFunc describes the behavior when the Transact
// method of the parent MockSavedSearchStore instance is invoked.
type SavedSearchStoreTransactFunc struct {
	defaultHook func(context.Context) (database.SavedSearchStore, error)
	hooks       []func(context.Context) (database.SavedSearchStore, error)
	history     []SavedSearchStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSavedSearchStore) Transact(v0 context.Context) (database.SavedSearchStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(SavedSearchStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockSavedSearchStore instance is invoked and the hook queue is
// empty.
func (f *SavedSearchStoreTransactFunc) SetDefaultHook(hook func(context.Context) (database.SavedSearchStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockSavedSearchStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SavedSearchStoreTransactFunc) PushHook(hook func(context.Context) (database.SavedSearchStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SavedSearchStoreTransactFunc) SetDefaultReturn(r0 database.SavedSearchStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (database.SavedSearchStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SavedSearchStoreTransactFunc) PushReturn(r0 database.SavedSearchStore, r1 error) {
	f.PushHook(func(context.Context) (database.SavedSearchStore, error) {
		return r0, r1
	})
}

func (f *SavedSearchStoreTransactFunc) nextHook() func(context.Context) (database.SavedSearchStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SavedSearchStoreTransactFunc) appendCall(r0 SavedSearchStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SavedSearchStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *SavedSearchStoreTransactFunc) History() []SavedSearchStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]SavedSearchStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SavedSearchStoreTransactFuncCall is an object that describes an
// invocation of method Transact on an instance of MockSavedSearchStore.
type SavedSearchStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.SavedSearchStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SavedSearchStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SavedSearchStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SavedSearchStoreUpdateFunc describes the behavior when the Update method
// of the parent MockSavedSearchStore instance is invoked.
type SavedSearchStoreUpdateFunc struct {
	defaultHook func(context.Context, *types.SavedSearch) (*types.SavedSearch, error)
	hooks       []func(context.Context, *types.SavedSearch) (*types.SavedSearch, error)
	history     []SavedSearchStoreUpdateFuncCall
	mutex       sync.Mutex
}

// Update delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSavedSearchStore) Update(v0 context.Context, v1 *types.SavedSearch) (*types.SavedSearch, error) {
	r0, r1 := m.UpdateFunc.nextHook()(v0, v1)
	m.UpdateFunc.appendCall(SavedSearchStoreUpdateFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Update method of the
// parent MockSavedSearchStore instance is invoked and the hook queue is
// empty.
func (f *SavedSearchStoreUpdateFunc) SetDefaultHook(hook func(context.Context, *types.SavedSearch) (*types.SavedSearch, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Update method of the parent MockSavedSearchStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SavedSearchStoreUpdateFunc) PushHook(hook func(context.Context, *types.SavedSearch) (*types.SavedSearch, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SavedSearchStoreUpdateFunc) SetDefaultReturn(r0 *types.SavedSearch, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.SavedSearch) (*types.SavedSearch, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SavedSearchStoreUpdateFunc) PushReturn(r0 *types.SavedSearch, r1 error) {
	f.PushHook(func(context.Context, *types.SavedSearch) (*types.SavedSearch, error) {
		return r0, r1
	})
}

func (f *SavedSearchStoreUpdateFunc) nextHook() func(context.Context, *types.SavedSearch) (*types.SavedSearch, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SavedSearchStoreUpdateFunc) appendCall(r0 SavedSearchStoreUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SavedSearchStoreUpdateFuncCall objects
// describing the invocations of this function.
func (f *SavedSearchStoreUpdateFunc) History() []SavedSearchStoreUpdateFuncCall {
	f.mutex.Lock()
	history := make([]SavedSearchStoreUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SavedSearchStoreUpdateFuncCall is an object that describes an invocation
// of method Update on an instance of MockSavedSearchStore.
type SavedSearchStoreUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.SavedSearch
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.SavedSearch
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SavedSearchStoreUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SavedSearchStoreUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SavedSearchStoreWithFunc describes the behavior when the With method of
// the parent MockSavedSearchStore instance is invoked.
type SavedSearchStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) database.SavedSearchStore
	hooks       []func(basestore.ShareableStore) database.SavedSearchStore
	history     []SavedSearchStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSavedSearchStore) With(v0 basestore.ShareableStore) database.SavedSearchStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(SavedSearchStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockSavedSearchStore instance is invoked and the hook queue is
// empty.
func (f *SavedSearchStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) database.SavedSearchStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockSavedSearchStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SavedSearchStoreWithFunc) PushHook(hook func(basestore.ShareableStore) database.SavedSearchStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SavedSearchStoreWithFunc) SetDefaultReturn(r0 database.SavedSearchStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) database.SavedSearchStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SavedSearchStoreWithFunc) PushReturn(r0 database.SavedSearchStore) {
	f.PushHook(func(basestore.ShareableStore) database.SavedSearchStore {
		return r0
	})
}

func (f *SavedSearchStoreWithFunc) nextHook() func(basestore.ShareableStore) database.SavedSearchStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SavedSearchStoreWithFunc) appendCall(r0 SavedSearchStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SavedSearchStoreWithFuncCall objects
// describing the invocations of this function.
func (f *SavedSearchStoreWithFunc) History() []SavedSearchStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]SavedSearchStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SavedSearchStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockSavedSearchStore.
type SavedSearchStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.SavedSearchStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SavedSearchStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SavedSearchStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
