// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package dbmock

import (
	"context"
	"sync"
	"time"

	database "github.com/sourcegraph/sourcegraph/internal/database"
	basestore "github.com/sourcegraph/sourcegraph/internal/database/basestore"
	types "github.com/sourcegraph/sourcegraph/internal/types"
)

// MockWebhookLogStore is a mock implementation of the WebhookLogStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockWebhookLogStore struct {
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *WebhookLogStoreCountFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *WebhookLogStoreCreateFunc
	// DeleteStaleFunc is an instance of a mock function object controlling
	// the behavior of the method DeleteStale.
	DeleteStaleFunc *WebhookLogStoreDeleteStaleFunc
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *WebhookLogStoreGetByIDFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *WebhookLogStoreHandleFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *WebhookLogStoreListFunc
}

// NewMockWebhookLogStore creates a new mock of the WebhookLogStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockWebhookLogStore() *MockWebhookLogStore {
	return &MockWebhookLogStore{
		CountFunc: &WebhookLogStoreCountFunc{
			defaultHook: func(context.Context, database.WebhookLogListOpts) (int64, error) {
				return 0, nil
			},
		},
		CreateFunc: &WebhookLogStoreCreateFunc{
			defaultHook: func(context.Context, *types.WebhookLog) error {
				return nil
			},
		},
		DeleteStaleFunc: &WebhookLogStoreDeleteStaleFunc{
			defaultHook: func(context.Context, time.Duration) error {
				return nil
			},
		},
		GetByIDFunc: &WebhookLogStoreGetByIDFunc{
			defaultHook: func(context.Context, int64) (*types.WebhookLog, error) {
				return nil, nil
			},
		},
		HandleFunc: &WebhookLogStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				return nil
			},
		},
		ListFunc: &WebhookLogStoreListFunc{
			defaultHook: func(context.Context, database.WebhookLogListOpts) ([]*types.WebhookLog, int64, error) {
				return nil, 0, nil
			},
		},
	}
}

// NewStrictMockWebhookLogStore creates a new mock of the WebhookLogStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockWebhookLogStore() *MockWebhookLogStore {
	return &MockWebhookLogStore{
		CountFunc: &WebhookLogStoreCountFunc{
			defaultHook: func(context.Context, database.WebhookLogListOpts) (int64, error) {
				panic("unexpected invocation of MockWebhookLogStore.Count")
			},
		},
		CreateFunc: &WebhookLogStoreCreateFunc{
			defaultHook: func(context.Context, *types.WebhookLog) error {
				panic("unexpected invocation of MockWebhookLogStore.Create")
			},
		},
		DeleteStaleFunc: &WebhookLogStoreDeleteStaleFunc{
			defaultHook: func(context.Context, time.Duration) error {
				panic("unexpected invocation of MockWebhookLogStore.DeleteStale")
			},
		},
		GetByIDFunc: &WebhookLogStoreGetByIDFunc{
			defaultHook: func(context.Context, int64) (*types.WebhookLog, error) {
				panic("unexpected invocation of MockWebhookLogStore.GetByID")
			},
		},
		HandleFunc: &WebhookLogStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				panic("unexpected invocation of MockWebhookLogStore.Handle")
			},
		},
		ListFunc: &WebhookLogStoreListFunc{
			defaultHook: func(context.Context, database.WebhookLogListOpts) ([]*types.WebhookLog, int64, error) {
				panic("unexpected invocation of MockWebhookLogStore.List")
			},
		},
	}
}

// NewMockWebhookLogStoreFrom creates a new mock of the MockWebhookLogStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockWebhookLogStoreFrom(i database.WebhookLogStore) *MockWebhookLogStore {
	return &MockWebhookLogStore{
		CountFunc: &WebhookLogStoreCountFunc{
			defaultHook: i.Count,
		},
		CreateFunc: &WebhookLogStoreCreateFunc{
			defaultHook: i.Create,
		},
		DeleteStaleFunc: &WebhookLogStoreDeleteStaleFunc{
			defaultHook: i.DeleteStale,
		},
		GetByIDFunc: &WebhookLogStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		HandleFunc: &WebhookLogStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListFunc: &WebhookLogStoreListFunc{
			defaultHook: i.List,
		},
	}
}

// WebhookLogStoreCountFunc describes the behavior when the Count method of
// the parent MockWebhookLogStore instance is invoked.
type WebhookLogStoreCountFunc struct {
	defaultHook func(context.Context, database.WebhookLogListOpts) (int64, error)
	hooks       []func(context.Context, database.WebhookLogListOpts) (int64, error)
	history     []WebhookLogStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWebhookLogStore) Count(v0 context.Context, v1 database.WebhookLogListOpts) (int64, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(WebhookLogStoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockWebhookLogStore instance is invoked and the hook queue is
// empty.
func (f *WebhookLogStoreCountFunc) SetDefaultHook(hook func(context.Context, database.WebhookLogListOpts) (int64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockWebhookLogStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *WebhookLogStoreCountFunc) PushHook(hook func(context.Context, database.WebhookLogListOpts) (int64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *WebhookLogStoreCountFunc) SetDefaultReturn(r0 int64, r1 error) {
	f.SetDefaultHook(func(context.Context, database.WebhookLogListOpts) (int64, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *WebhookLogStoreCountFunc) PushReturn(r0 int64, r1 error) {
	f.PushHook(func(context.Context, database.WebhookLogListOpts) (int64, error) {
		return r0, r1
	})
}

func (f *WebhookLogStoreCountFunc) nextHook() func(context.Context, database.WebhookLogListOpts) (int64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WebhookLogStoreCountFunc) appendCall(r0 WebhookLogStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WebhookLogStoreCountFuncCall objects
// describing the invocations of this function.
func (f *WebhookLogStoreCountFunc) History() []WebhookLogStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]WebhookLogStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WebhookLogStoreCountFuncCall is an object that describes an invocation of
// method Count on an instance of MockWebhookLogStore.
type WebhookLogStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.WebhookLogListOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WebhookLogStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WebhookLogStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// WebhookLogStoreCreateFunc describes the behavior when the Create method
// of the parent MockWebhookLogStore instance is invoked.
type WebhookLogStoreCreateFunc struct {
	defaultHook func(context.Context, *types.WebhookLog) error
	hooks       []func(context.Context, *types.WebhookLog) error
	history     []WebhookLogStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWebhookLogStore) Create(v0 context.Context, v1 *types.WebhookLog) error {
	r0 := m.CreateFunc.nextHook()(v0, v1)
	m.CreateFunc.appendCall(WebhookLogStoreCreateFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockWebhookLogStore instance is invoked and the hook queue is
// empty.
func (f *WebhookLogStoreCreateFunc) SetDefaultHook(hook func(context.Context, *types.WebhookLog) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockWebhookLogStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *WebhookLogStoreCreateFunc) PushHook(hook func(context.Context, *types.WebhookLog) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *WebhookLogStoreCreateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *types.WebhookLog) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *WebhookLogStoreCreateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *types.WebhookLog) error {
		return r0
	})
}

func (f *WebhookLogStoreCreateFunc) nextHook() func(context.Context, *types.WebhookLog) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WebhookLogStoreCreateFunc) appendCall(r0 WebhookLogStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WebhookLogStoreCreateFuncCall objects
// describing the invocations of this function.
func (f *WebhookLogStoreCreateFunc) History() []WebhookLogStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]WebhookLogStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WebhookLogStoreCreateFuncCall is an object that describes an invocation
// of method Create on an instance of MockWebhookLogStore.
type WebhookLogStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.WebhookLog
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WebhookLogStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WebhookLogStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// WebhookLogStoreDeleteStaleFunc describes the behavior when the
// DeleteStale method of the parent MockWebhookLogStore instance is invoked.
type WebhookLogStoreDeleteStaleFunc struct {
	defaultHook func(context.Context, time.Duration) error
	hooks       []func(context.Context, time.Duration) error
	history     []WebhookLogStoreDeleteStaleFuncCall
	mutex       sync.Mutex
}

// DeleteStale delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockWebhookLogStore) DeleteStale(v0 context.Context, v1 time.Duration) error {
	r0 := m.DeleteStaleFunc.nextHook()(v0, v1)
	m.DeleteStaleFunc.appendCall(WebhookLogStoreDeleteStaleFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteStale method
// of the parent MockWebhookLogStore instance is invoked and the hook queue
// is empty.
func (f *WebhookLogStoreDeleteStaleFunc) SetDefaultHook(hook func(context.Context, time.Duration) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteStale method of the parent MockWebhookLogStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *WebhookLogStoreDeleteStaleFunc) PushHook(hook func(context.Context, time.Duration) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *WebhookLogStoreDeleteStaleFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, time.Duration) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *WebhookLogStoreDeleteStaleFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, time.Duration) error {
		return r0
	})
}

func (f *WebhookLogStoreDeleteStaleFunc) nextHook() func(context.Context, time.Duration) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WebhookLogStoreDeleteStaleFunc) appendCall(r0 WebhookLogStoreDeleteStaleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WebhookLogStoreDeleteStaleFuncCall objects
// describing the invocations of this function.
func (f *WebhookLogStoreDeleteStaleFunc) History() []WebhookLogStoreDeleteStaleFuncCall {
	f.mutex.Lock()
	history := make([]WebhookLogStoreDeleteStaleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WebhookLogStoreDeleteStaleFuncCall is an object that describes an
// invocation of method DeleteStale on an instance of MockWebhookLogStore.
type WebhookLogStoreDeleteStaleFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Duration
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WebhookLogStoreDeleteStaleFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WebhookLogStoreDeleteStaleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// WebhookLogStoreGetByIDFunc describes the behavior when the GetByID method
// of the parent MockWebhookLogStore instance is invoked.
type WebhookLogStoreGetByIDFunc struct {
	defaultHook func(context.Context, int64) (*types.WebhookLog, error)
	hooks       []func(context.Context, int64) (*types.WebhookLog, error)
	history     []WebhookLogStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWebhookLogStore) GetByID(v0 context.Context, v1 int64) (*types.WebhookLog, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(WebhookLogStoreGetByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockWebhookLogStore instance is invoked and the hook queue is
// empty.
func (f *WebhookLogStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int64) (*types.WebhookLog, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockWebhookLogStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *WebhookLogStoreGetByIDFunc) PushHook(hook func(context.Context, int64) (*types.WebhookLog, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *WebhookLogStoreGetByIDFunc) SetDefaultReturn(r0 *types.WebhookLog, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (*types.WebhookLog, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *WebhookLogStoreGetByIDFunc) PushReturn(r0 *types.WebhookLog, r1 error) {
	f.PushHook(func(context.Context, int64) (*types.WebhookLog, error) {
		return r0, r1
	})
}

func (f *WebhookLogStoreGetByIDFunc) nextHook() func(context.Context, int64) (*types.WebhookLog, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WebhookLogStoreGetByIDFunc) appendCall(r0 WebhookLogStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WebhookLogStoreGetByIDFuncCall objects
// describing the invocations of this function.
func (f *WebhookLogStoreGetByIDFunc) History() []WebhookLogStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]WebhookLogStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WebhookLogStoreGetByIDFuncCall is an object that describes an invocation
// of method GetByID on an instance of MockWebhookLogStore.
type WebhookLogStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.WebhookLog
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WebhookLogStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WebhookLogStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// WebhookLogStoreHandleFunc describes the behavior when the Handle method
// of the parent MockWebhookLogStore instance is invoked.
type WebhookLogStoreHandleFunc struct {
	defaultHook func() *basestore.TransactableHandle
	hooks       []func() *basestore.TransactableHandle
	history     []WebhookLogStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWebhookLogStore) Handle() *basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(WebhookLogStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockWebhookLogStore instance is invoked and the hook queue is
// empty.
func (f *WebhookLogStoreHandleFunc) SetDefaultHook(hook func() *basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockWebhookLogStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *WebhookLogStoreHandleFunc) PushHook(hook func() *basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *WebhookLogStoreHandleFunc) SetDefaultReturn(r0 *basestore.TransactableHandle) {
	f.SetDefaultHook(func() *basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *WebhookLogStoreHandleFunc) PushReturn(r0 *basestore.TransactableHandle) {
	f.PushHook(func() *basestore.TransactableHandle {
		return r0
	})
}

func (f *WebhookLogStoreHandleFunc) nextHook() func() *basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WebhookLogStoreHandleFunc) appendCall(r0 WebhookLogStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WebhookLogStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *WebhookLogStoreHandleFunc) History() []WebhookLogStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]WebhookLogStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WebhookLogStoreHandleFuncCall is an object that describes an invocation
// of method Handle on an instance of MockWebhookLogStore.
type WebhookLogStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WebhookLogStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WebhookLogStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// WebhookLogStoreListFunc describes the behavior when the List method of
// the parent MockWebhookLogStore instance is invoked.
type WebhookLogStoreListFunc struct {
	defaultHook func(context.Context, database.WebhookLogListOpts) ([]*types.WebhookLog, int64, error)
	hooks       []func(context.Context, database.WebhookLogListOpts) ([]*types.WebhookLog, int64, error)
	history     []WebhookLogStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWebhookLogStore) List(v0 context.Context, v1 database.WebhookLogListOpts) ([]*types.WebhookLog, int64, error) {
	r0, r1, r2 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(WebhookLogStoreListFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockWebhookLogStore instance is invoked and the hook queue is
// empty.
func (f *WebhookLogStoreListFunc) SetDefaultHook(hook func(context.Context, database.WebhookLogListOpts) ([]*types.WebhookLog, int64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockWebhookLogStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *WebhookLogStoreListFunc) PushHook(hook func(context.Context, database.WebhookLogListOpts) ([]*types.WebhookLog, int64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *WebhookLogStoreListFunc) SetDefaultReturn(r0 []*types.WebhookLog, r1 int64, r2 error) {
	f.SetDefaultHook(func(context.Context, database.WebhookLogListOpts) ([]*types.WebhookLog, int64, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *WebhookLogStoreListFunc) PushReturn(r0 []*types.WebhookLog, r1 int64, r2 error) {
	f.PushHook(func(context.Context, database.WebhookLogListOpts) ([]*types.WebhookLog, int64, error) {
		return r0, r1, r2
	})
}

func (f *WebhookLogStoreListFunc) nextHook() func(context.Context, database.WebhookLogListOpts) ([]*types.WebhookLog, int64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WebhookLogStoreListFunc) appendCall(r0 WebhookLogStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WebhookLogStoreListFuncCall objects
// describing the invocations of this function.
func (f *WebhookLogStoreListFunc) History() []WebhookLogStoreListFuncCall {
	f.mutex.Lock()
	history := make([]WebhookLogStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WebhookLogStoreListFuncCall is an object that describes an invocation of
// method List on an instance of MockWebhookLogStore.
type WebhookLogStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.WebhookLogListOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.WebhookLog
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int64
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WebhookLogStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WebhookLogStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}
