// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package dbmock

import (
	"context"
	"sync"

	database "github.com/sourcegraph/sourcegraph/internal/database"
	basestore "github.com/sourcegraph/sourcegraph/internal/database/basestore"
)

// MockAccessTokenStore is a mock implementation of the AccessTokenStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockAccessTokenStore struct {
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *AccessTokenStoreCountFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *AccessTokenStoreCreateFunc
	// CreateInternalFunc is an instance of a mock function object
	// controlling the behavior of the method CreateInternal.
	CreateInternalFunc *AccessTokenStoreCreateInternalFunc
	// DeleteByIDFunc is an instance of a mock function object controlling
	// the behavior of the method DeleteByID.
	DeleteByIDFunc *AccessTokenStoreDeleteByIDFunc
	// DeleteByTokenFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteByToken.
	DeleteByTokenFunc *AccessTokenStoreDeleteByTokenFunc
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *AccessTokenStoreGetByIDFunc
	// GetByTokenFunc is an instance of a mock function object controlling
	// the behavior of the method GetByToken.
	GetByTokenFunc *AccessTokenStoreGetByTokenFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *AccessTokenStoreHandleFunc
	// HardDeleteByIDFunc is an instance of a mock function object
	// controlling the behavior of the method HardDeleteByID.
	HardDeleteByIDFunc *AccessTokenStoreHardDeleteByIDFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *AccessTokenStoreListFunc
	// LookupFunc is an instance of a mock function object controlling the
	// behavior of the method Lookup.
	LookupFunc *AccessTokenStoreLookupFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *AccessTokenStoreTransactFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *AccessTokenStoreWithFunc
}

// NewMockAccessTokenStore creates a new mock of the AccessTokenStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockAccessTokenStore() *MockAccessTokenStore {
	return &MockAccessTokenStore{
		CountFunc: &AccessTokenStoreCountFunc{
			defaultHook: func(context.Context, database.AccessTokensListOptions) (int, error) {
				return 0, nil
			},
		},
		CreateFunc: &AccessTokenStoreCreateFunc{
			defaultHook: func(context.Context, int32, []string, string, int32) (int64, string, error) {
				return 0, "", nil
			},
		},
		CreateInternalFunc: &AccessTokenStoreCreateInternalFunc{
			defaultHook: func(context.Context, int32, []string, string, int32) (int64, string, error) {
				return 0, "", nil
			},
		},
		DeleteByIDFunc: &AccessTokenStoreDeleteByIDFunc{
			defaultHook: func(context.Context, int64) error {
				return nil
			},
		},
		DeleteByTokenFunc: &AccessTokenStoreDeleteByTokenFunc{
			defaultHook: func(context.Context, string) error {
				return nil
			},
		},
		GetByIDFunc: &AccessTokenStoreGetByIDFunc{
			defaultHook: func(context.Context, int64) (*database.AccessToken, error) {
				return nil, nil
			},
		},
		GetByTokenFunc: &AccessTokenStoreGetByTokenFunc{
			defaultHook: func(context.Context, string) (*database.AccessToken, error) {
				return nil, nil
			},
		},
		HandleFunc: &AccessTokenStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				return nil
			},
		},
		HardDeleteByIDFunc: &AccessTokenStoreHardDeleteByIDFunc{
			defaultHook: func(context.Context, int64) error {
				return nil
			},
		},
		ListFunc: &AccessTokenStoreListFunc{
			defaultHook: func(context.Context, database.AccessTokensListOptions) ([]*database.AccessToken, error) {
				return nil, nil
			},
		},
		LookupFunc: &AccessTokenStoreLookupFunc{
			defaultHook: func(context.Context, string, string) (int32, error) {
				return 0, nil
			},
		},
		TransactFunc: &AccessTokenStoreTransactFunc{
			defaultHook: func(context.Context) (database.AccessTokenStore, error) {
				return nil, nil
			},
		},
		WithFunc: &AccessTokenStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) database.AccessTokenStore {
				return nil
			},
		},
	}
}

// NewStrictMockAccessTokenStore creates a new mock of the AccessTokenStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockAccessTokenStore() *MockAccessTokenStore {
	return &MockAccessTokenStore{
		CountFunc: &AccessTokenStoreCountFunc{
			defaultHook: func(context.Context, database.AccessTokensListOptions) (int, error) {
				panic("unexpected invocation of MockAccessTokenStore.Count")
			},
		},
		CreateFunc: &AccessTokenStoreCreateFunc{
			defaultHook: func(context.Context, int32, []string, string, int32) (int64, string, error) {
				panic("unexpected invocation of MockAccessTokenStore.Create")
			},
		},
		CreateInternalFunc: &AccessTokenStoreCreateInternalFunc{
			defaultHook: func(context.Context, int32, []string, string, int32) (int64, string, error) {
				panic("unexpected invocation of MockAccessTokenStore.CreateInternal")
			},
		},
		DeleteByIDFunc: &AccessTokenStoreDeleteByIDFunc{
			defaultHook: func(context.Context, int64) error {
				panic("unexpected invocation of MockAccessTokenStore.DeleteByID")
			},
		},
		DeleteByTokenFunc: &AccessTokenStoreDeleteByTokenFunc{
			defaultHook: func(context.Context, string) error {
				panic("unexpected invocation of MockAccessTokenStore.DeleteByToken")
			},
		},
		GetByIDFunc: &AccessTokenStoreGetByIDFunc{
			defaultHook: func(context.Context, int64) (*database.AccessToken, error) {
				panic("unexpected invocation of MockAccessTokenStore.GetByID")
			},
		},
		GetByTokenFunc: &AccessTokenStoreGetByTokenFunc{
			defaultHook: func(context.Context, string) (*database.AccessToken, error) {
				panic("unexpected invocation of MockAccessTokenStore.GetByToken")
			},
		},
		HandleFunc: &AccessTokenStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				panic("unexpected invocation of MockAccessTokenStore.Handle")
			},
		},
		HardDeleteByIDFunc: &AccessTokenStoreHardDeleteByIDFunc{
			defaultHook: func(context.Context, int64) error {
				panic("unexpected invocation of MockAccessTokenStore.HardDeleteByID")
			},
		},
		ListFunc: &AccessTokenStoreListFunc{
			defaultHook: func(context.Context, database.AccessTokensListOptions) ([]*database.AccessToken, error) {
				panic("unexpected invocation of MockAccessTokenStore.List")
			},
		},
		LookupFunc: &AccessTokenStoreLookupFunc{
			defaultHook: func(context.Context, string, string) (int32, error) {
				panic("unexpected invocation of MockAccessTokenStore.Lookup")
			},
		},
		TransactFunc: &AccessTokenStoreTransactFunc{
			defaultHook: func(context.Context) (database.AccessTokenStore, error) {
				panic("unexpected invocation of MockAccessTokenStore.Transact")
			},
		},
		WithFunc: &AccessTokenStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) database.AccessTokenStore {
				panic("unexpected invocation of MockAccessTokenStore.With")
			},
		},
	}
}

// NewMockAccessTokenStoreFrom creates a new mock of the
// MockAccessTokenStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockAccessTokenStoreFrom(i database.AccessTokenStore) *MockAccessTokenStore {
	return &MockAccessTokenStore{
		CountFunc: &AccessTokenStoreCountFunc{
			defaultHook: i.Count,
		},
		CreateFunc: &AccessTokenStoreCreateFunc{
			defaultHook: i.Create,
		},
		CreateInternalFunc: &AccessTokenStoreCreateInternalFunc{
			defaultHook: i.CreateInternal,
		},
		DeleteByIDFunc: &AccessTokenStoreDeleteByIDFunc{
			defaultHook: i.DeleteByID,
		},
		DeleteByTokenFunc: &AccessTokenStoreDeleteByTokenFunc{
			defaultHook: i.DeleteByToken,
		},
		GetByIDFunc: &AccessTokenStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		GetByTokenFunc: &AccessTokenStoreGetByTokenFunc{
			defaultHook: i.GetByToken,
		},
		HandleFunc: &AccessTokenStoreHandleFunc{
			defaultHook: i.Handle,
		},
		HardDeleteByIDFunc: &AccessTokenStoreHardDeleteByIDFunc{
			defaultHook: i.HardDeleteByID,
		},
		ListFunc: &AccessTokenStoreListFunc{
			defaultHook: i.List,
		},
		LookupFunc: &AccessTokenStoreLookupFunc{
			defaultHook: i.Lookup,
		},
		TransactFunc: &AccessTokenStoreTransactFunc{
			defaultHook: i.Transact,
		},
		WithFunc: &AccessTokenStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// AccessTokenStoreCountFunc describes the behavior when the Count method of
// the parent MockAccessTokenStore instance is invoked.
type AccessTokenStoreCountFunc struct {
	defaultHook func(context.Context, database.AccessTokensListOptions) (int, error)
	hooks       []func(context.Context, database.AccessTokensListOptions) (int, error)
	history     []AccessTokenStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccessTokenStore) Count(v0 context.Context, v1 database.AccessTokensListOptions) (int, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(AccessTokenStoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockAccessTokenStore instance is invoked and the hook queue is
// empty.
func (f *AccessTokenStoreCountFunc) SetDefaultHook(hook func(context.Context, database.AccessTokensListOptions) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockAccessTokenStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *AccessTokenStoreCountFunc) PushHook(hook func(context.Context, database.AccessTokensListOptions) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *AccessTokenStoreCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, database.AccessTokensListOptions) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *AccessTokenStoreCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, database.AccessTokensListOptions) (int, error) {
		return r0, r1
	})
}

func (f *AccessTokenStoreCountFunc) nextHook() func(context.Context, database.AccessTokensListOptions) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreCountFunc) appendCall(r0 AccessTokenStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreCountFuncCall objects
// describing the invocations of this function.
func (f *AccessTokenStoreCountFunc) History() []AccessTokenStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreCountFuncCall is an object that describes an invocation
// of method Count on an instance of MockAccessTokenStore.
type AccessTokenStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.AccessTokensListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AccessTokenStoreCreateFunc describes the behavior when the Create method
// of the parent MockAccessTokenStore instance is invoked.
type AccessTokenStoreCreateFunc struct {
	defaultHook func(context.Context, int32, []string, string, int32) (int64, string, error)
	hooks       []func(context.Context, int32, []string, string, int32) (int64, string, error)
	history     []AccessTokenStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccessTokenStore) Create(v0 context.Context, v1 int32, v2 []string, v3 string, v4 int32) (int64, string, error) {
	r0, r1, r2 := m.CreateFunc.nextHook()(v0, v1, v2, v3, v4)
	m.CreateFunc.appendCall(AccessTokenStoreCreateFuncCall{v0, v1, v2, v3, v4, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockAccessTokenStore instance is invoked and the hook queue is
// empty.
func (f *AccessTokenStoreCreateFunc) SetDefaultHook(hook func(context.Context, int32, []string, string, int32) (int64, string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockAccessTokenStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AccessTokenStoreCreateFunc) PushHook(hook func(context.Context, int32, []string, string, int32) (int64, string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *AccessTokenStoreCreateFunc) SetDefaultReturn(r0 int64, r1 string, r2 error) {
	f.SetDefaultHook(func(context.Context, int32, []string, string, int32) (int64, string, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *AccessTokenStoreCreateFunc) PushReturn(r0 int64, r1 string, r2 error) {
	f.PushHook(func(context.Context, int32, []string, string, int32) (int64, string, error) {
		return r0, r1, r2
	})
}

func (f *AccessTokenStoreCreateFunc) nextHook() func(context.Context, int32, []string, string, int32) (int64, string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreCreateFunc) appendCall(r0 AccessTokenStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreCreateFuncCall objects
// describing the invocations of this function.
func (f *AccessTokenStoreCreateFunc) History() []AccessTokenStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreCreateFuncCall is an object that describes an invocation
// of method Create on an instance of MockAccessTokenStore.
type AccessTokenStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 string
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// AccessTokenStoreCreateInternalFunc describes the behavior when the
// CreateInternal method of the parent MockAccessTokenStore instance is
// invoked.
type AccessTokenStoreCreateInternalFunc struct {
	defaultHook func(context.Context, int32, []string, string, int32) (int64, string, error)
	hooks       []func(context.Context, int32, []string, string, int32) (int64, string, error)
	history     []AccessTokenStoreCreateInternalFuncCall
	mutex       sync.Mutex
}

// CreateInternal delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockAccessTokenStore) CreateInternal(v0 context.Context, v1 int32, v2 []string, v3 string, v4 int32) (int64, string, error) {
	r0, r1, r2 := m.CreateInternalFunc.nextHook()(v0, v1, v2, v3, v4)
	m.CreateInternalFunc.appendCall(AccessTokenStoreCreateInternalFuncCall{v0, v1, v2, v3, v4, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the CreateInternal
// method of the parent MockAccessTokenStore instance is invoked and the
// hook queue is empty.
func (f *AccessTokenStoreCreateInternalFunc) SetDefaultHook(hook func(context.Context, int32, []string, string, int32) (int64, string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateInternal method of the parent MockAccessTokenStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *AccessTokenStoreCreateInternalFunc) PushHook(hook func(context.Context, int32, []string, string, int32) (int64, string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *AccessTokenStoreCreateInternalFunc) SetDefaultReturn(r0 int64, r1 string, r2 error) {
	f.SetDefaultHook(func(context.Context, int32, []string, string, int32) (int64, string, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *AccessTokenStoreCreateInternalFunc) PushReturn(r0 int64, r1 string, r2 error) {
	f.PushHook(func(context.Context, int32, []string, string, int32) (int64, string, error) {
		return r0, r1, r2
	})
}

func (f *AccessTokenStoreCreateInternalFunc) nextHook() func(context.Context, int32, []string, string, int32) (int64, string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreCreateInternalFunc) appendCall(r0 AccessTokenStoreCreateInternalFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreCreateInternalFuncCall
// objects describing the invocations of this function.
func (f *AccessTokenStoreCreateInternalFunc) History() []AccessTokenStoreCreateInternalFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreCreateInternalFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreCreateInternalFuncCall is an object that describes an
// invocation of method CreateInternal on an instance of
// MockAccessTokenStore.
type AccessTokenStoreCreateInternalFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 string
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreCreateInternalFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreCreateInternalFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// AccessTokenStoreDeleteByIDFunc describes the behavior when the DeleteByID
// method of the parent MockAccessTokenStore instance is invoked.
type AccessTokenStoreDeleteByIDFunc struct {
	defaultHook func(context.Context, int64) error
	hooks       []func(context.Context, int64) error
	history     []AccessTokenStoreDeleteByIDFuncCall
	mutex       sync.Mutex
}

// DeleteByID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAccessTokenStore) DeleteByID(v0 context.Context, v1 int64) error {
	r0 := m.DeleteByIDFunc.nextHook()(v0, v1)
	m.DeleteByIDFunc.appendCall(AccessTokenStoreDeleteByIDFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteByID method of
// the parent MockAccessTokenStore instance is invoked and the hook queue is
// empty.
func (f *AccessTokenStoreDeleteByIDFunc) SetDefaultHook(hook func(context.Context, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteByID method of the parent MockAccessTokenStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AccessTokenStoreDeleteByIDFunc) PushHook(hook func(context.Context, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *AccessTokenStoreDeleteByIDFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *AccessTokenStoreDeleteByIDFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64) error {
		return r0
	})
}

func (f *AccessTokenStoreDeleteByIDFunc) nextHook() func(context.Context, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreDeleteByIDFunc) appendCall(r0 AccessTokenStoreDeleteByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreDeleteByIDFuncCall objects
// describing the invocations of this function.
func (f *AccessTokenStoreDeleteByIDFunc) History() []AccessTokenStoreDeleteByIDFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreDeleteByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreDeleteByIDFuncCall is an object that describes an
// invocation of method DeleteByID on an instance of MockAccessTokenStore.
type AccessTokenStoreDeleteByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreDeleteByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreDeleteByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AccessTokenStoreDeleteByTokenFunc describes the behavior when the
// DeleteByToken method of the parent MockAccessTokenStore instance is
// invoked.
type AccessTokenStoreDeleteByTokenFunc struct {
	defaultHook func(context.Context, string) error
	hooks       []func(context.Context, string) error
	history     []AccessTokenStoreDeleteByTokenFuncCall
	mutex       sync.Mutex
}

// DeleteByToken delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAccessTokenStore) DeleteByToken(v0 context.Context, v1 string) error {
	r0 := m.DeleteByTokenFunc.nextHook()(v0, v1)
	m.DeleteByTokenFunc.appendCall(AccessTokenStoreDeleteByTokenFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteByToken method
// of the parent MockAccessTokenStore instance is invoked and the hook queue
// is empty.
func (f *AccessTokenStoreDeleteByTokenFunc) SetDefaultHook(hook func(context.Context, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteByToken method of the parent MockAccessTokenStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *AccessTokenStoreDeleteByTokenFunc) PushHook(hook func(context.Context, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *AccessTokenStoreDeleteByTokenFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *AccessTokenStoreDeleteByTokenFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string) error {
		return r0
	})
}

func (f *AccessTokenStoreDeleteByTokenFunc) nextHook() func(context.Context, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreDeleteByTokenFunc) appendCall(r0 AccessTokenStoreDeleteByTokenFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreDeleteByTokenFuncCall
// objects describing the invocations of this function.
func (f *AccessTokenStoreDeleteByTokenFunc) History() []AccessTokenStoreDeleteByTokenFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreDeleteByTokenFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreDeleteByTokenFuncCall is an object that describes an
// invocation of method DeleteByToken on an instance of
// MockAccessTokenStore.
type AccessTokenStoreDeleteByTokenFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreDeleteByTokenFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreDeleteByTokenFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AccessTokenStoreGetByIDFunc describes the behavior when the GetByID
// method of the parent MockAccessTokenStore instance is invoked.
type AccessTokenStoreGetByIDFunc struct {
	defaultHook func(context.Context, int64) (*database.AccessToken, error)
	hooks       []func(context.Context, int64) (*database.AccessToken, error)
	history     []AccessTokenStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccessTokenStore) GetByID(v0 context.Context, v1 int64) (*database.AccessToken, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(AccessTokenStoreGetByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockAccessTokenStore instance is invoked and the hook queue is
// empty.
func (f *AccessTokenStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int64) (*database.AccessToken, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockAccessTokenStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AccessTokenStoreGetByIDFunc) PushHook(hook func(context.Context, int64) (*database.AccessToken, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *AccessTokenStoreGetByIDFunc) SetDefaultReturn(r0 *database.AccessToken, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (*database.AccessToken, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *AccessTokenStoreGetByIDFunc) PushReturn(r0 *database.AccessToken, r1 error) {
	f.PushHook(func(context.Context, int64) (*database.AccessToken, error) {
		return r0, r1
	})
}

func (f *AccessTokenStoreGetByIDFunc) nextHook() func(context.Context, int64) (*database.AccessToken, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreGetByIDFunc) appendCall(r0 AccessTokenStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreGetByIDFuncCall objects
// describing the invocations of this function.
func (f *AccessTokenStoreGetByIDFunc) History() []AccessTokenStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreGetByIDFuncCall is an object that describes an invocation
// of method GetByID on an instance of MockAccessTokenStore.
type AccessTokenStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *database.AccessToken
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AccessTokenStoreGetByTokenFunc describes the behavior when the GetByToken
// method of the parent MockAccessTokenStore instance is invoked.
type AccessTokenStoreGetByTokenFunc struct {
	defaultHook func(context.Context, string) (*database.AccessToken, error)
	hooks       []func(context.Context, string) (*database.AccessToken, error)
	history     []AccessTokenStoreGetByTokenFuncCall
	mutex       sync.Mutex
}

// GetByToken delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAccessTokenStore) GetByToken(v0 context.Context, v1 string) (*database.AccessToken, error) {
	r0, r1 := m.GetByTokenFunc.nextHook()(v0, v1)
	m.GetByTokenFunc.appendCall(AccessTokenStoreGetByTokenFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByToken method of
// the parent MockAccessTokenStore instance is invoked and the hook queue is
// empty.
func (f *AccessTokenStoreGetByTokenFunc) SetDefaultHook(hook func(context.Context, string) (*database.AccessToken, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByToken method of the parent MockAccessTokenStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AccessTokenStoreGetByTokenFunc) PushHook(hook func(context.Context, string) (*database.AccessToken, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *AccessTokenStoreGetByTokenFunc) SetDefaultReturn(r0 *database.AccessToken, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*database.AccessToken, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *AccessTokenStoreGetByTokenFunc) PushReturn(r0 *database.AccessToken, r1 error) {
	f.PushHook(func(context.Context, string) (*database.AccessToken, error) {
		return r0, r1
	})
}

func (f *AccessTokenStoreGetByTokenFunc) nextHook() func(context.Context, string) (*database.AccessToken, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreGetByTokenFunc) appendCall(r0 AccessTokenStoreGetByTokenFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreGetByTokenFuncCall objects
// describing the invocations of this function.
func (f *AccessTokenStoreGetByTokenFunc) History() []AccessTokenStoreGetByTokenFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreGetByTokenFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreGetByTokenFuncCall is an object that describes an
// invocation of method GetByToken on an instance of MockAccessTokenStore.
type AccessTokenStoreGetByTokenFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *database.AccessToken
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreGetByTokenFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreGetByTokenFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AccessTokenStoreHandleFunc describes the behavior when the Handle method
// of the parent MockAccessTokenStore instance is invoked.
type AccessTokenStoreHandleFunc struct {
	defaultHook func() *basestore.TransactableHandle
	hooks       []func() *basestore.TransactableHandle
	history     []AccessTokenStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccessTokenStore) Handle() *basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(AccessTokenStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockAccessTokenStore instance is invoked and the hook queue is
// empty.
func (f *AccessTokenStoreHandleFunc) SetDefaultHook(hook func() *basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockAccessTokenStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AccessTokenStoreHandleFunc) PushHook(hook func() *basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *AccessTokenStoreHandleFunc) SetDefaultReturn(r0 *basestore.TransactableHandle) {
	f.SetDefaultHook(func() *basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *AccessTokenStoreHandleFunc) PushReturn(r0 *basestore.TransactableHandle) {
	f.PushHook(func() *basestore.TransactableHandle {
		return r0
	})
}

func (f *AccessTokenStoreHandleFunc) nextHook() func() *basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreHandleFunc) appendCall(r0 AccessTokenStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *AccessTokenStoreHandleFunc) History() []AccessTokenStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreHandleFuncCall is an object that describes an invocation
// of method Handle on an instance of MockAccessTokenStore.
type AccessTokenStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AccessTokenStoreHardDeleteByIDFunc describes the behavior when the
// HardDeleteByID method of the parent MockAccessTokenStore instance is
// invoked.
type AccessTokenStoreHardDeleteByIDFunc struct {
	defaultHook func(context.Context, int64) error
	hooks       []func(context.Context, int64) error
	history     []AccessTokenStoreHardDeleteByIDFuncCall
	mutex       sync.Mutex
}

// HardDeleteByID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockAccessTokenStore) HardDeleteByID(v0 context.Context, v1 int64) error {
	r0 := m.HardDeleteByIDFunc.nextHook()(v0, v1)
	m.HardDeleteByIDFunc.appendCall(AccessTokenStoreHardDeleteByIDFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the HardDeleteByID
// method of the parent MockAccessTokenStore instance is invoked and the
// hook queue is empty.
func (f *AccessTokenStoreHardDeleteByIDFunc) SetDefaultHook(hook func(context.Context, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// HardDeleteByID method of the parent MockAccessTokenStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *AccessTokenStoreHardDeleteByIDFunc) PushHook(hook func(context.Context, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *AccessTokenStoreHardDeleteByIDFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *AccessTokenStoreHardDeleteByIDFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64) error {
		return r0
	})
}

func (f *AccessTokenStoreHardDeleteByIDFunc) nextHook() func(context.Context, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreHardDeleteByIDFunc) appendCall(r0 AccessTokenStoreHardDeleteByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreHardDeleteByIDFuncCall
// objects describing the invocations of this function.
func (f *AccessTokenStoreHardDeleteByIDFunc) History() []AccessTokenStoreHardDeleteByIDFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreHardDeleteByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreHardDeleteByIDFuncCall is an object that describes an
// invocation of method HardDeleteByID on an instance of
// MockAccessTokenStore.
type AccessTokenStoreHardDeleteByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreHardDeleteByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreHardDeleteByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AccessTokenStoreListFunc describes the behavior when the List method of
// the parent MockAccessTokenStore instance is invoked.
type AccessTokenStoreListFunc struct {
	defaultHook func(context.Context, database.AccessTokensListOptions) ([]*database.AccessToken, error)
	hooks       []func(context.Context, database.AccessTokensListOptions) ([]*database.AccessToken, error)
	history     []AccessTokenStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccessTokenStore) List(v0 context.Context, v1 database.AccessTokensListOptions) ([]*database.AccessToken, error) {
	r0, r1 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(AccessTokenStoreListFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockAccessTokenStore instance is invoked and the hook queue is
// empty.
func (f *AccessTokenStoreListFunc) SetDefaultHook(hook func(context.Context, database.AccessTokensListOptions) ([]*database.AccessToken, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockAccessTokenStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *AccessTokenStoreListFunc) PushHook(hook func(context.Context, database.AccessTokensListOptions) ([]*database.AccessToken, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *AccessTokenStoreListFunc) SetDefaultReturn(r0 []*database.AccessToken, r1 error) {
	f.SetDefaultHook(func(context.Context, database.AccessTokensListOptions) ([]*database.AccessToken, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *AccessTokenStoreListFunc) PushReturn(r0 []*database.AccessToken, r1 error) {
	f.PushHook(func(context.Context, database.AccessTokensListOptions) ([]*database.AccessToken, error) {
		return r0, r1
	})
}

func (f *AccessTokenStoreListFunc) nextHook() func(context.Context, database.AccessTokensListOptions) ([]*database.AccessToken, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreListFunc) appendCall(r0 AccessTokenStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreListFuncCall objects
// describing the invocations of this function.
func (f *AccessTokenStoreListFunc) History() []AccessTokenStoreListFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreListFuncCall is an object that describes an invocation of
// method List on an instance of MockAccessTokenStore.
type AccessTokenStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.AccessTokensListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*database.AccessToken
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AccessTokenStoreLookupFunc describes the behavior when the Lookup method
// of the parent MockAccessTokenStore instance is invoked.
type AccessTokenStoreLookupFunc struct {
	defaultHook func(context.Context, string, string) (int32, error)
	hooks       []func(context.Context, string, string) (int32, error)
	history     []AccessTokenStoreLookupFuncCall
	mutex       sync.Mutex
}

// Lookup delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccessTokenStore) Lookup(v0 context.Context, v1 string, v2 string) (int32, error) {
	r0, r1 := m.LookupFunc.nextHook()(v0, v1, v2)
	m.LookupFunc.appendCall(AccessTokenStoreLookupFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Lookup method of the
// parent MockAccessTokenStore instance is invoked and the hook queue is
// empty.
func (f *AccessTokenStoreLookupFunc) SetDefaultHook(hook func(context.Context, string, string) (int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Lookup method of the parent MockAccessTokenStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AccessTokenStoreLookupFunc) PushHook(hook func(context.Context, string, string) (int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *AccessTokenStoreLookupFunc) SetDefaultReturn(r0 int32, r1 error) {
	f.SetDefaultHook(func(context.Context, string, string) (int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *AccessTokenStoreLookupFunc) PushReturn(r0 int32, r1 error) {
	f.PushHook(func(context.Context, string, string) (int32, error) {
		return r0, r1
	})
}

func (f *AccessTokenStoreLookupFunc) nextHook() func(context.Context, string, string) (int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreLookupFunc) appendCall(r0 AccessTokenStoreLookupFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreLookupFuncCall objects
// describing the invocations of this function.
func (f *AccessTokenStoreLookupFunc) History() []AccessTokenStoreLookupFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreLookupFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreLookupFuncCall is an object that describes an invocation
// of method Lookup on an instance of MockAccessTokenStore.
type AccessTokenStoreLookupFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreLookupFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreLookupFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AccessTokenStoreTransactFunc describes the behavior when the Transact
// method of the parent MockAccessTokenStore instance is invoked.
type AccessTokenStoreTransactFunc struct {
	defaultHook func(context.Context) (database.AccessTokenStore, error)
	hooks       []func(context.Context) (database.AccessTokenStore, error)
	history     []AccessTokenStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccessTokenStore) Transact(v0 context.Context) (database.AccessTokenStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(AccessTokenStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockAccessTokenStore instance is invoked and the hook queue is
// empty.
func (f *AccessTokenStoreTransactFunc) SetDefaultHook(hook func(context.Context) (database.AccessTokenStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockAccessTokenStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AccessTokenStoreTransactFunc) PushHook(hook func(context.Context) (database.AccessTokenStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *AccessTokenStoreTransactFunc) SetDefaultReturn(r0 database.AccessTokenStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (database.AccessTokenStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *AccessTokenStoreTransactFunc) PushReturn(r0 database.AccessTokenStore, r1 error) {
	f.PushHook(func(context.Context) (database.AccessTokenStore, error) {
		return r0, r1
	})
}

func (f *AccessTokenStoreTransactFunc) nextHook() func(context.Context) (database.AccessTokenStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreTransactFunc) appendCall(r0 AccessTokenStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *AccessTokenStoreTransactFunc) History() []AccessTokenStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreTransactFuncCall is an object that describes an
// invocation of method Transact on an instance of MockAccessTokenStore.
type AccessTokenStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.AccessTokenStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AccessTokenStoreWithFunc describes the behavior when the With method of
// the parent MockAccessTokenStore instance is invoked.
type AccessTokenStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) database.AccessTokenStore
	hooks       []func(basestore.ShareableStore) database.AccessTokenStore
	history     []AccessTokenStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccessTokenStore) With(v0 basestore.ShareableStore) database.AccessTokenStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(AccessTokenStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockAccessTokenStore instance is invoked and the hook queue is
// empty.
func (f *AccessTokenStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) database.AccessTokenStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockAccessTokenStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *AccessTokenStoreWithFunc) PushHook(hook func(basestore.ShareableStore) database.AccessTokenStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *AccessTokenStoreWithFunc) SetDefaultReturn(r0 database.AccessTokenStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) database.AccessTokenStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *AccessTokenStoreWithFunc) PushReturn(r0 database.AccessTokenStore) {
	f.PushHook(func(basestore.ShareableStore) database.AccessTokenStore {
		return r0
	})
}

func (f *AccessTokenStoreWithFunc) nextHook() func(basestore.ShareableStore) database.AccessTokenStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreWithFunc) appendCall(r0 AccessTokenStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreWithFuncCall objects
// describing the invocations of this function.
func (f *AccessTokenStoreWithFunc) History() []AccessTokenStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockAccessTokenStore.
type AccessTokenStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.AccessTokenStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
