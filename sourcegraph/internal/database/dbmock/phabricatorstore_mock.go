// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package dbmock

import (
	"context"
	"sync"

	api "github.com/sourcegraph/sourcegraph/internal/api"
	database "github.com/sourcegraph/sourcegraph/internal/database"
	basestore "github.com/sourcegraph/sourcegraph/internal/database/basestore"
	types "github.com/sourcegraph/sourcegraph/internal/types"
)

// MockPhabricatorStore is a mock implementation of the PhabricatorStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockPhabricatorStore struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *PhabricatorStoreCreateFunc
	// CreateIfNotExistsFunc is an instance of a mock function object
	// controlling the behavior of the method CreateIfNotExists.
	CreateIfNotExistsFunc *PhabricatorStoreCreateIfNotExistsFunc
	// CreateOrUpdateFunc is an instance of a mock function object
	// controlling the behavior of the method CreateOrUpdate.
	CreateOrUpdateFunc *PhabricatorStoreCreateOrUpdateFunc
	// GetByNameFunc is an instance of a mock function object controlling
	// the behavior of the method GetByName.
	GetByNameFunc *PhabricatorStoreGetByNameFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *PhabricatorStoreHandleFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *PhabricatorStoreTransactFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *PhabricatorStoreWithFunc
}

// NewMockPhabricatorStore creates a new mock of the PhabricatorStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockPhabricatorStore() *MockPhabricatorStore {
	return &MockPhabricatorStore{
		CreateFunc: &PhabricatorStoreCreateFunc{
			defaultHook: func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
				return nil, nil
			},
		},
		CreateIfNotExistsFunc: &PhabricatorStoreCreateIfNotExistsFunc{
			defaultHook: func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
				return nil, nil
			},
		},
		CreateOrUpdateFunc: &PhabricatorStoreCreateOrUpdateFunc{
			defaultHook: func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
				return nil, nil
			},
		},
		GetByNameFunc: &PhabricatorStoreGetByNameFunc{
			defaultHook: func(context.Context, api.RepoName) (*types.PhabricatorRepo, error) {
				return nil, nil
			},
		},
		HandleFunc: &PhabricatorStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				return nil
			},
		},
		TransactFunc: &PhabricatorStoreTransactFunc{
			defaultHook: func(context.Context) (database.PhabricatorStore, error) {
				return nil, nil
			},
		},
		WithFunc: &PhabricatorStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) database.PhabricatorStore {
				return nil
			},
		},
	}
}

// NewStrictMockPhabricatorStore creates a new mock of the PhabricatorStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockPhabricatorStore() *MockPhabricatorStore {
	return &MockPhabricatorStore{
		CreateFunc: &PhabricatorStoreCreateFunc{
			defaultHook: func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
				panic("unexpected invocation of MockPhabricatorStore.Create")
			},
		},
		CreateIfNotExistsFunc: &PhabricatorStoreCreateIfNotExistsFunc{
			defaultHook: func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
				panic("unexpected invocation of MockPhabricatorStore.CreateIfNotExists")
			},
		},
		CreateOrUpdateFunc: &PhabricatorStoreCreateOrUpdateFunc{
			defaultHook: func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
				panic("unexpected invocation of MockPhabricatorStore.CreateOrUpdate")
			},
		},
		GetByNameFunc: &PhabricatorStoreGetByNameFunc{
			defaultHook: func(context.Context, api.RepoName) (*types.PhabricatorRepo, error) {
				panic("unexpected invocation of MockPhabricatorStore.GetByName")
			},
		},
		HandleFunc: &PhabricatorStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				panic("unexpected invocation of MockPhabricatorStore.Handle")
			},
		},
		TransactFunc: &PhabricatorStoreTransactFunc{
			defaultHook: func(context.Context) (database.PhabricatorStore, error) {
				panic("unexpected invocation of MockPhabricatorStore.Transact")
			},
		},
		WithFunc: &PhabricatorStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) database.PhabricatorStore {
				panic("unexpected invocation of MockPhabricatorStore.With")
			},
		},
	}
}

// NewMockPhabricatorStoreFrom creates a new mock of the
// MockPhabricatorStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockPhabricatorStoreFrom(i database.PhabricatorStore) *MockPhabricatorStore {
	return &MockPhabricatorStore{
		CreateFunc: &PhabricatorStoreCreateFunc{
			defaultHook: i.Create,
		},
		CreateIfNotExistsFunc: &PhabricatorStoreCreateIfNotExistsFunc{
			defaultHook: i.CreateIfNotExists,
		},
		CreateOrUpdateFunc: &PhabricatorStoreCreateOrUpdateFunc{
			defaultHook: i.CreateOrUpdate,
		},
		GetByNameFunc: &PhabricatorStoreGetByNameFunc{
			defaultHook: i.GetByName,
		},
		HandleFunc: &PhabricatorStoreHandleFunc{
			defaultHook: i.Handle,
		},
		TransactFunc: &PhabricatorStoreTransactFunc{
			defaultHook: i.Transact,
		},
		WithFunc: &PhabricatorStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// PhabricatorStoreCreateFunc describes the behavior when the Create method
// of the parent MockPhabricatorStore instance is invoked.
type PhabricatorStoreCreateFunc struct {
	defaultHook func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error)
	hooks       []func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error)
	history     []PhabricatorStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPhabricatorStore) Create(v0 context.Context, v1 string, v2 api.RepoName, v3 string) (*types.PhabricatorRepo, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1, v2, v3)
	m.CreateFunc.appendCall(PhabricatorStoreCreateFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockPhabricatorStore instance is invoked and the hook queue is
// empty.
func (f *PhabricatorStoreCreateFunc) SetDefaultHook(hook func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockPhabricatorStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *PhabricatorStoreCreateFunc) PushHook(hook func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *PhabricatorStoreCreateFunc) SetDefaultReturn(r0 *types.PhabricatorRepo, r1 error) {
	f.SetDefaultHook(func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *PhabricatorStoreCreateFunc) PushReturn(r0 *types.PhabricatorRepo, r1 error) {
	f.PushHook(func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
		return r0, r1
	})
}

func (f *PhabricatorStoreCreateFunc) nextHook() func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PhabricatorStoreCreateFunc) appendCall(r0 PhabricatorStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PhabricatorStoreCreateFuncCall objects
// describing the invocations of this function.
func (f *PhabricatorStoreCreateFunc) History() []PhabricatorStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]PhabricatorStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PhabricatorStoreCreateFuncCall is an object that describes an invocation
// of method Create on an instance of MockPhabricatorStore.
type PhabricatorStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoName
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.PhabricatorRepo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PhabricatorStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PhabricatorStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PhabricatorStoreCreateIfNotExistsFunc describes the behavior when the
// CreateIfNotExists method of the parent MockPhabricatorStore instance is
// invoked.
type PhabricatorStoreCreateIfNotExistsFunc struct {
	defaultHook func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error)
	hooks       []func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error)
	history     []PhabricatorStoreCreateIfNotExistsFuncCall
	mutex       sync.Mutex
}

// CreateIfNotExists delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockPhabricatorStore) CreateIfNotExists(v0 context.Context, v1 string, v2 api.RepoName, v3 string) (*types.PhabricatorRepo, error) {
	r0, r1 := m.CreateIfNotExistsFunc.nextHook()(v0, v1, v2, v3)
	m.CreateIfNotExistsFunc.appendCall(PhabricatorStoreCreateIfNotExistsFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateIfNotExists
// method of the parent MockPhabricatorStore instance is invoked and the
// hook queue is empty.
func (f *PhabricatorStoreCreateIfNotExistsFunc) SetDefaultHook(hook func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateIfNotExists method of the parent MockPhabricatorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *PhabricatorStoreCreateIfNotExistsFunc) PushHook(hook func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *PhabricatorStoreCreateIfNotExistsFunc) SetDefaultReturn(r0 *types.PhabricatorRepo, r1 error) {
	f.SetDefaultHook(func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *PhabricatorStoreCreateIfNotExistsFunc) PushReturn(r0 *types.PhabricatorRepo, r1 error) {
	f.PushHook(func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
		return r0, r1
	})
}

func (f *PhabricatorStoreCreateIfNotExistsFunc) nextHook() func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PhabricatorStoreCreateIfNotExistsFunc) appendCall(r0 PhabricatorStoreCreateIfNotExistsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PhabricatorStoreCreateIfNotExistsFuncCall
// objects describing the invocations of this function.
func (f *PhabricatorStoreCreateIfNotExistsFunc) History() []PhabricatorStoreCreateIfNotExistsFuncCall {
	f.mutex.Lock()
	history := make([]PhabricatorStoreCreateIfNotExistsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PhabricatorStoreCreateIfNotExistsFuncCall is an object that describes an
// invocation of method CreateIfNotExists on an instance of
// MockPhabricatorStore.
type PhabricatorStoreCreateIfNotExistsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoName
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.PhabricatorRepo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PhabricatorStoreCreateIfNotExistsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PhabricatorStoreCreateIfNotExistsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PhabricatorStoreCreateOrUpdateFunc describes the behavior when the
// CreateOrUpdate method of the parent MockPhabricatorStore instance is
// invoked.
type PhabricatorStoreCreateOrUpdateFunc struct {
	defaultHook func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error)
	hooks       []func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error)
	history     []PhabricatorStoreCreateOrUpdateFuncCall
	mutex       sync.Mutex
}

// CreateOrUpdate delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockPhabricatorStore) CreateOrUpdate(v0 context.Context, v1 string, v2 api.RepoName, v3 string) (*types.PhabricatorRepo, error) {
	r0, r1 := m.CreateOrUpdateFunc.nextHook()(v0, v1, v2, v3)
	m.CreateOrUpdateFunc.appendCall(PhabricatorStoreCreateOrUpdateFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateOrUpdate
// method of the parent MockPhabricatorStore instance is invoked and the
// hook queue is empty.
func (f *PhabricatorStoreCreateOrUpdateFunc) SetDefaultHook(hook func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateOrUpdate method of the parent MockPhabricatorStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *PhabricatorStoreCreateOrUpdateFunc) PushHook(hook func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *PhabricatorStoreCreateOrUpdateFunc) SetDefaultReturn(r0 *types.PhabricatorRepo, r1 error) {
	f.SetDefaultHook(func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *PhabricatorStoreCreateOrUpdateFunc) PushReturn(r0 *types.PhabricatorRepo, r1 error) {
	f.PushHook(func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
		return r0, r1
	})
}

func (f *PhabricatorStoreCreateOrUpdateFunc) nextHook() func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PhabricatorStoreCreateOrUpdateFunc) appendCall(r0 PhabricatorStoreCreateOrUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PhabricatorStoreCreateOrUpdateFuncCall
// objects describing the invocations of this function.
func (f *PhabricatorStoreCreateOrUpdateFunc) History() []PhabricatorStoreCreateOrUpdateFuncCall {
	f.mutex.Lock()
	history := make([]PhabricatorStoreCreateOrUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PhabricatorStoreCreateOrUpdateFuncCall is an object that describes an
// invocation of method CreateOrUpdate on an instance of
// MockPhabricatorStore.
type PhabricatorStoreCreateOrUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoName
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.PhabricatorRepo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PhabricatorStoreCreateOrUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PhabricatorStoreCreateOrUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PhabricatorStoreGetByNameFunc describes the behavior when the GetByName
// method of the parent MockPhabricatorStore instance is invoked.
type PhabricatorStoreGetByNameFunc struct {
	defaultHook func(context.Context, api.RepoName) (*types.PhabricatorRepo, error)
	hooks       []func(context.Context, api.RepoName) (*types.PhabricatorRepo, error)
	history     []PhabricatorStoreGetByNameFuncCall
	mutex       sync.Mutex
}

// GetByName delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPhabricatorStore) GetByName(v0 context.Context, v1 api.RepoName) (*types.PhabricatorRepo, error) {
	r0, r1 := m.GetByNameFunc.nextHook()(v0, v1)
	m.GetByNameFunc.appendCall(PhabricatorStoreGetByNameFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByName method of
// the parent MockPhabricatorStore instance is invoked and the hook queue is
// empty.
func (f *PhabricatorStoreGetByNameFunc) SetDefaultHook(hook func(context.Context, api.RepoName) (*types.PhabricatorRepo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByName method of the parent MockPhabricatorStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *PhabricatorStoreGetByNameFunc) PushHook(hook func(context.Context, api.RepoName) (*types.PhabricatorRepo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *PhabricatorStoreGetByNameFunc) SetDefaultReturn(r0 *types.PhabricatorRepo, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) (*types.PhabricatorRepo, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *PhabricatorStoreGetByNameFunc) PushReturn(r0 *types.PhabricatorRepo, r1 error) {
	f.PushHook(func(context.Context, api.RepoName) (*types.PhabricatorRepo, error) {
		return r0, r1
	})
}

func (f *PhabricatorStoreGetByNameFunc) nextHook() func(context.Context, api.RepoName) (*types.PhabricatorRepo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PhabricatorStoreGetByNameFunc) appendCall(r0 PhabricatorStoreGetByNameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PhabricatorStoreGetByNameFuncCall objects
// describing the invocations of this function.
func (f *PhabricatorStoreGetByNameFunc) History() []PhabricatorStoreGetByNameFuncCall {
	f.mutex.Lock()
	history := make([]PhabricatorStoreGetByNameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PhabricatorStoreGetByNameFuncCall is an object that describes an
// invocation of method GetByName on an instance of MockPhabricatorStore.
type PhabricatorStoreGetByNameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.PhabricatorRepo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PhabricatorStoreGetByNameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PhabricatorStoreGetByNameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PhabricatorStoreHandleFunc describes the behavior when the Handle method
// of the parent MockPhabricatorStore instance is invoked.
type PhabricatorStoreHandleFunc struct {
	defaultHook func() *basestore.TransactableHandle
	hooks       []func() *basestore.TransactableHandle
	history     []PhabricatorStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPhabricatorStore) Handle() *basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(PhabricatorStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockPhabricatorStore instance is invoked and the hook queue is
// empty.
func (f *PhabricatorStoreHandleFunc) SetDefaultHook(hook func() *basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockPhabricatorStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *PhabricatorStoreHandleFunc) PushHook(hook func() *basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *PhabricatorStoreHandleFunc) SetDefaultReturn(r0 *basestore.TransactableHandle) {
	f.SetDefaultHook(func() *basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *PhabricatorStoreHandleFunc) PushReturn(r0 *basestore.TransactableHandle) {
	f.PushHook(func() *basestore.TransactableHandle {
		return r0
	})
}

func (f *PhabricatorStoreHandleFunc) nextHook() func() *basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PhabricatorStoreHandleFunc) appendCall(r0 PhabricatorStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PhabricatorStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *PhabricatorStoreHandleFunc) History() []PhabricatorStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]PhabricatorStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PhabricatorStoreHandleFuncCall is an object that describes an invocation
// of method Handle on an instance of MockPhabricatorStore.
type PhabricatorStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PhabricatorStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PhabricatorStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// PhabricatorStoreTransactFunc describes the behavior when the Transact
// method of the parent MockPhabricatorStore instance is invoked.
type PhabricatorStoreTransactFunc struct {
	defaultHook func(context.Context) (database.PhabricatorStore, error)
	hooks       []func(context.Context) (database.PhabricatorStore, error)
	history     []PhabricatorStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPhabricatorStore) Transact(v0 context.Context) (database.PhabricatorStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(PhabricatorStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockPhabricatorStore instance is invoked and the hook queue is
// empty.
func (f *PhabricatorStoreTransactFunc) SetDefaultHook(hook func(context.Context) (database.PhabricatorStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockPhabricatorStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *PhabricatorStoreTransactFunc) PushHook(hook func(context.Context) (database.PhabricatorStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *PhabricatorStoreTransactFunc) SetDefaultReturn(r0 database.PhabricatorStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (database.PhabricatorStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *PhabricatorStoreTransactFunc) PushReturn(r0 database.PhabricatorStore, r1 error) {
	f.PushHook(func(context.Context) (database.PhabricatorStore, error) {
		return r0, r1
	})
}

func (f *PhabricatorStoreTransactFunc) nextHook() func(context.Context) (database.PhabricatorStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PhabricatorStoreTransactFunc) appendCall(r0 PhabricatorStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PhabricatorStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *PhabricatorStoreTransactFunc) History() []PhabricatorStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]PhabricatorStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PhabricatorStoreTransactFuncCall is an object that describes an
// invocation of method Transact on an instance of MockPhabricatorStore.
type PhabricatorStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.PhabricatorStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PhabricatorStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PhabricatorStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PhabricatorStoreWithFunc describes the behavior when the With method of
// the parent MockPhabricatorStore instance is invoked.
type PhabricatorStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) database.PhabricatorStore
	hooks       []func(basestore.ShareableStore) database.PhabricatorStore
	history     []PhabricatorStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPhabricatorStore) With(v0 basestore.ShareableStore) database.PhabricatorStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(PhabricatorStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockPhabricatorStore instance is invoked and the hook queue is
// empty.
func (f *PhabricatorStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) database.PhabricatorStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockPhabricatorStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *PhabricatorStoreWithFunc) PushHook(hook func(basestore.ShareableStore) database.PhabricatorStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *PhabricatorStoreWithFunc) SetDefaultReturn(r0 database.PhabricatorStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) database.PhabricatorStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *PhabricatorStoreWithFunc) PushReturn(r0 database.PhabricatorStore) {
	f.PushHook(func(basestore.ShareableStore) database.PhabricatorStore {
		return r0
	})
}

func (f *PhabricatorStoreWithFunc) nextHook() func(basestore.ShareableStore) database.PhabricatorStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PhabricatorStoreWithFunc) appendCall(r0 PhabricatorStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PhabricatorStoreWithFuncCall objects
// describing the invocations of this function.
func (f *PhabricatorStoreWithFunc) History() []PhabricatorStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]PhabricatorStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PhabricatorStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockPhabricatorStore.
type PhabricatorStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.PhabricatorStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PhabricatorStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PhabricatorStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
