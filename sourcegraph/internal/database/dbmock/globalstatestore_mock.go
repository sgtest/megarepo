// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package dbmock

import (
	"context"
	"sync"

	database "github.com/sourcegraph/sourcegraph/internal/database"
)

// MockGlobalStateStore is a mock implementation of the GlobalStateStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockGlobalStateStore struct {
	// EnsureInitializedFunc is an instance of a mock function object
	// controlling the behavior of the method EnsureInitialized.
	EnsureInitializedFunc *GlobalStateStoreEnsureInitializedFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *GlobalStateStoreGetFunc
	// SiteInitializedFunc is an instance of a mock function object
	// controlling the behavior of the method SiteInitialized.
	SiteInitializedFunc *GlobalStateStoreSiteInitializedFunc
}

// NewMockGlobalStateStore creates a new mock of the GlobalStateStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockGlobalStateStore() *MockGlobalStateStore {
	return &MockGlobalStateStore{
		EnsureInitializedFunc: &GlobalStateStoreEnsureInitializedFunc{
			defaultHook: func(context.Context) (bool, error) {
				return false, nil
			},
		},
		GetFunc: &GlobalStateStoreGetFunc{
			defaultHook: func(context.Context) (*database.GlobalState, error) {
				return nil, nil
			},
		},
		SiteInitializedFunc: &GlobalStateStoreSiteInitializedFunc{
			defaultHook: func(context.Context) (bool, error) {
				return false, nil
			},
		},
	}
}

// NewMockGlobalStateStoreFrom creates a new mock of the
// MockGlobalStateStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockGlobalStateStoreFrom(i database.GlobalStateStore) *MockGlobalStateStore {
	return &MockGlobalStateStore{
		EnsureInitializedFunc: &GlobalStateStoreEnsureInitializedFunc{
			defaultHook: i.EnsureInitialized,
		},
		GetFunc: &GlobalStateStoreGetFunc{
			defaultHook: i.Get,
		},
		SiteInitializedFunc: &GlobalStateStoreSiteInitializedFunc{
			defaultHook: i.SiteInitialized,
		},
	}
}

// GlobalStateStoreEnsureInitializedFunc describes the behavior when the
// EnsureInitialized method of the parent MockGlobalStateStore instance is
// invoked.
type GlobalStateStoreEnsureInitializedFunc struct {
	defaultHook func(context.Context) (bool, error)
	hooks       []func(context.Context) (bool, error)
	history     []GlobalStateStoreEnsureInitializedFuncCall
	mutex       sync.Mutex
}

// EnsureInitialized delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGlobalStateStore) EnsureInitialized(v0 context.Context) (bool, error) {
	r0, r1 := m.EnsureInitializedFunc.nextHook()(v0)
	m.EnsureInitializedFunc.appendCall(GlobalStateStoreEnsureInitializedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the EnsureInitialized
// method of the parent MockGlobalStateStore instance is invoked and the
// hook queue is empty.
func (f *GlobalStateStoreEnsureInitializedFunc) SetDefaultHook(hook func(context.Context) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EnsureInitialized method of the parent MockGlobalStateStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GlobalStateStoreEnsureInitializedFunc) PushHook(hook func(context.Context) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GlobalStateStoreEnsureInitializedFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GlobalStateStoreEnsureInitializedFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context) (bool, error) {
		return r0, r1
	})
}

func (f *GlobalStateStoreEnsureInitializedFunc) nextHook() func(context.Context) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GlobalStateStoreEnsureInitializedFunc) appendCall(r0 GlobalStateStoreEnsureInitializedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GlobalStateStoreEnsureInitializedFuncCall
// objects describing the invocations of this function.
func (f *GlobalStateStoreEnsureInitializedFunc) History() []GlobalStateStoreEnsureInitializedFuncCall {
	f.mutex.Lock()
	history := make([]GlobalStateStoreEnsureInitializedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GlobalStateStoreEnsureInitializedFuncCall is an object that describes an
// invocation of method EnsureInitialized on an instance of
// MockGlobalStateStore.
type GlobalStateStoreEnsureInitializedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GlobalStateStoreEnsureInitializedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GlobalStateStoreEnsureInitializedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GlobalStateStoreGetFunc describes the behavior when the Get method of the
// parent MockGlobalStateStore instance is invoked.
type GlobalStateStoreGetFunc struct {
	defaultHook func(context.Context) (*database.GlobalState, error)
	hooks       []func(context.Context) (*database.GlobalState, error)
	history     []GlobalStateStoreGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGlobalStateStore) Get(v0 context.Context) (*database.GlobalState, error) {
	r0, r1 := m.GetFunc.nextHook()(v0)
	m.GetFunc.appendCall(GlobalStateStoreGetFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockGlobalStateStore instance is invoked and the hook queue is
// empty.
func (f *GlobalStateStoreGetFunc) SetDefaultHook(hook func(context.Context) (*database.GlobalState, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockGlobalStateStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GlobalStateStoreGetFunc) PushHook(hook func(context.Context) (*database.GlobalState, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GlobalStateStoreGetFunc) SetDefaultReturn(r0 *database.GlobalState, r1 error) {
	f.SetDefaultHook(func(context.Context) (*database.GlobalState, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GlobalStateStoreGetFunc) PushReturn(r0 *database.GlobalState, r1 error) {
	f.PushHook(func(context.Context) (*database.GlobalState, error) {
		return r0, r1
	})
}

func (f *GlobalStateStoreGetFunc) nextHook() func(context.Context) (*database.GlobalState, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GlobalStateStoreGetFunc) appendCall(r0 GlobalStateStoreGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GlobalStateStoreGetFuncCall objects
// describing the invocations of this function.
func (f *GlobalStateStoreGetFunc) History() []GlobalStateStoreGetFuncCall {
	f.mutex.Lock()
	history := make([]GlobalStateStoreGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GlobalStateStoreGetFuncCall is an object that describes an invocation of
// method Get on an instance of MockGlobalStateStore.
type GlobalStateStoreGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *database.GlobalState
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GlobalStateStoreGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GlobalStateStoreGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GlobalStateStoreSiteInitializedFunc describes the behavior when the
// SiteInitialized method of the parent MockGlobalStateStore instance is
// invoked.
type GlobalStateStoreSiteInitializedFunc struct {
	defaultHook func(context.Context) (bool, error)
	hooks       []func(context.Context) (bool, error)
	history     []GlobalStateStoreSiteInitializedFuncCall
	mutex       sync.Mutex
}

// SiteInitialized delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGlobalStateStore) SiteInitialized(v0 context.Context) (bool, error) {
	r0, r1 := m.SiteInitializedFunc.nextHook()(v0)
	m.SiteInitializedFunc.appendCall(GlobalStateStoreSiteInitializedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SiteInitialized
// method of the parent MockGlobalStateStore instance is invoked and the
// hook queue is empty.
func (f *GlobalStateStoreSiteInitializedFunc) SetDefaultHook(hook func(context.Context) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SiteInitialized method of the parent MockGlobalStateStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GlobalStateStoreSiteInitializedFunc) PushHook(hook func(context.Context) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *GlobalStateStoreSiteInitializedFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *GlobalStateStoreSiteInitializedFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context) (bool, error) {
		return r0, r1
	})
}

func (f *GlobalStateStoreSiteInitializedFunc) nextHook() func(context.Context) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GlobalStateStoreSiteInitializedFunc) appendCall(r0 GlobalStateStoreSiteInitializedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GlobalStateStoreSiteInitializedFuncCall
// objects describing the invocations of this function.
func (f *GlobalStateStoreSiteInitializedFunc) History() []GlobalStateStoreSiteInitializedFuncCall {
	f.mutex.Lock()
	history := make([]GlobalStateStoreSiteInitializedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GlobalStateStoreSiteInitializedFuncCall is an object that describes an
// invocation of method SiteInitialized on an instance of
// MockGlobalStateStore.
type GlobalStateStoreSiteInitializedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GlobalStateStoreSiteInitializedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GlobalStateStoreSiteInitializedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
