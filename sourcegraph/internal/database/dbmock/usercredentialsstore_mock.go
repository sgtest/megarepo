// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package dbmock

import (
	"context"
	"sync"

	database "github.com/sourcegraph/sourcegraph/internal/database"
	basestore "github.com/sourcegraph/sourcegraph/internal/database/basestore"
	auth "github.com/sourcegraph/sourcegraph/internal/extsvc/auth"
)

// MockUserCredentialsStore is a mock implementation of the
// UserCredentialsStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockUserCredentialsStore struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *UserCredentialsStoreCreateFunc
	// DeleteFunc is an instance of a mock function object controlling the
	// behavior of the method Delete.
	DeleteFunc *UserCredentialsStoreDeleteFunc
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *UserCredentialsStoreGetByIDFunc
	// GetByScopeFunc is an instance of a mock function object controlling
	// the behavior of the method GetByScope.
	GetByScopeFunc *UserCredentialsStoreGetByScopeFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *UserCredentialsStoreHandleFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *UserCredentialsStoreListFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *UserCredentialsStoreTransactFunc
	// UpdateFunc is an instance of a mock function object controlling the
	// behavior of the method Update.
	UpdateFunc *UserCredentialsStoreUpdateFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *UserCredentialsStoreWithFunc
}

// NewMockUserCredentialsStore creates a new mock of the
// UserCredentialsStore interface. All methods return zero values for all
// results, unless overwritten.
func NewMockUserCredentialsStore() *MockUserCredentialsStore {
	return &MockUserCredentialsStore{
		CreateFunc: &UserCredentialsStoreCreateFunc{
			defaultHook: func(context.Context, database.UserCredentialScope, auth.Authenticator) (*database.UserCredential, error) {
				return nil, nil
			},
		},
		DeleteFunc: &UserCredentialsStoreDeleteFunc{
			defaultHook: func(context.Context, int64) error {
				return nil
			},
		},
		GetByIDFunc: &UserCredentialsStoreGetByIDFunc{
			defaultHook: func(context.Context, int64) (*database.UserCredential, error) {
				return nil, nil
			},
		},
		GetByScopeFunc: &UserCredentialsStoreGetByScopeFunc{
			defaultHook: func(context.Context, database.UserCredentialScope) (*database.UserCredential, error) {
				return nil, nil
			},
		},
		HandleFunc: &UserCredentialsStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				return nil
			},
		},
		ListFunc: &UserCredentialsStoreListFunc{
			defaultHook: func(context.Context, database.UserCredentialsListOpts) ([]*database.UserCredential, int, error) {
				return nil, 0, nil
			},
		},
		TransactFunc: &UserCredentialsStoreTransactFunc{
			defaultHook: func(context.Context) (database.UserCredentialsStore, error) {
				return nil, nil
			},
		},
		UpdateFunc: &UserCredentialsStoreUpdateFunc{
			defaultHook: func(context.Context, *database.UserCredential) error {
				return nil
			},
		},
		WithFunc: &UserCredentialsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) database.UserCredentialsStore {
				return nil
			},
		},
	}
}

// NewStrictMockUserCredentialsStore creates a new mock of the
// UserCredentialsStore interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockUserCredentialsStore() *MockUserCredentialsStore {
	return &MockUserCredentialsStore{
		CreateFunc: &UserCredentialsStoreCreateFunc{
			defaultHook: func(context.Context, database.UserCredentialScope, auth.Authenticator) (*database.UserCredential, error) {
				panic("unexpected invocation of MockUserCredentialsStore.Create")
			},
		},
		DeleteFunc: &UserCredentialsStoreDeleteFunc{
			defaultHook: func(context.Context, int64) error {
				panic("unexpected invocation of MockUserCredentialsStore.Delete")
			},
		},
		GetByIDFunc: &UserCredentialsStoreGetByIDFunc{
			defaultHook: func(context.Context, int64) (*database.UserCredential, error) {
				panic("unexpected invocation of MockUserCredentialsStore.GetByID")
			},
		},
		GetByScopeFunc: &UserCredentialsStoreGetByScopeFunc{
			defaultHook: func(context.Context, database.UserCredentialScope) (*database.UserCredential, error) {
				panic("unexpected invocation of MockUserCredentialsStore.GetByScope")
			},
		},
		HandleFunc: &UserCredentialsStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				panic("unexpected invocation of MockUserCredentialsStore.Handle")
			},
		},
		ListFunc: &UserCredentialsStoreListFunc{
			defaultHook: func(context.Context, database.UserCredentialsListOpts) ([]*database.UserCredential, int, error) {
				panic("unexpected invocation of MockUserCredentialsStore.List")
			},
		},
		TransactFunc: &UserCredentialsStoreTransactFunc{
			defaultHook: func(context.Context) (database.UserCredentialsStore, error) {
				panic("unexpected invocation of MockUserCredentialsStore.Transact")
			},
		},
		UpdateFunc: &UserCredentialsStoreUpdateFunc{
			defaultHook: func(context.Context, *database.UserCredential) error {
				panic("unexpected invocation of MockUserCredentialsStore.Update")
			},
		},
		WithFunc: &UserCredentialsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) database.UserCredentialsStore {
				panic("unexpected invocation of MockUserCredentialsStore.With")
			},
		},
	}
}

// NewMockUserCredentialsStoreFrom creates a new mock of the
// MockUserCredentialsStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockUserCredentialsStoreFrom(i database.UserCredentialsStore) *MockUserCredentialsStore {
	return &MockUserCredentialsStore{
		CreateFunc: &UserCredentialsStoreCreateFunc{
			defaultHook: i.Create,
		},
		DeleteFunc: &UserCredentialsStoreDeleteFunc{
			defaultHook: i.Delete,
		},
		GetByIDFunc: &UserCredentialsStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		GetByScopeFunc: &UserCredentialsStoreGetByScopeFunc{
			defaultHook: i.GetByScope,
		},
		HandleFunc: &UserCredentialsStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListFunc: &UserCredentialsStoreListFunc{
			defaultHook: i.List,
		},
		TransactFunc: &UserCredentialsStoreTransactFunc{
			defaultHook: i.Transact,
		},
		UpdateFunc: &UserCredentialsStoreUpdateFunc{
			defaultHook: i.Update,
		},
		WithFunc: &UserCredentialsStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// UserCredentialsStoreCreateFunc describes the behavior when the Create
// method of the parent MockUserCredentialsStore instance is invoked.
type UserCredentialsStoreCreateFunc struct {
	defaultHook func(context.Context, database.UserCredentialScope, auth.Authenticator) (*database.UserCredential, error)
	hooks       []func(context.Context, database.UserCredentialScope, auth.Authenticator) (*database.UserCredential, error)
	history     []UserCredentialsStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserCredentialsStore) Create(v0 context.Context, v1 database.UserCredentialScope, v2 auth.Authenticator) (*database.UserCredential, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1, v2)
	m.CreateFunc.appendCall(UserCredentialsStoreCreateFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockUserCredentialsStore instance is invoked and the hook queue is
// empty.
func (f *UserCredentialsStoreCreateFunc) SetDefaultHook(hook func(context.Context, database.UserCredentialScope, auth.Authenticator) (*database.UserCredential, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockUserCredentialsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserCredentialsStoreCreateFunc) PushHook(hook func(context.Context, database.UserCredentialScope, auth.Authenticator) (*database.UserCredential, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserCredentialsStoreCreateFunc) SetDefaultReturn(r0 *database.UserCredential, r1 error) {
	f.SetDefaultHook(func(context.Context, database.UserCredentialScope, auth.Authenticator) (*database.UserCredential, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserCredentialsStoreCreateFunc) PushReturn(r0 *database.UserCredential, r1 error) {
	f.PushHook(func(context.Context, database.UserCredentialScope, auth.Authenticator) (*database.UserCredential, error) {
		return r0, r1
	})
}

func (f *UserCredentialsStoreCreateFunc) nextHook() func(context.Context, database.UserCredentialScope, auth.Authenticator) (*database.UserCredential, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserCredentialsStoreCreateFunc) appendCall(r0 UserCredentialsStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserCredentialsStoreCreateFuncCall objects
// describing the invocations of this function.
func (f *UserCredentialsStoreCreateFunc) History() []UserCredentialsStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]UserCredentialsStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserCredentialsStoreCreateFuncCall is an object that describes an
// invocation of method Create on an instance of MockUserCredentialsStore.
type UserCredentialsStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.UserCredentialScope
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 auth.Authenticator
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *database.UserCredential
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserCredentialsStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserCredentialsStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserCredentialsStoreDeleteFunc describes the behavior when the Delete
// method of the parent MockUserCredentialsStore instance is invoked.
type UserCredentialsStoreDeleteFunc struct {
	defaultHook func(context.Context, int64) error
	hooks       []func(context.Context, int64) error
	history     []UserCredentialsStoreDeleteFuncCall
	mutex       sync.Mutex
}

// Delete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserCredentialsStore) Delete(v0 context.Context, v1 int64) error {
	r0 := m.DeleteFunc.nextHook()(v0, v1)
	m.DeleteFunc.appendCall(UserCredentialsStoreDeleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Delete method of the
// parent MockUserCredentialsStore instance is invoked and the hook queue is
// empty.
func (f *UserCredentialsStoreDeleteFunc) SetDefaultHook(hook func(context.Context, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Delete method of the parent MockUserCredentialsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserCredentialsStoreDeleteFunc) PushHook(hook func(context.Context, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserCredentialsStoreDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserCredentialsStoreDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64) error {
		return r0
	})
}

func (f *UserCredentialsStoreDeleteFunc) nextHook() func(context.Context, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserCredentialsStoreDeleteFunc) appendCall(r0 UserCredentialsStoreDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserCredentialsStoreDeleteFuncCall objects
// describing the invocations of this function.
func (f *UserCredentialsStoreDeleteFunc) History() []UserCredentialsStoreDeleteFuncCall {
	f.mutex.Lock()
	history := make([]UserCredentialsStoreDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserCredentialsStoreDeleteFuncCall is an object that describes an
// invocation of method Delete on an instance of MockUserCredentialsStore.
type UserCredentialsStoreDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserCredentialsStoreDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserCredentialsStoreDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserCredentialsStoreGetByIDFunc describes the behavior when the GetByID
// method of the parent MockUserCredentialsStore instance is invoked.
type UserCredentialsStoreGetByIDFunc struct {
	defaultHook func(context.Context, int64) (*database.UserCredential, error)
	hooks       []func(context.Context, int64) (*database.UserCredential, error)
	history     []UserCredentialsStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserCredentialsStore) GetByID(v0 context.Context, v1 int64) (*database.UserCredential, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(UserCredentialsStoreGetByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockUserCredentialsStore instance is invoked and the hook
// queue is empty.
func (f *UserCredentialsStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int64) (*database.UserCredential, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockUserCredentialsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserCredentialsStoreGetByIDFunc) PushHook(hook func(context.Context, int64) (*database.UserCredential, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserCredentialsStoreGetByIDFunc) SetDefaultReturn(r0 *database.UserCredential, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (*database.UserCredential, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserCredentialsStoreGetByIDFunc) PushReturn(r0 *database.UserCredential, r1 error) {
	f.PushHook(func(context.Context, int64) (*database.UserCredential, error) {
		return r0, r1
	})
}

func (f *UserCredentialsStoreGetByIDFunc) nextHook() func(context.Context, int64) (*database.UserCredential, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserCredentialsStoreGetByIDFunc) appendCall(r0 UserCredentialsStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserCredentialsStoreGetByIDFuncCall objects
// describing the invocations of this function.
func (f *UserCredentialsStoreGetByIDFunc) History() []UserCredentialsStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]UserCredentialsStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserCredentialsStoreGetByIDFuncCall is an object that describes an
// invocation of method GetByID on an instance of MockUserCredentialsStore.
type UserCredentialsStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *database.UserCredential
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserCredentialsStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserCredentialsStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserCredentialsStoreGetByScopeFunc describes the behavior when the
// GetByScope method of the parent MockUserCredentialsStore instance is
// invoked.
type UserCredentialsStoreGetByScopeFunc struct {
	defaultHook func(context.Context, database.UserCredentialScope) (*database.UserCredential, error)
	hooks       []func(context.Context, database.UserCredentialScope) (*database.UserCredential, error)
	history     []UserCredentialsStoreGetByScopeFuncCall
	mutex       sync.Mutex
}

// GetByScope delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserCredentialsStore) GetByScope(v0 context.Context, v1 database.UserCredentialScope) (*database.UserCredential, error) {
	r0, r1 := m.GetByScopeFunc.nextHook()(v0, v1)
	m.GetByScopeFunc.appendCall(UserCredentialsStoreGetByScopeFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByScope method of
// the parent MockUserCredentialsStore instance is invoked and the hook
// queue is empty.
func (f *UserCredentialsStoreGetByScopeFunc) SetDefaultHook(hook func(context.Context, database.UserCredentialScope) (*database.UserCredential, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByScope method of the parent MockUserCredentialsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserCredentialsStoreGetByScopeFunc) PushHook(hook func(context.Context, database.UserCredentialScope) (*database.UserCredential, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserCredentialsStoreGetByScopeFunc) SetDefaultReturn(r0 *database.UserCredential, r1 error) {
	f.SetDefaultHook(func(context.Context, database.UserCredentialScope) (*database.UserCredential, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserCredentialsStoreGetByScopeFunc) PushReturn(r0 *database.UserCredential, r1 error) {
	f.PushHook(func(context.Context, database.UserCredentialScope) (*database.UserCredential, error) {
		return r0, r1
	})
}

func (f *UserCredentialsStoreGetByScopeFunc) nextHook() func(context.Context, database.UserCredentialScope) (*database.UserCredential, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserCredentialsStoreGetByScopeFunc) appendCall(r0 UserCredentialsStoreGetByScopeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserCredentialsStoreGetByScopeFuncCall
// objects describing the invocations of this function.
func (f *UserCredentialsStoreGetByScopeFunc) History() []UserCredentialsStoreGetByScopeFuncCall {
	f.mutex.Lock()
	history := make([]UserCredentialsStoreGetByScopeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserCredentialsStoreGetByScopeFuncCall is an object that describes an
// invocation of method GetByScope on an instance of
// MockUserCredentialsStore.
type UserCredentialsStoreGetByScopeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.UserCredentialScope
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *database.UserCredential
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserCredentialsStoreGetByScopeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserCredentialsStoreGetByScopeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserCredentialsStoreHandleFunc describes the behavior when the Handle
// method of the parent MockUserCredentialsStore instance is invoked.
type UserCredentialsStoreHandleFunc struct {
	defaultHook func() *basestore.TransactableHandle
	hooks       []func() *basestore.TransactableHandle
	history     []UserCredentialsStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserCredentialsStore) Handle() *basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(UserCredentialsStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockUserCredentialsStore instance is invoked and the hook queue is
// empty.
func (f *UserCredentialsStoreHandleFunc) SetDefaultHook(hook func() *basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockUserCredentialsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserCredentialsStoreHandleFunc) PushHook(hook func() *basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserCredentialsStoreHandleFunc) SetDefaultReturn(r0 *basestore.TransactableHandle) {
	f.SetDefaultHook(func() *basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserCredentialsStoreHandleFunc) PushReturn(r0 *basestore.TransactableHandle) {
	f.PushHook(func() *basestore.TransactableHandle {
		return r0
	})
}

func (f *UserCredentialsStoreHandleFunc) nextHook() func() *basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserCredentialsStoreHandleFunc) appendCall(r0 UserCredentialsStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserCredentialsStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *UserCredentialsStoreHandleFunc) History() []UserCredentialsStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]UserCredentialsStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserCredentialsStoreHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of MockUserCredentialsStore.
type UserCredentialsStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserCredentialsStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserCredentialsStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserCredentialsStoreListFunc describes the behavior when the List method
// of the parent MockUserCredentialsStore instance is invoked.
type UserCredentialsStoreListFunc struct {
	defaultHook func(context.Context, database.UserCredentialsListOpts) ([]*database.UserCredential, int, error)
	hooks       []func(context.Context, database.UserCredentialsListOpts) ([]*database.UserCredential, int, error)
	history     []UserCredentialsStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserCredentialsStore) List(v0 context.Context, v1 database.UserCredentialsListOpts) ([]*database.UserCredential, int, error) {
	r0, r1, r2 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(UserCredentialsStoreListFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockUserCredentialsStore instance is invoked and the hook queue is
// empty.
func (f *UserCredentialsStoreListFunc) SetDefaultHook(hook func(context.Context, database.UserCredentialsListOpts) ([]*database.UserCredential, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockUserCredentialsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserCredentialsStoreListFunc) PushHook(hook func(context.Context, database.UserCredentialsListOpts) ([]*database.UserCredential, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserCredentialsStoreListFunc) SetDefaultReturn(r0 []*database.UserCredential, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, database.UserCredentialsListOpts) ([]*database.UserCredential, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserCredentialsStoreListFunc) PushReturn(r0 []*database.UserCredential, r1 int, r2 error) {
	f.PushHook(func(context.Context, database.UserCredentialsListOpts) ([]*database.UserCredential, int, error) {
		return r0, r1, r2
	})
}

func (f *UserCredentialsStoreListFunc) nextHook() func(context.Context, database.UserCredentialsListOpts) ([]*database.UserCredential, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserCredentialsStoreListFunc) appendCall(r0 UserCredentialsStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserCredentialsStoreListFuncCall objects
// describing the invocations of this function.
func (f *UserCredentialsStoreListFunc) History() []UserCredentialsStoreListFuncCall {
	f.mutex.Lock()
	history := make([]UserCredentialsStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserCredentialsStoreListFuncCall is an object that describes an
// invocation of method List on an instance of MockUserCredentialsStore.
type UserCredentialsStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.UserCredentialsListOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*database.UserCredential
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserCredentialsStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserCredentialsStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// UserCredentialsStoreTransactFunc describes the behavior when the Transact
// method of the parent MockUserCredentialsStore instance is invoked.
type UserCredentialsStoreTransactFunc struct {
	defaultHook func(context.Context) (database.UserCredentialsStore, error)
	hooks       []func(context.Context) (database.UserCredentialsStore, error)
	history     []UserCredentialsStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserCredentialsStore) Transact(v0 context.Context) (database.UserCredentialsStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(UserCredentialsStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockUserCredentialsStore instance is invoked and the hook
// queue is empty.
func (f *UserCredentialsStoreTransactFunc) SetDefaultHook(hook func(context.Context) (database.UserCredentialsStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockUserCredentialsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserCredentialsStoreTransactFunc) PushHook(hook func(context.Context) (database.UserCredentialsStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserCredentialsStoreTransactFunc) SetDefaultReturn(r0 database.UserCredentialsStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (database.UserCredentialsStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserCredentialsStoreTransactFunc) PushReturn(r0 database.UserCredentialsStore, r1 error) {
	f.PushHook(func(context.Context) (database.UserCredentialsStore, error) {
		return r0, r1
	})
}

func (f *UserCredentialsStoreTransactFunc) nextHook() func(context.Context) (database.UserCredentialsStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserCredentialsStoreTransactFunc) appendCall(r0 UserCredentialsStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserCredentialsStoreTransactFuncCall
// objects describing the invocations of this function.
func (f *UserCredentialsStoreTransactFunc) History() []UserCredentialsStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]UserCredentialsStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserCredentialsStoreTransactFuncCall is an object that describes an
// invocation of method Transact on an instance of MockUserCredentialsStore.
type UserCredentialsStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.UserCredentialsStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserCredentialsStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserCredentialsStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserCredentialsStoreUpdateFunc describes the behavior when the Update
// method of the parent MockUserCredentialsStore instance is invoked.
type UserCredentialsStoreUpdateFunc struct {
	defaultHook func(context.Context, *database.UserCredential) error
	hooks       []func(context.Context, *database.UserCredential) error
	history     []UserCredentialsStoreUpdateFuncCall
	mutex       sync.Mutex
}

// Update delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserCredentialsStore) Update(v0 context.Context, v1 *database.UserCredential) error {
	r0 := m.UpdateFunc.nextHook()(v0, v1)
	m.UpdateFunc.appendCall(UserCredentialsStoreUpdateFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Update method of the
// parent MockUserCredentialsStore instance is invoked and the hook queue is
// empty.
func (f *UserCredentialsStoreUpdateFunc) SetDefaultHook(hook func(context.Context, *database.UserCredential) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Update method of the parent MockUserCredentialsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserCredentialsStoreUpdateFunc) PushHook(hook func(context.Context, *database.UserCredential) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserCredentialsStoreUpdateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *database.UserCredential) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserCredentialsStoreUpdateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *database.UserCredential) error {
		return r0
	})
}

func (f *UserCredentialsStoreUpdateFunc) nextHook() func(context.Context, *database.UserCredential) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserCredentialsStoreUpdateFunc) appendCall(r0 UserCredentialsStoreUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserCredentialsStoreUpdateFuncCall objects
// describing the invocations of this function.
func (f *UserCredentialsStoreUpdateFunc) History() []UserCredentialsStoreUpdateFuncCall {
	f.mutex.Lock()
	history := make([]UserCredentialsStoreUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserCredentialsStoreUpdateFuncCall is an object that describes an
// invocation of method Update on an instance of MockUserCredentialsStore.
type UserCredentialsStoreUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *database.UserCredential
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserCredentialsStoreUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserCredentialsStoreUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserCredentialsStoreWithFunc describes the behavior when the With method
// of the parent MockUserCredentialsStore instance is invoked.
type UserCredentialsStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) database.UserCredentialsStore
	hooks       []func(basestore.ShareableStore) database.UserCredentialsStore
	history     []UserCredentialsStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserCredentialsStore) With(v0 basestore.ShareableStore) database.UserCredentialsStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(UserCredentialsStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockUserCredentialsStore instance is invoked and the hook queue is
// empty.
func (f *UserCredentialsStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) database.UserCredentialsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockUserCredentialsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserCredentialsStoreWithFunc) PushHook(hook func(basestore.ShareableStore) database.UserCredentialsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserCredentialsStoreWithFunc) SetDefaultReturn(r0 database.UserCredentialsStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) database.UserCredentialsStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserCredentialsStoreWithFunc) PushReturn(r0 database.UserCredentialsStore) {
	f.PushHook(func(basestore.ShareableStore) database.UserCredentialsStore {
		return r0
	})
}

func (f *UserCredentialsStoreWithFunc) nextHook() func(basestore.ShareableStore) database.UserCredentialsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserCredentialsStoreWithFunc) appendCall(r0 UserCredentialsStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserCredentialsStoreWithFuncCall objects
// describing the invocations of this function.
func (f *UserCredentialsStoreWithFunc) History() []UserCredentialsStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]UserCredentialsStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserCredentialsStoreWithFuncCall is an object that describes an
// invocation of method With on an instance of MockUserCredentialsStore.
type UserCredentialsStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.UserCredentialsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserCredentialsStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserCredentialsStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
