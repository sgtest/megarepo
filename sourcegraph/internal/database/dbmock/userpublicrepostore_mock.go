// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package dbmock

import (
	"context"
	"sync"

	database "github.com/sourcegraph/sourcegraph/internal/database"
	basestore "github.com/sourcegraph/sourcegraph/internal/database/basestore"
)

// MockUserPublicRepoStore is a mock implementation of the
// UserPublicRepoStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockUserPublicRepoStore struct {
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *UserPublicRepoStoreHandleFunc
	// ListByUserFunc is an instance of a mock function object controlling
	// the behavior of the method ListByUser.
	ListByUserFunc *UserPublicRepoStoreListByUserFunc
	// SetUserRepoFunc is an instance of a mock function object controlling
	// the behavior of the method SetUserRepo.
	SetUserRepoFunc *UserPublicRepoStoreSetUserRepoFunc
	// SetUserReposFunc is an instance of a mock function object controlling
	// the behavior of the method SetUserRepos.
	SetUserReposFunc *UserPublicRepoStoreSetUserReposFunc
}

// NewMockUserPublicRepoStore creates a new mock of the UserPublicRepoStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockUserPublicRepoStore() *MockUserPublicRepoStore {
	return &MockUserPublicRepoStore{
		HandleFunc: &UserPublicRepoStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				return nil
			},
		},
		ListByUserFunc: &UserPublicRepoStoreListByUserFunc{
			defaultHook: func(context.Context, int32) ([]database.UserPublicRepo, error) {
				return nil, nil
			},
		},
		SetUserRepoFunc: &UserPublicRepoStoreSetUserRepoFunc{
			defaultHook: func(context.Context, database.UserPublicRepo) error {
				return nil
			},
		},
		SetUserReposFunc: &UserPublicRepoStoreSetUserReposFunc{
			defaultHook: func(context.Context, int32, []database.UserPublicRepo) error {
				return nil
			},
		},
	}
}

// NewStrictMockUserPublicRepoStore creates a new mock of the
// UserPublicRepoStore interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockUserPublicRepoStore() *MockUserPublicRepoStore {
	return &MockUserPublicRepoStore{
		HandleFunc: &UserPublicRepoStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				panic("unexpected invocation of MockUserPublicRepoStore.Handle")
			},
		},
		ListByUserFunc: &UserPublicRepoStoreListByUserFunc{
			defaultHook: func(context.Context, int32) ([]database.UserPublicRepo, error) {
				panic("unexpected invocation of MockUserPublicRepoStore.ListByUser")
			},
		},
		SetUserRepoFunc: &UserPublicRepoStoreSetUserRepoFunc{
			defaultHook: func(context.Context, database.UserPublicRepo) error {
				panic("unexpected invocation of MockUserPublicRepoStore.SetUserRepo")
			},
		},
		SetUserReposFunc: &UserPublicRepoStoreSetUserReposFunc{
			defaultHook: func(context.Context, int32, []database.UserPublicRepo) error {
				panic("unexpected invocation of MockUserPublicRepoStore.SetUserRepos")
			},
		},
	}
}

// NewMockUserPublicRepoStoreFrom creates a new mock of the
// MockUserPublicRepoStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockUserPublicRepoStoreFrom(i database.UserPublicRepoStore) *MockUserPublicRepoStore {
	return &MockUserPublicRepoStore{
		HandleFunc: &UserPublicRepoStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListByUserFunc: &UserPublicRepoStoreListByUserFunc{
			defaultHook: i.ListByUser,
		},
		SetUserRepoFunc: &UserPublicRepoStoreSetUserRepoFunc{
			defaultHook: i.SetUserRepo,
		},
		SetUserReposFunc: &UserPublicRepoStoreSetUserReposFunc{
			defaultHook: i.SetUserRepos,
		},
	}
}

// UserPublicRepoStoreHandleFunc describes the behavior when the Handle
// method of the parent MockUserPublicRepoStore instance is invoked.
type UserPublicRepoStoreHandleFunc struct {
	defaultHook func() *basestore.TransactableHandle
	hooks       []func() *basestore.TransactableHandle
	history     []UserPublicRepoStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserPublicRepoStore) Handle() *basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(UserPublicRepoStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockUserPublicRepoStore instance is invoked and the hook queue is
// empty.
func (f *UserPublicRepoStoreHandleFunc) SetDefaultHook(hook func() *basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockUserPublicRepoStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserPublicRepoStoreHandleFunc) PushHook(hook func() *basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserPublicRepoStoreHandleFunc) SetDefaultReturn(r0 *basestore.TransactableHandle) {
	f.SetDefaultHook(func() *basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserPublicRepoStoreHandleFunc) PushReturn(r0 *basestore.TransactableHandle) {
	f.PushHook(func() *basestore.TransactableHandle {
		return r0
	})
}

func (f *UserPublicRepoStoreHandleFunc) nextHook() func() *basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserPublicRepoStoreHandleFunc) appendCall(r0 UserPublicRepoStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserPublicRepoStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *UserPublicRepoStoreHandleFunc) History() []UserPublicRepoStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]UserPublicRepoStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserPublicRepoStoreHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of MockUserPublicRepoStore.
type UserPublicRepoStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserPublicRepoStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserPublicRepoStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserPublicRepoStoreListByUserFunc describes the behavior when the
// ListByUser method of the parent MockUserPublicRepoStore instance is
// invoked.
type UserPublicRepoStoreListByUserFunc struct {
	defaultHook func(context.Context, int32) ([]database.UserPublicRepo, error)
	hooks       []func(context.Context, int32) ([]database.UserPublicRepo, error)
	history     []UserPublicRepoStoreListByUserFuncCall
	mutex       sync.Mutex
}

// ListByUser delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserPublicRepoStore) ListByUser(v0 context.Context, v1 int32) ([]database.UserPublicRepo, error) {
	r0, r1 := m.ListByUserFunc.nextHook()(v0, v1)
	m.ListByUserFunc.appendCall(UserPublicRepoStoreListByUserFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListByUser method of
// the parent MockUserPublicRepoStore instance is invoked and the hook queue
// is empty.
func (f *UserPublicRepoStoreListByUserFunc) SetDefaultHook(hook func(context.Context, int32) ([]database.UserPublicRepo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListByUser method of the parent MockUserPublicRepoStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserPublicRepoStoreListByUserFunc) PushHook(hook func(context.Context, int32) ([]database.UserPublicRepo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserPublicRepoStoreListByUserFunc) SetDefaultReturn(r0 []database.UserPublicRepo, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) ([]database.UserPublicRepo, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserPublicRepoStoreListByUserFunc) PushReturn(r0 []database.UserPublicRepo, r1 error) {
	f.PushHook(func(context.Context, int32) ([]database.UserPublicRepo, error) {
		return r0, r1
	})
}

func (f *UserPublicRepoStoreListByUserFunc) nextHook() func(context.Context, int32) ([]database.UserPublicRepo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserPublicRepoStoreListByUserFunc) appendCall(r0 UserPublicRepoStoreListByUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserPublicRepoStoreListByUserFuncCall
// objects describing the invocations of this function.
func (f *UserPublicRepoStoreListByUserFunc) History() []UserPublicRepoStoreListByUserFuncCall {
	f.mutex.Lock()
	history := make([]UserPublicRepoStoreListByUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserPublicRepoStoreListByUserFuncCall is an object that describes an
// invocation of method ListByUser on an instance of
// MockUserPublicRepoStore.
type UserPublicRepoStoreListByUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []database.UserPublicRepo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserPublicRepoStoreListByUserFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserPublicRepoStoreListByUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserPublicRepoStoreSetUserRepoFunc describes the behavior when the
// SetUserRepo method of the parent MockUserPublicRepoStore instance is
// invoked.
type UserPublicRepoStoreSetUserRepoFunc struct {
	defaultHook func(context.Context, database.UserPublicRepo) error
	hooks       []func(context.Context, database.UserPublicRepo) error
	history     []UserPublicRepoStoreSetUserRepoFuncCall
	mutex       sync.Mutex
}

// SetUserRepo delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserPublicRepoStore) SetUserRepo(v0 context.Context, v1 database.UserPublicRepo) error {
	r0 := m.SetUserRepoFunc.nextHook()(v0, v1)
	m.SetUserRepoFunc.appendCall(UserPublicRepoStoreSetUserRepoFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetUserRepo method
// of the parent MockUserPublicRepoStore instance is invoked and the hook
// queue is empty.
func (f *UserPublicRepoStoreSetUserRepoFunc) SetDefaultHook(hook func(context.Context, database.UserPublicRepo) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetUserRepo method of the parent MockUserPublicRepoStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserPublicRepoStoreSetUserRepoFunc) PushHook(hook func(context.Context, database.UserPublicRepo) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserPublicRepoStoreSetUserRepoFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, database.UserPublicRepo) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserPublicRepoStoreSetUserRepoFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, database.UserPublicRepo) error {
		return r0
	})
}

func (f *UserPublicRepoStoreSetUserRepoFunc) nextHook() func(context.Context, database.UserPublicRepo) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserPublicRepoStoreSetUserRepoFunc) appendCall(r0 UserPublicRepoStoreSetUserRepoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserPublicRepoStoreSetUserRepoFuncCall
// objects describing the invocations of this function.
func (f *UserPublicRepoStoreSetUserRepoFunc) History() []UserPublicRepoStoreSetUserRepoFuncCall {
	f.mutex.Lock()
	history := make([]UserPublicRepoStoreSetUserRepoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserPublicRepoStoreSetUserRepoFuncCall is an object that describes an
// invocation of method SetUserRepo on an instance of
// MockUserPublicRepoStore.
type UserPublicRepoStoreSetUserRepoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.UserPublicRepo
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserPublicRepoStoreSetUserRepoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserPublicRepoStoreSetUserRepoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserPublicRepoStoreSetUserReposFunc describes the behavior when the
// SetUserRepos method of the parent MockUserPublicRepoStore instance is
// invoked.
type UserPublicRepoStoreSetUserReposFunc struct {
	defaultHook func(context.Context, int32, []database.UserPublicRepo) error
	hooks       []func(context.Context, int32, []database.UserPublicRepo) error
	history     []UserPublicRepoStoreSetUserReposFuncCall
	mutex       sync.Mutex
}

// SetUserRepos delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserPublicRepoStore) SetUserRepos(v0 context.Context, v1 int32, v2 []database.UserPublicRepo) error {
	r0 := m.SetUserReposFunc.nextHook()(v0, v1, v2)
	m.SetUserReposFunc.appendCall(UserPublicRepoStoreSetUserReposFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetUserRepos method
// of the parent MockUserPublicRepoStore instance is invoked and the hook
// queue is empty.
func (f *UserPublicRepoStoreSetUserReposFunc) SetDefaultHook(hook func(context.Context, int32, []database.UserPublicRepo) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetUserRepos method of the parent MockUserPublicRepoStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserPublicRepoStoreSetUserReposFunc) PushHook(hook func(context.Context, int32, []database.UserPublicRepo) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserPublicRepoStoreSetUserReposFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, []database.UserPublicRepo) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserPublicRepoStoreSetUserReposFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, []database.UserPublicRepo) error {
		return r0
	})
}

func (f *UserPublicRepoStoreSetUserReposFunc) nextHook() func(context.Context, int32, []database.UserPublicRepo) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserPublicRepoStoreSetUserReposFunc) appendCall(r0 UserPublicRepoStoreSetUserReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserPublicRepoStoreSetUserReposFuncCall
// objects describing the invocations of this function.
func (f *UserPublicRepoStoreSetUserReposFunc) History() []UserPublicRepoStoreSetUserReposFuncCall {
	f.mutex.Lock()
	history := make([]UserPublicRepoStoreSetUserReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserPublicRepoStoreSetUserReposFuncCall is an object that describes an
// invocation of method SetUserRepos on an instance of
// MockUserPublicRepoStore.
type UserPublicRepoStoreSetUserReposFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []database.UserPublicRepo
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserPublicRepoStoreSetUserReposFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserPublicRepoStoreSetUserReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
