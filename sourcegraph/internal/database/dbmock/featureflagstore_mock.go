// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package dbmock

import (
	"context"
	"sync"

	database "github.com/sourcegraph/sourcegraph/internal/database"
	basestore "github.com/sourcegraph/sourcegraph/internal/database/basestore"
	featureflag "github.com/sourcegraph/sourcegraph/internal/featureflag"
)

// MockFeatureFlagStore is a mock implementation of the FeatureFlagStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockFeatureFlagStore struct {
	// CreateBoolFunc is an instance of a mock function object controlling
	// the behavior of the method CreateBool.
	CreateBoolFunc *FeatureFlagStoreCreateBoolFunc
	// CreateFeatureFlagFunc is an instance of a mock function object
	// controlling the behavior of the method CreateFeatureFlag.
	CreateFeatureFlagFunc *FeatureFlagStoreCreateFeatureFlagFunc
	// CreateOverrideFunc is an instance of a mock function object
	// controlling the behavior of the method CreateOverride.
	CreateOverrideFunc *FeatureFlagStoreCreateOverrideFunc
	// CreateRolloutFunc is an instance of a mock function object
	// controlling the behavior of the method CreateRollout.
	CreateRolloutFunc *FeatureFlagStoreCreateRolloutFunc
	// DeleteFeatureFlagFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteFeatureFlag.
	DeleteFeatureFlagFunc *FeatureFlagStoreDeleteFeatureFlagFunc
	// DeleteOverrideFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteOverride.
	DeleteOverrideFunc *FeatureFlagStoreDeleteOverrideFunc
	// GetAnonymousUserFlagsFunc is an instance of a mock function object
	// controlling the behavior of the method GetAnonymousUserFlags.
	GetAnonymousUserFlagsFunc *FeatureFlagStoreGetAnonymousUserFlagsFunc
	// GetFeatureFlagFunc is an instance of a mock function object
	// controlling the behavior of the method GetFeatureFlag.
	GetFeatureFlagFunc *FeatureFlagStoreGetFeatureFlagFunc
	// GetFeatureFlagsFunc is an instance of a mock function object
	// controlling the behavior of the method GetFeatureFlags.
	GetFeatureFlagsFunc *FeatureFlagStoreGetFeatureFlagsFunc
	// GetGlobalFeatureFlagsFunc is an instance of a mock function object
	// controlling the behavior of the method GetGlobalFeatureFlags.
	GetGlobalFeatureFlagsFunc *FeatureFlagStoreGetGlobalFeatureFlagsFunc
	// GetOrgFeatureFlagFunc is an instance of a mock function object
	// controlling the behavior of the method GetOrgFeatureFlag.
	GetOrgFeatureFlagFunc *FeatureFlagStoreGetOrgFeatureFlagFunc
	// GetOrgOverrideForFlagFunc is an instance of a mock function object
	// controlling the behavior of the method GetOrgOverrideForFlag.
	GetOrgOverrideForFlagFunc *FeatureFlagStoreGetOrgOverrideForFlagFunc
	// GetOrgOverridesForUserFunc is an instance of a mock function object
	// controlling the behavior of the method GetOrgOverridesForUser.
	GetOrgOverridesForUserFunc *FeatureFlagStoreGetOrgOverridesForUserFunc
	// GetOverridesForFlagFunc is an instance of a mock function object
	// controlling the behavior of the method GetOverridesForFlag.
	GetOverridesForFlagFunc *FeatureFlagStoreGetOverridesForFlagFunc
	// GetUserFlagsFunc is an instance of a mock function object controlling
	// the behavior of the method GetUserFlags.
	GetUserFlagsFunc *FeatureFlagStoreGetUserFlagsFunc
	// GetUserOverridesFunc is an instance of a mock function object
	// controlling the behavior of the method GetUserOverrides.
	GetUserOverridesFunc *FeatureFlagStoreGetUserOverridesFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *FeatureFlagStoreHandleFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *FeatureFlagStoreTransactFunc
	// UpdateFeatureFlagFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateFeatureFlag.
	UpdateFeatureFlagFunc *FeatureFlagStoreUpdateFeatureFlagFunc
	// UpdateOverrideFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateOverride.
	UpdateOverrideFunc *FeatureFlagStoreUpdateOverrideFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *FeatureFlagStoreWithFunc
}

// NewMockFeatureFlagStore creates a new mock of the FeatureFlagStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockFeatureFlagStore() *MockFeatureFlagStore {
	return &MockFeatureFlagStore{
		CreateBoolFunc: &FeatureFlagStoreCreateBoolFunc{
			defaultHook: func(context.Context, string, bool) (*featureflag.FeatureFlag, error) {
				return nil, nil
			},
		},
		CreateFeatureFlagFunc: &FeatureFlagStoreCreateFeatureFlagFunc{
			defaultHook: func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error) {
				return nil, nil
			},
		},
		CreateOverrideFunc: &FeatureFlagStoreCreateOverrideFunc{
			defaultHook: func(context.Context, *featureflag.Override) (*featureflag.Override, error) {
				return nil, nil
			},
		},
		CreateRolloutFunc: &FeatureFlagStoreCreateRolloutFunc{
			defaultHook: func(context.Context, string, int32) (*featureflag.FeatureFlag, error) {
				return nil, nil
			},
		},
		DeleteFeatureFlagFunc: &FeatureFlagStoreDeleteFeatureFlagFunc{
			defaultHook: func(context.Context, string) error {
				return nil
			},
		},
		DeleteOverrideFunc: &FeatureFlagStoreDeleteOverrideFunc{
			defaultHook: func(context.Context, *int32, *int32, string) error {
				return nil
			},
		},
		GetAnonymousUserFlagsFunc: &FeatureFlagStoreGetAnonymousUserFlagsFunc{
			defaultHook: func(context.Context, string) (map[string]bool, error) {
				return nil, nil
			},
		},
		GetFeatureFlagFunc: &FeatureFlagStoreGetFeatureFlagFunc{
			defaultHook: func(context.Context, string) (*featureflag.FeatureFlag, error) {
				return nil, nil
			},
		},
		GetFeatureFlagsFunc: &FeatureFlagStoreGetFeatureFlagsFunc{
			defaultHook: func(context.Context) ([]*featureflag.FeatureFlag, error) {
				return nil, nil
			},
		},
		GetGlobalFeatureFlagsFunc: &FeatureFlagStoreGetGlobalFeatureFlagsFunc{
			defaultHook: func(context.Context) (map[string]bool, error) {
				return nil, nil
			},
		},
		GetOrgFeatureFlagFunc: &FeatureFlagStoreGetOrgFeatureFlagFunc{
			defaultHook: func(context.Context, int32, string) (bool, error) {
				return false, nil
			},
		},
		GetOrgOverrideForFlagFunc: &FeatureFlagStoreGetOrgOverrideForFlagFunc{
			defaultHook: func(context.Context, int32, string) (*featureflag.Override, error) {
				return nil, nil
			},
		},
		GetOrgOverridesForUserFunc: &FeatureFlagStoreGetOrgOverridesForUserFunc{
			defaultHook: func(context.Context, int32) ([]*featureflag.Override, error) {
				return nil, nil
			},
		},
		GetOverridesForFlagFunc: &FeatureFlagStoreGetOverridesForFlagFunc{
			defaultHook: func(context.Context, string) ([]*featureflag.Override, error) {
				return nil, nil
			},
		},
		GetUserFlagsFunc: &FeatureFlagStoreGetUserFlagsFunc{
			defaultHook: func(context.Context, int32) (map[string]bool, error) {
				return nil, nil
			},
		},
		GetUserOverridesFunc: &FeatureFlagStoreGetUserOverridesFunc{
			defaultHook: func(context.Context, int32) ([]*featureflag.Override, error) {
				return nil, nil
			},
		},
		HandleFunc: &FeatureFlagStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				return nil
			},
		},
		TransactFunc: &FeatureFlagStoreTransactFunc{
			defaultHook: func(context.Context) (database.FeatureFlagStore, error) {
				return nil, nil
			},
		},
		UpdateFeatureFlagFunc: &FeatureFlagStoreUpdateFeatureFlagFunc{
			defaultHook: func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error) {
				return nil, nil
			},
		},
		UpdateOverrideFunc: &FeatureFlagStoreUpdateOverrideFunc{
			defaultHook: func(context.Context, *int32, *int32, string, bool) (*featureflag.Override, error) {
				return nil, nil
			},
		},
		WithFunc: &FeatureFlagStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) database.FeatureFlagStore {
				return nil
			},
		},
	}
}

// NewStrictMockFeatureFlagStore creates a new mock of the FeatureFlagStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockFeatureFlagStore() *MockFeatureFlagStore {
	return &MockFeatureFlagStore{
		CreateBoolFunc: &FeatureFlagStoreCreateBoolFunc{
			defaultHook: func(context.Context, string, bool) (*featureflag.FeatureFlag, error) {
				panic("unexpected invocation of MockFeatureFlagStore.CreateBool")
			},
		},
		CreateFeatureFlagFunc: &FeatureFlagStoreCreateFeatureFlagFunc{
			defaultHook: func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error) {
				panic("unexpected invocation of MockFeatureFlagStore.CreateFeatureFlag")
			},
		},
		CreateOverrideFunc: &FeatureFlagStoreCreateOverrideFunc{
			defaultHook: func(context.Context, *featureflag.Override) (*featureflag.Override, error) {
				panic("unexpected invocation of MockFeatureFlagStore.CreateOverride")
			},
		},
		CreateRolloutFunc: &FeatureFlagStoreCreateRolloutFunc{
			defaultHook: func(context.Context, string, int32) (*featureflag.FeatureFlag, error) {
				panic("unexpected invocation of MockFeatureFlagStore.CreateRollout")
			},
		},
		DeleteFeatureFlagFunc: &FeatureFlagStoreDeleteFeatureFlagFunc{
			defaultHook: func(context.Context, string) error {
				panic("unexpected invocation of MockFeatureFlagStore.DeleteFeatureFlag")
			},
		},
		DeleteOverrideFunc: &FeatureFlagStoreDeleteOverrideFunc{
			defaultHook: func(context.Context, *int32, *int32, string) error {
				panic("unexpected invocation of MockFeatureFlagStore.DeleteOverride")
			},
		},
		GetAnonymousUserFlagsFunc: &FeatureFlagStoreGetAnonymousUserFlagsFunc{
			defaultHook: func(context.Context, string) (map[string]bool, error) {
				panic("unexpected invocation of MockFeatureFlagStore.GetAnonymousUserFlags")
			},
		},
		GetFeatureFlagFunc: &FeatureFlagStoreGetFeatureFlagFunc{
			defaultHook: func(context.Context, string) (*featureflag.FeatureFlag, error) {
				panic("unexpected invocation of MockFeatureFlagStore.GetFeatureFlag")
			},
		},
		GetFeatureFlagsFunc: &FeatureFlagStoreGetFeatureFlagsFunc{
			defaultHook: func(context.Context) ([]*featureflag.FeatureFlag, error) {
				panic("unexpected invocation of MockFeatureFlagStore.GetFeatureFlags")
			},
		},
		GetGlobalFeatureFlagsFunc: &FeatureFlagStoreGetGlobalFeatureFlagsFunc{
			defaultHook: func(context.Context) (map[string]bool, error) {
				panic("unexpected invocation of MockFeatureFlagStore.GetGlobalFeatureFlags")
			},
		},
		GetOrgFeatureFlagFunc: &FeatureFlagStoreGetOrgFeatureFlagFunc{
			defaultHook: func(context.Context, int32, string) (bool, error) {
				panic("unexpected invocation of MockFeatureFlagStore.GetOrgFeatureFlag")
			},
		},
		GetOrgOverrideForFlagFunc: &FeatureFlagStoreGetOrgOverrideForFlagFunc{
			defaultHook: func(context.Context, int32, string) (*featureflag.Override, error) {
				panic("unexpected invocation of MockFeatureFlagStore.GetOrgOverrideForFlag")
			},
		},
		GetOrgOverridesForUserFunc: &FeatureFlagStoreGetOrgOverridesForUserFunc{
			defaultHook: func(context.Context, int32) ([]*featureflag.Override, error) {
				panic("unexpected invocation of MockFeatureFlagStore.GetOrgOverridesForUser")
			},
		},
		GetOverridesForFlagFunc: &FeatureFlagStoreGetOverridesForFlagFunc{
			defaultHook: func(context.Context, string) ([]*featureflag.Override, error) {
				panic("unexpected invocation of MockFeatureFlagStore.GetOverridesForFlag")
			},
		},
		GetUserFlagsFunc: &FeatureFlagStoreGetUserFlagsFunc{
			defaultHook: func(context.Context, int32) (map[string]bool, error) {
				panic("unexpected invocation of MockFeatureFlagStore.GetUserFlags")
			},
		},
		GetUserOverridesFunc: &FeatureFlagStoreGetUserOverridesFunc{
			defaultHook: func(context.Context, int32) ([]*featureflag.Override, error) {
				panic("unexpected invocation of MockFeatureFlagStore.GetUserOverrides")
			},
		},
		HandleFunc: &FeatureFlagStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				panic("unexpected invocation of MockFeatureFlagStore.Handle")
			},
		},
		TransactFunc: &FeatureFlagStoreTransactFunc{
			defaultHook: func(context.Context) (database.FeatureFlagStore, error) {
				panic("unexpected invocation of MockFeatureFlagStore.Transact")
			},
		},
		UpdateFeatureFlagFunc: &FeatureFlagStoreUpdateFeatureFlagFunc{
			defaultHook: func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error) {
				panic("unexpected invocation of MockFeatureFlagStore.UpdateFeatureFlag")
			},
		},
		UpdateOverrideFunc: &FeatureFlagStoreUpdateOverrideFunc{
			defaultHook: func(context.Context, *int32, *int32, string, bool) (*featureflag.Override, error) {
				panic("unexpected invocation of MockFeatureFlagStore.UpdateOverride")
			},
		},
		WithFunc: &FeatureFlagStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) database.FeatureFlagStore {
				panic("unexpected invocation of MockFeatureFlagStore.With")
			},
		},
	}
}

// NewMockFeatureFlagStoreFrom creates a new mock of the
// MockFeatureFlagStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockFeatureFlagStoreFrom(i database.FeatureFlagStore) *MockFeatureFlagStore {
	return &MockFeatureFlagStore{
		CreateBoolFunc: &FeatureFlagStoreCreateBoolFunc{
			defaultHook: i.CreateBool,
		},
		CreateFeatureFlagFunc: &FeatureFlagStoreCreateFeatureFlagFunc{
			defaultHook: i.CreateFeatureFlag,
		},
		CreateOverrideFunc: &FeatureFlagStoreCreateOverrideFunc{
			defaultHook: i.CreateOverride,
		},
		CreateRolloutFunc: &FeatureFlagStoreCreateRolloutFunc{
			defaultHook: i.CreateRollout,
		},
		DeleteFeatureFlagFunc: &FeatureFlagStoreDeleteFeatureFlagFunc{
			defaultHook: i.DeleteFeatureFlag,
		},
		DeleteOverrideFunc: &FeatureFlagStoreDeleteOverrideFunc{
			defaultHook: i.DeleteOverride,
		},
		GetAnonymousUserFlagsFunc: &FeatureFlagStoreGetAnonymousUserFlagsFunc{
			defaultHook: i.GetAnonymousUserFlags,
		},
		GetFeatureFlagFunc: &FeatureFlagStoreGetFeatureFlagFunc{
			defaultHook: i.GetFeatureFlag,
		},
		GetFeatureFlagsFunc: &FeatureFlagStoreGetFeatureFlagsFunc{
			defaultHook: i.GetFeatureFlags,
		},
		GetGlobalFeatureFlagsFunc: &FeatureFlagStoreGetGlobalFeatureFlagsFunc{
			defaultHook: i.GetGlobalFeatureFlags,
		},
		GetOrgFeatureFlagFunc: &FeatureFlagStoreGetOrgFeatureFlagFunc{
			defaultHook: i.GetOrgFeatureFlag,
		},
		GetOrgOverrideForFlagFunc: &FeatureFlagStoreGetOrgOverrideForFlagFunc{
			defaultHook: i.GetOrgOverrideForFlag,
		},
		GetOrgOverridesForUserFunc: &FeatureFlagStoreGetOrgOverridesForUserFunc{
			defaultHook: i.GetOrgOverridesForUser,
		},
		GetOverridesForFlagFunc: &FeatureFlagStoreGetOverridesForFlagFunc{
			defaultHook: i.GetOverridesForFlag,
		},
		GetUserFlagsFunc: &FeatureFlagStoreGetUserFlagsFunc{
			defaultHook: i.GetUserFlags,
		},
		GetUserOverridesFunc: &FeatureFlagStoreGetUserOverridesFunc{
			defaultHook: i.GetUserOverrides,
		},
		HandleFunc: &FeatureFlagStoreHandleFunc{
			defaultHook: i.Handle,
		},
		TransactFunc: &FeatureFlagStoreTransactFunc{
			defaultHook: i.Transact,
		},
		UpdateFeatureFlagFunc: &FeatureFlagStoreUpdateFeatureFlagFunc{
			defaultHook: i.UpdateFeatureFlag,
		},
		UpdateOverrideFunc: &FeatureFlagStoreUpdateOverrideFunc{
			defaultHook: i.UpdateOverride,
		},
		WithFunc: &FeatureFlagStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// FeatureFlagStoreCreateBoolFunc describes the behavior when the CreateBool
// method of the parent MockFeatureFlagStore instance is invoked.
type FeatureFlagStoreCreateBoolFunc struct {
	defaultHook func(context.Context, string, bool) (*featureflag.FeatureFlag, error)
	hooks       []func(context.Context, string, bool) (*featureflag.FeatureFlag, error)
	history     []FeatureFlagStoreCreateBoolFuncCall
	mutex       sync.Mutex
}

// CreateBool delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) CreateBool(v0 context.Context, v1 string, v2 bool) (*featureflag.FeatureFlag, error) {
	r0, r1 := m.CreateBoolFunc.nextHook()(v0, v1, v2)
	m.CreateBoolFunc.appendCall(FeatureFlagStoreCreateBoolFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateBool method of
// the parent MockFeatureFlagStore instance is invoked and the hook queue is
// empty.
func (f *FeatureFlagStoreCreateBoolFunc) SetDefaultHook(hook func(context.Context, string, bool) (*featureflag.FeatureFlag, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateBool method of the parent MockFeatureFlagStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *FeatureFlagStoreCreateBoolFunc) PushHook(hook func(context.Context, string, bool) (*featureflag.FeatureFlag, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *FeatureFlagStoreCreateBoolFunc) SetDefaultReturn(r0 *featureflag.FeatureFlag, r1 error) {
	f.SetDefaultHook(func(context.Context, string, bool) (*featureflag.FeatureFlag, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *FeatureFlagStoreCreateBoolFunc) PushReturn(r0 *featureflag.FeatureFlag, r1 error) {
	f.PushHook(func(context.Context, string, bool) (*featureflag.FeatureFlag, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreCreateBoolFunc) nextHook() func(context.Context, string, bool) (*featureflag.FeatureFlag, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreCreateBoolFunc) appendCall(r0 FeatureFlagStoreCreateBoolFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreCreateBoolFuncCall objects
// describing the invocations of this function.
func (f *FeatureFlagStoreCreateBoolFunc) History() []FeatureFlagStoreCreateBoolFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreCreateBoolFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreCreateBoolFuncCall is an object that describes an
// invocation of method CreateBool on an instance of MockFeatureFlagStore.
type FeatureFlagStoreCreateBoolFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *featureflag.FeatureFlag
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreCreateBoolFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreCreateBoolFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreCreateFeatureFlagFunc describes the behavior when the
// CreateFeatureFlag method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreCreateFeatureFlagFunc struct {
	defaultHook func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error)
	hooks       []func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error)
	history     []FeatureFlagStoreCreateFeatureFlagFuncCall
	mutex       sync.Mutex
}

// CreateFeatureFlag delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) CreateFeatureFlag(v0 context.Context, v1 *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error) {
	r0, r1 := m.CreateFeatureFlagFunc.nextHook()(v0, v1)
	m.CreateFeatureFlagFunc.appendCall(FeatureFlagStoreCreateFeatureFlagFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateFeatureFlag
// method of the parent MockFeatureFlagStore instance is invoked and the
// hook queue is empty.
func (f *FeatureFlagStoreCreateFeatureFlagFunc) SetDefaultHook(hook func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateFeatureFlag method of the parent MockFeatureFlagStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *FeatureFlagStoreCreateFeatureFlagFunc) PushHook(hook func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *FeatureFlagStoreCreateFeatureFlagFunc) SetDefaultReturn(r0 *featureflag.FeatureFlag, r1 error) {
	f.SetDefaultHook(func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *FeatureFlagStoreCreateFeatureFlagFunc) PushReturn(r0 *featureflag.FeatureFlag, r1 error) {
	f.PushHook(func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreCreateFeatureFlagFunc) nextHook() func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreCreateFeatureFlagFunc) appendCall(r0 FeatureFlagStoreCreateFeatureFlagFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreCreateFeatureFlagFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreCreateFeatureFlagFunc) History() []FeatureFlagStoreCreateFeatureFlagFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreCreateFeatureFlagFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreCreateFeatureFlagFuncCall is an object that describes an
// invocation of method CreateFeatureFlag on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreCreateFeatureFlagFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *featureflag.FeatureFlag
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *featureflag.FeatureFlag
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreCreateFeatureFlagFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreCreateFeatureFlagFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreCreateOverrideFunc describes the behavior when the
// CreateOverride method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreCreateOverrideFunc struct {
	defaultHook func(context.Context, *featureflag.Override) (*featureflag.Override, error)
	hooks       []func(context.Context, *featureflag.Override) (*featureflag.Override, error)
	history     []FeatureFlagStoreCreateOverrideFuncCall
	mutex       sync.Mutex
}

// CreateOverride delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) CreateOverride(v0 context.Context, v1 *featureflag.Override) (*featureflag.Override, error) {
	r0, r1 := m.CreateOverrideFunc.nextHook()(v0, v1)
	m.CreateOverrideFunc.appendCall(FeatureFlagStoreCreateOverrideFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateOverride
// method of the parent MockFeatureFlagStore instance is invoked and the
// hook queue is empty.
func (f *FeatureFlagStoreCreateOverrideFunc) SetDefaultHook(hook func(context.Context, *featureflag.Override) (*featureflag.Override, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateOverride method of the parent MockFeatureFlagStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *FeatureFlagStoreCreateOverrideFunc) PushHook(hook func(context.Context, *featureflag.Override) (*featureflag.Override, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *FeatureFlagStoreCreateOverrideFunc) SetDefaultReturn(r0 *featureflag.Override, r1 error) {
	f.SetDefaultHook(func(context.Context, *featureflag.Override) (*featureflag.Override, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *FeatureFlagStoreCreateOverrideFunc) PushReturn(r0 *featureflag.Override, r1 error) {
	f.PushHook(func(context.Context, *featureflag.Override) (*featureflag.Override, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreCreateOverrideFunc) nextHook() func(context.Context, *featureflag.Override) (*featureflag.Override, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreCreateOverrideFunc) appendCall(r0 FeatureFlagStoreCreateOverrideFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreCreateOverrideFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreCreateOverrideFunc) History() []FeatureFlagStoreCreateOverrideFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreCreateOverrideFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreCreateOverrideFuncCall is an object that describes an
// invocation of method CreateOverride on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreCreateOverrideFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *featureflag.Override
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *featureflag.Override
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreCreateOverrideFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreCreateOverrideFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreCreateRolloutFunc describes the behavior when the
// CreateRollout method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreCreateRolloutFunc struct {
	defaultHook func(context.Context, string, int32) (*featureflag.FeatureFlag, error)
	hooks       []func(context.Context, string, int32) (*featureflag.FeatureFlag, error)
	history     []FeatureFlagStoreCreateRolloutFuncCall
	mutex       sync.Mutex
}

// CreateRollout delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) CreateRollout(v0 context.Context, v1 string, v2 int32) (*featureflag.FeatureFlag, error) {
	r0, r1 := m.CreateRolloutFunc.nextHook()(v0, v1, v2)
	m.CreateRolloutFunc.appendCall(FeatureFlagStoreCreateRolloutFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateRollout method
// of the parent MockFeatureFlagStore instance is invoked and the hook queue
// is empty.
func (f *FeatureFlagStoreCreateRolloutFunc) SetDefaultHook(hook func(context.Context, string, int32) (*featureflag.FeatureFlag, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateRollout method of the parent MockFeatureFlagStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *FeatureFlagStoreCreateRolloutFunc) PushHook(hook func(context.Context, string, int32) (*featureflag.FeatureFlag, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *FeatureFlagStoreCreateRolloutFunc) SetDefaultReturn(r0 *featureflag.FeatureFlag, r1 error) {
	f.SetDefaultHook(func(context.Context, string, int32) (*featureflag.FeatureFlag, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *FeatureFlagStoreCreateRolloutFunc) PushReturn(r0 *featureflag.FeatureFlag, r1 error) {
	f.PushHook(func(context.Context, string, int32) (*featureflag.FeatureFlag, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreCreateRolloutFunc) nextHook() func(context.Context, string, int32) (*featureflag.FeatureFlag, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreCreateRolloutFunc) appendCall(r0 FeatureFlagStoreCreateRolloutFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreCreateRolloutFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreCreateRolloutFunc) History() []FeatureFlagStoreCreateRolloutFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreCreateRolloutFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreCreateRolloutFuncCall is an object that describes an
// invocation of method CreateRollout on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreCreateRolloutFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *featureflag.FeatureFlag
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreCreateRolloutFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreCreateRolloutFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreDeleteFeatureFlagFunc describes the behavior when the
// DeleteFeatureFlag method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreDeleteFeatureFlagFunc struct {
	defaultHook func(context.Context, string) error
	hooks       []func(context.Context, string) error
	history     []FeatureFlagStoreDeleteFeatureFlagFuncCall
	mutex       sync.Mutex
}

// DeleteFeatureFlag delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) DeleteFeatureFlag(v0 context.Context, v1 string) error {
	r0 := m.DeleteFeatureFlagFunc.nextHook()(v0, v1)
	m.DeleteFeatureFlagFunc.appendCall(FeatureFlagStoreDeleteFeatureFlagFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteFeatureFlag
// method of the parent MockFeatureFlagStore instance is invoked and the
// hook queue is empty.
func (f *FeatureFlagStoreDeleteFeatureFlagFunc) SetDefaultHook(hook func(context.Context, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteFeatureFlag method of the parent MockFeatureFlagStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *FeatureFlagStoreDeleteFeatureFlagFunc) PushHook(hook func(context.Context, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *FeatureFlagStoreDeleteFeatureFlagFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *FeatureFlagStoreDeleteFeatureFlagFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string) error {
		return r0
	})
}

func (f *FeatureFlagStoreDeleteFeatureFlagFunc) nextHook() func(context.Context, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreDeleteFeatureFlagFunc) appendCall(r0 FeatureFlagStoreDeleteFeatureFlagFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreDeleteFeatureFlagFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreDeleteFeatureFlagFunc) History() []FeatureFlagStoreDeleteFeatureFlagFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreDeleteFeatureFlagFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreDeleteFeatureFlagFuncCall is an object that describes an
// invocation of method DeleteFeatureFlag on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreDeleteFeatureFlagFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreDeleteFeatureFlagFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreDeleteFeatureFlagFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// FeatureFlagStoreDeleteOverrideFunc describes the behavior when the
// DeleteOverride method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreDeleteOverrideFunc struct {
	defaultHook func(context.Context, *int32, *int32, string) error
	hooks       []func(context.Context, *int32, *int32, string) error
	history     []FeatureFlagStoreDeleteOverrideFuncCall
	mutex       sync.Mutex
}

// DeleteOverride delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) DeleteOverride(v0 context.Context, v1 *int32, v2 *int32, v3 string) error {
	r0 := m.DeleteOverrideFunc.nextHook()(v0, v1, v2, v3)
	m.DeleteOverrideFunc.appendCall(FeatureFlagStoreDeleteOverrideFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteOverride
// method of the parent MockFeatureFlagStore instance is invoked and the
// hook queue is empty.
func (f *FeatureFlagStoreDeleteOverrideFunc) SetDefaultHook(hook func(context.Context, *int32, *int32, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteOverride method of the parent MockFeatureFlagStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *FeatureFlagStoreDeleteOverrideFunc) PushHook(hook func(context.Context, *int32, *int32, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *FeatureFlagStoreDeleteOverrideFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *int32, *int32, string) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *FeatureFlagStoreDeleteOverrideFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *int32, *int32, string) error {
		return r0
	})
}

func (f *FeatureFlagStoreDeleteOverrideFunc) nextHook() func(context.Context, *int32, *int32, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreDeleteOverrideFunc) appendCall(r0 FeatureFlagStoreDeleteOverrideFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreDeleteOverrideFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreDeleteOverrideFunc) History() []FeatureFlagStoreDeleteOverrideFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreDeleteOverrideFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreDeleteOverrideFuncCall is an object that describes an
// invocation of method DeleteOverride on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreDeleteOverrideFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *int32
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreDeleteOverrideFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreDeleteOverrideFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// FeatureFlagStoreGetAnonymousUserFlagsFunc describes the behavior when the
// GetAnonymousUserFlags method of the parent MockFeatureFlagStore instance
// is invoked.
type FeatureFlagStoreGetAnonymousUserFlagsFunc struct {
	defaultHook func(context.Context, string) (map[string]bool, error)
	hooks       []func(context.Context, string) (map[string]bool, error)
	history     []FeatureFlagStoreGetAnonymousUserFlagsFuncCall
	mutex       sync.Mutex
}

// GetAnonymousUserFlags delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) GetAnonymousUserFlags(v0 context.Context, v1 string) (map[string]bool, error) {
	r0, r1 := m.GetAnonymousUserFlagsFunc.nextHook()(v0, v1)
	m.GetAnonymousUserFlagsFunc.appendCall(FeatureFlagStoreGetAnonymousUserFlagsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetAnonymousUserFlags method of the parent MockFeatureFlagStore instance
// is invoked and the hook queue is empty.
func (f *FeatureFlagStoreGetAnonymousUserFlagsFunc) SetDefaultHook(hook func(context.Context, string) (map[string]bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAnonymousUserFlags method of the parent MockFeatureFlagStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *FeatureFlagStoreGetAnonymousUserFlagsFunc) PushHook(hook func(context.Context, string) (map[string]bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *FeatureFlagStoreGetAnonymousUserFlagsFunc) SetDefaultReturn(r0 map[string]bool, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (map[string]bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *FeatureFlagStoreGetAnonymousUserFlagsFunc) PushReturn(r0 map[string]bool, r1 error) {
	f.PushHook(func(context.Context, string) (map[string]bool, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreGetAnonymousUserFlagsFunc) nextHook() func(context.Context, string) (map[string]bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreGetAnonymousUserFlagsFunc) appendCall(r0 FeatureFlagStoreGetAnonymousUserFlagsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// FeatureFlagStoreGetAnonymousUserFlagsFuncCall objects describing the
// invocations of this function.
func (f *FeatureFlagStoreGetAnonymousUserFlagsFunc) History() []FeatureFlagStoreGetAnonymousUserFlagsFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreGetAnonymousUserFlagsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreGetAnonymousUserFlagsFuncCall is an object that describes
// an invocation of method GetAnonymousUserFlags on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreGetAnonymousUserFlagsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[string]bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreGetAnonymousUserFlagsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreGetAnonymousUserFlagsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreGetFeatureFlagFunc describes the behavior when the
// GetFeatureFlag method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreGetFeatureFlagFunc struct {
	defaultHook func(context.Context, string) (*featureflag.FeatureFlag, error)
	hooks       []func(context.Context, string) (*featureflag.FeatureFlag, error)
	history     []FeatureFlagStoreGetFeatureFlagFuncCall
	mutex       sync.Mutex
}

// GetFeatureFlag delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) GetFeatureFlag(v0 context.Context, v1 string) (*featureflag.FeatureFlag, error) {
	r0, r1 := m.GetFeatureFlagFunc.nextHook()(v0, v1)
	m.GetFeatureFlagFunc.appendCall(FeatureFlagStoreGetFeatureFlagFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetFeatureFlag
// method of the parent MockFeatureFlagStore instance is invoked and the
// hook queue is empty.
func (f *FeatureFlagStoreGetFeatureFlagFunc) SetDefaultHook(hook func(context.Context, string) (*featureflag.FeatureFlag, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetFeatureFlag method of the parent MockFeatureFlagStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *FeatureFlagStoreGetFeatureFlagFunc) PushHook(hook func(context.Context, string) (*featureflag.FeatureFlag, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *FeatureFlagStoreGetFeatureFlagFunc) SetDefaultReturn(r0 *featureflag.FeatureFlag, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*featureflag.FeatureFlag, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *FeatureFlagStoreGetFeatureFlagFunc) PushReturn(r0 *featureflag.FeatureFlag, r1 error) {
	f.PushHook(func(context.Context, string) (*featureflag.FeatureFlag, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreGetFeatureFlagFunc) nextHook() func(context.Context, string) (*featureflag.FeatureFlag, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreGetFeatureFlagFunc) appendCall(r0 FeatureFlagStoreGetFeatureFlagFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreGetFeatureFlagFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreGetFeatureFlagFunc) History() []FeatureFlagStoreGetFeatureFlagFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreGetFeatureFlagFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreGetFeatureFlagFuncCall is an object that describes an
// invocation of method GetFeatureFlag on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreGetFeatureFlagFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *featureflag.FeatureFlag
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreGetFeatureFlagFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreGetFeatureFlagFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreGetFeatureFlagsFunc describes the behavior when the
// GetFeatureFlags method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreGetFeatureFlagsFunc struct {
	defaultHook func(context.Context) ([]*featureflag.FeatureFlag, error)
	hooks       []func(context.Context) ([]*featureflag.FeatureFlag, error)
	history     []FeatureFlagStoreGetFeatureFlagsFuncCall
	mutex       sync.Mutex
}

// GetFeatureFlags delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) GetFeatureFlags(v0 context.Context) ([]*featureflag.FeatureFlag, error) {
	r0, r1 := m.GetFeatureFlagsFunc.nextHook()(v0)
	m.GetFeatureFlagsFunc.appendCall(FeatureFlagStoreGetFeatureFlagsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetFeatureFlags
// method of the parent MockFeatureFlagStore instance is invoked and the
// hook queue is empty.
func (f *FeatureFlagStoreGetFeatureFlagsFunc) SetDefaultHook(hook func(context.Context) ([]*featureflag.FeatureFlag, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetFeatureFlags method of the parent MockFeatureFlagStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *FeatureFlagStoreGetFeatureFlagsFunc) PushHook(hook func(context.Context) ([]*featureflag.FeatureFlag, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *FeatureFlagStoreGetFeatureFlagsFunc) SetDefaultReturn(r0 []*featureflag.FeatureFlag, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]*featureflag.FeatureFlag, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *FeatureFlagStoreGetFeatureFlagsFunc) PushReturn(r0 []*featureflag.FeatureFlag, r1 error) {
	f.PushHook(func(context.Context) ([]*featureflag.FeatureFlag, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreGetFeatureFlagsFunc) nextHook() func(context.Context) ([]*featureflag.FeatureFlag, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreGetFeatureFlagsFunc) appendCall(r0 FeatureFlagStoreGetFeatureFlagsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreGetFeatureFlagsFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreGetFeatureFlagsFunc) History() []FeatureFlagStoreGetFeatureFlagsFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreGetFeatureFlagsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreGetFeatureFlagsFuncCall is an object that describes an
// invocation of method GetFeatureFlags on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreGetFeatureFlagsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*featureflag.FeatureFlag
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreGetFeatureFlagsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreGetFeatureFlagsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreGetGlobalFeatureFlagsFunc describes the behavior when the
// GetGlobalFeatureFlags method of the parent MockFeatureFlagStore instance
// is invoked.
type FeatureFlagStoreGetGlobalFeatureFlagsFunc struct {
	defaultHook func(context.Context) (map[string]bool, error)
	hooks       []func(context.Context) (map[string]bool, error)
	history     []FeatureFlagStoreGetGlobalFeatureFlagsFuncCall
	mutex       sync.Mutex
}

// GetGlobalFeatureFlags delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) GetGlobalFeatureFlags(v0 context.Context) (map[string]bool, error) {
	r0, r1 := m.GetGlobalFeatureFlagsFunc.nextHook()(v0)
	m.GetGlobalFeatureFlagsFunc.appendCall(FeatureFlagStoreGetGlobalFeatureFlagsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetGlobalFeatureFlags method of the parent MockFeatureFlagStore instance
// is invoked and the hook queue is empty.
func (f *FeatureFlagStoreGetGlobalFeatureFlagsFunc) SetDefaultHook(hook func(context.Context) (map[string]bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetGlobalFeatureFlags method of the parent MockFeatureFlagStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *FeatureFlagStoreGetGlobalFeatureFlagsFunc) PushHook(hook func(context.Context) (map[string]bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *FeatureFlagStoreGetGlobalFeatureFlagsFunc) SetDefaultReturn(r0 map[string]bool, r1 error) {
	f.SetDefaultHook(func(context.Context) (map[string]bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *FeatureFlagStoreGetGlobalFeatureFlagsFunc) PushReturn(r0 map[string]bool, r1 error) {
	f.PushHook(func(context.Context) (map[string]bool, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreGetGlobalFeatureFlagsFunc) nextHook() func(context.Context) (map[string]bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreGetGlobalFeatureFlagsFunc) appendCall(r0 FeatureFlagStoreGetGlobalFeatureFlagsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// FeatureFlagStoreGetGlobalFeatureFlagsFuncCall objects describing the
// invocations of this function.
func (f *FeatureFlagStoreGetGlobalFeatureFlagsFunc) History() []FeatureFlagStoreGetGlobalFeatureFlagsFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreGetGlobalFeatureFlagsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreGetGlobalFeatureFlagsFuncCall is an object that describes
// an invocation of method GetGlobalFeatureFlags on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreGetGlobalFeatureFlagsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[string]bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreGetGlobalFeatureFlagsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreGetGlobalFeatureFlagsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreGetOrgFeatureFlagFunc describes the behavior when the
// GetOrgFeatureFlag method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreGetOrgFeatureFlagFunc struct {
	defaultHook func(context.Context, int32, string) (bool, error)
	hooks       []func(context.Context, int32, string) (bool, error)
	history     []FeatureFlagStoreGetOrgFeatureFlagFuncCall
	mutex       sync.Mutex
}

// GetOrgFeatureFlag delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) GetOrgFeatureFlag(v0 context.Context, v1 int32, v2 string) (bool, error) {
	r0, r1 := m.GetOrgFeatureFlagFunc.nextHook()(v0, v1, v2)
	m.GetOrgFeatureFlagFunc.appendCall(FeatureFlagStoreGetOrgFeatureFlagFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetOrgFeatureFlag
// method of the parent MockFeatureFlagStore instance is invoked and the
// hook queue is empty.
func (f *FeatureFlagStoreGetOrgFeatureFlagFunc) SetDefaultHook(hook func(context.Context, int32, string) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetOrgFeatureFlag method of the parent MockFeatureFlagStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *FeatureFlagStoreGetOrgFeatureFlagFunc) PushHook(hook func(context.Context, int32, string) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *FeatureFlagStoreGetOrgFeatureFlagFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, string) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *FeatureFlagStoreGetOrgFeatureFlagFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int32, string) (bool, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreGetOrgFeatureFlagFunc) nextHook() func(context.Context, int32, string) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreGetOrgFeatureFlagFunc) appendCall(r0 FeatureFlagStoreGetOrgFeatureFlagFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreGetOrgFeatureFlagFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreGetOrgFeatureFlagFunc) History() []FeatureFlagStoreGetOrgFeatureFlagFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreGetOrgFeatureFlagFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreGetOrgFeatureFlagFuncCall is an object that describes an
// invocation of method GetOrgFeatureFlag on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreGetOrgFeatureFlagFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreGetOrgFeatureFlagFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreGetOrgFeatureFlagFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreGetOrgOverrideForFlagFunc describes the behavior when the
// GetOrgOverrideForFlag method of the parent MockFeatureFlagStore instance
// is invoked.
type FeatureFlagStoreGetOrgOverrideForFlagFunc struct {
	defaultHook func(context.Context, int32, string) (*featureflag.Override, error)
	hooks       []func(context.Context, int32, string) (*featureflag.Override, error)
	history     []FeatureFlagStoreGetOrgOverrideForFlagFuncCall
	mutex       sync.Mutex
}

// GetOrgOverrideForFlag delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) GetOrgOverrideForFlag(v0 context.Context, v1 int32, v2 string) (*featureflag.Override, error) {
	r0, r1 := m.GetOrgOverrideForFlagFunc.nextHook()(v0, v1, v2)
	m.GetOrgOverrideForFlagFunc.appendCall(FeatureFlagStoreGetOrgOverrideForFlagFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetOrgOverrideForFlag method of the parent MockFeatureFlagStore instance
// is invoked and the hook queue is empty.
func (f *FeatureFlagStoreGetOrgOverrideForFlagFunc) SetDefaultHook(hook func(context.Context, int32, string) (*featureflag.Override, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetOrgOverrideForFlag method of the parent MockFeatureFlagStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *FeatureFlagStoreGetOrgOverrideForFlagFunc) PushHook(hook func(context.Context, int32, string) (*featureflag.Override, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *FeatureFlagStoreGetOrgOverrideForFlagFunc) SetDefaultReturn(r0 *featureflag.Override, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, string) (*featureflag.Override, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *FeatureFlagStoreGetOrgOverrideForFlagFunc) PushReturn(r0 *featureflag.Override, r1 error) {
	f.PushHook(func(context.Context, int32, string) (*featureflag.Override, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreGetOrgOverrideForFlagFunc) nextHook() func(context.Context, int32, string) (*featureflag.Override, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreGetOrgOverrideForFlagFunc) appendCall(r0 FeatureFlagStoreGetOrgOverrideForFlagFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// FeatureFlagStoreGetOrgOverrideForFlagFuncCall objects describing the
// invocations of this function.
func (f *FeatureFlagStoreGetOrgOverrideForFlagFunc) History() []FeatureFlagStoreGetOrgOverrideForFlagFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreGetOrgOverrideForFlagFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreGetOrgOverrideForFlagFuncCall is an object that describes
// an invocation of method GetOrgOverrideForFlag on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreGetOrgOverrideForFlagFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *featureflag.Override
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreGetOrgOverrideForFlagFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreGetOrgOverrideForFlagFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreGetOrgOverridesForUserFunc describes the behavior when
// the GetOrgOverridesForUser method of the parent MockFeatureFlagStore
// instance is invoked.
type FeatureFlagStoreGetOrgOverridesForUserFunc struct {
	defaultHook func(context.Context, int32) ([]*featureflag.Override, error)
	hooks       []func(context.Context, int32) ([]*featureflag.Override, error)
	history     []FeatureFlagStoreGetOrgOverridesForUserFuncCall
	mutex       sync.Mutex
}

// GetOrgOverridesForUser delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) GetOrgOverridesForUser(v0 context.Context, v1 int32) ([]*featureflag.Override, error) {
	r0, r1 := m.GetOrgOverridesForUserFunc.nextHook()(v0, v1)
	m.GetOrgOverridesForUserFunc.appendCall(FeatureFlagStoreGetOrgOverridesForUserFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetOrgOverridesForUser method of the parent MockFeatureFlagStore instance
// is invoked and the hook queue is empty.
func (f *FeatureFlagStoreGetOrgOverridesForUserFunc) SetDefaultHook(hook func(context.Context, int32) ([]*featureflag.Override, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetOrgOverridesForUser method of the parent MockFeatureFlagStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *FeatureFlagStoreGetOrgOverridesForUserFunc) PushHook(hook func(context.Context, int32) ([]*featureflag.Override, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *FeatureFlagStoreGetOrgOverridesForUserFunc) SetDefaultReturn(r0 []*featureflag.Override, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) ([]*featureflag.Override, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *FeatureFlagStoreGetOrgOverridesForUserFunc) PushReturn(r0 []*featureflag.Override, r1 error) {
	f.PushHook(func(context.Context, int32) ([]*featureflag.Override, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreGetOrgOverridesForUserFunc) nextHook() func(context.Context, int32) ([]*featureflag.Override, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreGetOrgOverridesForUserFunc) appendCall(r0 FeatureFlagStoreGetOrgOverridesForUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// FeatureFlagStoreGetOrgOverridesForUserFuncCall objects describing the
// invocations of this function.
func (f *FeatureFlagStoreGetOrgOverridesForUserFunc) History() []FeatureFlagStoreGetOrgOverridesForUserFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreGetOrgOverridesForUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreGetOrgOverridesForUserFuncCall is an object that
// describes an invocation of method GetOrgOverridesForUser on an instance
// of MockFeatureFlagStore.
type FeatureFlagStoreGetOrgOverridesForUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*featureflag.Override
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreGetOrgOverridesForUserFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreGetOrgOverridesForUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreGetOverridesForFlagFunc describes the behavior when the
// GetOverridesForFlag method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreGetOverridesForFlagFunc struct {
	defaultHook func(context.Context, string) ([]*featureflag.Override, error)
	hooks       []func(context.Context, string) ([]*featureflag.Override, error)
	history     []FeatureFlagStoreGetOverridesForFlagFuncCall
	mutex       sync.Mutex
}

// GetOverridesForFlag delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) GetOverridesForFlag(v0 context.Context, v1 string) ([]*featureflag.Override, error) {
	r0, r1 := m.GetOverridesForFlagFunc.nextHook()(v0, v1)
	m.GetOverridesForFlagFunc.appendCall(FeatureFlagStoreGetOverridesForFlagFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetOverridesForFlag
// method of the parent MockFeatureFlagStore instance is invoked and the
// hook queue is empty.
func (f *FeatureFlagStoreGetOverridesForFlagFunc) SetDefaultHook(hook func(context.Context, string) ([]*featureflag.Override, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetOverridesForFlag method of the parent MockFeatureFlagStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *FeatureFlagStoreGetOverridesForFlagFunc) PushHook(hook func(context.Context, string) ([]*featureflag.Override, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *FeatureFlagStoreGetOverridesForFlagFunc) SetDefaultReturn(r0 []*featureflag.Override, r1 error) {
	f.SetDefaultHook(func(context.Context, string) ([]*featureflag.Override, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *FeatureFlagStoreGetOverridesForFlagFunc) PushReturn(r0 []*featureflag.Override, r1 error) {
	f.PushHook(func(context.Context, string) ([]*featureflag.Override, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreGetOverridesForFlagFunc) nextHook() func(context.Context, string) ([]*featureflag.Override, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreGetOverridesForFlagFunc) appendCall(r0 FeatureFlagStoreGetOverridesForFlagFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreGetOverridesForFlagFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreGetOverridesForFlagFunc) History() []FeatureFlagStoreGetOverridesForFlagFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreGetOverridesForFlagFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreGetOverridesForFlagFuncCall is an object that describes
// an invocation of method GetOverridesForFlag on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreGetOverridesForFlagFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*featureflag.Override
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreGetOverridesForFlagFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreGetOverridesForFlagFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreGetUserFlagsFunc describes the behavior when the
// GetUserFlags method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreGetUserFlagsFunc struct {
	defaultHook func(context.Context, int32) (map[string]bool, error)
	hooks       []func(context.Context, int32) (map[string]bool, error)
	history     []FeatureFlagStoreGetUserFlagsFuncCall
	mutex       sync.Mutex
}

// GetUserFlags delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) GetUserFlags(v0 context.Context, v1 int32) (map[string]bool, error) {
	r0, r1 := m.GetUserFlagsFunc.nextHook()(v0, v1)
	m.GetUserFlagsFunc.appendCall(FeatureFlagStoreGetUserFlagsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetUserFlags method
// of the parent MockFeatureFlagStore instance is invoked and the hook queue
// is empty.
func (f *FeatureFlagStoreGetUserFlagsFunc) SetDefaultHook(hook func(context.Context, int32) (map[string]bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUserFlags method of the parent MockFeatureFlagStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *FeatureFlagStoreGetUserFlagsFunc) PushHook(hook func(context.Context, int32) (map[string]bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *FeatureFlagStoreGetUserFlagsFunc) SetDefaultReturn(r0 map[string]bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (map[string]bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *FeatureFlagStoreGetUserFlagsFunc) PushReturn(r0 map[string]bool, r1 error) {
	f.PushHook(func(context.Context, int32) (map[string]bool, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreGetUserFlagsFunc) nextHook() func(context.Context, int32) (map[string]bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreGetUserFlagsFunc) appendCall(r0 FeatureFlagStoreGetUserFlagsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreGetUserFlagsFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreGetUserFlagsFunc) History() []FeatureFlagStoreGetUserFlagsFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreGetUserFlagsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreGetUserFlagsFuncCall is an object that describes an
// invocation of method GetUserFlags on an instance of MockFeatureFlagStore.
type FeatureFlagStoreGetUserFlagsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[string]bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreGetUserFlagsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreGetUserFlagsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreGetUserOverridesFunc describes the behavior when the
// GetUserOverrides method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreGetUserOverridesFunc struct {
	defaultHook func(context.Context, int32) ([]*featureflag.Override, error)
	hooks       []func(context.Context, int32) ([]*featureflag.Override, error)
	history     []FeatureFlagStoreGetUserOverridesFuncCall
	mutex       sync.Mutex
}

// GetUserOverrides delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) GetUserOverrides(v0 context.Context, v1 int32) ([]*featureflag.Override, error) {
	r0, r1 := m.GetUserOverridesFunc.nextHook()(v0, v1)
	m.GetUserOverridesFunc.appendCall(FeatureFlagStoreGetUserOverridesFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetUserOverrides
// method of the parent MockFeatureFlagStore instance is invoked and the
// hook queue is empty.
func (f *FeatureFlagStoreGetUserOverridesFunc) SetDefaultHook(hook func(context.Context, int32) ([]*featureflag.Override, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUserOverrides method of the parent MockFeatureFlagStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *FeatureFlagStoreGetUserOverridesFunc) PushHook(hook func(context.Context, int32) ([]*featureflag.Override, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *FeatureFlagStoreGetUserOverridesFunc) SetDefaultReturn(r0 []*featureflag.Override, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) ([]*featureflag.Override, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *FeatureFlagStoreGetUserOverridesFunc) PushReturn(r0 []*featureflag.Override, r1 error) {
	f.PushHook(func(context.Context, int32) ([]*featureflag.Override, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreGetUserOverridesFunc) nextHook() func(context.Context, int32) ([]*featureflag.Override, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreGetUserOverridesFunc) appendCall(r0 FeatureFlagStoreGetUserOverridesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreGetUserOverridesFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreGetUserOverridesFunc) History() []FeatureFlagStoreGetUserOverridesFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreGetUserOverridesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreGetUserOverridesFuncCall is an object that describes an
// invocation of method GetUserOverrides on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreGetUserOverridesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*featureflag.Override
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreGetUserOverridesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreGetUserOverridesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreHandleFunc describes the behavior when the Handle method
// of the parent MockFeatureFlagStore instance is invoked.
type FeatureFlagStoreHandleFunc struct {
	defaultHook func() *basestore.TransactableHandle
	hooks       []func() *basestore.TransactableHandle
	history     []FeatureFlagStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockFeatureFlagStore) Handle() *basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(FeatureFlagStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockFeatureFlagStore instance is invoked and the hook queue is
// empty.
func (f *FeatureFlagStoreHandleFunc) SetDefaultHook(hook func() *basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockFeatureFlagStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *FeatureFlagStoreHandleFunc) PushHook(hook func() *basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *FeatureFlagStoreHandleFunc) SetDefaultReturn(r0 *basestore.TransactableHandle) {
	f.SetDefaultHook(func() *basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *FeatureFlagStoreHandleFunc) PushReturn(r0 *basestore.TransactableHandle) {
	f.PushHook(func() *basestore.TransactableHandle {
		return r0
	})
}

func (f *FeatureFlagStoreHandleFunc) nextHook() func() *basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreHandleFunc) appendCall(r0 FeatureFlagStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *FeatureFlagStoreHandleFunc) History() []FeatureFlagStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreHandleFuncCall is an object that describes an invocation
// of method Handle on an instance of MockFeatureFlagStore.
type FeatureFlagStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// FeatureFlagStoreTransactFunc describes the behavior when the Transact
// method of the parent MockFeatureFlagStore instance is invoked.
type FeatureFlagStoreTransactFunc struct {
	defaultHook func(context.Context) (database.FeatureFlagStore, error)
	hooks       []func(context.Context) (database.FeatureFlagStore, error)
	history     []FeatureFlagStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockFeatureFlagStore) Transact(v0 context.Context) (database.FeatureFlagStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(FeatureFlagStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockFeatureFlagStore instance is invoked and the hook queue is
// empty.
func (f *FeatureFlagStoreTransactFunc) SetDefaultHook(hook func(context.Context) (database.FeatureFlagStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockFeatureFlagStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *FeatureFlagStoreTransactFunc) PushHook(hook func(context.Context) (database.FeatureFlagStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *FeatureFlagStoreTransactFunc) SetDefaultReturn(r0 database.FeatureFlagStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (database.FeatureFlagStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *FeatureFlagStoreTransactFunc) PushReturn(r0 database.FeatureFlagStore, r1 error) {
	f.PushHook(func(context.Context) (database.FeatureFlagStore, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreTransactFunc) nextHook() func(context.Context) (database.FeatureFlagStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreTransactFunc) appendCall(r0 FeatureFlagStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *FeatureFlagStoreTransactFunc) History() []FeatureFlagStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreTransactFuncCall is an object that describes an
// invocation of method Transact on an instance of MockFeatureFlagStore.
type FeatureFlagStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.FeatureFlagStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreUpdateFeatureFlagFunc describes the behavior when the
// UpdateFeatureFlag method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreUpdateFeatureFlagFunc struct {
	defaultHook func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error)
	hooks       []func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error)
	history     []FeatureFlagStoreUpdateFeatureFlagFuncCall
	mutex       sync.Mutex
}

// UpdateFeatureFlag delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) UpdateFeatureFlag(v0 context.Context, v1 *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error) {
	r0, r1 := m.UpdateFeatureFlagFunc.nextHook()(v0, v1)
	m.UpdateFeatureFlagFunc.appendCall(FeatureFlagStoreUpdateFeatureFlagFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the UpdateFeatureFlag
// method of the parent MockFeatureFlagStore instance is invoked and the
// hook queue is empty.
func (f *FeatureFlagStoreUpdateFeatureFlagFunc) SetDefaultHook(hook func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateFeatureFlag method of the parent MockFeatureFlagStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *FeatureFlagStoreUpdateFeatureFlagFunc) PushHook(hook func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *FeatureFlagStoreUpdateFeatureFlagFunc) SetDefaultReturn(r0 *featureflag.FeatureFlag, r1 error) {
	f.SetDefaultHook(func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *FeatureFlagStoreUpdateFeatureFlagFunc) PushReturn(r0 *featureflag.FeatureFlag, r1 error) {
	f.PushHook(func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreUpdateFeatureFlagFunc) nextHook() func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreUpdateFeatureFlagFunc) appendCall(r0 FeatureFlagStoreUpdateFeatureFlagFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreUpdateFeatureFlagFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreUpdateFeatureFlagFunc) History() []FeatureFlagStoreUpdateFeatureFlagFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreUpdateFeatureFlagFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreUpdateFeatureFlagFuncCall is an object that describes an
// invocation of method UpdateFeatureFlag on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreUpdateFeatureFlagFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *featureflag.FeatureFlag
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *featureflag.FeatureFlag
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreUpdateFeatureFlagFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreUpdateFeatureFlagFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreUpdateOverrideFunc describes the behavior when the
// UpdateOverride method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreUpdateOverrideFunc struct {
	defaultHook func(context.Context, *int32, *int32, string, bool) (*featureflag.Override, error)
	hooks       []func(context.Context, *int32, *int32, string, bool) (*featureflag.Override, error)
	history     []FeatureFlagStoreUpdateOverrideFuncCall
	mutex       sync.Mutex
}

// UpdateOverride delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) UpdateOverride(v0 context.Context, v1 *int32, v2 *int32, v3 string, v4 bool) (*featureflag.Override, error) {
	r0, r1 := m.UpdateOverrideFunc.nextHook()(v0, v1, v2, v3, v4)
	m.UpdateOverrideFunc.appendCall(FeatureFlagStoreUpdateOverrideFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the UpdateOverride
// method of the parent MockFeatureFlagStore instance is invoked and the
// hook queue is empty.
func (f *FeatureFlagStoreUpdateOverrideFunc) SetDefaultHook(hook func(context.Context, *int32, *int32, string, bool) (*featureflag.Override, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateOverride method of the parent MockFeatureFlagStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *FeatureFlagStoreUpdateOverrideFunc) PushHook(hook func(context.Context, *int32, *int32, string, bool) (*featureflag.Override, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *FeatureFlagStoreUpdateOverrideFunc) SetDefaultReturn(r0 *featureflag.Override, r1 error) {
	f.SetDefaultHook(func(context.Context, *int32, *int32, string, bool) (*featureflag.Override, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *FeatureFlagStoreUpdateOverrideFunc) PushReturn(r0 *featureflag.Override, r1 error) {
	f.PushHook(func(context.Context, *int32, *int32, string, bool) (*featureflag.Override, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreUpdateOverrideFunc) nextHook() func(context.Context, *int32, *int32, string, bool) (*featureflag.Override, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreUpdateOverrideFunc) appendCall(r0 FeatureFlagStoreUpdateOverrideFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreUpdateOverrideFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreUpdateOverrideFunc) History() []FeatureFlagStoreUpdateOverrideFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreUpdateOverrideFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreUpdateOverrideFuncCall is an object that describes an
// invocation of method UpdateOverride on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreUpdateOverrideFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *int32
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *featureflag.Override
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreUpdateOverrideFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreUpdateOverrideFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreWithFunc describes the behavior when the With method of
// the parent MockFeatureFlagStore instance is invoked.
type FeatureFlagStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) database.FeatureFlagStore
	hooks       []func(basestore.ShareableStore) database.FeatureFlagStore
	history     []FeatureFlagStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockFeatureFlagStore) With(v0 basestore.ShareableStore) database.FeatureFlagStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(FeatureFlagStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockFeatureFlagStore instance is invoked and the hook queue is
// empty.
func (f *FeatureFlagStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) database.FeatureFlagStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockFeatureFlagStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *FeatureFlagStoreWithFunc) PushHook(hook func(basestore.ShareableStore) database.FeatureFlagStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *FeatureFlagStoreWithFunc) SetDefaultReturn(r0 database.FeatureFlagStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) database.FeatureFlagStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *FeatureFlagStoreWithFunc) PushReturn(r0 database.FeatureFlagStore) {
	f.PushHook(func(basestore.ShareableStore) database.FeatureFlagStore {
		return r0
	})
}

func (f *FeatureFlagStoreWithFunc) nextHook() func(basestore.ShareableStore) database.FeatureFlagStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreWithFunc) appendCall(r0 FeatureFlagStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreWithFuncCall objects
// describing the invocations of this function.
func (f *FeatureFlagStoreWithFunc) History() []FeatureFlagStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockFeatureFlagStore.
type FeatureFlagStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.FeatureFlagStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
