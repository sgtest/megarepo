// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package dbmock

import (
	"context"
	"sync"
	"time"

	conf "github.com/sourcegraph/sourcegraph/internal/conf"
	database "github.com/sourcegraph/sourcegraph/internal/database"
	basestore "github.com/sourcegraph/sourcegraph/internal/database/basestore"
	encryption "github.com/sourcegraph/sourcegraph/internal/encryption"
	types "github.com/sourcegraph/sourcegraph/internal/types"
	schema "github.com/sourcegraph/sourcegraph/schema"
)

// MockExternalServiceStore is a mock implementation of the
// ExternalServiceStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockExternalServiceStore struct {
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *ExternalServiceStoreCountFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *ExternalServiceStoreCreateFunc
	// DeleteFunc is an instance of a mock function object controlling the
	// behavior of the method Delete.
	DeleteFunc *ExternalServiceStoreDeleteFunc
	// DistinctKindsFunc is an instance of a mock function object
	// controlling the behavior of the method DistinctKinds.
	DistinctKindsFunc *ExternalServiceStoreDistinctKindsFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *ExternalServiceStoreDoneFunc
	// GetAffiliatedSyncErrorsFunc is an instance of a mock function object
	// controlling the behavior of the method GetAffiliatedSyncErrors.
	GetAffiliatedSyncErrorsFunc *ExternalServiceStoreGetAffiliatedSyncErrorsFunc
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *ExternalServiceStoreGetByIDFunc
	// GetLastSyncErrorFunc is an instance of a mock function object
	// controlling the behavior of the method GetLastSyncError.
	GetLastSyncErrorFunc *ExternalServiceStoreGetLastSyncErrorFunc
	// GetSyncJobsFunc is an instance of a mock function object controlling
	// the behavior of the method GetSyncJobs.
	GetSyncJobsFunc *ExternalServiceStoreGetSyncJobsFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *ExternalServiceStoreHandleFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *ExternalServiceStoreListFunc
	// RepoCountFunc is an instance of a mock function object controlling
	// the behavior of the method RepoCount.
	RepoCountFunc *ExternalServiceStoreRepoCountFunc
	// SyncDueFunc is an instance of a mock function object controlling the
	// behavior of the method SyncDue.
	SyncDueFunc *ExternalServiceStoreSyncDueFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *ExternalServiceStoreTransactFunc
	// UpdateFunc is an instance of a mock function object controlling the
	// behavior of the method Update.
	UpdateFunc *ExternalServiceStoreUpdateFunc
	// UpsertFunc is an instance of a mock function object controlling the
	// behavior of the method Upsert.
	UpsertFunc *ExternalServiceStoreUpsertFunc
	// ValidateConfigFunc is an instance of a mock function object
	// controlling the behavior of the method ValidateConfig.
	ValidateConfigFunc *ExternalServiceStoreValidateConfigFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *ExternalServiceStoreWithFunc
	// WithEncryptionKeyFunc is an instance of a mock function object
	// controlling the behavior of the method WithEncryptionKey.
	WithEncryptionKeyFunc *ExternalServiceStoreWithEncryptionKeyFunc
}

// NewMockExternalServiceStore creates a new mock of the
// ExternalServiceStore interface. All methods return zero values for all
// results, unless overwritten.
func NewMockExternalServiceStore() *MockExternalServiceStore {
	return &MockExternalServiceStore{
		CountFunc: &ExternalServiceStoreCountFunc{
			defaultHook: func(context.Context, database.ExternalServicesListOptions) (int, error) {
				return 0, nil
			},
		},
		CreateFunc: &ExternalServiceStoreCreateFunc{
			defaultHook: func(context.Context, func() *conf.Unified, *types.ExternalService) error {
				return nil
			},
		},
		DeleteFunc: &ExternalServiceStoreDeleteFunc{
			defaultHook: func(context.Context, int64) error {
				return nil
			},
		},
		DistinctKindsFunc: &ExternalServiceStoreDistinctKindsFunc{
			defaultHook: func(context.Context) ([]string, error) {
				return nil, nil
			},
		},
		DoneFunc: &ExternalServiceStoreDoneFunc{
			defaultHook: func(error) error {
				return nil
			},
		},
		GetAffiliatedSyncErrorsFunc: &ExternalServiceStoreGetAffiliatedSyncErrorsFunc{
			defaultHook: func(context.Context, *types.User) (map[int64]string, error) {
				return nil, nil
			},
		},
		GetByIDFunc: &ExternalServiceStoreGetByIDFunc{
			defaultHook: func(context.Context, int64) (*types.ExternalService, error) {
				return nil, nil
			},
		},
		GetLastSyncErrorFunc: &ExternalServiceStoreGetLastSyncErrorFunc{
			defaultHook: func(context.Context, int64) (string, error) {
				return "", nil
			},
		},
		GetSyncJobsFunc: &ExternalServiceStoreGetSyncJobsFunc{
			defaultHook: func(context.Context) ([]*types.ExternalServiceSyncJob, error) {
				return nil, nil
			},
		},
		HandleFunc: &ExternalServiceStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				return nil
			},
		},
		ListFunc: &ExternalServiceStoreListFunc{
			defaultHook: func(context.Context, database.ExternalServicesListOptions) ([]*types.ExternalService, error) {
				return nil, nil
			},
		},
		RepoCountFunc: &ExternalServiceStoreRepoCountFunc{
			defaultHook: func(context.Context, int64) (int32, error) {
				return 0, nil
			},
		},
		SyncDueFunc: &ExternalServiceStoreSyncDueFunc{
			defaultHook: func(context.Context, []int64, time.Duration) (bool, error) {
				return false, nil
			},
		},
		TransactFunc: &ExternalServiceStoreTransactFunc{
			defaultHook: func(context.Context) (database.ExternalServiceStore, error) {
				return nil, nil
			},
		},
		UpdateFunc: &ExternalServiceStoreUpdateFunc{
			defaultHook: func(context.Context, []schema.AuthProviders, int64, *database.ExternalServiceUpdate) error {
				return nil
			},
		},
		UpsertFunc: &ExternalServiceStoreUpsertFunc{
			defaultHook: func(context.Context, ...*types.ExternalService) error {
				return nil
			},
		},
		ValidateConfigFunc: &ExternalServiceStoreValidateConfigFunc{
			defaultHook: func(context.Context, database.ValidateExternalServiceConfigOptions) ([]byte, error) {
				return nil, nil
			},
		},
		WithFunc: &ExternalServiceStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) database.ExternalServiceStore {
				return nil
			},
		},
		WithEncryptionKeyFunc: &ExternalServiceStoreWithEncryptionKeyFunc{
			defaultHook: func(encryption.Key) database.ExternalServiceStore {
				return nil
			},
		},
	}
}

// NewStrictMockExternalServiceStore creates a new mock of the
// ExternalServiceStore interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockExternalServiceStore() *MockExternalServiceStore {
	return &MockExternalServiceStore{
		CountFunc: &ExternalServiceStoreCountFunc{
			defaultHook: func(context.Context, database.ExternalServicesListOptions) (int, error) {
				panic("unexpected invocation of MockExternalServiceStore.Count")
			},
		},
		CreateFunc: &ExternalServiceStoreCreateFunc{
			defaultHook: func(context.Context, func() *conf.Unified, *types.ExternalService) error {
				panic("unexpected invocation of MockExternalServiceStore.Create")
			},
		},
		DeleteFunc: &ExternalServiceStoreDeleteFunc{
			defaultHook: func(context.Context, int64) error {
				panic("unexpected invocation of MockExternalServiceStore.Delete")
			},
		},
		DistinctKindsFunc: &ExternalServiceStoreDistinctKindsFunc{
			defaultHook: func(context.Context) ([]string, error) {
				panic("unexpected invocation of MockExternalServiceStore.DistinctKinds")
			},
		},
		DoneFunc: &ExternalServiceStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockExternalServiceStore.Done")
			},
		},
		GetAffiliatedSyncErrorsFunc: &ExternalServiceStoreGetAffiliatedSyncErrorsFunc{
			defaultHook: func(context.Context, *types.User) (map[int64]string, error) {
				panic("unexpected invocation of MockExternalServiceStore.GetAffiliatedSyncErrors")
			},
		},
		GetByIDFunc: &ExternalServiceStoreGetByIDFunc{
			defaultHook: func(context.Context, int64) (*types.ExternalService, error) {
				panic("unexpected invocation of MockExternalServiceStore.GetByID")
			},
		},
		GetLastSyncErrorFunc: &ExternalServiceStoreGetLastSyncErrorFunc{
			defaultHook: func(context.Context, int64) (string, error) {
				panic("unexpected invocation of MockExternalServiceStore.GetLastSyncError")
			},
		},
		GetSyncJobsFunc: &ExternalServiceStoreGetSyncJobsFunc{
			defaultHook: func(context.Context) ([]*types.ExternalServiceSyncJob, error) {
				panic("unexpected invocation of MockExternalServiceStore.GetSyncJobs")
			},
		},
		HandleFunc: &ExternalServiceStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				panic("unexpected invocation of MockExternalServiceStore.Handle")
			},
		},
		ListFunc: &ExternalServiceStoreListFunc{
			defaultHook: func(context.Context, database.ExternalServicesListOptions) ([]*types.ExternalService, error) {
				panic("unexpected invocation of MockExternalServiceStore.List")
			},
		},
		RepoCountFunc: &ExternalServiceStoreRepoCountFunc{
			defaultHook: func(context.Context, int64) (int32, error) {
				panic("unexpected invocation of MockExternalServiceStore.RepoCount")
			},
		},
		SyncDueFunc: &ExternalServiceStoreSyncDueFunc{
			defaultHook: func(context.Context, []int64, time.Duration) (bool, error) {
				panic("unexpected invocation of MockExternalServiceStore.SyncDue")
			},
		},
		TransactFunc: &ExternalServiceStoreTransactFunc{
			defaultHook: func(context.Context) (database.ExternalServiceStore, error) {
				panic("unexpected invocation of MockExternalServiceStore.Transact")
			},
		},
		UpdateFunc: &ExternalServiceStoreUpdateFunc{
			defaultHook: func(context.Context, []schema.AuthProviders, int64, *database.ExternalServiceUpdate) error {
				panic("unexpected invocation of MockExternalServiceStore.Update")
			},
		},
		UpsertFunc: &ExternalServiceStoreUpsertFunc{
			defaultHook: func(context.Context, ...*types.ExternalService) error {
				panic("unexpected invocation of MockExternalServiceStore.Upsert")
			},
		},
		ValidateConfigFunc: &ExternalServiceStoreValidateConfigFunc{
			defaultHook: func(context.Context, database.ValidateExternalServiceConfigOptions) ([]byte, error) {
				panic("unexpected invocation of MockExternalServiceStore.ValidateConfig")
			},
		},
		WithFunc: &ExternalServiceStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) database.ExternalServiceStore {
				panic("unexpected invocation of MockExternalServiceStore.With")
			},
		},
		WithEncryptionKeyFunc: &ExternalServiceStoreWithEncryptionKeyFunc{
			defaultHook: func(encryption.Key) database.ExternalServiceStore {
				panic("unexpected invocation of MockExternalServiceStore.WithEncryptionKey")
			},
		},
	}
}

// NewMockExternalServiceStoreFrom creates a new mock of the
// MockExternalServiceStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockExternalServiceStoreFrom(i database.ExternalServiceStore) *MockExternalServiceStore {
	return &MockExternalServiceStore{
		CountFunc: &ExternalServiceStoreCountFunc{
			defaultHook: i.Count,
		},
		CreateFunc: &ExternalServiceStoreCreateFunc{
			defaultHook: i.Create,
		},
		DeleteFunc: &ExternalServiceStoreDeleteFunc{
			defaultHook: i.Delete,
		},
		DistinctKindsFunc: &ExternalServiceStoreDistinctKindsFunc{
			defaultHook: i.DistinctKinds,
		},
		DoneFunc: &ExternalServiceStoreDoneFunc{
			defaultHook: i.Done,
		},
		GetAffiliatedSyncErrorsFunc: &ExternalServiceStoreGetAffiliatedSyncErrorsFunc{
			defaultHook: i.GetAffiliatedSyncErrors,
		},
		GetByIDFunc: &ExternalServiceStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		GetLastSyncErrorFunc: &ExternalServiceStoreGetLastSyncErrorFunc{
			defaultHook: i.GetLastSyncError,
		},
		GetSyncJobsFunc: &ExternalServiceStoreGetSyncJobsFunc{
			defaultHook: i.GetSyncJobs,
		},
		HandleFunc: &ExternalServiceStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListFunc: &ExternalServiceStoreListFunc{
			defaultHook: i.List,
		},
		RepoCountFunc: &ExternalServiceStoreRepoCountFunc{
			defaultHook: i.RepoCount,
		},
		SyncDueFunc: &ExternalServiceStoreSyncDueFunc{
			defaultHook: i.SyncDue,
		},
		TransactFunc: &ExternalServiceStoreTransactFunc{
			defaultHook: i.Transact,
		},
		UpdateFunc: &ExternalServiceStoreUpdateFunc{
			defaultHook: i.Update,
		},
		UpsertFunc: &ExternalServiceStoreUpsertFunc{
			defaultHook: i.Upsert,
		},
		ValidateConfigFunc: &ExternalServiceStoreValidateConfigFunc{
			defaultHook: i.ValidateConfig,
		},
		WithFunc: &ExternalServiceStoreWithFunc{
			defaultHook: i.With,
		},
		WithEncryptionKeyFunc: &ExternalServiceStoreWithEncryptionKeyFunc{
			defaultHook: i.WithEncryptionKey,
		},
	}
}

// ExternalServiceStoreCountFunc describes the behavior when the Count
// method of the parent MockExternalServiceStore instance is invoked.
type ExternalServiceStoreCountFunc struct {
	defaultHook func(context.Context, database.ExternalServicesListOptions) (int, error)
	hooks       []func(context.Context, database.ExternalServicesListOptions) (int, error)
	history     []ExternalServiceStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) Count(v0 context.Context, v1 database.ExternalServicesListOptions) (int, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(ExternalServiceStoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockExternalServiceStore instance is invoked and the hook queue is
// empty.
func (f *ExternalServiceStoreCountFunc) SetDefaultHook(hook func(context.Context, database.ExternalServicesListOptions) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockExternalServiceStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExternalServiceStoreCountFunc) PushHook(hook func(context.Context, database.ExternalServicesListOptions) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ExternalServiceStoreCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, database.ExternalServicesListOptions) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ExternalServiceStoreCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, database.ExternalServicesListOptions) (int, error) {
		return r0, r1
	})
}

func (f *ExternalServiceStoreCountFunc) nextHook() func(context.Context, database.ExternalServicesListOptions) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreCountFunc) appendCall(r0 ExternalServiceStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreCountFuncCall objects
// describing the invocations of this function.
func (f *ExternalServiceStoreCountFunc) History() []ExternalServiceStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreCountFuncCall is an object that describes an
// invocation of method Count on an instance of MockExternalServiceStore.
type ExternalServiceStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.ExternalServicesListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExternalServiceStoreCreateFunc describes the behavior when the Create
// method of the parent MockExternalServiceStore instance is invoked.
type ExternalServiceStoreCreateFunc struct {
	defaultHook func(context.Context, func() *conf.Unified, *types.ExternalService) error
	hooks       []func(context.Context, func() *conf.Unified, *types.ExternalService) error
	history     []ExternalServiceStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) Create(v0 context.Context, v1 func() *conf.Unified, v2 *types.ExternalService) error {
	r0 := m.CreateFunc.nextHook()(v0, v1, v2)
	m.CreateFunc.appendCall(ExternalServiceStoreCreateFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockExternalServiceStore instance is invoked and the hook queue is
// empty.
func (f *ExternalServiceStoreCreateFunc) SetDefaultHook(hook func(context.Context, func() *conf.Unified, *types.ExternalService) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockExternalServiceStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExternalServiceStoreCreateFunc) PushHook(hook func(context.Context, func() *conf.Unified, *types.ExternalService) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ExternalServiceStoreCreateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, func() *conf.Unified, *types.ExternalService) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ExternalServiceStoreCreateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, func() *conf.Unified, *types.ExternalService) error {
		return r0
	})
}

func (f *ExternalServiceStoreCreateFunc) nextHook() func(context.Context, func() *conf.Unified, *types.ExternalService) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreCreateFunc) appendCall(r0 ExternalServiceStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreCreateFuncCall objects
// describing the invocations of this function.
func (f *ExternalServiceStoreCreateFunc) History() []ExternalServiceStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreCreateFuncCall is an object that describes an
// invocation of method Create on an instance of MockExternalServiceStore.
type ExternalServiceStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 func() *conf.Unified
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *types.ExternalService
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExternalServiceStoreDeleteFunc describes the behavior when the Delete
// method of the parent MockExternalServiceStore instance is invoked.
type ExternalServiceStoreDeleteFunc struct {
	defaultHook func(context.Context, int64) error
	hooks       []func(context.Context, int64) error
	history     []ExternalServiceStoreDeleteFuncCall
	mutex       sync.Mutex
}

// Delete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) Delete(v0 context.Context, v1 int64) error {
	r0 := m.DeleteFunc.nextHook()(v0, v1)
	m.DeleteFunc.appendCall(ExternalServiceStoreDeleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Delete method of the
// parent MockExternalServiceStore instance is invoked and the hook queue is
// empty.
func (f *ExternalServiceStoreDeleteFunc) SetDefaultHook(hook func(context.Context, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Delete method of the parent MockExternalServiceStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExternalServiceStoreDeleteFunc) PushHook(hook func(context.Context, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ExternalServiceStoreDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ExternalServiceStoreDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64) error {
		return r0
	})
}

func (f *ExternalServiceStoreDeleteFunc) nextHook() func(context.Context, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreDeleteFunc) appendCall(r0 ExternalServiceStoreDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreDeleteFuncCall objects
// describing the invocations of this function.
func (f *ExternalServiceStoreDeleteFunc) History() []ExternalServiceStoreDeleteFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreDeleteFuncCall is an object that describes an
// invocation of method Delete on an instance of MockExternalServiceStore.
type ExternalServiceStoreDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExternalServiceStoreDistinctKindsFunc describes the behavior when the
// DistinctKinds method of the parent MockExternalServiceStore instance is
// invoked.
type ExternalServiceStoreDistinctKindsFunc struct {
	defaultHook func(context.Context) ([]string, error)
	hooks       []func(context.Context) ([]string, error)
	history     []ExternalServiceStoreDistinctKindsFuncCall
	mutex       sync.Mutex
}

// DistinctKinds delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockExternalServiceStore) DistinctKinds(v0 context.Context) ([]string, error) {
	r0, r1 := m.DistinctKindsFunc.nextHook()(v0)
	m.DistinctKindsFunc.appendCall(ExternalServiceStoreDistinctKindsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DistinctKinds method
// of the parent MockExternalServiceStore instance is invoked and the hook
// queue is empty.
func (f *ExternalServiceStoreDistinctKindsFunc) SetDefaultHook(hook func(context.Context) ([]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DistinctKinds method of the parent MockExternalServiceStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ExternalServiceStoreDistinctKindsFunc) PushHook(hook func(context.Context) ([]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ExternalServiceStoreDistinctKindsFunc) SetDefaultReturn(r0 []string, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ExternalServiceStoreDistinctKindsFunc) PushReturn(r0 []string, r1 error) {
	f.PushHook(func(context.Context) ([]string, error) {
		return r0, r1
	})
}

func (f *ExternalServiceStoreDistinctKindsFunc) nextHook() func(context.Context) ([]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreDistinctKindsFunc) appendCall(r0 ExternalServiceStoreDistinctKindsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreDistinctKindsFuncCall
// objects describing the invocations of this function.
func (f *ExternalServiceStoreDistinctKindsFunc) History() []ExternalServiceStoreDistinctKindsFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreDistinctKindsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreDistinctKindsFuncCall is an object that describes an
// invocation of method DistinctKinds on an instance of
// MockExternalServiceStore.
type ExternalServiceStoreDistinctKindsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreDistinctKindsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreDistinctKindsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExternalServiceStoreDoneFunc describes the behavior when the Done method
// of the parent MockExternalServiceStore instance is invoked.
type ExternalServiceStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []ExternalServiceStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(ExternalServiceStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockExternalServiceStore instance is invoked and the hook queue is
// empty.
func (f *ExternalServiceStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockExternalServiceStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExternalServiceStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ExternalServiceStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ExternalServiceStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *ExternalServiceStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreDoneFunc) appendCall(r0 ExternalServiceStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreDoneFuncCall objects
// describing the invocations of this function.
func (f *ExternalServiceStoreDoneFunc) History() []ExternalServiceStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreDoneFuncCall is an object that describes an
// invocation of method Done on an instance of MockExternalServiceStore.
type ExternalServiceStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExternalServiceStoreGetAffiliatedSyncErrorsFunc describes the behavior
// when the GetAffiliatedSyncErrors method of the parent
// MockExternalServiceStore instance is invoked.
type ExternalServiceStoreGetAffiliatedSyncErrorsFunc struct {
	defaultHook func(context.Context, *types.User) (map[int64]string, error)
	hooks       []func(context.Context, *types.User) (map[int64]string, error)
	history     []ExternalServiceStoreGetAffiliatedSyncErrorsFuncCall
	mutex       sync.Mutex
}

// GetAffiliatedSyncErrors delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockExternalServiceStore) GetAffiliatedSyncErrors(v0 context.Context, v1 *types.User) (map[int64]string, error) {
	r0, r1 := m.GetAffiliatedSyncErrorsFunc.nextHook()(v0, v1)
	m.GetAffiliatedSyncErrorsFunc.appendCall(ExternalServiceStoreGetAffiliatedSyncErrorsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetAffiliatedSyncErrors method of the parent MockExternalServiceStore
// instance is invoked and the hook queue is empty.
func (f *ExternalServiceStoreGetAffiliatedSyncErrorsFunc) SetDefaultHook(hook func(context.Context, *types.User) (map[int64]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAffiliatedSyncErrors method of the parent MockExternalServiceStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *ExternalServiceStoreGetAffiliatedSyncErrorsFunc) PushHook(hook func(context.Context, *types.User) (map[int64]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ExternalServiceStoreGetAffiliatedSyncErrorsFunc) SetDefaultReturn(r0 map[int64]string, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.User) (map[int64]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ExternalServiceStoreGetAffiliatedSyncErrorsFunc) PushReturn(r0 map[int64]string, r1 error) {
	f.PushHook(func(context.Context, *types.User) (map[int64]string, error) {
		return r0, r1
	})
}

func (f *ExternalServiceStoreGetAffiliatedSyncErrorsFunc) nextHook() func(context.Context, *types.User) (map[int64]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreGetAffiliatedSyncErrorsFunc) appendCall(r0 ExternalServiceStoreGetAffiliatedSyncErrorsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ExternalServiceStoreGetAffiliatedSyncErrorsFuncCall objects describing
// the invocations of this function.
func (f *ExternalServiceStoreGetAffiliatedSyncErrorsFunc) History() []ExternalServiceStoreGetAffiliatedSyncErrorsFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreGetAffiliatedSyncErrorsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreGetAffiliatedSyncErrorsFuncCall is an object that
// describes an invocation of method GetAffiliatedSyncErrors on an instance
// of MockExternalServiceStore.
type ExternalServiceStoreGetAffiliatedSyncErrorsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.User
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[int64]string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreGetAffiliatedSyncErrorsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreGetAffiliatedSyncErrorsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExternalServiceStoreGetByIDFunc describes the behavior when the GetByID
// method of the parent MockExternalServiceStore instance is invoked.
type ExternalServiceStoreGetByIDFunc struct {
	defaultHook func(context.Context, int64) (*types.ExternalService, error)
	hooks       []func(context.Context, int64) (*types.ExternalService, error)
	history     []ExternalServiceStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) GetByID(v0 context.Context, v1 int64) (*types.ExternalService, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(ExternalServiceStoreGetByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockExternalServiceStore instance is invoked and the hook
// queue is empty.
func (f *ExternalServiceStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int64) (*types.ExternalService, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockExternalServiceStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ExternalServiceStoreGetByIDFunc) PushHook(hook func(context.Context, int64) (*types.ExternalService, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ExternalServiceStoreGetByIDFunc) SetDefaultReturn(r0 *types.ExternalService, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (*types.ExternalService, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ExternalServiceStoreGetByIDFunc) PushReturn(r0 *types.ExternalService, r1 error) {
	f.PushHook(func(context.Context, int64) (*types.ExternalService, error) {
		return r0, r1
	})
}

func (f *ExternalServiceStoreGetByIDFunc) nextHook() func(context.Context, int64) (*types.ExternalService, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreGetByIDFunc) appendCall(r0 ExternalServiceStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreGetByIDFuncCall objects
// describing the invocations of this function.
func (f *ExternalServiceStoreGetByIDFunc) History() []ExternalServiceStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreGetByIDFuncCall is an object that describes an
// invocation of method GetByID on an instance of MockExternalServiceStore.
type ExternalServiceStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.ExternalService
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExternalServiceStoreGetLastSyncErrorFunc describes the behavior when the
// GetLastSyncError method of the parent MockExternalServiceStore instance
// is invoked.
type ExternalServiceStoreGetLastSyncErrorFunc struct {
	defaultHook func(context.Context, int64) (string, error)
	hooks       []func(context.Context, int64) (string, error)
	history     []ExternalServiceStoreGetLastSyncErrorFuncCall
	mutex       sync.Mutex
}

// GetLastSyncError delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockExternalServiceStore) GetLastSyncError(v0 context.Context, v1 int64) (string, error) {
	r0, r1 := m.GetLastSyncErrorFunc.nextHook()(v0, v1)
	m.GetLastSyncErrorFunc.appendCall(ExternalServiceStoreGetLastSyncErrorFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetLastSyncError
// method of the parent MockExternalServiceStore instance is invoked and the
// hook queue is empty.
func (f *ExternalServiceStoreGetLastSyncErrorFunc) SetDefaultHook(hook func(context.Context, int64) (string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLastSyncError method of the parent MockExternalServiceStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ExternalServiceStoreGetLastSyncErrorFunc) PushHook(hook func(context.Context, int64) (string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ExternalServiceStoreGetLastSyncErrorFunc) SetDefaultReturn(r0 string, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (string, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ExternalServiceStoreGetLastSyncErrorFunc) PushReturn(r0 string, r1 error) {
	f.PushHook(func(context.Context, int64) (string, error) {
		return r0, r1
	})
}

func (f *ExternalServiceStoreGetLastSyncErrorFunc) nextHook() func(context.Context, int64) (string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreGetLastSyncErrorFunc) appendCall(r0 ExternalServiceStoreGetLastSyncErrorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ExternalServiceStoreGetLastSyncErrorFuncCall objects describing the
// invocations of this function.
func (f *ExternalServiceStoreGetLastSyncErrorFunc) History() []ExternalServiceStoreGetLastSyncErrorFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreGetLastSyncErrorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreGetLastSyncErrorFuncCall is an object that describes
// an invocation of method GetLastSyncError on an instance of
// MockExternalServiceStore.
type ExternalServiceStoreGetLastSyncErrorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreGetLastSyncErrorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreGetLastSyncErrorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExternalServiceStoreGetSyncJobsFunc describes the behavior when the
// GetSyncJobs method of the parent MockExternalServiceStore instance is
// invoked.
type ExternalServiceStoreGetSyncJobsFunc struct {
	defaultHook func(context.Context) ([]*types.ExternalServiceSyncJob, error)
	hooks       []func(context.Context) ([]*types.ExternalServiceSyncJob, error)
	history     []ExternalServiceStoreGetSyncJobsFuncCall
	mutex       sync.Mutex
}

// GetSyncJobs delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockExternalServiceStore) GetSyncJobs(v0 context.Context) ([]*types.ExternalServiceSyncJob, error) {
	r0, r1 := m.GetSyncJobsFunc.nextHook()(v0)
	m.GetSyncJobsFunc.appendCall(ExternalServiceStoreGetSyncJobsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetSyncJobs method
// of the parent MockExternalServiceStore instance is invoked and the hook
// queue is empty.
func (f *ExternalServiceStoreGetSyncJobsFunc) SetDefaultHook(hook func(context.Context) ([]*types.ExternalServiceSyncJob, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetSyncJobs method of the parent MockExternalServiceStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ExternalServiceStoreGetSyncJobsFunc) PushHook(hook func(context.Context) ([]*types.ExternalServiceSyncJob, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ExternalServiceStoreGetSyncJobsFunc) SetDefaultReturn(r0 []*types.ExternalServiceSyncJob, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]*types.ExternalServiceSyncJob, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ExternalServiceStoreGetSyncJobsFunc) PushReturn(r0 []*types.ExternalServiceSyncJob, r1 error) {
	f.PushHook(func(context.Context) ([]*types.ExternalServiceSyncJob, error) {
		return r0, r1
	})
}

func (f *ExternalServiceStoreGetSyncJobsFunc) nextHook() func(context.Context) ([]*types.ExternalServiceSyncJob, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreGetSyncJobsFunc) appendCall(r0 ExternalServiceStoreGetSyncJobsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreGetSyncJobsFuncCall
// objects describing the invocations of this function.
func (f *ExternalServiceStoreGetSyncJobsFunc) History() []ExternalServiceStoreGetSyncJobsFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreGetSyncJobsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreGetSyncJobsFuncCall is an object that describes an
// invocation of method GetSyncJobs on an instance of
// MockExternalServiceStore.
type ExternalServiceStoreGetSyncJobsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.ExternalServiceSyncJob
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreGetSyncJobsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreGetSyncJobsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExternalServiceStoreHandleFunc describes the behavior when the Handle
// method of the parent MockExternalServiceStore instance is invoked.
type ExternalServiceStoreHandleFunc struct {
	defaultHook func() *basestore.TransactableHandle
	hooks       []func() *basestore.TransactableHandle
	history     []ExternalServiceStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) Handle() *basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(ExternalServiceStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockExternalServiceStore instance is invoked and the hook queue is
// empty.
func (f *ExternalServiceStoreHandleFunc) SetDefaultHook(hook func() *basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockExternalServiceStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExternalServiceStoreHandleFunc) PushHook(hook func() *basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ExternalServiceStoreHandleFunc) SetDefaultReturn(r0 *basestore.TransactableHandle) {
	f.SetDefaultHook(func() *basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ExternalServiceStoreHandleFunc) PushReturn(r0 *basestore.TransactableHandle) {
	f.PushHook(func() *basestore.TransactableHandle {
		return r0
	})
}

func (f *ExternalServiceStoreHandleFunc) nextHook() func() *basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreHandleFunc) appendCall(r0 ExternalServiceStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *ExternalServiceStoreHandleFunc) History() []ExternalServiceStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of MockExternalServiceStore.
type ExternalServiceStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExternalServiceStoreListFunc describes the behavior when the List method
// of the parent MockExternalServiceStore instance is invoked.
type ExternalServiceStoreListFunc struct {
	defaultHook func(context.Context, database.ExternalServicesListOptions) ([]*types.ExternalService, error)
	hooks       []func(context.Context, database.ExternalServicesListOptions) ([]*types.ExternalService, error)
	history     []ExternalServiceStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) List(v0 context.Context, v1 database.ExternalServicesListOptions) ([]*types.ExternalService, error) {
	r0, r1 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(ExternalServiceStoreListFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockExternalServiceStore instance is invoked and the hook queue is
// empty.
func (f *ExternalServiceStoreListFunc) SetDefaultHook(hook func(context.Context, database.ExternalServicesListOptions) ([]*types.ExternalService, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockExternalServiceStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExternalServiceStoreListFunc) PushHook(hook func(context.Context, database.ExternalServicesListOptions) ([]*types.ExternalService, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ExternalServiceStoreListFunc) SetDefaultReturn(r0 []*types.ExternalService, r1 error) {
	f.SetDefaultHook(func(context.Context, database.ExternalServicesListOptions) ([]*types.ExternalService, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ExternalServiceStoreListFunc) PushReturn(r0 []*types.ExternalService, r1 error) {
	f.PushHook(func(context.Context, database.ExternalServicesListOptions) ([]*types.ExternalService, error) {
		return r0, r1
	})
}

func (f *ExternalServiceStoreListFunc) nextHook() func(context.Context, database.ExternalServicesListOptions) ([]*types.ExternalService, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreListFunc) appendCall(r0 ExternalServiceStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreListFuncCall objects
// describing the invocations of this function.
func (f *ExternalServiceStoreListFunc) History() []ExternalServiceStoreListFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreListFuncCall is an object that describes an
// invocation of method List on an instance of MockExternalServiceStore.
type ExternalServiceStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.ExternalServicesListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.ExternalService
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExternalServiceStoreRepoCountFunc describes the behavior when the
// RepoCount method of the parent MockExternalServiceStore instance is
// invoked.
type ExternalServiceStoreRepoCountFunc struct {
	defaultHook func(context.Context, int64) (int32, error)
	hooks       []func(context.Context, int64) (int32, error)
	history     []ExternalServiceStoreRepoCountFuncCall
	mutex       sync.Mutex
}

// RepoCount delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) RepoCount(v0 context.Context, v1 int64) (int32, error) {
	r0, r1 := m.RepoCountFunc.nextHook()(v0, v1)
	m.RepoCountFunc.appendCall(ExternalServiceStoreRepoCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RepoCount method of
// the parent MockExternalServiceStore instance is invoked and the hook
// queue is empty.
func (f *ExternalServiceStoreRepoCountFunc) SetDefaultHook(hook func(context.Context, int64) (int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepoCount method of the parent MockExternalServiceStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ExternalServiceStoreRepoCountFunc) PushHook(hook func(context.Context, int64) (int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ExternalServiceStoreRepoCountFunc) SetDefaultReturn(r0 int32, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ExternalServiceStoreRepoCountFunc) PushReturn(r0 int32, r1 error) {
	f.PushHook(func(context.Context, int64) (int32, error) {
		return r0, r1
	})
}

func (f *ExternalServiceStoreRepoCountFunc) nextHook() func(context.Context, int64) (int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreRepoCountFunc) appendCall(r0 ExternalServiceStoreRepoCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreRepoCountFuncCall
// objects describing the invocations of this function.
func (f *ExternalServiceStoreRepoCountFunc) History() []ExternalServiceStoreRepoCountFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreRepoCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreRepoCountFuncCall is an object that describes an
// invocation of method RepoCount on an instance of
// MockExternalServiceStore.
type ExternalServiceStoreRepoCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreRepoCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreRepoCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExternalServiceStoreSyncDueFunc describes the behavior when the SyncDue
// method of the parent MockExternalServiceStore instance is invoked.
type ExternalServiceStoreSyncDueFunc struct {
	defaultHook func(context.Context, []int64, time.Duration) (bool, error)
	hooks       []func(context.Context, []int64, time.Duration) (bool, error)
	history     []ExternalServiceStoreSyncDueFuncCall
	mutex       sync.Mutex
}

// SyncDue delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) SyncDue(v0 context.Context, v1 []int64, v2 time.Duration) (bool, error) {
	r0, r1 := m.SyncDueFunc.nextHook()(v0, v1, v2)
	m.SyncDueFunc.appendCall(ExternalServiceStoreSyncDueFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SyncDue method of
// the parent MockExternalServiceStore instance is invoked and the hook
// queue is empty.
func (f *ExternalServiceStoreSyncDueFunc) SetDefaultHook(hook func(context.Context, []int64, time.Duration) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SyncDue method of the parent MockExternalServiceStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ExternalServiceStoreSyncDueFunc) PushHook(hook func(context.Context, []int64, time.Duration) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ExternalServiceStoreSyncDueFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, []int64, time.Duration) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ExternalServiceStoreSyncDueFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, []int64, time.Duration) (bool, error) {
		return r0, r1
	})
}

func (f *ExternalServiceStoreSyncDueFunc) nextHook() func(context.Context, []int64, time.Duration) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreSyncDueFunc) appendCall(r0 ExternalServiceStoreSyncDueFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreSyncDueFuncCall objects
// describing the invocations of this function.
func (f *ExternalServiceStoreSyncDueFunc) History() []ExternalServiceStoreSyncDueFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreSyncDueFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreSyncDueFuncCall is an object that describes an
// invocation of method SyncDue on an instance of MockExternalServiceStore.
type ExternalServiceStoreSyncDueFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Duration
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreSyncDueFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreSyncDueFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExternalServiceStoreTransactFunc describes the behavior when the Transact
// method of the parent MockExternalServiceStore instance is invoked.
type ExternalServiceStoreTransactFunc struct {
	defaultHook func(context.Context) (database.ExternalServiceStore, error)
	hooks       []func(context.Context) (database.ExternalServiceStore, error)
	history     []ExternalServiceStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) Transact(v0 context.Context) (database.ExternalServiceStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(ExternalServiceStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockExternalServiceStore instance is invoked and the hook
// queue is empty.
func (f *ExternalServiceStoreTransactFunc) SetDefaultHook(hook func(context.Context) (database.ExternalServiceStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockExternalServiceStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ExternalServiceStoreTransactFunc) PushHook(hook func(context.Context) (database.ExternalServiceStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ExternalServiceStoreTransactFunc) SetDefaultReturn(r0 database.ExternalServiceStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (database.ExternalServiceStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ExternalServiceStoreTransactFunc) PushReturn(r0 database.ExternalServiceStore, r1 error) {
	f.PushHook(func(context.Context) (database.ExternalServiceStore, error) {
		return r0, r1
	})
}

func (f *ExternalServiceStoreTransactFunc) nextHook() func(context.Context) (database.ExternalServiceStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreTransactFunc) appendCall(r0 ExternalServiceStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreTransactFuncCall
// objects describing the invocations of this function.
func (f *ExternalServiceStoreTransactFunc) History() []ExternalServiceStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreTransactFuncCall is an object that describes an
// invocation of method Transact on an instance of MockExternalServiceStore.
type ExternalServiceStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.ExternalServiceStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExternalServiceStoreUpdateFunc describes the behavior when the Update
// method of the parent MockExternalServiceStore instance is invoked.
type ExternalServiceStoreUpdateFunc struct {
	defaultHook func(context.Context, []schema.AuthProviders, int64, *database.ExternalServiceUpdate) error
	hooks       []func(context.Context, []schema.AuthProviders, int64, *database.ExternalServiceUpdate) error
	history     []ExternalServiceStoreUpdateFuncCall
	mutex       sync.Mutex
}

// Update delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) Update(v0 context.Context, v1 []schema.AuthProviders, v2 int64, v3 *database.ExternalServiceUpdate) error {
	r0 := m.UpdateFunc.nextHook()(v0, v1, v2, v3)
	m.UpdateFunc.appendCall(ExternalServiceStoreUpdateFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Update method of the
// parent MockExternalServiceStore instance is invoked and the hook queue is
// empty.
func (f *ExternalServiceStoreUpdateFunc) SetDefaultHook(hook func(context.Context, []schema.AuthProviders, int64, *database.ExternalServiceUpdate) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Update method of the parent MockExternalServiceStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExternalServiceStoreUpdateFunc) PushHook(hook func(context.Context, []schema.AuthProviders, int64, *database.ExternalServiceUpdate) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ExternalServiceStoreUpdateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []schema.AuthProviders, int64, *database.ExternalServiceUpdate) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ExternalServiceStoreUpdateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []schema.AuthProviders, int64, *database.ExternalServiceUpdate) error {
		return r0
	})
}

func (f *ExternalServiceStoreUpdateFunc) nextHook() func(context.Context, []schema.AuthProviders, int64, *database.ExternalServiceUpdate) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreUpdateFunc) appendCall(r0 ExternalServiceStoreUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreUpdateFuncCall objects
// describing the invocations of this function.
func (f *ExternalServiceStoreUpdateFunc) History() []ExternalServiceStoreUpdateFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreUpdateFuncCall is an object that describes an
// invocation of method Update on an instance of MockExternalServiceStore.
type ExternalServiceStoreUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []schema.AuthProviders
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int64
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *database.ExternalServiceUpdate
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExternalServiceStoreUpsertFunc describes the behavior when the Upsert
// method of the parent MockExternalServiceStore instance is invoked.
type ExternalServiceStoreUpsertFunc struct {
	defaultHook func(context.Context, ...*types.ExternalService) error
	hooks       []func(context.Context, ...*types.ExternalService) error
	history     []ExternalServiceStoreUpsertFuncCall
	mutex       sync.Mutex
}

// Upsert delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) Upsert(v0 context.Context, v1 ...*types.ExternalService) error {
	r0 := m.UpsertFunc.nextHook()(v0, v1...)
	m.UpsertFunc.appendCall(ExternalServiceStoreUpsertFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Upsert method of the
// parent MockExternalServiceStore instance is invoked and the hook queue is
// empty.
func (f *ExternalServiceStoreUpsertFunc) SetDefaultHook(hook func(context.Context, ...*types.ExternalService) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Upsert method of the parent MockExternalServiceStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExternalServiceStoreUpsertFunc) PushHook(hook func(context.Context, ...*types.ExternalService) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ExternalServiceStoreUpsertFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ...*types.ExternalService) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ExternalServiceStoreUpsertFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ...*types.ExternalService) error {
		return r0
	})
}

func (f *ExternalServiceStoreUpsertFunc) nextHook() func(context.Context, ...*types.ExternalService) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreUpsertFunc) appendCall(r0 ExternalServiceStoreUpsertFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreUpsertFuncCall objects
// describing the invocations of this function.
func (f *ExternalServiceStoreUpsertFunc) History() []ExternalServiceStoreUpsertFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreUpsertFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreUpsertFuncCall is an object that describes an
// invocation of method Upsert on an instance of MockExternalServiceStore.
type ExternalServiceStoreUpsertFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []*types.ExternalService
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c ExternalServiceStoreUpsertFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreUpsertFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExternalServiceStoreValidateConfigFunc describes the behavior when the
// ValidateConfig method of the parent MockExternalServiceStore instance is
// invoked.
type ExternalServiceStoreValidateConfigFunc struct {
	defaultHook func(context.Context, database.ValidateExternalServiceConfigOptions) ([]byte, error)
	hooks       []func(context.Context, database.ValidateExternalServiceConfigOptions) ([]byte, error)
	history     []ExternalServiceStoreValidateConfigFuncCall
	mutex       sync.Mutex
}

// ValidateConfig delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockExternalServiceStore) ValidateConfig(v0 context.Context, v1 database.ValidateExternalServiceConfigOptions) ([]byte, error) {
	r0, r1 := m.ValidateConfigFunc.nextHook()(v0, v1)
	m.ValidateConfigFunc.appendCall(ExternalServiceStoreValidateConfigFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ValidateConfig
// method of the parent MockExternalServiceStore instance is invoked and the
// hook queue is empty.
func (f *ExternalServiceStoreValidateConfigFunc) SetDefaultHook(hook func(context.Context, database.ValidateExternalServiceConfigOptions) ([]byte, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ValidateConfig method of the parent MockExternalServiceStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ExternalServiceStoreValidateConfigFunc) PushHook(hook func(context.Context, database.ValidateExternalServiceConfigOptions) ([]byte, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ExternalServiceStoreValidateConfigFunc) SetDefaultReturn(r0 []byte, r1 error) {
	f.SetDefaultHook(func(context.Context, database.ValidateExternalServiceConfigOptions) ([]byte, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ExternalServiceStoreValidateConfigFunc) PushReturn(r0 []byte, r1 error) {
	f.PushHook(func(context.Context, database.ValidateExternalServiceConfigOptions) ([]byte, error) {
		return r0, r1
	})
}

func (f *ExternalServiceStoreValidateConfigFunc) nextHook() func(context.Context, database.ValidateExternalServiceConfigOptions) ([]byte, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreValidateConfigFunc) appendCall(r0 ExternalServiceStoreValidateConfigFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreValidateConfigFuncCall
// objects describing the invocations of this function.
func (f *ExternalServiceStoreValidateConfigFunc) History() []ExternalServiceStoreValidateConfigFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreValidateConfigFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreValidateConfigFuncCall is an object that describes an
// invocation of method ValidateConfig on an instance of
// MockExternalServiceStore.
type ExternalServiceStoreValidateConfigFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.ValidateExternalServiceConfigOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []byte
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreValidateConfigFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreValidateConfigFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExternalServiceStoreWithFunc describes the behavior when the With method
// of the parent MockExternalServiceStore instance is invoked.
type ExternalServiceStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) database.ExternalServiceStore
	hooks       []func(basestore.ShareableStore) database.ExternalServiceStore
	history     []ExternalServiceStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) With(v0 basestore.ShareableStore) database.ExternalServiceStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(ExternalServiceStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockExternalServiceStore instance is invoked and the hook queue is
// empty.
func (f *ExternalServiceStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) database.ExternalServiceStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockExternalServiceStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExternalServiceStoreWithFunc) PushHook(hook func(basestore.ShareableStore) database.ExternalServiceStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ExternalServiceStoreWithFunc) SetDefaultReturn(r0 database.ExternalServiceStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) database.ExternalServiceStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ExternalServiceStoreWithFunc) PushReturn(r0 database.ExternalServiceStore) {
	f.PushHook(func(basestore.ShareableStore) database.ExternalServiceStore {
		return r0
	})
}

func (f *ExternalServiceStoreWithFunc) nextHook() func(basestore.ShareableStore) database.ExternalServiceStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreWithFunc) appendCall(r0 ExternalServiceStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreWithFuncCall objects
// describing the invocations of this function.
func (f *ExternalServiceStoreWithFunc) History() []ExternalServiceStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreWithFuncCall is an object that describes an
// invocation of method With on an instance of MockExternalServiceStore.
type ExternalServiceStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.ExternalServiceStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExternalServiceStoreWithEncryptionKeyFunc describes the behavior when the
// WithEncryptionKey method of the parent MockExternalServiceStore instance
// is invoked.
type ExternalServiceStoreWithEncryptionKeyFunc struct {
	defaultHook func(encryption.Key) database.ExternalServiceStore
	hooks       []func(encryption.Key) database.ExternalServiceStore
	history     []ExternalServiceStoreWithEncryptionKeyFuncCall
	mutex       sync.Mutex
}

// WithEncryptionKey delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockExternalServiceStore) WithEncryptionKey(v0 encryption.Key) database.ExternalServiceStore {
	r0 := m.WithEncryptionKeyFunc.nextHook()(v0)
	m.WithEncryptionKeyFunc.appendCall(ExternalServiceStoreWithEncryptionKeyFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithEncryptionKey
// method of the parent MockExternalServiceStore instance is invoked and the
// hook queue is empty.
func (f *ExternalServiceStoreWithEncryptionKeyFunc) SetDefaultHook(hook func(encryption.Key) database.ExternalServiceStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithEncryptionKey method of the parent MockExternalServiceStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ExternalServiceStoreWithEncryptionKeyFunc) PushHook(hook func(encryption.Key) database.ExternalServiceStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ExternalServiceStoreWithEncryptionKeyFunc) SetDefaultReturn(r0 database.ExternalServiceStore) {
	f.SetDefaultHook(func(encryption.Key) database.ExternalServiceStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ExternalServiceStoreWithEncryptionKeyFunc) PushReturn(r0 database.ExternalServiceStore) {
	f.PushHook(func(encryption.Key) database.ExternalServiceStore {
		return r0
	})
}

func (f *ExternalServiceStoreWithEncryptionKeyFunc) nextHook() func(encryption.Key) database.ExternalServiceStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreWithEncryptionKeyFunc) appendCall(r0 ExternalServiceStoreWithEncryptionKeyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ExternalServiceStoreWithEncryptionKeyFuncCall objects describing the
// invocations of this function.
func (f *ExternalServiceStoreWithEncryptionKeyFunc) History() []ExternalServiceStoreWithEncryptionKeyFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreWithEncryptionKeyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreWithEncryptionKeyFuncCall is an object that describes
// an invocation of method WithEncryptionKey on an instance of
// MockExternalServiceStore.
type ExternalServiceStoreWithEncryptionKeyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 encryption.Key
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.ExternalServiceStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreWithEncryptionKeyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreWithEncryptionKeyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
