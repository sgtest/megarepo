// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package dbmock

import (
	"context"
	"sync"

	database "github.com/sourcegraph/sourcegraph/internal/database"
	basestore "github.com/sourcegraph/sourcegraph/internal/database/basestore"
	types "github.com/sourcegraph/sourcegraph/internal/types"
)

// MockOrgMemberStore is a mock implementation of the OrgMemberStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockOrgMemberStore struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *OrgMemberStoreCreateFunc
	// CreateMembershipInOrgsForAllUsersFunc is an instance of a mock
	// function object controlling the behavior of the method
	// CreateMembershipInOrgsForAllUsers.
	CreateMembershipInOrgsForAllUsersFunc *OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc
	// GetByOrgIDFunc is an instance of a mock function object controlling
	// the behavior of the method GetByOrgID.
	GetByOrgIDFunc *OrgMemberStoreGetByOrgIDFunc
	// GetByOrgIDAndUserIDFunc is an instance of a mock function object
	// controlling the behavior of the method GetByOrgIDAndUserID.
	GetByOrgIDAndUserIDFunc *OrgMemberStoreGetByOrgIDAndUserIDFunc
	// GetByUserIDFunc is an instance of a mock function object controlling
	// the behavior of the method GetByUserID.
	GetByUserIDFunc *OrgMemberStoreGetByUserIDFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *OrgMemberStoreHandleFunc
	// MemberCountFunc is an instance of a mock function object controlling
	// the behavior of the method MemberCount.
	MemberCountFunc *OrgMemberStoreMemberCountFunc
	// RemoveFunc is an instance of a mock function object controlling the
	// behavior of the method Remove.
	RemoveFunc *OrgMemberStoreRemoveFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *OrgMemberStoreTransactFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *OrgMemberStoreWithFunc
}

// NewMockOrgMemberStore creates a new mock of the OrgMemberStore interface.
// All methods return zero values for all results, unless overwritten.
func NewMockOrgMemberStore() *MockOrgMemberStore {
	return &MockOrgMemberStore{
		CreateFunc: &OrgMemberStoreCreateFunc{
			defaultHook: func(context.Context, int32, int32) (*types.OrgMembership, error) {
				return nil, nil
			},
		},
		CreateMembershipInOrgsForAllUsersFunc: &OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc{
			defaultHook: func(context.Context, []string) error {
				return nil
			},
		},
		GetByOrgIDFunc: &OrgMemberStoreGetByOrgIDFunc{
			defaultHook: func(context.Context, int32) ([]*types.OrgMembership, error) {
				return nil, nil
			},
		},
		GetByOrgIDAndUserIDFunc: &OrgMemberStoreGetByOrgIDAndUserIDFunc{
			defaultHook: func(context.Context, int32, int32) (*types.OrgMembership, error) {
				return nil, nil
			},
		},
		GetByUserIDFunc: &OrgMemberStoreGetByUserIDFunc{
			defaultHook: func(context.Context, int32) ([]*types.OrgMembership, error) {
				return nil, nil
			},
		},
		HandleFunc: &OrgMemberStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				return nil
			},
		},
		MemberCountFunc: &OrgMemberStoreMemberCountFunc{
			defaultHook: func(context.Context, int32) (int, error) {
				return 0, nil
			},
		},
		RemoveFunc: &OrgMemberStoreRemoveFunc{
			defaultHook: func(context.Context, int32, int32) error {
				return nil
			},
		},
		TransactFunc: &OrgMemberStoreTransactFunc{
			defaultHook: func(context.Context) (database.OrgMemberStore, error) {
				return nil, nil
			},
		},
		WithFunc: &OrgMemberStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) database.OrgMemberStore {
				return nil
			},
		},
	}
}

// NewStrictMockOrgMemberStore creates a new mock of the OrgMemberStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockOrgMemberStore() *MockOrgMemberStore {
	return &MockOrgMemberStore{
		CreateFunc: &OrgMemberStoreCreateFunc{
			defaultHook: func(context.Context, int32, int32) (*types.OrgMembership, error) {
				panic("unexpected invocation of MockOrgMemberStore.Create")
			},
		},
		CreateMembershipInOrgsForAllUsersFunc: &OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc{
			defaultHook: func(context.Context, []string) error {
				panic("unexpected invocation of MockOrgMemberStore.CreateMembershipInOrgsForAllUsers")
			},
		},
		GetByOrgIDFunc: &OrgMemberStoreGetByOrgIDFunc{
			defaultHook: func(context.Context, int32) ([]*types.OrgMembership, error) {
				panic("unexpected invocation of MockOrgMemberStore.GetByOrgID")
			},
		},
		GetByOrgIDAndUserIDFunc: &OrgMemberStoreGetByOrgIDAndUserIDFunc{
			defaultHook: func(context.Context, int32, int32) (*types.OrgMembership, error) {
				panic("unexpected invocation of MockOrgMemberStore.GetByOrgIDAndUserID")
			},
		},
		GetByUserIDFunc: &OrgMemberStoreGetByUserIDFunc{
			defaultHook: func(context.Context, int32) ([]*types.OrgMembership, error) {
				panic("unexpected invocation of MockOrgMemberStore.GetByUserID")
			},
		},
		HandleFunc: &OrgMemberStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				panic("unexpected invocation of MockOrgMemberStore.Handle")
			},
		},
		MemberCountFunc: &OrgMemberStoreMemberCountFunc{
			defaultHook: func(context.Context, int32) (int, error) {
				panic("unexpected invocation of MockOrgMemberStore.MemberCount")
			},
		},
		RemoveFunc: &OrgMemberStoreRemoveFunc{
			defaultHook: func(context.Context, int32, int32) error {
				panic("unexpected invocation of MockOrgMemberStore.Remove")
			},
		},
		TransactFunc: &OrgMemberStoreTransactFunc{
			defaultHook: func(context.Context) (database.OrgMemberStore, error) {
				panic("unexpected invocation of MockOrgMemberStore.Transact")
			},
		},
		WithFunc: &OrgMemberStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) database.OrgMemberStore {
				panic("unexpected invocation of MockOrgMemberStore.With")
			},
		},
	}
}

// NewMockOrgMemberStoreFrom creates a new mock of the MockOrgMemberStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockOrgMemberStoreFrom(i database.OrgMemberStore) *MockOrgMemberStore {
	return &MockOrgMemberStore{
		CreateFunc: &OrgMemberStoreCreateFunc{
			defaultHook: i.Create,
		},
		CreateMembershipInOrgsForAllUsersFunc: &OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc{
			defaultHook: i.CreateMembershipInOrgsForAllUsers,
		},
		GetByOrgIDFunc: &OrgMemberStoreGetByOrgIDFunc{
			defaultHook: i.GetByOrgID,
		},
		GetByOrgIDAndUserIDFunc: &OrgMemberStoreGetByOrgIDAndUserIDFunc{
			defaultHook: i.GetByOrgIDAndUserID,
		},
		GetByUserIDFunc: &OrgMemberStoreGetByUserIDFunc{
			defaultHook: i.GetByUserID,
		},
		HandleFunc: &OrgMemberStoreHandleFunc{
			defaultHook: i.Handle,
		},
		MemberCountFunc: &OrgMemberStoreMemberCountFunc{
			defaultHook: i.MemberCount,
		},
		RemoveFunc: &OrgMemberStoreRemoveFunc{
			defaultHook: i.Remove,
		},
		TransactFunc: &OrgMemberStoreTransactFunc{
			defaultHook: i.Transact,
		},
		WithFunc: &OrgMemberStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// OrgMemberStoreCreateFunc describes the behavior when the Create method of
// the parent MockOrgMemberStore instance is invoked.
type OrgMemberStoreCreateFunc struct {
	defaultHook func(context.Context, int32, int32) (*types.OrgMembership, error)
	hooks       []func(context.Context, int32, int32) (*types.OrgMembership, error)
	history     []OrgMemberStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgMemberStore) Create(v0 context.Context, v1 int32, v2 int32) (*types.OrgMembership, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1, v2)
	m.CreateFunc.appendCall(OrgMemberStoreCreateFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockOrgMemberStore instance is invoked and the hook queue is
// empty.
func (f *OrgMemberStoreCreateFunc) SetDefaultHook(hook func(context.Context, int32, int32) (*types.OrgMembership, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockOrgMemberStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *OrgMemberStoreCreateFunc) PushHook(hook func(context.Context, int32, int32) (*types.OrgMembership, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *OrgMemberStoreCreateFunc) SetDefaultReturn(r0 *types.OrgMembership, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, int32) (*types.OrgMembership, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *OrgMemberStoreCreateFunc) PushReturn(r0 *types.OrgMembership, r1 error) {
	f.PushHook(func(context.Context, int32, int32) (*types.OrgMembership, error) {
		return r0, r1
	})
}

func (f *OrgMemberStoreCreateFunc) nextHook() func(context.Context, int32, int32) (*types.OrgMembership, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgMemberStoreCreateFunc) appendCall(r0 OrgMemberStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgMemberStoreCreateFuncCall objects
// describing the invocations of this function.
func (f *OrgMemberStoreCreateFunc) History() []OrgMemberStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]OrgMemberStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgMemberStoreCreateFuncCall is an object that describes an invocation of
// method Create on an instance of MockOrgMemberStore.
type OrgMemberStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.OrgMembership
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgMemberStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgMemberStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc describes the
// behavior when the CreateMembershipInOrgsForAllUsers method of the parent
// MockOrgMemberStore instance is invoked.
type OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc struct {
	defaultHook func(context.Context, []string) error
	hooks       []func(context.Context, []string) error
	history     []OrgMemberStoreCreateMembershipInOrgsForAllUsersFuncCall
	mutex       sync.Mutex
}

// CreateMembershipInOrgsForAllUsers delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockOrgMemberStore) CreateMembershipInOrgsForAllUsers(v0 context.Context, v1 []string) error {
	r0 := m.CreateMembershipInOrgsForAllUsersFunc.nextHook()(v0, v1)
	m.CreateMembershipInOrgsForAllUsersFunc.appendCall(OrgMemberStoreCreateMembershipInOrgsForAllUsersFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// CreateMembershipInOrgsForAllUsers method of the parent MockOrgMemberStore
// instance is invoked and the hook queue is empty.
func (f *OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc) SetDefaultHook(hook func(context.Context, []string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateMembershipInOrgsForAllUsers method of the parent MockOrgMemberStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc) PushHook(hook func(context.Context, []string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []string) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []string) error {
		return r0
	})
}

func (f *OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc) nextHook() func(context.Context, []string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc) appendCall(r0 OrgMemberStoreCreateMembershipInOrgsForAllUsersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// OrgMemberStoreCreateMembershipInOrgsForAllUsersFuncCall objects
// describing the invocations of this function.
func (f *OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc) History() []OrgMemberStoreCreateMembershipInOrgsForAllUsersFuncCall {
	f.mutex.Lock()
	history := make([]OrgMemberStoreCreateMembershipInOrgsForAllUsersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgMemberStoreCreateMembershipInOrgsForAllUsersFuncCall is an object that
// describes an invocation of method CreateMembershipInOrgsForAllUsers on an
// instance of MockOrgMemberStore.
type OrgMemberStoreCreateMembershipInOrgsForAllUsersFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgMemberStoreCreateMembershipInOrgsForAllUsersFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgMemberStoreCreateMembershipInOrgsForAllUsersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OrgMemberStoreGetByOrgIDFunc describes the behavior when the GetByOrgID
// method of the parent MockOrgMemberStore instance is invoked.
type OrgMemberStoreGetByOrgIDFunc struct {
	defaultHook func(context.Context, int32) ([]*types.OrgMembership, error)
	hooks       []func(context.Context, int32) ([]*types.OrgMembership, error)
	history     []OrgMemberStoreGetByOrgIDFuncCall
	mutex       sync.Mutex
}

// GetByOrgID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockOrgMemberStore) GetByOrgID(v0 context.Context, v1 int32) ([]*types.OrgMembership, error) {
	r0, r1 := m.GetByOrgIDFunc.nextHook()(v0, v1)
	m.GetByOrgIDFunc.appendCall(OrgMemberStoreGetByOrgIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByOrgID method of
// the parent MockOrgMemberStore instance is invoked and the hook queue is
// empty.
func (f *OrgMemberStoreGetByOrgIDFunc) SetDefaultHook(hook func(context.Context, int32) ([]*types.OrgMembership, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByOrgID method of the parent MockOrgMemberStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgMemberStoreGetByOrgIDFunc) PushHook(hook func(context.Context, int32) ([]*types.OrgMembership, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *OrgMemberStoreGetByOrgIDFunc) SetDefaultReturn(r0 []*types.OrgMembership, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) ([]*types.OrgMembership, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *OrgMemberStoreGetByOrgIDFunc) PushReturn(r0 []*types.OrgMembership, r1 error) {
	f.PushHook(func(context.Context, int32) ([]*types.OrgMembership, error) {
		return r0, r1
	})
}

func (f *OrgMemberStoreGetByOrgIDFunc) nextHook() func(context.Context, int32) ([]*types.OrgMembership, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgMemberStoreGetByOrgIDFunc) appendCall(r0 OrgMemberStoreGetByOrgIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgMemberStoreGetByOrgIDFuncCall objects
// describing the invocations of this function.
func (f *OrgMemberStoreGetByOrgIDFunc) History() []OrgMemberStoreGetByOrgIDFuncCall {
	f.mutex.Lock()
	history := make([]OrgMemberStoreGetByOrgIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgMemberStoreGetByOrgIDFuncCall is an object that describes an
// invocation of method GetByOrgID on an instance of MockOrgMemberStore.
type OrgMemberStoreGetByOrgIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.OrgMembership
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgMemberStoreGetByOrgIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgMemberStoreGetByOrgIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgMemberStoreGetByOrgIDAndUserIDFunc describes the behavior when the
// GetByOrgIDAndUserID method of the parent MockOrgMemberStore instance is
// invoked.
type OrgMemberStoreGetByOrgIDAndUserIDFunc struct {
	defaultHook func(context.Context, int32, int32) (*types.OrgMembership, error)
	hooks       []func(context.Context, int32, int32) (*types.OrgMembership, error)
	history     []OrgMemberStoreGetByOrgIDAndUserIDFuncCall
	mutex       sync.Mutex
}

// GetByOrgIDAndUserID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockOrgMemberStore) GetByOrgIDAndUserID(v0 context.Context, v1 int32, v2 int32) (*types.OrgMembership, error) {
	r0, r1 := m.GetByOrgIDAndUserIDFunc.nextHook()(v0, v1, v2)
	m.GetByOrgIDAndUserIDFunc.appendCall(OrgMemberStoreGetByOrgIDAndUserIDFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByOrgIDAndUserID
// method of the parent MockOrgMemberStore instance is invoked and the hook
// queue is empty.
func (f *OrgMemberStoreGetByOrgIDAndUserIDFunc) SetDefaultHook(hook func(context.Context, int32, int32) (*types.OrgMembership, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByOrgIDAndUserID method of the parent MockOrgMemberStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *OrgMemberStoreGetByOrgIDAndUserIDFunc) PushHook(hook func(context.Context, int32, int32) (*types.OrgMembership, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *OrgMemberStoreGetByOrgIDAndUserIDFunc) SetDefaultReturn(r0 *types.OrgMembership, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, int32) (*types.OrgMembership, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *OrgMemberStoreGetByOrgIDAndUserIDFunc) PushReturn(r0 *types.OrgMembership, r1 error) {
	f.PushHook(func(context.Context, int32, int32) (*types.OrgMembership, error) {
		return r0, r1
	})
}

func (f *OrgMemberStoreGetByOrgIDAndUserIDFunc) nextHook() func(context.Context, int32, int32) (*types.OrgMembership, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgMemberStoreGetByOrgIDAndUserIDFunc) appendCall(r0 OrgMemberStoreGetByOrgIDAndUserIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgMemberStoreGetByOrgIDAndUserIDFuncCall
// objects describing the invocations of this function.
func (f *OrgMemberStoreGetByOrgIDAndUserIDFunc) History() []OrgMemberStoreGetByOrgIDAndUserIDFuncCall {
	f.mutex.Lock()
	history := make([]OrgMemberStoreGetByOrgIDAndUserIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgMemberStoreGetByOrgIDAndUserIDFuncCall is an object that describes an
// invocation of method GetByOrgIDAndUserID on an instance of
// MockOrgMemberStore.
type OrgMemberStoreGetByOrgIDAndUserIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.OrgMembership
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgMemberStoreGetByOrgIDAndUserIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgMemberStoreGetByOrgIDAndUserIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgMemberStoreGetByUserIDFunc describes the behavior when the GetByUserID
// method of the parent MockOrgMemberStore instance is invoked.
type OrgMemberStoreGetByUserIDFunc struct {
	defaultHook func(context.Context, int32) ([]*types.OrgMembership, error)
	hooks       []func(context.Context, int32) ([]*types.OrgMembership, error)
	history     []OrgMemberStoreGetByUserIDFuncCall
	mutex       sync.Mutex
}

// GetByUserID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockOrgMemberStore) GetByUserID(v0 context.Context, v1 int32) ([]*types.OrgMembership, error) {
	r0, r1 := m.GetByUserIDFunc.nextHook()(v0, v1)
	m.GetByUserIDFunc.appendCall(OrgMemberStoreGetByUserIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByUserID method
// of the parent MockOrgMemberStore instance is invoked and the hook queue
// is empty.
func (f *OrgMemberStoreGetByUserIDFunc) SetDefaultHook(hook func(context.Context, int32) ([]*types.OrgMembership, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByUserID method of the parent MockOrgMemberStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgMemberStoreGetByUserIDFunc) PushHook(hook func(context.Context, int32) ([]*types.OrgMembership, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *OrgMemberStoreGetByUserIDFunc) SetDefaultReturn(r0 []*types.OrgMembership, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) ([]*types.OrgMembership, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *OrgMemberStoreGetByUserIDFunc) PushReturn(r0 []*types.OrgMembership, r1 error) {
	f.PushHook(func(context.Context, int32) ([]*types.OrgMembership, error) {
		return r0, r1
	})
}

func (f *OrgMemberStoreGetByUserIDFunc) nextHook() func(context.Context, int32) ([]*types.OrgMembership, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgMemberStoreGetByUserIDFunc) appendCall(r0 OrgMemberStoreGetByUserIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgMemberStoreGetByUserIDFuncCall objects
// describing the invocations of this function.
func (f *OrgMemberStoreGetByUserIDFunc) History() []OrgMemberStoreGetByUserIDFuncCall {
	f.mutex.Lock()
	history := make([]OrgMemberStoreGetByUserIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgMemberStoreGetByUserIDFuncCall is an object that describes an
// invocation of method GetByUserID on an instance of MockOrgMemberStore.
type OrgMemberStoreGetByUserIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.OrgMembership
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgMemberStoreGetByUserIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgMemberStoreGetByUserIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgMemberStoreHandleFunc describes the behavior when the Handle method of
// the parent MockOrgMemberStore instance is invoked.
type OrgMemberStoreHandleFunc struct {
	defaultHook func() *basestore.TransactableHandle
	hooks       []func() *basestore.TransactableHandle
	history     []OrgMemberStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgMemberStore) Handle() *basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(OrgMemberStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockOrgMemberStore instance is invoked and the hook queue is
// empty.
func (f *OrgMemberStoreHandleFunc) SetDefaultHook(hook func() *basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockOrgMemberStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *OrgMemberStoreHandleFunc) PushHook(hook func() *basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *OrgMemberStoreHandleFunc) SetDefaultReturn(r0 *basestore.TransactableHandle) {
	f.SetDefaultHook(func() *basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *OrgMemberStoreHandleFunc) PushReturn(r0 *basestore.TransactableHandle) {
	f.PushHook(func() *basestore.TransactableHandle {
		return r0
	})
}

func (f *OrgMemberStoreHandleFunc) nextHook() func() *basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgMemberStoreHandleFunc) appendCall(r0 OrgMemberStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgMemberStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *OrgMemberStoreHandleFunc) History() []OrgMemberStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]OrgMemberStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgMemberStoreHandleFuncCall is an object that describes an invocation of
// method Handle on an instance of MockOrgMemberStore.
type OrgMemberStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgMemberStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgMemberStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OrgMemberStoreMemberCountFunc describes the behavior when the MemberCount
// method of the parent MockOrgMemberStore instance is invoked.
type OrgMemberStoreMemberCountFunc struct {
	defaultHook func(context.Context, int32) (int, error)
	hooks       []func(context.Context, int32) (int, error)
	history     []OrgMemberStoreMemberCountFuncCall
	mutex       sync.Mutex
}

// MemberCount delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockOrgMemberStore) MemberCount(v0 context.Context, v1 int32) (int, error) {
	r0, r1 := m.MemberCountFunc.nextHook()(v0, v1)
	m.MemberCountFunc.appendCall(OrgMemberStoreMemberCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MemberCount method
// of the parent MockOrgMemberStore instance is invoked and the hook queue
// is empty.
func (f *OrgMemberStoreMemberCountFunc) SetDefaultHook(hook func(context.Context, int32) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MemberCount method of the parent MockOrgMemberStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgMemberStoreMemberCountFunc) PushHook(hook func(context.Context, int32) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *OrgMemberStoreMemberCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *OrgMemberStoreMemberCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, int32) (int, error) {
		return r0, r1
	})
}

func (f *OrgMemberStoreMemberCountFunc) nextHook() func(context.Context, int32) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgMemberStoreMemberCountFunc) appendCall(r0 OrgMemberStoreMemberCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgMemberStoreMemberCountFuncCall objects
// describing the invocations of this function.
func (f *OrgMemberStoreMemberCountFunc) History() []OrgMemberStoreMemberCountFuncCall {
	f.mutex.Lock()
	history := make([]OrgMemberStoreMemberCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgMemberStoreMemberCountFuncCall is an object that describes an
// invocation of method MemberCount on an instance of MockOrgMemberStore.
type OrgMemberStoreMemberCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgMemberStoreMemberCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgMemberStoreMemberCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgMemberStoreRemoveFunc describes the behavior when the Remove method of
// the parent MockOrgMemberStore instance is invoked.
type OrgMemberStoreRemoveFunc struct {
	defaultHook func(context.Context, int32, int32) error
	hooks       []func(context.Context, int32, int32) error
	history     []OrgMemberStoreRemoveFuncCall
	mutex       sync.Mutex
}

// Remove delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgMemberStore) Remove(v0 context.Context, v1 int32, v2 int32) error {
	r0 := m.RemoveFunc.nextHook()(v0, v1, v2)
	m.RemoveFunc.appendCall(OrgMemberStoreRemoveFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Remove method of the
// parent MockOrgMemberStore instance is invoked and the hook queue is
// empty.
func (f *OrgMemberStoreRemoveFunc) SetDefaultHook(hook func(context.Context, int32, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Remove method of the parent MockOrgMemberStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *OrgMemberStoreRemoveFunc) PushHook(hook func(context.Context, int32, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *OrgMemberStoreRemoveFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, int32) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *OrgMemberStoreRemoveFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, int32) error {
		return r0
	})
}

func (f *OrgMemberStoreRemoveFunc) nextHook() func(context.Context, int32, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgMemberStoreRemoveFunc) appendCall(r0 OrgMemberStoreRemoveFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgMemberStoreRemoveFuncCall objects
// describing the invocations of this function.
func (f *OrgMemberStoreRemoveFunc) History() []OrgMemberStoreRemoveFuncCall {
	f.mutex.Lock()
	history := make([]OrgMemberStoreRemoveFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgMemberStoreRemoveFuncCall is an object that describes an invocation of
// method Remove on an instance of MockOrgMemberStore.
type OrgMemberStoreRemoveFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgMemberStoreRemoveFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgMemberStoreRemoveFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OrgMemberStoreTransactFunc describes the behavior when the Transact
// method of the parent MockOrgMemberStore instance is invoked.
type OrgMemberStoreTransactFunc struct {
	defaultHook func(context.Context) (database.OrgMemberStore, error)
	hooks       []func(context.Context) (database.OrgMemberStore, error)
	history     []OrgMemberStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgMemberStore) Transact(v0 context.Context) (database.OrgMemberStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(OrgMemberStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockOrgMemberStore instance is invoked and the hook queue is
// empty.
func (f *OrgMemberStoreTransactFunc) SetDefaultHook(hook func(context.Context) (database.OrgMemberStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockOrgMemberStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgMemberStoreTransactFunc) PushHook(hook func(context.Context) (database.OrgMemberStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *OrgMemberStoreTransactFunc) SetDefaultReturn(r0 database.OrgMemberStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (database.OrgMemberStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *OrgMemberStoreTransactFunc) PushReturn(r0 database.OrgMemberStore, r1 error) {
	f.PushHook(func(context.Context) (database.OrgMemberStore, error) {
		return r0, r1
	})
}

func (f *OrgMemberStoreTransactFunc) nextHook() func(context.Context) (database.OrgMemberStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgMemberStoreTransactFunc) appendCall(r0 OrgMemberStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgMemberStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *OrgMemberStoreTransactFunc) History() []OrgMemberStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]OrgMemberStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgMemberStoreTransactFuncCall is an object that describes an invocation
// of method Transact on an instance of MockOrgMemberStore.
type OrgMemberStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.OrgMemberStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgMemberStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgMemberStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgMemberStoreWithFunc describes the behavior when the With method of the
// parent MockOrgMemberStore instance is invoked.
type OrgMemberStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) database.OrgMemberStore
	hooks       []func(basestore.ShareableStore) database.OrgMemberStore
	history     []OrgMemberStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgMemberStore) With(v0 basestore.ShareableStore) database.OrgMemberStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(OrgMemberStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockOrgMemberStore instance is invoked and the hook queue is
// empty.
func (f *OrgMemberStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) database.OrgMemberStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockOrgMemberStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *OrgMemberStoreWithFunc) PushHook(hook func(basestore.ShareableStore) database.OrgMemberStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *OrgMemberStoreWithFunc) SetDefaultReturn(r0 database.OrgMemberStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) database.OrgMemberStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *OrgMemberStoreWithFunc) PushReturn(r0 database.OrgMemberStore) {
	f.PushHook(func(basestore.ShareableStore) database.OrgMemberStore {
		return r0
	})
}

func (f *OrgMemberStoreWithFunc) nextHook() func(basestore.ShareableStore) database.OrgMemberStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgMemberStoreWithFunc) appendCall(r0 OrgMemberStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgMemberStoreWithFuncCall objects
// describing the invocations of this function.
func (f *OrgMemberStoreWithFunc) History() []OrgMemberStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]OrgMemberStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgMemberStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockOrgMemberStore.
type OrgMemberStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.OrgMemberStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgMemberStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgMemberStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
