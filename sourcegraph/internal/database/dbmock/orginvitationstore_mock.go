// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package dbmock

import (
	"context"
	"sync"

	database "github.com/sourcegraph/sourcegraph/internal/database"
	basestore "github.com/sourcegraph/sourcegraph/internal/database/basestore"
)

// MockOrgInvitationStore is a mock implementation of the OrgInvitationStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockOrgInvitationStore struct {
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *OrgInvitationStoreCountFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *OrgInvitationStoreCreateFunc
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *OrgInvitationStoreGetByIDFunc
	// GetPendingFunc is an instance of a mock function object controlling
	// the behavior of the method GetPending.
	GetPendingFunc *OrgInvitationStoreGetPendingFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *OrgInvitationStoreHandleFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *OrgInvitationStoreListFunc
	// RespondFunc is an instance of a mock function object controlling the
	// behavior of the method Respond.
	RespondFunc *OrgInvitationStoreRespondFunc
	// RevokeFunc is an instance of a mock function object controlling the
	// behavior of the method Revoke.
	RevokeFunc *OrgInvitationStoreRevokeFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *OrgInvitationStoreTransactFunc
	// UpdateEmailSentTimestampFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateEmailSentTimestamp.
	UpdateEmailSentTimestampFunc *OrgInvitationStoreUpdateEmailSentTimestampFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *OrgInvitationStoreWithFunc
}

// NewMockOrgInvitationStore creates a new mock of the OrgInvitationStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockOrgInvitationStore() *MockOrgInvitationStore {
	return &MockOrgInvitationStore{
		CountFunc: &OrgInvitationStoreCountFunc{
			defaultHook: func(context.Context, database.OrgInvitationsListOptions) (int, error) {
				return 0, nil
			},
		},
		CreateFunc: &OrgInvitationStoreCreateFunc{
			defaultHook: func(context.Context, int32, int32, int32) (*database.OrgInvitation, error) {
				return nil, nil
			},
		},
		GetByIDFunc: &OrgInvitationStoreGetByIDFunc{
			defaultHook: func(context.Context, int64) (*database.OrgInvitation, error) {
				return nil, nil
			},
		},
		GetPendingFunc: &OrgInvitationStoreGetPendingFunc{
			defaultHook: func(context.Context, int32, int32) (*database.OrgInvitation, error) {
				return nil, nil
			},
		},
		HandleFunc: &OrgInvitationStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				return nil
			},
		},
		ListFunc: &OrgInvitationStoreListFunc{
			defaultHook: func(context.Context, database.OrgInvitationsListOptions) ([]*database.OrgInvitation, error) {
				return nil, nil
			},
		},
		RespondFunc: &OrgInvitationStoreRespondFunc{
			defaultHook: func(context.Context, int64, int32, bool) (int32, error) {
				return 0, nil
			},
		},
		RevokeFunc: &OrgInvitationStoreRevokeFunc{
			defaultHook: func(context.Context, int64) error {
				return nil
			},
		},
		TransactFunc: &OrgInvitationStoreTransactFunc{
			defaultHook: func(context.Context) (database.OrgInvitationStore, error) {
				return nil, nil
			},
		},
		UpdateEmailSentTimestampFunc: &OrgInvitationStoreUpdateEmailSentTimestampFunc{
			defaultHook: func(context.Context, int64) error {
				return nil
			},
		},
		WithFunc: &OrgInvitationStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) database.OrgInvitationStore {
				return nil
			},
		},
	}
}

// NewMockOrgInvitationStoreFrom creates a new mock of the
// MockOrgInvitationStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockOrgInvitationStoreFrom(i database.OrgInvitationStore) *MockOrgInvitationStore {
	return &MockOrgInvitationStore{
		CountFunc: &OrgInvitationStoreCountFunc{
			defaultHook: i.Count,
		},
		CreateFunc: &OrgInvitationStoreCreateFunc{
			defaultHook: i.Create,
		},
		GetByIDFunc: &OrgInvitationStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		GetPendingFunc: &OrgInvitationStoreGetPendingFunc{
			defaultHook: i.GetPending,
		},
		HandleFunc: &OrgInvitationStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListFunc: &OrgInvitationStoreListFunc{
			defaultHook: i.List,
		},
		RespondFunc: &OrgInvitationStoreRespondFunc{
			defaultHook: i.Respond,
		},
		RevokeFunc: &OrgInvitationStoreRevokeFunc{
			defaultHook: i.Revoke,
		},
		TransactFunc: &OrgInvitationStoreTransactFunc{
			defaultHook: i.Transact,
		},
		UpdateEmailSentTimestampFunc: &OrgInvitationStoreUpdateEmailSentTimestampFunc{
			defaultHook: i.UpdateEmailSentTimestamp,
		},
		WithFunc: &OrgInvitationStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// OrgInvitationStoreCountFunc describes the behavior when the Count method
// of the parent MockOrgInvitationStore instance is invoked.
type OrgInvitationStoreCountFunc struct {
	defaultHook func(context.Context, database.OrgInvitationsListOptions) (int, error)
	hooks       []func(context.Context, database.OrgInvitationsListOptions) (int, error)
	history     []OrgInvitationStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgInvitationStore) Count(v0 context.Context, v1 database.OrgInvitationsListOptions) (int, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(OrgInvitationStoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockOrgInvitationStore instance is invoked and the hook queue is
// empty.
func (f *OrgInvitationStoreCountFunc) SetDefaultHook(hook func(context.Context, database.OrgInvitationsListOptions) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockOrgInvitationStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgInvitationStoreCountFunc) PushHook(hook func(context.Context, database.OrgInvitationsListOptions) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *OrgInvitationStoreCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, database.OrgInvitationsListOptions) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *OrgInvitationStoreCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, database.OrgInvitationsListOptions) (int, error) {
		return r0, r1
	})
}

func (f *OrgInvitationStoreCountFunc) nextHook() func(context.Context, database.OrgInvitationsListOptions) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreCountFunc) appendCall(r0 OrgInvitationStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgInvitationStoreCountFuncCall objects
// describing the invocations of this function.
func (f *OrgInvitationStoreCountFunc) History() []OrgInvitationStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreCountFuncCall is an object that describes an invocation
// of method Count on an instance of MockOrgInvitationStore.
type OrgInvitationStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.OrgInvitationsListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgInvitationStoreCreateFunc describes the behavior when the Create
// method of the parent MockOrgInvitationStore instance is invoked.
type OrgInvitationStoreCreateFunc struct {
	defaultHook func(context.Context, int32, int32, int32) (*database.OrgInvitation, error)
	hooks       []func(context.Context, int32, int32, int32) (*database.OrgInvitation, error)
	history     []OrgInvitationStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgInvitationStore) Create(v0 context.Context, v1 int32, v2 int32, v3 int32) (*database.OrgInvitation, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1, v2, v3)
	m.CreateFunc.appendCall(OrgInvitationStoreCreateFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockOrgInvitationStore instance is invoked and the hook queue is
// empty.
func (f *OrgInvitationStoreCreateFunc) SetDefaultHook(hook func(context.Context, int32, int32, int32) (*database.OrgInvitation, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockOrgInvitationStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgInvitationStoreCreateFunc) PushHook(hook func(context.Context, int32, int32, int32) (*database.OrgInvitation, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *OrgInvitationStoreCreateFunc) SetDefaultReturn(r0 *database.OrgInvitation, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, int32, int32) (*database.OrgInvitation, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *OrgInvitationStoreCreateFunc) PushReturn(r0 *database.OrgInvitation, r1 error) {
	f.PushHook(func(context.Context, int32, int32, int32) (*database.OrgInvitation, error) {
		return r0, r1
	})
}

func (f *OrgInvitationStoreCreateFunc) nextHook() func(context.Context, int32, int32, int32) (*database.OrgInvitation, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreCreateFunc) appendCall(r0 OrgInvitationStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgInvitationStoreCreateFuncCall objects
// describing the invocations of this function.
func (f *OrgInvitationStoreCreateFunc) History() []OrgInvitationStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreCreateFuncCall is an object that describes an
// invocation of method Create on an instance of MockOrgInvitationStore.
type OrgInvitationStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int32
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *database.OrgInvitation
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgInvitationStoreGetByIDFunc describes the behavior when the GetByID
// method of the parent MockOrgInvitationStore instance is invoked.
type OrgInvitationStoreGetByIDFunc struct {
	defaultHook func(context.Context, int64) (*database.OrgInvitation, error)
	hooks       []func(context.Context, int64) (*database.OrgInvitation, error)
	history     []OrgInvitationStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgInvitationStore) GetByID(v0 context.Context, v1 int64) (*database.OrgInvitation, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(OrgInvitationStoreGetByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockOrgInvitationStore instance is invoked and the hook queue
// is empty.
func (f *OrgInvitationStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int64) (*database.OrgInvitation, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockOrgInvitationStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgInvitationStoreGetByIDFunc) PushHook(hook func(context.Context, int64) (*database.OrgInvitation, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *OrgInvitationStoreGetByIDFunc) SetDefaultReturn(r0 *database.OrgInvitation, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (*database.OrgInvitation, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *OrgInvitationStoreGetByIDFunc) PushReturn(r0 *database.OrgInvitation, r1 error) {
	f.PushHook(func(context.Context, int64) (*database.OrgInvitation, error) {
		return r0, r1
	})
}

func (f *OrgInvitationStoreGetByIDFunc) nextHook() func(context.Context, int64) (*database.OrgInvitation, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreGetByIDFunc) appendCall(r0 OrgInvitationStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgInvitationStoreGetByIDFuncCall objects
// describing the invocations of this function.
func (f *OrgInvitationStoreGetByIDFunc) History() []OrgInvitationStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreGetByIDFuncCall is an object that describes an
// invocation of method GetByID on an instance of MockOrgInvitationStore.
type OrgInvitationStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *database.OrgInvitation
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgInvitationStoreGetPendingFunc describes the behavior when the
// GetPending method of the parent MockOrgInvitationStore instance is
// invoked.
type OrgInvitationStoreGetPendingFunc struct {
	defaultHook func(context.Context, int32, int32) (*database.OrgInvitation, error)
	hooks       []func(context.Context, int32, int32) (*database.OrgInvitation, error)
	history     []OrgInvitationStoreGetPendingFuncCall
	mutex       sync.Mutex
}

// GetPending delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockOrgInvitationStore) GetPending(v0 context.Context, v1 int32, v2 int32) (*database.OrgInvitation, error) {
	r0, r1 := m.GetPendingFunc.nextHook()(v0, v1, v2)
	m.GetPendingFunc.appendCall(OrgInvitationStoreGetPendingFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetPending method of
// the parent MockOrgInvitationStore instance is invoked and the hook queue
// is empty.
func (f *OrgInvitationStoreGetPendingFunc) SetDefaultHook(hook func(context.Context, int32, int32) (*database.OrgInvitation, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPending method of the parent MockOrgInvitationStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *OrgInvitationStoreGetPendingFunc) PushHook(hook func(context.Context, int32, int32) (*database.OrgInvitation, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *OrgInvitationStoreGetPendingFunc) SetDefaultReturn(r0 *database.OrgInvitation, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, int32) (*database.OrgInvitation, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *OrgInvitationStoreGetPendingFunc) PushReturn(r0 *database.OrgInvitation, r1 error) {
	f.PushHook(func(context.Context, int32, int32) (*database.OrgInvitation, error) {
		return r0, r1
	})
}

func (f *OrgInvitationStoreGetPendingFunc) nextHook() func(context.Context, int32, int32) (*database.OrgInvitation, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreGetPendingFunc) appendCall(r0 OrgInvitationStoreGetPendingFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgInvitationStoreGetPendingFuncCall
// objects describing the invocations of this function.
func (f *OrgInvitationStoreGetPendingFunc) History() []OrgInvitationStoreGetPendingFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreGetPendingFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreGetPendingFuncCall is an object that describes an
// invocation of method GetPending on an instance of MockOrgInvitationStore.
type OrgInvitationStoreGetPendingFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *database.OrgInvitation
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreGetPendingFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreGetPendingFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgInvitationStoreHandleFunc describes the behavior when the Handle
// method of the parent MockOrgInvitationStore instance is invoked.
type OrgInvitationStoreHandleFunc struct {
	defaultHook func() *basestore.TransactableHandle
	hooks       []func() *basestore.TransactableHandle
	history     []OrgInvitationStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgInvitationStore) Handle() *basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(OrgInvitationStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockOrgInvitationStore instance is invoked and the hook queue is
// empty.
func (f *OrgInvitationStoreHandleFunc) SetDefaultHook(hook func() *basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockOrgInvitationStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgInvitationStoreHandleFunc) PushHook(hook func() *basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *OrgInvitationStoreHandleFunc) SetDefaultReturn(r0 *basestore.TransactableHandle) {
	f.SetDefaultHook(func() *basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *OrgInvitationStoreHandleFunc) PushReturn(r0 *basestore.TransactableHandle) {
	f.PushHook(func() *basestore.TransactableHandle {
		return r0
	})
}

func (f *OrgInvitationStoreHandleFunc) nextHook() func() *basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreHandleFunc) appendCall(r0 OrgInvitationStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgInvitationStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *OrgInvitationStoreHandleFunc) History() []OrgInvitationStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of MockOrgInvitationStore.
type OrgInvitationStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OrgInvitationStoreListFunc describes the behavior when the List method of
// the parent MockOrgInvitationStore instance is invoked.
type OrgInvitationStoreListFunc struct {
	defaultHook func(context.Context, database.OrgInvitationsListOptions) ([]*database.OrgInvitation, error)
	hooks       []func(context.Context, database.OrgInvitationsListOptions) ([]*database.OrgInvitation, error)
	history     []OrgInvitationStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgInvitationStore) List(v0 context.Context, v1 database.OrgInvitationsListOptions) ([]*database.OrgInvitation, error) {
	r0, r1 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(OrgInvitationStoreListFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockOrgInvitationStore instance is invoked and the hook queue is
// empty.
func (f *OrgInvitationStoreListFunc) SetDefaultHook(hook func(context.Context, database.OrgInvitationsListOptions) ([]*database.OrgInvitation, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockOrgInvitationStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgInvitationStoreListFunc) PushHook(hook func(context.Context, database.OrgInvitationsListOptions) ([]*database.OrgInvitation, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *OrgInvitationStoreListFunc) SetDefaultReturn(r0 []*database.OrgInvitation, r1 error) {
	f.SetDefaultHook(func(context.Context, database.OrgInvitationsListOptions) ([]*database.OrgInvitation, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *OrgInvitationStoreListFunc) PushReturn(r0 []*database.OrgInvitation, r1 error) {
	f.PushHook(func(context.Context, database.OrgInvitationsListOptions) ([]*database.OrgInvitation, error) {
		return r0, r1
	})
}

func (f *OrgInvitationStoreListFunc) nextHook() func(context.Context, database.OrgInvitationsListOptions) ([]*database.OrgInvitation, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreListFunc) appendCall(r0 OrgInvitationStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgInvitationStoreListFuncCall objects
// describing the invocations of this function.
func (f *OrgInvitationStoreListFunc) History() []OrgInvitationStoreListFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreListFuncCall is an object that describes an invocation
// of method List on an instance of MockOrgInvitationStore.
type OrgInvitationStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.OrgInvitationsListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*database.OrgInvitation
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgInvitationStoreRespondFunc describes the behavior when the Respond
// method of the parent MockOrgInvitationStore instance is invoked.
type OrgInvitationStoreRespondFunc struct {
	defaultHook func(context.Context, int64, int32, bool) (int32, error)
	hooks       []func(context.Context, int64, int32, bool) (int32, error)
	history     []OrgInvitationStoreRespondFuncCall
	mutex       sync.Mutex
}

// Respond delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgInvitationStore) Respond(v0 context.Context, v1 int64, v2 int32, v3 bool) (int32, error) {
	r0, r1 := m.RespondFunc.nextHook()(v0, v1, v2, v3)
	m.RespondFunc.appendCall(OrgInvitationStoreRespondFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Respond method of
// the parent MockOrgInvitationStore instance is invoked and the hook queue
// is empty.
func (f *OrgInvitationStoreRespondFunc) SetDefaultHook(hook func(context.Context, int64, int32, bool) (int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Respond method of the parent MockOrgInvitationStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgInvitationStoreRespondFunc) PushHook(hook func(context.Context, int64, int32, bool) (int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *OrgInvitationStoreRespondFunc) SetDefaultReturn(r0 int32, r1 error) {
	f.SetDefaultHook(func(context.Context, int64, int32, bool) (int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *OrgInvitationStoreRespondFunc) PushReturn(r0 int32, r1 error) {
	f.PushHook(func(context.Context, int64, int32, bool) (int32, error) {
		return r0, r1
	})
}

func (f *OrgInvitationStoreRespondFunc) nextHook() func(context.Context, int64, int32, bool) (int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreRespondFunc) appendCall(r0 OrgInvitationStoreRespondFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgInvitationStoreRespondFuncCall objects
// describing the invocations of this function.
func (f *OrgInvitationStoreRespondFunc) History() []OrgInvitationStoreRespondFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreRespondFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreRespondFuncCall is an object that describes an
// invocation of method Respond on an instance of MockOrgInvitationStore.
type OrgInvitationStoreRespondFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int32
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreRespondFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreRespondFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgInvitationStoreRevokeFunc describes the behavior when the Revoke
// method of the parent MockOrgInvitationStore instance is invoked.
type OrgInvitationStoreRevokeFunc struct {
	defaultHook func(context.Context, int64) error
	hooks       []func(context.Context, int64) error
	history     []OrgInvitationStoreRevokeFuncCall
	mutex       sync.Mutex
}

// Revoke delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgInvitationStore) Revoke(v0 context.Context, v1 int64) error {
	r0 := m.RevokeFunc.nextHook()(v0, v1)
	m.RevokeFunc.appendCall(OrgInvitationStoreRevokeFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Revoke method of the
// parent MockOrgInvitationStore instance is invoked and the hook queue is
// empty.
func (f *OrgInvitationStoreRevokeFunc) SetDefaultHook(hook func(context.Context, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Revoke method of the parent MockOrgInvitationStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgInvitationStoreRevokeFunc) PushHook(hook func(context.Context, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *OrgInvitationStoreRevokeFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *OrgInvitationStoreRevokeFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64) error {
		return r0
	})
}

func (f *OrgInvitationStoreRevokeFunc) nextHook() func(context.Context, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreRevokeFunc) appendCall(r0 OrgInvitationStoreRevokeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgInvitationStoreRevokeFuncCall objects
// describing the invocations of this function.
func (f *OrgInvitationStoreRevokeFunc) History() []OrgInvitationStoreRevokeFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreRevokeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreRevokeFuncCall is an object that describes an
// invocation of method Revoke on an instance of MockOrgInvitationStore.
type OrgInvitationStoreRevokeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreRevokeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreRevokeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OrgInvitationStoreTransactFunc describes the behavior when the Transact
// method of the parent MockOrgInvitationStore instance is invoked.
type OrgInvitationStoreTransactFunc struct {
	defaultHook func(context.Context) (database.OrgInvitationStore, error)
	hooks       []func(context.Context) (database.OrgInvitationStore, error)
	history     []OrgInvitationStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgInvitationStore) Transact(v0 context.Context) (database.OrgInvitationStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(OrgInvitationStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockOrgInvitationStore instance is invoked and the hook queue
// is empty.
func (f *OrgInvitationStoreTransactFunc) SetDefaultHook(hook func(context.Context) (database.OrgInvitationStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockOrgInvitationStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgInvitationStoreTransactFunc) PushHook(hook func(context.Context) (database.OrgInvitationStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *OrgInvitationStoreTransactFunc) SetDefaultReturn(r0 database.OrgInvitationStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (database.OrgInvitationStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *OrgInvitationStoreTransactFunc) PushReturn(r0 database.OrgInvitationStore, r1 error) {
	f.PushHook(func(context.Context) (database.OrgInvitationStore, error) {
		return r0, r1
	})
}

func (f *OrgInvitationStoreTransactFunc) nextHook() func(context.Context) (database.OrgInvitationStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreTransactFunc) appendCall(r0 OrgInvitationStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgInvitationStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *OrgInvitationStoreTransactFunc) History() []OrgInvitationStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreTransactFuncCall is an object that describes an
// invocation of method Transact on an instance of MockOrgInvitationStore.
type OrgInvitationStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.OrgInvitationStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgInvitationStoreUpdateEmailSentTimestampFunc describes the behavior
// when the UpdateEmailSentTimestamp method of the parent
// MockOrgInvitationStore instance is invoked.
type OrgInvitationStoreUpdateEmailSentTimestampFunc struct {
	defaultHook func(context.Context, int64) error
	hooks       []func(context.Context, int64) error
	history     []OrgInvitationStoreUpdateEmailSentTimestampFuncCall
	mutex       sync.Mutex
}

// UpdateEmailSentTimestamp delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockOrgInvitationStore) UpdateEmailSentTimestamp(v0 context.Context, v1 int64) error {
	r0 := m.UpdateEmailSentTimestampFunc.nextHook()(v0, v1)
	m.UpdateEmailSentTimestampFunc.appendCall(OrgInvitationStoreUpdateEmailSentTimestampFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// UpdateEmailSentTimestamp method of the parent MockOrgInvitationStore
// instance is invoked and the hook queue is empty.
func (f *OrgInvitationStoreUpdateEmailSentTimestampFunc) SetDefaultHook(hook func(context.Context, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateEmailSentTimestamp method of the parent MockOrgInvitationStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *OrgInvitationStoreUpdateEmailSentTimestampFunc) PushHook(hook func(context.Context, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *OrgInvitationStoreUpdateEmailSentTimestampFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *OrgInvitationStoreUpdateEmailSentTimestampFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64) error {
		return r0
	})
}

func (f *OrgInvitationStoreUpdateEmailSentTimestampFunc) nextHook() func(context.Context, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreUpdateEmailSentTimestampFunc) appendCall(r0 OrgInvitationStoreUpdateEmailSentTimestampFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// OrgInvitationStoreUpdateEmailSentTimestampFuncCall objects describing the
// invocations of this function.
func (f *OrgInvitationStoreUpdateEmailSentTimestampFunc) History() []OrgInvitationStoreUpdateEmailSentTimestampFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreUpdateEmailSentTimestampFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreUpdateEmailSentTimestampFuncCall is an object that
// describes an invocation of method UpdateEmailSentTimestamp on an instance
// of MockOrgInvitationStore.
type OrgInvitationStoreUpdateEmailSentTimestampFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreUpdateEmailSentTimestampFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreUpdateEmailSentTimestampFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OrgInvitationStoreWithFunc describes the behavior when the With method of
// the parent MockOrgInvitationStore instance is invoked.
type OrgInvitationStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) database.OrgInvitationStore
	hooks       []func(basestore.ShareableStore) database.OrgInvitationStore
	history     []OrgInvitationStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgInvitationStore) With(v0 basestore.ShareableStore) database.OrgInvitationStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(OrgInvitationStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockOrgInvitationStore instance is invoked and the hook queue is
// empty.
func (f *OrgInvitationStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) database.OrgInvitationStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockOrgInvitationStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgInvitationStoreWithFunc) PushHook(hook func(basestore.ShareableStore) database.OrgInvitationStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *OrgInvitationStoreWithFunc) SetDefaultReturn(r0 database.OrgInvitationStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) database.OrgInvitationStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *OrgInvitationStoreWithFunc) PushReturn(r0 database.OrgInvitationStore) {
	f.PushHook(func(basestore.ShareableStore) database.OrgInvitationStore {
		return r0
	})
}

func (f *OrgInvitationStoreWithFunc) nextHook() func(basestore.ShareableStore) database.OrgInvitationStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreWithFunc) appendCall(r0 OrgInvitationStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgInvitationStoreWithFuncCall objects
// describing the invocations of this function.
func (f *OrgInvitationStoreWithFunc) History() []OrgInvitationStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreWithFuncCall is an object that describes an invocation
// of method With on an instance of MockOrgInvitationStore.
type OrgInvitationStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.OrgInvitationStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
