// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package dbmock

import (
	"context"
	"sync"

	sqlf "github.com/keegancsmith/sqlf"
	api "github.com/sourcegraph/sourcegraph/internal/api"
	database "github.com/sourcegraph/sourcegraph/internal/database"
	basestore "github.com/sourcegraph/sourcegraph/internal/database/basestore"
	types "github.com/sourcegraph/sourcegraph/internal/types"
)

// MockSearchContextsStore is a mock implementation of the
// SearchContextsStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockSearchContextsStore struct {
	// CountSearchContextsFunc is an instance of a mock function object
	// controlling the behavior of the method CountSearchContexts.
	CountSearchContextsFunc *SearchContextsStoreCountSearchContextsFunc
	// CreateSearchContextWithRepositoryRevisionsFunc is an instance of a
	// mock function object controlling the behavior of the method
	// CreateSearchContextWithRepositoryRevisions.
	CreateSearchContextWithRepositoryRevisionsFunc *SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc
	// DeleteSearchContextFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteSearchContext.
	DeleteSearchContextFunc *SearchContextsStoreDeleteSearchContextFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *SearchContextsStoreDoneFunc
	// ExecFunc is an instance of a mock function object controlling the
	// behavior of the method Exec.
	ExecFunc *SearchContextsStoreExecFunc
	// GetAllRevisionsForReposFunc is an instance of a mock function object
	// controlling the behavior of the method GetAllRevisionsForRepos.
	GetAllRevisionsForReposFunc *SearchContextsStoreGetAllRevisionsForReposFunc
	// GetSearchContextFunc is an instance of a mock function object
	// controlling the behavior of the method GetSearchContext.
	GetSearchContextFunc *SearchContextsStoreGetSearchContextFunc
	// GetSearchContextRepositoryRevisionsFunc is an instance of a mock
	// function object controlling the behavior of the method
	// GetSearchContextRepositoryRevisions.
	GetSearchContextRepositoryRevisionsFunc *SearchContextsStoreGetSearchContextRepositoryRevisionsFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *SearchContextsStoreHandleFunc
	// ListSearchContextsFunc is an instance of a mock function object
	// controlling the behavior of the method ListSearchContexts.
	ListSearchContextsFunc *SearchContextsStoreListSearchContextsFunc
	// SetSearchContextRepositoryRevisionsFunc is an instance of a mock
	// function object controlling the behavior of the method
	// SetSearchContextRepositoryRevisions.
	SetSearchContextRepositoryRevisionsFunc *SearchContextsStoreSetSearchContextRepositoryRevisionsFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *SearchContextsStoreTransactFunc
	// UpdateSearchContextWithRepositoryRevisionsFunc is an instance of a
	// mock function object controlling the behavior of the method
	// UpdateSearchContextWithRepositoryRevisions.
	UpdateSearchContextWithRepositoryRevisionsFunc *SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc
}

// NewMockSearchContextsStore creates a new mock of the SearchContextsStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockSearchContextsStore() *MockSearchContextsStore {
	return &MockSearchContextsStore{
		CountSearchContextsFunc: &SearchContextsStoreCountSearchContextsFunc{
			defaultHook: func(context.Context, database.ListSearchContextsOptions) (int32, error) {
				return 0, nil
			},
		},
		CreateSearchContextWithRepositoryRevisionsFunc: &SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc{
			defaultHook: func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error) {
				return nil, nil
			},
		},
		DeleteSearchContextFunc: &SearchContextsStoreDeleteSearchContextFunc{
			defaultHook: func(context.Context, int64) error {
				return nil
			},
		},
		DoneFunc: &SearchContextsStoreDoneFunc{
			defaultHook: func(error) error {
				return nil
			},
		},
		ExecFunc: &SearchContextsStoreExecFunc{
			defaultHook: func(context.Context, *sqlf.Query) error {
				return nil
			},
		},
		GetAllRevisionsForReposFunc: &SearchContextsStoreGetAllRevisionsForReposFunc{
			defaultHook: func(context.Context, []api.RepoID) (map[api.RepoID][]string, error) {
				return nil, nil
			},
		},
		GetSearchContextFunc: &SearchContextsStoreGetSearchContextFunc{
			defaultHook: func(context.Context, database.GetSearchContextOptions) (*types.SearchContext, error) {
				return nil, nil
			},
		},
		GetSearchContextRepositoryRevisionsFunc: &SearchContextsStoreGetSearchContextRepositoryRevisionsFunc{
			defaultHook: func(context.Context, int64) ([]*types.SearchContextRepositoryRevisions, error) {
				return nil, nil
			},
		},
		HandleFunc: &SearchContextsStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				return nil
			},
		},
		ListSearchContextsFunc: &SearchContextsStoreListSearchContextsFunc{
			defaultHook: func(context.Context, database.ListSearchContextsPageOptions, database.ListSearchContextsOptions) ([]*types.SearchContext, error) {
				return nil, nil
			},
		},
		SetSearchContextRepositoryRevisionsFunc: &SearchContextsStoreSetSearchContextRepositoryRevisionsFunc{
			defaultHook: func(context.Context, int64, []*types.SearchContextRepositoryRevisions) error {
				return nil
			},
		},
		TransactFunc: &SearchContextsStoreTransactFunc{
			defaultHook: func(context.Context) (database.SearchContextsStore, error) {
				return nil, nil
			},
		},
		UpdateSearchContextWithRepositoryRevisionsFunc: &SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc{
			defaultHook: func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error) {
				return nil, nil
			},
		},
	}
}

// NewMockSearchContextsStoreFrom creates a new mock of the
// MockSearchContextsStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockSearchContextsStoreFrom(i database.SearchContextsStore) *MockSearchContextsStore {
	return &MockSearchContextsStore{
		CountSearchContextsFunc: &SearchContextsStoreCountSearchContextsFunc{
			defaultHook: i.CountSearchContexts,
		},
		CreateSearchContextWithRepositoryRevisionsFunc: &SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc{
			defaultHook: i.CreateSearchContextWithRepositoryRevisions,
		},
		DeleteSearchContextFunc: &SearchContextsStoreDeleteSearchContextFunc{
			defaultHook: i.DeleteSearchContext,
		},
		DoneFunc: &SearchContextsStoreDoneFunc{
			defaultHook: i.Done,
		},
		ExecFunc: &SearchContextsStoreExecFunc{
			defaultHook: i.Exec,
		},
		GetAllRevisionsForReposFunc: &SearchContextsStoreGetAllRevisionsForReposFunc{
			defaultHook: i.GetAllRevisionsForRepos,
		},
		GetSearchContextFunc: &SearchContextsStoreGetSearchContextFunc{
			defaultHook: i.GetSearchContext,
		},
		GetSearchContextRepositoryRevisionsFunc: &SearchContextsStoreGetSearchContextRepositoryRevisionsFunc{
			defaultHook: i.GetSearchContextRepositoryRevisions,
		},
		HandleFunc: &SearchContextsStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListSearchContextsFunc: &SearchContextsStoreListSearchContextsFunc{
			defaultHook: i.ListSearchContexts,
		},
		SetSearchContextRepositoryRevisionsFunc: &SearchContextsStoreSetSearchContextRepositoryRevisionsFunc{
			defaultHook: i.SetSearchContextRepositoryRevisions,
		},
		TransactFunc: &SearchContextsStoreTransactFunc{
			defaultHook: i.Transact,
		},
		UpdateSearchContextWithRepositoryRevisionsFunc: &SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc{
			defaultHook: i.UpdateSearchContextWithRepositoryRevisions,
		},
	}
}

// SearchContextsStoreCountSearchContextsFunc describes the behavior when
// the CountSearchContexts method of the parent MockSearchContextsStore
// instance is invoked.
type SearchContextsStoreCountSearchContextsFunc struct {
	defaultHook func(context.Context, database.ListSearchContextsOptions) (int32, error)
	hooks       []func(context.Context, database.ListSearchContextsOptions) (int32, error)
	history     []SearchContextsStoreCountSearchContextsFuncCall
	mutex       sync.Mutex
}

// CountSearchContexts delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSearchContextsStore) CountSearchContexts(v0 context.Context, v1 database.ListSearchContextsOptions) (int32, error) {
	r0, r1 := m.CountSearchContextsFunc.nextHook()(v0, v1)
	m.CountSearchContextsFunc.appendCall(SearchContextsStoreCountSearchContextsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CountSearchContexts
// method of the parent MockSearchContextsStore instance is invoked and the
// hook queue is empty.
func (f *SearchContextsStoreCountSearchContextsFunc) SetDefaultHook(hook func(context.Context, database.ListSearchContextsOptions) (int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountSearchContexts method of the parent MockSearchContextsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *SearchContextsStoreCountSearchContextsFunc) PushHook(hook func(context.Context, database.ListSearchContextsOptions) (int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SearchContextsStoreCountSearchContextsFunc) SetDefaultReturn(r0 int32, r1 error) {
	f.SetDefaultHook(func(context.Context, database.ListSearchContextsOptions) (int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SearchContextsStoreCountSearchContextsFunc) PushReturn(r0 int32, r1 error) {
	f.PushHook(func(context.Context, database.ListSearchContextsOptions) (int32, error) {
		return r0, r1
	})
}

func (f *SearchContextsStoreCountSearchContextsFunc) nextHook() func(context.Context, database.ListSearchContextsOptions) (int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreCountSearchContextsFunc) appendCall(r0 SearchContextsStoreCountSearchContextsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SearchContextsStoreCountSearchContextsFuncCall objects describing the
// invocations of this function.
func (f *SearchContextsStoreCountSearchContextsFunc) History() []SearchContextsStoreCountSearchContextsFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreCountSearchContextsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreCountSearchContextsFuncCall is an object that
// describes an invocation of method CountSearchContexts on an instance of
// MockSearchContextsStore.
type SearchContextsStoreCountSearchContextsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.ListSearchContextsOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreCountSearchContextsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreCountSearchContextsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc
// describes the behavior when the
// CreateSearchContextWithRepositoryRevisions method of the parent
// MockSearchContextsStore instance is invoked.
type SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc struct {
	defaultHook func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error)
	hooks       []func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error)
	history     []SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFuncCall
	mutex       sync.Mutex
}

// CreateSearchContextWithRepositoryRevisions delegates to the next hook
// function in the queue and stores the parameter and result values of this
// invocation.
func (m *MockSearchContextsStore) CreateSearchContextWithRepositoryRevisions(v0 context.Context, v1 *types.SearchContext, v2 []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error) {
	r0, r1 := m.CreateSearchContextWithRepositoryRevisionsFunc.nextHook()(v0, v1, v2)
	m.CreateSearchContextWithRepositoryRevisionsFunc.appendCall(SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CreateSearchContextWithRepositoryRevisions method of the parent
// MockSearchContextsStore instance is invoked and the hook queue is empty.
func (f *SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc) SetDefaultHook(hook func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateSearchContextWithRepositoryRevisions method of the parent
// MockSearchContextsStore instance invokes the hook at the front of the
// queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc) PushHook(hook func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc) SetDefaultReturn(r0 *types.SearchContext, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc) PushReturn(r0 *types.SearchContext, r1 error) {
	f.PushHook(func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error) {
		return r0, r1
	})
}

func (f *SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc) nextHook() func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc) appendCall(r0 SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFuncCall
// objects describing the invocations of this function.
func (f *SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc) History() []SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFuncCall is
// an object that describes an invocation of method
// CreateSearchContextWithRepositoryRevisions on an instance of
// MockSearchContextsStore.
type SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.SearchContext
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []*types.SearchContextRepositoryRevisions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.SearchContext
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SearchContextsStoreDeleteSearchContextFunc describes the behavior when
// the DeleteSearchContext method of the parent MockSearchContextsStore
// instance is invoked.
type SearchContextsStoreDeleteSearchContextFunc struct {
	defaultHook func(context.Context, int64) error
	hooks       []func(context.Context, int64) error
	history     []SearchContextsStoreDeleteSearchContextFuncCall
	mutex       sync.Mutex
}

// DeleteSearchContext delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSearchContextsStore) DeleteSearchContext(v0 context.Context, v1 int64) error {
	r0 := m.DeleteSearchContextFunc.nextHook()(v0, v1)
	m.DeleteSearchContextFunc.appendCall(SearchContextsStoreDeleteSearchContextFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteSearchContext
// method of the parent MockSearchContextsStore instance is invoked and the
// hook queue is empty.
func (f *SearchContextsStoreDeleteSearchContextFunc) SetDefaultHook(hook func(context.Context, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteSearchContext method of the parent MockSearchContextsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *SearchContextsStoreDeleteSearchContextFunc) PushHook(hook func(context.Context, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SearchContextsStoreDeleteSearchContextFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SearchContextsStoreDeleteSearchContextFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64) error {
		return r0
	})
}

func (f *SearchContextsStoreDeleteSearchContextFunc) nextHook() func(context.Context, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreDeleteSearchContextFunc) appendCall(r0 SearchContextsStoreDeleteSearchContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SearchContextsStoreDeleteSearchContextFuncCall objects describing the
// invocations of this function.
func (f *SearchContextsStoreDeleteSearchContextFunc) History() []SearchContextsStoreDeleteSearchContextFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreDeleteSearchContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreDeleteSearchContextFuncCall is an object that
// describes an invocation of method DeleteSearchContext on an instance of
// MockSearchContextsStore.
type SearchContextsStoreDeleteSearchContextFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreDeleteSearchContextFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreDeleteSearchContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SearchContextsStoreDoneFunc describes the behavior when the Done method
// of the parent MockSearchContextsStore instance is invoked.
type SearchContextsStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []SearchContextsStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSearchContextsStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(SearchContextsStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockSearchContextsStore instance is invoked and the hook queue is
// empty.
func (f *SearchContextsStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockSearchContextsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SearchContextsStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SearchContextsStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SearchContextsStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *SearchContextsStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreDoneFunc) appendCall(r0 SearchContextsStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SearchContextsStoreDoneFuncCall objects
// describing the invocations of this function.
func (f *SearchContextsStoreDoneFunc) History() []SearchContextsStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreDoneFuncCall is an object that describes an invocation
// of method Done on an instance of MockSearchContextsStore.
type SearchContextsStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SearchContextsStoreExecFunc describes the behavior when the Exec method
// of the parent MockSearchContextsStore instance is invoked.
type SearchContextsStoreExecFunc struct {
	defaultHook func(context.Context, *sqlf.Query) error
	hooks       []func(context.Context, *sqlf.Query) error
	history     []SearchContextsStoreExecFuncCall
	mutex       sync.Mutex
}

// Exec delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSearchContextsStore) Exec(v0 context.Context, v1 *sqlf.Query) error {
	r0 := m.ExecFunc.nextHook()(v0, v1)
	m.ExecFunc.appendCall(SearchContextsStoreExecFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Exec method of the
// parent MockSearchContextsStore instance is invoked and the hook queue is
// empty.
func (f *SearchContextsStoreExecFunc) SetDefaultHook(hook func(context.Context, *sqlf.Query) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Exec method of the parent MockSearchContextsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SearchContextsStoreExecFunc) PushHook(hook func(context.Context, *sqlf.Query) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SearchContextsStoreExecFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *sqlf.Query) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SearchContextsStoreExecFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *sqlf.Query) error {
		return r0
	})
}

func (f *SearchContextsStoreExecFunc) nextHook() func(context.Context, *sqlf.Query) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreExecFunc) appendCall(r0 SearchContextsStoreExecFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SearchContextsStoreExecFuncCall objects
// describing the invocations of this function.
func (f *SearchContextsStoreExecFunc) History() []SearchContextsStoreExecFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreExecFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreExecFuncCall is an object that describes an invocation
// of method Exec on an instance of MockSearchContextsStore.
type SearchContextsStoreExecFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sqlf.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreExecFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreExecFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SearchContextsStoreGetAllRevisionsForReposFunc describes the behavior
// when the GetAllRevisionsForRepos method of the parent
// MockSearchContextsStore instance is invoked.
type SearchContextsStoreGetAllRevisionsForReposFunc struct {
	defaultHook func(context.Context, []api.RepoID) (map[api.RepoID][]string, error)
	hooks       []func(context.Context, []api.RepoID) (map[api.RepoID][]string, error)
	history     []SearchContextsStoreGetAllRevisionsForReposFuncCall
	mutex       sync.Mutex
}

// GetAllRevisionsForRepos delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockSearchContextsStore) GetAllRevisionsForRepos(v0 context.Context, v1 []api.RepoID) (map[api.RepoID][]string, error) {
	r0, r1 := m.GetAllRevisionsForReposFunc.nextHook()(v0, v1)
	m.GetAllRevisionsForReposFunc.appendCall(SearchContextsStoreGetAllRevisionsForReposFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetAllRevisionsForRepos method of the parent MockSearchContextsStore
// instance is invoked and the hook queue is empty.
func (f *SearchContextsStoreGetAllRevisionsForReposFunc) SetDefaultHook(hook func(context.Context, []api.RepoID) (map[api.RepoID][]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAllRevisionsForRepos method of the parent MockSearchContextsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *SearchContextsStoreGetAllRevisionsForReposFunc) PushHook(hook func(context.Context, []api.RepoID) (map[api.RepoID][]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SearchContextsStoreGetAllRevisionsForReposFunc) SetDefaultReturn(r0 map[api.RepoID][]string, r1 error) {
	f.SetDefaultHook(func(context.Context, []api.RepoID) (map[api.RepoID][]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SearchContextsStoreGetAllRevisionsForReposFunc) PushReturn(r0 map[api.RepoID][]string, r1 error) {
	f.PushHook(func(context.Context, []api.RepoID) (map[api.RepoID][]string, error) {
		return r0, r1
	})
}

func (f *SearchContextsStoreGetAllRevisionsForReposFunc) nextHook() func(context.Context, []api.RepoID) (map[api.RepoID][]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreGetAllRevisionsForReposFunc) appendCall(r0 SearchContextsStoreGetAllRevisionsForReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SearchContextsStoreGetAllRevisionsForReposFuncCall objects describing the
// invocations of this function.
func (f *SearchContextsStoreGetAllRevisionsForReposFunc) History() []SearchContextsStoreGetAllRevisionsForReposFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreGetAllRevisionsForReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreGetAllRevisionsForReposFuncCall is an object that
// describes an invocation of method GetAllRevisionsForRepos on an instance
// of MockSearchContextsStore.
type SearchContextsStoreGetAllRevisionsForReposFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[api.RepoID][]string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreGetAllRevisionsForReposFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreGetAllRevisionsForReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SearchContextsStoreGetSearchContextFunc describes the behavior when the
// GetSearchContext method of the parent MockSearchContextsStore instance is
// invoked.
type SearchContextsStoreGetSearchContextFunc struct {
	defaultHook func(context.Context, database.GetSearchContextOptions) (*types.SearchContext, error)
	hooks       []func(context.Context, database.GetSearchContextOptions) (*types.SearchContext, error)
	history     []SearchContextsStoreGetSearchContextFuncCall
	mutex       sync.Mutex
}

// GetSearchContext delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSearchContextsStore) GetSearchContext(v0 context.Context, v1 database.GetSearchContextOptions) (*types.SearchContext, error) {
	r0, r1 := m.GetSearchContextFunc.nextHook()(v0, v1)
	m.GetSearchContextFunc.appendCall(SearchContextsStoreGetSearchContextFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetSearchContext
// method of the parent MockSearchContextsStore instance is invoked and the
// hook queue is empty.
func (f *SearchContextsStoreGetSearchContextFunc) SetDefaultHook(hook func(context.Context, database.GetSearchContextOptions) (*types.SearchContext, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetSearchContext method of the parent MockSearchContextsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *SearchContextsStoreGetSearchContextFunc) PushHook(hook func(context.Context, database.GetSearchContextOptions) (*types.SearchContext, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SearchContextsStoreGetSearchContextFunc) SetDefaultReturn(r0 *types.SearchContext, r1 error) {
	f.SetDefaultHook(func(context.Context, database.GetSearchContextOptions) (*types.SearchContext, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SearchContextsStoreGetSearchContextFunc) PushReturn(r0 *types.SearchContext, r1 error) {
	f.PushHook(func(context.Context, database.GetSearchContextOptions) (*types.SearchContext, error) {
		return r0, r1
	})
}

func (f *SearchContextsStoreGetSearchContextFunc) nextHook() func(context.Context, database.GetSearchContextOptions) (*types.SearchContext, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreGetSearchContextFunc) appendCall(r0 SearchContextsStoreGetSearchContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SearchContextsStoreGetSearchContextFuncCall
// objects describing the invocations of this function.
func (f *SearchContextsStoreGetSearchContextFunc) History() []SearchContextsStoreGetSearchContextFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreGetSearchContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreGetSearchContextFuncCall is an object that describes
// an invocation of method GetSearchContext on an instance of
// MockSearchContextsStore.
type SearchContextsStoreGetSearchContextFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.GetSearchContextOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.SearchContext
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreGetSearchContextFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreGetSearchContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SearchContextsStoreGetSearchContextRepositoryRevisionsFunc describes the
// behavior when the GetSearchContextRepositoryRevisions method of the
// parent MockSearchContextsStore instance is invoked.
type SearchContextsStoreGetSearchContextRepositoryRevisionsFunc struct {
	defaultHook func(context.Context, int64) ([]*types.SearchContextRepositoryRevisions, error)
	hooks       []func(context.Context, int64) ([]*types.SearchContextRepositoryRevisions, error)
	history     []SearchContextsStoreGetSearchContextRepositoryRevisionsFuncCall
	mutex       sync.Mutex
}

// GetSearchContextRepositoryRevisions delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockSearchContextsStore) GetSearchContextRepositoryRevisions(v0 context.Context, v1 int64) ([]*types.SearchContextRepositoryRevisions, error) {
	r0, r1 := m.GetSearchContextRepositoryRevisionsFunc.nextHook()(v0, v1)
	m.GetSearchContextRepositoryRevisionsFunc.appendCall(SearchContextsStoreGetSearchContextRepositoryRevisionsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetSearchContextRepositoryRevisions method of the parent
// MockSearchContextsStore instance is invoked and the hook queue is empty.
func (f *SearchContextsStoreGetSearchContextRepositoryRevisionsFunc) SetDefaultHook(hook func(context.Context, int64) ([]*types.SearchContextRepositoryRevisions, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetSearchContextRepositoryRevisions method of the parent
// MockSearchContextsStore instance invokes the hook at the front of the
// queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *SearchContextsStoreGetSearchContextRepositoryRevisionsFunc) PushHook(hook func(context.Context, int64) ([]*types.SearchContextRepositoryRevisions, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SearchContextsStoreGetSearchContextRepositoryRevisionsFunc) SetDefaultReturn(r0 []*types.SearchContextRepositoryRevisions, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) ([]*types.SearchContextRepositoryRevisions, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SearchContextsStoreGetSearchContextRepositoryRevisionsFunc) PushReturn(r0 []*types.SearchContextRepositoryRevisions, r1 error) {
	f.PushHook(func(context.Context, int64) ([]*types.SearchContextRepositoryRevisions, error) {
		return r0, r1
	})
}

func (f *SearchContextsStoreGetSearchContextRepositoryRevisionsFunc) nextHook() func(context.Context, int64) ([]*types.SearchContextRepositoryRevisions, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreGetSearchContextRepositoryRevisionsFunc) appendCall(r0 SearchContextsStoreGetSearchContextRepositoryRevisionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SearchContextsStoreGetSearchContextRepositoryRevisionsFuncCall objects
// describing the invocations of this function.
func (f *SearchContextsStoreGetSearchContextRepositoryRevisionsFunc) History() []SearchContextsStoreGetSearchContextRepositoryRevisionsFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreGetSearchContextRepositoryRevisionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreGetSearchContextRepositoryRevisionsFuncCall is an
// object that describes an invocation of method
// GetSearchContextRepositoryRevisions on an instance of
// MockSearchContextsStore.
type SearchContextsStoreGetSearchContextRepositoryRevisionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.SearchContextRepositoryRevisions
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreGetSearchContextRepositoryRevisionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreGetSearchContextRepositoryRevisionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SearchContextsStoreHandleFunc describes the behavior when the Handle
// method of the parent MockSearchContextsStore instance is invoked.
type SearchContextsStoreHandleFunc struct {
	defaultHook func() *basestore.TransactableHandle
	hooks       []func() *basestore.TransactableHandle
	history     []SearchContextsStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSearchContextsStore) Handle() *basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(SearchContextsStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockSearchContextsStore instance is invoked and the hook queue is
// empty.
func (f *SearchContextsStoreHandleFunc) SetDefaultHook(hook func() *basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockSearchContextsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SearchContextsStoreHandleFunc) PushHook(hook func() *basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SearchContextsStoreHandleFunc) SetDefaultReturn(r0 *basestore.TransactableHandle) {
	f.SetDefaultHook(func() *basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SearchContextsStoreHandleFunc) PushReturn(r0 *basestore.TransactableHandle) {
	f.PushHook(func() *basestore.TransactableHandle {
		return r0
	})
}

func (f *SearchContextsStoreHandleFunc) nextHook() func() *basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreHandleFunc) appendCall(r0 SearchContextsStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SearchContextsStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *SearchContextsStoreHandleFunc) History() []SearchContextsStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of MockSearchContextsStore.
type SearchContextsStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SearchContextsStoreListSearchContextsFunc describes the behavior when the
// ListSearchContexts method of the parent MockSearchContextsStore instance
// is invoked.
type SearchContextsStoreListSearchContextsFunc struct {
	defaultHook func(context.Context, database.ListSearchContextsPageOptions, database.ListSearchContextsOptions) ([]*types.SearchContext, error)
	hooks       []func(context.Context, database.ListSearchContextsPageOptions, database.ListSearchContextsOptions) ([]*types.SearchContext, error)
	history     []SearchContextsStoreListSearchContextsFuncCall
	mutex       sync.Mutex
}

// ListSearchContexts delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSearchContextsStore) ListSearchContexts(v0 context.Context, v1 database.ListSearchContextsPageOptions, v2 database.ListSearchContextsOptions) ([]*types.SearchContext, error) {
	r0, r1 := m.ListSearchContextsFunc.nextHook()(v0, v1, v2)
	m.ListSearchContextsFunc.appendCall(SearchContextsStoreListSearchContextsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListSearchContexts
// method of the parent MockSearchContextsStore instance is invoked and the
// hook queue is empty.
func (f *SearchContextsStoreListSearchContextsFunc) SetDefaultHook(hook func(context.Context, database.ListSearchContextsPageOptions, database.ListSearchContextsOptions) ([]*types.SearchContext, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListSearchContexts method of the parent MockSearchContextsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *SearchContextsStoreListSearchContextsFunc) PushHook(hook func(context.Context, database.ListSearchContextsPageOptions, database.ListSearchContextsOptions) ([]*types.SearchContext, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SearchContextsStoreListSearchContextsFunc) SetDefaultReturn(r0 []*types.SearchContext, r1 error) {
	f.SetDefaultHook(func(context.Context, database.ListSearchContextsPageOptions, database.ListSearchContextsOptions) ([]*types.SearchContext, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SearchContextsStoreListSearchContextsFunc) PushReturn(r0 []*types.SearchContext, r1 error) {
	f.PushHook(func(context.Context, database.ListSearchContextsPageOptions, database.ListSearchContextsOptions) ([]*types.SearchContext, error) {
		return r0, r1
	})
}

func (f *SearchContextsStoreListSearchContextsFunc) nextHook() func(context.Context, database.ListSearchContextsPageOptions, database.ListSearchContextsOptions) ([]*types.SearchContext, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreListSearchContextsFunc) appendCall(r0 SearchContextsStoreListSearchContextsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SearchContextsStoreListSearchContextsFuncCall objects describing the
// invocations of this function.
func (f *SearchContextsStoreListSearchContextsFunc) History() []SearchContextsStoreListSearchContextsFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreListSearchContextsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreListSearchContextsFuncCall is an object that describes
// an invocation of method ListSearchContexts on an instance of
// MockSearchContextsStore.
type SearchContextsStoreListSearchContextsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.ListSearchContextsPageOptions
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 database.ListSearchContextsOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.SearchContext
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreListSearchContextsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreListSearchContextsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SearchContextsStoreSetSearchContextRepositoryRevisionsFunc describes the
// behavior when the SetSearchContextRepositoryRevisions method of the
// parent MockSearchContextsStore instance is invoked.
type SearchContextsStoreSetSearchContextRepositoryRevisionsFunc struct {
	defaultHook func(context.Context, int64, []*types.SearchContextRepositoryRevisions) error
	hooks       []func(context.Context, int64, []*types.SearchContextRepositoryRevisions) error
	history     []SearchContextsStoreSetSearchContextRepositoryRevisionsFuncCall
	mutex       sync.Mutex
}

// SetSearchContextRepositoryRevisions delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockSearchContextsStore) SetSearchContextRepositoryRevisions(v0 context.Context, v1 int64, v2 []*types.SearchContextRepositoryRevisions) error {
	r0 := m.SetSearchContextRepositoryRevisionsFunc.nextHook()(v0, v1, v2)
	m.SetSearchContextRepositoryRevisionsFunc.appendCall(SearchContextsStoreSetSearchContextRepositoryRevisionsFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// SetSearchContextRepositoryRevisions method of the parent
// MockSearchContextsStore instance is invoked and the hook queue is empty.
func (f *SearchContextsStoreSetSearchContextRepositoryRevisionsFunc) SetDefaultHook(hook func(context.Context, int64, []*types.SearchContextRepositoryRevisions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetSearchContextRepositoryRevisions method of the parent
// MockSearchContextsStore instance invokes the hook at the front of the
// queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *SearchContextsStoreSetSearchContextRepositoryRevisionsFunc) PushHook(hook func(context.Context, int64, []*types.SearchContextRepositoryRevisions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SearchContextsStoreSetSearchContextRepositoryRevisionsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64, []*types.SearchContextRepositoryRevisions) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SearchContextsStoreSetSearchContextRepositoryRevisionsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64, []*types.SearchContextRepositoryRevisions) error {
		return r0
	})
}

func (f *SearchContextsStoreSetSearchContextRepositoryRevisionsFunc) nextHook() func(context.Context, int64, []*types.SearchContextRepositoryRevisions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreSetSearchContextRepositoryRevisionsFunc) appendCall(r0 SearchContextsStoreSetSearchContextRepositoryRevisionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SearchContextsStoreSetSearchContextRepositoryRevisionsFuncCall objects
// describing the invocations of this function.
func (f *SearchContextsStoreSetSearchContextRepositoryRevisionsFunc) History() []SearchContextsStoreSetSearchContextRepositoryRevisionsFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreSetSearchContextRepositoryRevisionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreSetSearchContextRepositoryRevisionsFuncCall is an
// object that describes an invocation of method
// SetSearchContextRepositoryRevisions on an instance of
// MockSearchContextsStore.
type SearchContextsStoreSetSearchContextRepositoryRevisionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []*types.SearchContextRepositoryRevisions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreSetSearchContextRepositoryRevisionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreSetSearchContextRepositoryRevisionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SearchContextsStoreTransactFunc describes the behavior when the Transact
// method of the parent MockSearchContextsStore instance is invoked.
type SearchContextsStoreTransactFunc struct {
	defaultHook func(context.Context) (database.SearchContextsStore, error)
	hooks       []func(context.Context) (database.SearchContextsStore, error)
	history     []SearchContextsStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSearchContextsStore) Transact(v0 context.Context) (database.SearchContextsStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(SearchContextsStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockSearchContextsStore instance is invoked and the hook queue
// is empty.
func (f *SearchContextsStoreTransactFunc) SetDefaultHook(hook func(context.Context) (database.SearchContextsStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockSearchContextsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *SearchContextsStoreTransactFunc) PushHook(hook func(context.Context) (database.SearchContextsStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SearchContextsStoreTransactFunc) SetDefaultReturn(r0 database.SearchContextsStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (database.SearchContextsStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SearchContextsStoreTransactFunc) PushReturn(r0 database.SearchContextsStore, r1 error) {
	f.PushHook(func(context.Context) (database.SearchContextsStore, error) {
		return r0, r1
	})
}

func (f *SearchContextsStoreTransactFunc) nextHook() func(context.Context) (database.SearchContextsStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreTransactFunc) appendCall(r0 SearchContextsStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SearchContextsStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *SearchContextsStoreTransactFunc) History() []SearchContextsStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreTransactFuncCall is an object that describes an
// invocation of method Transact on an instance of MockSearchContextsStore.
type SearchContextsStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.SearchContextsStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc
// describes the behavior when the
// UpdateSearchContextWithRepositoryRevisions method of the parent
// MockSearchContextsStore instance is invoked.
type SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc struct {
	defaultHook func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error)
	hooks       []func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error)
	history     []SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFuncCall
	mutex       sync.Mutex
}

// UpdateSearchContextWithRepositoryRevisions delegates to the next hook
// function in the queue and stores the parameter and result values of this
// invocation.
func (m *MockSearchContextsStore) UpdateSearchContextWithRepositoryRevisions(v0 context.Context, v1 *types.SearchContext, v2 []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error) {
	r0, r1 := m.UpdateSearchContextWithRepositoryRevisionsFunc.nextHook()(v0, v1, v2)
	m.UpdateSearchContextWithRepositoryRevisionsFunc.appendCall(SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// UpdateSearchContextWithRepositoryRevisions method of the parent
// MockSearchContextsStore instance is invoked and the hook queue is empty.
func (f *SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc) SetDefaultHook(hook func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateSearchContextWithRepositoryRevisions method of the parent
// MockSearchContextsStore instance invokes the hook at the front of the
// queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc) PushHook(hook func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc) SetDefaultReturn(r0 *types.SearchContext, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc) PushReturn(r0 *types.SearchContext, r1 error) {
	f.PushHook(func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error) {
		return r0, r1
	})
}

func (f *SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc) nextHook() func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc) appendCall(r0 SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFuncCall
// objects describing the invocations of this function.
func (f *SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc) History() []SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFuncCall is
// an object that describes an invocation of method
// UpdateSearchContextWithRepositoryRevisions on an instance of
// MockSearchContextsStore.
type SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.SearchContext
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []*types.SearchContextRepositoryRevisions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.SearchContext
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
