// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package dbmock

import (
	"context"
	"sync"

	api "github.com/sourcegraph/sourcegraph/internal/api"
	database "github.com/sourcegraph/sourcegraph/internal/database"
	basestore "github.com/sourcegraph/sourcegraph/internal/database/basestore"
	schema "github.com/sourcegraph/sourcegraph/schema"
)

// MockSettingsStore is a mock implementation of the SettingsStore interface
// (from the package github.com/sourcegraph/sourcegraph/internal/database)
// used for unit testing.
type MockSettingsStore struct {
	// CreateIfUpToDateFunc is an instance of a mock function object
	// controlling the behavior of the method CreateIfUpToDate.
	CreateIfUpToDateFunc *SettingsStoreCreateIfUpToDateFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *SettingsStoreDoneFunc
	// GetLastestSchemaSettingsFunc is an instance of a mock function object
	// controlling the behavior of the method GetLastestSchemaSettings.
	GetLastestSchemaSettingsFunc *SettingsStoreGetLastestSchemaSettingsFunc
	// GetLatestFunc is an instance of a mock function object controlling
	// the behavior of the method GetLatest.
	GetLatestFunc *SettingsStoreGetLatestFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *SettingsStoreHandleFunc
	// ListAllFunc is an instance of a mock function object controlling the
	// behavior of the method ListAll.
	ListAllFunc *SettingsStoreListAllFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *SettingsStoreTransactFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *SettingsStoreWithFunc
}

// NewMockSettingsStore creates a new mock of the SettingsStore interface.
// All methods return zero values for all results, unless overwritten.
func NewMockSettingsStore() *MockSettingsStore {
	return &MockSettingsStore{
		CreateIfUpToDateFunc: &SettingsStoreCreateIfUpToDateFunc{
			defaultHook: func(context.Context, api.SettingsSubject, *int32, *int32, string) (*api.Settings, error) {
				return nil, nil
			},
		},
		DoneFunc: &SettingsStoreDoneFunc{
			defaultHook: func(error) error {
				return nil
			},
		},
		GetLastestSchemaSettingsFunc: &SettingsStoreGetLastestSchemaSettingsFunc{
			defaultHook: func(context.Context, api.SettingsSubject) (*schema.Settings, error) {
				return nil, nil
			},
		},
		GetLatestFunc: &SettingsStoreGetLatestFunc{
			defaultHook: func(context.Context, api.SettingsSubject) (*api.Settings, error) {
				return nil, nil
			},
		},
		HandleFunc: &SettingsStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				return nil
			},
		},
		ListAllFunc: &SettingsStoreListAllFunc{
			defaultHook: func(context.Context, string) ([]*api.Settings, error) {
				return nil, nil
			},
		},
		TransactFunc: &SettingsStoreTransactFunc{
			defaultHook: func(context.Context) (database.SettingsStore, error) {
				return nil, nil
			},
		},
		WithFunc: &SettingsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) database.SettingsStore {
				return nil
			},
		},
	}
}

// NewMockSettingsStoreFrom creates a new mock of the MockSettingsStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockSettingsStoreFrom(i database.SettingsStore) *MockSettingsStore {
	return &MockSettingsStore{
		CreateIfUpToDateFunc: &SettingsStoreCreateIfUpToDateFunc{
			defaultHook: i.CreateIfUpToDate,
		},
		DoneFunc: &SettingsStoreDoneFunc{
			defaultHook: i.Done,
		},
		GetLastestSchemaSettingsFunc: &SettingsStoreGetLastestSchemaSettingsFunc{
			defaultHook: i.GetLastestSchemaSettings,
		},
		GetLatestFunc: &SettingsStoreGetLatestFunc{
			defaultHook: i.GetLatest,
		},
		HandleFunc: &SettingsStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListAllFunc: &SettingsStoreListAllFunc{
			defaultHook: i.ListAll,
		},
		TransactFunc: &SettingsStoreTransactFunc{
			defaultHook: i.Transact,
		},
		WithFunc: &SettingsStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// SettingsStoreCreateIfUpToDateFunc describes the behavior when the
// CreateIfUpToDate method of the parent MockSettingsStore instance is
// invoked.
type SettingsStoreCreateIfUpToDateFunc struct {
	defaultHook func(context.Context, api.SettingsSubject, *int32, *int32, string) (*api.Settings, error)
	hooks       []func(context.Context, api.SettingsSubject, *int32, *int32, string) (*api.Settings, error)
	history     []SettingsStoreCreateIfUpToDateFuncCall
	mutex       sync.Mutex
}

// CreateIfUpToDate delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSettingsStore) CreateIfUpToDate(v0 context.Context, v1 api.SettingsSubject, v2 *int32, v3 *int32, v4 string) (*api.Settings, error) {
	r0, r1 := m.CreateIfUpToDateFunc.nextHook()(v0, v1, v2, v3, v4)
	m.CreateIfUpToDateFunc.appendCall(SettingsStoreCreateIfUpToDateFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateIfUpToDate
// method of the parent MockSettingsStore instance is invoked and the hook
// queue is empty.
func (f *SettingsStoreCreateIfUpToDateFunc) SetDefaultHook(hook func(context.Context, api.SettingsSubject, *int32, *int32, string) (*api.Settings, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateIfUpToDate method of the parent MockSettingsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *SettingsStoreCreateIfUpToDateFunc) PushHook(hook func(context.Context, api.SettingsSubject, *int32, *int32, string) (*api.Settings, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SettingsStoreCreateIfUpToDateFunc) SetDefaultReturn(r0 *api.Settings, r1 error) {
	f.SetDefaultHook(func(context.Context, api.SettingsSubject, *int32, *int32, string) (*api.Settings, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SettingsStoreCreateIfUpToDateFunc) PushReturn(r0 *api.Settings, r1 error) {
	f.PushHook(func(context.Context, api.SettingsSubject, *int32, *int32, string) (*api.Settings, error) {
		return r0, r1
	})
}

func (f *SettingsStoreCreateIfUpToDateFunc) nextHook() func(context.Context, api.SettingsSubject, *int32, *int32, string) (*api.Settings, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SettingsStoreCreateIfUpToDateFunc) appendCall(r0 SettingsStoreCreateIfUpToDateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SettingsStoreCreateIfUpToDateFuncCall
// objects describing the invocations of this function.
func (f *SettingsStoreCreateIfUpToDateFunc) History() []SettingsStoreCreateIfUpToDateFuncCall {
	f.mutex.Lock()
	history := make([]SettingsStoreCreateIfUpToDateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SettingsStoreCreateIfUpToDateFuncCall is an object that describes an
// invocation of method CreateIfUpToDate on an instance of
// MockSettingsStore.
type SettingsStoreCreateIfUpToDateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.SettingsSubject
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *int32
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *int32
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *api.Settings
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SettingsStoreCreateIfUpToDateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SettingsStoreCreateIfUpToDateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SettingsStoreDoneFunc describes the behavior when the Done method of the
// parent MockSettingsStore instance is invoked.
type SettingsStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []SettingsStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSettingsStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(SettingsStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockSettingsStore instance is invoked and the hook queue is empty.
func (f *SettingsStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockSettingsStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SettingsStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SettingsStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SettingsStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *SettingsStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SettingsStoreDoneFunc) appendCall(r0 SettingsStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SettingsStoreDoneFuncCall objects
// describing the invocations of this function.
func (f *SettingsStoreDoneFunc) History() []SettingsStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]SettingsStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SettingsStoreDoneFuncCall is an object that describes an invocation of
// method Done on an instance of MockSettingsStore.
type SettingsStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SettingsStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SettingsStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SettingsStoreGetLastestSchemaSettingsFunc describes the behavior when the
// GetLastestSchemaSettings method of the parent MockSettingsStore instance
// is invoked.
type SettingsStoreGetLastestSchemaSettingsFunc struct {
	defaultHook func(context.Context, api.SettingsSubject) (*schema.Settings, error)
	hooks       []func(context.Context, api.SettingsSubject) (*schema.Settings, error)
	history     []SettingsStoreGetLastestSchemaSettingsFuncCall
	mutex       sync.Mutex
}

// GetLastestSchemaSettings delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockSettingsStore) GetLastestSchemaSettings(v0 context.Context, v1 api.SettingsSubject) (*schema.Settings, error) {
	r0, r1 := m.GetLastestSchemaSettingsFunc.nextHook()(v0, v1)
	m.GetLastestSchemaSettingsFunc.appendCall(SettingsStoreGetLastestSchemaSettingsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetLastestSchemaSettings method of the parent MockSettingsStore instance
// is invoked and the hook queue is empty.
func (f *SettingsStoreGetLastestSchemaSettingsFunc) SetDefaultHook(hook func(context.Context, api.SettingsSubject) (*schema.Settings, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLastestSchemaSettings method of the parent MockSettingsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *SettingsStoreGetLastestSchemaSettingsFunc) PushHook(hook func(context.Context, api.SettingsSubject) (*schema.Settings, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SettingsStoreGetLastestSchemaSettingsFunc) SetDefaultReturn(r0 *schema.Settings, r1 error) {
	f.SetDefaultHook(func(context.Context, api.SettingsSubject) (*schema.Settings, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SettingsStoreGetLastestSchemaSettingsFunc) PushReturn(r0 *schema.Settings, r1 error) {
	f.PushHook(func(context.Context, api.SettingsSubject) (*schema.Settings, error) {
		return r0, r1
	})
}

func (f *SettingsStoreGetLastestSchemaSettingsFunc) nextHook() func(context.Context, api.SettingsSubject) (*schema.Settings, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SettingsStoreGetLastestSchemaSettingsFunc) appendCall(r0 SettingsStoreGetLastestSchemaSettingsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SettingsStoreGetLastestSchemaSettingsFuncCall objects describing the
// invocations of this function.
func (f *SettingsStoreGetLastestSchemaSettingsFunc) History() []SettingsStoreGetLastestSchemaSettingsFuncCall {
	f.mutex.Lock()
	history := make([]SettingsStoreGetLastestSchemaSettingsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SettingsStoreGetLastestSchemaSettingsFuncCall is an object that describes
// an invocation of method GetLastestSchemaSettings on an instance of
// MockSettingsStore.
type SettingsStoreGetLastestSchemaSettingsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.SettingsSubject
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *schema.Settings
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SettingsStoreGetLastestSchemaSettingsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SettingsStoreGetLastestSchemaSettingsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SettingsStoreGetLatestFunc describes the behavior when the GetLatest
// method of the parent MockSettingsStore instance is invoked.
type SettingsStoreGetLatestFunc struct {
	defaultHook func(context.Context, api.SettingsSubject) (*api.Settings, error)
	hooks       []func(context.Context, api.SettingsSubject) (*api.Settings, error)
	history     []SettingsStoreGetLatestFuncCall
	mutex       sync.Mutex
}

// GetLatest delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSettingsStore) GetLatest(v0 context.Context, v1 api.SettingsSubject) (*api.Settings, error) {
	r0, r1 := m.GetLatestFunc.nextHook()(v0, v1)
	m.GetLatestFunc.appendCall(SettingsStoreGetLatestFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetLatest method of
// the parent MockSettingsStore instance is invoked and the hook queue is
// empty.
func (f *SettingsStoreGetLatestFunc) SetDefaultHook(hook func(context.Context, api.SettingsSubject) (*api.Settings, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLatest method of the parent MockSettingsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SettingsStoreGetLatestFunc) PushHook(hook func(context.Context, api.SettingsSubject) (*api.Settings, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SettingsStoreGetLatestFunc) SetDefaultReturn(r0 *api.Settings, r1 error) {
	f.SetDefaultHook(func(context.Context, api.SettingsSubject) (*api.Settings, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SettingsStoreGetLatestFunc) PushReturn(r0 *api.Settings, r1 error) {
	f.PushHook(func(context.Context, api.SettingsSubject) (*api.Settings, error) {
		return r0, r1
	})
}

func (f *SettingsStoreGetLatestFunc) nextHook() func(context.Context, api.SettingsSubject) (*api.Settings, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SettingsStoreGetLatestFunc) appendCall(r0 SettingsStoreGetLatestFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SettingsStoreGetLatestFuncCall objects
// describing the invocations of this function.
func (f *SettingsStoreGetLatestFunc) History() []SettingsStoreGetLatestFuncCall {
	f.mutex.Lock()
	history := make([]SettingsStoreGetLatestFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SettingsStoreGetLatestFuncCall is an object that describes an invocation
// of method GetLatest on an instance of MockSettingsStore.
type SettingsStoreGetLatestFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.SettingsSubject
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *api.Settings
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SettingsStoreGetLatestFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SettingsStoreGetLatestFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SettingsStoreHandleFunc describes the behavior when the Handle method of
// the parent MockSettingsStore instance is invoked.
type SettingsStoreHandleFunc struct {
	defaultHook func() *basestore.TransactableHandle
	hooks       []func() *basestore.TransactableHandle
	history     []SettingsStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSettingsStore) Handle() *basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(SettingsStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockSettingsStore instance is invoked and the hook queue is empty.
func (f *SettingsStoreHandleFunc) SetDefaultHook(hook func() *basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockSettingsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SettingsStoreHandleFunc) PushHook(hook func() *basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SettingsStoreHandleFunc) SetDefaultReturn(r0 *basestore.TransactableHandle) {
	f.SetDefaultHook(func() *basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SettingsStoreHandleFunc) PushReturn(r0 *basestore.TransactableHandle) {
	f.PushHook(func() *basestore.TransactableHandle {
		return r0
	})
}

func (f *SettingsStoreHandleFunc) nextHook() func() *basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SettingsStoreHandleFunc) appendCall(r0 SettingsStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SettingsStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *SettingsStoreHandleFunc) History() []SettingsStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]SettingsStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SettingsStoreHandleFuncCall is an object that describes an invocation of
// method Handle on an instance of MockSettingsStore.
type SettingsStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SettingsStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SettingsStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SettingsStoreListAllFunc describes the behavior when the ListAll method
// of the parent MockSettingsStore instance is invoked.
type SettingsStoreListAllFunc struct {
	defaultHook func(context.Context, string) ([]*api.Settings, error)
	hooks       []func(context.Context, string) ([]*api.Settings, error)
	history     []SettingsStoreListAllFuncCall
	mutex       sync.Mutex
}

// ListAll delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSettingsStore) ListAll(v0 context.Context, v1 string) ([]*api.Settings, error) {
	r0, r1 := m.ListAllFunc.nextHook()(v0, v1)
	m.ListAllFunc.appendCall(SettingsStoreListAllFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListAll method of
// the parent MockSettingsStore instance is invoked and the hook queue is
// empty.
func (f *SettingsStoreListAllFunc) SetDefaultHook(hook func(context.Context, string) ([]*api.Settings, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListAll method of the parent MockSettingsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SettingsStoreListAllFunc) PushHook(hook func(context.Context, string) ([]*api.Settings, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SettingsStoreListAllFunc) SetDefaultReturn(r0 []*api.Settings, r1 error) {
	f.SetDefaultHook(func(context.Context, string) ([]*api.Settings, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SettingsStoreListAllFunc) PushReturn(r0 []*api.Settings, r1 error) {
	f.PushHook(func(context.Context, string) ([]*api.Settings, error) {
		return r0, r1
	})
}

func (f *SettingsStoreListAllFunc) nextHook() func(context.Context, string) ([]*api.Settings, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SettingsStoreListAllFunc) appendCall(r0 SettingsStoreListAllFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SettingsStoreListAllFuncCall objects
// describing the invocations of this function.
func (f *SettingsStoreListAllFunc) History() []SettingsStoreListAllFuncCall {
	f.mutex.Lock()
	history := make([]SettingsStoreListAllFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SettingsStoreListAllFuncCall is an object that describes an invocation of
// method ListAll on an instance of MockSettingsStore.
type SettingsStoreListAllFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*api.Settings
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SettingsStoreListAllFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SettingsStoreListAllFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SettingsStoreTransactFunc describes the behavior when the Transact method
// of the parent MockSettingsStore instance is invoked.
type SettingsStoreTransactFunc struct {
	defaultHook func(context.Context) (database.SettingsStore, error)
	hooks       []func(context.Context) (database.SettingsStore, error)
	history     []SettingsStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSettingsStore) Transact(v0 context.Context) (database.SettingsStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(SettingsStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockSettingsStore instance is invoked and the hook queue is
// empty.
func (f *SettingsStoreTransactFunc) SetDefaultHook(hook func(context.Context) (database.SettingsStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockSettingsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SettingsStoreTransactFunc) PushHook(hook func(context.Context) (database.SettingsStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SettingsStoreTransactFunc) SetDefaultReturn(r0 database.SettingsStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (database.SettingsStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SettingsStoreTransactFunc) PushReturn(r0 database.SettingsStore, r1 error) {
	f.PushHook(func(context.Context) (database.SettingsStore, error) {
		return r0, r1
	})
}

func (f *SettingsStoreTransactFunc) nextHook() func(context.Context) (database.SettingsStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SettingsStoreTransactFunc) appendCall(r0 SettingsStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SettingsStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *SettingsStoreTransactFunc) History() []SettingsStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]SettingsStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SettingsStoreTransactFuncCall is an object that describes an invocation
// of method Transact on an instance of MockSettingsStore.
type SettingsStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.SettingsStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SettingsStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SettingsStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SettingsStoreWithFunc describes the behavior when the With method of the
// parent MockSettingsStore instance is invoked.
type SettingsStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) database.SettingsStore
	hooks       []func(basestore.ShareableStore) database.SettingsStore
	history     []SettingsStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSettingsStore) With(v0 basestore.ShareableStore) database.SettingsStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(SettingsStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockSettingsStore instance is invoked and the hook queue is empty.
func (f *SettingsStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) database.SettingsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockSettingsStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SettingsStoreWithFunc) PushHook(hook func(basestore.ShareableStore) database.SettingsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *SettingsStoreWithFunc) SetDefaultReturn(r0 database.SettingsStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) database.SettingsStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *SettingsStoreWithFunc) PushReturn(r0 database.SettingsStore) {
	f.PushHook(func(basestore.ShareableStore) database.SettingsStore {
		return r0
	})
}

func (f *SettingsStoreWithFunc) nextHook() func(basestore.ShareableStore) database.SettingsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SettingsStoreWithFunc) appendCall(r0 SettingsStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SettingsStoreWithFuncCall objects
// describing the invocations of this function.
func (f *SettingsStoreWithFunc) History() []SettingsStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]SettingsStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SettingsStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockSettingsStore.
type SettingsStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.SettingsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SettingsStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SettingsStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
