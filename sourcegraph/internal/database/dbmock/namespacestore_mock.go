// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package dbmock

import (
	"context"
	"sync"

	database "github.com/sourcegraph/sourcegraph/internal/database"
	basestore "github.com/sourcegraph/sourcegraph/internal/database/basestore"
)

// MockNamespaceStore is a mock implementation of the NamespaceStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockNamespaceStore struct {
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *NamespaceStoreGetByIDFunc
	// GetByNameFunc is an instance of a mock function object controlling
	// the behavior of the method GetByName.
	GetByNameFunc *NamespaceStoreGetByNameFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *NamespaceStoreHandleFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *NamespaceStoreTransactFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *NamespaceStoreWithFunc
}

// NewMockNamespaceStore creates a new mock of the NamespaceStore interface.
// All methods return zero values for all results, unless overwritten.
func NewMockNamespaceStore() *MockNamespaceStore {
	return &MockNamespaceStore{
		GetByIDFunc: &NamespaceStoreGetByIDFunc{
			defaultHook: func(context.Context, int32, int32) (*database.Namespace, error) {
				return nil, nil
			},
		},
		GetByNameFunc: &NamespaceStoreGetByNameFunc{
			defaultHook: func(context.Context, string) (*database.Namespace, error) {
				return nil, nil
			},
		},
		HandleFunc: &NamespaceStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				return nil
			},
		},
		TransactFunc: &NamespaceStoreTransactFunc{
			defaultHook: func(context.Context) (database.NamespaceStore, error) {
				return nil, nil
			},
		},
		WithFunc: &NamespaceStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) database.NamespaceStore {
				return nil
			},
		},
	}
}

// NewStrictMockNamespaceStore creates a new mock of the NamespaceStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockNamespaceStore() *MockNamespaceStore {
	return &MockNamespaceStore{
		GetByIDFunc: &NamespaceStoreGetByIDFunc{
			defaultHook: func(context.Context, int32, int32) (*database.Namespace, error) {
				panic("unexpected invocation of MockNamespaceStore.GetByID")
			},
		},
		GetByNameFunc: &NamespaceStoreGetByNameFunc{
			defaultHook: func(context.Context, string) (*database.Namespace, error) {
				panic("unexpected invocation of MockNamespaceStore.GetByName")
			},
		},
		HandleFunc: &NamespaceStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				panic("unexpected invocation of MockNamespaceStore.Handle")
			},
		},
		TransactFunc: &NamespaceStoreTransactFunc{
			defaultHook: func(context.Context) (database.NamespaceStore, error) {
				panic("unexpected invocation of MockNamespaceStore.Transact")
			},
		},
		WithFunc: &NamespaceStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) database.NamespaceStore {
				panic("unexpected invocation of MockNamespaceStore.With")
			},
		},
	}
}

// NewMockNamespaceStoreFrom creates a new mock of the MockNamespaceStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockNamespaceStoreFrom(i database.NamespaceStore) *MockNamespaceStore {
	return &MockNamespaceStore{
		GetByIDFunc: &NamespaceStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		GetByNameFunc: &NamespaceStoreGetByNameFunc{
			defaultHook: i.GetByName,
		},
		HandleFunc: &NamespaceStoreHandleFunc{
			defaultHook: i.Handle,
		},
		TransactFunc: &NamespaceStoreTransactFunc{
			defaultHook: i.Transact,
		},
		WithFunc: &NamespaceStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// NamespaceStoreGetByIDFunc describes the behavior when the GetByID method
// of the parent MockNamespaceStore instance is invoked.
type NamespaceStoreGetByIDFunc struct {
	defaultHook func(context.Context, int32, int32) (*database.Namespace, error)
	hooks       []func(context.Context, int32, int32) (*database.Namespace, error)
	history     []NamespaceStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockNamespaceStore) GetByID(v0 context.Context, v1 int32, v2 int32) (*database.Namespace, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1, v2)
	m.GetByIDFunc.appendCall(NamespaceStoreGetByIDFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockNamespaceStore instance is invoked and the hook queue is
// empty.
func (f *NamespaceStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int32, int32) (*database.Namespace, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockNamespaceStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *NamespaceStoreGetByIDFunc) PushHook(hook func(context.Context, int32, int32) (*database.Namespace, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *NamespaceStoreGetByIDFunc) SetDefaultReturn(r0 *database.Namespace, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, int32) (*database.Namespace, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *NamespaceStoreGetByIDFunc) PushReturn(r0 *database.Namespace, r1 error) {
	f.PushHook(func(context.Context, int32, int32) (*database.Namespace, error) {
		return r0, r1
	})
}

func (f *NamespaceStoreGetByIDFunc) nextHook() func(context.Context, int32, int32) (*database.Namespace, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NamespaceStoreGetByIDFunc) appendCall(r0 NamespaceStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NamespaceStoreGetByIDFuncCall objects
// describing the invocations of this function.
func (f *NamespaceStoreGetByIDFunc) History() []NamespaceStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]NamespaceStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NamespaceStoreGetByIDFuncCall is an object that describes an invocation
// of method GetByID on an instance of MockNamespaceStore.
type NamespaceStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *database.Namespace
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NamespaceStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NamespaceStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// NamespaceStoreGetByNameFunc describes the behavior when the GetByName
// method of the parent MockNamespaceStore instance is invoked.
type NamespaceStoreGetByNameFunc struct {
	defaultHook func(context.Context, string) (*database.Namespace, error)
	hooks       []func(context.Context, string) (*database.Namespace, error)
	history     []NamespaceStoreGetByNameFuncCall
	mutex       sync.Mutex
}

// GetByName delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockNamespaceStore) GetByName(v0 context.Context, v1 string) (*database.Namespace, error) {
	r0, r1 := m.GetByNameFunc.nextHook()(v0, v1)
	m.GetByNameFunc.appendCall(NamespaceStoreGetByNameFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByName method of
// the parent MockNamespaceStore instance is invoked and the hook queue is
// empty.
func (f *NamespaceStoreGetByNameFunc) SetDefaultHook(hook func(context.Context, string) (*database.Namespace, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByName method of the parent MockNamespaceStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *NamespaceStoreGetByNameFunc) PushHook(hook func(context.Context, string) (*database.Namespace, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *NamespaceStoreGetByNameFunc) SetDefaultReturn(r0 *database.Namespace, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*database.Namespace, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *NamespaceStoreGetByNameFunc) PushReturn(r0 *database.Namespace, r1 error) {
	f.PushHook(func(context.Context, string) (*database.Namespace, error) {
		return r0, r1
	})
}

func (f *NamespaceStoreGetByNameFunc) nextHook() func(context.Context, string) (*database.Namespace, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NamespaceStoreGetByNameFunc) appendCall(r0 NamespaceStoreGetByNameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NamespaceStoreGetByNameFuncCall objects
// describing the invocations of this function.
func (f *NamespaceStoreGetByNameFunc) History() []NamespaceStoreGetByNameFuncCall {
	f.mutex.Lock()
	history := make([]NamespaceStoreGetByNameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NamespaceStoreGetByNameFuncCall is an object that describes an invocation
// of method GetByName on an instance of MockNamespaceStore.
type NamespaceStoreGetByNameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *database.Namespace
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NamespaceStoreGetByNameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NamespaceStoreGetByNameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// NamespaceStoreHandleFunc describes the behavior when the Handle method of
// the parent MockNamespaceStore instance is invoked.
type NamespaceStoreHandleFunc struct {
	defaultHook func() *basestore.TransactableHandle
	hooks       []func() *basestore.TransactableHandle
	history     []NamespaceStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockNamespaceStore) Handle() *basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(NamespaceStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockNamespaceStore instance is invoked and the hook queue is
// empty.
func (f *NamespaceStoreHandleFunc) SetDefaultHook(hook func() *basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockNamespaceStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *NamespaceStoreHandleFunc) PushHook(hook func() *basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *NamespaceStoreHandleFunc) SetDefaultReturn(r0 *basestore.TransactableHandle) {
	f.SetDefaultHook(func() *basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *NamespaceStoreHandleFunc) PushReturn(r0 *basestore.TransactableHandle) {
	f.PushHook(func() *basestore.TransactableHandle {
		return r0
	})
}

func (f *NamespaceStoreHandleFunc) nextHook() func() *basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NamespaceStoreHandleFunc) appendCall(r0 NamespaceStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NamespaceStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *NamespaceStoreHandleFunc) History() []NamespaceStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]NamespaceStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NamespaceStoreHandleFuncCall is an object that describes an invocation of
// method Handle on an instance of MockNamespaceStore.
type NamespaceStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NamespaceStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NamespaceStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// NamespaceStoreTransactFunc describes the behavior when the Transact
// method of the parent MockNamespaceStore instance is invoked.
type NamespaceStoreTransactFunc struct {
	defaultHook func(context.Context) (database.NamespaceStore, error)
	hooks       []func(context.Context) (database.NamespaceStore, error)
	history     []NamespaceStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockNamespaceStore) Transact(v0 context.Context) (database.NamespaceStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(NamespaceStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockNamespaceStore instance is invoked and the hook queue is
// empty.
func (f *NamespaceStoreTransactFunc) SetDefaultHook(hook func(context.Context) (database.NamespaceStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockNamespaceStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *NamespaceStoreTransactFunc) PushHook(hook func(context.Context) (database.NamespaceStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *NamespaceStoreTransactFunc) SetDefaultReturn(r0 database.NamespaceStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (database.NamespaceStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *NamespaceStoreTransactFunc) PushReturn(r0 database.NamespaceStore, r1 error) {
	f.PushHook(func(context.Context) (database.NamespaceStore, error) {
		return r0, r1
	})
}

func (f *NamespaceStoreTransactFunc) nextHook() func(context.Context) (database.NamespaceStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NamespaceStoreTransactFunc) appendCall(r0 NamespaceStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NamespaceStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *NamespaceStoreTransactFunc) History() []NamespaceStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]NamespaceStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NamespaceStoreTransactFuncCall is an object that describes an invocation
// of method Transact on an instance of MockNamespaceStore.
type NamespaceStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.NamespaceStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NamespaceStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NamespaceStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// NamespaceStoreWithFunc describes the behavior when the With method of the
// parent MockNamespaceStore instance is invoked.
type NamespaceStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) database.NamespaceStore
	hooks       []func(basestore.ShareableStore) database.NamespaceStore
	history     []NamespaceStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockNamespaceStore) With(v0 basestore.ShareableStore) database.NamespaceStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(NamespaceStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockNamespaceStore instance is invoked and the hook queue is
// empty.
func (f *NamespaceStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) database.NamespaceStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockNamespaceStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *NamespaceStoreWithFunc) PushHook(hook func(basestore.ShareableStore) database.NamespaceStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *NamespaceStoreWithFunc) SetDefaultReturn(r0 database.NamespaceStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) database.NamespaceStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *NamespaceStoreWithFunc) PushReturn(r0 database.NamespaceStore) {
	f.PushHook(func(basestore.ShareableStore) database.NamespaceStore {
		return r0
	})
}

func (f *NamespaceStoreWithFunc) nextHook() func(basestore.ShareableStore) database.NamespaceStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NamespaceStoreWithFunc) appendCall(r0 NamespaceStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NamespaceStoreWithFuncCall objects
// describing the invocations of this function.
func (f *NamespaceStoreWithFunc) History() []NamespaceStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]NamespaceStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NamespaceStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockNamespaceStore.
type NamespaceStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.NamespaceStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NamespaceStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NamespaceStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
