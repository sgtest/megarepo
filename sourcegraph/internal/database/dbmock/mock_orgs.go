// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package dbmock

import (
	"context"
	"sync"

	database "github.com/sourcegraph/sourcegraph/internal/database"
	basestore "github.com/sourcegraph/sourcegraph/internal/database/basestore"
	types "github.com/sourcegraph/sourcegraph/internal/types"
)

// MockOrgStore is a mock implementation of the OrgStore interface (from the
// package github.com/sourcegraph/sourcegraph/internal/database) used for
// unit testing.
type MockOrgStore struct {
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *OrgStoreCountFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *OrgStoreCreateFunc
	// DeleteFunc is an instance of a mock function object controlling the
	// behavior of the method Delete.
	DeleteFunc *OrgStoreDeleteFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *OrgStoreDoneFunc
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *OrgStoreGetByIDFunc
	// GetByNameFunc is an instance of a mock function object controlling
	// the behavior of the method GetByName.
	GetByNameFunc *OrgStoreGetByNameFunc
	// GetByUserIDFunc is an instance of a mock function object controlling
	// the behavior of the method GetByUserID.
	GetByUserIDFunc *OrgStoreGetByUserIDFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *OrgStoreHandleFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *OrgStoreListFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *OrgStoreTransactFunc
	// UpdateFunc is an instance of a mock function object controlling the
	// behavior of the method Update.
	UpdateFunc *OrgStoreUpdateFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *OrgStoreWithFunc
}

// NewMockOrgStore creates a new mock of the OrgStore interface. All methods
// return zero values for all results, unless overwritten.
func NewMockOrgStore() *MockOrgStore {
	return &MockOrgStore{
		CountFunc: &OrgStoreCountFunc{
			defaultHook: func(context.Context, database.OrgsListOptions) (int, error) {
				return 0, nil
			},
		},
		CreateFunc: &OrgStoreCreateFunc{
			defaultHook: func(context.Context, string, *string) (*types.Org, error) {
				return nil, nil
			},
		},
		DeleteFunc: &OrgStoreDeleteFunc{
			defaultHook: func(context.Context, int32) error {
				return nil
			},
		},
		DoneFunc: &OrgStoreDoneFunc{
			defaultHook: func(error) error {
				return nil
			},
		},
		GetByIDFunc: &OrgStoreGetByIDFunc{
			defaultHook: func(context.Context, int32) (*types.Org, error) {
				return nil, nil
			},
		},
		GetByNameFunc: &OrgStoreGetByNameFunc{
			defaultHook: func(context.Context, string) (*types.Org, error) {
				return nil, nil
			},
		},
		GetByUserIDFunc: &OrgStoreGetByUserIDFunc{
			defaultHook: func(context.Context, int32) ([]*types.Org, error) {
				return nil, nil
			},
		},
		HandleFunc: &OrgStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				return nil
			},
		},
		ListFunc: &OrgStoreListFunc{
			defaultHook: func(context.Context, *database.OrgsListOptions) ([]*types.Org, error) {
				return nil, nil
			},
		},
		TransactFunc: &OrgStoreTransactFunc{
			defaultHook: func(context.Context) (database.OrgStore, error) {
				return nil, nil
			},
		},
		UpdateFunc: &OrgStoreUpdateFunc{
			defaultHook: func(context.Context, int32, *string) (*types.Org, error) {
				return nil, nil
			},
		},
		WithFunc: &OrgStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) database.OrgStore {
				return nil
			},
		},
	}
}

// NewMockOrgStoreFrom creates a new mock of the MockOrgStore interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockOrgStoreFrom(i database.OrgStore) *MockOrgStore {
	return &MockOrgStore{
		CountFunc: &OrgStoreCountFunc{
			defaultHook: i.Count,
		},
		CreateFunc: &OrgStoreCreateFunc{
			defaultHook: i.Create,
		},
		DeleteFunc: &OrgStoreDeleteFunc{
			defaultHook: i.Delete,
		},
		DoneFunc: &OrgStoreDoneFunc{
			defaultHook: i.Done,
		},
		GetByIDFunc: &OrgStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		GetByNameFunc: &OrgStoreGetByNameFunc{
			defaultHook: i.GetByName,
		},
		GetByUserIDFunc: &OrgStoreGetByUserIDFunc{
			defaultHook: i.GetByUserID,
		},
		HandleFunc: &OrgStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListFunc: &OrgStoreListFunc{
			defaultHook: i.List,
		},
		TransactFunc: &OrgStoreTransactFunc{
			defaultHook: i.Transact,
		},
		UpdateFunc: &OrgStoreUpdateFunc{
			defaultHook: i.Update,
		},
		WithFunc: &OrgStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// OrgStoreCountFunc describes the behavior when the Count method of the
// parent MockOrgStore instance is invoked.
type OrgStoreCountFunc struct {
	defaultHook func(context.Context, database.OrgsListOptions) (int, error)
	hooks       []func(context.Context, database.OrgsListOptions) (int, error)
	history     []OrgStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgStore) Count(v0 context.Context, v1 database.OrgsListOptions) (int, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(OrgStoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockOrgStore instance is invoked and the hook queue is empty.
func (f *OrgStoreCountFunc) SetDefaultHook(hook func(context.Context, database.OrgsListOptions) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockOrgStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *OrgStoreCountFunc) PushHook(hook func(context.Context, database.OrgsListOptions) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *OrgStoreCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, database.OrgsListOptions) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *OrgStoreCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, database.OrgsListOptions) (int, error) {
		return r0, r1
	})
}

func (f *OrgStoreCountFunc) nextHook() func(context.Context, database.OrgsListOptions) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreCountFunc) appendCall(r0 OrgStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreCountFuncCall objects describing
// the invocations of this function.
func (f *OrgStoreCountFunc) History() []OrgStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreCountFuncCall is an object that describes an invocation of method
// Count on an instance of MockOrgStore.
type OrgStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.OrgsListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgStoreCreateFunc describes the behavior when the Create method of the
// parent MockOrgStore instance is invoked.
type OrgStoreCreateFunc struct {
	defaultHook func(context.Context, string, *string) (*types.Org, error)
	hooks       []func(context.Context, string, *string) (*types.Org, error)
	history     []OrgStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgStore) Create(v0 context.Context, v1 string, v2 *string) (*types.Org, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1, v2)
	m.CreateFunc.appendCall(OrgStoreCreateFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockOrgStore instance is invoked and the hook queue is empty.
func (f *OrgStoreCreateFunc) SetDefaultHook(hook func(context.Context, string, *string) (*types.Org, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockOrgStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *OrgStoreCreateFunc) PushHook(hook func(context.Context, string, *string) (*types.Org, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *OrgStoreCreateFunc) SetDefaultReturn(r0 *types.Org, r1 error) {
	f.SetDefaultHook(func(context.Context, string, *string) (*types.Org, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *OrgStoreCreateFunc) PushReturn(r0 *types.Org, r1 error) {
	f.PushHook(func(context.Context, string, *string) (*types.Org, error) {
		return r0, r1
	})
}

func (f *OrgStoreCreateFunc) nextHook() func(context.Context, string, *string) (*types.Org, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreCreateFunc) appendCall(r0 OrgStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreCreateFuncCall objects describing
// the invocations of this function.
func (f *OrgStoreCreateFunc) History() []OrgStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreCreateFuncCall is an object that describes an invocation of
// method Create on an instance of MockOrgStore.
type OrgStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Org
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgStoreDeleteFunc describes the behavior when the Delete method of the
// parent MockOrgStore instance is invoked.
type OrgStoreDeleteFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []OrgStoreDeleteFuncCall
	mutex       sync.Mutex
}

// Delete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgStore) Delete(v0 context.Context, v1 int32) error {
	r0 := m.DeleteFunc.nextHook()(v0, v1)
	m.DeleteFunc.appendCall(OrgStoreDeleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Delete method of the
// parent MockOrgStore instance is invoked and the hook queue is empty.
func (f *OrgStoreDeleteFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Delete method of the parent MockOrgStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *OrgStoreDeleteFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *OrgStoreDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *OrgStoreDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *OrgStoreDeleteFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreDeleteFunc) appendCall(r0 OrgStoreDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreDeleteFuncCall objects describing
// the invocations of this function.
func (f *OrgStoreDeleteFunc) History() []OrgStoreDeleteFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreDeleteFuncCall is an object that describes an invocation of
// method Delete on an instance of MockOrgStore.
type OrgStoreDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OrgStoreDoneFunc describes the behavior when the Done method of the
// parent MockOrgStore instance is invoked.
type OrgStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []OrgStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(OrgStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockOrgStore instance is invoked and the hook queue is empty.
func (f *OrgStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockOrgStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *OrgStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *OrgStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *OrgStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *OrgStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreDoneFunc) appendCall(r0 OrgStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreDoneFuncCall objects describing the
// invocations of this function.
func (f *OrgStoreDoneFunc) History() []OrgStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreDoneFuncCall is an object that describes an invocation of method
// Done on an instance of MockOrgStore.
type OrgStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OrgStoreGetByIDFunc describes the behavior when the GetByID method of the
// parent MockOrgStore instance is invoked.
type OrgStoreGetByIDFunc struct {
	defaultHook func(context.Context, int32) (*types.Org, error)
	hooks       []func(context.Context, int32) (*types.Org, error)
	history     []OrgStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgStore) GetByID(v0 context.Context, v1 int32) (*types.Org, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(OrgStoreGetByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockOrgStore instance is invoked and the hook queue is empty.
func (f *OrgStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int32) (*types.Org, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockOrgStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *OrgStoreGetByIDFunc) PushHook(hook func(context.Context, int32) (*types.Org, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *OrgStoreGetByIDFunc) SetDefaultReturn(r0 *types.Org, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (*types.Org, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *OrgStoreGetByIDFunc) PushReturn(r0 *types.Org, r1 error) {
	f.PushHook(func(context.Context, int32) (*types.Org, error) {
		return r0, r1
	})
}

func (f *OrgStoreGetByIDFunc) nextHook() func(context.Context, int32) (*types.Org, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreGetByIDFunc) appendCall(r0 OrgStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreGetByIDFuncCall objects describing
// the invocations of this function.
func (f *OrgStoreGetByIDFunc) History() []OrgStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreGetByIDFuncCall is an object that describes an invocation of
// method GetByID on an instance of MockOrgStore.
type OrgStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Org
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgStoreGetByNameFunc describes the behavior when the GetByName method of
// the parent MockOrgStore instance is invoked.
type OrgStoreGetByNameFunc struct {
	defaultHook func(context.Context, string) (*types.Org, error)
	hooks       []func(context.Context, string) (*types.Org, error)
	history     []OrgStoreGetByNameFuncCall
	mutex       sync.Mutex
}

// GetByName delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgStore) GetByName(v0 context.Context, v1 string) (*types.Org, error) {
	r0, r1 := m.GetByNameFunc.nextHook()(v0, v1)
	m.GetByNameFunc.appendCall(OrgStoreGetByNameFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByName method of
// the parent MockOrgStore instance is invoked and the hook queue is empty.
func (f *OrgStoreGetByNameFunc) SetDefaultHook(hook func(context.Context, string) (*types.Org, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByName method of the parent MockOrgStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *OrgStoreGetByNameFunc) PushHook(hook func(context.Context, string) (*types.Org, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *OrgStoreGetByNameFunc) SetDefaultReturn(r0 *types.Org, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*types.Org, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *OrgStoreGetByNameFunc) PushReturn(r0 *types.Org, r1 error) {
	f.PushHook(func(context.Context, string) (*types.Org, error) {
		return r0, r1
	})
}

func (f *OrgStoreGetByNameFunc) nextHook() func(context.Context, string) (*types.Org, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreGetByNameFunc) appendCall(r0 OrgStoreGetByNameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreGetByNameFuncCall objects
// describing the invocations of this function.
func (f *OrgStoreGetByNameFunc) History() []OrgStoreGetByNameFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreGetByNameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreGetByNameFuncCall is an object that describes an invocation of
// method GetByName on an instance of MockOrgStore.
type OrgStoreGetByNameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Org
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreGetByNameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreGetByNameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgStoreGetByUserIDFunc describes the behavior when the GetByUserID
// method of the parent MockOrgStore instance is invoked.
type OrgStoreGetByUserIDFunc struct {
	defaultHook func(context.Context, int32) ([]*types.Org, error)
	hooks       []func(context.Context, int32) ([]*types.Org, error)
	history     []OrgStoreGetByUserIDFuncCall
	mutex       sync.Mutex
}

// GetByUserID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockOrgStore) GetByUserID(v0 context.Context, v1 int32) ([]*types.Org, error) {
	r0, r1 := m.GetByUserIDFunc.nextHook()(v0, v1)
	m.GetByUserIDFunc.appendCall(OrgStoreGetByUserIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByUserID method
// of the parent MockOrgStore instance is invoked and the hook queue is
// empty.
func (f *OrgStoreGetByUserIDFunc) SetDefaultHook(hook func(context.Context, int32) ([]*types.Org, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByUserID method of the parent MockOrgStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *OrgStoreGetByUserIDFunc) PushHook(hook func(context.Context, int32) ([]*types.Org, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *OrgStoreGetByUserIDFunc) SetDefaultReturn(r0 []*types.Org, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) ([]*types.Org, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *OrgStoreGetByUserIDFunc) PushReturn(r0 []*types.Org, r1 error) {
	f.PushHook(func(context.Context, int32) ([]*types.Org, error) {
		return r0, r1
	})
}

func (f *OrgStoreGetByUserIDFunc) nextHook() func(context.Context, int32) ([]*types.Org, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreGetByUserIDFunc) appendCall(r0 OrgStoreGetByUserIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreGetByUserIDFuncCall objects
// describing the invocations of this function.
func (f *OrgStoreGetByUserIDFunc) History() []OrgStoreGetByUserIDFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreGetByUserIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreGetByUserIDFuncCall is an object that describes an invocation of
// method GetByUserID on an instance of MockOrgStore.
type OrgStoreGetByUserIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.Org
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreGetByUserIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreGetByUserIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgStoreHandleFunc describes the behavior when the Handle method of the
// parent MockOrgStore instance is invoked.
type OrgStoreHandleFunc struct {
	defaultHook func() *basestore.TransactableHandle
	hooks       []func() *basestore.TransactableHandle
	history     []OrgStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgStore) Handle() *basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(OrgStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockOrgStore instance is invoked and the hook queue is empty.
func (f *OrgStoreHandleFunc) SetDefaultHook(hook func() *basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockOrgStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *OrgStoreHandleFunc) PushHook(hook func() *basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *OrgStoreHandleFunc) SetDefaultReturn(r0 *basestore.TransactableHandle) {
	f.SetDefaultHook(func() *basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *OrgStoreHandleFunc) PushReturn(r0 *basestore.TransactableHandle) {
	f.PushHook(func() *basestore.TransactableHandle {
		return r0
	})
}

func (f *OrgStoreHandleFunc) nextHook() func() *basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreHandleFunc) appendCall(r0 OrgStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreHandleFuncCall objects describing
// the invocations of this function.
func (f *OrgStoreHandleFunc) History() []OrgStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreHandleFuncCall is an object that describes an invocation of
// method Handle on an instance of MockOrgStore.
type OrgStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OrgStoreListFunc describes the behavior when the List method of the
// parent MockOrgStore instance is invoked.
type OrgStoreListFunc struct {
	defaultHook func(context.Context, *database.OrgsListOptions) ([]*types.Org, error)
	hooks       []func(context.Context, *database.OrgsListOptions) ([]*types.Org, error)
	history     []OrgStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgStore) List(v0 context.Context, v1 *database.OrgsListOptions) ([]*types.Org, error) {
	r0, r1 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(OrgStoreListFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockOrgStore instance is invoked and the hook queue is empty.
func (f *OrgStoreListFunc) SetDefaultHook(hook func(context.Context, *database.OrgsListOptions) ([]*types.Org, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockOrgStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *OrgStoreListFunc) PushHook(hook func(context.Context, *database.OrgsListOptions) ([]*types.Org, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *OrgStoreListFunc) SetDefaultReturn(r0 []*types.Org, r1 error) {
	f.SetDefaultHook(func(context.Context, *database.OrgsListOptions) ([]*types.Org, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *OrgStoreListFunc) PushReturn(r0 []*types.Org, r1 error) {
	f.PushHook(func(context.Context, *database.OrgsListOptions) ([]*types.Org, error) {
		return r0, r1
	})
}

func (f *OrgStoreListFunc) nextHook() func(context.Context, *database.OrgsListOptions) ([]*types.Org, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreListFunc) appendCall(r0 OrgStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreListFuncCall objects describing the
// invocations of this function.
func (f *OrgStoreListFunc) History() []OrgStoreListFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreListFuncCall is an object that describes an invocation of method
// List on an instance of MockOrgStore.
type OrgStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *database.OrgsListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.Org
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgStoreTransactFunc describes the behavior when the Transact method of
// the parent MockOrgStore instance is invoked.
type OrgStoreTransactFunc struct {
	defaultHook func(context.Context) (database.OrgStore, error)
	hooks       []func(context.Context) (database.OrgStore, error)
	history     []OrgStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgStore) Transact(v0 context.Context) (database.OrgStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(OrgStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockOrgStore instance is invoked and the hook queue is empty.
func (f *OrgStoreTransactFunc) SetDefaultHook(hook func(context.Context) (database.OrgStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockOrgStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *OrgStoreTransactFunc) PushHook(hook func(context.Context) (database.OrgStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *OrgStoreTransactFunc) SetDefaultReturn(r0 database.OrgStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (database.OrgStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *OrgStoreTransactFunc) PushReturn(r0 database.OrgStore, r1 error) {
	f.PushHook(func(context.Context) (database.OrgStore, error) {
		return r0, r1
	})
}

func (f *OrgStoreTransactFunc) nextHook() func(context.Context) (database.OrgStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreTransactFunc) appendCall(r0 OrgStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreTransactFuncCall objects describing
// the invocations of this function.
func (f *OrgStoreTransactFunc) History() []OrgStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreTransactFuncCall is an object that describes an invocation of
// method Transact on an instance of MockOrgStore.
type OrgStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.OrgStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgStoreUpdateFunc describes the behavior when the Update method of the
// parent MockOrgStore instance is invoked.
type OrgStoreUpdateFunc struct {
	defaultHook func(context.Context, int32, *string) (*types.Org, error)
	hooks       []func(context.Context, int32, *string) (*types.Org, error)
	history     []OrgStoreUpdateFuncCall
	mutex       sync.Mutex
}

// Update delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgStore) Update(v0 context.Context, v1 int32, v2 *string) (*types.Org, error) {
	r0, r1 := m.UpdateFunc.nextHook()(v0, v1, v2)
	m.UpdateFunc.appendCall(OrgStoreUpdateFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Update method of the
// parent MockOrgStore instance is invoked and the hook queue is empty.
func (f *OrgStoreUpdateFunc) SetDefaultHook(hook func(context.Context, int32, *string) (*types.Org, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Update method of the parent MockOrgStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *OrgStoreUpdateFunc) PushHook(hook func(context.Context, int32, *string) (*types.Org, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *OrgStoreUpdateFunc) SetDefaultReturn(r0 *types.Org, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, *string) (*types.Org, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *OrgStoreUpdateFunc) PushReturn(r0 *types.Org, r1 error) {
	f.PushHook(func(context.Context, int32, *string) (*types.Org, error) {
		return r0, r1
	})
}

func (f *OrgStoreUpdateFunc) nextHook() func(context.Context, int32, *string) (*types.Org, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreUpdateFunc) appendCall(r0 OrgStoreUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreUpdateFuncCall objects describing
// the invocations of this function.
func (f *OrgStoreUpdateFunc) History() []OrgStoreUpdateFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreUpdateFuncCall is an object that describes an invocation of
// method Update on an instance of MockOrgStore.
type OrgStoreUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Org
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgStoreWithFunc describes the behavior when the With method of the
// parent MockOrgStore instance is invoked.
type OrgStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) database.OrgStore
	hooks       []func(basestore.ShareableStore) database.OrgStore
	history     []OrgStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgStore) With(v0 basestore.ShareableStore) database.OrgStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(OrgStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockOrgStore instance is invoked and the hook queue is empty.
func (f *OrgStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) database.OrgStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockOrgStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *OrgStoreWithFunc) PushHook(hook func(basestore.ShareableStore) database.OrgStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *OrgStoreWithFunc) SetDefaultReturn(r0 database.OrgStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) database.OrgStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *OrgStoreWithFunc) PushReturn(r0 database.OrgStore) {
	f.PushHook(func(basestore.ShareableStore) database.OrgStore {
		return r0
	})
}

func (f *OrgStoreWithFunc) nextHook() func(basestore.ShareableStore) database.OrgStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreWithFunc) appendCall(r0 OrgStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreWithFuncCall objects describing the
// invocations of this function.
func (f *OrgStoreWithFunc) History() []OrgStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreWithFuncCall is an object that describes an invocation of method
// With on an instance of MockOrgStore.
type OrgStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.OrgStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
