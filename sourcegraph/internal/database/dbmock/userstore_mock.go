// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package dbmock

import (
	"context"
	"database/sql"
	"sync"

	sqlf "github.com/keegancsmith/sqlf"
	conf "github.com/sourcegraph/sourcegraph/internal/conf"
	database "github.com/sourcegraph/sourcegraph/internal/database"
	basestore "github.com/sourcegraph/sourcegraph/internal/database/basestore"
	types "github.com/sourcegraph/sourcegraph/internal/types"
)

// MockUserStore is a mock implementation of the UserStore interface (from
// the package github.com/sourcegraph/sourcegraph/internal/database) used
// for unit testing.
type MockUserStore struct {
	// CheckAndDecrementInviteQuotaFunc is an instance of a mock function
	// object controlling the behavior of the method
	// CheckAndDecrementInviteQuota.
	CheckAndDecrementInviteQuotaFunc *UserStoreCheckAndDecrementInviteQuotaFunc
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *UserStoreCountFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *UserStoreCreateFunc
	// CreateInTransactionFunc is an instance of a mock function object
	// controlling the behavior of the method CreateInTransaction.
	CreateInTransactionFunc *UserStoreCreateInTransactionFunc
	// CreatePasswordFunc is an instance of a mock function object
	// controlling the behavior of the method CreatePassword.
	CreatePasswordFunc *UserStoreCreatePasswordFunc
	// CurrentUserAllowedExternalServicesFunc is an instance of a mock
	// function object controlling the behavior of the method
	// CurrentUserAllowedExternalServices.
	CurrentUserAllowedExternalServicesFunc *UserStoreCurrentUserAllowedExternalServicesFunc
	// DeleteFunc is an instance of a mock function object controlling the
	// behavior of the method Delete.
	DeleteFunc *UserStoreDeleteFunc
	// DeletePasswordResetCodeFunc is an instance of a mock function object
	// controlling the behavior of the method DeletePasswordResetCode.
	DeletePasswordResetCodeFunc *UserStoreDeletePasswordResetCodeFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *UserStoreDoneFunc
	// ExecFunc is an instance of a mock function object controlling the
	// behavior of the method Exec.
	ExecFunc *UserStoreExecFunc
	// ExecResultFunc is an instance of a mock function object controlling
	// the behavior of the method ExecResult.
	ExecResultFunc *UserStoreExecResultFunc
	// GetByCurrentAuthUserFunc is an instance of a mock function object
	// controlling the behavior of the method GetByCurrentAuthUser.
	GetByCurrentAuthUserFunc *UserStoreGetByCurrentAuthUserFunc
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *UserStoreGetByIDFunc
	// GetByUsernameFunc is an instance of a mock function object
	// controlling the behavior of the method GetByUsername.
	GetByUsernameFunc *UserStoreGetByUsernameFunc
	// GetByUsernamesFunc is an instance of a mock function object
	// controlling the behavior of the method GetByUsernames.
	GetByUsernamesFunc *UserStoreGetByUsernamesFunc
	// GetByVerifiedEmailFunc is an instance of a mock function object
	// controlling the behavior of the method GetByVerifiedEmail.
	GetByVerifiedEmailFunc *UserStoreGetByVerifiedEmailFunc
	// HardDeleteFunc is an instance of a mock function object controlling
	// the behavior of the method HardDelete.
	HardDeleteFunc *UserStoreHardDeleteFunc
	// HasTagFunc is an instance of a mock function object controlling the
	// behavior of the method HasTag.
	HasTagFunc *UserStoreHasTagFunc
	// InvalidateSessionsByIDFunc is an instance of a mock function object
	// controlling the behavior of the method InvalidateSessionsByID.
	InvalidateSessionsByIDFunc *UserStoreInvalidateSessionsByIDFunc
	// IsPasswordFunc is an instance of a mock function object controlling
	// the behavior of the method IsPassword.
	IsPasswordFunc *UserStoreIsPasswordFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *UserStoreListFunc
	// ListDatesFunc is an instance of a mock function object controlling
	// the behavior of the method ListDates.
	ListDatesFunc *UserStoreListDatesFunc
	// RandomizePasswordAndClearPasswordResetRateLimitFunc is an instance of
	// a mock function object controlling the behavior of the method
	// RandomizePasswordAndClearPasswordResetRateLimit.
	RandomizePasswordAndClearPasswordResetRateLimitFunc *UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc
	// RenewPasswordResetCodeFunc is an instance of a mock function object
	// controlling the behavior of the method RenewPasswordResetCode.
	RenewPasswordResetCodeFunc *UserStoreRenewPasswordResetCodeFunc
	// SetIsSiteAdminFunc is an instance of a mock function object
	// controlling the behavior of the method SetIsSiteAdmin.
	SetIsSiteAdminFunc *UserStoreSetIsSiteAdminFunc
	// SetPasswordFunc is an instance of a mock function object controlling
	// the behavior of the method SetPassword.
	SetPasswordFunc *UserStoreSetPasswordFunc
	// SetTagFunc is an instance of a mock function object controlling the
	// behavior of the method SetTag.
	SetTagFunc *UserStoreSetTagFunc
	// TagsFunc is an instance of a mock function object controlling the
	// behavior of the method Tags.
	TagsFunc *UserStoreTagsFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *UserStoreTransactFunc
	// UpdateFunc is an instance of a mock function object controlling the
	// behavior of the method Update.
	UpdateFunc *UserStoreUpdateFunc
	// UpdatePasswordFunc is an instance of a mock function object
	// controlling the behavior of the method UpdatePassword.
	UpdatePasswordFunc *UserStoreUpdatePasswordFunc
	// UserAllowedExternalServicesFunc is an instance of a mock function
	// object controlling the behavior of the method
	// UserAllowedExternalServices.
	UserAllowedExternalServicesFunc *UserStoreUserAllowedExternalServicesFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *UserStoreWithFunc
}

// NewMockUserStore creates a new mock of the UserStore interface. All
// methods return zero values for all results, unless overwritten.
func NewMockUserStore() *MockUserStore {
	return &MockUserStore{
		CheckAndDecrementInviteQuotaFunc: &UserStoreCheckAndDecrementInviteQuotaFunc{
			defaultHook: func(context.Context, int32) (bool, error) {
				return false, nil
			},
		},
		CountFunc: &UserStoreCountFunc{
			defaultHook: func(context.Context, *database.UsersListOptions) (int, error) {
				return 0, nil
			},
		},
		CreateFunc: &UserStoreCreateFunc{
			defaultHook: func(context.Context, database.NewUser) (*types.User, error) {
				return nil, nil
			},
		},
		CreateInTransactionFunc: &UserStoreCreateInTransactionFunc{
			defaultHook: func(context.Context, database.NewUser) (*types.User, error) {
				return nil, nil
			},
		},
		CreatePasswordFunc: &UserStoreCreatePasswordFunc{
			defaultHook: func(context.Context, int32, string) error {
				return nil
			},
		},
		CurrentUserAllowedExternalServicesFunc: &UserStoreCurrentUserAllowedExternalServicesFunc{
			defaultHook: func(context.Context) (conf.ExternalServiceMode, error) {
				return 0, nil
			},
		},
		DeleteFunc: &UserStoreDeleteFunc{
			defaultHook: func(context.Context, int32) error {
				return nil
			},
		},
		DeletePasswordResetCodeFunc: &UserStoreDeletePasswordResetCodeFunc{
			defaultHook: func(context.Context, int32) error {
				return nil
			},
		},
		DoneFunc: &UserStoreDoneFunc{
			defaultHook: func(error) error {
				return nil
			},
		},
		ExecFunc: &UserStoreExecFunc{
			defaultHook: func(context.Context, *sqlf.Query) error {
				return nil
			},
		},
		ExecResultFunc: &UserStoreExecResultFunc{
			defaultHook: func(context.Context, *sqlf.Query) (sql.Result, error) {
				return nil, nil
			},
		},
		GetByCurrentAuthUserFunc: &UserStoreGetByCurrentAuthUserFunc{
			defaultHook: func(context.Context) (*types.User, error) {
				return nil, nil
			},
		},
		GetByIDFunc: &UserStoreGetByIDFunc{
			defaultHook: func(context.Context, int32) (*types.User, error) {
				return nil, nil
			},
		},
		GetByUsernameFunc: &UserStoreGetByUsernameFunc{
			defaultHook: func(context.Context, string) (*types.User, error) {
				return nil, nil
			},
		},
		GetByUsernamesFunc: &UserStoreGetByUsernamesFunc{
			defaultHook: func(context.Context, ...string) ([]*types.User, error) {
				return nil, nil
			},
		},
		GetByVerifiedEmailFunc: &UserStoreGetByVerifiedEmailFunc{
			defaultHook: func(context.Context, string) (*types.User, error) {
				return nil, nil
			},
		},
		HardDeleteFunc: &UserStoreHardDeleteFunc{
			defaultHook: func(context.Context, int32) error {
				return nil
			},
		},
		HasTagFunc: &UserStoreHasTagFunc{
			defaultHook: func(context.Context, int32, string) (bool, error) {
				return false, nil
			},
		},
		InvalidateSessionsByIDFunc: &UserStoreInvalidateSessionsByIDFunc{
			defaultHook: func(context.Context, int32) error {
				return nil
			},
		},
		IsPasswordFunc: &UserStoreIsPasswordFunc{
			defaultHook: func(context.Context, int32, string) (bool, error) {
				return false, nil
			},
		},
		ListFunc: &UserStoreListFunc{
			defaultHook: func(context.Context, *database.UsersListOptions) ([]*types.User, error) {
				return nil, nil
			},
		},
		ListDatesFunc: &UserStoreListDatesFunc{
			defaultHook: func(context.Context) ([]types.UserDates, error) {
				return nil, nil
			},
		},
		RandomizePasswordAndClearPasswordResetRateLimitFunc: &UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc{
			defaultHook: func(context.Context, int32) error {
				return nil
			},
		},
		RenewPasswordResetCodeFunc: &UserStoreRenewPasswordResetCodeFunc{
			defaultHook: func(context.Context, int32) (string, error) {
				return "", nil
			},
		},
		SetIsSiteAdminFunc: &UserStoreSetIsSiteAdminFunc{
			defaultHook: func(context.Context, int32, bool) error {
				return nil
			},
		},
		SetPasswordFunc: &UserStoreSetPasswordFunc{
			defaultHook: func(context.Context, int32, string, string) (bool, error) {
				return false, nil
			},
		},
		SetTagFunc: &UserStoreSetTagFunc{
			defaultHook: func(context.Context, int32, string, bool) error {
				return nil
			},
		},
		TagsFunc: &UserStoreTagsFunc{
			defaultHook: func(context.Context, int32) (map[string]bool, error) {
				return nil, nil
			},
		},
		TransactFunc: &UserStoreTransactFunc{
			defaultHook: func(context.Context) (database.UserStore, error) {
				return nil, nil
			},
		},
		UpdateFunc: &UserStoreUpdateFunc{
			defaultHook: func(context.Context, int32, database.UserUpdate) error {
				return nil
			},
		},
		UpdatePasswordFunc: &UserStoreUpdatePasswordFunc{
			defaultHook: func(context.Context, int32, string, string) error {
				return nil
			},
		},
		UserAllowedExternalServicesFunc: &UserStoreUserAllowedExternalServicesFunc{
			defaultHook: func(context.Context, int32) (conf.ExternalServiceMode, error) {
				return 0, nil
			},
		},
		WithFunc: &UserStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) database.UserStore {
				return nil
			},
		},
	}
}

// NewStrictMockUserStore creates a new mock of the UserStore interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockUserStore() *MockUserStore {
	return &MockUserStore{
		CheckAndDecrementInviteQuotaFunc: &UserStoreCheckAndDecrementInviteQuotaFunc{
			defaultHook: func(context.Context, int32) (bool, error) {
				panic("unexpected invocation of MockUserStore.CheckAndDecrementInviteQuota")
			},
		},
		CountFunc: &UserStoreCountFunc{
			defaultHook: func(context.Context, *database.UsersListOptions) (int, error) {
				panic("unexpected invocation of MockUserStore.Count")
			},
		},
		CreateFunc: &UserStoreCreateFunc{
			defaultHook: func(context.Context, database.NewUser) (*types.User, error) {
				panic("unexpected invocation of MockUserStore.Create")
			},
		},
		CreateInTransactionFunc: &UserStoreCreateInTransactionFunc{
			defaultHook: func(context.Context, database.NewUser) (*types.User, error) {
				panic("unexpected invocation of MockUserStore.CreateInTransaction")
			},
		},
		CreatePasswordFunc: &UserStoreCreatePasswordFunc{
			defaultHook: func(context.Context, int32, string) error {
				panic("unexpected invocation of MockUserStore.CreatePassword")
			},
		},
		CurrentUserAllowedExternalServicesFunc: &UserStoreCurrentUserAllowedExternalServicesFunc{
			defaultHook: func(context.Context) (conf.ExternalServiceMode, error) {
				panic("unexpected invocation of MockUserStore.CurrentUserAllowedExternalServices")
			},
		},
		DeleteFunc: &UserStoreDeleteFunc{
			defaultHook: func(context.Context, int32) error {
				panic("unexpected invocation of MockUserStore.Delete")
			},
		},
		DeletePasswordResetCodeFunc: &UserStoreDeletePasswordResetCodeFunc{
			defaultHook: func(context.Context, int32) error {
				panic("unexpected invocation of MockUserStore.DeletePasswordResetCode")
			},
		},
		DoneFunc: &UserStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockUserStore.Done")
			},
		},
		ExecFunc: &UserStoreExecFunc{
			defaultHook: func(context.Context, *sqlf.Query) error {
				panic("unexpected invocation of MockUserStore.Exec")
			},
		},
		ExecResultFunc: &UserStoreExecResultFunc{
			defaultHook: func(context.Context, *sqlf.Query) (sql.Result, error) {
				panic("unexpected invocation of MockUserStore.ExecResult")
			},
		},
		GetByCurrentAuthUserFunc: &UserStoreGetByCurrentAuthUserFunc{
			defaultHook: func(context.Context) (*types.User, error) {
				panic("unexpected invocation of MockUserStore.GetByCurrentAuthUser")
			},
		},
		GetByIDFunc: &UserStoreGetByIDFunc{
			defaultHook: func(context.Context, int32) (*types.User, error) {
				panic("unexpected invocation of MockUserStore.GetByID")
			},
		},
		GetByUsernameFunc: &UserStoreGetByUsernameFunc{
			defaultHook: func(context.Context, string) (*types.User, error) {
				panic("unexpected invocation of MockUserStore.GetByUsername")
			},
		},
		GetByUsernamesFunc: &UserStoreGetByUsernamesFunc{
			defaultHook: func(context.Context, ...string) ([]*types.User, error) {
				panic("unexpected invocation of MockUserStore.GetByUsernames")
			},
		},
		GetByVerifiedEmailFunc: &UserStoreGetByVerifiedEmailFunc{
			defaultHook: func(context.Context, string) (*types.User, error) {
				panic("unexpected invocation of MockUserStore.GetByVerifiedEmail")
			},
		},
		HardDeleteFunc: &UserStoreHardDeleteFunc{
			defaultHook: func(context.Context, int32) error {
				panic("unexpected invocation of MockUserStore.HardDelete")
			},
		},
		HasTagFunc: &UserStoreHasTagFunc{
			defaultHook: func(context.Context, int32, string) (bool, error) {
				panic("unexpected invocation of MockUserStore.HasTag")
			},
		},
		InvalidateSessionsByIDFunc: &UserStoreInvalidateSessionsByIDFunc{
			defaultHook: func(context.Context, int32) error {
				panic("unexpected invocation of MockUserStore.InvalidateSessionsByID")
			},
		},
		IsPasswordFunc: &UserStoreIsPasswordFunc{
			defaultHook: func(context.Context, int32, string) (bool, error) {
				panic("unexpected invocation of MockUserStore.IsPassword")
			},
		},
		ListFunc: &UserStoreListFunc{
			defaultHook: func(context.Context, *database.UsersListOptions) ([]*types.User, error) {
				panic("unexpected invocation of MockUserStore.List")
			},
		},
		ListDatesFunc: &UserStoreListDatesFunc{
			defaultHook: func(context.Context) ([]types.UserDates, error) {
				panic("unexpected invocation of MockUserStore.ListDates")
			},
		},
		RandomizePasswordAndClearPasswordResetRateLimitFunc: &UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc{
			defaultHook: func(context.Context, int32) error {
				panic("unexpected invocation of MockUserStore.RandomizePasswordAndClearPasswordResetRateLimit")
			},
		},
		RenewPasswordResetCodeFunc: &UserStoreRenewPasswordResetCodeFunc{
			defaultHook: func(context.Context, int32) (string, error) {
				panic("unexpected invocation of MockUserStore.RenewPasswordResetCode")
			},
		},
		SetIsSiteAdminFunc: &UserStoreSetIsSiteAdminFunc{
			defaultHook: func(context.Context, int32, bool) error {
				panic("unexpected invocation of MockUserStore.SetIsSiteAdmin")
			},
		},
		SetPasswordFunc: &UserStoreSetPasswordFunc{
			defaultHook: func(context.Context, int32, string, string) (bool, error) {
				panic("unexpected invocation of MockUserStore.SetPassword")
			},
		},
		SetTagFunc: &UserStoreSetTagFunc{
			defaultHook: func(context.Context, int32, string, bool) error {
				panic("unexpected invocation of MockUserStore.SetTag")
			},
		},
		TagsFunc: &UserStoreTagsFunc{
			defaultHook: func(context.Context, int32) (map[string]bool, error) {
				panic("unexpected invocation of MockUserStore.Tags")
			},
		},
		TransactFunc: &UserStoreTransactFunc{
			defaultHook: func(context.Context) (database.UserStore, error) {
				panic("unexpected invocation of MockUserStore.Transact")
			},
		},
		UpdateFunc: &UserStoreUpdateFunc{
			defaultHook: func(context.Context, int32, database.UserUpdate) error {
				panic("unexpected invocation of MockUserStore.Update")
			},
		},
		UpdatePasswordFunc: &UserStoreUpdatePasswordFunc{
			defaultHook: func(context.Context, int32, string, string) error {
				panic("unexpected invocation of MockUserStore.UpdatePassword")
			},
		},
		UserAllowedExternalServicesFunc: &UserStoreUserAllowedExternalServicesFunc{
			defaultHook: func(context.Context, int32) (conf.ExternalServiceMode, error) {
				panic("unexpected invocation of MockUserStore.UserAllowedExternalServices")
			},
		},
		WithFunc: &UserStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) database.UserStore {
				panic("unexpected invocation of MockUserStore.With")
			},
		},
	}
}

// NewMockUserStoreFrom creates a new mock of the MockUserStore interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockUserStoreFrom(i database.UserStore) *MockUserStore {
	return &MockUserStore{
		CheckAndDecrementInviteQuotaFunc: &UserStoreCheckAndDecrementInviteQuotaFunc{
			defaultHook: i.CheckAndDecrementInviteQuota,
		},
		CountFunc: &UserStoreCountFunc{
			defaultHook: i.Count,
		},
		CreateFunc: &UserStoreCreateFunc{
			defaultHook: i.Create,
		},
		CreateInTransactionFunc: &UserStoreCreateInTransactionFunc{
			defaultHook: i.CreateInTransaction,
		},
		CreatePasswordFunc: &UserStoreCreatePasswordFunc{
			defaultHook: i.CreatePassword,
		},
		CurrentUserAllowedExternalServicesFunc: &UserStoreCurrentUserAllowedExternalServicesFunc{
			defaultHook: i.CurrentUserAllowedExternalServices,
		},
		DeleteFunc: &UserStoreDeleteFunc{
			defaultHook: i.Delete,
		},
		DeletePasswordResetCodeFunc: &UserStoreDeletePasswordResetCodeFunc{
			defaultHook: i.DeletePasswordResetCode,
		},
		DoneFunc: &UserStoreDoneFunc{
			defaultHook: i.Done,
		},
		ExecFunc: &UserStoreExecFunc{
			defaultHook: i.Exec,
		},
		ExecResultFunc: &UserStoreExecResultFunc{
			defaultHook: i.ExecResult,
		},
		GetByCurrentAuthUserFunc: &UserStoreGetByCurrentAuthUserFunc{
			defaultHook: i.GetByCurrentAuthUser,
		},
		GetByIDFunc: &UserStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		GetByUsernameFunc: &UserStoreGetByUsernameFunc{
			defaultHook: i.GetByUsername,
		},
		GetByUsernamesFunc: &UserStoreGetByUsernamesFunc{
			defaultHook: i.GetByUsernames,
		},
		GetByVerifiedEmailFunc: &UserStoreGetByVerifiedEmailFunc{
			defaultHook: i.GetByVerifiedEmail,
		},
		HardDeleteFunc: &UserStoreHardDeleteFunc{
			defaultHook: i.HardDelete,
		},
		HasTagFunc: &UserStoreHasTagFunc{
			defaultHook: i.HasTag,
		},
		InvalidateSessionsByIDFunc: &UserStoreInvalidateSessionsByIDFunc{
			defaultHook: i.InvalidateSessionsByID,
		},
		IsPasswordFunc: &UserStoreIsPasswordFunc{
			defaultHook: i.IsPassword,
		},
		ListFunc: &UserStoreListFunc{
			defaultHook: i.List,
		},
		ListDatesFunc: &UserStoreListDatesFunc{
			defaultHook: i.ListDates,
		},
		RandomizePasswordAndClearPasswordResetRateLimitFunc: &UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc{
			defaultHook: i.RandomizePasswordAndClearPasswordResetRateLimit,
		},
		RenewPasswordResetCodeFunc: &UserStoreRenewPasswordResetCodeFunc{
			defaultHook: i.RenewPasswordResetCode,
		},
		SetIsSiteAdminFunc: &UserStoreSetIsSiteAdminFunc{
			defaultHook: i.SetIsSiteAdmin,
		},
		SetPasswordFunc: &UserStoreSetPasswordFunc{
			defaultHook: i.SetPassword,
		},
		SetTagFunc: &UserStoreSetTagFunc{
			defaultHook: i.SetTag,
		},
		TagsFunc: &UserStoreTagsFunc{
			defaultHook: i.Tags,
		},
		TransactFunc: &UserStoreTransactFunc{
			defaultHook: i.Transact,
		},
		UpdateFunc: &UserStoreUpdateFunc{
			defaultHook: i.Update,
		},
		UpdatePasswordFunc: &UserStoreUpdatePasswordFunc{
			defaultHook: i.UpdatePassword,
		},
		UserAllowedExternalServicesFunc: &UserStoreUserAllowedExternalServicesFunc{
			defaultHook: i.UserAllowedExternalServices,
		},
		WithFunc: &UserStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// UserStoreCheckAndDecrementInviteQuotaFunc describes the behavior when the
// CheckAndDecrementInviteQuota method of the parent MockUserStore instance
// is invoked.
type UserStoreCheckAndDecrementInviteQuotaFunc struct {
	defaultHook func(context.Context, int32) (bool, error)
	hooks       []func(context.Context, int32) (bool, error)
	history     []UserStoreCheckAndDecrementInviteQuotaFuncCall
	mutex       sync.Mutex
}

// CheckAndDecrementInviteQuota delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockUserStore) CheckAndDecrementInviteQuota(v0 context.Context, v1 int32) (bool, error) {
	r0, r1 := m.CheckAndDecrementInviteQuotaFunc.nextHook()(v0, v1)
	m.CheckAndDecrementInviteQuotaFunc.appendCall(UserStoreCheckAndDecrementInviteQuotaFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CheckAndDecrementInviteQuota method of the parent MockUserStore instance
// is invoked and the hook queue is empty.
func (f *UserStoreCheckAndDecrementInviteQuotaFunc) SetDefaultHook(hook func(context.Context, int32) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CheckAndDecrementInviteQuota method of the parent MockUserStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserStoreCheckAndDecrementInviteQuotaFunc) PushHook(hook func(context.Context, int32) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserStoreCheckAndDecrementInviteQuotaFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserStoreCheckAndDecrementInviteQuotaFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int32) (bool, error) {
		return r0, r1
	})
}

func (f *UserStoreCheckAndDecrementInviteQuotaFunc) nextHook() func(context.Context, int32) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreCheckAndDecrementInviteQuotaFunc) appendCall(r0 UserStoreCheckAndDecrementInviteQuotaFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UserStoreCheckAndDecrementInviteQuotaFuncCall objects describing the
// invocations of this function.
func (f *UserStoreCheckAndDecrementInviteQuotaFunc) History() []UserStoreCheckAndDecrementInviteQuotaFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreCheckAndDecrementInviteQuotaFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreCheckAndDecrementInviteQuotaFuncCall is an object that describes
// an invocation of method CheckAndDecrementInviteQuota on an instance of
// MockUserStore.
type UserStoreCheckAndDecrementInviteQuotaFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreCheckAndDecrementInviteQuotaFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreCheckAndDecrementInviteQuotaFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreCountFunc describes the behavior when the Count method of the
// parent MockUserStore instance is invoked.
type UserStoreCountFunc struct {
	defaultHook func(context.Context, *database.UsersListOptions) (int, error)
	hooks       []func(context.Context, *database.UsersListOptions) (int, error)
	history     []UserStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) Count(v0 context.Context, v1 *database.UsersListOptions) (int, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(UserStoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreCountFunc) SetDefaultHook(hook func(context.Context, *database.UsersListOptions) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockUserStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *UserStoreCountFunc) PushHook(hook func(context.Context, *database.UsersListOptions) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserStoreCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, *database.UsersListOptions) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserStoreCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, *database.UsersListOptions) (int, error) {
		return r0, r1
	})
}

func (f *UserStoreCountFunc) nextHook() func(context.Context, *database.UsersListOptions) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreCountFunc) appendCall(r0 UserStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreCountFuncCall objects describing
// the invocations of this function.
func (f *UserStoreCountFunc) History() []UserStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreCountFuncCall is an object that describes an invocation of
// method Count on an instance of MockUserStore.
type UserStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *database.UsersListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreCreateFunc describes the behavior when the Create method of the
// parent MockUserStore instance is invoked.
type UserStoreCreateFunc struct {
	defaultHook func(context.Context, database.NewUser) (*types.User, error)
	hooks       []func(context.Context, database.NewUser) (*types.User, error)
	history     []UserStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) Create(v0 context.Context, v1 database.NewUser) (*types.User, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1)
	m.CreateFunc.appendCall(UserStoreCreateFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreCreateFunc) SetDefaultHook(hook func(context.Context, database.NewUser) (*types.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockUserStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreCreateFunc) PushHook(hook func(context.Context, database.NewUser) (*types.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserStoreCreateFunc) SetDefaultReturn(r0 *types.User, r1 error) {
	f.SetDefaultHook(func(context.Context, database.NewUser) (*types.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserStoreCreateFunc) PushReturn(r0 *types.User, r1 error) {
	f.PushHook(func(context.Context, database.NewUser) (*types.User, error) {
		return r0, r1
	})
}

func (f *UserStoreCreateFunc) nextHook() func(context.Context, database.NewUser) (*types.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreCreateFunc) appendCall(r0 UserStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreCreateFuncCall objects describing
// the invocations of this function.
func (f *UserStoreCreateFunc) History() []UserStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreCreateFuncCall is an object that describes an invocation of
// method Create on an instance of MockUserStore.
type UserStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.NewUser
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreCreateInTransactionFunc describes the behavior when the
// CreateInTransaction method of the parent MockUserStore instance is
// invoked.
type UserStoreCreateInTransactionFunc struct {
	defaultHook func(context.Context, database.NewUser) (*types.User, error)
	hooks       []func(context.Context, database.NewUser) (*types.User, error)
	history     []UserStoreCreateInTransactionFuncCall
	mutex       sync.Mutex
}

// CreateInTransaction delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserStore) CreateInTransaction(v0 context.Context, v1 database.NewUser) (*types.User, error) {
	r0, r1 := m.CreateInTransactionFunc.nextHook()(v0, v1)
	m.CreateInTransactionFunc.appendCall(UserStoreCreateInTransactionFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateInTransaction
// method of the parent MockUserStore instance is invoked and the hook queue
// is empty.
func (f *UserStoreCreateInTransactionFunc) SetDefaultHook(hook func(context.Context, database.NewUser) (*types.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateInTransaction method of the parent MockUserStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserStoreCreateInTransactionFunc) PushHook(hook func(context.Context, database.NewUser) (*types.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserStoreCreateInTransactionFunc) SetDefaultReturn(r0 *types.User, r1 error) {
	f.SetDefaultHook(func(context.Context, database.NewUser) (*types.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserStoreCreateInTransactionFunc) PushReturn(r0 *types.User, r1 error) {
	f.PushHook(func(context.Context, database.NewUser) (*types.User, error) {
		return r0, r1
	})
}

func (f *UserStoreCreateInTransactionFunc) nextHook() func(context.Context, database.NewUser) (*types.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreCreateInTransactionFunc) appendCall(r0 UserStoreCreateInTransactionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreCreateInTransactionFuncCall
// objects describing the invocations of this function.
func (f *UserStoreCreateInTransactionFunc) History() []UserStoreCreateInTransactionFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreCreateInTransactionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreCreateInTransactionFuncCall is an object that describes an
// invocation of method CreateInTransaction on an instance of MockUserStore.
type UserStoreCreateInTransactionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.NewUser
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreCreateInTransactionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreCreateInTransactionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreCreatePasswordFunc describes the behavior when the
// CreatePassword method of the parent MockUserStore instance is invoked.
type UserStoreCreatePasswordFunc struct {
	defaultHook func(context.Context, int32, string) error
	hooks       []func(context.Context, int32, string) error
	history     []UserStoreCreatePasswordFuncCall
	mutex       sync.Mutex
}

// CreatePassword delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserStore) CreatePassword(v0 context.Context, v1 int32, v2 string) error {
	r0 := m.CreatePasswordFunc.nextHook()(v0, v1, v2)
	m.CreatePasswordFunc.appendCall(UserStoreCreatePasswordFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the CreatePassword
// method of the parent MockUserStore instance is invoked and the hook queue
// is empty.
func (f *UserStoreCreatePasswordFunc) SetDefaultHook(hook func(context.Context, int32, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreatePassword method of the parent MockUserStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserStoreCreatePasswordFunc) PushHook(hook func(context.Context, int32, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserStoreCreatePasswordFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, string) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserStoreCreatePasswordFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, string) error {
		return r0
	})
}

func (f *UserStoreCreatePasswordFunc) nextHook() func(context.Context, int32, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreCreatePasswordFunc) appendCall(r0 UserStoreCreatePasswordFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreCreatePasswordFuncCall objects
// describing the invocations of this function.
func (f *UserStoreCreatePasswordFunc) History() []UserStoreCreatePasswordFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreCreatePasswordFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreCreatePasswordFuncCall is an object that describes an invocation
// of method CreatePassword on an instance of MockUserStore.
type UserStoreCreatePasswordFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreCreatePasswordFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreCreatePasswordFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreCurrentUserAllowedExternalServicesFunc describes the behavior
// when the CurrentUserAllowedExternalServices method of the parent
// MockUserStore instance is invoked.
type UserStoreCurrentUserAllowedExternalServicesFunc struct {
	defaultHook func(context.Context) (conf.ExternalServiceMode, error)
	hooks       []func(context.Context) (conf.ExternalServiceMode, error)
	history     []UserStoreCurrentUserAllowedExternalServicesFuncCall
	mutex       sync.Mutex
}

// CurrentUserAllowedExternalServices delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockUserStore) CurrentUserAllowedExternalServices(v0 context.Context) (conf.ExternalServiceMode, error) {
	r0, r1 := m.CurrentUserAllowedExternalServicesFunc.nextHook()(v0)
	m.CurrentUserAllowedExternalServicesFunc.appendCall(UserStoreCurrentUserAllowedExternalServicesFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CurrentUserAllowedExternalServices method of the parent MockUserStore
// instance is invoked and the hook queue is empty.
func (f *UserStoreCurrentUserAllowedExternalServicesFunc) SetDefaultHook(hook func(context.Context) (conf.ExternalServiceMode, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CurrentUserAllowedExternalServices method of the parent MockUserStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *UserStoreCurrentUserAllowedExternalServicesFunc) PushHook(hook func(context.Context) (conf.ExternalServiceMode, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserStoreCurrentUserAllowedExternalServicesFunc) SetDefaultReturn(r0 conf.ExternalServiceMode, r1 error) {
	f.SetDefaultHook(func(context.Context) (conf.ExternalServiceMode, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserStoreCurrentUserAllowedExternalServicesFunc) PushReturn(r0 conf.ExternalServiceMode, r1 error) {
	f.PushHook(func(context.Context) (conf.ExternalServiceMode, error) {
		return r0, r1
	})
}

func (f *UserStoreCurrentUserAllowedExternalServicesFunc) nextHook() func(context.Context) (conf.ExternalServiceMode, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreCurrentUserAllowedExternalServicesFunc) appendCall(r0 UserStoreCurrentUserAllowedExternalServicesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UserStoreCurrentUserAllowedExternalServicesFuncCall objects describing
// the invocations of this function.
func (f *UserStoreCurrentUserAllowedExternalServicesFunc) History() []UserStoreCurrentUserAllowedExternalServicesFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreCurrentUserAllowedExternalServicesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreCurrentUserAllowedExternalServicesFuncCall is an object that
// describes an invocation of method CurrentUserAllowedExternalServices on
// an instance of MockUserStore.
type UserStoreCurrentUserAllowedExternalServicesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 conf.ExternalServiceMode
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreCurrentUserAllowedExternalServicesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreCurrentUserAllowedExternalServicesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreDeleteFunc describes the behavior when the Delete method of the
// parent MockUserStore instance is invoked.
type UserStoreDeleteFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []UserStoreDeleteFuncCall
	mutex       sync.Mutex
}

// Delete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) Delete(v0 context.Context, v1 int32) error {
	r0 := m.DeleteFunc.nextHook()(v0, v1)
	m.DeleteFunc.appendCall(UserStoreDeleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Delete method of the
// parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreDeleteFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Delete method of the parent MockUserStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreDeleteFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserStoreDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserStoreDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *UserStoreDeleteFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreDeleteFunc) appendCall(r0 UserStoreDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreDeleteFuncCall objects describing
// the invocations of this function.
func (f *UserStoreDeleteFunc) History() []UserStoreDeleteFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreDeleteFuncCall is an object that describes an invocation of
// method Delete on an instance of MockUserStore.
type UserStoreDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreDeletePasswordResetCodeFunc describes the behavior when the
// DeletePasswordResetCode method of the parent MockUserStore instance is
// invoked.
type UserStoreDeletePasswordResetCodeFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []UserStoreDeletePasswordResetCodeFuncCall
	mutex       sync.Mutex
}

// DeletePasswordResetCode delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUserStore) DeletePasswordResetCode(v0 context.Context, v1 int32) error {
	r0 := m.DeletePasswordResetCodeFunc.nextHook()(v0, v1)
	m.DeletePasswordResetCodeFunc.appendCall(UserStoreDeletePasswordResetCodeFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// DeletePasswordResetCode method of the parent MockUserStore instance is
// invoked and the hook queue is empty.
func (f *UserStoreDeletePasswordResetCodeFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeletePasswordResetCode method of the parent MockUserStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserStoreDeletePasswordResetCodeFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserStoreDeletePasswordResetCodeFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserStoreDeletePasswordResetCodeFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *UserStoreDeletePasswordResetCodeFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreDeletePasswordResetCodeFunc) appendCall(r0 UserStoreDeletePasswordResetCodeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreDeletePasswordResetCodeFuncCall
// objects describing the invocations of this function.
func (f *UserStoreDeletePasswordResetCodeFunc) History() []UserStoreDeletePasswordResetCodeFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreDeletePasswordResetCodeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreDeletePasswordResetCodeFuncCall is an object that describes an
// invocation of method DeletePasswordResetCode on an instance of
// MockUserStore.
type UserStoreDeletePasswordResetCodeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreDeletePasswordResetCodeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreDeletePasswordResetCodeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreDoneFunc describes the behavior when the Done method of the
// parent MockUserStore instance is invoked.
type UserStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []UserStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(UserStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockUserStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *UserStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *UserStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreDoneFunc) appendCall(r0 UserStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreDoneFuncCall objects describing
// the invocations of this function.
func (f *UserStoreDoneFunc) History() []UserStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreDoneFuncCall is an object that describes an invocation of method
// Done on an instance of MockUserStore.
type UserStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreExecFunc describes the behavior when the Exec method of the
// parent MockUserStore instance is invoked.
type UserStoreExecFunc struct {
	defaultHook func(context.Context, *sqlf.Query) error
	hooks       []func(context.Context, *sqlf.Query) error
	history     []UserStoreExecFuncCall
	mutex       sync.Mutex
}

// Exec delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) Exec(v0 context.Context, v1 *sqlf.Query) error {
	r0 := m.ExecFunc.nextHook()(v0, v1)
	m.ExecFunc.appendCall(UserStoreExecFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Exec method of the
// parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreExecFunc) SetDefaultHook(hook func(context.Context, *sqlf.Query) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Exec method of the parent MockUserStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *UserStoreExecFunc) PushHook(hook func(context.Context, *sqlf.Query) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserStoreExecFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *sqlf.Query) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserStoreExecFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *sqlf.Query) error {
		return r0
	})
}

func (f *UserStoreExecFunc) nextHook() func(context.Context, *sqlf.Query) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreExecFunc) appendCall(r0 UserStoreExecFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreExecFuncCall objects describing
// the invocations of this function.
func (f *UserStoreExecFunc) History() []UserStoreExecFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreExecFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreExecFuncCall is an object that describes an invocation of method
// Exec on an instance of MockUserStore.
type UserStoreExecFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sqlf.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreExecFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreExecFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreExecResultFunc describes the behavior when the ExecResult method
// of the parent MockUserStore instance is invoked.
type UserStoreExecResultFunc struct {
	defaultHook func(context.Context, *sqlf.Query) (sql.Result, error)
	hooks       []func(context.Context, *sqlf.Query) (sql.Result, error)
	history     []UserStoreExecResultFuncCall
	mutex       sync.Mutex
}

// ExecResult delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserStore) ExecResult(v0 context.Context, v1 *sqlf.Query) (sql.Result, error) {
	r0, r1 := m.ExecResultFunc.nextHook()(v0, v1)
	m.ExecResultFunc.appendCall(UserStoreExecResultFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ExecResult method of
// the parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreExecResultFunc) SetDefaultHook(hook func(context.Context, *sqlf.Query) (sql.Result, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExecResult method of the parent MockUserStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreExecResultFunc) PushHook(hook func(context.Context, *sqlf.Query) (sql.Result, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserStoreExecResultFunc) SetDefaultReturn(r0 sql.Result, r1 error) {
	f.SetDefaultHook(func(context.Context, *sqlf.Query) (sql.Result, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserStoreExecResultFunc) PushReturn(r0 sql.Result, r1 error) {
	f.PushHook(func(context.Context, *sqlf.Query) (sql.Result, error) {
		return r0, r1
	})
}

func (f *UserStoreExecResultFunc) nextHook() func(context.Context, *sqlf.Query) (sql.Result, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreExecResultFunc) appendCall(r0 UserStoreExecResultFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreExecResultFuncCall objects
// describing the invocations of this function.
func (f *UserStoreExecResultFunc) History() []UserStoreExecResultFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreExecResultFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreExecResultFuncCall is an object that describes an invocation of
// method ExecResult on an instance of MockUserStore.
type UserStoreExecResultFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sqlf.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 sql.Result
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreExecResultFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreExecResultFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreGetByCurrentAuthUserFunc describes the behavior when the
// GetByCurrentAuthUser method of the parent MockUserStore instance is
// invoked.
type UserStoreGetByCurrentAuthUserFunc struct {
	defaultHook func(context.Context) (*types.User, error)
	hooks       []func(context.Context) (*types.User, error)
	history     []UserStoreGetByCurrentAuthUserFuncCall
	mutex       sync.Mutex
}

// GetByCurrentAuthUser delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserStore) GetByCurrentAuthUser(v0 context.Context) (*types.User, error) {
	r0, r1 := m.GetByCurrentAuthUserFunc.nextHook()(v0)
	m.GetByCurrentAuthUserFunc.appendCall(UserStoreGetByCurrentAuthUserFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByCurrentAuthUser
// method of the parent MockUserStore instance is invoked and the hook queue
// is empty.
func (f *UserStoreGetByCurrentAuthUserFunc) SetDefaultHook(hook func(context.Context) (*types.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByCurrentAuthUser method of the parent MockUserStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserStoreGetByCurrentAuthUserFunc) PushHook(hook func(context.Context) (*types.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserStoreGetByCurrentAuthUserFunc) SetDefaultReturn(r0 *types.User, r1 error) {
	f.SetDefaultHook(func(context.Context) (*types.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserStoreGetByCurrentAuthUserFunc) PushReturn(r0 *types.User, r1 error) {
	f.PushHook(func(context.Context) (*types.User, error) {
		return r0, r1
	})
}

func (f *UserStoreGetByCurrentAuthUserFunc) nextHook() func(context.Context) (*types.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreGetByCurrentAuthUserFunc) appendCall(r0 UserStoreGetByCurrentAuthUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreGetByCurrentAuthUserFuncCall
// objects describing the invocations of this function.
func (f *UserStoreGetByCurrentAuthUserFunc) History() []UserStoreGetByCurrentAuthUserFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreGetByCurrentAuthUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreGetByCurrentAuthUserFuncCall is an object that describes an
// invocation of method GetByCurrentAuthUser on an instance of
// MockUserStore.
type UserStoreGetByCurrentAuthUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreGetByCurrentAuthUserFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreGetByCurrentAuthUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreGetByIDFunc describes the behavior when the GetByID method of
// the parent MockUserStore instance is invoked.
type UserStoreGetByIDFunc struct {
	defaultHook func(context.Context, int32) (*types.User, error)
	hooks       []func(context.Context, int32) (*types.User, error)
	history     []UserStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) GetByID(v0 context.Context, v1 int32) (*types.User, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(UserStoreGetByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int32) (*types.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockUserStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreGetByIDFunc) PushHook(hook func(context.Context, int32) (*types.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserStoreGetByIDFunc) SetDefaultReturn(r0 *types.User, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (*types.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserStoreGetByIDFunc) PushReturn(r0 *types.User, r1 error) {
	f.PushHook(func(context.Context, int32) (*types.User, error) {
		return r0, r1
	})
}

func (f *UserStoreGetByIDFunc) nextHook() func(context.Context, int32) (*types.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreGetByIDFunc) appendCall(r0 UserStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreGetByIDFuncCall objects describing
// the invocations of this function.
func (f *UserStoreGetByIDFunc) History() []UserStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreGetByIDFuncCall is an object that describes an invocation of
// method GetByID on an instance of MockUserStore.
type UserStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreGetByUsernameFunc describes the behavior when the GetByUsername
// method of the parent MockUserStore instance is invoked.
type UserStoreGetByUsernameFunc struct {
	defaultHook func(context.Context, string) (*types.User, error)
	hooks       []func(context.Context, string) (*types.User, error)
	history     []UserStoreGetByUsernameFuncCall
	mutex       sync.Mutex
}

// GetByUsername delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserStore) GetByUsername(v0 context.Context, v1 string) (*types.User, error) {
	r0, r1 := m.GetByUsernameFunc.nextHook()(v0, v1)
	m.GetByUsernameFunc.appendCall(UserStoreGetByUsernameFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByUsername method
// of the parent MockUserStore instance is invoked and the hook queue is
// empty.
func (f *UserStoreGetByUsernameFunc) SetDefaultHook(hook func(context.Context, string) (*types.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByUsername method of the parent MockUserStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserStoreGetByUsernameFunc) PushHook(hook func(context.Context, string) (*types.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserStoreGetByUsernameFunc) SetDefaultReturn(r0 *types.User, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*types.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserStoreGetByUsernameFunc) PushReturn(r0 *types.User, r1 error) {
	f.PushHook(func(context.Context, string) (*types.User, error) {
		return r0, r1
	})
}

func (f *UserStoreGetByUsernameFunc) nextHook() func(context.Context, string) (*types.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreGetByUsernameFunc) appendCall(r0 UserStoreGetByUsernameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreGetByUsernameFuncCall objects
// describing the invocations of this function.
func (f *UserStoreGetByUsernameFunc) History() []UserStoreGetByUsernameFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreGetByUsernameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreGetByUsernameFuncCall is an object that describes an invocation
// of method GetByUsername on an instance of MockUserStore.
type UserStoreGetByUsernameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreGetByUsernameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreGetByUsernameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreGetByUsernamesFunc describes the behavior when the
// GetByUsernames method of the parent MockUserStore instance is invoked.
type UserStoreGetByUsernamesFunc struct {
	defaultHook func(context.Context, ...string) ([]*types.User, error)
	hooks       []func(context.Context, ...string) ([]*types.User, error)
	history     []UserStoreGetByUsernamesFuncCall
	mutex       sync.Mutex
}

// GetByUsernames delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserStore) GetByUsernames(v0 context.Context, v1 ...string) ([]*types.User, error) {
	r0, r1 := m.GetByUsernamesFunc.nextHook()(v0, v1...)
	m.GetByUsernamesFunc.appendCall(UserStoreGetByUsernamesFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByUsernames
// method of the parent MockUserStore instance is invoked and the hook queue
// is empty.
func (f *UserStoreGetByUsernamesFunc) SetDefaultHook(hook func(context.Context, ...string) ([]*types.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByUsernames method of the parent MockUserStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserStoreGetByUsernamesFunc) PushHook(hook func(context.Context, ...string) ([]*types.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserStoreGetByUsernamesFunc) SetDefaultReturn(r0 []*types.User, r1 error) {
	f.SetDefaultHook(func(context.Context, ...string) ([]*types.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserStoreGetByUsernamesFunc) PushReturn(r0 []*types.User, r1 error) {
	f.PushHook(func(context.Context, ...string) ([]*types.User, error) {
		return r0, r1
	})
}

func (f *UserStoreGetByUsernamesFunc) nextHook() func(context.Context, ...string) ([]*types.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreGetByUsernamesFunc) appendCall(r0 UserStoreGetByUsernamesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreGetByUsernamesFuncCall objects
// describing the invocations of this function.
func (f *UserStoreGetByUsernamesFunc) History() []UserStoreGetByUsernamesFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreGetByUsernamesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreGetByUsernamesFuncCall is an object that describes an invocation
// of method GetByUsernames on an instance of MockUserStore.
type UserStoreGetByUsernamesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c UserStoreGetByUsernamesFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreGetByUsernamesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreGetByVerifiedEmailFunc describes the behavior when the
// GetByVerifiedEmail method of the parent MockUserStore instance is
// invoked.
type UserStoreGetByVerifiedEmailFunc struct {
	defaultHook func(context.Context, string) (*types.User, error)
	hooks       []func(context.Context, string) (*types.User, error)
	history     []UserStoreGetByVerifiedEmailFuncCall
	mutex       sync.Mutex
}

// GetByVerifiedEmail delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserStore) GetByVerifiedEmail(v0 context.Context, v1 string) (*types.User, error) {
	r0, r1 := m.GetByVerifiedEmailFunc.nextHook()(v0, v1)
	m.GetByVerifiedEmailFunc.appendCall(UserStoreGetByVerifiedEmailFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByVerifiedEmail
// method of the parent MockUserStore instance is invoked and the hook queue
// is empty.
func (f *UserStoreGetByVerifiedEmailFunc) SetDefaultHook(hook func(context.Context, string) (*types.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByVerifiedEmail method of the parent MockUserStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserStoreGetByVerifiedEmailFunc) PushHook(hook func(context.Context, string) (*types.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserStoreGetByVerifiedEmailFunc) SetDefaultReturn(r0 *types.User, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*types.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserStoreGetByVerifiedEmailFunc) PushReturn(r0 *types.User, r1 error) {
	f.PushHook(func(context.Context, string) (*types.User, error) {
		return r0, r1
	})
}

func (f *UserStoreGetByVerifiedEmailFunc) nextHook() func(context.Context, string) (*types.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreGetByVerifiedEmailFunc) appendCall(r0 UserStoreGetByVerifiedEmailFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreGetByVerifiedEmailFuncCall objects
// describing the invocations of this function.
func (f *UserStoreGetByVerifiedEmailFunc) History() []UserStoreGetByVerifiedEmailFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreGetByVerifiedEmailFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreGetByVerifiedEmailFuncCall is an object that describes an
// invocation of method GetByVerifiedEmail on an instance of MockUserStore.
type UserStoreGetByVerifiedEmailFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreGetByVerifiedEmailFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreGetByVerifiedEmailFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreHardDeleteFunc describes the behavior when the HardDelete method
// of the parent MockUserStore instance is invoked.
type UserStoreHardDeleteFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []UserStoreHardDeleteFuncCall
	mutex       sync.Mutex
}

// HardDelete delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserStore) HardDelete(v0 context.Context, v1 int32) error {
	r0 := m.HardDeleteFunc.nextHook()(v0, v1)
	m.HardDeleteFunc.appendCall(UserStoreHardDeleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the HardDelete method of
// the parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreHardDeleteFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// HardDelete method of the parent MockUserStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreHardDeleteFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserStoreHardDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserStoreHardDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *UserStoreHardDeleteFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreHardDeleteFunc) appendCall(r0 UserStoreHardDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreHardDeleteFuncCall objects
// describing the invocations of this function.
func (f *UserStoreHardDeleteFunc) History() []UserStoreHardDeleteFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreHardDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreHardDeleteFuncCall is an object that describes an invocation of
// method HardDelete on an instance of MockUserStore.
type UserStoreHardDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreHardDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreHardDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreHasTagFunc describes the behavior when the HasTag method of the
// parent MockUserStore instance is invoked.
type UserStoreHasTagFunc struct {
	defaultHook func(context.Context, int32, string) (bool, error)
	hooks       []func(context.Context, int32, string) (bool, error)
	history     []UserStoreHasTagFuncCall
	mutex       sync.Mutex
}

// HasTag delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) HasTag(v0 context.Context, v1 int32, v2 string) (bool, error) {
	r0, r1 := m.HasTagFunc.nextHook()(v0, v1, v2)
	m.HasTagFunc.appendCall(UserStoreHasTagFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the HasTag method of the
// parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreHasTagFunc) SetDefaultHook(hook func(context.Context, int32, string) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// HasTag method of the parent MockUserStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreHasTagFunc) PushHook(hook func(context.Context, int32, string) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserStoreHasTagFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, string) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserStoreHasTagFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int32, string) (bool, error) {
		return r0, r1
	})
}

func (f *UserStoreHasTagFunc) nextHook() func(context.Context, int32, string) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreHasTagFunc) appendCall(r0 UserStoreHasTagFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreHasTagFuncCall objects describing
// the invocations of this function.
func (f *UserStoreHasTagFunc) History() []UserStoreHasTagFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreHasTagFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreHasTagFuncCall is an object that describes an invocation of
// method HasTag on an instance of MockUserStore.
type UserStoreHasTagFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreHasTagFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreHasTagFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreInvalidateSessionsByIDFunc describes the behavior when the
// InvalidateSessionsByID method of the parent MockUserStore instance is
// invoked.
type UserStoreInvalidateSessionsByIDFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []UserStoreInvalidateSessionsByIDFuncCall
	mutex       sync.Mutex
}

// InvalidateSessionsByID delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUserStore) InvalidateSessionsByID(v0 context.Context, v1 int32) error {
	r0 := m.InvalidateSessionsByIDFunc.nextHook()(v0, v1)
	m.InvalidateSessionsByIDFunc.appendCall(UserStoreInvalidateSessionsByIDFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// InvalidateSessionsByID method of the parent MockUserStore instance is
// invoked and the hook queue is empty.
func (f *UserStoreInvalidateSessionsByIDFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// InvalidateSessionsByID method of the parent MockUserStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserStoreInvalidateSessionsByIDFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserStoreInvalidateSessionsByIDFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserStoreInvalidateSessionsByIDFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *UserStoreInvalidateSessionsByIDFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreInvalidateSessionsByIDFunc) appendCall(r0 UserStoreInvalidateSessionsByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreInvalidateSessionsByIDFuncCall
// objects describing the invocations of this function.
func (f *UserStoreInvalidateSessionsByIDFunc) History() []UserStoreInvalidateSessionsByIDFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreInvalidateSessionsByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreInvalidateSessionsByIDFuncCall is an object that describes an
// invocation of method InvalidateSessionsByID on an instance of
// MockUserStore.
type UserStoreInvalidateSessionsByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreInvalidateSessionsByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreInvalidateSessionsByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreIsPasswordFunc describes the behavior when the IsPassword method
// of the parent MockUserStore instance is invoked.
type UserStoreIsPasswordFunc struct {
	defaultHook func(context.Context, int32, string) (bool, error)
	hooks       []func(context.Context, int32, string) (bool, error)
	history     []UserStoreIsPasswordFuncCall
	mutex       sync.Mutex
}

// IsPassword delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserStore) IsPassword(v0 context.Context, v1 int32, v2 string) (bool, error) {
	r0, r1 := m.IsPasswordFunc.nextHook()(v0, v1, v2)
	m.IsPasswordFunc.appendCall(UserStoreIsPasswordFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IsPassword method of
// the parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreIsPasswordFunc) SetDefaultHook(hook func(context.Context, int32, string) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsPassword method of the parent MockUserStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreIsPasswordFunc) PushHook(hook func(context.Context, int32, string) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserStoreIsPasswordFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, string) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserStoreIsPasswordFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int32, string) (bool, error) {
		return r0, r1
	})
}

func (f *UserStoreIsPasswordFunc) nextHook() func(context.Context, int32, string) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreIsPasswordFunc) appendCall(r0 UserStoreIsPasswordFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreIsPasswordFuncCall objects
// describing the invocations of this function.
func (f *UserStoreIsPasswordFunc) History() []UserStoreIsPasswordFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreIsPasswordFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreIsPasswordFuncCall is an object that describes an invocation of
// method IsPassword on an instance of MockUserStore.
type UserStoreIsPasswordFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreIsPasswordFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreIsPasswordFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreListFunc describes the behavior when the List method of the
// parent MockUserStore instance is invoked.
type UserStoreListFunc struct {
	defaultHook func(context.Context, *database.UsersListOptions) ([]*types.User, error)
	hooks       []func(context.Context, *database.UsersListOptions) ([]*types.User, error)
	history     []UserStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) List(v0 context.Context, v1 *database.UsersListOptions) ([]*types.User, error) {
	r0, r1 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(UserStoreListFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreListFunc) SetDefaultHook(hook func(context.Context, *database.UsersListOptions) ([]*types.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockUserStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *UserStoreListFunc) PushHook(hook func(context.Context, *database.UsersListOptions) ([]*types.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserStoreListFunc) SetDefaultReturn(r0 []*types.User, r1 error) {
	f.SetDefaultHook(func(context.Context, *database.UsersListOptions) ([]*types.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserStoreListFunc) PushReturn(r0 []*types.User, r1 error) {
	f.PushHook(func(context.Context, *database.UsersListOptions) ([]*types.User, error) {
		return r0, r1
	})
}

func (f *UserStoreListFunc) nextHook() func(context.Context, *database.UsersListOptions) ([]*types.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreListFunc) appendCall(r0 UserStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreListFuncCall objects describing
// the invocations of this function.
func (f *UserStoreListFunc) History() []UserStoreListFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreListFuncCall is an object that describes an invocation of method
// List on an instance of MockUserStore.
type UserStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *database.UsersListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreListDatesFunc describes the behavior when the ListDates method
// of the parent MockUserStore instance is invoked.
type UserStoreListDatesFunc struct {
	defaultHook func(context.Context) ([]types.UserDates, error)
	hooks       []func(context.Context) ([]types.UserDates, error)
	history     []UserStoreListDatesFuncCall
	mutex       sync.Mutex
}

// ListDates delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) ListDates(v0 context.Context) ([]types.UserDates, error) {
	r0, r1 := m.ListDatesFunc.nextHook()(v0)
	m.ListDatesFunc.appendCall(UserStoreListDatesFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListDates method of
// the parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreListDatesFunc) SetDefaultHook(hook func(context.Context) ([]types.UserDates, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListDates method of the parent MockUserStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreListDatesFunc) PushHook(hook func(context.Context) ([]types.UserDates, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserStoreListDatesFunc) SetDefaultReturn(r0 []types.UserDates, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]types.UserDates, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserStoreListDatesFunc) PushReturn(r0 []types.UserDates, r1 error) {
	f.PushHook(func(context.Context) ([]types.UserDates, error) {
		return r0, r1
	})
}

func (f *UserStoreListDatesFunc) nextHook() func(context.Context) ([]types.UserDates, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreListDatesFunc) appendCall(r0 UserStoreListDatesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreListDatesFuncCall objects
// describing the invocations of this function.
func (f *UserStoreListDatesFunc) History() []UserStoreListDatesFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreListDatesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreListDatesFuncCall is an object that describes an invocation of
// method ListDates on an instance of MockUserStore.
type UserStoreListDatesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.UserDates
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreListDatesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreListDatesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc describes
// the behavior when the RandomizePasswordAndClearPasswordResetRateLimit
// method of the parent MockUserStore instance is invoked.
type UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []UserStoreRandomizePasswordAndClearPasswordResetRateLimitFuncCall
	mutex       sync.Mutex
}

// RandomizePasswordAndClearPasswordResetRateLimit delegates to the next
// hook function in the queue and stores the parameter and result values of
// this invocation.
func (m *MockUserStore) RandomizePasswordAndClearPasswordResetRateLimit(v0 context.Context, v1 int32) error {
	r0 := m.RandomizePasswordAndClearPasswordResetRateLimitFunc.nextHook()(v0, v1)
	m.RandomizePasswordAndClearPasswordResetRateLimitFunc.appendCall(UserStoreRandomizePasswordAndClearPasswordResetRateLimitFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// RandomizePasswordAndClearPasswordResetRateLimit method of the parent
// MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RandomizePasswordAndClearPasswordResetRateLimit method of the parent
// MockUserStore instance invokes the hook at the front of the queue and
// discards it. After the queue is empty, the default hook function is
// invoked for any future action.
func (f *UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc) appendCall(r0 UserStoreRandomizePasswordAndClearPasswordResetRateLimitFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UserStoreRandomizePasswordAndClearPasswordResetRateLimitFuncCall objects
// describing the invocations of this function.
func (f *UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc) History() []UserStoreRandomizePasswordAndClearPasswordResetRateLimitFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreRandomizePasswordAndClearPasswordResetRateLimitFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreRandomizePasswordAndClearPasswordResetRateLimitFuncCall is an
// object that describes an invocation of method
// RandomizePasswordAndClearPasswordResetRateLimit on an instance of
// MockUserStore.
type UserStoreRandomizePasswordAndClearPasswordResetRateLimitFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreRandomizePasswordAndClearPasswordResetRateLimitFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreRandomizePasswordAndClearPasswordResetRateLimitFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreRenewPasswordResetCodeFunc describes the behavior when the
// RenewPasswordResetCode method of the parent MockUserStore instance is
// invoked.
type UserStoreRenewPasswordResetCodeFunc struct {
	defaultHook func(context.Context, int32) (string, error)
	hooks       []func(context.Context, int32) (string, error)
	history     []UserStoreRenewPasswordResetCodeFuncCall
	mutex       sync.Mutex
}

// RenewPasswordResetCode delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUserStore) RenewPasswordResetCode(v0 context.Context, v1 int32) (string, error) {
	r0, r1 := m.RenewPasswordResetCodeFunc.nextHook()(v0, v1)
	m.RenewPasswordResetCodeFunc.appendCall(UserStoreRenewPasswordResetCodeFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// RenewPasswordResetCode method of the parent MockUserStore instance is
// invoked and the hook queue is empty.
func (f *UserStoreRenewPasswordResetCodeFunc) SetDefaultHook(hook func(context.Context, int32) (string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RenewPasswordResetCode method of the parent MockUserStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserStoreRenewPasswordResetCodeFunc) PushHook(hook func(context.Context, int32) (string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserStoreRenewPasswordResetCodeFunc) SetDefaultReturn(r0 string, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (string, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserStoreRenewPasswordResetCodeFunc) PushReturn(r0 string, r1 error) {
	f.PushHook(func(context.Context, int32) (string, error) {
		return r0, r1
	})
}

func (f *UserStoreRenewPasswordResetCodeFunc) nextHook() func(context.Context, int32) (string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreRenewPasswordResetCodeFunc) appendCall(r0 UserStoreRenewPasswordResetCodeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreRenewPasswordResetCodeFuncCall
// objects describing the invocations of this function.
func (f *UserStoreRenewPasswordResetCodeFunc) History() []UserStoreRenewPasswordResetCodeFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreRenewPasswordResetCodeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreRenewPasswordResetCodeFuncCall is an object that describes an
// invocation of method RenewPasswordResetCode on an instance of
// MockUserStore.
type UserStoreRenewPasswordResetCodeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreRenewPasswordResetCodeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreRenewPasswordResetCodeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreSetIsSiteAdminFunc describes the behavior when the
// SetIsSiteAdmin method of the parent MockUserStore instance is invoked.
type UserStoreSetIsSiteAdminFunc struct {
	defaultHook func(context.Context, int32, bool) error
	hooks       []func(context.Context, int32, bool) error
	history     []UserStoreSetIsSiteAdminFuncCall
	mutex       sync.Mutex
}

// SetIsSiteAdmin delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserStore) SetIsSiteAdmin(v0 context.Context, v1 int32, v2 bool) error {
	r0 := m.SetIsSiteAdminFunc.nextHook()(v0, v1, v2)
	m.SetIsSiteAdminFunc.appendCall(UserStoreSetIsSiteAdminFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetIsSiteAdmin
// method of the parent MockUserStore instance is invoked and the hook queue
// is empty.
func (f *UserStoreSetIsSiteAdminFunc) SetDefaultHook(hook func(context.Context, int32, bool) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetIsSiteAdmin method of the parent MockUserStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserStoreSetIsSiteAdminFunc) PushHook(hook func(context.Context, int32, bool) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserStoreSetIsSiteAdminFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, bool) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserStoreSetIsSiteAdminFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, bool) error {
		return r0
	})
}

func (f *UserStoreSetIsSiteAdminFunc) nextHook() func(context.Context, int32, bool) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreSetIsSiteAdminFunc) appendCall(r0 UserStoreSetIsSiteAdminFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreSetIsSiteAdminFuncCall objects
// describing the invocations of this function.
func (f *UserStoreSetIsSiteAdminFunc) History() []UserStoreSetIsSiteAdminFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreSetIsSiteAdminFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreSetIsSiteAdminFuncCall is an object that describes an invocation
// of method SetIsSiteAdmin on an instance of MockUserStore.
type UserStoreSetIsSiteAdminFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreSetIsSiteAdminFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreSetIsSiteAdminFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreSetPasswordFunc describes the behavior when the SetPassword
// method of the parent MockUserStore instance is invoked.
type UserStoreSetPasswordFunc struct {
	defaultHook func(context.Context, int32, string, string) (bool, error)
	hooks       []func(context.Context, int32, string, string) (bool, error)
	history     []UserStoreSetPasswordFuncCall
	mutex       sync.Mutex
}

// SetPassword delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserStore) SetPassword(v0 context.Context, v1 int32, v2 string, v3 string) (bool, error) {
	r0, r1 := m.SetPasswordFunc.nextHook()(v0, v1, v2, v3)
	m.SetPasswordFunc.appendCall(UserStoreSetPasswordFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SetPassword method
// of the parent MockUserStore instance is invoked and the hook queue is
// empty.
func (f *UserStoreSetPasswordFunc) SetDefaultHook(hook func(context.Context, int32, string, string) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetPassword method of the parent MockUserStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreSetPasswordFunc) PushHook(hook func(context.Context, int32, string, string) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserStoreSetPasswordFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, string, string) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserStoreSetPasswordFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int32, string, string) (bool, error) {
		return r0, r1
	})
}

func (f *UserStoreSetPasswordFunc) nextHook() func(context.Context, int32, string, string) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreSetPasswordFunc) appendCall(r0 UserStoreSetPasswordFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreSetPasswordFuncCall objects
// describing the invocations of this function.
func (f *UserStoreSetPasswordFunc) History() []UserStoreSetPasswordFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreSetPasswordFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreSetPasswordFuncCall is an object that describes an invocation of
// method SetPassword on an instance of MockUserStore.
type UserStoreSetPasswordFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreSetPasswordFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreSetPasswordFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreSetTagFunc describes the behavior when the SetTag method of the
// parent MockUserStore instance is invoked.
type UserStoreSetTagFunc struct {
	defaultHook func(context.Context, int32, string, bool) error
	hooks       []func(context.Context, int32, string, bool) error
	history     []UserStoreSetTagFuncCall
	mutex       sync.Mutex
}

// SetTag delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) SetTag(v0 context.Context, v1 int32, v2 string, v3 bool) error {
	r0 := m.SetTagFunc.nextHook()(v0, v1, v2, v3)
	m.SetTagFunc.appendCall(UserStoreSetTagFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetTag method of the
// parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreSetTagFunc) SetDefaultHook(hook func(context.Context, int32, string, bool) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetTag method of the parent MockUserStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreSetTagFunc) PushHook(hook func(context.Context, int32, string, bool) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserStoreSetTagFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, string, bool) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserStoreSetTagFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, string, bool) error {
		return r0
	})
}

func (f *UserStoreSetTagFunc) nextHook() func(context.Context, int32, string, bool) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreSetTagFunc) appendCall(r0 UserStoreSetTagFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreSetTagFuncCall objects describing
// the invocations of this function.
func (f *UserStoreSetTagFunc) History() []UserStoreSetTagFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreSetTagFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreSetTagFuncCall is an object that describes an invocation of
// method SetTag on an instance of MockUserStore.
type UserStoreSetTagFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreSetTagFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreSetTagFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreTagsFunc describes the behavior when the Tags method of the
// parent MockUserStore instance is invoked.
type UserStoreTagsFunc struct {
	defaultHook func(context.Context, int32) (map[string]bool, error)
	hooks       []func(context.Context, int32) (map[string]bool, error)
	history     []UserStoreTagsFuncCall
	mutex       sync.Mutex
}

// Tags delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) Tags(v0 context.Context, v1 int32) (map[string]bool, error) {
	r0, r1 := m.TagsFunc.nextHook()(v0, v1)
	m.TagsFunc.appendCall(UserStoreTagsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Tags method of the
// parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreTagsFunc) SetDefaultHook(hook func(context.Context, int32) (map[string]bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Tags method of the parent MockUserStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *UserStoreTagsFunc) PushHook(hook func(context.Context, int32) (map[string]bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserStoreTagsFunc) SetDefaultReturn(r0 map[string]bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (map[string]bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserStoreTagsFunc) PushReturn(r0 map[string]bool, r1 error) {
	f.PushHook(func(context.Context, int32) (map[string]bool, error) {
		return r0, r1
	})
}

func (f *UserStoreTagsFunc) nextHook() func(context.Context, int32) (map[string]bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreTagsFunc) appendCall(r0 UserStoreTagsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreTagsFuncCall objects describing
// the invocations of this function.
func (f *UserStoreTagsFunc) History() []UserStoreTagsFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreTagsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreTagsFuncCall is an object that describes an invocation of method
// Tags on an instance of MockUserStore.
type UserStoreTagsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[string]bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreTagsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreTagsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreTransactFunc describes the behavior when the Transact method of
// the parent MockUserStore instance is invoked.
type UserStoreTransactFunc struct {
	defaultHook func(context.Context) (database.UserStore, error)
	hooks       []func(context.Context) (database.UserStore, error)
	history     []UserStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) Transact(v0 context.Context) (database.UserStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(UserStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreTransactFunc) SetDefaultHook(hook func(context.Context) (database.UserStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockUserStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreTransactFunc) PushHook(hook func(context.Context) (database.UserStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserStoreTransactFunc) SetDefaultReturn(r0 database.UserStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (database.UserStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserStoreTransactFunc) PushReturn(r0 database.UserStore, r1 error) {
	f.PushHook(func(context.Context) (database.UserStore, error) {
		return r0, r1
	})
}

func (f *UserStoreTransactFunc) nextHook() func(context.Context) (database.UserStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreTransactFunc) appendCall(r0 UserStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *UserStoreTransactFunc) History() []UserStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreTransactFuncCall is an object that describes an invocation of
// method Transact on an instance of MockUserStore.
type UserStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.UserStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreUpdateFunc describes the behavior when the Update method of the
// parent MockUserStore instance is invoked.
type UserStoreUpdateFunc struct {
	defaultHook func(context.Context, int32, database.UserUpdate) error
	hooks       []func(context.Context, int32, database.UserUpdate) error
	history     []UserStoreUpdateFuncCall
	mutex       sync.Mutex
}

// Update delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) Update(v0 context.Context, v1 int32, v2 database.UserUpdate) error {
	r0 := m.UpdateFunc.nextHook()(v0, v1, v2)
	m.UpdateFunc.appendCall(UserStoreUpdateFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Update method of the
// parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreUpdateFunc) SetDefaultHook(hook func(context.Context, int32, database.UserUpdate) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Update method of the parent MockUserStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreUpdateFunc) PushHook(hook func(context.Context, int32, database.UserUpdate) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserStoreUpdateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, database.UserUpdate) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserStoreUpdateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, database.UserUpdate) error {
		return r0
	})
}

func (f *UserStoreUpdateFunc) nextHook() func(context.Context, int32, database.UserUpdate) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreUpdateFunc) appendCall(r0 UserStoreUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreUpdateFuncCall objects describing
// the invocations of this function.
func (f *UserStoreUpdateFunc) History() []UserStoreUpdateFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreUpdateFuncCall is an object that describes an invocation of
// method Update on an instance of MockUserStore.
type UserStoreUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 database.UserUpdate
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreUpdatePasswordFunc describes the behavior when the
// UpdatePassword method of the parent MockUserStore instance is invoked.
type UserStoreUpdatePasswordFunc struct {
	defaultHook func(context.Context, int32, string, string) error
	hooks       []func(context.Context, int32, string, string) error
	history     []UserStoreUpdatePasswordFuncCall
	mutex       sync.Mutex
}

// UpdatePassword delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserStore) UpdatePassword(v0 context.Context, v1 int32, v2 string, v3 string) error {
	r0 := m.UpdatePasswordFunc.nextHook()(v0, v1, v2, v3)
	m.UpdatePasswordFunc.appendCall(UserStoreUpdatePasswordFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UpdatePassword
// method of the parent MockUserStore instance is invoked and the hook queue
// is empty.
func (f *UserStoreUpdatePasswordFunc) SetDefaultHook(hook func(context.Context, int32, string, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdatePassword method of the parent MockUserStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserStoreUpdatePasswordFunc) PushHook(hook func(context.Context, int32, string, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserStoreUpdatePasswordFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, string, string) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserStoreUpdatePasswordFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, string, string) error {
		return r0
	})
}

func (f *UserStoreUpdatePasswordFunc) nextHook() func(context.Context, int32, string, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreUpdatePasswordFunc) appendCall(r0 UserStoreUpdatePasswordFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreUpdatePasswordFuncCall objects
// describing the invocations of this function.
func (f *UserStoreUpdatePasswordFunc) History() []UserStoreUpdatePasswordFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreUpdatePasswordFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreUpdatePasswordFuncCall is an object that describes an invocation
// of method UpdatePassword on an instance of MockUserStore.
type UserStoreUpdatePasswordFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreUpdatePasswordFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreUpdatePasswordFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreUserAllowedExternalServicesFunc describes the behavior when the
// UserAllowedExternalServices method of the parent MockUserStore instance
// is invoked.
type UserStoreUserAllowedExternalServicesFunc struct {
	defaultHook func(context.Context, int32) (conf.ExternalServiceMode, error)
	hooks       []func(context.Context, int32) (conf.ExternalServiceMode, error)
	history     []UserStoreUserAllowedExternalServicesFuncCall
	mutex       sync.Mutex
}

// UserAllowedExternalServices delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockUserStore) UserAllowedExternalServices(v0 context.Context, v1 int32) (conf.ExternalServiceMode, error) {
	r0, r1 := m.UserAllowedExternalServicesFunc.nextHook()(v0, v1)
	m.UserAllowedExternalServicesFunc.appendCall(UserStoreUserAllowedExternalServicesFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// UserAllowedExternalServices method of the parent MockUserStore instance
// is invoked and the hook queue is empty.
func (f *UserStoreUserAllowedExternalServicesFunc) SetDefaultHook(hook func(context.Context, int32) (conf.ExternalServiceMode, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UserAllowedExternalServices method of the parent MockUserStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserStoreUserAllowedExternalServicesFunc) PushHook(hook func(context.Context, int32) (conf.ExternalServiceMode, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserStoreUserAllowedExternalServicesFunc) SetDefaultReturn(r0 conf.ExternalServiceMode, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (conf.ExternalServiceMode, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserStoreUserAllowedExternalServicesFunc) PushReturn(r0 conf.ExternalServiceMode, r1 error) {
	f.PushHook(func(context.Context, int32) (conf.ExternalServiceMode, error) {
		return r0, r1
	})
}

func (f *UserStoreUserAllowedExternalServicesFunc) nextHook() func(context.Context, int32) (conf.ExternalServiceMode, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreUserAllowedExternalServicesFunc) appendCall(r0 UserStoreUserAllowedExternalServicesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UserStoreUserAllowedExternalServicesFuncCall objects describing the
// invocations of this function.
func (f *UserStoreUserAllowedExternalServicesFunc) History() []UserStoreUserAllowedExternalServicesFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreUserAllowedExternalServicesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreUserAllowedExternalServicesFuncCall is an object that describes
// an invocation of method UserAllowedExternalServices on an instance of
// MockUserStore.
type UserStoreUserAllowedExternalServicesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 conf.ExternalServiceMode
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreUserAllowedExternalServicesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreUserAllowedExternalServicesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreWithFunc describes the behavior when the With method of the
// parent MockUserStore instance is invoked.
type UserStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) database.UserStore
	hooks       []func(basestore.ShareableStore) database.UserStore
	history     []UserStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) With(v0 basestore.ShareableStore) database.UserStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(UserStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) database.UserStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockUserStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *UserStoreWithFunc) PushHook(hook func(basestore.ShareableStore) database.UserStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserStoreWithFunc) SetDefaultReturn(r0 database.UserStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) database.UserStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserStoreWithFunc) PushReturn(r0 database.UserStore) {
	f.PushHook(func(basestore.ShareableStore) database.UserStore {
		return r0
	})
}

func (f *UserStoreWithFunc) nextHook() func(basestore.ShareableStore) database.UserStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreWithFunc) appendCall(r0 UserStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreWithFuncCall objects describing
// the invocations of this function.
func (f *UserStoreWithFunc) History() []UserStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreWithFuncCall is an object that describes an invocation of method
// With on an instance of MockUserStore.
type UserStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.UserStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
