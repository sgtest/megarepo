// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package dbmock

import (
	"context"
	"sync"

	database "github.com/sourcegraph/sourcegraph/internal/database"
	basestore "github.com/sourcegraph/sourcegraph/internal/database/basestore"
	temporarysettings "github.com/sourcegraph/sourcegraph/internal/temporarysettings"
)

// MockTemporarySettingsStore is a mock implementation of the
// TemporarySettingsStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockTemporarySettingsStore struct {
	// EditTemporarySettingsFunc is an instance of a mock function object
	// controlling the behavior of the method EditTemporarySettings.
	EditTemporarySettingsFunc *TemporarySettingsStoreEditTemporarySettingsFunc
	// GetTemporarySettingsFunc is an instance of a mock function object
	// controlling the behavior of the method GetTemporarySettings.
	GetTemporarySettingsFunc *TemporarySettingsStoreGetTemporarySettingsFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *TemporarySettingsStoreHandleFunc
	// OverwriteTemporarySettingsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// OverwriteTemporarySettings.
	OverwriteTemporarySettingsFunc *TemporarySettingsStoreOverwriteTemporarySettingsFunc
}

// NewMockTemporarySettingsStore creates a new mock of the
// TemporarySettingsStore interface. All methods return zero values for all
// results, unless overwritten.
func NewMockTemporarySettingsStore() *MockTemporarySettingsStore {
	return &MockTemporarySettingsStore{
		EditTemporarySettingsFunc: &TemporarySettingsStoreEditTemporarySettingsFunc{
			defaultHook: func(context.Context, int32, string) error {
				return nil
			},
		},
		GetTemporarySettingsFunc: &TemporarySettingsStoreGetTemporarySettingsFunc{
			defaultHook: func(context.Context, int32) (*temporarysettings.TemporarySettings, error) {
				return nil, nil
			},
		},
		HandleFunc: &TemporarySettingsStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				return nil
			},
		},
		OverwriteTemporarySettingsFunc: &TemporarySettingsStoreOverwriteTemporarySettingsFunc{
			defaultHook: func(context.Context, int32, string) error {
				return nil
			},
		},
	}
}

// NewStrictMockTemporarySettingsStore creates a new mock of the
// TemporarySettingsStore interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockTemporarySettingsStore() *MockTemporarySettingsStore {
	return &MockTemporarySettingsStore{
		EditTemporarySettingsFunc: &TemporarySettingsStoreEditTemporarySettingsFunc{
			defaultHook: func(context.Context, int32, string) error {
				panic("unexpected invocation of MockTemporarySettingsStore.EditTemporarySettings")
			},
		},
		GetTemporarySettingsFunc: &TemporarySettingsStoreGetTemporarySettingsFunc{
			defaultHook: func(context.Context, int32) (*temporarysettings.TemporarySettings, error) {
				panic("unexpected invocation of MockTemporarySettingsStore.GetTemporarySettings")
			},
		},
		HandleFunc: &TemporarySettingsStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				panic("unexpected invocation of MockTemporarySettingsStore.Handle")
			},
		},
		OverwriteTemporarySettingsFunc: &TemporarySettingsStoreOverwriteTemporarySettingsFunc{
			defaultHook: func(context.Context, int32, string) error {
				panic("unexpected invocation of MockTemporarySettingsStore.OverwriteTemporarySettings")
			},
		},
	}
}

// NewMockTemporarySettingsStoreFrom creates a new mock of the
// MockTemporarySettingsStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockTemporarySettingsStoreFrom(i database.TemporarySettingsStore) *MockTemporarySettingsStore {
	return &MockTemporarySettingsStore{
		EditTemporarySettingsFunc: &TemporarySettingsStoreEditTemporarySettingsFunc{
			defaultHook: i.EditTemporarySettings,
		},
		GetTemporarySettingsFunc: &TemporarySettingsStoreGetTemporarySettingsFunc{
			defaultHook: i.GetTemporarySettings,
		},
		HandleFunc: &TemporarySettingsStoreHandleFunc{
			defaultHook: i.Handle,
		},
		OverwriteTemporarySettingsFunc: &TemporarySettingsStoreOverwriteTemporarySettingsFunc{
			defaultHook: i.OverwriteTemporarySettings,
		},
	}
}

// TemporarySettingsStoreEditTemporarySettingsFunc describes the behavior
// when the EditTemporarySettings method of the parent
// MockTemporarySettingsStore instance is invoked.
type TemporarySettingsStoreEditTemporarySettingsFunc struct {
	defaultHook func(context.Context, int32, string) error
	hooks       []func(context.Context, int32, string) error
	history     []TemporarySettingsStoreEditTemporarySettingsFuncCall
	mutex       sync.Mutex
}

// EditTemporarySettings delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockTemporarySettingsStore) EditTemporarySettings(v0 context.Context, v1 int32, v2 string) error {
	r0 := m.EditTemporarySettingsFunc.nextHook()(v0, v1, v2)
	m.EditTemporarySettingsFunc.appendCall(TemporarySettingsStoreEditTemporarySettingsFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// EditTemporarySettings method of the parent MockTemporarySettingsStore
// instance is invoked and the hook queue is empty.
func (f *TemporarySettingsStoreEditTemporarySettingsFunc) SetDefaultHook(hook func(context.Context, int32, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EditTemporarySettings method of the parent MockTemporarySettingsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *TemporarySettingsStoreEditTemporarySettingsFunc) PushHook(hook func(context.Context, int32, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *TemporarySettingsStoreEditTemporarySettingsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, string) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *TemporarySettingsStoreEditTemporarySettingsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, string) error {
		return r0
	})
}

func (f *TemporarySettingsStoreEditTemporarySettingsFunc) nextHook() func(context.Context, int32, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TemporarySettingsStoreEditTemporarySettingsFunc) appendCall(r0 TemporarySettingsStoreEditTemporarySettingsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// TemporarySettingsStoreEditTemporarySettingsFuncCall objects describing
// the invocations of this function.
func (f *TemporarySettingsStoreEditTemporarySettingsFunc) History() []TemporarySettingsStoreEditTemporarySettingsFuncCall {
	f.mutex.Lock()
	history := make([]TemporarySettingsStoreEditTemporarySettingsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TemporarySettingsStoreEditTemporarySettingsFuncCall is an object that
// describes an invocation of method EditTemporarySettings on an instance of
// MockTemporarySettingsStore.
type TemporarySettingsStoreEditTemporarySettingsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TemporarySettingsStoreEditTemporarySettingsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TemporarySettingsStoreEditTemporarySettingsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TemporarySettingsStoreGetTemporarySettingsFunc describes the behavior
// when the GetTemporarySettings method of the parent
// MockTemporarySettingsStore instance is invoked.
type TemporarySettingsStoreGetTemporarySettingsFunc struct {
	defaultHook func(context.Context, int32) (*temporarysettings.TemporarySettings, error)
	hooks       []func(context.Context, int32) (*temporarysettings.TemporarySettings, error)
	history     []TemporarySettingsStoreGetTemporarySettingsFuncCall
	mutex       sync.Mutex
}

// GetTemporarySettings delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockTemporarySettingsStore) GetTemporarySettings(v0 context.Context, v1 int32) (*temporarysettings.TemporarySettings, error) {
	r0, r1 := m.GetTemporarySettingsFunc.nextHook()(v0, v1)
	m.GetTemporarySettingsFunc.appendCall(TemporarySettingsStoreGetTemporarySettingsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetTemporarySettings
// method of the parent MockTemporarySettingsStore instance is invoked and
// the hook queue is empty.
func (f *TemporarySettingsStoreGetTemporarySettingsFunc) SetDefaultHook(hook func(context.Context, int32) (*temporarysettings.TemporarySettings, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTemporarySettings method of the parent MockTemporarySettingsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *TemporarySettingsStoreGetTemporarySettingsFunc) PushHook(hook func(context.Context, int32) (*temporarysettings.TemporarySettings, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *TemporarySettingsStoreGetTemporarySettingsFunc) SetDefaultReturn(r0 *temporarysettings.TemporarySettings, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (*temporarysettings.TemporarySettings, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *TemporarySettingsStoreGetTemporarySettingsFunc) PushReturn(r0 *temporarysettings.TemporarySettings, r1 error) {
	f.PushHook(func(context.Context, int32) (*temporarysettings.TemporarySettings, error) {
		return r0, r1
	})
}

func (f *TemporarySettingsStoreGetTemporarySettingsFunc) nextHook() func(context.Context, int32) (*temporarysettings.TemporarySettings, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TemporarySettingsStoreGetTemporarySettingsFunc) appendCall(r0 TemporarySettingsStoreGetTemporarySettingsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// TemporarySettingsStoreGetTemporarySettingsFuncCall objects describing the
// invocations of this function.
func (f *TemporarySettingsStoreGetTemporarySettingsFunc) History() []TemporarySettingsStoreGetTemporarySettingsFuncCall {
	f.mutex.Lock()
	history := make([]TemporarySettingsStoreGetTemporarySettingsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TemporarySettingsStoreGetTemporarySettingsFuncCall is an object that
// describes an invocation of method GetTemporarySettings on an instance of
// MockTemporarySettingsStore.
type TemporarySettingsStoreGetTemporarySettingsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *temporarysettings.TemporarySettings
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TemporarySettingsStoreGetTemporarySettingsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TemporarySettingsStoreGetTemporarySettingsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// TemporarySettingsStoreHandleFunc describes the behavior when the Handle
// method of the parent MockTemporarySettingsStore instance is invoked.
type TemporarySettingsStoreHandleFunc struct {
	defaultHook func() *basestore.TransactableHandle
	hooks       []func() *basestore.TransactableHandle
	history     []TemporarySettingsStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTemporarySettingsStore) Handle() *basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(TemporarySettingsStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockTemporarySettingsStore instance is invoked and the hook queue
// is empty.
func (f *TemporarySettingsStoreHandleFunc) SetDefaultHook(hook func() *basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockTemporarySettingsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *TemporarySettingsStoreHandleFunc) PushHook(hook func() *basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *TemporarySettingsStoreHandleFunc) SetDefaultReturn(r0 *basestore.TransactableHandle) {
	f.SetDefaultHook(func() *basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *TemporarySettingsStoreHandleFunc) PushReturn(r0 *basestore.TransactableHandle) {
	f.PushHook(func() *basestore.TransactableHandle {
		return r0
	})
}

func (f *TemporarySettingsStoreHandleFunc) nextHook() func() *basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TemporarySettingsStoreHandleFunc) appendCall(r0 TemporarySettingsStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TemporarySettingsStoreHandleFuncCall
// objects describing the invocations of this function.
func (f *TemporarySettingsStoreHandleFunc) History() []TemporarySettingsStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]TemporarySettingsStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TemporarySettingsStoreHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of MockTemporarySettingsStore.
type TemporarySettingsStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TemporarySettingsStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TemporarySettingsStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TemporarySettingsStoreOverwriteTemporarySettingsFunc describes the
// behavior when the OverwriteTemporarySettings method of the parent
// MockTemporarySettingsStore instance is invoked.
type TemporarySettingsStoreOverwriteTemporarySettingsFunc struct {
	defaultHook func(context.Context, int32, string) error
	hooks       []func(context.Context, int32, string) error
	history     []TemporarySettingsStoreOverwriteTemporarySettingsFuncCall
	mutex       sync.Mutex
}

// OverwriteTemporarySettings delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockTemporarySettingsStore) OverwriteTemporarySettings(v0 context.Context, v1 int32, v2 string) error {
	r0 := m.OverwriteTemporarySettingsFunc.nextHook()(v0, v1, v2)
	m.OverwriteTemporarySettingsFunc.appendCall(TemporarySettingsStoreOverwriteTemporarySettingsFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// OverwriteTemporarySettings method of the parent
// MockTemporarySettingsStore instance is invoked and the hook queue is
// empty.
func (f *TemporarySettingsStoreOverwriteTemporarySettingsFunc) SetDefaultHook(hook func(context.Context, int32, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// OverwriteTemporarySettings method of the parent
// MockTemporarySettingsStore instance invokes the hook at the front of the
// queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *TemporarySettingsStoreOverwriteTemporarySettingsFunc) PushHook(hook func(context.Context, int32, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *TemporarySettingsStoreOverwriteTemporarySettingsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, string) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *TemporarySettingsStoreOverwriteTemporarySettingsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, string) error {
		return r0
	})
}

func (f *TemporarySettingsStoreOverwriteTemporarySettingsFunc) nextHook() func(context.Context, int32, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TemporarySettingsStoreOverwriteTemporarySettingsFunc) appendCall(r0 TemporarySettingsStoreOverwriteTemporarySettingsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// TemporarySettingsStoreOverwriteTemporarySettingsFuncCall objects
// describing the invocations of this function.
func (f *TemporarySettingsStoreOverwriteTemporarySettingsFunc) History() []TemporarySettingsStoreOverwriteTemporarySettingsFuncCall {
	f.mutex.Lock()
	history := make([]TemporarySettingsStoreOverwriteTemporarySettingsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TemporarySettingsStoreOverwriteTemporarySettingsFuncCall is an object
// that describes an invocation of method OverwriteTemporarySettings on an
// instance of MockTemporarySettingsStore.
type TemporarySettingsStoreOverwriteTemporarySettingsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TemporarySettingsStoreOverwriteTemporarySettingsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TemporarySettingsStoreOverwriteTemporarySettingsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
