// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package dbmock

import (
	"context"
	"database/sql"
	"sync"

	sqlf "github.com/keegancsmith/sqlf"
	database "github.com/sourcegraph/sourcegraph/internal/database"
	basestore "github.com/sourcegraph/sourcegraph/internal/database/basestore"
	encryption "github.com/sourcegraph/sourcegraph/internal/encryption"
	extsvc "github.com/sourcegraph/sourcegraph/internal/extsvc"
)

// MockUserExternalAccountsStore is a mock implementation of the
// UserExternalAccountsStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockUserExternalAccountsStore struct {
	// AssociateUserAndSaveFunc is an instance of a mock function object
	// controlling the behavior of the method AssociateUserAndSave.
	AssociateUserAndSaveFunc *UserExternalAccountsStoreAssociateUserAndSaveFunc
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *UserExternalAccountsStoreCountFunc
	// CreateUserAndSaveFunc is an instance of a mock function object
	// controlling the behavior of the method CreateUserAndSave.
	CreateUserAndSaveFunc *UserExternalAccountsStoreCreateUserAndSaveFunc
	// DeleteFunc is an instance of a mock function object controlling the
	// behavior of the method Delete.
	DeleteFunc *UserExternalAccountsStoreDeleteFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *UserExternalAccountsStoreDoneFunc
	// ExecResultFunc is an instance of a mock function object controlling
	// the behavior of the method ExecResult.
	ExecResultFunc *UserExternalAccountsStoreExecResultFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *UserExternalAccountsStoreGetFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *UserExternalAccountsStoreHandleFunc
	// InsertFunc is an instance of a mock function object controlling the
	// behavior of the method Insert.
	InsertFunc *UserExternalAccountsStoreInsertFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *UserExternalAccountsStoreListFunc
	// ListBySQLFunc is an instance of a mock function object controlling
	// the behavior of the method ListBySQL.
	ListBySQLFunc *UserExternalAccountsStoreListBySQLFunc
	// LookupUserAndSaveFunc is an instance of a mock function object
	// controlling the behavior of the method LookupUserAndSave.
	LookupUserAndSaveFunc *UserExternalAccountsStoreLookupUserAndSaveFunc
	// QueryRowFunc is an instance of a mock function object controlling the
	// behavior of the method QueryRow.
	QueryRowFunc *UserExternalAccountsStoreQueryRowFunc
	// TouchExpiredFunc is an instance of a mock function object controlling
	// the behavior of the method TouchExpired.
	TouchExpiredFunc *UserExternalAccountsStoreTouchExpiredFunc
	// TouchLastValidFunc is an instance of a mock function object
	// controlling the behavior of the method TouchLastValid.
	TouchLastValidFunc *UserExternalAccountsStoreTouchLastValidFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *UserExternalAccountsStoreTransactFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *UserExternalAccountsStoreWithFunc
	// WithEncryptionKeyFunc is an instance of a mock function object
	// controlling the behavior of the method WithEncryptionKey.
	WithEncryptionKeyFunc *UserExternalAccountsStoreWithEncryptionKeyFunc
}

// NewMockUserExternalAccountsStore creates a new mock of the
// UserExternalAccountsStore interface. All methods return zero values for
// all results, unless overwritten.
func NewMockUserExternalAccountsStore() *MockUserExternalAccountsStore {
	return &MockUserExternalAccountsStore{
		AssociateUserAndSaveFunc: &UserExternalAccountsStoreAssociateUserAndSaveFunc{
			defaultHook: func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error {
				return nil
			},
		},
		CountFunc: &UserExternalAccountsStoreCountFunc{
			defaultHook: func(context.Context, database.ExternalAccountsListOptions) (int, error) {
				return 0, nil
			},
		},
		CreateUserAndSaveFunc: &UserExternalAccountsStoreCreateUserAndSaveFunc{
			defaultHook: func(context.Context, database.NewUser, extsvc.AccountSpec, extsvc.AccountData) (int32, error) {
				return 0, nil
			},
		},
		DeleteFunc: &UserExternalAccountsStoreDeleteFunc{
			defaultHook: func(context.Context, int32) error {
				return nil
			},
		},
		DoneFunc: &UserExternalAccountsStoreDoneFunc{
			defaultHook: func(error) error {
				return nil
			},
		},
		ExecResultFunc: &UserExternalAccountsStoreExecResultFunc{
			defaultHook: func(context.Context, *sqlf.Query) (sql.Result, error) {
				return nil, nil
			},
		},
		GetFunc: &UserExternalAccountsStoreGetFunc{
			defaultHook: func(context.Context, int32) (*extsvc.Account, error) {
				return nil, nil
			},
		},
		HandleFunc: &UserExternalAccountsStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				return nil
			},
		},
		InsertFunc: &UserExternalAccountsStoreInsertFunc{
			defaultHook: func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error {
				return nil
			},
		},
		ListFunc: &UserExternalAccountsStoreListFunc{
			defaultHook: func(context.Context, database.ExternalAccountsListOptions) ([]*extsvc.Account, error) {
				return nil, nil
			},
		},
		ListBySQLFunc: &UserExternalAccountsStoreListBySQLFunc{
			defaultHook: func(context.Context, *sqlf.Query) ([]*extsvc.Account, error) {
				return nil, nil
			},
		},
		LookupUserAndSaveFunc: &UserExternalAccountsStoreLookupUserAndSaveFunc{
			defaultHook: func(context.Context, extsvc.AccountSpec, extsvc.AccountData) (int32, error) {
				return 0, nil
			},
		},
		QueryRowFunc: &UserExternalAccountsStoreQueryRowFunc{
			defaultHook: func(context.Context, *sqlf.Query) *sql.Row {
				return nil
			},
		},
		TouchExpiredFunc: &UserExternalAccountsStoreTouchExpiredFunc{
			defaultHook: func(context.Context, int32) error {
				return nil
			},
		},
		TouchLastValidFunc: &UserExternalAccountsStoreTouchLastValidFunc{
			defaultHook: func(context.Context, int32) error {
				return nil
			},
		},
		TransactFunc: &UserExternalAccountsStoreTransactFunc{
			defaultHook: func(context.Context) (database.UserExternalAccountsStore, error) {
				return nil, nil
			},
		},
		WithFunc: &UserExternalAccountsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) database.UserExternalAccountsStore {
				return nil
			},
		},
		WithEncryptionKeyFunc: &UserExternalAccountsStoreWithEncryptionKeyFunc{
			defaultHook: func(encryption.Key) database.UserExternalAccountsStore {
				return nil
			},
		},
	}
}

// NewStrictMockUserExternalAccountsStore creates a new mock of the
// UserExternalAccountsStore interface. All methods panic on invocation,
// unless overwritten.
func NewStrictMockUserExternalAccountsStore() *MockUserExternalAccountsStore {
	return &MockUserExternalAccountsStore{
		AssociateUserAndSaveFunc: &UserExternalAccountsStoreAssociateUserAndSaveFunc{
			defaultHook: func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error {
				panic("unexpected invocation of MockUserExternalAccountsStore.AssociateUserAndSave")
			},
		},
		CountFunc: &UserExternalAccountsStoreCountFunc{
			defaultHook: func(context.Context, database.ExternalAccountsListOptions) (int, error) {
				panic("unexpected invocation of MockUserExternalAccountsStore.Count")
			},
		},
		CreateUserAndSaveFunc: &UserExternalAccountsStoreCreateUserAndSaveFunc{
			defaultHook: func(context.Context, database.NewUser, extsvc.AccountSpec, extsvc.AccountData) (int32, error) {
				panic("unexpected invocation of MockUserExternalAccountsStore.CreateUserAndSave")
			},
		},
		DeleteFunc: &UserExternalAccountsStoreDeleteFunc{
			defaultHook: func(context.Context, int32) error {
				panic("unexpected invocation of MockUserExternalAccountsStore.Delete")
			},
		},
		DoneFunc: &UserExternalAccountsStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockUserExternalAccountsStore.Done")
			},
		},
		ExecResultFunc: &UserExternalAccountsStoreExecResultFunc{
			defaultHook: func(context.Context, *sqlf.Query) (sql.Result, error) {
				panic("unexpected invocation of MockUserExternalAccountsStore.ExecResult")
			},
		},
		GetFunc: &UserExternalAccountsStoreGetFunc{
			defaultHook: func(context.Context, int32) (*extsvc.Account, error) {
				panic("unexpected invocation of MockUserExternalAccountsStore.Get")
			},
		},
		HandleFunc: &UserExternalAccountsStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				panic("unexpected invocation of MockUserExternalAccountsStore.Handle")
			},
		},
		InsertFunc: &UserExternalAccountsStoreInsertFunc{
			defaultHook: func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error {
				panic("unexpected invocation of MockUserExternalAccountsStore.Insert")
			},
		},
		ListFunc: &UserExternalAccountsStoreListFunc{
			defaultHook: func(context.Context, database.ExternalAccountsListOptions) ([]*extsvc.Account, error) {
				panic("unexpected invocation of MockUserExternalAccountsStore.List")
			},
		},
		ListBySQLFunc: &UserExternalAccountsStoreListBySQLFunc{
			defaultHook: func(context.Context, *sqlf.Query) ([]*extsvc.Account, error) {
				panic("unexpected invocation of MockUserExternalAccountsStore.ListBySQL")
			},
		},
		LookupUserAndSaveFunc: &UserExternalAccountsStoreLookupUserAndSaveFunc{
			defaultHook: func(context.Context, extsvc.AccountSpec, extsvc.AccountData) (int32, error) {
				panic("unexpected invocation of MockUserExternalAccountsStore.LookupUserAndSave")
			},
		},
		QueryRowFunc: &UserExternalAccountsStoreQueryRowFunc{
			defaultHook: func(context.Context, *sqlf.Query) *sql.Row {
				panic("unexpected invocation of MockUserExternalAccountsStore.QueryRow")
			},
		},
		TouchExpiredFunc: &UserExternalAccountsStoreTouchExpiredFunc{
			defaultHook: func(context.Context, int32) error {
				panic("unexpected invocation of MockUserExternalAccountsStore.TouchExpired")
			},
		},
		TouchLastValidFunc: &UserExternalAccountsStoreTouchLastValidFunc{
			defaultHook: func(context.Context, int32) error {
				panic("unexpected invocation of MockUserExternalAccountsStore.TouchLastValid")
			},
		},
		TransactFunc: &UserExternalAccountsStoreTransactFunc{
			defaultHook: func(context.Context) (database.UserExternalAccountsStore, error) {
				panic("unexpected invocation of MockUserExternalAccountsStore.Transact")
			},
		},
		WithFunc: &UserExternalAccountsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) database.UserExternalAccountsStore {
				panic("unexpected invocation of MockUserExternalAccountsStore.With")
			},
		},
		WithEncryptionKeyFunc: &UserExternalAccountsStoreWithEncryptionKeyFunc{
			defaultHook: func(encryption.Key) database.UserExternalAccountsStore {
				panic("unexpected invocation of MockUserExternalAccountsStore.WithEncryptionKey")
			},
		},
	}
}

// NewMockUserExternalAccountsStoreFrom creates a new mock of the
// MockUserExternalAccountsStore interface. All methods delegate to the
// given implementation, unless overwritten.
func NewMockUserExternalAccountsStoreFrom(i database.UserExternalAccountsStore) *MockUserExternalAccountsStore {
	return &MockUserExternalAccountsStore{
		AssociateUserAndSaveFunc: &UserExternalAccountsStoreAssociateUserAndSaveFunc{
			defaultHook: i.AssociateUserAndSave,
		},
		CountFunc: &UserExternalAccountsStoreCountFunc{
			defaultHook: i.Count,
		},
		CreateUserAndSaveFunc: &UserExternalAccountsStoreCreateUserAndSaveFunc{
			defaultHook: i.CreateUserAndSave,
		},
		DeleteFunc: &UserExternalAccountsStoreDeleteFunc{
			defaultHook: i.Delete,
		},
		DoneFunc: &UserExternalAccountsStoreDoneFunc{
			defaultHook: i.Done,
		},
		ExecResultFunc: &UserExternalAccountsStoreExecResultFunc{
			defaultHook: i.ExecResult,
		},
		GetFunc: &UserExternalAccountsStoreGetFunc{
			defaultHook: i.Get,
		},
		HandleFunc: &UserExternalAccountsStoreHandleFunc{
			defaultHook: i.Handle,
		},
		InsertFunc: &UserExternalAccountsStoreInsertFunc{
			defaultHook: i.Insert,
		},
		ListFunc: &UserExternalAccountsStoreListFunc{
			defaultHook: i.List,
		},
		ListBySQLFunc: &UserExternalAccountsStoreListBySQLFunc{
			defaultHook: i.ListBySQL,
		},
		LookupUserAndSaveFunc: &UserExternalAccountsStoreLookupUserAndSaveFunc{
			defaultHook: i.LookupUserAndSave,
		},
		QueryRowFunc: &UserExternalAccountsStoreQueryRowFunc{
			defaultHook: i.QueryRow,
		},
		TouchExpiredFunc: &UserExternalAccountsStoreTouchExpiredFunc{
			defaultHook: i.TouchExpired,
		},
		TouchLastValidFunc: &UserExternalAccountsStoreTouchLastValidFunc{
			defaultHook: i.TouchLastValid,
		},
		TransactFunc: &UserExternalAccountsStoreTransactFunc{
			defaultHook: i.Transact,
		},
		WithFunc: &UserExternalAccountsStoreWithFunc{
			defaultHook: i.With,
		},
		WithEncryptionKeyFunc: &UserExternalAccountsStoreWithEncryptionKeyFunc{
			defaultHook: i.WithEncryptionKey,
		},
	}
}

// UserExternalAccountsStoreAssociateUserAndSaveFunc describes the behavior
// when the AssociateUserAndSave method of the parent
// MockUserExternalAccountsStore instance is invoked.
type UserExternalAccountsStoreAssociateUserAndSaveFunc struct {
	defaultHook func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error
	hooks       []func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error
	history     []UserExternalAccountsStoreAssociateUserAndSaveFuncCall
	mutex       sync.Mutex
}

// AssociateUserAndSave delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) AssociateUserAndSave(v0 context.Context, v1 int32, v2 extsvc.AccountSpec, v3 extsvc.AccountData) error {
	r0 := m.AssociateUserAndSaveFunc.nextHook()(v0, v1, v2, v3)
	m.AssociateUserAndSaveFunc.appendCall(UserExternalAccountsStoreAssociateUserAndSaveFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the AssociateUserAndSave
// method of the parent MockUserExternalAccountsStore instance is invoked
// and the hook queue is empty.
func (f *UserExternalAccountsStoreAssociateUserAndSaveFunc) SetDefaultHook(hook func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AssociateUserAndSave method of the parent MockUserExternalAccountsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *UserExternalAccountsStoreAssociateUserAndSaveFunc) PushHook(hook func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserExternalAccountsStoreAssociateUserAndSaveFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserExternalAccountsStoreAssociateUserAndSaveFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error {
		return r0
	})
}

func (f *UserExternalAccountsStoreAssociateUserAndSaveFunc) nextHook() func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreAssociateUserAndSaveFunc) appendCall(r0 UserExternalAccountsStoreAssociateUserAndSaveFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UserExternalAccountsStoreAssociateUserAndSaveFuncCall objects describing
// the invocations of this function.
func (f *UserExternalAccountsStoreAssociateUserAndSaveFunc) History() []UserExternalAccountsStoreAssociateUserAndSaveFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreAssociateUserAndSaveFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreAssociateUserAndSaveFuncCall is an object that
// describes an invocation of method AssociateUserAndSave on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreAssociateUserAndSaveFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 extsvc.AccountSpec
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 extsvc.AccountData
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreAssociateUserAndSaveFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreAssociateUserAndSaveFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserExternalAccountsStoreCountFunc describes the behavior when the Count
// method of the parent MockUserExternalAccountsStore instance is invoked.
type UserExternalAccountsStoreCountFunc struct {
	defaultHook func(context.Context, database.ExternalAccountsListOptions) (int, error)
	hooks       []func(context.Context, database.ExternalAccountsListOptions) (int, error)
	history     []UserExternalAccountsStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) Count(v0 context.Context, v1 database.ExternalAccountsListOptions) (int, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(UserExternalAccountsStoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockUserExternalAccountsStore instance is invoked and the hook
// queue is empty.
func (f *UserExternalAccountsStoreCountFunc) SetDefaultHook(hook func(context.Context, database.ExternalAccountsListOptions) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockUserExternalAccountsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserExternalAccountsStoreCountFunc) PushHook(hook func(context.Context, database.ExternalAccountsListOptions) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserExternalAccountsStoreCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, database.ExternalAccountsListOptions) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserExternalAccountsStoreCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, database.ExternalAccountsListOptions) (int, error) {
		return r0, r1
	})
}

func (f *UserExternalAccountsStoreCountFunc) nextHook() func(context.Context, database.ExternalAccountsListOptions) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreCountFunc) appendCall(r0 UserExternalAccountsStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserExternalAccountsStoreCountFuncCall
// objects describing the invocations of this function.
func (f *UserExternalAccountsStoreCountFunc) History() []UserExternalAccountsStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreCountFuncCall is an object that describes an
// invocation of method Count on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.ExternalAccountsListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserExternalAccountsStoreCreateUserAndSaveFunc describes the behavior
// when the CreateUserAndSave method of the parent
// MockUserExternalAccountsStore instance is invoked.
type UserExternalAccountsStoreCreateUserAndSaveFunc struct {
	defaultHook func(context.Context, database.NewUser, extsvc.AccountSpec, extsvc.AccountData) (int32, error)
	hooks       []func(context.Context, database.NewUser, extsvc.AccountSpec, extsvc.AccountData) (int32, error)
	history     []UserExternalAccountsStoreCreateUserAndSaveFuncCall
	mutex       sync.Mutex
}

// CreateUserAndSave delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) CreateUserAndSave(v0 context.Context, v1 database.NewUser, v2 extsvc.AccountSpec, v3 extsvc.AccountData) (int32, error) {
	r0, r1 := m.CreateUserAndSaveFunc.nextHook()(v0, v1, v2, v3)
	m.CreateUserAndSaveFunc.appendCall(UserExternalAccountsStoreCreateUserAndSaveFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateUserAndSave
// method of the parent MockUserExternalAccountsStore instance is invoked
// and the hook queue is empty.
func (f *UserExternalAccountsStoreCreateUserAndSaveFunc) SetDefaultHook(hook func(context.Context, database.NewUser, extsvc.AccountSpec, extsvc.AccountData) (int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateUserAndSave method of the parent MockUserExternalAccountsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *UserExternalAccountsStoreCreateUserAndSaveFunc) PushHook(hook func(context.Context, database.NewUser, extsvc.AccountSpec, extsvc.AccountData) (int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserExternalAccountsStoreCreateUserAndSaveFunc) SetDefaultReturn(r0 int32, r1 error) {
	f.SetDefaultHook(func(context.Context, database.NewUser, extsvc.AccountSpec, extsvc.AccountData) (int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserExternalAccountsStoreCreateUserAndSaveFunc) PushReturn(r0 int32, r1 error) {
	f.PushHook(func(context.Context, database.NewUser, extsvc.AccountSpec, extsvc.AccountData) (int32, error) {
		return r0, r1
	})
}

func (f *UserExternalAccountsStoreCreateUserAndSaveFunc) nextHook() func(context.Context, database.NewUser, extsvc.AccountSpec, extsvc.AccountData) (int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreCreateUserAndSaveFunc) appendCall(r0 UserExternalAccountsStoreCreateUserAndSaveFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UserExternalAccountsStoreCreateUserAndSaveFuncCall objects describing the
// invocations of this function.
func (f *UserExternalAccountsStoreCreateUserAndSaveFunc) History() []UserExternalAccountsStoreCreateUserAndSaveFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreCreateUserAndSaveFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreCreateUserAndSaveFuncCall is an object that
// describes an invocation of method CreateUserAndSave on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreCreateUserAndSaveFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.NewUser
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 extsvc.AccountSpec
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 extsvc.AccountData
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreCreateUserAndSaveFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreCreateUserAndSaveFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserExternalAccountsStoreDeleteFunc describes the behavior when the
// Delete method of the parent MockUserExternalAccountsStore instance is
// invoked.
type UserExternalAccountsStoreDeleteFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []UserExternalAccountsStoreDeleteFuncCall
	mutex       sync.Mutex
}

// Delete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) Delete(v0 context.Context, v1 int32) error {
	r0 := m.DeleteFunc.nextHook()(v0, v1)
	m.DeleteFunc.appendCall(UserExternalAccountsStoreDeleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Delete method of the
// parent MockUserExternalAccountsStore instance is invoked and the hook
// queue is empty.
func (f *UserExternalAccountsStoreDeleteFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Delete method of the parent MockUserExternalAccountsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserExternalAccountsStoreDeleteFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserExternalAccountsStoreDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserExternalAccountsStoreDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *UserExternalAccountsStoreDeleteFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreDeleteFunc) appendCall(r0 UserExternalAccountsStoreDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserExternalAccountsStoreDeleteFuncCall
// objects describing the invocations of this function.
func (f *UserExternalAccountsStoreDeleteFunc) History() []UserExternalAccountsStoreDeleteFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreDeleteFuncCall is an object that describes an
// invocation of method Delete on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserExternalAccountsStoreDoneFunc describes the behavior when the Done
// method of the parent MockUserExternalAccountsStore instance is invoked.
type UserExternalAccountsStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []UserExternalAccountsStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(UserExternalAccountsStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockUserExternalAccountsStore instance is invoked and the hook
// queue is empty.
func (f *UserExternalAccountsStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockUserExternalAccountsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserExternalAccountsStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserExternalAccountsStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserExternalAccountsStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *UserExternalAccountsStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreDoneFunc) appendCall(r0 UserExternalAccountsStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserExternalAccountsStoreDoneFuncCall
// objects describing the invocations of this function.
func (f *UserExternalAccountsStoreDoneFunc) History() []UserExternalAccountsStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreDoneFuncCall is an object that describes an
// invocation of method Done on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserExternalAccountsStoreExecResultFunc describes the behavior when the
// ExecResult method of the parent MockUserExternalAccountsStore instance is
// invoked.
type UserExternalAccountsStoreExecResultFunc struct {
	defaultHook func(context.Context, *sqlf.Query) (sql.Result, error)
	hooks       []func(context.Context, *sqlf.Query) (sql.Result, error)
	history     []UserExternalAccountsStoreExecResultFuncCall
	mutex       sync.Mutex
}

// ExecResult delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) ExecResult(v0 context.Context, v1 *sqlf.Query) (sql.Result, error) {
	r0, r1 := m.ExecResultFunc.nextHook()(v0, v1)
	m.ExecResultFunc.appendCall(UserExternalAccountsStoreExecResultFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ExecResult method of
// the parent MockUserExternalAccountsStore instance is invoked and the hook
// queue is empty.
func (f *UserExternalAccountsStoreExecResultFunc) SetDefaultHook(hook func(context.Context, *sqlf.Query) (sql.Result, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExecResult method of the parent MockUserExternalAccountsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserExternalAccountsStoreExecResultFunc) PushHook(hook func(context.Context, *sqlf.Query) (sql.Result, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserExternalAccountsStoreExecResultFunc) SetDefaultReturn(r0 sql.Result, r1 error) {
	f.SetDefaultHook(func(context.Context, *sqlf.Query) (sql.Result, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserExternalAccountsStoreExecResultFunc) PushReturn(r0 sql.Result, r1 error) {
	f.PushHook(func(context.Context, *sqlf.Query) (sql.Result, error) {
		return r0, r1
	})
}

func (f *UserExternalAccountsStoreExecResultFunc) nextHook() func(context.Context, *sqlf.Query) (sql.Result, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreExecResultFunc) appendCall(r0 UserExternalAccountsStoreExecResultFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserExternalAccountsStoreExecResultFuncCall
// objects describing the invocations of this function.
func (f *UserExternalAccountsStoreExecResultFunc) History() []UserExternalAccountsStoreExecResultFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreExecResultFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreExecResultFuncCall is an object that describes
// an invocation of method ExecResult on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreExecResultFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sqlf.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 sql.Result
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreExecResultFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreExecResultFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserExternalAccountsStoreGetFunc describes the behavior when the Get
// method of the parent MockUserExternalAccountsStore instance is invoked.
type UserExternalAccountsStoreGetFunc struct {
	defaultHook func(context.Context, int32) (*extsvc.Account, error)
	hooks       []func(context.Context, int32) (*extsvc.Account, error)
	history     []UserExternalAccountsStoreGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) Get(v0 context.Context, v1 int32) (*extsvc.Account, error) {
	r0, r1 := m.GetFunc.nextHook()(v0, v1)
	m.GetFunc.appendCall(UserExternalAccountsStoreGetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockUserExternalAccountsStore instance is invoked and the hook
// queue is empty.
func (f *UserExternalAccountsStoreGetFunc) SetDefaultHook(hook func(context.Context, int32) (*extsvc.Account, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockUserExternalAccountsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserExternalAccountsStoreGetFunc) PushHook(hook func(context.Context, int32) (*extsvc.Account, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserExternalAccountsStoreGetFunc) SetDefaultReturn(r0 *extsvc.Account, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (*extsvc.Account, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserExternalAccountsStoreGetFunc) PushReturn(r0 *extsvc.Account, r1 error) {
	f.PushHook(func(context.Context, int32) (*extsvc.Account, error) {
		return r0, r1
	})
}

func (f *UserExternalAccountsStoreGetFunc) nextHook() func(context.Context, int32) (*extsvc.Account, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreGetFunc) appendCall(r0 UserExternalAccountsStoreGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserExternalAccountsStoreGetFuncCall
// objects describing the invocations of this function.
func (f *UserExternalAccountsStoreGetFunc) History() []UserExternalAccountsStoreGetFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreGetFuncCall is an object that describes an
// invocation of method Get on an instance of MockUserExternalAccountsStore.
type UserExternalAccountsStoreGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *extsvc.Account
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserExternalAccountsStoreHandleFunc describes the behavior when the
// Handle method of the parent MockUserExternalAccountsStore instance is
// invoked.
type UserExternalAccountsStoreHandleFunc struct {
	defaultHook func() *basestore.TransactableHandle
	hooks       []func() *basestore.TransactableHandle
	history     []UserExternalAccountsStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) Handle() *basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(UserExternalAccountsStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockUserExternalAccountsStore instance is invoked and the hook
// queue is empty.
func (f *UserExternalAccountsStoreHandleFunc) SetDefaultHook(hook func() *basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockUserExternalAccountsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserExternalAccountsStoreHandleFunc) PushHook(hook func() *basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserExternalAccountsStoreHandleFunc) SetDefaultReturn(r0 *basestore.TransactableHandle) {
	f.SetDefaultHook(func() *basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserExternalAccountsStoreHandleFunc) PushReturn(r0 *basestore.TransactableHandle) {
	f.PushHook(func() *basestore.TransactableHandle {
		return r0
	})
}

func (f *UserExternalAccountsStoreHandleFunc) nextHook() func() *basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreHandleFunc) appendCall(r0 UserExternalAccountsStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserExternalAccountsStoreHandleFuncCall
// objects describing the invocations of this function.
func (f *UserExternalAccountsStoreHandleFunc) History() []UserExternalAccountsStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserExternalAccountsStoreInsertFunc describes the behavior when the
// Insert method of the parent MockUserExternalAccountsStore instance is
// invoked.
type UserExternalAccountsStoreInsertFunc struct {
	defaultHook func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error
	hooks       []func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error
	history     []UserExternalAccountsStoreInsertFuncCall
	mutex       sync.Mutex
}

// Insert delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) Insert(v0 context.Context, v1 int32, v2 extsvc.AccountSpec, v3 extsvc.AccountData) error {
	r0 := m.InsertFunc.nextHook()(v0, v1, v2, v3)
	m.InsertFunc.appendCall(UserExternalAccountsStoreInsertFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Insert method of the
// parent MockUserExternalAccountsStore instance is invoked and the hook
// queue is empty.
func (f *UserExternalAccountsStoreInsertFunc) SetDefaultHook(hook func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Insert method of the parent MockUserExternalAccountsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserExternalAccountsStoreInsertFunc) PushHook(hook func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserExternalAccountsStoreInsertFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserExternalAccountsStoreInsertFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error {
		return r0
	})
}

func (f *UserExternalAccountsStoreInsertFunc) nextHook() func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreInsertFunc) appendCall(r0 UserExternalAccountsStoreInsertFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserExternalAccountsStoreInsertFuncCall
// objects describing the invocations of this function.
func (f *UserExternalAccountsStoreInsertFunc) History() []UserExternalAccountsStoreInsertFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreInsertFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreInsertFuncCall is an object that describes an
// invocation of method Insert on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreInsertFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 extsvc.AccountSpec
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 extsvc.AccountData
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreInsertFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreInsertFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserExternalAccountsStoreListFunc describes the behavior when the List
// method of the parent MockUserExternalAccountsStore instance is invoked.
type UserExternalAccountsStoreListFunc struct {
	defaultHook func(context.Context, database.ExternalAccountsListOptions) ([]*extsvc.Account, error)
	hooks       []func(context.Context, database.ExternalAccountsListOptions) ([]*extsvc.Account, error)
	history     []UserExternalAccountsStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) List(v0 context.Context, v1 database.ExternalAccountsListOptions) ([]*extsvc.Account, error) {
	r0, r1 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(UserExternalAccountsStoreListFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockUserExternalAccountsStore instance is invoked and the hook
// queue is empty.
func (f *UserExternalAccountsStoreListFunc) SetDefaultHook(hook func(context.Context, database.ExternalAccountsListOptions) ([]*extsvc.Account, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockUserExternalAccountsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserExternalAccountsStoreListFunc) PushHook(hook func(context.Context, database.ExternalAccountsListOptions) ([]*extsvc.Account, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserExternalAccountsStoreListFunc) SetDefaultReturn(r0 []*extsvc.Account, r1 error) {
	f.SetDefaultHook(func(context.Context, database.ExternalAccountsListOptions) ([]*extsvc.Account, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserExternalAccountsStoreListFunc) PushReturn(r0 []*extsvc.Account, r1 error) {
	f.PushHook(func(context.Context, database.ExternalAccountsListOptions) ([]*extsvc.Account, error) {
		return r0, r1
	})
}

func (f *UserExternalAccountsStoreListFunc) nextHook() func(context.Context, database.ExternalAccountsListOptions) ([]*extsvc.Account, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreListFunc) appendCall(r0 UserExternalAccountsStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserExternalAccountsStoreListFuncCall
// objects describing the invocations of this function.
func (f *UserExternalAccountsStoreListFunc) History() []UserExternalAccountsStoreListFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreListFuncCall is an object that describes an
// invocation of method List on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.ExternalAccountsListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*extsvc.Account
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserExternalAccountsStoreListBySQLFunc describes the behavior when the
// ListBySQL method of the parent MockUserExternalAccountsStore instance is
// invoked.
type UserExternalAccountsStoreListBySQLFunc struct {
	defaultHook func(context.Context, *sqlf.Query) ([]*extsvc.Account, error)
	hooks       []func(context.Context, *sqlf.Query) ([]*extsvc.Account, error)
	history     []UserExternalAccountsStoreListBySQLFuncCall
	mutex       sync.Mutex
}

// ListBySQL delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) ListBySQL(v0 context.Context, v1 *sqlf.Query) ([]*extsvc.Account, error) {
	r0, r1 := m.ListBySQLFunc.nextHook()(v0, v1)
	m.ListBySQLFunc.appendCall(UserExternalAccountsStoreListBySQLFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListBySQL method of
// the parent MockUserExternalAccountsStore instance is invoked and the hook
// queue is empty.
func (f *UserExternalAccountsStoreListBySQLFunc) SetDefaultHook(hook func(context.Context, *sqlf.Query) ([]*extsvc.Account, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListBySQL method of the parent MockUserExternalAccountsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserExternalAccountsStoreListBySQLFunc) PushHook(hook func(context.Context, *sqlf.Query) ([]*extsvc.Account, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserExternalAccountsStoreListBySQLFunc) SetDefaultReturn(r0 []*extsvc.Account, r1 error) {
	f.SetDefaultHook(func(context.Context, *sqlf.Query) ([]*extsvc.Account, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserExternalAccountsStoreListBySQLFunc) PushReturn(r0 []*extsvc.Account, r1 error) {
	f.PushHook(func(context.Context, *sqlf.Query) ([]*extsvc.Account, error) {
		return r0, r1
	})
}

func (f *UserExternalAccountsStoreListBySQLFunc) nextHook() func(context.Context, *sqlf.Query) ([]*extsvc.Account, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreListBySQLFunc) appendCall(r0 UserExternalAccountsStoreListBySQLFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserExternalAccountsStoreListBySQLFuncCall
// objects describing the invocations of this function.
func (f *UserExternalAccountsStoreListBySQLFunc) History() []UserExternalAccountsStoreListBySQLFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreListBySQLFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreListBySQLFuncCall is an object that describes an
// invocation of method ListBySQL on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreListBySQLFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sqlf.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*extsvc.Account
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreListBySQLFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreListBySQLFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserExternalAccountsStoreLookupUserAndSaveFunc describes the behavior
// when the LookupUserAndSave method of the parent
// MockUserExternalAccountsStore instance is invoked.
type UserExternalAccountsStoreLookupUserAndSaveFunc struct {
	defaultHook func(context.Context, extsvc.AccountSpec, extsvc.AccountData) (int32, error)
	hooks       []func(context.Context, extsvc.AccountSpec, extsvc.AccountData) (int32, error)
	history     []UserExternalAccountsStoreLookupUserAndSaveFuncCall
	mutex       sync.Mutex
}

// LookupUserAndSave delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) LookupUserAndSave(v0 context.Context, v1 extsvc.AccountSpec, v2 extsvc.AccountData) (int32, error) {
	r0, r1 := m.LookupUserAndSaveFunc.nextHook()(v0, v1, v2)
	m.LookupUserAndSaveFunc.appendCall(UserExternalAccountsStoreLookupUserAndSaveFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the LookupUserAndSave
// method of the parent MockUserExternalAccountsStore instance is invoked
// and the hook queue is empty.
func (f *UserExternalAccountsStoreLookupUserAndSaveFunc) SetDefaultHook(hook func(context.Context, extsvc.AccountSpec, extsvc.AccountData) (int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LookupUserAndSave method of the parent MockUserExternalAccountsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *UserExternalAccountsStoreLookupUserAndSaveFunc) PushHook(hook func(context.Context, extsvc.AccountSpec, extsvc.AccountData) (int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserExternalAccountsStoreLookupUserAndSaveFunc) SetDefaultReturn(r0 int32, r1 error) {
	f.SetDefaultHook(func(context.Context, extsvc.AccountSpec, extsvc.AccountData) (int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserExternalAccountsStoreLookupUserAndSaveFunc) PushReturn(r0 int32, r1 error) {
	f.PushHook(func(context.Context, extsvc.AccountSpec, extsvc.AccountData) (int32, error) {
		return r0, r1
	})
}

func (f *UserExternalAccountsStoreLookupUserAndSaveFunc) nextHook() func(context.Context, extsvc.AccountSpec, extsvc.AccountData) (int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreLookupUserAndSaveFunc) appendCall(r0 UserExternalAccountsStoreLookupUserAndSaveFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UserExternalAccountsStoreLookupUserAndSaveFuncCall objects describing the
// invocations of this function.
func (f *UserExternalAccountsStoreLookupUserAndSaveFunc) History() []UserExternalAccountsStoreLookupUserAndSaveFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreLookupUserAndSaveFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreLookupUserAndSaveFuncCall is an object that
// describes an invocation of method LookupUserAndSave on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreLookupUserAndSaveFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 extsvc.AccountSpec
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 extsvc.AccountData
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreLookupUserAndSaveFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreLookupUserAndSaveFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserExternalAccountsStoreQueryRowFunc describes the behavior when the
// QueryRow method of the parent MockUserExternalAccountsStore instance is
// invoked.
type UserExternalAccountsStoreQueryRowFunc struct {
	defaultHook func(context.Context, *sqlf.Query) *sql.Row
	hooks       []func(context.Context, *sqlf.Query) *sql.Row
	history     []UserExternalAccountsStoreQueryRowFuncCall
	mutex       sync.Mutex
}

// QueryRow delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) QueryRow(v0 context.Context, v1 *sqlf.Query) *sql.Row {
	r0 := m.QueryRowFunc.nextHook()(v0, v1)
	m.QueryRowFunc.appendCall(UserExternalAccountsStoreQueryRowFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the QueryRow method of
// the parent MockUserExternalAccountsStore instance is invoked and the hook
// queue is empty.
func (f *UserExternalAccountsStoreQueryRowFunc) SetDefaultHook(hook func(context.Context, *sqlf.Query) *sql.Row) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueryRow method of the parent MockUserExternalAccountsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserExternalAccountsStoreQueryRowFunc) PushHook(hook func(context.Context, *sqlf.Query) *sql.Row) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserExternalAccountsStoreQueryRowFunc) SetDefaultReturn(r0 *sql.Row) {
	f.SetDefaultHook(func(context.Context, *sqlf.Query) *sql.Row {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserExternalAccountsStoreQueryRowFunc) PushReturn(r0 *sql.Row) {
	f.PushHook(func(context.Context, *sqlf.Query) *sql.Row {
		return r0
	})
}

func (f *UserExternalAccountsStoreQueryRowFunc) nextHook() func(context.Context, *sqlf.Query) *sql.Row {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreQueryRowFunc) appendCall(r0 UserExternalAccountsStoreQueryRowFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserExternalAccountsStoreQueryRowFuncCall
// objects describing the invocations of this function.
func (f *UserExternalAccountsStoreQueryRowFunc) History() []UserExternalAccountsStoreQueryRowFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreQueryRowFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreQueryRowFuncCall is an object that describes an
// invocation of method QueryRow on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreQueryRowFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sqlf.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *sql.Row
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreQueryRowFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreQueryRowFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserExternalAccountsStoreTouchExpiredFunc describes the behavior when the
// TouchExpired method of the parent MockUserExternalAccountsStore instance
// is invoked.
type UserExternalAccountsStoreTouchExpiredFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []UserExternalAccountsStoreTouchExpiredFuncCall
	mutex       sync.Mutex
}

// TouchExpired delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) TouchExpired(v0 context.Context, v1 int32) error {
	r0 := m.TouchExpiredFunc.nextHook()(v0, v1)
	m.TouchExpiredFunc.appendCall(UserExternalAccountsStoreTouchExpiredFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the TouchExpired method
// of the parent MockUserExternalAccountsStore instance is invoked and the
// hook queue is empty.
func (f *UserExternalAccountsStoreTouchExpiredFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TouchExpired method of the parent MockUserExternalAccountsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserExternalAccountsStoreTouchExpiredFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserExternalAccountsStoreTouchExpiredFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserExternalAccountsStoreTouchExpiredFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *UserExternalAccountsStoreTouchExpiredFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreTouchExpiredFunc) appendCall(r0 UserExternalAccountsStoreTouchExpiredFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UserExternalAccountsStoreTouchExpiredFuncCall objects describing the
// invocations of this function.
func (f *UserExternalAccountsStoreTouchExpiredFunc) History() []UserExternalAccountsStoreTouchExpiredFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreTouchExpiredFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreTouchExpiredFuncCall is an object that describes
// an invocation of method TouchExpired on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreTouchExpiredFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreTouchExpiredFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreTouchExpiredFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserExternalAccountsStoreTouchLastValidFunc describes the behavior when
// the TouchLastValid method of the parent MockUserExternalAccountsStore
// instance is invoked.
type UserExternalAccountsStoreTouchLastValidFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []UserExternalAccountsStoreTouchLastValidFuncCall
	mutex       sync.Mutex
}

// TouchLastValid delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) TouchLastValid(v0 context.Context, v1 int32) error {
	r0 := m.TouchLastValidFunc.nextHook()(v0, v1)
	m.TouchLastValidFunc.appendCall(UserExternalAccountsStoreTouchLastValidFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the TouchLastValid
// method of the parent MockUserExternalAccountsStore instance is invoked
// and the hook queue is empty.
func (f *UserExternalAccountsStoreTouchLastValidFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TouchLastValid method of the parent MockUserExternalAccountsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *UserExternalAccountsStoreTouchLastValidFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserExternalAccountsStoreTouchLastValidFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserExternalAccountsStoreTouchLastValidFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *UserExternalAccountsStoreTouchLastValidFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreTouchLastValidFunc) appendCall(r0 UserExternalAccountsStoreTouchLastValidFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UserExternalAccountsStoreTouchLastValidFuncCall objects describing the
// invocations of this function.
func (f *UserExternalAccountsStoreTouchLastValidFunc) History() []UserExternalAccountsStoreTouchLastValidFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreTouchLastValidFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreTouchLastValidFuncCall is an object that
// describes an invocation of method TouchLastValid on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreTouchLastValidFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreTouchLastValidFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreTouchLastValidFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserExternalAccountsStoreTransactFunc describes the behavior when the
// Transact method of the parent MockUserExternalAccountsStore instance is
// invoked.
type UserExternalAccountsStoreTransactFunc struct {
	defaultHook func(context.Context) (database.UserExternalAccountsStore, error)
	hooks       []func(context.Context) (database.UserExternalAccountsStore, error)
	history     []UserExternalAccountsStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) Transact(v0 context.Context) (database.UserExternalAccountsStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(UserExternalAccountsStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockUserExternalAccountsStore instance is invoked and the hook
// queue is empty.
func (f *UserExternalAccountsStoreTransactFunc) SetDefaultHook(hook func(context.Context) (database.UserExternalAccountsStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockUserExternalAccountsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserExternalAccountsStoreTransactFunc) PushHook(hook func(context.Context) (database.UserExternalAccountsStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserExternalAccountsStoreTransactFunc) SetDefaultReturn(r0 database.UserExternalAccountsStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (database.UserExternalAccountsStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserExternalAccountsStoreTransactFunc) PushReturn(r0 database.UserExternalAccountsStore, r1 error) {
	f.PushHook(func(context.Context) (database.UserExternalAccountsStore, error) {
		return r0, r1
	})
}

func (f *UserExternalAccountsStoreTransactFunc) nextHook() func(context.Context) (database.UserExternalAccountsStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreTransactFunc) appendCall(r0 UserExternalAccountsStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserExternalAccountsStoreTransactFuncCall
// objects describing the invocations of this function.
func (f *UserExternalAccountsStoreTransactFunc) History() []UserExternalAccountsStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreTransactFuncCall is an object that describes an
// invocation of method Transact on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.UserExternalAccountsStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserExternalAccountsStoreWithFunc describes the behavior when the With
// method of the parent MockUserExternalAccountsStore instance is invoked.
type UserExternalAccountsStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) database.UserExternalAccountsStore
	hooks       []func(basestore.ShareableStore) database.UserExternalAccountsStore
	history     []UserExternalAccountsStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) With(v0 basestore.ShareableStore) database.UserExternalAccountsStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(UserExternalAccountsStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockUserExternalAccountsStore instance is invoked and the hook
// queue is empty.
func (f *UserExternalAccountsStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) database.UserExternalAccountsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockUserExternalAccountsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserExternalAccountsStoreWithFunc) PushHook(hook func(basestore.ShareableStore) database.UserExternalAccountsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserExternalAccountsStoreWithFunc) SetDefaultReturn(r0 database.UserExternalAccountsStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) database.UserExternalAccountsStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserExternalAccountsStoreWithFunc) PushReturn(r0 database.UserExternalAccountsStore) {
	f.PushHook(func(basestore.ShareableStore) database.UserExternalAccountsStore {
		return r0
	})
}

func (f *UserExternalAccountsStoreWithFunc) nextHook() func(basestore.ShareableStore) database.UserExternalAccountsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreWithFunc) appendCall(r0 UserExternalAccountsStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserExternalAccountsStoreWithFuncCall
// objects describing the invocations of this function.
func (f *UserExternalAccountsStoreWithFunc) History() []UserExternalAccountsStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreWithFuncCall is an object that describes an
// invocation of method With on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.UserExternalAccountsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserExternalAccountsStoreWithEncryptionKeyFunc describes the behavior
// when the WithEncryptionKey method of the parent
// MockUserExternalAccountsStore instance is invoked.
type UserExternalAccountsStoreWithEncryptionKeyFunc struct {
	defaultHook func(encryption.Key) database.UserExternalAccountsStore
	hooks       []func(encryption.Key) database.UserExternalAccountsStore
	history     []UserExternalAccountsStoreWithEncryptionKeyFuncCall
	mutex       sync.Mutex
}

// WithEncryptionKey delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) WithEncryptionKey(v0 encryption.Key) database.UserExternalAccountsStore {
	r0 := m.WithEncryptionKeyFunc.nextHook()(v0)
	m.WithEncryptionKeyFunc.appendCall(UserExternalAccountsStoreWithEncryptionKeyFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithEncryptionKey
// method of the parent MockUserExternalAccountsStore instance is invoked
// and the hook queue is empty.
func (f *UserExternalAccountsStoreWithEncryptionKeyFunc) SetDefaultHook(hook func(encryption.Key) database.UserExternalAccountsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithEncryptionKey method of the parent MockUserExternalAccountsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *UserExternalAccountsStoreWithEncryptionKeyFunc) PushHook(hook func(encryption.Key) database.UserExternalAccountsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *UserExternalAccountsStoreWithEncryptionKeyFunc) SetDefaultReturn(r0 database.UserExternalAccountsStore) {
	f.SetDefaultHook(func(encryption.Key) database.UserExternalAccountsStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *UserExternalAccountsStoreWithEncryptionKeyFunc) PushReturn(r0 database.UserExternalAccountsStore) {
	f.PushHook(func(encryption.Key) database.UserExternalAccountsStore {
		return r0
	})
}

func (f *UserExternalAccountsStoreWithEncryptionKeyFunc) nextHook() func(encryption.Key) database.UserExternalAccountsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreWithEncryptionKeyFunc) appendCall(r0 UserExternalAccountsStoreWithEncryptionKeyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UserExternalAccountsStoreWithEncryptionKeyFuncCall objects describing the
// invocations of this function.
func (f *UserExternalAccountsStoreWithEncryptionKeyFunc) History() []UserExternalAccountsStoreWithEncryptionKeyFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreWithEncryptionKeyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreWithEncryptionKeyFuncCall is an object that
// describes an invocation of method WithEncryptionKey on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreWithEncryptionKeyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 encryption.Key
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.UserExternalAccountsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreWithEncryptionKeyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreWithEncryptionKeyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
