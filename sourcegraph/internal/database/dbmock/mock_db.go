// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package dbmock

import (
	"context"
	"database/sql"
	"sync"

	database "github.com/sourcegraph/sourcegraph/internal/database"
	encryption "github.com/sourcegraph/sourcegraph/internal/encryption"
)

// MockDB is a mock implementation of the DB interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockDB struct {
	// AccessTokensFunc is an instance of a mock function object controlling
	// the behavior of the method AccessTokens.
	AccessTokensFunc *DBAccessTokensFunc
	// EventLogsFunc is an instance of a mock function object controlling
	// the behavior of the method EventLogs.
	EventLogsFunc *DBEventLogsFunc
	// ExecContextFunc is an instance of a mock function object controlling
	// the behavior of the method ExecContext.
	ExecContextFunc *DBExecContextFunc
	// NamespacesFunc is an instance of a mock function object controlling
	// the behavior of the method Namespaces.
	NamespacesFunc *DBNamespacesFunc
	// OrgInvitationsFunc is an instance of a mock function object
	// controlling the behavior of the method OrgInvitations.
	OrgInvitationsFunc *DBOrgInvitationsFunc
	// OrgMembersFunc is an instance of a mock function object controlling
	// the behavior of the method OrgMembers.
	OrgMembersFunc *DBOrgMembersFunc
	// OrgsFunc is an instance of a mock function object controlling the
	// behavior of the method Orgs.
	OrgsFunc *DBOrgsFunc
	// PhabricatorFunc is an instance of a mock function object controlling
	// the behavior of the method Phabricator.
	PhabricatorFunc *DBPhabricatorFunc
	// QueryContextFunc is an instance of a mock function object controlling
	// the behavior of the method QueryContext.
	QueryContextFunc *DBQueryContextFunc
	// QueryRowContextFunc is an instance of a mock function object
	// controlling the behavior of the method QueryRowContext.
	QueryRowContextFunc *DBQueryRowContextFunc
	// ReposFunc is an instance of a mock function object controlling the
	// behavior of the method Repos.
	ReposFunc *DBReposFunc
	// SavedSearchesFunc is an instance of a mock function object
	// controlling the behavior of the method SavedSearches.
	SavedSearchesFunc *DBSavedSearchesFunc
	// SearchContextsFunc is an instance of a mock function object
	// controlling the behavior of the method SearchContexts.
	SearchContextsFunc *DBSearchContextsFunc
	// SettingsFunc is an instance of a mock function object controlling the
	// behavior of the method Settings.
	SettingsFunc *DBSettingsFunc
	// TemporarySettingsFunc is an instance of a mock function object
	// controlling the behavior of the method TemporarySettings.
	TemporarySettingsFunc *DBTemporarySettingsFunc
	// UserCredentialsFunc is an instance of a mock function object
	// controlling the behavior of the method UserCredentials.
	UserCredentialsFunc *DBUserCredentialsFunc
	// UserEmailsFunc is an instance of a mock function object controlling
	// the behavior of the method UserEmails.
	UserEmailsFunc *DBUserEmailsFunc
	// UserExternalAccountsFunc is an instance of a mock function object
	// controlling the behavior of the method UserExternalAccounts.
	UserExternalAccountsFunc *DBUserExternalAccountsFunc
	// UserPublicReposFunc is an instance of a mock function object
	// controlling the behavior of the method UserPublicRepos.
	UserPublicReposFunc *DBUserPublicReposFunc
	// UsersFunc is an instance of a mock function object controlling the
	// behavior of the method Users.
	UsersFunc *DBUsersFunc
}

// NewMockDB creates a new mock of the DB interface. All methods return zero
// values for all results, unless overwritten.
func NewMockDB() *MockDB {
	return &MockDB{
		AccessTokensFunc: &DBAccessTokensFunc{
			defaultHook: func() database.AccessTokenStore {
				return nil
			},
		},
		EventLogsFunc: &DBEventLogsFunc{
			defaultHook: func() database.EventLogStore {
				return nil
			},
		},
		ExecContextFunc: &DBExecContextFunc{
			defaultHook: func(context.Context, string, ...interface{}) (sql.Result, error) {
				return nil, nil
			},
		},
		NamespacesFunc: &DBNamespacesFunc{
			defaultHook: func() database.NamespaceStore {
				return nil
			},
		},
		OrgInvitationsFunc: &DBOrgInvitationsFunc{
			defaultHook: func() database.OrgInvitationStore {
				return nil
			},
		},
		OrgMembersFunc: &DBOrgMembersFunc{
			defaultHook: func() database.OrgMemberStore {
				return nil
			},
		},
		OrgsFunc: &DBOrgsFunc{
			defaultHook: func() database.OrgStore {
				return nil
			},
		},
		PhabricatorFunc: &DBPhabricatorFunc{
			defaultHook: func() database.PhabricatorStore {
				return nil
			},
		},
		QueryContextFunc: &DBQueryContextFunc{
			defaultHook: func(context.Context, string, ...interface{}) (*sql.Rows, error) {
				return nil, nil
			},
		},
		QueryRowContextFunc: &DBQueryRowContextFunc{
			defaultHook: func(context.Context, string, ...interface{}) *sql.Row {
				return nil
			},
		},
		ReposFunc: &DBReposFunc{
			defaultHook: func() database.RepoStore {
				return nil
			},
		},
		SavedSearchesFunc: &DBSavedSearchesFunc{
			defaultHook: func() database.SavedSearchStore {
				return nil
			},
		},
		SearchContextsFunc: &DBSearchContextsFunc{
			defaultHook: func() database.SearchContextsStore {
				return nil
			},
		},
		SettingsFunc: &DBSettingsFunc{
			defaultHook: func() database.SettingsStore {
				return nil
			},
		},
		TemporarySettingsFunc: &DBTemporarySettingsFunc{
			defaultHook: func() database.TemporarySettingsStore {
				return nil
			},
		},
		UserCredentialsFunc: &DBUserCredentialsFunc{
			defaultHook: func(encryption.Key) database.UserCredentialsStore {
				return nil
			},
		},
		UserEmailsFunc: &DBUserEmailsFunc{
			defaultHook: func() database.UserEmailsStore {
				return nil
			},
		},
		UserExternalAccountsFunc: &DBUserExternalAccountsFunc{
			defaultHook: func() database.UserExternalAccountsStore {
				return nil
			},
		},
		UserPublicReposFunc: &DBUserPublicReposFunc{
			defaultHook: func() database.UserPublicRepoStore {
				return nil
			},
		},
		UsersFunc: &DBUsersFunc{
			defaultHook: func() database.UserStore {
				return nil
			},
		},
	}
}

// NewMockDBFrom creates a new mock of the MockDB interface. All methods
// delegate to the given implementation, unless overwritten.
func NewMockDBFrom(i database.DB) *MockDB {
	return &MockDB{
		AccessTokensFunc: &DBAccessTokensFunc{
			defaultHook: i.AccessTokens,
		},
		EventLogsFunc: &DBEventLogsFunc{
			defaultHook: i.EventLogs,
		},
		ExecContextFunc: &DBExecContextFunc{
			defaultHook: i.ExecContext,
		},
		NamespacesFunc: &DBNamespacesFunc{
			defaultHook: i.Namespaces,
		},
		OrgInvitationsFunc: &DBOrgInvitationsFunc{
			defaultHook: i.OrgInvitations,
		},
		OrgMembersFunc: &DBOrgMembersFunc{
			defaultHook: i.OrgMembers,
		},
		OrgsFunc: &DBOrgsFunc{
			defaultHook: i.Orgs,
		},
		PhabricatorFunc: &DBPhabricatorFunc{
			defaultHook: i.Phabricator,
		},
		QueryContextFunc: &DBQueryContextFunc{
			defaultHook: i.QueryContext,
		},
		QueryRowContextFunc: &DBQueryRowContextFunc{
			defaultHook: i.QueryRowContext,
		},
		ReposFunc: &DBReposFunc{
			defaultHook: i.Repos,
		},
		SavedSearchesFunc: &DBSavedSearchesFunc{
			defaultHook: i.SavedSearches,
		},
		SearchContextsFunc: &DBSearchContextsFunc{
			defaultHook: i.SearchContexts,
		},
		SettingsFunc: &DBSettingsFunc{
			defaultHook: i.Settings,
		},
		TemporarySettingsFunc: &DBTemporarySettingsFunc{
			defaultHook: i.TemporarySettings,
		},
		UserCredentialsFunc: &DBUserCredentialsFunc{
			defaultHook: i.UserCredentials,
		},
		UserEmailsFunc: &DBUserEmailsFunc{
			defaultHook: i.UserEmails,
		},
		UserExternalAccountsFunc: &DBUserExternalAccountsFunc{
			defaultHook: i.UserExternalAccounts,
		},
		UserPublicReposFunc: &DBUserPublicReposFunc{
			defaultHook: i.UserPublicRepos,
		},
		UsersFunc: &DBUsersFunc{
			defaultHook: i.Users,
		},
	}
}

// DBAccessTokensFunc describes the behavior when the AccessTokens method of
// the parent MockDB instance is invoked.
type DBAccessTokensFunc struct {
	defaultHook func() database.AccessTokenStore
	hooks       []func() database.AccessTokenStore
	history     []DBAccessTokensFuncCall
	mutex       sync.Mutex
}

// AccessTokens delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) AccessTokens() database.AccessTokenStore {
	r0 := m.AccessTokensFunc.nextHook()()
	m.AccessTokensFunc.appendCall(DBAccessTokensFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the AccessTokens method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBAccessTokensFunc) SetDefaultHook(hook func() database.AccessTokenStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AccessTokens method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBAccessTokensFunc) PushHook(hook func() database.AccessTokenStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBAccessTokensFunc) SetDefaultReturn(r0 database.AccessTokenStore) {
	f.SetDefaultHook(func() database.AccessTokenStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBAccessTokensFunc) PushReturn(r0 database.AccessTokenStore) {
	f.PushHook(func() database.AccessTokenStore {
		return r0
	})
}

func (f *DBAccessTokensFunc) nextHook() func() database.AccessTokenStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBAccessTokensFunc) appendCall(r0 DBAccessTokensFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBAccessTokensFuncCall objects describing
// the invocations of this function.
func (f *DBAccessTokensFunc) History() []DBAccessTokensFuncCall {
	f.mutex.Lock()
	history := make([]DBAccessTokensFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBAccessTokensFuncCall is an object that describes an invocation of
// method AccessTokens on an instance of MockDB.
type DBAccessTokensFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.AccessTokenStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBAccessTokensFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBAccessTokensFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBEventLogsFunc describes the behavior when the EventLogs method of the
// parent MockDB instance is invoked.
type DBEventLogsFunc struct {
	defaultHook func() database.EventLogStore
	hooks       []func() database.EventLogStore
	history     []DBEventLogsFuncCall
	mutex       sync.Mutex
}

// EventLogs delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) EventLogs() database.EventLogStore {
	r0 := m.EventLogsFunc.nextHook()()
	m.EventLogsFunc.appendCall(DBEventLogsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the EventLogs method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBEventLogsFunc) SetDefaultHook(hook func() database.EventLogStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EventLogs method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBEventLogsFunc) PushHook(hook func() database.EventLogStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBEventLogsFunc) SetDefaultReturn(r0 database.EventLogStore) {
	f.SetDefaultHook(func() database.EventLogStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBEventLogsFunc) PushReturn(r0 database.EventLogStore) {
	f.PushHook(func() database.EventLogStore {
		return r0
	})
}

func (f *DBEventLogsFunc) nextHook() func() database.EventLogStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBEventLogsFunc) appendCall(r0 DBEventLogsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBEventLogsFuncCall objects describing the
// invocations of this function.
func (f *DBEventLogsFunc) History() []DBEventLogsFuncCall {
	f.mutex.Lock()
	history := make([]DBEventLogsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBEventLogsFuncCall is an object that describes an invocation of method
// EventLogs on an instance of MockDB.
type DBEventLogsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.EventLogStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBEventLogsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBEventLogsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBExecContextFunc describes the behavior when the ExecContext method of
// the parent MockDB instance is invoked.
type DBExecContextFunc struct {
	defaultHook func(context.Context, string, ...interface{}) (sql.Result, error)
	hooks       []func(context.Context, string, ...interface{}) (sql.Result, error)
	history     []DBExecContextFuncCall
	mutex       sync.Mutex
}

// ExecContext delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) ExecContext(v0 context.Context, v1 string, v2 ...interface{}) (sql.Result, error) {
	r0, r1 := m.ExecContextFunc.nextHook()(v0, v1, v2...)
	m.ExecContextFunc.appendCall(DBExecContextFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ExecContext method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBExecContextFunc) SetDefaultHook(hook func(context.Context, string, ...interface{}) (sql.Result, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExecContext method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBExecContextFunc) PushHook(hook func(context.Context, string, ...interface{}) (sql.Result, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBExecContextFunc) SetDefaultReturn(r0 sql.Result, r1 error) {
	f.SetDefaultHook(func(context.Context, string, ...interface{}) (sql.Result, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBExecContextFunc) PushReturn(r0 sql.Result, r1 error) {
	f.PushHook(func(context.Context, string, ...interface{}) (sql.Result, error) {
		return r0, r1
	})
}

func (f *DBExecContextFunc) nextHook() func(context.Context, string, ...interface{}) (sql.Result, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBExecContextFunc) appendCall(r0 DBExecContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBExecContextFuncCall objects describing
// the invocations of this function.
func (f *DBExecContextFunc) History() []DBExecContextFuncCall {
	f.mutex.Lock()
	history := make([]DBExecContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBExecContextFuncCall is an object that describes an invocation of method
// ExecContext on an instance of MockDB.
type DBExecContextFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 sql.Result
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c DBExecContextFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBExecContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DBNamespacesFunc describes the behavior when the Namespaces method of the
// parent MockDB instance is invoked.
type DBNamespacesFunc struct {
	defaultHook func() database.NamespaceStore
	hooks       []func() database.NamespaceStore
	history     []DBNamespacesFuncCall
	mutex       sync.Mutex
}

// Namespaces delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) Namespaces() database.NamespaceStore {
	r0 := m.NamespacesFunc.nextHook()()
	m.NamespacesFunc.appendCall(DBNamespacesFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Namespaces method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBNamespacesFunc) SetDefaultHook(hook func() database.NamespaceStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Namespaces method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBNamespacesFunc) PushHook(hook func() database.NamespaceStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBNamespacesFunc) SetDefaultReturn(r0 database.NamespaceStore) {
	f.SetDefaultHook(func() database.NamespaceStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBNamespacesFunc) PushReturn(r0 database.NamespaceStore) {
	f.PushHook(func() database.NamespaceStore {
		return r0
	})
}

func (f *DBNamespacesFunc) nextHook() func() database.NamespaceStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBNamespacesFunc) appendCall(r0 DBNamespacesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBNamespacesFuncCall objects describing the
// invocations of this function.
func (f *DBNamespacesFunc) History() []DBNamespacesFuncCall {
	f.mutex.Lock()
	history := make([]DBNamespacesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBNamespacesFuncCall is an object that describes an invocation of method
// Namespaces on an instance of MockDB.
type DBNamespacesFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.NamespaceStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBNamespacesFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBNamespacesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBOrgInvitationsFunc describes the behavior when the OrgInvitations
// method of the parent MockDB instance is invoked.
type DBOrgInvitationsFunc struct {
	defaultHook func() database.OrgInvitationStore
	hooks       []func() database.OrgInvitationStore
	history     []DBOrgInvitationsFuncCall
	mutex       sync.Mutex
}

// OrgInvitations delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) OrgInvitations() database.OrgInvitationStore {
	r0 := m.OrgInvitationsFunc.nextHook()()
	m.OrgInvitationsFunc.appendCall(DBOrgInvitationsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the OrgInvitations
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBOrgInvitationsFunc) SetDefaultHook(hook func() database.OrgInvitationStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// OrgInvitations method of the parent MockDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBOrgInvitationsFunc) PushHook(hook func() database.OrgInvitationStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBOrgInvitationsFunc) SetDefaultReturn(r0 database.OrgInvitationStore) {
	f.SetDefaultHook(func() database.OrgInvitationStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBOrgInvitationsFunc) PushReturn(r0 database.OrgInvitationStore) {
	f.PushHook(func() database.OrgInvitationStore {
		return r0
	})
}

func (f *DBOrgInvitationsFunc) nextHook() func() database.OrgInvitationStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBOrgInvitationsFunc) appendCall(r0 DBOrgInvitationsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBOrgInvitationsFuncCall objects describing
// the invocations of this function.
func (f *DBOrgInvitationsFunc) History() []DBOrgInvitationsFuncCall {
	f.mutex.Lock()
	history := make([]DBOrgInvitationsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBOrgInvitationsFuncCall is an object that describes an invocation of
// method OrgInvitations on an instance of MockDB.
type DBOrgInvitationsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.OrgInvitationStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBOrgInvitationsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBOrgInvitationsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBOrgMembersFunc describes the behavior when the OrgMembers method of the
// parent MockDB instance is invoked.
type DBOrgMembersFunc struct {
	defaultHook func() database.OrgMemberStore
	hooks       []func() database.OrgMemberStore
	history     []DBOrgMembersFuncCall
	mutex       sync.Mutex
}

// OrgMembers delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) OrgMembers() database.OrgMemberStore {
	r0 := m.OrgMembersFunc.nextHook()()
	m.OrgMembersFunc.appendCall(DBOrgMembersFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the OrgMembers method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBOrgMembersFunc) SetDefaultHook(hook func() database.OrgMemberStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// OrgMembers method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBOrgMembersFunc) PushHook(hook func() database.OrgMemberStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBOrgMembersFunc) SetDefaultReturn(r0 database.OrgMemberStore) {
	f.SetDefaultHook(func() database.OrgMemberStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBOrgMembersFunc) PushReturn(r0 database.OrgMemberStore) {
	f.PushHook(func() database.OrgMemberStore {
		return r0
	})
}

func (f *DBOrgMembersFunc) nextHook() func() database.OrgMemberStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBOrgMembersFunc) appendCall(r0 DBOrgMembersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBOrgMembersFuncCall objects describing the
// invocations of this function.
func (f *DBOrgMembersFunc) History() []DBOrgMembersFuncCall {
	f.mutex.Lock()
	history := make([]DBOrgMembersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBOrgMembersFuncCall is an object that describes an invocation of method
// OrgMembers on an instance of MockDB.
type DBOrgMembersFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.OrgMemberStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBOrgMembersFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBOrgMembersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBOrgsFunc describes the behavior when the Orgs method of the parent
// MockDB instance is invoked.
type DBOrgsFunc struct {
	defaultHook func() database.OrgStore
	hooks       []func() database.OrgStore
	history     []DBOrgsFuncCall
	mutex       sync.Mutex
}

// Orgs delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) Orgs() database.OrgStore {
	r0 := m.OrgsFunc.nextHook()()
	m.OrgsFunc.appendCall(DBOrgsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Orgs method of the
// parent MockDB instance is invoked and the hook queue is empty.
func (f *DBOrgsFunc) SetDefaultHook(hook func() database.OrgStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Orgs method of the parent MockDB instance invokes the hook at the front
// of the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *DBOrgsFunc) PushHook(hook func() database.OrgStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBOrgsFunc) SetDefaultReturn(r0 database.OrgStore) {
	f.SetDefaultHook(func() database.OrgStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBOrgsFunc) PushReturn(r0 database.OrgStore) {
	f.PushHook(func() database.OrgStore {
		return r0
	})
}

func (f *DBOrgsFunc) nextHook() func() database.OrgStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBOrgsFunc) appendCall(r0 DBOrgsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBOrgsFuncCall objects describing the
// invocations of this function.
func (f *DBOrgsFunc) History() []DBOrgsFuncCall {
	f.mutex.Lock()
	history := make([]DBOrgsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBOrgsFuncCall is an object that describes an invocation of method Orgs
// on an instance of MockDB.
type DBOrgsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.OrgStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBOrgsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBOrgsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBPhabricatorFunc describes the behavior when the Phabricator method of
// the parent MockDB instance is invoked.
type DBPhabricatorFunc struct {
	defaultHook func() database.PhabricatorStore
	hooks       []func() database.PhabricatorStore
	history     []DBPhabricatorFuncCall
	mutex       sync.Mutex
}

// Phabricator delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) Phabricator() database.PhabricatorStore {
	r0 := m.PhabricatorFunc.nextHook()()
	m.PhabricatorFunc.appendCall(DBPhabricatorFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Phabricator method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBPhabricatorFunc) SetDefaultHook(hook func() database.PhabricatorStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Phabricator method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBPhabricatorFunc) PushHook(hook func() database.PhabricatorStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBPhabricatorFunc) SetDefaultReturn(r0 database.PhabricatorStore) {
	f.SetDefaultHook(func() database.PhabricatorStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBPhabricatorFunc) PushReturn(r0 database.PhabricatorStore) {
	f.PushHook(func() database.PhabricatorStore {
		return r0
	})
}

func (f *DBPhabricatorFunc) nextHook() func() database.PhabricatorStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBPhabricatorFunc) appendCall(r0 DBPhabricatorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBPhabricatorFuncCall objects describing
// the invocations of this function.
func (f *DBPhabricatorFunc) History() []DBPhabricatorFuncCall {
	f.mutex.Lock()
	history := make([]DBPhabricatorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBPhabricatorFuncCall is an object that describes an invocation of method
// Phabricator on an instance of MockDB.
type DBPhabricatorFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.PhabricatorStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBPhabricatorFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBPhabricatorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBQueryContextFunc describes the behavior when the QueryContext method of
// the parent MockDB instance is invoked.
type DBQueryContextFunc struct {
	defaultHook func(context.Context, string, ...interface{}) (*sql.Rows, error)
	hooks       []func(context.Context, string, ...interface{}) (*sql.Rows, error)
	history     []DBQueryContextFuncCall
	mutex       sync.Mutex
}

// QueryContext delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) QueryContext(v0 context.Context, v1 string, v2 ...interface{}) (*sql.Rows, error) {
	r0, r1 := m.QueryContextFunc.nextHook()(v0, v1, v2...)
	m.QueryContextFunc.appendCall(DBQueryContextFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the QueryContext method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBQueryContextFunc) SetDefaultHook(hook func(context.Context, string, ...interface{}) (*sql.Rows, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueryContext method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBQueryContextFunc) PushHook(hook func(context.Context, string, ...interface{}) (*sql.Rows, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBQueryContextFunc) SetDefaultReturn(r0 *sql.Rows, r1 error) {
	f.SetDefaultHook(func(context.Context, string, ...interface{}) (*sql.Rows, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBQueryContextFunc) PushReturn(r0 *sql.Rows, r1 error) {
	f.PushHook(func(context.Context, string, ...interface{}) (*sql.Rows, error) {
		return r0, r1
	})
}

func (f *DBQueryContextFunc) nextHook() func(context.Context, string, ...interface{}) (*sql.Rows, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBQueryContextFunc) appendCall(r0 DBQueryContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBQueryContextFuncCall objects describing
// the invocations of this function.
func (f *DBQueryContextFunc) History() []DBQueryContextFuncCall {
	f.mutex.Lock()
	history := make([]DBQueryContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBQueryContextFuncCall is an object that describes an invocation of
// method QueryContext on an instance of MockDB.
type DBQueryContextFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *sql.Rows
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c DBQueryContextFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBQueryContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DBQueryRowContextFunc describes the behavior when the QueryRowContext
// method of the parent MockDB instance is invoked.
type DBQueryRowContextFunc struct {
	defaultHook func(context.Context, string, ...interface{}) *sql.Row
	hooks       []func(context.Context, string, ...interface{}) *sql.Row
	history     []DBQueryRowContextFuncCall
	mutex       sync.Mutex
}

// QueryRowContext delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) QueryRowContext(v0 context.Context, v1 string, v2 ...interface{}) *sql.Row {
	r0 := m.QueryRowContextFunc.nextHook()(v0, v1, v2...)
	m.QueryRowContextFunc.appendCall(DBQueryRowContextFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the QueryRowContext
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBQueryRowContextFunc) SetDefaultHook(hook func(context.Context, string, ...interface{}) *sql.Row) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueryRowContext method of the parent MockDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBQueryRowContextFunc) PushHook(hook func(context.Context, string, ...interface{}) *sql.Row) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBQueryRowContextFunc) SetDefaultReturn(r0 *sql.Row) {
	f.SetDefaultHook(func(context.Context, string, ...interface{}) *sql.Row {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBQueryRowContextFunc) PushReturn(r0 *sql.Row) {
	f.PushHook(func(context.Context, string, ...interface{}) *sql.Row {
		return r0
	})
}

func (f *DBQueryRowContextFunc) nextHook() func(context.Context, string, ...interface{}) *sql.Row {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBQueryRowContextFunc) appendCall(r0 DBQueryRowContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBQueryRowContextFuncCall objects
// describing the invocations of this function.
func (f *DBQueryRowContextFunc) History() []DBQueryRowContextFuncCall {
	f.mutex.Lock()
	history := make([]DBQueryRowContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBQueryRowContextFuncCall is an object that describes an invocation of
// method QueryRowContext on an instance of MockDB.
type DBQueryRowContextFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *sql.Row
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c DBQueryRowContextFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBQueryRowContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBReposFunc describes the behavior when the Repos method of the parent
// MockDB instance is invoked.
type DBReposFunc struct {
	defaultHook func() database.RepoStore
	hooks       []func() database.RepoStore
	history     []DBReposFuncCall
	mutex       sync.Mutex
}

// Repos delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) Repos() database.RepoStore {
	r0 := m.ReposFunc.nextHook()()
	m.ReposFunc.appendCall(DBReposFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Repos method of the
// parent MockDB instance is invoked and the hook queue is empty.
func (f *DBReposFunc) SetDefaultHook(hook func() database.RepoStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Repos method of the parent MockDB instance invokes the hook at the front
// of the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *DBReposFunc) PushHook(hook func() database.RepoStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBReposFunc) SetDefaultReturn(r0 database.RepoStore) {
	f.SetDefaultHook(func() database.RepoStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBReposFunc) PushReturn(r0 database.RepoStore) {
	f.PushHook(func() database.RepoStore {
		return r0
	})
}

func (f *DBReposFunc) nextHook() func() database.RepoStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBReposFunc) appendCall(r0 DBReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBReposFuncCall objects describing the
// invocations of this function.
func (f *DBReposFunc) History() []DBReposFuncCall {
	f.mutex.Lock()
	history := make([]DBReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBReposFuncCall is an object that describes an invocation of method Repos
// on an instance of MockDB.
type DBReposFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.RepoStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBReposFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBSavedSearchesFunc describes the behavior when the SavedSearches method
// of the parent MockDB instance is invoked.
type DBSavedSearchesFunc struct {
	defaultHook func() database.SavedSearchStore
	hooks       []func() database.SavedSearchStore
	history     []DBSavedSearchesFuncCall
	mutex       sync.Mutex
}

// SavedSearches delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) SavedSearches() database.SavedSearchStore {
	r0 := m.SavedSearchesFunc.nextHook()()
	m.SavedSearchesFunc.appendCall(DBSavedSearchesFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the SavedSearches method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBSavedSearchesFunc) SetDefaultHook(hook func() database.SavedSearchStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SavedSearches method of the parent MockDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBSavedSearchesFunc) PushHook(hook func() database.SavedSearchStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBSavedSearchesFunc) SetDefaultReturn(r0 database.SavedSearchStore) {
	f.SetDefaultHook(func() database.SavedSearchStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBSavedSearchesFunc) PushReturn(r0 database.SavedSearchStore) {
	f.PushHook(func() database.SavedSearchStore {
		return r0
	})
}

func (f *DBSavedSearchesFunc) nextHook() func() database.SavedSearchStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBSavedSearchesFunc) appendCall(r0 DBSavedSearchesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBSavedSearchesFuncCall objects describing
// the invocations of this function.
func (f *DBSavedSearchesFunc) History() []DBSavedSearchesFuncCall {
	f.mutex.Lock()
	history := make([]DBSavedSearchesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBSavedSearchesFuncCall is an object that describes an invocation of
// method SavedSearches on an instance of MockDB.
type DBSavedSearchesFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.SavedSearchStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBSavedSearchesFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBSavedSearchesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBSearchContextsFunc describes the behavior when the SearchContexts
// method of the parent MockDB instance is invoked.
type DBSearchContextsFunc struct {
	defaultHook func() database.SearchContextsStore
	hooks       []func() database.SearchContextsStore
	history     []DBSearchContextsFuncCall
	mutex       sync.Mutex
}

// SearchContexts delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) SearchContexts() database.SearchContextsStore {
	r0 := m.SearchContextsFunc.nextHook()()
	m.SearchContextsFunc.appendCall(DBSearchContextsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the SearchContexts
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBSearchContextsFunc) SetDefaultHook(hook func() database.SearchContextsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SearchContexts method of the parent MockDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBSearchContextsFunc) PushHook(hook func() database.SearchContextsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBSearchContextsFunc) SetDefaultReturn(r0 database.SearchContextsStore) {
	f.SetDefaultHook(func() database.SearchContextsStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBSearchContextsFunc) PushReturn(r0 database.SearchContextsStore) {
	f.PushHook(func() database.SearchContextsStore {
		return r0
	})
}

func (f *DBSearchContextsFunc) nextHook() func() database.SearchContextsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBSearchContextsFunc) appendCall(r0 DBSearchContextsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBSearchContextsFuncCall objects describing
// the invocations of this function.
func (f *DBSearchContextsFunc) History() []DBSearchContextsFuncCall {
	f.mutex.Lock()
	history := make([]DBSearchContextsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBSearchContextsFuncCall is an object that describes an invocation of
// method SearchContexts on an instance of MockDB.
type DBSearchContextsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.SearchContextsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBSearchContextsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBSearchContextsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBSettingsFunc describes the behavior when the Settings method of the
// parent MockDB instance is invoked.
type DBSettingsFunc struct {
	defaultHook func() database.SettingsStore
	hooks       []func() database.SettingsStore
	history     []DBSettingsFuncCall
	mutex       sync.Mutex
}

// Settings delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) Settings() database.SettingsStore {
	r0 := m.SettingsFunc.nextHook()()
	m.SettingsFunc.appendCall(DBSettingsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Settings method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBSettingsFunc) SetDefaultHook(hook func() database.SettingsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Settings method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBSettingsFunc) PushHook(hook func() database.SettingsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBSettingsFunc) SetDefaultReturn(r0 database.SettingsStore) {
	f.SetDefaultHook(func() database.SettingsStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBSettingsFunc) PushReturn(r0 database.SettingsStore) {
	f.PushHook(func() database.SettingsStore {
		return r0
	})
}

func (f *DBSettingsFunc) nextHook() func() database.SettingsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBSettingsFunc) appendCall(r0 DBSettingsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBSettingsFuncCall objects describing the
// invocations of this function.
func (f *DBSettingsFunc) History() []DBSettingsFuncCall {
	f.mutex.Lock()
	history := make([]DBSettingsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBSettingsFuncCall is an object that describes an invocation of method
// Settings on an instance of MockDB.
type DBSettingsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.SettingsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBSettingsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBSettingsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBTemporarySettingsFunc describes the behavior when the TemporarySettings
// method of the parent MockDB instance is invoked.
type DBTemporarySettingsFunc struct {
	defaultHook func() database.TemporarySettingsStore
	hooks       []func() database.TemporarySettingsStore
	history     []DBTemporarySettingsFuncCall
	mutex       sync.Mutex
}

// TemporarySettings delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) TemporarySettings() database.TemporarySettingsStore {
	r0 := m.TemporarySettingsFunc.nextHook()()
	m.TemporarySettingsFunc.appendCall(DBTemporarySettingsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the TemporarySettings
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBTemporarySettingsFunc) SetDefaultHook(hook func() database.TemporarySettingsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TemporarySettings method of the parent MockDB instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBTemporarySettingsFunc) PushHook(hook func() database.TemporarySettingsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBTemporarySettingsFunc) SetDefaultReturn(r0 database.TemporarySettingsStore) {
	f.SetDefaultHook(func() database.TemporarySettingsStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBTemporarySettingsFunc) PushReturn(r0 database.TemporarySettingsStore) {
	f.PushHook(func() database.TemporarySettingsStore {
		return r0
	})
}

func (f *DBTemporarySettingsFunc) nextHook() func() database.TemporarySettingsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBTemporarySettingsFunc) appendCall(r0 DBTemporarySettingsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBTemporarySettingsFuncCall objects
// describing the invocations of this function.
func (f *DBTemporarySettingsFunc) History() []DBTemporarySettingsFuncCall {
	f.mutex.Lock()
	history := make([]DBTemporarySettingsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBTemporarySettingsFuncCall is an object that describes an invocation of
// method TemporarySettings on an instance of MockDB.
type DBTemporarySettingsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.TemporarySettingsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBTemporarySettingsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBTemporarySettingsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBUserCredentialsFunc describes the behavior when the UserCredentials
// method of the parent MockDB instance is invoked.
type DBUserCredentialsFunc struct {
	defaultHook func(encryption.Key) database.UserCredentialsStore
	hooks       []func(encryption.Key) database.UserCredentialsStore
	history     []DBUserCredentialsFuncCall
	mutex       sync.Mutex
}

// UserCredentials delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) UserCredentials(v0 encryption.Key) database.UserCredentialsStore {
	r0 := m.UserCredentialsFunc.nextHook()(v0)
	m.UserCredentialsFunc.appendCall(DBUserCredentialsFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UserCredentials
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBUserCredentialsFunc) SetDefaultHook(hook func(encryption.Key) database.UserCredentialsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UserCredentials method of the parent MockDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBUserCredentialsFunc) PushHook(hook func(encryption.Key) database.UserCredentialsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBUserCredentialsFunc) SetDefaultReturn(r0 database.UserCredentialsStore) {
	f.SetDefaultHook(func(encryption.Key) database.UserCredentialsStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBUserCredentialsFunc) PushReturn(r0 database.UserCredentialsStore) {
	f.PushHook(func(encryption.Key) database.UserCredentialsStore {
		return r0
	})
}

func (f *DBUserCredentialsFunc) nextHook() func(encryption.Key) database.UserCredentialsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBUserCredentialsFunc) appendCall(r0 DBUserCredentialsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBUserCredentialsFuncCall objects
// describing the invocations of this function.
func (f *DBUserCredentialsFunc) History() []DBUserCredentialsFuncCall {
	f.mutex.Lock()
	history := make([]DBUserCredentialsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBUserCredentialsFuncCall is an object that describes an invocation of
// method UserCredentials on an instance of MockDB.
type DBUserCredentialsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 encryption.Key
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.UserCredentialsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBUserCredentialsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBUserCredentialsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBUserEmailsFunc describes the behavior when the UserEmails method of the
// parent MockDB instance is invoked.
type DBUserEmailsFunc struct {
	defaultHook func() database.UserEmailsStore
	hooks       []func() database.UserEmailsStore
	history     []DBUserEmailsFuncCall
	mutex       sync.Mutex
}

// UserEmails delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) UserEmails() database.UserEmailsStore {
	r0 := m.UserEmailsFunc.nextHook()()
	m.UserEmailsFunc.appendCall(DBUserEmailsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the UserEmails method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBUserEmailsFunc) SetDefaultHook(hook func() database.UserEmailsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UserEmails method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBUserEmailsFunc) PushHook(hook func() database.UserEmailsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBUserEmailsFunc) SetDefaultReturn(r0 database.UserEmailsStore) {
	f.SetDefaultHook(func() database.UserEmailsStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBUserEmailsFunc) PushReturn(r0 database.UserEmailsStore) {
	f.PushHook(func() database.UserEmailsStore {
		return r0
	})
}

func (f *DBUserEmailsFunc) nextHook() func() database.UserEmailsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBUserEmailsFunc) appendCall(r0 DBUserEmailsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBUserEmailsFuncCall objects describing the
// invocations of this function.
func (f *DBUserEmailsFunc) History() []DBUserEmailsFuncCall {
	f.mutex.Lock()
	history := make([]DBUserEmailsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBUserEmailsFuncCall is an object that describes an invocation of method
// UserEmails on an instance of MockDB.
type DBUserEmailsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.UserEmailsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBUserEmailsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBUserEmailsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBUserExternalAccountsFunc describes the behavior when the
// UserExternalAccounts method of the parent MockDB instance is invoked.
type DBUserExternalAccountsFunc struct {
	defaultHook func() database.UserExternalAccountsStore
	hooks       []func() database.UserExternalAccountsStore
	history     []DBUserExternalAccountsFuncCall
	mutex       sync.Mutex
}

// UserExternalAccounts delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) UserExternalAccounts() database.UserExternalAccountsStore {
	r0 := m.UserExternalAccountsFunc.nextHook()()
	m.UserExternalAccountsFunc.appendCall(DBUserExternalAccountsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the UserExternalAccounts
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBUserExternalAccountsFunc) SetDefaultHook(hook func() database.UserExternalAccountsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UserExternalAccounts method of the parent MockDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *DBUserExternalAccountsFunc) PushHook(hook func() database.UserExternalAccountsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBUserExternalAccountsFunc) SetDefaultReturn(r0 database.UserExternalAccountsStore) {
	f.SetDefaultHook(func() database.UserExternalAccountsStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBUserExternalAccountsFunc) PushReturn(r0 database.UserExternalAccountsStore) {
	f.PushHook(func() database.UserExternalAccountsStore {
		return r0
	})
}

func (f *DBUserExternalAccountsFunc) nextHook() func() database.UserExternalAccountsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBUserExternalAccountsFunc) appendCall(r0 DBUserExternalAccountsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBUserExternalAccountsFuncCall objects
// describing the invocations of this function.
func (f *DBUserExternalAccountsFunc) History() []DBUserExternalAccountsFuncCall {
	f.mutex.Lock()
	history := make([]DBUserExternalAccountsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBUserExternalAccountsFuncCall is an object that describes an invocation
// of method UserExternalAccounts on an instance of MockDB.
type DBUserExternalAccountsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.UserExternalAccountsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBUserExternalAccountsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBUserExternalAccountsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBUserPublicReposFunc describes the behavior when the UserPublicRepos
// method of the parent MockDB instance is invoked.
type DBUserPublicReposFunc struct {
	defaultHook func() database.UserPublicRepoStore
	hooks       []func() database.UserPublicRepoStore
	history     []DBUserPublicReposFuncCall
	mutex       sync.Mutex
}

// UserPublicRepos delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) UserPublicRepos() database.UserPublicRepoStore {
	r0 := m.UserPublicReposFunc.nextHook()()
	m.UserPublicReposFunc.appendCall(DBUserPublicReposFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the UserPublicRepos
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBUserPublicReposFunc) SetDefaultHook(hook func() database.UserPublicRepoStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UserPublicRepos method of the parent MockDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBUserPublicReposFunc) PushHook(hook func() database.UserPublicRepoStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBUserPublicReposFunc) SetDefaultReturn(r0 database.UserPublicRepoStore) {
	f.SetDefaultHook(func() database.UserPublicRepoStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBUserPublicReposFunc) PushReturn(r0 database.UserPublicRepoStore) {
	f.PushHook(func() database.UserPublicRepoStore {
		return r0
	})
}

func (f *DBUserPublicReposFunc) nextHook() func() database.UserPublicRepoStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBUserPublicReposFunc) appendCall(r0 DBUserPublicReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBUserPublicReposFuncCall objects
// describing the invocations of this function.
func (f *DBUserPublicReposFunc) History() []DBUserPublicReposFuncCall {
	f.mutex.Lock()
	history := make([]DBUserPublicReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBUserPublicReposFuncCall is an object that describes an invocation of
// method UserPublicRepos on an instance of MockDB.
type DBUserPublicReposFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.UserPublicRepoStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBUserPublicReposFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBUserPublicReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBUsersFunc describes the behavior when the Users method of the parent
// MockDB instance is invoked.
type DBUsersFunc struct {
	defaultHook func() database.UserStore
	hooks       []func() database.UserStore
	history     []DBUsersFuncCall
	mutex       sync.Mutex
}

// Users delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) Users() database.UserStore {
	r0 := m.UsersFunc.nextHook()()
	m.UsersFunc.appendCall(DBUsersFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Users method of the
// parent MockDB instance is invoked and the hook queue is empty.
func (f *DBUsersFunc) SetDefaultHook(hook func() database.UserStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Users method of the parent MockDB instance invokes the hook at the front
// of the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *DBUsersFunc) PushHook(hook func() database.UserStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBUsersFunc) SetDefaultReturn(r0 database.UserStore) {
	f.SetDefaultHook(func() database.UserStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBUsersFunc) PushReturn(r0 database.UserStore) {
	f.PushHook(func() database.UserStore {
		return r0
	})
}

func (f *DBUsersFunc) nextHook() func() database.UserStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBUsersFunc) appendCall(r0 DBUsersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBUsersFuncCall objects describing the
// invocations of this function.
func (f *DBUsersFunc) History() []DBUsersFuncCall {
	f.mutex.Lock()
	history := make([]DBUsersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBUsersFuncCall is an object that describes an invocation of method Users
// on an instance of MockDB.
type DBUsersFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.UserStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBUsersFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBUsersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
