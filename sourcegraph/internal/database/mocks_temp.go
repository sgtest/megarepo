// Code generated by go-mockgen 1.3.3; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package database

import (
	"context"
	"database/sql"
	"sync"
	"time"

	sqlf "github.com/keegancsmith/sqlf"
	api "github.com/sourcegraph/sourcegraph/internal/api"
	authz "github.com/sourcegraph/sourcegraph/internal/authz"
	conf "github.com/sourcegraph/sourcegraph/internal/conf"
	basestore "github.com/sourcegraph/sourcegraph/internal/database/basestore"
	encryption "github.com/sourcegraph/sourcegraph/internal/encryption"
	extsvc "github.com/sourcegraph/sourcegraph/internal/extsvc"
	auth "github.com/sourcegraph/sourcegraph/internal/extsvc/auth"
	featureflag "github.com/sourcegraph/sourcegraph/internal/featureflag"
	temporarysettings "github.com/sourcegraph/sourcegraph/internal/temporarysettings"
	types "github.com/sourcegraph/sourcegraph/internal/types"
	schema "github.com/sourcegraph/sourcegraph/schema"
)

// MockAccessTokenStore is a mock implementation of the AccessTokenStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockAccessTokenStore struct {
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *AccessTokenStoreCountFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *AccessTokenStoreCreateFunc
	// CreateInternalFunc is an instance of a mock function object
	// controlling the behavior of the method CreateInternal.
	CreateInternalFunc *AccessTokenStoreCreateInternalFunc
	// DeleteByIDFunc is an instance of a mock function object controlling
	// the behavior of the method DeleteByID.
	DeleteByIDFunc *AccessTokenStoreDeleteByIDFunc
	// DeleteByTokenFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteByToken.
	DeleteByTokenFunc *AccessTokenStoreDeleteByTokenFunc
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *AccessTokenStoreGetByIDFunc
	// GetByTokenFunc is an instance of a mock function object controlling
	// the behavior of the method GetByToken.
	GetByTokenFunc *AccessTokenStoreGetByTokenFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *AccessTokenStoreHandleFunc
	// HardDeleteByIDFunc is an instance of a mock function object
	// controlling the behavior of the method HardDeleteByID.
	HardDeleteByIDFunc *AccessTokenStoreHardDeleteByIDFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *AccessTokenStoreListFunc
	// LookupFunc is an instance of a mock function object controlling the
	// behavior of the method Lookup.
	LookupFunc *AccessTokenStoreLookupFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *AccessTokenStoreTransactFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *AccessTokenStoreWithFunc
}

// NewMockAccessTokenStore creates a new mock of the AccessTokenStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockAccessTokenStore() *MockAccessTokenStore {
	return &MockAccessTokenStore{
		CountFunc: &AccessTokenStoreCountFunc{
			defaultHook: func(context.Context, AccessTokensListOptions) (r0 int, r1 error) {
				return
			},
		},
		CreateFunc: &AccessTokenStoreCreateFunc{
			defaultHook: func(context.Context, int32, []string, string, int32) (r0 int64, r1 string, r2 error) {
				return
			},
		},
		CreateInternalFunc: &AccessTokenStoreCreateInternalFunc{
			defaultHook: func(context.Context, int32, []string, string, int32) (r0 int64, r1 string, r2 error) {
				return
			},
		},
		DeleteByIDFunc: &AccessTokenStoreDeleteByIDFunc{
			defaultHook: func(context.Context, int64) (r0 error) {
				return
			},
		},
		DeleteByTokenFunc: &AccessTokenStoreDeleteByTokenFunc{
			defaultHook: func(context.Context, string) (r0 error) {
				return
			},
		},
		GetByIDFunc: &AccessTokenStoreGetByIDFunc{
			defaultHook: func(context.Context, int64) (r0 *AccessToken, r1 error) {
				return
			},
		},
		GetByTokenFunc: &AccessTokenStoreGetByTokenFunc{
			defaultHook: func(context.Context, string) (r0 *AccessToken, r1 error) {
				return
			},
		},
		HandleFunc: &AccessTokenStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		HardDeleteByIDFunc: &AccessTokenStoreHardDeleteByIDFunc{
			defaultHook: func(context.Context, int64) (r0 error) {
				return
			},
		},
		ListFunc: &AccessTokenStoreListFunc{
			defaultHook: func(context.Context, AccessTokensListOptions) (r0 []*AccessToken, r1 error) {
				return
			},
		},
		LookupFunc: &AccessTokenStoreLookupFunc{
			defaultHook: func(context.Context, string, string) (r0 int32, r1 error) {
				return
			},
		},
		TransactFunc: &AccessTokenStoreTransactFunc{
			defaultHook: func(context.Context) (r0 AccessTokenStore, r1 error) {
				return
			},
		},
		WithFunc: &AccessTokenStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 AccessTokenStore) {
				return
			},
		},
	}
}

// NewStrictMockAccessTokenStore creates a new mock of the AccessTokenStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockAccessTokenStore() *MockAccessTokenStore {
	return &MockAccessTokenStore{
		CountFunc: &AccessTokenStoreCountFunc{
			defaultHook: func(context.Context, AccessTokensListOptions) (int, error) {
				panic("unexpected invocation of MockAccessTokenStore.Count")
			},
		},
		CreateFunc: &AccessTokenStoreCreateFunc{
			defaultHook: func(context.Context, int32, []string, string, int32) (int64, string, error) {
				panic("unexpected invocation of MockAccessTokenStore.Create")
			},
		},
		CreateInternalFunc: &AccessTokenStoreCreateInternalFunc{
			defaultHook: func(context.Context, int32, []string, string, int32) (int64, string, error) {
				panic("unexpected invocation of MockAccessTokenStore.CreateInternal")
			},
		},
		DeleteByIDFunc: &AccessTokenStoreDeleteByIDFunc{
			defaultHook: func(context.Context, int64) error {
				panic("unexpected invocation of MockAccessTokenStore.DeleteByID")
			},
		},
		DeleteByTokenFunc: &AccessTokenStoreDeleteByTokenFunc{
			defaultHook: func(context.Context, string) error {
				panic("unexpected invocation of MockAccessTokenStore.DeleteByToken")
			},
		},
		GetByIDFunc: &AccessTokenStoreGetByIDFunc{
			defaultHook: func(context.Context, int64) (*AccessToken, error) {
				panic("unexpected invocation of MockAccessTokenStore.GetByID")
			},
		},
		GetByTokenFunc: &AccessTokenStoreGetByTokenFunc{
			defaultHook: func(context.Context, string) (*AccessToken, error) {
				panic("unexpected invocation of MockAccessTokenStore.GetByToken")
			},
		},
		HandleFunc: &AccessTokenStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockAccessTokenStore.Handle")
			},
		},
		HardDeleteByIDFunc: &AccessTokenStoreHardDeleteByIDFunc{
			defaultHook: func(context.Context, int64) error {
				panic("unexpected invocation of MockAccessTokenStore.HardDeleteByID")
			},
		},
		ListFunc: &AccessTokenStoreListFunc{
			defaultHook: func(context.Context, AccessTokensListOptions) ([]*AccessToken, error) {
				panic("unexpected invocation of MockAccessTokenStore.List")
			},
		},
		LookupFunc: &AccessTokenStoreLookupFunc{
			defaultHook: func(context.Context, string, string) (int32, error) {
				panic("unexpected invocation of MockAccessTokenStore.Lookup")
			},
		},
		TransactFunc: &AccessTokenStoreTransactFunc{
			defaultHook: func(context.Context) (AccessTokenStore, error) {
				panic("unexpected invocation of MockAccessTokenStore.Transact")
			},
		},
		WithFunc: &AccessTokenStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) AccessTokenStore {
				panic("unexpected invocation of MockAccessTokenStore.With")
			},
		},
	}
}

// NewMockAccessTokenStoreFrom creates a new mock of the
// MockAccessTokenStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockAccessTokenStoreFrom(i AccessTokenStore) *MockAccessTokenStore {
	return &MockAccessTokenStore{
		CountFunc: &AccessTokenStoreCountFunc{
			defaultHook: i.Count,
		},
		CreateFunc: &AccessTokenStoreCreateFunc{
			defaultHook: i.Create,
		},
		CreateInternalFunc: &AccessTokenStoreCreateInternalFunc{
			defaultHook: i.CreateInternal,
		},
		DeleteByIDFunc: &AccessTokenStoreDeleteByIDFunc{
			defaultHook: i.DeleteByID,
		},
		DeleteByTokenFunc: &AccessTokenStoreDeleteByTokenFunc{
			defaultHook: i.DeleteByToken,
		},
		GetByIDFunc: &AccessTokenStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		GetByTokenFunc: &AccessTokenStoreGetByTokenFunc{
			defaultHook: i.GetByToken,
		},
		HandleFunc: &AccessTokenStoreHandleFunc{
			defaultHook: i.Handle,
		},
		HardDeleteByIDFunc: &AccessTokenStoreHardDeleteByIDFunc{
			defaultHook: i.HardDeleteByID,
		},
		ListFunc: &AccessTokenStoreListFunc{
			defaultHook: i.List,
		},
		LookupFunc: &AccessTokenStoreLookupFunc{
			defaultHook: i.Lookup,
		},
		TransactFunc: &AccessTokenStoreTransactFunc{
			defaultHook: i.Transact,
		},
		WithFunc: &AccessTokenStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// AccessTokenStoreCountFunc describes the behavior when the Count method of
// the parent MockAccessTokenStore instance is invoked.
type AccessTokenStoreCountFunc struct {
	defaultHook func(context.Context, AccessTokensListOptions) (int, error)
	hooks       []func(context.Context, AccessTokensListOptions) (int, error)
	history     []AccessTokenStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccessTokenStore) Count(v0 context.Context, v1 AccessTokensListOptions) (int, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(AccessTokenStoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockAccessTokenStore instance is invoked and the hook queue is
// empty.
func (f *AccessTokenStoreCountFunc) SetDefaultHook(hook func(context.Context, AccessTokensListOptions) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockAccessTokenStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *AccessTokenStoreCountFunc) PushHook(hook func(context.Context, AccessTokensListOptions) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccessTokenStoreCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, AccessTokensListOptions) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccessTokenStoreCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, AccessTokensListOptions) (int, error) {
		return r0, r1
	})
}

func (f *AccessTokenStoreCountFunc) nextHook() func(context.Context, AccessTokensListOptions) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreCountFunc) appendCall(r0 AccessTokenStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreCountFuncCall objects
// describing the invocations of this function.
func (f *AccessTokenStoreCountFunc) History() []AccessTokenStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreCountFuncCall is an object that describes an invocation
// of method Count on an instance of MockAccessTokenStore.
type AccessTokenStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 AccessTokensListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AccessTokenStoreCreateFunc describes the behavior when the Create method
// of the parent MockAccessTokenStore instance is invoked.
type AccessTokenStoreCreateFunc struct {
	defaultHook func(context.Context, int32, []string, string, int32) (int64, string, error)
	hooks       []func(context.Context, int32, []string, string, int32) (int64, string, error)
	history     []AccessTokenStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccessTokenStore) Create(v0 context.Context, v1 int32, v2 []string, v3 string, v4 int32) (int64, string, error) {
	r0, r1, r2 := m.CreateFunc.nextHook()(v0, v1, v2, v3, v4)
	m.CreateFunc.appendCall(AccessTokenStoreCreateFuncCall{v0, v1, v2, v3, v4, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockAccessTokenStore instance is invoked and the hook queue is
// empty.
func (f *AccessTokenStoreCreateFunc) SetDefaultHook(hook func(context.Context, int32, []string, string, int32) (int64, string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockAccessTokenStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AccessTokenStoreCreateFunc) PushHook(hook func(context.Context, int32, []string, string, int32) (int64, string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccessTokenStoreCreateFunc) SetDefaultReturn(r0 int64, r1 string, r2 error) {
	f.SetDefaultHook(func(context.Context, int32, []string, string, int32) (int64, string, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccessTokenStoreCreateFunc) PushReturn(r0 int64, r1 string, r2 error) {
	f.PushHook(func(context.Context, int32, []string, string, int32) (int64, string, error) {
		return r0, r1, r2
	})
}

func (f *AccessTokenStoreCreateFunc) nextHook() func(context.Context, int32, []string, string, int32) (int64, string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreCreateFunc) appendCall(r0 AccessTokenStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreCreateFuncCall objects
// describing the invocations of this function.
func (f *AccessTokenStoreCreateFunc) History() []AccessTokenStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreCreateFuncCall is an object that describes an invocation
// of method Create on an instance of MockAccessTokenStore.
type AccessTokenStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 string
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// AccessTokenStoreCreateInternalFunc describes the behavior when the
// CreateInternal method of the parent MockAccessTokenStore instance is
// invoked.
type AccessTokenStoreCreateInternalFunc struct {
	defaultHook func(context.Context, int32, []string, string, int32) (int64, string, error)
	hooks       []func(context.Context, int32, []string, string, int32) (int64, string, error)
	history     []AccessTokenStoreCreateInternalFuncCall
	mutex       sync.Mutex
}

// CreateInternal delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockAccessTokenStore) CreateInternal(v0 context.Context, v1 int32, v2 []string, v3 string, v4 int32) (int64, string, error) {
	r0, r1, r2 := m.CreateInternalFunc.nextHook()(v0, v1, v2, v3, v4)
	m.CreateInternalFunc.appendCall(AccessTokenStoreCreateInternalFuncCall{v0, v1, v2, v3, v4, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the CreateInternal
// method of the parent MockAccessTokenStore instance is invoked and the
// hook queue is empty.
func (f *AccessTokenStoreCreateInternalFunc) SetDefaultHook(hook func(context.Context, int32, []string, string, int32) (int64, string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateInternal method of the parent MockAccessTokenStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *AccessTokenStoreCreateInternalFunc) PushHook(hook func(context.Context, int32, []string, string, int32) (int64, string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccessTokenStoreCreateInternalFunc) SetDefaultReturn(r0 int64, r1 string, r2 error) {
	f.SetDefaultHook(func(context.Context, int32, []string, string, int32) (int64, string, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccessTokenStoreCreateInternalFunc) PushReturn(r0 int64, r1 string, r2 error) {
	f.PushHook(func(context.Context, int32, []string, string, int32) (int64, string, error) {
		return r0, r1, r2
	})
}

func (f *AccessTokenStoreCreateInternalFunc) nextHook() func(context.Context, int32, []string, string, int32) (int64, string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreCreateInternalFunc) appendCall(r0 AccessTokenStoreCreateInternalFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreCreateInternalFuncCall
// objects describing the invocations of this function.
func (f *AccessTokenStoreCreateInternalFunc) History() []AccessTokenStoreCreateInternalFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreCreateInternalFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreCreateInternalFuncCall is an object that describes an
// invocation of method CreateInternal on an instance of
// MockAccessTokenStore.
type AccessTokenStoreCreateInternalFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 string
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreCreateInternalFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreCreateInternalFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// AccessTokenStoreDeleteByIDFunc describes the behavior when the DeleteByID
// method of the parent MockAccessTokenStore instance is invoked.
type AccessTokenStoreDeleteByIDFunc struct {
	defaultHook func(context.Context, int64) error
	hooks       []func(context.Context, int64) error
	history     []AccessTokenStoreDeleteByIDFuncCall
	mutex       sync.Mutex
}

// DeleteByID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAccessTokenStore) DeleteByID(v0 context.Context, v1 int64) error {
	r0 := m.DeleteByIDFunc.nextHook()(v0, v1)
	m.DeleteByIDFunc.appendCall(AccessTokenStoreDeleteByIDFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteByID method of
// the parent MockAccessTokenStore instance is invoked and the hook queue is
// empty.
func (f *AccessTokenStoreDeleteByIDFunc) SetDefaultHook(hook func(context.Context, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteByID method of the parent MockAccessTokenStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AccessTokenStoreDeleteByIDFunc) PushHook(hook func(context.Context, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccessTokenStoreDeleteByIDFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccessTokenStoreDeleteByIDFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64) error {
		return r0
	})
}

func (f *AccessTokenStoreDeleteByIDFunc) nextHook() func(context.Context, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreDeleteByIDFunc) appendCall(r0 AccessTokenStoreDeleteByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreDeleteByIDFuncCall objects
// describing the invocations of this function.
func (f *AccessTokenStoreDeleteByIDFunc) History() []AccessTokenStoreDeleteByIDFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreDeleteByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreDeleteByIDFuncCall is an object that describes an
// invocation of method DeleteByID on an instance of MockAccessTokenStore.
type AccessTokenStoreDeleteByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreDeleteByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreDeleteByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AccessTokenStoreDeleteByTokenFunc describes the behavior when the
// DeleteByToken method of the parent MockAccessTokenStore instance is
// invoked.
type AccessTokenStoreDeleteByTokenFunc struct {
	defaultHook func(context.Context, string) error
	hooks       []func(context.Context, string) error
	history     []AccessTokenStoreDeleteByTokenFuncCall
	mutex       sync.Mutex
}

// DeleteByToken delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAccessTokenStore) DeleteByToken(v0 context.Context, v1 string) error {
	r0 := m.DeleteByTokenFunc.nextHook()(v0, v1)
	m.DeleteByTokenFunc.appendCall(AccessTokenStoreDeleteByTokenFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteByToken method
// of the parent MockAccessTokenStore instance is invoked and the hook queue
// is empty.
func (f *AccessTokenStoreDeleteByTokenFunc) SetDefaultHook(hook func(context.Context, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteByToken method of the parent MockAccessTokenStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *AccessTokenStoreDeleteByTokenFunc) PushHook(hook func(context.Context, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccessTokenStoreDeleteByTokenFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccessTokenStoreDeleteByTokenFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string) error {
		return r0
	})
}

func (f *AccessTokenStoreDeleteByTokenFunc) nextHook() func(context.Context, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreDeleteByTokenFunc) appendCall(r0 AccessTokenStoreDeleteByTokenFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreDeleteByTokenFuncCall
// objects describing the invocations of this function.
func (f *AccessTokenStoreDeleteByTokenFunc) History() []AccessTokenStoreDeleteByTokenFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreDeleteByTokenFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreDeleteByTokenFuncCall is an object that describes an
// invocation of method DeleteByToken on an instance of
// MockAccessTokenStore.
type AccessTokenStoreDeleteByTokenFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreDeleteByTokenFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreDeleteByTokenFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AccessTokenStoreGetByIDFunc describes the behavior when the GetByID
// method of the parent MockAccessTokenStore instance is invoked.
type AccessTokenStoreGetByIDFunc struct {
	defaultHook func(context.Context, int64) (*AccessToken, error)
	hooks       []func(context.Context, int64) (*AccessToken, error)
	history     []AccessTokenStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccessTokenStore) GetByID(v0 context.Context, v1 int64) (*AccessToken, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(AccessTokenStoreGetByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockAccessTokenStore instance is invoked and the hook queue is
// empty.
func (f *AccessTokenStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int64) (*AccessToken, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockAccessTokenStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AccessTokenStoreGetByIDFunc) PushHook(hook func(context.Context, int64) (*AccessToken, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccessTokenStoreGetByIDFunc) SetDefaultReturn(r0 *AccessToken, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (*AccessToken, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccessTokenStoreGetByIDFunc) PushReturn(r0 *AccessToken, r1 error) {
	f.PushHook(func(context.Context, int64) (*AccessToken, error) {
		return r0, r1
	})
}

func (f *AccessTokenStoreGetByIDFunc) nextHook() func(context.Context, int64) (*AccessToken, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreGetByIDFunc) appendCall(r0 AccessTokenStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreGetByIDFuncCall objects
// describing the invocations of this function.
func (f *AccessTokenStoreGetByIDFunc) History() []AccessTokenStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreGetByIDFuncCall is an object that describes an invocation
// of method GetByID on an instance of MockAccessTokenStore.
type AccessTokenStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *AccessToken
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AccessTokenStoreGetByTokenFunc describes the behavior when the GetByToken
// method of the parent MockAccessTokenStore instance is invoked.
type AccessTokenStoreGetByTokenFunc struct {
	defaultHook func(context.Context, string) (*AccessToken, error)
	hooks       []func(context.Context, string) (*AccessToken, error)
	history     []AccessTokenStoreGetByTokenFuncCall
	mutex       sync.Mutex
}

// GetByToken delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAccessTokenStore) GetByToken(v0 context.Context, v1 string) (*AccessToken, error) {
	r0, r1 := m.GetByTokenFunc.nextHook()(v0, v1)
	m.GetByTokenFunc.appendCall(AccessTokenStoreGetByTokenFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByToken method of
// the parent MockAccessTokenStore instance is invoked and the hook queue is
// empty.
func (f *AccessTokenStoreGetByTokenFunc) SetDefaultHook(hook func(context.Context, string) (*AccessToken, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByToken method of the parent MockAccessTokenStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AccessTokenStoreGetByTokenFunc) PushHook(hook func(context.Context, string) (*AccessToken, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccessTokenStoreGetByTokenFunc) SetDefaultReturn(r0 *AccessToken, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*AccessToken, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccessTokenStoreGetByTokenFunc) PushReturn(r0 *AccessToken, r1 error) {
	f.PushHook(func(context.Context, string) (*AccessToken, error) {
		return r0, r1
	})
}

func (f *AccessTokenStoreGetByTokenFunc) nextHook() func(context.Context, string) (*AccessToken, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreGetByTokenFunc) appendCall(r0 AccessTokenStoreGetByTokenFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreGetByTokenFuncCall objects
// describing the invocations of this function.
func (f *AccessTokenStoreGetByTokenFunc) History() []AccessTokenStoreGetByTokenFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreGetByTokenFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreGetByTokenFuncCall is an object that describes an
// invocation of method GetByToken on an instance of MockAccessTokenStore.
type AccessTokenStoreGetByTokenFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *AccessToken
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreGetByTokenFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreGetByTokenFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AccessTokenStoreHandleFunc describes the behavior when the Handle method
// of the parent MockAccessTokenStore instance is invoked.
type AccessTokenStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []AccessTokenStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccessTokenStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(AccessTokenStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockAccessTokenStore instance is invoked and the hook queue is
// empty.
func (f *AccessTokenStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockAccessTokenStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AccessTokenStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccessTokenStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccessTokenStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *AccessTokenStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreHandleFunc) appendCall(r0 AccessTokenStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *AccessTokenStoreHandleFunc) History() []AccessTokenStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreHandleFuncCall is an object that describes an invocation
// of method Handle on an instance of MockAccessTokenStore.
type AccessTokenStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AccessTokenStoreHardDeleteByIDFunc describes the behavior when the
// HardDeleteByID method of the parent MockAccessTokenStore instance is
// invoked.
type AccessTokenStoreHardDeleteByIDFunc struct {
	defaultHook func(context.Context, int64) error
	hooks       []func(context.Context, int64) error
	history     []AccessTokenStoreHardDeleteByIDFuncCall
	mutex       sync.Mutex
}

// HardDeleteByID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockAccessTokenStore) HardDeleteByID(v0 context.Context, v1 int64) error {
	r0 := m.HardDeleteByIDFunc.nextHook()(v0, v1)
	m.HardDeleteByIDFunc.appendCall(AccessTokenStoreHardDeleteByIDFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the HardDeleteByID
// method of the parent MockAccessTokenStore instance is invoked and the
// hook queue is empty.
func (f *AccessTokenStoreHardDeleteByIDFunc) SetDefaultHook(hook func(context.Context, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// HardDeleteByID method of the parent MockAccessTokenStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *AccessTokenStoreHardDeleteByIDFunc) PushHook(hook func(context.Context, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccessTokenStoreHardDeleteByIDFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccessTokenStoreHardDeleteByIDFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64) error {
		return r0
	})
}

func (f *AccessTokenStoreHardDeleteByIDFunc) nextHook() func(context.Context, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreHardDeleteByIDFunc) appendCall(r0 AccessTokenStoreHardDeleteByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreHardDeleteByIDFuncCall
// objects describing the invocations of this function.
func (f *AccessTokenStoreHardDeleteByIDFunc) History() []AccessTokenStoreHardDeleteByIDFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreHardDeleteByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreHardDeleteByIDFuncCall is an object that describes an
// invocation of method HardDeleteByID on an instance of
// MockAccessTokenStore.
type AccessTokenStoreHardDeleteByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreHardDeleteByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreHardDeleteByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AccessTokenStoreListFunc describes the behavior when the List method of
// the parent MockAccessTokenStore instance is invoked.
type AccessTokenStoreListFunc struct {
	defaultHook func(context.Context, AccessTokensListOptions) ([]*AccessToken, error)
	hooks       []func(context.Context, AccessTokensListOptions) ([]*AccessToken, error)
	history     []AccessTokenStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccessTokenStore) List(v0 context.Context, v1 AccessTokensListOptions) ([]*AccessToken, error) {
	r0, r1 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(AccessTokenStoreListFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockAccessTokenStore instance is invoked and the hook queue is
// empty.
func (f *AccessTokenStoreListFunc) SetDefaultHook(hook func(context.Context, AccessTokensListOptions) ([]*AccessToken, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockAccessTokenStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *AccessTokenStoreListFunc) PushHook(hook func(context.Context, AccessTokensListOptions) ([]*AccessToken, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccessTokenStoreListFunc) SetDefaultReturn(r0 []*AccessToken, r1 error) {
	f.SetDefaultHook(func(context.Context, AccessTokensListOptions) ([]*AccessToken, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccessTokenStoreListFunc) PushReturn(r0 []*AccessToken, r1 error) {
	f.PushHook(func(context.Context, AccessTokensListOptions) ([]*AccessToken, error) {
		return r0, r1
	})
}

func (f *AccessTokenStoreListFunc) nextHook() func(context.Context, AccessTokensListOptions) ([]*AccessToken, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreListFunc) appendCall(r0 AccessTokenStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreListFuncCall objects
// describing the invocations of this function.
func (f *AccessTokenStoreListFunc) History() []AccessTokenStoreListFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreListFuncCall is an object that describes an invocation of
// method List on an instance of MockAccessTokenStore.
type AccessTokenStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 AccessTokensListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*AccessToken
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AccessTokenStoreLookupFunc describes the behavior when the Lookup method
// of the parent MockAccessTokenStore instance is invoked.
type AccessTokenStoreLookupFunc struct {
	defaultHook func(context.Context, string, string) (int32, error)
	hooks       []func(context.Context, string, string) (int32, error)
	history     []AccessTokenStoreLookupFuncCall
	mutex       sync.Mutex
}

// Lookup delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccessTokenStore) Lookup(v0 context.Context, v1 string, v2 string) (int32, error) {
	r0, r1 := m.LookupFunc.nextHook()(v0, v1, v2)
	m.LookupFunc.appendCall(AccessTokenStoreLookupFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Lookup method of the
// parent MockAccessTokenStore instance is invoked and the hook queue is
// empty.
func (f *AccessTokenStoreLookupFunc) SetDefaultHook(hook func(context.Context, string, string) (int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Lookup method of the parent MockAccessTokenStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AccessTokenStoreLookupFunc) PushHook(hook func(context.Context, string, string) (int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccessTokenStoreLookupFunc) SetDefaultReturn(r0 int32, r1 error) {
	f.SetDefaultHook(func(context.Context, string, string) (int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccessTokenStoreLookupFunc) PushReturn(r0 int32, r1 error) {
	f.PushHook(func(context.Context, string, string) (int32, error) {
		return r0, r1
	})
}

func (f *AccessTokenStoreLookupFunc) nextHook() func(context.Context, string, string) (int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreLookupFunc) appendCall(r0 AccessTokenStoreLookupFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreLookupFuncCall objects
// describing the invocations of this function.
func (f *AccessTokenStoreLookupFunc) History() []AccessTokenStoreLookupFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreLookupFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreLookupFuncCall is an object that describes an invocation
// of method Lookup on an instance of MockAccessTokenStore.
type AccessTokenStoreLookupFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreLookupFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreLookupFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AccessTokenStoreTransactFunc describes the behavior when the Transact
// method of the parent MockAccessTokenStore instance is invoked.
type AccessTokenStoreTransactFunc struct {
	defaultHook func(context.Context) (AccessTokenStore, error)
	hooks       []func(context.Context) (AccessTokenStore, error)
	history     []AccessTokenStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccessTokenStore) Transact(v0 context.Context) (AccessTokenStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(AccessTokenStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockAccessTokenStore instance is invoked and the hook queue is
// empty.
func (f *AccessTokenStoreTransactFunc) SetDefaultHook(hook func(context.Context) (AccessTokenStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockAccessTokenStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AccessTokenStoreTransactFunc) PushHook(hook func(context.Context) (AccessTokenStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccessTokenStoreTransactFunc) SetDefaultReturn(r0 AccessTokenStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (AccessTokenStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccessTokenStoreTransactFunc) PushReturn(r0 AccessTokenStore, r1 error) {
	f.PushHook(func(context.Context) (AccessTokenStore, error) {
		return r0, r1
	})
}

func (f *AccessTokenStoreTransactFunc) nextHook() func(context.Context) (AccessTokenStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreTransactFunc) appendCall(r0 AccessTokenStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *AccessTokenStoreTransactFunc) History() []AccessTokenStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreTransactFuncCall is an object that describes an
// invocation of method Transact on an instance of MockAccessTokenStore.
type AccessTokenStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 AccessTokenStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AccessTokenStoreWithFunc describes the behavior when the With method of
// the parent MockAccessTokenStore instance is invoked.
type AccessTokenStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) AccessTokenStore
	hooks       []func(basestore.ShareableStore) AccessTokenStore
	history     []AccessTokenStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccessTokenStore) With(v0 basestore.ShareableStore) AccessTokenStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(AccessTokenStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockAccessTokenStore instance is invoked and the hook queue is
// empty.
func (f *AccessTokenStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) AccessTokenStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockAccessTokenStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *AccessTokenStoreWithFunc) PushHook(hook func(basestore.ShareableStore) AccessTokenStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccessTokenStoreWithFunc) SetDefaultReturn(r0 AccessTokenStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) AccessTokenStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccessTokenStoreWithFunc) PushReturn(r0 AccessTokenStore) {
	f.PushHook(func(basestore.ShareableStore) AccessTokenStore {
		return r0
	})
}

func (f *AccessTokenStoreWithFunc) nextHook() func(basestore.ShareableStore) AccessTokenStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreWithFunc) appendCall(r0 AccessTokenStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreWithFuncCall objects
// describing the invocations of this function.
func (f *AccessTokenStoreWithFunc) History() []AccessTokenStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockAccessTokenStore.
type AccessTokenStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 AccessTokenStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockAuthzStore is a mock implementation of the AuthzStore interface (from
// the package github.com/sourcegraph/sourcegraph/internal/database) used
// for unit testing.
type MockAuthzStore struct {
	// AuthorizedReposFunc is an instance of a mock function object
	// controlling the behavior of the method AuthorizedRepos.
	AuthorizedReposFunc *AuthzStoreAuthorizedReposFunc
	// GrantPendingPermissionsFunc is an instance of a mock function object
	// controlling the behavior of the method GrantPendingPermissions.
	GrantPendingPermissionsFunc *AuthzStoreGrantPendingPermissionsFunc
	// RevokeUserPermissionsFunc is an instance of a mock function object
	// controlling the behavior of the method RevokeUserPermissions.
	RevokeUserPermissionsFunc *AuthzStoreRevokeUserPermissionsFunc
}

// NewMockAuthzStore creates a new mock of the AuthzStore interface. All
// methods return zero values for all results, unless overwritten.
func NewMockAuthzStore() *MockAuthzStore {
	return &MockAuthzStore{
		AuthorizedReposFunc: &AuthzStoreAuthorizedReposFunc{
			defaultHook: func(context.Context, *AuthorizedReposArgs) (r0 []*types.Repo, r1 error) {
				return
			},
		},
		GrantPendingPermissionsFunc: &AuthzStoreGrantPendingPermissionsFunc{
			defaultHook: func(context.Context, *GrantPendingPermissionsArgs) (r0 error) {
				return
			},
		},
		RevokeUserPermissionsFunc: &AuthzStoreRevokeUserPermissionsFunc{
			defaultHook: func(context.Context, *RevokeUserPermissionsArgs) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockAuthzStore creates a new mock of the AuthzStore interface.
// All methods panic on invocation, unless overwritten.
func NewStrictMockAuthzStore() *MockAuthzStore {
	return &MockAuthzStore{
		AuthorizedReposFunc: &AuthzStoreAuthorizedReposFunc{
			defaultHook: func(context.Context, *AuthorizedReposArgs) ([]*types.Repo, error) {
				panic("unexpected invocation of MockAuthzStore.AuthorizedRepos")
			},
		},
		GrantPendingPermissionsFunc: &AuthzStoreGrantPendingPermissionsFunc{
			defaultHook: func(context.Context, *GrantPendingPermissionsArgs) error {
				panic("unexpected invocation of MockAuthzStore.GrantPendingPermissions")
			},
		},
		RevokeUserPermissionsFunc: &AuthzStoreRevokeUserPermissionsFunc{
			defaultHook: func(context.Context, *RevokeUserPermissionsArgs) error {
				panic("unexpected invocation of MockAuthzStore.RevokeUserPermissions")
			},
		},
	}
}

// NewMockAuthzStoreFrom creates a new mock of the MockAuthzStore interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockAuthzStoreFrom(i AuthzStore) *MockAuthzStore {
	return &MockAuthzStore{
		AuthorizedReposFunc: &AuthzStoreAuthorizedReposFunc{
			defaultHook: i.AuthorizedRepos,
		},
		GrantPendingPermissionsFunc: &AuthzStoreGrantPendingPermissionsFunc{
			defaultHook: i.GrantPendingPermissions,
		},
		RevokeUserPermissionsFunc: &AuthzStoreRevokeUserPermissionsFunc{
			defaultHook: i.RevokeUserPermissions,
		},
	}
}

// AuthzStoreAuthorizedReposFunc describes the behavior when the
// AuthorizedRepos method of the parent MockAuthzStore instance is invoked.
type AuthzStoreAuthorizedReposFunc struct {
	defaultHook func(context.Context, *AuthorizedReposArgs) ([]*types.Repo, error)
	hooks       []func(context.Context, *AuthorizedReposArgs) ([]*types.Repo, error)
	history     []AuthzStoreAuthorizedReposFuncCall
	mutex       sync.Mutex
}

// AuthorizedRepos delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockAuthzStore) AuthorizedRepos(v0 context.Context, v1 *AuthorizedReposArgs) ([]*types.Repo, error) {
	r0, r1 := m.AuthorizedReposFunc.nextHook()(v0, v1)
	m.AuthorizedReposFunc.appendCall(AuthzStoreAuthorizedReposFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the AuthorizedRepos
// method of the parent MockAuthzStore instance is invoked and the hook
// queue is empty.
func (f *AuthzStoreAuthorizedReposFunc) SetDefaultHook(hook func(context.Context, *AuthorizedReposArgs) ([]*types.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AuthorizedRepos method of the parent MockAuthzStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AuthzStoreAuthorizedReposFunc) PushHook(hook func(context.Context, *AuthorizedReposArgs) ([]*types.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AuthzStoreAuthorizedReposFunc) SetDefaultReturn(r0 []*types.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, *AuthorizedReposArgs) ([]*types.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AuthzStoreAuthorizedReposFunc) PushReturn(r0 []*types.Repo, r1 error) {
	f.PushHook(func(context.Context, *AuthorizedReposArgs) ([]*types.Repo, error) {
		return r0, r1
	})
}

func (f *AuthzStoreAuthorizedReposFunc) nextHook() func(context.Context, *AuthorizedReposArgs) ([]*types.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AuthzStoreAuthorizedReposFunc) appendCall(r0 AuthzStoreAuthorizedReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AuthzStoreAuthorizedReposFuncCall objects
// describing the invocations of this function.
func (f *AuthzStoreAuthorizedReposFunc) History() []AuthzStoreAuthorizedReposFuncCall {
	f.mutex.Lock()
	history := make([]AuthzStoreAuthorizedReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AuthzStoreAuthorizedReposFuncCall is an object that describes an
// invocation of method AuthorizedRepos on an instance of MockAuthzStore.
type AuthzStoreAuthorizedReposFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *AuthorizedReposArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AuthzStoreAuthorizedReposFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AuthzStoreAuthorizedReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AuthzStoreGrantPendingPermissionsFunc describes the behavior when the
// GrantPendingPermissions method of the parent MockAuthzStore instance is
// invoked.
type AuthzStoreGrantPendingPermissionsFunc struct {
	defaultHook func(context.Context, *GrantPendingPermissionsArgs) error
	hooks       []func(context.Context, *GrantPendingPermissionsArgs) error
	history     []AuthzStoreGrantPendingPermissionsFuncCall
	mutex       sync.Mutex
}

// GrantPendingPermissions delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockAuthzStore) GrantPendingPermissions(v0 context.Context, v1 *GrantPendingPermissionsArgs) error {
	r0 := m.GrantPendingPermissionsFunc.nextHook()(v0, v1)
	m.GrantPendingPermissionsFunc.appendCall(AuthzStoreGrantPendingPermissionsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// GrantPendingPermissions method of the parent MockAuthzStore instance is
// invoked and the hook queue is empty.
func (f *AuthzStoreGrantPendingPermissionsFunc) SetDefaultHook(hook func(context.Context, *GrantPendingPermissionsArgs) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GrantPendingPermissions method of the parent MockAuthzStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *AuthzStoreGrantPendingPermissionsFunc) PushHook(hook func(context.Context, *GrantPendingPermissionsArgs) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AuthzStoreGrantPendingPermissionsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *GrantPendingPermissionsArgs) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AuthzStoreGrantPendingPermissionsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *GrantPendingPermissionsArgs) error {
		return r0
	})
}

func (f *AuthzStoreGrantPendingPermissionsFunc) nextHook() func(context.Context, *GrantPendingPermissionsArgs) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AuthzStoreGrantPendingPermissionsFunc) appendCall(r0 AuthzStoreGrantPendingPermissionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AuthzStoreGrantPendingPermissionsFuncCall
// objects describing the invocations of this function.
func (f *AuthzStoreGrantPendingPermissionsFunc) History() []AuthzStoreGrantPendingPermissionsFuncCall {
	f.mutex.Lock()
	history := make([]AuthzStoreGrantPendingPermissionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AuthzStoreGrantPendingPermissionsFuncCall is an object that describes an
// invocation of method GrantPendingPermissions on an instance of
// MockAuthzStore.
type AuthzStoreGrantPendingPermissionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *GrantPendingPermissionsArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AuthzStoreGrantPendingPermissionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AuthzStoreGrantPendingPermissionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AuthzStoreRevokeUserPermissionsFunc describes the behavior when the
// RevokeUserPermissions method of the parent MockAuthzStore instance is
// invoked.
type AuthzStoreRevokeUserPermissionsFunc struct {
	defaultHook func(context.Context, *RevokeUserPermissionsArgs) error
	hooks       []func(context.Context, *RevokeUserPermissionsArgs) error
	history     []AuthzStoreRevokeUserPermissionsFuncCall
	mutex       sync.Mutex
}

// RevokeUserPermissions delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockAuthzStore) RevokeUserPermissions(v0 context.Context, v1 *RevokeUserPermissionsArgs) error {
	r0 := m.RevokeUserPermissionsFunc.nextHook()(v0, v1)
	m.RevokeUserPermissionsFunc.appendCall(AuthzStoreRevokeUserPermissionsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// RevokeUserPermissions method of the parent MockAuthzStore instance is
// invoked and the hook queue is empty.
func (f *AuthzStoreRevokeUserPermissionsFunc) SetDefaultHook(hook func(context.Context, *RevokeUserPermissionsArgs) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RevokeUserPermissions method of the parent MockAuthzStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *AuthzStoreRevokeUserPermissionsFunc) PushHook(hook func(context.Context, *RevokeUserPermissionsArgs) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AuthzStoreRevokeUserPermissionsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *RevokeUserPermissionsArgs) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AuthzStoreRevokeUserPermissionsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *RevokeUserPermissionsArgs) error {
		return r0
	})
}

func (f *AuthzStoreRevokeUserPermissionsFunc) nextHook() func(context.Context, *RevokeUserPermissionsArgs) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AuthzStoreRevokeUserPermissionsFunc) appendCall(r0 AuthzStoreRevokeUserPermissionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AuthzStoreRevokeUserPermissionsFuncCall
// objects describing the invocations of this function.
func (f *AuthzStoreRevokeUserPermissionsFunc) History() []AuthzStoreRevokeUserPermissionsFuncCall {
	f.mutex.Lock()
	history := make([]AuthzStoreRevokeUserPermissionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AuthzStoreRevokeUserPermissionsFuncCall is an object that describes an
// invocation of method RevokeUserPermissions on an instance of
// MockAuthzStore.
type AuthzStoreRevokeUserPermissionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *RevokeUserPermissionsArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AuthzStoreRevokeUserPermissionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AuthzStoreRevokeUserPermissionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockBitbucketProjectPermissionsStore is a mock implementation of the
// BitbucketProjectPermissionsStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockBitbucketProjectPermissionsStore struct {
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *BitbucketProjectPermissionsStoreDoneFunc
	// EnqueueFunc is an instance of a mock function object controlling the
	// behavior of the method Enqueue.
	EnqueueFunc *BitbucketProjectPermissionsStoreEnqueueFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *BitbucketProjectPermissionsStoreHandleFunc
	// ListJobsFunc is an instance of a mock function object controlling the
	// behavior of the method ListJobs.
	ListJobsFunc *BitbucketProjectPermissionsStoreListJobsFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *BitbucketProjectPermissionsStoreTransactFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *BitbucketProjectPermissionsStoreWithFunc
}

// NewMockBitbucketProjectPermissionsStore creates a new mock of the
// BitbucketProjectPermissionsStore interface. All methods return zero
// values for all results, unless overwritten.
func NewMockBitbucketProjectPermissionsStore() *MockBitbucketProjectPermissionsStore {
	return &MockBitbucketProjectPermissionsStore{
		DoneFunc: &BitbucketProjectPermissionsStoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		EnqueueFunc: &BitbucketProjectPermissionsStoreEnqueueFunc{
			defaultHook: func(context.Context, string, int64, []types.UserPermission, bool) (r0 int, r1 error) {
				return
			},
		},
		HandleFunc: &BitbucketProjectPermissionsStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		ListJobsFunc: &BitbucketProjectPermissionsStoreListJobsFunc{
			defaultHook: func(context.Context, ListJobsOptions) (r0 []*types.BitbucketProjectPermissionJob, r1 error) {
				return
			},
		},
		TransactFunc: &BitbucketProjectPermissionsStoreTransactFunc{
			defaultHook: func(context.Context) (r0 BitbucketProjectPermissionsStore, r1 error) {
				return
			},
		},
		WithFunc: &BitbucketProjectPermissionsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 BitbucketProjectPermissionsStore) {
				return
			},
		},
	}
}

// NewStrictMockBitbucketProjectPermissionsStore creates a new mock of the
// BitbucketProjectPermissionsStore interface. All methods panic on
// invocation, unless overwritten.
func NewStrictMockBitbucketProjectPermissionsStore() *MockBitbucketProjectPermissionsStore {
	return &MockBitbucketProjectPermissionsStore{
		DoneFunc: &BitbucketProjectPermissionsStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockBitbucketProjectPermissionsStore.Done")
			},
		},
		EnqueueFunc: &BitbucketProjectPermissionsStoreEnqueueFunc{
			defaultHook: func(context.Context, string, int64, []types.UserPermission, bool) (int, error) {
				panic("unexpected invocation of MockBitbucketProjectPermissionsStore.Enqueue")
			},
		},
		HandleFunc: &BitbucketProjectPermissionsStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockBitbucketProjectPermissionsStore.Handle")
			},
		},
		ListJobsFunc: &BitbucketProjectPermissionsStoreListJobsFunc{
			defaultHook: func(context.Context, ListJobsOptions) ([]*types.BitbucketProjectPermissionJob, error) {
				panic("unexpected invocation of MockBitbucketProjectPermissionsStore.ListJobs")
			},
		},
		TransactFunc: &BitbucketProjectPermissionsStoreTransactFunc{
			defaultHook: func(context.Context) (BitbucketProjectPermissionsStore, error) {
				panic("unexpected invocation of MockBitbucketProjectPermissionsStore.Transact")
			},
		},
		WithFunc: &BitbucketProjectPermissionsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) BitbucketProjectPermissionsStore {
				panic("unexpected invocation of MockBitbucketProjectPermissionsStore.With")
			},
		},
	}
}

// NewMockBitbucketProjectPermissionsStoreFrom creates a new mock of the
// MockBitbucketProjectPermissionsStore interface. All methods delegate to
// the given implementation, unless overwritten.
func NewMockBitbucketProjectPermissionsStoreFrom(i BitbucketProjectPermissionsStore) *MockBitbucketProjectPermissionsStore {
	return &MockBitbucketProjectPermissionsStore{
		DoneFunc: &BitbucketProjectPermissionsStoreDoneFunc{
			defaultHook: i.Done,
		},
		EnqueueFunc: &BitbucketProjectPermissionsStoreEnqueueFunc{
			defaultHook: i.Enqueue,
		},
		HandleFunc: &BitbucketProjectPermissionsStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListJobsFunc: &BitbucketProjectPermissionsStoreListJobsFunc{
			defaultHook: i.ListJobs,
		},
		TransactFunc: &BitbucketProjectPermissionsStoreTransactFunc{
			defaultHook: i.Transact,
		},
		WithFunc: &BitbucketProjectPermissionsStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// BitbucketProjectPermissionsStoreDoneFunc describes the behavior when the
// Done method of the parent MockBitbucketProjectPermissionsStore instance
// is invoked.
type BitbucketProjectPermissionsStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []BitbucketProjectPermissionsStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBitbucketProjectPermissionsStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(BitbucketProjectPermissionsStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockBitbucketProjectPermissionsStore instance is invoked and the
// hook queue is empty.
func (f *BitbucketProjectPermissionsStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockBitbucketProjectPermissionsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BitbucketProjectPermissionsStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketProjectPermissionsStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketProjectPermissionsStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *BitbucketProjectPermissionsStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketProjectPermissionsStoreDoneFunc) appendCall(r0 BitbucketProjectPermissionsStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BitbucketProjectPermissionsStoreDoneFuncCall objects describing the
// invocations of this function.
func (f *BitbucketProjectPermissionsStoreDoneFunc) History() []BitbucketProjectPermissionsStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketProjectPermissionsStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketProjectPermissionsStoreDoneFuncCall is an object that describes
// an invocation of method Done on an instance of
// MockBitbucketProjectPermissionsStore.
type BitbucketProjectPermissionsStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketProjectPermissionsStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketProjectPermissionsStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BitbucketProjectPermissionsStoreEnqueueFunc describes the behavior when
// the Enqueue method of the parent MockBitbucketProjectPermissionsStore
// instance is invoked.
type BitbucketProjectPermissionsStoreEnqueueFunc struct {
	defaultHook func(context.Context, string, int64, []types.UserPermission, bool) (int, error)
	hooks       []func(context.Context, string, int64, []types.UserPermission, bool) (int, error)
	history     []BitbucketProjectPermissionsStoreEnqueueFuncCall
	mutex       sync.Mutex
}

// Enqueue delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBitbucketProjectPermissionsStore) Enqueue(v0 context.Context, v1 string, v2 int64, v3 []types.UserPermission, v4 bool) (int, error) {
	r0, r1 := m.EnqueueFunc.nextHook()(v0, v1, v2, v3, v4)
	m.EnqueueFunc.appendCall(BitbucketProjectPermissionsStoreEnqueueFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Enqueue method of
// the parent MockBitbucketProjectPermissionsStore instance is invoked and
// the hook queue is empty.
func (f *BitbucketProjectPermissionsStoreEnqueueFunc) SetDefaultHook(hook func(context.Context, string, int64, []types.UserPermission, bool) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Enqueue method of the parent MockBitbucketProjectPermissionsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *BitbucketProjectPermissionsStoreEnqueueFunc) PushHook(hook func(context.Context, string, int64, []types.UserPermission, bool) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketProjectPermissionsStoreEnqueueFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, string, int64, []types.UserPermission, bool) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketProjectPermissionsStoreEnqueueFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, string, int64, []types.UserPermission, bool) (int, error) {
		return r0, r1
	})
}

func (f *BitbucketProjectPermissionsStoreEnqueueFunc) nextHook() func(context.Context, string, int64, []types.UserPermission, bool) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketProjectPermissionsStoreEnqueueFunc) appendCall(r0 BitbucketProjectPermissionsStoreEnqueueFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BitbucketProjectPermissionsStoreEnqueueFuncCall objects describing the
// invocations of this function.
func (f *BitbucketProjectPermissionsStoreEnqueueFunc) History() []BitbucketProjectPermissionsStoreEnqueueFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketProjectPermissionsStoreEnqueueFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketProjectPermissionsStoreEnqueueFuncCall is an object that
// describes an invocation of method Enqueue on an instance of
// MockBitbucketProjectPermissionsStore.
type BitbucketProjectPermissionsStoreEnqueueFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int64
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []types.UserPermission
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketProjectPermissionsStoreEnqueueFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketProjectPermissionsStoreEnqueueFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BitbucketProjectPermissionsStoreHandleFunc describes the behavior when
// the Handle method of the parent MockBitbucketProjectPermissionsStore
// instance is invoked.
type BitbucketProjectPermissionsStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []BitbucketProjectPermissionsStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBitbucketProjectPermissionsStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(BitbucketProjectPermissionsStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockBitbucketProjectPermissionsStore instance is invoked and the
// hook queue is empty.
func (f *BitbucketProjectPermissionsStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockBitbucketProjectPermissionsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BitbucketProjectPermissionsStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketProjectPermissionsStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketProjectPermissionsStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *BitbucketProjectPermissionsStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketProjectPermissionsStoreHandleFunc) appendCall(r0 BitbucketProjectPermissionsStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BitbucketProjectPermissionsStoreHandleFuncCall objects describing the
// invocations of this function.
func (f *BitbucketProjectPermissionsStoreHandleFunc) History() []BitbucketProjectPermissionsStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketProjectPermissionsStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketProjectPermissionsStoreHandleFuncCall is an object that
// describes an invocation of method Handle on an instance of
// MockBitbucketProjectPermissionsStore.
type BitbucketProjectPermissionsStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketProjectPermissionsStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketProjectPermissionsStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BitbucketProjectPermissionsStoreListJobsFunc describes the behavior when
// the ListJobs method of the parent MockBitbucketProjectPermissionsStore
// instance is invoked.
type BitbucketProjectPermissionsStoreListJobsFunc struct {
	defaultHook func(context.Context, ListJobsOptions) ([]*types.BitbucketProjectPermissionJob, error)
	hooks       []func(context.Context, ListJobsOptions) ([]*types.BitbucketProjectPermissionJob, error)
	history     []BitbucketProjectPermissionsStoreListJobsFuncCall
	mutex       sync.Mutex
}

// ListJobs delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBitbucketProjectPermissionsStore) ListJobs(v0 context.Context, v1 ListJobsOptions) ([]*types.BitbucketProjectPermissionJob, error) {
	r0, r1 := m.ListJobsFunc.nextHook()(v0, v1)
	m.ListJobsFunc.appendCall(BitbucketProjectPermissionsStoreListJobsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListJobs method of
// the parent MockBitbucketProjectPermissionsStore instance is invoked and
// the hook queue is empty.
func (f *BitbucketProjectPermissionsStoreListJobsFunc) SetDefaultHook(hook func(context.Context, ListJobsOptions) ([]*types.BitbucketProjectPermissionJob, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListJobs method of the parent MockBitbucketProjectPermissionsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *BitbucketProjectPermissionsStoreListJobsFunc) PushHook(hook func(context.Context, ListJobsOptions) ([]*types.BitbucketProjectPermissionJob, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketProjectPermissionsStoreListJobsFunc) SetDefaultReturn(r0 []*types.BitbucketProjectPermissionJob, r1 error) {
	f.SetDefaultHook(func(context.Context, ListJobsOptions) ([]*types.BitbucketProjectPermissionJob, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketProjectPermissionsStoreListJobsFunc) PushReturn(r0 []*types.BitbucketProjectPermissionJob, r1 error) {
	f.PushHook(func(context.Context, ListJobsOptions) ([]*types.BitbucketProjectPermissionJob, error) {
		return r0, r1
	})
}

func (f *BitbucketProjectPermissionsStoreListJobsFunc) nextHook() func(context.Context, ListJobsOptions) ([]*types.BitbucketProjectPermissionJob, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketProjectPermissionsStoreListJobsFunc) appendCall(r0 BitbucketProjectPermissionsStoreListJobsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BitbucketProjectPermissionsStoreListJobsFuncCall objects describing the
// invocations of this function.
func (f *BitbucketProjectPermissionsStoreListJobsFunc) History() []BitbucketProjectPermissionsStoreListJobsFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketProjectPermissionsStoreListJobsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketProjectPermissionsStoreListJobsFuncCall is an object that
// describes an invocation of method ListJobs on an instance of
// MockBitbucketProjectPermissionsStore.
type BitbucketProjectPermissionsStoreListJobsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ListJobsOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.BitbucketProjectPermissionJob
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketProjectPermissionsStoreListJobsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketProjectPermissionsStoreListJobsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BitbucketProjectPermissionsStoreTransactFunc describes the behavior when
// the Transact method of the parent MockBitbucketProjectPermissionsStore
// instance is invoked.
type BitbucketProjectPermissionsStoreTransactFunc struct {
	defaultHook func(context.Context) (BitbucketProjectPermissionsStore, error)
	hooks       []func(context.Context) (BitbucketProjectPermissionsStore, error)
	history     []BitbucketProjectPermissionsStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBitbucketProjectPermissionsStore) Transact(v0 context.Context) (BitbucketProjectPermissionsStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(BitbucketProjectPermissionsStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockBitbucketProjectPermissionsStore instance is invoked and
// the hook queue is empty.
func (f *BitbucketProjectPermissionsStoreTransactFunc) SetDefaultHook(hook func(context.Context) (BitbucketProjectPermissionsStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockBitbucketProjectPermissionsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *BitbucketProjectPermissionsStoreTransactFunc) PushHook(hook func(context.Context) (BitbucketProjectPermissionsStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketProjectPermissionsStoreTransactFunc) SetDefaultReturn(r0 BitbucketProjectPermissionsStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (BitbucketProjectPermissionsStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketProjectPermissionsStoreTransactFunc) PushReturn(r0 BitbucketProjectPermissionsStore, r1 error) {
	f.PushHook(func(context.Context) (BitbucketProjectPermissionsStore, error) {
		return r0, r1
	})
}

func (f *BitbucketProjectPermissionsStoreTransactFunc) nextHook() func(context.Context) (BitbucketProjectPermissionsStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketProjectPermissionsStoreTransactFunc) appendCall(r0 BitbucketProjectPermissionsStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BitbucketProjectPermissionsStoreTransactFuncCall objects describing the
// invocations of this function.
func (f *BitbucketProjectPermissionsStoreTransactFunc) History() []BitbucketProjectPermissionsStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketProjectPermissionsStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketProjectPermissionsStoreTransactFuncCall is an object that
// describes an invocation of method Transact on an instance of
// MockBitbucketProjectPermissionsStore.
type BitbucketProjectPermissionsStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 BitbucketProjectPermissionsStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketProjectPermissionsStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketProjectPermissionsStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BitbucketProjectPermissionsStoreWithFunc describes the behavior when the
// With method of the parent MockBitbucketProjectPermissionsStore instance
// is invoked.
type BitbucketProjectPermissionsStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) BitbucketProjectPermissionsStore
	hooks       []func(basestore.ShareableStore) BitbucketProjectPermissionsStore
	history     []BitbucketProjectPermissionsStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBitbucketProjectPermissionsStore) With(v0 basestore.ShareableStore) BitbucketProjectPermissionsStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(BitbucketProjectPermissionsStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockBitbucketProjectPermissionsStore instance is invoked and the
// hook queue is empty.
func (f *BitbucketProjectPermissionsStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) BitbucketProjectPermissionsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockBitbucketProjectPermissionsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BitbucketProjectPermissionsStoreWithFunc) PushHook(hook func(basestore.ShareableStore) BitbucketProjectPermissionsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketProjectPermissionsStoreWithFunc) SetDefaultReturn(r0 BitbucketProjectPermissionsStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) BitbucketProjectPermissionsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketProjectPermissionsStoreWithFunc) PushReturn(r0 BitbucketProjectPermissionsStore) {
	f.PushHook(func(basestore.ShareableStore) BitbucketProjectPermissionsStore {
		return r0
	})
}

func (f *BitbucketProjectPermissionsStoreWithFunc) nextHook() func(basestore.ShareableStore) BitbucketProjectPermissionsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketProjectPermissionsStoreWithFunc) appendCall(r0 BitbucketProjectPermissionsStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BitbucketProjectPermissionsStoreWithFuncCall objects describing the
// invocations of this function.
func (f *BitbucketProjectPermissionsStoreWithFunc) History() []BitbucketProjectPermissionsStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketProjectPermissionsStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketProjectPermissionsStoreWithFuncCall is an object that describes
// an invocation of method With on an instance of
// MockBitbucketProjectPermissionsStore.
type BitbucketProjectPermissionsStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 BitbucketProjectPermissionsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketProjectPermissionsStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketProjectPermissionsStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockConfStore is a mock implementation of the ConfStore interface (from
// the package github.com/sourcegraph/sourcegraph/internal/database) used
// for unit testing.
type MockConfStore struct {
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *ConfStoreDoneFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *ConfStoreHandleFunc
	// SiteCreateIfUpToDateFunc is an instance of a mock function object
	// controlling the behavior of the method SiteCreateIfUpToDate.
	SiteCreateIfUpToDateFunc *ConfStoreSiteCreateIfUpToDateFunc
	// SiteGetLatestFunc is an instance of a mock function object
	// controlling the behavior of the method SiteGetLatest.
	SiteGetLatestFunc *ConfStoreSiteGetLatestFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *ConfStoreTransactFunc
}

// NewMockConfStore creates a new mock of the ConfStore interface. All
// methods return zero values for all results, unless overwritten.
func NewMockConfStore() *MockConfStore {
	return &MockConfStore{
		DoneFunc: &ConfStoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		HandleFunc: &ConfStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		SiteCreateIfUpToDateFunc: &ConfStoreSiteCreateIfUpToDateFunc{
			defaultHook: func(context.Context, *int32, string) (r0 *SiteConfig, r1 error) {
				return
			},
		},
		SiteGetLatestFunc: &ConfStoreSiteGetLatestFunc{
			defaultHook: func(context.Context) (r0 *SiteConfig, r1 error) {
				return
			},
		},
		TransactFunc: &ConfStoreTransactFunc{
			defaultHook: func(context.Context) (r0 ConfStore, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockConfStore creates a new mock of the ConfStore interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockConfStore() *MockConfStore {
	return &MockConfStore{
		DoneFunc: &ConfStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockConfStore.Done")
			},
		},
		HandleFunc: &ConfStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockConfStore.Handle")
			},
		},
		SiteCreateIfUpToDateFunc: &ConfStoreSiteCreateIfUpToDateFunc{
			defaultHook: func(context.Context, *int32, string) (*SiteConfig, error) {
				panic("unexpected invocation of MockConfStore.SiteCreateIfUpToDate")
			},
		},
		SiteGetLatestFunc: &ConfStoreSiteGetLatestFunc{
			defaultHook: func(context.Context) (*SiteConfig, error) {
				panic("unexpected invocation of MockConfStore.SiteGetLatest")
			},
		},
		TransactFunc: &ConfStoreTransactFunc{
			defaultHook: func(context.Context) (ConfStore, error) {
				panic("unexpected invocation of MockConfStore.Transact")
			},
		},
	}
}

// NewMockConfStoreFrom creates a new mock of the MockConfStore interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockConfStoreFrom(i ConfStore) *MockConfStore {
	return &MockConfStore{
		DoneFunc: &ConfStoreDoneFunc{
			defaultHook: i.Done,
		},
		HandleFunc: &ConfStoreHandleFunc{
			defaultHook: i.Handle,
		},
		SiteCreateIfUpToDateFunc: &ConfStoreSiteCreateIfUpToDateFunc{
			defaultHook: i.SiteCreateIfUpToDate,
		},
		SiteGetLatestFunc: &ConfStoreSiteGetLatestFunc{
			defaultHook: i.SiteGetLatest,
		},
		TransactFunc: &ConfStoreTransactFunc{
			defaultHook: i.Transact,
		},
	}
}

// ConfStoreDoneFunc describes the behavior when the Done method of the
// parent MockConfStore instance is invoked.
type ConfStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []ConfStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockConfStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(ConfStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockConfStore instance is invoked and the hook queue is empty.
func (f *ConfStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockConfStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ConfStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ConfStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ConfStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *ConfStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ConfStoreDoneFunc) appendCall(r0 ConfStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ConfStoreDoneFuncCall objects describing
// the invocations of this function.
func (f *ConfStoreDoneFunc) History() []ConfStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]ConfStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ConfStoreDoneFuncCall is an object that describes an invocation of method
// Done on an instance of MockConfStore.
type ConfStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ConfStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ConfStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ConfStoreHandleFunc describes the behavior when the Handle method of the
// parent MockConfStore instance is invoked.
type ConfStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []ConfStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockConfStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(ConfStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockConfStore instance is invoked and the hook queue is empty.
func (f *ConfStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockConfStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ConfStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ConfStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ConfStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *ConfStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ConfStoreHandleFunc) appendCall(r0 ConfStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ConfStoreHandleFuncCall objects describing
// the invocations of this function.
func (f *ConfStoreHandleFunc) History() []ConfStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]ConfStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ConfStoreHandleFuncCall is an object that describes an invocation of
// method Handle on an instance of MockConfStore.
type ConfStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ConfStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ConfStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ConfStoreSiteCreateIfUpToDateFunc describes the behavior when the
// SiteCreateIfUpToDate method of the parent MockConfStore instance is
// invoked.
type ConfStoreSiteCreateIfUpToDateFunc struct {
	defaultHook func(context.Context, *int32, string) (*SiteConfig, error)
	hooks       []func(context.Context, *int32, string) (*SiteConfig, error)
	history     []ConfStoreSiteCreateIfUpToDateFuncCall
	mutex       sync.Mutex
}

// SiteCreateIfUpToDate delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockConfStore) SiteCreateIfUpToDate(v0 context.Context, v1 *int32, v2 string) (*SiteConfig, error) {
	r0, r1 := m.SiteCreateIfUpToDateFunc.nextHook()(v0, v1, v2)
	m.SiteCreateIfUpToDateFunc.appendCall(ConfStoreSiteCreateIfUpToDateFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SiteCreateIfUpToDate
// method of the parent MockConfStore instance is invoked and the hook queue
// is empty.
func (f *ConfStoreSiteCreateIfUpToDateFunc) SetDefaultHook(hook func(context.Context, *int32, string) (*SiteConfig, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SiteCreateIfUpToDate method of the parent MockConfStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ConfStoreSiteCreateIfUpToDateFunc) PushHook(hook func(context.Context, *int32, string) (*SiteConfig, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ConfStoreSiteCreateIfUpToDateFunc) SetDefaultReturn(r0 *SiteConfig, r1 error) {
	f.SetDefaultHook(func(context.Context, *int32, string) (*SiteConfig, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ConfStoreSiteCreateIfUpToDateFunc) PushReturn(r0 *SiteConfig, r1 error) {
	f.PushHook(func(context.Context, *int32, string) (*SiteConfig, error) {
		return r0, r1
	})
}

func (f *ConfStoreSiteCreateIfUpToDateFunc) nextHook() func(context.Context, *int32, string) (*SiteConfig, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ConfStoreSiteCreateIfUpToDateFunc) appendCall(r0 ConfStoreSiteCreateIfUpToDateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ConfStoreSiteCreateIfUpToDateFuncCall
// objects describing the invocations of this function.
func (f *ConfStoreSiteCreateIfUpToDateFunc) History() []ConfStoreSiteCreateIfUpToDateFuncCall {
	f.mutex.Lock()
	history := make([]ConfStoreSiteCreateIfUpToDateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ConfStoreSiteCreateIfUpToDateFuncCall is an object that describes an
// invocation of method SiteCreateIfUpToDate on an instance of
// MockConfStore.
type ConfStoreSiteCreateIfUpToDateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *SiteConfig
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ConfStoreSiteCreateIfUpToDateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ConfStoreSiteCreateIfUpToDateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ConfStoreSiteGetLatestFunc describes the behavior when the SiteGetLatest
// method of the parent MockConfStore instance is invoked.
type ConfStoreSiteGetLatestFunc struct {
	defaultHook func(context.Context) (*SiteConfig, error)
	hooks       []func(context.Context) (*SiteConfig, error)
	history     []ConfStoreSiteGetLatestFuncCall
	mutex       sync.Mutex
}

// SiteGetLatest delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockConfStore) SiteGetLatest(v0 context.Context) (*SiteConfig, error) {
	r0, r1 := m.SiteGetLatestFunc.nextHook()(v0)
	m.SiteGetLatestFunc.appendCall(ConfStoreSiteGetLatestFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SiteGetLatest method
// of the parent MockConfStore instance is invoked and the hook queue is
// empty.
func (f *ConfStoreSiteGetLatestFunc) SetDefaultHook(hook func(context.Context) (*SiteConfig, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SiteGetLatest method of the parent MockConfStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ConfStoreSiteGetLatestFunc) PushHook(hook func(context.Context) (*SiteConfig, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ConfStoreSiteGetLatestFunc) SetDefaultReturn(r0 *SiteConfig, r1 error) {
	f.SetDefaultHook(func(context.Context) (*SiteConfig, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ConfStoreSiteGetLatestFunc) PushReturn(r0 *SiteConfig, r1 error) {
	f.PushHook(func(context.Context) (*SiteConfig, error) {
		return r0, r1
	})
}

func (f *ConfStoreSiteGetLatestFunc) nextHook() func(context.Context) (*SiteConfig, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ConfStoreSiteGetLatestFunc) appendCall(r0 ConfStoreSiteGetLatestFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ConfStoreSiteGetLatestFuncCall objects
// describing the invocations of this function.
func (f *ConfStoreSiteGetLatestFunc) History() []ConfStoreSiteGetLatestFuncCall {
	f.mutex.Lock()
	history := make([]ConfStoreSiteGetLatestFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ConfStoreSiteGetLatestFuncCall is an object that describes an invocation
// of method SiteGetLatest on an instance of MockConfStore.
type ConfStoreSiteGetLatestFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *SiteConfig
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ConfStoreSiteGetLatestFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ConfStoreSiteGetLatestFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ConfStoreTransactFunc describes the behavior when the Transact method of
// the parent MockConfStore instance is invoked.
type ConfStoreTransactFunc struct {
	defaultHook func(context.Context) (ConfStore, error)
	hooks       []func(context.Context) (ConfStore, error)
	history     []ConfStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockConfStore) Transact(v0 context.Context) (ConfStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(ConfStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockConfStore instance is invoked and the hook queue is empty.
func (f *ConfStoreTransactFunc) SetDefaultHook(hook func(context.Context) (ConfStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockConfStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ConfStoreTransactFunc) PushHook(hook func(context.Context) (ConfStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ConfStoreTransactFunc) SetDefaultReturn(r0 ConfStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (ConfStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ConfStoreTransactFunc) PushReturn(r0 ConfStore, r1 error) {
	f.PushHook(func(context.Context) (ConfStore, error) {
		return r0, r1
	})
}

func (f *ConfStoreTransactFunc) nextHook() func(context.Context) (ConfStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ConfStoreTransactFunc) appendCall(r0 ConfStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ConfStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *ConfStoreTransactFunc) History() []ConfStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]ConfStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ConfStoreTransactFuncCall is an object that describes an invocation of
// method Transact on an instance of MockConfStore.
type ConfStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 ConfStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ConfStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ConfStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockDB is a mock implementation of the DB interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockDB struct {
	// AccessTokensFunc is an instance of a mock function object controlling
	// the behavior of the method AccessTokens.
	AccessTokensFunc *DBAccessTokensFunc
	// AuthzFunc is an instance of a mock function object controlling the
	// behavior of the method Authz.
	AuthzFunc *DBAuthzFunc
	// BitbucketProjectPermissionsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// BitbucketProjectPermissions.
	BitbucketProjectPermissionsFunc *DBBitbucketProjectPermissionsFunc
	// ConfFunc is an instance of a mock function object controlling the
	// behavior of the method Conf.
	ConfFunc *DBConfFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *DBDoneFunc
	// EventLogsFunc is an instance of a mock function object controlling
	// the behavior of the method EventLogs.
	EventLogsFunc *DBEventLogsFunc
	// ExecContextFunc is an instance of a mock function object controlling
	// the behavior of the method ExecContext.
	ExecContextFunc *DBExecContextFunc
	// ExternalServicesFunc is an instance of a mock function object
	// controlling the behavior of the method ExternalServices.
	ExternalServicesFunc *DBExternalServicesFunc
	// FeatureFlagsFunc is an instance of a mock function object controlling
	// the behavior of the method FeatureFlags.
	FeatureFlagsFunc *DBFeatureFlagsFunc
	// GitserverLocalCloneFunc is an instance of a mock function object
	// controlling the behavior of the method GitserverLocalClone.
	GitserverLocalCloneFunc *DBGitserverLocalCloneFunc
	// GitserverReposFunc is an instance of a mock function object
	// controlling the behavior of the method GitserverRepos.
	GitserverReposFunc *DBGitserverReposFunc
	// GlobalStateFunc is an instance of a mock function object controlling
	// the behavior of the method GlobalState.
	GlobalStateFunc *DBGlobalStateFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *DBHandleFunc
	// NamespacesFunc is an instance of a mock function object controlling
	// the behavior of the method Namespaces.
	NamespacesFunc *DBNamespacesFunc
	// OrgInvitationsFunc is an instance of a mock function object
	// controlling the behavior of the method OrgInvitations.
	OrgInvitationsFunc *DBOrgInvitationsFunc
	// OrgMembersFunc is an instance of a mock function object controlling
	// the behavior of the method OrgMembers.
	OrgMembersFunc *DBOrgMembersFunc
	// OrgStatsFunc is an instance of a mock function object controlling the
	// behavior of the method OrgStats.
	OrgStatsFunc *DBOrgStatsFunc
	// OrgsFunc is an instance of a mock function object controlling the
	// behavior of the method Orgs.
	OrgsFunc *DBOrgsFunc
	// PhabricatorFunc is an instance of a mock function object controlling
	// the behavior of the method Phabricator.
	PhabricatorFunc *DBPhabricatorFunc
	// QueryContextFunc is an instance of a mock function object controlling
	// the behavior of the method QueryContext.
	QueryContextFunc *DBQueryContextFunc
	// QueryRowContextFunc is an instance of a mock function object
	// controlling the behavior of the method QueryRowContext.
	QueryRowContextFunc *DBQueryRowContextFunc
	// ReposFunc is an instance of a mock function object controlling the
	// behavior of the method Repos.
	ReposFunc *DBReposFunc
	// SavedSearchesFunc is an instance of a mock function object
	// controlling the behavior of the method SavedSearches.
	SavedSearchesFunc *DBSavedSearchesFunc
	// SearchContextsFunc is an instance of a mock function object
	// controlling the behavior of the method SearchContexts.
	SearchContextsFunc *DBSearchContextsFunc
	// SecurityEventLogsFunc is an instance of a mock function object
	// controlling the behavior of the method SecurityEventLogs.
	SecurityEventLogsFunc *DBSecurityEventLogsFunc
	// SettingsFunc is an instance of a mock function object controlling the
	// behavior of the method Settings.
	SettingsFunc *DBSettingsFunc
	// SubRepoPermsFunc is an instance of a mock function object controlling
	// the behavior of the method SubRepoPerms.
	SubRepoPermsFunc *DBSubRepoPermsFunc
	// TemporarySettingsFunc is an instance of a mock function object
	// controlling the behavior of the method TemporarySettings.
	TemporarySettingsFunc *DBTemporarySettingsFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *DBTransactFunc
	// UserCredentialsFunc is an instance of a mock function object
	// controlling the behavior of the method UserCredentials.
	UserCredentialsFunc *DBUserCredentialsFunc
	// UserEmailsFunc is an instance of a mock function object controlling
	// the behavior of the method UserEmails.
	UserEmailsFunc *DBUserEmailsFunc
	// UserExternalAccountsFunc is an instance of a mock function object
	// controlling the behavior of the method UserExternalAccounts.
	UserExternalAccountsFunc *DBUserExternalAccountsFunc
	// UserPublicReposFunc is an instance of a mock function object
	// controlling the behavior of the method UserPublicRepos.
	UserPublicReposFunc *DBUserPublicReposFunc
	// UsersFunc is an instance of a mock function object controlling the
	// behavior of the method Users.
	UsersFunc *DBUsersFunc
	// WebhookLogsFunc is an instance of a mock function object controlling
	// the behavior of the method WebhookLogs.
	WebhookLogsFunc *DBWebhookLogsFunc
}

// NewMockDB creates a new mock of the DB interface. All methods return zero
// values for all results, unless overwritten.
func NewMockDB() *MockDB {
	return &MockDB{
		AccessTokensFunc: &DBAccessTokensFunc{
			defaultHook: func() (r0 AccessTokenStore) {
				return
			},
		},
		AuthzFunc: &DBAuthzFunc{
			defaultHook: func() (r0 AuthzStore) {
				return
			},
		},
		BitbucketProjectPermissionsFunc: &DBBitbucketProjectPermissionsFunc{
			defaultHook: func() (r0 BitbucketProjectPermissionsStore) {
				return
			},
		},
		ConfFunc: &DBConfFunc{
			defaultHook: func() (r0 ConfStore) {
				return
			},
		},
		DoneFunc: &DBDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		EventLogsFunc: &DBEventLogsFunc{
			defaultHook: func() (r0 EventLogStore) {
				return
			},
		},
		ExecContextFunc: &DBExecContextFunc{
			defaultHook: func(context.Context, string, ...interface{}) (r0 sql.Result, r1 error) {
				return
			},
		},
		ExternalServicesFunc: &DBExternalServicesFunc{
			defaultHook: func() (r0 ExternalServiceStore) {
				return
			},
		},
		FeatureFlagsFunc: &DBFeatureFlagsFunc{
			defaultHook: func() (r0 FeatureFlagStore) {
				return
			},
		},
		GitserverLocalCloneFunc: &DBGitserverLocalCloneFunc{
			defaultHook: func() (r0 GitserverLocalCloneStore) {
				return
			},
		},
		GitserverReposFunc: &DBGitserverReposFunc{
			defaultHook: func() (r0 GitserverRepoStore) {
				return
			},
		},
		GlobalStateFunc: &DBGlobalStateFunc{
			defaultHook: func() (r0 GlobalStateStore) {
				return
			},
		},
		HandleFunc: &DBHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		NamespacesFunc: &DBNamespacesFunc{
			defaultHook: func() (r0 NamespaceStore) {
				return
			},
		},
		OrgInvitationsFunc: &DBOrgInvitationsFunc{
			defaultHook: func() (r0 OrgInvitationStore) {
				return
			},
		},
		OrgMembersFunc: &DBOrgMembersFunc{
			defaultHook: func() (r0 OrgMemberStore) {
				return
			},
		},
		OrgStatsFunc: &DBOrgStatsFunc{
			defaultHook: func() (r0 OrgStatsStore) {
				return
			},
		},
		OrgsFunc: &DBOrgsFunc{
			defaultHook: func() (r0 OrgStore) {
				return
			},
		},
		PhabricatorFunc: &DBPhabricatorFunc{
			defaultHook: func() (r0 PhabricatorStore) {
				return
			},
		},
		QueryContextFunc: &DBQueryContextFunc{
			defaultHook: func(context.Context, string, ...interface{}) (r0 *sql.Rows, r1 error) {
				return
			},
		},
		QueryRowContextFunc: &DBQueryRowContextFunc{
			defaultHook: func(context.Context, string, ...interface{}) (r0 *sql.Row) {
				return
			},
		},
		ReposFunc: &DBReposFunc{
			defaultHook: func() (r0 RepoStore) {
				return
			},
		},
		SavedSearchesFunc: &DBSavedSearchesFunc{
			defaultHook: func() (r0 SavedSearchStore) {
				return
			},
		},
		SearchContextsFunc: &DBSearchContextsFunc{
			defaultHook: func() (r0 SearchContextsStore) {
				return
			},
		},
		SecurityEventLogsFunc: &DBSecurityEventLogsFunc{
			defaultHook: func() (r0 SecurityEventLogsStore) {
				return
			},
		},
		SettingsFunc: &DBSettingsFunc{
			defaultHook: func() (r0 SettingsStore) {
				return
			},
		},
		SubRepoPermsFunc: &DBSubRepoPermsFunc{
			defaultHook: func() (r0 SubRepoPermsStore) {
				return
			},
		},
		TemporarySettingsFunc: &DBTemporarySettingsFunc{
			defaultHook: func() (r0 TemporarySettingsStore) {
				return
			},
		},
		TransactFunc: &DBTransactFunc{
			defaultHook: func(context.Context) (r0 DB, r1 error) {
				return
			},
		},
		UserCredentialsFunc: &DBUserCredentialsFunc{
			defaultHook: func(encryption.Key) (r0 UserCredentialsStore) {
				return
			},
		},
		UserEmailsFunc: &DBUserEmailsFunc{
			defaultHook: func() (r0 UserEmailsStore) {
				return
			},
		},
		UserExternalAccountsFunc: &DBUserExternalAccountsFunc{
			defaultHook: func() (r0 UserExternalAccountsStore) {
				return
			},
		},
		UserPublicReposFunc: &DBUserPublicReposFunc{
			defaultHook: func() (r0 UserPublicRepoStore) {
				return
			},
		},
		UsersFunc: &DBUsersFunc{
			defaultHook: func() (r0 UserStore) {
				return
			},
		},
		WebhookLogsFunc: &DBWebhookLogsFunc{
			defaultHook: func(encryption.Key) (r0 WebhookLogStore) {
				return
			},
		},
	}
}

// NewStrictMockDB creates a new mock of the DB interface. All methods panic
// on invocation, unless overwritten.
func NewStrictMockDB() *MockDB {
	return &MockDB{
		AccessTokensFunc: &DBAccessTokensFunc{
			defaultHook: func() AccessTokenStore {
				panic("unexpected invocation of MockDB.AccessTokens")
			},
		},
		AuthzFunc: &DBAuthzFunc{
			defaultHook: func() AuthzStore {
				panic("unexpected invocation of MockDB.Authz")
			},
		},
		BitbucketProjectPermissionsFunc: &DBBitbucketProjectPermissionsFunc{
			defaultHook: func() BitbucketProjectPermissionsStore {
				panic("unexpected invocation of MockDB.BitbucketProjectPermissions")
			},
		},
		ConfFunc: &DBConfFunc{
			defaultHook: func() ConfStore {
				panic("unexpected invocation of MockDB.Conf")
			},
		},
		DoneFunc: &DBDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockDB.Done")
			},
		},
		EventLogsFunc: &DBEventLogsFunc{
			defaultHook: func() EventLogStore {
				panic("unexpected invocation of MockDB.EventLogs")
			},
		},
		ExecContextFunc: &DBExecContextFunc{
			defaultHook: func(context.Context, string, ...interface{}) (sql.Result, error) {
				panic("unexpected invocation of MockDB.ExecContext")
			},
		},
		ExternalServicesFunc: &DBExternalServicesFunc{
			defaultHook: func() ExternalServiceStore {
				panic("unexpected invocation of MockDB.ExternalServices")
			},
		},
		FeatureFlagsFunc: &DBFeatureFlagsFunc{
			defaultHook: func() FeatureFlagStore {
				panic("unexpected invocation of MockDB.FeatureFlags")
			},
		},
		GitserverLocalCloneFunc: &DBGitserverLocalCloneFunc{
			defaultHook: func() GitserverLocalCloneStore {
				panic("unexpected invocation of MockDB.GitserverLocalClone")
			},
		},
		GitserverReposFunc: &DBGitserverReposFunc{
			defaultHook: func() GitserverRepoStore {
				panic("unexpected invocation of MockDB.GitserverRepos")
			},
		},
		GlobalStateFunc: &DBGlobalStateFunc{
			defaultHook: func() GlobalStateStore {
				panic("unexpected invocation of MockDB.GlobalState")
			},
		},
		HandleFunc: &DBHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockDB.Handle")
			},
		},
		NamespacesFunc: &DBNamespacesFunc{
			defaultHook: func() NamespaceStore {
				panic("unexpected invocation of MockDB.Namespaces")
			},
		},
		OrgInvitationsFunc: &DBOrgInvitationsFunc{
			defaultHook: func() OrgInvitationStore {
				panic("unexpected invocation of MockDB.OrgInvitations")
			},
		},
		OrgMembersFunc: &DBOrgMembersFunc{
			defaultHook: func() OrgMemberStore {
				panic("unexpected invocation of MockDB.OrgMembers")
			},
		},
		OrgStatsFunc: &DBOrgStatsFunc{
			defaultHook: func() OrgStatsStore {
				panic("unexpected invocation of MockDB.OrgStats")
			},
		},
		OrgsFunc: &DBOrgsFunc{
			defaultHook: func() OrgStore {
				panic("unexpected invocation of MockDB.Orgs")
			},
		},
		PhabricatorFunc: &DBPhabricatorFunc{
			defaultHook: func() PhabricatorStore {
				panic("unexpected invocation of MockDB.Phabricator")
			},
		},
		QueryContextFunc: &DBQueryContextFunc{
			defaultHook: func(context.Context, string, ...interface{}) (*sql.Rows, error) {
				panic("unexpected invocation of MockDB.QueryContext")
			},
		},
		QueryRowContextFunc: &DBQueryRowContextFunc{
			defaultHook: func(context.Context, string, ...interface{}) *sql.Row {
				panic("unexpected invocation of MockDB.QueryRowContext")
			},
		},
		ReposFunc: &DBReposFunc{
			defaultHook: func() RepoStore {
				panic("unexpected invocation of MockDB.Repos")
			},
		},
		SavedSearchesFunc: &DBSavedSearchesFunc{
			defaultHook: func() SavedSearchStore {
				panic("unexpected invocation of MockDB.SavedSearches")
			},
		},
		SearchContextsFunc: &DBSearchContextsFunc{
			defaultHook: func() SearchContextsStore {
				panic("unexpected invocation of MockDB.SearchContexts")
			},
		},
		SecurityEventLogsFunc: &DBSecurityEventLogsFunc{
			defaultHook: func() SecurityEventLogsStore {
				panic("unexpected invocation of MockDB.SecurityEventLogs")
			},
		},
		SettingsFunc: &DBSettingsFunc{
			defaultHook: func() SettingsStore {
				panic("unexpected invocation of MockDB.Settings")
			},
		},
		SubRepoPermsFunc: &DBSubRepoPermsFunc{
			defaultHook: func() SubRepoPermsStore {
				panic("unexpected invocation of MockDB.SubRepoPerms")
			},
		},
		TemporarySettingsFunc: &DBTemporarySettingsFunc{
			defaultHook: func() TemporarySettingsStore {
				panic("unexpected invocation of MockDB.TemporarySettings")
			},
		},
		TransactFunc: &DBTransactFunc{
			defaultHook: func(context.Context) (DB, error) {
				panic("unexpected invocation of MockDB.Transact")
			},
		},
		UserCredentialsFunc: &DBUserCredentialsFunc{
			defaultHook: func(encryption.Key) UserCredentialsStore {
				panic("unexpected invocation of MockDB.UserCredentials")
			},
		},
		UserEmailsFunc: &DBUserEmailsFunc{
			defaultHook: func() UserEmailsStore {
				panic("unexpected invocation of MockDB.UserEmails")
			},
		},
		UserExternalAccountsFunc: &DBUserExternalAccountsFunc{
			defaultHook: func() UserExternalAccountsStore {
				panic("unexpected invocation of MockDB.UserExternalAccounts")
			},
		},
		UserPublicReposFunc: &DBUserPublicReposFunc{
			defaultHook: func() UserPublicRepoStore {
				panic("unexpected invocation of MockDB.UserPublicRepos")
			},
		},
		UsersFunc: &DBUsersFunc{
			defaultHook: func() UserStore {
				panic("unexpected invocation of MockDB.Users")
			},
		},
		WebhookLogsFunc: &DBWebhookLogsFunc{
			defaultHook: func(encryption.Key) WebhookLogStore {
				panic("unexpected invocation of MockDB.WebhookLogs")
			},
		},
	}
}

// NewMockDBFrom creates a new mock of the MockDB interface. All methods
// delegate to the given implementation, unless overwritten.
func NewMockDBFrom(i DB) *MockDB {
	return &MockDB{
		AccessTokensFunc: &DBAccessTokensFunc{
			defaultHook: i.AccessTokens,
		},
		AuthzFunc: &DBAuthzFunc{
			defaultHook: i.Authz,
		},
		BitbucketProjectPermissionsFunc: &DBBitbucketProjectPermissionsFunc{
			defaultHook: i.BitbucketProjectPermissions,
		},
		ConfFunc: &DBConfFunc{
			defaultHook: i.Conf,
		},
		DoneFunc: &DBDoneFunc{
			defaultHook: i.Done,
		},
		EventLogsFunc: &DBEventLogsFunc{
			defaultHook: i.EventLogs,
		},
		ExecContextFunc: &DBExecContextFunc{
			defaultHook: i.ExecContext,
		},
		ExternalServicesFunc: &DBExternalServicesFunc{
			defaultHook: i.ExternalServices,
		},
		FeatureFlagsFunc: &DBFeatureFlagsFunc{
			defaultHook: i.FeatureFlags,
		},
		GitserverLocalCloneFunc: &DBGitserverLocalCloneFunc{
			defaultHook: i.GitserverLocalClone,
		},
		GitserverReposFunc: &DBGitserverReposFunc{
			defaultHook: i.GitserverRepos,
		},
		GlobalStateFunc: &DBGlobalStateFunc{
			defaultHook: i.GlobalState,
		},
		HandleFunc: &DBHandleFunc{
			defaultHook: i.Handle,
		},
		NamespacesFunc: &DBNamespacesFunc{
			defaultHook: i.Namespaces,
		},
		OrgInvitationsFunc: &DBOrgInvitationsFunc{
			defaultHook: i.OrgInvitations,
		},
		OrgMembersFunc: &DBOrgMembersFunc{
			defaultHook: i.OrgMembers,
		},
		OrgStatsFunc: &DBOrgStatsFunc{
			defaultHook: i.OrgStats,
		},
		OrgsFunc: &DBOrgsFunc{
			defaultHook: i.Orgs,
		},
		PhabricatorFunc: &DBPhabricatorFunc{
			defaultHook: i.Phabricator,
		},
		QueryContextFunc: &DBQueryContextFunc{
			defaultHook: i.QueryContext,
		},
		QueryRowContextFunc: &DBQueryRowContextFunc{
			defaultHook: i.QueryRowContext,
		},
		ReposFunc: &DBReposFunc{
			defaultHook: i.Repos,
		},
		SavedSearchesFunc: &DBSavedSearchesFunc{
			defaultHook: i.SavedSearches,
		},
		SearchContextsFunc: &DBSearchContextsFunc{
			defaultHook: i.SearchContexts,
		},
		SecurityEventLogsFunc: &DBSecurityEventLogsFunc{
			defaultHook: i.SecurityEventLogs,
		},
		SettingsFunc: &DBSettingsFunc{
			defaultHook: i.Settings,
		},
		SubRepoPermsFunc: &DBSubRepoPermsFunc{
			defaultHook: i.SubRepoPerms,
		},
		TemporarySettingsFunc: &DBTemporarySettingsFunc{
			defaultHook: i.TemporarySettings,
		},
		TransactFunc: &DBTransactFunc{
			defaultHook: i.Transact,
		},
		UserCredentialsFunc: &DBUserCredentialsFunc{
			defaultHook: i.UserCredentials,
		},
		UserEmailsFunc: &DBUserEmailsFunc{
			defaultHook: i.UserEmails,
		},
		UserExternalAccountsFunc: &DBUserExternalAccountsFunc{
			defaultHook: i.UserExternalAccounts,
		},
		UserPublicReposFunc: &DBUserPublicReposFunc{
			defaultHook: i.UserPublicRepos,
		},
		UsersFunc: &DBUsersFunc{
			defaultHook: i.Users,
		},
		WebhookLogsFunc: &DBWebhookLogsFunc{
			defaultHook: i.WebhookLogs,
		},
	}
}

// DBAccessTokensFunc describes the behavior when the AccessTokens method of
// the parent MockDB instance is invoked.
type DBAccessTokensFunc struct {
	defaultHook func() AccessTokenStore
	hooks       []func() AccessTokenStore
	history     []DBAccessTokensFuncCall
	mutex       sync.Mutex
}

// AccessTokens delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) AccessTokens() AccessTokenStore {
	r0 := m.AccessTokensFunc.nextHook()()
	m.AccessTokensFunc.appendCall(DBAccessTokensFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the AccessTokens method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBAccessTokensFunc) SetDefaultHook(hook func() AccessTokenStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AccessTokens method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBAccessTokensFunc) PushHook(hook func() AccessTokenStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBAccessTokensFunc) SetDefaultReturn(r0 AccessTokenStore) {
	f.SetDefaultHook(func() AccessTokenStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBAccessTokensFunc) PushReturn(r0 AccessTokenStore) {
	f.PushHook(func() AccessTokenStore {
		return r0
	})
}

func (f *DBAccessTokensFunc) nextHook() func() AccessTokenStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBAccessTokensFunc) appendCall(r0 DBAccessTokensFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBAccessTokensFuncCall objects describing
// the invocations of this function.
func (f *DBAccessTokensFunc) History() []DBAccessTokensFuncCall {
	f.mutex.Lock()
	history := make([]DBAccessTokensFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBAccessTokensFuncCall is an object that describes an invocation of
// method AccessTokens on an instance of MockDB.
type DBAccessTokensFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 AccessTokenStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBAccessTokensFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBAccessTokensFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBAuthzFunc describes the behavior when the Authz method of the parent
// MockDB instance is invoked.
type DBAuthzFunc struct {
	defaultHook func() AuthzStore
	hooks       []func() AuthzStore
	history     []DBAuthzFuncCall
	mutex       sync.Mutex
}

// Authz delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) Authz() AuthzStore {
	r0 := m.AuthzFunc.nextHook()()
	m.AuthzFunc.appendCall(DBAuthzFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Authz method of the
// parent MockDB instance is invoked and the hook queue is empty.
func (f *DBAuthzFunc) SetDefaultHook(hook func() AuthzStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Authz method of the parent MockDB instance invokes the hook at the front
// of the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *DBAuthzFunc) PushHook(hook func() AuthzStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBAuthzFunc) SetDefaultReturn(r0 AuthzStore) {
	f.SetDefaultHook(func() AuthzStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBAuthzFunc) PushReturn(r0 AuthzStore) {
	f.PushHook(func() AuthzStore {
		return r0
	})
}

func (f *DBAuthzFunc) nextHook() func() AuthzStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBAuthzFunc) appendCall(r0 DBAuthzFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBAuthzFuncCall objects describing the
// invocations of this function.
func (f *DBAuthzFunc) History() []DBAuthzFuncCall {
	f.mutex.Lock()
	history := make([]DBAuthzFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBAuthzFuncCall is an object that describes an invocation of method Authz
// on an instance of MockDB.
type DBAuthzFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 AuthzStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBAuthzFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBAuthzFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBBitbucketProjectPermissionsFunc describes the behavior when the
// BitbucketProjectPermissions method of the parent MockDB instance is
// invoked.
type DBBitbucketProjectPermissionsFunc struct {
	defaultHook func() BitbucketProjectPermissionsStore
	hooks       []func() BitbucketProjectPermissionsStore
	history     []DBBitbucketProjectPermissionsFuncCall
	mutex       sync.Mutex
}

// BitbucketProjectPermissions delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockDB) BitbucketProjectPermissions() BitbucketProjectPermissionsStore {
	r0 := m.BitbucketProjectPermissionsFunc.nextHook()()
	m.BitbucketProjectPermissionsFunc.appendCall(DBBitbucketProjectPermissionsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// BitbucketProjectPermissions method of the parent MockDB instance is
// invoked and the hook queue is empty.
func (f *DBBitbucketProjectPermissionsFunc) SetDefaultHook(hook func() BitbucketProjectPermissionsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BitbucketProjectPermissions method of the parent MockDB instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *DBBitbucketProjectPermissionsFunc) PushHook(hook func() BitbucketProjectPermissionsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBBitbucketProjectPermissionsFunc) SetDefaultReturn(r0 BitbucketProjectPermissionsStore) {
	f.SetDefaultHook(func() BitbucketProjectPermissionsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBBitbucketProjectPermissionsFunc) PushReturn(r0 BitbucketProjectPermissionsStore) {
	f.PushHook(func() BitbucketProjectPermissionsStore {
		return r0
	})
}

func (f *DBBitbucketProjectPermissionsFunc) nextHook() func() BitbucketProjectPermissionsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBBitbucketProjectPermissionsFunc) appendCall(r0 DBBitbucketProjectPermissionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBBitbucketProjectPermissionsFuncCall
// objects describing the invocations of this function.
func (f *DBBitbucketProjectPermissionsFunc) History() []DBBitbucketProjectPermissionsFuncCall {
	f.mutex.Lock()
	history := make([]DBBitbucketProjectPermissionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBBitbucketProjectPermissionsFuncCall is an object that describes an
// invocation of method BitbucketProjectPermissions on an instance of
// MockDB.
type DBBitbucketProjectPermissionsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 BitbucketProjectPermissionsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBBitbucketProjectPermissionsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBBitbucketProjectPermissionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBConfFunc describes the behavior when the Conf method of the parent
// MockDB instance is invoked.
type DBConfFunc struct {
	defaultHook func() ConfStore
	hooks       []func() ConfStore
	history     []DBConfFuncCall
	mutex       sync.Mutex
}

// Conf delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) Conf() ConfStore {
	r0 := m.ConfFunc.nextHook()()
	m.ConfFunc.appendCall(DBConfFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Conf method of the
// parent MockDB instance is invoked and the hook queue is empty.
func (f *DBConfFunc) SetDefaultHook(hook func() ConfStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Conf method of the parent MockDB instance invokes the hook at the front
// of the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *DBConfFunc) PushHook(hook func() ConfStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBConfFunc) SetDefaultReturn(r0 ConfStore) {
	f.SetDefaultHook(func() ConfStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBConfFunc) PushReturn(r0 ConfStore) {
	f.PushHook(func() ConfStore {
		return r0
	})
}

func (f *DBConfFunc) nextHook() func() ConfStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBConfFunc) appendCall(r0 DBConfFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBConfFuncCall objects describing the
// invocations of this function.
func (f *DBConfFunc) History() []DBConfFuncCall {
	f.mutex.Lock()
	history := make([]DBConfFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBConfFuncCall is an object that describes an invocation of method Conf
// on an instance of MockDB.
type DBConfFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 ConfStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBConfFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBConfFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBDoneFunc describes the behavior when the Done method of the parent
// MockDB instance is invoked.
type DBDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []DBDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(DBDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockDB instance is invoked and the hook queue is empty.
func (f *DBDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockDB instance invokes the hook at the front
// of the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *DBDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *DBDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBDoneFunc) appendCall(r0 DBDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBDoneFuncCall objects describing the
// invocations of this function.
func (f *DBDoneFunc) History() []DBDoneFuncCall {
	f.mutex.Lock()
	history := make([]DBDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBDoneFuncCall is an object that describes an invocation of method Done
// on an instance of MockDB.
type DBDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBEventLogsFunc describes the behavior when the EventLogs method of the
// parent MockDB instance is invoked.
type DBEventLogsFunc struct {
	defaultHook func() EventLogStore
	hooks       []func() EventLogStore
	history     []DBEventLogsFuncCall
	mutex       sync.Mutex
}

// EventLogs delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) EventLogs() EventLogStore {
	r0 := m.EventLogsFunc.nextHook()()
	m.EventLogsFunc.appendCall(DBEventLogsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the EventLogs method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBEventLogsFunc) SetDefaultHook(hook func() EventLogStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EventLogs method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBEventLogsFunc) PushHook(hook func() EventLogStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBEventLogsFunc) SetDefaultReturn(r0 EventLogStore) {
	f.SetDefaultHook(func() EventLogStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBEventLogsFunc) PushReturn(r0 EventLogStore) {
	f.PushHook(func() EventLogStore {
		return r0
	})
}

func (f *DBEventLogsFunc) nextHook() func() EventLogStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBEventLogsFunc) appendCall(r0 DBEventLogsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBEventLogsFuncCall objects describing the
// invocations of this function.
func (f *DBEventLogsFunc) History() []DBEventLogsFuncCall {
	f.mutex.Lock()
	history := make([]DBEventLogsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBEventLogsFuncCall is an object that describes an invocation of method
// EventLogs on an instance of MockDB.
type DBEventLogsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 EventLogStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBEventLogsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBEventLogsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBExecContextFunc describes the behavior when the ExecContext method of
// the parent MockDB instance is invoked.
type DBExecContextFunc struct {
	defaultHook func(context.Context, string, ...interface{}) (sql.Result, error)
	hooks       []func(context.Context, string, ...interface{}) (sql.Result, error)
	history     []DBExecContextFuncCall
	mutex       sync.Mutex
}

// ExecContext delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) ExecContext(v0 context.Context, v1 string, v2 ...interface{}) (sql.Result, error) {
	r0, r1 := m.ExecContextFunc.nextHook()(v0, v1, v2...)
	m.ExecContextFunc.appendCall(DBExecContextFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ExecContext method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBExecContextFunc) SetDefaultHook(hook func(context.Context, string, ...interface{}) (sql.Result, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExecContext method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBExecContextFunc) PushHook(hook func(context.Context, string, ...interface{}) (sql.Result, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBExecContextFunc) SetDefaultReturn(r0 sql.Result, r1 error) {
	f.SetDefaultHook(func(context.Context, string, ...interface{}) (sql.Result, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBExecContextFunc) PushReturn(r0 sql.Result, r1 error) {
	f.PushHook(func(context.Context, string, ...interface{}) (sql.Result, error) {
		return r0, r1
	})
}

func (f *DBExecContextFunc) nextHook() func(context.Context, string, ...interface{}) (sql.Result, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBExecContextFunc) appendCall(r0 DBExecContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBExecContextFuncCall objects describing
// the invocations of this function.
func (f *DBExecContextFunc) History() []DBExecContextFuncCall {
	f.mutex.Lock()
	history := make([]DBExecContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBExecContextFuncCall is an object that describes an invocation of method
// ExecContext on an instance of MockDB.
type DBExecContextFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 sql.Result
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c DBExecContextFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBExecContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DBExternalServicesFunc describes the behavior when the ExternalServices
// method of the parent MockDB instance is invoked.
type DBExternalServicesFunc struct {
	defaultHook func() ExternalServiceStore
	hooks       []func() ExternalServiceStore
	history     []DBExternalServicesFuncCall
	mutex       sync.Mutex
}

// ExternalServices delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) ExternalServices() ExternalServiceStore {
	r0 := m.ExternalServicesFunc.nextHook()()
	m.ExternalServicesFunc.appendCall(DBExternalServicesFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ExternalServices
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBExternalServicesFunc) SetDefaultHook(hook func() ExternalServiceStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExternalServices method of the parent MockDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBExternalServicesFunc) PushHook(hook func() ExternalServiceStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBExternalServicesFunc) SetDefaultReturn(r0 ExternalServiceStore) {
	f.SetDefaultHook(func() ExternalServiceStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBExternalServicesFunc) PushReturn(r0 ExternalServiceStore) {
	f.PushHook(func() ExternalServiceStore {
		return r0
	})
}

func (f *DBExternalServicesFunc) nextHook() func() ExternalServiceStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBExternalServicesFunc) appendCall(r0 DBExternalServicesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBExternalServicesFuncCall objects
// describing the invocations of this function.
func (f *DBExternalServicesFunc) History() []DBExternalServicesFuncCall {
	f.mutex.Lock()
	history := make([]DBExternalServicesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBExternalServicesFuncCall is an object that describes an invocation of
// method ExternalServices on an instance of MockDB.
type DBExternalServicesFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 ExternalServiceStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBExternalServicesFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBExternalServicesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBFeatureFlagsFunc describes the behavior when the FeatureFlags method of
// the parent MockDB instance is invoked.
type DBFeatureFlagsFunc struct {
	defaultHook func() FeatureFlagStore
	hooks       []func() FeatureFlagStore
	history     []DBFeatureFlagsFuncCall
	mutex       sync.Mutex
}

// FeatureFlags delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) FeatureFlags() FeatureFlagStore {
	r0 := m.FeatureFlagsFunc.nextHook()()
	m.FeatureFlagsFunc.appendCall(DBFeatureFlagsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the FeatureFlags method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBFeatureFlagsFunc) SetDefaultHook(hook func() FeatureFlagStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FeatureFlags method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBFeatureFlagsFunc) PushHook(hook func() FeatureFlagStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBFeatureFlagsFunc) SetDefaultReturn(r0 FeatureFlagStore) {
	f.SetDefaultHook(func() FeatureFlagStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBFeatureFlagsFunc) PushReturn(r0 FeatureFlagStore) {
	f.PushHook(func() FeatureFlagStore {
		return r0
	})
}

func (f *DBFeatureFlagsFunc) nextHook() func() FeatureFlagStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBFeatureFlagsFunc) appendCall(r0 DBFeatureFlagsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBFeatureFlagsFuncCall objects describing
// the invocations of this function.
func (f *DBFeatureFlagsFunc) History() []DBFeatureFlagsFuncCall {
	f.mutex.Lock()
	history := make([]DBFeatureFlagsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBFeatureFlagsFuncCall is an object that describes an invocation of
// method FeatureFlags on an instance of MockDB.
type DBFeatureFlagsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 FeatureFlagStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBFeatureFlagsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBFeatureFlagsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBGitserverLocalCloneFunc describes the behavior when the
// GitserverLocalClone method of the parent MockDB instance is invoked.
type DBGitserverLocalCloneFunc struct {
	defaultHook func() GitserverLocalCloneStore
	hooks       []func() GitserverLocalCloneStore
	history     []DBGitserverLocalCloneFuncCall
	mutex       sync.Mutex
}

// GitserverLocalClone delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) GitserverLocalClone() GitserverLocalCloneStore {
	r0 := m.GitserverLocalCloneFunc.nextHook()()
	m.GitserverLocalCloneFunc.appendCall(DBGitserverLocalCloneFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GitserverLocalClone
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBGitserverLocalCloneFunc) SetDefaultHook(hook func() GitserverLocalCloneStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GitserverLocalClone method of the parent MockDB instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBGitserverLocalCloneFunc) PushHook(hook func() GitserverLocalCloneStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBGitserverLocalCloneFunc) SetDefaultReturn(r0 GitserverLocalCloneStore) {
	f.SetDefaultHook(func() GitserverLocalCloneStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBGitserverLocalCloneFunc) PushReturn(r0 GitserverLocalCloneStore) {
	f.PushHook(func() GitserverLocalCloneStore {
		return r0
	})
}

func (f *DBGitserverLocalCloneFunc) nextHook() func() GitserverLocalCloneStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBGitserverLocalCloneFunc) appendCall(r0 DBGitserverLocalCloneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBGitserverLocalCloneFuncCall objects
// describing the invocations of this function.
func (f *DBGitserverLocalCloneFunc) History() []DBGitserverLocalCloneFuncCall {
	f.mutex.Lock()
	history := make([]DBGitserverLocalCloneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBGitserverLocalCloneFuncCall is an object that describes an invocation
// of method GitserverLocalClone on an instance of MockDB.
type DBGitserverLocalCloneFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 GitserverLocalCloneStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBGitserverLocalCloneFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBGitserverLocalCloneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBGitserverReposFunc describes the behavior when the GitserverRepos
// method of the parent MockDB instance is invoked.
type DBGitserverReposFunc struct {
	defaultHook func() GitserverRepoStore
	hooks       []func() GitserverRepoStore
	history     []DBGitserverReposFuncCall
	mutex       sync.Mutex
}

// GitserverRepos delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) GitserverRepos() GitserverRepoStore {
	r0 := m.GitserverReposFunc.nextHook()()
	m.GitserverReposFunc.appendCall(DBGitserverReposFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GitserverRepos
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBGitserverReposFunc) SetDefaultHook(hook func() GitserverRepoStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GitserverRepos method of the parent MockDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBGitserverReposFunc) PushHook(hook func() GitserverRepoStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBGitserverReposFunc) SetDefaultReturn(r0 GitserverRepoStore) {
	f.SetDefaultHook(func() GitserverRepoStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBGitserverReposFunc) PushReturn(r0 GitserverRepoStore) {
	f.PushHook(func() GitserverRepoStore {
		return r0
	})
}

func (f *DBGitserverReposFunc) nextHook() func() GitserverRepoStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBGitserverReposFunc) appendCall(r0 DBGitserverReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBGitserverReposFuncCall objects describing
// the invocations of this function.
func (f *DBGitserverReposFunc) History() []DBGitserverReposFuncCall {
	f.mutex.Lock()
	history := make([]DBGitserverReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBGitserverReposFuncCall is an object that describes an invocation of
// method GitserverRepos on an instance of MockDB.
type DBGitserverReposFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 GitserverRepoStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBGitserverReposFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBGitserverReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBGlobalStateFunc describes the behavior when the GlobalState method of
// the parent MockDB instance is invoked.
type DBGlobalStateFunc struct {
	defaultHook func() GlobalStateStore
	hooks       []func() GlobalStateStore
	history     []DBGlobalStateFuncCall
	mutex       sync.Mutex
}

// GlobalState delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) GlobalState() GlobalStateStore {
	r0 := m.GlobalStateFunc.nextHook()()
	m.GlobalStateFunc.appendCall(DBGlobalStateFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GlobalState method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBGlobalStateFunc) SetDefaultHook(hook func() GlobalStateStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GlobalState method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBGlobalStateFunc) PushHook(hook func() GlobalStateStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBGlobalStateFunc) SetDefaultReturn(r0 GlobalStateStore) {
	f.SetDefaultHook(func() GlobalStateStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBGlobalStateFunc) PushReturn(r0 GlobalStateStore) {
	f.PushHook(func() GlobalStateStore {
		return r0
	})
}

func (f *DBGlobalStateFunc) nextHook() func() GlobalStateStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBGlobalStateFunc) appendCall(r0 DBGlobalStateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBGlobalStateFuncCall objects describing
// the invocations of this function.
func (f *DBGlobalStateFunc) History() []DBGlobalStateFuncCall {
	f.mutex.Lock()
	history := make([]DBGlobalStateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBGlobalStateFuncCall is an object that describes an invocation of method
// GlobalState on an instance of MockDB.
type DBGlobalStateFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 GlobalStateStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBGlobalStateFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBGlobalStateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBHandleFunc describes the behavior when the Handle method of the parent
// MockDB instance is invoked.
type DBHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []DBHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(DBHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockDB instance is invoked and the hook queue is empty.
func (f *DBHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockDB instance invokes the hook at the front
// of the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *DBHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *DBHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBHandleFunc) appendCall(r0 DBHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBHandleFuncCall objects describing the
// invocations of this function.
func (f *DBHandleFunc) History() []DBHandleFuncCall {
	f.mutex.Lock()
	history := make([]DBHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBHandleFuncCall is an object that describes an invocation of method
// Handle on an instance of MockDB.
type DBHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBNamespacesFunc describes the behavior when the Namespaces method of the
// parent MockDB instance is invoked.
type DBNamespacesFunc struct {
	defaultHook func() NamespaceStore
	hooks       []func() NamespaceStore
	history     []DBNamespacesFuncCall
	mutex       sync.Mutex
}

// Namespaces delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) Namespaces() NamespaceStore {
	r0 := m.NamespacesFunc.nextHook()()
	m.NamespacesFunc.appendCall(DBNamespacesFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Namespaces method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBNamespacesFunc) SetDefaultHook(hook func() NamespaceStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Namespaces method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBNamespacesFunc) PushHook(hook func() NamespaceStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBNamespacesFunc) SetDefaultReturn(r0 NamespaceStore) {
	f.SetDefaultHook(func() NamespaceStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBNamespacesFunc) PushReturn(r0 NamespaceStore) {
	f.PushHook(func() NamespaceStore {
		return r0
	})
}

func (f *DBNamespacesFunc) nextHook() func() NamespaceStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBNamespacesFunc) appendCall(r0 DBNamespacesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBNamespacesFuncCall objects describing the
// invocations of this function.
func (f *DBNamespacesFunc) History() []DBNamespacesFuncCall {
	f.mutex.Lock()
	history := make([]DBNamespacesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBNamespacesFuncCall is an object that describes an invocation of method
// Namespaces on an instance of MockDB.
type DBNamespacesFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 NamespaceStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBNamespacesFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBNamespacesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBOrgInvitationsFunc describes the behavior when the OrgInvitations
// method of the parent MockDB instance is invoked.
type DBOrgInvitationsFunc struct {
	defaultHook func() OrgInvitationStore
	hooks       []func() OrgInvitationStore
	history     []DBOrgInvitationsFuncCall
	mutex       sync.Mutex
}

// OrgInvitations delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) OrgInvitations() OrgInvitationStore {
	r0 := m.OrgInvitationsFunc.nextHook()()
	m.OrgInvitationsFunc.appendCall(DBOrgInvitationsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the OrgInvitations
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBOrgInvitationsFunc) SetDefaultHook(hook func() OrgInvitationStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// OrgInvitations method of the parent MockDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBOrgInvitationsFunc) PushHook(hook func() OrgInvitationStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBOrgInvitationsFunc) SetDefaultReturn(r0 OrgInvitationStore) {
	f.SetDefaultHook(func() OrgInvitationStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBOrgInvitationsFunc) PushReturn(r0 OrgInvitationStore) {
	f.PushHook(func() OrgInvitationStore {
		return r0
	})
}

func (f *DBOrgInvitationsFunc) nextHook() func() OrgInvitationStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBOrgInvitationsFunc) appendCall(r0 DBOrgInvitationsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBOrgInvitationsFuncCall objects describing
// the invocations of this function.
func (f *DBOrgInvitationsFunc) History() []DBOrgInvitationsFuncCall {
	f.mutex.Lock()
	history := make([]DBOrgInvitationsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBOrgInvitationsFuncCall is an object that describes an invocation of
// method OrgInvitations on an instance of MockDB.
type DBOrgInvitationsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 OrgInvitationStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBOrgInvitationsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBOrgInvitationsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBOrgMembersFunc describes the behavior when the OrgMembers method of the
// parent MockDB instance is invoked.
type DBOrgMembersFunc struct {
	defaultHook func() OrgMemberStore
	hooks       []func() OrgMemberStore
	history     []DBOrgMembersFuncCall
	mutex       sync.Mutex
}

// OrgMembers delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) OrgMembers() OrgMemberStore {
	r0 := m.OrgMembersFunc.nextHook()()
	m.OrgMembersFunc.appendCall(DBOrgMembersFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the OrgMembers method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBOrgMembersFunc) SetDefaultHook(hook func() OrgMemberStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// OrgMembers method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBOrgMembersFunc) PushHook(hook func() OrgMemberStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBOrgMembersFunc) SetDefaultReturn(r0 OrgMemberStore) {
	f.SetDefaultHook(func() OrgMemberStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBOrgMembersFunc) PushReturn(r0 OrgMemberStore) {
	f.PushHook(func() OrgMemberStore {
		return r0
	})
}

func (f *DBOrgMembersFunc) nextHook() func() OrgMemberStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBOrgMembersFunc) appendCall(r0 DBOrgMembersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBOrgMembersFuncCall objects describing the
// invocations of this function.
func (f *DBOrgMembersFunc) History() []DBOrgMembersFuncCall {
	f.mutex.Lock()
	history := make([]DBOrgMembersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBOrgMembersFuncCall is an object that describes an invocation of method
// OrgMembers on an instance of MockDB.
type DBOrgMembersFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 OrgMemberStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBOrgMembersFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBOrgMembersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBOrgStatsFunc describes the behavior when the OrgStats method of the
// parent MockDB instance is invoked.
type DBOrgStatsFunc struct {
	defaultHook func() OrgStatsStore
	hooks       []func() OrgStatsStore
	history     []DBOrgStatsFuncCall
	mutex       sync.Mutex
}

// OrgStats delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) OrgStats() OrgStatsStore {
	r0 := m.OrgStatsFunc.nextHook()()
	m.OrgStatsFunc.appendCall(DBOrgStatsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the OrgStats method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBOrgStatsFunc) SetDefaultHook(hook func() OrgStatsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// OrgStats method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBOrgStatsFunc) PushHook(hook func() OrgStatsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBOrgStatsFunc) SetDefaultReturn(r0 OrgStatsStore) {
	f.SetDefaultHook(func() OrgStatsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBOrgStatsFunc) PushReturn(r0 OrgStatsStore) {
	f.PushHook(func() OrgStatsStore {
		return r0
	})
}

func (f *DBOrgStatsFunc) nextHook() func() OrgStatsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBOrgStatsFunc) appendCall(r0 DBOrgStatsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBOrgStatsFuncCall objects describing the
// invocations of this function.
func (f *DBOrgStatsFunc) History() []DBOrgStatsFuncCall {
	f.mutex.Lock()
	history := make([]DBOrgStatsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBOrgStatsFuncCall is an object that describes an invocation of method
// OrgStats on an instance of MockDB.
type DBOrgStatsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 OrgStatsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBOrgStatsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBOrgStatsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBOrgsFunc describes the behavior when the Orgs method of the parent
// MockDB instance is invoked.
type DBOrgsFunc struct {
	defaultHook func() OrgStore
	hooks       []func() OrgStore
	history     []DBOrgsFuncCall
	mutex       sync.Mutex
}

// Orgs delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) Orgs() OrgStore {
	r0 := m.OrgsFunc.nextHook()()
	m.OrgsFunc.appendCall(DBOrgsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Orgs method of the
// parent MockDB instance is invoked and the hook queue is empty.
func (f *DBOrgsFunc) SetDefaultHook(hook func() OrgStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Orgs method of the parent MockDB instance invokes the hook at the front
// of the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *DBOrgsFunc) PushHook(hook func() OrgStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBOrgsFunc) SetDefaultReturn(r0 OrgStore) {
	f.SetDefaultHook(func() OrgStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBOrgsFunc) PushReturn(r0 OrgStore) {
	f.PushHook(func() OrgStore {
		return r0
	})
}

func (f *DBOrgsFunc) nextHook() func() OrgStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBOrgsFunc) appendCall(r0 DBOrgsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBOrgsFuncCall objects describing the
// invocations of this function.
func (f *DBOrgsFunc) History() []DBOrgsFuncCall {
	f.mutex.Lock()
	history := make([]DBOrgsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBOrgsFuncCall is an object that describes an invocation of method Orgs
// on an instance of MockDB.
type DBOrgsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 OrgStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBOrgsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBOrgsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBPhabricatorFunc describes the behavior when the Phabricator method of
// the parent MockDB instance is invoked.
type DBPhabricatorFunc struct {
	defaultHook func() PhabricatorStore
	hooks       []func() PhabricatorStore
	history     []DBPhabricatorFuncCall
	mutex       sync.Mutex
}

// Phabricator delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) Phabricator() PhabricatorStore {
	r0 := m.PhabricatorFunc.nextHook()()
	m.PhabricatorFunc.appendCall(DBPhabricatorFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Phabricator method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBPhabricatorFunc) SetDefaultHook(hook func() PhabricatorStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Phabricator method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBPhabricatorFunc) PushHook(hook func() PhabricatorStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBPhabricatorFunc) SetDefaultReturn(r0 PhabricatorStore) {
	f.SetDefaultHook(func() PhabricatorStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBPhabricatorFunc) PushReturn(r0 PhabricatorStore) {
	f.PushHook(func() PhabricatorStore {
		return r0
	})
}

func (f *DBPhabricatorFunc) nextHook() func() PhabricatorStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBPhabricatorFunc) appendCall(r0 DBPhabricatorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBPhabricatorFuncCall objects describing
// the invocations of this function.
func (f *DBPhabricatorFunc) History() []DBPhabricatorFuncCall {
	f.mutex.Lock()
	history := make([]DBPhabricatorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBPhabricatorFuncCall is an object that describes an invocation of method
// Phabricator on an instance of MockDB.
type DBPhabricatorFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 PhabricatorStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBPhabricatorFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBPhabricatorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBQueryContextFunc describes the behavior when the QueryContext method of
// the parent MockDB instance is invoked.
type DBQueryContextFunc struct {
	defaultHook func(context.Context, string, ...interface{}) (*sql.Rows, error)
	hooks       []func(context.Context, string, ...interface{}) (*sql.Rows, error)
	history     []DBQueryContextFuncCall
	mutex       sync.Mutex
}

// QueryContext delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) QueryContext(v0 context.Context, v1 string, v2 ...interface{}) (*sql.Rows, error) {
	r0, r1 := m.QueryContextFunc.nextHook()(v0, v1, v2...)
	m.QueryContextFunc.appendCall(DBQueryContextFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the QueryContext method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBQueryContextFunc) SetDefaultHook(hook func(context.Context, string, ...interface{}) (*sql.Rows, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueryContext method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBQueryContextFunc) PushHook(hook func(context.Context, string, ...interface{}) (*sql.Rows, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBQueryContextFunc) SetDefaultReturn(r0 *sql.Rows, r1 error) {
	f.SetDefaultHook(func(context.Context, string, ...interface{}) (*sql.Rows, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBQueryContextFunc) PushReturn(r0 *sql.Rows, r1 error) {
	f.PushHook(func(context.Context, string, ...interface{}) (*sql.Rows, error) {
		return r0, r1
	})
}

func (f *DBQueryContextFunc) nextHook() func(context.Context, string, ...interface{}) (*sql.Rows, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBQueryContextFunc) appendCall(r0 DBQueryContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBQueryContextFuncCall objects describing
// the invocations of this function.
func (f *DBQueryContextFunc) History() []DBQueryContextFuncCall {
	f.mutex.Lock()
	history := make([]DBQueryContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBQueryContextFuncCall is an object that describes an invocation of
// method QueryContext on an instance of MockDB.
type DBQueryContextFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *sql.Rows
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c DBQueryContextFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBQueryContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DBQueryRowContextFunc describes the behavior when the QueryRowContext
// method of the parent MockDB instance is invoked.
type DBQueryRowContextFunc struct {
	defaultHook func(context.Context, string, ...interface{}) *sql.Row
	hooks       []func(context.Context, string, ...interface{}) *sql.Row
	history     []DBQueryRowContextFuncCall
	mutex       sync.Mutex
}

// QueryRowContext delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) QueryRowContext(v0 context.Context, v1 string, v2 ...interface{}) *sql.Row {
	r0 := m.QueryRowContextFunc.nextHook()(v0, v1, v2...)
	m.QueryRowContextFunc.appendCall(DBQueryRowContextFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the QueryRowContext
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBQueryRowContextFunc) SetDefaultHook(hook func(context.Context, string, ...interface{}) *sql.Row) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueryRowContext method of the parent MockDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBQueryRowContextFunc) PushHook(hook func(context.Context, string, ...interface{}) *sql.Row) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBQueryRowContextFunc) SetDefaultReturn(r0 *sql.Row) {
	f.SetDefaultHook(func(context.Context, string, ...interface{}) *sql.Row {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBQueryRowContextFunc) PushReturn(r0 *sql.Row) {
	f.PushHook(func(context.Context, string, ...interface{}) *sql.Row {
		return r0
	})
}

func (f *DBQueryRowContextFunc) nextHook() func(context.Context, string, ...interface{}) *sql.Row {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBQueryRowContextFunc) appendCall(r0 DBQueryRowContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBQueryRowContextFuncCall objects
// describing the invocations of this function.
func (f *DBQueryRowContextFunc) History() []DBQueryRowContextFuncCall {
	f.mutex.Lock()
	history := make([]DBQueryRowContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBQueryRowContextFuncCall is an object that describes an invocation of
// method QueryRowContext on an instance of MockDB.
type DBQueryRowContextFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *sql.Row
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c DBQueryRowContextFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBQueryRowContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBReposFunc describes the behavior when the Repos method of the parent
// MockDB instance is invoked.
type DBReposFunc struct {
	defaultHook func() RepoStore
	hooks       []func() RepoStore
	history     []DBReposFuncCall
	mutex       sync.Mutex
}

// Repos delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) Repos() RepoStore {
	r0 := m.ReposFunc.nextHook()()
	m.ReposFunc.appendCall(DBReposFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Repos method of the
// parent MockDB instance is invoked and the hook queue is empty.
func (f *DBReposFunc) SetDefaultHook(hook func() RepoStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Repos method of the parent MockDB instance invokes the hook at the front
// of the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *DBReposFunc) PushHook(hook func() RepoStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBReposFunc) SetDefaultReturn(r0 RepoStore) {
	f.SetDefaultHook(func() RepoStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBReposFunc) PushReturn(r0 RepoStore) {
	f.PushHook(func() RepoStore {
		return r0
	})
}

func (f *DBReposFunc) nextHook() func() RepoStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBReposFunc) appendCall(r0 DBReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBReposFuncCall objects describing the
// invocations of this function.
func (f *DBReposFunc) History() []DBReposFuncCall {
	f.mutex.Lock()
	history := make([]DBReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBReposFuncCall is an object that describes an invocation of method Repos
// on an instance of MockDB.
type DBReposFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 RepoStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBReposFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBSavedSearchesFunc describes the behavior when the SavedSearches method
// of the parent MockDB instance is invoked.
type DBSavedSearchesFunc struct {
	defaultHook func() SavedSearchStore
	hooks       []func() SavedSearchStore
	history     []DBSavedSearchesFuncCall
	mutex       sync.Mutex
}

// SavedSearches delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) SavedSearches() SavedSearchStore {
	r0 := m.SavedSearchesFunc.nextHook()()
	m.SavedSearchesFunc.appendCall(DBSavedSearchesFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the SavedSearches method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBSavedSearchesFunc) SetDefaultHook(hook func() SavedSearchStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SavedSearches method of the parent MockDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBSavedSearchesFunc) PushHook(hook func() SavedSearchStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBSavedSearchesFunc) SetDefaultReturn(r0 SavedSearchStore) {
	f.SetDefaultHook(func() SavedSearchStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBSavedSearchesFunc) PushReturn(r0 SavedSearchStore) {
	f.PushHook(func() SavedSearchStore {
		return r0
	})
}

func (f *DBSavedSearchesFunc) nextHook() func() SavedSearchStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBSavedSearchesFunc) appendCall(r0 DBSavedSearchesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBSavedSearchesFuncCall objects describing
// the invocations of this function.
func (f *DBSavedSearchesFunc) History() []DBSavedSearchesFuncCall {
	f.mutex.Lock()
	history := make([]DBSavedSearchesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBSavedSearchesFuncCall is an object that describes an invocation of
// method SavedSearches on an instance of MockDB.
type DBSavedSearchesFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 SavedSearchStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBSavedSearchesFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBSavedSearchesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBSearchContextsFunc describes the behavior when the SearchContexts
// method of the parent MockDB instance is invoked.
type DBSearchContextsFunc struct {
	defaultHook func() SearchContextsStore
	hooks       []func() SearchContextsStore
	history     []DBSearchContextsFuncCall
	mutex       sync.Mutex
}

// SearchContexts delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) SearchContexts() SearchContextsStore {
	r0 := m.SearchContextsFunc.nextHook()()
	m.SearchContextsFunc.appendCall(DBSearchContextsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the SearchContexts
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBSearchContextsFunc) SetDefaultHook(hook func() SearchContextsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SearchContexts method of the parent MockDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBSearchContextsFunc) PushHook(hook func() SearchContextsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBSearchContextsFunc) SetDefaultReturn(r0 SearchContextsStore) {
	f.SetDefaultHook(func() SearchContextsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBSearchContextsFunc) PushReturn(r0 SearchContextsStore) {
	f.PushHook(func() SearchContextsStore {
		return r0
	})
}

func (f *DBSearchContextsFunc) nextHook() func() SearchContextsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBSearchContextsFunc) appendCall(r0 DBSearchContextsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBSearchContextsFuncCall objects describing
// the invocations of this function.
func (f *DBSearchContextsFunc) History() []DBSearchContextsFuncCall {
	f.mutex.Lock()
	history := make([]DBSearchContextsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBSearchContextsFuncCall is an object that describes an invocation of
// method SearchContexts on an instance of MockDB.
type DBSearchContextsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 SearchContextsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBSearchContextsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBSearchContextsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBSecurityEventLogsFunc describes the behavior when the SecurityEventLogs
// method of the parent MockDB instance is invoked.
type DBSecurityEventLogsFunc struct {
	defaultHook func() SecurityEventLogsStore
	hooks       []func() SecurityEventLogsStore
	history     []DBSecurityEventLogsFuncCall
	mutex       sync.Mutex
}

// SecurityEventLogs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) SecurityEventLogs() SecurityEventLogsStore {
	r0 := m.SecurityEventLogsFunc.nextHook()()
	m.SecurityEventLogsFunc.appendCall(DBSecurityEventLogsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the SecurityEventLogs
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBSecurityEventLogsFunc) SetDefaultHook(hook func() SecurityEventLogsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SecurityEventLogs method of the parent MockDB instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBSecurityEventLogsFunc) PushHook(hook func() SecurityEventLogsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBSecurityEventLogsFunc) SetDefaultReturn(r0 SecurityEventLogsStore) {
	f.SetDefaultHook(func() SecurityEventLogsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBSecurityEventLogsFunc) PushReturn(r0 SecurityEventLogsStore) {
	f.PushHook(func() SecurityEventLogsStore {
		return r0
	})
}

func (f *DBSecurityEventLogsFunc) nextHook() func() SecurityEventLogsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBSecurityEventLogsFunc) appendCall(r0 DBSecurityEventLogsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBSecurityEventLogsFuncCall objects
// describing the invocations of this function.
func (f *DBSecurityEventLogsFunc) History() []DBSecurityEventLogsFuncCall {
	f.mutex.Lock()
	history := make([]DBSecurityEventLogsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBSecurityEventLogsFuncCall is an object that describes an invocation of
// method SecurityEventLogs on an instance of MockDB.
type DBSecurityEventLogsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 SecurityEventLogsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBSecurityEventLogsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBSecurityEventLogsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBSettingsFunc describes the behavior when the Settings method of the
// parent MockDB instance is invoked.
type DBSettingsFunc struct {
	defaultHook func() SettingsStore
	hooks       []func() SettingsStore
	history     []DBSettingsFuncCall
	mutex       sync.Mutex
}

// Settings delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) Settings() SettingsStore {
	r0 := m.SettingsFunc.nextHook()()
	m.SettingsFunc.appendCall(DBSettingsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Settings method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBSettingsFunc) SetDefaultHook(hook func() SettingsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Settings method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBSettingsFunc) PushHook(hook func() SettingsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBSettingsFunc) SetDefaultReturn(r0 SettingsStore) {
	f.SetDefaultHook(func() SettingsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBSettingsFunc) PushReturn(r0 SettingsStore) {
	f.PushHook(func() SettingsStore {
		return r0
	})
}

func (f *DBSettingsFunc) nextHook() func() SettingsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBSettingsFunc) appendCall(r0 DBSettingsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBSettingsFuncCall objects describing the
// invocations of this function.
func (f *DBSettingsFunc) History() []DBSettingsFuncCall {
	f.mutex.Lock()
	history := make([]DBSettingsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBSettingsFuncCall is an object that describes an invocation of method
// Settings on an instance of MockDB.
type DBSettingsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 SettingsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBSettingsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBSettingsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBSubRepoPermsFunc describes the behavior when the SubRepoPerms method of
// the parent MockDB instance is invoked.
type DBSubRepoPermsFunc struct {
	defaultHook func() SubRepoPermsStore
	hooks       []func() SubRepoPermsStore
	history     []DBSubRepoPermsFuncCall
	mutex       sync.Mutex
}

// SubRepoPerms delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) SubRepoPerms() SubRepoPermsStore {
	r0 := m.SubRepoPermsFunc.nextHook()()
	m.SubRepoPermsFunc.appendCall(DBSubRepoPermsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the SubRepoPerms method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBSubRepoPermsFunc) SetDefaultHook(hook func() SubRepoPermsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SubRepoPerms method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBSubRepoPermsFunc) PushHook(hook func() SubRepoPermsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBSubRepoPermsFunc) SetDefaultReturn(r0 SubRepoPermsStore) {
	f.SetDefaultHook(func() SubRepoPermsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBSubRepoPermsFunc) PushReturn(r0 SubRepoPermsStore) {
	f.PushHook(func() SubRepoPermsStore {
		return r0
	})
}

func (f *DBSubRepoPermsFunc) nextHook() func() SubRepoPermsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBSubRepoPermsFunc) appendCall(r0 DBSubRepoPermsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBSubRepoPermsFuncCall objects describing
// the invocations of this function.
func (f *DBSubRepoPermsFunc) History() []DBSubRepoPermsFuncCall {
	f.mutex.Lock()
	history := make([]DBSubRepoPermsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBSubRepoPermsFuncCall is an object that describes an invocation of
// method SubRepoPerms on an instance of MockDB.
type DBSubRepoPermsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 SubRepoPermsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBSubRepoPermsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBSubRepoPermsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBTemporarySettingsFunc describes the behavior when the TemporarySettings
// method of the parent MockDB instance is invoked.
type DBTemporarySettingsFunc struct {
	defaultHook func() TemporarySettingsStore
	hooks       []func() TemporarySettingsStore
	history     []DBTemporarySettingsFuncCall
	mutex       sync.Mutex
}

// TemporarySettings delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) TemporarySettings() TemporarySettingsStore {
	r0 := m.TemporarySettingsFunc.nextHook()()
	m.TemporarySettingsFunc.appendCall(DBTemporarySettingsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the TemporarySettings
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBTemporarySettingsFunc) SetDefaultHook(hook func() TemporarySettingsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TemporarySettings method of the parent MockDB instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBTemporarySettingsFunc) PushHook(hook func() TemporarySettingsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBTemporarySettingsFunc) SetDefaultReturn(r0 TemporarySettingsStore) {
	f.SetDefaultHook(func() TemporarySettingsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBTemporarySettingsFunc) PushReturn(r0 TemporarySettingsStore) {
	f.PushHook(func() TemporarySettingsStore {
		return r0
	})
}

func (f *DBTemporarySettingsFunc) nextHook() func() TemporarySettingsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBTemporarySettingsFunc) appendCall(r0 DBTemporarySettingsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBTemporarySettingsFuncCall objects
// describing the invocations of this function.
func (f *DBTemporarySettingsFunc) History() []DBTemporarySettingsFuncCall {
	f.mutex.Lock()
	history := make([]DBTemporarySettingsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBTemporarySettingsFuncCall is an object that describes an invocation of
// method TemporarySettings on an instance of MockDB.
type DBTemporarySettingsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 TemporarySettingsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBTemporarySettingsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBTemporarySettingsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBTransactFunc describes the behavior when the Transact method of the
// parent MockDB instance is invoked.
type DBTransactFunc struct {
	defaultHook func(context.Context) (DB, error)
	hooks       []func(context.Context) (DB, error)
	history     []DBTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) Transact(v0 context.Context) (DB, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(DBTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBTransactFunc) SetDefaultHook(hook func(context.Context) (DB, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBTransactFunc) PushHook(hook func(context.Context) (DB, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBTransactFunc) SetDefaultReturn(r0 DB, r1 error) {
	f.SetDefaultHook(func(context.Context) (DB, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBTransactFunc) PushReturn(r0 DB, r1 error) {
	f.PushHook(func(context.Context) (DB, error) {
		return r0, r1
	})
}

func (f *DBTransactFunc) nextHook() func(context.Context) (DB, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBTransactFunc) appendCall(r0 DBTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBTransactFuncCall objects describing the
// invocations of this function.
func (f *DBTransactFunc) History() []DBTransactFuncCall {
	f.mutex.Lock()
	history := make([]DBTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBTransactFuncCall is an object that describes an invocation of method
// Transact on an instance of MockDB.
type DBTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 DB
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DBUserCredentialsFunc describes the behavior when the UserCredentials
// method of the parent MockDB instance is invoked.
type DBUserCredentialsFunc struct {
	defaultHook func(encryption.Key) UserCredentialsStore
	hooks       []func(encryption.Key) UserCredentialsStore
	history     []DBUserCredentialsFuncCall
	mutex       sync.Mutex
}

// UserCredentials delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) UserCredentials(v0 encryption.Key) UserCredentialsStore {
	r0 := m.UserCredentialsFunc.nextHook()(v0)
	m.UserCredentialsFunc.appendCall(DBUserCredentialsFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UserCredentials
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBUserCredentialsFunc) SetDefaultHook(hook func(encryption.Key) UserCredentialsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UserCredentials method of the parent MockDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBUserCredentialsFunc) PushHook(hook func(encryption.Key) UserCredentialsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBUserCredentialsFunc) SetDefaultReturn(r0 UserCredentialsStore) {
	f.SetDefaultHook(func(encryption.Key) UserCredentialsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBUserCredentialsFunc) PushReturn(r0 UserCredentialsStore) {
	f.PushHook(func(encryption.Key) UserCredentialsStore {
		return r0
	})
}

func (f *DBUserCredentialsFunc) nextHook() func(encryption.Key) UserCredentialsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBUserCredentialsFunc) appendCall(r0 DBUserCredentialsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBUserCredentialsFuncCall objects
// describing the invocations of this function.
func (f *DBUserCredentialsFunc) History() []DBUserCredentialsFuncCall {
	f.mutex.Lock()
	history := make([]DBUserCredentialsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBUserCredentialsFuncCall is an object that describes an invocation of
// method UserCredentials on an instance of MockDB.
type DBUserCredentialsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 encryption.Key
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 UserCredentialsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBUserCredentialsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBUserCredentialsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBUserEmailsFunc describes the behavior when the UserEmails method of the
// parent MockDB instance is invoked.
type DBUserEmailsFunc struct {
	defaultHook func() UserEmailsStore
	hooks       []func() UserEmailsStore
	history     []DBUserEmailsFuncCall
	mutex       sync.Mutex
}

// UserEmails delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) UserEmails() UserEmailsStore {
	r0 := m.UserEmailsFunc.nextHook()()
	m.UserEmailsFunc.appendCall(DBUserEmailsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the UserEmails method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBUserEmailsFunc) SetDefaultHook(hook func() UserEmailsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UserEmails method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBUserEmailsFunc) PushHook(hook func() UserEmailsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBUserEmailsFunc) SetDefaultReturn(r0 UserEmailsStore) {
	f.SetDefaultHook(func() UserEmailsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBUserEmailsFunc) PushReturn(r0 UserEmailsStore) {
	f.PushHook(func() UserEmailsStore {
		return r0
	})
}

func (f *DBUserEmailsFunc) nextHook() func() UserEmailsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBUserEmailsFunc) appendCall(r0 DBUserEmailsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBUserEmailsFuncCall objects describing the
// invocations of this function.
func (f *DBUserEmailsFunc) History() []DBUserEmailsFuncCall {
	f.mutex.Lock()
	history := make([]DBUserEmailsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBUserEmailsFuncCall is an object that describes an invocation of method
// UserEmails on an instance of MockDB.
type DBUserEmailsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 UserEmailsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBUserEmailsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBUserEmailsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBUserExternalAccountsFunc describes the behavior when the
// UserExternalAccounts method of the parent MockDB instance is invoked.
type DBUserExternalAccountsFunc struct {
	defaultHook func() UserExternalAccountsStore
	hooks       []func() UserExternalAccountsStore
	history     []DBUserExternalAccountsFuncCall
	mutex       sync.Mutex
}

// UserExternalAccounts delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) UserExternalAccounts() UserExternalAccountsStore {
	r0 := m.UserExternalAccountsFunc.nextHook()()
	m.UserExternalAccountsFunc.appendCall(DBUserExternalAccountsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the UserExternalAccounts
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBUserExternalAccountsFunc) SetDefaultHook(hook func() UserExternalAccountsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UserExternalAccounts method of the parent MockDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *DBUserExternalAccountsFunc) PushHook(hook func() UserExternalAccountsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBUserExternalAccountsFunc) SetDefaultReturn(r0 UserExternalAccountsStore) {
	f.SetDefaultHook(func() UserExternalAccountsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBUserExternalAccountsFunc) PushReturn(r0 UserExternalAccountsStore) {
	f.PushHook(func() UserExternalAccountsStore {
		return r0
	})
}

func (f *DBUserExternalAccountsFunc) nextHook() func() UserExternalAccountsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBUserExternalAccountsFunc) appendCall(r0 DBUserExternalAccountsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBUserExternalAccountsFuncCall objects
// describing the invocations of this function.
func (f *DBUserExternalAccountsFunc) History() []DBUserExternalAccountsFuncCall {
	f.mutex.Lock()
	history := make([]DBUserExternalAccountsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBUserExternalAccountsFuncCall is an object that describes an invocation
// of method UserExternalAccounts on an instance of MockDB.
type DBUserExternalAccountsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 UserExternalAccountsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBUserExternalAccountsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBUserExternalAccountsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBUserPublicReposFunc describes the behavior when the UserPublicRepos
// method of the parent MockDB instance is invoked.
type DBUserPublicReposFunc struct {
	defaultHook func() UserPublicRepoStore
	hooks       []func() UserPublicRepoStore
	history     []DBUserPublicReposFuncCall
	mutex       sync.Mutex
}

// UserPublicRepos delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) UserPublicRepos() UserPublicRepoStore {
	r0 := m.UserPublicReposFunc.nextHook()()
	m.UserPublicReposFunc.appendCall(DBUserPublicReposFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the UserPublicRepos
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBUserPublicReposFunc) SetDefaultHook(hook func() UserPublicRepoStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UserPublicRepos method of the parent MockDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBUserPublicReposFunc) PushHook(hook func() UserPublicRepoStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBUserPublicReposFunc) SetDefaultReturn(r0 UserPublicRepoStore) {
	f.SetDefaultHook(func() UserPublicRepoStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBUserPublicReposFunc) PushReturn(r0 UserPublicRepoStore) {
	f.PushHook(func() UserPublicRepoStore {
		return r0
	})
}

func (f *DBUserPublicReposFunc) nextHook() func() UserPublicRepoStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBUserPublicReposFunc) appendCall(r0 DBUserPublicReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBUserPublicReposFuncCall objects
// describing the invocations of this function.
func (f *DBUserPublicReposFunc) History() []DBUserPublicReposFuncCall {
	f.mutex.Lock()
	history := make([]DBUserPublicReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBUserPublicReposFuncCall is an object that describes an invocation of
// method UserPublicRepos on an instance of MockDB.
type DBUserPublicReposFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 UserPublicRepoStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBUserPublicReposFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBUserPublicReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBUsersFunc describes the behavior when the Users method of the parent
// MockDB instance is invoked.
type DBUsersFunc struct {
	defaultHook func() UserStore
	hooks       []func() UserStore
	history     []DBUsersFuncCall
	mutex       sync.Mutex
}

// Users delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) Users() UserStore {
	r0 := m.UsersFunc.nextHook()()
	m.UsersFunc.appendCall(DBUsersFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Users method of the
// parent MockDB instance is invoked and the hook queue is empty.
func (f *DBUsersFunc) SetDefaultHook(hook func() UserStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Users method of the parent MockDB instance invokes the hook at the front
// of the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *DBUsersFunc) PushHook(hook func() UserStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBUsersFunc) SetDefaultReturn(r0 UserStore) {
	f.SetDefaultHook(func() UserStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBUsersFunc) PushReturn(r0 UserStore) {
	f.PushHook(func() UserStore {
		return r0
	})
}

func (f *DBUsersFunc) nextHook() func() UserStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBUsersFunc) appendCall(r0 DBUsersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBUsersFuncCall objects describing the
// invocations of this function.
func (f *DBUsersFunc) History() []DBUsersFuncCall {
	f.mutex.Lock()
	history := make([]DBUsersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBUsersFuncCall is an object that describes an invocation of method Users
// on an instance of MockDB.
type DBUsersFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 UserStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBUsersFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBUsersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBWebhookLogsFunc describes the behavior when the WebhookLogs method of
// the parent MockDB instance is invoked.
type DBWebhookLogsFunc struct {
	defaultHook func(encryption.Key) WebhookLogStore
	hooks       []func(encryption.Key) WebhookLogStore
	history     []DBWebhookLogsFuncCall
	mutex       sync.Mutex
}

// WebhookLogs delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) WebhookLogs(v0 encryption.Key) WebhookLogStore {
	r0 := m.WebhookLogsFunc.nextHook()(v0)
	m.WebhookLogsFunc.appendCall(DBWebhookLogsFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WebhookLogs method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBWebhookLogsFunc) SetDefaultHook(hook func(encryption.Key) WebhookLogStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WebhookLogs method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBWebhookLogsFunc) PushHook(hook func(encryption.Key) WebhookLogStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBWebhookLogsFunc) SetDefaultReturn(r0 WebhookLogStore) {
	f.SetDefaultHook(func(encryption.Key) WebhookLogStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBWebhookLogsFunc) PushReturn(r0 WebhookLogStore) {
	f.PushHook(func(encryption.Key) WebhookLogStore {
		return r0
	})
}

func (f *DBWebhookLogsFunc) nextHook() func(encryption.Key) WebhookLogStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBWebhookLogsFunc) appendCall(r0 DBWebhookLogsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBWebhookLogsFuncCall objects describing
// the invocations of this function.
func (f *DBWebhookLogsFunc) History() []DBWebhookLogsFuncCall {
	f.mutex.Lock()
	history := make([]DBWebhookLogsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBWebhookLogsFuncCall is an object that describes an invocation of method
// WebhookLogs on an instance of MockDB.
type DBWebhookLogsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 encryption.Key
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 WebhookLogStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBWebhookLogsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBWebhookLogsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockEventLogStore is a mock implementation of the EventLogStore interface
// (from the package github.com/sourcegraph/sourcegraph/internal/database)
// used for unit testing.
type MockEventLogStore struct {
	// AggregatedCodeIntelEventsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// AggregatedCodeIntelEvents.
	AggregatedCodeIntelEventsFunc *EventLogStoreAggregatedCodeIntelEventsFunc
	// AggregatedCodeIntelInvestigationEventsFunc is an instance of a mock
	// function object controlling the behavior of the method
	// AggregatedCodeIntelInvestigationEvents.
	AggregatedCodeIntelInvestigationEventsFunc *EventLogStoreAggregatedCodeIntelInvestigationEventsFunc
	// AggregatedSearchEventsFunc is an instance of a mock function object
	// controlling the behavior of the method AggregatedSearchEvents.
	AggregatedSearchEventsFunc *EventLogStoreAggregatedSearchEventsFunc
	// BulkInsertFunc is an instance of a mock function object controlling
	// the behavior of the method BulkInsert.
	BulkInsertFunc *EventLogStoreBulkInsertFunc
	// CodeIntelligenceCrossRepositoryWAUsFunc is an instance of a mock
	// function object controlling the behavior of the method
	// CodeIntelligenceCrossRepositoryWAUs.
	CodeIntelligenceCrossRepositoryWAUsFunc *EventLogStoreCodeIntelligenceCrossRepositoryWAUsFunc
	// CodeIntelligencePreciseCrossRepositoryWAUsFunc is an instance of a
	// mock function object controlling the behavior of the method
	// CodeIntelligencePreciseCrossRepositoryWAUs.
	CodeIntelligencePreciseCrossRepositoryWAUsFunc *EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFunc
	// CodeIntelligencePreciseWAUsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// CodeIntelligencePreciseWAUs.
	CodeIntelligencePreciseWAUsFunc *EventLogStoreCodeIntelligencePreciseWAUsFunc
	// CodeIntelligenceRepositoryCountsFunc is an instance of a mock
	// function object controlling the behavior of the method
	// CodeIntelligenceRepositoryCounts.
	CodeIntelligenceRepositoryCountsFunc *EventLogStoreCodeIntelligenceRepositoryCountsFunc
	// CodeIntelligenceRepositoryCountsByLanguageFunc is an instance of a
	// mock function object controlling the behavior of the method
	// CodeIntelligenceRepositoryCountsByLanguage.
	CodeIntelligenceRepositoryCountsByLanguageFunc *EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFunc
	// CodeIntelligenceSearchBasedCrossRepositoryWAUsFunc is an instance of
	// a mock function object controlling the behavior of the method
	// CodeIntelligenceSearchBasedCrossRepositoryWAUs.
	CodeIntelligenceSearchBasedCrossRepositoryWAUsFunc *EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFunc
	// CodeIntelligenceSearchBasedWAUsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// CodeIntelligenceSearchBasedWAUs.
	CodeIntelligenceSearchBasedWAUsFunc *EventLogStoreCodeIntelligenceSearchBasedWAUsFunc
	// CodeIntelligenceSettingsPageViewCountFunc is an instance of a mock
	// function object controlling the behavior of the method
	// CodeIntelligenceSettingsPageViewCount.
	CodeIntelligenceSettingsPageViewCountFunc *EventLogStoreCodeIntelligenceSettingsPageViewCountFunc
	// CodeIntelligenceWAUsFunc is an instance of a mock function object
	// controlling the behavior of the method CodeIntelligenceWAUs.
	CodeIntelligenceWAUsFunc *EventLogStoreCodeIntelligenceWAUsFunc
	// CountByUserIDFunc is an instance of a mock function object
	// controlling the behavior of the method CountByUserID.
	CountByUserIDFunc *EventLogStoreCountByUserIDFunc
	// CountByUserIDAndEventNameFunc is an instance of a mock function
	// object controlling the behavior of the method
	// CountByUserIDAndEventName.
	CountByUserIDAndEventNameFunc *EventLogStoreCountByUserIDAndEventNameFunc
	// CountByUserIDAndEventNamePrefixFunc is an instance of a mock function
	// object controlling the behavior of the method
	// CountByUserIDAndEventNamePrefix.
	CountByUserIDAndEventNamePrefixFunc *EventLogStoreCountByUserIDAndEventNamePrefixFunc
	// CountByUserIDAndEventNamesFunc is an instance of a mock function
	// object controlling the behavior of the method
	// CountByUserIDAndEventNames.
	CountByUserIDAndEventNamesFunc *EventLogStoreCountByUserIDAndEventNamesFunc
	// CountUniqueUsersAllFunc is an instance of a mock function object
	// controlling the behavior of the method CountUniqueUsersAll.
	CountUniqueUsersAllFunc *EventLogStoreCountUniqueUsersAllFunc
	// CountUniqueUsersByEventNameFunc is an instance of a mock function
	// object controlling the behavior of the method
	// CountUniqueUsersByEventName.
	CountUniqueUsersByEventNameFunc *EventLogStoreCountUniqueUsersByEventNameFunc
	// CountUniqueUsersByEventNamePrefixFunc is an instance of a mock
	// function object controlling the behavior of the method
	// CountUniqueUsersByEventNamePrefix.
	CountUniqueUsersByEventNamePrefixFunc *EventLogStoreCountUniqueUsersByEventNamePrefixFunc
	// CountUniqueUsersByEventNamesFunc is an instance of a mock function
	// object controlling the behavior of the method
	// CountUniqueUsersByEventNames.
	CountUniqueUsersByEventNamesFunc *EventLogStoreCountUniqueUsersByEventNamesFunc
	// CountUniqueUsersPerPeriodFunc is an instance of a mock function
	// object controlling the behavior of the method
	// CountUniqueUsersPerPeriod.
	CountUniqueUsersPerPeriodFunc *EventLogStoreCountUniqueUsersPerPeriodFunc
	// CountUsersWithSettingFunc is an instance of a mock function object
	// controlling the behavior of the method CountUsersWithSetting.
	CountUsersWithSettingFunc *EventLogStoreCountUsersWithSettingFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *EventLogStoreDoneFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *EventLogStoreHandleFunc
	// InsertFunc is an instance of a mock function object controlling the
	// behavior of the method Insert.
	InsertFunc *EventLogStoreInsertFunc
	// LatestPingFunc is an instance of a mock function object controlling
	// the behavior of the method LatestPing.
	LatestPingFunc *EventLogStoreLatestPingFunc
	// ListAllFunc is an instance of a mock function object controlling the
	// behavior of the method ListAll.
	ListAllFunc *EventLogStoreListAllFunc
	// ListExportableEventsFunc is an instance of a mock function object
	// controlling the behavior of the method ListExportableEvents.
	ListExportableEventsFunc *EventLogStoreListExportableEventsFunc
	// ListUniqueUsersAllFunc is an instance of a mock function object
	// controlling the behavior of the method ListUniqueUsersAll.
	ListUniqueUsersAllFunc *EventLogStoreListUniqueUsersAllFunc
	// MaxTimestampByUserIDFunc is an instance of a mock function object
	// controlling the behavior of the method MaxTimestampByUserID.
	MaxTimestampByUserIDFunc *EventLogStoreMaxTimestampByUserIDFunc
	// MaxTimestampByUserIDAndSourceFunc is an instance of a mock function
	// object controlling the behavior of the method
	// MaxTimestampByUserIDAndSource.
	MaxTimestampByUserIDAndSourceFunc *EventLogStoreMaxTimestampByUserIDAndSourceFunc
	// RequestsByLanguageFunc is an instance of a mock function object
	// controlling the behavior of the method RequestsByLanguage.
	RequestsByLanguageFunc *EventLogStoreRequestsByLanguageFunc
	// SiteUsageFunc is an instance of a mock function object controlling
	// the behavior of the method SiteUsage.
	SiteUsageFunc *EventLogStoreSiteUsageFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *EventLogStoreTransactFunc
	// UsersUsageCountsFunc is an instance of a mock function object
	// controlling the behavior of the method UsersUsageCounts.
	UsersUsageCountsFunc *EventLogStoreUsersUsageCountsFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *EventLogStoreWithFunc
}

// NewMockEventLogStore creates a new mock of the EventLogStore interface.
// All methods return zero values for all results, unless overwritten.
func NewMockEventLogStore() *MockEventLogStore {
	return &MockEventLogStore{
		AggregatedCodeIntelEventsFunc: &EventLogStoreAggregatedCodeIntelEventsFunc{
			defaultHook: func(context.Context) (r0 []types.CodeIntelAggregatedEvent, r1 error) {
				return
			},
		},
		AggregatedCodeIntelInvestigationEventsFunc: &EventLogStoreAggregatedCodeIntelInvestigationEventsFunc{
			defaultHook: func(context.Context) (r0 []types.CodeIntelAggregatedInvestigationEvent, r1 error) {
				return
			},
		},
		AggregatedSearchEventsFunc: &EventLogStoreAggregatedSearchEventsFunc{
			defaultHook: func(context.Context, time.Time) (r0 []types.SearchAggregatedEvent, r1 error) {
				return
			},
		},
		BulkInsertFunc: &EventLogStoreBulkInsertFunc{
			defaultHook: func(context.Context, []*Event) (r0 error) {
				return
			},
		},
		CodeIntelligenceCrossRepositoryWAUsFunc: &EventLogStoreCodeIntelligenceCrossRepositoryWAUsFunc{
			defaultHook: func(context.Context) (r0 int, r1 error) {
				return
			},
		},
		CodeIntelligencePreciseCrossRepositoryWAUsFunc: &EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFunc{
			defaultHook: func(context.Context) (r0 int, r1 error) {
				return
			},
		},
		CodeIntelligencePreciseWAUsFunc: &EventLogStoreCodeIntelligencePreciseWAUsFunc{
			defaultHook: func(context.Context) (r0 int, r1 error) {
				return
			},
		},
		CodeIntelligenceRepositoryCountsFunc: &EventLogStoreCodeIntelligenceRepositoryCountsFunc{
			defaultHook: func(context.Context) (r0 CodeIntelligenceRepositoryCounts, r1 error) {
				return
			},
		},
		CodeIntelligenceRepositoryCountsByLanguageFunc: &EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFunc{
			defaultHook: func(context.Context) (r0 map[string]CodeIntelligenceRepositoryCountsForLanguage, r1 error) {
				return
			},
		},
		CodeIntelligenceSearchBasedCrossRepositoryWAUsFunc: &EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFunc{
			defaultHook: func(context.Context) (r0 int, r1 error) {
				return
			},
		},
		CodeIntelligenceSearchBasedWAUsFunc: &EventLogStoreCodeIntelligenceSearchBasedWAUsFunc{
			defaultHook: func(context.Context) (r0 int, r1 error) {
				return
			},
		},
		CodeIntelligenceSettingsPageViewCountFunc: &EventLogStoreCodeIntelligenceSettingsPageViewCountFunc{
			defaultHook: func(context.Context) (r0 int, r1 error) {
				return
			},
		},
		CodeIntelligenceWAUsFunc: &EventLogStoreCodeIntelligenceWAUsFunc{
			defaultHook: func(context.Context) (r0 int, r1 error) {
				return
			},
		},
		CountByUserIDFunc: &EventLogStoreCountByUserIDFunc{
			defaultHook: func(context.Context, int32) (r0 int, r1 error) {
				return
			},
		},
		CountByUserIDAndEventNameFunc: &EventLogStoreCountByUserIDAndEventNameFunc{
			defaultHook: func(context.Context, int32, string) (r0 int, r1 error) {
				return
			},
		},
		CountByUserIDAndEventNamePrefixFunc: &EventLogStoreCountByUserIDAndEventNamePrefixFunc{
			defaultHook: func(context.Context, int32, string) (r0 int, r1 error) {
				return
			},
		},
		CountByUserIDAndEventNamesFunc: &EventLogStoreCountByUserIDAndEventNamesFunc{
			defaultHook: func(context.Context, int32, []string) (r0 int, r1 error) {
				return
			},
		},
		CountUniqueUsersAllFunc: &EventLogStoreCountUniqueUsersAllFunc{
			defaultHook: func(context.Context, time.Time, time.Time) (r0 int, r1 error) {
				return
			},
		},
		CountUniqueUsersByEventNameFunc: &EventLogStoreCountUniqueUsersByEventNameFunc{
			defaultHook: func(context.Context, time.Time, time.Time, string) (r0 int, r1 error) {
				return
			},
		},
		CountUniqueUsersByEventNamePrefixFunc: &EventLogStoreCountUniqueUsersByEventNamePrefixFunc{
			defaultHook: func(context.Context, time.Time, time.Time, string) (r0 int, r1 error) {
				return
			},
		},
		CountUniqueUsersByEventNamesFunc: &EventLogStoreCountUniqueUsersByEventNamesFunc{
			defaultHook: func(context.Context, time.Time, time.Time, []string) (r0 int, r1 error) {
				return
			},
		},
		CountUniqueUsersPerPeriodFunc: &EventLogStoreCountUniqueUsersPerPeriodFunc{
			defaultHook: func(context.Context, PeriodType, time.Time, int, *CountUniqueUsersOptions) (r0 []UsageValue, r1 error) {
				return
			},
		},
		CountUsersWithSettingFunc: &EventLogStoreCountUsersWithSettingFunc{
			defaultHook: func(context.Context, string, interface{}) (r0 int, r1 error) {
				return
			},
		},
		DoneFunc: &EventLogStoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		HandleFunc: &EventLogStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		InsertFunc: &EventLogStoreInsertFunc{
			defaultHook: func(context.Context, *Event) (r0 error) {
				return
			},
		},
		LatestPingFunc: &EventLogStoreLatestPingFunc{
			defaultHook: func(context.Context) (r0 *types.Event, r1 error) {
				return
			},
		},
		ListAllFunc: &EventLogStoreListAllFunc{
			defaultHook: func(context.Context, EventLogsListOptions) (r0 []*types.Event, r1 error) {
				return
			},
		},
		ListExportableEventsFunc: &EventLogStoreListExportableEventsFunc{
			defaultHook: func(context.Context, int, int) (r0 []*types.Event, r1 error) {
				return
			},
		},
		ListUniqueUsersAllFunc: &EventLogStoreListUniqueUsersAllFunc{
			defaultHook: func(context.Context, time.Time, time.Time) (r0 []int32, r1 error) {
				return
			},
		},
		MaxTimestampByUserIDFunc: &EventLogStoreMaxTimestampByUserIDFunc{
			defaultHook: func(context.Context, int32) (r0 *time.Time, r1 error) {
				return
			},
		},
		MaxTimestampByUserIDAndSourceFunc: &EventLogStoreMaxTimestampByUserIDAndSourceFunc{
			defaultHook: func(context.Context, int32, string) (r0 *time.Time, r1 error) {
				return
			},
		},
		RequestsByLanguageFunc: &EventLogStoreRequestsByLanguageFunc{
			defaultHook: func(context.Context) (r0 map[string]int, r1 error) {
				return
			},
		},
		SiteUsageFunc: &EventLogStoreSiteUsageFunc{
			defaultHook: func(context.Context) (r0 types.SiteUsageSummary, r1 error) {
				return
			},
		},
		TransactFunc: &EventLogStoreTransactFunc{
			defaultHook: func(context.Context) (r0 EventLogStore, r1 error) {
				return
			},
		},
		UsersUsageCountsFunc: &EventLogStoreUsersUsageCountsFunc{
			defaultHook: func(context.Context) (r0 []types.UserUsageCounts, r1 error) {
				return
			},
		},
		WithFunc: &EventLogStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 EventLogStore) {
				return
			},
		},
	}
}

// NewStrictMockEventLogStore creates a new mock of the EventLogStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockEventLogStore() *MockEventLogStore {
	return &MockEventLogStore{
		AggregatedCodeIntelEventsFunc: &EventLogStoreAggregatedCodeIntelEventsFunc{
			defaultHook: func(context.Context) ([]types.CodeIntelAggregatedEvent, error) {
				panic("unexpected invocation of MockEventLogStore.AggregatedCodeIntelEvents")
			},
		},
		AggregatedCodeIntelInvestigationEventsFunc: &EventLogStoreAggregatedCodeIntelInvestigationEventsFunc{
			defaultHook: func(context.Context) ([]types.CodeIntelAggregatedInvestigationEvent, error) {
				panic("unexpected invocation of MockEventLogStore.AggregatedCodeIntelInvestigationEvents")
			},
		},
		AggregatedSearchEventsFunc: &EventLogStoreAggregatedSearchEventsFunc{
			defaultHook: func(context.Context, time.Time) ([]types.SearchAggregatedEvent, error) {
				panic("unexpected invocation of MockEventLogStore.AggregatedSearchEvents")
			},
		},
		BulkInsertFunc: &EventLogStoreBulkInsertFunc{
			defaultHook: func(context.Context, []*Event) error {
				panic("unexpected invocation of MockEventLogStore.BulkInsert")
			},
		},
		CodeIntelligenceCrossRepositoryWAUsFunc: &EventLogStoreCodeIntelligenceCrossRepositoryWAUsFunc{
			defaultHook: func(context.Context) (int, error) {
				panic("unexpected invocation of MockEventLogStore.CodeIntelligenceCrossRepositoryWAUs")
			},
		},
		CodeIntelligencePreciseCrossRepositoryWAUsFunc: &EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFunc{
			defaultHook: func(context.Context) (int, error) {
				panic("unexpected invocation of MockEventLogStore.CodeIntelligencePreciseCrossRepositoryWAUs")
			},
		},
		CodeIntelligencePreciseWAUsFunc: &EventLogStoreCodeIntelligencePreciseWAUsFunc{
			defaultHook: func(context.Context) (int, error) {
				panic("unexpected invocation of MockEventLogStore.CodeIntelligencePreciseWAUs")
			},
		},
		CodeIntelligenceRepositoryCountsFunc: &EventLogStoreCodeIntelligenceRepositoryCountsFunc{
			defaultHook: func(context.Context) (CodeIntelligenceRepositoryCounts, error) {
				panic("unexpected invocation of MockEventLogStore.CodeIntelligenceRepositoryCounts")
			},
		},
		CodeIntelligenceRepositoryCountsByLanguageFunc: &EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFunc{
			defaultHook: func(context.Context) (map[string]CodeIntelligenceRepositoryCountsForLanguage, error) {
				panic("unexpected invocation of MockEventLogStore.CodeIntelligenceRepositoryCountsByLanguage")
			},
		},
		CodeIntelligenceSearchBasedCrossRepositoryWAUsFunc: &EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFunc{
			defaultHook: func(context.Context) (int, error) {
				panic("unexpected invocation of MockEventLogStore.CodeIntelligenceSearchBasedCrossRepositoryWAUs")
			},
		},
		CodeIntelligenceSearchBasedWAUsFunc: &EventLogStoreCodeIntelligenceSearchBasedWAUsFunc{
			defaultHook: func(context.Context) (int, error) {
				panic("unexpected invocation of MockEventLogStore.CodeIntelligenceSearchBasedWAUs")
			},
		},
		CodeIntelligenceSettingsPageViewCountFunc: &EventLogStoreCodeIntelligenceSettingsPageViewCountFunc{
			defaultHook: func(context.Context) (int, error) {
				panic("unexpected invocation of MockEventLogStore.CodeIntelligenceSettingsPageViewCount")
			},
		},
		CodeIntelligenceWAUsFunc: &EventLogStoreCodeIntelligenceWAUsFunc{
			defaultHook: func(context.Context) (int, error) {
				panic("unexpected invocation of MockEventLogStore.CodeIntelligenceWAUs")
			},
		},
		CountByUserIDFunc: &EventLogStoreCountByUserIDFunc{
			defaultHook: func(context.Context, int32) (int, error) {
				panic("unexpected invocation of MockEventLogStore.CountByUserID")
			},
		},
		CountByUserIDAndEventNameFunc: &EventLogStoreCountByUserIDAndEventNameFunc{
			defaultHook: func(context.Context, int32, string) (int, error) {
				panic("unexpected invocation of MockEventLogStore.CountByUserIDAndEventName")
			},
		},
		CountByUserIDAndEventNamePrefixFunc: &EventLogStoreCountByUserIDAndEventNamePrefixFunc{
			defaultHook: func(context.Context, int32, string) (int, error) {
				panic("unexpected invocation of MockEventLogStore.CountByUserIDAndEventNamePrefix")
			},
		},
		CountByUserIDAndEventNamesFunc: &EventLogStoreCountByUserIDAndEventNamesFunc{
			defaultHook: func(context.Context, int32, []string) (int, error) {
				panic("unexpected invocation of MockEventLogStore.CountByUserIDAndEventNames")
			},
		},
		CountUniqueUsersAllFunc: &EventLogStoreCountUniqueUsersAllFunc{
			defaultHook: func(context.Context, time.Time, time.Time) (int, error) {
				panic("unexpected invocation of MockEventLogStore.CountUniqueUsersAll")
			},
		},
		CountUniqueUsersByEventNameFunc: &EventLogStoreCountUniqueUsersByEventNameFunc{
			defaultHook: func(context.Context, time.Time, time.Time, string) (int, error) {
				panic("unexpected invocation of MockEventLogStore.CountUniqueUsersByEventName")
			},
		},
		CountUniqueUsersByEventNamePrefixFunc: &EventLogStoreCountUniqueUsersByEventNamePrefixFunc{
			defaultHook: func(context.Context, time.Time, time.Time, string) (int, error) {
				panic("unexpected invocation of MockEventLogStore.CountUniqueUsersByEventNamePrefix")
			},
		},
		CountUniqueUsersByEventNamesFunc: &EventLogStoreCountUniqueUsersByEventNamesFunc{
			defaultHook: func(context.Context, time.Time, time.Time, []string) (int, error) {
				panic("unexpected invocation of MockEventLogStore.CountUniqueUsersByEventNames")
			},
		},
		CountUniqueUsersPerPeriodFunc: &EventLogStoreCountUniqueUsersPerPeriodFunc{
			defaultHook: func(context.Context, PeriodType, time.Time, int, *CountUniqueUsersOptions) ([]UsageValue, error) {
				panic("unexpected invocation of MockEventLogStore.CountUniqueUsersPerPeriod")
			},
		},
		CountUsersWithSettingFunc: &EventLogStoreCountUsersWithSettingFunc{
			defaultHook: func(context.Context, string, interface{}) (int, error) {
				panic("unexpected invocation of MockEventLogStore.CountUsersWithSetting")
			},
		},
		DoneFunc: &EventLogStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockEventLogStore.Done")
			},
		},
		HandleFunc: &EventLogStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockEventLogStore.Handle")
			},
		},
		InsertFunc: &EventLogStoreInsertFunc{
			defaultHook: func(context.Context, *Event) error {
				panic("unexpected invocation of MockEventLogStore.Insert")
			},
		},
		LatestPingFunc: &EventLogStoreLatestPingFunc{
			defaultHook: func(context.Context) (*types.Event, error) {
				panic("unexpected invocation of MockEventLogStore.LatestPing")
			},
		},
		ListAllFunc: &EventLogStoreListAllFunc{
			defaultHook: func(context.Context, EventLogsListOptions) ([]*types.Event, error) {
				panic("unexpected invocation of MockEventLogStore.ListAll")
			},
		},
		ListExportableEventsFunc: &EventLogStoreListExportableEventsFunc{
			defaultHook: func(context.Context, int, int) ([]*types.Event, error) {
				panic("unexpected invocation of MockEventLogStore.ListExportableEvents")
			},
		},
		ListUniqueUsersAllFunc: &EventLogStoreListUniqueUsersAllFunc{
			defaultHook: func(context.Context, time.Time, time.Time) ([]int32, error) {
				panic("unexpected invocation of MockEventLogStore.ListUniqueUsersAll")
			},
		},
		MaxTimestampByUserIDFunc: &EventLogStoreMaxTimestampByUserIDFunc{
			defaultHook: func(context.Context, int32) (*time.Time, error) {
				panic("unexpected invocation of MockEventLogStore.MaxTimestampByUserID")
			},
		},
		MaxTimestampByUserIDAndSourceFunc: &EventLogStoreMaxTimestampByUserIDAndSourceFunc{
			defaultHook: func(context.Context, int32, string) (*time.Time, error) {
				panic("unexpected invocation of MockEventLogStore.MaxTimestampByUserIDAndSource")
			},
		},
		RequestsByLanguageFunc: &EventLogStoreRequestsByLanguageFunc{
			defaultHook: func(context.Context) (map[string]int, error) {
				panic("unexpected invocation of MockEventLogStore.RequestsByLanguage")
			},
		},
		SiteUsageFunc: &EventLogStoreSiteUsageFunc{
			defaultHook: func(context.Context) (types.SiteUsageSummary, error) {
				panic("unexpected invocation of MockEventLogStore.SiteUsage")
			},
		},
		TransactFunc: &EventLogStoreTransactFunc{
			defaultHook: func(context.Context) (EventLogStore, error) {
				panic("unexpected invocation of MockEventLogStore.Transact")
			},
		},
		UsersUsageCountsFunc: &EventLogStoreUsersUsageCountsFunc{
			defaultHook: func(context.Context) ([]types.UserUsageCounts, error) {
				panic("unexpected invocation of MockEventLogStore.UsersUsageCounts")
			},
		},
		WithFunc: &EventLogStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) EventLogStore {
				panic("unexpected invocation of MockEventLogStore.With")
			},
		},
	}
}

// NewMockEventLogStoreFrom creates a new mock of the MockEventLogStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockEventLogStoreFrom(i EventLogStore) *MockEventLogStore {
	return &MockEventLogStore{
		AggregatedCodeIntelEventsFunc: &EventLogStoreAggregatedCodeIntelEventsFunc{
			defaultHook: i.AggregatedCodeIntelEvents,
		},
		AggregatedCodeIntelInvestigationEventsFunc: &EventLogStoreAggregatedCodeIntelInvestigationEventsFunc{
			defaultHook: i.AggregatedCodeIntelInvestigationEvents,
		},
		AggregatedSearchEventsFunc: &EventLogStoreAggregatedSearchEventsFunc{
			defaultHook: i.AggregatedSearchEvents,
		},
		BulkInsertFunc: &EventLogStoreBulkInsertFunc{
			defaultHook: i.BulkInsert,
		},
		CodeIntelligenceCrossRepositoryWAUsFunc: &EventLogStoreCodeIntelligenceCrossRepositoryWAUsFunc{
			defaultHook: i.CodeIntelligenceCrossRepositoryWAUs,
		},
		CodeIntelligencePreciseCrossRepositoryWAUsFunc: &EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFunc{
			defaultHook: i.CodeIntelligencePreciseCrossRepositoryWAUs,
		},
		CodeIntelligencePreciseWAUsFunc: &EventLogStoreCodeIntelligencePreciseWAUsFunc{
			defaultHook: i.CodeIntelligencePreciseWAUs,
		},
		CodeIntelligenceRepositoryCountsFunc: &EventLogStoreCodeIntelligenceRepositoryCountsFunc{
			defaultHook: i.CodeIntelligenceRepositoryCounts,
		},
		CodeIntelligenceRepositoryCountsByLanguageFunc: &EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFunc{
			defaultHook: i.CodeIntelligenceRepositoryCountsByLanguage,
		},
		CodeIntelligenceSearchBasedCrossRepositoryWAUsFunc: &EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFunc{
			defaultHook: i.CodeIntelligenceSearchBasedCrossRepositoryWAUs,
		},
		CodeIntelligenceSearchBasedWAUsFunc: &EventLogStoreCodeIntelligenceSearchBasedWAUsFunc{
			defaultHook: i.CodeIntelligenceSearchBasedWAUs,
		},
		CodeIntelligenceSettingsPageViewCountFunc: &EventLogStoreCodeIntelligenceSettingsPageViewCountFunc{
			defaultHook: i.CodeIntelligenceSettingsPageViewCount,
		},
		CodeIntelligenceWAUsFunc: &EventLogStoreCodeIntelligenceWAUsFunc{
			defaultHook: i.CodeIntelligenceWAUs,
		},
		CountByUserIDFunc: &EventLogStoreCountByUserIDFunc{
			defaultHook: i.CountByUserID,
		},
		CountByUserIDAndEventNameFunc: &EventLogStoreCountByUserIDAndEventNameFunc{
			defaultHook: i.CountByUserIDAndEventName,
		},
		CountByUserIDAndEventNamePrefixFunc: &EventLogStoreCountByUserIDAndEventNamePrefixFunc{
			defaultHook: i.CountByUserIDAndEventNamePrefix,
		},
		CountByUserIDAndEventNamesFunc: &EventLogStoreCountByUserIDAndEventNamesFunc{
			defaultHook: i.CountByUserIDAndEventNames,
		},
		CountUniqueUsersAllFunc: &EventLogStoreCountUniqueUsersAllFunc{
			defaultHook: i.CountUniqueUsersAll,
		},
		CountUniqueUsersByEventNameFunc: &EventLogStoreCountUniqueUsersByEventNameFunc{
			defaultHook: i.CountUniqueUsersByEventName,
		},
		CountUniqueUsersByEventNamePrefixFunc: &EventLogStoreCountUniqueUsersByEventNamePrefixFunc{
			defaultHook: i.CountUniqueUsersByEventNamePrefix,
		},
		CountUniqueUsersByEventNamesFunc: &EventLogStoreCountUniqueUsersByEventNamesFunc{
			defaultHook: i.CountUniqueUsersByEventNames,
		},
		CountUniqueUsersPerPeriodFunc: &EventLogStoreCountUniqueUsersPerPeriodFunc{
			defaultHook: i.CountUniqueUsersPerPeriod,
		},
		CountUsersWithSettingFunc: &EventLogStoreCountUsersWithSettingFunc{
			defaultHook: i.CountUsersWithSetting,
		},
		DoneFunc: &EventLogStoreDoneFunc{
			defaultHook: i.Done,
		},
		HandleFunc: &EventLogStoreHandleFunc{
			defaultHook: i.Handle,
		},
		InsertFunc: &EventLogStoreInsertFunc{
			defaultHook: i.Insert,
		},
		LatestPingFunc: &EventLogStoreLatestPingFunc{
			defaultHook: i.LatestPing,
		},
		ListAllFunc: &EventLogStoreListAllFunc{
			defaultHook: i.ListAll,
		},
		ListExportableEventsFunc: &EventLogStoreListExportableEventsFunc{
			defaultHook: i.ListExportableEvents,
		},
		ListUniqueUsersAllFunc: &EventLogStoreListUniqueUsersAllFunc{
			defaultHook: i.ListUniqueUsersAll,
		},
		MaxTimestampByUserIDFunc: &EventLogStoreMaxTimestampByUserIDFunc{
			defaultHook: i.MaxTimestampByUserID,
		},
		MaxTimestampByUserIDAndSourceFunc: &EventLogStoreMaxTimestampByUserIDAndSourceFunc{
			defaultHook: i.MaxTimestampByUserIDAndSource,
		},
		RequestsByLanguageFunc: &EventLogStoreRequestsByLanguageFunc{
			defaultHook: i.RequestsByLanguage,
		},
		SiteUsageFunc: &EventLogStoreSiteUsageFunc{
			defaultHook: i.SiteUsage,
		},
		TransactFunc: &EventLogStoreTransactFunc{
			defaultHook: i.Transact,
		},
		UsersUsageCountsFunc: &EventLogStoreUsersUsageCountsFunc{
			defaultHook: i.UsersUsageCounts,
		},
		WithFunc: &EventLogStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// EventLogStoreAggregatedCodeIntelEventsFunc describes the behavior when
// the AggregatedCodeIntelEvents method of the parent MockEventLogStore
// instance is invoked.
type EventLogStoreAggregatedCodeIntelEventsFunc struct {
	defaultHook func(context.Context) ([]types.CodeIntelAggregatedEvent, error)
	hooks       []func(context.Context) ([]types.CodeIntelAggregatedEvent, error)
	history     []EventLogStoreAggregatedCodeIntelEventsFuncCall
	mutex       sync.Mutex
}

// AggregatedCodeIntelEvents delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockEventLogStore) AggregatedCodeIntelEvents(v0 context.Context) ([]types.CodeIntelAggregatedEvent, error) {
	r0, r1 := m.AggregatedCodeIntelEventsFunc.nextHook()(v0)
	m.AggregatedCodeIntelEventsFunc.appendCall(EventLogStoreAggregatedCodeIntelEventsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// AggregatedCodeIntelEvents method of the parent MockEventLogStore instance
// is invoked and the hook queue is empty.
func (f *EventLogStoreAggregatedCodeIntelEventsFunc) SetDefaultHook(hook func(context.Context) ([]types.CodeIntelAggregatedEvent, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AggregatedCodeIntelEvents method of the parent MockEventLogStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EventLogStoreAggregatedCodeIntelEventsFunc) PushHook(hook func(context.Context) ([]types.CodeIntelAggregatedEvent, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreAggregatedCodeIntelEventsFunc) SetDefaultReturn(r0 []types.CodeIntelAggregatedEvent, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]types.CodeIntelAggregatedEvent, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreAggregatedCodeIntelEventsFunc) PushReturn(r0 []types.CodeIntelAggregatedEvent, r1 error) {
	f.PushHook(func(context.Context) ([]types.CodeIntelAggregatedEvent, error) {
		return r0, r1
	})
}

func (f *EventLogStoreAggregatedCodeIntelEventsFunc) nextHook() func(context.Context) ([]types.CodeIntelAggregatedEvent, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreAggregatedCodeIntelEventsFunc) appendCall(r0 EventLogStoreAggregatedCodeIntelEventsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreAggregatedCodeIntelEventsFuncCall objects describing the
// invocations of this function.
func (f *EventLogStoreAggregatedCodeIntelEventsFunc) History() []EventLogStoreAggregatedCodeIntelEventsFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreAggregatedCodeIntelEventsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreAggregatedCodeIntelEventsFuncCall is an object that
// describes an invocation of method AggregatedCodeIntelEvents on an
// instance of MockEventLogStore.
type EventLogStoreAggregatedCodeIntelEventsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.CodeIntelAggregatedEvent
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreAggregatedCodeIntelEventsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreAggregatedCodeIntelEventsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreAggregatedCodeIntelInvestigationEventsFunc describes the
// behavior when the AggregatedCodeIntelInvestigationEvents method of the
// parent MockEventLogStore instance is invoked.
type EventLogStoreAggregatedCodeIntelInvestigationEventsFunc struct {
	defaultHook func(context.Context) ([]types.CodeIntelAggregatedInvestigationEvent, error)
	hooks       []func(context.Context) ([]types.CodeIntelAggregatedInvestigationEvent, error)
	history     []EventLogStoreAggregatedCodeIntelInvestigationEventsFuncCall
	mutex       sync.Mutex
}

// AggregatedCodeIntelInvestigationEvents delegates to the next hook
// function in the queue and stores the parameter and result values of this
// invocation.
func (m *MockEventLogStore) AggregatedCodeIntelInvestigationEvents(v0 context.Context) ([]types.CodeIntelAggregatedInvestigationEvent, error) {
	r0, r1 := m.AggregatedCodeIntelInvestigationEventsFunc.nextHook()(v0)
	m.AggregatedCodeIntelInvestigationEventsFunc.appendCall(EventLogStoreAggregatedCodeIntelInvestigationEventsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// AggregatedCodeIntelInvestigationEvents method of the parent
// MockEventLogStore instance is invoked and the hook queue is empty.
func (f *EventLogStoreAggregatedCodeIntelInvestigationEventsFunc) SetDefaultHook(hook func(context.Context) ([]types.CodeIntelAggregatedInvestigationEvent, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AggregatedCodeIntelInvestigationEvents method of the parent
// MockEventLogStore instance invokes the hook at the front of the queue and
// discards it. After the queue is empty, the default hook function is
// invoked for any future action.
func (f *EventLogStoreAggregatedCodeIntelInvestigationEventsFunc) PushHook(hook func(context.Context) ([]types.CodeIntelAggregatedInvestigationEvent, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreAggregatedCodeIntelInvestigationEventsFunc) SetDefaultReturn(r0 []types.CodeIntelAggregatedInvestigationEvent, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]types.CodeIntelAggregatedInvestigationEvent, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreAggregatedCodeIntelInvestigationEventsFunc) PushReturn(r0 []types.CodeIntelAggregatedInvestigationEvent, r1 error) {
	f.PushHook(func(context.Context) ([]types.CodeIntelAggregatedInvestigationEvent, error) {
		return r0, r1
	})
}

func (f *EventLogStoreAggregatedCodeIntelInvestigationEventsFunc) nextHook() func(context.Context) ([]types.CodeIntelAggregatedInvestigationEvent, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreAggregatedCodeIntelInvestigationEventsFunc) appendCall(r0 EventLogStoreAggregatedCodeIntelInvestigationEventsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreAggregatedCodeIntelInvestigationEventsFuncCall objects
// describing the invocations of this function.
func (f *EventLogStoreAggregatedCodeIntelInvestigationEventsFunc) History() []EventLogStoreAggregatedCodeIntelInvestigationEventsFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreAggregatedCodeIntelInvestigationEventsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreAggregatedCodeIntelInvestigationEventsFuncCall is an object
// that describes an invocation of method
// AggregatedCodeIntelInvestigationEvents on an instance of
// MockEventLogStore.
type EventLogStoreAggregatedCodeIntelInvestigationEventsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.CodeIntelAggregatedInvestigationEvent
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreAggregatedCodeIntelInvestigationEventsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreAggregatedCodeIntelInvestigationEventsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreAggregatedSearchEventsFunc describes the behavior when the
// AggregatedSearchEvents method of the parent MockEventLogStore instance is
// invoked.
type EventLogStoreAggregatedSearchEventsFunc struct {
	defaultHook func(context.Context, time.Time) ([]types.SearchAggregatedEvent, error)
	hooks       []func(context.Context, time.Time) ([]types.SearchAggregatedEvent, error)
	history     []EventLogStoreAggregatedSearchEventsFuncCall
	mutex       sync.Mutex
}

// AggregatedSearchEvents delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockEventLogStore) AggregatedSearchEvents(v0 context.Context, v1 time.Time) ([]types.SearchAggregatedEvent, error) {
	r0, r1 := m.AggregatedSearchEventsFunc.nextHook()(v0, v1)
	m.AggregatedSearchEventsFunc.appendCall(EventLogStoreAggregatedSearchEventsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// AggregatedSearchEvents method of the parent MockEventLogStore instance is
// invoked and the hook queue is empty.
func (f *EventLogStoreAggregatedSearchEventsFunc) SetDefaultHook(hook func(context.Context, time.Time) ([]types.SearchAggregatedEvent, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AggregatedSearchEvents method of the parent MockEventLogStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EventLogStoreAggregatedSearchEventsFunc) PushHook(hook func(context.Context, time.Time) ([]types.SearchAggregatedEvent, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreAggregatedSearchEventsFunc) SetDefaultReturn(r0 []types.SearchAggregatedEvent, r1 error) {
	f.SetDefaultHook(func(context.Context, time.Time) ([]types.SearchAggregatedEvent, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreAggregatedSearchEventsFunc) PushReturn(r0 []types.SearchAggregatedEvent, r1 error) {
	f.PushHook(func(context.Context, time.Time) ([]types.SearchAggregatedEvent, error) {
		return r0, r1
	})
}

func (f *EventLogStoreAggregatedSearchEventsFunc) nextHook() func(context.Context, time.Time) ([]types.SearchAggregatedEvent, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreAggregatedSearchEventsFunc) appendCall(r0 EventLogStoreAggregatedSearchEventsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreAggregatedSearchEventsFuncCall
// objects describing the invocations of this function.
func (f *EventLogStoreAggregatedSearchEventsFunc) History() []EventLogStoreAggregatedSearchEventsFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreAggregatedSearchEventsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreAggregatedSearchEventsFuncCall is an object that describes
// an invocation of method AggregatedSearchEvents on an instance of
// MockEventLogStore.
type EventLogStoreAggregatedSearchEventsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.SearchAggregatedEvent
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreAggregatedSearchEventsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreAggregatedSearchEventsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreBulkInsertFunc describes the behavior when the BulkInsert
// method of the parent MockEventLogStore instance is invoked.
type EventLogStoreBulkInsertFunc struct {
	defaultHook func(context.Context, []*Event) error
	hooks       []func(context.Context, []*Event) error
	history     []EventLogStoreBulkInsertFuncCall
	mutex       sync.Mutex
}

// BulkInsert delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEventLogStore) BulkInsert(v0 context.Context, v1 []*Event) error {
	r0 := m.BulkInsertFunc.nextHook()(v0, v1)
	m.BulkInsertFunc.appendCall(EventLogStoreBulkInsertFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the BulkInsert method of
// the parent MockEventLogStore instance is invoked and the hook queue is
// empty.
func (f *EventLogStoreBulkInsertFunc) SetDefaultHook(hook func(context.Context, []*Event) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BulkInsert method of the parent MockEventLogStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EventLogStoreBulkInsertFunc) PushHook(hook func(context.Context, []*Event) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreBulkInsertFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []*Event) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreBulkInsertFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []*Event) error {
		return r0
	})
}

func (f *EventLogStoreBulkInsertFunc) nextHook() func(context.Context, []*Event) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreBulkInsertFunc) appendCall(r0 EventLogStoreBulkInsertFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreBulkInsertFuncCall objects
// describing the invocations of this function.
func (f *EventLogStoreBulkInsertFunc) History() []EventLogStoreBulkInsertFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreBulkInsertFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreBulkInsertFuncCall is an object that describes an invocation
// of method BulkInsert on an instance of MockEventLogStore.
type EventLogStoreBulkInsertFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []*Event
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreBulkInsertFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreBulkInsertFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EventLogStoreCodeIntelligenceCrossRepositoryWAUsFunc describes the
// behavior when the CodeIntelligenceCrossRepositoryWAUs method of the
// parent MockEventLogStore instance is invoked.
type EventLogStoreCodeIntelligenceCrossRepositoryWAUsFunc struct {
	defaultHook func(context.Context) (int, error)
	hooks       []func(context.Context) (int, error)
	history     []EventLogStoreCodeIntelligenceCrossRepositoryWAUsFuncCall
	mutex       sync.Mutex
}

// CodeIntelligenceCrossRepositoryWAUs delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockEventLogStore) CodeIntelligenceCrossRepositoryWAUs(v0 context.Context) (int, error) {
	r0, r1 := m.CodeIntelligenceCrossRepositoryWAUsFunc.nextHook()(v0)
	m.CodeIntelligenceCrossRepositoryWAUsFunc.appendCall(EventLogStoreCodeIntelligenceCrossRepositoryWAUsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CodeIntelligenceCrossRepositoryWAUs method of the parent
// MockEventLogStore instance is invoked and the hook queue is empty.
func (f *EventLogStoreCodeIntelligenceCrossRepositoryWAUsFunc) SetDefaultHook(hook func(context.Context) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CodeIntelligenceCrossRepositoryWAUs method of the parent
// MockEventLogStore instance invokes the hook at the front of the queue and
// discards it. After the queue is empty, the default hook function is
// invoked for any future action.
func (f *EventLogStoreCodeIntelligenceCrossRepositoryWAUsFunc) PushHook(hook func(context.Context) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCodeIntelligenceCrossRepositoryWAUsFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCodeIntelligenceCrossRepositoryWAUsFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCodeIntelligenceCrossRepositoryWAUsFunc) nextHook() func(context.Context) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCodeIntelligenceCrossRepositoryWAUsFunc) appendCall(r0 EventLogStoreCodeIntelligenceCrossRepositoryWAUsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreCodeIntelligenceCrossRepositoryWAUsFuncCall objects
// describing the invocations of this function.
func (f *EventLogStoreCodeIntelligenceCrossRepositoryWAUsFunc) History() []EventLogStoreCodeIntelligenceCrossRepositoryWAUsFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCodeIntelligenceCrossRepositoryWAUsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCodeIntelligenceCrossRepositoryWAUsFuncCall is an object
// that describes an invocation of method
// CodeIntelligenceCrossRepositoryWAUs on an instance of MockEventLogStore.
type EventLogStoreCodeIntelligenceCrossRepositoryWAUsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCodeIntelligenceCrossRepositoryWAUsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCodeIntelligenceCrossRepositoryWAUsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFunc describes the
// behavior when the CodeIntelligencePreciseCrossRepositoryWAUs method of
// the parent MockEventLogStore instance is invoked.
type EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFunc struct {
	defaultHook func(context.Context) (int, error)
	hooks       []func(context.Context) (int, error)
	history     []EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFuncCall
	mutex       sync.Mutex
}

// CodeIntelligencePreciseCrossRepositoryWAUs delegates to the next hook
// function in the queue and stores the parameter and result values of this
// invocation.
func (m *MockEventLogStore) CodeIntelligencePreciseCrossRepositoryWAUs(v0 context.Context) (int, error) {
	r0, r1 := m.CodeIntelligencePreciseCrossRepositoryWAUsFunc.nextHook()(v0)
	m.CodeIntelligencePreciseCrossRepositoryWAUsFunc.appendCall(EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CodeIntelligencePreciseCrossRepositoryWAUs method of the parent
// MockEventLogStore instance is invoked and the hook queue is empty.
func (f *EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFunc) SetDefaultHook(hook func(context.Context) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CodeIntelligencePreciseCrossRepositoryWAUs method of the parent
// MockEventLogStore instance invokes the hook at the front of the queue and
// discards it. After the queue is empty, the default hook function is
// invoked for any future action.
func (f *EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFunc) PushHook(hook func(context.Context) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFunc) nextHook() func(context.Context) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFunc) appendCall(r0 EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFuncCall objects
// describing the invocations of this function.
func (f *EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFunc) History() []EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFuncCall is an
// object that describes an invocation of method
// CodeIntelligencePreciseCrossRepositoryWAUs on an instance of
// MockEventLogStore.
type EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreCodeIntelligencePreciseWAUsFunc describes the behavior when
// the CodeIntelligencePreciseWAUs method of the parent MockEventLogStore
// instance is invoked.
type EventLogStoreCodeIntelligencePreciseWAUsFunc struct {
	defaultHook func(context.Context) (int, error)
	hooks       []func(context.Context) (int, error)
	history     []EventLogStoreCodeIntelligencePreciseWAUsFuncCall
	mutex       sync.Mutex
}

// CodeIntelligencePreciseWAUs delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockEventLogStore) CodeIntelligencePreciseWAUs(v0 context.Context) (int, error) {
	r0, r1 := m.CodeIntelligencePreciseWAUsFunc.nextHook()(v0)
	m.CodeIntelligencePreciseWAUsFunc.appendCall(EventLogStoreCodeIntelligencePreciseWAUsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CodeIntelligencePreciseWAUs method of the parent MockEventLogStore
// instance is invoked and the hook queue is empty.
func (f *EventLogStoreCodeIntelligencePreciseWAUsFunc) SetDefaultHook(hook func(context.Context) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CodeIntelligencePreciseWAUs method of the parent MockEventLogStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *EventLogStoreCodeIntelligencePreciseWAUsFunc) PushHook(hook func(context.Context) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCodeIntelligencePreciseWAUsFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCodeIntelligencePreciseWAUsFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCodeIntelligencePreciseWAUsFunc) nextHook() func(context.Context) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCodeIntelligencePreciseWAUsFunc) appendCall(r0 EventLogStoreCodeIntelligencePreciseWAUsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreCodeIntelligencePreciseWAUsFuncCall objects describing the
// invocations of this function.
func (f *EventLogStoreCodeIntelligencePreciseWAUsFunc) History() []EventLogStoreCodeIntelligencePreciseWAUsFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCodeIntelligencePreciseWAUsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCodeIntelligencePreciseWAUsFuncCall is an object that
// describes an invocation of method CodeIntelligencePreciseWAUs on an
// instance of MockEventLogStore.
type EventLogStoreCodeIntelligencePreciseWAUsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCodeIntelligencePreciseWAUsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCodeIntelligencePreciseWAUsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreCodeIntelligenceRepositoryCountsFunc describes the behavior
// when the CodeIntelligenceRepositoryCounts method of the parent
// MockEventLogStore instance is invoked.
type EventLogStoreCodeIntelligenceRepositoryCountsFunc struct {
	defaultHook func(context.Context) (CodeIntelligenceRepositoryCounts, error)
	hooks       []func(context.Context) (CodeIntelligenceRepositoryCounts, error)
	history     []EventLogStoreCodeIntelligenceRepositoryCountsFuncCall
	mutex       sync.Mutex
}

// CodeIntelligenceRepositoryCounts delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockEventLogStore) CodeIntelligenceRepositoryCounts(v0 context.Context) (CodeIntelligenceRepositoryCounts, error) {
	r0, r1 := m.CodeIntelligenceRepositoryCountsFunc.nextHook()(v0)
	m.CodeIntelligenceRepositoryCountsFunc.appendCall(EventLogStoreCodeIntelligenceRepositoryCountsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CodeIntelligenceRepositoryCounts method of the parent MockEventLogStore
// instance is invoked and the hook queue is empty.
func (f *EventLogStoreCodeIntelligenceRepositoryCountsFunc) SetDefaultHook(hook func(context.Context) (CodeIntelligenceRepositoryCounts, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CodeIntelligenceRepositoryCounts method of the parent MockEventLogStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *EventLogStoreCodeIntelligenceRepositoryCountsFunc) PushHook(hook func(context.Context) (CodeIntelligenceRepositoryCounts, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCodeIntelligenceRepositoryCountsFunc) SetDefaultReturn(r0 CodeIntelligenceRepositoryCounts, r1 error) {
	f.SetDefaultHook(func(context.Context) (CodeIntelligenceRepositoryCounts, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCodeIntelligenceRepositoryCountsFunc) PushReturn(r0 CodeIntelligenceRepositoryCounts, r1 error) {
	f.PushHook(func(context.Context) (CodeIntelligenceRepositoryCounts, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCodeIntelligenceRepositoryCountsFunc) nextHook() func(context.Context) (CodeIntelligenceRepositoryCounts, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCodeIntelligenceRepositoryCountsFunc) appendCall(r0 EventLogStoreCodeIntelligenceRepositoryCountsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreCodeIntelligenceRepositoryCountsFuncCall objects describing
// the invocations of this function.
func (f *EventLogStoreCodeIntelligenceRepositoryCountsFunc) History() []EventLogStoreCodeIntelligenceRepositoryCountsFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCodeIntelligenceRepositoryCountsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCodeIntelligenceRepositoryCountsFuncCall is an object that
// describes an invocation of method CodeIntelligenceRepositoryCounts on an
// instance of MockEventLogStore.
type EventLogStoreCodeIntelligenceRepositoryCountsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 CodeIntelligenceRepositoryCounts
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCodeIntelligenceRepositoryCountsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCodeIntelligenceRepositoryCountsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFunc describes the
// behavior when the CodeIntelligenceRepositoryCountsByLanguage method of
// the parent MockEventLogStore instance is invoked.
type EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFunc struct {
	defaultHook func(context.Context) (map[string]CodeIntelligenceRepositoryCountsForLanguage, error)
	hooks       []func(context.Context) (map[string]CodeIntelligenceRepositoryCountsForLanguage, error)
	history     []EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFuncCall
	mutex       sync.Mutex
}

// CodeIntelligenceRepositoryCountsByLanguage delegates to the next hook
// function in the queue and stores the parameter and result values of this
// invocation.
func (m *MockEventLogStore) CodeIntelligenceRepositoryCountsByLanguage(v0 context.Context) (map[string]CodeIntelligenceRepositoryCountsForLanguage, error) {
	r0, r1 := m.CodeIntelligenceRepositoryCountsByLanguageFunc.nextHook()(v0)
	m.CodeIntelligenceRepositoryCountsByLanguageFunc.appendCall(EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CodeIntelligenceRepositoryCountsByLanguage method of the parent
// MockEventLogStore instance is invoked and the hook queue is empty.
func (f *EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFunc) SetDefaultHook(hook func(context.Context) (map[string]CodeIntelligenceRepositoryCountsForLanguage, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CodeIntelligenceRepositoryCountsByLanguage method of the parent
// MockEventLogStore instance invokes the hook at the front of the queue and
// discards it. After the queue is empty, the default hook function is
// invoked for any future action.
func (f *EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFunc) PushHook(hook func(context.Context) (map[string]CodeIntelligenceRepositoryCountsForLanguage, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFunc) SetDefaultReturn(r0 map[string]CodeIntelligenceRepositoryCountsForLanguage, r1 error) {
	f.SetDefaultHook(func(context.Context) (map[string]CodeIntelligenceRepositoryCountsForLanguage, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFunc) PushReturn(r0 map[string]CodeIntelligenceRepositoryCountsForLanguage, r1 error) {
	f.PushHook(func(context.Context) (map[string]CodeIntelligenceRepositoryCountsForLanguage, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFunc) nextHook() func(context.Context) (map[string]CodeIntelligenceRepositoryCountsForLanguage, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFunc) appendCall(r0 EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFuncCall objects
// describing the invocations of this function.
func (f *EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFunc) History() []EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFuncCall is an
// object that describes an invocation of method
// CodeIntelligenceRepositoryCountsByLanguage on an instance of
// MockEventLogStore.
type EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[string]CodeIntelligenceRepositoryCountsForLanguage
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFunc describes
// the behavior when the CodeIntelligenceSearchBasedCrossRepositoryWAUs
// method of the parent MockEventLogStore instance is invoked.
type EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFunc struct {
	defaultHook func(context.Context) (int, error)
	hooks       []func(context.Context) (int, error)
	history     []EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFuncCall
	mutex       sync.Mutex
}

// CodeIntelligenceSearchBasedCrossRepositoryWAUs delegates to the next hook
// function in the queue and stores the parameter and result values of this
// invocation.
func (m *MockEventLogStore) CodeIntelligenceSearchBasedCrossRepositoryWAUs(v0 context.Context) (int, error) {
	r0, r1 := m.CodeIntelligenceSearchBasedCrossRepositoryWAUsFunc.nextHook()(v0)
	m.CodeIntelligenceSearchBasedCrossRepositoryWAUsFunc.appendCall(EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CodeIntelligenceSearchBasedCrossRepositoryWAUs method of the parent
// MockEventLogStore instance is invoked and the hook queue is empty.
func (f *EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFunc) SetDefaultHook(hook func(context.Context) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CodeIntelligenceSearchBasedCrossRepositoryWAUs method of the parent
// MockEventLogStore instance invokes the hook at the front of the queue and
// discards it. After the queue is empty, the default hook function is
// invoked for any future action.
func (f *EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFunc) PushHook(hook func(context.Context) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFunc) nextHook() func(context.Context) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFunc) appendCall(r0 EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFuncCall
// objects describing the invocations of this function.
func (f *EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFunc) History() []EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFuncCall is an
// object that describes an invocation of method
// CodeIntelligenceSearchBasedCrossRepositoryWAUs on an instance of
// MockEventLogStore.
type EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreCodeIntelligenceSearchBasedWAUsFunc describes the behavior
// when the CodeIntelligenceSearchBasedWAUs method of the parent
// MockEventLogStore instance is invoked.
type EventLogStoreCodeIntelligenceSearchBasedWAUsFunc struct {
	defaultHook func(context.Context) (int, error)
	hooks       []func(context.Context) (int, error)
	history     []EventLogStoreCodeIntelligenceSearchBasedWAUsFuncCall
	mutex       sync.Mutex
}

// CodeIntelligenceSearchBasedWAUs delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockEventLogStore) CodeIntelligenceSearchBasedWAUs(v0 context.Context) (int, error) {
	r0, r1 := m.CodeIntelligenceSearchBasedWAUsFunc.nextHook()(v0)
	m.CodeIntelligenceSearchBasedWAUsFunc.appendCall(EventLogStoreCodeIntelligenceSearchBasedWAUsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CodeIntelligenceSearchBasedWAUs method of the parent MockEventLogStore
// instance is invoked and the hook queue is empty.
func (f *EventLogStoreCodeIntelligenceSearchBasedWAUsFunc) SetDefaultHook(hook func(context.Context) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CodeIntelligenceSearchBasedWAUs method of the parent MockEventLogStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *EventLogStoreCodeIntelligenceSearchBasedWAUsFunc) PushHook(hook func(context.Context) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCodeIntelligenceSearchBasedWAUsFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCodeIntelligenceSearchBasedWAUsFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCodeIntelligenceSearchBasedWAUsFunc) nextHook() func(context.Context) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCodeIntelligenceSearchBasedWAUsFunc) appendCall(r0 EventLogStoreCodeIntelligenceSearchBasedWAUsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreCodeIntelligenceSearchBasedWAUsFuncCall objects describing
// the invocations of this function.
func (f *EventLogStoreCodeIntelligenceSearchBasedWAUsFunc) History() []EventLogStoreCodeIntelligenceSearchBasedWAUsFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCodeIntelligenceSearchBasedWAUsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCodeIntelligenceSearchBasedWAUsFuncCall is an object that
// describes an invocation of method CodeIntelligenceSearchBasedWAUs on an
// instance of MockEventLogStore.
type EventLogStoreCodeIntelligenceSearchBasedWAUsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCodeIntelligenceSearchBasedWAUsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCodeIntelligenceSearchBasedWAUsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreCodeIntelligenceSettingsPageViewCountFunc describes the
// behavior when the CodeIntelligenceSettingsPageViewCount method of the
// parent MockEventLogStore instance is invoked.
type EventLogStoreCodeIntelligenceSettingsPageViewCountFunc struct {
	defaultHook func(context.Context) (int, error)
	hooks       []func(context.Context) (int, error)
	history     []EventLogStoreCodeIntelligenceSettingsPageViewCountFuncCall
	mutex       sync.Mutex
}

// CodeIntelligenceSettingsPageViewCount delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockEventLogStore) CodeIntelligenceSettingsPageViewCount(v0 context.Context) (int, error) {
	r0, r1 := m.CodeIntelligenceSettingsPageViewCountFunc.nextHook()(v0)
	m.CodeIntelligenceSettingsPageViewCountFunc.appendCall(EventLogStoreCodeIntelligenceSettingsPageViewCountFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CodeIntelligenceSettingsPageViewCount method of the parent
// MockEventLogStore instance is invoked and the hook queue is empty.
func (f *EventLogStoreCodeIntelligenceSettingsPageViewCountFunc) SetDefaultHook(hook func(context.Context) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CodeIntelligenceSettingsPageViewCount method of the parent
// MockEventLogStore instance invokes the hook at the front of the queue and
// discards it. After the queue is empty, the default hook function is
// invoked for any future action.
func (f *EventLogStoreCodeIntelligenceSettingsPageViewCountFunc) PushHook(hook func(context.Context) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCodeIntelligenceSettingsPageViewCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCodeIntelligenceSettingsPageViewCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCodeIntelligenceSettingsPageViewCountFunc) nextHook() func(context.Context) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCodeIntelligenceSettingsPageViewCountFunc) appendCall(r0 EventLogStoreCodeIntelligenceSettingsPageViewCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreCodeIntelligenceSettingsPageViewCountFuncCall objects
// describing the invocations of this function.
func (f *EventLogStoreCodeIntelligenceSettingsPageViewCountFunc) History() []EventLogStoreCodeIntelligenceSettingsPageViewCountFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCodeIntelligenceSettingsPageViewCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCodeIntelligenceSettingsPageViewCountFuncCall is an object
// that describes an invocation of method
// CodeIntelligenceSettingsPageViewCount on an instance of
// MockEventLogStore.
type EventLogStoreCodeIntelligenceSettingsPageViewCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCodeIntelligenceSettingsPageViewCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCodeIntelligenceSettingsPageViewCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreCodeIntelligenceWAUsFunc describes the behavior when the
// CodeIntelligenceWAUs method of the parent MockEventLogStore instance is
// invoked.
type EventLogStoreCodeIntelligenceWAUsFunc struct {
	defaultHook func(context.Context) (int, error)
	hooks       []func(context.Context) (int, error)
	history     []EventLogStoreCodeIntelligenceWAUsFuncCall
	mutex       sync.Mutex
}

// CodeIntelligenceWAUs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEventLogStore) CodeIntelligenceWAUs(v0 context.Context) (int, error) {
	r0, r1 := m.CodeIntelligenceWAUsFunc.nextHook()(v0)
	m.CodeIntelligenceWAUsFunc.appendCall(EventLogStoreCodeIntelligenceWAUsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CodeIntelligenceWAUs
// method of the parent MockEventLogStore instance is invoked and the hook
// queue is empty.
func (f *EventLogStoreCodeIntelligenceWAUsFunc) SetDefaultHook(hook func(context.Context) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CodeIntelligenceWAUs method of the parent MockEventLogStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EventLogStoreCodeIntelligenceWAUsFunc) PushHook(hook func(context.Context) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCodeIntelligenceWAUsFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCodeIntelligenceWAUsFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCodeIntelligenceWAUsFunc) nextHook() func(context.Context) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCodeIntelligenceWAUsFunc) appendCall(r0 EventLogStoreCodeIntelligenceWAUsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreCodeIntelligenceWAUsFuncCall
// objects describing the invocations of this function.
func (f *EventLogStoreCodeIntelligenceWAUsFunc) History() []EventLogStoreCodeIntelligenceWAUsFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCodeIntelligenceWAUsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCodeIntelligenceWAUsFuncCall is an object that describes an
// invocation of method CodeIntelligenceWAUs on an instance of
// MockEventLogStore.
type EventLogStoreCodeIntelligenceWAUsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCodeIntelligenceWAUsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCodeIntelligenceWAUsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreCountByUserIDFunc describes the behavior when the
// CountByUserID method of the parent MockEventLogStore instance is invoked.
type EventLogStoreCountByUserIDFunc struct {
	defaultHook func(context.Context, int32) (int, error)
	hooks       []func(context.Context, int32) (int, error)
	history     []EventLogStoreCountByUserIDFuncCall
	mutex       sync.Mutex
}

// CountByUserID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEventLogStore) CountByUserID(v0 context.Context, v1 int32) (int, error) {
	r0, r1 := m.CountByUserIDFunc.nextHook()(v0, v1)
	m.CountByUserIDFunc.appendCall(EventLogStoreCountByUserIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CountByUserID method
// of the parent MockEventLogStore instance is invoked and the hook queue is
// empty.
func (f *EventLogStoreCountByUserIDFunc) SetDefaultHook(hook func(context.Context, int32) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountByUserID method of the parent MockEventLogStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EventLogStoreCountByUserIDFunc) PushHook(hook func(context.Context, int32) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCountByUserIDFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCountByUserIDFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, int32) (int, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCountByUserIDFunc) nextHook() func(context.Context, int32) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCountByUserIDFunc) appendCall(r0 EventLogStoreCountByUserIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreCountByUserIDFuncCall objects
// describing the invocations of this function.
func (f *EventLogStoreCountByUserIDFunc) History() []EventLogStoreCountByUserIDFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCountByUserIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCountByUserIDFuncCall is an object that describes an
// invocation of method CountByUserID on an instance of MockEventLogStore.
type EventLogStoreCountByUserIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCountByUserIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCountByUserIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreCountByUserIDAndEventNameFunc describes the behavior when
// the CountByUserIDAndEventName method of the parent MockEventLogStore
// instance is invoked.
type EventLogStoreCountByUserIDAndEventNameFunc struct {
	defaultHook func(context.Context, int32, string) (int, error)
	hooks       []func(context.Context, int32, string) (int, error)
	history     []EventLogStoreCountByUserIDAndEventNameFuncCall
	mutex       sync.Mutex
}

// CountByUserIDAndEventName delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockEventLogStore) CountByUserIDAndEventName(v0 context.Context, v1 int32, v2 string) (int, error) {
	r0, r1 := m.CountByUserIDAndEventNameFunc.nextHook()(v0, v1, v2)
	m.CountByUserIDAndEventNameFunc.appendCall(EventLogStoreCountByUserIDAndEventNameFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CountByUserIDAndEventName method of the parent MockEventLogStore instance
// is invoked and the hook queue is empty.
func (f *EventLogStoreCountByUserIDAndEventNameFunc) SetDefaultHook(hook func(context.Context, int32, string) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountByUserIDAndEventName method of the parent MockEventLogStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EventLogStoreCountByUserIDAndEventNameFunc) PushHook(hook func(context.Context, int32, string) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCountByUserIDAndEventNameFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, string) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCountByUserIDAndEventNameFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, int32, string) (int, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCountByUserIDAndEventNameFunc) nextHook() func(context.Context, int32, string) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCountByUserIDAndEventNameFunc) appendCall(r0 EventLogStoreCountByUserIDAndEventNameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreCountByUserIDAndEventNameFuncCall objects describing the
// invocations of this function.
func (f *EventLogStoreCountByUserIDAndEventNameFunc) History() []EventLogStoreCountByUserIDAndEventNameFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCountByUserIDAndEventNameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCountByUserIDAndEventNameFuncCall is an object that
// describes an invocation of method CountByUserIDAndEventName on an
// instance of MockEventLogStore.
type EventLogStoreCountByUserIDAndEventNameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCountByUserIDAndEventNameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCountByUserIDAndEventNameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreCountByUserIDAndEventNamePrefixFunc describes the behavior
// when the CountByUserIDAndEventNamePrefix method of the parent
// MockEventLogStore instance is invoked.
type EventLogStoreCountByUserIDAndEventNamePrefixFunc struct {
	defaultHook func(context.Context, int32, string) (int, error)
	hooks       []func(context.Context, int32, string) (int, error)
	history     []EventLogStoreCountByUserIDAndEventNamePrefixFuncCall
	mutex       sync.Mutex
}

// CountByUserIDAndEventNamePrefix delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockEventLogStore) CountByUserIDAndEventNamePrefix(v0 context.Context, v1 int32, v2 string) (int, error) {
	r0, r1 := m.CountByUserIDAndEventNamePrefixFunc.nextHook()(v0, v1, v2)
	m.CountByUserIDAndEventNamePrefixFunc.appendCall(EventLogStoreCountByUserIDAndEventNamePrefixFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CountByUserIDAndEventNamePrefix method of the parent MockEventLogStore
// instance is invoked and the hook queue is empty.
func (f *EventLogStoreCountByUserIDAndEventNamePrefixFunc) SetDefaultHook(hook func(context.Context, int32, string) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountByUserIDAndEventNamePrefix method of the parent MockEventLogStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *EventLogStoreCountByUserIDAndEventNamePrefixFunc) PushHook(hook func(context.Context, int32, string) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCountByUserIDAndEventNamePrefixFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, string) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCountByUserIDAndEventNamePrefixFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, int32, string) (int, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCountByUserIDAndEventNamePrefixFunc) nextHook() func(context.Context, int32, string) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCountByUserIDAndEventNamePrefixFunc) appendCall(r0 EventLogStoreCountByUserIDAndEventNamePrefixFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreCountByUserIDAndEventNamePrefixFuncCall objects describing
// the invocations of this function.
func (f *EventLogStoreCountByUserIDAndEventNamePrefixFunc) History() []EventLogStoreCountByUserIDAndEventNamePrefixFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCountByUserIDAndEventNamePrefixFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCountByUserIDAndEventNamePrefixFuncCall is an object that
// describes an invocation of method CountByUserIDAndEventNamePrefix on an
// instance of MockEventLogStore.
type EventLogStoreCountByUserIDAndEventNamePrefixFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCountByUserIDAndEventNamePrefixFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCountByUserIDAndEventNamePrefixFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreCountByUserIDAndEventNamesFunc describes the behavior when
// the CountByUserIDAndEventNames method of the parent MockEventLogStore
// instance is invoked.
type EventLogStoreCountByUserIDAndEventNamesFunc struct {
	defaultHook func(context.Context, int32, []string) (int, error)
	hooks       []func(context.Context, int32, []string) (int, error)
	history     []EventLogStoreCountByUserIDAndEventNamesFuncCall
	mutex       sync.Mutex
}

// CountByUserIDAndEventNames delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockEventLogStore) CountByUserIDAndEventNames(v0 context.Context, v1 int32, v2 []string) (int, error) {
	r0, r1 := m.CountByUserIDAndEventNamesFunc.nextHook()(v0, v1, v2)
	m.CountByUserIDAndEventNamesFunc.appendCall(EventLogStoreCountByUserIDAndEventNamesFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CountByUserIDAndEventNames method of the parent MockEventLogStore
// instance is invoked and the hook queue is empty.
func (f *EventLogStoreCountByUserIDAndEventNamesFunc) SetDefaultHook(hook func(context.Context, int32, []string) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountByUserIDAndEventNames method of the parent MockEventLogStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *EventLogStoreCountByUserIDAndEventNamesFunc) PushHook(hook func(context.Context, int32, []string) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCountByUserIDAndEventNamesFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, []string) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCountByUserIDAndEventNamesFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, int32, []string) (int, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCountByUserIDAndEventNamesFunc) nextHook() func(context.Context, int32, []string) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCountByUserIDAndEventNamesFunc) appendCall(r0 EventLogStoreCountByUserIDAndEventNamesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreCountByUserIDAndEventNamesFuncCall objects describing the
// invocations of this function.
func (f *EventLogStoreCountByUserIDAndEventNamesFunc) History() []EventLogStoreCountByUserIDAndEventNamesFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCountByUserIDAndEventNamesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCountByUserIDAndEventNamesFuncCall is an object that
// describes an invocation of method CountByUserIDAndEventNames on an
// instance of MockEventLogStore.
type EventLogStoreCountByUserIDAndEventNamesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCountByUserIDAndEventNamesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCountByUserIDAndEventNamesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreCountUniqueUsersAllFunc describes the behavior when the
// CountUniqueUsersAll method of the parent MockEventLogStore instance is
// invoked.
type EventLogStoreCountUniqueUsersAllFunc struct {
	defaultHook func(context.Context, time.Time, time.Time) (int, error)
	hooks       []func(context.Context, time.Time, time.Time) (int, error)
	history     []EventLogStoreCountUniqueUsersAllFuncCall
	mutex       sync.Mutex
}

// CountUniqueUsersAll delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEventLogStore) CountUniqueUsersAll(v0 context.Context, v1 time.Time, v2 time.Time) (int, error) {
	r0, r1 := m.CountUniqueUsersAllFunc.nextHook()(v0, v1, v2)
	m.CountUniqueUsersAllFunc.appendCall(EventLogStoreCountUniqueUsersAllFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CountUniqueUsersAll
// method of the parent MockEventLogStore instance is invoked and the hook
// queue is empty.
func (f *EventLogStoreCountUniqueUsersAllFunc) SetDefaultHook(hook func(context.Context, time.Time, time.Time) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountUniqueUsersAll method of the parent MockEventLogStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EventLogStoreCountUniqueUsersAllFunc) PushHook(hook func(context.Context, time.Time, time.Time) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCountUniqueUsersAllFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, time.Time, time.Time) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCountUniqueUsersAllFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, time.Time, time.Time) (int, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCountUniqueUsersAllFunc) nextHook() func(context.Context, time.Time, time.Time) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCountUniqueUsersAllFunc) appendCall(r0 EventLogStoreCountUniqueUsersAllFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreCountUniqueUsersAllFuncCall
// objects describing the invocations of this function.
func (f *EventLogStoreCountUniqueUsersAllFunc) History() []EventLogStoreCountUniqueUsersAllFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCountUniqueUsersAllFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCountUniqueUsersAllFuncCall is an object that describes an
// invocation of method CountUniqueUsersAll on an instance of
// MockEventLogStore.
type EventLogStoreCountUniqueUsersAllFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Time
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCountUniqueUsersAllFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCountUniqueUsersAllFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreCountUniqueUsersByEventNameFunc describes the behavior when
// the CountUniqueUsersByEventName method of the parent MockEventLogStore
// instance is invoked.
type EventLogStoreCountUniqueUsersByEventNameFunc struct {
	defaultHook func(context.Context, time.Time, time.Time, string) (int, error)
	hooks       []func(context.Context, time.Time, time.Time, string) (int, error)
	history     []EventLogStoreCountUniqueUsersByEventNameFuncCall
	mutex       sync.Mutex
}

// CountUniqueUsersByEventName delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockEventLogStore) CountUniqueUsersByEventName(v0 context.Context, v1 time.Time, v2 time.Time, v3 string) (int, error) {
	r0, r1 := m.CountUniqueUsersByEventNameFunc.nextHook()(v0, v1, v2, v3)
	m.CountUniqueUsersByEventNameFunc.appendCall(EventLogStoreCountUniqueUsersByEventNameFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CountUniqueUsersByEventName method of the parent MockEventLogStore
// instance is invoked and the hook queue is empty.
func (f *EventLogStoreCountUniqueUsersByEventNameFunc) SetDefaultHook(hook func(context.Context, time.Time, time.Time, string) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountUniqueUsersByEventName method of the parent MockEventLogStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *EventLogStoreCountUniqueUsersByEventNameFunc) PushHook(hook func(context.Context, time.Time, time.Time, string) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCountUniqueUsersByEventNameFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, time.Time, time.Time, string) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCountUniqueUsersByEventNameFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, time.Time, time.Time, string) (int, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCountUniqueUsersByEventNameFunc) nextHook() func(context.Context, time.Time, time.Time, string) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCountUniqueUsersByEventNameFunc) appendCall(r0 EventLogStoreCountUniqueUsersByEventNameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreCountUniqueUsersByEventNameFuncCall objects describing the
// invocations of this function.
func (f *EventLogStoreCountUniqueUsersByEventNameFunc) History() []EventLogStoreCountUniqueUsersByEventNameFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCountUniqueUsersByEventNameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCountUniqueUsersByEventNameFuncCall is an object that
// describes an invocation of method CountUniqueUsersByEventName on an
// instance of MockEventLogStore.
type EventLogStoreCountUniqueUsersByEventNameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Time
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Time
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCountUniqueUsersByEventNameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCountUniqueUsersByEventNameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreCountUniqueUsersByEventNamePrefixFunc describes the behavior
// when the CountUniqueUsersByEventNamePrefix method of the parent
// MockEventLogStore instance is invoked.
type EventLogStoreCountUniqueUsersByEventNamePrefixFunc struct {
	defaultHook func(context.Context, time.Time, time.Time, string) (int, error)
	hooks       []func(context.Context, time.Time, time.Time, string) (int, error)
	history     []EventLogStoreCountUniqueUsersByEventNamePrefixFuncCall
	mutex       sync.Mutex
}

// CountUniqueUsersByEventNamePrefix delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockEventLogStore) CountUniqueUsersByEventNamePrefix(v0 context.Context, v1 time.Time, v2 time.Time, v3 string) (int, error) {
	r0, r1 := m.CountUniqueUsersByEventNamePrefixFunc.nextHook()(v0, v1, v2, v3)
	m.CountUniqueUsersByEventNamePrefixFunc.appendCall(EventLogStoreCountUniqueUsersByEventNamePrefixFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CountUniqueUsersByEventNamePrefix method of the parent MockEventLogStore
// instance is invoked and the hook queue is empty.
func (f *EventLogStoreCountUniqueUsersByEventNamePrefixFunc) SetDefaultHook(hook func(context.Context, time.Time, time.Time, string) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountUniqueUsersByEventNamePrefix method of the parent MockEventLogStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *EventLogStoreCountUniqueUsersByEventNamePrefixFunc) PushHook(hook func(context.Context, time.Time, time.Time, string) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCountUniqueUsersByEventNamePrefixFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, time.Time, time.Time, string) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCountUniqueUsersByEventNamePrefixFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, time.Time, time.Time, string) (int, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCountUniqueUsersByEventNamePrefixFunc) nextHook() func(context.Context, time.Time, time.Time, string) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCountUniqueUsersByEventNamePrefixFunc) appendCall(r0 EventLogStoreCountUniqueUsersByEventNamePrefixFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreCountUniqueUsersByEventNamePrefixFuncCall objects describing
// the invocations of this function.
func (f *EventLogStoreCountUniqueUsersByEventNamePrefixFunc) History() []EventLogStoreCountUniqueUsersByEventNamePrefixFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCountUniqueUsersByEventNamePrefixFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCountUniqueUsersByEventNamePrefixFuncCall is an object that
// describes an invocation of method CountUniqueUsersByEventNamePrefix on an
// instance of MockEventLogStore.
type EventLogStoreCountUniqueUsersByEventNamePrefixFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Time
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Time
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCountUniqueUsersByEventNamePrefixFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCountUniqueUsersByEventNamePrefixFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreCountUniqueUsersByEventNamesFunc describes the behavior when
// the CountUniqueUsersByEventNames method of the parent MockEventLogStore
// instance is invoked.
type EventLogStoreCountUniqueUsersByEventNamesFunc struct {
	defaultHook func(context.Context, time.Time, time.Time, []string) (int, error)
	hooks       []func(context.Context, time.Time, time.Time, []string) (int, error)
	history     []EventLogStoreCountUniqueUsersByEventNamesFuncCall
	mutex       sync.Mutex
}

// CountUniqueUsersByEventNames delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockEventLogStore) CountUniqueUsersByEventNames(v0 context.Context, v1 time.Time, v2 time.Time, v3 []string) (int, error) {
	r0, r1 := m.CountUniqueUsersByEventNamesFunc.nextHook()(v0, v1, v2, v3)
	m.CountUniqueUsersByEventNamesFunc.appendCall(EventLogStoreCountUniqueUsersByEventNamesFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CountUniqueUsersByEventNames method of the parent MockEventLogStore
// instance is invoked and the hook queue is empty.
func (f *EventLogStoreCountUniqueUsersByEventNamesFunc) SetDefaultHook(hook func(context.Context, time.Time, time.Time, []string) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountUniqueUsersByEventNames method of the parent MockEventLogStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *EventLogStoreCountUniqueUsersByEventNamesFunc) PushHook(hook func(context.Context, time.Time, time.Time, []string) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCountUniqueUsersByEventNamesFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, time.Time, time.Time, []string) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCountUniqueUsersByEventNamesFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, time.Time, time.Time, []string) (int, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCountUniqueUsersByEventNamesFunc) nextHook() func(context.Context, time.Time, time.Time, []string) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCountUniqueUsersByEventNamesFunc) appendCall(r0 EventLogStoreCountUniqueUsersByEventNamesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreCountUniqueUsersByEventNamesFuncCall objects describing the
// invocations of this function.
func (f *EventLogStoreCountUniqueUsersByEventNamesFunc) History() []EventLogStoreCountUniqueUsersByEventNamesFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCountUniqueUsersByEventNamesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCountUniqueUsersByEventNamesFuncCall is an object that
// describes an invocation of method CountUniqueUsersByEventNames on an
// instance of MockEventLogStore.
type EventLogStoreCountUniqueUsersByEventNamesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Time
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Time
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCountUniqueUsersByEventNamesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCountUniqueUsersByEventNamesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreCountUniqueUsersPerPeriodFunc describes the behavior when
// the CountUniqueUsersPerPeriod method of the parent MockEventLogStore
// instance is invoked.
type EventLogStoreCountUniqueUsersPerPeriodFunc struct {
	defaultHook func(context.Context, PeriodType, time.Time, int, *CountUniqueUsersOptions) ([]UsageValue, error)
	hooks       []func(context.Context, PeriodType, time.Time, int, *CountUniqueUsersOptions) ([]UsageValue, error)
	history     []EventLogStoreCountUniqueUsersPerPeriodFuncCall
	mutex       sync.Mutex
}

// CountUniqueUsersPerPeriod delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockEventLogStore) CountUniqueUsersPerPeriod(v0 context.Context, v1 PeriodType, v2 time.Time, v3 int, v4 *CountUniqueUsersOptions) ([]UsageValue, error) {
	r0, r1 := m.CountUniqueUsersPerPeriodFunc.nextHook()(v0, v1, v2, v3, v4)
	m.CountUniqueUsersPerPeriodFunc.appendCall(EventLogStoreCountUniqueUsersPerPeriodFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CountUniqueUsersPerPeriod method of the parent MockEventLogStore instance
// is invoked and the hook queue is empty.
func (f *EventLogStoreCountUniqueUsersPerPeriodFunc) SetDefaultHook(hook func(context.Context, PeriodType, time.Time, int, *CountUniqueUsersOptions) ([]UsageValue, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountUniqueUsersPerPeriod method of the parent MockEventLogStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EventLogStoreCountUniqueUsersPerPeriodFunc) PushHook(hook func(context.Context, PeriodType, time.Time, int, *CountUniqueUsersOptions) ([]UsageValue, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCountUniqueUsersPerPeriodFunc) SetDefaultReturn(r0 []UsageValue, r1 error) {
	f.SetDefaultHook(func(context.Context, PeriodType, time.Time, int, *CountUniqueUsersOptions) ([]UsageValue, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCountUniqueUsersPerPeriodFunc) PushReturn(r0 []UsageValue, r1 error) {
	f.PushHook(func(context.Context, PeriodType, time.Time, int, *CountUniqueUsersOptions) ([]UsageValue, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCountUniqueUsersPerPeriodFunc) nextHook() func(context.Context, PeriodType, time.Time, int, *CountUniqueUsersOptions) ([]UsageValue, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCountUniqueUsersPerPeriodFunc) appendCall(r0 EventLogStoreCountUniqueUsersPerPeriodFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreCountUniqueUsersPerPeriodFuncCall objects describing the
// invocations of this function.
func (f *EventLogStoreCountUniqueUsersPerPeriodFunc) History() []EventLogStoreCountUniqueUsersPerPeriodFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCountUniqueUsersPerPeriodFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCountUniqueUsersPerPeriodFuncCall is an object that
// describes an invocation of method CountUniqueUsersPerPeriod on an
// instance of MockEventLogStore.
type EventLogStoreCountUniqueUsersPerPeriodFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 PeriodType
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Time
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 *CountUniqueUsersOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []UsageValue
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCountUniqueUsersPerPeriodFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCountUniqueUsersPerPeriodFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreCountUsersWithSettingFunc describes the behavior when the
// CountUsersWithSetting method of the parent MockEventLogStore instance is
// invoked.
type EventLogStoreCountUsersWithSettingFunc struct {
	defaultHook func(context.Context, string, interface{}) (int, error)
	hooks       []func(context.Context, string, interface{}) (int, error)
	history     []EventLogStoreCountUsersWithSettingFuncCall
	mutex       sync.Mutex
}

// CountUsersWithSetting delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockEventLogStore) CountUsersWithSetting(v0 context.Context, v1 string, v2 interface{}) (int, error) {
	r0, r1 := m.CountUsersWithSettingFunc.nextHook()(v0, v1, v2)
	m.CountUsersWithSettingFunc.appendCall(EventLogStoreCountUsersWithSettingFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CountUsersWithSetting method of the parent MockEventLogStore instance is
// invoked and the hook queue is empty.
func (f *EventLogStoreCountUsersWithSettingFunc) SetDefaultHook(hook func(context.Context, string, interface{}) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountUsersWithSetting method of the parent MockEventLogStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EventLogStoreCountUsersWithSettingFunc) PushHook(hook func(context.Context, string, interface{}) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCountUsersWithSettingFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, string, interface{}) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCountUsersWithSettingFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, string, interface{}) (int, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCountUsersWithSettingFunc) nextHook() func(context.Context, string, interface{}) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCountUsersWithSettingFunc) appendCall(r0 EventLogStoreCountUsersWithSettingFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreCountUsersWithSettingFuncCall
// objects describing the invocations of this function.
func (f *EventLogStoreCountUsersWithSettingFunc) History() []EventLogStoreCountUsersWithSettingFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCountUsersWithSettingFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCountUsersWithSettingFuncCall is an object that describes an
// invocation of method CountUsersWithSetting on an instance of
// MockEventLogStore.
type EventLogStoreCountUsersWithSettingFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCountUsersWithSettingFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCountUsersWithSettingFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreDoneFunc describes the behavior when the Done method of the
// parent MockEventLogStore instance is invoked.
type EventLogStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []EventLogStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEventLogStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(EventLogStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockEventLogStore instance is invoked and the hook queue is empty.
func (f *EventLogStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockEventLogStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EventLogStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *EventLogStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreDoneFunc) appendCall(r0 EventLogStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreDoneFuncCall objects
// describing the invocations of this function.
func (f *EventLogStoreDoneFunc) History() []EventLogStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreDoneFuncCall is an object that describes an invocation of
// method Done on an instance of MockEventLogStore.
type EventLogStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EventLogStoreHandleFunc describes the behavior when the Handle method of
// the parent MockEventLogStore instance is invoked.
type EventLogStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []EventLogStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEventLogStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(EventLogStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockEventLogStore instance is invoked and the hook queue is empty.
func (f *EventLogStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockEventLogStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EventLogStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *EventLogStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreHandleFunc) appendCall(r0 EventLogStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *EventLogStoreHandleFunc) History() []EventLogStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreHandleFuncCall is an object that describes an invocation of
// method Handle on an instance of MockEventLogStore.
type EventLogStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EventLogStoreInsertFunc describes the behavior when the Insert method of
// the parent MockEventLogStore instance is invoked.
type EventLogStoreInsertFunc struct {
	defaultHook func(context.Context, *Event) error
	hooks       []func(context.Context, *Event) error
	history     []EventLogStoreInsertFuncCall
	mutex       sync.Mutex
}

// Insert delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEventLogStore) Insert(v0 context.Context, v1 *Event) error {
	r0 := m.InsertFunc.nextHook()(v0, v1)
	m.InsertFunc.appendCall(EventLogStoreInsertFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Insert method of the
// parent MockEventLogStore instance is invoked and the hook queue is empty.
func (f *EventLogStoreInsertFunc) SetDefaultHook(hook func(context.Context, *Event) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Insert method of the parent MockEventLogStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EventLogStoreInsertFunc) PushHook(hook func(context.Context, *Event) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreInsertFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *Event) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreInsertFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *Event) error {
		return r0
	})
}

func (f *EventLogStoreInsertFunc) nextHook() func(context.Context, *Event) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreInsertFunc) appendCall(r0 EventLogStoreInsertFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreInsertFuncCall objects
// describing the invocations of this function.
func (f *EventLogStoreInsertFunc) History() []EventLogStoreInsertFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreInsertFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreInsertFuncCall is an object that describes an invocation of
// method Insert on an instance of MockEventLogStore.
type EventLogStoreInsertFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Event
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreInsertFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreInsertFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EventLogStoreLatestPingFunc describes the behavior when the LatestPing
// method of the parent MockEventLogStore instance is invoked.
type EventLogStoreLatestPingFunc struct {
	defaultHook func(context.Context) (*types.Event, error)
	hooks       []func(context.Context) (*types.Event, error)
	history     []EventLogStoreLatestPingFuncCall
	mutex       sync.Mutex
}

// LatestPing delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEventLogStore) LatestPing(v0 context.Context) (*types.Event, error) {
	r0, r1 := m.LatestPingFunc.nextHook()(v0)
	m.LatestPingFunc.appendCall(EventLogStoreLatestPingFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the LatestPing method of
// the parent MockEventLogStore instance is invoked and the hook queue is
// empty.
func (f *EventLogStoreLatestPingFunc) SetDefaultHook(hook func(context.Context) (*types.Event, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LatestPing method of the parent MockEventLogStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EventLogStoreLatestPingFunc) PushHook(hook func(context.Context) (*types.Event, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreLatestPingFunc) SetDefaultReturn(r0 *types.Event, r1 error) {
	f.SetDefaultHook(func(context.Context) (*types.Event, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreLatestPingFunc) PushReturn(r0 *types.Event, r1 error) {
	f.PushHook(func(context.Context) (*types.Event, error) {
		return r0, r1
	})
}

func (f *EventLogStoreLatestPingFunc) nextHook() func(context.Context) (*types.Event, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreLatestPingFunc) appendCall(r0 EventLogStoreLatestPingFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreLatestPingFuncCall objects
// describing the invocations of this function.
func (f *EventLogStoreLatestPingFunc) History() []EventLogStoreLatestPingFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreLatestPingFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreLatestPingFuncCall is an object that describes an invocation
// of method LatestPing on an instance of MockEventLogStore.
type EventLogStoreLatestPingFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Event
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreLatestPingFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreLatestPingFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreListAllFunc describes the behavior when the ListAll method
// of the parent MockEventLogStore instance is invoked.
type EventLogStoreListAllFunc struct {
	defaultHook func(context.Context, EventLogsListOptions) ([]*types.Event, error)
	hooks       []func(context.Context, EventLogsListOptions) ([]*types.Event, error)
	history     []EventLogStoreListAllFuncCall
	mutex       sync.Mutex
}

// ListAll delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEventLogStore) ListAll(v0 context.Context, v1 EventLogsListOptions) ([]*types.Event, error) {
	r0, r1 := m.ListAllFunc.nextHook()(v0, v1)
	m.ListAllFunc.appendCall(EventLogStoreListAllFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListAll method of
// the parent MockEventLogStore instance is invoked and the hook queue is
// empty.
func (f *EventLogStoreListAllFunc) SetDefaultHook(hook func(context.Context, EventLogsListOptions) ([]*types.Event, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListAll method of the parent MockEventLogStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EventLogStoreListAllFunc) PushHook(hook func(context.Context, EventLogsListOptions) ([]*types.Event, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreListAllFunc) SetDefaultReturn(r0 []*types.Event, r1 error) {
	f.SetDefaultHook(func(context.Context, EventLogsListOptions) ([]*types.Event, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreListAllFunc) PushReturn(r0 []*types.Event, r1 error) {
	f.PushHook(func(context.Context, EventLogsListOptions) ([]*types.Event, error) {
		return r0, r1
	})
}

func (f *EventLogStoreListAllFunc) nextHook() func(context.Context, EventLogsListOptions) ([]*types.Event, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreListAllFunc) appendCall(r0 EventLogStoreListAllFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreListAllFuncCall objects
// describing the invocations of this function.
func (f *EventLogStoreListAllFunc) History() []EventLogStoreListAllFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreListAllFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreListAllFuncCall is an object that describes an invocation of
// method ListAll on an instance of MockEventLogStore.
type EventLogStoreListAllFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 EventLogsListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.Event
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreListAllFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreListAllFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreListExportableEventsFunc describes the behavior when the
// ListExportableEvents method of the parent MockEventLogStore instance is
// invoked.
type EventLogStoreListExportableEventsFunc struct {
	defaultHook func(context.Context, int, int) ([]*types.Event, error)
	hooks       []func(context.Context, int, int) ([]*types.Event, error)
	history     []EventLogStoreListExportableEventsFuncCall
	mutex       sync.Mutex
}

// ListExportableEvents delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEventLogStore) ListExportableEvents(v0 context.Context, v1 int, v2 int) ([]*types.Event, error) {
	r0, r1 := m.ListExportableEventsFunc.nextHook()(v0, v1, v2)
	m.ListExportableEventsFunc.appendCall(EventLogStoreListExportableEventsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListExportableEvents
// method of the parent MockEventLogStore instance is invoked and the hook
// queue is empty.
func (f *EventLogStoreListExportableEventsFunc) SetDefaultHook(hook func(context.Context, int, int) ([]*types.Event, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListExportableEvents method of the parent MockEventLogStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EventLogStoreListExportableEventsFunc) PushHook(hook func(context.Context, int, int) ([]*types.Event, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreListExportableEventsFunc) SetDefaultReturn(r0 []*types.Event, r1 error) {
	f.SetDefaultHook(func(context.Context, int, int) ([]*types.Event, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreListExportableEventsFunc) PushReturn(r0 []*types.Event, r1 error) {
	f.PushHook(func(context.Context, int, int) ([]*types.Event, error) {
		return r0, r1
	})
}

func (f *EventLogStoreListExportableEventsFunc) nextHook() func(context.Context, int, int) ([]*types.Event, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreListExportableEventsFunc) appendCall(r0 EventLogStoreListExportableEventsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreListExportableEventsFuncCall
// objects describing the invocations of this function.
func (f *EventLogStoreListExportableEventsFunc) History() []EventLogStoreListExportableEventsFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreListExportableEventsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreListExportableEventsFuncCall is an object that describes an
// invocation of method ListExportableEvents on an instance of
// MockEventLogStore.
type EventLogStoreListExportableEventsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.Event
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreListExportableEventsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreListExportableEventsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreListUniqueUsersAllFunc describes the behavior when the
// ListUniqueUsersAll method of the parent MockEventLogStore instance is
// invoked.
type EventLogStoreListUniqueUsersAllFunc struct {
	defaultHook func(context.Context, time.Time, time.Time) ([]int32, error)
	hooks       []func(context.Context, time.Time, time.Time) ([]int32, error)
	history     []EventLogStoreListUniqueUsersAllFuncCall
	mutex       sync.Mutex
}

// ListUniqueUsersAll delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEventLogStore) ListUniqueUsersAll(v0 context.Context, v1 time.Time, v2 time.Time) ([]int32, error) {
	r0, r1 := m.ListUniqueUsersAllFunc.nextHook()(v0, v1, v2)
	m.ListUniqueUsersAllFunc.appendCall(EventLogStoreListUniqueUsersAllFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListUniqueUsersAll
// method of the parent MockEventLogStore instance is invoked and the hook
// queue is empty.
func (f *EventLogStoreListUniqueUsersAllFunc) SetDefaultHook(hook func(context.Context, time.Time, time.Time) ([]int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListUniqueUsersAll method of the parent MockEventLogStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EventLogStoreListUniqueUsersAllFunc) PushHook(hook func(context.Context, time.Time, time.Time) ([]int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreListUniqueUsersAllFunc) SetDefaultReturn(r0 []int32, r1 error) {
	f.SetDefaultHook(func(context.Context, time.Time, time.Time) ([]int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreListUniqueUsersAllFunc) PushReturn(r0 []int32, r1 error) {
	f.PushHook(func(context.Context, time.Time, time.Time) ([]int32, error) {
		return r0, r1
	})
}

func (f *EventLogStoreListUniqueUsersAllFunc) nextHook() func(context.Context, time.Time, time.Time) ([]int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreListUniqueUsersAllFunc) appendCall(r0 EventLogStoreListUniqueUsersAllFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreListUniqueUsersAllFuncCall
// objects describing the invocations of this function.
func (f *EventLogStoreListUniqueUsersAllFunc) History() []EventLogStoreListUniqueUsersAllFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreListUniqueUsersAllFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreListUniqueUsersAllFuncCall is an object that describes an
// invocation of method ListUniqueUsersAll on an instance of
// MockEventLogStore.
type EventLogStoreListUniqueUsersAllFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Time
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreListUniqueUsersAllFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreListUniqueUsersAllFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreMaxTimestampByUserIDFunc describes the behavior when the
// MaxTimestampByUserID method of the parent MockEventLogStore instance is
// invoked.
type EventLogStoreMaxTimestampByUserIDFunc struct {
	defaultHook func(context.Context, int32) (*time.Time, error)
	hooks       []func(context.Context, int32) (*time.Time, error)
	history     []EventLogStoreMaxTimestampByUserIDFuncCall
	mutex       sync.Mutex
}

// MaxTimestampByUserID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEventLogStore) MaxTimestampByUserID(v0 context.Context, v1 int32) (*time.Time, error) {
	r0, r1 := m.MaxTimestampByUserIDFunc.nextHook()(v0, v1)
	m.MaxTimestampByUserIDFunc.appendCall(EventLogStoreMaxTimestampByUserIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MaxTimestampByUserID
// method of the parent MockEventLogStore instance is invoked and the hook
// queue is empty.
func (f *EventLogStoreMaxTimestampByUserIDFunc) SetDefaultHook(hook func(context.Context, int32) (*time.Time, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MaxTimestampByUserID method of the parent MockEventLogStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EventLogStoreMaxTimestampByUserIDFunc) PushHook(hook func(context.Context, int32) (*time.Time, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreMaxTimestampByUserIDFunc) SetDefaultReturn(r0 *time.Time, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (*time.Time, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreMaxTimestampByUserIDFunc) PushReturn(r0 *time.Time, r1 error) {
	f.PushHook(func(context.Context, int32) (*time.Time, error) {
		return r0, r1
	})
}

func (f *EventLogStoreMaxTimestampByUserIDFunc) nextHook() func(context.Context, int32) (*time.Time, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreMaxTimestampByUserIDFunc) appendCall(r0 EventLogStoreMaxTimestampByUserIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreMaxTimestampByUserIDFuncCall
// objects describing the invocations of this function.
func (f *EventLogStoreMaxTimestampByUserIDFunc) History() []EventLogStoreMaxTimestampByUserIDFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreMaxTimestampByUserIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreMaxTimestampByUserIDFuncCall is an object that describes an
// invocation of method MaxTimestampByUserID on an instance of
// MockEventLogStore.
type EventLogStoreMaxTimestampByUserIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *time.Time
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreMaxTimestampByUserIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreMaxTimestampByUserIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreMaxTimestampByUserIDAndSourceFunc describes the behavior
// when the MaxTimestampByUserIDAndSource method of the parent
// MockEventLogStore instance is invoked.
type EventLogStoreMaxTimestampByUserIDAndSourceFunc struct {
	defaultHook func(context.Context, int32, string) (*time.Time, error)
	hooks       []func(context.Context, int32, string) (*time.Time, error)
	history     []EventLogStoreMaxTimestampByUserIDAndSourceFuncCall
	mutex       sync.Mutex
}

// MaxTimestampByUserIDAndSource delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockEventLogStore) MaxTimestampByUserIDAndSource(v0 context.Context, v1 int32, v2 string) (*time.Time, error) {
	r0, r1 := m.MaxTimestampByUserIDAndSourceFunc.nextHook()(v0, v1, v2)
	m.MaxTimestampByUserIDAndSourceFunc.appendCall(EventLogStoreMaxTimestampByUserIDAndSourceFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// MaxTimestampByUserIDAndSource method of the parent MockEventLogStore
// instance is invoked and the hook queue is empty.
func (f *EventLogStoreMaxTimestampByUserIDAndSourceFunc) SetDefaultHook(hook func(context.Context, int32, string) (*time.Time, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MaxTimestampByUserIDAndSource method of the parent MockEventLogStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *EventLogStoreMaxTimestampByUserIDAndSourceFunc) PushHook(hook func(context.Context, int32, string) (*time.Time, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreMaxTimestampByUserIDAndSourceFunc) SetDefaultReturn(r0 *time.Time, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, string) (*time.Time, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreMaxTimestampByUserIDAndSourceFunc) PushReturn(r0 *time.Time, r1 error) {
	f.PushHook(func(context.Context, int32, string) (*time.Time, error) {
		return r0, r1
	})
}

func (f *EventLogStoreMaxTimestampByUserIDAndSourceFunc) nextHook() func(context.Context, int32, string) (*time.Time, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreMaxTimestampByUserIDAndSourceFunc) appendCall(r0 EventLogStoreMaxTimestampByUserIDAndSourceFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreMaxTimestampByUserIDAndSourceFuncCall objects describing the
// invocations of this function.
func (f *EventLogStoreMaxTimestampByUserIDAndSourceFunc) History() []EventLogStoreMaxTimestampByUserIDAndSourceFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreMaxTimestampByUserIDAndSourceFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreMaxTimestampByUserIDAndSourceFuncCall is an object that
// describes an invocation of method MaxTimestampByUserIDAndSource on an
// instance of MockEventLogStore.
type EventLogStoreMaxTimestampByUserIDAndSourceFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *time.Time
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreMaxTimestampByUserIDAndSourceFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreMaxTimestampByUserIDAndSourceFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreRequestsByLanguageFunc describes the behavior when the
// RequestsByLanguage method of the parent MockEventLogStore instance is
// invoked.
type EventLogStoreRequestsByLanguageFunc struct {
	defaultHook func(context.Context) (map[string]int, error)
	hooks       []func(context.Context) (map[string]int, error)
	history     []EventLogStoreRequestsByLanguageFuncCall
	mutex       sync.Mutex
}

// RequestsByLanguage delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEventLogStore) RequestsByLanguage(v0 context.Context) (map[string]int, error) {
	r0, r1 := m.RequestsByLanguageFunc.nextHook()(v0)
	m.RequestsByLanguageFunc.appendCall(EventLogStoreRequestsByLanguageFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RequestsByLanguage
// method of the parent MockEventLogStore instance is invoked and the hook
// queue is empty.
func (f *EventLogStoreRequestsByLanguageFunc) SetDefaultHook(hook func(context.Context) (map[string]int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RequestsByLanguage method of the parent MockEventLogStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EventLogStoreRequestsByLanguageFunc) PushHook(hook func(context.Context) (map[string]int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreRequestsByLanguageFunc) SetDefaultReturn(r0 map[string]int, r1 error) {
	f.SetDefaultHook(func(context.Context) (map[string]int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreRequestsByLanguageFunc) PushReturn(r0 map[string]int, r1 error) {
	f.PushHook(func(context.Context) (map[string]int, error) {
		return r0, r1
	})
}

func (f *EventLogStoreRequestsByLanguageFunc) nextHook() func(context.Context) (map[string]int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreRequestsByLanguageFunc) appendCall(r0 EventLogStoreRequestsByLanguageFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreRequestsByLanguageFuncCall
// objects describing the invocations of this function.
func (f *EventLogStoreRequestsByLanguageFunc) History() []EventLogStoreRequestsByLanguageFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreRequestsByLanguageFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreRequestsByLanguageFuncCall is an object that describes an
// invocation of method RequestsByLanguage on an instance of
// MockEventLogStore.
type EventLogStoreRequestsByLanguageFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[string]int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreRequestsByLanguageFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreRequestsByLanguageFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreSiteUsageFunc describes the behavior when the SiteUsage
// method of the parent MockEventLogStore instance is invoked.
type EventLogStoreSiteUsageFunc struct {
	defaultHook func(context.Context) (types.SiteUsageSummary, error)
	hooks       []func(context.Context) (types.SiteUsageSummary, error)
	history     []EventLogStoreSiteUsageFuncCall
	mutex       sync.Mutex
}

// SiteUsage delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEventLogStore) SiteUsage(v0 context.Context) (types.SiteUsageSummary, error) {
	r0, r1 := m.SiteUsageFunc.nextHook()(v0)
	m.SiteUsageFunc.appendCall(EventLogStoreSiteUsageFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SiteUsage method of
// the parent MockEventLogStore instance is invoked and the hook queue is
// empty.
func (f *EventLogStoreSiteUsageFunc) SetDefaultHook(hook func(context.Context) (types.SiteUsageSummary, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SiteUsage method of the parent MockEventLogStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EventLogStoreSiteUsageFunc) PushHook(hook func(context.Context) (types.SiteUsageSummary, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreSiteUsageFunc) SetDefaultReturn(r0 types.SiteUsageSummary, r1 error) {
	f.SetDefaultHook(func(context.Context) (types.SiteUsageSummary, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreSiteUsageFunc) PushReturn(r0 types.SiteUsageSummary, r1 error) {
	f.PushHook(func(context.Context) (types.SiteUsageSummary, error) {
		return r0, r1
	})
}

func (f *EventLogStoreSiteUsageFunc) nextHook() func(context.Context) (types.SiteUsageSummary, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreSiteUsageFunc) appendCall(r0 EventLogStoreSiteUsageFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreSiteUsageFuncCall objects
// describing the invocations of this function.
func (f *EventLogStoreSiteUsageFunc) History() []EventLogStoreSiteUsageFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreSiteUsageFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreSiteUsageFuncCall is an object that describes an invocation
// of method SiteUsage on an instance of MockEventLogStore.
type EventLogStoreSiteUsageFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 types.SiteUsageSummary
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreSiteUsageFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreSiteUsageFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreTransactFunc describes the behavior when the Transact method
// of the parent MockEventLogStore instance is invoked.
type EventLogStoreTransactFunc struct {
	defaultHook func(context.Context) (EventLogStore, error)
	hooks       []func(context.Context) (EventLogStore, error)
	history     []EventLogStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEventLogStore) Transact(v0 context.Context) (EventLogStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(EventLogStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockEventLogStore instance is invoked and the hook queue is
// empty.
func (f *EventLogStoreTransactFunc) SetDefaultHook(hook func(context.Context) (EventLogStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockEventLogStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EventLogStoreTransactFunc) PushHook(hook func(context.Context) (EventLogStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreTransactFunc) SetDefaultReturn(r0 EventLogStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (EventLogStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreTransactFunc) PushReturn(r0 EventLogStore, r1 error) {
	f.PushHook(func(context.Context) (EventLogStore, error) {
		return r0, r1
	})
}

func (f *EventLogStoreTransactFunc) nextHook() func(context.Context) (EventLogStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreTransactFunc) appendCall(r0 EventLogStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *EventLogStoreTransactFunc) History() []EventLogStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreTransactFuncCall is an object that describes an invocation
// of method Transact on an instance of MockEventLogStore.
type EventLogStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 EventLogStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreUsersUsageCountsFunc describes the behavior when the
// UsersUsageCounts method of the parent MockEventLogStore instance is
// invoked.
type EventLogStoreUsersUsageCountsFunc struct {
	defaultHook func(context.Context) ([]types.UserUsageCounts, error)
	hooks       []func(context.Context) ([]types.UserUsageCounts, error)
	history     []EventLogStoreUsersUsageCountsFuncCall
	mutex       sync.Mutex
}

// UsersUsageCounts delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEventLogStore) UsersUsageCounts(v0 context.Context) ([]types.UserUsageCounts, error) {
	r0, r1 := m.UsersUsageCountsFunc.nextHook()(v0)
	m.UsersUsageCountsFunc.appendCall(EventLogStoreUsersUsageCountsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the UsersUsageCounts
// method of the parent MockEventLogStore instance is invoked and the hook
// queue is empty.
func (f *EventLogStoreUsersUsageCountsFunc) SetDefaultHook(hook func(context.Context) ([]types.UserUsageCounts, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UsersUsageCounts method of the parent MockEventLogStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *EventLogStoreUsersUsageCountsFunc) PushHook(hook func(context.Context) ([]types.UserUsageCounts, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreUsersUsageCountsFunc) SetDefaultReturn(r0 []types.UserUsageCounts, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]types.UserUsageCounts, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreUsersUsageCountsFunc) PushReturn(r0 []types.UserUsageCounts, r1 error) {
	f.PushHook(func(context.Context) ([]types.UserUsageCounts, error) {
		return r0, r1
	})
}

func (f *EventLogStoreUsersUsageCountsFunc) nextHook() func(context.Context) ([]types.UserUsageCounts, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreUsersUsageCountsFunc) appendCall(r0 EventLogStoreUsersUsageCountsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreUsersUsageCountsFuncCall
// objects describing the invocations of this function.
func (f *EventLogStoreUsersUsageCountsFunc) History() []EventLogStoreUsersUsageCountsFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreUsersUsageCountsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreUsersUsageCountsFuncCall is an object that describes an
// invocation of method UsersUsageCounts on an instance of
// MockEventLogStore.
type EventLogStoreUsersUsageCountsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.UserUsageCounts
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreUsersUsageCountsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreUsersUsageCountsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreWithFunc describes the behavior when the With method of the
// parent MockEventLogStore instance is invoked.
type EventLogStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) EventLogStore
	hooks       []func(basestore.ShareableStore) EventLogStore
	history     []EventLogStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEventLogStore) With(v0 basestore.ShareableStore) EventLogStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(EventLogStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockEventLogStore instance is invoked and the hook queue is empty.
func (f *EventLogStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) EventLogStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockEventLogStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EventLogStoreWithFunc) PushHook(hook func(basestore.ShareableStore) EventLogStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreWithFunc) SetDefaultReturn(r0 EventLogStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) EventLogStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreWithFunc) PushReturn(r0 EventLogStore) {
	f.PushHook(func(basestore.ShareableStore) EventLogStore {
		return r0
	})
}

func (f *EventLogStoreWithFunc) nextHook() func(basestore.ShareableStore) EventLogStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreWithFunc) appendCall(r0 EventLogStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreWithFuncCall objects
// describing the invocations of this function.
func (f *EventLogStoreWithFunc) History() []EventLogStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockEventLogStore.
type EventLogStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 EventLogStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockExternalServiceStore is a mock implementation of the
// ExternalServiceStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockExternalServiceStore struct {
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *ExternalServiceStoreCountFunc
	// CountSyncJobsFunc is an instance of a mock function object
	// controlling the behavior of the method CountSyncJobs.
	CountSyncJobsFunc *ExternalServiceStoreCountSyncJobsFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *ExternalServiceStoreCreateFunc
	// DeleteFunc is an instance of a mock function object controlling the
	// behavior of the method Delete.
	DeleteFunc *ExternalServiceStoreDeleteFunc
	// DistinctKindsFunc is an instance of a mock function object
	// controlling the behavior of the method DistinctKinds.
	DistinctKindsFunc *ExternalServiceStoreDistinctKindsFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *ExternalServiceStoreDoneFunc
	// GetAffiliatedSyncErrorsFunc is an instance of a mock function object
	// controlling the behavior of the method GetAffiliatedSyncErrors.
	GetAffiliatedSyncErrorsFunc *ExternalServiceStoreGetAffiliatedSyncErrorsFunc
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *ExternalServiceStoreGetByIDFunc
	// GetLastSyncErrorFunc is an instance of a mock function object
	// controlling the behavior of the method GetLastSyncError.
	GetLastSyncErrorFunc *ExternalServiceStoreGetLastSyncErrorFunc
	// GetSyncJobByIDFunc is an instance of a mock function object
	// controlling the behavior of the method GetSyncJobByID.
	GetSyncJobByIDFunc *ExternalServiceStoreGetSyncJobByIDFunc
	// GetSyncJobsFunc is an instance of a mock function object controlling
	// the behavior of the method GetSyncJobs.
	GetSyncJobsFunc *ExternalServiceStoreGetSyncJobsFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *ExternalServiceStoreHandleFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *ExternalServiceStoreListFunc
	// RepoCountFunc is an instance of a mock function object controlling
	// the behavior of the method RepoCount.
	RepoCountFunc *ExternalServiceStoreRepoCountFunc
	// SyncDueFunc is an instance of a mock function object controlling the
	// behavior of the method SyncDue.
	SyncDueFunc *ExternalServiceStoreSyncDueFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *ExternalServiceStoreTransactFunc
	// UpdateFunc is an instance of a mock function object controlling the
	// behavior of the method Update.
	UpdateFunc *ExternalServiceStoreUpdateFunc
	// UpsertFunc is an instance of a mock function object controlling the
	// behavior of the method Upsert.
	UpsertFunc *ExternalServiceStoreUpsertFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *ExternalServiceStoreWithFunc
	// WithEncryptionKeyFunc is an instance of a mock function object
	// controlling the behavior of the method WithEncryptionKey.
	WithEncryptionKeyFunc *ExternalServiceStoreWithEncryptionKeyFunc
}

// NewMockExternalServiceStore creates a new mock of the
// ExternalServiceStore interface. All methods return zero values for all
// results, unless overwritten.
func NewMockExternalServiceStore() *MockExternalServiceStore {
	return &MockExternalServiceStore{
		CountFunc: &ExternalServiceStoreCountFunc{
			defaultHook: func(context.Context, ExternalServicesListOptions) (r0 int, r1 error) {
				return
			},
		},
		CountSyncJobsFunc: &ExternalServiceStoreCountSyncJobsFunc{
			defaultHook: func(context.Context, ExternalServicesGetSyncJobsOptions) (r0 int64, r1 error) {
				return
			},
		},
		CreateFunc: &ExternalServiceStoreCreateFunc{
			defaultHook: func(context.Context, func() *conf.Unified, *types.ExternalService) (r0 error) {
				return
			},
		},
		DeleteFunc: &ExternalServiceStoreDeleteFunc{
			defaultHook: func(context.Context, int64) (r0 error) {
				return
			},
		},
		DistinctKindsFunc: &ExternalServiceStoreDistinctKindsFunc{
			defaultHook: func(context.Context) (r0 []string, r1 error) {
				return
			},
		},
		DoneFunc: &ExternalServiceStoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		GetAffiliatedSyncErrorsFunc: &ExternalServiceStoreGetAffiliatedSyncErrorsFunc{
			defaultHook: func(context.Context, *types.User) (r0 map[int64]string, r1 error) {
				return
			},
		},
		GetByIDFunc: &ExternalServiceStoreGetByIDFunc{
			defaultHook: func(context.Context, int64) (r0 *types.ExternalService, r1 error) {
				return
			},
		},
		GetLastSyncErrorFunc: &ExternalServiceStoreGetLastSyncErrorFunc{
			defaultHook: func(context.Context, int64) (r0 string, r1 error) {
				return
			},
		},
		GetSyncJobByIDFunc: &ExternalServiceStoreGetSyncJobByIDFunc{
			defaultHook: func(context.Context, int64) (r0 *types.ExternalServiceSyncJob, r1 error) {
				return
			},
		},
		GetSyncJobsFunc: &ExternalServiceStoreGetSyncJobsFunc{
			defaultHook: func(context.Context, ExternalServicesGetSyncJobsOptions) (r0 []*types.ExternalServiceSyncJob, r1 error) {
				return
			},
		},
		HandleFunc: &ExternalServiceStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		ListFunc: &ExternalServiceStoreListFunc{
			defaultHook: func(context.Context, ExternalServicesListOptions) (r0 []*types.ExternalService, r1 error) {
				return
			},
		},
		RepoCountFunc: &ExternalServiceStoreRepoCountFunc{
			defaultHook: func(context.Context, int64) (r0 int32, r1 error) {
				return
			},
		},
		SyncDueFunc: &ExternalServiceStoreSyncDueFunc{
			defaultHook: func(context.Context, []int64, time.Duration) (r0 bool, r1 error) {
				return
			},
		},
		TransactFunc: &ExternalServiceStoreTransactFunc{
			defaultHook: func(context.Context) (r0 ExternalServiceStore, r1 error) {
				return
			},
		},
		UpdateFunc: &ExternalServiceStoreUpdateFunc{
			defaultHook: func(context.Context, []schema.AuthProviders, int64, *ExternalServiceUpdate) (r0 error) {
				return
			},
		},
		UpsertFunc: &ExternalServiceStoreUpsertFunc{
			defaultHook: func(context.Context, ...*types.ExternalService) (r0 error) {
				return
			},
		},
		WithFunc: &ExternalServiceStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 ExternalServiceStore) {
				return
			},
		},
		WithEncryptionKeyFunc: &ExternalServiceStoreWithEncryptionKeyFunc{
			defaultHook: func(encryption.Key) (r0 ExternalServiceStore) {
				return
			},
		},
	}
}

// NewStrictMockExternalServiceStore creates a new mock of the
// ExternalServiceStore interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockExternalServiceStore() *MockExternalServiceStore {
	return &MockExternalServiceStore{
		CountFunc: &ExternalServiceStoreCountFunc{
			defaultHook: func(context.Context, ExternalServicesListOptions) (int, error) {
				panic("unexpected invocation of MockExternalServiceStore.Count")
			},
		},
		CountSyncJobsFunc: &ExternalServiceStoreCountSyncJobsFunc{
			defaultHook: func(context.Context, ExternalServicesGetSyncJobsOptions) (int64, error) {
				panic("unexpected invocation of MockExternalServiceStore.CountSyncJobs")
			},
		},
		CreateFunc: &ExternalServiceStoreCreateFunc{
			defaultHook: func(context.Context, func() *conf.Unified, *types.ExternalService) error {
				panic("unexpected invocation of MockExternalServiceStore.Create")
			},
		},
		DeleteFunc: &ExternalServiceStoreDeleteFunc{
			defaultHook: func(context.Context, int64) error {
				panic("unexpected invocation of MockExternalServiceStore.Delete")
			},
		},
		DistinctKindsFunc: &ExternalServiceStoreDistinctKindsFunc{
			defaultHook: func(context.Context) ([]string, error) {
				panic("unexpected invocation of MockExternalServiceStore.DistinctKinds")
			},
		},
		DoneFunc: &ExternalServiceStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockExternalServiceStore.Done")
			},
		},
		GetAffiliatedSyncErrorsFunc: &ExternalServiceStoreGetAffiliatedSyncErrorsFunc{
			defaultHook: func(context.Context, *types.User) (map[int64]string, error) {
				panic("unexpected invocation of MockExternalServiceStore.GetAffiliatedSyncErrors")
			},
		},
		GetByIDFunc: &ExternalServiceStoreGetByIDFunc{
			defaultHook: func(context.Context, int64) (*types.ExternalService, error) {
				panic("unexpected invocation of MockExternalServiceStore.GetByID")
			},
		},
		GetLastSyncErrorFunc: &ExternalServiceStoreGetLastSyncErrorFunc{
			defaultHook: func(context.Context, int64) (string, error) {
				panic("unexpected invocation of MockExternalServiceStore.GetLastSyncError")
			},
		},
		GetSyncJobByIDFunc: &ExternalServiceStoreGetSyncJobByIDFunc{
			defaultHook: func(context.Context, int64) (*types.ExternalServiceSyncJob, error) {
				panic("unexpected invocation of MockExternalServiceStore.GetSyncJobByID")
			},
		},
		GetSyncJobsFunc: &ExternalServiceStoreGetSyncJobsFunc{
			defaultHook: func(context.Context, ExternalServicesGetSyncJobsOptions) ([]*types.ExternalServiceSyncJob, error) {
				panic("unexpected invocation of MockExternalServiceStore.GetSyncJobs")
			},
		},
		HandleFunc: &ExternalServiceStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockExternalServiceStore.Handle")
			},
		},
		ListFunc: &ExternalServiceStoreListFunc{
			defaultHook: func(context.Context, ExternalServicesListOptions) ([]*types.ExternalService, error) {
				panic("unexpected invocation of MockExternalServiceStore.List")
			},
		},
		RepoCountFunc: &ExternalServiceStoreRepoCountFunc{
			defaultHook: func(context.Context, int64) (int32, error) {
				panic("unexpected invocation of MockExternalServiceStore.RepoCount")
			},
		},
		SyncDueFunc: &ExternalServiceStoreSyncDueFunc{
			defaultHook: func(context.Context, []int64, time.Duration) (bool, error) {
				panic("unexpected invocation of MockExternalServiceStore.SyncDue")
			},
		},
		TransactFunc: &ExternalServiceStoreTransactFunc{
			defaultHook: func(context.Context) (ExternalServiceStore, error) {
				panic("unexpected invocation of MockExternalServiceStore.Transact")
			},
		},
		UpdateFunc: &ExternalServiceStoreUpdateFunc{
			defaultHook: func(context.Context, []schema.AuthProviders, int64, *ExternalServiceUpdate) error {
				panic("unexpected invocation of MockExternalServiceStore.Update")
			},
		},
		UpsertFunc: &ExternalServiceStoreUpsertFunc{
			defaultHook: func(context.Context, ...*types.ExternalService) error {
				panic("unexpected invocation of MockExternalServiceStore.Upsert")
			},
		},
		WithFunc: &ExternalServiceStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) ExternalServiceStore {
				panic("unexpected invocation of MockExternalServiceStore.With")
			},
		},
		WithEncryptionKeyFunc: &ExternalServiceStoreWithEncryptionKeyFunc{
			defaultHook: func(encryption.Key) ExternalServiceStore {
				panic("unexpected invocation of MockExternalServiceStore.WithEncryptionKey")
			},
		},
	}
}

// NewMockExternalServiceStoreFrom creates a new mock of the
// MockExternalServiceStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockExternalServiceStoreFrom(i ExternalServiceStore) *MockExternalServiceStore {
	return &MockExternalServiceStore{
		CountFunc: &ExternalServiceStoreCountFunc{
			defaultHook: i.Count,
		},
		CountSyncJobsFunc: &ExternalServiceStoreCountSyncJobsFunc{
			defaultHook: i.CountSyncJobs,
		},
		CreateFunc: &ExternalServiceStoreCreateFunc{
			defaultHook: i.Create,
		},
		DeleteFunc: &ExternalServiceStoreDeleteFunc{
			defaultHook: i.Delete,
		},
		DistinctKindsFunc: &ExternalServiceStoreDistinctKindsFunc{
			defaultHook: i.DistinctKinds,
		},
		DoneFunc: &ExternalServiceStoreDoneFunc{
			defaultHook: i.Done,
		},
		GetAffiliatedSyncErrorsFunc: &ExternalServiceStoreGetAffiliatedSyncErrorsFunc{
			defaultHook: i.GetAffiliatedSyncErrors,
		},
		GetByIDFunc: &ExternalServiceStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		GetLastSyncErrorFunc: &ExternalServiceStoreGetLastSyncErrorFunc{
			defaultHook: i.GetLastSyncError,
		},
		GetSyncJobByIDFunc: &ExternalServiceStoreGetSyncJobByIDFunc{
			defaultHook: i.GetSyncJobByID,
		},
		GetSyncJobsFunc: &ExternalServiceStoreGetSyncJobsFunc{
			defaultHook: i.GetSyncJobs,
		},
		HandleFunc: &ExternalServiceStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListFunc: &ExternalServiceStoreListFunc{
			defaultHook: i.List,
		},
		RepoCountFunc: &ExternalServiceStoreRepoCountFunc{
			defaultHook: i.RepoCount,
		},
		SyncDueFunc: &ExternalServiceStoreSyncDueFunc{
			defaultHook: i.SyncDue,
		},
		TransactFunc: &ExternalServiceStoreTransactFunc{
			defaultHook: i.Transact,
		},
		UpdateFunc: &ExternalServiceStoreUpdateFunc{
			defaultHook: i.Update,
		},
		UpsertFunc: &ExternalServiceStoreUpsertFunc{
			defaultHook: i.Upsert,
		},
		WithFunc: &ExternalServiceStoreWithFunc{
			defaultHook: i.With,
		},
		WithEncryptionKeyFunc: &ExternalServiceStoreWithEncryptionKeyFunc{
			defaultHook: i.WithEncryptionKey,
		},
	}
}

// ExternalServiceStoreCountFunc describes the behavior when the Count
// method of the parent MockExternalServiceStore instance is invoked.
type ExternalServiceStoreCountFunc struct {
	defaultHook func(context.Context, ExternalServicesListOptions) (int, error)
	hooks       []func(context.Context, ExternalServicesListOptions) (int, error)
	history     []ExternalServiceStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) Count(v0 context.Context, v1 ExternalServicesListOptions) (int, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(ExternalServiceStoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockExternalServiceStore instance is invoked and the hook queue is
// empty.
func (f *ExternalServiceStoreCountFunc) SetDefaultHook(hook func(context.Context, ExternalServicesListOptions) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockExternalServiceStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExternalServiceStoreCountFunc) PushHook(hook func(context.Context, ExternalServicesListOptions) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, ExternalServicesListOptions) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, ExternalServicesListOptions) (int, error) {
		return r0, r1
	})
}

func (f *ExternalServiceStoreCountFunc) nextHook() func(context.Context, ExternalServicesListOptions) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreCountFunc) appendCall(r0 ExternalServiceStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreCountFuncCall objects
// describing the invocations of this function.
func (f *ExternalServiceStoreCountFunc) History() []ExternalServiceStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreCountFuncCall is an object that describes an
// invocation of method Count on an instance of MockExternalServiceStore.
type ExternalServiceStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ExternalServicesListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExternalServiceStoreCountSyncJobsFunc describes the behavior when the
// CountSyncJobs method of the parent MockExternalServiceStore instance is
// invoked.
type ExternalServiceStoreCountSyncJobsFunc struct {
	defaultHook func(context.Context, ExternalServicesGetSyncJobsOptions) (int64, error)
	hooks       []func(context.Context, ExternalServicesGetSyncJobsOptions) (int64, error)
	history     []ExternalServiceStoreCountSyncJobsFuncCall
	mutex       sync.Mutex
}

// CountSyncJobs delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockExternalServiceStore) CountSyncJobs(v0 context.Context, v1 ExternalServicesGetSyncJobsOptions) (int64, error) {
	r0, r1 := m.CountSyncJobsFunc.nextHook()(v0, v1)
	m.CountSyncJobsFunc.appendCall(ExternalServiceStoreCountSyncJobsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CountSyncJobs method
// of the parent MockExternalServiceStore instance is invoked and the hook
// queue is empty.
func (f *ExternalServiceStoreCountSyncJobsFunc) SetDefaultHook(hook func(context.Context, ExternalServicesGetSyncJobsOptions) (int64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountSyncJobs method of the parent MockExternalServiceStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ExternalServiceStoreCountSyncJobsFunc) PushHook(hook func(context.Context, ExternalServicesGetSyncJobsOptions) (int64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreCountSyncJobsFunc) SetDefaultReturn(r0 int64, r1 error) {
	f.SetDefaultHook(func(context.Context, ExternalServicesGetSyncJobsOptions) (int64, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreCountSyncJobsFunc) PushReturn(r0 int64, r1 error) {
	f.PushHook(func(context.Context, ExternalServicesGetSyncJobsOptions) (int64, error) {
		return r0, r1
	})
}

func (f *ExternalServiceStoreCountSyncJobsFunc) nextHook() func(context.Context, ExternalServicesGetSyncJobsOptions) (int64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreCountSyncJobsFunc) appendCall(r0 ExternalServiceStoreCountSyncJobsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreCountSyncJobsFuncCall
// objects describing the invocations of this function.
func (f *ExternalServiceStoreCountSyncJobsFunc) History() []ExternalServiceStoreCountSyncJobsFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreCountSyncJobsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreCountSyncJobsFuncCall is an object that describes an
// invocation of method CountSyncJobs on an instance of
// MockExternalServiceStore.
type ExternalServiceStoreCountSyncJobsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ExternalServicesGetSyncJobsOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreCountSyncJobsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreCountSyncJobsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExternalServiceStoreCreateFunc describes the behavior when the Create
// method of the parent MockExternalServiceStore instance is invoked.
type ExternalServiceStoreCreateFunc struct {
	defaultHook func(context.Context, func() *conf.Unified, *types.ExternalService) error
	hooks       []func(context.Context, func() *conf.Unified, *types.ExternalService) error
	history     []ExternalServiceStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) Create(v0 context.Context, v1 func() *conf.Unified, v2 *types.ExternalService) error {
	r0 := m.CreateFunc.nextHook()(v0, v1, v2)
	m.CreateFunc.appendCall(ExternalServiceStoreCreateFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockExternalServiceStore instance is invoked and the hook queue is
// empty.
func (f *ExternalServiceStoreCreateFunc) SetDefaultHook(hook func(context.Context, func() *conf.Unified, *types.ExternalService) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockExternalServiceStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExternalServiceStoreCreateFunc) PushHook(hook func(context.Context, func() *conf.Unified, *types.ExternalService) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreCreateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, func() *conf.Unified, *types.ExternalService) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreCreateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, func() *conf.Unified, *types.ExternalService) error {
		return r0
	})
}

func (f *ExternalServiceStoreCreateFunc) nextHook() func(context.Context, func() *conf.Unified, *types.ExternalService) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreCreateFunc) appendCall(r0 ExternalServiceStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreCreateFuncCall objects
// describing the invocations of this function.
func (f *ExternalServiceStoreCreateFunc) History() []ExternalServiceStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreCreateFuncCall is an object that describes an
// invocation of method Create on an instance of MockExternalServiceStore.
type ExternalServiceStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 func() *conf.Unified
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *types.ExternalService
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExternalServiceStoreDeleteFunc describes the behavior when the Delete
// method of the parent MockExternalServiceStore instance is invoked.
type ExternalServiceStoreDeleteFunc struct {
	defaultHook func(context.Context, int64) error
	hooks       []func(context.Context, int64) error
	history     []ExternalServiceStoreDeleteFuncCall
	mutex       sync.Mutex
}

// Delete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) Delete(v0 context.Context, v1 int64) error {
	r0 := m.DeleteFunc.nextHook()(v0, v1)
	m.DeleteFunc.appendCall(ExternalServiceStoreDeleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Delete method of the
// parent MockExternalServiceStore instance is invoked and the hook queue is
// empty.
func (f *ExternalServiceStoreDeleteFunc) SetDefaultHook(hook func(context.Context, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Delete method of the parent MockExternalServiceStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExternalServiceStoreDeleteFunc) PushHook(hook func(context.Context, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64) error {
		return r0
	})
}

func (f *ExternalServiceStoreDeleteFunc) nextHook() func(context.Context, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreDeleteFunc) appendCall(r0 ExternalServiceStoreDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreDeleteFuncCall objects
// describing the invocations of this function.
func (f *ExternalServiceStoreDeleteFunc) History() []ExternalServiceStoreDeleteFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreDeleteFuncCall is an object that describes an
// invocation of method Delete on an instance of MockExternalServiceStore.
type ExternalServiceStoreDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExternalServiceStoreDistinctKindsFunc describes the behavior when the
// DistinctKinds method of the parent MockExternalServiceStore instance is
// invoked.
type ExternalServiceStoreDistinctKindsFunc struct {
	defaultHook func(context.Context) ([]string, error)
	hooks       []func(context.Context) ([]string, error)
	history     []ExternalServiceStoreDistinctKindsFuncCall
	mutex       sync.Mutex
}

// DistinctKinds delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockExternalServiceStore) DistinctKinds(v0 context.Context) ([]string, error) {
	r0, r1 := m.DistinctKindsFunc.nextHook()(v0)
	m.DistinctKindsFunc.appendCall(ExternalServiceStoreDistinctKindsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DistinctKinds method
// of the parent MockExternalServiceStore instance is invoked and the hook
// queue is empty.
func (f *ExternalServiceStoreDistinctKindsFunc) SetDefaultHook(hook func(context.Context) ([]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DistinctKinds method of the parent MockExternalServiceStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ExternalServiceStoreDistinctKindsFunc) PushHook(hook func(context.Context) ([]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreDistinctKindsFunc) SetDefaultReturn(r0 []string, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreDistinctKindsFunc) PushReturn(r0 []string, r1 error) {
	f.PushHook(func(context.Context) ([]string, error) {
		return r0, r1
	})
}

func (f *ExternalServiceStoreDistinctKindsFunc) nextHook() func(context.Context) ([]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreDistinctKindsFunc) appendCall(r0 ExternalServiceStoreDistinctKindsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreDistinctKindsFuncCall
// objects describing the invocations of this function.
func (f *ExternalServiceStoreDistinctKindsFunc) History() []ExternalServiceStoreDistinctKindsFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreDistinctKindsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreDistinctKindsFuncCall is an object that describes an
// invocation of method DistinctKinds on an instance of
// MockExternalServiceStore.
type ExternalServiceStoreDistinctKindsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreDistinctKindsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreDistinctKindsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExternalServiceStoreDoneFunc describes the behavior when the Done method
// of the parent MockExternalServiceStore instance is invoked.
type ExternalServiceStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []ExternalServiceStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(ExternalServiceStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockExternalServiceStore instance is invoked and the hook queue is
// empty.
func (f *ExternalServiceStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockExternalServiceStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExternalServiceStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *ExternalServiceStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreDoneFunc) appendCall(r0 ExternalServiceStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreDoneFuncCall objects
// describing the invocations of this function.
func (f *ExternalServiceStoreDoneFunc) History() []ExternalServiceStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreDoneFuncCall is an object that describes an
// invocation of method Done on an instance of MockExternalServiceStore.
type ExternalServiceStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExternalServiceStoreGetAffiliatedSyncErrorsFunc describes the behavior
// when the GetAffiliatedSyncErrors method of the parent
// MockExternalServiceStore instance is invoked.
type ExternalServiceStoreGetAffiliatedSyncErrorsFunc struct {
	defaultHook func(context.Context, *types.User) (map[int64]string, error)
	hooks       []func(context.Context, *types.User) (map[int64]string, error)
	history     []ExternalServiceStoreGetAffiliatedSyncErrorsFuncCall
	mutex       sync.Mutex
}

// GetAffiliatedSyncErrors delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockExternalServiceStore) GetAffiliatedSyncErrors(v0 context.Context, v1 *types.User) (map[int64]string, error) {
	r0, r1 := m.GetAffiliatedSyncErrorsFunc.nextHook()(v0, v1)
	m.GetAffiliatedSyncErrorsFunc.appendCall(ExternalServiceStoreGetAffiliatedSyncErrorsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetAffiliatedSyncErrors method of the parent MockExternalServiceStore
// instance is invoked and the hook queue is empty.
func (f *ExternalServiceStoreGetAffiliatedSyncErrorsFunc) SetDefaultHook(hook func(context.Context, *types.User) (map[int64]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAffiliatedSyncErrors method of the parent MockExternalServiceStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *ExternalServiceStoreGetAffiliatedSyncErrorsFunc) PushHook(hook func(context.Context, *types.User) (map[int64]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreGetAffiliatedSyncErrorsFunc) SetDefaultReturn(r0 map[int64]string, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.User) (map[int64]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreGetAffiliatedSyncErrorsFunc) PushReturn(r0 map[int64]string, r1 error) {
	f.PushHook(func(context.Context, *types.User) (map[int64]string, error) {
		return r0, r1
	})
}

func (f *ExternalServiceStoreGetAffiliatedSyncErrorsFunc) nextHook() func(context.Context, *types.User) (map[int64]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreGetAffiliatedSyncErrorsFunc) appendCall(r0 ExternalServiceStoreGetAffiliatedSyncErrorsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ExternalServiceStoreGetAffiliatedSyncErrorsFuncCall objects describing
// the invocations of this function.
func (f *ExternalServiceStoreGetAffiliatedSyncErrorsFunc) History() []ExternalServiceStoreGetAffiliatedSyncErrorsFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreGetAffiliatedSyncErrorsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreGetAffiliatedSyncErrorsFuncCall is an object that
// describes an invocation of method GetAffiliatedSyncErrors on an instance
// of MockExternalServiceStore.
type ExternalServiceStoreGetAffiliatedSyncErrorsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.User
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[int64]string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreGetAffiliatedSyncErrorsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreGetAffiliatedSyncErrorsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExternalServiceStoreGetByIDFunc describes the behavior when the GetByID
// method of the parent MockExternalServiceStore instance is invoked.
type ExternalServiceStoreGetByIDFunc struct {
	defaultHook func(context.Context, int64) (*types.ExternalService, error)
	hooks       []func(context.Context, int64) (*types.ExternalService, error)
	history     []ExternalServiceStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) GetByID(v0 context.Context, v1 int64) (*types.ExternalService, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(ExternalServiceStoreGetByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockExternalServiceStore instance is invoked and the hook
// queue is empty.
func (f *ExternalServiceStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int64) (*types.ExternalService, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockExternalServiceStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ExternalServiceStoreGetByIDFunc) PushHook(hook func(context.Context, int64) (*types.ExternalService, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreGetByIDFunc) SetDefaultReturn(r0 *types.ExternalService, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (*types.ExternalService, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreGetByIDFunc) PushReturn(r0 *types.ExternalService, r1 error) {
	f.PushHook(func(context.Context, int64) (*types.ExternalService, error) {
		return r0, r1
	})
}

func (f *ExternalServiceStoreGetByIDFunc) nextHook() func(context.Context, int64) (*types.ExternalService, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreGetByIDFunc) appendCall(r0 ExternalServiceStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreGetByIDFuncCall objects
// describing the invocations of this function.
func (f *ExternalServiceStoreGetByIDFunc) History() []ExternalServiceStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreGetByIDFuncCall is an object that describes an
// invocation of method GetByID on an instance of MockExternalServiceStore.
type ExternalServiceStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.ExternalService
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExternalServiceStoreGetLastSyncErrorFunc describes the behavior when the
// GetLastSyncError method of the parent MockExternalServiceStore instance
// is invoked.
type ExternalServiceStoreGetLastSyncErrorFunc struct {
	defaultHook func(context.Context, int64) (string, error)
	hooks       []func(context.Context, int64) (string, error)
	history     []ExternalServiceStoreGetLastSyncErrorFuncCall
	mutex       sync.Mutex
}

// GetLastSyncError delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockExternalServiceStore) GetLastSyncError(v0 context.Context, v1 int64) (string, error) {
	r0, r1 := m.GetLastSyncErrorFunc.nextHook()(v0, v1)
	m.GetLastSyncErrorFunc.appendCall(ExternalServiceStoreGetLastSyncErrorFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetLastSyncError
// method of the parent MockExternalServiceStore instance is invoked and the
// hook queue is empty.
func (f *ExternalServiceStoreGetLastSyncErrorFunc) SetDefaultHook(hook func(context.Context, int64) (string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLastSyncError method of the parent MockExternalServiceStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ExternalServiceStoreGetLastSyncErrorFunc) PushHook(hook func(context.Context, int64) (string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreGetLastSyncErrorFunc) SetDefaultReturn(r0 string, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreGetLastSyncErrorFunc) PushReturn(r0 string, r1 error) {
	f.PushHook(func(context.Context, int64) (string, error) {
		return r0, r1
	})
}

func (f *ExternalServiceStoreGetLastSyncErrorFunc) nextHook() func(context.Context, int64) (string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreGetLastSyncErrorFunc) appendCall(r0 ExternalServiceStoreGetLastSyncErrorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ExternalServiceStoreGetLastSyncErrorFuncCall objects describing the
// invocations of this function.
func (f *ExternalServiceStoreGetLastSyncErrorFunc) History() []ExternalServiceStoreGetLastSyncErrorFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreGetLastSyncErrorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreGetLastSyncErrorFuncCall is an object that describes
// an invocation of method GetLastSyncError on an instance of
// MockExternalServiceStore.
type ExternalServiceStoreGetLastSyncErrorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreGetLastSyncErrorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreGetLastSyncErrorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExternalServiceStoreGetSyncJobByIDFunc describes the behavior when the
// GetSyncJobByID method of the parent MockExternalServiceStore instance is
// invoked.
type ExternalServiceStoreGetSyncJobByIDFunc struct {
	defaultHook func(context.Context, int64) (*types.ExternalServiceSyncJob, error)
	hooks       []func(context.Context, int64) (*types.ExternalServiceSyncJob, error)
	history     []ExternalServiceStoreGetSyncJobByIDFuncCall
	mutex       sync.Mutex
}

// GetSyncJobByID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockExternalServiceStore) GetSyncJobByID(v0 context.Context, v1 int64) (*types.ExternalServiceSyncJob, error) {
	r0, r1 := m.GetSyncJobByIDFunc.nextHook()(v0, v1)
	m.GetSyncJobByIDFunc.appendCall(ExternalServiceStoreGetSyncJobByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetSyncJobByID
// method of the parent MockExternalServiceStore instance is invoked and the
// hook queue is empty.
func (f *ExternalServiceStoreGetSyncJobByIDFunc) SetDefaultHook(hook func(context.Context, int64) (*types.ExternalServiceSyncJob, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetSyncJobByID method of the parent MockExternalServiceStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ExternalServiceStoreGetSyncJobByIDFunc) PushHook(hook func(context.Context, int64) (*types.ExternalServiceSyncJob, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreGetSyncJobByIDFunc) SetDefaultReturn(r0 *types.ExternalServiceSyncJob, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (*types.ExternalServiceSyncJob, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreGetSyncJobByIDFunc) PushReturn(r0 *types.ExternalServiceSyncJob, r1 error) {
	f.PushHook(func(context.Context, int64) (*types.ExternalServiceSyncJob, error) {
		return r0, r1
	})
}

func (f *ExternalServiceStoreGetSyncJobByIDFunc) nextHook() func(context.Context, int64) (*types.ExternalServiceSyncJob, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreGetSyncJobByIDFunc) appendCall(r0 ExternalServiceStoreGetSyncJobByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreGetSyncJobByIDFuncCall
// objects describing the invocations of this function.
func (f *ExternalServiceStoreGetSyncJobByIDFunc) History() []ExternalServiceStoreGetSyncJobByIDFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreGetSyncJobByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreGetSyncJobByIDFuncCall is an object that describes an
// invocation of method GetSyncJobByID on an instance of
// MockExternalServiceStore.
type ExternalServiceStoreGetSyncJobByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.ExternalServiceSyncJob
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreGetSyncJobByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreGetSyncJobByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExternalServiceStoreGetSyncJobsFunc describes the behavior when the
// GetSyncJobs method of the parent MockExternalServiceStore instance is
// invoked.
type ExternalServiceStoreGetSyncJobsFunc struct {
	defaultHook func(context.Context, ExternalServicesGetSyncJobsOptions) ([]*types.ExternalServiceSyncJob, error)
	hooks       []func(context.Context, ExternalServicesGetSyncJobsOptions) ([]*types.ExternalServiceSyncJob, error)
	history     []ExternalServiceStoreGetSyncJobsFuncCall
	mutex       sync.Mutex
}

// GetSyncJobs delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockExternalServiceStore) GetSyncJobs(v0 context.Context, v1 ExternalServicesGetSyncJobsOptions) ([]*types.ExternalServiceSyncJob, error) {
	r0, r1 := m.GetSyncJobsFunc.nextHook()(v0, v1)
	m.GetSyncJobsFunc.appendCall(ExternalServiceStoreGetSyncJobsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetSyncJobs method
// of the parent MockExternalServiceStore instance is invoked and the hook
// queue is empty.
func (f *ExternalServiceStoreGetSyncJobsFunc) SetDefaultHook(hook func(context.Context, ExternalServicesGetSyncJobsOptions) ([]*types.ExternalServiceSyncJob, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetSyncJobs method of the parent MockExternalServiceStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ExternalServiceStoreGetSyncJobsFunc) PushHook(hook func(context.Context, ExternalServicesGetSyncJobsOptions) ([]*types.ExternalServiceSyncJob, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreGetSyncJobsFunc) SetDefaultReturn(r0 []*types.ExternalServiceSyncJob, r1 error) {
	f.SetDefaultHook(func(context.Context, ExternalServicesGetSyncJobsOptions) ([]*types.ExternalServiceSyncJob, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreGetSyncJobsFunc) PushReturn(r0 []*types.ExternalServiceSyncJob, r1 error) {
	f.PushHook(func(context.Context, ExternalServicesGetSyncJobsOptions) ([]*types.ExternalServiceSyncJob, error) {
		return r0, r1
	})
}

func (f *ExternalServiceStoreGetSyncJobsFunc) nextHook() func(context.Context, ExternalServicesGetSyncJobsOptions) ([]*types.ExternalServiceSyncJob, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreGetSyncJobsFunc) appendCall(r0 ExternalServiceStoreGetSyncJobsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreGetSyncJobsFuncCall
// objects describing the invocations of this function.
func (f *ExternalServiceStoreGetSyncJobsFunc) History() []ExternalServiceStoreGetSyncJobsFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreGetSyncJobsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreGetSyncJobsFuncCall is an object that describes an
// invocation of method GetSyncJobs on an instance of
// MockExternalServiceStore.
type ExternalServiceStoreGetSyncJobsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ExternalServicesGetSyncJobsOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.ExternalServiceSyncJob
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreGetSyncJobsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreGetSyncJobsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExternalServiceStoreHandleFunc describes the behavior when the Handle
// method of the parent MockExternalServiceStore instance is invoked.
type ExternalServiceStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []ExternalServiceStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(ExternalServiceStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockExternalServiceStore instance is invoked and the hook queue is
// empty.
func (f *ExternalServiceStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockExternalServiceStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExternalServiceStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *ExternalServiceStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreHandleFunc) appendCall(r0 ExternalServiceStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *ExternalServiceStoreHandleFunc) History() []ExternalServiceStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of MockExternalServiceStore.
type ExternalServiceStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExternalServiceStoreListFunc describes the behavior when the List method
// of the parent MockExternalServiceStore instance is invoked.
type ExternalServiceStoreListFunc struct {
	defaultHook func(context.Context, ExternalServicesListOptions) ([]*types.ExternalService, error)
	hooks       []func(context.Context, ExternalServicesListOptions) ([]*types.ExternalService, error)
	history     []ExternalServiceStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) List(v0 context.Context, v1 ExternalServicesListOptions) ([]*types.ExternalService, error) {
	r0, r1 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(ExternalServiceStoreListFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockExternalServiceStore instance is invoked and the hook queue is
// empty.
func (f *ExternalServiceStoreListFunc) SetDefaultHook(hook func(context.Context, ExternalServicesListOptions) ([]*types.ExternalService, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockExternalServiceStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExternalServiceStoreListFunc) PushHook(hook func(context.Context, ExternalServicesListOptions) ([]*types.ExternalService, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreListFunc) SetDefaultReturn(r0 []*types.ExternalService, r1 error) {
	f.SetDefaultHook(func(context.Context, ExternalServicesListOptions) ([]*types.ExternalService, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreListFunc) PushReturn(r0 []*types.ExternalService, r1 error) {
	f.PushHook(func(context.Context, ExternalServicesListOptions) ([]*types.ExternalService, error) {
		return r0, r1
	})
}

func (f *ExternalServiceStoreListFunc) nextHook() func(context.Context, ExternalServicesListOptions) ([]*types.ExternalService, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreListFunc) appendCall(r0 ExternalServiceStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreListFuncCall objects
// describing the invocations of this function.
func (f *ExternalServiceStoreListFunc) History() []ExternalServiceStoreListFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreListFuncCall is an object that describes an
// invocation of method List on an instance of MockExternalServiceStore.
type ExternalServiceStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ExternalServicesListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.ExternalService
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExternalServiceStoreRepoCountFunc describes the behavior when the
// RepoCount method of the parent MockExternalServiceStore instance is
// invoked.
type ExternalServiceStoreRepoCountFunc struct {
	defaultHook func(context.Context, int64) (int32, error)
	hooks       []func(context.Context, int64) (int32, error)
	history     []ExternalServiceStoreRepoCountFuncCall
	mutex       sync.Mutex
}

// RepoCount delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) RepoCount(v0 context.Context, v1 int64) (int32, error) {
	r0, r1 := m.RepoCountFunc.nextHook()(v0, v1)
	m.RepoCountFunc.appendCall(ExternalServiceStoreRepoCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RepoCount method of
// the parent MockExternalServiceStore instance is invoked and the hook
// queue is empty.
func (f *ExternalServiceStoreRepoCountFunc) SetDefaultHook(hook func(context.Context, int64) (int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepoCount method of the parent MockExternalServiceStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ExternalServiceStoreRepoCountFunc) PushHook(hook func(context.Context, int64) (int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreRepoCountFunc) SetDefaultReturn(r0 int32, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreRepoCountFunc) PushReturn(r0 int32, r1 error) {
	f.PushHook(func(context.Context, int64) (int32, error) {
		return r0, r1
	})
}

func (f *ExternalServiceStoreRepoCountFunc) nextHook() func(context.Context, int64) (int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreRepoCountFunc) appendCall(r0 ExternalServiceStoreRepoCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreRepoCountFuncCall
// objects describing the invocations of this function.
func (f *ExternalServiceStoreRepoCountFunc) History() []ExternalServiceStoreRepoCountFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreRepoCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreRepoCountFuncCall is an object that describes an
// invocation of method RepoCount on an instance of
// MockExternalServiceStore.
type ExternalServiceStoreRepoCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreRepoCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreRepoCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExternalServiceStoreSyncDueFunc describes the behavior when the SyncDue
// method of the parent MockExternalServiceStore instance is invoked.
type ExternalServiceStoreSyncDueFunc struct {
	defaultHook func(context.Context, []int64, time.Duration) (bool, error)
	hooks       []func(context.Context, []int64, time.Duration) (bool, error)
	history     []ExternalServiceStoreSyncDueFuncCall
	mutex       sync.Mutex
}

// SyncDue delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) SyncDue(v0 context.Context, v1 []int64, v2 time.Duration) (bool, error) {
	r0, r1 := m.SyncDueFunc.nextHook()(v0, v1, v2)
	m.SyncDueFunc.appendCall(ExternalServiceStoreSyncDueFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SyncDue method of
// the parent MockExternalServiceStore instance is invoked and the hook
// queue is empty.
func (f *ExternalServiceStoreSyncDueFunc) SetDefaultHook(hook func(context.Context, []int64, time.Duration) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SyncDue method of the parent MockExternalServiceStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ExternalServiceStoreSyncDueFunc) PushHook(hook func(context.Context, []int64, time.Duration) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreSyncDueFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, []int64, time.Duration) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreSyncDueFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, []int64, time.Duration) (bool, error) {
		return r0, r1
	})
}

func (f *ExternalServiceStoreSyncDueFunc) nextHook() func(context.Context, []int64, time.Duration) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreSyncDueFunc) appendCall(r0 ExternalServiceStoreSyncDueFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreSyncDueFuncCall objects
// describing the invocations of this function.
func (f *ExternalServiceStoreSyncDueFunc) History() []ExternalServiceStoreSyncDueFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreSyncDueFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreSyncDueFuncCall is an object that describes an
// invocation of method SyncDue on an instance of MockExternalServiceStore.
type ExternalServiceStoreSyncDueFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Duration
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreSyncDueFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreSyncDueFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExternalServiceStoreTransactFunc describes the behavior when the Transact
// method of the parent MockExternalServiceStore instance is invoked.
type ExternalServiceStoreTransactFunc struct {
	defaultHook func(context.Context) (ExternalServiceStore, error)
	hooks       []func(context.Context) (ExternalServiceStore, error)
	history     []ExternalServiceStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) Transact(v0 context.Context) (ExternalServiceStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(ExternalServiceStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockExternalServiceStore instance is invoked and the hook
// queue is empty.
func (f *ExternalServiceStoreTransactFunc) SetDefaultHook(hook func(context.Context) (ExternalServiceStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockExternalServiceStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ExternalServiceStoreTransactFunc) PushHook(hook func(context.Context) (ExternalServiceStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreTransactFunc) SetDefaultReturn(r0 ExternalServiceStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (ExternalServiceStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreTransactFunc) PushReturn(r0 ExternalServiceStore, r1 error) {
	f.PushHook(func(context.Context) (ExternalServiceStore, error) {
		return r0, r1
	})
}

func (f *ExternalServiceStoreTransactFunc) nextHook() func(context.Context) (ExternalServiceStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreTransactFunc) appendCall(r0 ExternalServiceStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreTransactFuncCall
// objects describing the invocations of this function.
func (f *ExternalServiceStoreTransactFunc) History() []ExternalServiceStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreTransactFuncCall is an object that describes an
// invocation of method Transact on an instance of MockExternalServiceStore.
type ExternalServiceStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 ExternalServiceStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExternalServiceStoreUpdateFunc describes the behavior when the Update
// method of the parent MockExternalServiceStore instance is invoked.
type ExternalServiceStoreUpdateFunc struct {
	defaultHook func(context.Context, []schema.AuthProviders, int64, *ExternalServiceUpdate) error
	hooks       []func(context.Context, []schema.AuthProviders, int64, *ExternalServiceUpdate) error
	history     []ExternalServiceStoreUpdateFuncCall
	mutex       sync.Mutex
}

// Update delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) Update(v0 context.Context, v1 []schema.AuthProviders, v2 int64, v3 *ExternalServiceUpdate) error {
	r0 := m.UpdateFunc.nextHook()(v0, v1, v2, v3)
	m.UpdateFunc.appendCall(ExternalServiceStoreUpdateFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Update method of the
// parent MockExternalServiceStore instance is invoked and the hook queue is
// empty.
func (f *ExternalServiceStoreUpdateFunc) SetDefaultHook(hook func(context.Context, []schema.AuthProviders, int64, *ExternalServiceUpdate) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Update method of the parent MockExternalServiceStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExternalServiceStoreUpdateFunc) PushHook(hook func(context.Context, []schema.AuthProviders, int64, *ExternalServiceUpdate) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreUpdateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []schema.AuthProviders, int64, *ExternalServiceUpdate) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreUpdateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []schema.AuthProviders, int64, *ExternalServiceUpdate) error {
		return r0
	})
}

func (f *ExternalServiceStoreUpdateFunc) nextHook() func(context.Context, []schema.AuthProviders, int64, *ExternalServiceUpdate) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreUpdateFunc) appendCall(r0 ExternalServiceStoreUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreUpdateFuncCall objects
// describing the invocations of this function.
func (f *ExternalServiceStoreUpdateFunc) History() []ExternalServiceStoreUpdateFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreUpdateFuncCall is an object that describes an
// invocation of method Update on an instance of MockExternalServiceStore.
type ExternalServiceStoreUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []schema.AuthProviders
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int64
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *ExternalServiceUpdate
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExternalServiceStoreUpsertFunc describes the behavior when the Upsert
// method of the parent MockExternalServiceStore instance is invoked.
type ExternalServiceStoreUpsertFunc struct {
	defaultHook func(context.Context, ...*types.ExternalService) error
	hooks       []func(context.Context, ...*types.ExternalService) error
	history     []ExternalServiceStoreUpsertFuncCall
	mutex       sync.Mutex
}

// Upsert delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) Upsert(v0 context.Context, v1 ...*types.ExternalService) error {
	r0 := m.UpsertFunc.nextHook()(v0, v1...)
	m.UpsertFunc.appendCall(ExternalServiceStoreUpsertFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Upsert method of the
// parent MockExternalServiceStore instance is invoked and the hook queue is
// empty.
func (f *ExternalServiceStoreUpsertFunc) SetDefaultHook(hook func(context.Context, ...*types.ExternalService) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Upsert method of the parent MockExternalServiceStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExternalServiceStoreUpsertFunc) PushHook(hook func(context.Context, ...*types.ExternalService) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreUpsertFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ...*types.ExternalService) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreUpsertFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ...*types.ExternalService) error {
		return r0
	})
}

func (f *ExternalServiceStoreUpsertFunc) nextHook() func(context.Context, ...*types.ExternalService) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreUpsertFunc) appendCall(r0 ExternalServiceStoreUpsertFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreUpsertFuncCall objects
// describing the invocations of this function.
func (f *ExternalServiceStoreUpsertFunc) History() []ExternalServiceStoreUpsertFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreUpsertFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreUpsertFuncCall is an object that describes an
// invocation of method Upsert on an instance of MockExternalServiceStore.
type ExternalServiceStoreUpsertFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []*types.ExternalService
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c ExternalServiceStoreUpsertFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreUpsertFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExternalServiceStoreWithFunc describes the behavior when the With method
// of the parent MockExternalServiceStore instance is invoked.
type ExternalServiceStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) ExternalServiceStore
	hooks       []func(basestore.ShareableStore) ExternalServiceStore
	history     []ExternalServiceStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) With(v0 basestore.ShareableStore) ExternalServiceStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(ExternalServiceStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockExternalServiceStore instance is invoked and the hook queue is
// empty.
func (f *ExternalServiceStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) ExternalServiceStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockExternalServiceStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExternalServiceStoreWithFunc) PushHook(hook func(basestore.ShareableStore) ExternalServiceStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreWithFunc) SetDefaultReturn(r0 ExternalServiceStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) ExternalServiceStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreWithFunc) PushReturn(r0 ExternalServiceStore) {
	f.PushHook(func(basestore.ShareableStore) ExternalServiceStore {
		return r0
	})
}

func (f *ExternalServiceStoreWithFunc) nextHook() func(basestore.ShareableStore) ExternalServiceStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreWithFunc) appendCall(r0 ExternalServiceStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreWithFuncCall objects
// describing the invocations of this function.
func (f *ExternalServiceStoreWithFunc) History() []ExternalServiceStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreWithFuncCall is an object that describes an
// invocation of method With on an instance of MockExternalServiceStore.
type ExternalServiceStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 ExternalServiceStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExternalServiceStoreWithEncryptionKeyFunc describes the behavior when the
// WithEncryptionKey method of the parent MockExternalServiceStore instance
// is invoked.
type ExternalServiceStoreWithEncryptionKeyFunc struct {
	defaultHook func(encryption.Key) ExternalServiceStore
	hooks       []func(encryption.Key) ExternalServiceStore
	history     []ExternalServiceStoreWithEncryptionKeyFuncCall
	mutex       sync.Mutex
}

// WithEncryptionKey delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockExternalServiceStore) WithEncryptionKey(v0 encryption.Key) ExternalServiceStore {
	r0 := m.WithEncryptionKeyFunc.nextHook()(v0)
	m.WithEncryptionKeyFunc.appendCall(ExternalServiceStoreWithEncryptionKeyFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithEncryptionKey
// method of the parent MockExternalServiceStore instance is invoked and the
// hook queue is empty.
func (f *ExternalServiceStoreWithEncryptionKeyFunc) SetDefaultHook(hook func(encryption.Key) ExternalServiceStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithEncryptionKey method of the parent MockExternalServiceStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ExternalServiceStoreWithEncryptionKeyFunc) PushHook(hook func(encryption.Key) ExternalServiceStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreWithEncryptionKeyFunc) SetDefaultReturn(r0 ExternalServiceStore) {
	f.SetDefaultHook(func(encryption.Key) ExternalServiceStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreWithEncryptionKeyFunc) PushReturn(r0 ExternalServiceStore) {
	f.PushHook(func(encryption.Key) ExternalServiceStore {
		return r0
	})
}

func (f *ExternalServiceStoreWithEncryptionKeyFunc) nextHook() func(encryption.Key) ExternalServiceStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreWithEncryptionKeyFunc) appendCall(r0 ExternalServiceStoreWithEncryptionKeyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ExternalServiceStoreWithEncryptionKeyFuncCall objects describing the
// invocations of this function.
func (f *ExternalServiceStoreWithEncryptionKeyFunc) History() []ExternalServiceStoreWithEncryptionKeyFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreWithEncryptionKeyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreWithEncryptionKeyFuncCall is an object that describes
// an invocation of method WithEncryptionKey on an instance of
// MockExternalServiceStore.
type ExternalServiceStoreWithEncryptionKeyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 encryption.Key
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 ExternalServiceStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreWithEncryptionKeyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreWithEncryptionKeyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockFeatureFlagStore is a mock implementation of the FeatureFlagStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockFeatureFlagStore struct {
	// CreateBoolFunc is an instance of a mock function object controlling
	// the behavior of the method CreateBool.
	CreateBoolFunc *FeatureFlagStoreCreateBoolFunc
	// CreateFeatureFlagFunc is an instance of a mock function object
	// controlling the behavior of the method CreateFeatureFlag.
	CreateFeatureFlagFunc *FeatureFlagStoreCreateFeatureFlagFunc
	// CreateOverrideFunc is an instance of a mock function object
	// controlling the behavior of the method CreateOverride.
	CreateOverrideFunc *FeatureFlagStoreCreateOverrideFunc
	// CreateRolloutFunc is an instance of a mock function object
	// controlling the behavior of the method CreateRollout.
	CreateRolloutFunc *FeatureFlagStoreCreateRolloutFunc
	// DeleteFeatureFlagFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteFeatureFlag.
	DeleteFeatureFlagFunc *FeatureFlagStoreDeleteFeatureFlagFunc
	// DeleteOverrideFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteOverride.
	DeleteOverrideFunc *FeatureFlagStoreDeleteOverrideFunc
	// GetAnonymousUserFlagsFunc is an instance of a mock function object
	// controlling the behavior of the method GetAnonymousUserFlags.
	GetAnonymousUserFlagsFunc *FeatureFlagStoreGetAnonymousUserFlagsFunc
	// GetFeatureFlagFunc is an instance of a mock function object
	// controlling the behavior of the method GetFeatureFlag.
	GetFeatureFlagFunc *FeatureFlagStoreGetFeatureFlagFunc
	// GetFeatureFlagsFunc is an instance of a mock function object
	// controlling the behavior of the method GetFeatureFlags.
	GetFeatureFlagsFunc *FeatureFlagStoreGetFeatureFlagsFunc
	// GetGlobalFeatureFlagsFunc is an instance of a mock function object
	// controlling the behavior of the method GetGlobalFeatureFlags.
	GetGlobalFeatureFlagsFunc *FeatureFlagStoreGetGlobalFeatureFlagsFunc
	// GetOrgFeatureFlagFunc is an instance of a mock function object
	// controlling the behavior of the method GetOrgFeatureFlag.
	GetOrgFeatureFlagFunc *FeatureFlagStoreGetOrgFeatureFlagFunc
	// GetOrgOverrideForFlagFunc is an instance of a mock function object
	// controlling the behavior of the method GetOrgOverrideForFlag.
	GetOrgOverrideForFlagFunc *FeatureFlagStoreGetOrgOverrideForFlagFunc
	// GetOrgOverridesForUserFunc is an instance of a mock function object
	// controlling the behavior of the method GetOrgOverridesForUser.
	GetOrgOverridesForUserFunc *FeatureFlagStoreGetOrgOverridesForUserFunc
	// GetOverridesForFlagFunc is an instance of a mock function object
	// controlling the behavior of the method GetOverridesForFlag.
	GetOverridesForFlagFunc *FeatureFlagStoreGetOverridesForFlagFunc
	// GetUserFlagsFunc is an instance of a mock function object controlling
	// the behavior of the method GetUserFlags.
	GetUserFlagsFunc *FeatureFlagStoreGetUserFlagsFunc
	// GetUserOverridesFunc is an instance of a mock function object
	// controlling the behavior of the method GetUserOverrides.
	GetUserOverridesFunc *FeatureFlagStoreGetUserOverridesFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *FeatureFlagStoreHandleFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *FeatureFlagStoreTransactFunc
	// UpdateFeatureFlagFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateFeatureFlag.
	UpdateFeatureFlagFunc *FeatureFlagStoreUpdateFeatureFlagFunc
	// UpdateOverrideFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateOverride.
	UpdateOverrideFunc *FeatureFlagStoreUpdateOverrideFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *FeatureFlagStoreWithFunc
}

// NewMockFeatureFlagStore creates a new mock of the FeatureFlagStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockFeatureFlagStore() *MockFeatureFlagStore {
	return &MockFeatureFlagStore{
		CreateBoolFunc: &FeatureFlagStoreCreateBoolFunc{
			defaultHook: func(context.Context, string, bool) (r0 *featureflag.FeatureFlag, r1 error) {
				return
			},
		},
		CreateFeatureFlagFunc: &FeatureFlagStoreCreateFeatureFlagFunc{
			defaultHook: func(context.Context, *featureflag.FeatureFlag) (r0 *featureflag.FeatureFlag, r1 error) {
				return
			},
		},
		CreateOverrideFunc: &FeatureFlagStoreCreateOverrideFunc{
			defaultHook: func(context.Context, *featureflag.Override) (r0 *featureflag.Override, r1 error) {
				return
			},
		},
		CreateRolloutFunc: &FeatureFlagStoreCreateRolloutFunc{
			defaultHook: func(context.Context, string, int32) (r0 *featureflag.FeatureFlag, r1 error) {
				return
			},
		},
		DeleteFeatureFlagFunc: &FeatureFlagStoreDeleteFeatureFlagFunc{
			defaultHook: func(context.Context, string) (r0 error) {
				return
			},
		},
		DeleteOverrideFunc: &FeatureFlagStoreDeleteOverrideFunc{
			defaultHook: func(context.Context, *int32, *int32, string) (r0 error) {
				return
			},
		},
		GetAnonymousUserFlagsFunc: &FeatureFlagStoreGetAnonymousUserFlagsFunc{
			defaultHook: func(context.Context, string) (r0 map[string]bool, r1 error) {
				return
			},
		},
		GetFeatureFlagFunc: &FeatureFlagStoreGetFeatureFlagFunc{
			defaultHook: func(context.Context, string) (r0 *featureflag.FeatureFlag, r1 error) {
				return
			},
		},
		GetFeatureFlagsFunc: &FeatureFlagStoreGetFeatureFlagsFunc{
			defaultHook: func(context.Context) (r0 []*featureflag.FeatureFlag, r1 error) {
				return
			},
		},
		GetGlobalFeatureFlagsFunc: &FeatureFlagStoreGetGlobalFeatureFlagsFunc{
			defaultHook: func(context.Context) (r0 map[string]bool, r1 error) {
				return
			},
		},
		GetOrgFeatureFlagFunc: &FeatureFlagStoreGetOrgFeatureFlagFunc{
			defaultHook: func(context.Context, int32, string) (r0 bool, r1 error) {
				return
			},
		},
		GetOrgOverrideForFlagFunc: &FeatureFlagStoreGetOrgOverrideForFlagFunc{
			defaultHook: func(context.Context, int32, string) (r0 *featureflag.Override, r1 error) {
				return
			},
		},
		GetOrgOverridesForUserFunc: &FeatureFlagStoreGetOrgOverridesForUserFunc{
			defaultHook: func(context.Context, int32) (r0 []*featureflag.Override, r1 error) {
				return
			},
		},
		GetOverridesForFlagFunc: &FeatureFlagStoreGetOverridesForFlagFunc{
			defaultHook: func(context.Context, string) (r0 []*featureflag.Override, r1 error) {
				return
			},
		},
		GetUserFlagsFunc: &FeatureFlagStoreGetUserFlagsFunc{
			defaultHook: func(context.Context, int32) (r0 map[string]bool, r1 error) {
				return
			},
		},
		GetUserOverridesFunc: &FeatureFlagStoreGetUserOverridesFunc{
			defaultHook: func(context.Context, int32) (r0 []*featureflag.Override, r1 error) {
				return
			},
		},
		HandleFunc: &FeatureFlagStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		TransactFunc: &FeatureFlagStoreTransactFunc{
			defaultHook: func(context.Context) (r0 FeatureFlagStore, r1 error) {
				return
			},
		},
		UpdateFeatureFlagFunc: &FeatureFlagStoreUpdateFeatureFlagFunc{
			defaultHook: func(context.Context, *featureflag.FeatureFlag) (r0 *featureflag.FeatureFlag, r1 error) {
				return
			},
		},
		UpdateOverrideFunc: &FeatureFlagStoreUpdateOverrideFunc{
			defaultHook: func(context.Context, *int32, *int32, string, bool) (r0 *featureflag.Override, r1 error) {
				return
			},
		},
		WithFunc: &FeatureFlagStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 FeatureFlagStore) {
				return
			},
		},
	}
}

// NewStrictMockFeatureFlagStore creates a new mock of the FeatureFlagStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockFeatureFlagStore() *MockFeatureFlagStore {
	return &MockFeatureFlagStore{
		CreateBoolFunc: &FeatureFlagStoreCreateBoolFunc{
			defaultHook: func(context.Context, string, bool) (*featureflag.FeatureFlag, error) {
				panic("unexpected invocation of MockFeatureFlagStore.CreateBool")
			},
		},
		CreateFeatureFlagFunc: &FeatureFlagStoreCreateFeatureFlagFunc{
			defaultHook: func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error) {
				panic("unexpected invocation of MockFeatureFlagStore.CreateFeatureFlag")
			},
		},
		CreateOverrideFunc: &FeatureFlagStoreCreateOverrideFunc{
			defaultHook: func(context.Context, *featureflag.Override) (*featureflag.Override, error) {
				panic("unexpected invocation of MockFeatureFlagStore.CreateOverride")
			},
		},
		CreateRolloutFunc: &FeatureFlagStoreCreateRolloutFunc{
			defaultHook: func(context.Context, string, int32) (*featureflag.FeatureFlag, error) {
				panic("unexpected invocation of MockFeatureFlagStore.CreateRollout")
			},
		},
		DeleteFeatureFlagFunc: &FeatureFlagStoreDeleteFeatureFlagFunc{
			defaultHook: func(context.Context, string) error {
				panic("unexpected invocation of MockFeatureFlagStore.DeleteFeatureFlag")
			},
		},
		DeleteOverrideFunc: &FeatureFlagStoreDeleteOverrideFunc{
			defaultHook: func(context.Context, *int32, *int32, string) error {
				panic("unexpected invocation of MockFeatureFlagStore.DeleteOverride")
			},
		},
		GetAnonymousUserFlagsFunc: &FeatureFlagStoreGetAnonymousUserFlagsFunc{
			defaultHook: func(context.Context, string) (map[string]bool, error) {
				panic("unexpected invocation of MockFeatureFlagStore.GetAnonymousUserFlags")
			},
		},
		GetFeatureFlagFunc: &FeatureFlagStoreGetFeatureFlagFunc{
			defaultHook: func(context.Context, string) (*featureflag.FeatureFlag, error) {
				panic("unexpected invocation of MockFeatureFlagStore.GetFeatureFlag")
			},
		},
		GetFeatureFlagsFunc: &FeatureFlagStoreGetFeatureFlagsFunc{
			defaultHook: func(context.Context) ([]*featureflag.FeatureFlag, error) {
				panic("unexpected invocation of MockFeatureFlagStore.GetFeatureFlags")
			},
		},
		GetGlobalFeatureFlagsFunc: &FeatureFlagStoreGetGlobalFeatureFlagsFunc{
			defaultHook: func(context.Context) (map[string]bool, error) {
				panic("unexpected invocation of MockFeatureFlagStore.GetGlobalFeatureFlags")
			},
		},
		GetOrgFeatureFlagFunc: &FeatureFlagStoreGetOrgFeatureFlagFunc{
			defaultHook: func(context.Context, int32, string) (bool, error) {
				panic("unexpected invocation of MockFeatureFlagStore.GetOrgFeatureFlag")
			},
		},
		GetOrgOverrideForFlagFunc: &FeatureFlagStoreGetOrgOverrideForFlagFunc{
			defaultHook: func(context.Context, int32, string) (*featureflag.Override, error) {
				panic("unexpected invocation of MockFeatureFlagStore.GetOrgOverrideForFlag")
			},
		},
		GetOrgOverridesForUserFunc: &FeatureFlagStoreGetOrgOverridesForUserFunc{
			defaultHook: func(context.Context, int32) ([]*featureflag.Override, error) {
				panic("unexpected invocation of MockFeatureFlagStore.GetOrgOverridesForUser")
			},
		},
		GetOverridesForFlagFunc: &FeatureFlagStoreGetOverridesForFlagFunc{
			defaultHook: func(context.Context, string) ([]*featureflag.Override, error) {
				panic("unexpected invocation of MockFeatureFlagStore.GetOverridesForFlag")
			},
		},
		GetUserFlagsFunc: &FeatureFlagStoreGetUserFlagsFunc{
			defaultHook: func(context.Context, int32) (map[string]bool, error) {
				panic("unexpected invocation of MockFeatureFlagStore.GetUserFlags")
			},
		},
		GetUserOverridesFunc: &FeatureFlagStoreGetUserOverridesFunc{
			defaultHook: func(context.Context, int32) ([]*featureflag.Override, error) {
				panic("unexpected invocation of MockFeatureFlagStore.GetUserOverrides")
			},
		},
		HandleFunc: &FeatureFlagStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockFeatureFlagStore.Handle")
			},
		},
		TransactFunc: &FeatureFlagStoreTransactFunc{
			defaultHook: func(context.Context) (FeatureFlagStore, error) {
				panic("unexpected invocation of MockFeatureFlagStore.Transact")
			},
		},
		UpdateFeatureFlagFunc: &FeatureFlagStoreUpdateFeatureFlagFunc{
			defaultHook: func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error) {
				panic("unexpected invocation of MockFeatureFlagStore.UpdateFeatureFlag")
			},
		},
		UpdateOverrideFunc: &FeatureFlagStoreUpdateOverrideFunc{
			defaultHook: func(context.Context, *int32, *int32, string, bool) (*featureflag.Override, error) {
				panic("unexpected invocation of MockFeatureFlagStore.UpdateOverride")
			},
		},
		WithFunc: &FeatureFlagStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) FeatureFlagStore {
				panic("unexpected invocation of MockFeatureFlagStore.With")
			},
		},
	}
}

// NewMockFeatureFlagStoreFrom creates a new mock of the
// MockFeatureFlagStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockFeatureFlagStoreFrom(i FeatureFlagStore) *MockFeatureFlagStore {
	return &MockFeatureFlagStore{
		CreateBoolFunc: &FeatureFlagStoreCreateBoolFunc{
			defaultHook: i.CreateBool,
		},
		CreateFeatureFlagFunc: &FeatureFlagStoreCreateFeatureFlagFunc{
			defaultHook: i.CreateFeatureFlag,
		},
		CreateOverrideFunc: &FeatureFlagStoreCreateOverrideFunc{
			defaultHook: i.CreateOverride,
		},
		CreateRolloutFunc: &FeatureFlagStoreCreateRolloutFunc{
			defaultHook: i.CreateRollout,
		},
		DeleteFeatureFlagFunc: &FeatureFlagStoreDeleteFeatureFlagFunc{
			defaultHook: i.DeleteFeatureFlag,
		},
		DeleteOverrideFunc: &FeatureFlagStoreDeleteOverrideFunc{
			defaultHook: i.DeleteOverride,
		},
		GetAnonymousUserFlagsFunc: &FeatureFlagStoreGetAnonymousUserFlagsFunc{
			defaultHook: i.GetAnonymousUserFlags,
		},
		GetFeatureFlagFunc: &FeatureFlagStoreGetFeatureFlagFunc{
			defaultHook: i.GetFeatureFlag,
		},
		GetFeatureFlagsFunc: &FeatureFlagStoreGetFeatureFlagsFunc{
			defaultHook: i.GetFeatureFlags,
		},
		GetGlobalFeatureFlagsFunc: &FeatureFlagStoreGetGlobalFeatureFlagsFunc{
			defaultHook: i.GetGlobalFeatureFlags,
		},
		GetOrgFeatureFlagFunc: &FeatureFlagStoreGetOrgFeatureFlagFunc{
			defaultHook: i.GetOrgFeatureFlag,
		},
		GetOrgOverrideForFlagFunc: &FeatureFlagStoreGetOrgOverrideForFlagFunc{
			defaultHook: i.GetOrgOverrideForFlag,
		},
		GetOrgOverridesForUserFunc: &FeatureFlagStoreGetOrgOverridesForUserFunc{
			defaultHook: i.GetOrgOverridesForUser,
		},
		GetOverridesForFlagFunc: &FeatureFlagStoreGetOverridesForFlagFunc{
			defaultHook: i.GetOverridesForFlag,
		},
		GetUserFlagsFunc: &FeatureFlagStoreGetUserFlagsFunc{
			defaultHook: i.GetUserFlags,
		},
		GetUserOverridesFunc: &FeatureFlagStoreGetUserOverridesFunc{
			defaultHook: i.GetUserOverrides,
		},
		HandleFunc: &FeatureFlagStoreHandleFunc{
			defaultHook: i.Handle,
		},
		TransactFunc: &FeatureFlagStoreTransactFunc{
			defaultHook: i.Transact,
		},
		UpdateFeatureFlagFunc: &FeatureFlagStoreUpdateFeatureFlagFunc{
			defaultHook: i.UpdateFeatureFlag,
		},
		UpdateOverrideFunc: &FeatureFlagStoreUpdateOverrideFunc{
			defaultHook: i.UpdateOverride,
		},
		WithFunc: &FeatureFlagStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// FeatureFlagStoreCreateBoolFunc describes the behavior when the CreateBool
// method of the parent MockFeatureFlagStore instance is invoked.
type FeatureFlagStoreCreateBoolFunc struct {
	defaultHook func(context.Context, string, bool) (*featureflag.FeatureFlag, error)
	hooks       []func(context.Context, string, bool) (*featureflag.FeatureFlag, error)
	history     []FeatureFlagStoreCreateBoolFuncCall
	mutex       sync.Mutex
}

// CreateBool delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) CreateBool(v0 context.Context, v1 string, v2 bool) (*featureflag.FeatureFlag, error) {
	r0, r1 := m.CreateBoolFunc.nextHook()(v0, v1, v2)
	m.CreateBoolFunc.appendCall(FeatureFlagStoreCreateBoolFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateBool method of
// the parent MockFeatureFlagStore instance is invoked and the hook queue is
// empty.
func (f *FeatureFlagStoreCreateBoolFunc) SetDefaultHook(hook func(context.Context, string, bool) (*featureflag.FeatureFlag, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateBool method of the parent MockFeatureFlagStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *FeatureFlagStoreCreateBoolFunc) PushHook(hook func(context.Context, string, bool) (*featureflag.FeatureFlag, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreCreateBoolFunc) SetDefaultReturn(r0 *featureflag.FeatureFlag, r1 error) {
	f.SetDefaultHook(func(context.Context, string, bool) (*featureflag.FeatureFlag, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreCreateBoolFunc) PushReturn(r0 *featureflag.FeatureFlag, r1 error) {
	f.PushHook(func(context.Context, string, bool) (*featureflag.FeatureFlag, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreCreateBoolFunc) nextHook() func(context.Context, string, bool) (*featureflag.FeatureFlag, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreCreateBoolFunc) appendCall(r0 FeatureFlagStoreCreateBoolFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreCreateBoolFuncCall objects
// describing the invocations of this function.
func (f *FeatureFlagStoreCreateBoolFunc) History() []FeatureFlagStoreCreateBoolFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreCreateBoolFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreCreateBoolFuncCall is an object that describes an
// invocation of method CreateBool on an instance of MockFeatureFlagStore.
type FeatureFlagStoreCreateBoolFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *featureflag.FeatureFlag
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreCreateBoolFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreCreateBoolFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreCreateFeatureFlagFunc describes the behavior when the
// CreateFeatureFlag method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreCreateFeatureFlagFunc struct {
	defaultHook func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error)
	hooks       []func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error)
	history     []FeatureFlagStoreCreateFeatureFlagFuncCall
	mutex       sync.Mutex
}

// CreateFeatureFlag delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) CreateFeatureFlag(v0 context.Context, v1 *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error) {
	r0, r1 := m.CreateFeatureFlagFunc.nextHook()(v0, v1)
	m.CreateFeatureFlagFunc.appendCall(FeatureFlagStoreCreateFeatureFlagFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateFeatureFlag
// method of the parent MockFeatureFlagStore instance is invoked and the
// hook queue is empty.
func (f *FeatureFlagStoreCreateFeatureFlagFunc) SetDefaultHook(hook func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateFeatureFlag method of the parent MockFeatureFlagStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *FeatureFlagStoreCreateFeatureFlagFunc) PushHook(hook func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreCreateFeatureFlagFunc) SetDefaultReturn(r0 *featureflag.FeatureFlag, r1 error) {
	f.SetDefaultHook(func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreCreateFeatureFlagFunc) PushReturn(r0 *featureflag.FeatureFlag, r1 error) {
	f.PushHook(func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreCreateFeatureFlagFunc) nextHook() func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreCreateFeatureFlagFunc) appendCall(r0 FeatureFlagStoreCreateFeatureFlagFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreCreateFeatureFlagFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreCreateFeatureFlagFunc) History() []FeatureFlagStoreCreateFeatureFlagFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreCreateFeatureFlagFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreCreateFeatureFlagFuncCall is an object that describes an
// invocation of method CreateFeatureFlag on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreCreateFeatureFlagFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *featureflag.FeatureFlag
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *featureflag.FeatureFlag
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreCreateFeatureFlagFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreCreateFeatureFlagFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreCreateOverrideFunc describes the behavior when the
// CreateOverride method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreCreateOverrideFunc struct {
	defaultHook func(context.Context, *featureflag.Override) (*featureflag.Override, error)
	hooks       []func(context.Context, *featureflag.Override) (*featureflag.Override, error)
	history     []FeatureFlagStoreCreateOverrideFuncCall
	mutex       sync.Mutex
}

// CreateOverride delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) CreateOverride(v0 context.Context, v1 *featureflag.Override) (*featureflag.Override, error) {
	r0, r1 := m.CreateOverrideFunc.nextHook()(v0, v1)
	m.CreateOverrideFunc.appendCall(FeatureFlagStoreCreateOverrideFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateOverride
// method of the parent MockFeatureFlagStore instance is invoked and the
// hook queue is empty.
func (f *FeatureFlagStoreCreateOverrideFunc) SetDefaultHook(hook func(context.Context, *featureflag.Override) (*featureflag.Override, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateOverride method of the parent MockFeatureFlagStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *FeatureFlagStoreCreateOverrideFunc) PushHook(hook func(context.Context, *featureflag.Override) (*featureflag.Override, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreCreateOverrideFunc) SetDefaultReturn(r0 *featureflag.Override, r1 error) {
	f.SetDefaultHook(func(context.Context, *featureflag.Override) (*featureflag.Override, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreCreateOverrideFunc) PushReturn(r0 *featureflag.Override, r1 error) {
	f.PushHook(func(context.Context, *featureflag.Override) (*featureflag.Override, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreCreateOverrideFunc) nextHook() func(context.Context, *featureflag.Override) (*featureflag.Override, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreCreateOverrideFunc) appendCall(r0 FeatureFlagStoreCreateOverrideFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreCreateOverrideFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreCreateOverrideFunc) History() []FeatureFlagStoreCreateOverrideFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreCreateOverrideFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreCreateOverrideFuncCall is an object that describes an
// invocation of method CreateOverride on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreCreateOverrideFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *featureflag.Override
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *featureflag.Override
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreCreateOverrideFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreCreateOverrideFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreCreateRolloutFunc describes the behavior when the
// CreateRollout method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreCreateRolloutFunc struct {
	defaultHook func(context.Context, string, int32) (*featureflag.FeatureFlag, error)
	hooks       []func(context.Context, string, int32) (*featureflag.FeatureFlag, error)
	history     []FeatureFlagStoreCreateRolloutFuncCall
	mutex       sync.Mutex
}

// CreateRollout delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) CreateRollout(v0 context.Context, v1 string, v2 int32) (*featureflag.FeatureFlag, error) {
	r0, r1 := m.CreateRolloutFunc.nextHook()(v0, v1, v2)
	m.CreateRolloutFunc.appendCall(FeatureFlagStoreCreateRolloutFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateRollout method
// of the parent MockFeatureFlagStore instance is invoked and the hook queue
// is empty.
func (f *FeatureFlagStoreCreateRolloutFunc) SetDefaultHook(hook func(context.Context, string, int32) (*featureflag.FeatureFlag, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateRollout method of the parent MockFeatureFlagStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *FeatureFlagStoreCreateRolloutFunc) PushHook(hook func(context.Context, string, int32) (*featureflag.FeatureFlag, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreCreateRolloutFunc) SetDefaultReturn(r0 *featureflag.FeatureFlag, r1 error) {
	f.SetDefaultHook(func(context.Context, string, int32) (*featureflag.FeatureFlag, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreCreateRolloutFunc) PushReturn(r0 *featureflag.FeatureFlag, r1 error) {
	f.PushHook(func(context.Context, string, int32) (*featureflag.FeatureFlag, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreCreateRolloutFunc) nextHook() func(context.Context, string, int32) (*featureflag.FeatureFlag, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreCreateRolloutFunc) appendCall(r0 FeatureFlagStoreCreateRolloutFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreCreateRolloutFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreCreateRolloutFunc) History() []FeatureFlagStoreCreateRolloutFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreCreateRolloutFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreCreateRolloutFuncCall is an object that describes an
// invocation of method CreateRollout on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreCreateRolloutFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *featureflag.FeatureFlag
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreCreateRolloutFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreCreateRolloutFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreDeleteFeatureFlagFunc describes the behavior when the
// DeleteFeatureFlag method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreDeleteFeatureFlagFunc struct {
	defaultHook func(context.Context, string) error
	hooks       []func(context.Context, string) error
	history     []FeatureFlagStoreDeleteFeatureFlagFuncCall
	mutex       sync.Mutex
}

// DeleteFeatureFlag delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) DeleteFeatureFlag(v0 context.Context, v1 string) error {
	r0 := m.DeleteFeatureFlagFunc.nextHook()(v0, v1)
	m.DeleteFeatureFlagFunc.appendCall(FeatureFlagStoreDeleteFeatureFlagFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteFeatureFlag
// method of the parent MockFeatureFlagStore instance is invoked and the
// hook queue is empty.
func (f *FeatureFlagStoreDeleteFeatureFlagFunc) SetDefaultHook(hook func(context.Context, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteFeatureFlag method of the parent MockFeatureFlagStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *FeatureFlagStoreDeleteFeatureFlagFunc) PushHook(hook func(context.Context, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreDeleteFeatureFlagFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreDeleteFeatureFlagFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string) error {
		return r0
	})
}

func (f *FeatureFlagStoreDeleteFeatureFlagFunc) nextHook() func(context.Context, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreDeleteFeatureFlagFunc) appendCall(r0 FeatureFlagStoreDeleteFeatureFlagFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreDeleteFeatureFlagFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreDeleteFeatureFlagFunc) History() []FeatureFlagStoreDeleteFeatureFlagFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreDeleteFeatureFlagFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreDeleteFeatureFlagFuncCall is an object that describes an
// invocation of method DeleteFeatureFlag on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreDeleteFeatureFlagFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreDeleteFeatureFlagFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreDeleteFeatureFlagFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// FeatureFlagStoreDeleteOverrideFunc describes the behavior when the
// DeleteOverride method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreDeleteOverrideFunc struct {
	defaultHook func(context.Context, *int32, *int32, string) error
	hooks       []func(context.Context, *int32, *int32, string) error
	history     []FeatureFlagStoreDeleteOverrideFuncCall
	mutex       sync.Mutex
}

// DeleteOverride delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) DeleteOverride(v0 context.Context, v1 *int32, v2 *int32, v3 string) error {
	r0 := m.DeleteOverrideFunc.nextHook()(v0, v1, v2, v3)
	m.DeleteOverrideFunc.appendCall(FeatureFlagStoreDeleteOverrideFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteOverride
// method of the parent MockFeatureFlagStore instance is invoked and the
// hook queue is empty.
func (f *FeatureFlagStoreDeleteOverrideFunc) SetDefaultHook(hook func(context.Context, *int32, *int32, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteOverride method of the parent MockFeatureFlagStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *FeatureFlagStoreDeleteOverrideFunc) PushHook(hook func(context.Context, *int32, *int32, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreDeleteOverrideFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *int32, *int32, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreDeleteOverrideFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *int32, *int32, string) error {
		return r0
	})
}

func (f *FeatureFlagStoreDeleteOverrideFunc) nextHook() func(context.Context, *int32, *int32, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreDeleteOverrideFunc) appendCall(r0 FeatureFlagStoreDeleteOverrideFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreDeleteOverrideFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreDeleteOverrideFunc) History() []FeatureFlagStoreDeleteOverrideFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreDeleteOverrideFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreDeleteOverrideFuncCall is an object that describes an
// invocation of method DeleteOverride on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreDeleteOverrideFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *int32
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreDeleteOverrideFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreDeleteOverrideFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// FeatureFlagStoreGetAnonymousUserFlagsFunc describes the behavior when the
// GetAnonymousUserFlags method of the parent MockFeatureFlagStore instance
// is invoked.
type FeatureFlagStoreGetAnonymousUserFlagsFunc struct {
	defaultHook func(context.Context, string) (map[string]bool, error)
	hooks       []func(context.Context, string) (map[string]bool, error)
	history     []FeatureFlagStoreGetAnonymousUserFlagsFuncCall
	mutex       sync.Mutex
}

// GetAnonymousUserFlags delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) GetAnonymousUserFlags(v0 context.Context, v1 string) (map[string]bool, error) {
	r0, r1 := m.GetAnonymousUserFlagsFunc.nextHook()(v0, v1)
	m.GetAnonymousUserFlagsFunc.appendCall(FeatureFlagStoreGetAnonymousUserFlagsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetAnonymousUserFlags method of the parent MockFeatureFlagStore instance
// is invoked and the hook queue is empty.
func (f *FeatureFlagStoreGetAnonymousUserFlagsFunc) SetDefaultHook(hook func(context.Context, string) (map[string]bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAnonymousUserFlags method of the parent MockFeatureFlagStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *FeatureFlagStoreGetAnonymousUserFlagsFunc) PushHook(hook func(context.Context, string) (map[string]bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreGetAnonymousUserFlagsFunc) SetDefaultReturn(r0 map[string]bool, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (map[string]bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreGetAnonymousUserFlagsFunc) PushReturn(r0 map[string]bool, r1 error) {
	f.PushHook(func(context.Context, string) (map[string]bool, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreGetAnonymousUserFlagsFunc) nextHook() func(context.Context, string) (map[string]bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreGetAnonymousUserFlagsFunc) appendCall(r0 FeatureFlagStoreGetAnonymousUserFlagsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// FeatureFlagStoreGetAnonymousUserFlagsFuncCall objects describing the
// invocations of this function.
func (f *FeatureFlagStoreGetAnonymousUserFlagsFunc) History() []FeatureFlagStoreGetAnonymousUserFlagsFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreGetAnonymousUserFlagsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreGetAnonymousUserFlagsFuncCall is an object that describes
// an invocation of method GetAnonymousUserFlags on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreGetAnonymousUserFlagsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[string]bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreGetAnonymousUserFlagsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreGetAnonymousUserFlagsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreGetFeatureFlagFunc describes the behavior when the
// GetFeatureFlag method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreGetFeatureFlagFunc struct {
	defaultHook func(context.Context, string) (*featureflag.FeatureFlag, error)
	hooks       []func(context.Context, string) (*featureflag.FeatureFlag, error)
	history     []FeatureFlagStoreGetFeatureFlagFuncCall
	mutex       sync.Mutex
}

// GetFeatureFlag delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) GetFeatureFlag(v0 context.Context, v1 string) (*featureflag.FeatureFlag, error) {
	r0, r1 := m.GetFeatureFlagFunc.nextHook()(v0, v1)
	m.GetFeatureFlagFunc.appendCall(FeatureFlagStoreGetFeatureFlagFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetFeatureFlag
// method of the parent MockFeatureFlagStore instance is invoked and the
// hook queue is empty.
func (f *FeatureFlagStoreGetFeatureFlagFunc) SetDefaultHook(hook func(context.Context, string) (*featureflag.FeatureFlag, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetFeatureFlag method of the parent MockFeatureFlagStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *FeatureFlagStoreGetFeatureFlagFunc) PushHook(hook func(context.Context, string) (*featureflag.FeatureFlag, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreGetFeatureFlagFunc) SetDefaultReturn(r0 *featureflag.FeatureFlag, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*featureflag.FeatureFlag, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreGetFeatureFlagFunc) PushReturn(r0 *featureflag.FeatureFlag, r1 error) {
	f.PushHook(func(context.Context, string) (*featureflag.FeatureFlag, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreGetFeatureFlagFunc) nextHook() func(context.Context, string) (*featureflag.FeatureFlag, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreGetFeatureFlagFunc) appendCall(r0 FeatureFlagStoreGetFeatureFlagFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreGetFeatureFlagFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreGetFeatureFlagFunc) History() []FeatureFlagStoreGetFeatureFlagFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreGetFeatureFlagFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreGetFeatureFlagFuncCall is an object that describes an
// invocation of method GetFeatureFlag on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreGetFeatureFlagFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *featureflag.FeatureFlag
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreGetFeatureFlagFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreGetFeatureFlagFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreGetFeatureFlagsFunc describes the behavior when the
// GetFeatureFlags method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreGetFeatureFlagsFunc struct {
	defaultHook func(context.Context) ([]*featureflag.FeatureFlag, error)
	hooks       []func(context.Context) ([]*featureflag.FeatureFlag, error)
	history     []FeatureFlagStoreGetFeatureFlagsFuncCall
	mutex       sync.Mutex
}

// GetFeatureFlags delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) GetFeatureFlags(v0 context.Context) ([]*featureflag.FeatureFlag, error) {
	r0, r1 := m.GetFeatureFlagsFunc.nextHook()(v0)
	m.GetFeatureFlagsFunc.appendCall(FeatureFlagStoreGetFeatureFlagsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetFeatureFlags
// method of the parent MockFeatureFlagStore instance is invoked and the
// hook queue is empty.
func (f *FeatureFlagStoreGetFeatureFlagsFunc) SetDefaultHook(hook func(context.Context) ([]*featureflag.FeatureFlag, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetFeatureFlags method of the parent MockFeatureFlagStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *FeatureFlagStoreGetFeatureFlagsFunc) PushHook(hook func(context.Context) ([]*featureflag.FeatureFlag, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreGetFeatureFlagsFunc) SetDefaultReturn(r0 []*featureflag.FeatureFlag, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]*featureflag.FeatureFlag, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreGetFeatureFlagsFunc) PushReturn(r0 []*featureflag.FeatureFlag, r1 error) {
	f.PushHook(func(context.Context) ([]*featureflag.FeatureFlag, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreGetFeatureFlagsFunc) nextHook() func(context.Context) ([]*featureflag.FeatureFlag, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreGetFeatureFlagsFunc) appendCall(r0 FeatureFlagStoreGetFeatureFlagsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreGetFeatureFlagsFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreGetFeatureFlagsFunc) History() []FeatureFlagStoreGetFeatureFlagsFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreGetFeatureFlagsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreGetFeatureFlagsFuncCall is an object that describes an
// invocation of method GetFeatureFlags on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreGetFeatureFlagsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*featureflag.FeatureFlag
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreGetFeatureFlagsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreGetFeatureFlagsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreGetGlobalFeatureFlagsFunc describes the behavior when the
// GetGlobalFeatureFlags method of the parent MockFeatureFlagStore instance
// is invoked.
type FeatureFlagStoreGetGlobalFeatureFlagsFunc struct {
	defaultHook func(context.Context) (map[string]bool, error)
	hooks       []func(context.Context) (map[string]bool, error)
	history     []FeatureFlagStoreGetGlobalFeatureFlagsFuncCall
	mutex       sync.Mutex
}

// GetGlobalFeatureFlags delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) GetGlobalFeatureFlags(v0 context.Context) (map[string]bool, error) {
	r0, r1 := m.GetGlobalFeatureFlagsFunc.nextHook()(v0)
	m.GetGlobalFeatureFlagsFunc.appendCall(FeatureFlagStoreGetGlobalFeatureFlagsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetGlobalFeatureFlags method of the parent MockFeatureFlagStore instance
// is invoked and the hook queue is empty.
func (f *FeatureFlagStoreGetGlobalFeatureFlagsFunc) SetDefaultHook(hook func(context.Context) (map[string]bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetGlobalFeatureFlags method of the parent MockFeatureFlagStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *FeatureFlagStoreGetGlobalFeatureFlagsFunc) PushHook(hook func(context.Context) (map[string]bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreGetGlobalFeatureFlagsFunc) SetDefaultReturn(r0 map[string]bool, r1 error) {
	f.SetDefaultHook(func(context.Context) (map[string]bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreGetGlobalFeatureFlagsFunc) PushReturn(r0 map[string]bool, r1 error) {
	f.PushHook(func(context.Context) (map[string]bool, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreGetGlobalFeatureFlagsFunc) nextHook() func(context.Context) (map[string]bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreGetGlobalFeatureFlagsFunc) appendCall(r0 FeatureFlagStoreGetGlobalFeatureFlagsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// FeatureFlagStoreGetGlobalFeatureFlagsFuncCall objects describing the
// invocations of this function.
func (f *FeatureFlagStoreGetGlobalFeatureFlagsFunc) History() []FeatureFlagStoreGetGlobalFeatureFlagsFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreGetGlobalFeatureFlagsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreGetGlobalFeatureFlagsFuncCall is an object that describes
// an invocation of method GetGlobalFeatureFlags on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreGetGlobalFeatureFlagsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[string]bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreGetGlobalFeatureFlagsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreGetGlobalFeatureFlagsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreGetOrgFeatureFlagFunc describes the behavior when the
// GetOrgFeatureFlag method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreGetOrgFeatureFlagFunc struct {
	defaultHook func(context.Context, int32, string) (bool, error)
	hooks       []func(context.Context, int32, string) (bool, error)
	history     []FeatureFlagStoreGetOrgFeatureFlagFuncCall
	mutex       sync.Mutex
}

// GetOrgFeatureFlag delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) GetOrgFeatureFlag(v0 context.Context, v1 int32, v2 string) (bool, error) {
	r0, r1 := m.GetOrgFeatureFlagFunc.nextHook()(v0, v1, v2)
	m.GetOrgFeatureFlagFunc.appendCall(FeatureFlagStoreGetOrgFeatureFlagFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetOrgFeatureFlag
// method of the parent MockFeatureFlagStore instance is invoked and the
// hook queue is empty.
func (f *FeatureFlagStoreGetOrgFeatureFlagFunc) SetDefaultHook(hook func(context.Context, int32, string) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetOrgFeatureFlag method of the parent MockFeatureFlagStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *FeatureFlagStoreGetOrgFeatureFlagFunc) PushHook(hook func(context.Context, int32, string) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreGetOrgFeatureFlagFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, string) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreGetOrgFeatureFlagFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int32, string) (bool, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreGetOrgFeatureFlagFunc) nextHook() func(context.Context, int32, string) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreGetOrgFeatureFlagFunc) appendCall(r0 FeatureFlagStoreGetOrgFeatureFlagFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreGetOrgFeatureFlagFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreGetOrgFeatureFlagFunc) History() []FeatureFlagStoreGetOrgFeatureFlagFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreGetOrgFeatureFlagFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreGetOrgFeatureFlagFuncCall is an object that describes an
// invocation of method GetOrgFeatureFlag on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreGetOrgFeatureFlagFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreGetOrgFeatureFlagFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreGetOrgFeatureFlagFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreGetOrgOverrideForFlagFunc describes the behavior when the
// GetOrgOverrideForFlag method of the parent MockFeatureFlagStore instance
// is invoked.
type FeatureFlagStoreGetOrgOverrideForFlagFunc struct {
	defaultHook func(context.Context, int32, string) (*featureflag.Override, error)
	hooks       []func(context.Context, int32, string) (*featureflag.Override, error)
	history     []FeatureFlagStoreGetOrgOverrideForFlagFuncCall
	mutex       sync.Mutex
}

// GetOrgOverrideForFlag delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) GetOrgOverrideForFlag(v0 context.Context, v1 int32, v2 string) (*featureflag.Override, error) {
	r0, r1 := m.GetOrgOverrideForFlagFunc.nextHook()(v0, v1, v2)
	m.GetOrgOverrideForFlagFunc.appendCall(FeatureFlagStoreGetOrgOverrideForFlagFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetOrgOverrideForFlag method of the parent MockFeatureFlagStore instance
// is invoked and the hook queue is empty.
func (f *FeatureFlagStoreGetOrgOverrideForFlagFunc) SetDefaultHook(hook func(context.Context, int32, string) (*featureflag.Override, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetOrgOverrideForFlag method of the parent MockFeatureFlagStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *FeatureFlagStoreGetOrgOverrideForFlagFunc) PushHook(hook func(context.Context, int32, string) (*featureflag.Override, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreGetOrgOverrideForFlagFunc) SetDefaultReturn(r0 *featureflag.Override, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, string) (*featureflag.Override, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreGetOrgOverrideForFlagFunc) PushReturn(r0 *featureflag.Override, r1 error) {
	f.PushHook(func(context.Context, int32, string) (*featureflag.Override, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreGetOrgOverrideForFlagFunc) nextHook() func(context.Context, int32, string) (*featureflag.Override, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreGetOrgOverrideForFlagFunc) appendCall(r0 FeatureFlagStoreGetOrgOverrideForFlagFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// FeatureFlagStoreGetOrgOverrideForFlagFuncCall objects describing the
// invocations of this function.
func (f *FeatureFlagStoreGetOrgOverrideForFlagFunc) History() []FeatureFlagStoreGetOrgOverrideForFlagFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreGetOrgOverrideForFlagFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreGetOrgOverrideForFlagFuncCall is an object that describes
// an invocation of method GetOrgOverrideForFlag on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreGetOrgOverrideForFlagFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *featureflag.Override
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreGetOrgOverrideForFlagFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreGetOrgOverrideForFlagFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreGetOrgOverridesForUserFunc describes the behavior when
// the GetOrgOverridesForUser method of the parent MockFeatureFlagStore
// instance is invoked.
type FeatureFlagStoreGetOrgOverridesForUserFunc struct {
	defaultHook func(context.Context, int32) ([]*featureflag.Override, error)
	hooks       []func(context.Context, int32) ([]*featureflag.Override, error)
	history     []FeatureFlagStoreGetOrgOverridesForUserFuncCall
	mutex       sync.Mutex
}

// GetOrgOverridesForUser delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) GetOrgOverridesForUser(v0 context.Context, v1 int32) ([]*featureflag.Override, error) {
	r0, r1 := m.GetOrgOverridesForUserFunc.nextHook()(v0, v1)
	m.GetOrgOverridesForUserFunc.appendCall(FeatureFlagStoreGetOrgOverridesForUserFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetOrgOverridesForUser method of the parent MockFeatureFlagStore instance
// is invoked and the hook queue is empty.
func (f *FeatureFlagStoreGetOrgOverridesForUserFunc) SetDefaultHook(hook func(context.Context, int32) ([]*featureflag.Override, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetOrgOverridesForUser method of the parent MockFeatureFlagStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *FeatureFlagStoreGetOrgOverridesForUserFunc) PushHook(hook func(context.Context, int32) ([]*featureflag.Override, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreGetOrgOverridesForUserFunc) SetDefaultReturn(r0 []*featureflag.Override, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) ([]*featureflag.Override, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreGetOrgOverridesForUserFunc) PushReturn(r0 []*featureflag.Override, r1 error) {
	f.PushHook(func(context.Context, int32) ([]*featureflag.Override, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreGetOrgOverridesForUserFunc) nextHook() func(context.Context, int32) ([]*featureflag.Override, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreGetOrgOverridesForUserFunc) appendCall(r0 FeatureFlagStoreGetOrgOverridesForUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// FeatureFlagStoreGetOrgOverridesForUserFuncCall objects describing the
// invocations of this function.
func (f *FeatureFlagStoreGetOrgOverridesForUserFunc) History() []FeatureFlagStoreGetOrgOverridesForUserFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreGetOrgOverridesForUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreGetOrgOverridesForUserFuncCall is an object that
// describes an invocation of method GetOrgOverridesForUser on an instance
// of MockFeatureFlagStore.
type FeatureFlagStoreGetOrgOverridesForUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*featureflag.Override
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreGetOrgOverridesForUserFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreGetOrgOverridesForUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreGetOverridesForFlagFunc describes the behavior when the
// GetOverridesForFlag method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreGetOverridesForFlagFunc struct {
	defaultHook func(context.Context, string) ([]*featureflag.Override, error)
	hooks       []func(context.Context, string) ([]*featureflag.Override, error)
	history     []FeatureFlagStoreGetOverridesForFlagFuncCall
	mutex       sync.Mutex
}

// GetOverridesForFlag delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) GetOverridesForFlag(v0 context.Context, v1 string) ([]*featureflag.Override, error) {
	r0, r1 := m.GetOverridesForFlagFunc.nextHook()(v0, v1)
	m.GetOverridesForFlagFunc.appendCall(FeatureFlagStoreGetOverridesForFlagFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetOverridesForFlag
// method of the parent MockFeatureFlagStore instance is invoked and the
// hook queue is empty.
func (f *FeatureFlagStoreGetOverridesForFlagFunc) SetDefaultHook(hook func(context.Context, string) ([]*featureflag.Override, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetOverridesForFlag method of the parent MockFeatureFlagStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *FeatureFlagStoreGetOverridesForFlagFunc) PushHook(hook func(context.Context, string) ([]*featureflag.Override, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreGetOverridesForFlagFunc) SetDefaultReturn(r0 []*featureflag.Override, r1 error) {
	f.SetDefaultHook(func(context.Context, string) ([]*featureflag.Override, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreGetOverridesForFlagFunc) PushReturn(r0 []*featureflag.Override, r1 error) {
	f.PushHook(func(context.Context, string) ([]*featureflag.Override, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreGetOverridesForFlagFunc) nextHook() func(context.Context, string) ([]*featureflag.Override, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreGetOverridesForFlagFunc) appendCall(r0 FeatureFlagStoreGetOverridesForFlagFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreGetOverridesForFlagFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreGetOverridesForFlagFunc) History() []FeatureFlagStoreGetOverridesForFlagFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreGetOverridesForFlagFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreGetOverridesForFlagFuncCall is an object that describes
// an invocation of method GetOverridesForFlag on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreGetOverridesForFlagFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*featureflag.Override
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreGetOverridesForFlagFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreGetOverridesForFlagFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreGetUserFlagsFunc describes the behavior when the
// GetUserFlags method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreGetUserFlagsFunc struct {
	defaultHook func(context.Context, int32) (map[string]bool, error)
	hooks       []func(context.Context, int32) (map[string]bool, error)
	history     []FeatureFlagStoreGetUserFlagsFuncCall
	mutex       sync.Mutex
}

// GetUserFlags delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) GetUserFlags(v0 context.Context, v1 int32) (map[string]bool, error) {
	r0, r1 := m.GetUserFlagsFunc.nextHook()(v0, v1)
	m.GetUserFlagsFunc.appendCall(FeatureFlagStoreGetUserFlagsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetUserFlags method
// of the parent MockFeatureFlagStore instance is invoked and the hook queue
// is empty.
func (f *FeatureFlagStoreGetUserFlagsFunc) SetDefaultHook(hook func(context.Context, int32) (map[string]bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUserFlags method of the parent MockFeatureFlagStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *FeatureFlagStoreGetUserFlagsFunc) PushHook(hook func(context.Context, int32) (map[string]bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreGetUserFlagsFunc) SetDefaultReturn(r0 map[string]bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (map[string]bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreGetUserFlagsFunc) PushReturn(r0 map[string]bool, r1 error) {
	f.PushHook(func(context.Context, int32) (map[string]bool, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreGetUserFlagsFunc) nextHook() func(context.Context, int32) (map[string]bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreGetUserFlagsFunc) appendCall(r0 FeatureFlagStoreGetUserFlagsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreGetUserFlagsFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreGetUserFlagsFunc) History() []FeatureFlagStoreGetUserFlagsFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreGetUserFlagsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreGetUserFlagsFuncCall is an object that describes an
// invocation of method GetUserFlags on an instance of MockFeatureFlagStore.
type FeatureFlagStoreGetUserFlagsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[string]bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreGetUserFlagsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreGetUserFlagsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreGetUserOverridesFunc describes the behavior when the
// GetUserOverrides method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreGetUserOverridesFunc struct {
	defaultHook func(context.Context, int32) ([]*featureflag.Override, error)
	hooks       []func(context.Context, int32) ([]*featureflag.Override, error)
	history     []FeatureFlagStoreGetUserOverridesFuncCall
	mutex       sync.Mutex
}

// GetUserOverrides delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) GetUserOverrides(v0 context.Context, v1 int32) ([]*featureflag.Override, error) {
	r0, r1 := m.GetUserOverridesFunc.nextHook()(v0, v1)
	m.GetUserOverridesFunc.appendCall(FeatureFlagStoreGetUserOverridesFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetUserOverrides
// method of the parent MockFeatureFlagStore instance is invoked and the
// hook queue is empty.
func (f *FeatureFlagStoreGetUserOverridesFunc) SetDefaultHook(hook func(context.Context, int32) ([]*featureflag.Override, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUserOverrides method of the parent MockFeatureFlagStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *FeatureFlagStoreGetUserOverridesFunc) PushHook(hook func(context.Context, int32) ([]*featureflag.Override, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreGetUserOverridesFunc) SetDefaultReturn(r0 []*featureflag.Override, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) ([]*featureflag.Override, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreGetUserOverridesFunc) PushReturn(r0 []*featureflag.Override, r1 error) {
	f.PushHook(func(context.Context, int32) ([]*featureflag.Override, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreGetUserOverridesFunc) nextHook() func(context.Context, int32) ([]*featureflag.Override, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreGetUserOverridesFunc) appendCall(r0 FeatureFlagStoreGetUserOverridesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreGetUserOverridesFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreGetUserOverridesFunc) History() []FeatureFlagStoreGetUserOverridesFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreGetUserOverridesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreGetUserOverridesFuncCall is an object that describes an
// invocation of method GetUserOverrides on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreGetUserOverridesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*featureflag.Override
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreGetUserOverridesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreGetUserOverridesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreHandleFunc describes the behavior when the Handle method
// of the parent MockFeatureFlagStore instance is invoked.
type FeatureFlagStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []FeatureFlagStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockFeatureFlagStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(FeatureFlagStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockFeatureFlagStore instance is invoked and the hook queue is
// empty.
func (f *FeatureFlagStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockFeatureFlagStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *FeatureFlagStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *FeatureFlagStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreHandleFunc) appendCall(r0 FeatureFlagStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *FeatureFlagStoreHandleFunc) History() []FeatureFlagStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreHandleFuncCall is an object that describes an invocation
// of method Handle on an instance of MockFeatureFlagStore.
type FeatureFlagStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// FeatureFlagStoreTransactFunc describes the behavior when the Transact
// method of the parent MockFeatureFlagStore instance is invoked.
type FeatureFlagStoreTransactFunc struct {
	defaultHook func(context.Context) (FeatureFlagStore, error)
	hooks       []func(context.Context) (FeatureFlagStore, error)
	history     []FeatureFlagStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockFeatureFlagStore) Transact(v0 context.Context) (FeatureFlagStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(FeatureFlagStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockFeatureFlagStore instance is invoked and the hook queue is
// empty.
func (f *FeatureFlagStoreTransactFunc) SetDefaultHook(hook func(context.Context) (FeatureFlagStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockFeatureFlagStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *FeatureFlagStoreTransactFunc) PushHook(hook func(context.Context) (FeatureFlagStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreTransactFunc) SetDefaultReturn(r0 FeatureFlagStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (FeatureFlagStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreTransactFunc) PushReturn(r0 FeatureFlagStore, r1 error) {
	f.PushHook(func(context.Context) (FeatureFlagStore, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreTransactFunc) nextHook() func(context.Context) (FeatureFlagStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreTransactFunc) appendCall(r0 FeatureFlagStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *FeatureFlagStoreTransactFunc) History() []FeatureFlagStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreTransactFuncCall is an object that describes an
// invocation of method Transact on an instance of MockFeatureFlagStore.
type FeatureFlagStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 FeatureFlagStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreUpdateFeatureFlagFunc describes the behavior when the
// UpdateFeatureFlag method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreUpdateFeatureFlagFunc struct {
	defaultHook func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error)
	hooks       []func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error)
	history     []FeatureFlagStoreUpdateFeatureFlagFuncCall
	mutex       sync.Mutex
}

// UpdateFeatureFlag delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) UpdateFeatureFlag(v0 context.Context, v1 *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error) {
	r0, r1 := m.UpdateFeatureFlagFunc.nextHook()(v0, v1)
	m.UpdateFeatureFlagFunc.appendCall(FeatureFlagStoreUpdateFeatureFlagFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the UpdateFeatureFlag
// method of the parent MockFeatureFlagStore instance is invoked and the
// hook queue is empty.
func (f *FeatureFlagStoreUpdateFeatureFlagFunc) SetDefaultHook(hook func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateFeatureFlag method of the parent MockFeatureFlagStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *FeatureFlagStoreUpdateFeatureFlagFunc) PushHook(hook func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreUpdateFeatureFlagFunc) SetDefaultReturn(r0 *featureflag.FeatureFlag, r1 error) {
	f.SetDefaultHook(func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreUpdateFeatureFlagFunc) PushReturn(r0 *featureflag.FeatureFlag, r1 error) {
	f.PushHook(func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreUpdateFeatureFlagFunc) nextHook() func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreUpdateFeatureFlagFunc) appendCall(r0 FeatureFlagStoreUpdateFeatureFlagFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreUpdateFeatureFlagFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreUpdateFeatureFlagFunc) History() []FeatureFlagStoreUpdateFeatureFlagFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreUpdateFeatureFlagFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreUpdateFeatureFlagFuncCall is an object that describes an
// invocation of method UpdateFeatureFlag on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreUpdateFeatureFlagFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *featureflag.FeatureFlag
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *featureflag.FeatureFlag
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreUpdateFeatureFlagFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreUpdateFeatureFlagFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreUpdateOverrideFunc describes the behavior when the
// UpdateOverride method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreUpdateOverrideFunc struct {
	defaultHook func(context.Context, *int32, *int32, string, bool) (*featureflag.Override, error)
	hooks       []func(context.Context, *int32, *int32, string, bool) (*featureflag.Override, error)
	history     []FeatureFlagStoreUpdateOverrideFuncCall
	mutex       sync.Mutex
}

// UpdateOverride delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) UpdateOverride(v0 context.Context, v1 *int32, v2 *int32, v3 string, v4 bool) (*featureflag.Override, error) {
	r0, r1 := m.UpdateOverrideFunc.nextHook()(v0, v1, v2, v3, v4)
	m.UpdateOverrideFunc.appendCall(FeatureFlagStoreUpdateOverrideFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the UpdateOverride
// method of the parent MockFeatureFlagStore instance is invoked and the
// hook queue is empty.
func (f *FeatureFlagStoreUpdateOverrideFunc) SetDefaultHook(hook func(context.Context, *int32, *int32, string, bool) (*featureflag.Override, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateOverride method of the parent MockFeatureFlagStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *FeatureFlagStoreUpdateOverrideFunc) PushHook(hook func(context.Context, *int32, *int32, string, bool) (*featureflag.Override, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreUpdateOverrideFunc) SetDefaultReturn(r0 *featureflag.Override, r1 error) {
	f.SetDefaultHook(func(context.Context, *int32, *int32, string, bool) (*featureflag.Override, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreUpdateOverrideFunc) PushReturn(r0 *featureflag.Override, r1 error) {
	f.PushHook(func(context.Context, *int32, *int32, string, bool) (*featureflag.Override, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreUpdateOverrideFunc) nextHook() func(context.Context, *int32, *int32, string, bool) (*featureflag.Override, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreUpdateOverrideFunc) appendCall(r0 FeatureFlagStoreUpdateOverrideFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreUpdateOverrideFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreUpdateOverrideFunc) History() []FeatureFlagStoreUpdateOverrideFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreUpdateOverrideFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreUpdateOverrideFuncCall is an object that describes an
// invocation of method UpdateOverride on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreUpdateOverrideFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *int32
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *featureflag.Override
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreUpdateOverrideFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreUpdateOverrideFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreWithFunc describes the behavior when the With method of
// the parent MockFeatureFlagStore instance is invoked.
type FeatureFlagStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) FeatureFlagStore
	hooks       []func(basestore.ShareableStore) FeatureFlagStore
	history     []FeatureFlagStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockFeatureFlagStore) With(v0 basestore.ShareableStore) FeatureFlagStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(FeatureFlagStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockFeatureFlagStore instance is invoked and the hook queue is
// empty.
func (f *FeatureFlagStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) FeatureFlagStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockFeatureFlagStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *FeatureFlagStoreWithFunc) PushHook(hook func(basestore.ShareableStore) FeatureFlagStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreWithFunc) SetDefaultReturn(r0 FeatureFlagStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) FeatureFlagStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreWithFunc) PushReturn(r0 FeatureFlagStore) {
	f.PushHook(func(basestore.ShareableStore) FeatureFlagStore {
		return r0
	})
}

func (f *FeatureFlagStoreWithFunc) nextHook() func(basestore.ShareableStore) FeatureFlagStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreWithFunc) appendCall(r0 FeatureFlagStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreWithFuncCall objects
// describing the invocations of this function.
func (f *FeatureFlagStoreWithFunc) History() []FeatureFlagStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockFeatureFlagStore.
type FeatureFlagStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 FeatureFlagStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockGitserverLocalCloneStore is a mock implementation of the
// GitserverLocalCloneStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockGitserverLocalCloneStore struct {
	// EnqueueFunc is an instance of a mock function object controlling the
	// behavior of the method Enqueue.
	EnqueueFunc *GitserverLocalCloneStoreEnqueueFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *GitserverLocalCloneStoreHandleFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *GitserverLocalCloneStoreWithFunc
}

// NewMockGitserverLocalCloneStore creates a new mock of the
// GitserverLocalCloneStore interface. All methods return zero values for
// all results, unless overwritten.
func NewMockGitserverLocalCloneStore() *MockGitserverLocalCloneStore {
	return &MockGitserverLocalCloneStore{
		EnqueueFunc: &GitserverLocalCloneStoreEnqueueFunc{
			defaultHook: func(context.Context, int, string, string, bool) (r0 int, r1 error) {
				return
			},
		},
		HandleFunc: &GitserverLocalCloneStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		WithFunc: &GitserverLocalCloneStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 GitserverLocalCloneStore) {
				return
			},
		},
	}
}

// NewStrictMockGitserverLocalCloneStore creates a new mock of the
// GitserverLocalCloneStore interface. All methods panic on invocation,
// unless overwritten.
func NewStrictMockGitserverLocalCloneStore() *MockGitserverLocalCloneStore {
	return &MockGitserverLocalCloneStore{
		EnqueueFunc: &GitserverLocalCloneStoreEnqueueFunc{
			defaultHook: func(context.Context, int, string, string, bool) (int, error) {
				panic("unexpected invocation of MockGitserverLocalCloneStore.Enqueue")
			},
		},
		HandleFunc: &GitserverLocalCloneStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockGitserverLocalCloneStore.Handle")
			},
		},
		WithFunc: &GitserverLocalCloneStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) GitserverLocalCloneStore {
				panic("unexpected invocation of MockGitserverLocalCloneStore.With")
			},
		},
	}
}

// NewMockGitserverLocalCloneStoreFrom creates a new mock of the
// MockGitserverLocalCloneStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockGitserverLocalCloneStoreFrom(i GitserverLocalCloneStore) *MockGitserverLocalCloneStore {
	return &MockGitserverLocalCloneStore{
		EnqueueFunc: &GitserverLocalCloneStoreEnqueueFunc{
			defaultHook: i.Enqueue,
		},
		HandleFunc: &GitserverLocalCloneStoreHandleFunc{
			defaultHook: i.Handle,
		},
		WithFunc: &GitserverLocalCloneStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// GitserverLocalCloneStoreEnqueueFunc describes the behavior when the
// Enqueue method of the parent MockGitserverLocalCloneStore instance is
// invoked.
type GitserverLocalCloneStoreEnqueueFunc struct {
	defaultHook func(context.Context, int, string, string, bool) (int, error)
	hooks       []func(context.Context, int, string, string, bool) (int, error)
	history     []GitserverLocalCloneStoreEnqueueFuncCall
	mutex       sync.Mutex
}

// Enqueue delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverLocalCloneStore) Enqueue(v0 context.Context, v1 int, v2 string, v3 string, v4 bool) (int, error) {
	r0, r1 := m.EnqueueFunc.nextHook()(v0, v1, v2, v3, v4)
	m.EnqueueFunc.appendCall(GitserverLocalCloneStoreEnqueueFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Enqueue method of
// the parent MockGitserverLocalCloneStore instance is invoked and the hook
// queue is empty.
func (f *GitserverLocalCloneStoreEnqueueFunc) SetDefaultHook(hook func(context.Context, int, string, string, bool) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Enqueue method of the parent MockGitserverLocalCloneStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverLocalCloneStoreEnqueueFunc) PushHook(hook func(context.Context, int, string, string, bool) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverLocalCloneStoreEnqueueFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string, string, bool) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverLocalCloneStoreEnqueueFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, int, string, string, bool) (int, error) {
		return r0, r1
	})
}

func (f *GitserverLocalCloneStoreEnqueueFunc) nextHook() func(context.Context, int, string, string, bool) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverLocalCloneStoreEnqueueFunc) appendCall(r0 GitserverLocalCloneStoreEnqueueFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverLocalCloneStoreEnqueueFuncCall
// objects describing the invocations of this function.
func (f *GitserverLocalCloneStoreEnqueueFunc) History() []GitserverLocalCloneStoreEnqueueFuncCall {
	f.mutex.Lock()
	history := make([]GitserverLocalCloneStoreEnqueueFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverLocalCloneStoreEnqueueFuncCall is an object that describes an
// invocation of method Enqueue on an instance of
// MockGitserverLocalCloneStore.
type GitserverLocalCloneStoreEnqueueFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverLocalCloneStoreEnqueueFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverLocalCloneStoreEnqueueFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverLocalCloneStoreHandleFunc describes the behavior when the Handle
// method of the parent MockGitserverLocalCloneStore instance is invoked.
type GitserverLocalCloneStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []GitserverLocalCloneStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverLocalCloneStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(GitserverLocalCloneStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockGitserverLocalCloneStore instance is invoked and the hook
// queue is empty.
func (f *GitserverLocalCloneStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockGitserverLocalCloneStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverLocalCloneStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverLocalCloneStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverLocalCloneStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *GitserverLocalCloneStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverLocalCloneStoreHandleFunc) appendCall(r0 GitserverLocalCloneStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverLocalCloneStoreHandleFuncCall
// objects describing the invocations of this function.
func (f *GitserverLocalCloneStoreHandleFunc) History() []GitserverLocalCloneStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]GitserverLocalCloneStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverLocalCloneStoreHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of
// MockGitserverLocalCloneStore.
type GitserverLocalCloneStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverLocalCloneStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverLocalCloneStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverLocalCloneStoreWithFunc describes the behavior when the With
// method of the parent MockGitserverLocalCloneStore instance is invoked.
type GitserverLocalCloneStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) GitserverLocalCloneStore
	hooks       []func(basestore.ShareableStore) GitserverLocalCloneStore
	history     []GitserverLocalCloneStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverLocalCloneStore) With(v0 basestore.ShareableStore) GitserverLocalCloneStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(GitserverLocalCloneStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockGitserverLocalCloneStore instance is invoked and the hook
// queue is empty.
func (f *GitserverLocalCloneStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) GitserverLocalCloneStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockGitserverLocalCloneStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverLocalCloneStoreWithFunc) PushHook(hook func(basestore.ShareableStore) GitserverLocalCloneStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverLocalCloneStoreWithFunc) SetDefaultReturn(r0 GitserverLocalCloneStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) GitserverLocalCloneStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverLocalCloneStoreWithFunc) PushReturn(r0 GitserverLocalCloneStore) {
	f.PushHook(func(basestore.ShareableStore) GitserverLocalCloneStore {
		return r0
	})
}

func (f *GitserverLocalCloneStoreWithFunc) nextHook() func(basestore.ShareableStore) GitserverLocalCloneStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverLocalCloneStoreWithFunc) appendCall(r0 GitserverLocalCloneStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverLocalCloneStoreWithFuncCall
// objects describing the invocations of this function.
func (f *GitserverLocalCloneStoreWithFunc) History() []GitserverLocalCloneStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]GitserverLocalCloneStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverLocalCloneStoreWithFuncCall is an object that describes an
// invocation of method With on an instance of MockGitserverLocalCloneStore.
type GitserverLocalCloneStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 GitserverLocalCloneStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverLocalCloneStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverLocalCloneStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockGitserverRepoStore is a mock implementation of the GitserverRepoStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockGitserverRepoStore struct {
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *GitserverRepoStoreGetByIDFunc
	// GetByNameFunc is an instance of a mock function object controlling
	// the behavior of the method GetByName.
	GetByNameFunc *GitserverRepoStoreGetByNameFunc
	// GetByNamesFunc is an instance of a mock function object controlling
	// the behavior of the method GetByNames.
	GetByNamesFunc *GitserverRepoStoreGetByNamesFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *GitserverRepoStoreHandleFunc
	// IteratePurgeableReposFunc is an instance of a mock function object
	// controlling the behavior of the method IteratePurgeableRepos.
	IteratePurgeableReposFunc *GitserverRepoStoreIteratePurgeableReposFunc
	// IterateRepoGitserverStatusFunc is an instance of a mock function
	// object controlling the behavior of the method
	// IterateRepoGitserverStatus.
	IterateRepoGitserverStatusFunc *GitserverRepoStoreIterateRepoGitserverStatusFunc
	// IterateWithNonemptyLastErrorFunc is an instance of a mock function
	// object controlling the behavior of the method
	// IterateWithNonemptyLastError.
	IterateWithNonemptyLastErrorFunc *GitserverRepoStoreIterateWithNonemptyLastErrorFunc
	// ListReposWithoutSizeFunc is an instance of a mock function object
	// controlling the behavior of the method ListReposWithoutSize.
	ListReposWithoutSizeFunc *GitserverRepoStoreListReposWithoutSizeFunc
	// SetCloneStatusFunc is an instance of a mock function object
	// controlling the behavior of the method SetCloneStatus.
	SetCloneStatusFunc *GitserverRepoStoreSetCloneStatusFunc
	// SetLastErrorFunc is an instance of a mock function object controlling
	// the behavior of the method SetLastError.
	SetLastErrorFunc *GitserverRepoStoreSetLastErrorFunc
	// SetLastFetchedFunc is an instance of a mock function object
	// controlling the behavior of the method SetLastFetched.
	SetLastFetchedFunc *GitserverRepoStoreSetLastFetchedFunc
	// SetRepoSizeFunc is an instance of a mock function object controlling
	// the behavior of the method SetRepoSize.
	SetRepoSizeFunc *GitserverRepoStoreSetRepoSizeFunc
	// TotalErroredCloudDefaultReposFunc is an instance of a mock function
	// object controlling the behavior of the method
	// TotalErroredCloudDefaultRepos.
	TotalErroredCloudDefaultReposFunc *GitserverRepoStoreTotalErroredCloudDefaultReposFunc
	// UpdateRepoSizesFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateRepoSizes.
	UpdateRepoSizesFunc *GitserverRepoStoreUpdateRepoSizesFunc
	// UpsertFunc is an instance of a mock function object controlling the
	// behavior of the method Upsert.
	UpsertFunc *GitserverRepoStoreUpsertFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *GitserverRepoStoreWithFunc
}

// NewMockGitserverRepoStore creates a new mock of the GitserverRepoStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockGitserverRepoStore() *MockGitserverRepoStore {
	return &MockGitserverRepoStore{
		GetByIDFunc: &GitserverRepoStoreGetByIDFunc{
			defaultHook: func(context.Context, api.RepoID) (r0 *types.GitserverRepo, r1 error) {
				return
			},
		},
		GetByNameFunc: &GitserverRepoStoreGetByNameFunc{
			defaultHook: func(context.Context, api.RepoName) (r0 *types.GitserverRepo, r1 error) {
				return
			},
		},
		GetByNamesFunc: &GitserverRepoStoreGetByNamesFunc{
			defaultHook: func(context.Context, ...api.RepoName) (r0 []*types.GitserverRepo, r1 error) {
				return
			},
		},
		HandleFunc: &GitserverRepoStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		IteratePurgeableReposFunc: &GitserverRepoStoreIteratePurgeableReposFunc{
			defaultHook: func(context.Context, IteratePurgableReposOptions, func(repo api.RepoName) error) (r0 error) {
				return
			},
		},
		IterateRepoGitserverStatusFunc: &GitserverRepoStoreIterateRepoGitserverStatusFunc{
			defaultHook: func(context.Context, IterateRepoGitserverStatusOptions, func(repo types.RepoGitserverStatus) error) (r0 error) {
				return
			},
		},
		IterateWithNonemptyLastErrorFunc: &GitserverRepoStoreIterateWithNonemptyLastErrorFunc{
			defaultHook: func(context.Context, func(repo types.RepoGitserverStatus) error) (r0 error) {
				return
			},
		},
		ListReposWithoutSizeFunc: &GitserverRepoStoreListReposWithoutSizeFunc{
			defaultHook: func(context.Context) (r0 map[api.RepoName]api.RepoID, r1 error) {
				return
			},
		},
		SetCloneStatusFunc: &GitserverRepoStoreSetCloneStatusFunc{
			defaultHook: func(context.Context, api.RepoName, types.CloneStatus, string) (r0 error) {
				return
			},
		},
		SetLastErrorFunc: &GitserverRepoStoreSetLastErrorFunc{
			defaultHook: func(context.Context, api.RepoName, string, string) (r0 error) {
				return
			},
		},
		SetLastFetchedFunc: &GitserverRepoStoreSetLastFetchedFunc{
			defaultHook: func(context.Context, api.RepoName, GitserverFetchData) (r0 error) {
				return
			},
		},
		SetRepoSizeFunc: &GitserverRepoStoreSetRepoSizeFunc{
			defaultHook: func(context.Context, api.RepoName, int64, string) (r0 error) {
				return
			},
		},
		TotalErroredCloudDefaultReposFunc: &GitserverRepoStoreTotalErroredCloudDefaultReposFunc{
			defaultHook: func(context.Context) (r0 int, r1 error) {
				return
			},
		},
		UpdateRepoSizesFunc: &GitserverRepoStoreUpdateRepoSizesFunc{
			defaultHook: func(context.Context, string, map[api.RepoID]int64) (r0 error) {
				return
			},
		},
		UpsertFunc: &GitserverRepoStoreUpsertFunc{
			defaultHook: func(context.Context, ...*types.GitserverRepo) (r0 error) {
				return
			},
		},
		WithFunc: &GitserverRepoStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 GitserverRepoStore) {
				return
			},
		},
	}
}

// NewStrictMockGitserverRepoStore creates a new mock of the
// GitserverRepoStore interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockGitserverRepoStore() *MockGitserverRepoStore {
	return &MockGitserverRepoStore{
		GetByIDFunc: &GitserverRepoStoreGetByIDFunc{
			defaultHook: func(context.Context, api.RepoID) (*types.GitserverRepo, error) {
				panic("unexpected invocation of MockGitserverRepoStore.GetByID")
			},
		},
		GetByNameFunc: &GitserverRepoStoreGetByNameFunc{
			defaultHook: func(context.Context, api.RepoName) (*types.GitserverRepo, error) {
				panic("unexpected invocation of MockGitserverRepoStore.GetByName")
			},
		},
		GetByNamesFunc: &GitserverRepoStoreGetByNamesFunc{
			defaultHook: func(context.Context, ...api.RepoName) ([]*types.GitserverRepo, error) {
				panic("unexpected invocation of MockGitserverRepoStore.GetByNames")
			},
		},
		HandleFunc: &GitserverRepoStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockGitserverRepoStore.Handle")
			},
		},
		IteratePurgeableReposFunc: &GitserverRepoStoreIteratePurgeableReposFunc{
			defaultHook: func(context.Context, IteratePurgableReposOptions, func(repo api.RepoName) error) error {
				panic("unexpected invocation of MockGitserverRepoStore.IteratePurgeableRepos")
			},
		},
		IterateRepoGitserverStatusFunc: &GitserverRepoStoreIterateRepoGitserverStatusFunc{
			defaultHook: func(context.Context, IterateRepoGitserverStatusOptions, func(repo types.RepoGitserverStatus) error) error {
				panic("unexpected invocation of MockGitserverRepoStore.IterateRepoGitserverStatus")
			},
		},
		IterateWithNonemptyLastErrorFunc: &GitserverRepoStoreIterateWithNonemptyLastErrorFunc{
			defaultHook: func(context.Context, func(repo types.RepoGitserverStatus) error) error {
				panic("unexpected invocation of MockGitserverRepoStore.IterateWithNonemptyLastError")
			},
		},
		ListReposWithoutSizeFunc: &GitserverRepoStoreListReposWithoutSizeFunc{
			defaultHook: func(context.Context) (map[api.RepoName]api.RepoID, error) {
				panic("unexpected invocation of MockGitserverRepoStore.ListReposWithoutSize")
			},
		},
		SetCloneStatusFunc: &GitserverRepoStoreSetCloneStatusFunc{
			defaultHook: func(context.Context, api.RepoName, types.CloneStatus, string) error {
				panic("unexpected invocation of MockGitserverRepoStore.SetCloneStatus")
			},
		},
		SetLastErrorFunc: &GitserverRepoStoreSetLastErrorFunc{
			defaultHook: func(context.Context, api.RepoName, string, string) error {
				panic("unexpected invocation of MockGitserverRepoStore.SetLastError")
			},
		},
		SetLastFetchedFunc: &GitserverRepoStoreSetLastFetchedFunc{
			defaultHook: func(context.Context, api.RepoName, GitserverFetchData) error {
				panic("unexpected invocation of MockGitserverRepoStore.SetLastFetched")
			},
		},
		SetRepoSizeFunc: &GitserverRepoStoreSetRepoSizeFunc{
			defaultHook: func(context.Context, api.RepoName, int64, string) error {
				panic("unexpected invocation of MockGitserverRepoStore.SetRepoSize")
			},
		},
		TotalErroredCloudDefaultReposFunc: &GitserverRepoStoreTotalErroredCloudDefaultReposFunc{
			defaultHook: func(context.Context) (int, error) {
				panic("unexpected invocation of MockGitserverRepoStore.TotalErroredCloudDefaultRepos")
			},
		},
		UpdateRepoSizesFunc: &GitserverRepoStoreUpdateRepoSizesFunc{
			defaultHook: func(context.Context, string, map[api.RepoID]int64) error {
				panic("unexpected invocation of MockGitserverRepoStore.UpdateRepoSizes")
			},
		},
		UpsertFunc: &GitserverRepoStoreUpsertFunc{
			defaultHook: func(context.Context, ...*types.GitserverRepo) error {
				panic("unexpected invocation of MockGitserverRepoStore.Upsert")
			},
		},
		WithFunc: &GitserverRepoStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) GitserverRepoStore {
				panic("unexpected invocation of MockGitserverRepoStore.With")
			},
		},
	}
}

// NewMockGitserverRepoStoreFrom creates a new mock of the
// MockGitserverRepoStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockGitserverRepoStoreFrom(i GitserverRepoStore) *MockGitserverRepoStore {
	return &MockGitserverRepoStore{
		GetByIDFunc: &GitserverRepoStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		GetByNameFunc: &GitserverRepoStoreGetByNameFunc{
			defaultHook: i.GetByName,
		},
		GetByNamesFunc: &GitserverRepoStoreGetByNamesFunc{
			defaultHook: i.GetByNames,
		},
		HandleFunc: &GitserverRepoStoreHandleFunc{
			defaultHook: i.Handle,
		},
		IteratePurgeableReposFunc: &GitserverRepoStoreIteratePurgeableReposFunc{
			defaultHook: i.IteratePurgeableRepos,
		},
		IterateRepoGitserverStatusFunc: &GitserverRepoStoreIterateRepoGitserverStatusFunc{
			defaultHook: i.IterateRepoGitserverStatus,
		},
		IterateWithNonemptyLastErrorFunc: &GitserverRepoStoreIterateWithNonemptyLastErrorFunc{
			defaultHook: i.IterateWithNonemptyLastError,
		},
		ListReposWithoutSizeFunc: &GitserverRepoStoreListReposWithoutSizeFunc{
			defaultHook: i.ListReposWithoutSize,
		},
		SetCloneStatusFunc: &GitserverRepoStoreSetCloneStatusFunc{
			defaultHook: i.SetCloneStatus,
		},
		SetLastErrorFunc: &GitserverRepoStoreSetLastErrorFunc{
			defaultHook: i.SetLastError,
		},
		SetLastFetchedFunc: &GitserverRepoStoreSetLastFetchedFunc{
			defaultHook: i.SetLastFetched,
		},
		SetRepoSizeFunc: &GitserverRepoStoreSetRepoSizeFunc{
			defaultHook: i.SetRepoSize,
		},
		TotalErroredCloudDefaultReposFunc: &GitserverRepoStoreTotalErroredCloudDefaultReposFunc{
			defaultHook: i.TotalErroredCloudDefaultRepos,
		},
		UpdateRepoSizesFunc: &GitserverRepoStoreUpdateRepoSizesFunc{
			defaultHook: i.UpdateRepoSizes,
		},
		UpsertFunc: &GitserverRepoStoreUpsertFunc{
			defaultHook: i.Upsert,
		},
		WithFunc: &GitserverRepoStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// GitserverRepoStoreGetByIDFunc describes the behavior when the GetByID
// method of the parent MockGitserverRepoStore instance is invoked.
type GitserverRepoStoreGetByIDFunc struct {
	defaultHook func(context.Context, api.RepoID) (*types.GitserverRepo, error)
	hooks       []func(context.Context, api.RepoID) (*types.GitserverRepo, error)
	history     []GitserverRepoStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverRepoStore) GetByID(v0 context.Context, v1 api.RepoID) (*types.GitserverRepo, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(GitserverRepoStoreGetByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockGitserverRepoStore instance is invoked and the hook queue
// is empty.
func (f *GitserverRepoStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, api.RepoID) (*types.GitserverRepo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockGitserverRepoStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GitserverRepoStoreGetByIDFunc) PushHook(hook func(context.Context, api.RepoID) (*types.GitserverRepo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverRepoStoreGetByIDFunc) SetDefaultReturn(r0 *types.GitserverRepo, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoID) (*types.GitserverRepo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverRepoStoreGetByIDFunc) PushReturn(r0 *types.GitserverRepo, r1 error) {
	f.PushHook(func(context.Context, api.RepoID) (*types.GitserverRepo, error) {
		return r0, r1
	})
}

func (f *GitserverRepoStoreGetByIDFunc) nextHook() func(context.Context, api.RepoID) (*types.GitserverRepo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverRepoStoreGetByIDFunc) appendCall(r0 GitserverRepoStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverRepoStoreGetByIDFuncCall objects
// describing the invocations of this function.
func (f *GitserverRepoStoreGetByIDFunc) History() []GitserverRepoStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]GitserverRepoStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverRepoStoreGetByIDFuncCall is an object that describes an
// invocation of method GetByID on an instance of MockGitserverRepoStore.
type GitserverRepoStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.GitserverRepo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverRepoStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverRepoStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverRepoStoreGetByNameFunc describes the behavior when the GetByName
// method of the parent MockGitserverRepoStore instance is invoked.
type GitserverRepoStoreGetByNameFunc struct {
	defaultHook func(context.Context, api.RepoName) (*types.GitserverRepo, error)
	hooks       []func(context.Context, api.RepoName) (*types.GitserverRepo, error)
	history     []GitserverRepoStoreGetByNameFuncCall
	mutex       sync.Mutex
}

// GetByName delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverRepoStore) GetByName(v0 context.Context, v1 api.RepoName) (*types.GitserverRepo, error) {
	r0, r1 := m.GetByNameFunc.nextHook()(v0, v1)
	m.GetByNameFunc.appendCall(GitserverRepoStoreGetByNameFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByName method of
// the parent MockGitserverRepoStore instance is invoked and the hook queue
// is empty.
func (f *GitserverRepoStoreGetByNameFunc) SetDefaultHook(hook func(context.Context, api.RepoName) (*types.GitserverRepo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByName method of the parent MockGitserverRepoStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverRepoStoreGetByNameFunc) PushHook(hook func(context.Context, api.RepoName) (*types.GitserverRepo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverRepoStoreGetByNameFunc) SetDefaultReturn(r0 *types.GitserverRepo, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) (*types.GitserverRepo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverRepoStoreGetByNameFunc) PushReturn(r0 *types.GitserverRepo, r1 error) {
	f.PushHook(func(context.Context, api.RepoName) (*types.GitserverRepo, error) {
		return r0, r1
	})
}

func (f *GitserverRepoStoreGetByNameFunc) nextHook() func(context.Context, api.RepoName) (*types.GitserverRepo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverRepoStoreGetByNameFunc) appendCall(r0 GitserverRepoStoreGetByNameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverRepoStoreGetByNameFuncCall objects
// describing the invocations of this function.
func (f *GitserverRepoStoreGetByNameFunc) History() []GitserverRepoStoreGetByNameFuncCall {
	f.mutex.Lock()
	history := make([]GitserverRepoStoreGetByNameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverRepoStoreGetByNameFuncCall is an object that describes an
// invocation of method GetByName on an instance of MockGitserverRepoStore.
type GitserverRepoStoreGetByNameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.GitserverRepo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverRepoStoreGetByNameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverRepoStoreGetByNameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverRepoStoreGetByNamesFunc describes the behavior when the
// GetByNames method of the parent MockGitserverRepoStore instance is
// invoked.
type GitserverRepoStoreGetByNamesFunc struct {
	defaultHook func(context.Context, ...api.RepoName) ([]*types.GitserverRepo, error)
	hooks       []func(context.Context, ...api.RepoName) ([]*types.GitserverRepo, error)
	history     []GitserverRepoStoreGetByNamesFuncCall
	mutex       sync.Mutex
}

// GetByNames delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverRepoStore) GetByNames(v0 context.Context, v1 ...api.RepoName) ([]*types.GitserverRepo, error) {
	r0, r1 := m.GetByNamesFunc.nextHook()(v0, v1...)
	m.GetByNamesFunc.appendCall(GitserverRepoStoreGetByNamesFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByNames method of
// the parent MockGitserverRepoStore instance is invoked and the hook queue
// is empty.
func (f *GitserverRepoStoreGetByNamesFunc) SetDefaultHook(hook func(context.Context, ...api.RepoName) ([]*types.GitserverRepo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByNames method of the parent MockGitserverRepoStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverRepoStoreGetByNamesFunc) PushHook(hook func(context.Context, ...api.RepoName) ([]*types.GitserverRepo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverRepoStoreGetByNamesFunc) SetDefaultReturn(r0 []*types.GitserverRepo, r1 error) {
	f.SetDefaultHook(func(context.Context, ...api.RepoName) ([]*types.GitserverRepo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverRepoStoreGetByNamesFunc) PushReturn(r0 []*types.GitserverRepo, r1 error) {
	f.PushHook(func(context.Context, ...api.RepoName) ([]*types.GitserverRepo, error) {
		return r0, r1
	})
}

func (f *GitserverRepoStoreGetByNamesFunc) nextHook() func(context.Context, ...api.RepoName) ([]*types.GitserverRepo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverRepoStoreGetByNamesFunc) appendCall(r0 GitserverRepoStoreGetByNamesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverRepoStoreGetByNamesFuncCall
// objects describing the invocations of this function.
func (f *GitserverRepoStoreGetByNamesFunc) History() []GitserverRepoStoreGetByNamesFuncCall {
	f.mutex.Lock()
	history := make([]GitserverRepoStoreGetByNamesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverRepoStoreGetByNamesFuncCall is an object that describes an
// invocation of method GetByNames on an instance of MockGitserverRepoStore.
type GitserverRepoStoreGetByNamesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.GitserverRepo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverRepoStoreGetByNamesFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverRepoStoreGetByNamesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverRepoStoreHandleFunc describes the behavior when the Handle
// method of the parent MockGitserverRepoStore instance is invoked.
type GitserverRepoStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []GitserverRepoStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverRepoStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(GitserverRepoStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockGitserverRepoStore instance is invoked and the hook queue is
// empty.
func (f *GitserverRepoStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockGitserverRepoStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GitserverRepoStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverRepoStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverRepoStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *GitserverRepoStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverRepoStoreHandleFunc) appendCall(r0 GitserverRepoStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverRepoStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *GitserverRepoStoreHandleFunc) History() []GitserverRepoStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]GitserverRepoStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverRepoStoreHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of MockGitserverRepoStore.
type GitserverRepoStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverRepoStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverRepoStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverRepoStoreIteratePurgeableReposFunc describes the behavior when
// the IteratePurgeableRepos method of the parent MockGitserverRepoStore
// instance is invoked.
type GitserverRepoStoreIteratePurgeableReposFunc struct {
	defaultHook func(context.Context, IteratePurgableReposOptions, func(repo api.RepoName) error) error
	hooks       []func(context.Context, IteratePurgableReposOptions, func(repo api.RepoName) error) error
	history     []GitserverRepoStoreIteratePurgeableReposFuncCall
	mutex       sync.Mutex
}

// IteratePurgeableRepos delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockGitserverRepoStore) IteratePurgeableRepos(v0 context.Context, v1 IteratePurgableReposOptions, v2 func(repo api.RepoName) error) error {
	r0 := m.IteratePurgeableReposFunc.nextHook()(v0, v1, v2)
	m.IteratePurgeableReposFunc.appendCall(GitserverRepoStoreIteratePurgeableReposFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// IteratePurgeableRepos method of the parent MockGitserverRepoStore
// instance is invoked and the hook queue is empty.
func (f *GitserverRepoStoreIteratePurgeableReposFunc) SetDefaultHook(hook func(context.Context, IteratePurgableReposOptions, func(repo api.RepoName) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IteratePurgeableRepos method of the parent MockGitserverRepoStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverRepoStoreIteratePurgeableReposFunc) PushHook(hook func(context.Context, IteratePurgableReposOptions, func(repo api.RepoName) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverRepoStoreIteratePurgeableReposFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, IteratePurgableReposOptions, func(repo api.RepoName) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverRepoStoreIteratePurgeableReposFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, IteratePurgableReposOptions, func(repo api.RepoName) error) error {
		return r0
	})
}

func (f *GitserverRepoStoreIteratePurgeableReposFunc) nextHook() func(context.Context, IteratePurgableReposOptions, func(repo api.RepoName) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverRepoStoreIteratePurgeableReposFunc) appendCall(r0 GitserverRepoStoreIteratePurgeableReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverRepoStoreIteratePurgeableReposFuncCall objects describing the
// invocations of this function.
func (f *GitserverRepoStoreIteratePurgeableReposFunc) History() []GitserverRepoStoreIteratePurgeableReposFuncCall {
	f.mutex.Lock()
	history := make([]GitserverRepoStoreIteratePurgeableReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverRepoStoreIteratePurgeableReposFuncCall is an object that
// describes an invocation of method IteratePurgeableRepos on an instance of
// MockGitserverRepoStore.
type GitserverRepoStoreIteratePurgeableReposFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 IteratePurgableReposOptions
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 func(repo api.RepoName) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverRepoStoreIteratePurgeableReposFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverRepoStoreIteratePurgeableReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverRepoStoreIterateRepoGitserverStatusFunc describes the behavior
// when the IterateRepoGitserverStatus method of the parent
// MockGitserverRepoStore instance is invoked.
type GitserverRepoStoreIterateRepoGitserverStatusFunc struct {
	defaultHook func(context.Context, IterateRepoGitserverStatusOptions, func(repo types.RepoGitserverStatus) error) error
	hooks       []func(context.Context, IterateRepoGitserverStatusOptions, func(repo types.RepoGitserverStatus) error) error
	history     []GitserverRepoStoreIterateRepoGitserverStatusFuncCall
	mutex       sync.Mutex
}

// IterateRepoGitserverStatus delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockGitserverRepoStore) IterateRepoGitserverStatus(v0 context.Context, v1 IterateRepoGitserverStatusOptions, v2 func(repo types.RepoGitserverStatus) error) error {
	r0 := m.IterateRepoGitserverStatusFunc.nextHook()(v0, v1, v2)
	m.IterateRepoGitserverStatusFunc.appendCall(GitserverRepoStoreIterateRepoGitserverStatusFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// IterateRepoGitserverStatus method of the parent MockGitserverRepoStore
// instance is invoked and the hook queue is empty.
func (f *GitserverRepoStoreIterateRepoGitserverStatusFunc) SetDefaultHook(hook func(context.Context, IterateRepoGitserverStatusOptions, func(repo types.RepoGitserverStatus) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IterateRepoGitserverStatus method of the parent MockGitserverRepoStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverRepoStoreIterateRepoGitserverStatusFunc) PushHook(hook func(context.Context, IterateRepoGitserverStatusOptions, func(repo types.RepoGitserverStatus) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverRepoStoreIterateRepoGitserverStatusFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, IterateRepoGitserverStatusOptions, func(repo types.RepoGitserverStatus) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverRepoStoreIterateRepoGitserverStatusFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, IterateRepoGitserverStatusOptions, func(repo types.RepoGitserverStatus) error) error {
		return r0
	})
}

func (f *GitserverRepoStoreIterateRepoGitserverStatusFunc) nextHook() func(context.Context, IterateRepoGitserverStatusOptions, func(repo types.RepoGitserverStatus) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverRepoStoreIterateRepoGitserverStatusFunc) appendCall(r0 GitserverRepoStoreIterateRepoGitserverStatusFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverRepoStoreIterateRepoGitserverStatusFuncCall objects describing
// the invocations of this function.
func (f *GitserverRepoStoreIterateRepoGitserverStatusFunc) History() []GitserverRepoStoreIterateRepoGitserverStatusFuncCall {
	f.mutex.Lock()
	history := make([]GitserverRepoStoreIterateRepoGitserverStatusFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverRepoStoreIterateRepoGitserverStatusFuncCall is an object that
// describes an invocation of method IterateRepoGitserverStatus on an
// instance of MockGitserverRepoStore.
type GitserverRepoStoreIterateRepoGitserverStatusFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 IterateRepoGitserverStatusOptions
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 func(repo types.RepoGitserverStatus) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverRepoStoreIterateRepoGitserverStatusFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverRepoStoreIterateRepoGitserverStatusFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverRepoStoreIterateWithNonemptyLastErrorFunc describes the behavior
// when the IterateWithNonemptyLastError method of the parent
// MockGitserverRepoStore instance is invoked.
type GitserverRepoStoreIterateWithNonemptyLastErrorFunc struct {
	defaultHook func(context.Context, func(repo types.RepoGitserverStatus) error) error
	hooks       []func(context.Context, func(repo types.RepoGitserverStatus) error) error
	history     []GitserverRepoStoreIterateWithNonemptyLastErrorFuncCall
	mutex       sync.Mutex
}

// IterateWithNonemptyLastError delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockGitserverRepoStore) IterateWithNonemptyLastError(v0 context.Context, v1 func(repo types.RepoGitserverStatus) error) error {
	r0 := m.IterateWithNonemptyLastErrorFunc.nextHook()(v0, v1)
	m.IterateWithNonemptyLastErrorFunc.appendCall(GitserverRepoStoreIterateWithNonemptyLastErrorFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// IterateWithNonemptyLastError method of the parent MockGitserverRepoStore
// instance is invoked and the hook queue is empty.
func (f *GitserverRepoStoreIterateWithNonemptyLastErrorFunc) SetDefaultHook(hook func(context.Context, func(repo types.RepoGitserverStatus) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IterateWithNonemptyLastError method of the parent MockGitserverRepoStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverRepoStoreIterateWithNonemptyLastErrorFunc) PushHook(hook func(context.Context, func(repo types.RepoGitserverStatus) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverRepoStoreIterateWithNonemptyLastErrorFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, func(repo types.RepoGitserverStatus) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverRepoStoreIterateWithNonemptyLastErrorFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, func(repo types.RepoGitserverStatus) error) error {
		return r0
	})
}

func (f *GitserverRepoStoreIterateWithNonemptyLastErrorFunc) nextHook() func(context.Context, func(repo types.RepoGitserverStatus) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverRepoStoreIterateWithNonemptyLastErrorFunc) appendCall(r0 GitserverRepoStoreIterateWithNonemptyLastErrorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverRepoStoreIterateWithNonemptyLastErrorFuncCall objects describing
// the invocations of this function.
func (f *GitserverRepoStoreIterateWithNonemptyLastErrorFunc) History() []GitserverRepoStoreIterateWithNonemptyLastErrorFuncCall {
	f.mutex.Lock()
	history := make([]GitserverRepoStoreIterateWithNonemptyLastErrorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverRepoStoreIterateWithNonemptyLastErrorFuncCall is an object that
// describes an invocation of method IterateWithNonemptyLastError on an
// instance of MockGitserverRepoStore.
type GitserverRepoStoreIterateWithNonemptyLastErrorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 func(repo types.RepoGitserverStatus) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverRepoStoreIterateWithNonemptyLastErrorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverRepoStoreIterateWithNonemptyLastErrorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverRepoStoreListReposWithoutSizeFunc describes the behavior when
// the ListReposWithoutSize method of the parent MockGitserverRepoStore
// instance is invoked.
type GitserverRepoStoreListReposWithoutSizeFunc struct {
	defaultHook func(context.Context) (map[api.RepoName]api.RepoID, error)
	hooks       []func(context.Context) (map[api.RepoName]api.RepoID, error)
	history     []GitserverRepoStoreListReposWithoutSizeFuncCall
	mutex       sync.Mutex
}

// ListReposWithoutSize delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverRepoStore) ListReposWithoutSize(v0 context.Context) (map[api.RepoName]api.RepoID, error) {
	r0, r1 := m.ListReposWithoutSizeFunc.nextHook()(v0)
	m.ListReposWithoutSizeFunc.appendCall(GitserverRepoStoreListReposWithoutSizeFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListReposWithoutSize
// method of the parent MockGitserverRepoStore instance is invoked and the
// hook queue is empty.
func (f *GitserverRepoStoreListReposWithoutSizeFunc) SetDefaultHook(hook func(context.Context) (map[api.RepoName]api.RepoID, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListReposWithoutSize method of the parent MockGitserverRepoStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverRepoStoreListReposWithoutSizeFunc) PushHook(hook func(context.Context) (map[api.RepoName]api.RepoID, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverRepoStoreListReposWithoutSizeFunc) SetDefaultReturn(r0 map[api.RepoName]api.RepoID, r1 error) {
	f.SetDefaultHook(func(context.Context) (map[api.RepoName]api.RepoID, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverRepoStoreListReposWithoutSizeFunc) PushReturn(r0 map[api.RepoName]api.RepoID, r1 error) {
	f.PushHook(func(context.Context) (map[api.RepoName]api.RepoID, error) {
		return r0, r1
	})
}

func (f *GitserverRepoStoreListReposWithoutSizeFunc) nextHook() func(context.Context) (map[api.RepoName]api.RepoID, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverRepoStoreListReposWithoutSizeFunc) appendCall(r0 GitserverRepoStoreListReposWithoutSizeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverRepoStoreListReposWithoutSizeFuncCall objects describing the
// invocations of this function.
func (f *GitserverRepoStoreListReposWithoutSizeFunc) History() []GitserverRepoStoreListReposWithoutSizeFuncCall {
	f.mutex.Lock()
	history := make([]GitserverRepoStoreListReposWithoutSizeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverRepoStoreListReposWithoutSizeFuncCall is an object that
// describes an invocation of method ListReposWithoutSize on an instance of
// MockGitserverRepoStore.
type GitserverRepoStoreListReposWithoutSizeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[api.RepoName]api.RepoID
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverRepoStoreListReposWithoutSizeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverRepoStoreListReposWithoutSizeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverRepoStoreSetCloneStatusFunc describes the behavior when the
// SetCloneStatus method of the parent MockGitserverRepoStore instance is
// invoked.
type GitserverRepoStoreSetCloneStatusFunc struct {
	defaultHook func(context.Context, api.RepoName, types.CloneStatus, string) error
	hooks       []func(context.Context, api.RepoName, types.CloneStatus, string) error
	history     []GitserverRepoStoreSetCloneStatusFuncCall
	mutex       sync.Mutex
}

// SetCloneStatus delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverRepoStore) SetCloneStatus(v0 context.Context, v1 api.RepoName, v2 types.CloneStatus, v3 string) error {
	r0 := m.SetCloneStatusFunc.nextHook()(v0, v1, v2, v3)
	m.SetCloneStatusFunc.appendCall(GitserverRepoStoreSetCloneStatusFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetCloneStatus
// method of the parent MockGitserverRepoStore instance is invoked and the
// hook queue is empty.
func (f *GitserverRepoStoreSetCloneStatusFunc) SetDefaultHook(hook func(context.Context, api.RepoName, types.CloneStatus, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetCloneStatus method of the parent MockGitserverRepoStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverRepoStoreSetCloneStatusFunc) PushHook(hook func(context.Context, api.RepoName, types.CloneStatus, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverRepoStoreSetCloneStatusFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, types.CloneStatus, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverRepoStoreSetCloneStatusFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, api.RepoName, types.CloneStatus, string) error {
		return r0
	})
}

func (f *GitserverRepoStoreSetCloneStatusFunc) nextHook() func(context.Context, api.RepoName, types.CloneStatus, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverRepoStoreSetCloneStatusFunc) appendCall(r0 GitserverRepoStoreSetCloneStatusFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverRepoStoreSetCloneStatusFuncCall
// objects describing the invocations of this function.
func (f *GitserverRepoStoreSetCloneStatusFunc) History() []GitserverRepoStoreSetCloneStatusFuncCall {
	f.mutex.Lock()
	history := make([]GitserverRepoStoreSetCloneStatusFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverRepoStoreSetCloneStatusFuncCall is an object that describes an
// invocation of method SetCloneStatus on an instance of
// MockGitserverRepoStore.
type GitserverRepoStoreSetCloneStatusFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 types.CloneStatus
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverRepoStoreSetCloneStatusFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverRepoStoreSetCloneStatusFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverRepoStoreSetLastErrorFunc describes the behavior when the
// SetLastError method of the parent MockGitserverRepoStore instance is
// invoked.
type GitserverRepoStoreSetLastErrorFunc struct {
	defaultHook func(context.Context, api.RepoName, string, string) error
	hooks       []func(context.Context, api.RepoName, string, string) error
	history     []GitserverRepoStoreSetLastErrorFuncCall
	mutex       sync.Mutex
}

// SetLastError delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverRepoStore) SetLastError(v0 context.Context, v1 api.RepoName, v2 string, v3 string) error {
	r0 := m.SetLastErrorFunc.nextHook()(v0, v1, v2, v3)
	m.SetLastErrorFunc.appendCall(GitserverRepoStoreSetLastErrorFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetLastError method
// of the parent MockGitserverRepoStore instance is invoked and the hook
// queue is empty.
func (f *GitserverRepoStoreSetLastErrorFunc) SetDefaultHook(hook func(context.Context, api.RepoName, string, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetLastError method of the parent MockGitserverRepoStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverRepoStoreSetLastErrorFunc) PushHook(hook func(context.Context, api.RepoName, string, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverRepoStoreSetLastErrorFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, string, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverRepoStoreSetLastErrorFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, api.RepoName, string, string) error {
		return r0
	})
}

func (f *GitserverRepoStoreSetLastErrorFunc) nextHook() func(context.Context, api.RepoName, string, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverRepoStoreSetLastErrorFunc) appendCall(r0 GitserverRepoStoreSetLastErrorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverRepoStoreSetLastErrorFuncCall
// objects describing the invocations of this function.
func (f *GitserverRepoStoreSetLastErrorFunc) History() []GitserverRepoStoreSetLastErrorFuncCall {
	f.mutex.Lock()
	history := make([]GitserverRepoStoreSetLastErrorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverRepoStoreSetLastErrorFuncCall is an object that describes an
// invocation of method SetLastError on an instance of
// MockGitserverRepoStore.
type GitserverRepoStoreSetLastErrorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverRepoStoreSetLastErrorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverRepoStoreSetLastErrorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverRepoStoreSetLastFetchedFunc describes the behavior when the
// SetLastFetched method of the parent MockGitserverRepoStore instance is
// invoked.
type GitserverRepoStoreSetLastFetchedFunc struct {
	defaultHook func(context.Context, api.RepoName, GitserverFetchData) error
	hooks       []func(context.Context, api.RepoName, GitserverFetchData) error
	history     []GitserverRepoStoreSetLastFetchedFuncCall
	mutex       sync.Mutex
}

// SetLastFetched delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverRepoStore) SetLastFetched(v0 context.Context, v1 api.RepoName, v2 GitserverFetchData) error {
	r0 := m.SetLastFetchedFunc.nextHook()(v0, v1, v2)
	m.SetLastFetchedFunc.appendCall(GitserverRepoStoreSetLastFetchedFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetLastFetched
// method of the parent MockGitserverRepoStore instance is invoked and the
// hook queue is empty.
func (f *GitserverRepoStoreSetLastFetchedFunc) SetDefaultHook(hook func(context.Context, api.RepoName, GitserverFetchData) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetLastFetched method of the parent MockGitserverRepoStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverRepoStoreSetLastFetchedFunc) PushHook(hook func(context.Context, api.RepoName, GitserverFetchData) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverRepoStoreSetLastFetchedFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, GitserverFetchData) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverRepoStoreSetLastFetchedFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, api.RepoName, GitserverFetchData) error {
		return r0
	})
}

func (f *GitserverRepoStoreSetLastFetchedFunc) nextHook() func(context.Context, api.RepoName, GitserverFetchData) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverRepoStoreSetLastFetchedFunc) appendCall(r0 GitserverRepoStoreSetLastFetchedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverRepoStoreSetLastFetchedFuncCall
// objects describing the invocations of this function.
func (f *GitserverRepoStoreSetLastFetchedFunc) History() []GitserverRepoStoreSetLastFetchedFuncCall {
	f.mutex.Lock()
	history := make([]GitserverRepoStoreSetLastFetchedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverRepoStoreSetLastFetchedFuncCall is an object that describes an
// invocation of method SetLastFetched on an instance of
// MockGitserverRepoStore.
type GitserverRepoStoreSetLastFetchedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 GitserverFetchData
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverRepoStoreSetLastFetchedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverRepoStoreSetLastFetchedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverRepoStoreSetRepoSizeFunc describes the behavior when the
// SetRepoSize method of the parent MockGitserverRepoStore instance is
// invoked.
type GitserverRepoStoreSetRepoSizeFunc struct {
	defaultHook func(context.Context, api.RepoName, int64, string) error
	hooks       []func(context.Context, api.RepoName, int64, string) error
	history     []GitserverRepoStoreSetRepoSizeFuncCall
	mutex       sync.Mutex
}

// SetRepoSize delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverRepoStore) SetRepoSize(v0 context.Context, v1 api.RepoName, v2 int64, v3 string) error {
	r0 := m.SetRepoSizeFunc.nextHook()(v0, v1, v2, v3)
	m.SetRepoSizeFunc.appendCall(GitserverRepoStoreSetRepoSizeFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetRepoSize method
// of the parent MockGitserverRepoStore instance is invoked and the hook
// queue is empty.
func (f *GitserverRepoStoreSetRepoSizeFunc) SetDefaultHook(hook func(context.Context, api.RepoName, int64, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetRepoSize method of the parent MockGitserverRepoStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverRepoStoreSetRepoSizeFunc) PushHook(hook func(context.Context, api.RepoName, int64, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverRepoStoreSetRepoSizeFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, int64, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverRepoStoreSetRepoSizeFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, api.RepoName, int64, string) error {
		return r0
	})
}

func (f *GitserverRepoStoreSetRepoSizeFunc) nextHook() func(context.Context, api.RepoName, int64, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverRepoStoreSetRepoSizeFunc) appendCall(r0 GitserverRepoStoreSetRepoSizeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverRepoStoreSetRepoSizeFuncCall
// objects describing the invocations of this function.
func (f *GitserverRepoStoreSetRepoSizeFunc) History() []GitserverRepoStoreSetRepoSizeFuncCall {
	f.mutex.Lock()
	history := make([]GitserverRepoStoreSetRepoSizeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverRepoStoreSetRepoSizeFuncCall is an object that describes an
// invocation of method SetRepoSize on an instance of
// MockGitserverRepoStore.
type GitserverRepoStoreSetRepoSizeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int64
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverRepoStoreSetRepoSizeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverRepoStoreSetRepoSizeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverRepoStoreTotalErroredCloudDefaultReposFunc describes the
// behavior when the TotalErroredCloudDefaultRepos method of the parent
// MockGitserverRepoStore instance is invoked.
type GitserverRepoStoreTotalErroredCloudDefaultReposFunc struct {
	defaultHook func(context.Context) (int, error)
	hooks       []func(context.Context) (int, error)
	history     []GitserverRepoStoreTotalErroredCloudDefaultReposFuncCall
	mutex       sync.Mutex
}

// TotalErroredCloudDefaultRepos delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockGitserverRepoStore) TotalErroredCloudDefaultRepos(v0 context.Context) (int, error) {
	r0, r1 := m.TotalErroredCloudDefaultReposFunc.nextHook()(v0)
	m.TotalErroredCloudDefaultReposFunc.appendCall(GitserverRepoStoreTotalErroredCloudDefaultReposFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// TotalErroredCloudDefaultRepos method of the parent MockGitserverRepoStore
// instance is invoked and the hook queue is empty.
func (f *GitserverRepoStoreTotalErroredCloudDefaultReposFunc) SetDefaultHook(hook func(context.Context) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TotalErroredCloudDefaultRepos method of the parent MockGitserverRepoStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverRepoStoreTotalErroredCloudDefaultReposFunc) PushHook(hook func(context.Context) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverRepoStoreTotalErroredCloudDefaultReposFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverRepoStoreTotalErroredCloudDefaultReposFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

func (f *GitserverRepoStoreTotalErroredCloudDefaultReposFunc) nextHook() func(context.Context) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverRepoStoreTotalErroredCloudDefaultReposFunc) appendCall(r0 GitserverRepoStoreTotalErroredCloudDefaultReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverRepoStoreTotalErroredCloudDefaultReposFuncCall objects
// describing the invocations of this function.
func (f *GitserverRepoStoreTotalErroredCloudDefaultReposFunc) History() []GitserverRepoStoreTotalErroredCloudDefaultReposFuncCall {
	f.mutex.Lock()
	history := make([]GitserverRepoStoreTotalErroredCloudDefaultReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverRepoStoreTotalErroredCloudDefaultReposFuncCall is an object that
// describes an invocation of method TotalErroredCloudDefaultRepos on an
// instance of MockGitserverRepoStore.
type GitserverRepoStoreTotalErroredCloudDefaultReposFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverRepoStoreTotalErroredCloudDefaultReposFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverRepoStoreTotalErroredCloudDefaultReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverRepoStoreUpdateRepoSizesFunc describes the behavior when the
// UpdateRepoSizes method of the parent MockGitserverRepoStore instance is
// invoked.
type GitserverRepoStoreUpdateRepoSizesFunc struct {
	defaultHook func(context.Context, string, map[api.RepoID]int64) error
	hooks       []func(context.Context, string, map[api.RepoID]int64) error
	history     []GitserverRepoStoreUpdateRepoSizesFuncCall
	mutex       sync.Mutex
}

// UpdateRepoSizes delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverRepoStore) UpdateRepoSizes(v0 context.Context, v1 string, v2 map[api.RepoID]int64) error {
	r0 := m.UpdateRepoSizesFunc.nextHook()(v0, v1, v2)
	m.UpdateRepoSizesFunc.appendCall(GitserverRepoStoreUpdateRepoSizesFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UpdateRepoSizes
// method of the parent MockGitserverRepoStore instance is invoked and the
// hook queue is empty.
func (f *GitserverRepoStoreUpdateRepoSizesFunc) SetDefaultHook(hook func(context.Context, string, map[api.RepoID]int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateRepoSizes method of the parent MockGitserverRepoStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverRepoStoreUpdateRepoSizesFunc) PushHook(hook func(context.Context, string, map[api.RepoID]int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverRepoStoreUpdateRepoSizesFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string, map[api.RepoID]int64) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverRepoStoreUpdateRepoSizesFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string, map[api.RepoID]int64) error {
		return r0
	})
}

func (f *GitserverRepoStoreUpdateRepoSizesFunc) nextHook() func(context.Context, string, map[api.RepoID]int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverRepoStoreUpdateRepoSizesFunc) appendCall(r0 GitserverRepoStoreUpdateRepoSizesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverRepoStoreUpdateRepoSizesFuncCall
// objects describing the invocations of this function.
func (f *GitserverRepoStoreUpdateRepoSizesFunc) History() []GitserverRepoStoreUpdateRepoSizesFuncCall {
	f.mutex.Lock()
	history := make([]GitserverRepoStoreUpdateRepoSizesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverRepoStoreUpdateRepoSizesFuncCall is an object that describes an
// invocation of method UpdateRepoSizes on an instance of
// MockGitserverRepoStore.
type GitserverRepoStoreUpdateRepoSizesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 map[api.RepoID]int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverRepoStoreUpdateRepoSizesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverRepoStoreUpdateRepoSizesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverRepoStoreUpsertFunc describes the behavior when the Upsert
// method of the parent MockGitserverRepoStore instance is invoked.
type GitserverRepoStoreUpsertFunc struct {
	defaultHook func(context.Context, ...*types.GitserverRepo) error
	hooks       []func(context.Context, ...*types.GitserverRepo) error
	history     []GitserverRepoStoreUpsertFuncCall
	mutex       sync.Mutex
}

// Upsert delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverRepoStore) Upsert(v0 context.Context, v1 ...*types.GitserverRepo) error {
	r0 := m.UpsertFunc.nextHook()(v0, v1...)
	m.UpsertFunc.appendCall(GitserverRepoStoreUpsertFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Upsert method of the
// parent MockGitserverRepoStore instance is invoked and the hook queue is
// empty.
func (f *GitserverRepoStoreUpsertFunc) SetDefaultHook(hook func(context.Context, ...*types.GitserverRepo) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Upsert method of the parent MockGitserverRepoStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GitserverRepoStoreUpsertFunc) PushHook(hook func(context.Context, ...*types.GitserverRepo) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverRepoStoreUpsertFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ...*types.GitserverRepo) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverRepoStoreUpsertFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ...*types.GitserverRepo) error {
		return r0
	})
}

func (f *GitserverRepoStoreUpsertFunc) nextHook() func(context.Context, ...*types.GitserverRepo) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverRepoStoreUpsertFunc) appendCall(r0 GitserverRepoStoreUpsertFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverRepoStoreUpsertFuncCall objects
// describing the invocations of this function.
func (f *GitserverRepoStoreUpsertFunc) History() []GitserverRepoStoreUpsertFuncCall {
	f.mutex.Lock()
	history := make([]GitserverRepoStoreUpsertFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverRepoStoreUpsertFuncCall is an object that describes an
// invocation of method Upsert on an instance of MockGitserverRepoStore.
type GitserverRepoStoreUpsertFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []*types.GitserverRepo
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverRepoStoreUpsertFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverRepoStoreUpsertFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverRepoStoreWithFunc describes the behavior when the With method of
// the parent MockGitserverRepoStore instance is invoked.
type GitserverRepoStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) GitserverRepoStore
	hooks       []func(basestore.ShareableStore) GitserverRepoStore
	history     []GitserverRepoStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverRepoStore) With(v0 basestore.ShareableStore) GitserverRepoStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(GitserverRepoStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockGitserverRepoStore instance is invoked and the hook queue is
// empty.
func (f *GitserverRepoStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) GitserverRepoStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockGitserverRepoStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GitserverRepoStoreWithFunc) PushHook(hook func(basestore.ShareableStore) GitserverRepoStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverRepoStoreWithFunc) SetDefaultReturn(r0 GitserverRepoStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) GitserverRepoStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverRepoStoreWithFunc) PushReturn(r0 GitserverRepoStore) {
	f.PushHook(func(basestore.ShareableStore) GitserverRepoStore {
		return r0
	})
}

func (f *GitserverRepoStoreWithFunc) nextHook() func(basestore.ShareableStore) GitserverRepoStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverRepoStoreWithFunc) appendCall(r0 GitserverRepoStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverRepoStoreWithFuncCall objects
// describing the invocations of this function.
func (f *GitserverRepoStoreWithFunc) History() []GitserverRepoStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]GitserverRepoStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverRepoStoreWithFuncCall is an object that describes an invocation
// of method With on an instance of MockGitserverRepoStore.
type GitserverRepoStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 GitserverRepoStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverRepoStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverRepoStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockGlobalStateStore is a mock implementation of the GlobalStateStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockGlobalStateStore struct {
	// EnsureInitializedFunc is an instance of a mock function object
	// controlling the behavior of the method EnsureInitialized.
	EnsureInitializedFunc *GlobalStateStoreEnsureInitializedFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *GlobalStateStoreGetFunc
	// SiteInitializedFunc is an instance of a mock function object
	// controlling the behavior of the method SiteInitialized.
	SiteInitializedFunc *GlobalStateStoreSiteInitializedFunc
}

// NewMockGlobalStateStore creates a new mock of the GlobalStateStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockGlobalStateStore() *MockGlobalStateStore {
	return &MockGlobalStateStore{
		EnsureInitializedFunc: &GlobalStateStoreEnsureInitializedFunc{
			defaultHook: func(context.Context) (r0 bool, r1 error) {
				return
			},
		},
		GetFunc: &GlobalStateStoreGetFunc{
			defaultHook: func(context.Context) (r0 GlobalState, r1 error) {
				return
			},
		},
		SiteInitializedFunc: &GlobalStateStoreSiteInitializedFunc{
			defaultHook: func(context.Context) (r0 bool, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockGlobalStateStore creates a new mock of the GlobalStateStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockGlobalStateStore() *MockGlobalStateStore {
	return &MockGlobalStateStore{
		EnsureInitializedFunc: &GlobalStateStoreEnsureInitializedFunc{
			defaultHook: func(context.Context) (bool, error) {
				panic("unexpected invocation of MockGlobalStateStore.EnsureInitialized")
			},
		},
		GetFunc: &GlobalStateStoreGetFunc{
			defaultHook: func(context.Context) (GlobalState, error) {
				panic("unexpected invocation of MockGlobalStateStore.Get")
			},
		},
		SiteInitializedFunc: &GlobalStateStoreSiteInitializedFunc{
			defaultHook: func(context.Context) (bool, error) {
				panic("unexpected invocation of MockGlobalStateStore.SiteInitialized")
			},
		},
	}
}

// NewMockGlobalStateStoreFrom creates a new mock of the
// MockGlobalStateStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockGlobalStateStoreFrom(i GlobalStateStore) *MockGlobalStateStore {
	return &MockGlobalStateStore{
		EnsureInitializedFunc: &GlobalStateStoreEnsureInitializedFunc{
			defaultHook: i.EnsureInitialized,
		},
		GetFunc: &GlobalStateStoreGetFunc{
			defaultHook: i.Get,
		},
		SiteInitializedFunc: &GlobalStateStoreSiteInitializedFunc{
			defaultHook: i.SiteInitialized,
		},
	}
}

// GlobalStateStoreEnsureInitializedFunc describes the behavior when the
// EnsureInitialized method of the parent MockGlobalStateStore instance is
// invoked.
type GlobalStateStoreEnsureInitializedFunc struct {
	defaultHook func(context.Context) (bool, error)
	hooks       []func(context.Context) (bool, error)
	history     []GlobalStateStoreEnsureInitializedFuncCall
	mutex       sync.Mutex
}

// EnsureInitialized delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGlobalStateStore) EnsureInitialized(v0 context.Context) (bool, error) {
	r0, r1 := m.EnsureInitializedFunc.nextHook()(v0)
	m.EnsureInitializedFunc.appendCall(GlobalStateStoreEnsureInitializedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the EnsureInitialized
// method of the parent MockGlobalStateStore instance is invoked and the
// hook queue is empty.
func (f *GlobalStateStoreEnsureInitializedFunc) SetDefaultHook(hook func(context.Context) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EnsureInitialized method of the parent MockGlobalStateStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GlobalStateStoreEnsureInitializedFunc) PushHook(hook func(context.Context) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GlobalStateStoreEnsureInitializedFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GlobalStateStoreEnsureInitializedFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context) (bool, error) {
		return r0, r1
	})
}

func (f *GlobalStateStoreEnsureInitializedFunc) nextHook() func(context.Context) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GlobalStateStoreEnsureInitializedFunc) appendCall(r0 GlobalStateStoreEnsureInitializedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GlobalStateStoreEnsureInitializedFuncCall
// objects describing the invocations of this function.
func (f *GlobalStateStoreEnsureInitializedFunc) History() []GlobalStateStoreEnsureInitializedFuncCall {
	f.mutex.Lock()
	history := make([]GlobalStateStoreEnsureInitializedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GlobalStateStoreEnsureInitializedFuncCall is an object that describes an
// invocation of method EnsureInitialized on an instance of
// MockGlobalStateStore.
type GlobalStateStoreEnsureInitializedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GlobalStateStoreEnsureInitializedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GlobalStateStoreEnsureInitializedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GlobalStateStoreGetFunc describes the behavior when the Get method of the
// parent MockGlobalStateStore instance is invoked.
type GlobalStateStoreGetFunc struct {
	defaultHook func(context.Context) (GlobalState, error)
	hooks       []func(context.Context) (GlobalState, error)
	history     []GlobalStateStoreGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGlobalStateStore) Get(v0 context.Context) (GlobalState, error) {
	r0, r1 := m.GetFunc.nextHook()(v0)
	m.GetFunc.appendCall(GlobalStateStoreGetFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockGlobalStateStore instance is invoked and the hook queue is
// empty.
func (f *GlobalStateStoreGetFunc) SetDefaultHook(hook func(context.Context) (GlobalState, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockGlobalStateStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GlobalStateStoreGetFunc) PushHook(hook func(context.Context) (GlobalState, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GlobalStateStoreGetFunc) SetDefaultReturn(r0 GlobalState, r1 error) {
	f.SetDefaultHook(func(context.Context) (GlobalState, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GlobalStateStoreGetFunc) PushReturn(r0 GlobalState, r1 error) {
	f.PushHook(func(context.Context) (GlobalState, error) {
		return r0, r1
	})
}

func (f *GlobalStateStoreGetFunc) nextHook() func(context.Context) (GlobalState, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GlobalStateStoreGetFunc) appendCall(r0 GlobalStateStoreGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GlobalStateStoreGetFuncCall objects
// describing the invocations of this function.
func (f *GlobalStateStoreGetFunc) History() []GlobalStateStoreGetFuncCall {
	f.mutex.Lock()
	history := make([]GlobalStateStoreGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GlobalStateStoreGetFuncCall is an object that describes an invocation of
// method Get on an instance of MockGlobalStateStore.
type GlobalStateStoreGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 GlobalState
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GlobalStateStoreGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GlobalStateStoreGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GlobalStateStoreSiteInitializedFunc describes the behavior when the
// SiteInitialized method of the parent MockGlobalStateStore instance is
// invoked.
type GlobalStateStoreSiteInitializedFunc struct {
	defaultHook func(context.Context) (bool, error)
	hooks       []func(context.Context) (bool, error)
	history     []GlobalStateStoreSiteInitializedFuncCall
	mutex       sync.Mutex
}

// SiteInitialized delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGlobalStateStore) SiteInitialized(v0 context.Context) (bool, error) {
	r0, r1 := m.SiteInitializedFunc.nextHook()(v0)
	m.SiteInitializedFunc.appendCall(GlobalStateStoreSiteInitializedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SiteInitialized
// method of the parent MockGlobalStateStore instance is invoked and the
// hook queue is empty.
func (f *GlobalStateStoreSiteInitializedFunc) SetDefaultHook(hook func(context.Context) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SiteInitialized method of the parent MockGlobalStateStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GlobalStateStoreSiteInitializedFunc) PushHook(hook func(context.Context) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GlobalStateStoreSiteInitializedFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GlobalStateStoreSiteInitializedFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context) (bool, error) {
		return r0, r1
	})
}

func (f *GlobalStateStoreSiteInitializedFunc) nextHook() func(context.Context) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GlobalStateStoreSiteInitializedFunc) appendCall(r0 GlobalStateStoreSiteInitializedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GlobalStateStoreSiteInitializedFuncCall
// objects describing the invocations of this function.
func (f *GlobalStateStoreSiteInitializedFunc) History() []GlobalStateStoreSiteInitializedFuncCall {
	f.mutex.Lock()
	history := make([]GlobalStateStoreSiteInitializedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GlobalStateStoreSiteInitializedFuncCall is an object that describes an
// invocation of method SiteInitialized on an instance of
// MockGlobalStateStore.
type GlobalStateStoreSiteInitializedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GlobalStateStoreSiteInitializedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GlobalStateStoreSiteInitializedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockNamespaceStore is a mock implementation of the NamespaceStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockNamespaceStore struct {
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *NamespaceStoreGetByIDFunc
	// GetByNameFunc is an instance of a mock function object controlling
	// the behavior of the method GetByName.
	GetByNameFunc *NamespaceStoreGetByNameFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *NamespaceStoreHandleFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *NamespaceStoreTransactFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *NamespaceStoreWithFunc
}

// NewMockNamespaceStore creates a new mock of the NamespaceStore interface.
// All methods return zero values for all results, unless overwritten.
func NewMockNamespaceStore() *MockNamespaceStore {
	return &MockNamespaceStore{
		GetByIDFunc: &NamespaceStoreGetByIDFunc{
			defaultHook: func(context.Context, int32, int32) (r0 *Namespace, r1 error) {
				return
			},
		},
		GetByNameFunc: &NamespaceStoreGetByNameFunc{
			defaultHook: func(context.Context, string) (r0 *Namespace, r1 error) {
				return
			},
		},
		HandleFunc: &NamespaceStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		TransactFunc: &NamespaceStoreTransactFunc{
			defaultHook: func(context.Context) (r0 NamespaceStore, r1 error) {
				return
			},
		},
		WithFunc: &NamespaceStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 NamespaceStore) {
				return
			},
		},
	}
}

// NewStrictMockNamespaceStore creates a new mock of the NamespaceStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockNamespaceStore() *MockNamespaceStore {
	return &MockNamespaceStore{
		GetByIDFunc: &NamespaceStoreGetByIDFunc{
			defaultHook: func(context.Context, int32, int32) (*Namespace, error) {
				panic("unexpected invocation of MockNamespaceStore.GetByID")
			},
		},
		GetByNameFunc: &NamespaceStoreGetByNameFunc{
			defaultHook: func(context.Context, string) (*Namespace, error) {
				panic("unexpected invocation of MockNamespaceStore.GetByName")
			},
		},
		HandleFunc: &NamespaceStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockNamespaceStore.Handle")
			},
		},
		TransactFunc: &NamespaceStoreTransactFunc{
			defaultHook: func(context.Context) (NamespaceStore, error) {
				panic("unexpected invocation of MockNamespaceStore.Transact")
			},
		},
		WithFunc: &NamespaceStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) NamespaceStore {
				panic("unexpected invocation of MockNamespaceStore.With")
			},
		},
	}
}

// NewMockNamespaceStoreFrom creates a new mock of the MockNamespaceStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockNamespaceStoreFrom(i NamespaceStore) *MockNamespaceStore {
	return &MockNamespaceStore{
		GetByIDFunc: &NamespaceStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		GetByNameFunc: &NamespaceStoreGetByNameFunc{
			defaultHook: i.GetByName,
		},
		HandleFunc: &NamespaceStoreHandleFunc{
			defaultHook: i.Handle,
		},
		TransactFunc: &NamespaceStoreTransactFunc{
			defaultHook: i.Transact,
		},
		WithFunc: &NamespaceStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// NamespaceStoreGetByIDFunc describes the behavior when the GetByID method
// of the parent MockNamespaceStore instance is invoked.
type NamespaceStoreGetByIDFunc struct {
	defaultHook func(context.Context, int32, int32) (*Namespace, error)
	hooks       []func(context.Context, int32, int32) (*Namespace, error)
	history     []NamespaceStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockNamespaceStore) GetByID(v0 context.Context, v1 int32, v2 int32) (*Namespace, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1, v2)
	m.GetByIDFunc.appendCall(NamespaceStoreGetByIDFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockNamespaceStore instance is invoked and the hook queue is
// empty.
func (f *NamespaceStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int32, int32) (*Namespace, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockNamespaceStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *NamespaceStoreGetByIDFunc) PushHook(hook func(context.Context, int32, int32) (*Namespace, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NamespaceStoreGetByIDFunc) SetDefaultReturn(r0 *Namespace, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, int32) (*Namespace, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NamespaceStoreGetByIDFunc) PushReturn(r0 *Namespace, r1 error) {
	f.PushHook(func(context.Context, int32, int32) (*Namespace, error) {
		return r0, r1
	})
}

func (f *NamespaceStoreGetByIDFunc) nextHook() func(context.Context, int32, int32) (*Namespace, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NamespaceStoreGetByIDFunc) appendCall(r0 NamespaceStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NamespaceStoreGetByIDFuncCall objects
// describing the invocations of this function.
func (f *NamespaceStoreGetByIDFunc) History() []NamespaceStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]NamespaceStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NamespaceStoreGetByIDFuncCall is an object that describes an invocation
// of method GetByID on an instance of MockNamespaceStore.
type NamespaceStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *Namespace
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NamespaceStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NamespaceStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// NamespaceStoreGetByNameFunc describes the behavior when the GetByName
// method of the parent MockNamespaceStore instance is invoked.
type NamespaceStoreGetByNameFunc struct {
	defaultHook func(context.Context, string) (*Namespace, error)
	hooks       []func(context.Context, string) (*Namespace, error)
	history     []NamespaceStoreGetByNameFuncCall
	mutex       sync.Mutex
}

// GetByName delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockNamespaceStore) GetByName(v0 context.Context, v1 string) (*Namespace, error) {
	r0, r1 := m.GetByNameFunc.nextHook()(v0, v1)
	m.GetByNameFunc.appendCall(NamespaceStoreGetByNameFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByName method of
// the parent MockNamespaceStore instance is invoked and the hook queue is
// empty.
func (f *NamespaceStoreGetByNameFunc) SetDefaultHook(hook func(context.Context, string) (*Namespace, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByName method of the parent MockNamespaceStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *NamespaceStoreGetByNameFunc) PushHook(hook func(context.Context, string) (*Namespace, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NamespaceStoreGetByNameFunc) SetDefaultReturn(r0 *Namespace, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*Namespace, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NamespaceStoreGetByNameFunc) PushReturn(r0 *Namespace, r1 error) {
	f.PushHook(func(context.Context, string) (*Namespace, error) {
		return r0, r1
	})
}

func (f *NamespaceStoreGetByNameFunc) nextHook() func(context.Context, string) (*Namespace, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NamespaceStoreGetByNameFunc) appendCall(r0 NamespaceStoreGetByNameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NamespaceStoreGetByNameFuncCall objects
// describing the invocations of this function.
func (f *NamespaceStoreGetByNameFunc) History() []NamespaceStoreGetByNameFuncCall {
	f.mutex.Lock()
	history := make([]NamespaceStoreGetByNameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NamespaceStoreGetByNameFuncCall is an object that describes an invocation
// of method GetByName on an instance of MockNamespaceStore.
type NamespaceStoreGetByNameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *Namespace
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NamespaceStoreGetByNameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NamespaceStoreGetByNameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// NamespaceStoreHandleFunc describes the behavior when the Handle method of
// the parent MockNamespaceStore instance is invoked.
type NamespaceStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []NamespaceStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockNamespaceStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(NamespaceStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockNamespaceStore instance is invoked and the hook queue is
// empty.
func (f *NamespaceStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockNamespaceStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *NamespaceStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NamespaceStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NamespaceStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *NamespaceStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NamespaceStoreHandleFunc) appendCall(r0 NamespaceStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NamespaceStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *NamespaceStoreHandleFunc) History() []NamespaceStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]NamespaceStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NamespaceStoreHandleFuncCall is an object that describes an invocation of
// method Handle on an instance of MockNamespaceStore.
type NamespaceStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NamespaceStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NamespaceStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// NamespaceStoreTransactFunc describes the behavior when the Transact
// method of the parent MockNamespaceStore instance is invoked.
type NamespaceStoreTransactFunc struct {
	defaultHook func(context.Context) (NamespaceStore, error)
	hooks       []func(context.Context) (NamespaceStore, error)
	history     []NamespaceStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockNamespaceStore) Transact(v0 context.Context) (NamespaceStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(NamespaceStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockNamespaceStore instance is invoked and the hook queue is
// empty.
func (f *NamespaceStoreTransactFunc) SetDefaultHook(hook func(context.Context) (NamespaceStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockNamespaceStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *NamespaceStoreTransactFunc) PushHook(hook func(context.Context) (NamespaceStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NamespaceStoreTransactFunc) SetDefaultReturn(r0 NamespaceStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (NamespaceStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NamespaceStoreTransactFunc) PushReturn(r0 NamespaceStore, r1 error) {
	f.PushHook(func(context.Context) (NamespaceStore, error) {
		return r0, r1
	})
}

func (f *NamespaceStoreTransactFunc) nextHook() func(context.Context) (NamespaceStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NamespaceStoreTransactFunc) appendCall(r0 NamespaceStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NamespaceStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *NamespaceStoreTransactFunc) History() []NamespaceStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]NamespaceStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NamespaceStoreTransactFuncCall is an object that describes an invocation
// of method Transact on an instance of MockNamespaceStore.
type NamespaceStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 NamespaceStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NamespaceStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NamespaceStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// NamespaceStoreWithFunc describes the behavior when the With method of the
// parent MockNamespaceStore instance is invoked.
type NamespaceStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) NamespaceStore
	hooks       []func(basestore.ShareableStore) NamespaceStore
	history     []NamespaceStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockNamespaceStore) With(v0 basestore.ShareableStore) NamespaceStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(NamespaceStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockNamespaceStore instance is invoked and the hook queue is
// empty.
func (f *NamespaceStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) NamespaceStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockNamespaceStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *NamespaceStoreWithFunc) PushHook(hook func(basestore.ShareableStore) NamespaceStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NamespaceStoreWithFunc) SetDefaultReturn(r0 NamespaceStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) NamespaceStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NamespaceStoreWithFunc) PushReturn(r0 NamespaceStore) {
	f.PushHook(func(basestore.ShareableStore) NamespaceStore {
		return r0
	})
}

func (f *NamespaceStoreWithFunc) nextHook() func(basestore.ShareableStore) NamespaceStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NamespaceStoreWithFunc) appendCall(r0 NamespaceStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NamespaceStoreWithFuncCall objects
// describing the invocations of this function.
func (f *NamespaceStoreWithFunc) History() []NamespaceStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]NamespaceStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NamespaceStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockNamespaceStore.
type NamespaceStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 NamespaceStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NamespaceStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NamespaceStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockOrgInvitationStore is a mock implementation of the OrgInvitationStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockOrgInvitationStore struct {
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *OrgInvitationStoreCountFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *OrgInvitationStoreCreateFunc
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *OrgInvitationStoreGetByIDFunc
	// GetPendingFunc is an instance of a mock function object controlling
	// the behavior of the method GetPending.
	GetPendingFunc *OrgInvitationStoreGetPendingFunc
	// GetPendingByIDFunc is an instance of a mock function object
	// controlling the behavior of the method GetPendingByID.
	GetPendingByIDFunc *OrgInvitationStoreGetPendingByIDFunc
	// GetPendingByOrgIDFunc is an instance of a mock function object
	// controlling the behavior of the method GetPendingByOrgID.
	GetPendingByOrgIDFunc *OrgInvitationStoreGetPendingByOrgIDFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *OrgInvitationStoreHandleFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *OrgInvitationStoreListFunc
	// RespondFunc is an instance of a mock function object controlling the
	// behavior of the method Respond.
	RespondFunc *OrgInvitationStoreRespondFunc
	// RevokeFunc is an instance of a mock function object controlling the
	// behavior of the method Revoke.
	RevokeFunc *OrgInvitationStoreRevokeFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *OrgInvitationStoreTransactFunc
	// UpdateEmailSentTimestampFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateEmailSentTimestamp.
	UpdateEmailSentTimestampFunc *OrgInvitationStoreUpdateEmailSentTimestampFunc
	// UpdateExpiryTimeFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateExpiryTime.
	UpdateExpiryTimeFunc *OrgInvitationStoreUpdateExpiryTimeFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *OrgInvitationStoreWithFunc
}

// NewMockOrgInvitationStore creates a new mock of the OrgInvitationStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockOrgInvitationStore() *MockOrgInvitationStore {
	return &MockOrgInvitationStore{
		CountFunc: &OrgInvitationStoreCountFunc{
			defaultHook: func(context.Context, OrgInvitationsListOptions) (r0 int, r1 error) {
				return
			},
		},
		CreateFunc: &OrgInvitationStoreCreateFunc{
			defaultHook: func(context.Context, int32, int32, int32, string, time.Time) (r0 *OrgInvitation, r1 error) {
				return
			},
		},
		GetByIDFunc: &OrgInvitationStoreGetByIDFunc{
			defaultHook: func(context.Context, int64) (r0 *OrgInvitation, r1 error) {
				return
			},
		},
		GetPendingFunc: &OrgInvitationStoreGetPendingFunc{
			defaultHook: func(context.Context, int32, int32) (r0 *OrgInvitation, r1 error) {
				return
			},
		},
		GetPendingByIDFunc: &OrgInvitationStoreGetPendingByIDFunc{
			defaultHook: func(context.Context, int64) (r0 *OrgInvitation, r1 error) {
				return
			},
		},
		GetPendingByOrgIDFunc: &OrgInvitationStoreGetPendingByOrgIDFunc{
			defaultHook: func(context.Context, int32) (r0 []*OrgInvitation, r1 error) {
				return
			},
		},
		HandleFunc: &OrgInvitationStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		ListFunc: &OrgInvitationStoreListFunc{
			defaultHook: func(context.Context, OrgInvitationsListOptions) (r0 []*OrgInvitation, r1 error) {
				return
			},
		},
		RespondFunc: &OrgInvitationStoreRespondFunc{
			defaultHook: func(context.Context, int64, int32, bool) (r0 int32, r1 error) {
				return
			},
		},
		RevokeFunc: &OrgInvitationStoreRevokeFunc{
			defaultHook: func(context.Context, int64) (r0 error) {
				return
			},
		},
		TransactFunc: &OrgInvitationStoreTransactFunc{
			defaultHook: func(context.Context) (r0 OrgInvitationStore, r1 error) {
				return
			},
		},
		UpdateEmailSentTimestampFunc: &OrgInvitationStoreUpdateEmailSentTimestampFunc{
			defaultHook: func(context.Context, int64) (r0 error) {
				return
			},
		},
		UpdateExpiryTimeFunc: &OrgInvitationStoreUpdateExpiryTimeFunc{
			defaultHook: func(context.Context, int64, time.Time) (r0 error) {
				return
			},
		},
		WithFunc: &OrgInvitationStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 OrgInvitationStore) {
				return
			},
		},
	}
}

// NewStrictMockOrgInvitationStore creates a new mock of the
// OrgInvitationStore interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockOrgInvitationStore() *MockOrgInvitationStore {
	return &MockOrgInvitationStore{
		CountFunc: &OrgInvitationStoreCountFunc{
			defaultHook: func(context.Context, OrgInvitationsListOptions) (int, error) {
				panic("unexpected invocation of MockOrgInvitationStore.Count")
			},
		},
		CreateFunc: &OrgInvitationStoreCreateFunc{
			defaultHook: func(context.Context, int32, int32, int32, string, time.Time) (*OrgInvitation, error) {
				panic("unexpected invocation of MockOrgInvitationStore.Create")
			},
		},
		GetByIDFunc: &OrgInvitationStoreGetByIDFunc{
			defaultHook: func(context.Context, int64) (*OrgInvitation, error) {
				panic("unexpected invocation of MockOrgInvitationStore.GetByID")
			},
		},
		GetPendingFunc: &OrgInvitationStoreGetPendingFunc{
			defaultHook: func(context.Context, int32, int32) (*OrgInvitation, error) {
				panic("unexpected invocation of MockOrgInvitationStore.GetPending")
			},
		},
		GetPendingByIDFunc: &OrgInvitationStoreGetPendingByIDFunc{
			defaultHook: func(context.Context, int64) (*OrgInvitation, error) {
				panic("unexpected invocation of MockOrgInvitationStore.GetPendingByID")
			},
		},
		GetPendingByOrgIDFunc: &OrgInvitationStoreGetPendingByOrgIDFunc{
			defaultHook: func(context.Context, int32) ([]*OrgInvitation, error) {
				panic("unexpected invocation of MockOrgInvitationStore.GetPendingByOrgID")
			},
		},
		HandleFunc: &OrgInvitationStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockOrgInvitationStore.Handle")
			},
		},
		ListFunc: &OrgInvitationStoreListFunc{
			defaultHook: func(context.Context, OrgInvitationsListOptions) ([]*OrgInvitation, error) {
				panic("unexpected invocation of MockOrgInvitationStore.List")
			},
		},
		RespondFunc: &OrgInvitationStoreRespondFunc{
			defaultHook: func(context.Context, int64, int32, bool) (int32, error) {
				panic("unexpected invocation of MockOrgInvitationStore.Respond")
			},
		},
		RevokeFunc: &OrgInvitationStoreRevokeFunc{
			defaultHook: func(context.Context, int64) error {
				panic("unexpected invocation of MockOrgInvitationStore.Revoke")
			},
		},
		TransactFunc: &OrgInvitationStoreTransactFunc{
			defaultHook: func(context.Context) (OrgInvitationStore, error) {
				panic("unexpected invocation of MockOrgInvitationStore.Transact")
			},
		},
		UpdateEmailSentTimestampFunc: &OrgInvitationStoreUpdateEmailSentTimestampFunc{
			defaultHook: func(context.Context, int64) error {
				panic("unexpected invocation of MockOrgInvitationStore.UpdateEmailSentTimestamp")
			},
		},
		UpdateExpiryTimeFunc: &OrgInvitationStoreUpdateExpiryTimeFunc{
			defaultHook: func(context.Context, int64, time.Time) error {
				panic("unexpected invocation of MockOrgInvitationStore.UpdateExpiryTime")
			},
		},
		WithFunc: &OrgInvitationStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) OrgInvitationStore {
				panic("unexpected invocation of MockOrgInvitationStore.With")
			},
		},
	}
}

// NewMockOrgInvitationStoreFrom creates a new mock of the
// MockOrgInvitationStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockOrgInvitationStoreFrom(i OrgInvitationStore) *MockOrgInvitationStore {
	return &MockOrgInvitationStore{
		CountFunc: &OrgInvitationStoreCountFunc{
			defaultHook: i.Count,
		},
		CreateFunc: &OrgInvitationStoreCreateFunc{
			defaultHook: i.Create,
		},
		GetByIDFunc: &OrgInvitationStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		GetPendingFunc: &OrgInvitationStoreGetPendingFunc{
			defaultHook: i.GetPending,
		},
		GetPendingByIDFunc: &OrgInvitationStoreGetPendingByIDFunc{
			defaultHook: i.GetPendingByID,
		},
		GetPendingByOrgIDFunc: &OrgInvitationStoreGetPendingByOrgIDFunc{
			defaultHook: i.GetPendingByOrgID,
		},
		HandleFunc: &OrgInvitationStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListFunc: &OrgInvitationStoreListFunc{
			defaultHook: i.List,
		},
		RespondFunc: &OrgInvitationStoreRespondFunc{
			defaultHook: i.Respond,
		},
		RevokeFunc: &OrgInvitationStoreRevokeFunc{
			defaultHook: i.Revoke,
		},
		TransactFunc: &OrgInvitationStoreTransactFunc{
			defaultHook: i.Transact,
		},
		UpdateEmailSentTimestampFunc: &OrgInvitationStoreUpdateEmailSentTimestampFunc{
			defaultHook: i.UpdateEmailSentTimestamp,
		},
		UpdateExpiryTimeFunc: &OrgInvitationStoreUpdateExpiryTimeFunc{
			defaultHook: i.UpdateExpiryTime,
		},
		WithFunc: &OrgInvitationStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// OrgInvitationStoreCountFunc describes the behavior when the Count method
// of the parent MockOrgInvitationStore instance is invoked.
type OrgInvitationStoreCountFunc struct {
	defaultHook func(context.Context, OrgInvitationsListOptions) (int, error)
	hooks       []func(context.Context, OrgInvitationsListOptions) (int, error)
	history     []OrgInvitationStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgInvitationStore) Count(v0 context.Context, v1 OrgInvitationsListOptions) (int, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(OrgInvitationStoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockOrgInvitationStore instance is invoked and the hook queue is
// empty.
func (f *OrgInvitationStoreCountFunc) SetDefaultHook(hook func(context.Context, OrgInvitationsListOptions) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockOrgInvitationStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgInvitationStoreCountFunc) PushHook(hook func(context.Context, OrgInvitationsListOptions) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgInvitationStoreCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, OrgInvitationsListOptions) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgInvitationStoreCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, OrgInvitationsListOptions) (int, error) {
		return r0, r1
	})
}

func (f *OrgInvitationStoreCountFunc) nextHook() func(context.Context, OrgInvitationsListOptions) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreCountFunc) appendCall(r0 OrgInvitationStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgInvitationStoreCountFuncCall objects
// describing the invocations of this function.
func (f *OrgInvitationStoreCountFunc) History() []OrgInvitationStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreCountFuncCall is an object that describes an invocation
// of method Count on an instance of MockOrgInvitationStore.
type OrgInvitationStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 OrgInvitationsListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgInvitationStoreCreateFunc describes the behavior when the Create
// method of the parent MockOrgInvitationStore instance is invoked.
type OrgInvitationStoreCreateFunc struct {
	defaultHook func(context.Context, int32, int32, int32, string, time.Time) (*OrgInvitation, error)
	hooks       []func(context.Context, int32, int32, int32, string, time.Time) (*OrgInvitation, error)
	history     []OrgInvitationStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgInvitationStore) Create(v0 context.Context, v1 int32, v2 int32, v3 int32, v4 string, v5 time.Time) (*OrgInvitation, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1, v2, v3, v4, v5)
	m.CreateFunc.appendCall(OrgInvitationStoreCreateFuncCall{v0, v1, v2, v3, v4, v5, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockOrgInvitationStore instance is invoked and the hook queue is
// empty.
func (f *OrgInvitationStoreCreateFunc) SetDefaultHook(hook func(context.Context, int32, int32, int32, string, time.Time) (*OrgInvitation, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockOrgInvitationStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgInvitationStoreCreateFunc) PushHook(hook func(context.Context, int32, int32, int32, string, time.Time) (*OrgInvitation, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgInvitationStoreCreateFunc) SetDefaultReturn(r0 *OrgInvitation, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, int32, int32, string, time.Time) (*OrgInvitation, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgInvitationStoreCreateFunc) PushReturn(r0 *OrgInvitation, r1 error) {
	f.PushHook(func(context.Context, int32, int32, int32, string, time.Time) (*OrgInvitation, error) {
		return r0, r1
	})
}

func (f *OrgInvitationStoreCreateFunc) nextHook() func(context.Context, int32, int32, int32, string, time.Time) (*OrgInvitation, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreCreateFunc) appendCall(r0 OrgInvitationStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgInvitationStoreCreateFuncCall objects
// describing the invocations of this function.
func (f *OrgInvitationStoreCreateFunc) History() []OrgInvitationStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreCreateFuncCall is an object that describes an
// invocation of method Create on an instance of MockOrgInvitationStore.
type OrgInvitationStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int32
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int32
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 string
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *OrgInvitation
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgInvitationStoreGetByIDFunc describes the behavior when the GetByID
// method of the parent MockOrgInvitationStore instance is invoked.
type OrgInvitationStoreGetByIDFunc struct {
	defaultHook func(context.Context, int64) (*OrgInvitation, error)
	hooks       []func(context.Context, int64) (*OrgInvitation, error)
	history     []OrgInvitationStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgInvitationStore) GetByID(v0 context.Context, v1 int64) (*OrgInvitation, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(OrgInvitationStoreGetByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockOrgInvitationStore instance is invoked and the hook queue
// is empty.
func (f *OrgInvitationStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int64) (*OrgInvitation, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockOrgInvitationStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgInvitationStoreGetByIDFunc) PushHook(hook func(context.Context, int64) (*OrgInvitation, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgInvitationStoreGetByIDFunc) SetDefaultReturn(r0 *OrgInvitation, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (*OrgInvitation, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgInvitationStoreGetByIDFunc) PushReturn(r0 *OrgInvitation, r1 error) {
	f.PushHook(func(context.Context, int64) (*OrgInvitation, error) {
		return r0, r1
	})
}

func (f *OrgInvitationStoreGetByIDFunc) nextHook() func(context.Context, int64) (*OrgInvitation, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreGetByIDFunc) appendCall(r0 OrgInvitationStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgInvitationStoreGetByIDFuncCall objects
// describing the invocations of this function.
func (f *OrgInvitationStoreGetByIDFunc) History() []OrgInvitationStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreGetByIDFuncCall is an object that describes an
// invocation of method GetByID on an instance of MockOrgInvitationStore.
type OrgInvitationStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *OrgInvitation
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgInvitationStoreGetPendingFunc describes the behavior when the
// GetPending method of the parent MockOrgInvitationStore instance is
// invoked.
type OrgInvitationStoreGetPendingFunc struct {
	defaultHook func(context.Context, int32, int32) (*OrgInvitation, error)
	hooks       []func(context.Context, int32, int32) (*OrgInvitation, error)
	history     []OrgInvitationStoreGetPendingFuncCall
	mutex       sync.Mutex
}

// GetPending delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockOrgInvitationStore) GetPending(v0 context.Context, v1 int32, v2 int32) (*OrgInvitation, error) {
	r0, r1 := m.GetPendingFunc.nextHook()(v0, v1, v2)
	m.GetPendingFunc.appendCall(OrgInvitationStoreGetPendingFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetPending method of
// the parent MockOrgInvitationStore instance is invoked and the hook queue
// is empty.
func (f *OrgInvitationStoreGetPendingFunc) SetDefaultHook(hook func(context.Context, int32, int32) (*OrgInvitation, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPending method of the parent MockOrgInvitationStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *OrgInvitationStoreGetPendingFunc) PushHook(hook func(context.Context, int32, int32) (*OrgInvitation, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgInvitationStoreGetPendingFunc) SetDefaultReturn(r0 *OrgInvitation, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, int32) (*OrgInvitation, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgInvitationStoreGetPendingFunc) PushReturn(r0 *OrgInvitation, r1 error) {
	f.PushHook(func(context.Context, int32, int32) (*OrgInvitation, error) {
		return r0, r1
	})
}

func (f *OrgInvitationStoreGetPendingFunc) nextHook() func(context.Context, int32, int32) (*OrgInvitation, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreGetPendingFunc) appendCall(r0 OrgInvitationStoreGetPendingFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgInvitationStoreGetPendingFuncCall
// objects describing the invocations of this function.
func (f *OrgInvitationStoreGetPendingFunc) History() []OrgInvitationStoreGetPendingFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreGetPendingFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreGetPendingFuncCall is an object that describes an
// invocation of method GetPending on an instance of MockOrgInvitationStore.
type OrgInvitationStoreGetPendingFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *OrgInvitation
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreGetPendingFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreGetPendingFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgInvitationStoreGetPendingByIDFunc describes the behavior when the
// GetPendingByID method of the parent MockOrgInvitationStore instance is
// invoked.
type OrgInvitationStoreGetPendingByIDFunc struct {
	defaultHook func(context.Context, int64) (*OrgInvitation, error)
	hooks       []func(context.Context, int64) (*OrgInvitation, error)
	history     []OrgInvitationStoreGetPendingByIDFuncCall
	mutex       sync.Mutex
}

// GetPendingByID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockOrgInvitationStore) GetPendingByID(v0 context.Context, v1 int64) (*OrgInvitation, error) {
	r0, r1 := m.GetPendingByIDFunc.nextHook()(v0, v1)
	m.GetPendingByIDFunc.appendCall(OrgInvitationStoreGetPendingByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetPendingByID
// method of the parent MockOrgInvitationStore instance is invoked and the
// hook queue is empty.
func (f *OrgInvitationStoreGetPendingByIDFunc) SetDefaultHook(hook func(context.Context, int64) (*OrgInvitation, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPendingByID method of the parent MockOrgInvitationStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *OrgInvitationStoreGetPendingByIDFunc) PushHook(hook func(context.Context, int64) (*OrgInvitation, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgInvitationStoreGetPendingByIDFunc) SetDefaultReturn(r0 *OrgInvitation, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (*OrgInvitation, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgInvitationStoreGetPendingByIDFunc) PushReturn(r0 *OrgInvitation, r1 error) {
	f.PushHook(func(context.Context, int64) (*OrgInvitation, error) {
		return r0, r1
	})
}

func (f *OrgInvitationStoreGetPendingByIDFunc) nextHook() func(context.Context, int64) (*OrgInvitation, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreGetPendingByIDFunc) appendCall(r0 OrgInvitationStoreGetPendingByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgInvitationStoreGetPendingByIDFuncCall
// objects describing the invocations of this function.
func (f *OrgInvitationStoreGetPendingByIDFunc) History() []OrgInvitationStoreGetPendingByIDFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreGetPendingByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreGetPendingByIDFuncCall is an object that describes an
// invocation of method GetPendingByID on an instance of
// MockOrgInvitationStore.
type OrgInvitationStoreGetPendingByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *OrgInvitation
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreGetPendingByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreGetPendingByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgInvitationStoreGetPendingByOrgIDFunc describes the behavior when the
// GetPendingByOrgID method of the parent MockOrgInvitationStore instance is
// invoked.
type OrgInvitationStoreGetPendingByOrgIDFunc struct {
	defaultHook func(context.Context, int32) ([]*OrgInvitation, error)
	hooks       []func(context.Context, int32) ([]*OrgInvitation, error)
	history     []OrgInvitationStoreGetPendingByOrgIDFuncCall
	mutex       sync.Mutex
}

// GetPendingByOrgID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockOrgInvitationStore) GetPendingByOrgID(v0 context.Context, v1 int32) ([]*OrgInvitation, error) {
	r0, r1 := m.GetPendingByOrgIDFunc.nextHook()(v0, v1)
	m.GetPendingByOrgIDFunc.appendCall(OrgInvitationStoreGetPendingByOrgIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetPendingByOrgID
// method of the parent MockOrgInvitationStore instance is invoked and the
// hook queue is empty.
func (f *OrgInvitationStoreGetPendingByOrgIDFunc) SetDefaultHook(hook func(context.Context, int32) ([]*OrgInvitation, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPendingByOrgID method of the parent MockOrgInvitationStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *OrgInvitationStoreGetPendingByOrgIDFunc) PushHook(hook func(context.Context, int32) ([]*OrgInvitation, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgInvitationStoreGetPendingByOrgIDFunc) SetDefaultReturn(r0 []*OrgInvitation, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) ([]*OrgInvitation, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgInvitationStoreGetPendingByOrgIDFunc) PushReturn(r0 []*OrgInvitation, r1 error) {
	f.PushHook(func(context.Context, int32) ([]*OrgInvitation, error) {
		return r0, r1
	})
}

func (f *OrgInvitationStoreGetPendingByOrgIDFunc) nextHook() func(context.Context, int32) ([]*OrgInvitation, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreGetPendingByOrgIDFunc) appendCall(r0 OrgInvitationStoreGetPendingByOrgIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgInvitationStoreGetPendingByOrgIDFuncCall
// objects describing the invocations of this function.
func (f *OrgInvitationStoreGetPendingByOrgIDFunc) History() []OrgInvitationStoreGetPendingByOrgIDFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreGetPendingByOrgIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreGetPendingByOrgIDFuncCall is an object that describes
// an invocation of method GetPendingByOrgID on an instance of
// MockOrgInvitationStore.
type OrgInvitationStoreGetPendingByOrgIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*OrgInvitation
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreGetPendingByOrgIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreGetPendingByOrgIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgInvitationStoreHandleFunc describes the behavior when the Handle
// method of the parent MockOrgInvitationStore instance is invoked.
type OrgInvitationStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []OrgInvitationStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgInvitationStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(OrgInvitationStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockOrgInvitationStore instance is invoked and the hook queue is
// empty.
func (f *OrgInvitationStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockOrgInvitationStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgInvitationStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgInvitationStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgInvitationStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *OrgInvitationStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreHandleFunc) appendCall(r0 OrgInvitationStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgInvitationStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *OrgInvitationStoreHandleFunc) History() []OrgInvitationStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of MockOrgInvitationStore.
type OrgInvitationStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OrgInvitationStoreListFunc describes the behavior when the List method of
// the parent MockOrgInvitationStore instance is invoked.
type OrgInvitationStoreListFunc struct {
	defaultHook func(context.Context, OrgInvitationsListOptions) ([]*OrgInvitation, error)
	hooks       []func(context.Context, OrgInvitationsListOptions) ([]*OrgInvitation, error)
	history     []OrgInvitationStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgInvitationStore) List(v0 context.Context, v1 OrgInvitationsListOptions) ([]*OrgInvitation, error) {
	r0, r1 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(OrgInvitationStoreListFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockOrgInvitationStore instance is invoked and the hook queue is
// empty.
func (f *OrgInvitationStoreListFunc) SetDefaultHook(hook func(context.Context, OrgInvitationsListOptions) ([]*OrgInvitation, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockOrgInvitationStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgInvitationStoreListFunc) PushHook(hook func(context.Context, OrgInvitationsListOptions) ([]*OrgInvitation, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgInvitationStoreListFunc) SetDefaultReturn(r0 []*OrgInvitation, r1 error) {
	f.SetDefaultHook(func(context.Context, OrgInvitationsListOptions) ([]*OrgInvitation, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgInvitationStoreListFunc) PushReturn(r0 []*OrgInvitation, r1 error) {
	f.PushHook(func(context.Context, OrgInvitationsListOptions) ([]*OrgInvitation, error) {
		return r0, r1
	})
}

func (f *OrgInvitationStoreListFunc) nextHook() func(context.Context, OrgInvitationsListOptions) ([]*OrgInvitation, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreListFunc) appendCall(r0 OrgInvitationStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgInvitationStoreListFuncCall objects
// describing the invocations of this function.
func (f *OrgInvitationStoreListFunc) History() []OrgInvitationStoreListFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreListFuncCall is an object that describes an invocation
// of method List on an instance of MockOrgInvitationStore.
type OrgInvitationStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 OrgInvitationsListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*OrgInvitation
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgInvitationStoreRespondFunc describes the behavior when the Respond
// method of the parent MockOrgInvitationStore instance is invoked.
type OrgInvitationStoreRespondFunc struct {
	defaultHook func(context.Context, int64, int32, bool) (int32, error)
	hooks       []func(context.Context, int64, int32, bool) (int32, error)
	history     []OrgInvitationStoreRespondFuncCall
	mutex       sync.Mutex
}

// Respond delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgInvitationStore) Respond(v0 context.Context, v1 int64, v2 int32, v3 bool) (int32, error) {
	r0, r1 := m.RespondFunc.nextHook()(v0, v1, v2, v3)
	m.RespondFunc.appendCall(OrgInvitationStoreRespondFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Respond method of
// the parent MockOrgInvitationStore instance is invoked and the hook queue
// is empty.
func (f *OrgInvitationStoreRespondFunc) SetDefaultHook(hook func(context.Context, int64, int32, bool) (int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Respond method of the parent MockOrgInvitationStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgInvitationStoreRespondFunc) PushHook(hook func(context.Context, int64, int32, bool) (int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgInvitationStoreRespondFunc) SetDefaultReturn(r0 int32, r1 error) {
	f.SetDefaultHook(func(context.Context, int64, int32, bool) (int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgInvitationStoreRespondFunc) PushReturn(r0 int32, r1 error) {
	f.PushHook(func(context.Context, int64, int32, bool) (int32, error) {
		return r0, r1
	})
}

func (f *OrgInvitationStoreRespondFunc) nextHook() func(context.Context, int64, int32, bool) (int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreRespondFunc) appendCall(r0 OrgInvitationStoreRespondFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgInvitationStoreRespondFuncCall objects
// describing the invocations of this function.
func (f *OrgInvitationStoreRespondFunc) History() []OrgInvitationStoreRespondFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreRespondFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreRespondFuncCall is an object that describes an
// invocation of method Respond on an instance of MockOrgInvitationStore.
type OrgInvitationStoreRespondFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int32
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreRespondFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreRespondFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgInvitationStoreRevokeFunc describes the behavior when the Revoke
// method of the parent MockOrgInvitationStore instance is invoked.
type OrgInvitationStoreRevokeFunc struct {
	defaultHook func(context.Context, int64) error
	hooks       []func(context.Context, int64) error
	history     []OrgInvitationStoreRevokeFuncCall
	mutex       sync.Mutex
}

// Revoke delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgInvitationStore) Revoke(v0 context.Context, v1 int64) error {
	r0 := m.RevokeFunc.nextHook()(v0, v1)
	m.RevokeFunc.appendCall(OrgInvitationStoreRevokeFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Revoke method of the
// parent MockOrgInvitationStore instance is invoked and the hook queue is
// empty.
func (f *OrgInvitationStoreRevokeFunc) SetDefaultHook(hook func(context.Context, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Revoke method of the parent MockOrgInvitationStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgInvitationStoreRevokeFunc) PushHook(hook func(context.Context, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgInvitationStoreRevokeFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgInvitationStoreRevokeFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64) error {
		return r0
	})
}

func (f *OrgInvitationStoreRevokeFunc) nextHook() func(context.Context, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreRevokeFunc) appendCall(r0 OrgInvitationStoreRevokeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgInvitationStoreRevokeFuncCall objects
// describing the invocations of this function.
func (f *OrgInvitationStoreRevokeFunc) History() []OrgInvitationStoreRevokeFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreRevokeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreRevokeFuncCall is an object that describes an
// invocation of method Revoke on an instance of MockOrgInvitationStore.
type OrgInvitationStoreRevokeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreRevokeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreRevokeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OrgInvitationStoreTransactFunc describes the behavior when the Transact
// method of the parent MockOrgInvitationStore instance is invoked.
type OrgInvitationStoreTransactFunc struct {
	defaultHook func(context.Context) (OrgInvitationStore, error)
	hooks       []func(context.Context) (OrgInvitationStore, error)
	history     []OrgInvitationStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgInvitationStore) Transact(v0 context.Context) (OrgInvitationStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(OrgInvitationStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockOrgInvitationStore instance is invoked and the hook queue
// is empty.
func (f *OrgInvitationStoreTransactFunc) SetDefaultHook(hook func(context.Context) (OrgInvitationStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockOrgInvitationStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgInvitationStoreTransactFunc) PushHook(hook func(context.Context) (OrgInvitationStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgInvitationStoreTransactFunc) SetDefaultReturn(r0 OrgInvitationStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (OrgInvitationStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgInvitationStoreTransactFunc) PushReturn(r0 OrgInvitationStore, r1 error) {
	f.PushHook(func(context.Context) (OrgInvitationStore, error) {
		return r0, r1
	})
}

func (f *OrgInvitationStoreTransactFunc) nextHook() func(context.Context) (OrgInvitationStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreTransactFunc) appendCall(r0 OrgInvitationStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgInvitationStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *OrgInvitationStoreTransactFunc) History() []OrgInvitationStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreTransactFuncCall is an object that describes an
// invocation of method Transact on an instance of MockOrgInvitationStore.
type OrgInvitationStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 OrgInvitationStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgInvitationStoreUpdateEmailSentTimestampFunc describes the behavior
// when the UpdateEmailSentTimestamp method of the parent
// MockOrgInvitationStore instance is invoked.
type OrgInvitationStoreUpdateEmailSentTimestampFunc struct {
	defaultHook func(context.Context, int64) error
	hooks       []func(context.Context, int64) error
	history     []OrgInvitationStoreUpdateEmailSentTimestampFuncCall
	mutex       sync.Mutex
}

// UpdateEmailSentTimestamp delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockOrgInvitationStore) UpdateEmailSentTimestamp(v0 context.Context, v1 int64) error {
	r0 := m.UpdateEmailSentTimestampFunc.nextHook()(v0, v1)
	m.UpdateEmailSentTimestampFunc.appendCall(OrgInvitationStoreUpdateEmailSentTimestampFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// UpdateEmailSentTimestamp method of the parent MockOrgInvitationStore
// instance is invoked and the hook queue is empty.
func (f *OrgInvitationStoreUpdateEmailSentTimestampFunc) SetDefaultHook(hook func(context.Context, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateEmailSentTimestamp method of the parent MockOrgInvitationStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *OrgInvitationStoreUpdateEmailSentTimestampFunc) PushHook(hook func(context.Context, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgInvitationStoreUpdateEmailSentTimestampFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgInvitationStoreUpdateEmailSentTimestampFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64) error {
		return r0
	})
}

func (f *OrgInvitationStoreUpdateEmailSentTimestampFunc) nextHook() func(context.Context, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreUpdateEmailSentTimestampFunc) appendCall(r0 OrgInvitationStoreUpdateEmailSentTimestampFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// OrgInvitationStoreUpdateEmailSentTimestampFuncCall objects describing the
// invocations of this function.
func (f *OrgInvitationStoreUpdateEmailSentTimestampFunc) History() []OrgInvitationStoreUpdateEmailSentTimestampFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreUpdateEmailSentTimestampFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreUpdateEmailSentTimestampFuncCall is an object that
// describes an invocation of method UpdateEmailSentTimestamp on an instance
// of MockOrgInvitationStore.
type OrgInvitationStoreUpdateEmailSentTimestampFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreUpdateEmailSentTimestampFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreUpdateEmailSentTimestampFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OrgInvitationStoreUpdateExpiryTimeFunc describes the behavior when the
// UpdateExpiryTime method of the parent MockOrgInvitationStore instance is
// invoked.
type OrgInvitationStoreUpdateExpiryTimeFunc struct {
	defaultHook func(context.Context, int64, time.Time) error
	hooks       []func(context.Context, int64, time.Time) error
	history     []OrgInvitationStoreUpdateExpiryTimeFuncCall
	mutex       sync.Mutex
}

// UpdateExpiryTime delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockOrgInvitationStore) UpdateExpiryTime(v0 context.Context, v1 int64, v2 time.Time) error {
	r0 := m.UpdateExpiryTimeFunc.nextHook()(v0, v1, v2)
	m.UpdateExpiryTimeFunc.appendCall(OrgInvitationStoreUpdateExpiryTimeFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UpdateExpiryTime
// method of the parent MockOrgInvitationStore instance is invoked and the
// hook queue is empty.
func (f *OrgInvitationStoreUpdateExpiryTimeFunc) SetDefaultHook(hook func(context.Context, int64, time.Time) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateExpiryTime method of the parent MockOrgInvitationStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *OrgInvitationStoreUpdateExpiryTimeFunc) PushHook(hook func(context.Context, int64, time.Time) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgInvitationStoreUpdateExpiryTimeFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64, time.Time) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgInvitationStoreUpdateExpiryTimeFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64, time.Time) error {
		return r0
	})
}

func (f *OrgInvitationStoreUpdateExpiryTimeFunc) nextHook() func(context.Context, int64, time.Time) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreUpdateExpiryTimeFunc) appendCall(r0 OrgInvitationStoreUpdateExpiryTimeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgInvitationStoreUpdateExpiryTimeFuncCall
// objects describing the invocations of this function.
func (f *OrgInvitationStoreUpdateExpiryTimeFunc) History() []OrgInvitationStoreUpdateExpiryTimeFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreUpdateExpiryTimeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreUpdateExpiryTimeFuncCall is an object that describes an
// invocation of method UpdateExpiryTime on an instance of
// MockOrgInvitationStore.
type OrgInvitationStoreUpdateExpiryTimeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreUpdateExpiryTimeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreUpdateExpiryTimeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OrgInvitationStoreWithFunc describes the behavior when the With method of
// the parent MockOrgInvitationStore instance is invoked.
type OrgInvitationStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) OrgInvitationStore
	hooks       []func(basestore.ShareableStore) OrgInvitationStore
	history     []OrgInvitationStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgInvitationStore) With(v0 basestore.ShareableStore) OrgInvitationStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(OrgInvitationStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockOrgInvitationStore instance is invoked and the hook queue is
// empty.
func (f *OrgInvitationStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) OrgInvitationStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockOrgInvitationStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgInvitationStoreWithFunc) PushHook(hook func(basestore.ShareableStore) OrgInvitationStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgInvitationStoreWithFunc) SetDefaultReturn(r0 OrgInvitationStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) OrgInvitationStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgInvitationStoreWithFunc) PushReturn(r0 OrgInvitationStore) {
	f.PushHook(func(basestore.ShareableStore) OrgInvitationStore {
		return r0
	})
}

func (f *OrgInvitationStoreWithFunc) nextHook() func(basestore.ShareableStore) OrgInvitationStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreWithFunc) appendCall(r0 OrgInvitationStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgInvitationStoreWithFuncCall objects
// describing the invocations of this function.
func (f *OrgInvitationStoreWithFunc) History() []OrgInvitationStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreWithFuncCall is an object that describes an invocation
// of method With on an instance of MockOrgInvitationStore.
type OrgInvitationStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 OrgInvitationStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockOrgMemberStore is a mock implementation of the OrgMemberStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockOrgMemberStore struct {
	// AutocompleteMembersSearchFunc is an instance of a mock function
	// object controlling the behavior of the method
	// AutocompleteMembersSearch.
	AutocompleteMembersSearchFunc *OrgMemberStoreAutocompleteMembersSearchFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *OrgMemberStoreCreateFunc
	// CreateMembershipInOrgsForAllUsersFunc is an instance of a mock
	// function object controlling the behavior of the method
	// CreateMembershipInOrgsForAllUsers.
	CreateMembershipInOrgsForAllUsersFunc *OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc
	// GetByOrgIDFunc is an instance of a mock function object controlling
	// the behavior of the method GetByOrgID.
	GetByOrgIDFunc *OrgMemberStoreGetByOrgIDFunc
	// GetByOrgIDAndUserIDFunc is an instance of a mock function object
	// controlling the behavior of the method GetByOrgIDAndUserID.
	GetByOrgIDAndUserIDFunc *OrgMemberStoreGetByOrgIDAndUserIDFunc
	// GetByUserIDFunc is an instance of a mock function object controlling
	// the behavior of the method GetByUserID.
	GetByUserIDFunc *OrgMemberStoreGetByUserIDFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *OrgMemberStoreHandleFunc
	// MemberCountFunc is an instance of a mock function object controlling
	// the behavior of the method MemberCount.
	MemberCountFunc *OrgMemberStoreMemberCountFunc
	// RemoveFunc is an instance of a mock function object controlling the
	// behavior of the method Remove.
	RemoveFunc *OrgMemberStoreRemoveFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *OrgMemberStoreTransactFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *OrgMemberStoreWithFunc
}

// NewMockOrgMemberStore creates a new mock of the OrgMemberStore interface.
// All methods return zero values for all results, unless overwritten.
func NewMockOrgMemberStore() *MockOrgMemberStore {
	return &MockOrgMemberStore{
		AutocompleteMembersSearchFunc: &OrgMemberStoreAutocompleteMembersSearchFunc{
			defaultHook: func(context.Context, int32, string) (r0 []*types.OrgMemberAutocompleteSearchItem, r1 error) {
				return
			},
		},
		CreateFunc: &OrgMemberStoreCreateFunc{
			defaultHook: func(context.Context, int32, int32) (r0 *types.OrgMembership, r1 error) {
				return
			},
		},
		CreateMembershipInOrgsForAllUsersFunc: &OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc{
			defaultHook: func(context.Context, []string) (r0 error) {
				return
			},
		},
		GetByOrgIDFunc: &OrgMemberStoreGetByOrgIDFunc{
			defaultHook: func(context.Context, int32) (r0 []*types.OrgMembership, r1 error) {
				return
			},
		},
		GetByOrgIDAndUserIDFunc: &OrgMemberStoreGetByOrgIDAndUserIDFunc{
			defaultHook: func(context.Context, int32, int32) (r0 *types.OrgMembership, r1 error) {
				return
			},
		},
		GetByUserIDFunc: &OrgMemberStoreGetByUserIDFunc{
			defaultHook: func(context.Context, int32) (r0 []*types.OrgMembership, r1 error) {
				return
			},
		},
		HandleFunc: &OrgMemberStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		MemberCountFunc: &OrgMemberStoreMemberCountFunc{
			defaultHook: func(context.Context, int32) (r0 int, r1 error) {
				return
			},
		},
		RemoveFunc: &OrgMemberStoreRemoveFunc{
			defaultHook: func(context.Context, int32, int32) (r0 error) {
				return
			},
		},
		TransactFunc: &OrgMemberStoreTransactFunc{
			defaultHook: func(context.Context) (r0 OrgMemberStore, r1 error) {
				return
			},
		},
		WithFunc: &OrgMemberStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 OrgMemberStore) {
				return
			},
		},
	}
}

// NewStrictMockOrgMemberStore creates a new mock of the OrgMemberStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockOrgMemberStore() *MockOrgMemberStore {
	return &MockOrgMemberStore{
		AutocompleteMembersSearchFunc: &OrgMemberStoreAutocompleteMembersSearchFunc{
			defaultHook: func(context.Context, int32, string) ([]*types.OrgMemberAutocompleteSearchItem, error) {
				panic("unexpected invocation of MockOrgMemberStore.AutocompleteMembersSearch")
			},
		},
		CreateFunc: &OrgMemberStoreCreateFunc{
			defaultHook: func(context.Context, int32, int32) (*types.OrgMembership, error) {
				panic("unexpected invocation of MockOrgMemberStore.Create")
			},
		},
		CreateMembershipInOrgsForAllUsersFunc: &OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc{
			defaultHook: func(context.Context, []string) error {
				panic("unexpected invocation of MockOrgMemberStore.CreateMembershipInOrgsForAllUsers")
			},
		},
		GetByOrgIDFunc: &OrgMemberStoreGetByOrgIDFunc{
			defaultHook: func(context.Context, int32) ([]*types.OrgMembership, error) {
				panic("unexpected invocation of MockOrgMemberStore.GetByOrgID")
			},
		},
		GetByOrgIDAndUserIDFunc: &OrgMemberStoreGetByOrgIDAndUserIDFunc{
			defaultHook: func(context.Context, int32, int32) (*types.OrgMembership, error) {
				panic("unexpected invocation of MockOrgMemberStore.GetByOrgIDAndUserID")
			},
		},
		GetByUserIDFunc: &OrgMemberStoreGetByUserIDFunc{
			defaultHook: func(context.Context, int32) ([]*types.OrgMembership, error) {
				panic("unexpected invocation of MockOrgMemberStore.GetByUserID")
			},
		},
		HandleFunc: &OrgMemberStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockOrgMemberStore.Handle")
			},
		},
		MemberCountFunc: &OrgMemberStoreMemberCountFunc{
			defaultHook: func(context.Context, int32) (int, error) {
				panic("unexpected invocation of MockOrgMemberStore.MemberCount")
			},
		},
		RemoveFunc: &OrgMemberStoreRemoveFunc{
			defaultHook: func(context.Context, int32, int32) error {
				panic("unexpected invocation of MockOrgMemberStore.Remove")
			},
		},
		TransactFunc: &OrgMemberStoreTransactFunc{
			defaultHook: func(context.Context) (OrgMemberStore, error) {
				panic("unexpected invocation of MockOrgMemberStore.Transact")
			},
		},
		WithFunc: &OrgMemberStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) OrgMemberStore {
				panic("unexpected invocation of MockOrgMemberStore.With")
			},
		},
	}
}

// NewMockOrgMemberStoreFrom creates a new mock of the MockOrgMemberStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockOrgMemberStoreFrom(i OrgMemberStore) *MockOrgMemberStore {
	return &MockOrgMemberStore{
		AutocompleteMembersSearchFunc: &OrgMemberStoreAutocompleteMembersSearchFunc{
			defaultHook: i.AutocompleteMembersSearch,
		},
		CreateFunc: &OrgMemberStoreCreateFunc{
			defaultHook: i.Create,
		},
		CreateMembershipInOrgsForAllUsersFunc: &OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc{
			defaultHook: i.CreateMembershipInOrgsForAllUsers,
		},
		GetByOrgIDFunc: &OrgMemberStoreGetByOrgIDFunc{
			defaultHook: i.GetByOrgID,
		},
		GetByOrgIDAndUserIDFunc: &OrgMemberStoreGetByOrgIDAndUserIDFunc{
			defaultHook: i.GetByOrgIDAndUserID,
		},
		GetByUserIDFunc: &OrgMemberStoreGetByUserIDFunc{
			defaultHook: i.GetByUserID,
		},
		HandleFunc: &OrgMemberStoreHandleFunc{
			defaultHook: i.Handle,
		},
		MemberCountFunc: &OrgMemberStoreMemberCountFunc{
			defaultHook: i.MemberCount,
		},
		RemoveFunc: &OrgMemberStoreRemoveFunc{
			defaultHook: i.Remove,
		},
		TransactFunc: &OrgMemberStoreTransactFunc{
			defaultHook: i.Transact,
		},
		WithFunc: &OrgMemberStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// OrgMemberStoreAutocompleteMembersSearchFunc describes the behavior when
// the AutocompleteMembersSearch method of the parent MockOrgMemberStore
// instance is invoked.
type OrgMemberStoreAutocompleteMembersSearchFunc struct {
	defaultHook func(context.Context, int32, string) ([]*types.OrgMemberAutocompleteSearchItem, error)
	hooks       []func(context.Context, int32, string) ([]*types.OrgMemberAutocompleteSearchItem, error)
	history     []OrgMemberStoreAutocompleteMembersSearchFuncCall
	mutex       sync.Mutex
}

// AutocompleteMembersSearch delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockOrgMemberStore) AutocompleteMembersSearch(v0 context.Context, v1 int32, v2 string) ([]*types.OrgMemberAutocompleteSearchItem, error) {
	r0, r1 := m.AutocompleteMembersSearchFunc.nextHook()(v0, v1, v2)
	m.AutocompleteMembersSearchFunc.appendCall(OrgMemberStoreAutocompleteMembersSearchFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// AutocompleteMembersSearch method of the parent MockOrgMemberStore
// instance is invoked and the hook queue is empty.
func (f *OrgMemberStoreAutocompleteMembersSearchFunc) SetDefaultHook(hook func(context.Context, int32, string) ([]*types.OrgMemberAutocompleteSearchItem, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AutocompleteMembersSearch method of the parent MockOrgMemberStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *OrgMemberStoreAutocompleteMembersSearchFunc) PushHook(hook func(context.Context, int32, string) ([]*types.OrgMemberAutocompleteSearchItem, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgMemberStoreAutocompleteMembersSearchFunc) SetDefaultReturn(r0 []*types.OrgMemberAutocompleteSearchItem, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, string) ([]*types.OrgMemberAutocompleteSearchItem, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgMemberStoreAutocompleteMembersSearchFunc) PushReturn(r0 []*types.OrgMemberAutocompleteSearchItem, r1 error) {
	f.PushHook(func(context.Context, int32, string) ([]*types.OrgMemberAutocompleteSearchItem, error) {
		return r0, r1
	})
}

func (f *OrgMemberStoreAutocompleteMembersSearchFunc) nextHook() func(context.Context, int32, string) ([]*types.OrgMemberAutocompleteSearchItem, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgMemberStoreAutocompleteMembersSearchFunc) appendCall(r0 OrgMemberStoreAutocompleteMembersSearchFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// OrgMemberStoreAutocompleteMembersSearchFuncCall objects describing the
// invocations of this function.
func (f *OrgMemberStoreAutocompleteMembersSearchFunc) History() []OrgMemberStoreAutocompleteMembersSearchFuncCall {
	f.mutex.Lock()
	history := make([]OrgMemberStoreAutocompleteMembersSearchFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgMemberStoreAutocompleteMembersSearchFuncCall is an object that
// describes an invocation of method AutocompleteMembersSearch on an
// instance of MockOrgMemberStore.
type OrgMemberStoreAutocompleteMembersSearchFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.OrgMemberAutocompleteSearchItem
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgMemberStoreAutocompleteMembersSearchFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgMemberStoreAutocompleteMembersSearchFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgMemberStoreCreateFunc describes the behavior when the Create method of
// the parent MockOrgMemberStore instance is invoked.
type OrgMemberStoreCreateFunc struct {
	defaultHook func(context.Context, int32, int32) (*types.OrgMembership, error)
	hooks       []func(context.Context, int32, int32) (*types.OrgMembership, error)
	history     []OrgMemberStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgMemberStore) Create(v0 context.Context, v1 int32, v2 int32) (*types.OrgMembership, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1, v2)
	m.CreateFunc.appendCall(OrgMemberStoreCreateFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockOrgMemberStore instance is invoked and the hook queue is
// empty.
func (f *OrgMemberStoreCreateFunc) SetDefaultHook(hook func(context.Context, int32, int32) (*types.OrgMembership, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockOrgMemberStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *OrgMemberStoreCreateFunc) PushHook(hook func(context.Context, int32, int32) (*types.OrgMembership, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgMemberStoreCreateFunc) SetDefaultReturn(r0 *types.OrgMembership, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, int32) (*types.OrgMembership, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgMemberStoreCreateFunc) PushReturn(r0 *types.OrgMembership, r1 error) {
	f.PushHook(func(context.Context, int32, int32) (*types.OrgMembership, error) {
		return r0, r1
	})
}

func (f *OrgMemberStoreCreateFunc) nextHook() func(context.Context, int32, int32) (*types.OrgMembership, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgMemberStoreCreateFunc) appendCall(r0 OrgMemberStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgMemberStoreCreateFuncCall objects
// describing the invocations of this function.
func (f *OrgMemberStoreCreateFunc) History() []OrgMemberStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]OrgMemberStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgMemberStoreCreateFuncCall is an object that describes an invocation of
// method Create on an instance of MockOrgMemberStore.
type OrgMemberStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.OrgMembership
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgMemberStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgMemberStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc describes the
// behavior when the CreateMembershipInOrgsForAllUsers method of the parent
// MockOrgMemberStore instance is invoked.
type OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc struct {
	defaultHook func(context.Context, []string) error
	hooks       []func(context.Context, []string) error
	history     []OrgMemberStoreCreateMembershipInOrgsForAllUsersFuncCall
	mutex       sync.Mutex
}

// CreateMembershipInOrgsForAllUsers delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockOrgMemberStore) CreateMembershipInOrgsForAllUsers(v0 context.Context, v1 []string) error {
	r0 := m.CreateMembershipInOrgsForAllUsersFunc.nextHook()(v0, v1)
	m.CreateMembershipInOrgsForAllUsersFunc.appendCall(OrgMemberStoreCreateMembershipInOrgsForAllUsersFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// CreateMembershipInOrgsForAllUsers method of the parent MockOrgMemberStore
// instance is invoked and the hook queue is empty.
func (f *OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc) SetDefaultHook(hook func(context.Context, []string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateMembershipInOrgsForAllUsers method of the parent MockOrgMemberStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc) PushHook(hook func(context.Context, []string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []string) error {
		return r0
	})
}

func (f *OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc) nextHook() func(context.Context, []string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc) appendCall(r0 OrgMemberStoreCreateMembershipInOrgsForAllUsersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// OrgMemberStoreCreateMembershipInOrgsForAllUsersFuncCall objects
// describing the invocations of this function.
func (f *OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc) History() []OrgMemberStoreCreateMembershipInOrgsForAllUsersFuncCall {
	f.mutex.Lock()
	history := make([]OrgMemberStoreCreateMembershipInOrgsForAllUsersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgMemberStoreCreateMembershipInOrgsForAllUsersFuncCall is an object that
// describes an invocation of method CreateMembershipInOrgsForAllUsers on an
// instance of MockOrgMemberStore.
type OrgMemberStoreCreateMembershipInOrgsForAllUsersFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgMemberStoreCreateMembershipInOrgsForAllUsersFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgMemberStoreCreateMembershipInOrgsForAllUsersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OrgMemberStoreGetByOrgIDFunc describes the behavior when the GetByOrgID
// method of the parent MockOrgMemberStore instance is invoked.
type OrgMemberStoreGetByOrgIDFunc struct {
	defaultHook func(context.Context, int32) ([]*types.OrgMembership, error)
	hooks       []func(context.Context, int32) ([]*types.OrgMembership, error)
	history     []OrgMemberStoreGetByOrgIDFuncCall
	mutex       sync.Mutex
}

// GetByOrgID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockOrgMemberStore) GetByOrgID(v0 context.Context, v1 int32) ([]*types.OrgMembership, error) {
	r0, r1 := m.GetByOrgIDFunc.nextHook()(v0, v1)
	m.GetByOrgIDFunc.appendCall(OrgMemberStoreGetByOrgIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByOrgID method of
// the parent MockOrgMemberStore instance is invoked and the hook queue is
// empty.
func (f *OrgMemberStoreGetByOrgIDFunc) SetDefaultHook(hook func(context.Context, int32) ([]*types.OrgMembership, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByOrgID method of the parent MockOrgMemberStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgMemberStoreGetByOrgIDFunc) PushHook(hook func(context.Context, int32) ([]*types.OrgMembership, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgMemberStoreGetByOrgIDFunc) SetDefaultReturn(r0 []*types.OrgMembership, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) ([]*types.OrgMembership, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgMemberStoreGetByOrgIDFunc) PushReturn(r0 []*types.OrgMembership, r1 error) {
	f.PushHook(func(context.Context, int32) ([]*types.OrgMembership, error) {
		return r0, r1
	})
}

func (f *OrgMemberStoreGetByOrgIDFunc) nextHook() func(context.Context, int32) ([]*types.OrgMembership, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgMemberStoreGetByOrgIDFunc) appendCall(r0 OrgMemberStoreGetByOrgIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgMemberStoreGetByOrgIDFuncCall objects
// describing the invocations of this function.
func (f *OrgMemberStoreGetByOrgIDFunc) History() []OrgMemberStoreGetByOrgIDFuncCall {
	f.mutex.Lock()
	history := make([]OrgMemberStoreGetByOrgIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgMemberStoreGetByOrgIDFuncCall is an object that describes an
// invocation of method GetByOrgID on an instance of MockOrgMemberStore.
type OrgMemberStoreGetByOrgIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.OrgMembership
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgMemberStoreGetByOrgIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgMemberStoreGetByOrgIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgMemberStoreGetByOrgIDAndUserIDFunc describes the behavior when the
// GetByOrgIDAndUserID method of the parent MockOrgMemberStore instance is
// invoked.
type OrgMemberStoreGetByOrgIDAndUserIDFunc struct {
	defaultHook func(context.Context, int32, int32) (*types.OrgMembership, error)
	hooks       []func(context.Context, int32, int32) (*types.OrgMembership, error)
	history     []OrgMemberStoreGetByOrgIDAndUserIDFuncCall
	mutex       sync.Mutex
}

// GetByOrgIDAndUserID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockOrgMemberStore) GetByOrgIDAndUserID(v0 context.Context, v1 int32, v2 int32) (*types.OrgMembership, error) {
	r0, r1 := m.GetByOrgIDAndUserIDFunc.nextHook()(v0, v1, v2)
	m.GetByOrgIDAndUserIDFunc.appendCall(OrgMemberStoreGetByOrgIDAndUserIDFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByOrgIDAndUserID
// method of the parent MockOrgMemberStore instance is invoked and the hook
// queue is empty.
func (f *OrgMemberStoreGetByOrgIDAndUserIDFunc) SetDefaultHook(hook func(context.Context, int32, int32) (*types.OrgMembership, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByOrgIDAndUserID method of the parent MockOrgMemberStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *OrgMemberStoreGetByOrgIDAndUserIDFunc) PushHook(hook func(context.Context, int32, int32) (*types.OrgMembership, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgMemberStoreGetByOrgIDAndUserIDFunc) SetDefaultReturn(r0 *types.OrgMembership, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, int32) (*types.OrgMembership, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgMemberStoreGetByOrgIDAndUserIDFunc) PushReturn(r0 *types.OrgMembership, r1 error) {
	f.PushHook(func(context.Context, int32, int32) (*types.OrgMembership, error) {
		return r0, r1
	})
}

func (f *OrgMemberStoreGetByOrgIDAndUserIDFunc) nextHook() func(context.Context, int32, int32) (*types.OrgMembership, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgMemberStoreGetByOrgIDAndUserIDFunc) appendCall(r0 OrgMemberStoreGetByOrgIDAndUserIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgMemberStoreGetByOrgIDAndUserIDFuncCall
// objects describing the invocations of this function.
func (f *OrgMemberStoreGetByOrgIDAndUserIDFunc) History() []OrgMemberStoreGetByOrgIDAndUserIDFuncCall {
	f.mutex.Lock()
	history := make([]OrgMemberStoreGetByOrgIDAndUserIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgMemberStoreGetByOrgIDAndUserIDFuncCall is an object that describes an
// invocation of method GetByOrgIDAndUserID on an instance of
// MockOrgMemberStore.
type OrgMemberStoreGetByOrgIDAndUserIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.OrgMembership
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgMemberStoreGetByOrgIDAndUserIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgMemberStoreGetByOrgIDAndUserIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgMemberStoreGetByUserIDFunc describes the behavior when the GetByUserID
// method of the parent MockOrgMemberStore instance is invoked.
type OrgMemberStoreGetByUserIDFunc struct {
	defaultHook func(context.Context, int32) ([]*types.OrgMembership, error)
	hooks       []func(context.Context, int32) ([]*types.OrgMembership, error)
	history     []OrgMemberStoreGetByUserIDFuncCall
	mutex       sync.Mutex
}

// GetByUserID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockOrgMemberStore) GetByUserID(v0 context.Context, v1 int32) ([]*types.OrgMembership, error) {
	r0, r1 := m.GetByUserIDFunc.nextHook()(v0, v1)
	m.GetByUserIDFunc.appendCall(OrgMemberStoreGetByUserIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByUserID method
// of the parent MockOrgMemberStore instance is invoked and the hook queue
// is empty.
func (f *OrgMemberStoreGetByUserIDFunc) SetDefaultHook(hook func(context.Context, int32) ([]*types.OrgMembership, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByUserID method of the parent MockOrgMemberStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgMemberStoreGetByUserIDFunc) PushHook(hook func(context.Context, int32) ([]*types.OrgMembership, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgMemberStoreGetByUserIDFunc) SetDefaultReturn(r0 []*types.OrgMembership, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) ([]*types.OrgMembership, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgMemberStoreGetByUserIDFunc) PushReturn(r0 []*types.OrgMembership, r1 error) {
	f.PushHook(func(context.Context, int32) ([]*types.OrgMembership, error) {
		return r0, r1
	})
}

func (f *OrgMemberStoreGetByUserIDFunc) nextHook() func(context.Context, int32) ([]*types.OrgMembership, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgMemberStoreGetByUserIDFunc) appendCall(r0 OrgMemberStoreGetByUserIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgMemberStoreGetByUserIDFuncCall objects
// describing the invocations of this function.
func (f *OrgMemberStoreGetByUserIDFunc) History() []OrgMemberStoreGetByUserIDFuncCall {
	f.mutex.Lock()
	history := make([]OrgMemberStoreGetByUserIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgMemberStoreGetByUserIDFuncCall is an object that describes an
// invocation of method GetByUserID on an instance of MockOrgMemberStore.
type OrgMemberStoreGetByUserIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.OrgMembership
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgMemberStoreGetByUserIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgMemberStoreGetByUserIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgMemberStoreHandleFunc describes the behavior when the Handle method of
// the parent MockOrgMemberStore instance is invoked.
type OrgMemberStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []OrgMemberStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgMemberStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(OrgMemberStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockOrgMemberStore instance is invoked and the hook queue is
// empty.
func (f *OrgMemberStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockOrgMemberStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *OrgMemberStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgMemberStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgMemberStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *OrgMemberStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgMemberStoreHandleFunc) appendCall(r0 OrgMemberStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgMemberStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *OrgMemberStoreHandleFunc) History() []OrgMemberStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]OrgMemberStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgMemberStoreHandleFuncCall is an object that describes an invocation of
// method Handle on an instance of MockOrgMemberStore.
type OrgMemberStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgMemberStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgMemberStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OrgMemberStoreMemberCountFunc describes the behavior when the MemberCount
// method of the parent MockOrgMemberStore instance is invoked.
type OrgMemberStoreMemberCountFunc struct {
	defaultHook func(context.Context, int32) (int, error)
	hooks       []func(context.Context, int32) (int, error)
	history     []OrgMemberStoreMemberCountFuncCall
	mutex       sync.Mutex
}

// MemberCount delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockOrgMemberStore) MemberCount(v0 context.Context, v1 int32) (int, error) {
	r0, r1 := m.MemberCountFunc.nextHook()(v0, v1)
	m.MemberCountFunc.appendCall(OrgMemberStoreMemberCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MemberCount method
// of the parent MockOrgMemberStore instance is invoked and the hook queue
// is empty.
func (f *OrgMemberStoreMemberCountFunc) SetDefaultHook(hook func(context.Context, int32) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MemberCount method of the parent MockOrgMemberStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgMemberStoreMemberCountFunc) PushHook(hook func(context.Context, int32) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgMemberStoreMemberCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgMemberStoreMemberCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, int32) (int, error) {
		return r0, r1
	})
}

func (f *OrgMemberStoreMemberCountFunc) nextHook() func(context.Context, int32) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgMemberStoreMemberCountFunc) appendCall(r0 OrgMemberStoreMemberCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgMemberStoreMemberCountFuncCall objects
// describing the invocations of this function.
func (f *OrgMemberStoreMemberCountFunc) History() []OrgMemberStoreMemberCountFuncCall {
	f.mutex.Lock()
	history := make([]OrgMemberStoreMemberCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgMemberStoreMemberCountFuncCall is an object that describes an
// invocation of method MemberCount on an instance of MockOrgMemberStore.
type OrgMemberStoreMemberCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgMemberStoreMemberCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgMemberStoreMemberCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgMemberStoreRemoveFunc describes the behavior when the Remove method of
// the parent MockOrgMemberStore instance is invoked.
type OrgMemberStoreRemoveFunc struct {
	defaultHook func(context.Context, int32, int32) error
	hooks       []func(context.Context, int32, int32) error
	history     []OrgMemberStoreRemoveFuncCall
	mutex       sync.Mutex
}

// Remove delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgMemberStore) Remove(v0 context.Context, v1 int32, v2 int32) error {
	r0 := m.RemoveFunc.nextHook()(v0, v1, v2)
	m.RemoveFunc.appendCall(OrgMemberStoreRemoveFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Remove method of the
// parent MockOrgMemberStore instance is invoked and the hook queue is
// empty.
func (f *OrgMemberStoreRemoveFunc) SetDefaultHook(hook func(context.Context, int32, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Remove method of the parent MockOrgMemberStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *OrgMemberStoreRemoveFunc) PushHook(hook func(context.Context, int32, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgMemberStoreRemoveFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgMemberStoreRemoveFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, int32) error {
		return r0
	})
}

func (f *OrgMemberStoreRemoveFunc) nextHook() func(context.Context, int32, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgMemberStoreRemoveFunc) appendCall(r0 OrgMemberStoreRemoveFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgMemberStoreRemoveFuncCall objects
// describing the invocations of this function.
func (f *OrgMemberStoreRemoveFunc) History() []OrgMemberStoreRemoveFuncCall {
	f.mutex.Lock()
	history := make([]OrgMemberStoreRemoveFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgMemberStoreRemoveFuncCall is an object that describes an invocation of
// method Remove on an instance of MockOrgMemberStore.
type OrgMemberStoreRemoveFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgMemberStoreRemoveFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgMemberStoreRemoveFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OrgMemberStoreTransactFunc describes the behavior when the Transact
// method of the parent MockOrgMemberStore instance is invoked.
type OrgMemberStoreTransactFunc struct {
	defaultHook func(context.Context) (OrgMemberStore, error)
	hooks       []func(context.Context) (OrgMemberStore, error)
	history     []OrgMemberStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgMemberStore) Transact(v0 context.Context) (OrgMemberStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(OrgMemberStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockOrgMemberStore instance is invoked and the hook queue is
// empty.
func (f *OrgMemberStoreTransactFunc) SetDefaultHook(hook func(context.Context) (OrgMemberStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockOrgMemberStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgMemberStoreTransactFunc) PushHook(hook func(context.Context) (OrgMemberStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgMemberStoreTransactFunc) SetDefaultReturn(r0 OrgMemberStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (OrgMemberStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgMemberStoreTransactFunc) PushReturn(r0 OrgMemberStore, r1 error) {
	f.PushHook(func(context.Context) (OrgMemberStore, error) {
		return r0, r1
	})
}

func (f *OrgMemberStoreTransactFunc) nextHook() func(context.Context) (OrgMemberStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgMemberStoreTransactFunc) appendCall(r0 OrgMemberStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgMemberStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *OrgMemberStoreTransactFunc) History() []OrgMemberStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]OrgMemberStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgMemberStoreTransactFuncCall is an object that describes an invocation
// of method Transact on an instance of MockOrgMemberStore.
type OrgMemberStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 OrgMemberStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgMemberStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgMemberStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgMemberStoreWithFunc describes the behavior when the With method of the
// parent MockOrgMemberStore instance is invoked.
type OrgMemberStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) OrgMemberStore
	hooks       []func(basestore.ShareableStore) OrgMemberStore
	history     []OrgMemberStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgMemberStore) With(v0 basestore.ShareableStore) OrgMemberStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(OrgMemberStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockOrgMemberStore instance is invoked and the hook queue is
// empty.
func (f *OrgMemberStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) OrgMemberStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockOrgMemberStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *OrgMemberStoreWithFunc) PushHook(hook func(basestore.ShareableStore) OrgMemberStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgMemberStoreWithFunc) SetDefaultReturn(r0 OrgMemberStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) OrgMemberStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgMemberStoreWithFunc) PushReturn(r0 OrgMemberStore) {
	f.PushHook(func(basestore.ShareableStore) OrgMemberStore {
		return r0
	})
}

func (f *OrgMemberStoreWithFunc) nextHook() func(basestore.ShareableStore) OrgMemberStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgMemberStoreWithFunc) appendCall(r0 OrgMemberStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgMemberStoreWithFuncCall objects
// describing the invocations of this function.
func (f *OrgMemberStoreWithFunc) History() []OrgMemberStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]OrgMemberStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgMemberStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockOrgMemberStore.
type OrgMemberStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 OrgMemberStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgMemberStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgMemberStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockOrgStore is a mock implementation of the OrgStore interface (from the
// package github.com/sourcegraph/sourcegraph/internal/database) used for
// unit testing.
type MockOrgStore struct {
	// AddOrgsOpenBetaStatsFunc is an instance of a mock function object
	// controlling the behavior of the method AddOrgsOpenBetaStats.
	AddOrgsOpenBetaStatsFunc *OrgStoreAddOrgsOpenBetaStatsFunc
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *OrgStoreCountFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *OrgStoreCreateFunc
	// DeleteFunc is an instance of a mock function object controlling the
	// behavior of the method Delete.
	DeleteFunc *OrgStoreDeleteFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *OrgStoreDoneFunc
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *OrgStoreGetByIDFunc
	// GetByNameFunc is an instance of a mock function object controlling
	// the behavior of the method GetByName.
	GetByNameFunc *OrgStoreGetByNameFunc
	// GetByUserIDFunc is an instance of a mock function object controlling
	// the behavior of the method GetByUserID.
	GetByUserIDFunc *OrgStoreGetByUserIDFunc
	// GetOrgsWithRepositoriesByUserIDFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetOrgsWithRepositoriesByUserID.
	GetOrgsWithRepositoriesByUserIDFunc *OrgStoreGetOrgsWithRepositoriesByUserIDFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *OrgStoreHandleFunc
	// HardDeleteFunc is an instance of a mock function object controlling
	// the behavior of the method HardDelete.
	HardDeleteFunc *OrgStoreHardDeleteFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *OrgStoreListFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *OrgStoreTransactFunc
	// UpdateFunc is an instance of a mock function object controlling the
	// behavior of the method Update.
	UpdateFunc *OrgStoreUpdateFunc
	// UpdateOrgsOpenBetaStatsFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateOrgsOpenBetaStats.
	UpdateOrgsOpenBetaStatsFunc *OrgStoreUpdateOrgsOpenBetaStatsFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *OrgStoreWithFunc
}

// NewMockOrgStore creates a new mock of the OrgStore interface. All methods
// return zero values for all results, unless overwritten.
func NewMockOrgStore() *MockOrgStore {
	return &MockOrgStore{
		AddOrgsOpenBetaStatsFunc: &OrgStoreAddOrgsOpenBetaStatsFunc{
			defaultHook: func(context.Context, int32, string) (r0 string, r1 error) {
				return
			},
		},
		CountFunc: &OrgStoreCountFunc{
			defaultHook: func(context.Context, OrgsListOptions) (r0 int, r1 error) {
				return
			},
		},
		CreateFunc: &OrgStoreCreateFunc{
			defaultHook: func(context.Context, string, *string) (r0 *types.Org, r1 error) {
				return
			},
		},
		DeleteFunc: &OrgStoreDeleteFunc{
			defaultHook: func(context.Context, int32) (r0 error) {
				return
			},
		},
		DoneFunc: &OrgStoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		GetByIDFunc: &OrgStoreGetByIDFunc{
			defaultHook: func(context.Context, int32) (r0 *types.Org, r1 error) {
				return
			},
		},
		GetByNameFunc: &OrgStoreGetByNameFunc{
			defaultHook: func(context.Context, string) (r0 *types.Org, r1 error) {
				return
			},
		},
		GetByUserIDFunc: &OrgStoreGetByUserIDFunc{
			defaultHook: func(context.Context, int32) (r0 []*types.Org, r1 error) {
				return
			},
		},
		GetOrgsWithRepositoriesByUserIDFunc: &OrgStoreGetOrgsWithRepositoriesByUserIDFunc{
			defaultHook: func(context.Context, int32) (r0 []*types.Org, r1 error) {
				return
			},
		},
		HandleFunc: &OrgStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		HardDeleteFunc: &OrgStoreHardDeleteFunc{
			defaultHook: func(context.Context, int32) (r0 error) {
				return
			},
		},
		ListFunc: &OrgStoreListFunc{
			defaultHook: func(context.Context, *OrgsListOptions) (r0 []*types.Org, r1 error) {
				return
			},
		},
		TransactFunc: &OrgStoreTransactFunc{
			defaultHook: func(context.Context) (r0 OrgStore, r1 error) {
				return
			},
		},
		UpdateFunc: &OrgStoreUpdateFunc{
			defaultHook: func(context.Context, int32, *string) (r0 *types.Org, r1 error) {
				return
			},
		},
		UpdateOrgsOpenBetaStatsFunc: &OrgStoreUpdateOrgsOpenBetaStatsFunc{
			defaultHook: func(context.Context, string, int32) (r0 error) {
				return
			},
		},
		WithFunc: &OrgStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 OrgStore) {
				return
			},
		},
	}
}

// NewStrictMockOrgStore creates a new mock of the OrgStore interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockOrgStore() *MockOrgStore {
	return &MockOrgStore{
		AddOrgsOpenBetaStatsFunc: &OrgStoreAddOrgsOpenBetaStatsFunc{
			defaultHook: func(context.Context, int32, string) (string, error) {
				panic("unexpected invocation of MockOrgStore.AddOrgsOpenBetaStats")
			},
		},
		CountFunc: &OrgStoreCountFunc{
			defaultHook: func(context.Context, OrgsListOptions) (int, error) {
				panic("unexpected invocation of MockOrgStore.Count")
			},
		},
		CreateFunc: &OrgStoreCreateFunc{
			defaultHook: func(context.Context, string, *string) (*types.Org, error) {
				panic("unexpected invocation of MockOrgStore.Create")
			},
		},
		DeleteFunc: &OrgStoreDeleteFunc{
			defaultHook: func(context.Context, int32) error {
				panic("unexpected invocation of MockOrgStore.Delete")
			},
		},
		DoneFunc: &OrgStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockOrgStore.Done")
			},
		},
		GetByIDFunc: &OrgStoreGetByIDFunc{
			defaultHook: func(context.Context, int32) (*types.Org, error) {
				panic("unexpected invocation of MockOrgStore.GetByID")
			},
		},
		GetByNameFunc: &OrgStoreGetByNameFunc{
			defaultHook: func(context.Context, string) (*types.Org, error) {
				panic("unexpected invocation of MockOrgStore.GetByName")
			},
		},
		GetByUserIDFunc: &OrgStoreGetByUserIDFunc{
			defaultHook: func(context.Context, int32) ([]*types.Org, error) {
				panic("unexpected invocation of MockOrgStore.GetByUserID")
			},
		},
		GetOrgsWithRepositoriesByUserIDFunc: &OrgStoreGetOrgsWithRepositoriesByUserIDFunc{
			defaultHook: func(context.Context, int32) ([]*types.Org, error) {
				panic("unexpected invocation of MockOrgStore.GetOrgsWithRepositoriesByUserID")
			},
		},
		HandleFunc: &OrgStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockOrgStore.Handle")
			},
		},
		HardDeleteFunc: &OrgStoreHardDeleteFunc{
			defaultHook: func(context.Context, int32) error {
				panic("unexpected invocation of MockOrgStore.HardDelete")
			},
		},
		ListFunc: &OrgStoreListFunc{
			defaultHook: func(context.Context, *OrgsListOptions) ([]*types.Org, error) {
				panic("unexpected invocation of MockOrgStore.List")
			},
		},
		TransactFunc: &OrgStoreTransactFunc{
			defaultHook: func(context.Context) (OrgStore, error) {
				panic("unexpected invocation of MockOrgStore.Transact")
			},
		},
		UpdateFunc: &OrgStoreUpdateFunc{
			defaultHook: func(context.Context, int32, *string) (*types.Org, error) {
				panic("unexpected invocation of MockOrgStore.Update")
			},
		},
		UpdateOrgsOpenBetaStatsFunc: &OrgStoreUpdateOrgsOpenBetaStatsFunc{
			defaultHook: func(context.Context, string, int32) error {
				panic("unexpected invocation of MockOrgStore.UpdateOrgsOpenBetaStats")
			},
		},
		WithFunc: &OrgStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) OrgStore {
				panic("unexpected invocation of MockOrgStore.With")
			},
		},
	}
}

// NewMockOrgStoreFrom creates a new mock of the MockOrgStore interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockOrgStoreFrom(i OrgStore) *MockOrgStore {
	return &MockOrgStore{
		AddOrgsOpenBetaStatsFunc: &OrgStoreAddOrgsOpenBetaStatsFunc{
			defaultHook: i.AddOrgsOpenBetaStats,
		},
		CountFunc: &OrgStoreCountFunc{
			defaultHook: i.Count,
		},
		CreateFunc: &OrgStoreCreateFunc{
			defaultHook: i.Create,
		},
		DeleteFunc: &OrgStoreDeleteFunc{
			defaultHook: i.Delete,
		},
		DoneFunc: &OrgStoreDoneFunc{
			defaultHook: i.Done,
		},
		GetByIDFunc: &OrgStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		GetByNameFunc: &OrgStoreGetByNameFunc{
			defaultHook: i.GetByName,
		},
		GetByUserIDFunc: &OrgStoreGetByUserIDFunc{
			defaultHook: i.GetByUserID,
		},
		GetOrgsWithRepositoriesByUserIDFunc: &OrgStoreGetOrgsWithRepositoriesByUserIDFunc{
			defaultHook: i.GetOrgsWithRepositoriesByUserID,
		},
		HandleFunc: &OrgStoreHandleFunc{
			defaultHook: i.Handle,
		},
		HardDeleteFunc: &OrgStoreHardDeleteFunc{
			defaultHook: i.HardDelete,
		},
		ListFunc: &OrgStoreListFunc{
			defaultHook: i.List,
		},
		TransactFunc: &OrgStoreTransactFunc{
			defaultHook: i.Transact,
		},
		UpdateFunc: &OrgStoreUpdateFunc{
			defaultHook: i.Update,
		},
		UpdateOrgsOpenBetaStatsFunc: &OrgStoreUpdateOrgsOpenBetaStatsFunc{
			defaultHook: i.UpdateOrgsOpenBetaStats,
		},
		WithFunc: &OrgStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// OrgStoreAddOrgsOpenBetaStatsFunc describes the behavior when the
// AddOrgsOpenBetaStats method of the parent MockOrgStore instance is
// invoked.
type OrgStoreAddOrgsOpenBetaStatsFunc struct {
	defaultHook func(context.Context, int32, string) (string, error)
	hooks       []func(context.Context, int32, string) (string, error)
	history     []OrgStoreAddOrgsOpenBetaStatsFuncCall
	mutex       sync.Mutex
}

// AddOrgsOpenBetaStats delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockOrgStore) AddOrgsOpenBetaStats(v0 context.Context, v1 int32, v2 string) (string, error) {
	r0, r1 := m.AddOrgsOpenBetaStatsFunc.nextHook()(v0, v1, v2)
	m.AddOrgsOpenBetaStatsFunc.appendCall(OrgStoreAddOrgsOpenBetaStatsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the AddOrgsOpenBetaStats
// method of the parent MockOrgStore instance is invoked and the hook queue
// is empty.
func (f *OrgStoreAddOrgsOpenBetaStatsFunc) SetDefaultHook(hook func(context.Context, int32, string) (string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AddOrgsOpenBetaStats method of the parent MockOrgStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *OrgStoreAddOrgsOpenBetaStatsFunc) PushHook(hook func(context.Context, int32, string) (string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgStoreAddOrgsOpenBetaStatsFunc) SetDefaultReturn(r0 string, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, string) (string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgStoreAddOrgsOpenBetaStatsFunc) PushReturn(r0 string, r1 error) {
	f.PushHook(func(context.Context, int32, string) (string, error) {
		return r0, r1
	})
}

func (f *OrgStoreAddOrgsOpenBetaStatsFunc) nextHook() func(context.Context, int32, string) (string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreAddOrgsOpenBetaStatsFunc) appendCall(r0 OrgStoreAddOrgsOpenBetaStatsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreAddOrgsOpenBetaStatsFuncCall
// objects describing the invocations of this function.
func (f *OrgStoreAddOrgsOpenBetaStatsFunc) History() []OrgStoreAddOrgsOpenBetaStatsFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreAddOrgsOpenBetaStatsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreAddOrgsOpenBetaStatsFuncCall is an object that describes an
// invocation of method AddOrgsOpenBetaStats on an instance of MockOrgStore.
type OrgStoreAddOrgsOpenBetaStatsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreAddOrgsOpenBetaStatsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreAddOrgsOpenBetaStatsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgStoreCountFunc describes the behavior when the Count method of the
// parent MockOrgStore instance is invoked.
type OrgStoreCountFunc struct {
	defaultHook func(context.Context, OrgsListOptions) (int, error)
	hooks       []func(context.Context, OrgsListOptions) (int, error)
	history     []OrgStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgStore) Count(v0 context.Context, v1 OrgsListOptions) (int, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(OrgStoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockOrgStore instance is invoked and the hook queue is empty.
func (f *OrgStoreCountFunc) SetDefaultHook(hook func(context.Context, OrgsListOptions) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockOrgStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *OrgStoreCountFunc) PushHook(hook func(context.Context, OrgsListOptions) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgStoreCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, OrgsListOptions) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgStoreCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, OrgsListOptions) (int, error) {
		return r0, r1
	})
}

func (f *OrgStoreCountFunc) nextHook() func(context.Context, OrgsListOptions) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreCountFunc) appendCall(r0 OrgStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreCountFuncCall objects describing
// the invocations of this function.
func (f *OrgStoreCountFunc) History() []OrgStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreCountFuncCall is an object that describes an invocation of method
// Count on an instance of MockOrgStore.
type OrgStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 OrgsListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgStoreCreateFunc describes the behavior when the Create method of the
// parent MockOrgStore instance is invoked.
type OrgStoreCreateFunc struct {
	defaultHook func(context.Context, string, *string) (*types.Org, error)
	hooks       []func(context.Context, string, *string) (*types.Org, error)
	history     []OrgStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgStore) Create(v0 context.Context, v1 string, v2 *string) (*types.Org, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1, v2)
	m.CreateFunc.appendCall(OrgStoreCreateFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockOrgStore instance is invoked and the hook queue is empty.
func (f *OrgStoreCreateFunc) SetDefaultHook(hook func(context.Context, string, *string) (*types.Org, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockOrgStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *OrgStoreCreateFunc) PushHook(hook func(context.Context, string, *string) (*types.Org, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgStoreCreateFunc) SetDefaultReturn(r0 *types.Org, r1 error) {
	f.SetDefaultHook(func(context.Context, string, *string) (*types.Org, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgStoreCreateFunc) PushReturn(r0 *types.Org, r1 error) {
	f.PushHook(func(context.Context, string, *string) (*types.Org, error) {
		return r0, r1
	})
}

func (f *OrgStoreCreateFunc) nextHook() func(context.Context, string, *string) (*types.Org, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreCreateFunc) appendCall(r0 OrgStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreCreateFuncCall objects describing
// the invocations of this function.
func (f *OrgStoreCreateFunc) History() []OrgStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreCreateFuncCall is an object that describes an invocation of
// method Create on an instance of MockOrgStore.
type OrgStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Org
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgStoreDeleteFunc describes the behavior when the Delete method of the
// parent MockOrgStore instance is invoked.
type OrgStoreDeleteFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []OrgStoreDeleteFuncCall
	mutex       sync.Mutex
}

// Delete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgStore) Delete(v0 context.Context, v1 int32) error {
	r0 := m.DeleteFunc.nextHook()(v0, v1)
	m.DeleteFunc.appendCall(OrgStoreDeleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Delete method of the
// parent MockOrgStore instance is invoked and the hook queue is empty.
func (f *OrgStoreDeleteFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Delete method of the parent MockOrgStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *OrgStoreDeleteFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgStoreDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgStoreDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *OrgStoreDeleteFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreDeleteFunc) appendCall(r0 OrgStoreDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreDeleteFuncCall objects describing
// the invocations of this function.
func (f *OrgStoreDeleteFunc) History() []OrgStoreDeleteFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreDeleteFuncCall is an object that describes an invocation of
// method Delete on an instance of MockOrgStore.
type OrgStoreDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OrgStoreDoneFunc describes the behavior when the Done method of the
// parent MockOrgStore instance is invoked.
type OrgStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []OrgStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(OrgStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockOrgStore instance is invoked and the hook queue is empty.
func (f *OrgStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockOrgStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *OrgStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *OrgStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreDoneFunc) appendCall(r0 OrgStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreDoneFuncCall objects describing the
// invocations of this function.
func (f *OrgStoreDoneFunc) History() []OrgStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreDoneFuncCall is an object that describes an invocation of method
// Done on an instance of MockOrgStore.
type OrgStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OrgStoreGetByIDFunc describes the behavior when the GetByID method of the
// parent MockOrgStore instance is invoked.
type OrgStoreGetByIDFunc struct {
	defaultHook func(context.Context, int32) (*types.Org, error)
	hooks       []func(context.Context, int32) (*types.Org, error)
	history     []OrgStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgStore) GetByID(v0 context.Context, v1 int32) (*types.Org, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(OrgStoreGetByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockOrgStore instance is invoked and the hook queue is empty.
func (f *OrgStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int32) (*types.Org, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockOrgStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *OrgStoreGetByIDFunc) PushHook(hook func(context.Context, int32) (*types.Org, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgStoreGetByIDFunc) SetDefaultReturn(r0 *types.Org, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (*types.Org, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgStoreGetByIDFunc) PushReturn(r0 *types.Org, r1 error) {
	f.PushHook(func(context.Context, int32) (*types.Org, error) {
		return r0, r1
	})
}

func (f *OrgStoreGetByIDFunc) nextHook() func(context.Context, int32) (*types.Org, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreGetByIDFunc) appendCall(r0 OrgStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreGetByIDFuncCall objects describing
// the invocations of this function.
func (f *OrgStoreGetByIDFunc) History() []OrgStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreGetByIDFuncCall is an object that describes an invocation of
// method GetByID on an instance of MockOrgStore.
type OrgStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Org
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgStoreGetByNameFunc describes the behavior when the GetByName method of
// the parent MockOrgStore instance is invoked.
type OrgStoreGetByNameFunc struct {
	defaultHook func(context.Context, string) (*types.Org, error)
	hooks       []func(context.Context, string) (*types.Org, error)
	history     []OrgStoreGetByNameFuncCall
	mutex       sync.Mutex
}

// GetByName delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgStore) GetByName(v0 context.Context, v1 string) (*types.Org, error) {
	r0, r1 := m.GetByNameFunc.nextHook()(v0, v1)
	m.GetByNameFunc.appendCall(OrgStoreGetByNameFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByName method of
// the parent MockOrgStore instance is invoked and the hook queue is empty.
func (f *OrgStoreGetByNameFunc) SetDefaultHook(hook func(context.Context, string) (*types.Org, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByName method of the parent MockOrgStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *OrgStoreGetByNameFunc) PushHook(hook func(context.Context, string) (*types.Org, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgStoreGetByNameFunc) SetDefaultReturn(r0 *types.Org, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*types.Org, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgStoreGetByNameFunc) PushReturn(r0 *types.Org, r1 error) {
	f.PushHook(func(context.Context, string) (*types.Org, error) {
		return r0, r1
	})
}

func (f *OrgStoreGetByNameFunc) nextHook() func(context.Context, string) (*types.Org, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreGetByNameFunc) appendCall(r0 OrgStoreGetByNameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreGetByNameFuncCall objects
// describing the invocations of this function.
func (f *OrgStoreGetByNameFunc) History() []OrgStoreGetByNameFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreGetByNameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreGetByNameFuncCall is an object that describes an invocation of
// method GetByName on an instance of MockOrgStore.
type OrgStoreGetByNameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Org
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreGetByNameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreGetByNameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgStoreGetByUserIDFunc describes the behavior when the GetByUserID
// method of the parent MockOrgStore instance is invoked.
type OrgStoreGetByUserIDFunc struct {
	defaultHook func(context.Context, int32) ([]*types.Org, error)
	hooks       []func(context.Context, int32) ([]*types.Org, error)
	history     []OrgStoreGetByUserIDFuncCall
	mutex       sync.Mutex
}

// GetByUserID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockOrgStore) GetByUserID(v0 context.Context, v1 int32) ([]*types.Org, error) {
	r0, r1 := m.GetByUserIDFunc.nextHook()(v0, v1)
	m.GetByUserIDFunc.appendCall(OrgStoreGetByUserIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByUserID method
// of the parent MockOrgStore instance is invoked and the hook queue is
// empty.
func (f *OrgStoreGetByUserIDFunc) SetDefaultHook(hook func(context.Context, int32) ([]*types.Org, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByUserID method of the parent MockOrgStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *OrgStoreGetByUserIDFunc) PushHook(hook func(context.Context, int32) ([]*types.Org, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgStoreGetByUserIDFunc) SetDefaultReturn(r0 []*types.Org, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) ([]*types.Org, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgStoreGetByUserIDFunc) PushReturn(r0 []*types.Org, r1 error) {
	f.PushHook(func(context.Context, int32) ([]*types.Org, error) {
		return r0, r1
	})
}

func (f *OrgStoreGetByUserIDFunc) nextHook() func(context.Context, int32) ([]*types.Org, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreGetByUserIDFunc) appendCall(r0 OrgStoreGetByUserIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreGetByUserIDFuncCall objects
// describing the invocations of this function.
func (f *OrgStoreGetByUserIDFunc) History() []OrgStoreGetByUserIDFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreGetByUserIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreGetByUserIDFuncCall is an object that describes an invocation of
// method GetByUserID on an instance of MockOrgStore.
type OrgStoreGetByUserIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.Org
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreGetByUserIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreGetByUserIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgStoreGetOrgsWithRepositoriesByUserIDFunc describes the behavior when
// the GetOrgsWithRepositoriesByUserID method of the parent MockOrgStore
// instance is invoked.
type OrgStoreGetOrgsWithRepositoriesByUserIDFunc struct {
	defaultHook func(context.Context, int32) ([]*types.Org, error)
	hooks       []func(context.Context, int32) ([]*types.Org, error)
	history     []OrgStoreGetOrgsWithRepositoriesByUserIDFuncCall
	mutex       sync.Mutex
}

// GetOrgsWithRepositoriesByUserID delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockOrgStore) GetOrgsWithRepositoriesByUserID(v0 context.Context, v1 int32) ([]*types.Org, error) {
	r0, r1 := m.GetOrgsWithRepositoriesByUserIDFunc.nextHook()(v0, v1)
	m.GetOrgsWithRepositoriesByUserIDFunc.appendCall(OrgStoreGetOrgsWithRepositoriesByUserIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetOrgsWithRepositoriesByUserID method of the parent MockOrgStore
// instance is invoked and the hook queue is empty.
func (f *OrgStoreGetOrgsWithRepositoriesByUserIDFunc) SetDefaultHook(hook func(context.Context, int32) ([]*types.Org, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetOrgsWithRepositoriesByUserID method of the parent MockOrgStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *OrgStoreGetOrgsWithRepositoriesByUserIDFunc) PushHook(hook func(context.Context, int32) ([]*types.Org, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgStoreGetOrgsWithRepositoriesByUserIDFunc) SetDefaultReturn(r0 []*types.Org, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) ([]*types.Org, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgStoreGetOrgsWithRepositoriesByUserIDFunc) PushReturn(r0 []*types.Org, r1 error) {
	f.PushHook(func(context.Context, int32) ([]*types.Org, error) {
		return r0, r1
	})
}

func (f *OrgStoreGetOrgsWithRepositoriesByUserIDFunc) nextHook() func(context.Context, int32) ([]*types.Org, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreGetOrgsWithRepositoriesByUserIDFunc) appendCall(r0 OrgStoreGetOrgsWithRepositoriesByUserIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// OrgStoreGetOrgsWithRepositoriesByUserIDFuncCall objects describing the
// invocations of this function.
func (f *OrgStoreGetOrgsWithRepositoriesByUserIDFunc) History() []OrgStoreGetOrgsWithRepositoriesByUserIDFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreGetOrgsWithRepositoriesByUserIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreGetOrgsWithRepositoriesByUserIDFuncCall is an object that
// describes an invocation of method GetOrgsWithRepositoriesByUserID on an
// instance of MockOrgStore.
type OrgStoreGetOrgsWithRepositoriesByUserIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.Org
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreGetOrgsWithRepositoriesByUserIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreGetOrgsWithRepositoriesByUserIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgStoreHandleFunc describes the behavior when the Handle method of the
// parent MockOrgStore instance is invoked.
type OrgStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []OrgStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(OrgStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockOrgStore instance is invoked and the hook queue is empty.
func (f *OrgStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockOrgStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *OrgStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *OrgStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreHandleFunc) appendCall(r0 OrgStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreHandleFuncCall objects describing
// the invocations of this function.
func (f *OrgStoreHandleFunc) History() []OrgStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreHandleFuncCall is an object that describes an invocation of
// method Handle on an instance of MockOrgStore.
type OrgStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OrgStoreHardDeleteFunc describes the behavior when the HardDelete method
// of the parent MockOrgStore instance is invoked.
type OrgStoreHardDeleteFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []OrgStoreHardDeleteFuncCall
	mutex       sync.Mutex
}

// HardDelete delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockOrgStore) HardDelete(v0 context.Context, v1 int32) error {
	r0 := m.HardDeleteFunc.nextHook()(v0, v1)
	m.HardDeleteFunc.appendCall(OrgStoreHardDeleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the HardDelete method of
// the parent MockOrgStore instance is invoked and the hook queue is empty.
func (f *OrgStoreHardDeleteFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// HardDelete method of the parent MockOrgStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *OrgStoreHardDeleteFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgStoreHardDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgStoreHardDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *OrgStoreHardDeleteFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreHardDeleteFunc) appendCall(r0 OrgStoreHardDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreHardDeleteFuncCall objects
// describing the invocations of this function.
func (f *OrgStoreHardDeleteFunc) History() []OrgStoreHardDeleteFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreHardDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreHardDeleteFuncCall is an object that describes an invocation of
// method HardDelete on an instance of MockOrgStore.
type OrgStoreHardDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreHardDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreHardDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OrgStoreListFunc describes the behavior when the List method of the
// parent MockOrgStore instance is invoked.
type OrgStoreListFunc struct {
	defaultHook func(context.Context, *OrgsListOptions) ([]*types.Org, error)
	hooks       []func(context.Context, *OrgsListOptions) ([]*types.Org, error)
	history     []OrgStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgStore) List(v0 context.Context, v1 *OrgsListOptions) ([]*types.Org, error) {
	r0, r1 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(OrgStoreListFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockOrgStore instance is invoked and the hook queue is empty.
func (f *OrgStoreListFunc) SetDefaultHook(hook func(context.Context, *OrgsListOptions) ([]*types.Org, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockOrgStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *OrgStoreListFunc) PushHook(hook func(context.Context, *OrgsListOptions) ([]*types.Org, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgStoreListFunc) SetDefaultReturn(r0 []*types.Org, r1 error) {
	f.SetDefaultHook(func(context.Context, *OrgsListOptions) ([]*types.Org, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgStoreListFunc) PushReturn(r0 []*types.Org, r1 error) {
	f.PushHook(func(context.Context, *OrgsListOptions) ([]*types.Org, error) {
		return r0, r1
	})
}

func (f *OrgStoreListFunc) nextHook() func(context.Context, *OrgsListOptions) ([]*types.Org, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreListFunc) appendCall(r0 OrgStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreListFuncCall objects describing the
// invocations of this function.
func (f *OrgStoreListFunc) History() []OrgStoreListFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreListFuncCall is an object that describes an invocation of method
// List on an instance of MockOrgStore.
type OrgStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *OrgsListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.Org
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgStoreTransactFunc describes the behavior when the Transact method of
// the parent MockOrgStore instance is invoked.
type OrgStoreTransactFunc struct {
	defaultHook func(context.Context) (OrgStore, error)
	hooks       []func(context.Context) (OrgStore, error)
	history     []OrgStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgStore) Transact(v0 context.Context) (OrgStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(OrgStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockOrgStore instance is invoked and the hook queue is empty.
func (f *OrgStoreTransactFunc) SetDefaultHook(hook func(context.Context) (OrgStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockOrgStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *OrgStoreTransactFunc) PushHook(hook func(context.Context) (OrgStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgStoreTransactFunc) SetDefaultReturn(r0 OrgStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (OrgStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgStoreTransactFunc) PushReturn(r0 OrgStore, r1 error) {
	f.PushHook(func(context.Context) (OrgStore, error) {
		return r0, r1
	})
}

func (f *OrgStoreTransactFunc) nextHook() func(context.Context) (OrgStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreTransactFunc) appendCall(r0 OrgStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreTransactFuncCall objects describing
// the invocations of this function.
func (f *OrgStoreTransactFunc) History() []OrgStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreTransactFuncCall is an object that describes an invocation of
// method Transact on an instance of MockOrgStore.
type OrgStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 OrgStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgStoreUpdateFunc describes the behavior when the Update method of the
// parent MockOrgStore instance is invoked.
type OrgStoreUpdateFunc struct {
	defaultHook func(context.Context, int32, *string) (*types.Org, error)
	hooks       []func(context.Context, int32, *string) (*types.Org, error)
	history     []OrgStoreUpdateFuncCall
	mutex       sync.Mutex
}

// Update delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgStore) Update(v0 context.Context, v1 int32, v2 *string) (*types.Org, error) {
	r0, r1 := m.UpdateFunc.nextHook()(v0, v1, v2)
	m.UpdateFunc.appendCall(OrgStoreUpdateFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Update method of the
// parent MockOrgStore instance is invoked and the hook queue is empty.
func (f *OrgStoreUpdateFunc) SetDefaultHook(hook func(context.Context, int32, *string) (*types.Org, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Update method of the parent MockOrgStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *OrgStoreUpdateFunc) PushHook(hook func(context.Context, int32, *string) (*types.Org, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgStoreUpdateFunc) SetDefaultReturn(r0 *types.Org, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, *string) (*types.Org, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgStoreUpdateFunc) PushReturn(r0 *types.Org, r1 error) {
	f.PushHook(func(context.Context, int32, *string) (*types.Org, error) {
		return r0, r1
	})
}

func (f *OrgStoreUpdateFunc) nextHook() func(context.Context, int32, *string) (*types.Org, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreUpdateFunc) appendCall(r0 OrgStoreUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreUpdateFuncCall objects describing
// the invocations of this function.
func (f *OrgStoreUpdateFunc) History() []OrgStoreUpdateFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreUpdateFuncCall is an object that describes an invocation of
// method Update on an instance of MockOrgStore.
type OrgStoreUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Org
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgStoreUpdateOrgsOpenBetaStatsFunc describes the behavior when the
// UpdateOrgsOpenBetaStats method of the parent MockOrgStore instance is
// invoked.
type OrgStoreUpdateOrgsOpenBetaStatsFunc struct {
	defaultHook func(context.Context, string, int32) error
	hooks       []func(context.Context, string, int32) error
	history     []OrgStoreUpdateOrgsOpenBetaStatsFuncCall
	mutex       sync.Mutex
}

// UpdateOrgsOpenBetaStats delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockOrgStore) UpdateOrgsOpenBetaStats(v0 context.Context, v1 string, v2 int32) error {
	r0 := m.UpdateOrgsOpenBetaStatsFunc.nextHook()(v0, v1, v2)
	m.UpdateOrgsOpenBetaStatsFunc.appendCall(OrgStoreUpdateOrgsOpenBetaStatsFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// UpdateOrgsOpenBetaStats method of the parent MockOrgStore instance is
// invoked and the hook queue is empty.
func (f *OrgStoreUpdateOrgsOpenBetaStatsFunc) SetDefaultHook(hook func(context.Context, string, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateOrgsOpenBetaStats method of the parent MockOrgStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *OrgStoreUpdateOrgsOpenBetaStatsFunc) PushHook(hook func(context.Context, string, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgStoreUpdateOrgsOpenBetaStatsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string, int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgStoreUpdateOrgsOpenBetaStatsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string, int32) error {
		return r0
	})
}

func (f *OrgStoreUpdateOrgsOpenBetaStatsFunc) nextHook() func(context.Context, string, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreUpdateOrgsOpenBetaStatsFunc) appendCall(r0 OrgStoreUpdateOrgsOpenBetaStatsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreUpdateOrgsOpenBetaStatsFuncCall
// objects describing the invocations of this function.
func (f *OrgStoreUpdateOrgsOpenBetaStatsFunc) History() []OrgStoreUpdateOrgsOpenBetaStatsFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreUpdateOrgsOpenBetaStatsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreUpdateOrgsOpenBetaStatsFuncCall is an object that describes an
// invocation of method UpdateOrgsOpenBetaStats on an instance of
// MockOrgStore.
type OrgStoreUpdateOrgsOpenBetaStatsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreUpdateOrgsOpenBetaStatsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreUpdateOrgsOpenBetaStatsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OrgStoreWithFunc describes the behavior when the With method of the
// parent MockOrgStore instance is invoked.
type OrgStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) OrgStore
	hooks       []func(basestore.ShareableStore) OrgStore
	history     []OrgStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgStore) With(v0 basestore.ShareableStore) OrgStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(OrgStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockOrgStore instance is invoked and the hook queue is empty.
func (f *OrgStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) OrgStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockOrgStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *OrgStoreWithFunc) PushHook(hook func(basestore.ShareableStore) OrgStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgStoreWithFunc) SetDefaultReturn(r0 OrgStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) OrgStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgStoreWithFunc) PushReturn(r0 OrgStore) {
	f.PushHook(func(basestore.ShareableStore) OrgStore {
		return r0
	})
}

func (f *OrgStoreWithFunc) nextHook() func(basestore.ShareableStore) OrgStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreWithFunc) appendCall(r0 OrgStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreWithFuncCall objects describing the
// invocations of this function.
func (f *OrgStoreWithFunc) History() []OrgStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreWithFuncCall is an object that describes an invocation of method
// With on an instance of MockOrgStore.
type OrgStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 OrgStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockPhabricatorStore is a mock implementation of the PhabricatorStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockPhabricatorStore struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *PhabricatorStoreCreateFunc
	// CreateIfNotExistsFunc is an instance of a mock function object
	// controlling the behavior of the method CreateIfNotExists.
	CreateIfNotExistsFunc *PhabricatorStoreCreateIfNotExistsFunc
	// CreateOrUpdateFunc is an instance of a mock function object
	// controlling the behavior of the method CreateOrUpdate.
	CreateOrUpdateFunc *PhabricatorStoreCreateOrUpdateFunc
	// GetByNameFunc is an instance of a mock function object controlling
	// the behavior of the method GetByName.
	GetByNameFunc *PhabricatorStoreGetByNameFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *PhabricatorStoreHandleFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *PhabricatorStoreTransactFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *PhabricatorStoreWithFunc
}

// NewMockPhabricatorStore creates a new mock of the PhabricatorStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockPhabricatorStore() *MockPhabricatorStore {
	return &MockPhabricatorStore{
		CreateFunc: &PhabricatorStoreCreateFunc{
			defaultHook: func(context.Context, string, api.RepoName, string) (r0 *types.PhabricatorRepo, r1 error) {
				return
			},
		},
		CreateIfNotExistsFunc: &PhabricatorStoreCreateIfNotExistsFunc{
			defaultHook: func(context.Context, string, api.RepoName, string) (r0 *types.PhabricatorRepo, r1 error) {
				return
			},
		},
		CreateOrUpdateFunc: &PhabricatorStoreCreateOrUpdateFunc{
			defaultHook: func(context.Context, string, api.RepoName, string) (r0 *types.PhabricatorRepo, r1 error) {
				return
			},
		},
		GetByNameFunc: &PhabricatorStoreGetByNameFunc{
			defaultHook: func(context.Context, api.RepoName) (r0 *types.PhabricatorRepo, r1 error) {
				return
			},
		},
		HandleFunc: &PhabricatorStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		TransactFunc: &PhabricatorStoreTransactFunc{
			defaultHook: func(context.Context) (r0 PhabricatorStore, r1 error) {
				return
			},
		},
		WithFunc: &PhabricatorStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 PhabricatorStore) {
				return
			},
		},
	}
}

// NewStrictMockPhabricatorStore creates a new mock of the PhabricatorStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockPhabricatorStore() *MockPhabricatorStore {
	return &MockPhabricatorStore{
		CreateFunc: &PhabricatorStoreCreateFunc{
			defaultHook: func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
				panic("unexpected invocation of MockPhabricatorStore.Create")
			},
		},
		CreateIfNotExistsFunc: &PhabricatorStoreCreateIfNotExistsFunc{
			defaultHook: func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
				panic("unexpected invocation of MockPhabricatorStore.CreateIfNotExists")
			},
		},
		CreateOrUpdateFunc: &PhabricatorStoreCreateOrUpdateFunc{
			defaultHook: func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
				panic("unexpected invocation of MockPhabricatorStore.CreateOrUpdate")
			},
		},
		GetByNameFunc: &PhabricatorStoreGetByNameFunc{
			defaultHook: func(context.Context, api.RepoName) (*types.PhabricatorRepo, error) {
				panic("unexpected invocation of MockPhabricatorStore.GetByName")
			},
		},
		HandleFunc: &PhabricatorStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockPhabricatorStore.Handle")
			},
		},
		TransactFunc: &PhabricatorStoreTransactFunc{
			defaultHook: func(context.Context) (PhabricatorStore, error) {
				panic("unexpected invocation of MockPhabricatorStore.Transact")
			},
		},
		WithFunc: &PhabricatorStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) PhabricatorStore {
				panic("unexpected invocation of MockPhabricatorStore.With")
			},
		},
	}
}

// NewMockPhabricatorStoreFrom creates a new mock of the
// MockPhabricatorStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockPhabricatorStoreFrom(i PhabricatorStore) *MockPhabricatorStore {
	return &MockPhabricatorStore{
		CreateFunc: &PhabricatorStoreCreateFunc{
			defaultHook: i.Create,
		},
		CreateIfNotExistsFunc: &PhabricatorStoreCreateIfNotExistsFunc{
			defaultHook: i.CreateIfNotExists,
		},
		CreateOrUpdateFunc: &PhabricatorStoreCreateOrUpdateFunc{
			defaultHook: i.CreateOrUpdate,
		},
		GetByNameFunc: &PhabricatorStoreGetByNameFunc{
			defaultHook: i.GetByName,
		},
		HandleFunc: &PhabricatorStoreHandleFunc{
			defaultHook: i.Handle,
		},
		TransactFunc: &PhabricatorStoreTransactFunc{
			defaultHook: i.Transact,
		},
		WithFunc: &PhabricatorStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// PhabricatorStoreCreateFunc describes the behavior when the Create method
// of the parent MockPhabricatorStore instance is invoked.
type PhabricatorStoreCreateFunc struct {
	defaultHook func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error)
	hooks       []func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error)
	history     []PhabricatorStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPhabricatorStore) Create(v0 context.Context, v1 string, v2 api.RepoName, v3 string) (*types.PhabricatorRepo, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1, v2, v3)
	m.CreateFunc.appendCall(PhabricatorStoreCreateFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockPhabricatorStore instance is invoked and the hook queue is
// empty.
func (f *PhabricatorStoreCreateFunc) SetDefaultHook(hook func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockPhabricatorStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *PhabricatorStoreCreateFunc) PushHook(hook func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PhabricatorStoreCreateFunc) SetDefaultReturn(r0 *types.PhabricatorRepo, r1 error) {
	f.SetDefaultHook(func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PhabricatorStoreCreateFunc) PushReturn(r0 *types.PhabricatorRepo, r1 error) {
	f.PushHook(func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
		return r0, r1
	})
}

func (f *PhabricatorStoreCreateFunc) nextHook() func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PhabricatorStoreCreateFunc) appendCall(r0 PhabricatorStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PhabricatorStoreCreateFuncCall objects
// describing the invocations of this function.
func (f *PhabricatorStoreCreateFunc) History() []PhabricatorStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]PhabricatorStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PhabricatorStoreCreateFuncCall is an object that describes an invocation
// of method Create on an instance of MockPhabricatorStore.
type PhabricatorStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoName
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.PhabricatorRepo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PhabricatorStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PhabricatorStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PhabricatorStoreCreateIfNotExistsFunc describes the behavior when the
// CreateIfNotExists method of the parent MockPhabricatorStore instance is
// invoked.
type PhabricatorStoreCreateIfNotExistsFunc struct {
	defaultHook func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error)
	hooks       []func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error)
	history     []PhabricatorStoreCreateIfNotExistsFuncCall
	mutex       sync.Mutex
}

// CreateIfNotExists delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockPhabricatorStore) CreateIfNotExists(v0 context.Context, v1 string, v2 api.RepoName, v3 string) (*types.PhabricatorRepo, error) {
	r0, r1 := m.CreateIfNotExistsFunc.nextHook()(v0, v1, v2, v3)
	m.CreateIfNotExistsFunc.appendCall(PhabricatorStoreCreateIfNotExistsFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateIfNotExists
// method of the parent MockPhabricatorStore instance is invoked and the
// hook queue is empty.
func (f *PhabricatorStoreCreateIfNotExistsFunc) SetDefaultHook(hook func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateIfNotExists method of the parent MockPhabricatorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *PhabricatorStoreCreateIfNotExistsFunc) PushHook(hook func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PhabricatorStoreCreateIfNotExistsFunc) SetDefaultReturn(r0 *types.PhabricatorRepo, r1 error) {
	f.SetDefaultHook(func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PhabricatorStoreCreateIfNotExistsFunc) PushReturn(r0 *types.PhabricatorRepo, r1 error) {
	f.PushHook(func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
		return r0, r1
	})
}

func (f *PhabricatorStoreCreateIfNotExistsFunc) nextHook() func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PhabricatorStoreCreateIfNotExistsFunc) appendCall(r0 PhabricatorStoreCreateIfNotExistsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PhabricatorStoreCreateIfNotExistsFuncCall
// objects describing the invocations of this function.
func (f *PhabricatorStoreCreateIfNotExistsFunc) History() []PhabricatorStoreCreateIfNotExistsFuncCall {
	f.mutex.Lock()
	history := make([]PhabricatorStoreCreateIfNotExistsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PhabricatorStoreCreateIfNotExistsFuncCall is an object that describes an
// invocation of method CreateIfNotExists on an instance of
// MockPhabricatorStore.
type PhabricatorStoreCreateIfNotExistsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoName
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.PhabricatorRepo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PhabricatorStoreCreateIfNotExistsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PhabricatorStoreCreateIfNotExistsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PhabricatorStoreCreateOrUpdateFunc describes the behavior when the
// CreateOrUpdate method of the parent MockPhabricatorStore instance is
// invoked.
type PhabricatorStoreCreateOrUpdateFunc struct {
	defaultHook func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error)
	hooks       []func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error)
	history     []PhabricatorStoreCreateOrUpdateFuncCall
	mutex       sync.Mutex
}

// CreateOrUpdate delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockPhabricatorStore) CreateOrUpdate(v0 context.Context, v1 string, v2 api.RepoName, v3 string) (*types.PhabricatorRepo, error) {
	r0, r1 := m.CreateOrUpdateFunc.nextHook()(v0, v1, v2, v3)
	m.CreateOrUpdateFunc.appendCall(PhabricatorStoreCreateOrUpdateFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateOrUpdate
// method of the parent MockPhabricatorStore instance is invoked and the
// hook queue is empty.
func (f *PhabricatorStoreCreateOrUpdateFunc) SetDefaultHook(hook func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateOrUpdate method of the parent MockPhabricatorStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *PhabricatorStoreCreateOrUpdateFunc) PushHook(hook func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PhabricatorStoreCreateOrUpdateFunc) SetDefaultReturn(r0 *types.PhabricatorRepo, r1 error) {
	f.SetDefaultHook(func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PhabricatorStoreCreateOrUpdateFunc) PushReturn(r0 *types.PhabricatorRepo, r1 error) {
	f.PushHook(func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
		return r0, r1
	})
}

func (f *PhabricatorStoreCreateOrUpdateFunc) nextHook() func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PhabricatorStoreCreateOrUpdateFunc) appendCall(r0 PhabricatorStoreCreateOrUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PhabricatorStoreCreateOrUpdateFuncCall
// objects describing the invocations of this function.
func (f *PhabricatorStoreCreateOrUpdateFunc) History() []PhabricatorStoreCreateOrUpdateFuncCall {
	f.mutex.Lock()
	history := make([]PhabricatorStoreCreateOrUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PhabricatorStoreCreateOrUpdateFuncCall is an object that describes an
// invocation of method CreateOrUpdate on an instance of
// MockPhabricatorStore.
type PhabricatorStoreCreateOrUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoName
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.PhabricatorRepo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PhabricatorStoreCreateOrUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PhabricatorStoreCreateOrUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PhabricatorStoreGetByNameFunc describes the behavior when the GetByName
// method of the parent MockPhabricatorStore instance is invoked.
type PhabricatorStoreGetByNameFunc struct {
	defaultHook func(context.Context, api.RepoName) (*types.PhabricatorRepo, error)
	hooks       []func(context.Context, api.RepoName) (*types.PhabricatorRepo, error)
	history     []PhabricatorStoreGetByNameFuncCall
	mutex       sync.Mutex
}

// GetByName delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPhabricatorStore) GetByName(v0 context.Context, v1 api.RepoName) (*types.PhabricatorRepo, error) {
	r0, r1 := m.GetByNameFunc.nextHook()(v0, v1)
	m.GetByNameFunc.appendCall(PhabricatorStoreGetByNameFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByName method of
// the parent MockPhabricatorStore instance is invoked and the hook queue is
// empty.
func (f *PhabricatorStoreGetByNameFunc) SetDefaultHook(hook func(context.Context, api.RepoName) (*types.PhabricatorRepo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByName method of the parent MockPhabricatorStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *PhabricatorStoreGetByNameFunc) PushHook(hook func(context.Context, api.RepoName) (*types.PhabricatorRepo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PhabricatorStoreGetByNameFunc) SetDefaultReturn(r0 *types.PhabricatorRepo, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) (*types.PhabricatorRepo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PhabricatorStoreGetByNameFunc) PushReturn(r0 *types.PhabricatorRepo, r1 error) {
	f.PushHook(func(context.Context, api.RepoName) (*types.PhabricatorRepo, error) {
		return r0, r1
	})
}

func (f *PhabricatorStoreGetByNameFunc) nextHook() func(context.Context, api.RepoName) (*types.PhabricatorRepo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PhabricatorStoreGetByNameFunc) appendCall(r0 PhabricatorStoreGetByNameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PhabricatorStoreGetByNameFuncCall objects
// describing the invocations of this function.
func (f *PhabricatorStoreGetByNameFunc) History() []PhabricatorStoreGetByNameFuncCall {
	f.mutex.Lock()
	history := make([]PhabricatorStoreGetByNameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PhabricatorStoreGetByNameFuncCall is an object that describes an
// invocation of method GetByName on an instance of MockPhabricatorStore.
type PhabricatorStoreGetByNameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.PhabricatorRepo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PhabricatorStoreGetByNameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PhabricatorStoreGetByNameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PhabricatorStoreHandleFunc describes the behavior when the Handle method
// of the parent MockPhabricatorStore instance is invoked.
type PhabricatorStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []PhabricatorStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPhabricatorStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(PhabricatorStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockPhabricatorStore instance is invoked and the hook queue is
// empty.
func (f *PhabricatorStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockPhabricatorStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *PhabricatorStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PhabricatorStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PhabricatorStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *PhabricatorStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PhabricatorStoreHandleFunc) appendCall(r0 PhabricatorStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PhabricatorStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *PhabricatorStoreHandleFunc) History() []PhabricatorStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]PhabricatorStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PhabricatorStoreHandleFuncCall is an object that describes an invocation
// of method Handle on an instance of MockPhabricatorStore.
type PhabricatorStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PhabricatorStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PhabricatorStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// PhabricatorStoreTransactFunc describes the behavior when the Transact
// method of the parent MockPhabricatorStore instance is invoked.
type PhabricatorStoreTransactFunc struct {
	defaultHook func(context.Context) (PhabricatorStore, error)
	hooks       []func(context.Context) (PhabricatorStore, error)
	history     []PhabricatorStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPhabricatorStore) Transact(v0 context.Context) (PhabricatorStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(PhabricatorStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockPhabricatorStore instance is invoked and the hook queue is
// empty.
func (f *PhabricatorStoreTransactFunc) SetDefaultHook(hook func(context.Context) (PhabricatorStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockPhabricatorStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *PhabricatorStoreTransactFunc) PushHook(hook func(context.Context) (PhabricatorStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PhabricatorStoreTransactFunc) SetDefaultReturn(r0 PhabricatorStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (PhabricatorStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PhabricatorStoreTransactFunc) PushReturn(r0 PhabricatorStore, r1 error) {
	f.PushHook(func(context.Context) (PhabricatorStore, error) {
		return r0, r1
	})
}

func (f *PhabricatorStoreTransactFunc) nextHook() func(context.Context) (PhabricatorStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PhabricatorStoreTransactFunc) appendCall(r0 PhabricatorStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PhabricatorStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *PhabricatorStoreTransactFunc) History() []PhabricatorStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]PhabricatorStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PhabricatorStoreTransactFuncCall is an object that describes an
// invocation of method Transact on an instance of MockPhabricatorStore.
type PhabricatorStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 PhabricatorStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PhabricatorStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PhabricatorStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PhabricatorStoreWithFunc describes the behavior when the With method of
// the parent MockPhabricatorStore instance is invoked.
type PhabricatorStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) PhabricatorStore
	hooks       []func(basestore.ShareableStore) PhabricatorStore
	history     []PhabricatorStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPhabricatorStore) With(v0 basestore.ShareableStore) PhabricatorStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(PhabricatorStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockPhabricatorStore instance is invoked and the hook queue is
// empty.
func (f *PhabricatorStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) PhabricatorStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockPhabricatorStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *PhabricatorStoreWithFunc) PushHook(hook func(basestore.ShareableStore) PhabricatorStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PhabricatorStoreWithFunc) SetDefaultReturn(r0 PhabricatorStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) PhabricatorStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PhabricatorStoreWithFunc) PushReturn(r0 PhabricatorStore) {
	f.PushHook(func(basestore.ShareableStore) PhabricatorStore {
		return r0
	})
}

func (f *PhabricatorStoreWithFunc) nextHook() func(basestore.ShareableStore) PhabricatorStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PhabricatorStoreWithFunc) appendCall(r0 PhabricatorStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PhabricatorStoreWithFuncCall objects
// describing the invocations of this function.
func (f *PhabricatorStoreWithFunc) History() []PhabricatorStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]PhabricatorStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PhabricatorStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockPhabricatorStore.
type PhabricatorStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 PhabricatorStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PhabricatorStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PhabricatorStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockRepoStore is a mock implementation of the RepoStore interface (from
// the package github.com/sourcegraph/sourcegraph/internal/database) used
// for unit testing.
type MockRepoStore struct {
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *RepoStoreCountFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *RepoStoreCreateFunc
	// DeleteFunc is an instance of a mock function object controlling the
	// behavior of the method Delete.
	DeleteFunc *RepoStoreDeleteFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *RepoStoreDoneFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *RepoStoreGetFunc
	// GetByHashedNameFunc is an instance of a mock function object
	// controlling the behavior of the method GetByHashedName.
	GetByHashedNameFunc *RepoStoreGetByHashedNameFunc
	// GetByIDsFunc is an instance of a mock function object controlling the
	// behavior of the method GetByIDs.
	GetByIDsFunc *RepoStoreGetByIDsFunc
	// GetByNameFunc is an instance of a mock function object controlling
	// the behavior of the method GetByName.
	GetByNameFunc *RepoStoreGetByNameFunc
	// GetFirstRepoNameByCloneURLFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetFirstRepoNameByCloneURL.
	GetFirstRepoNameByCloneURLFunc *RepoStoreGetFirstRepoNameByCloneURLFunc
	// GetReposSetByIDsFunc is an instance of a mock function object
	// controlling the behavior of the method GetReposSetByIDs.
	GetReposSetByIDsFunc *RepoStoreGetReposSetByIDsFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *RepoStoreHandleFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *RepoStoreListFunc
	// ListIndexableReposFunc is an instance of a mock function object
	// controlling the behavior of the method ListIndexableRepos.
	ListIndexableReposFunc *RepoStoreListIndexableReposFunc
	// ListMinimalReposFunc is an instance of a mock function object
	// controlling the behavior of the method ListMinimalRepos.
	ListMinimalReposFunc *RepoStoreListMinimalReposFunc
	// MetadataFunc is an instance of a mock function object controlling the
	// behavior of the method Metadata.
	MetadataFunc *RepoStoreMetadataFunc
	// QueryFunc is an instance of a mock function object controlling the
	// behavior of the method Query.
	QueryFunc *RepoStoreQueryFunc
	// StreamMinimalReposFunc is an instance of a mock function object
	// controlling the behavior of the method StreamMinimalRepos.
	StreamMinimalReposFunc *RepoStoreStreamMinimalReposFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *RepoStoreTransactFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *RepoStoreWithFunc
}

// NewMockRepoStore creates a new mock of the RepoStore interface. All
// methods return zero values for all results, unless overwritten.
func NewMockRepoStore() *MockRepoStore {
	return &MockRepoStore{
		CountFunc: &RepoStoreCountFunc{
			defaultHook: func(context.Context, ReposListOptions) (r0 int, r1 error) {
				return
			},
		},
		CreateFunc: &RepoStoreCreateFunc{
			defaultHook: func(context.Context, ...*types.Repo) (r0 error) {
				return
			},
		},
		DeleteFunc: &RepoStoreDeleteFunc{
			defaultHook: func(context.Context, ...api.RepoID) (r0 error) {
				return
			},
		},
		DoneFunc: &RepoStoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		GetFunc: &RepoStoreGetFunc{
			defaultHook: func(context.Context, api.RepoID) (r0 *types.Repo, r1 error) {
				return
			},
		},
		GetByHashedNameFunc: &RepoStoreGetByHashedNameFunc{
			defaultHook: func(context.Context, api.RepoHashedName) (r0 *types.Repo, r1 error) {
				return
			},
		},
		GetByIDsFunc: &RepoStoreGetByIDsFunc{
			defaultHook: func(context.Context, ...api.RepoID) (r0 []*types.Repo, r1 error) {
				return
			},
		},
		GetByNameFunc: &RepoStoreGetByNameFunc{
			defaultHook: func(context.Context, api.RepoName) (r0 *types.Repo, r1 error) {
				return
			},
		},
		GetFirstRepoNameByCloneURLFunc: &RepoStoreGetFirstRepoNameByCloneURLFunc{
			defaultHook: func(context.Context, string) (r0 api.RepoName, r1 error) {
				return
			},
		},
		GetReposSetByIDsFunc: &RepoStoreGetReposSetByIDsFunc{
			defaultHook: func(context.Context, ...api.RepoID) (r0 map[api.RepoID]*types.Repo, r1 error) {
				return
			},
		},
		HandleFunc: &RepoStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		ListFunc: &RepoStoreListFunc{
			defaultHook: func(context.Context, ReposListOptions) (r0 []*types.Repo, r1 error) {
				return
			},
		},
		ListIndexableReposFunc: &RepoStoreListIndexableReposFunc{
			defaultHook: func(context.Context, ListIndexableReposOptions) (r0 []types.MinimalRepo, r1 error) {
				return
			},
		},
		ListMinimalReposFunc: &RepoStoreListMinimalReposFunc{
			defaultHook: func(context.Context, ReposListOptions) (r0 []types.MinimalRepo, r1 error) {
				return
			},
		},
		MetadataFunc: &RepoStoreMetadataFunc{
			defaultHook: func(context.Context, ...api.RepoID) (r0 []*types.SearchedRepo, r1 error) {
				return
			},
		},
		QueryFunc: &RepoStoreQueryFunc{
			defaultHook: func(context.Context, *sqlf.Query) (r0 *sql.Rows, r1 error) {
				return
			},
		},
		StreamMinimalReposFunc: &RepoStoreStreamMinimalReposFunc{
			defaultHook: func(context.Context, ReposListOptions, func(*types.MinimalRepo)) (r0 error) {
				return
			},
		},
		TransactFunc: &RepoStoreTransactFunc{
			defaultHook: func(context.Context) (r0 RepoStore, r1 error) {
				return
			},
		},
		WithFunc: &RepoStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 RepoStore) {
				return
			},
		},
	}
}

// NewStrictMockRepoStore creates a new mock of the RepoStore interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockRepoStore() *MockRepoStore {
	return &MockRepoStore{
		CountFunc: &RepoStoreCountFunc{
			defaultHook: func(context.Context, ReposListOptions) (int, error) {
				panic("unexpected invocation of MockRepoStore.Count")
			},
		},
		CreateFunc: &RepoStoreCreateFunc{
			defaultHook: func(context.Context, ...*types.Repo) error {
				panic("unexpected invocation of MockRepoStore.Create")
			},
		},
		DeleteFunc: &RepoStoreDeleteFunc{
			defaultHook: func(context.Context, ...api.RepoID) error {
				panic("unexpected invocation of MockRepoStore.Delete")
			},
		},
		DoneFunc: &RepoStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockRepoStore.Done")
			},
		},
		GetFunc: &RepoStoreGetFunc{
			defaultHook: func(context.Context, api.RepoID) (*types.Repo, error) {
				panic("unexpected invocation of MockRepoStore.Get")
			},
		},
		GetByHashedNameFunc: &RepoStoreGetByHashedNameFunc{
			defaultHook: func(context.Context, api.RepoHashedName) (*types.Repo, error) {
				panic("unexpected invocation of MockRepoStore.GetByHashedName")
			},
		},
		GetByIDsFunc: &RepoStoreGetByIDsFunc{
			defaultHook: func(context.Context, ...api.RepoID) ([]*types.Repo, error) {
				panic("unexpected invocation of MockRepoStore.GetByIDs")
			},
		},
		GetByNameFunc: &RepoStoreGetByNameFunc{
			defaultHook: func(context.Context, api.RepoName) (*types.Repo, error) {
				panic("unexpected invocation of MockRepoStore.GetByName")
			},
		},
		GetFirstRepoNameByCloneURLFunc: &RepoStoreGetFirstRepoNameByCloneURLFunc{
			defaultHook: func(context.Context, string) (api.RepoName, error) {
				panic("unexpected invocation of MockRepoStore.GetFirstRepoNameByCloneURL")
			},
		},
		GetReposSetByIDsFunc: &RepoStoreGetReposSetByIDsFunc{
			defaultHook: func(context.Context, ...api.RepoID) (map[api.RepoID]*types.Repo, error) {
				panic("unexpected invocation of MockRepoStore.GetReposSetByIDs")
			},
		},
		HandleFunc: &RepoStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockRepoStore.Handle")
			},
		},
		ListFunc: &RepoStoreListFunc{
			defaultHook: func(context.Context, ReposListOptions) ([]*types.Repo, error) {
				panic("unexpected invocation of MockRepoStore.List")
			},
		},
		ListIndexableReposFunc: &RepoStoreListIndexableReposFunc{
			defaultHook: func(context.Context, ListIndexableReposOptions) ([]types.MinimalRepo, error) {
				panic("unexpected invocation of MockRepoStore.ListIndexableRepos")
			},
		},
		ListMinimalReposFunc: &RepoStoreListMinimalReposFunc{
			defaultHook: func(context.Context, ReposListOptions) ([]types.MinimalRepo, error) {
				panic("unexpected invocation of MockRepoStore.ListMinimalRepos")
			},
		},
		MetadataFunc: &RepoStoreMetadataFunc{
			defaultHook: func(context.Context, ...api.RepoID) ([]*types.SearchedRepo, error) {
				panic("unexpected invocation of MockRepoStore.Metadata")
			},
		},
		QueryFunc: &RepoStoreQueryFunc{
			defaultHook: func(context.Context, *sqlf.Query) (*sql.Rows, error) {
				panic("unexpected invocation of MockRepoStore.Query")
			},
		},
		StreamMinimalReposFunc: &RepoStoreStreamMinimalReposFunc{
			defaultHook: func(context.Context, ReposListOptions, func(*types.MinimalRepo)) error {
				panic("unexpected invocation of MockRepoStore.StreamMinimalRepos")
			},
		},
		TransactFunc: &RepoStoreTransactFunc{
			defaultHook: func(context.Context) (RepoStore, error) {
				panic("unexpected invocation of MockRepoStore.Transact")
			},
		},
		WithFunc: &RepoStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) RepoStore {
				panic("unexpected invocation of MockRepoStore.With")
			},
		},
	}
}

// NewMockRepoStoreFrom creates a new mock of the MockRepoStore interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockRepoStoreFrom(i RepoStore) *MockRepoStore {
	return &MockRepoStore{
		CountFunc: &RepoStoreCountFunc{
			defaultHook: i.Count,
		},
		CreateFunc: &RepoStoreCreateFunc{
			defaultHook: i.Create,
		},
		DeleteFunc: &RepoStoreDeleteFunc{
			defaultHook: i.Delete,
		},
		DoneFunc: &RepoStoreDoneFunc{
			defaultHook: i.Done,
		},
		GetFunc: &RepoStoreGetFunc{
			defaultHook: i.Get,
		},
		GetByHashedNameFunc: &RepoStoreGetByHashedNameFunc{
			defaultHook: i.GetByHashedName,
		},
		GetByIDsFunc: &RepoStoreGetByIDsFunc{
			defaultHook: i.GetByIDs,
		},
		GetByNameFunc: &RepoStoreGetByNameFunc{
			defaultHook: i.GetByName,
		},
		GetFirstRepoNameByCloneURLFunc: &RepoStoreGetFirstRepoNameByCloneURLFunc{
			defaultHook: i.GetFirstRepoNameByCloneURL,
		},
		GetReposSetByIDsFunc: &RepoStoreGetReposSetByIDsFunc{
			defaultHook: i.GetReposSetByIDs,
		},
		HandleFunc: &RepoStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListFunc: &RepoStoreListFunc{
			defaultHook: i.List,
		},
		ListIndexableReposFunc: &RepoStoreListIndexableReposFunc{
			defaultHook: i.ListIndexableRepos,
		},
		ListMinimalReposFunc: &RepoStoreListMinimalReposFunc{
			defaultHook: i.ListMinimalRepos,
		},
		MetadataFunc: &RepoStoreMetadataFunc{
			defaultHook: i.Metadata,
		},
		QueryFunc: &RepoStoreQueryFunc{
			defaultHook: i.Query,
		},
		StreamMinimalReposFunc: &RepoStoreStreamMinimalReposFunc{
			defaultHook: i.StreamMinimalRepos,
		},
		TransactFunc: &RepoStoreTransactFunc{
			defaultHook: i.Transact,
		},
		WithFunc: &RepoStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// RepoStoreCountFunc describes the behavior when the Count method of the
// parent MockRepoStore instance is invoked.
type RepoStoreCountFunc struct {
	defaultHook func(context.Context, ReposListOptions) (int, error)
	hooks       []func(context.Context, ReposListOptions) (int, error)
	history     []RepoStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) Count(v0 context.Context, v1 ReposListOptions) (int, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(RepoStoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreCountFunc) SetDefaultHook(hook func(context.Context, ReposListOptions) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockRepoStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *RepoStoreCountFunc) PushHook(hook func(context.Context, ReposListOptions) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, ReposListOptions) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, ReposListOptions) (int, error) {
		return r0, r1
	})
}

func (f *RepoStoreCountFunc) nextHook() func(context.Context, ReposListOptions) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreCountFunc) appendCall(r0 RepoStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreCountFuncCall objects describing
// the invocations of this function.
func (f *RepoStoreCountFunc) History() []RepoStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreCountFuncCall is an object that describes an invocation of
// method Count on an instance of MockRepoStore.
type RepoStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ReposListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreCreateFunc describes the behavior when the Create method of the
// parent MockRepoStore instance is invoked.
type RepoStoreCreateFunc struct {
	defaultHook func(context.Context, ...*types.Repo) error
	hooks       []func(context.Context, ...*types.Repo) error
	history     []RepoStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) Create(v0 context.Context, v1 ...*types.Repo) error {
	r0 := m.CreateFunc.nextHook()(v0, v1...)
	m.CreateFunc.appendCall(RepoStoreCreateFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreCreateFunc) SetDefaultHook(hook func(context.Context, ...*types.Repo) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockRepoStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *RepoStoreCreateFunc) PushHook(hook func(context.Context, ...*types.Repo) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreCreateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ...*types.Repo) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreCreateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ...*types.Repo) error {
		return r0
	})
}

func (f *RepoStoreCreateFunc) nextHook() func(context.Context, ...*types.Repo) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreCreateFunc) appendCall(r0 RepoStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreCreateFuncCall objects describing
// the invocations of this function.
func (f *RepoStoreCreateFunc) History() []RepoStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreCreateFuncCall is an object that describes an invocation of
// method Create on an instance of MockRepoStore.
type RepoStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []*types.Repo
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c RepoStoreCreateFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RepoStoreDeleteFunc describes the behavior when the Delete method of the
// parent MockRepoStore instance is invoked.
type RepoStoreDeleteFunc struct {
	defaultHook func(context.Context, ...api.RepoID) error
	hooks       []func(context.Context, ...api.RepoID) error
	history     []RepoStoreDeleteFuncCall
	mutex       sync.Mutex
}

// Delete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) Delete(v0 context.Context, v1 ...api.RepoID) error {
	r0 := m.DeleteFunc.nextHook()(v0, v1...)
	m.DeleteFunc.appendCall(RepoStoreDeleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Delete method of the
// parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreDeleteFunc) SetDefaultHook(hook func(context.Context, ...api.RepoID) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Delete method of the parent MockRepoStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *RepoStoreDeleteFunc) PushHook(hook func(context.Context, ...api.RepoID) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ...api.RepoID) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ...api.RepoID) error {
		return r0
	})
}

func (f *RepoStoreDeleteFunc) nextHook() func(context.Context, ...api.RepoID) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreDeleteFunc) appendCall(r0 RepoStoreDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreDeleteFuncCall objects describing
// the invocations of this function.
func (f *RepoStoreDeleteFunc) History() []RepoStoreDeleteFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreDeleteFuncCall is an object that describes an invocation of
// method Delete on an instance of MockRepoStore.
type RepoStoreDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c RepoStoreDeleteFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RepoStoreDoneFunc describes the behavior when the Done method of the
// parent MockRepoStore instance is invoked.
type RepoStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []RepoStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(RepoStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockRepoStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *RepoStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *RepoStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreDoneFunc) appendCall(r0 RepoStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreDoneFuncCall objects describing
// the invocations of this function.
func (f *RepoStoreDoneFunc) History() []RepoStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreDoneFuncCall is an object that describes an invocation of method
// Done on an instance of MockRepoStore.
type RepoStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RepoStoreGetFunc describes the behavior when the Get method of the parent
// MockRepoStore instance is invoked.
type RepoStoreGetFunc struct {
	defaultHook func(context.Context, api.RepoID) (*types.Repo, error)
	hooks       []func(context.Context, api.RepoID) (*types.Repo, error)
	history     []RepoStoreGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) Get(v0 context.Context, v1 api.RepoID) (*types.Repo, error) {
	r0, r1 := m.GetFunc.nextHook()(v0, v1)
	m.GetFunc.appendCall(RepoStoreGetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreGetFunc) SetDefaultHook(hook func(context.Context, api.RepoID) (*types.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockRepoStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *RepoStoreGetFunc) PushHook(hook func(context.Context, api.RepoID) (*types.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreGetFunc) SetDefaultReturn(r0 *types.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoID) (*types.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreGetFunc) PushReturn(r0 *types.Repo, r1 error) {
	f.PushHook(func(context.Context, api.RepoID) (*types.Repo, error) {
		return r0, r1
	})
}

func (f *RepoStoreGetFunc) nextHook() func(context.Context, api.RepoID) (*types.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreGetFunc) appendCall(r0 RepoStoreGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreGetFuncCall objects describing the
// invocations of this function.
func (f *RepoStoreGetFunc) History() []RepoStoreGetFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreGetFuncCall is an object that describes an invocation of method
// Get on an instance of MockRepoStore.
type RepoStoreGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreGetByHashedNameFunc describes the behavior when the
// GetByHashedName method of the parent MockRepoStore instance is invoked.
type RepoStoreGetByHashedNameFunc struct {
	defaultHook func(context.Context, api.RepoHashedName) (*types.Repo, error)
	hooks       []func(context.Context, api.RepoHashedName) (*types.Repo, error)
	history     []RepoStoreGetByHashedNameFuncCall
	mutex       sync.Mutex
}

// GetByHashedName delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockRepoStore) GetByHashedName(v0 context.Context, v1 api.RepoHashedName) (*types.Repo, error) {
	r0, r1 := m.GetByHashedNameFunc.nextHook()(v0, v1)
	m.GetByHashedNameFunc.appendCall(RepoStoreGetByHashedNameFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByHashedName
// method of the parent MockRepoStore instance is invoked and the hook queue
// is empty.
func (f *RepoStoreGetByHashedNameFunc) SetDefaultHook(hook func(context.Context, api.RepoHashedName) (*types.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByHashedName method of the parent MockRepoStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *RepoStoreGetByHashedNameFunc) PushHook(hook func(context.Context, api.RepoHashedName) (*types.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreGetByHashedNameFunc) SetDefaultReturn(r0 *types.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoHashedName) (*types.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreGetByHashedNameFunc) PushReturn(r0 *types.Repo, r1 error) {
	f.PushHook(func(context.Context, api.RepoHashedName) (*types.Repo, error) {
		return r0, r1
	})
}

func (f *RepoStoreGetByHashedNameFunc) nextHook() func(context.Context, api.RepoHashedName) (*types.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreGetByHashedNameFunc) appendCall(r0 RepoStoreGetByHashedNameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreGetByHashedNameFuncCall objects
// describing the invocations of this function.
func (f *RepoStoreGetByHashedNameFunc) History() []RepoStoreGetByHashedNameFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreGetByHashedNameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreGetByHashedNameFuncCall is an object that describes an
// invocation of method GetByHashedName on an instance of MockRepoStore.
type RepoStoreGetByHashedNameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoHashedName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreGetByHashedNameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreGetByHashedNameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreGetByIDsFunc describes the behavior when the GetByIDs method of
// the parent MockRepoStore instance is invoked.
type RepoStoreGetByIDsFunc struct {
	defaultHook func(context.Context, ...api.RepoID) ([]*types.Repo, error)
	hooks       []func(context.Context, ...api.RepoID) ([]*types.Repo, error)
	history     []RepoStoreGetByIDsFuncCall
	mutex       sync.Mutex
}

// GetByIDs delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) GetByIDs(v0 context.Context, v1 ...api.RepoID) ([]*types.Repo, error) {
	r0, r1 := m.GetByIDsFunc.nextHook()(v0, v1...)
	m.GetByIDsFunc.appendCall(RepoStoreGetByIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByIDs method of
// the parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreGetByIDsFunc) SetDefaultHook(hook func(context.Context, ...api.RepoID) ([]*types.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByIDs method of the parent MockRepoStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *RepoStoreGetByIDsFunc) PushHook(hook func(context.Context, ...api.RepoID) ([]*types.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreGetByIDsFunc) SetDefaultReturn(r0 []*types.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, ...api.RepoID) ([]*types.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreGetByIDsFunc) PushReturn(r0 []*types.Repo, r1 error) {
	f.PushHook(func(context.Context, ...api.RepoID) ([]*types.Repo, error) {
		return r0, r1
	})
}

func (f *RepoStoreGetByIDsFunc) nextHook() func(context.Context, ...api.RepoID) ([]*types.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreGetByIDsFunc) appendCall(r0 RepoStoreGetByIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreGetByIDsFuncCall objects
// describing the invocations of this function.
func (f *RepoStoreGetByIDsFunc) History() []RepoStoreGetByIDsFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreGetByIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreGetByIDsFuncCall is an object that describes an invocation of
// method GetByIDs on an instance of MockRepoStore.
type RepoStoreGetByIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c RepoStoreGetByIDsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreGetByIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreGetByNameFunc describes the behavior when the GetByName method
// of the parent MockRepoStore instance is invoked.
type RepoStoreGetByNameFunc struct {
	defaultHook func(context.Context, api.RepoName) (*types.Repo, error)
	hooks       []func(context.Context, api.RepoName) (*types.Repo, error)
	history     []RepoStoreGetByNameFuncCall
	mutex       sync.Mutex
}

// GetByName delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) GetByName(v0 context.Context, v1 api.RepoName) (*types.Repo, error) {
	r0, r1 := m.GetByNameFunc.nextHook()(v0, v1)
	m.GetByNameFunc.appendCall(RepoStoreGetByNameFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByName method of
// the parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreGetByNameFunc) SetDefaultHook(hook func(context.Context, api.RepoName) (*types.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByName method of the parent MockRepoStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *RepoStoreGetByNameFunc) PushHook(hook func(context.Context, api.RepoName) (*types.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreGetByNameFunc) SetDefaultReturn(r0 *types.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) (*types.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreGetByNameFunc) PushReturn(r0 *types.Repo, r1 error) {
	f.PushHook(func(context.Context, api.RepoName) (*types.Repo, error) {
		return r0, r1
	})
}

func (f *RepoStoreGetByNameFunc) nextHook() func(context.Context, api.RepoName) (*types.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreGetByNameFunc) appendCall(r0 RepoStoreGetByNameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreGetByNameFuncCall objects
// describing the invocations of this function.
func (f *RepoStoreGetByNameFunc) History() []RepoStoreGetByNameFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreGetByNameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreGetByNameFuncCall is an object that describes an invocation of
// method GetByName on an instance of MockRepoStore.
type RepoStoreGetByNameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreGetByNameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreGetByNameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreGetFirstRepoNameByCloneURLFunc describes the behavior when the
// GetFirstRepoNameByCloneURL method of the parent MockRepoStore instance is
// invoked.
type RepoStoreGetFirstRepoNameByCloneURLFunc struct {
	defaultHook func(context.Context, string) (api.RepoName, error)
	hooks       []func(context.Context, string) (api.RepoName, error)
	history     []RepoStoreGetFirstRepoNameByCloneURLFuncCall
	mutex       sync.Mutex
}

// GetFirstRepoNameByCloneURL delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockRepoStore) GetFirstRepoNameByCloneURL(v0 context.Context, v1 string) (api.RepoName, error) {
	r0, r1 := m.GetFirstRepoNameByCloneURLFunc.nextHook()(v0, v1)
	m.GetFirstRepoNameByCloneURLFunc.appendCall(RepoStoreGetFirstRepoNameByCloneURLFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetFirstRepoNameByCloneURL method of the parent MockRepoStore instance is
// invoked and the hook queue is empty.
func (f *RepoStoreGetFirstRepoNameByCloneURLFunc) SetDefaultHook(hook func(context.Context, string) (api.RepoName, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetFirstRepoNameByCloneURL method of the parent MockRepoStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *RepoStoreGetFirstRepoNameByCloneURLFunc) PushHook(hook func(context.Context, string) (api.RepoName, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreGetFirstRepoNameByCloneURLFunc) SetDefaultReturn(r0 api.RepoName, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (api.RepoName, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreGetFirstRepoNameByCloneURLFunc) PushReturn(r0 api.RepoName, r1 error) {
	f.PushHook(func(context.Context, string) (api.RepoName, error) {
		return r0, r1
	})
}

func (f *RepoStoreGetFirstRepoNameByCloneURLFunc) nextHook() func(context.Context, string) (api.RepoName, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreGetFirstRepoNameByCloneURLFunc) appendCall(r0 RepoStoreGetFirstRepoNameByCloneURLFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreGetFirstRepoNameByCloneURLFuncCall
// objects describing the invocations of this function.
func (f *RepoStoreGetFirstRepoNameByCloneURLFunc) History() []RepoStoreGetFirstRepoNameByCloneURLFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreGetFirstRepoNameByCloneURLFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreGetFirstRepoNameByCloneURLFuncCall is an object that describes
// an invocation of method GetFirstRepoNameByCloneURL on an instance of
// MockRepoStore.
type RepoStoreGetFirstRepoNameByCloneURLFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 api.RepoName
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreGetFirstRepoNameByCloneURLFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreGetFirstRepoNameByCloneURLFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreGetReposSetByIDsFunc describes the behavior when the
// GetReposSetByIDs method of the parent MockRepoStore instance is invoked.
type RepoStoreGetReposSetByIDsFunc struct {
	defaultHook func(context.Context, ...api.RepoID) (map[api.RepoID]*types.Repo, error)
	hooks       []func(context.Context, ...api.RepoID) (map[api.RepoID]*types.Repo, error)
	history     []RepoStoreGetReposSetByIDsFuncCall
	mutex       sync.Mutex
}

// GetReposSetByIDs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockRepoStore) GetReposSetByIDs(v0 context.Context, v1 ...api.RepoID) (map[api.RepoID]*types.Repo, error) {
	r0, r1 := m.GetReposSetByIDsFunc.nextHook()(v0, v1...)
	m.GetReposSetByIDsFunc.appendCall(RepoStoreGetReposSetByIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetReposSetByIDs
// method of the parent MockRepoStore instance is invoked and the hook queue
// is empty.
func (f *RepoStoreGetReposSetByIDsFunc) SetDefaultHook(hook func(context.Context, ...api.RepoID) (map[api.RepoID]*types.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetReposSetByIDs method of the parent MockRepoStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *RepoStoreGetReposSetByIDsFunc) PushHook(hook func(context.Context, ...api.RepoID) (map[api.RepoID]*types.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreGetReposSetByIDsFunc) SetDefaultReturn(r0 map[api.RepoID]*types.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, ...api.RepoID) (map[api.RepoID]*types.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreGetReposSetByIDsFunc) PushReturn(r0 map[api.RepoID]*types.Repo, r1 error) {
	f.PushHook(func(context.Context, ...api.RepoID) (map[api.RepoID]*types.Repo, error) {
		return r0, r1
	})
}

func (f *RepoStoreGetReposSetByIDsFunc) nextHook() func(context.Context, ...api.RepoID) (map[api.RepoID]*types.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreGetReposSetByIDsFunc) appendCall(r0 RepoStoreGetReposSetByIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreGetReposSetByIDsFuncCall objects
// describing the invocations of this function.
func (f *RepoStoreGetReposSetByIDsFunc) History() []RepoStoreGetReposSetByIDsFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreGetReposSetByIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreGetReposSetByIDsFuncCall is an object that describes an
// invocation of method GetReposSetByIDs on an instance of MockRepoStore.
type RepoStoreGetReposSetByIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[api.RepoID]*types.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c RepoStoreGetReposSetByIDsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreGetReposSetByIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreHandleFunc describes the behavior when the Handle method of the
// parent MockRepoStore instance is invoked.
type RepoStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []RepoStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(RepoStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockRepoStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *RepoStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *RepoStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreHandleFunc) appendCall(r0 RepoStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreHandleFuncCall objects describing
// the invocations of this function.
func (f *RepoStoreHandleFunc) History() []RepoStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreHandleFuncCall is an object that describes an invocation of
// method Handle on an instance of MockRepoStore.
type RepoStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RepoStoreListFunc describes the behavior when the List method of the
// parent MockRepoStore instance is invoked.
type RepoStoreListFunc struct {
	defaultHook func(context.Context, ReposListOptions) ([]*types.Repo, error)
	hooks       []func(context.Context, ReposListOptions) ([]*types.Repo, error)
	history     []RepoStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) List(v0 context.Context, v1 ReposListOptions) ([]*types.Repo, error) {
	r0, r1 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(RepoStoreListFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreListFunc) SetDefaultHook(hook func(context.Context, ReposListOptions) ([]*types.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockRepoStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *RepoStoreListFunc) PushHook(hook func(context.Context, ReposListOptions) ([]*types.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreListFunc) SetDefaultReturn(r0 []*types.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, ReposListOptions) ([]*types.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreListFunc) PushReturn(r0 []*types.Repo, r1 error) {
	f.PushHook(func(context.Context, ReposListOptions) ([]*types.Repo, error) {
		return r0, r1
	})
}

func (f *RepoStoreListFunc) nextHook() func(context.Context, ReposListOptions) ([]*types.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreListFunc) appendCall(r0 RepoStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreListFuncCall objects describing
// the invocations of this function.
func (f *RepoStoreListFunc) History() []RepoStoreListFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreListFuncCall is an object that describes an invocation of method
// List on an instance of MockRepoStore.
type RepoStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ReposListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreListIndexableReposFunc describes the behavior when the
// ListIndexableRepos method of the parent MockRepoStore instance is
// invoked.
type RepoStoreListIndexableReposFunc struct {
	defaultHook func(context.Context, ListIndexableReposOptions) ([]types.MinimalRepo, error)
	hooks       []func(context.Context, ListIndexableReposOptions) ([]types.MinimalRepo, error)
	history     []RepoStoreListIndexableReposFuncCall
	mutex       sync.Mutex
}

// ListIndexableRepos delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockRepoStore) ListIndexableRepos(v0 context.Context, v1 ListIndexableReposOptions) ([]types.MinimalRepo, error) {
	r0, r1 := m.ListIndexableReposFunc.nextHook()(v0, v1)
	m.ListIndexableReposFunc.appendCall(RepoStoreListIndexableReposFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListIndexableRepos
// method of the parent MockRepoStore instance is invoked and the hook queue
// is empty.
func (f *RepoStoreListIndexableReposFunc) SetDefaultHook(hook func(context.Context, ListIndexableReposOptions) ([]types.MinimalRepo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListIndexableRepos method of the parent MockRepoStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *RepoStoreListIndexableReposFunc) PushHook(hook func(context.Context, ListIndexableReposOptions) ([]types.MinimalRepo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreListIndexableReposFunc) SetDefaultReturn(r0 []types.MinimalRepo, r1 error) {
	f.SetDefaultHook(func(context.Context, ListIndexableReposOptions) ([]types.MinimalRepo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreListIndexableReposFunc) PushReturn(r0 []types.MinimalRepo, r1 error) {
	f.PushHook(func(context.Context, ListIndexableReposOptions) ([]types.MinimalRepo, error) {
		return r0, r1
	})
}

func (f *RepoStoreListIndexableReposFunc) nextHook() func(context.Context, ListIndexableReposOptions) ([]types.MinimalRepo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreListIndexableReposFunc) appendCall(r0 RepoStoreListIndexableReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreListIndexableReposFuncCall objects
// describing the invocations of this function.
func (f *RepoStoreListIndexableReposFunc) History() []RepoStoreListIndexableReposFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreListIndexableReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreListIndexableReposFuncCall is an object that describes an
// invocation of method ListIndexableRepos on an instance of MockRepoStore.
type RepoStoreListIndexableReposFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ListIndexableReposOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.MinimalRepo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreListIndexableReposFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreListIndexableReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreListMinimalReposFunc describes the behavior when the
// ListMinimalRepos method of the parent MockRepoStore instance is invoked.
type RepoStoreListMinimalReposFunc struct {
	defaultHook func(context.Context, ReposListOptions) ([]types.MinimalRepo, error)
	hooks       []func(context.Context, ReposListOptions) ([]types.MinimalRepo, error)
	history     []RepoStoreListMinimalReposFuncCall
	mutex       sync.Mutex
}

// ListMinimalRepos delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockRepoStore) ListMinimalRepos(v0 context.Context, v1 ReposListOptions) ([]types.MinimalRepo, error) {
	r0, r1 := m.ListMinimalReposFunc.nextHook()(v0, v1)
	m.ListMinimalReposFunc.appendCall(RepoStoreListMinimalReposFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListMinimalRepos
// method of the parent MockRepoStore instance is invoked and the hook queue
// is empty.
func (f *RepoStoreListMinimalReposFunc) SetDefaultHook(hook func(context.Context, ReposListOptions) ([]types.MinimalRepo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListMinimalRepos method of the parent MockRepoStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *RepoStoreListMinimalReposFunc) PushHook(hook func(context.Context, ReposListOptions) ([]types.MinimalRepo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreListMinimalReposFunc) SetDefaultReturn(r0 []types.MinimalRepo, r1 error) {
	f.SetDefaultHook(func(context.Context, ReposListOptions) ([]types.MinimalRepo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreListMinimalReposFunc) PushReturn(r0 []types.MinimalRepo, r1 error) {
	f.PushHook(func(context.Context, ReposListOptions) ([]types.MinimalRepo, error) {
		return r0, r1
	})
}

func (f *RepoStoreListMinimalReposFunc) nextHook() func(context.Context, ReposListOptions) ([]types.MinimalRepo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreListMinimalReposFunc) appendCall(r0 RepoStoreListMinimalReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreListMinimalReposFuncCall objects
// describing the invocations of this function.
func (f *RepoStoreListMinimalReposFunc) History() []RepoStoreListMinimalReposFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreListMinimalReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreListMinimalReposFuncCall is an object that describes an
// invocation of method ListMinimalRepos on an instance of MockRepoStore.
type RepoStoreListMinimalReposFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ReposListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.MinimalRepo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreListMinimalReposFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreListMinimalReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreMetadataFunc describes the behavior when the Metadata method of
// the parent MockRepoStore instance is invoked.
type RepoStoreMetadataFunc struct {
	defaultHook func(context.Context, ...api.RepoID) ([]*types.SearchedRepo, error)
	hooks       []func(context.Context, ...api.RepoID) ([]*types.SearchedRepo, error)
	history     []RepoStoreMetadataFuncCall
	mutex       sync.Mutex
}

// Metadata delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) Metadata(v0 context.Context, v1 ...api.RepoID) ([]*types.SearchedRepo, error) {
	r0, r1 := m.MetadataFunc.nextHook()(v0, v1...)
	m.MetadataFunc.appendCall(RepoStoreMetadataFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Metadata method of
// the parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreMetadataFunc) SetDefaultHook(hook func(context.Context, ...api.RepoID) ([]*types.SearchedRepo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Metadata method of the parent MockRepoStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *RepoStoreMetadataFunc) PushHook(hook func(context.Context, ...api.RepoID) ([]*types.SearchedRepo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreMetadataFunc) SetDefaultReturn(r0 []*types.SearchedRepo, r1 error) {
	f.SetDefaultHook(func(context.Context, ...api.RepoID) ([]*types.SearchedRepo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreMetadataFunc) PushReturn(r0 []*types.SearchedRepo, r1 error) {
	f.PushHook(func(context.Context, ...api.RepoID) ([]*types.SearchedRepo, error) {
		return r0, r1
	})
}

func (f *RepoStoreMetadataFunc) nextHook() func(context.Context, ...api.RepoID) ([]*types.SearchedRepo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreMetadataFunc) appendCall(r0 RepoStoreMetadataFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreMetadataFuncCall objects
// describing the invocations of this function.
func (f *RepoStoreMetadataFunc) History() []RepoStoreMetadataFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreMetadataFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreMetadataFuncCall is an object that describes an invocation of
// method Metadata on an instance of MockRepoStore.
type RepoStoreMetadataFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.SearchedRepo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c RepoStoreMetadataFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreMetadataFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreQueryFunc describes the behavior when the Query method of the
// parent MockRepoStore instance is invoked.
type RepoStoreQueryFunc struct {
	defaultHook func(context.Context, *sqlf.Query) (*sql.Rows, error)
	hooks       []func(context.Context, *sqlf.Query) (*sql.Rows, error)
	history     []RepoStoreQueryFuncCall
	mutex       sync.Mutex
}

// Query delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) Query(v0 context.Context, v1 *sqlf.Query) (*sql.Rows, error) {
	r0, r1 := m.QueryFunc.nextHook()(v0, v1)
	m.QueryFunc.appendCall(RepoStoreQueryFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Query method of the
// parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreQueryFunc) SetDefaultHook(hook func(context.Context, *sqlf.Query) (*sql.Rows, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Query method of the parent MockRepoStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *RepoStoreQueryFunc) PushHook(hook func(context.Context, *sqlf.Query) (*sql.Rows, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreQueryFunc) SetDefaultReturn(r0 *sql.Rows, r1 error) {
	f.SetDefaultHook(func(context.Context, *sqlf.Query) (*sql.Rows, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreQueryFunc) PushReturn(r0 *sql.Rows, r1 error) {
	f.PushHook(func(context.Context, *sqlf.Query) (*sql.Rows, error) {
		return r0, r1
	})
}

func (f *RepoStoreQueryFunc) nextHook() func(context.Context, *sqlf.Query) (*sql.Rows, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreQueryFunc) appendCall(r0 RepoStoreQueryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreQueryFuncCall objects describing
// the invocations of this function.
func (f *RepoStoreQueryFunc) History() []RepoStoreQueryFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreQueryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreQueryFuncCall is an object that describes an invocation of
// method Query on an instance of MockRepoStore.
type RepoStoreQueryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sqlf.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *sql.Rows
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreQueryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreQueryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreStreamMinimalReposFunc describes the behavior when the
// StreamMinimalRepos method of the parent MockRepoStore instance is
// invoked.
type RepoStoreStreamMinimalReposFunc struct {
	defaultHook func(context.Context, ReposListOptions, func(*types.MinimalRepo)) error
	hooks       []func(context.Context, ReposListOptions, func(*types.MinimalRepo)) error
	history     []RepoStoreStreamMinimalReposFuncCall
	mutex       sync.Mutex
}

// StreamMinimalRepos delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockRepoStore) StreamMinimalRepos(v0 context.Context, v1 ReposListOptions, v2 func(*types.MinimalRepo)) error {
	r0 := m.StreamMinimalReposFunc.nextHook()(v0, v1, v2)
	m.StreamMinimalReposFunc.appendCall(RepoStoreStreamMinimalReposFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the StreamMinimalRepos
// method of the parent MockRepoStore instance is invoked and the hook queue
// is empty.
func (f *RepoStoreStreamMinimalReposFunc) SetDefaultHook(hook func(context.Context, ReposListOptions, func(*types.MinimalRepo)) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// StreamMinimalRepos method of the parent MockRepoStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *RepoStoreStreamMinimalReposFunc) PushHook(hook func(context.Context, ReposListOptions, func(*types.MinimalRepo)) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreStreamMinimalReposFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ReposListOptions, func(*types.MinimalRepo)) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreStreamMinimalReposFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ReposListOptions, func(*types.MinimalRepo)) error {
		return r0
	})
}

func (f *RepoStoreStreamMinimalReposFunc) nextHook() func(context.Context, ReposListOptions, func(*types.MinimalRepo)) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreStreamMinimalReposFunc) appendCall(r0 RepoStoreStreamMinimalReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreStreamMinimalReposFuncCall objects
// describing the invocations of this function.
func (f *RepoStoreStreamMinimalReposFunc) History() []RepoStoreStreamMinimalReposFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreStreamMinimalReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreStreamMinimalReposFuncCall is an object that describes an
// invocation of method StreamMinimalRepos on an instance of MockRepoStore.
type RepoStoreStreamMinimalReposFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ReposListOptions
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 func(*types.MinimalRepo)
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreStreamMinimalReposFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreStreamMinimalReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RepoStoreTransactFunc describes the behavior when the Transact method of
// the parent MockRepoStore instance is invoked.
type RepoStoreTransactFunc struct {
	defaultHook func(context.Context) (RepoStore, error)
	hooks       []func(context.Context) (RepoStore, error)
	history     []RepoStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) Transact(v0 context.Context) (RepoStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(RepoStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreTransactFunc) SetDefaultHook(hook func(context.Context) (RepoStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockRepoStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *RepoStoreTransactFunc) PushHook(hook func(context.Context) (RepoStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreTransactFunc) SetDefaultReturn(r0 RepoStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (RepoStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreTransactFunc) PushReturn(r0 RepoStore, r1 error) {
	f.PushHook(func(context.Context) (RepoStore, error) {
		return r0, r1
	})
}

func (f *RepoStoreTransactFunc) nextHook() func(context.Context) (RepoStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreTransactFunc) appendCall(r0 RepoStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *RepoStoreTransactFunc) History() []RepoStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreTransactFuncCall is an object that describes an invocation of
// method Transact on an instance of MockRepoStore.
type RepoStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 RepoStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreWithFunc describes the behavior when the With method of the
// parent MockRepoStore instance is invoked.
type RepoStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) RepoStore
	hooks       []func(basestore.ShareableStore) RepoStore
	history     []RepoStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) With(v0 basestore.ShareableStore) RepoStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(RepoStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) RepoStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockRepoStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *RepoStoreWithFunc) PushHook(hook func(basestore.ShareableStore) RepoStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreWithFunc) SetDefaultReturn(r0 RepoStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) RepoStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreWithFunc) PushReturn(r0 RepoStore) {
	f.PushHook(func(basestore.ShareableStore) RepoStore {
		return r0
	})
}

func (f *RepoStoreWithFunc) nextHook() func(basestore.ShareableStore) RepoStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreWithFunc) appendCall(r0 RepoStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreWithFuncCall objects describing
// the invocations of this function.
func (f *RepoStoreWithFunc) History() []RepoStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreWithFuncCall is an object that describes an invocation of method
// With on an instance of MockRepoStore.
type RepoStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 RepoStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockSavedSearchStore is a mock implementation of the SavedSearchStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockSavedSearchStore struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *SavedSearchStoreCreateFunc
	// DeleteFunc is an instance of a mock function object controlling the
	// behavior of the method Delete.
	DeleteFunc *SavedSearchStoreDeleteFunc
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *SavedSearchStoreGetByIDFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *SavedSearchStoreHandleFunc
	// IsEmptyFunc is an instance of a mock function object controlling the
	// behavior of the method IsEmpty.
	IsEmptyFunc *SavedSearchStoreIsEmptyFunc
	// ListAllFunc is an instance of a mock function object controlling the
	// behavior of the method ListAll.
	ListAllFunc *SavedSearchStoreListAllFunc
	// ListSavedSearchesByOrgIDFunc is an instance of a mock function object
	// controlling the behavior of the method ListSavedSearchesByOrgID.
	ListSavedSearchesByOrgIDFunc *SavedSearchStoreListSavedSearchesByOrgIDFunc
	// ListSavedSearchesByUserIDFunc is an instance of a mock function
	// object controlling the behavior of the method
	// ListSavedSearchesByUserID.
	ListSavedSearchesByUserIDFunc *SavedSearchStoreListSavedSearchesByUserIDFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *SavedSearchStoreTransactFunc
	// UpdateFunc is an instance of a mock function object controlling the
	// behavior of the method Update.
	UpdateFunc *SavedSearchStoreUpdateFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *SavedSearchStoreWithFunc
}

// NewMockSavedSearchStore creates a new mock of the SavedSearchStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockSavedSearchStore() *MockSavedSearchStore {
	return &MockSavedSearchStore{
		CreateFunc: &SavedSearchStoreCreateFunc{
			defaultHook: func(context.Context, *types.SavedSearch) (r0 *types.SavedSearch, r1 error) {
				return
			},
		},
		DeleteFunc: &SavedSearchStoreDeleteFunc{
			defaultHook: func(context.Context, int32) (r0 error) {
				return
			},
		},
		GetByIDFunc: &SavedSearchStoreGetByIDFunc{
			defaultHook: func(context.Context, int32) (r0 *api.SavedQuerySpecAndConfig, r1 error) {
				return
			},
		},
		HandleFunc: &SavedSearchStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		IsEmptyFunc: &SavedSearchStoreIsEmptyFunc{
			defaultHook: func(context.Context) (r0 bool, r1 error) {
				return
			},
		},
		ListAllFunc: &SavedSearchStoreListAllFunc{
			defaultHook: func(context.Context) (r0 []api.SavedQuerySpecAndConfig, r1 error) {
				return
			},
		},
		ListSavedSearchesByOrgIDFunc: &SavedSearchStoreListSavedSearchesByOrgIDFunc{
			defaultHook: func(context.Context, int32) (r0 []*types.SavedSearch, r1 error) {
				return
			},
		},
		ListSavedSearchesByUserIDFunc: &SavedSearchStoreListSavedSearchesByUserIDFunc{
			defaultHook: func(context.Context, int32) (r0 []*types.SavedSearch, r1 error) {
				return
			},
		},
		TransactFunc: &SavedSearchStoreTransactFunc{
			defaultHook: func(context.Context) (r0 SavedSearchStore, r1 error) {
				return
			},
		},
		UpdateFunc: &SavedSearchStoreUpdateFunc{
			defaultHook: func(context.Context, *types.SavedSearch) (r0 *types.SavedSearch, r1 error) {
				return
			},
		},
		WithFunc: &SavedSearchStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 SavedSearchStore) {
				return
			},
		},
	}
}

// NewStrictMockSavedSearchStore creates a new mock of the SavedSearchStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockSavedSearchStore() *MockSavedSearchStore {
	return &MockSavedSearchStore{
		CreateFunc: &SavedSearchStoreCreateFunc{
			defaultHook: func(context.Context, *types.SavedSearch) (*types.SavedSearch, error) {
				panic("unexpected invocation of MockSavedSearchStore.Create")
			},
		},
		DeleteFunc: &SavedSearchStoreDeleteFunc{
			defaultHook: func(context.Context, int32) error {
				panic("unexpected invocation of MockSavedSearchStore.Delete")
			},
		},
		GetByIDFunc: &SavedSearchStoreGetByIDFunc{
			defaultHook: func(context.Context, int32) (*api.SavedQuerySpecAndConfig, error) {
				panic("unexpected invocation of MockSavedSearchStore.GetByID")
			},
		},
		HandleFunc: &SavedSearchStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockSavedSearchStore.Handle")
			},
		},
		IsEmptyFunc: &SavedSearchStoreIsEmptyFunc{
			defaultHook: func(context.Context) (bool, error) {
				panic("unexpected invocation of MockSavedSearchStore.IsEmpty")
			},
		},
		ListAllFunc: &SavedSearchStoreListAllFunc{
			defaultHook: func(context.Context) ([]api.SavedQuerySpecAndConfig, error) {
				panic("unexpected invocation of MockSavedSearchStore.ListAll")
			},
		},
		ListSavedSearchesByOrgIDFunc: &SavedSearchStoreListSavedSearchesByOrgIDFunc{
			defaultHook: func(context.Context, int32) ([]*types.SavedSearch, error) {
				panic("unexpected invocation of MockSavedSearchStore.ListSavedSearchesByOrgID")
			},
		},
		ListSavedSearchesByUserIDFunc: &SavedSearchStoreListSavedSearchesByUserIDFunc{
			defaultHook: func(context.Context, int32) ([]*types.SavedSearch, error) {
				panic("unexpected invocation of MockSavedSearchStore.ListSavedSearchesByUserID")
			},
		},
		TransactFunc: &SavedSearchStoreTransactFunc{
			defaultHook: func(context.Context) (SavedSearchStore, error) {
				panic("unexpected invocation of MockSavedSearchStore.Transact")
			},
		},
		UpdateFunc: &SavedSearchStoreUpdateFunc{
			defaultHook: func(context.Context, *types.SavedSearch) (*types.SavedSearch, error) {
				panic("unexpected invocation of MockSavedSearchStore.Update")
			},
		},
		WithFunc: &SavedSearchStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) SavedSearchStore {
				panic("unexpected invocation of MockSavedSearchStore.With")
			},
		},
	}
}

// NewMockSavedSearchStoreFrom creates a new mock of the
// MockSavedSearchStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockSavedSearchStoreFrom(i SavedSearchStore) *MockSavedSearchStore {
	return &MockSavedSearchStore{
		CreateFunc: &SavedSearchStoreCreateFunc{
			defaultHook: i.Create,
		},
		DeleteFunc: &SavedSearchStoreDeleteFunc{
			defaultHook: i.Delete,
		},
		GetByIDFunc: &SavedSearchStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		HandleFunc: &SavedSearchStoreHandleFunc{
			defaultHook: i.Handle,
		},
		IsEmptyFunc: &SavedSearchStoreIsEmptyFunc{
			defaultHook: i.IsEmpty,
		},
		ListAllFunc: &SavedSearchStoreListAllFunc{
			defaultHook: i.ListAll,
		},
		ListSavedSearchesByOrgIDFunc: &SavedSearchStoreListSavedSearchesByOrgIDFunc{
			defaultHook: i.ListSavedSearchesByOrgID,
		},
		ListSavedSearchesByUserIDFunc: &SavedSearchStoreListSavedSearchesByUserIDFunc{
			defaultHook: i.ListSavedSearchesByUserID,
		},
		TransactFunc: &SavedSearchStoreTransactFunc{
			defaultHook: i.Transact,
		},
		UpdateFunc: &SavedSearchStoreUpdateFunc{
			defaultHook: i.Update,
		},
		WithFunc: &SavedSearchStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// SavedSearchStoreCreateFunc describes the behavior when the Create method
// of the parent MockSavedSearchStore instance is invoked.
type SavedSearchStoreCreateFunc struct {
	defaultHook func(context.Context, *types.SavedSearch) (*types.SavedSearch, error)
	hooks       []func(context.Context, *types.SavedSearch) (*types.SavedSearch, error)
	history     []SavedSearchStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSavedSearchStore) Create(v0 context.Context, v1 *types.SavedSearch) (*types.SavedSearch, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1)
	m.CreateFunc.appendCall(SavedSearchStoreCreateFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockSavedSearchStore instance is invoked and the hook queue is
// empty.
func (f *SavedSearchStoreCreateFunc) SetDefaultHook(hook func(context.Context, *types.SavedSearch) (*types.SavedSearch, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockSavedSearchStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SavedSearchStoreCreateFunc) PushHook(hook func(context.Context, *types.SavedSearch) (*types.SavedSearch, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SavedSearchStoreCreateFunc) SetDefaultReturn(r0 *types.SavedSearch, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.SavedSearch) (*types.SavedSearch, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SavedSearchStoreCreateFunc) PushReturn(r0 *types.SavedSearch, r1 error) {
	f.PushHook(func(context.Context, *types.SavedSearch) (*types.SavedSearch, error) {
		return r0, r1
	})
}

func (f *SavedSearchStoreCreateFunc) nextHook() func(context.Context, *types.SavedSearch) (*types.SavedSearch, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SavedSearchStoreCreateFunc) appendCall(r0 SavedSearchStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SavedSearchStoreCreateFuncCall objects
// describing the invocations of this function.
func (f *SavedSearchStoreCreateFunc) History() []SavedSearchStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]SavedSearchStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SavedSearchStoreCreateFuncCall is an object that describes an invocation
// of method Create on an instance of MockSavedSearchStore.
type SavedSearchStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.SavedSearch
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.SavedSearch
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SavedSearchStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SavedSearchStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SavedSearchStoreDeleteFunc describes the behavior when the Delete method
// of the parent MockSavedSearchStore instance is invoked.
type SavedSearchStoreDeleteFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []SavedSearchStoreDeleteFuncCall
	mutex       sync.Mutex
}

// Delete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSavedSearchStore) Delete(v0 context.Context, v1 int32) error {
	r0 := m.DeleteFunc.nextHook()(v0, v1)
	m.DeleteFunc.appendCall(SavedSearchStoreDeleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Delete method of the
// parent MockSavedSearchStore instance is invoked and the hook queue is
// empty.
func (f *SavedSearchStoreDeleteFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Delete method of the parent MockSavedSearchStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SavedSearchStoreDeleteFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SavedSearchStoreDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SavedSearchStoreDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *SavedSearchStoreDeleteFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SavedSearchStoreDeleteFunc) appendCall(r0 SavedSearchStoreDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SavedSearchStoreDeleteFuncCall objects
// describing the invocations of this function.
func (f *SavedSearchStoreDeleteFunc) History() []SavedSearchStoreDeleteFuncCall {
	f.mutex.Lock()
	history := make([]SavedSearchStoreDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SavedSearchStoreDeleteFuncCall is an object that describes an invocation
// of method Delete on an instance of MockSavedSearchStore.
type SavedSearchStoreDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SavedSearchStoreDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SavedSearchStoreDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SavedSearchStoreGetByIDFunc describes the behavior when the GetByID
// method of the parent MockSavedSearchStore instance is invoked.
type SavedSearchStoreGetByIDFunc struct {
	defaultHook func(context.Context, int32) (*api.SavedQuerySpecAndConfig, error)
	hooks       []func(context.Context, int32) (*api.SavedQuerySpecAndConfig, error)
	history     []SavedSearchStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSavedSearchStore) GetByID(v0 context.Context, v1 int32) (*api.SavedQuerySpecAndConfig, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(SavedSearchStoreGetByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockSavedSearchStore instance is invoked and the hook queue is
// empty.
func (f *SavedSearchStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int32) (*api.SavedQuerySpecAndConfig, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockSavedSearchStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SavedSearchStoreGetByIDFunc) PushHook(hook func(context.Context, int32) (*api.SavedQuerySpecAndConfig, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SavedSearchStoreGetByIDFunc) SetDefaultReturn(r0 *api.SavedQuerySpecAndConfig, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (*api.SavedQuerySpecAndConfig, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SavedSearchStoreGetByIDFunc) PushReturn(r0 *api.SavedQuerySpecAndConfig, r1 error) {
	f.PushHook(func(context.Context, int32) (*api.SavedQuerySpecAndConfig, error) {
		return r0, r1
	})
}

func (f *SavedSearchStoreGetByIDFunc) nextHook() func(context.Context, int32) (*api.SavedQuerySpecAndConfig, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SavedSearchStoreGetByIDFunc) appendCall(r0 SavedSearchStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SavedSearchStoreGetByIDFuncCall objects
// describing the invocations of this function.
func (f *SavedSearchStoreGetByIDFunc) History() []SavedSearchStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]SavedSearchStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SavedSearchStoreGetByIDFuncCall is an object that describes an invocation
// of method GetByID on an instance of MockSavedSearchStore.
type SavedSearchStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *api.SavedQuerySpecAndConfig
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SavedSearchStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SavedSearchStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SavedSearchStoreHandleFunc describes the behavior when the Handle method
// of the parent MockSavedSearchStore instance is invoked.
type SavedSearchStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []SavedSearchStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSavedSearchStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(SavedSearchStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockSavedSearchStore instance is invoked and the hook queue is
// empty.
func (f *SavedSearchStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockSavedSearchStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SavedSearchStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SavedSearchStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SavedSearchStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *SavedSearchStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SavedSearchStoreHandleFunc) appendCall(r0 SavedSearchStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SavedSearchStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *SavedSearchStoreHandleFunc) History() []SavedSearchStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]SavedSearchStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SavedSearchStoreHandleFuncCall is an object that describes an invocation
// of method Handle on an instance of MockSavedSearchStore.
type SavedSearchStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SavedSearchStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SavedSearchStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SavedSearchStoreIsEmptyFunc describes the behavior when the IsEmpty
// method of the parent MockSavedSearchStore instance is invoked.
type SavedSearchStoreIsEmptyFunc struct {
	defaultHook func(context.Context) (bool, error)
	hooks       []func(context.Context) (bool, error)
	history     []SavedSearchStoreIsEmptyFuncCall
	mutex       sync.Mutex
}

// IsEmpty delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSavedSearchStore) IsEmpty(v0 context.Context) (bool, error) {
	r0, r1 := m.IsEmptyFunc.nextHook()(v0)
	m.IsEmptyFunc.appendCall(SavedSearchStoreIsEmptyFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IsEmpty method of
// the parent MockSavedSearchStore instance is invoked and the hook queue is
// empty.
func (f *SavedSearchStoreIsEmptyFunc) SetDefaultHook(hook func(context.Context) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsEmpty method of the parent MockSavedSearchStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SavedSearchStoreIsEmptyFunc) PushHook(hook func(context.Context) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SavedSearchStoreIsEmptyFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SavedSearchStoreIsEmptyFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context) (bool, error) {
		return r0, r1
	})
}

func (f *SavedSearchStoreIsEmptyFunc) nextHook() func(context.Context) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SavedSearchStoreIsEmptyFunc) appendCall(r0 SavedSearchStoreIsEmptyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SavedSearchStoreIsEmptyFuncCall objects
// describing the invocations of this function.
func (f *SavedSearchStoreIsEmptyFunc) History() []SavedSearchStoreIsEmptyFuncCall {
	f.mutex.Lock()
	history := make([]SavedSearchStoreIsEmptyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SavedSearchStoreIsEmptyFuncCall is an object that describes an invocation
// of method IsEmpty on an instance of MockSavedSearchStore.
type SavedSearchStoreIsEmptyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SavedSearchStoreIsEmptyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SavedSearchStoreIsEmptyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SavedSearchStoreListAllFunc describes the behavior when the ListAll
// method of the parent MockSavedSearchStore instance is invoked.
type SavedSearchStoreListAllFunc struct {
	defaultHook func(context.Context) ([]api.SavedQuerySpecAndConfig, error)
	hooks       []func(context.Context) ([]api.SavedQuerySpecAndConfig, error)
	history     []SavedSearchStoreListAllFuncCall
	mutex       sync.Mutex
}

// ListAll delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSavedSearchStore) ListAll(v0 context.Context) ([]api.SavedQuerySpecAndConfig, error) {
	r0, r1 := m.ListAllFunc.nextHook()(v0)
	m.ListAllFunc.appendCall(SavedSearchStoreListAllFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListAll method of
// the parent MockSavedSearchStore instance is invoked and the hook queue is
// empty.
func (f *SavedSearchStoreListAllFunc) SetDefaultHook(hook func(context.Context) ([]api.SavedQuerySpecAndConfig, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListAll method of the parent MockSavedSearchStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SavedSearchStoreListAllFunc) PushHook(hook func(context.Context) ([]api.SavedQuerySpecAndConfig, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SavedSearchStoreListAllFunc) SetDefaultReturn(r0 []api.SavedQuerySpecAndConfig, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]api.SavedQuerySpecAndConfig, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SavedSearchStoreListAllFunc) PushReturn(r0 []api.SavedQuerySpecAndConfig, r1 error) {
	f.PushHook(func(context.Context) ([]api.SavedQuerySpecAndConfig, error) {
		return r0, r1
	})
}

func (f *SavedSearchStoreListAllFunc) nextHook() func(context.Context) ([]api.SavedQuerySpecAndConfig, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SavedSearchStoreListAllFunc) appendCall(r0 SavedSearchStoreListAllFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SavedSearchStoreListAllFuncCall objects
// describing the invocations of this function.
func (f *SavedSearchStoreListAllFunc) History() []SavedSearchStoreListAllFuncCall {
	f.mutex.Lock()
	history := make([]SavedSearchStoreListAllFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SavedSearchStoreListAllFuncCall is an object that describes an invocation
// of method ListAll on an instance of MockSavedSearchStore.
type SavedSearchStoreListAllFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []api.SavedQuerySpecAndConfig
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SavedSearchStoreListAllFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SavedSearchStoreListAllFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SavedSearchStoreListSavedSearchesByOrgIDFunc describes the behavior when
// the ListSavedSearchesByOrgID method of the parent MockSavedSearchStore
// instance is invoked.
type SavedSearchStoreListSavedSearchesByOrgIDFunc struct {
	defaultHook func(context.Context, int32) ([]*types.SavedSearch, error)
	hooks       []func(context.Context, int32) ([]*types.SavedSearch, error)
	history     []SavedSearchStoreListSavedSearchesByOrgIDFuncCall
	mutex       sync.Mutex
}

// ListSavedSearchesByOrgID delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockSavedSearchStore) ListSavedSearchesByOrgID(v0 context.Context, v1 int32) ([]*types.SavedSearch, error) {
	r0, r1 := m.ListSavedSearchesByOrgIDFunc.nextHook()(v0, v1)
	m.ListSavedSearchesByOrgIDFunc.appendCall(SavedSearchStoreListSavedSearchesByOrgIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ListSavedSearchesByOrgID method of the parent MockSavedSearchStore
// instance is invoked and the hook queue is empty.
func (f *SavedSearchStoreListSavedSearchesByOrgIDFunc) SetDefaultHook(hook func(context.Context, int32) ([]*types.SavedSearch, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListSavedSearchesByOrgID method of the parent MockSavedSearchStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *SavedSearchStoreListSavedSearchesByOrgIDFunc) PushHook(hook func(context.Context, int32) ([]*types.SavedSearch, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SavedSearchStoreListSavedSearchesByOrgIDFunc) SetDefaultReturn(r0 []*types.SavedSearch, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) ([]*types.SavedSearch, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SavedSearchStoreListSavedSearchesByOrgIDFunc) PushReturn(r0 []*types.SavedSearch, r1 error) {
	f.PushHook(func(context.Context, int32) ([]*types.SavedSearch, error) {
		return r0, r1
	})
}

func (f *SavedSearchStoreListSavedSearchesByOrgIDFunc) nextHook() func(context.Context, int32) ([]*types.SavedSearch, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SavedSearchStoreListSavedSearchesByOrgIDFunc) appendCall(r0 SavedSearchStoreListSavedSearchesByOrgIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SavedSearchStoreListSavedSearchesByOrgIDFuncCall objects describing the
// invocations of this function.
func (f *SavedSearchStoreListSavedSearchesByOrgIDFunc) History() []SavedSearchStoreListSavedSearchesByOrgIDFuncCall {
	f.mutex.Lock()
	history := make([]SavedSearchStoreListSavedSearchesByOrgIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SavedSearchStoreListSavedSearchesByOrgIDFuncCall is an object that
// describes an invocation of method ListSavedSearchesByOrgID on an instance
// of MockSavedSearchStore.
type SavedSearchStoreListSavedSearchesByOrgIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.SavedSearch
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SavedSearchStoreListSavedSearchesByOrgIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SavedSearchStoreListSavedSearchesByOrgIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SavedSearchStoreListSavedSearchesByUserIDFunc describes the behavior when
// the ListSavedSearchesByUserID method of the parent MockSavedSearchStore
// instance is invoked.
type SavedSearchStoreListSavedSearchesByUserIDFunc struct {
	defaultHook func(context.Context, int32) ([]*types.SavedSearch, error)
	hooks       []func(context.Context, int32) ([]*types.SavedSearch, error)
	history     []SavedSearchStoreListSavedSearchesByUserIDFuncCall
	mutex       sync.Mutex
}

// ListSavedSearchesByUserID delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockSavedSearchStore) ListSavedSearchesByUserID(v0 context.Context, v1 int32) ([]*types.SavedSearch, error) {
	r0, r1 := m.ListSavedSearchesByUserIDFunc.nextHook()(v0, v1)
	m.ListSavedSearchesByUserIDFunc.appendCall(SavedSearchStoreListSavedSearchesByUserIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ListSavedSearchesByUserID method of the parent MockSavedSearchStore
// instance is invoked and the hook queue is empty.
func (f *SavedSearchStoreListSavedSearchesByUserIDFunc) SetDefaultHook(hook func(context.Context, int32) ([]*types.SavedSearch, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListSavedSearchesByUserID method of the parent MockSavedSearchStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *SavedSearchStoreListSavedSearchesByUserIDFunc) PushHook(hook func(context.Context, int32) ([]*types.SavedSearch, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SavedSearchStoreListSavedSearchesByUserIDFunc) SetDefaultReturn(r0 []*types.SavedSearch, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) ([]*types.SavedSearch, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SavedSearchStoreListSavedSearchesByUserIDFunc) PushReturn(r0 []*types.SavedSearch, r1 error) {
	f.PushHook(func(context.Context, int32) ([]*types.SavedSearch, error) {
		return r0, r1
	})
}

func (f *SavedSearchStoreListSavedSearchesByUserIDFunc) nextHook() func(context.Context, int32) ([]*types.SavedSearch, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SavedSearchStoreListSavedSearchesByUserIDFunc) appendCall(r0 SavedSearchStoreListSavedSearchesByUserIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SavedSearchStoreListSavedSearchesByUserIDFuncCall objects describing the
// invocations of this function.
func (f *SavedSearchStoreListSavedSearchesByUserIDFunc) History() []SavedSearchStoreListSavedSearchesByUserIDFuncCall {
	f.mutex.Lock()
	history := make([]SavedSearchStoreListSavedSearchesByUserIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SavedSearchStoreListSavedSearchesByUserIDFuncCall is an object that
// describes an invocation of method ListSavedSearchesByUserID on an
// instance of MockSavedSearchStore.
type SavedSearchStoreListSavedSearchesByUserIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.SavedSearch
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SavedSearchStoreListSavedSearchesByUserIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SavedSearchStoreListSavedSearchesByUserIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SavedSearchStoreTransactFunc describes the behavior when the Transact
// method of the parent MockSavedSearchStore instance is invoked.
type SavedSearchStoreTransactFunc struct {
	defaultHook func(context.Context) (SavedSearchStore, error)
	hooks       []func(context.Context) (SavedSearchStore, error)
	history     []SavedSearchStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSavedSearchStore) Transact(v0 context.Context) (SavedSearchStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(SavedSearchStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockSavedSearchStore instance is invoked and the hook queue is
// empty.
func (f *SavedSearchStoreTransactFunc) SetDefaultHook(hook func(context.Context) (SavedSearchStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockSavedSearchStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SavedSearchStoreTransactFunc) PushHook(hook func(context.Context) (SavedSearchStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SavedSearchStoreTransactFunc) SetDefaultReturn(r0 SavedSearchStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (SavedSearchStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SavedSearchStoreTransactFunc) PushReturn(r0 SavedSearchStore, r1 error) {
	f.PushHook(func(context.Context) (SavedSearchStore, error) {
		return r0, r1
	})
}

func (f *SavedSearchStoreTransactFunc) nextHook() func(context.Context) (SavedSearchStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SavedSearchStoreTransactFunc) appendCall(r0 SavedSearchStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SavedSearchStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *SavedSearchStoreTransactFunc) History() []SavedSearchStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]SavedSearchStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SavedSearchStoreTransactFuncCall is an object that describes an
// invocation of method Transact on an instance of MockSavedSearchStore.
type SavedSearchStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 SavedSearchStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SavedSearchStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SavedSearchStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SavedSearchStoreUpdateFunc describes the behavior when the Update method
// of the parent MockSavedSearchStore instance is invoked.
type SavedSearchStoreUpdateFunc struct {
	defaultHook func(context.Context, *types.SavedSearch) (*types.SavedSearch, error)
	hooks       []func(context.Context, *types.SavedSearch) (*types.SavedSearch, error)
	history     []SavedSearchStoreUpdateFuncCall
	mutex       sync.Mutex
}

// Update delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSavedSearchStore) Update(v0 context.Context, v1 *types.SavedSearch) (*types.SavedSearch, error) {
	r0, r1 := m.UpdateFunc.nextHook()(v0, v1)
	m.UpdateFunc.appendCall(SavedSearchStoreUpdateFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Update method of the
// parent MockSavedSearchStore instance is invoked and the hook queue is
// empty.
func (f *SavedSearchStoreUpdateFunc) SetDefaultHook(hook func(context.Context, *types.SavedSearch) (*types.SavedSearch, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Update method of the parent MockSavedSearchStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SavedSearchStoreUpdateFunc) PushHook(hook func(context.Context, *types.SavedSearch) (*types.SavedSearch, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SavedSearchStoreUpdateFunc) SetDefaultReturn(r0 *types.SavedSearch, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.SavedSearch) (*types.SavedSearch, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SavedSearchStoreUpdateFunc) PushReturn(r0 *types.SavedSearch, r1 error) {
	f.PushHook(func(context.Context, *types.SavedSearch) (*types.SavedSearch, error) {
		return r0, r1
	})
}

func (f *SavedSearchStoreUpdateFunc) nextHook() func(context.Context, *types.SavedSearch) (*types.SavedSearch, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SavedSearchStoreUpdateFunc) appendCall(r0 SavedSearchStoreUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SavedSearchStoreUpdateFuncCall objects
// describing the invocations of this function.
func (f *SavedSearchStoreUpdateFunc) History() []SavedSearchStoreUpdateFuncCall {
	f.mutex.Lock()
	history := make([]SavedSearchStoreUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SavedSearchStoreUpdateFuncCall is an object that describes an invocation
// of method Update on an instance of MockSavedSearchStore.
type SavedSearchStoreUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.SavedSearch
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.SavedSearch
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SavedSearchStoreUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SavedSearchStoreUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SavedSearchStoreWithFunc describes the behavior when the With method of
// the parent MockSavedSearchStore instance is invoked.
type SavedSearchStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) SavedSearchStore
	hooks       []func(basestore.ShareableStore) SavedSearchStore
	history     []SavedSearchStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSavedSearchStore) With(v0 basestore.ShareableStore) SavedSearchStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(SavedSearchStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockSavedSearchStore instance is invoked and the hook queue is
// empty.
func (f *SavedSearchStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) SavedSearchStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockSavedSearchStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SavedSearchStoreWithFunc) PushHook(hook func(basestore.ShareableStore) SavedSearchStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SavedSearchStoreWithFunc) SetDefaultReturn(r0 SavedSearchStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) SavedSearchStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SavedSearchStoreWithFunc) PushReturn(r0 SavedSearchStore) {
	f.PushHook(func(basestore.ShareableStore) SavedSearchStore {
		return r0
	})
}

func (f *SavedSearchStoreWithFunc) nextHook() func(basestore.ShareableStore) SavedSearchStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SavedSearchStoreWithFunc) appendCall(r0 SavedSearchStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SavedSearchStoreWithFuncCall objects
// describing the invocations of this function.
func (f *SavedSearchStoreWithFunc) History() []SavedSearchStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]SavedSearchStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SavedSearchStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockSavedSearchStore.
type SavedSearchStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 SavedSearchStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SavedSearchStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SavedSearchStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockSearchContextsStore is a mock implementation of the
// SearchContextsStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockSearchContextsStore struct {
	// CountSearchContextsFunc is an instance of a mock function object
	// controlling the behavior of the method CountSearchContexts.
	CountSearchContextsFunc *SearchContextsStoreCountSearchContextsFunc
	// CreateSearchContextWithRepositoryRevisionsFunc is an instance of a
	// mock function object controlling the behavior of the method
	// CreateSearchContextWithRepositoryRevisions.
	CreateSearchContextWithRepositoryRevisionsFunc *SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc
	// DeleteSearchContextFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteSearchContext.
	DeleteSearchContextFunc *SearchContextsStoreDeleteSearchContextFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *SearchContextsStoreDoneFunc
	// ExecFunc is an instance of a mock function object controlling the
	// behavior of the method Exec.
	ExecFunc *SearchContextsStoreExecFunc
	// GetAllQueriesFunc is an instance of a mock function object
	// controlling the behavior of the method GetAllQueries.
	GetAllQueriesFunc *SearchContextsStoreGetAllQueriesFunc
	// GetAllRevisionsForReposFunc is an instance of a mock function object
	// controlling the behavior of the method GetAllRevisionsForRepos.
	GetAllRevisionsForReposFunc *SearchContextsStoreGetAllRevisionsForReposFunc
	// GetSearchContextFunc is an instance of a mock function object
	// controlling the behavior of the method GetSearchContext.
	GetSearchContextFunc *SearchContextsStoreGetSearchContextFunc
	// GetSearchContextRepositoryRevisionsFunc is an instance of a mock
	// function object controlling the behavior of the method
	// GetSearchContextRepositoryRevisions.
	GetSearchContextRepositoryRevisionsFunc *SearchContextsStoreGetSearchContextRepositoryRevisionsFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *SearchContextsStoreHandleFunc
	// ListSearchContextsFunc is an instance of a mock function object
	// controlling the behavior of the method ListSearchContexts.
	ListSearchContextsFunc *SearchContextsStoreListSearchContextsFunc
	// SetSearchContextRepositoryRevisionsFunc is an instance of a mock
	// function object controlling the behavior of the method
	// SetSearchContextRepositoryRevisions.
	SetSearchContextRepositoryRevisionsFunc *SearchContextsStoreSetSearchContextRepositoryRevisionsFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *SearchContextsStoreTransactFunc
	// UpdateSearchContextWithRepositoryRevisionsFunc is an instance of a
	// mock function object controlling the behavior of the method
	// UpdateSearchContextWithRepositoryRevisions.
	UpdateSearchContextWithRepositoryRevisionsFunc *SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc
}

// NewMockSearchContextsStore creates a new mock of the SearchContextsStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockSearchContextsStore() *MockSearchContextsStore {
	return &MockSearchContextsStore{
		CountSearchContextsFunc: &SearchContextsStoreCountSearchContextsFunc{
			defaultHook: func(context.Context, ListSearchContextsOptions) (r0 int32, r1 error) {
				return
			},
		},
		CreateSearchContextWithRepositoryRevisionsFunc: &SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc{
			defaultHook: func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (r0 *types.SearchContext, r1 error) {
				return
			},
		},
		DeleteSearchContextFunc: &SearchContextsStoreDeleteSearchContextFunc{
			defaultHook: func(context.Context, int64) (r0 error) {
				return
			},
		},
		DoneFunc: &SearchContextsStoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		ExecFunc: &SearchContextsStoreExecFunc{
			defaultHook: func(context.Context, *sqlf.Query) (r0 error) {
				return
			},
		},
		GetAllQueriesFunc: &SearchContextsStoreGetAllQueriesFunc{
			defaultHook: func(context.Context) (r0 []string, r1 error) {
				return
			},
		},
		GetAllRevisionsForReposFunc: &SearchContextsStoreGetAllRevisionsForReposFunc{
			defaultHook: func(context.Context, []api.RepoID) (r0 map[api.RepoID][]string, r1 error) {
				return
			},
		},
		GetSearchContextFunc: &SearchContextsStoreGetSearchContextFunc{
			defaultHook: func(context.Context, GetSearchContextOptions) (r0 *types.SearchContext, r1 error) {
				return
			},
		},
		GetSearchContextRepositoryRevisionsFunc: &SearchContextsStoreGetSearchContextRepositoryRevisionsFunc{
			defaultHook: func(context.Context, int64) (r0 []*types.SearchContextRepositoryRevisions, r1 error) {
				return
			},
		},
		HandleFunc: &SearchContextsStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		ListSearchContextsFunc: &SearchContextsStoreListSearchContextsFunc{
			defaultHook: func(context.Context, ListSearchContextsPageOptions, ListSearchContextsOptions) (r0 []*types.SearchContext, r1 error) {
				return
			},
		},
		SetSearchContextRepositoryRevisionsFunc: &SearchContextsStoreSetSearchContextRepositoryRevisionsFunc{
			defaultHook: func(context.Context, int64, []*types.SearchContextRepositoryRevisions) (r0 error) {
				return
			},
		},
		TransactFunc: &SearchContextsStoreTransactFunc{
			defaultHook: func(context.Context) (r0 SearchContextsStore, r1 error) {
				return
			},
		},
		UpdateSearchContextWithRepositoryRevisionsFunc: &SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc{
			defaultHook: func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (r0 *types.SearchContext, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockSearchContextsStore creates a new mock of the
// SearchContextsStore interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockSearchContextsStore() *MockSearchContextsStore {
	return &MockSearchContextsStore{
		CountSearchContextsFunc: &SearchContextsStoreCountSearchContextsFunc{
			defaultHook: func(context.Context, ListSearchContextsOptions) (int32, error) {
				panic("unexpected invocation of MockSearchContextsStore.CountSearchContexts")
			},
		},
		CreateSearchContextWithRepositoryRevisionsFunc: &SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc{
			defaultHook: func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error) {
				panic("unexpected invocation of MockSearchContextsStore.CreateSearchContextWithRepositoryRevisions")
			},
		},
		DeleteSearchContextFunc: &SearchContextsStoreDeleteSearchContextFunc{
			defaultHook: func(context.Context, int64) error {
				panic("unexpected invocation of MockSearchContextsStore.DeleteSearchContext")
			},
		},
		DoneFunc: &SearchContextsStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockSearchContextsStore.Done")
			},
		},
		ExecFunc: &SearchContextsStoreExecFunc{
			defaultHook: func(context.Context, *sqlf.Query) error {
				panic("unexpected invocation of MockSearchContextsStore.Exec")
			},
		},
		GetAllQueriesFunc: &SearchContextsStoreGetAllQueriesFunc{
			defaultHook: func(context.Context) ([]string, error) {
				panic("unexpected invocation of MockSearchContextsStore.GetAllQueries")
			},
		},
		GetAllRevisionsForReposFunc: &SearchContextsStoreGetAllRevisionsForReposFunc{
			defaultHook: func(context.Context, []api.RepoID) (map[api.RepoID][]string, error) {
				panic("unexpected invocation of MockSearchContextsStore.GetAllRevisionsForRepos")
			},
		},
		GetSearchContextFunc: &SearchContextsStoreGetSearchContextFunc{
			defaultHook: func(context.Context, GetSearchContextOptions) (*types.SearchContext, error) {
				panic("unexpected invocation of MockSearchContextsStore.GetSearchContext")
			},
		},
		GetSearchContextRepositoryRevisionsFunc: &SearchContextsStoreGetSearchContextRepositoryRevisionsFunc{
			defaultHook: func(context.Context, int64) ([]*types.SearchContextRepositoryRevisions, error) {
				panic("unexpected invocation of MockSearchContextsStore.GetSearchContextRepositoryRevisions")
			},
		},
		HandleFunc: &SearchContextsStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockSearchContextsStore.Handle")
			},
		},
		ListSearchContextsFunc: &SearchContextsStoreListSearchContextsFunc{
			defaultHook: func(context.Context, ListSearchContextsPageOptions, ListSearchContextsOptions) ([]*types.SearchContext, error) {
				panic("unexpected invocation of MockSearchContextsStore.ListSearchContexts")
			},
		},
		SetSearchContextRepositoryRevisionsFunc: &SearchContextsStoreSetSearchContextRepositoryRevisionsFunc{
			defaultHook: func(context.Context, int64, []*types.SearchContextRepositoryRevisions) error {
				panic("unexpected invocation of MockSearchContextsStore.SetSearchContextRepositoryRevisions")
			},
		},
		TransactFunc: &SearchContextsStoreTransactFunc{
			defaultHook: func(context.Context) (SearchContextsStore, error) {
				panic("unexpected invocation of MockSearchContextsStore.Transact")
			},
		},
		UpdateSearchContextWithRepositoryRevisionsFunc: &SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc{
			defaultHook: func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error) {
				panic("unexpected invocation of MockSearchContextsStore.UpdateSearchContextWithRepositoryRevisions")
			},
		},
	}
}

// NewMockSearchContextsStoreFrom creates a new mock of the
// MockSearchContextsStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockSearchContextsStoreFrom(i SearchContextsStore) *MockSearchContextsStore {
	return &MockSearchContextsStore{
		CountSearchContextsFunc: &SearchContextsStoreCountSearchContextsFunc{
			defaultHook: i.CountSearchContexts,
		},
		CreateSearchContextWithRepositoryRevisionsFunc: &SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc{
			defaultHook: i.CreateSearchContextWithRepositoryRevisions,
		},
		DeleteSearchContextFunc: &SearchContextsStoreDeleteSearchContextFunc{
			defaultHook: i.DeleteSearchContext,
		},
		DoneFunc: &SearchContextsStoreDoneFunc{
			defaultHook: i.Done,
		},
		ExecFunc: &SearchContextsStoreExecFunc{
			defaultHook: i.Exec,
		},
		GetAllQueriesFunc: &SearchContextsStoreGetAllQueriesFunc{
			defaultHook: i.GetAllQueries,
		},
		GetAllRevisionsForReposFunc: &SearchContextsStoreGetAllRevisionsForReposFunc{
			defaultHook: i.GetAllRevisionsForRepos,
		},
		GetSearchContextFunc: &SearchContextsStoreGetSearchContextFunc{
			defaultHook: i.GetSearchContext,
		},
		GetSearchContextRepositoryRevisionsFunc: &SearchContextsStoreGetSearchContextRepositoryRevisionsFunc{
			defaultHook: i.GetSearchContextRepositoryRevisions,
		},
		HandleFunc: &SearchContextsStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListSearchContextsFunc: &SearchContextsStoreListSearchContextsFunc{
			defaultHook: i.ListSearchContexts,
		},
		SetSearchContextRepositoryRevisionsFunc: &SearchContextsStoreSetSearchContextRepositoryRevisionsFunc{
			defaultHook: i.SetSearchContextRepositoryRevisions,
		},
		TransactFunc: &SearchContextsStoreTransactFunc{
			defaultHook: i.Transact,
		},
		UpdateSearchContextWithRepositoryRevisionsFunc: &SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc{
			defaultHook: i.UpdateSearchContextWithRepositoryRevisions,
		},
	}
}

// SearchContextsStoreCountSearchContextsFunc describes the behavior when
// the CountSearchContexts method of the parent MockSearchContextsStore
// instance is invoked.
type SearchContextsStoreCountSearchContextsFunc struct {
	defaultHook func(context.Context, ListSearchContextsOptions) (int32, error)
	hooks       []func(context.Context, ListSearchContextsOptions) (int32, error)
	history     []SearchContextsStoreCountSearchContextsFuncCall
	mutex       sync.Mutex
}

// CountSearchContexts delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSearchContextsStore) CountSearchContexts(v0 context.Context, v1 ListSearchContextsOptions) (int32, error) {
	r0, r1 := m.CountSearchContextsFunc.nextHook()(v0, v1)
	m.CountSearchContextsFunc.appendCall(SearchContextsStoreCountSearchContextsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CountSearchContexts
// method of the parent MockSearchContextsStore instance is invoked and the
// hook queue is empty.
func (f *SearchContextsStoreCountSearchContextsFunc) SetDefaultHook(hook func(context.Context, ListSearchContextsOptions) (int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountSearchContexts method of the parent MockSearchContextsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *SearchContextsStoreCountSearchContextsFunc) PushHook(hook func(context.Context, ListSearchContextsOptions) (int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SearchContextsStoreCountSearchContextsFunc) SetDefaultReturn(r0 int32, r1 error) {
	f.SetDefaultHook(func(context.Context, ListSearchContextsOptions) (int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SearchContextsStoreCountSearchContextsFunc) PushReturn(r0 int32, r1 error) {
	f.PushHook(func(context.Context, ListSearchContextsOptions) (int32, error) {
		return r0, r1
	})
}

func (f *SearchContextsStoreCountSearchContextsFunc) nextHook() func(context.Context, ListSearchContextsOptions) (int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreCountSearchContextsFunc) appendCall(r0 SearchContextsStoreCountSearchContextsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SearchContextsStoreCountSearchContextsFuncCall objects describing the
// invocations of this function.
func (f *SearchContextsStoreCountSearchContextsFunc) History() []SearchContextsStoreCountSearchContextsFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreCountSearchContextsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreCountSearchContextsFuncCall is an object that
// describes an invocation of method CountSearchContexts on an instance of
// MockSearchContextsStore.
type SearchContextsStoreCountSearchContextsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ListSearchContextsOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreCountSearchContextsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreCountSearchContextsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc
// describes the behavior when the
// CreateSearchContextWithRepositoryRevisions method of the parent
// MockSearchContextsStore instance is invoked.
type SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc struct {
	defaultHook func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error)
	hooks       []func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error)
	history     []SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFuncCall
	mutex       sync.Mutex
}

// CreateSearchContextWithRepositoryRevisions delegates to the next hook
// function in the queue and stores the parameter and result values of this
// invocation.
func (m *MockSearchContextsStore) CreateSearchContextWithRepositoryRevisions(v0 context.Context, v1 *types.SearchContext, v2 []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error) {
	r0, r1 := m.CreateSearchContextWithRepositoryRevisionsFunc.nextHook()(v0, v1, v2)
	m.CreateSearchContextWithRepositoryRevisionsFunc.appendCall(SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CreateSearchContextWithRepositoryRevisions method of the parent
// MockSearchContextsStore instance is invoked and the hook queue is empty.
func (f *SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc) SetDefaultHook(hook func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateSearchContextWithRepositoryRevisions method of the parent
// MockSearchContextsStore instance invokes the hook at the front of the
// queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc) PushHook(hook func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc) SetDefaultReturn(r0 *types.SearchContext, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc) PushReturn(r0 *types.SearchContext, r1 error) {
	f.PushHook(func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error) {
		return r0, r1
	})
}

func (f *SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc) nextHook() func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc) appendCall(r0 SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFuncCall
// objects describing the invocations of this function.
func (f *SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc) History() []SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFuncCall is
// an object that describes an invocation of method
// CreateSearchContextWithRepositoryRevisions on an instance of
// MockSearchContextsStore.
type SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.SearchContext
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []*types.SearchContextRepositoryRevisions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.SearchContext
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SearchContextsStoreDeleteSearchContextFunc describes the behavior when
// the DeleteSearchContext method of the parent MockSearchContextsStore
// instance is invoked.
type SearchContextsStoreDeleteSearchContextFunc struct {
	defaultHook func(context.Context, int64) error
	hooks       []func(context.Context, int64) error
	history     []SearchContextsStoreDeleteSearchContextFuncCall
	mutex       sync.Mutex
}

// DeleteSearchContext delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSearchContextsStore) DeleteSearchContext(v0 context.Context, v1 int64) error {
	r0 := m.DeleteSearchContextFunc.nextHook()(v0, v1)
	m.DeleteSearchContextFunc.appendCall(SearchContextsStoreDeleteSearchContextFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteSearchContext
// method of the parent MockSearchContextsStore instance is invoked and the
// hook queue is empty.
func (f *SearchContextsStoreDeleteSearchContextFunc) SetDefaultHook(hook func(context.Context, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteSearchContext method of the parent MockSearchContextsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *SearchContextsStoreDeleteSearchContextFunc) PushHook(hook func(context.Context, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SearchContextsStoreDeleteSearchContextFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SearchContextsStoreDeleteSearchContextFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64) error {
		return r0
	})
}

func (f *SearchContextsStoreDeleteSearchContextFunc) nextHook() func(context.Context, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreDeleteSearchContextFunc) appendCall(r0 SearchContextsStoreDeleteSearchContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SearchContextsStoreDeleteSearchContextFuncCall objects describing the
// invocations of this function.
func (f *SearchContextsStoreDeleteSearchContextFunc) History() []SearchContextsStoreDeleteSearchContextFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreDeleteSearchContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreDeleteSearchContextFuncCall is an object that
// describes an invocation of method DeleteSearchContext on an instance of
// MockSearchContextsStore.
type SearchContextsStoreDeleteSearchContextFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreDeleteSearchContextFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreDeleteSearchContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SearchContextsStoreDoneFunc describes the behavior when the Done method
// of the parent MockSearchContextsStore instance is invoked.
type SearchContextsStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []SearchContextsStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSearchContextsStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(SearchContextsStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockSearchContextsStore instance is invoked and the hook queue is
// empty.
func (f *SearchContextsStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockSearchContextsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SearchContextsStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SearchContextsStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SearchContextsStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *SearchContextsStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreDoneFunc) appendCall(r0 SearchContextsStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SearchContextsStoreDoneFuncCall objects
// describing the invocations of this function.
func (f *SearchContextsStoreDoneFunc) History() []SearchContextsStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreDoneFuncCall is an object that describes an invocation
// of method Done on an instance of MockSearchContextsStore.
type SearchContextsStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SearchContextsStoreExecFunc describes the behavior when the Exec method
// of the parent MockSearchContextsStore instance is invoked.
type SearchContextsStoreExecFunc struct {
	defaultHook func(context.Context, *sqlf.Query) error
	hooks       []func(context.Context, *sqlf.Query) error
	history     []SearchContextsStoreExecFuncCall
	mutex       sync.Mutex
}

// Exec delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSearchContextsStore) Exec(v0 context.Context, v1 *sqlf.Query) error {
	r0 := m.ExecFunc.nextHook()(v0, v1)
	m.ExecFunc.appendCall(SearchContextsStoreExecFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Exec method of the
// parent MockSearchContextsStore instance is invoked and the hook queue is
// empty.
func (f *SearchContextsStoreExecFunc) SetDefaultHook(hook func(context.Context, *sqlf.Query) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Exec method of the parent MockSearchContextsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SearchContextsStoreExecFunc) PushHook(hook func(context.Context, *sqlf.Query) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SearchContextsStoreExecFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *sqlf.Query) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SearchContextsStoreExecFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *sqlf.Query) error {
		return r0
	})
}

func (f *SearchContextsStoreExecFunc) nextHook() func(context.Context, *sqlf.Query) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreExecFunc) appendCall(r0 SearchContextsStoreExecFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SearchContextsStoreExecFuncCall objects
// describing the invocations of this function.
func (f *SearchContextsStoreExecFunc) History() []SearchContextsStoreExecFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreExecFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreExecFuncCall is an object that describes an invocation
// of method Exec on an instance of MockSearchContextsStore.
type SearchContextsStoreExecFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sqlf.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreExecFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreExecFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SearchContextsStoreGetAllQueriesFunc describes the behavior when the
// GetAllQueries method of the parent MockSearchContextsStore instance is
// invoked.
type SearchContextsStoreGetAllQueriesFunc struct {
	defaultHook func(context.Context) ([]string, error)
	hooks       []func(context.Context) ([]string, error)
	history     []SearchContextsStoreGetAllQueriesFuncCall
	mutex       sync.Mutex
}

// GetAllQueries delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockSearchContextsStore) GetAllQueries(v0 context.Context) ([]string, error) {
	r0, r1 := m.GetAllQueriesFunc.nextHook()(v0)
	m.GetAllQueriesFunc.appendCall(SearchContextsStoreGetAllQueriesFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetAllQueries method
// of the parent MockSearchContextsStore instance is invoked and the hook
// queue is empty.
func (f *SearchContextsStoreGetAllQueriesFunc) SetDefaultHook(hook func(context.Context) ([]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAllQueries method of the parent MockSearchContextsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *SearchContextsStoreGetAllQueriesFunc) PushHook(hook func(context.Context) ([]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SearchContextsStoreGetAllQueriesFunc) SetDefaultReturn(r0 []string, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SearchContextsStoreGetAllQueriesFunc) PushReturn(r0 []string, r1 error) {
	f.PushHook(func(context.Context) ([]string, error) {
		return r0, r1
	})
}

func (f *SearchContextsStoreGetAllQueriesFunc) nextHook() func(context.Context) ([]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreGetAllQueriesFunc) appendCall(r0 SearchContextsStoreGetAllQueriesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SearchContextsStoreGetAllQueriesFuncCall
// objects describing the invocations of this function.
func (f *SearchContextsStoreGetAllQueriesFunc) History() []SearchContextsStoreGetAllQueriesFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreGetAllQueriesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreGetAllQueriesFuncCall is an object that describes an
// invocation of method GetAllQueries on an instance of
// MockSearchContextsStore.
type SearchContextsStoreGetAllQueriesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreGetAllQueriesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreGetAllQueriesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SearchContextsStoreGetAllRevisionsForReposFunc describes the behavior
// when the GetAllRevisionsForRepos method of the parent
// MockSearchContextsStore instance is invoked.
type SearchContextsStoreGetAllRevisionsForReposFunc struct {
	defaultHook func(context.Context, []api.RepoID) (map[api.RepoID][]string, error)
	hooks       []func(context.Context, []api.RepoID) (map[api.RepoID][]string, error)
	history     []SearchContextsStoreGetAllRevisionsForReposFuncCall
	mutex       sync.Mutex
}

// GetAllRevisionsForRepos delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockSearchContextsStore) GetAllRevisionsForRepos(v0 context.Context, v1 []api.RepoID) (map[api.RepoID][]string, error) {
	r0, r1 := m.GetAllRevisionsForReposFunc.nextHook()(v0, v1)
	m.GetAllRevisionsForReposFunc.appendCall(SearchContextsStoreGetAllRevisionsForReposFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetAllRevisionsForRepos method of the parent MockSearchContextsStore
// instance is invoked and the hook queue is empty.
func (f *SearchContextsStoreGetAllRevisionsForReposFunc) SetDefaultHook(hook func(context.Context, []api.RepoID) (map[api.RepoID][]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAllRevisionsForRepos method of the parent MockSearchContextsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *SearchContextsStoreGetAllRevisionsForReposFunc) PushHook(hook func(context.Context, []api.RepoID) (map[api.RepoID][]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SearchContextsStoreGetAllRevisionsForReposFunc) SetDefaultReturn(r0 map[api.RepoID][]string, r1 error) {
	f.SetDefaultHook(func(context.Context, []api.RepoID) (map[api.RepoID][]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SearchContextsStoreGetAllRevisionsForReposFunc) PushReturn(r0 map[api.RepoID][]string, r1 error) {
	f.PushHook(func(context.Context, []api.RepoID) (map[api.RepoID][]string, error) {
		return r0, r1
	})
}

func (f *SearchContextsStoreGetAllRevisionsForReposFunc) nextHook() func(context.Context, []api.RepoID) (map[api.RepoID][]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreGetAllRevisionsForReposFunc) appendCall(r0 SearchContextsStoreGetAllRevisionsForReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SearchContextsStoreGetAllRevisionsForReposFuncCall objects describing the
// invocations of this function.
func (f *SearchContextsStoreGetAllRevisionsForReposFunc) History() []SearchContextsStoreGetAllRevisionsForReposFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreGetAllRevisionsForReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreGetAllRevisionsForReposFuncCall is an object that
// describes an invocation of method GetAllRevisionsForRepos on an instance
// of MockSearchContextsStore.
type SearchContextsStoreGetAllRevisionsForReposFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[api.RepoID][]string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreGetAllRevisionsForReposFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreGetAllRevisionsForReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SearchContextsStoreGetSearchContextFunc describes the behavior when the
// GetSearchContext method of the parent MockSearchContextsStore instance is
// invoked.
type SearchContextsStoreGetSearchContextFunc struct {
	defaultHook func(context.Context, GetSearchContextOptions) (*types.SearchContext, error)
	hooks       []func(context.Context, GetSearchContextOptions) (*types.SearchContext, error)
	history     []SearchContextsStoreGetSearchContextFuncCall
	mutex       sync.Mutex
}

// GetSearchContext delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSearchContextsStore) GetSearchContext(v0 context.Context, v1 GetSearchContextOptions) (*types.SearchContext, error) {
	r0, r1 := m.GetSearchContextFunc.nextHook()(v0, v1)
	m.GetSearchContextFunc.appendCall(SearchContextsStoreGetSearchContextFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetSearchContext
// method of the parent MockSearchContextsStore instance is invoked and the
// hook queue is empty.
func (f *SearchContextsStoreGetSearchContextFunc) SetDefaultHook(hook func(context.Context, GetSearchContextOptions) (*types.SearchContext, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetSearchContext method of the parent MockSearchContextsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *SearchContextsStoreGetSearchContextFunc) PushHook(hook func(context.Context, GetSearchContextOptions) (*types.SearchContext, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SearchContextsStoreGetSearchContextFunc) SetDefaultReturn(r0 *types.SearchContext, r1 error) {
	f.SetDefaultHook(func(context.Context, GetSearchContextOptions) (*types.SearchContext, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SearchContextsStoreGetSearchContextFunc) PushReturn(r0 *types.SearchContext, r1 error) {
	f.PushHook(func(context.Context, GetSearchContextOptions) (*types.SearchContext, error) {
		return r0, r1
	})
}

func (f *SearchContextsStoreGetSearchContextFunc) nextHook() func(context.Context, GetSearchContextOptions) (*types.SearchContext, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreGetSearchContextFunc) appendCall(r0 SearchContextsStoreGetSearchContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SearchContextsStoreGetSearchContextFuncCall
// objects describing the invocations of this function.
func (f *SearchContextsStoreGetSearchContextFunc) History() []SearchContextsStoreGetSearchContextFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreGetSearchContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreGetSearchContextFuncCall is an object that describes
// an invocation of method GetSearchContext on an instance of
// MockSearchContextsStore.
type SearchContextsStoreGetSearchContextFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 GetSearchContextOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.SearchContext
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreGetSearchContextFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreGetSearchContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SearchContextsStoreGetSearchContextRepositoryRevisionsFunc describes the
// behavior when the GetSearchContextRepositoryRevisions method of the
// parent MockSearchContextsStore instance is invoked.
type SearchContextsStoreGetSearchContextRepositoryRevisionsFunc struct {
	defaultHook func(context.Context, int64) ([]*types.SearchContextRepositoryRevisions, error)
	hooks       []func(context.Context, int64) ([]*types.SearchContextRepositoryRevisions, error)
	history     []SearchContextsStoreGetSearchContextRepositoryRevisionsFuncCall
	mutex       sync.Mutex
}

// GetSearchContextRepositoryRevisions delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockSearchContextsStore) GetSearchContextRepositoryRevisions(v0 context.Context, v1 int64) ([]*types.SearchContextRepositoryRevisions, error) {
	r0, r1 := m.GetSearchContextRepositoryRevisionsFunc.nextHook()(v0, v1)
	m.GetSearchContextRepositoryRevisionsFunc.appendCall(SearchContextsStoreGetSearchContextRepositoryRevisionsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetSearchContextRepositoryRevisions method of the parent
// MockSearchContextsStore instance is invoked and the hook queue is empty.
func (f *SearchContextsStoreGetSearchContextRepositoryRevisionsFunc) SetDefaultHook(hook func(context.Context, int64) ([]*types.SearchContextRepositoryRevisions, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetSearchContextRepositoryRevisions method of the parent
// MockSearchContextsStore instance invokes the hook at the front of the
// queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *SearchContextsStoreGetSearchContextRepositoryRevisionsFunc) PushHook(hook func(context.Context, int64) ([]*types.SearchContextRepositoryRevisions, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SearchContextsStoreGetSearchContextRepositoryRevisionsFunc) SetDefaultReturn(r0 []*types.SearchContextRepositoryRevisions, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) ([]*types.SearchContextRepositoryRevisions, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SearchContextsStoreGetSearchContextRepositoryRevisionsFunc) PushReturn(r0 []*types.SearchContextRepositoryRevisions, r1 error) {
	f.PushHook(func(context.Context, int64) ([]*types.SearchContextRepositoryRevisions, error) {
		return r0, r1
	})
}

func (f *SearchContextsStoreGetSearchContextRepositoryRevisionsFunc) nextHook() func(context.Context, int64) ([]*types.SearchContextRepositoryRevisions, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreGetSearchContextRepositoryRevisionsFunc) appendCall(r0 SearchContextsStoreGetSearchContextRepositoryRevisionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SearchContextsStoreGetSearchContextRepositoryRevisionsFuncCall objects
// describing the invocations of this function.
func (f *SearchContextsStoreGetSearchContextRepositoryRevisionsFunc) History() []SearchContextsStoreGetSearchContextRepositoryRevisionsFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreGetSearchContextRepositoryRevisionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreGetSearchContextRepositoryRevisionsFuncCall is an
// object that describes an invocation of method
// GetSearchContextRepositoryRevisions on an instance of
// MockSearchContextsStore.
type SearchContextsStoreGetSearchContextRepositoryRevisionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.SearchContextRepositoryRevisions
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreGetSearchContextRepositoryRevisionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreGetSearchContextRepositoryRevisionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SearchContextsStoreHandleFunc describes the behavior when the Handle
// method of the parent MockSearchContextsStore instance is invoked.
type SearchContextsStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []SearchContextsStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSearchContextsStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(SearchContextsStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockSearchContextsStore instance is invoked and the hook queue is
// empty.
func (f *SearchContextsStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockSearchContextsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SearchContextsStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SearchContextsStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SearchContextsStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *SearchContextsStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreHandleFunc) appendCall(r0 SearchContextsStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SearchContextsStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *SearchContextsStoreHandleFunc) History() []SearchContextsStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of MockSearchContextsStore.
type SearchContextsStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SearchContextsStoreListSearchContextsFunc describes the behavior when the
// ListSearchContexts method of the parent MockSearchContextsStore instance
// is invoked.
type SearchContextsStoreListSearchContextsFunc struct {
	defaultHook func(context.Context, ListSearchContextsPageOptions, ListSearchContextsOptions) ([]*types.SearchContext, error)
	hooks       []func(context.Context, ListSearchContextsPageOptions, ListSearchContextsOptions) ([]*types.SearchContext, error)
	history     []SearchContextsStoreListSearchContextsFuncCall
	mutex       sync.Mutex
}

// ListSearchContexts delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSearchContextsStore) ListSearchContexts(v0 context.Context, v1 ListSearchContextsPageOptions, v2 ListSearchContextsOptions) ([]*types.SearchContext, error) {
	r0, r1 := m.ListSearchContextsFunc.nextHook()(v0, v1, v2)
	m.ListSearchContextsFunc.appendCall(SearchContextsStoreListSearchContextsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListSearchContexts
// method of the parent MockSearchContextsStore instance is invoked and the
// hook queue is empty.
func (f *SearchContextsStoreListSearchContextsFunc) SetDefaultHook(hook func(context.Context, ListSearchContextsPageOptions, ListSearchContextsOptions) ([]*types.SearchContext, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListSearchContexts method of the parent MockSearchContextsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *SearchContextsStoreListSearchContextsFunc) PushHook(hook func(context.Context, ListSearchContextsPageOptions, ListSearchContextsOptions) ([]*types.SearchContext, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SearchContextsStoreListSearchContextsFunc) SetDefaultReturn(r0 []*types.SearchContext, r1 error) {
	f.SetDefaultHook(func(context.Context, ListSearchContextsPageOptions, ListSearchContextsOptions) ([]*types.SearchContext, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SearchContextsStoreListSearchContextsFunc) PushReturn(r0 []*types.SearchContext, r1 error) {
	f.PushHook(func(context.Context, ListSearchContextsPageOptions, ListSearchContextsOptions) ([]*types.SearchContext, error) {
		return r0, r1
	})
}

func (f *SearchContextsStoreListSearchContextsFunc) nextHook() func(context.Context, ListSearchContextsPageOptions, ListSearchContextsOptions) ([]*types.SearchContext, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreListSearchContextsFunc) appendCall(r0 SearchContextsStoreListSearchContextsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SearchContextsStoreListSearchContextsFuncCall objects describing the
// invocations of this function.
func (f *SearchContextsStoreListSearchContextsFunc) History() []SearchContextsStoreListSearchContextsFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreListSearchContextsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreListSearchContextsFuncCall is an object that describes
// an invocation of method ListSearchContexts on an instance of
// MockSearchContextsStore.
type SearchContextsStoreListSearchContextsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ListSearchContextsPageOptions
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 ListSearchContextsOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.SearchContext
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreListSearchContextsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreListSearchContextsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SearchContextsStoreSetSearchContextRepositoryRevisionsFunc describes the
// behavior when the SetSearchContextRepositoryRevisions method of the
// parent MockSearchContextsStore instance is invoked.
type SearchContextsStoreSetSearchContextRepositoryRevisionsFunc struct {
	defaultHook func(context.Context, int64, []*types.SearchContextRepositoryRevisions) error
	hooks       []func(context.Context, int64, []*types.SearchContextRepositoryRevisions) error
	history     []SearchContextsStoreSetSearchContextRepositoryRevisionsFuncCall
	mutex       sync.Mutex
}

// SetSearchContextRepositoryRevisions delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockSearchContextsStore) SetSearchContextRepositoryRevisions(v0 context.Context, v1 int64, v2 []*types.SearchContextRepositoryRevisions) error {
	r0 := m.SetSearchContextRepositoryRevisionsFunc.nextHook()(v0, v1, v2)
	m.SetSearchContextRepositoryRevisionsFunc.appendCall(SearchContextsStoreSetSearchContextRepositoryRevisionsFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// SetSearchContextRepositoryRevisions method of the parent
// MockSearchContextsStore instance is invoked and the hook queue is empty.
func (f *SearchContextsStoreSetSearchContextRepositoryRevisionsFunc) SetDefaultHook(hook func(context.Context, int64, []*types.SearchContextRepositoryRevisions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetSearchContextRepositoryRevisions method of the parent
// MockSearchContextsStore instance invokes the hook at the front of the
// queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *SearchContextsStoreSetSearchContextRepositoryRevisionsFunc) PushHook(hook func(context.Context, int64, []*types.SearchContextRepositoryRevisions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SearchContextsStoreSetSearchContextRepositoryRevisionsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64, []*types.SearchContextRepositoryRevisions) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SearchContextsStoreSetSearchContextRepositoryRevisionsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64, []*types.SearchContextRepositoryRevisions) error {
		return r0
	})
}

func (f *SearchContextsStoreSetSearchContextRepositoryRevisionsFunc) nextHook() func(context.Context, int64, []*types.SearchContextRepositoryRevisions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreSetSearchContextRepositoryRevisionsFunc) appendCall(r0 SearchContextsStoreSetSearchContextRepositoryRevisionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SearchContextsStoreSetSearchContextRepositoryRevisionsFuncCall objects
// describing the invocations of this function.
func (f *SearchContextsStoreSetSearchContextRepositoryRevisionsFunc) History() []SearchContextsStoreSetSearchContextRepositoryRevisionsFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreSetSearchContextRepositoryRevisionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreSetSearchContextRepositoryRevisionsFuncCall is an
// object that describes an invocation of method
// SetSearchContextRepositoryRevisions on an instance of
// MockSearchContextsStore.
type SearchContextsStoreSetSearchContextRepositoryRevisionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []*types.SearchContextRepositoryRevisions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreSetSearchContextRepositoryRevisionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreSetSearchContextRepositoryRevisionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SearchContextsStoreTransactFunc describes the behavior when the Transact
// method of the parent MockSearchContextsStore instance is invoked.
type SearchContextsStoreTransactFunc struct {
	defaultHook func(context.Context) (SearchContextsStore, error)
	hooks       []func(context.Context) (SearchContextsStore, error)
	history     []SearchContextsStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSearchContextsStore) Transact(v0 context.Context) (SearchContextsStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(SearchContextsStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockSearchContextsStore instance is invoked and the hook queue
// is empty.
func (f *SearchContextsStoreTransactFunc) SetDefaultHook(hook func(context.Context) (SearchContextsStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockSearchContextsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *SearchContextsStoreTransactFunc) PushHook(hook func(context.Context) (SearchContextsStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SearchContextsStoreTransactFunc) SetDefaultReturn(r0 SearchContextsStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (SearchContextsStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SearchContextsStoreTransactFunc) PushReturn(r0 SearchContextsStore, r1 error) {
	f.PushHook(func(context.Context) (SearchContextsStore, error) {
		return r0, r1
	})
}

func (f *SearchContextsStoreTransactFunc) nextHook() func(context.Context) (SearchContextsStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreTransactFunc) appendCall(r0 SearchContextsStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SearchContextsStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *SearchContextsStoreTransactFunc) History() []SearchContextsStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreTransactFuncCall is an object that describes an
// invocation of method Transact on an instance of MockSearchContextsStore.
type SearchContextsStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 SearchContextsStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc
// describes the behavior when the
// UpdateSearchContextWithRepositoryRevisions method of the parent
// MockSearchContextsStore instance is invoked.
type SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc struct {
	defaultHook func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error)
	hooks       []func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error)
	history     []SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFuncCall
	mutex       sync.Mutex
}

// UpdateSearchContextWithRepositoryRevisions delegates to the next hook
// function in the queue and stores the parameter and result values of this
// invocation.
func (m *MockSearchContextsStore) UpdateSearchContextWithRepositoryRevisions(v0 context.Context, v1 *types.SearchContext, v2 []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error) {
	r0, r1 := m.UpdateSearchContextWithRepositoryRevisionsFunc.nextHook()(v0, v1, v2)
	m.UpdateSearchContextWithRepositoryRevisionsFunc.appendCall(SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// UpdateSearchContextWithRepositoryRevisions method of the parent
// MockSearchContextsStore instance is invoked and the hook queue is empty.
func (f *SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc) SetDefaultHook(hook func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateSearchContextWithRepositoryRevisions method of the parent
// MockSearchContextsStore instance invokes the hook at the front of the
// queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc) PushHook(hook func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc) SetDefaultReturn(r0 *types.SearchContext, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc) PushReturn(r0 *types.SearchContext, r1 error) {
	f.PushHook(func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error) {
		return r0, r1
	})
}

func (f *SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc) nextHook() func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc) appendCall(r0 SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFuncCall
// objects describing the invocations of this function.
func (f *SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc) History() []SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFuncCall is
// an object that describes an invocation of method
// UpdateSearchContextWithRepositoryRevisions on an instance of
// MockSearchContextsStore.
type SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.SearchContext
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []*types.SearchContextRepositoryRevisions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.SearchContext
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockSecurityEventLogsStore is a mock implementation of the
// SecurityEventLogsStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockSecurityEventLogsStore struct {
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *SecurityEventLogsStoreHandleFunc
	// InsertFunc is an instance of a mock function object controlling the
	// behavior of the method Insert.
	InsertFunc *SecurityEventLogsStoreInsertFunc
	// LogEventFunc is an instance of a mock function object controlling the
	// behavior of the method LogEvent.
	LogEventFunc *SecurityEventLogsStoreLogEventFunc
}

// NewMockSecurityEventLogsStore creates a new mock of the
// SecurityEventLogsStore interface. All methods return zero values for all
// results, unless overwritten.
func NewMockSecurityEventLogsStore() *MockSecurityEventLogsStore {
	return &MockSecurityEventLogsStore{
		HandleFunc: &SecurityEventLogsStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		InsertFunc: &SecurityEventLogsStoreInsertFunc{
			defaultHook: func(context.Context, *SecurityEvent) (r0 error) {
				return
			},
		},
		LogEventFunc: &SecurityEventLogsStoreLogEventFunc{
			defaultHook: func(context.Context, *SecurityEvent) {
				return
			},
		},
	}
}

// NewStrictMockSecurityEventLogsStore creates a new mock of the
// SecurityEventLogsStore interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockSecurityEventLogsStore() *MockSecurityEventLogsStore {
	return &MockSecurityEventLogsStore{
		HandleFunc: &SecurityEventLogsStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockSecurityEventLogsStore.Handle")
			},
		},
		InsertFunc: &SecurityEventLogsStoreInsertFunc{
			defaultHook: func(context.Context, *SecurityEvent) error {
				panic("unexpected invocation of MockSecurityEventLogsStore.Insert")
			},
		},
		LogEventFunc: &SecurityEventLogsStoreLogEventFunc{
			defaultHook: func(context.Context, *SecurityEvent) {
				panic("unexpected invocation of MockSecurityEventLogsStore.LogEvent")
			},
		},
	}
}

// NewMockSecurityEventLogsStoreFrom creates a new mock of the
// MockSecurityEventLogsStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockSecurityEventLogsStoreFrom(i SecurityEventLogsStore) *MockSecurityEventLogsStore {
	return &MockSecurityEventLogsStore{
		HandleFunc: &SecurityEventLogsStoreHandleFunc{
			defaultHook: i.Handle,
		},
		InsertFunc: &SecurityEventLogsStoreInsertFunc{
			defaultHook: i.Insert,
		},
		LogEventFunc: &SecurityEventLogsStoreLogEventFunc{
			defaultHook: i.LogEvent,
		},
	}
}

// SecurityEventLogsStoreHandleFunc describes the behavior when the Handle
// method of the parent MockSecurityEventLogsStore instance is invoked.
type SecurityEventLogsStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []SecurityEventLogsStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSecurityEventLogsStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(SecurityEventLogsStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockSecurityEventLogsStore instance is invoked and the hook queue
// is empty.
func (f *SecurityEventLogsStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockSecurityEventLogsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *SecurityEventLogsStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SecurityEventLogsStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SecurityEventLogsStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *SecurityEventLogsStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SecurityEventLogsStoreHandleFunc) appendCall(r0 SecurityEventLogsStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SecurityEventLogsStoreHandleFuncCall
// objects describing the invocations of this function.
func (f *SecurityEventLogsStoreHandleFunc) History() []SecurityEventLogsStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]SecurityEventLogsStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SecurityEventLogsStoreHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of MockSecurityEventLogsStore.
type SecurityEventLogsStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SecurityEventLogsStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SecurityEventLogsStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SecurityEventLogsStoreInsertFunc describes the behavior when the Insert
// method of the parent MockSecurityEventLogsStore instance is invoked.
type SecurityEventLogsStoreInsertFunc struct {
	defaultHook func(context.Context, *SecurityEvent) error
	hooks       []func(context.Context, *SecurityEvent) error
	history     []SecurityEventLogsStoreInsertFuncCall
	mutex       sync.Mutex
}

// Insert delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSecurityEventLogsStore) Insert(v0 context.Context, v1 *SecurityEvent) error {
	r0 := m.InsertFunc.nextHook()(v0, v1)
	m.InsertFunc.appendCall(SecurityEventLogsStoreInsertFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Insert method of the
// parent MockSecurityEventLogsStore instance is invoked and the hook queue
// is empty.
func (f *SecurityEventLogsStoreInsertFunc) SetDefaultHook(hook func(context.Context, *SecurityEvent) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Insert method of the parent MockSecurityEventLogsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *SecurityEventLogsStoreInsertFunc) PushHook(hook func(context.Context, *SecurityEvent) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SecurityEventLogsStoreInsertFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *SecurityEvent) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SecurityEventLogsStoreInsertFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *SecurityEvent) error {
		return r0
	})
}

func (f *SecurityEventLogsStoreInsertFunc) nextHook() func(context.Context, *SecurityEvent) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SecurityEventLogsStoreInsertFunc) appendCall(r0 SecurityEventLogsStoreInsertFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SecurityEventLogsStoreInsertFuncCall
// objects describing the invocations of this function.
func (f *SecurityEventLogsStoreInsertFunc) History() []SecurityEventLogsStoreInsertFuncCall {
	f.mutex.Lock()
	history := make([]SecurityEventLogsStoreInsertFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SecurityEventLogsStoreInsertFuncCall is an object that describes an
// invocation of method Insert on an instance of MockSecurityEventLogsStore.
type SecurityEventLogsStoreInsertFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *SecurityEvent
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SecurityEventLogsStoreInsertFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SecurityEventLogsStoreInsertFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SecurityEventLogsStoreLogEventFunc describes the behavior when the
// LogEvent method of the parent MockSecurityEventLogsStore instance is
// invoked.
type SecurityEventLogsStoreLogEventFunc struct {
	defaultHook func(context.Context, *SecurityEvent)
	hooks       []func(context.Context, *SecurityEvent)
	history     []SecurityEventLogsStoreLogEventFuncCall
	mutex       sync.Mutex
}

// LogEvent delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSecurityEventLogsStore) LogEvent(v0 context.Context, v1 *SecurityEvent) {
	m.LogEventFunc.nextHook()(v0, v1)
	m.LogEventFunc.appendCall(SecurityEventLogsStoreLogEventFuncCall{v0, v1})
	return
}

// SetDefaultHook sets function that is called when the LogEvent method of
// the parent MockSecurityEventLogsStore instance is invoked and the hook
// queue is empty.
func (f *SecurityEventLogsStoreLogEventFunc) SetDefaultHook(hook func(context.Context, *SecurityEvent)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LogEvent method of the parent MockSecurityEventLogsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *SecurityEventLogsStoreLogEventFunc) PushHook(hook func(context.Context, *SecurityEvent)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SecurityEventLogsStoreLogEventFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(context.Context, *SecurityEvent) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SecurityEventLogsStoreLogEventFunc) PushReturn() {
	f.PushHook(func(context.Context, *SecurityEvent) {
		return
	})
}

func (f *SecurityEventLogsStoreLogEventFunc) nextHook() func(context.Context, *SecurityEvent) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SecurityEventLogsStoreLogEventFunc) appendCall(r0 SecurityEventLogsStoreLogEventFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SecurityEventLogsStoreLogEventFuncCall
// objects describing the invocations of this function.
func (f *SecurityEventLogsStoreLogEventFunc) History() []SecurityEventLogsStoreLogEventFuncCall {
	f.mutex.Lock()
	history := make([]SecurityEventLogsStoreLogEventFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SecurityEventLogsStoreLogEventFuncCall is an object that describes an
// invocation of method LogEvent on an instance of
// MockSecurityEventLogsStore.
type SecurityEventLogsStoreLogEventFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *SecurityEvent
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SecurityEventLogsStoreLogEventFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SecurityEventLogsStoreLogEventFuncCall) Results() []interface{} {
	return []interface{}{}
}

// MockSettingsStore is a mock implementation of the SettingsStore interface
// (from the package github.com/sourcegraph/sourcegraph/internal/database)
// used for unit testing.
type MockSettingsStore struct {
	// CreateIfUpToDateFunc is an instance of a mock function object
	// controlling the behavior of the method CreateIfUpToDate.
	CreateIfUpToDateFunc *SettingsStoreCreateIfUpToDateFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *SettingsStoreDoneFunc
	// GetLastestSchemaSettingsFunc is an instance of a mock function object
	// controlling the behavior of the method GetLastestSchemaSettings.
	GetLastestSchemaSettingsFunc *SettingsStoreGetLastestSchemaSettingsFunc
	// GetLatestFunc is an instance of a mock function object controlling
	// the behavior of the method GetLatest.
	GetLatestFunc *SettingsStoreGetLatestFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *SettingsStoreHandleFunc
	// ListAllFunc is an instance of a mock function object controlling the
	// behavior of the method ListAll.
	ListAllFunc *SettingsStoreListAllFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *SettingsStoreTransactFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *SettingsStoreWithFunc
}

// NewMockSettingsStore creates a new mock of the SettingsStore interface.
// All methods return zero values for all results, unless overwritten.
func NewMockSettingsStore() *MockSettingsStore {
	return &MockSettingsStore{
		CreateIfUpToDateFunc: &SettingsStoreCreateIfUpToDateFunc{
			defaultHook: func(context.Context, api.SettingsSubject, *int32, *int32, string) (r0 *api.Settings, r1 error) {
				return
			},
		},
		DoneFunc: &SettingsStoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		GetLastestSchemaSettingsFunc: &SettingsStoreGetLastestSchemaSettingsFunc{
			defaultHook: func(context.Context, api.SettingsSubject) (r0 *schema.Settings, r1 error) {
				return
			},
		},
		GetLatestFunc: &SettingsStoreGetLatestFunc{
			defaultHook: func(context.Context, api.SettingsSubject) (r0 *api.Settings, r1 error) {
				return
			},
		},
		HandleFunc: &SettingsStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		ListAllFunc: &SettingsStoreListAllFunc{
			defaultHook: func(context.Context, string) (r0 []*api.Settings, r1 error) {
				return
			},
		},
		TransactFunc: &SettingsStoreTransactFunc{
			defaultHook: func(context.Context) (r0 SettingsStore, r1 error) {
				return
			},
		},
		WithFunc: &SettingsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 SettingsStore) {
				return
			},
		},
	}
}

// NewStrictMockSettingsStore creates a new mock of the SettingsStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockSettingsStore() *MockSettingsStore {
	return &MockSettingsStore{
		CreateIfUpToDateFunc: &SettingsStoreCreateIfUpToDateFunc{
			defaultHook: func(context.Context, api.SettingsSubject, *int32, *int32, string) (*api.Settings, error) {
				panic("unexpected invocation of MockSettingsStore.CreateIfUpToDate")
			},
		},
		DoneFunc: &SettingsStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockSettingsStore.Done")
			},
		},
		GetLastestSchemaSettingsFunc: &SettingsStoreGetLastestSchemaSettingsFunc{
			defaultHook: func(context.Context, api.SettingsSubject) (*schema.Settings, error) {
				panic("unexpected invocation of MockSettingsStore.GetLastestSchemaSettings")
			},
		},
		GetLatestFunc: &SettingsStoreGetLatestFunc{
			defaultHook: func(context.Context, api.SettingsSubject) (*api.Settings, error) {
				panic("unexpected invocation of MockSettingsStore.GetLatest")
			},
		},
		HandleFunc: &SettingsStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockSettingsStore.Handle")
			},
		},
		ListAllFunc: &SettingsStoreListAllFunc{
			defaultHook: func(context.Context, string) ([]*api.Settings, error) {
				panic("unexpected invocation of MockSettingsStore.ListAll")
			},
		},
		TransactFunc: &SettingsStoreTransactFunc{
			defaultHook: func(context.Context) (SettingsStore, error) {
				panic("unexpected invocation of MockSettingsStore.Transact")
			},
		},
		WithFunc: &SettingsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) SettingsStore {
				panic("unexpected invocation of MockSettingsStore.With")
			},
		},
	}
}

// NewMockSettingsStoreFrom creates a new mock of the MockSettingsStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockSettingsStoreFrom(i SettingsStore) *MockSettingsStore {
	return &MockSettingsStore{
		CreateIfUpToDateFunc: &SettingsStoreCreateIfUpToDateFunc{
			defaultHook: i.CreateIfUpToDate,
		},
		DoneFunc: &SettingsStoreDoneFunc{
			defaultHook: i.Done,
		},
		GetLastestSchemaSettingsFunc: &SettingsStoreGetLastestSchemaSettingsFunc{
			defaultHook: i.GetLastestSchemaSettings,
		},
		GetLatestFunc: &SettingsStoreGetLatestFunc{
			defaultHook: i.GetLatest,
		},
		HandleFunc: &SettingsStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListAllFunc: &SettingsStoreListAllFunc{
			defaultHook: i.ListAll,
		},
		TransactFunc: &SettingsStoreTransactFunc{
			defaultHook: i.Transact,
		},
		WithFunc: &SettingsStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// SettingsStoreCreateIfUpToDateFunc describes the behavior when the
// CreateIfUpToDate method of the parent MockSettingsStore instance is
// invoked.
type SettingsStoreCreateIfUpToDateFunc struct {
	defaultHook func(context.Context, api.SettingsSubject, *int32, *int32, string) (*api.Settings, error)
	hooks       []func(context.Context, api.SettingsSubject, *int32, *int32, string) (*api.Settings, error)
	history     []SettingsStoreCreateIfUpToDateFuncCall
	mutex       sync.Mutex
}

// CreateIfUpToDate delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSettingsStore) CreateIfUpToDate(v0 context.Context, v1 api.SettingsSubject, v2 *int32, v3 *int32, v4 string) (*api.Settings, error) {
	r0, r1 := m.CreateIfUpToDateFunc.nextHook()(v0, v1, v2, v3, v4)
	m.CreateIfUpToDateFunc.appendCall(SettingsStoreCreateIfUpToDateFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateIfUpToDate
// method of the parent MockSettingsStore instance is invoked and the hook
// queue is empty.
func (f *SettingsStoreCreateIfUpToDateFunc) SetDefaultHook(hook func(context.Context, api.SettingsSubject, *int32, *int32, string) (*api.Settings, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateIfUpToDate method of the parent MockSettingsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *SettingsStoreCreateIfUpToDateFunc) PushHook(hook func(context.Context, api.SettingsSubject, *int32, *int32, string) (*api.Settings, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SettingsStoreCreateIfUpToDateFunc) SetDefaultReturn(r0 *api.Settings, r1 error) {
	f.SetDefaultHook(func(context.Context, api.SettingsSubject, *int32, *int32, string) (*api.Settings, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SettingsStoreCreateIfUpToDateFunc) PushReturn(r0 *api.Settings, r1 error) {
	f.PushHook(func(context.Context, api.SettingsSubject, *int32, *int32, string) (*api.Settings, error) {
		return r0, r1
	})
}

func (f *SettingsStoreCreateIfUpToDateFunc) nextHook() func(context.Context, api.SettingsSubject, *int32, *int32, string) (*api.Settings, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SettingsStoreCreateIfUpToDateFunc) appendCall(r0 SettingsStoreCreateIfUpToDateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SettingsStoreCreateIfUpToDateFuncCall
// objects describing the invocations of this function.
func (f *SettingsStoreCreateIfUpToDateFunc) History() []SettingsStoreCreateIfUpToDateFuncCall {
	f.mutex.Lock()
	history := make([]SettingsStoreCreateIfUpToDateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SettingsStoreCreateIfUpToDateFuncCall is an object that describes an
// invocation of method CreateIfUpToDate on an instance of
// MockSettingsStore.
type SettingsStoreCreateIfUpToDateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.SettingsSubject
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *int32
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *int32
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *api.Settings
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SettingsStoreCreateIfUpToDateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SettingsStoreCreateIfUpToDateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SettingsStoreDoneFunc describes the behavior when the Done method of the
// parent MockSettingsStore instance is invoked.
type SettingsStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []SettingsStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSettingsStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(SettingsStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockSettingsStore instance is invoked and the hook queue is empty.
func (f *SettingsStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockSettingsStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SettingsStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SettingsStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SettingsStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *SettingsStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SettingsStoreDoneFunc) appendCall(r0 SettingsStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SettingsStoreDoneFuncCall objects
// describing the invocations of this function.
func (f *SettingsStoreDoneFunc) History() []SettingsStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]SettingsStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SettingsStoreDoneFuncCall is an object that describes an invocation of
// method Done on an instance of MockSettingsStore.
type SettingsStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SettingsStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SettingsStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SettingsStoreGetLastestSchemaSettingsFunc describes the behavior when the
// GetLastestSchemaSettings method of the parent MockSettingsStore instance
// is invoked.
type SettingsStoreGetLastestSchemaSettingsFunc struct {
	defaultHook func(context.Context, api.SettingsSubject) (*schema.Settings, error)
	hooks       []func(context.Context, api.SettingsSubject) (*schema.Settings, error)
	history     []SettingsStoreGetLastestSchemaSettingsFuncCall
	mutex       sync.Mutex
}

// GetLastestSchemaSettings delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockSettingsStore) GetLastestSchemaSettings(v0 context.Context, v1 api.SettingsSubject) (*schema.Settings, error) {
	r0, r1 := m.GetLastestSchemaSettingsFunc.nextHook()(v0, v1)
	m.GetLastestSchemaSettingsFunc.appendCall(SettingsStoreGetLastestSchemaSettingsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetLastestSchemaSettings method of the parent MockSettingsStore instance
// is invoked and the hook queue is empty.
func (f *SettingsStoreGetLastestSchemaSettingsFunc) SetDefaultHook(hook func(context.Context, api.SettingsSubject) (*schema.Settings, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLastestSchemaSettings method of the parent MockSettingsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *SettingsStoreGetLastestSchemaSettingsFunc) PushHook(hook func(context.Context, api.SettingsSubject) (*schema.Settings, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SettingsStoreGetLastestSchemaSettingsFunc) SetDefaultReturn(r0 *schema.Settings, r1 error) {
	f.SetDefaultHook(func(context.Context, api.SettingsSubject) (*schema.Settings, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SettingsStoreGetLastestSchemaSettingsFunc) PushReturn(r0 *schema.Settings, r1 error) {
	f.PushHook(func(context.Context, api.SettingsSubject) (*schema.Settings, error) {
		return r0, r1
	})
}

func (f *SettingsStoreGetLastestSchemaSettingsFunc) nextHook() func(context.Context, api.SettingsSubject) (*schema.Settings, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SettingsStoreGetLastestSchemaSettingsFunc) appendCall(r0 SettingsStoreGetLastestSchemaSettingsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SettingsStoreGetLastestSchemaSettingsFuncCall objects describing the
// invocations of this function.
func (f *SettingsStoreGetLastestSchemaSettingsFunc) History() []SettingsStoreGetLastestSchemaSettingsFuncCall {
	f.mutex.Lock()
	history := make([]SettingsStoreGetLastestSchemaSettingsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SettingsStoreGetLastestSchemaSettingsFuncCall is an object that describes
// an invocation of method GetLastestSchemaSettings on an instance of
// MockSettingsStore.
type SettingsStoreGetLastestSchemaSettingsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.SettingsSubject
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *schema.Settings
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SettingsStoreGetLastestSchemaSettingsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SettingsStoreGetLastestSchemaSettingsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SettingsStoreGetLatestFunc describes the behavior when the GetLatest
// method of the parent MockSettingsStore instance is invoked.
type SettingsStoreGetLatestFunc struct {
	defaultHook func(context.Context, api.SettingsSubject) (*api.Settings, error)
	hooks       []func(context.Context, api.SettingsSubject) (*api.Settings, error)
	history     []SettingsStoreGetLatestFuncCall
	mutex       sync.Mutex
}

// GetLatest delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSettingsStore) GetLatest(v0 context.Context, v1 api.SettingsSubject) (*api.Settings, error) {
	r0, r1 := m.GetLatestFunc.nextHook()(v0, v1)
	m.GetLatestFunc.appendCall(SettingsStoreGetLatestFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetLatest method of
// the parent MockSettingsStore instance is invoked and the hook queue is
// empty.
func (f *SettingsStoreGetLatestFunc) SetDefaultHook(hook func(context.Context, api.SettingsSubject) (*api.Settings, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLatest method of the parent MockSettingsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SettingsStoreGetLatestFunc) PushHook(hook func(context.Context, api.SettingsSubject) (*api.Settings, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SettingsStoreGetLatestFunc) SetDefaultReturn(r0 *api.Settings, r1 error) {
	f.SetDefaultHook(func(context.Context, api.SettingsSubject) (*api.Settings, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SettingsStoreGetLatestFunc) PushReturn(r0 *api.Settings, r1 error) {
	f.PushHook(func(context.Context, api.SettingsSubject) (*api.Settings, error) {
		return r0, r1
	})
}

func (f *SettingsStoreGetLatestFunc) nextHook() func(context.Context, api.SettingsSubject) (*api.Settings, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SettingsStoreGetLatestFunc) appendCall(r0 SettingsStoreGetLatestFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SettingsStoreGetLatestFuncCall objects
// describing the invocations of this function.
func (f *SettingsStoreGetLatestFunc) History() []SettingsStoreGetLatestFuncCall {
	f.mutex.Lock()
	history := make([]SettingsStoreGetLatestFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SettingsStoreGetLatestFuncCall is an object that describes an invocation
// of method GetLatest on an instance of MockSettingsStore.
type SettingsStoreGetLatestFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.SettingsSubject
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *api.Settings
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SettingsStoreGetLatestFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SettingsStoreGetLatestFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SettingsStoreHandleFunc describes the behavior when the Handle method of
// the parent MockSettingsStore instance is invoked.
type SettingsStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []SettingsStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSettingsStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(SettingsStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockSettingsStore instance is invoked and the hook queue is empty.
func (f *SettingsStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockSettingsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SettingsStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SettingsStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SettingsStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *SettingsStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SettingsStoreHandleFunc) appendCall(r0 SettingsStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SettingsStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *SettingsStoreHandleFunc) History() []SettingsStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]SettingsStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SettingsStoreHandleFuncCall is an object that describes an invocation of
// method Handle on an instance of MockSettingsStore.
type SettingsStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SettingsStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SettingsStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SettingsStoreListAllFunc describes the behavior when the ListAll method
// of the parent MockSettingsStore instance is invoked.
type SettingsStoreListAllFunc struct {
	defaultHook func(context.Context, string) ([]*api.Settings, error)
	hooks       []func(context.Context, string) ([]*api.Settings, error)
	history     []SettingsStoreListAllFuncCall
	mutex       sync.Mutex
}

// ListAll delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSettingsStore) ListAll(v0 context.Context, v1 string) ([]*api.Settings, error) {
	r0, r1 := m.ListAllFunc.nextHook()(v0, v1)
	m.ListAllFunc.appendCall(SettingsStoreListAllFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListAll method of
// the parent MockSettingsStore instance is invoked and the hook queue is
// empty.
func (f *SettingsStoreListAllFunc) SetDefaultHook(hook func(context.Context, string) ([]*api.Settings, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListAll method of the parent MockSettingsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SettingsStoreListAllFunc) PushHook(hook func(context.Context, string) ([]*api.Settings, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SettingsStoreListAllFunc) SetDefaultReturn(r0 []*api.Settings, r1 error) {
	f.SetDefaultHook(func(context.Context, string) ([]*api.Settings, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SettingsStoreListAllFunc) PushReturn(r0 []*api.Settings, r1 error) {
	f.PushHook(func(context.Context, string) ([]*api.Settings, error) {
		return r0, r1
	})
}

func (f *SettingsStoreListAllFunc) nextHook() func(context.Context, string) ([]*api.Settings, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SettingsStoreListAllFunc) appendCall(r0 SettingsStoreListAllFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SettingsStoreListAllFuncCall objects
// describing the invocations of this function.
func (f *SettingsStoreListAllFunc) History() []SettingsStoreListAllFuncCall {
	f.mutex.Lock()
	history := make([]SettingsStoreListAllFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SettingsStoreListAllFuncCall is an object that describes an invocation of
// method ListAll on an instance of MockSettingsStore.
type SettingsStoreListAllFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*api.Settings
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SettingsStoreListAllFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SettingsStoreListAllFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SettingsStoreTransactFunc describes the behavior when the Transact method
// of the parent MockSettingsStore instance is invoked.
type SettingsStoreTransactFunc struct {
	defaultHook func(context.Context) (SettingsStore, error)
	hooks       []func(context.Context) (SettingsStore, error)
	history     []SettingsStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSettingsStore) Transact(v0 context.Context) (SettingsStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(SettingsStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockSettingsStore instance is invoked and the hook queue is
// empty.
func (f *SettingsStoreTransactFunc) SetDefaultHook(hook func(context.Context) (SettingsStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockSettingsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SettingsStoreTransactFunc) PushHook(hook func(context.Context) (SettingsStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SettingsStoreTransactFunc) SetDefaultReturn(r0 SettingsStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (SettingsStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SettingsStoreTransactFunc) PushReturn(r0 SettingsStore, r1 error) {
	f.PushHook(func(context.Context) (SettingsStore, error) {
		return r0, r1
	})
}

func (f *SettingsStoreTransactFunc) nextHook() func(context.Context) (SettingsStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SettingsStoreTransactFunc) appendCall(r0 SettingsStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SettingsStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *SettingsStoreTransactFunc) History() []SettingsStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]SettingsStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SettingsStoreTransactFuncCall is an object that describes an invocation
// of method Transact on an instance of MockSettingsStore.
type SettingsStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 SettingsStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SettingsStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SettingsStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SettingsStoreWithFunc describes the behavior when the With method of the
// parent MockSettingsStore instance is invoked.
type SettingsStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) SettingsStore
	hooks       []func(basestore.ShareableStore) SettingsStore
	history     []SettingsStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSettingsStore) With(v0 basestore.ShareableStore) SettingsStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(SettingsStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockSettingsStore instance is invoked and the hook queue is empty.
func (f *SettingsStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) SettingsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockSettingsStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SettingsStoreWithFunc) PushHook(hook func(basestore.ShareableStore) SettingsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SettingsStoreWithFunc) SetDefaultReturn(r0 SettingsStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) SettingsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SettingsStoreWithFunc) PushReturn(r0 SettingsStore) {
	f.PushHook(func(basestore.ShareableStore) SettingsStore {
		return r0
	})
}

func (f *SettingsStoreWithFunc) nextHook() func(basestore.ShareableStore) SettingsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SettingsStoreWithFunc) appendCall(r0 SettingsStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SettingsStoreWithFuncCall objects
// describing the invocations of this function.
func (f *SettingsStoreWithFunc) History() []SettingsStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]SettingsStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SettingsStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockSettingsStore.
type SettingsStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 SettingsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SettingsStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SettingsStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockSubRepoPermsStore is a mock implementation of the SubRepoPermsStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockSubRepoPermsStore struct {
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *SubRepoPermsStoreDoneFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *SubRepoPermsStoreGetFunc
	// GetByUserFunc is an instance of a mock function object controlling
	// the behavior of the method GetByUser.
	GetByUserFunc *SubRepoPermsStoreGetByUserFunc
	// GetByUserAndServiceFunc is an instance of a mock function object
	// controlling the behavior of the method GetByUserAndService.
	GetByUserAndServiceFunc *SubRepoPermsStoreGetByUserAndServiceFunc
	// RepoIdSupportedFunc is an instance of a mock function object
	// controlling the behavior of the method RepoIdSupported.
	RepoIdSupportedFunc *SubRepoPermsStoreRepoIdSupportedFunc
	// RepoSupportedFunc is an instance of a mock function object
	// controlling the behavior of the method RepoSupported.
	RepoSupportedFunc *SubRepoPermsStoreRepoSupportedFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *SubRepoPermsStoreTransactFunc
	// UpsertFunc is an instance of a mock function object controlling the
	// behavior of the method Upsert.
	UpsertFunc *SubRepoPermsStoreUpsertFunc
	// UpsertWithSpecFunc is an instance of a mock function object
	// controlling the behavior of the method UpsertWithSpec.
	UpsertWithSpecFunc *SubRepoPermsStoreUpsertWithSpecFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *SubRepoPermsStoreWithFunc
}

// NewMockSubRepoPermsStore creates a new mock of the SubRepoPermsStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockSubRepoPermsStore() *MockSubRepoPermsStore {
	return &MockSubRepoPermsStore{
		DoneFunc: &SubRepoPermsStoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		GetFunc: &SubRepoPermsStoreGetFunc{
			defaultHook: func(context.Context, int32, api.RepoID) (r0 *authz.SubRepoPermissions, r1 error) {
				return
			},
		},
		GetByUserFunc: &SubRepoPermsStoreGetByUserFunc{
			defaultHook: func(context.Context, int32) (r0 map[api.RepoName]authz.SubRepoPermissions, r1 error) {
				return
			},
		},
		GetByUserAndServiceFunc: &SubRepoPermsStoreGetByUserAndServiceFunc{
			defaultHook: func(context.Context, int32, string, string) (r0 map[api.ExternalRepoSpec]authz.SubRepoPermissions, r1 error) {
				return
			},
		},
		RepoIdSupportedFunc: &SubRepoPermsStoreRepoIdSupportedFunc{
			defaultHook: func(context.Context, api.RepoID) (r0 bool, r1 error) {
				return
			},
		},
		RepoSupportedFunc: &SubRepoPermsStoreRepoSupportedFunc{
			defaultHook: func(context.Context, api.RepoName) (r0 bool, r1 error) {
				return
			},
		},
		TransactFunc: &SubRepoPermsStoreTransactFunc{
			defaultHook: func(context.Context) (r0 SubRepoPermsStore, r1 error) {
				return
			},
		},
		UpsertFunc: &SubRepoPermsStoreUpsertFunc{
			defaultHook: func(context.Context, int32, api.RepoID, authz.SubRepoPermissions) (r0 error) {
				return
			},
		},
		UpsertWithSpecFunc: &SubRepoPermsStoreUpsertWithSpecFunc{
			defaultHook: func(context.Context, int32, api.ExternalRepoSpec, authz.SubRepoPermissions) (r0 error) {
				return
			},
		},
		WithFunc: &SubRepoPermsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 SubRepoPermsStore) {
				return
			},
		},
	}
}

// NewStrictMockSubRepoPermsStore creates a new mock of the
// SubRepoPermsStore interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockSubRepoPermsStore() *MockSubRepoPermsStore {
	return &MockSubRepoPermsStore{
		DoneFunc: &SubRepoPermsStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockSubRepoPermsStore.Done")
			},
		},
		GetFunc: &SubRepoPermsStoreGetFunc{
			defaultHook: func(context.Context, int32, api.RepoID) (*authz.SubRepoPermissions, error) {
				panic("unexpected invocation of MockSubRepoPermsStore.Get")
			},
		},
		GetByUserFunc: &SubRepoPermsStoreGetByUserFunc{
			defaultHook: func(context.Context, int32) (map[api.RepoName]authz.SubRepoPermissions, error) {
				panic("unexpected invocation of MockSubRepoPermsStore.GetByUser")
			},
		},
		GetByUserAndServiceFunc: &SubRepoPermsStoreGetByUserAndServiceFunc{
			defaultHook: func(context.Context, int32, string, string) (map[api.ExternalRepoSpec]authz.SubRepoPermissions, error) {
				panic("unexpected invocation of MockSubRepoPermsStore.GetByUserAndService")
			},
		},
		RepoIdSupportedFunc: &SubRepoPermsStoreRepoIdSupportedFunc{
			defaultHook: func(context.Context, api.RepoID) (bool, error) {
				panic("unexpected invocation of MockSubRepoPermsStore.RepoIdSupported")
			},
		},
		RepoSupportedFunc: &SubRepoPermsStoreRepoSupportedFunc{
			defaultHook: func(context.Context, api.RepoName) (bool, error) {
				panic("unexpected invocation of MockSubRepoPermsStore.RepoSupported")
			},
		},
		TransactFunc: &SubRepoPermsStoreTransactFunc{
			defaultHook: func(context.Context) (SubRepoPermsStore, error) {
				panic("unexpected invocation of MockSubRepoPermsStore.Transact")
			},
		},
		UpsertFunc: &SubRepoPermsStoreUpsertFunc{
			defaultHook: func(context.Context, int32, api.RepoID, authz.SubRepoPermissions) error {
				panic("unexpected invocation of MockSubRepoPermsStore.Upsert")
			},
		},
		UpsertWithSpecFunc: &SubRepoPermsStoreUpsertWithSpecFunc{
			defaultHook: func(context.Context, int32, api.ExternalRepoSpec, authz.SubRepoPermissions) error {
				panic("unexpected invocation of MockSubRepoPermsStore.UpsertWithSpec")
			},
		},
		WithFunc: &SubRepoPermsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) SubRepoPermsStore {
				panic("unexpected invocation of MockSubRepoPermsStore.With")
			},
		},
	}
}

// NewMockSubRepoPermsStoreFrom creates a new mock of the
// MockSubRepoPermsStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockSubRepoPermsStoreFrom(i SubRepoPermsStore) *MockSubRepoPermsStore {
	return &MockSubRepoPermsStore{
		DoneFunc: &SubRepoPermsStoreDoneFunc{
			defaultHook: i.Done,
		},
		GetFunc: &SubRepoPermsStoreGetFunc{
			defaultHook: i.Get,
		},
		GetByUserFunc: &SubRepoPermsStoreGetByUserFunc{
			defaultHook: i.GetByUser,
		},
		GetByUserAndServiceFunc: &SubRepoPermsStoreGetByUserAndServiceFunc{
			defaultHook: i.GetByUserAndService,
		},
		RepoIdSupportedFunc: &SubRepoPermsStoreRepoIdSupportedFunc{
			defaultHook: i.RepoIdSupported,
		},
		RepoSupportedFunc: &SubRepoPermsStoreRepoSupportedFunc{
			defaultHook: i.RepoSupported,
		},
		TransactFunc: &SubRepoPermsStoreTransactFunc{
			defaultHook: i.Transact,
		},
		UpsertFunc: &SubRepoPermsStoreUpsertFunc{
			defaultHook: i.Upsert,
		},
		UpsertWithSpecFunc: &SubRepoPermsStoreUpsertWithSpecFunc{
			defaultHook: i.UpsertWithSpec,
		},
		WithFunc: &SubRepoPermsStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// SubRepoPermsStoreDoneFunc describes the behavior when the Done method of
// the parent MockSubRepoPermsStore instance is invoked.
type SubRepoPermsStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []SubRepoPermsStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSubRepoPermsStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(SubRepoPermsStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockSubRepoPermsStore instance is invoked and the hook queue is
// empty.
func (f *SubRepoPermsStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockSubRepoPermsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SubRepoPermsStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SubRepoPermsStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SubRepoPermsStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *SubRepoPermsStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SubRepoPermsStoreDoneFunc) appendCall(r0 SubRepoPermsStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SubRepoPermsStoreDoneFuncCall objects
// describing the invocations of this function.
func (f *SubRepoPermsStoreDoneFunc) History() []SubRepoPermsStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]SubRepoPermsStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SubRepoPermsStoreDoneFuncCall is an object that describes an invocation
// of method Done on an instance of MockSubRepoPermsStore.
type SubRepoPermsStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SubRepoPermsStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SubRepoPermsStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SubRepoPermsStoreGetFunc describes the behavior when the Get method of
// the parent MockSubRepoPermsStore instance is invoked.
type SubRepoPermsStoreGetFunc struct {
	defaultHook func(context.Context, int32, api.RepoID) (*authz.SubRepoPermissions, error)
	hooks       []func(context.Context, int32, api.RepoID) (*authz.SubRepoPermissions, error)
	history     []SubRepoPermsStoreGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSubRepoPermsStore) Get(v0 context.Context, v1 int32, v2 api.RepoID) (*authz.SubRepoPermissions, error) {
	r0, r1 := m.GetFunc.nextHook()(v0, v1, v2)
	m.GetFunc.appendCall(SubRepoPermsStoreGetFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockSubRepoPermsStore instance is invoked and the hook queue is
// empty.
func (f *SubRepoPermsStoreGetFunc) SetDefaultHook(hook func(context.Context, int32, api.RepoID) (*authz.SubRepoPermissions, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockSubRepoPermsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SubRepoPermsStoreGetFunc) PushHook(hook func(context.Context, int32, api.RepoID) (*authz.SubRepoPermissions, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SubRepoPermsStoreGetFunc) SetDefaultReturn(r0 *authz.SubRepoPermissions, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, api.RepoID) (*authz.SubRepoPermissions, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SubRepoPermsStoreGetFunc) PushReturn(r0 *authz.SubRepoPermissions, r1 error) {
	f.PushHook(func(context.Context, int32, api.RepoID) (*authz.SubRepoPermissions, error) {
		return r0, r1
	})
}

func (f *SubRepoPermsStoreGetFunc) nextHook() func(context.Context, int32, api.RepoID) (*authz.SubRepoPermissions, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SubRepoPermsStoreGetFunc) appendCall(r0 SubRepoPermsStoreGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SubRepoPermsStoreGetFuncCall objects
// describing the invocations of this function.
func (f *SubRepoPermsStoreGetFunc) History() []SubRepoPermsStoreGetFuncCall {
	f.mutex.Lock()
	history := make([]SubRepoPermsStoreGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SubRepoPermsStoreGetFuncCall is an object that describes an invocation of
// method Get on an instance of MockSubRepoPermsStore.
type SubRepoPermsStoreGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *authz.SubRepoPermissions
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SubRepoPermsStoreGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SubRepoPermsStoreGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SubRepoPermsStoreGetByUserFunc describes the behavior when the GetByUser
// method of the parent MockSubRepoPermsStore instance is invoked.
type SubRepoPermsStoreGetByUserFunc struct {
	defaultHook func(context.Context, int32) (map[api.RepoName]authz.SubRepoPermissions, error)
	hooks       []func(context.Context, int32) (map[api.RepoName]authz.SubRepoPermissions, error)
	history     []SubRepoPermsStoreGetByUserFuncCall
	mutex       sync.Mutex
}

// GetByUser delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSubRepoPermsStore) GetByUser(v0 context.Context, v1 int32) (map[api.RepoName]authz.SubRepoPermissions, error) {
	r0, r1 := m.GetByUserFunc.nextHook()(v0, v1)
	m.GetByUserFunc.appendCall(SubRepoPermsStoreGetByUserFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByUser method of
// the parent MockSubRepoPermsStore instance is invoked and the hook queue
// is empty.
func (f *SubRepoPermsStoreGetByUserFunc) SetDefaultHook(hook func(context.Context, int32) (map[api.RepoName]authz.SubRepoPermissions, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByUser method of the parent MockSubRepoPermsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SubRepoPermsStoreGetByUserFunc) PushHook(hook func(context.Context, int32) (map[api.RepoName]authz.SubRepoPermissions, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SubRepoPermsStoreGetByUserFunc) SetDefaultReturn(r0 map[api.RepoName]authz.SubRepoPermissions, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (map[api.RepoName]authz.SubRepoPermissions, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SubRepoPermsStoreGetByUserFunc) PushReturn(r0 map[api.RepoName]authz.SubRepoPermissions, r1 error) {
	f.PushHook(func(context.Context, int32) (map[api.RepoName]authz.SubRepoPermissions, error) {
		return r0, r1
	})
}

func (f *SubRepoPermsStoreGetByUserFunc) nextHook() func(context.Context, int32) (map[api.RepoName]authz.SubRepoPermissions, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SubRepoPermsStoreGetByUserFunc) appendCall(r0 SubRepoPermsStoreGetByUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SubRepoPermsStoreGetByUserFuncCall objects
// describing the invocations of this function.
func (f *SubRepoPermsStoreGetByUserFunc) History() []SubRepoPermsStoreGetByUserFuncCall {
	f.mutex.Lock()
	history := make([]SubRepoPermsStoreGetByUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SubRepoPermsStoreGetByUserFuncCall is an object that describes an
// invocation of method GetByUser on an instance of MockSubRepoPermsStore.
type SubRepoPermsStoreGetByUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[api.RepoName]authz.SubRepoPermissions
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SubRepoPermsStoreGetByUserFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SubRepoPermsStoreGetByUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SubRepoPermsStoreGetByUserAndServiceFunc describes the behavior when the
// GetByUserAndService method of the parent MockSubRepoPermsStore instance
// is invoked.
type SubRepoPermsStoreGetByUserAndServiceFunc struct {
	defaultHook func(context.Context, int32, string, string) (map[api.ExternalRepoSpec]authz.SubRepoPermissions, error)
	hooks       []func(context.Context, int32, string, string) (map[api.ExternalRepoSpec]authz.SubRepoPermissions, error)
	history     []SubRepoPermsStoreGetByUserAndServiceFuncCall
	mutex       sync.Mutex
}

// GetByUserAndService delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSubRepoPermsStore) GetByUserAndService(v0 context.Context, v1 int32, v2 string, v3 string) (map[api.ExternalRepoSpec]authz.SubRepoPermissions, error) {
	r0, r1 := m.GetByUserAndServiceFunc.nextHook()(v0, v1, v2, v3)
	m.GetByUserAndServiceFunc.appendCall(SubRepoPermsStoreGetByUserAndServiceFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByUserAndService
// method of the parent MockSubRepoPermsStore instance is invoked and the
// hook queue is empty.
func (f *SubRepoPermsStoreGetByUserAndServiceFunc) SetDefaultHook(hook func(context.Context, int32, string, string) (map[api.ExternalRepoSpec]authz.SubRepoPermissions, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByUserAndService method of the parent MockSubRepoPermsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *SubRepoPermsStoreGetByUserAndServiceFunc) PushHook(hook func(context.Context, int32, string, string) (map[api.ExternalRepoSpec]authz.SubRepoPermissions, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SubRepoPermsStoreGetByUserAndServiceFunc) SetDefaultReturn(r0 map[api.ExternalRepoSpec]authz.SubRepoPermissions, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, string, string) (map[api.ExternalRepoSpec]authz.SubRepoPermissions, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SubRepoPermsStoreGetByUserAndServiceFunc) PushReturn(r0 map[api.ExternalRepoSpec]authz.SubRepoPermissions, r1 error) {
	f.PushHook(func(context.Context, int32, string, string) (map[api.ExternalRepoSpec]authz.SubRepoPermissions, error) {
		return r0, r1
	})
}

func (f *SubRepoPermsStoreGetByUserAndServiceFunc) nextHook() func(context.Context, int32, string, string) (map[api.ExternalRepoSpec]authz.SubRepoPermissions, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SubRepoPermsStoreGetByUserAndServiceFunc) appendCall(r0 SubRepoPermsStoreGetByUserAndServiceFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SubRepoPermsStoreGetByUserAndServiceFuncCall objects describing the
// invocations of this function.
func (f *SubRepoPermsStoreGetByUserAndServiceFunc) History() []SubRepoPermsStoreGetByUserAndServiceFuncCall {
	f.mutex.Lock()
	history := make([]SubRepoPermsStoreGetByUserAndServiceFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SubRepoPermsStoreGetByUserAndServiceFuncCall is an object that describes
// an invocation of method GetByUserAndService on an instance of
// MockSubRepoPermsStore.
type SubRepoPermsStoreGetByUserAndServiceFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[api.ExternalRepoSpec]authz.SubRepoPermissions
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SubRepoPermsStoreGetByUserAndServiceFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SubRepoPermsStoreGetByUserAndServiceFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SubRepoPermsStoreRepoIdSupportedFunc describes the behavior when the
// RepoIdSupported method of the parent MockSubRepoPermsStore instance is
// invoked.
type SubRepoPermsStoreRepoIdSupportedFunc struct {
	defaultHook func(context.Context, api.RepoID) (bool, error)
	hooks       []func(context.Context, api.RepoID) (bool, error)
	history     []SubRepoPermsStoreRepoIdSupportedFuncCall
	mutex       sync.Mutex
}

// RepoIdSupported delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSubRepoPermsStore) RepoIdSupported(v0 context.Context, v1 api.RepoID) (bool, error) {
	r0, r1 := m.RepoIdSupportedFunc.nextHook()(v0, v1)
	m.RepoIdSupportedFunc.appendCall(SubRepoPermsStoreRepoIdSupportedFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RepoIdSupported
// method of the parent MockSubRepoPermsStore instance is invoked and the
// hook queue is empty.
func (f *SubRepoPermsStoreRepoIdSupportedFunc) SetDefaultHook(hook func(context.Context, api.RepoID) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepoIdSupported method of the parent MockSubRepoPermsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *SubRepoPermsStoreRepoIdSupportedFunc) PushHook(hook func(context.Context, api.RepoID) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SubRepoPermsStoreRepoIdSupportedFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoID) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SubRepoPermsStoreRepoIdSupportedFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, api.RepoID) (bool, error) {
		return r0, r1
	})
}

func (f *SubRepoPermsStoreRepoIdSupportedFunc) nextHook() func(context.Context, api.RepoID) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SubRepoPermsStoreRepoIdSupportedFunc) appendCall(r0 SubRepoPermsStoreRepoIdSupportedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SubRepoPermsStoreRepoIdSupportedFuncCall
// objects describing the invocations of this function.
func (f *SubRepoPermsStoreRepoIdSupportedFunc) History() []SubRepoPermsStoreRepoIdSupportedFuncCall {
	f.mutex.Lock()
	history := make([]SubRepoPermsStoreRepoIdSupportedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SubRepoPermsStoreRepoIdSupportedFuncCall is an object that describes an
// invocation of method RepoIdSupported on an instance of
// MockSubRepoPermsStore.
type SubRepoPermsStoreRepoIdSupportedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SubRepoPermsStoreRepoIdSupportedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SubRepoPermsStoreRepoIdSupportedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SubRepoPermsStoreRepoSupportedFunc describes the behavior when the
// RepoSupported method of the parent MockSubRepoPermsStore instance is
// invoked.
type SubRepoPermsStoreRepoSupportedFunc struct {
	defaultHook func(context.Context, api.RepoName) (bool, error)
	hooks       []func(context.Context, api.RepoName) (bool, error)
	history     []SubRepoPermsStoreRepoSupportedFuncCall
	mutex       sync.Mutex
}

// RepoSupported delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockSubRepoPermsStore) RepoSupported(v0 context.Context, v1 api.RepoName) (bool, error) {
	r0, r1 := m.RepoSupportedFunc.nextHook()(v0, v1)
	m.RepoSupportedFunc.appendCall(SubRepoPermsStoreRepoSupportedFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RepoSupported method
// of the parent MockSubRepoPermsStore instance is invoked and the hook
// queue is empty.
func (f *SubRepoPermsStoreRepoSupportedFunc) SetDefaultHook(hook func(context.Context, api.RepoName) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepoSupported method of the parent MockSubRepoPermsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *SubRepoPermsStoreRepoSupportedFunc) PushHook(hook func(context.Context, api.RepoName) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SubRepoPermsStoreRepoSupportedFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SubRepoPermsStoreRepoSupportedFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, api.RepoName) (bool, error) {
		return r0, r1
	})
}

func (f *SubRepoPermsStoreRepoSupportedFunc) nextHook() func(context.Context, api.RepoName) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SubRepoPermsStoreRepoSupportedFunc) appendCall(r0 SubRepoPermsStoreRepoSupportedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SubRepoPermsStoreRepoSupportedFuncCall
// objects describing the invocations of this function.
func (f *SubRepoPermsStoreRepoSupportedFunc) History() []SubRepoPermsStoreRepoSupportedFuncCall {
	f.mutex.Lock()
	history := make([]SubRepoPermsStoreRepoSupportedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SubRepoPermsStoreRepoSupportedFuncCall is an object that describes an
// invocation of method RepoSupported on an instance of
// MockSubRepoPermsStore.
type SubRepoPermsStoreRepoSupportedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SubRepoPermsStoreRepoSupportedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SubRepoPermsStoreRepoSupportedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SubRepoPermsStoreTransactFunc describes the behavior when the Transact
// method of the parent MockSubRepoPermsStore instance is invoked.
type SubRepoPermsStoreTransactFunc struct {
	defaultHook func(context.Context) (SubRepoPermsStore, error)
	hooks       []func(context.Context) (SubRepoPermsStore, error)
	history     []SubRepoPermsStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSubRepoPermsStore) Transact(v0 context.Context) (SubRepoPermsStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(SubRepoPermsStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockSubRepoPermsStore instance is invoked and the hook queue
// is empty.
func (f *SubRepoPermsStoreTransactFunc) SetDefaultHook(hook func(context.Context) (SubRepoPermsStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockSubRepoPermsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SubRepoPermsStoreTransactFunc) PushHook(hook func(context.Context) (SubRepoPermsStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SubRepoPermsStoreTransactFunc) SetDefaultReturn(r0 SubRepoPermsStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (SubRepoPermsStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SubRepoPermsStoreTransactFunc) PushReturn(r0 SubRepoPermsStore, r1 error) {
	f.PushHook(func(context.Context) (SubRepoPermsStore, error) {
		return r0, r1
	})
}

func (f *SubRepoPermsStoreTransactFunc) nextHook() func(context.Context) (SubRepoPermsStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SubRepoPermsStoreTransactFunc) appendCall(r0 SubRepoPermsStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SubRepoPermsStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *SubRepoPermsStoreTransactFunc) History() []SubRepoPermsStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]SubRepoPermsStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SubRepoPermsStoreTransactFuncCall is an object that describes an
// invocation of method Transact on an instance of MockSubRepoPermsStore.
type SubRepoPermsStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 SubRepoPermsStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SubRepoPermsStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SubRepoPermsStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SubRepoPermsStoreUpsertFunc describes the behavior when the Upsert method
// of the parent MockSubRepoPermsStore instance is invoked.
type SubRepoPermsStoreUpsertFunc struct {
	defaultHook func(context.Context, int32, api.RepoID, authz.SubRepoPermissions) error
	hooks       []func(context.Context, int32, api.RepoID, authz.SubRepoPermissions) error
	history     []SubRepoPermsStoreUpsertFuncCall
	mutex       sync.Mutex
}

// Upsert delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSubRepoPermsStore) Upsert(v0 context.Context, v1 int32, v2 api.RepoID, v3 authz.SubRepoPermissions) error {
	r0 := m.UpsertFunc.nextHook()(v0, v1, v2, v3)
	m.UpsertFunc.appendCall(SubRepoPermsStoreUpsertFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Upsert method of the
// parent MockSubRepoPermsStore instance is invoked and the hook queue is
// empty.
func (f *SubRepoPermsStoreUpsertFunc) SetDefaultHook(hook func(context.Context, int32, api.RepoID, authz.SubRepoPermissions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Upsert method of the parent MockSubRepoPermsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SubRepoPermsStoreUpsertFunc) PushHook(hook func(context.Context, int32, api.RepoID, authz.SubRepoPermissions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SubRepoPermsStoreUpsertFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, api.RepoID, authz.SubRepoPermissions) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SubRepoPermsStoreUpsertFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, api.RepoID, authz.SubRepoPermissions) error {
		return r0
	})
}

func (f *SubRepoPermsStoreUpsertFunc) nextHook() func(context.Context, int32, api.RepoID, authz.SubRepoPermissions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SubRepoPermsStoreUpsertFunc) appendCall(r0 SubRepoPermsStoreUpsertFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SubRepoPermsStoreUpsertFuncCall objects
// describing the invocations of this function.
func (f *SubRepoPermsStoreUpsertFunc) History() []SubRepoPermsStoreUpsertFuncCall {
	f.mutex.Lock()
	history := make([]SubRepoPermsStoreUpsertFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SubRepoPermsStoreUpsertFuncCall is an object that describes an invocation
// of method Upsert on an instance of MockSubRepoPermsStore.
type SubRepoPermsStoreUpsertFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoID
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 authz.SubRepoPermissions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SubRepoPermsStoreUpsertFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SubRepoPermsStoreUpsertFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SubRepoPermsStoreUpsertWithSpecFunc describes the behavior when the
// UpsertWithSpec method of the parent MockSubRepoPermsStore instance is
// invoked.
type SubRepoPermsStoreUpsertWithSpecFunc struct {
	defaultHook func(context.Context, int32, api.ExternalRepoSpec, authz.SubRepoPermissions) error
	hooks       []func(context.Context, int32, api.ExternalRepoSpec, authz.SubRepoPermissions) error
	history     []SubRepoPermsStoreUpsertWithSpecFuncCall
	mutex       sync.Mutex
}

// UpsertWithSpec delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSubRepoPermsStore) UpsertWithSpec(v0 context.Context, v1 int32, v2 api.ExternalRepoSpec, v3 authz.SubRepoPermissions) error {
	r0 := m.UpsertWithSpecFunc.nextHook()(v0, v1, v2, v3)
	m.UpsertWithSpecFunc.appendCall(SubRepoPermsStoreUpsertWithSpecFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UpsertWithSpec
// method of the parent MockSubRepoPermsStore instance is invoked and the
// hook queue is empty.
func (f *SubRepoPermsStoreUpsertWithSpecFunc) SetDefaultHook(hook func(context.Context, int32, api.ExternalRepoSpec, authz.SubRepoPermissions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpsertWithSpec method of the parent MockSubRepoPermsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *SubRepoPermsStoreUpsertWithSpecFunc) PushHook(hook func(context.Context, int32, api.ExternalRepoSpec, authz.SubRepoPermissions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SubRepoPermsStoreUpsertWithSpecFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, api.ExternalRepoSpec, authz.SubRepoPermissions) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SubRepoPermsStoreUpsertWithSpecFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, api.ExternalRepoSpec, authz.SubRepoPermissions) error {
		return r0
	})
}

func (f *SubRepoPermsStoreUpsertWithSpecFunc) nextHook() func(context.Context, int32, api.ExternalRepoSpec, authz.SubRepoPermissions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SubRepoPermsStoreUpsertWithSpecFunc) appendCall(r0 SubRepoPermsStoreUpsertWithSpecFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SubRepoPermsStoreUpsertWithSpecFuncCall
// objects describing the invocations of this function.
func (f *SubRepoPermsStoreUpsertWithSpecFunc) History() []SubRepoPermsStoreUpsertWithSpecFuncCall {
	f.mutex.Lock()
	history := make([]SubRepoPermsStoreUpsertWithSpecFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SubRepoPermsStoreUpsertWithSpecFuncCall is an object that describes an
// invocation of method UpsertWithSpec on an instance of
// MockSubRepoPermsStore.
type SubRepoPermsStoreUpsertWithSpecFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.ExternalRepoSpec
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 authz.SubRepoPermissions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SubRepoPermsStoreUpsertWithSpecFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SubRepoPermsStoreUpsertWithSpecFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SubRepoPermsStoreWithFunc describes the behavior when the With method of
// the parent MockSubRepoPermsStore instance is invoked.
type SubRepoPermsStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) SubRepoPermsStore
	hooks       []func(basestore.ShareableStore) SubRepoPermsStore
	history     []SubRepoPermsStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSubRepoPermsStore) With(v0 basestore.ShareableStore) SubRepoPermsStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(SubRepoPermsStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockSubRepoPermsStore instance is invoked and the hook queue is
// empty.
func (f *SubRepoPermsStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) SubRepoPermsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockSubRepoPermsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SubRepoPermsStoreWithFunc) PushHook(hook func(basestore.ShareableStore) SubRepoPermsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SubRepoPermsStoreWithFunc) SetDefaultReturn(r0 SubRepoPermsStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) SubRepoPermsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SubRepoPermsStoreWithFunc) PushReturn(r0 SubRepoPermsStore) {
	f.PushHook(func(basestore.ShareableStore) SubRepoPermsStore {
		return r0
	})
}

func (f *SubRepoPermsStoreWithFunc) nextHook() func(basestore.ShareableStore) SubRepoPermsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SubRepoPermsStoreWithFunc) appendCall(r0 SubRepoPermsStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SubRepoPermsStoreWithFuncCall objects
// describing the invocations of this function.
func (f *SubRepoPermsStoreWithFunc) History() []SubRepoPermsStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]SubRepoPermsStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SubRepoPermsStoreWithFuncCall is an object that describes an invocation
// of method With on an instance of MockSubRepoPermsStore.
type SubRepoPermsStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 SubRepoPermsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SubRepoPermsStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SubRepoPermsStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockTemporarySettingsStore is a mock implementation of the
// TemporarySettingsStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockTemporarySettingsStore struct {
	// EditTemporarySettingsFunc is an instance of a mock function object
	// controlling the behavior of the method EditTemporarySettings.
	EditTemporarySettingsFunc *TemporarySettingsStoreEditTemporarySettingsFunc
	// GetTemporarySettingsFunc is an instance of a mock function object
	// controlling the behavior of the method GetTemporarySettings.
	GetTemporarySettingsFunc *TemporarySettingsStoreGetTemporarySettingsFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *TemporarySettingsStoreHandleFunc
	// OverwriteTemporarySettingsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// OverwriteTemporarySettings.
	OverwriteTemporarySettingsFunc *TemporarySettingsStoreOverwriteTemporarySettingsFunc
}

// NewMockTemporarySettingsStore creates a new mock of the
// TemporarySettingsStore interface. All methods return zero values for all
// results, unless overwritten.
func NewMockTemporarySettingsStore() *MockTemporarySettingsStore {
	return &MockTemporarySettingsStore{
		EditTemporarySettingsFunc: &TemporarySettingsStoreEditTemporarySettingsFunc{
			defaultHook: func(context.Context, int32, string) (r0 error) {
				return
			},
		},
		GetTemporarySettingsFunc: &TemporarySettingsStoreGetTemporarySettingsFunc{
			defaultHook: func(context.Context, int32) (r0 *temporarysettings.TemporarySettings, r1 error) {
				return
			},
		},
		HandleFunc: &TemporarySettingsStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		OverwriteTemporarySettingsFunc: &TemporarySettingsStoreOverwriteTemporarySettingsFunc{
			defaultHook: func(context.Context, int32, string) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockTemporarySettingsStore creates a new mock of the
// TemporarySettingsStore interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockTemporarySettingsStore() *MockTemporarySettingsStore {
	return &MockTemporarySettingsStore{
		EditTemporarySettingsFunc: &TemporarySettingsStoreEditTemporarySettingsFunc{
			defaultHook: func(context.Context, int32, string) error {
				panic("unexpected invocation of MockTemporarySettingsStore.EditTemporarySettings")
			},
		},
		GetTemporarySettingsFunc: &TemporarySettingsStoreGetTemporarySettingsFunc{
			defaultHook: func(context.Context, int32) (*temporarysettings.TemporarySettings, error) {
				panic("unexpected invocation of MockTemporarySettingsStore.GetTemporarySettings")
			},
		},
		HandleFunc: &TemporarySettingsStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockTemporarySettingsStore.Handle")
			},
		},
		OverwriteTemporarySettingsFunc: &TemporarySettingsStoreOverwriteTemporarySettingsFunc{
			defaultHook: func(context.Context, int32, string) error {
				panic("unexpected invocation of MockTemporarySettingsStore.OverwriteTemporarySettings")
			},
		},
	}
}

// NewMockTemporarySettingsStoreFrom creates a new mock of the
// MockTemporarySettingsStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockTemporarySettingsStoreFrom(i TemporarySettingsStore) *MockTemporarySettingsStore {
	return &MockTemporarySettingsStore{
		EditTemporarySettingsFunc: &TemporarySettingsStoreEditTemporarySettingsFunc{
			defaultHook: i.EditTemporarySettings,
		},
		GetTemporarySettingsFunc: &TemporarySettingsStoreGetTemporarySettingsFunc{
			defaultHook: i.GetTemporarySettings,
		},
		HandleFunc: &TemporarySettingsStoreHandleFunc{
			defaultHook: i.Handle,
		},
		OverwriteTemporarySettingsFunc: &TemporarySettingsStoreOverwriteTemporarySettingsFunc{
			defaultHook: i.OverwriteTemporarySettings,
		},
	}
}

// TemporarySettingsStoreEditTemporarySettingsFunc describes the behavior
// when the EditTemporarySettings method of the parent
// MockTemporarySettingsStore instance is invoked.
type TemporarySettingsStoreEditTemporarySettingsFunc struct {
	defaultHook func(context.Context, int32, string) error
	hooks       []func(context.Context, int32, string) error
	history     []TemporarySettingsStoreEditTemporarySettingsFuncCall
	mutex       sync.Mutex
}

// EditTemporarySettings delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockTemporarySettingsStore) EditTemporarySettings(v0 context.Context, v1 int32, v2 string) error {
	r0 := m.EditTemporarySettingsFunc.nextHook()(v0, v1, v2)
	m.EditTemporarySettingsFunc.appendCall(TemporarySettingsStoreEditTemporarySettingsFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// EditTemporarySettings method of the parent MockTemporarySettingsStore
// instance is invoked and the hook queue is empty.
func (f *TemporarySettingsStoreEditTemporarySettingsFunc) SetDefaultHook(hook func(context.Context, int32, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EditTemporarySettings method of the parent MockTemporarySettingsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *TemporarySettingsStoreEditTemporarySettingsFunc) PushHook(hook func(context.Context, int32, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TemporarySettingsStoreEditTemporarySettingsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TemporarySettingsStoreEditTemporarySettingsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, string) error {
		return r0
	})
}

func (f *TemporarySettingsStoreEditTemporarySettingsFunc) nextHook() func(context.Context, int32, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TemporarySettingsStoreEditTemporarySettingsFunc) appendCall(r0 TemporarySettingsStoreEditTemporarySettingsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// TemporarySettingsStoreEditTemporarySettingsFuncCall objects describing
// the invocations of this function.
func (f *TemporarySettingsStoreEditTemporarySettingsFunc) History() []TemporarySettingsStoreEditTemporarySettingsFuncCall {
	f.mutex.Lock()
	history := make([]TemporarySettingsStoreEditTemporarySettingsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TemporarySettingsStoreEditTemporarySettingsFuncCall is an object that
// describes an invocation of method EditTemporarySettings on an instance of
// MockTemporarySettingsStore.
type TemporarySettingsStoreEditTemporarySettingsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TemporarySettingsStoreEditTemporarySettingsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TemporarySettingsStoreEditTemporarySettingsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TemporarySettingsStoreGetTemporarySettingsFunc describes the behavior
// when the GetTemporarySettings method of the parent
// MockTemporarySettingsStore instance is invoked.
type TemporarySettingsStoreGetTemporarySettingsFunc struct {
	defaultHook func(context.Context, int32) (*temporarysettings.TemporarySettings, error)
	hooks       []func(context.Context, int32) (*temporarysettings.TemporarySettings, error)
	history     []TemporarySettingsStoreGetTemporarySettingsFuncCall
	mutex       sync.Mutex
}

// GetTemporarySettings delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockTemporarySettingsStore) GetTemporarySettings(v0 context.Context, v1 int32) (*temporarysettings.TemporarySettings, error) {
	r0, r1 := m.GetTemporarySettingsFunc.nextHook()(v0, v1)
	m.GetTemporarySettingsFunc.appendCall(TemporarySettingsStoreGetTemporarySettingsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetTemporarySettings
// method of the parent MockTemporarySettingsStore instance is invoked and
// the hook queue is empty.
func (f *TemporarySettingsStoreGetTemporarySettingsFunc) SetDefaultHook(hook func(context.Context, int32) (*temporarysettings.TemporarySettings, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTemporarySettings method of the parent MockTemporarySettingsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *TemporarySettingsStoreGetTemporarySettingsFunc) PushHook(hook func(context.Context, int32) (*temporarysettings.TemporarySettings, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TemporarySettingsStoreGetTemporarySettingsFunc) SetDefaultReturn(r0 *temporarysettings.TemporarySettings, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (*temporarysettings.TemporarySettings, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TemporarySettingsStoreGetTemporarySettingsFunc) PushReturn(r0 *temporarysettings.TemporarySettings, r1 error) {
	f.PushHook(func(context.Context, int32) (*temporarysettings.TemporarySettings, error) {
		return r0, r1
	})
}

func (f *TemporarySettingsStoreGetTemporarySettingsFunc) nextHook() func(context.Context, int32) (*temporarysettings.TemporarySettings, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TemporarySettingsStoreGetTemporarySettingsFunc) appendCall(r0 TemporarySettingsStoreGetTemporarySettingsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// TemporarySettingsStoreGetTemporarySettingsFuncCall objects describing the
// invocations of this function.
func (f *TemporarySettingsStoreGetTemporarySettingsFunc) History() []TemporarySettingsStoreGetTemporarySettingsFuncCall {
	f.mutex.Lock()
	history := make([]TemporarySettingsStoreGetTemporarySettingsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TemporarySettingsStoreGetTemporarySettingsFuncCall is an object that
// describes an invocation of method GetTemporarySettings on an instance of
// MockTemporarySettingsStore.
type TemporarySettingsStoreGetTemporarySettingsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *temporarysettings.TemporarySettings
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TemporarySettingsStoreGetTemporarySettingsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TemporarySettingsStoreGetTemporarySettingsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// TemporarySettingsStoreHandleFunc describes the behavior when the Handle
// method of the parent MockTemporarySettingsStore instance is invoked.
type TemporarySettingsStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []TemporarySettingsStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTemporarySettingsStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(TemporarySettingsStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockTemporarySettingsStore instance is invoked and the hook queue
// is empty.
func (f *TemporarySettingsStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockTemporarySettingsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *TemporarySettingsStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TemporarySettingsStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TemporarySettingsStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *TemporarySettingsStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TemporarySettingsStoreHandleFunc) appendCall(r0 TemporarySettingsStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TemporarySettingsStoreHandleFuncCall
// objects describing the invocations of this function.
func (f *TemporarySettingsStoreHandleFunc) History() []TemporarySettingsStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]TemporarySettingsStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TemporarySettingsStoreHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of MockTemporarySettingsStore.
type TemporarySettingsStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TemporarySettingsStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TemporarySettingsStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TemporarySettingsStoreOverwriteTemporarySettingsFunc describes the
// behavior when the OverwriteTemporarySettings method of the parent
// MockTemporarySettingsStore instance is invoked.
type TemporarySettingsStoreOverwriteTemporarySettingsFunc struct {
	defaultHook func(context.Context, int32, string) error
	hooks       []func(context.Context, int32, string) error
	history     []TemporarySettingsStoreOverwriteTemporarySettingsFuncCall
	mutex       sync.Mutex
}

// OverwriteTemporarySettings delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockTemporarySettingsStore) OverwriteTemporarySettings(v0 context.Context, v1 int32, v2 string) error {
	r0 := m.OverwriteTemporarySettingsFunc.nextHook()(v0, v1, v2)
	m.OverwriteTemporarySettingsFunc.appendCall(TemporarySettingsStoreOverwriteTemporarySettingsFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// OverwriteTemporarySettings method of the parent
// MockTemporarySettingsStore instance is invoked and the hook queue is
// empty.
func (f *TemporarySettingsStoreOverwriteTemporarySettingsFunc) SetDefaultHook(hook func(context.Context, int32, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// OverwriteTemporarySettings method of the parent
// MockTemporarySettingsStore instance invokes the hook at the front of the
// queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *TemporarySettingsStoreOverwriteTemporarySettingsFunc) PushHook(hook func(context.Context, int32, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TemporarySettingsStoreOverwriteTemporarySettingsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TemporarySettingsStoreOverwriteTemporarySettingsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, string) error {
		return r0
	})
}

func (f *TemporarySettingsStoreOverwriteTemporarySettingsFunc) nextHook() func(context.Context, int32, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TemporarySettingsStoreOverwriteTemporarySettingsFunc) appendCall(r0 TemporarySettingsStoreOverwriteTemporarySettingsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// TemporarySettingsStoreOverwriteTemporarySettingsFuncCall objects
// describing the invocations of this function.
func (f *TemporarySettingsStoreOverwriteTemporarySettingsFunc) History() []TemporarySettingsStoreOverwriteTemporarySettingsFuncCall {
	f.mutex.Lock()
	history := make([]TemporarySettingsStoreOverwriteTemporarySettingsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TemporarySettingsStoreOverwriteTemporarySettingsFuncCall is an object
// that describes an invocation of method OverwriteTemporarySettings on an
// instance of MockTemporarySettingsStore.
type TemporarySettingsStoreOverwriteTemporarySettingsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TemporarySettingsStoreOverwriteTemporarySettingsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TemporarySettingsStoreOverwriteTemporarySettingsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockUserCredentialsStore is a mock implementation of the
// UserCredentialsStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockUserCredentialsStore struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *UserCredentialsStoreCreateFunc
	// DeleteFunc is an instance of a mock function object controlling the
	// behavior of the method Delete.
	DeleteFunc *UserCredentialsStoreDeleteFunc
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *UserCredentialsStoreGetByIDFunc
	// GetByScopeFunc is an instance of a mock function object controlling
	// the behavior of the method GetByScope.
	GetByScopeFunc *UserCredentialsStoreGetByScopeFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *UserCredentialsStoreHandleFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *UserCredentialsStoreListFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *UserCredentialsStoreTransactFunc
	// UpdateFunc is an instance of a mock function object controlling the
	// behavior of the method Update.
	UpdateFunc *UserCredentialsStoreUpdateFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *UserCredentialsStoreWithFunc
}

// NewMockUserCredentialsStore creates a new mock of the
// UserCredentialsStore interface. All methods return zero values for all
// results, unless overwritten.
func NewMockUserCredentialsStore() *MockUserCredentialsStore {
	return &MockUserCredentialsStore{
		CreateFunc: &UserCredentialsStoreCreateFunc{
			defaultHook: func(context.Context, UserCredentialScope, auth.Authenticator) (r0 *UserCredential, r1 error) {
				return
			},
		},
		DeleteFunc: &UserCredentialsStoreDeleteFunc{
			defaultHook: func(context.Context, int64) (r0 error) {
				return
			},
		},
		GetByIDFunc: &UserCredentialsStoreGetByIDFunc{
			defaultHook: func(context.Context, int64) (r0 *UserCredential, r1 error) {
				return
			},
		},
		GetByScopeFunc: &UserCredentialsStoreGetByScopeFunc{
			defaultHook: func(context.Context, UserCredentialScope) (r0 *UserCredential, r1 error) {
				return
			},
		},
		HandleFunc: &UserCredentialsStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		ListFunc: &UserCredentialsStoreListFunc{
			defaultHook: func(context.Context, UserCredentialsListOpts) (r0 []*UserCredential, r1 int, r2 error) {
				return
			},
		},
		TransactFunc: &UserCredentialsStoreTransactFunc{
			defaultHook: func(context.Context) (r0 UserCredentialsStore, r1 error) {
				return
			},
		},
		UpdateFunc: &UserCredentialsStoreUpdateFunc{
			defaultHook: func(context.Context, *UserCredential) (r0 error) {
				return
			},
		},
		WithFunc: &UserCredentialsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 UserCredentialsStore) {
				return
			},
		},
	}
}

// NewStrictMockUserCredentialsStore creates a new mock of the
// UserCredentialsStore interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockUserCredentialsStore() *MockUserCredentialsStore {
	return &MockUserCredentialsStore{
		CreateFunc: &UserCredentialsStoreCreateFunc{
			defaultHook: func(context.Context, UserCredentialScope, auth.Authenticator) (*UserCredential, error) {
				panic("unexpected invocation of MockUserCredentialsStore.Create")
			},
		},
		DeleteFunc: &UserCredentialsStoreDeleteFunc{
			defaultHook: func(context.Context, int64) error {
				panic("unexpected invocation of MockUserCredentialsStore.Delete")
			},
		},
		GetByIDFunc: &UserCredentialsStoreGetByIDFunc{
			defaultHook: func(context.Context, int64) (*UserCredential, error) {
				panic("unexpected invocation of MockUserCredentialsStore.GetByID")
			},
		},
		GetByScopeFunc: &UserCredentialsStoreGetByScopeFunc{
			defaultHook: func(context.Context, UserCredentialScope) (*UserCredential, error) {
				panic("unexpected invocation of MockUserCredentialsStore.GetByScope")
			},
		},
		HandleFunc: &UserCredentialsStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockUserCredentialsStore.Handle")
			},
		},
		ListFunc: &UserCredentialsStoreListFunc{
			defaultHook: func(context.Context, UserCredentialsListOpts) ([]*UserCredential, int, error) {
				panic("unexpected invocation of MockUserCredentialsStore.List")
			},
		},
		TransactFunc: &UserCredentialsStoreTransactFunc{
			defaultHook: func(context.Context) (UserCredentialsStore, error) {
				panic("unexpected invocation of MockUserCredentialsStore.Transact")
			},
		},
		UpdateFunc: &UserCredentialsStoreUpdateFunc{
			defaultHook: func(context.Context, *UserCredential) error {
				panic("unexpected invocation of MockUserCredentialsStore.Update")
			},
		},
		WithFunc: &UserCredentialsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) UserCredentialsStore {
				panic("unexpected invocation of MockUserCredentialsStore.With")
			},
		},
	}
}

// NewMockUserCredentialsStoreFrom creates a new mock of the
// MockUserCredentialsStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockUserCredentialsStoreFrom(i UserCredentialsStore) *MockUserCredentialsStore {
	return &MockUserCredentialsStore{
		CreateFunc: &UserCredentialsStoreCreateFunc{
			defaultHook: i.Create,
		},
		DeleteFunc: &UserCredentialsStoreDeleteFunc{
			defaultHook: i.Delete,
		},
		GetByIDFunc: &UserCredentialsStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		GetByScopeFunc: &UserCredentialsStoreGetByScopeFunc{
			defaultHook: i.GetByScope,
		},
		HandleFunc: &UserCredentialsStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListFunc: &UserCredentialsStoreListFunc{
			defaultHook: i.List,
		},
		TransactFunc: &UserCredentialsStoreTransactFunc{
			defaultHook: i.Transact,
		},
		UpdateFunc: &UserCredentialsStoreUpdateFunc{
			defaultHook: i.Update,
		},
		WithFunc: &UserCredentialsStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// UserCredentialsStoreCreateFunc describes the behavior when the Create
// method of the parent MockUserCredentialsStore instance is invoked.
type UserCredentialsStoreCreateFunc struct {
	defaultHook func(context.Context, UserCredentialScope, auth.Authenticator) (*UserCredential, error)
	hooks       []func(context.Context, UserCredentialScope, auth.Authenticator) (*UserCredential, error)
	history     []UserCredentialsStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserCredentialsStore) Create(v0 context.Context, v1 UserCredentialScope, v2 auth.Authenticator) (*UserCredential, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1, v2)
	m.CreateFunc.appendCall(UserCredentialsStoreCreateFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockUserCredentialsStore instance is invoked and the hook queue is
// empty.
func (f *UserCredentialsStoreCreateFunc) SetDefaultHook(hook func(context.Context, UserCredentialScope, auth.Authenticator) (*UserCredential, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockUserCredentialsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserCredentialsStoreCreateFunc) PushHook(hook func(context.Context, UserCredentialScope, auth.Authenticator) (*UserCredential, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserCredentialsStoreCreateFunc) SetDefaultReturn(r0 *UserCredential, r1 error) {
	f.SetDefaultHook(func(context.Context, UserCredentialScope, auth.Authenticator) (*UserCredential, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserCredentialsStoreCreateFunc) PushReturn(r0 *UserCredential, r1 error) {
	f.PushHook(func(context.Context, UserCredentialScope, auth.Authenticator) (*UserCredential, error) {
		return r0, r1
	})
}

func (f *UserCredentialsStoreCreateFunc) nextHook() func(context.Context, UserCredentialScope, auth.Authenticator) (*UserCredential, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserCredentialsStoreCreateFunc) appendCall(r0 UserCredentialsStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserCredentialsStoreCreateFuncCall objects
// describing the invocations of this function.
func (f *UserCredentialsStoreCreateFunc) History() []UserCredentialsStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]UserCredentialsStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserCredentialsStoreCreateFuncCall is an object that describes an
// invocation of method Create on an instance of MockUserCredentialsStore.
type UserCredentialsStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 UserCredentialScope
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 auth.Authenticator
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *UserCredential
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserCredentialsStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserCredentialsStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserCredentialsStoreDeleteFunc describes the behavior when the Delete
// method of the parent MockUserCredentialsStore instance is invoked.
type UserCredentialsStoreDeleteFunc struct {
	defaultHook func(context.Context, int64) error
	hooks       []func(context.Context, int64) error
	history     []UserCredentialsStoreDeleteFuncCall
	mutex       sync.Mutex
}

// Delete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserCredentialsStore) Delete(v0 context.Context, v1 int64) error {
	r0 := m.DeleteFunc.nextHook()(v0, v1)
	m.DeleteFunc.appendCall(UserCredentialsStoreDeleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Delete method of the
// parent MockUserCredentialsStore instance is invoked and the hook queue is
// empty.
func (f *UserCredentialsStoreDeleteFunc) SetDefaultHook(hook func(context.Context, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Delete method of the parent MockUserCredentialsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserCredentialsStoreDeleteFunc) PushHook(hook func(context.Context, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserCredentialsStoreDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserCredentialsStoreDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64) error {
		return r0
	})
}

func (f *UserCredentialsStoreDeleteFunc) nextHook() func(context.Context, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserCredentialsStoreDeleteFunc) appendCall(r0 UserCredentialsStoreDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserCredentialsStoreDeleteFuncCall objects
// describing the invocations of this function.
func (f *UserCredentialsStoreDeleteFunc) History() []UserCredentialsStoreDeleteFuncCall {
	f.mutex.Lock()
	history := make([]UserCredentialsStoreDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserCredentialsStoreDeleteFuncCall is an object that describes an
// invocation of method Delete on an instance of MockUserCredentialsStore.
type UserCredentialsStoreDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserCredentialsStoreDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserCredentialsStoreDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserCredentialsStoreGetByIDFunc describes the behavior when the GetByID
// method of the parent MockUserCredentialsStore instance is invoked.
type UserCredentialsStoreGetByIDFunc struct {
	defaultHook func(context.Context, int64) (*UserCredential, error)
	hooks       []func(context.Context, int64) (*UserCredential, error)
	history     []UserCredentialsStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserCredentialsStore) GetByID(v0 context.Context, v1 int64) (*UserCredential, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(UserCredentialsStoreGetByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockUserCredentialsStore instance is invoked and the hook
// queue is empty.
func (f *UserCredentialsStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int64) (*UserCredential, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockUserCredentialsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserCredentialsStoreGetByIDFunc) PushHook(hook func(context.Context, int64) (*UserCredential, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserCredentialsStoreGetByIDFunc) SetDefaultReturn(r0 *UserCredential, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (*UserCredential, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserCredentialsStoreGetByIDFunc) PushReturn(r0 *UserCredential, r1 error) {
	f.PushHook(func(context.Context, int64) (*UserCredential, error) {
		return r0, r1
	})
}

func (f *UserCredentialsStoreGetByIDFunc) nextHook() func(context.Context, int64) (*UserCredential, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserCredentialsStoreGetByIDFunc) appendCall(r0 UserCredentialsStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserCredentialsStoreGetByIDFuncCall objects
// describing the invocations of this function.
func (f *UserCredentialsStoreGetByIDFunc) History() []UserCredentialsStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]UserCredentialsStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserCredentialsStoreGetByIDFuncCall is an object that describes an
// invocation of method GetByID on an instance of MockUserCredentialsStore.
type UserCredentialsStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *UserCredential
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserCredentialsStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserCredentialsStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserCredentialsStoreGetByScopeFunc describes the behavior when the
// GetByScope method of the parent MockUserCredentialsStore instance is
// invoked.
type UserCredentialsStoreGetByScopeFunc struct {
	defaultHook func(context.Context, UserCredentialScope) (*UserCredential, error)
	hooks       []func(context.Context, UserCredentialScope) (*UserCredential, error)
	history     []UserCredentialsStoreGetByScopeFuncCall
	mutex       sync.Mutex
}

// GetByScope delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserCredentialsStore) GetByScope(v0 context.Context, v1 UserCredentialScope) (*UserCredential, error) {
	r0, r1 := m.GetByScopeFunc.nextHook()(v0, v1)
	m.GetByScopeFunc.appendCall(UserCredentialsStoreGetByScopeFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByScope method of
// the parent MockUserCredentialsStore instance is invoked and the hook
// queue is empty.
func (f *UserCredentialsStoreGetByScopeFunc) SetDefaultHook(hook func(context.Context, UserCredentialScope) (*UserCredential, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByScope method of the parent MockUserCredentialsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserCredentialsStoreGetByScopeFunc) PushHook(hook func(context.Context, UserCredentialScope) (*UserCredential, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserCredentialsStoreGetByScopeFunc) SetDefaultReturn(r0 *UserCredential, r1 error) {
	f.SetDefaultHook(func(context.Context, UserCredentialScope) (*UserCredential, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserCredentialsStoreGetByScopeFunc) PushReturn(r0 *UserCredential, r1 error) {
	f.PushHook(func(context.Context, UserCredentialScope) (*UserCredential, error) {
		return r0, r1
	})
}

func (f *UserCredentialsStoreGetByScopeFunc) nextHook() func(context.Context, UserCredentialScope) (*UserCredential, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserCredentialsStoreGetByScopeFunc) appendCall(r0 UserCredentialsStoreGetByScopeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserCredentialsStoreGetByScopeFuncCall
// objects describing the invocations of this function.
func (f *UserCredentialsStoreGetByScopeFunc) History() []UserCredentialsStoreGetByScopeFuncCall {
	f.mutex.Lock()
	history := make([]UserCredentialsStoreGetByScopeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserCredentialsStoreGetByScopeFuncCall is an object that describes an
// invocation of method GetByScope on an instance of
// MockUserCredentialsStore.
type UserCredentialsStoreGetByScopeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 UserCredentialScope
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *UserCredential
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserCredentialsStoreGetByScopeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserCredentialsStoreGetByScopeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserCredentialsStoreHandleFunc describes the behavior when the Handle
// method of the parent MockUserCredentialsStore instance is invoked.
type UserCredentialsStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []UserCredentialsStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserCredentialsStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(UserCredentialsStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockUserCredentialsStore instance is invoked and the hook queue is
// empty.
func (f *UserCredentialsStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockUserCredentialsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserCredentialsStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserCredentialsStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserCredentialsStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *UserCredentialsStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserCredentialsStoreHandleFunc) appendCall(r0 UserCredentialsStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserCredentialsStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *UserCredentialsStoreHandleFunc) History() []UserCredentialsStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]UserCredentialsStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserCredentialsStoreHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of MockUserCredentialsStore.
type UserCredentialsStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserCredentialsStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserCredentialsStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserCredentialsStoreListFunc describes the behavior when the List method
// of the parent MockUserCredentialsStore instance is invoked.
type UserCredentialsStoreListFunc struct {
	defaultHook func(context.Context, UserCredentialsListOpts) ([]*UserCredential, int, error)
	hooks       []func(context.Context, UserCredentialsListOpts) ([]*UserCredential, int, error)
	history     []UserCredentialsStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserCredentialsStore) List(v0 context.Context, v1 UserCredentialsListOpts) ([]*UserCredential, int, error) {
	r0, r1, r2 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(UserCredentialsStoreListFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockUserCredentialsStore instance is invoked and the hook queue is
// empty.
func (f *UserCredentialsStoreListFunc) SetDefaultHook(hook func(context.Context, UserCredentialsListOpts) ([]*UserCredential, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockUserCredentialsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserCredentialsStoreListFunc) PushHook(hook func(context.Context, UserCredentialsListOpts) ([]*UserCredential, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserCredentialsStoreListFunc) SetDefaultReturn(r0 []*UserCredential, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, UserCredentialsListOpts) ([]*UserCredential, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserCredentialsStoreListFunc) PushReturn(r0 []*UserCredential, r1 int, r2 error) {
	f.PushHook(func(context.Context, UserCredentialsListOpts) ([]*UserCredential, int, error) {
		return r0, r1, r2
	})
}

func (f *UserCredentialsStoreListFunc) nextHook() func(context.Context, UserCredentialsListOpts) ([]*UserCredential, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserCredentialsStoreListFunc) appendCall(r0 UserCredentialsStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserCredentialsStoreListFuncCall objects
// describing the invocations of this function.
func (f *UserCredentialsStoreListFunc) History() []UserCredentialsStoreListFuncCall {
	f.mutex.Lock()
	history := make([]UserCredentialsStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserCredentialsStoreListFuncCall is an object that describes an
// invocation of method List on an instance of MockUserCredentialsStore.
type UserCredentialsStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 UserCredentialsListOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*UserCredential
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserCredentialsStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserCredentialsStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// UserCredentialsStoreTransactFunc describes the behavior when the Transact
// method of the parent MockUserCredentialsStore instance is invoked.
type UserCredentialsStoreTransactFunc struct {
	defaultHook func(context.Context) (UserCredentialsStore, error)
	hooks       []func(context.Context) (UserCredentialsStore, error)
	history     []UserCredentialsStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserCredentialsStore) Transact(v0 context.Context) (UserCredentialsStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(UserCredentialsStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockUserCredentialsStore instance is invoked and the hook
// queue is empty.
func (f *UserCredentialsStoreTransactFunc) SetDefaultHook(hook func(context.Context) (UserCredentialsStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockUserCredentialsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserCredentialsStoreTransactFunc) PushHook(hook func(context.Context) (UserCredentialsStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserCredentialsStoreTransactFunc) SetDefaultReturn(r0 UserCredentialsStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (UserCredentialsStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserCredentialsStoreTransactFunc) PushReturn(r0 UserCredentialsStore, r1 error) {
	f.PushHook(func(context.Context) (UserCredentialsStore, error) {
		return r0, r1
	})
}

func (f *UserCredentialsStoreTransactFunc) nextHook() func(context.Context) (UserCredentialsStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserCredentialsStoreTransactFunc) appendCall(r0 UserCredentialsStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserCredentialsStoreTransactFuncCall
// objects describing the invocations of this function.
func (f *UserCredentialsStoreTransactFunc) History() []UserCredentialsStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]UserCredentialsStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserCredentialsStoreTransactFuncCall is an object that describes an
// invocation of method Transact on an instance of MockUserCredentialsStore.
type UserCredentialsStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 UserCredentialsStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserCredentialsStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserCredentialsStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserCredentialsStoreUpdateFunc describes the behavior when the Update
// method of the parent MockUserCredentialsStore instance is invoked.
type UserCredentialsStoreUpdateFunc struct {
	defaultHook func(context.Context, *UserCredential) error
	hooks       []func(context.Context, *UserCredential) error
	history     []UserCredentialsStoreUpdateFuncCall
	mutex       sync.Mutex
}

// Update delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserCredentialsStore) Update(v0 context.Context, v1 *UserCredential) error {
	r0 := m.UpdateFunc.nextHook()(v0, v1)
	m.UpdateFunc.appendCall(UserCredentialsStoreUpdateFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Update method of the
// parent MockUserCredentialsStore instance is invoked and the hook queue is
// empty.
func (f *UserCredentialsStoreUpdateFunc) SetDefaultHook(hook func(context.Context, *UserCredential) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Update method of the parent MockUserCredentialsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserCredentialsStoreUpdateFunc) PushHook(hook func(context.Context, *UserCredential) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserCredentialsStoreUpdateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *UserCredential) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserCredentialsStoreUpdateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *UserCredential) error {
		return r0
	})
}

func (f *UserCredentialsStoreUpdateFunc) nextHook() func(context.Context, *UserCredential) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserCredentialsStoreUpdateFunc) appendCall(r0 UserCredentialsStoreUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserCredentialsStoreUpdateFuncCall objects
// describing the invocations of this function.
func (f *UserCredentialsStoreUpdateFunc) History() []UserCredentialsStoreUpdateFuncCall {
	f.mutex.Lock()
	history := make([]UserCredentialsStoreUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserCredentialsStoreUpdateFuncCall is an object that describes an
// invocation of method Update on an instance of MockUserCredentialsStore.
type UserCredentialsStoreUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *UserCredential
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserCredentialsStoreUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserCredentialsStoreUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserCredentialsStoreWithFunc describes the behavior when the With method
// of the parent MockUserCredentialsStore instance is invoked.
type UserCredentialsStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) UserCredentialsStore
	hooks       []func(basestore.ShareableStore) UserCredentialsStore
	history     []UserCredentialsStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserCredentialsStore) With(v0 basestore.ShareableStore) UserCredentialsStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(UserCredentialsStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockUserCredentialsStore instance is invoked and the hook queue is
// empty.
func (f *UserCredentialsStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) UserCredentialsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockUserCredentialsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserCredentialsStoreWithFunc) PushHook(hook func(basestore.ShareableStore) UserCredentialsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserCredentialsStoreWithFunc) SetDefaultReturn(r0 UserCredentialsStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) UserCredentialsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserCredentialsStoreWithFunc) PushReturn(r0 UserCredentialsStore) {
	f.PushHook(func(basestore.ShareableStore) UserCredentialsStore {
		return r0
	})
}

func (f *UserCredentialsStoreWithFunc) nextHook() func(basestore.ShareableStore) UserCredentialsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserCredentialsStoreWithFunc) appendCall(r0 UserCredentialsStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserCredentialsStoreWithFuncCall objects
// describing the invocations of this function.
func (f *UserCredentialsStoreWithFunc) History() []UserCredentialsStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]UserCredentialsStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserCredentialsStoreWithFuncCall is an object that describes an
// invocation of method With on an instance of MockUserCredentialsStore.
type UserCredentialsStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 UserCredentialsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserCredentialsStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserCredentialsStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockUserEmailsStore is a mock implementation of the UserEmailsStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockUserEmailsStore struct {
	// AddFunc is an instance of a mock function object controlling the
	// behavior of the method Add.
	AddFunc *UserEmailsStoreAddFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *UserEmailsStoreDoneFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *UserEmailsStoreGetFunc
	// GetInitialSiteAdminInfoFunc is an instance of a mock function object
	// controlling the behavior of the method GetInitialSiteAdminInfo.
	GetInitialSiteAdminInfoFunc *UserEmailsStoreGetInitialSiteAdminInfoFunc
	// GetLatestVerificationSentEmailFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetLatestVerificationSentEmail.
	GetLatestVerificationSentEmailFunc *UserEmailsStoreGetLatestVerificationSentEmailFunc
	// GetPrimaryEmailFunc is an instance of a mock function object
	// controlling the behavior of the method GetPrimaryEmail.
	GetPrimaryEmailFunc *UserEmailsStoreGetPrimaryEmailFunc
	// GetVerifiedEmailsFunc is an instance of a mock function object
	// controlling the behavior of the method GetVerifiedEmails.
	GetVerifiedEmailsFunc *UserEmailsStoreGetVerifiedEmailsFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *UserEmailsStoreHandleFunc
	// ListByUserFunc is an instance of a mock function object controlling
	// the behavior of the method ListByUser.
	ListByUserFunc *UserEmailsStoreListByUserFunc
	// RemoveFunc is an instance of a mock function object controlling the
	// behavior of the method Remove.
	RemoveFunc *UserEmailsStoreRemoveFunc
	// SetLastVerificationFunc is an instance of a mock function object
	// controlling the behavior of the method SetLastVerification.
	SetLastVerificationFunc *UserEmailsStoreSetLastVerificationFunc
	// SetPrimaryEmailFunc is an instance of a mock function object
	// controlling the behavior of the method SetPrimaryEmail.
	SetPrimaryEmailFunc *UserEmailsStoreSetPrimaryEmailFunc
	// SetVerifiedFunc is an instance of a mock function object controlling
	// the behavior of the method SetVerified.
	SetVerifiedFunc *UserEmailsStoreSetVerifiedFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *UserEmailsStoreTransactFunc
	// VerifyFunc is an instance of a mock function object controlling the
	// behavior of the method Verify.
	VerifyFunc *UserEmailsStoreVerifyFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *UserEmailsStoreWithFunc
}

// NewMockUserEmailsStore creates a new mock of the UserEmailsStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockUserEmailsStore() *MockUserEmailsStore {
	return &MockUserEmailsStore{
		AddFunc: &UserEmailsStoreAddFunc{
			defaultHook: func(context.Context, int32, string, *string) (r0 error) {
				return
			},
		},
		DoneFunc: &UserEmailsStoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		GetFunc: &UserEmailsStoreGetFunc{
			defaultHook: func(context.Context, int32, string) (r0 string, r1 bool, r2 error) {
				return
			},
		},
		GetInitialSiteAdminInfoFunc: &UserEmailsStoreGetInitialSiteAdminInfoFunc{
			defaultHook: func(context.Context) (r0 string, r1 bool, r2 error) {
				return
			},
		},
		GetLatestVerificationSentEmailFunc: &UserEmailsStoreGetLatestVerificationSentEmailFunc{
			defaultHook: func(context.Context, string) (r0 *UserEmail, r1 error) {
				return
			},
		},
		GetPrimaryEmailFunc: &UserEmailsStoreGetPrimaryEmailFunc{
			defaultHook: func(context.Context, int32) (r0 string, r1 bool, r2 error) {
				return
			},
		},
		GetVerifiedEmailsFunc: &UserEmailsStoreGetVerifiedEmailsFunc{
			defaultHook: func(context.Context, ...string) (r0 []*UserEmail, r1 error) {
				return
			},
		},
		HandleFunc: &UserEmailsStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		ListByUserFunc: &UserEmailsStoreListByUserFunc{
			defaultHook: func(context.Context, UserEmailsListOptions) (r0 []*UserEmail, r1 error) {
				return
			},
		},
		RemoveFunc: &UserEmailsStoreRemoveFunc{
			defaultHook: func(context.Context, int32, string) (r0 error) {
				return
			},
		},
		SetLastVerificationFunc: &UserEmailsStoreSetLastVerificationFunc{
			defaultHook: func(context.Context, int32, string, string) (r0 error) {
				return
			},
		},
		SetPrimaryEmailFunc: &UserEmailsStoreSetPrimaryEmailFunc{
			defaultHook: func(context.Context, int32, string) (r0 error) {
				return
			},
		},
		SetVerifiedFunc: &UserEmailsStoreSetVerifiedFunc{
			defaultHook: func(context.Context, int32, string, bool) (r0 error) {
				return
			},
		},
		TransactFunc: &UserEmailsStoreTransactFunc{
			defaultHook: func(context.Context) (r0 UserEmailsStore, r1 error) {
				return
			},
		},
		VerifyFunc: &UserEmailsStoreVerifyFunc{
			defaultHook: func(context.Context, int32, string, string) (r0 bool, r1 error) {
				return
			},
		},
		WithFunc: &UserEmailsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 UserEmailsStore) {
				return
			},
		},
	}
}

// NewStrictMockUserEmailsStore creates a new mock of the UserEmailsStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockUserEmailsStore() *MockUserEmailsStore {
	return &MockUserEmailsStore{
		AddFunc: &UserEmailsStoreAddFunc{
			defaultHook: func(context.Context, int32, string, *string) error {
				panic("unexpected invocation of MockUserEmailsStore.Add")
			},
		},
		DoneFunc: &UserEmailsStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockUserEmailsStore.Done")
			},
		},
		GetFunc: &UserEmailsStoreGetFunc{
			defaultHook: func(context.Context, int32, string) (string, bool, error) {
				panic("unexpected invocation of MockUserEmailsStore.Get")
			},
		},
		GetInitialSiteAdminInfoFunc: &UserEmailsStoreGetInitialSiteAdminInfoFunc{
			defaultHook: func(context.Context) (string, bool, error) {
				panic("unexpected invocation of MockUserEmailsStore.GetInitialSiteAdminInfo")
			},
		},
		GetLatestVerificationSentEmailFunc: &UserEmailsStoreGetLatestVerificationSentEmailFunc{
			defaultHook: func(context.Context, string) (*UserEmail, error) {
				panic("unexpected invocation of MockUserEmailsStore.GetLatestVerificationSentEmail")
			},
		},
		GetPrimaryEmailFunc: &UserEmailsStoreGetPrimaryEmailFunc{
			defaultHook: func(context.Context, int32) (string, bool, error) {
				panic("unexpected invocation of MockUserEmailsStore.GetPrimaryEmail")
			},
		},
		GetVerifiedEmailsFunc: &UserEmailsStoreGetVerifiedEmailsFunc{
			defaultHook: func(context.Context, ...string) ([]*UserEmail, error) {
				panic("unexpected invocation of MockUserEmailsStore.GetVerifiedEmails")
			},
		},
		HandleFunc: &UserEmailsStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockUserEmailsStore.Handle")
			},
		},
		ListByUserFunc: &UserEmailsStoreListByUserFunc{
			defaultHook: func(context.Context, UserEmailsListOptions) ([]*UserEmail, error) {
				panic("unexpected invocation of MockUserEmailsStore.ListByUser")
			},
		},
		RemoveFunc: &UserEmailsStoreRemoveFunc{
			defaultHook: func(context.Context, int32, string) error {
				panic("unexpected invocation of MockUserEmailsStore.Remove")
			},
		},
		SetLastVerificationFunc: &UserEmailsStoreSetLastVerificationFunc{
			defaultHook: func(context.Context, int32, string, string) error {
				panic("unexpected invocation of MockUserEmailsStore.SetLastVerification")
			},
		},
		SetPrimaryEmailFunc: &UserEmailsStoreSetPrimaryEmailFunc{
			defaultHook: func(context.Context, int32, string) error {
				panic("unexpected invocation of MockUserEmailsStore.SetPrimaryEmail")
			},
		},
		SetVerifiedFunc: &UserEmailsStoreSetVerifiedFunc{
			defaultHook: func(context.Context, int32, string, bool) error {
				panic("unexpected invocation of MockUserEmailsStore.SetVerified")
			},
		},
		TransactFunc: &UserEmailsStoreTransactFunc{
			defaultHook: func(context.Context) (UserEmailsStore, error) {
				panic("unexpected invocation of MockUserEmailsStore.Transact")
			},
		},
		VerifyFunc: &UserEmailsStoreVerifyFunc{
			defaultHook: func(context.Context, int32, string, string) (bool, error) {
				panic("unexpected invocation of MockUserEmailsStore.Verify")
			},
		},
		WithFunc: &UserEmailsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) UserEmailsStore {
				panic("unexpected invocation of MockUserEmailsStore.With")
			},
		},
	}
}

// NewMockUserEmailsStoreFrom creates a new mock of the MockUserEmailsStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockUserEmailsStoreFrom(i UserEmailsStore) *MockUserEmailsStore {
	return &MockUserEmailsStore{
		AddFunc: &UserEmailsStoreAddFunc{
			defaultHook: i.Add,
		},
		DoneFunc: &UserEmailsStoreDoneFunc{
			defaultHook: i.Done,
		},
		GetFunc: &UserEmailsStoreGetFunc{
			defaultHook: i.Get,
		},
		GetInitialSiteAdminInfoFunc: &UserEmailsStoreGetInitialSiteAdminInfoFunc{
			defaultHook: i.GetInitialSiteAdminInfo,
		},
		GetLatestVerificationSentEmailFunc: &UserEmailsStoreGetLatestVerificationSentEmailFunc{
			defaultHook: i.GetLatestVerificationSentEmail,
		},
		GetPrimaryEmailFunc: &UserEmailsStoreGetPrimaryEmailFunc{
			defaultHook: i.GetPrimaryEmail,
		},
		GetVerifiedEmailsFunc: &UserEmailsStoreGetVerifiedEmailsFunc{
			defaultHook: i.GetVerifiedEmails,
		},
		HandleFunc: &UserEmailsStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListByUserFunc: &UserEmailsStoreListByUserFunc{
			defaultHook: i.ListByUser,
		},
		RemoveFunc: &UserEmailsStoreRemoveFunc{
			defaultHook: i.Remove,
		},
		SetLastVerificationFunc: &UserEmailsStoreSetLastVerificationFunc{
			defaultHook: i.SetLastVerification,
		},
		SetPrimaryEmailFunc: &UserEmailsStoreSetPrimaryEmailFunc{
			defaultHook: i.SetPrimaryEmail,
		},
		SetVerifiedFunc: &UserEmailsStoreSetVerifiedFunc{
			defaultHook: i.SetVerified,
		},
		TransactFunc: &UserEmailsStoreTransactFunc{
			defaultHook: i.Transact,
		},
		VerifyFunc: &UserEmailsStoreVerifyFunc{
			defaultHook: i.Verify,
		},
		WithFunc: &UserEmailsStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// UserEmailsStoreAddFunc describes the behavior when the Add method of the
// parent MockUserEmailsStore instance is invoked.
type UserEmailsStoreAddFunc struct {
	defaultHook func(context.Context, int32, string, *string) error
	hooks       []func(context.Context, int32, string, *string) error
	history     []UserEmailsStoreAddFuncCall
	mutex       sync.Mutex
}

// Add delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserEmailsStore) Add(v0 context.Context, v1 int32, v2 string, v3 *string) error {
	r0 := m.AddFunc.nextHook()(v0, v1, v2, v3)
	m.AddFunc.appendCall(UserEmailsStoreAddFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Add method of the
// parent MockUserEmailsStore instance is invoked and the hook queue is
// empty.
func (f *UserEmailsStoreAddFunc) SetDefaultHook(hook func(context.Context, int32, string, *string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Add method of the parent MockUserEmailsStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserEmailsStoreAddFunc) PushHook(hook func(context.Context, int32, string, *string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserEmailsStoreAddFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, string, *string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserEmailsStoreAddFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, string, *string) error {
		return r0
	})
}

func (f *UserEmailsStoreAddFunc) nextHook() func(context.Context, int32, string, *string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreAddFunc) appendCall(r0 UserEmailsStoreAddFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreAddFuncCall objects
// describing the invocations of this function.
func (f *UserEmailsStoreAddFunc) History() []UserEmailsStoreAddFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreAddFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreAddFuncCall is an object that describes an invocation of
// method Add on an instance of MockUserEmailsStore.
type UserEmailsStoreAddFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreAddFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreAddFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserEmailsStoreDoneFunc describes the behavior when the Done method of
// the parent MockUserEmailsStore instance is invoked.
type UserEmailsStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []UserEmailsStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserEmailsStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(UserEmailsStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockUserEmailsStore instance is invoked and the hook queue is
// empty.
func (f *UserEmailsStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockUserEmailsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserEmailsStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserEmailsStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserEmailsStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *UserEmailsStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreDoneFunc) appendCall(r0 UserEmailsStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreDoneFuncCall objects
// describing the invocations of this function.
func (f *UserEmailsStoreDoneFunc) History() []UserEmailsStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreDoneFuncCall is an object that describes an invocation of
// method Done on an instance of MockUserEmailsStore.
type UserEmailsStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserEmailsStoreGetFunc describes the behavior when the Get method of the
// parent MockUserEmailsStore instance is invoked.
type UserEmailsStoreGetFunc struct {
	defaultHook func(context.Context, int32, string) (string, bool, error)
	hooks       []func(context.Context, int32, string) (string, bool, error)
	history     []UserEmailsStoreGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserEmailsStore) Get(v0 context.Context, v1 int32, v2 string) (string, bool, error) {
	r0, r1, r2 := m.GetFunc.nextHook()(v0, v1, v2)
	m.GetFunc.appendCall(UserEmailsStoreGetFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockUserEmailsStore instance is invoked and the hook queue is
// empty.
func (f *UserEmailsStoreGetFunc) SetDefaultHook(hook func(context.Context, int32, string) (string, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockUserEmailsStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserEmailsStoreGetFunc) PushHook(hook func(context.Context, int32, string) (string, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserEmailsStoreGetFunc) SetDefaultReturn(r0 string, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, int32, string) (string, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserEmailsStoreGetFunc) PushReturn(r0 string, r1 bool, r2 error) {
	f.PushHook(func(context.Context, int32, string) (string, bool, error) {
		return r0, r1, r2
	})
}

func (f *UserEmailsStoreGetFunc) nextHook() func(context.Context, int32, string) (string, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreGetFunc) appendCall(r0 UserEmailsStoreGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreGetFuncCall objects
// describing the invocations of this function.
func (f *UserEmailsStoreGetFunc) History() []UserEmailsStoreGetFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreGetFuncCall is an object that describes an invocation of
// method Get on an instance of MockUserEmailsStore.
type UserEmailsStoreGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// UserEmailsStoreGetInitialSiteAdminInfoFunc describes the behavior when
// the GetInitialSiteAdminInfo method of the parent MockUserEmailsStore
// instance is invoked.
type UserEmailsStoreGetInitialSiteAdminInfoFunc struct {
	defaultHook func(context.Context) (string, bool, error)
	hooks       []func(context.Context) (string, bool, error)
	history     []UserEmailsStoreGetInitialSiteAdminInfoFuncCall
	mutex       sync.Mutex
}

// GetInitialSiteAdminInfo delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUserEmailsStore) GetInitialSiteAdminInfo(v0 context.Context) (string, bool, error) {
	r0, r1, r2 := m.GetInitialSiteAdminInfoFunc.nextHook()(v0)
	m.GetInitialSiteAdminInfoFunc.appendCall(UserEmailsStoreGetInitialSiteAdminInfoFuncCall{v0, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// GetInitialSiteAdminInfo method of the parent MockUserEmailsStore instance
// is invoked and the hook queue is empty.
func (f *UserEmailsStoreGetInitialSiteAdminInfoFunc) SetDefaultHook(hook func(context.Context) (string, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetInitialSiteAdminInfo method of the parent MockUserEmailsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserEmailsStoreGetInitialSiteAdminInfoFunc) PushHook(hook func(context.Context) (string, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserEmailsStoreGetInitialSiteAdminInfoFunc) SetDefaultReturn(r0 string, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context) (string, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserEmailsStoreGetInitialSiteAdminInfoFunc) PushReturn(r0 string, r1 bool, r2 error) {
	f.PushHook(func(context.Context) (string, bool, error) {
		return r0, r1, r2
	})
}

func (f *UserEmailsStoreGetInitialSiteAdminInfoFunc) nextHook() func(context.Context) (string, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreGetInitialSiteAdminInfoFunc) appendCall(r0 UserEmailsStoreGetInitialSiteAdminInfoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UserEmailsStoreGetInitialSiteAdminInfoFuncCall objects describing the
// invocations of this function.
func (f *UserEmailsStoreGetInitialSiteAdminInfoFunc) History() []UserEmailsStoreGetInitialSiteAdminInfoFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreGetInitialSiteAdminInfoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreGetInitialSiteAdminInfoFuncCall is an object that
// describes an invocation of method GetInitialSiteAdminInfo on an instance
// of MockUserEmailsStore.
type UserEmailsStoreGetInitialSiteAdminInfoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreGetInitialSiteAdminInfoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreGetInitialSiteAdminInfoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// UserEmailsStoreGetLatestVerificationSentEmailFunc describes the behavior
// when the GetLatestVerificationSentEmail method of the parent
// MockUserEmailsStore instance is invoked.
type UserEmailsStoreGetLatestVerificationSentEmailFunc struct {
	defaultHook func(context.Context, string) (*UserEmail, error)
	hooks       []func(context.Context, string) (*UserEmail, error)
	history     []UserEmailsStoreGetLatestVerificationSentEmailFuncCall
	mutex       sync.Mutex
}

// GetLatestVerificationSentEmail delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockUserEmailsStore) GetLatestVerificationSentEmail(v0 context.Context, v1 string) (*UserEmail, error) {
	r0, r1 := m.GetLatestVerificationSentEmailFunc.nextHook()(v0, v1)
	m.GetLatestVerificationSentEmailFunc.appendCall(UserEmailsStoreGetLatestVerificationSentEmailFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetLatestVerificationSentEmail method of the parent MockUserEmailsStore
// instance is invoked and the hook queue is empty.
func (f *UserEmailsStoreGetLatestVerificationSentEmailFunc) SetDefaultHook(hook func(context.Context, string) (*UserEmail, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLatestVerificationSentEmail method of the parent MockUserEmailsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *UserEmailsStoreGetLatestVerificationSentEmailFunc) PushHook(hook func(context.Context, string) (*UserEmail, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserEmailsStoreGetLatestVerificationSentEmailFunc) SetDefaultReturn(r0 *UserEmail, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*UserEmail, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserEmailsStoreGetLatestVerificationSentEmailFunc) PushReturn(r0 *UserEmail, r1 error) {
	f.PushHook(func(context.Context, string) (*UserEmail, error) {
		return r0, r1
	})
}

func (f *UserEmailsStoreGetLatestVerificationSentEmailFunc) nextHook() func(context.Context, string) (*UserEmail, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreGetLatestVerificationSentEmailFunc) appendCall(r0 UserEmailsStoreGetLatestVerificationSentEmailFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UserEmailsStoreGetLatestVerificationSentEmailFuncCall objects describing
// the invocations of this function.
func (f *UserEmailsStoreGetLatestVerificationSentEmailFunc) History() []UserEmailsStoreGetLatestVerificationSentEmailFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreGetLatestVerificationSentEmailFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreGetLatestVerificationSentEmailFuncCall is an object that
// describes an invocation of method GetLatestVerificationSentEmail on an
// instance of MockUserEmailsStore.
type UserEmailsStoreGetLatestVerificationSentEmailFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *UserEmail
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreGetLatestVerificationSentEmailFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreGetLatestVerificationSentEmailFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserEmailsStoreGetPrimaryEmailFunc describes the behavior when the
// GetPrimaryEmail method of the parent MockUserEmailsStore instance is
// invoked.
type UserEmailsStoreGetPrimaryEmailFunc struct {
	defaultHook func(context.Context, int32) (string, bool, error)
	hooks       []func(context.Context, int32) (string, bool, error)
	history     []UserEmailsStoreGetPrimaryEmailFuncCall
	mutex       sync.Mutex
}

// GetPrimaryEmail delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserEmailsStore) GetPrimaryEmail(v0 context.Context, v1 int32) (string, bool, error) {
	r0, r1, r2 := m.GetPrimaryEmailFunc.nextHook()(v0, v1)
	m.GetPrimaryEmailFunc.appendCall(UserEmailsStoreGetPrimaryEmailFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetPrimaryEmail
// method of the parent MockUserEmailsStore instance is invoked and the hook
// queue is empty.
func (f *UserEmailsStoreGetPrimaryEmailFunc) SetDefaultHook(hook func(context.Context, int32) (string, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPrimaryEmail method of the parent MockUserEmailsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserEmailsStoreGetPrimaryEmailFunc) PushHook(hook func(context.Context, int32) (string, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserEmailsStoreGetPrimaryEmailFunc) SetDefaultReturn(r0 string, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, int32) (string, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserEmailsStoreGetPrimaryEmailFunc) PushReturn(r0 string, r1 bool, r2 error) {
	f.PushHook(func(context.Context, int32) (string, bool, error) {
		return r0, r1, r2
	})
}

func (f *UserEmailsStoreGetPrimaryEmailFunc) nextHook() func(context.Context, int32) (string, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreGetPrimaryEmailFunc) appendCall(r0 UserEmailsStoreGetPrimaryEmailFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreGetPrimaryEmailFuncCall
// objects describing the invocations of this function.
func (f *UserEmailsStoreGetPrimaryEmailFunc) History() []UserEmailsStoreGetPrimaryEmailFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreGetPrimaryEmailFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreGetPrimaryEmailFuncCall is an object that describes an
// invocation of method GetPrimaryEmail on an instance of
// MockUserEmailsStore.
type UserEmailsStoreGetPrimaryEmailFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreGetPrimaryEmailFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreGetPrimaryEmailFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// UserEmailsStoreGetVerifiedEmailsFunc describes the behavior when the
// GetVerifiedEmails method of the parent MockUserEmailsStore instance is
// invoked.
type UserEmailsStoreGetVerifiedEmailsFunc struct {
	defaultHook func(context.Context, ...string) ([]*UserEmail, error)
	hooks       []func(context.Context, ...string) ([]*UserEmail, error)
	history     []UserEmailsStoreGetVerifiedEmailsFuncCall
	mutex       sync.Mutex
}

// GetVerifiedEmails delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserEmailsStore) GetVerifiedEmails(v0 context.Context, v1 ...string) ([]*UserEmail, error) {
	r0, r1 := m.GetVerifiedEmailsFunc.nextHook()(v0, v1...)
	m.GetVerifiedEmailsFunc.appendCall(UserEmailsStoreGetVerifiedEmailsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetVerifiedEmails
// method of the parent MockUserEmailsStore instance is invoked and the hook
// queue is empty.
func (f *UserEmailsStoreGetVerifiedEmailsFunc) SetDefaultHook(hook func(context.Context, ...string) ([]*UserEmail, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetVerifiedEmails method of the parent MockUserEmailsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserEmailsStoreGetVerifiedEmailsFunc) PushHook(hook func(context.Context, ...string) ([]*UserEmail, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserEmailsStoreGetVerifiedEmailsFunc) SetDefaultReturn(r0 []*UserEmail, r1 error) {
	f.SetDefaultHook(func(context.Context, ...string) ([]*UserEmail, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserEmailsStoreGetVerifiedEmailsFunc) PushReturn(r0 []*UserEmail, r1 error) {
	f.PushHook(func(context.Context, ...string) ([]*UserEmail, error) {
		return r0, r1
	})
}

func (f *UserEmailsStoreGetVerifiedEmailsFunc) nextHook() func(context.Context, ...string) ([]*UserEmail, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreGetVerifiedEmailsFunc) appendCall(r0 UserEmailsStoreGetVerifiedEmailsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreGetVerifiedEmailsFuncCall
// objects describing the invocations of this function.
func (f *UserEmailsStoreGetVerifiedEmailsFunc) History() []UserEmailsStoreGetVerifiedEmailsFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreGetVerifiedEmailsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreGetVerifiedEmailsFuncCall is an object that describes an
// invocation of method GetVerifiedEmails on an instance of
// MockUserEmailsStore.
type UserEmailsStoreGetVerifiedEmailsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*UserEmail
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c UserEmailsStoreGetVerifiedEmailsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreGetVerifiedEmailsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserEmailsStoreHandleFunc describes the behavior when the Handle method
// of the parent MockUserEmailsStore instance is invoked.
type UserEmailsStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []UserEmailsStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserEmailsStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(UserEmailsStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockUserEmailsStore instance is invoked and the hook queue is
// empty.
func (f *UserEmailsStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockUserEmailsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserEmailsStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserEmailsStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserEmailsStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *UserEmailsStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreHandleFunc) appendCall(r0 UserEmailsStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *UserEmailsStoreHandleFunc) History() []UserEmailsStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreHandleFuncCall is an object that describes an invocation
// of method Handle on an instance of MockUserEmailsStore.
type UserEmailsStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserEmailsStoreListByUserFunc describes the behavior when the ListByUser
// method of the parent MockUserEmailsStore instance is invoked.
type UserEmailsStoreListByUserFunc struct {
	defaultHook func(context.Context, UserEmailsListOptions) ([]*UserEmail, error)
	hooks       []func(context.Context, UserEmailsListOptions) ([]*UserEmail, error)
	history     []UserEmailsStoreListByUserFuncCall
	mutex       sync.Mutex
}

// ListByUser delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserEmailsStore) ListByUser(v0 context.Context, v1 UserEmailsListOptions) ([]*UserEmail, error) {
	r0, r1 := m.ListByUserFunc.nextHook()(v0, v1)
	m.ListByUserFunc.appendCall(UserEmailsStoreListByUserFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListByUser method of
// the parent MockUserEmailsStore instance is invoked and the hook queue is
// empty.
func (f *UserEmailsStoreListByUserFunc) SetDefaultHook(hook func(context.Context, UserEmailsListOptions) ([]*UserEmail, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListByUser method of the parent MockUserEmailsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserEmailsStoreListByUserFunc) PushHook(hook func(context.Context, UserEmailsListOptions) ([]*UserEmail, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserEmailsStoreListByUserFunc) SetDefaultReturn(r0 []*UserEmail, r1 error) {
	f.SetDefaultHook(func(context.Context, UserEmailsListOptions) ([]*UserEmail, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserEmailsStoreListByUserFunc) PushReturn(r0 []*UserEmail, r1 error) {
	f.PushHook(func(context.Context, UserEmailsListOptions) ([]*UserEmail, error) {
		return r0, r1
	})
}

func (f *UserEmailsStoreListByUserFunc) nextHook() func(context.Context, UserEmailsListOptions) ([]*UserEmail, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreListByUserFunc) appendCall(r0 UserEmailsStoreListByUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreListByUserFuncCall objects
// describing the invocations of this function.
func (f *UserEmailsStoreListByUserFunc) History() []UserEmailsStoreListByUserFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreListByUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreListByUserFuncCall is an object that describes an
// invocation of method ListByUser on an instance of MockUserEmailsStore.
type UserEmailsStoreListByUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 UserEmailsListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*UserEmail
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreListByUserFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreListByUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserEmailsStoreRemoveFunc describes the behavior when the Remove method
// of the parent MockUserEmailsStore instance is invoked.
type UserEmailsStoreRemoveFunc struct {
	defaultHook func(context.Context, int32, string) error
	hooks       []func(context.Context, int32, string) error
	history     []UserEmailsStoreRemoveFuncCall
	mutex       sync.Mutex
}

// Remove delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserEmailsStore) Remove(v0 context.Context, v1 int32, v2 string) error {
	r0 := m.RemoveFunc.nextHook()(v0, v1, v2)
	m.RemoveFunc.appendCall(UserEmailsStoreRemoveFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Remove method of the
// parent MockUserEmailsStore instance is invoked and the hook queue is
// empty.
func (f *UserEmailsStoreRemoveFunc) SetDefaultHook(hook func(context.Context, int32, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Remove method of the parent MockUserEmailsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserEmailsStoreRemoveFunc) PushHook(hook func(context.Context, int32, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserEmailsStoreRemoveFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserEmailsStoreRemoveFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, string) error {
		return r0
	})
}

func (f *UserEmailsStoreRemoveFunc) nextHook() func(context.Context, int32, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreRemoveFunc) appendCall(r0 UserEmailsStoreRemoveFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreRemoveFuncCall objects
// describing the invocations of this function.
func (f *UserEmailsStoreRemoveFunc) History() []UserEmailsStoreRemoveFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreRemoveFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreRemoveFuncCall is an object that describes an invocation
// of method Remove on an instance of MockUserEmailsStore.
type UserEmailsStoreRemoveFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreRemoveFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreRemoveFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserEmailsStoreSetLastVerificationFunc describes the behavior when the
// SetLastVerification method of the parent MockUserEmailsStore instance is
// invoked.
type UserEmailsStoreSetLastVerificationFunc struct {
	defaultHook func(context.Context, int32, string, string) error
	hooks       []func(context.Context, int32, string, string) error
	history     []UserEmailsStoreSetLastVerificationFuncCall
	mutex       sync.Mutex
}

// SetLastVerification delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserEmailsStore) SetLastVerification(v0 context.Context, v1 int32, v2 string, v3 string) error {
	r0 := m.SetLastVerificationFunc.nextHook()(v0, v1, v2, v3)
	m.SetLastVerificationFunc.appendCall(UserEmailsStoreSetLastVerificationFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetLastVerification
// method of the parent MockUserEmailsStore instance is invoked and the hook
// queue is empty.
func (f *UserEmailsStoreSetLastVerificationFunc) SetDefaultHook(hook func(context.Context, int32, string, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetLastVerification method of the parent MockUserEmailsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserEmailsStoreSetLastVerificationFunc) PushHook(hook func(context.Context, int32, string, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserEmailsStoreSetLastVerificationFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, string, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserEmailsStoreSetLastVerificationFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, string, string) error {
		return r0
	})
}

func (f *UserEmailsStoreSetLastVerificationFunc) nextHook() func(context.Context, int32, string, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreSetLastVerificationFunc) appendCall(r0 UserEmailsStoreSetLastVerificationFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreSetLastVerificationFuncCall
// objects describing the invocations of this function.
func (f *UserEmailsStoreSetLastVerificationFunc) History() []UserEmailsStoreSetLastVerificationFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreSetLastVerificationFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreSetLastVerificationFuncCall is an object that describes an
// invocation of method SetLastVerification on an instance of
// MockUserEmailsStore.
type UserEmailsStoreSetLastVerificationFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreSetLastVerificationFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreSetLastVerificationFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserEmailsStoreSetPrimaryEmailFunc describes the behavior when the
// SetPrimaryEmail method of the parent MockUserEmailsStore instance is
// invoked.
type UserEmailsStoreSetPrimaryEmailFunc struct {
	defaultHook func(context.Context, int32, string) error
	hooks       []func(context.Context, int32, string) error
	history     []UserEmailsStoreSetPrimaryEmailFuncCall
	mutex       sync.Mutex
}

// SetPrimaryEmail delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserEmailsStore) SetPrimaryEmail(v0 context.Context, v1 int32, v2 string) error {
	r0 := m.SetPrimaryEmailFunc.nextHook()(v0, v1, v2)
	m.SetPrimaryEmailFunc.appendCall(UserEmailsStoreSetPrimaryEmailFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetPrimaryEmail
// method of the parent MockUserEmailsStore instance is invoked and the hook
// queue is empty.
func (f *UserEmailsStoreSetPrimaryEmailFunc) SetDefaultHook(hook func(context.Context, int32, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetPrimaryEmail method of the parent MockUserEmailsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserEmailsStoreSetPrimaryEmailFunc) PushHook(hook func(context.Context, int32, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserEmailsStoreSetPrimaryEmailFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserEmailsStoreSetPrimaryEmailFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, string) error {
		return r0
	})
}

func (f *UserEmailsStoreSetPrimaryEmailFunc) nextHook() func(context.Context, int32, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreSetPrimaryEmailFunc) appendCall(r0 UserEmailsStoreSetPrimaryEmailFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreSetPrimaryEmailFuncCall
// objects describing the invocations of this function.
func (f *UserEmailsStoreSetPrimaryEmailFunc) History() []UserEmailsStoreSetPrimaryEmailFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreSetPrimaryEmailFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreSetPrimaryEmailFuncCall is an object that describes an
// invocation of method SetPrimaryEmail on an instance of
// MockUserEmailsStore.
type UserEmailsStoreSetPrimaryEmailFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreSetPrimaryEmailFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreSetPrimaryEmailFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserEmailsStoreSetVerifiedFunc describes the behavior when the
// SetVerified method of the parent MockUserEmailsStore instance is invoked.
type UserEmailsStoreSetVerifiedFunc struct {
	defaultHook func(context.Context, int32, string, bool) error
	hooks       []func(context.Context, int32, string, bool) error
	history     []UserEmailsStoreSetVerifiedFuncCall
	mutex       sync.Mutex
}

// SetVerified delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserEmailsStore) SetVerified(v0 context.Context, v1 int32, v2 string, v3 bool) error {
	r0 := m.SetVerifiedFunc.nextHook()(v0, v1, v2, v3)
	m.SetVerifiedFunc.appendCall(UserEmailsStoreSetVerifiedFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetVerified method
// of the parent MockUserEmailsStore instance is invoked and the hook queue
// is empty.
func (f *UserEmailsStoreSetVerifiedFunc) SetDefaultHook(hook func(context.Context, int32, string, bool) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetVerified method of the parent MockUserEmailsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserEmailsStoreSetVerifiedFunc) PushHook(hook func(context.Context, int32, string, bool) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserEmailsStoreSetVerifiedFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, string, bool) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserEmailsStoreSetVerifiedFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, string, bool) error {
		return r0
	})
}

func (f *UserEmailsStoreSetVerifiedFunc) nextHook() func(context.Context, int32, string, bool) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreSetVerifiedFunc) appendCall(r0 UserEmailsStoreSetVerifiedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreSetVerifiedFuncCall objects
// describing the invocations of this function.
func (f *UserEmailsStoreSetVerifiedFunc) History() []UserEmailsStoreSetVerifiedFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreSetVerifiedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreSetVerifiedFuncCall is an object that describes an
// invocation of method SetVerified on an instance of MockUserEmailsStore.
type UserEmailsStoreSetVerifiedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreSetVerifiedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreSetVerifiedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserEmailsStoreTransactFunc describes the behavior when the Transact
// method of the parent MockUserEmailsStore instance is invoked.
type UserEmailsStoreTransactFunc struct {
	defaultHook func(context.Context) (UserEmailsStore, error)
	hooks       []func(context.Context) (UserEmailsStore, error)
	history     []UserEmailsStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserEmailsStore) Transact(v0 context.Context) (UserEmailsStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(UserEmailsStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockUserEmailsStore instance is invoked and the hook queue is
// empty.
func (f *UserEmailsStoreTransactFunc) SetDefaultHook(hook func(context.Context) (UserEmailsStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockUserEmailsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserEmailsStoreTransactFunc) PushHook(hook func(context.Context) (UserEmailsStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserEmailsStoreTransactFunc) SetDefaultReturn(r0 UserEmailsStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (UserEmailsStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserEmailsStoreTransactFunc) PushReturn(r0 UserEmailsStore, r1 error) {
	f.PushHook(func(context.Context) (UserEmailsStore, error) {
		return r0, r1
	})
}

func (f *UserEmailsStoreTransactFunc) nextHook() func(context.Context) (UserEmailsStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreTransactFunc) appendCall(r0 UserEmailsStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *UserEmailsStoreTransactFunc) History() []UserEmailsStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreTransactFuncCall is an object that describes an invocation
// of method Transact on an instance of MockUserEmailsStore.
type UserEmailsStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 UserEmailsStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserEmailsStoreVerifyFunc describes the behavior when the Verify method
// of the parent MockUserEmailsStore instance is invoked.
type UserEmailsStoreVerifyFunc struct {
	defaultHook func(context.Context, int32, string, string) (bool, error)
	hooks       []func(context.Context, int32, string, string) (bool, error)
	history     []UserEmailsStoreVerifyFuncCall
	mutex       sync.Mutex
}

// Verify delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserEmailsStore) Verify(v0 context.Context, v1 int32, v2 string, v3 string) (bool, error) {
	r0, r1 := m.VerifyFunc.nextHook()(v0, v1, v2, v3)
	m.VerifyFunc.appendCall(UserEmailsStoreVerifyFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Verify method of the
// parent MockUserEmailsStore instance is invoked and the hook queue is
// empty.
func (f *UserEmailsStoreVerifyFunc) SetDefaultHook(hook func(context.Context, int32, string, string) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Verify method of the parent MockUserEmailsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserEmailsStoreVerifyFunc) PushHook(hook func(context.Context, int32, string, string) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserEmailsStoreVerifyFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, string, string) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserEmailsStoreVerifyFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int32, string, string) (bool, error) {
		return r0, r1
	})
}

func (f *UserEmailsStoreVerifyFunc) nextHook() func(context.Context, int32, string, string) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreVerifyFunc) appendCall(r0 UserEmailsStoreVerifyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreVerifyFuncCall objects
// describing the invocations of this function.
func (f *UserEmailsStoreVerifyFunc) History() []UserEmailsStoreVerifyFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreVerifyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreVerifyFuncCall is an object that describes an invocation
// of method Verify on an instance of MockUserEmailsStore.
type UserEmailsStoreVerifyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreVerifyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreVerifyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserEmailsStoreWithFunc describes the behavior when the With method of
// the parent MockUserEmailsStore instance is invoked.
type UserEmailsStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) UserEmailsStore
	hooks       []func(basestore.ShareableStore) UserEmailsStore
	history     []UserEmailsStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserEmailsStore) With(v0 basestore.ShareableStore) UserEmailsStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(UserEmailsStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockUserEmailsStore instance is invoked and the hook queue is
// empty.
func (f *UserEmailsStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) UserEmailsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockUserEmailsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserEmailsStoreWithFunc) PushHook(hook func(basestore.ShareableStore) UserEmailsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserEmailsStoreWithFunc) SetDefaultReturn(r0 UserEmailsStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) UserEmailsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserEmailsStoreWithFunc) PushReturn(r0 UserEmailsStore) {
	f.PushHook(func(basestore.ShareableStore) UserEmailsStore {
		return r0
	})
}

func (f *UserEmailsStoreWithFunc) nextHook() func(basestore.ShareableStore) UserEmailsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreWithFunc) appendCall(r0 UserEmailsStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreWithFuncCall objects
// describing the invocations of this function.
func (f *UserEmailsStoreWithFunc) History() []UserEmailsStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockUserEmailsStore.
type UserEmailsStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 UserEmailsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockUserExternalAccountsStore is a mock implementation of the
// UserExternalAccountsStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockUserExternalAccountsStore struct {
	// AssociateUserAndSaveFunc is an instance of a mock function object
	// controlling the behavior of the method AssociateUserAndSave.
	AssociateUserAndSaveFunc *UserExternalAccountsStoreAssociateUserAndSaveFunc
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *UserExternalAccountsStoreCountFunc
	// CreateUserAndSaveFunc is an instance of a mock function object
	// controlling the behavior of the method CreateUserAndSave.
	CreateUserAndSaveFunc *UserExternalAccountsStoreCreateUserAndSaveFunc
	// DeleteFunc is an instance of a mock function object controlling the
	// behavior of the method Delete.
	DeleteFunc *UserExternalAccountsStoreDeleteFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *UserExternalAccountsStoreDoneFunc
	// ExecResultFunc is an instance of a mock function object controlling
	// the behavior of the method ExecResult.
	ExecResultFunc *UserExternalAccountsStoreExecResultFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *UserExternalAccountsStoreGetFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *UserExternalAccountsStoreHandleFunc
	// InsertFunc is an instance of a mock function object controlling the
	// behavior of the method Insert.
	InsertFunc *UserExternalAccountsStoreInsertFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *UserExternalAccountsStoreListFunc
	// ListBySQLFunc is an instance of a mock function object controlling
	// the behavior of the method ListBySQL.
	ListBySQLFunc *UserExternalAccountsStoreListBySQLFunc
	// LookupUserAndSaveFunc is an instance of a mock function object
	// controlling the behavior of the method LookupUserAndSave.
	LookupUserAndSaveFunc *UserExternalAccountsStoreLookupUserAndSaveFunc
	// QueryRowFunc is an instance of a mock function object controlling the
	// behavior of the method QueryRow.
	QueryRowFunc *UserExternalAccountsStoreQueryRowFunc
	// TouchExpiredFunc is an instance of a mock function object controlling
	// the behavior of the method TouchExpired.
	TouchExpiredFunc *UserExternalAccountsStoreTouchExpiredFunc
	// TouchLastValidFunc is an instance of a mock function object
	// controlling the behavior of the method TouchLastValid.
	TouchLastValidFunc *UserExternalAccountsStoreTouchLastValidFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *UserExternalAccountsStoreTransactFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *UserExternalAccountsStoreWithFunc
	// WithEncryptionKeyFunc is an instance of a mock function object
	// controlling the behavior of the method WithEncryptionKey.
	WithEncryptionKeyFunc *UserExternalAccountsStoreWithEncryptionKeyFunc
}

// NewMockUserExternalAccountsStore creates a new mock of the
// UserExternalAccountsStore interface. All methods return zero values for
// all results, unless overwritten.
func NewMockUserExternalAccountsStore() *MockUserExternalAccountsStore {
	return &MockUserExternalAccountsStore{
		AssociateUserAndSaveFunc: &UserExternalAccountsStoreAssociateUserAndSaveFunc{
			defaultHook: func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) (r0 error) {
				return
			},
		},
		CountFunc: &UserExternalAccountsStoreCountFunc{
			defaultHook: func(context.Context, ExternalAccountsListOptions) (r0 int, r1 error) {
				return
			},
		},
		CreateUserAndSaveFunc: &UserExternalAccountsStoreCreateUserAndSaveFunc{
			defaultHook: func(context.Context, NewUser, extsvc.AccountSpec, extsvc.AccountData) (r0 int32, r1 error) {
				return
			},
		},
		DeleteFunc: &UserExternalAccountsStoreDeleteFunc{
			defaultHook: func(context.Context, int32) (r0 error) {
				return
			},
		},
		DoneFunc: &UserExternalAccountsStoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		ExecResultFunc: &UserExternalAccountsStoreExecResultFunc{
			defaultHook: func(context.Context, *sqlf.Query) (r0 sql.Result, r1 error) {
				return
			},
		},
		GetFunc: &UserExternalAccountsStoreGetFunc{
			defaultHook: func(context.Context, int32) (r0 *extsvc.Account, r1 error) {
				return
			},
		},
		HandleFunc: &UserExternalAccountsStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		InsertFunc: &UserExternalAccountsStoreInsertFunc{
			defaultHook: func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) (r0 error) {
				return
			},
		},
		ListFunc: &UserExternalAccountsStoreListFunc{
			defaultHook: func(context.Context, ExternalAccountsListOptions) (r0 []*extsvc.Account, r1 error) {
				return
			},
		},
		ListBySQLFunc: &UserExternalAccountsStoreListBySQLFunc{
			defaultHook: func(context.Context, *sqlf.Query) (r0 []*extsvc.Account, r1 error) {
				return
			},
		},
		LookupUserAndSaveFunc: &UserExternalAccountsStoreLookupUserAndSaveFunc{
			defaultHook: func(context.Context, extsvc.AccountSpec, extsvc.AccountData) (r0 int32, r1 error) {
				return
			},
		},
		QueryRowFunc: &UserExternalAccountsStoreQueryRowFunc{
			defaultHook: func(context.Context, *sqlf.Query) (r0 *sql.Row) {
				return
			},
		},
		TouchExpiredFunc: &UserExternalAccountsStoreTouchExpiredFunc{
			defaultHook: func(context.Context, int32) (r0 error) {
				return
			},
		},
		TouchLastValidFunc: &UserExternalAccountsStoreTouchLastValidFunc{
			defaultHook: func(context.Context, int32) (r0 error) {
				return
			},
		},
		TransactFunc: &UserExternalAccountsStoreTransactFunc{
			defaultHook: func(context.Context) (r0 UserExternalAccountsStore, r1 error) {
				return
			},
		},
		WithFunc: &UserExternalAccountsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 UserExternalAccountsStore) {
				return
			},
		},
		WithEncryptionKeyFunc: &UserExternalAccountsStoreWithEncryptionKeyFunc{
			defaultHook: func(encryption.Key) (r0 UserExternalAccountsStore) {
				return
			},
		},
	}
}

// NewStrictMockUserExternalAccountsStore creates a new mock of the
// UserExternalAccountsStore interface. All methods panic on invocation,
// unless overwritten.
func NewStrictMockUserExternalAccountsStore() *MockUserExternalAccountsStore {
	return &MockUserExternalAccountsStore{
		AssociateUserAndSaveFunc: &UserExternalAccountsStoreAssociateUserAndSaveFunc{
			defaultHook: func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error {
				panic("unexpected invocation of MockUserExternalAccountsStore.AssociateUserAndSave")
			},
		},
		CountFunc: &UserExternalAccountsStoreCountFunc{
			defaultHook: func(context.Context, ExternalAccountsListOptions) (int, error) {
				panic("unexpected invocation of MockUserExternalAccountsStore.Count")
			},
		},
		CreateUserAndSaveFunc: &UserExternalAccountsStoreCreateUserAndSaveFunc{
			defaultHook: func(context.Context, NewUser, extsvc.AccountSpec, extsvc.AccountData) (int32, error) {
				panic("unexpected invocation of MockUserExternalAccountsStore.CreateUserAndSave")
			},
		},
		DeleteFunc: &UserExternalAccountsStoreDeleteFunc{
			defaultHook: func(context.Context, int32) error {
				panic("unexpected invocation of MockUserExternalAccountsStore.Delete")
			},
		},
		DoneFunc: &UserExternalAccountsStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockUserExternalAccountsStore.Done")
			},
		},
		ExecResultFunc: &UserExternalAccountsStoreExecResultFunc{
			defaultHook: func(context.Context, *sqlf.Query) (sql.Result, error) {
				panic("unexpected invocation of MockUserExternalAccountsStore.ExecResult")
			},
		},
		GetFunc: &UserExternalAccountsStoreGetFunc{
			defaultHook: func(context.Context, int32) (*extsvc.Account, error) {
				panic("unexpected invocation of MockUserExternalAccountsStore.Get")
			},
		},
		HandleFunc: &UserExternalAccountsStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockUserExternalAccountsStore.Handle")
			},
		},
		InsertFunc: &UserExternalAccountsStoreInsertFunc{
			defaultHook: func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error {
				panic("unexpected invocation of MockUserExternalAccountsStore.Insert")
			},
		},
		ListFunc: &UserExternalAccountsStoreListFunc{
			defaultHook: func(context.Context, ExternalAccountsListOptions) ([]*extsvc.Account, error) {
				panic("unexpected invocation of MockUserExternalAccountsStore.List")
			},
		},
		ListBySQLFunc: &UserExternalAccountsStoreListBySQLFunc{
			defaultHook: func(context.Context, *sqlf.Query) ([]*extsvc.Account, error) {
				panic("unexpected invocation of MockUserExternalAccountsStore.ListBySQL")
			},
		},
		LookupUserAndSaveFunc: &UserExternalAccountsStoreLookupUserAndSaveFunc{
			defaultHook: func(context.Context, extsvc.AccountSpec, extsvc.AccountData) (int32, error) {
				panic("unexpected invocation of MockUserExternalAccountsStore.LookupUserAndSave")
			},
		},
		QueryRowFunc: &UserExternalAccountsStoreQueryRowFunc{
			defaultHook: func(context.Context, *sqlf.Query) *sql.Row {
				panic("unexpected invocation of MockUserExternalAccountsStore.QueryRow")
			},
		},
		TouchExpiredFunc: &UserExternalAccountsStoreTouchExpiredFunc{
			defaultHook: func(context.Context, int32) error {
				panic("unexpected invocation of MockUserExternalAccountsStore.TouchExpired")
			},
		},
		TouchLastValidFunc: &UserExternalAccountsStoreTouchLastValidFunc{
			defaultHook: func(context.Context, int32) error {
				panic("unexpected invocation of MockUserExternalAccountsStore.TouchLastValid")
			},
		},
		TransactFunc: &UserExternalAccountsStoreTransactFunc{
			defaultHook: func(context.Context) (UserExternalAccountsStore, error) {
				panic("unexpected invocation of MockUserExternalAccountsStore.Transact")
			},
		},
		WithFunc: &UserExternalAccountsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) UserExternalAccountsStore {
				panic("unexpected invocation of MockUserExternalAccountsStore.With")
			},
		},
		WithEncryptionKeyFunc: &UserExternalAccountsStoreWithEncryptionKeyFunc{
			defaultHook: func(encryption.Key) UserExternalAccountsStore {
				panic("unexpected invocation of MockUserExternalAccountsStore.WithEncryptionKey")
			},
		},
	}
}

// NewMockUserExternalAccountsStoreFrom creates a new mock of the
// MockUserExternalAccountsStore interface. All methods delegate to the
// given implementation, unless overwritten.
func NewMockUserExternalAccountsStoreFrom(i UserExternalAccountsStore) *MockUserExternalAccountsStore {
	return &MockUserExternalAccountsStore{
		AssociateUserAndSaveFunc: &UserExternalAccountsStoreAssociateUserAndSaveFunc{
			defaultHook: i.AssociateUserAndSave,
		},
		CountFunc: &UserExternalAccountsStoreCountFunc{
			defaultHook: i.Count,
		},
		CreateUserAndSaveFunc: &UserExternalAccountsStoreCreateUserAndSaveFunc{
			defaultHook: i.CreateUserAndSave,
		},
		DeleteFunc: &UserExternalAccountsStoreDeleteFunc{
			defaultHook: i.Delete,
		},
		DoneFunc: &UserExternalAccountsStoreDoneFunc{
			defaultHook: i.Done,
		},
		ExecResultFunc: &UserExternalAccountsStoreExecResultFunc{
			defaultHook: i.ExecResult,
		},
		GetFunc: &UserExternalAccountsStoreGetFunc{
			defaultHook: i.Get,
		},
		HandleFunc: &UserExternalAccountsStoreHandleFunc{
			defaultHook: i.Handle,
		},
		InsertFunc: &UserExternalAccountsStoreInsertFunc{
			defaultHook: i.Insert,
		},
		ListFunc: &UserExternalAccountsStoreListFunc{
			defaultHook: i.List,
		},
		ListBySQLFunc: &UserExternalAccountsStoreListBySQLFunc{
			defaultHook: i.ListBySQL,
		},
		LookupUserAndSaveFunc: &UserExternalAccountsStoreLookupUserAndSaveFunc{
			defaultHook: i.LookupUserAndSave,
		},
		QueryRowFunc: &UserExternalAccountsStoreQueryRowFunc{
			defaultHook: i.QueryRow,
		},
		TouchExpiredFunc: &UserExternalAccountsStoreTouchExpiredFunc{
			defaultHook: i.TouchExpired,
		},
		TouchLastValidFunc: &UserExternalAccountsStoreTouchLastValidFunc{
			defaultHook: i.TouchLastValid,
		},
		TransactFunc: &UserExternalAccountsStoreTransactFunc{
			defaultHook: i.Transact,
		},
		WithFunc: &UserExternalAccountsStoreWithFunc{
			defaultHook: i.With,
		},
		WithEncryptionKeyFunc: &UserExternalAccountsStoreWithEncryptionKeyFunc{
			defaultHook: i.WithEncryptionKey,
		},
	}
}

// UserExternalAccountsStoreAssociateUserAndSaveFunc describes the behavior
// when the AssociateUserAndSave method of the parent
// MockUserExternalAccountsStore instance is invoked.
type UserExternalAccountsStoreAssociateUserAndSaveFunc struct {
	defaultHook func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error
	hooks       []func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error
	history     []UserExternalAccountsStoreAssociateUserAndSaveFuncCall
	mutex       sync.Mutex
}

// AssociateUserAndSave delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) AssociateUserAndSave(v0 context.Context, v1 int32, v2 extsvc.AccountSpec, v3 extsvc.AccountData) error {
	r0 := m.AssociateUserAndSaveFunc.nextHook()(v0, v1, v2, v3)
	m.AssociateUserAndSaveFunc.appendCall(UserExternalAccountsStoreAssociateUserAndSaveFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the AssociateUserAndSave
// method of the parent MockUserExternalAccountsStore instance is invoked
// and the hook queue is empty.
func (f *UserExternalAccountsStoreAssociateUserAndSaveFunc) SetDefaultHook(hook func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AssociateUserAndSave method of the parent MockUserExternalAccountsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *UserExternalAccountsStoreAssociateUserAndSaveFunc) PushHook(hook func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserExternalAccountsStoreAssociateUserAndSaveFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserExternalAccountsStoreAssociateUserAndSaveFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error {
		return r0
	})
}

func (f *UserExternalAccountsStoreAssociateUserAndSaveFunc) nextHook() func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreAssociateUserAndSaveFunc) appendCall(r0 UserExternalAccountsStoreAssociateUserAndSaveFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UserExternalAccountsStoreAssociateUserAndSaveFuncCall objects describing
// the invocations of this function.
func (f *UserExternalAccountsStoreAssociateUserAndSaveFunc) History() []UserExternalAccountsStoreAssociateUserAndSaveFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreAssociateUserAndSaveFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreAssociateUserAndSaveFuncCall is an object that
// describes an invocation of method AssociateUserAndSave on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreAssociateUserAndSaveFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 extsvc.AccountSpec
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 extsvc.AccountData
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreAssociateUserAndSaveFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreAssociateUserAndSaveFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserExternalAccountsStoreCountFunc describes the behavior when the Count
// method of the parent MockUserExternalAccountsStore instance is invoked.
type UserExternalAccountsStoreCountFunc struct {
	defaultHook func(context.Context, ExternalAccountsListOptions) (int, error)
	hooks       []func(context.Context, ExternalAccountsListOptions) (int, error)
	history     []UserExternalAccountsStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) Count(v0 context.Context, v1 ExternalAccountsListOptions) (int, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(UserExternalAccountsStoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockUserExternalAccountsStore instance is invoked and the hook
// queue is empty.
func (f *UserExternalAccountsStoreCountFunc) SetDefaultHook(hook func(context.Context, ExternalAccountsListOptions) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockUserExternalAccountsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserExternalAccountsStoreCountFunc) PushHook(hook func(context.Context, ExternalAccountsListOptions) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserExternalAccountsStoreCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, ExternalAccountsListOptions) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserExternalAccountsStoreCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, ExternalAccountsListOptions) (int, error) {
		return r0, r1
	})
}

func (f *UserExternalAccountsStoreCountFunc) nextHook() func(context.Context, ExternalAccountsListOptions) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreCountFunc) appendCall(r0 UserExternalAccountsStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserExternalAccountsStoreCountFuncCall
// objects describing the invocations of this function.
func (f *UserExternalAccountsStoreCountFunc) History() []UserExternalAccountsStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreCountFuncCall is an object that describes an
// invocation of method Count on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ExternalAccountsListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserExternalAccountsStoreCreateUserAndSaveFunc describes the behavior
// when the CreateUserAndSave method of the parent
// MockUserExternalAccountsStore instance is invoked.
type UserExternalAccountsStoreCreateUserAndSaveFunc struct {
	defaultHook func(context.Context, NewUser, extsvc.AccountSpec, extsvc.AccountData) (int32, error)
	hooks       []func(context.Context, NewUser, extsvc.AccountSpec, extsvc.AccountData) (int32, error)
	history     []UserExternalAccountsStoreCreateUserAndSaveFuncCall
	mutex       sync.Mutex
}

// CreateUserAndSave delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) CreateUserAndSave(v0 context.Context, v1 NewUser, v2 extsvc.AccountSpec, v3 extsvc.AccountData) (int32, error) {
	r0, r1 := m.CreateUserAndSaveFunc.nextHook()(v0, v1, v2, v3)
	m.CreateUserAndSaveFunc.appendCall(UserExternalAccountsStoreCreateUserAndSaveFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateUserAndSave
// method of the parent MockUserExternalAccountsStore instance is invoked
// and the hook queue is empty.
func (f *UserExternalAccountsStoreCreateUserAndSaveFunc) SetDefaultHook(hook func(context.Context, NewUser, extsvc.AccountSpec, extsvc.AccountData) (int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateUserAndSave method of the parent MockUserExternalAccountsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *UserExternalAccountsStoreCreateUserAndSaveFunc) PushHook(hook func(context.Context, NewUser, extsvc.AccountSpec, extsvc.AccountData) (int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserExternalAccountsStoreCreateUserAndSaveFunc) SetDefaultReturn(r0 int32, r1 error) {
	f.SetDefaultHook(func(context.Context, NewUser, extsvc.AccountSpec, extsvc.AccountData) (int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserExternalAccountsStoreCreateUserAndSaveFunc) PushReturn(r0 int32, r1 error) {
	f.PushHook(func(context.Context, NewUser, extsvc.AccountSpec, extsvc.AccountData) (int32, error) {
		return r0, r1
	})
}

func (f *UserExternalAccountsStoreCreateUserAndSaveFunc) nextHook() func(context.Context, NewUser, extsvc.AccountSpec, extsvc.AccountData) (int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreCreateUserAndSaveFunc) appendCall(r0 UserExternalAccountsStoreCreateUserAndSaveFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UserExternalAccountsStoreCreateUserAndSaveFuncCall objects describing the
// invocations of this function.
func (f *UserExternalAccountsStoreCreateUserAndSaveFunc) History() []UserExternalAccountsStoreCreateUserAndSaveFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreCreateUserAndSaveFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreCreateUserAndSaveFuncCall is an object that
// describes an invocation of method CreateUserAndSave on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreCreateUserAndSaveFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 NewUser
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 extsvc.AccountSpec
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 extsvc.AccountData
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreCreateUserAndSaveFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreCreateUserAndSaveFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserExternalAccountsStoreDeleteFunc describes the behavior when the
// Delete method of the parent MockUserExternalAccountsStore instance is
// invoked.
type UserExternalAccountsStoreDeleteFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []UserExternalAccountsStoreDeleteFuncCall
	mutex       sync.Mutex
}

// Delete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) Delete(v0 context.Context, v1 int32) error {
	r0 := m.DeleteFunc.nextHook()(v0, v1)
	m.DeleteFunc.appendCall(UserExternalAccountsStoreDeleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Delete method of the
// parent MockUserExternalAccountsStore instance is invoked and the hook
// queue is empty.
func (f *UserExternalAccountsStoreDeleteFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Delete method of the parent MockUserExternalAccountsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserExternalAccountsStoreDeleteFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserExternalAccountsStoreDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserExternalAccountsStoreDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *UserExternalAccountsStoreDeleteFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreDeleteFunc) appendCall(r0 UserExternalAccountsStoreDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserExternalAccountsStoreDeleteFuncCall
// objects describing the invocations of this function.
func (f *UserExternalAccountsStoreDeleteFunc) History() []UserExternalAccountsStoreDeleteFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreDeleteFuncCall is an object that describes an
// invocation of method Delete on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserExternalAccountsStoreDoneFunc describes the behavior when the Done
// method of the parent MockUserExternalAccountsStore instance is invoked.
type UserExternalAccountsStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []UserExternalAccountsStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(UserExternalAccountsStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockUserExternalAccountsStore instance is invoked and the hook
// queue is empty.
func (f *UserExternalAccountsStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockUserExternalAccountsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserExternalAccountsStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserExternalAccountsStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserExternalAccountsStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *UserExternalAccountsStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreDoneFunc) appendCall(r0 UserExternalAccountsStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserExternalAccountsStoreDoneFuncCall
// objects describing the invocations of this function.
func (f *UserExternalAccountsStoreDoneFunc) History() []UserExternalAccountsStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreDoneFuncCall is an object that describes an
// invocation of method Done on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserExternalAccountsStoreExecResultFunc describes the behavior when the
// ExecResult method of the parent MockUserExternalAccountsStore instance is
// invoked.
type UserExternalAccountsStoreExecResultFunc struct {
	defaultHook func(context.Context, *sqlf.Query) (sql.Result, error)
	hooks       []func(context.Context, *sqlf.Query) (sql.Result, error)
	history     []UserExternalAccountsStoreExecResultFuncCall
	mutex       sync.Mutex
}

// ExecResult delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) ExecResult(v0 context.Context, v1 *sqlf.Query) (sql.Result, error) {
	r0, r1 := m.ExecResultFunc.nextHook()(v0, v1)
	m.ExecResultFunc.appendCall(UserExternalAccountsStoreExecResultFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ExecResult method of
// the parent MockUserExternalAccountsStore instance is invoked and the hook
// queue is empty.
func (f *UserExternalAccountsStoreExecResultFunc) SetDefaultHook(hook func(context.Context, *sqlf.Query) (sql.Result, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExecResult method of the parent MockUserExternalAccountsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserExternalAccountsStoreExecResultFunc) PushHook(hook func(context.Context, *sqlf.Query) (sql.Result, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserExternalAccountsStoreExecResultFunc) SetDefaultReturn(r0 sql.Result, r1 error) {
	f.SetDefaultHook(func(context.Context, *sqlf.Query) (sql.Result, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserExternalAccountsStoreExecResultFunc) PushReturn(r0 sql.Result, r1 error) {
	f.PushHook(func(context.Context, *sqlf.Query) (sql.Result, error) {
		return r0, r1
	})
}

func (f *UserExternalAccountsStoreExecResultFunc) nextHook() func(context.Context, *sqlf.Query) (sql.Result, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreExecResultFunc) appendCall(r0 UserExternalAccountsStoreExecResultFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserExternalAccountsStoreExecResultFuncCall
// objects describing the invocations of this function.
func (f *UserExternalAccountsStoreExecResultFunc) History() []UserExternalAccountsStoreExecResultFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreExecResultFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreExecResultFuncCall is an object that describes
// an invocation of method ExecResult on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreExecResultFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sqlf.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 sql.Result
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreExecResultFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreExecResultFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserExternalAccountsStoreGetFunc describes the behavior when the Get
// method of the parent MockUserExternalAccountsStore instance is invoked.
type UserExternalAccountsStoreGetFunc struct {
	defaultHook func(context.Context, int32) (*extsvc.Account, error)
	hooks       []func(context.Context, int32) (*extsvc.Account, error)
	history     []UserExternalAccountsStoreGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) Get(v0 context.Context, v1 int32) (*extsvc.Account, error) {
	r0, r1 := m.GetFunc.nextHook()(v0, v1)
	m.GetFunc.appendCall(UserExternalAccountsStoreGetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockUserExternalAccountsStore instance is invoked and the hook
// queue is empty.
func (f *UserExternalAccountsStoreGetFunc) SetDefaultHook(hook func(context.Context, int32) (*extsvc.Account, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockUserExternalAccountsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserExternalAccountsStoreGetFunc) PushHook(hook func(context.Context, int32) (*extsvc.Account, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserExternalAccountsStoreGetFunc) SetDefaultReturn(r0 *extsvc.Account, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (*extsvc.Account, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserExternalAccountsStoreGetFunc) PushReturn(r0 *extsvc.Account, r1 error) {
	f.PushHook(func(context.Context, int32) (*extsvc.Account, error) {
		return r0, r1
	})
}

func (f *UserExternalAccountsStoreGetFunc) nextHook() func(context.Context, int32) (*extsvc.Account, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreGetFunc) appendCall(r0 UserExternalAccountsStoreGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserExternalAccountsStoreGetFuncCall
// objects describing the invocations of this function.
func (f *UserExternalAccountsStoreGetFunc) History() []UserExternalAccountsStoreGetFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreGetFuncCall is an object that describes an
// invocation of method Get on an instance of MockUserExternalAccountsStore.
type UserExternalAccountsStoreGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *extsvc.Account
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserExternalAccountsStoreHandleFunc describes the behavior when the
// Handle method of the parent MockUserExternalAccountsStore instance is
// invoked.
type UserExternalAccountsStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []UserExternalAccountsStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(UserExternalAccountsStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockUserExternalAccountsStore instance is invoked and the hook
// queue is empty.
func (f *UserExternalAccountsStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockUserExternalAccountsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserExternalAccountsStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserExternalAccountsStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserExternalAccountsStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *UserExternalAccountsStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreHandleFunc) appendCall(r0 UserExternalAccountsStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserExternalAccountsStoreHandleFuncCall
// objects describing the invocations of this function.
func (f *UserExternalAccountsStoreHandleFunc) History() []UserExternalAccountsStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserExternalAccountsStoreInsertFunc describes the behavior when the
// Insert method of the parent MockUserExternalAccountsStore instance is
// invoked.
type UserExternalAccountsStoreInsertFunc struct {
	defaultHook func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error
	hooks       []func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error
	history     []UserExternalAccountsStoreInsertFuncCall
	mutex       sync.Mutex
}

// Insert delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) Insert(v0 context.Context, v1 int32, v2 extsvc.AccountSpec, v3 extsvc.AccountData) error {
	r0 := m.InsertFunc.nextHook()(v0, v1, v2, v3)
	m.InsertFunc.appendCall(UserExternalAccountsStoreInsertFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Insert method of the
// parent MockUserExternalAccountsStore instance is invoked and the hook
// queue is empty.
func (f *UserExternalAccountsStoreInsertFunc) SetDefaultHook(hook func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Insert method of the parent MockUserExternalAccountsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserExternalAccountsStoreInsertFunc) PushHook(hook func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserExternalAccountsStoreInsertFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserExternalAccountsStoreInsertFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error {
		return r0
	})
}

func (f *UserExternalAccountsStoreInsertFunc) nextHook() func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreInsertFunc) appendCall(r0 UserExternalAccountsStoreInsertFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserExternalAccountsStoreInsertFuncCall
// objects describing the invocations of this function.
func (f *UserExternalAccountsStoreInsertFunc) History() []UserExternalAccountsStoreInsertFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreInsertFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreInsertFuncCall is an object that describes an
// invocation of method Insert on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreInsertFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 extsvc.AccountSpec
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 extsvc.AccountData
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreInsertFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreInsertFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserExternalAccountsStoreListFunc describes the behavior when the List
// method of the parent MockUserExternalAccountsStore instance is invoked.
type UserExternalAccountsStoreListFunc struct {
	defaultHook func(context.Context, ExternalAccountsListOptions) ([]*extsvc.Account, error)
	hooks       []func(context.Context, ExternalAccountsListOptions) ([]*extsvc.Account, error)
	history     []UserExternalAccountsStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) List(v0 context.Context, v1 ExternalAccountsListOptions) ([]*extsvc.Account, error) {
	r0, r1 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(UserExternalAccountsStoreListFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockUserExternalAccountsStore instance is invoked and the hook
// queue is empty.
func (f *UserExternalAccountsStoreListFunc) SetDefaultHook(hook func(context.Context, ExternalAccountsListOptions) ([]*extsvc.Account, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockUserExternalAccountsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserExternalAccountsStoreListFunc) PushHook(hook func(context.Context, ExternalAccountsListOptions) ([]*extsvc.Account, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserExternalAccountsStoreListFunc) SetDefaultReturn(r0 []*extsvc.Account, r1 error) {
	f.SetDefaultHook(func(context.Context, ExternalAccountsListOptions) ([]*extsvc.Account, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserExternalAccountsStoreListFunc) PushReturn(r0 []*extsvc.Account, r1 error) {
	f.PushHook(func(context.Context, ExternalAccountsListOptions) ([]*extsvc.Account, error) {
		return r0, r1
	})
}

func (f *UserExternalAccountsStoreListFunc) nextHook() func(context.Context, ExternalAccountsListOptions) ([]*extsvc.Account, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreListFunc) appendCall(r0 UserExternalAccountsStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserExternalAccountsStoreListFuncCall
// objects describing the invocations of this function.
func (f *UserExternalAccountsStoreListFunc) History() []UserExternalAccountsStoreListFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreListFuncCall is an object that describes an
// invocation of method List on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ExternalAccountsListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*extsvc.Account
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserExternalAccountsStoreListBySQLFunc describes the behavior when the
// ListBySQL method of the parent MockUserExternalAccountsStore instance is
// invoked.
type UserExternalAccountsStoreListBySQLFunc struct {
	defaultHook func(context.Context, *sqlf.Query) ([]*extsvc.Account, error)
	hooks       []func(context.Context, *sqlf.Query) ([]*extsvc.Account, error)
	history     []UserExternalAccountsStoreListBySQLFuncCall
	mutex       sync.Mutex
}

// ListBySQL delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) ListBySQL(v0 context.Context, v1 *sqlf.Query) ([]*extsvc.Account, error) {
	r0, r1 := m.ListBySQLFunc.nextHook()(v0, v1)
	m.ListBySQLFunc.appendCall(UserExternalAccountsStoreListBySQLFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListBySQL method of
// the parent MockUserExternalAccountsStore instance is invoked and the hook
// queue is empty.
func (f *UserExternalAccountsStoreListBySQLFunc) SetDefaultHook(hook func(context.Context, *sqlf.Query) ([]*extsvc.Account, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListBySQL method of the parent MockUserExternalAccountsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserExternalAccountsStoreListBySQLFunc) PushHook(hook func(context.Context, *sqlf.Query) ([]*extsvc.Account, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserExternalAccountsStoreListBySQLFunc) SetDefaultReturn(r0 []*extsvc.Account, r1 error) {
	f.SetDefaultHook(func(context.Context, *sqlf.Query) ([]*extsvc.Account, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserExternalAccountsStoreListBySQLFunc) PushReturn(r0 []*extsvc.Account, r1 error) {
	f.PushHook(func(context.Context, *sqlf.Query) ([]*extsvc.Account, error) {
		return r0, r1
	})
}

func (f *UserExternalAccountsStoreListBySQLFunc) nextHook() func(context.Context, *sqlf.Query) ([]*extsvc.Account, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreListBySQLFunc) appendCall(r0 UserExternalAccountsStoreListBySQLFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserExternalAccountsStoreListBySQLFuncCall
// objects describing the invocations of this function.
func (f *UserExternalAccountsStoreListBySQLFunc) History() []UserExternalAccountsStoreListBySQLFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreListBySQLFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreListBySQLFuncCall is an object that describes an
// invocation of method ListBySQL on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreListBySQLFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sqlf.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*extsvc.Account
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreListBySQLFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreListBySQLFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserExternalAccountsStoreLookupUserAndSaveFunc describes the behavior
// when the LookupUserAndSave method of the parent
// MockUserExternalAccountsStore instance is invoked.
type UserExternalAccountsStoreLookupUserAndSaveFunc struct {
	defaultHook func(context.Context, extsvc.AccountSpec, extsvc.AccountData) (int32, error)
	hooks       []func(context.Context, extsvc.AccountSpec, extsvc.AccountData) (int32, error)
	history     []UserExternalAccountsStoreLookupUserAndSaveFuncCall
	mutex       sync.Mutex
}

// LookupUserAndSave delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) LookupUserAndSave(v0 context.Context, v1 extsvc.AccountSpec, v2 extsvc.AccountData) (int32, error) {
	r0, r1 := m.LookupUserAndSaveFunc.nextHook()(v0, v1, v2)
	m.LookupUserAndSaveFunc.appendCall(UserExternalAccountsStoreLookupUserAndSaveFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the LookupUserAndSave
// method of the parent MockUserExternalAccountsStore instance is invoked
// and the hook queue is empty.
func (f *UserExternalAccountsStoreLookupUserAndSaveFunc) SetDefaultHook(hook func(context.Context, extsvc.AccountSpec, extsvc.AccountData) (int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LookupUserAndSave method of the parent MockUserExternalAccountsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *UserExternalAccountsStoreLookupUserAndSaveFunc) PushHook(hook func(context.Context, extsvc.AccountSpec, extsvc.AccountData) (int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserExternalAccountsStoreLookupUserAndSaveFunc) SetDefaultReturn(r0 int32, r1 error) {
	f.SetDefaultHook(func(context.Context, extsvc.AccountSpec, extsvc.AccountData) (int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserExternalAccountsStoreLookupUserAndSaveFunc) PushReturn(r0 int32, r1 error) {
	f.PushHook(func(context.Context, extsvc.AccountSpec, extsvc.AccountData) (int32, error) {
		return r0, r1
	})
}

func (f *UserExternalAccountsStoreLookupUserAndSaveFunc) nextHook() func(context.Context, extsvc.AccountSpec, extsvc.AccountData) (int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreLookupUserAndSaveFunc) appendCall(r0 UserExternalAccountsStoreLookupUserAndSaveFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UserExternalAccountsStoreLookupUserAndSaveFuncCall objects describing the
// invocations of this function.
func (f *UserExternalAccountsStoreLookupUserAndSaveFunc) History() []UserExternalAccountsStoreLookupUserAndSaveFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreLookupUserAndSaveFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreLookupUserAndSaveFuncCall is an object that
// describes an invocation of method LookupUserAndSave on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreLookupUserAndSaveFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 extsvc.AccountSpec
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 extsvc.AccountData
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreLookupUserAndSaveFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreLookupUserAndSaveFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserExternalAccountsStoreQueryRowFunc describes the behavior when the
// QueryRow method of the parent MockUserExternalAccountsStore instance is
// invoked.
type UserExternalAccountsStoreQueryRowFunc struct {
	defaultHook func(context.Context, *sqlf.Query) *sql.Row
	hooks       []func(context.Context, *sqlf.Query) *sql.Row
	history     []UserExternalAccountsStoreQueryRowFuncCall
	mutex       sync.Mutex
}

// QueryRow delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) QueryRow(v0 context.Context, v1 *sqlf.Query) *sql.Row {
	r0 := m.QueryRowFunc.nextHook()(v0, v1)
	m.QueryRowFunc.appendCall(UserExternalAccountsStoreQueryRowFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the QueryRow method of
// the parent MockUserExternalAccountsStore instance is invoked and the hook
// queue is empty.
func (f *UserExternalAccountsStoreQueryRowFunc) SetDefaultHook(hook func(context.Context, *sqlf.Query) *sql.Row) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueryRow method of the parent MockUserExternalAccountsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserExternalAccountsStoreQueryRowFunc) PushHook(hook func(context.Context, *sqlf.Query) *sql.Row) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserExternalAccountsStoreQueryRowFunc) SetDefaultReturn(r0 *sql.Row) {
	f.SetDefaultHook(func(context.Context, *sqlf.Query) *sql.Row {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserExternalAccountsStoreQueryRowFunc) PushReturn(r0 *sql.Row) {
	f.PushHook(func(context.Context, *sqlf.Query) *sql.Row {
		return r0
	})
}

func (f *UserExternalAccountsStoreQueryRowFunc) nextHook() func(context.Context, *sqlf.Query) *sql.Row {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreQueryRowFunc) appendCall(r0 UserExternalAccountsStoreQueryRowFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserExternalAccountsStoreQueryRowFuncCall
// objects describing the invocations of this function.
func (f *UserExternalAccountsStoreQueryRowFunc) History() []UserExternalAccountsStoreQueryRowFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreQueryRowFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreQueryRowFuncCall is an object that describes an
// invocation of method QueryRow on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreQueryRowFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sqlf.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *sql.Row
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreQueryRowFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreQueryRowFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserExternalAccountsStoreTouchExpiredFunc describes the behavior when the
// TouchExpired method of the parent MockUserExternalAccountsStore instance
// is invoked.
type UserExternalAccountsStoreTouchExpiredFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []UserExternalAccountsStoreTouchExpiredFuncCall
	mutex       sync.Mutex
}

// TouchExpired delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) TouchExpired(v0 context.Context, v1 int32) error {
	r0 := m.TouchExpiredFunc.nextHook()(v0, v1)
	m.TouchExpiredFunc.appendCall(UserExternalAccountsStoreTouchExpiredFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the TouchExpired method
// of the parent MockUserExternalAccountsStore instance is invoked and the
// hook queue is empty.
func (f *UserExternalAccountsStoreTouchExpiredFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TouchExpired method of the parent MockUserExternalAccountsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserExternalAccountsStoreTouchExpiredFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserExternalAccountsStoreTouchExpiredFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserExternalAccountsStoreTouchExpiredFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *UserExternalAccountsStoreTouchExpiredFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreTouchExpiredFunc) appendCall(r0 UserExternalAccountsStoreTouchExpiredFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UserExternalAccountsStoreTouchExpiredFuncCall objects describing the
// invocations of this function.
func (f *UserExternalAccountsStoreTouchExpiredFunc) History() []UserExternalAccountsStoreTouchExpiredFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreTouchExpiredFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreTouchExpiredFuncCall is an object that describes
// an invocation of method TouchExpired on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreTouchExpiredFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreTouchExpiredFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreTouchExpiredFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserExternalAccountsStoreTouchLastValidFunc describes the behavior when
// the TouchLastValid method of the parent MockUserExternalAccountsStore
// instance is invoked.
type UserExternalAccountsStoreTouchLastValidFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []UserExternalAccountsStoreTouchLastValidFuncCall
	mutex       sync.Mutex
}

// TouchLastValid delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) TouchLastValid(v0 context.Context, v1 int32) error {
	r0 := m.TouchLastValidFunc.nextHook()(v0, v1)
	m.TouchLastValidFunc.appendCall(UserExternalAccountsStoreTouchLastValidFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the TouchLastValid
// method of the parent MockUserExternalAccountsStore instance is invoked
// and the hook queue is empty.
func (f *UserExternalAccountsStoreTouchLastValidFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TouchLastValid method of the parent MockUserExternalAccountsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *UserExternalAccountsStoreTouchLastValidFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserExternalAccountsStoreTouchLastValidFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserExternalAccountsStoreTouchLastValidFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *UserExternalAccountsStoreTouchLastValidFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreTouchLastValidFunc) appendCall(r0 UserExternalAccountsStoreTouchLastValidFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UserExternalAccountsStoreTouchLastValidFuncCall objects describing the
// invocations of this function.
func (f *UserExternalAccountsStoreTouchLastValidFunc) History() []UserExternalAccountsStoreTouchLastValidFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreTouchLastValidFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreTouchLastValidFuncCall is an object that
// describes an invocation of method TouchLastValid on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreTouchLastValidFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreTouchLastValidFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreTouchLastValidFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserExternalAccountsStoreTransactFunc describes the behavior when the
// Transact method of the parent MockUserExternalAccountsStore instance is
// invoked.
type UserExternalAccountsStoreTransactFunc struct {
	defaultHook func(context.Context) (UserExternalAccountsStore, error)
	hooks       []func(context.Context) (UserExternalAccountsStore, error)
	history     []UserExternalAccountsStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) Transact(v0 context.Context) (UserExternalAccountsStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(UserExternalAccountsStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockUserExternalAccountsStore instance is invoked and the hook
// queue is empty.
func (f *UserExternalAccountsStoreTransactFunc) SetDefaultHook(hook func(context.Context) (UserExternalAccountsStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockUserExternalAccountsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserExternalAccountsStoreTransactFunc) PushHook(hook func(context.Context) (UserExternalAccountsStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserExternalAccountsStoreTransactFunc) SetDefaultReturn(r0 UserExternalAccountsStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (UserExternalAccountsStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserExternalAccountsStoreTransactFunc) PushReturn(r0 UserExternalAccountsStore, r1 error) {
	f.PushHook(func(context.Context) (UserExternalAccountsStore, error) {
		return r0, r1
	})
}

func (f *UserExternalAccountsStoreTransactFunc) nextHook() func(context.Context) (UserExternalAccountsStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreTransactFunc) appendCall(r0 UserExternalAccountsStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserExternalAccountsStoreTransactFuncCall
// objects describing the invocations of this function.
func (f *UserExternalAccountsStoreTransactFunc) History() []UserExternalAccountsStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreTransactFuncCall is an object that describes an
// invocation of method Transact on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 UserExternalAccountsStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserExternalAccountsStoreWithFunc describes the behavior when the With
// method of the parent MockUserExternalAccountsStore instance is invoked.
type UserExternalAccountsStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) UserExternalAccountsStore
	hooks       []func(basestore.ShareableStore) UserExternalAccountsStore
	history     []UserExternalAccountsStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) With(v0 basestore.ShareableStore) UserExternalAccountsStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(UserExternalAccountsStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockUserExternalAccountsStore instance is invoked and the hook
// queue is empty.
func (f *UserExternalAccountsStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) UserExternalAccountsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockUserExternalAccountsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserExternalAccountsStoreWithFunc) PushHook(hook func(basestore.ShareableStore) UserExternalAccountsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserExternalAccountsStoreWithFunc) SetDefaultReturn(r0 UserExternalAccountsStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) UserExternalAccountsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserExternalAccountsStoreWithFunc) PushReturn(r0 UserExternalAccountsStore) {
	f.PushHook(func(basestore.ShareableStore) UserExternalAccountsStore {
		return r0
	})
}

func (f *UserExternalAccountsStoreWithFunc) nextHook() func(basestore.ShareableStore) UserExternalAccountsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreWithFunc) appendCall(r0 UserExternalAccountsStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserExternalAccountsStoreWithFuncCall
// objects describing the invocations of this function.
func (f *UserExternalAccountsStoreWithFunc) History() []UserExternalAccountsStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreWithFuncCall is an object that describes an
// invocation of method With on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 UserExternalAccountsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserExternalAccountsStoreWithEncryptionKeyFunc describes the behavior
// when the WithEncryptionKey method of the parent
// MockUserExternalAccountsStore instance is invoked.
type UserExternalAccountsStoreWithEncryptionKeyFunc struct {
	defaultHook func(encryption.Key) UserExternalAccountsStore
	hooks       []func(encryption.Key) UserExternalAccountsStore
	history     []UserExternalAccountsStoreWithEncryptionKeyFuncCall
	mutex       sync.Mutex
}

// WithEncryptionKey delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) WithEncryptionKey(v0 encryption.Key) UserExternalAccountsStore {
	r0 := m.WithEncryptionKeyFunc.nextHook()(v0)
	m.WithEncryptionKeyFunc.appendCall(UserExternalAccountsStoreWithEncryptionKeyFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithEncryptionKey
// method of the parent MockUserExternalAccountsStore instance is invoked
// and the hook queue is empty.
func (f *UserExternalAccountsStoreWithEncryptionKeyFunc) SetDefaultHook(hook func(encryption.Key) UserExternalAccountsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithEncryptionKey method of the parent MockUserExternalAccountsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *UserExternalAccountsStoreWithEncryptionKeyFunc) PushHook(hook func(encryption.Key) UserExternalAccountsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserExternalAccountsStoreWithEncryptionKeyFunc) SetDefaultReturn(r0 UserExternalAccountsStore) {
	f.SetDefaultHook(func(encryption.Key) UserExternalAccountsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserExternalAccountsStoreWithEncryptionKeyFunc) PushReturn(r0 UserExternalAccountsStore) {
	f.PushHook(func(encryption.Key) UserExternalAccountsStore {
		return r0
	})
}

func (f *UserExternalAccountsStoreWithEncryptionKeyFunc) nextHook() func(encryption.Key) UserExternalAccountsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreWithEncryptionKeyFunc) appendCall(r0 UserExternalAccountsStoreWithEncryptionKeyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UserExternalAccountsStoreWithEncryptionKeyFuncCall objects describing the
// invocations of this function.
func (f *UserExternalAccountsStoreWithEncryptionKeyFunc) History() []UserExternalAccountsStoreWithEncryptionKeyFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreWithEncryptionKeyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreWithEncryptionKeyFuncCall is an object that
// describes an invocation of method WithEncryptionKey on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreWithEncryptionKeyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 encryption.Key
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 UserExternalAccountsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreWithEncryptionKeyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreWithEncryptionKeyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockUserPublicRepoStore is a mock implementation of the
// UserPublicRepoStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockUserPublicRepoStore struct {
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *UserPublicRepoStoreHandleFunc
	// ListByUserFunc is an instance of a mock function object controlling
	// the behavior of the method ListByUser.
	ListByUserFunc *UserPublicRepoStoreListByUserFunc
	// SetUserRepoFunc is an instance of a mock function object controlling
	// the behavior of the method SetUserRepo.
	SetUserRepoFunc *UserPublicRepoStoreSetUserRepoFunc
	// SetUserReposFunc is an instance of a mock function object controlling
	// the behavior of the method SetUserRepos.
	SetUserReposFunc *UserPublicRepoStoreSetUserReposFunc
}

// NewMockUserPublicRepoStore creates a new mock of the UserPublicRepoStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockUserPublicRepoStore() *MockUserPublicRepoStore {
	return &MockUserPublicRepoStore{
		HandleFunc: &UserPublicRepoStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		ListByUserFunc: &UserPublicRepoStoreListByUserFunc{
			defaultHook: func(context.Context, int32) (r0 []UserPublicRepo, r1 error) {
				return
			},
		},
		SetUserRepoFunc: &UserPublicRepoStoreSetUserRepoFunc{
			defaultHook: func(context.Context, UserPublicRepo) (r0 error) {
				return
			},
		},
		SetUserReposFunc: &UserPublicRepoStoreSetUserReposFunc{
			defaultHook: func(context.Context, int32, []UserPublicRepo) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockUserPublicRepoStore creates a new mock of the
// UserPublicRepoStore interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockUserPublicRepoStore() *MockUserPublicRepoStore {
	return &MockUserPublicRepoStore{
		HandleFunc: &UserPublicRepoStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockUserPublicRepoStore.Handle")
			},
		},
		ListByUserFunc: &UserPublicRepoStoreListByUserFunc{
			defaultHook: func(context.Context, int32) ([]UserPublicRepo, error) {
				panic("unexpected invocation of MockUserPublicRepoStore.ListByUser")
			},
		},
		SetUserRepoFunc: &UserPublicRepoStoreSetUserRepoFunc{
			defaultHook: func(context.Context, UserPublicRepo) error {
				panic("unexpected invocation of MockUserPublicRepoStore.SetUserRepo")
			},
		},
		SetUserReposFunc: &UserPublicRepoStoreSetUserReposFunc{
			defaultHook: func(context.Context, int32, []UserPublicRepo) error {
				panic("unexpected invocation of MockUserPublicRepoStore.SetUserRepos")
			},
		},
	}
}

// NewMockUserPublicRepoStoreFrom creates a new mock of the
// MockUserPublicRepoStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockUserPublicRepoStoreFrom(i UserPublicRepoStore) *MockUserPublicRepoStore {
	return &MockUserPublicRepoStore{
		HandleFunc: &UserPublicRepoStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListByUserFunc: &UserPublicRepoStoreListByUserFunc{
			defaultHook: i.ListByUser,
		},
		SetUserRepoFunc: &UserPublicRepoStoreSetUserRepoFunc{
			defaultHook: i.SetUserRepo,
		},
		SetUserReposFunc: &UserPublicRepoStoreSetUserReposFunc{
			defaultHook: i.SetUserRepos,
		},
	}
}

// UserPublicRepoStoreHandleFunc describes the behavior when the Handle
// method of the parent MockUserPublicRepoStore instance is invoked.
type UserPublicRepoStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []UserPublicRepoStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserPublicRepoStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(UserPublicRepoStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockUserPublicRepoStore instance is invoked and the hook queue is
// empty.
func (f *UserPublicRepoStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockUserPublicRepoStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserPublicRepoStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserPublicRepoStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserPublicRepoStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *UserPublicRepoStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserPublicRepoStoreHandleFunc) appendCall(r0 UserPublicRepoStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserPublicRepoStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *UserPublicRepoStoreHandleFunc) History() []UserPublicRepoStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]UserPublicRepoStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserPublicRepoStoreHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of MockUserPublicRepoStore.
type UserPublicRepoStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserPublicRepoStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserPublicRepoStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserPublicRepoStoreListByUserFunc describes the behavior when the
// ListByUser method of the parent MockUserPublicRepoStore instance is
// invoked.
type UserPublicRepoStoreListByUserFunc struct {
	defaultHook func(context.Context, int32) ([]UserPublicRepo, error)
	hooks       []func(context.Context, int32) ([]UserPublicRepo, error)
	history     []UserPublicRepoStoreListByUserFuncCall
	mutex       sync.Mutex
}

// ListByUser delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserPublicRepoStore) ListByUser(v0 context.Context, v1 int32) ([]UserPublicRepo, error) {
	r0, r1 := m.ListByUserFunc.nextHook()(v0, v1)
	m.ListByUserFunc.appendCall(UserPublicRepoStoreListByUserFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListByUser method of
// the parent MockUserPublicRepoStore instance is invoked and the hook queue
// is empty.
func (f *UserPublicRepoStoreListByUserFunc) SetDefaultHook(hook func(context.Context, int32) ([]UserPublicRepo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListByUser method of the parent MockUserPublicRepoStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserPublicRepoStoreListByUserFunc) PushHook(hook func(context.Context, int32) ([]UserPublicRepo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserPublicRepoStoreListByUserFunc) SetDefaultReturn(r0 []UserPublicRepo, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) ([]UserPublicRepo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserPublicRepoStoreListByUserFunc) PushReturn(r0 []UserPublicRepo, r1 error) {
	f.PushHook(func(context.Context, int32) ([]UserPublicRepo, error) {
		return r0, r1
	})
}

func (f *UserPublicRepoStoreListByUserFunc) nextHook() func(context.Context, int32) ([]UserPublicRepo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserPublicRepoStoreListByUserFunc) appendCall(r0 UserPublicRepoStoreListByUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserPublicRepoStoreListByUserFuncCall
// objects describing the invocations of this function.
func (f *UserPublicRepoStoreListByUserFunc) History() []UserPublicRepoStoreListByUserFuncCall {
	f.mutex.Lock()
	history := make([]UserPublicRepoStoreListByUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserPublicRepoStoreListByUserFuncCall is an object that describes an
// invocation of method ListByUser on an instance of
// MockUserPublicRepoStore.
type UserPublicRepoStoreListByUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []UserPublicRepo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserPublicRepoStoreListByUserFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserPublicRepoStoreListByUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserPublicRepoStoreSetUserRepoFunc describes the behavior when the
// SetUserRepo method of the parent MockUserPublicRepoStore instance is
// invoked.
type UserPublicRepoStoreSetUserRepoFunc struct {
	defaultHook func(context.Context, UserPublicRepo) error
	hooks       []func(context.Context, UserPublicRepo) error
	history     []UserPublicRepoStoreSetUserRepoFuncCall
	mutex       sync.Mutex
}

// SetUserRepo delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserPublicRepoStore) SetUserRepo(v0 context.Context, v1 UserPublicRepo) error {
	r0 := m.SetUserRepoFunc.nextHook()(v0, v1)
	m.SetUserRepoFunc.appendCall(UserPublicRepoStoreSetUserRepoFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetUserRepo method
// of the parent MockUserPublicRepoStore instance is invoked and the hook
// queue is empty.
func (f *UserPublicRepoStoreSetUserRepoFunc) SetDefaultHook(hook func(context.Context, UserPublicRepo) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetUserRepo method of the parent MockUserPublicRepoStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserPublicRepoStoreSetUserRepoFunc) PushHook(hook func(context.Context, UserPublicRepo) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserPublicRepoStoreSetUserRepoFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, UserPublicRepo) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserPublicRepoStoreSetUserRepoFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, UserPublicRepo) error {
		return r0
	})
}

func (f *UserPublicRepoStoreSetUserRepoFunc) nextHook() func(context.Context, UserPublicRepo) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserPublicRepoStoreSetUserRepoFunc) appendCall(r0 UserPublicRepoStoreSetUserRepoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserPublicRepoStoreSetUserRepoFuncCall
// objects describing the invocations of this function.
func (f *UserPublicRepoStoreSetUserRepoFunc) History() []UserPublicRepoStoreSetUserRepoFuncCall {
	f.mutex.Lock()
	history := make([]UserPublicRepoStoreSetUserRepoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserPublicRepoStoreSetUserRepoFuncCall is an object that describes an
// invocation of method SetUserRepo on an instance of
// MockUserPublicRepoStore.
type UserPublicRepoStoreSetUserRepoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 UserPublicRepo
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserPublicRepoStoreSetUserRepoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserPublicRepoStoreSetUserRepoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserPublicRepoStoreSetUserReposFunc describes the behavior when the
// SetUserRepos method of the parent MockUserPublicRepoStore instance is
// invoked.
type UserPublicRepoStoreSetUserReposFunc struct {
	defaultHook func(context.Context, int32, []UserPublicRepo) error
	hooks       []func(context.Context, int32, []UserPublicRepo) error
	history     []UserPublicRepoStoreSetUserReposFuncCall
	mutex       sync.Mutex
}

// SetUserRepos delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserPublicRepoStore) SetUserRepos(v0 context.Context, v1 int32, v2 []UserPublicRepo) error {
	r0 := m.SetUserReposFunc.nextHook()(v0, v1, v2)
	m.SetUserReposFunc.appendCall(UserPublicRepoStoreSetUserReposFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetUserRepos method
// of the parent MockUserPublicRepoStore instance is invoked and the hook
// queue is empty.
func (f *UserPublicRepoStoreSetUserReposFunc) SetDefaultHook(hook func(context.Context, int32, []UserPublicRepo) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetUserRepos method of the parent MockUserPublicRepoStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserPublicRepoStoreSetUserReposFunc) PushHook(hook func(context.Context, int32, []UserPublicRepo) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserPublicRepoStoreSetUserReposFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, []UserPublicRepo) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserPublicRepoStoreSetUserReposFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, []UserPublicRepo) error {
		return r0
	})
}

func (f *UserPublicRepoStoreSetUserReposFunc) nextHook() func(context.Context, int32, []UserPublicRepo) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserPublicRepoStoreSetUserReposFunc) appendCall(r0 UserPublicRepoStoreSetUserReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserPublicRepoStoreSetUserReposFuncCall
// objects describing the invocations of this function.
func (f *UserPublicRepoStoreSetUserReposFunc) History() []UserPublicRepoStoreSetUserReposFuncCall {
	f.mutex.Lock()
	history := make([]UserPublicRepoStoreSetUserReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserPublicRepoStoreSetUserReposFuncCall is an object that describes an
// invocation of method SetUserRepos on an instance of
// MockUserPublicRepoStore.
type UserPublicRepoStoreSetUserReposFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []UserPublicRepo
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserPublicRepoStoreSetUserReposFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserPublicRepoStoreSetUserReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockUserStore is a mock implementation of the UserStore interface (from
// the package github.com/sourcegraph/sourcegraph/internal/database) used
// for unit testing.
type MockUserStore struct {
	// CheckAndDecrementInviteQuotaFunc is an instance of a mock function
	// object controlling the behavior of the method
	// CheckAndDecrementInviteQuota.
	CheckAndDecrementInviteQuotaFunc *UserStoreCheckAndDecrementInviteQuotaFunc
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *UserStoreCountFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *UserStoreCreateFunc
	// CreateInTransactionFunc is an instance of a mock function object
	// controlling the behavior of the method CreateInTransaction.
	CreateInTransactionFunc *UserStoreCreateInTransactionFunc
	// CreatePasswordFunc is an instance of a mock function object
	// controlling the behavior of the method CreatePassword.
	CreatePasswordFunc *UserStoreCreatePasswordFunc
	// CurrentUserAllowedExternalServicesFunc is an instance of a mock
	// function object controlling the behavior of the method
	// CurrentUserAllowedExternalServices.
	CurrentUserAllowedExternalServicesFunc *UserStoreCurrentUserAllowedExternalServicesFunc
	// DeleteFunc is an instance of a mock function object controlling the
	// behavior of the method Delete.
	DeleteFunc *UserStoreDeleteFunc
	// DeletePasswordResetCodeFunc is an instance of a mock function object
	// controlling the behavior of the method DeletePasswordResetCode.
	DeletePasswordResetCodeFunc *UserStoreDeletePasswordResetCodeFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *UserStoreDoneFunc
	// ExecFunc is an instance of a mock function object controlling the
	// behavior of the method Exec.
	ExecFunc *UserStoreExecFunc
	// ExecResultFunc is an instance of a mock function object controlling
	// the behavior of the method ExecResult.
	ExecResultFunc *UserStoreExecResultFunc
	// GetByCurrentAuthUserFunc is an instance of a mock function object
	// controlling the behavior of the method GetByCurrentAuthUser.
	GetByCurrentAuthUserFunc *UserStoreGetByCurrentAuthUserFunc
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *UserStoreGetByIDFunc
	// GetByUsernameFunc is an instance of a mock function object
	// controlling the behavior of the method GetByUsername.
	GetByUsernameFunc *UserStoreGetByUsernameFunc
	// GetByUsernamesFunc is an instance of a mock function object
	// controlling the behavior of the method GetByUsernames.
	GetByUsernamesFunc *UserStoreGetByUsernamesFunc
	// GetByVerifiedEmailFunc is an instance of a mock function object
	// controlling the behavior of the method GetByVerifiedEmail.
	GetByVerifiedEmailFunc *UserStoreGetByVerifiedEmailFunc
	// HardDeleteFunc is an instance of a mock function object controlling
	// the behavior of the method HardDelete.
	HardDeleteFunc *UserStoreHardDeleteFunc
	// HasTagFunc is an instance of a mock function object controlling the
	// behavior of the method HasTag.
	HasTagFunc *UserStoreHasTagFunc
	// InvalidateSessionsByIDFunc is an instance of a mock function object
	// controlling the behavior of the method InvalidateSessionsByID.
	InvalidateSessionsByIDFunc *UserStoreInvalidateSessionsByIDFunc
	// IsPasswordFunc is an instance of a mock function object controlling
	// the behavior of the method IsPassword.
	IsPasswordFunc *UserStoreIsPasswordFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *UserStoreListFunc
	// ListDatesFunc is an instance of a mock function object controlling
	// the behavior of the method ListDates.
	ListDatesFunc *UserStoreListDatesFunc
	// RandomizePasswordAndClearPasswordResetRateLimitFunc is an instance of
	// a mock function object controlling the behavior of the method
	// RandomizePasswordAndClearPasswordResetRateLimit.
	RandomizePasswordAndClearPasswordResetRateLimitFunc *UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc
	// RenewPasswordResetCodeFunc is an instance of a mock function object
	// controlling the behavior of the method RenewPasswordResetCode.
	RenewPasswordResetCodeFunc *UserStoreRenewPasswordResetCodeFunc
	// SetIsSiteAdminFunc is an instance of a mock function object
	// controlling the behavior of the method SetIsSiteAdmin.
	SetIsSiteAdminFunc *UserStoreSetIsSiteAdminFunc
	// SetPasswordFunc is an instance of a mock function object controlling
	// the behavior of the method SetPassword.
	SetPasswordFunc *UserStoreSetPasswordFunc
	// SetTagFunc is an instance of a mock function object controlling the
	// behavior of the method SetTag.
	SetTagFunc *UserStoreSetTagFunc
	// TagsFunc is an instance of a mock function object controlling the
	// behavior of the method Tags.
	TagsFunc *UserStoreTagsFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *UserStoreTransactFunc
	// UpdateFunc is an instance of a mock function object controlling the
	// behavior of the method Update.
	UpdateFunc *UserStoreUpdateFunc
	// UpdatePasswordFunc is an instance of a mock function object
	// controlling the behavior of the method UpdatePassword.
	UpdatePasswordFunc *UserStoreUpdatePasswordFunc
	// UserAllowedExternalServicesFunc is an instance of a mock function
	// object controlling the behavior of the method
	// UserAllowedExternalServices.
	UserAllowedExternalServicesFunc *UserStoreUserAllowedExternalServicesFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *UserStoreWithFunc
}

// NewMockUserStore creates a new mock of the UserStore interface. All
// methods return zero values for all results, unless overwritten.
func NewMockUserStore() *MockUserStore {
	return &MockUserStore{
		CheckAndDecrementInviteQuotaFunc: &UserStoreCheckAndDecrementInviteQuotaFunc{
			defaultHook: func(context.Context, int32) (r0 bool, r1 error) {
				return
			},
		},
		CountFunc: &UserStoreCountFunc{
			defaultHook: func(context.Context, *UsersListOptions) (r0 int, r1 error) {
				return
			},
		},
		CreateFunc: &UserStoreCreateFunc{
			defaultHook: func(context.Context, NewUser) (r0 *types.User, r1 error) {
				return
			},
		},
		CreateInTransactionFunc: &UserStoreCreateInTransactionFunc{
			defaultHook: func(context.Context, NewUser) (r0 *types.User, r1 error) {
				return
			},
		},
		CreatePasswordFunc: &UserStoreCreatePasswordFunc{
			defaultHook: func(context.Context, int32, string) (r0 error) {
				return
			},
		},
		CurrentUserAllowedExternalServicesFunc: &UserStoreCurrentUserAllowedExternalServicesFunc{
			defaultHook: func(context.Context) (r0 conf.ExternalServiceMode, r1 error) {
				return
			},
		},
		DeleteFunc: &UserStoreDeleteFunc{
			defaultHook: func(context.Context, int32) (r0 error) {
				return
			},
		},
		DeletePasswordResetCodeFunc: &UserStoreDeletePasswordResetCodeFunc{
			defaultHook: func(context.Context, int32) (r0 error) {
				return
			},
		},
		DoneFunc: &UserStoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		ExecFunc: &UserStoreExecFunc{
			defaultHook: func(context.Context, *sqlf.Query) (r0 error) {
				return
			},
		},
		ExecResultFunc: &UserStoreExecResultFunc{
			defaultHook: func(context.Context, *sqlf.Query) (r0 sql.Result, r1 error) {
				return
			},
		},
		GetByCurrentAuthUserFunc: &UserStoreGetByCurrentAuthUserFunc{
			defaultHook: func(context.Context) (r0 *types.User, r1 error) {
				return
			},
		},
		GetByIDFunc: &UserStoreGetByIDFunc{
			defaultHook: func(context.Context, int32) (r0 *types.User, r1 error) {
				return
			},
		},
		GetByUsernameFunc: &UserStoreGetByUsernameFunc{
			defaultHook: func(context.Context, string) (r0 *types.User, r1 error) {
				return
			},
		},
		GetByUsernamesFunc: &UserStoreGetByUsernamesFunc{
			defaultHook: func(context.Context, ...string) (r0 []*types.User, r1 error) {
				return
			},
		},
		GetByVerifiedEmailFunc: &UserStoreGetByVerifiedEmailFunc{
			defaultHook: func(context.Context, string) (r0 *types.User, r1 error) {
				return
			},
		},
		HardDeleteFunc: &UserStoreHardDeleteFunc{
			defaultHook: func(context.Context, int32) (r0 error) {
				return
			},
		},
		HasTagFunc: &UserStoreHasTagFunc{
			defaultHook: func(context.Context, int32, string) (r0 bool, r1 error) {
				return
			},
		},
		InvalidateSessionsByIDFunc: &UserStoreInvalidateSessionsByIDFunc{
			defaultHook: func(context.Context, int32) (r0 error) {
				return
			},
		},
		IsPasswordFunc: &UserStoreIsPasswordFunc{
			defaultHook: func(context.Context, int32, string) (r0 bool, r1 error) {
				return
			},
		},
		ListFunc: &UserStoreListFunc{
			defaultHook: func(context.Context, *UsersListOptions) (r0 []*types.User, r1 error) {
				return
			},
		},
		ListDatesFunc: &UserStoreListDatesFunc{
			defaultHook: func(context.Context) (r0 []types.UserDates, r1 error) {
				return
			},
		},
		RandomizePasswordAndClearPasswordResetRateLimitFunc: &UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc{
			defaultHook: func(context.Context, int32) (r0 error) {
				return
			},
		},
		RenewPasswordResetCodeFunc: &UserStoreRenewPasswordResetCodeFunc{
			defaultHook: func(context.Context, int32) (r0 string, r1 error) {
				return
			},
		},
		SetIsSiteAdminFunc: &UserStoreSetIsSiteAdminFunc{
			defaultHook: func(context.Context, int32, bool) (r0 error) {
				return
			},
		},
		SetPasswordFunc: &UserStoreSetPasswordFunc{
			defaultHook: func(context.Context, int32, string, string) (r0 bool, r1 error) {
				return
			},
		},
		SetTagFunc: &UserStoreSetTagFunc{
			defaultHook: func(context.Context, int32, string, bool) (r0 error) {
				return
			},
		},
		TagsFunc: &UserStoreTagsFunc{
			defaultHook: func(context.Context, int32) (r0 map[string]bool, r1 error) {
				return
			},
		},
		TransactFunc: &UserStoreTransactFunc{
			defaultHook: func(context.Context) (r0 UserStore, r1 error) {
				return
			},
		},
		UpdateFunc: &UserStoreUpdateFunc{
			defaultHook: func(context.Context, int32, UserUpdate) (r0 error) {
				return
			},
		},
		UpdatePasswordFunc: &UserStoreUpdatePasswordFunc{
			defaultHook: func(context.Context, int32, string, string) (r0 error) {
				return
			},
		},
		UserAllowedExternalServicesFunc: &UserStoreUserAllowedExternalServicesFunc{
			defaultHook: func(context.Context, int32) (r0 conf.ExternalServiceMode, r1 error) {
				return
			},
		},
		WithFunc: &UserStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 UserStore) {
				return
			},
		},
	}
}

// NewStrictMockUserStore creates a new mock of the UserStore interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockUserStore() *MockUserStore {
	return &MockUserStore{
		CheckAndDecrementInviteQuotaFunc: &UserStoreCheckAndDecrementInviteQuotaFunc{
			defaultHook: func(context.Context, int32) (bool, error) {
				panic("unexpected invocation of MockUserStore.CheckAndDecrementInviteQuota")
			},
		},
		CountFunc: &UserStoreCountFunc{
			defaultHook: func(context.Context, *UsersListOptions) (int, error) {
				panic("unexpected invocation of MockUserStore.Count")
			},
		},
		CreateFunc: &UserStoreCreateFunc{
			defaultHook: func(context.Context, NewUser) (*types.User, error) {
				panic("unexpected invocation of MockUserStore.Create")
			},
		},
		CreateInTransactionFunc: &UserStoreCreateInTransactionFunc{
			defaultHook: func(context.Context, NewUser) (*types.User, error) {
				panic("unexpected invocation of MockUserStore.CreateInTransaction")
			},
		},
		CreatePasswordFunc: &UserStoreCreatePasswordFunc{
			defaultHook: func(context.Context, int32, string) error {
				panic("unexpected invocation of MockUserStore.CreatePassword")
			},
		},
		CurrentUserAllowedExternalServicesFunc: &UserStoreCurrentUserAllowedExternalServicesFunc{
			defaultHook: func(context.Context) (conf.ExternalServiceMode, error) {
				panic("unexpected invocation of MockUserStore.CurrentUserAllowedExternalServices")
			},
		},
		DeleteFunc: &UserStoreDeleteFunc{
			defaultHook: func(context.Context, int32) error {
				panic("unexpected invocation of MockUserStore.Delete")
			},
		},
		DeletePasswordResetCodeFunc: &UserStoreDeletePasswordResetCodeFunc{
			defaultHook: func(context.Context, int32) error {
				panic("unexpected invocation of MockUserStore.DeletePasswordResetCode")
			},
		},
		DoneFunc: &UserStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockUserStore.Done")
			},
		},
		ExecFunc: &UserStoreExecFunc{
			defaultHook: func(context.Context, *sqlf.Query) error {
				panic("unexpected invocation of MockUserStore.Exec")
			},
		},
		ExecResultFunc: &UserStoreExecResultFunc{
			defaultHook: func(context.Context, *sqlf.Query) (sql.Result, error) {
				panic("unexpected invocation of MockUserStore.ExecResult")
			},
		},
		GetByCurrentAuthUserFunc: &UserStoreGetByCurrentAuthUserFunc{
			defaultHook: func(context.Context) (*types.User, error) {
				panic("unexpected invocation of MockUserStore.GetByCurrentAuthUser")
			},
		},
		GetByIDFunc: &UserStoreGetByIDFunc{
			defaultHook: func(context.Context, int32) (*types.User, error) {
				panic("unexpected invocation of MockUserStore.GetByID")
			},
		},
		GetByUsernameFunc: &UserStoreGetByUsernameFunc{
			defaultHook: func(context.Context, string) (*types.User, error) {
				panic("unexpected invocation of MockUserStore.GetByUsername")
			},
		},
		GetByUsernamesFunc: &UserStoreGetByUsernamesFunc{
			defaultHook: func(context.Context, ...string) ([]*types.User, error) {
				panic("unexpected invocation of MockUserStore.GetByUsernames")
			},
		},
		GetByVerifiedEmailFunc: &UserStoreGetByVerifiedEmailFunc{
			defaultHook: func(context.Context, string) (*types.User, error) {
				panic("unexpected invocation of MockUserStore.GetByVerifiedEmail")
			},
		},
		HardDeleteFunc: &UserStoreHardDeleteFunc{
			defaultHook: func(context.Context, int32) error {
				panic("unexpected invocation of MockUserStore.HardDelete")
			},
		},
		HasTagFunc: &UserStoreHasTagFunc{
			defaultHook: func(context.Context, int32, string) (bool, error) {
				panic("unexpected invocation of MockUserStore.HasTag")
			},
		},
		InvalidateSessionsByIDFunc: &UserStoreInvalidateSessionsByIDFunc{
			defaultHook: func(context.Context, int32) error {
				panic("unexpected invocation of MockUserStore.InvalidateSessionsByID")
			},
		},
		IsPasswordFunc: &UserStoreIsPasswordFunc{
			defaultHook: func(context.Context, int32, string) (bool, error) {
				panic("unexpected invocation of MockUserStore.IsPassword")
			},
		},
		ListFunc: &UserStoreListFunc{
			defaultHook: func(context.Context, *UsersListOptions) ([]*types.User, error) {
				panic("unexpected invocation of MockUserStore.List")
			},
		},
		ListDatesFunc: &UserStoreListDatesFunc{
			defaultHook: func(context.Context) ([]types.UserDates, error) {
				panic("unexpected invocation of MockUserStore.ListDates")
			},
		},
		RandomizePasswordAndClearPasswordResetRateLimitFunc: &UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc{
			defaultHook: func(context.Context, int32) error {
				panic("unexpected invocation of MockUserStore.RandomizePasswordAndClearPasswordResetRateLimit")
			},
		},
		RenewPasswordResetCodeFunc: &UserStoreRenewPasswordResetCodeFunc{
			defaultHook: func(context.Context, int32) (string, error) {
				panic("unexpected invocation of MockUserStore.RenewPasswordResetCode")
			},
		},
		SetIsSiteAdminFunc: &UserStoreSetIsSiteAdminFunc{
			defaultHook: func(context.Context, int32, bool) error {
				panic("unexpected invocation of MockUserStore.SetIsSiteAdmin")
			},
		},
		SetPasswordFunc: &UserStoreSetPasswordFunc{
			defaultHook: func(context.Context, int32, string, string) (bool, error) {
				panic("unexpected invocation of MockUserStore.SetPassword")
			},
		},
		SetTagFunc: &UserStoreSetTagFunc{
			defaultHook: func(context.Context, int32, string, bool) error {
				panic("unexpected invocation of MockUserStore.SetTag")
			},
		},
		TagsFunc: &UserStoreTagsFunc{
			defaultHook: func(context.Context, int32) (map[string]bool, error) {
				panic("unexpected invocation of MockUserStore.Tags")
			},
		},
		TransactFunc: &UserStoreTransactFunc{
			defaultHook: func(context.Context) (UserStore, error) {
				panic("unexpected invocation of MockUserStore.Transact")
			},
		},
		UpdateFunc: &UserStoreUpdateFunc{
			defaultHook: func(context.Context, int32, UserUpdate) error {
				panic("unexpected invocation of MockUserStore.Update")
			},
		},
		UpdatePasswordFunc: &UserStoreUpdatePasswordFunc{
			defaultHook: func(context.Context, int32, string, string) error {
				panic("unexpected invocation of MockUserStore.UpdatePassword")
			},
		},
		UserAllowedExternalServicesFunc: &UserStoreUserAllowedExternalServicesFunc{
			defaultHook: func(context.Context, int32) (conf.ExternalServiceMode, error) {
				panic("unexpected invocation of MockUserStore.UserAllowedExternalServices")
			},
		},
		WithFunc: &UserStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) UserStore {
				panic("unexpected invocation of MockUserStore.With")
			},
		},
	}
}

// NewMockUserStoreFrom creates a new mock of the MockUserStore interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockUserStoreFrom(i UserStore) *MockUserStore {
	return &MockUserStore{
		CheckAndDecrementInviteQuotaFunc: &UserStoreCheckAndDecrementInviteQuotaFunc{
			defaultHook: i.CheckAndDecrementInviteQuota,
		},
		CountFunc: &UserStoreCountFunc{
			defaultHook: i.Count,
		},
		CreateFunc: &UserStoreCreateFunc{
			defaultHook: i.Create,
		},
		CreateInTransactionFunc: &UserStoreCreateInTransactionFunc{
			defaultHook: i.CreateInTransaction,
		},
		CreatePasswordFunc: &UserStoreCreatePasswordFunc{
			defaultHook: i.CreatePassword,
		},
		CurrentUserAllowedExternalServicesFunc: &UserStoreCurrentUserAllowedExternalServicesFunc{
			defaultHook: i.CurrentUserAllowedExternalServices,
		},
		DeleteFunc: &UserStoreDeleteFunc{
			defaultHook: i.Delete,
		},
		DeletePasswordResetCodeFunc: &UserStoreDeletePasswordResetCodeFunc{
			defaultHook: i.DeletePasswordResetCode,
		},
		DoneFunc: &UserStoreDoneFunc{
			defaultHook: i.Done,
		},
		ExecFunc: &UserStoreExecFunc{
			defaultHook: i.Exec,
		},
		ExecResultFunc: &UserStoreExecResultFunc{
			defaultHook: i.ExecResult,
		},
		GetByCurrentAuthUserFunc: &UserStoreGetByCurrentAuthUserFunc{
			defaultHook: i.GetByCurrentAuthUser,
		},
		GetByIDFunc: &UserStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		GetByUsernameFunc: &UserStoreGetByUsernameFunc{
			defaultHook: i.GetByUsername,
		},
		GetByUsernamesFunc: &UserStoreGetByUsernamesFunc{
			defaultHook: i.GetByUsernames,
		},
		GetByVerifiedEmailFunc: &UserStoreGetByVerifiedEmailFunc{
			defaultHook: i.GetByVerifiedEmail,
		},
		HardDeleteFunc: &UserStoreHardDeleteFunc{
			defaultHook: i.HardDelete,
		},
		HasTagFunc: &UserStoreHasTagFunc{
			defaultHook: i.HasTag,
		},
		InvalidateSessionsByIDFunc: &UserStoreInvalidateSessionsByIDFunc{
			defaultHook: i.InvalidateSessionsByID,
		},
		IsPasswordFunc: &UserStoreIsPasswordFunc{
			defaultHook: i.IsPassword,
		},
		ListFunc: &UserStoreListFunc{
			defaultHook: i.List,
		},
		ListDatesFunc: &UserStoreListDatesFunc{
			defaultHook: i.ListDates,
		},
		RandomizePasswordAndClearPasswordResetRateLimitFunc: &UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc{
			defaultHook: i.RandomizePasswordAndClearPasswordResetRateLimit,
		},
		RenewPasswordResetCodeFunc: &UserStoreRenewPasswordResetCodeFunc{
			defaultHook: i.RenewPasswordResetCode,
		},
		SetIsSiteAdminFunc: &UserStoreSetIsSiteAdminFunc{
			defaultHook: i.SetIsSiteAdmin,
		},
		SetPasswordFunc: &UserStoreSetPasswordFunc{
			defaultHook: i.SetPassword,
		},
		SetTagFunc: &UserStoreSetTagFunc{
			defaultHook: i.SetTag,
		},
		TagsFunc: &UserStoreTagsFunc{
			defaultHook: i.Tags,
		},
		TransactFunc: &UserStoreTransactFunc{
			defaultHook: i.Transact,
		},
		UpdateFunc: &UserStoreUpdateFunc{
			defaultHook: i.Update,
		},
		UpdatePasswordFunc: &UserStoreUpdatePasswordFunc{
			defaultHook: i.UpdatePassword,
		},
		UserAllowedExternalServicesFunc: &UserStoreUserAllowedExternalServicesFunc{
			defaultHook: i.UserAllowedExternalServices,
		},
		WithFunc: &UserStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// UserStoreCheckAndDecrementInviteQuotaFunc describes the behavior when the
// CheckAndDecrementInviteQuota method of the parent MockUserStore instance
// is invoked.
type UserStoreCheckAndDecrementInviteQuotaFunc struct {
	defaultHook func(context.Context, int32) (bool, error)
	hooks       []func(context.Context, int32) (bool, error)
	history     []UserStoreCheckAndDecrementInviteQuotaFuncCall
	mutex       sync.Mutex
}

// CheckAndDecrementInviteQuota delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockUserStore) CheckAndDecrementInviteQuota(v0 context.Context, v1 int32) (bool, error) {
	r0, r1 := m.CheckAndDecrementInviteQuotaFunc.nextHook()(v0, v1)
	m.CheckAndDecrementInviteQuotaFunc.appendCall(UserStoreCheckAndDecrementInviteQuotaFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CheckAndDecrementInviteQuota method of the parent MockUserStore instance
// is invoked and the hook queue is empty.
func (f *UserStoreCheckAndDecrementInviteQuotaFunc) SetDefaultHook(hook func(context.Context, int32) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CheckAndDecrementInviteQuota method of the parent MockUserStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserStoreCheckAndDecrementInviteQuotaFunc) PushHook(hook func(context.Context, int32) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreCheckAndDecrementInviteQuotaFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreCheckAndDecrementInviteQuotaFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int32) (bool, error) {
		return r0, r1
	})
}

func (f *UserStoreCheckAndDecrementInviteQuotaFunc) nextHook() func(context.Context, int32) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreCheckAndDecrementInviteQuotaFunc) appendCall(r0 UserStoreCheckAndDecrementInviteQuotaFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UserStoreCheckAndDecrementInviteQuotaFuncCall objects describing the
// invocations of this function.
func (f *UserStoreCheckAndDecrementInviteQuotaFunc) History() []UserStoreCheckAndDecrementInviteQuotaFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreCheckAndDecrementInviteQuotaFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreCheckAndDecrementInviteQuotaFuncCall is an object that describes
// an invocation of method CheckAndDecrementInviteQuota on an instance of
// MockUserStore.
type UserStoreCheckAndDecrementInviteQuotaFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreCheckAndDecrementInviteQuotaFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreCheckAndDecrementInviteQuotaFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreCountFunc describes the behavior when the Count method of the
// parent MockUserStore instance is invoked.
type UserStoreCountFunc struct {
	defaultHook func(context.Context, *UsersListOptions) (int, error)
	hooks       []func(context.Context, *UsersListOptions) (int, error)
	history     []UserStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) Count(v0 context.Context, v1 *UsersListOptions) (int, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(UserStoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreCountFunc) SetDefaultHook(hook func(context.Context, *UsersListOptions) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockUserStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *UserStoreCountFunc) PushHook(hook func(context.Context, *UsersListOptions) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, *UsersListOptions) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, *UsersListOptions) (int, error) {
		return r0, r1
	})
}

func (f *UserStoreCountFunc) nextHook() func(context.Context, *UsersListOptions) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreCountFunc) appendCall(r0 UserStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreCountFuncCall objects describing
// the invocations of this function.
func (f *UserStoreCountFunc) History() []UserStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreCountFuncCall is an object that describes an invocation of
// method Count on an instance of MockUserStore.
type UserStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *UsersListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreCreateFunc describes the behavior when the Create method of the
// parent MockUserStore instance is invoked.
type UserStoreCreateFunc struct {
	defaultHook func(context.Context, NewUser) (*types.User, error)
	hooks       []func(context.Context, NewUser) (*types.User, error)
	history     []UserStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) Create(v0 context.Context, v1 NewUser) (*types.User, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1)
	m.CreateFunc.appendCall(UserStoreCreateFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreCreateFunc) SetDefaultHook(hook func(context.Context, NewUser) (*types.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockUserStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreCreateFunc) PushHook(hook func(context.Context, NewUser) (*types.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreCreateFunc) SetDefaultReturn(r0 *types.User, r1 error) {
	f.SetDefaultHook(func(context.Context, NewUser) (*types.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreCreateFunc) PushReturn(r0 *types.User, r1 error) {
	f.PushHook(func(context.Context, NewUser) (*types.User, error) {
		return r0, r1
	})
}

func (f *UserStoreCreateFunc) nextHook() func(context.Context, NewUser) (*types.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreCreateFunc) appendCall(r0 UserStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreCreateFuncCall objects describing
// the invocations of this function.
func (f *UserStoreCreateFunc) History() []UserStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreCreateFuncCall is an object that describes an invocation of
// method Create on an instance of MockUserStore.
type UserStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 NewUser
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreCreateInTransactionFunc describes the behavior when the
// CreateInTransaction method of the parent MockUserStore instance is
// invoked.
type UserStoreCreateInTransactionFunc struct {
	defaultHook func(context.Context, NewUser) (*types.User, error)
	hooks       []func(context.Context, NewUser) (*types.User, error)
	history     []UserStoreCreateInTransactionFuncCall
	mutex       sync.Mutex
}

// CreateInTransaction delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserStore) CreateInTransaction(v0 context.Context, v1 NewUser) (*types.User, error) {
	r0, r1 := m.CreateInTransactionFunc.nextHook()(v0, v1)
	m.CreateInTransactionFunc.appendCall(UserStoreCreateInTransactionFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateInTransaction
// method of the parent MockUserStore instance is invoked and the hook queue
// is empty.
func (f *UserStoreCreateInTransactionFunc) SetDefaultHook(hook func(context.Context, NewUser) (*types.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateInTransaction method of the parent MockUserStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserStoreCreateInTransactionFunc) PushHook(hook func(context.Context, NewUser) (*types.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreCreateInTransactionFunc) SetDefaultReturn(r0 *types.User, r1 error) {
	f.SetDefaultHook(func(context.Context, NewUser) (*types.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreCreateInTransactionFunc) PushReturn(r0 *types.User, r1 error) {
	f.PushHook(func(context.Context, NewUser) (*types.User, error) {
		return r0, r1
	})
}

func (f *UserStoreCreateInTransactionFunc) nextHook() func(context.Context, NewUser) (*types.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreCreateInTransactionFunc) appendCall(r0 UserStoreCreateInTransactionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreCreateInTransactionFuncCall
// objects describing the invocations of this function.
func (f *UserStoreCreateInTransactionFunc) History() []UserStoreCreateInTransactionFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreCreateInTransactionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreCreateInTransactionFuncCall is an object that describes an
// invocation of method CreateInTransaction on an instance of MockUserStore.
type UserStoreCreateInTransactionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 NewUser
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreCreateInTransactionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreCreateInTransactionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreCreatePasswordFunc describes the behavior when the
// CreatePassword method of the parent MockUserStore instance is invoked.
type UserStoreCreatePasswordFunc struct {
	defaultHook func(context.Context, int32, string) error
	hooks       []func(context.Context, int32, string) error
	history     []UserStoreCreatePasswordFuncCall
	mutex       sync.Mutex
}

// CreatePassword delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserStore) CreatePassword(v0 context.Context, v1 int32, v2 string) error {
	r0 := m.CreatePasswordFunc.nextHook()(v0, v1, v2)
	m.CreatePasswordFunc.appendCall(UserStoreCreatePasswordFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the CreatePassword
// method of the parent MockUserStore instance is invoked and the hook queue
// is empty.
func (f *UserStoreCreatePasswordFunc) SetDefaultHook(hook func(context.Context, int32, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreatePassword method of the parent MockUserStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserStoreCreatePasswordFunc) PushHook(hook func(context.Context, int32, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreCreatePasswordFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreCreatePasswordFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, string) error {
		return r0
	})
}

func (f *UserStoreCreatePasswordFunc) nextHook() func(context.Context, int32, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreCreatePasswordFunc) appendCall(r0 UserStoreCreatePasswordFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreCreatePasswordFuncCall objects
// describing the invocations of this function.
func (f *UserStoreCreatePasswordFunc) History() []UserStoreCreatePasswordFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreCreatePasswordFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreCreatePasswordFuncCall is an object that describes an invocation
// of method CreatePassword on an instance of MockUserStore.
type UserStoreCreatePasswordFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreCreatePasswordFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreCreatePasswordFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreCurrentUserAllowedExternalServicesFunc describes the behavior
// when the CurrentUserAllowedExternalServices method of the parent
// MockUserStore instance is invoked.
type UserStoreCurrentUserAllowedExternalServicesFunc struct {
	defaultHook func(context.Context) (conf.ExternalServiceMode, error)
	hooks       []func(context.Context) (conf.ExternalServiceMode, error)
	history     []UserStoreCurrentUserAllowedExternalServicesFuncCall
	mutex       sync.Mutex
}

// CurrentUserAllowedExternalServices delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockUserStore) CurrentUserAllowedExternalServices(v0 context.Context) (conf.ExternalServiceMode, error) {
	r0, r1 := m.CurrentUserAllowedExternalServicesFunc.nextHook()(v0)
	m.CurrentUserAllowedExternalServicesFunc.appendCall(UserStoreCurrentUserAllowedExternalServicesFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CurrentUserAllowedExternalServices method of the parent MockUserStore
// instance is invoked and the hook queue is empty.
func (f *UserStoreCurrentUserAllowedExternalServicesFunc) SetDefaultHook(hook func(context.Context) (conf.ExternalServiceMode, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CurrentUserAllowedExternalServices method of the parent MockUserStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *UserStoreCurrentUserAllowedExternalServicesFunc) PushHook(hook func(context.Context) (conf.ExternalServiceMode, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreCurrentUserAllowedExternalServicesFunc) SetDefaultReturn(r0 conf.ExternalServiceMode, r1 error) {
	f.SetDefaultHook(func(context.Context) (conf.ExternalServiceMode, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreCurrentUserAllowedExternalServicesFunc) PushReturn(r0 conf.ExternalServiceMode, r1 error) {
	f.PushHook(func(context.Context) (conf.ExternalServiceMode, error) {
		return r0, r1
	})
}

func (f *UserStoreCurrentUserAllowedExternalServicesFunc) nextHook() func(context.Context) (conf.ExternalServiceMode, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreCurrentUserAllowedExternalServicesFunc) appendCall(r0 UserStoreCurrentUserAllowedExternalServicesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UserStoreCurrentUserAllowedExternalServicesFuncCall objects describing
// the invocations of this function.
func (f *UserStoreCurrentUserAllowedExternalServicesFunc) History() []UserStoreCurrentUserAllowedExternalServicesFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreCurrentUserAllowedExternalServicesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreCurrentUserAllowedExternalServicesFuncCall is an object that
// describes an invocation of method CurrentUserAllowedExternalServices on
// an instance of MockUserStore.
type UserStoreCurrentUserAllowedExternalServicesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 conf.ExternalServiceMode
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreCurrentUserAllowedExternalServicesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreCurrentUserAllowedExternalServicesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreDeleteFunc describes the behavior when the Delete method of the
// parent MockUserStore instance is invoked.
type UserStoreDeleteFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []UserStoreDeleteFuncCall
	mutex       sync.Mutex
}

// Delete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) Delete(v0 context.Context, v1 int32) error {
	r0 := m.DeleteFunc.nextHook()(v0, v1)
	m.DeleteFunc.appendCall(UserStoreDeleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Delete method of the
// parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreDeleteFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Delete method of the parent MockUserStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreDeleteFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *UserStoreDeleteFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreDeleteFunc) appendCall(r0 UserStoreDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreDeleteFuncCall objects describing
// the invocations of this function.
func (f *UserStoreDeleteFunc) History() []UserStoreDeleteFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreDeleteFuncCall is an object that describes an invocation of
// method Delete on an instance of MockUserStore.
type UserStoreDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreDeletePasswordResetCodeFunc describes the behavior when the
// DeletePasswordResetCode method of the parent MockUserStore instance is
// invoked.
type UserStoreDeletePasswordResetCodeFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []UserStoreDeletePasswordResetCodeFuncCall
	mutex       sync.Mutex
}

// DeletePasswordResetCode delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUserStore) DeletePasswordResetCode(v0 context.Context, v1 int32) error {
	r0 := m.DeletePasswordResetCodeFunc.nextHook()(v0, v1)
	m.DeletePasswordResetCodeFunc.appendCall(UserStoreDeletePasswordResetCodeFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// DeletePasswordResetCode method of the parent MockUserStore instance is
// invoked and the hook queue is empty.
func (f *UserStoreDeletePasswordResetCodeFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeletePasswordResetCode method of the parent MockUserStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserStoreDeletePasswordResetCodeFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreDeletePasswordResetCodeFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreDeletePasswordResetCodeFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *UserStoreDeletePasswordResetCodeFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreDeletePasswordResetCodeFunc) appendCall(r0 UserStoreDeletePasswordResetCodeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreDeletePasswordResetCodeFuncCall
// objects describing the invocations of this function.
func (f *UserStoreDeletePasswordResetCodeFunc) History() []UserStoreDeletePasswordResetCodeFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreDeletePasswordResetCodeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreDeletePasswordResetCodeFuncCall is an object that describes an
// invocation of method DeletePasswordResetCode on an instance of
// MockUserStore.
type UserStoreDeletePasswordResetCodeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreDeletePasswordResetCodeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreDeletePasswordResetCodeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreDoneFunc describes the behavior when the Done method of the
// parent MockUserStore instance is invoked.
type UserStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []UserStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(UserStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockUserStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *UserStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *UserStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreDoneFunc) appendCall(r0 UserStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreDoneFuncCall objects describing
// the invocations of this function.
func (f *UserStoreDoneFunc) History() []UserStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreDoneFuncCall is an object that describes an invocation of method
// Done on an instance of MockUserStore.
type UserStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreExecFunc describes the behavior when the Exec method of the
// parent MockUserStore instance is invoked.
type UserStoreExecFunc struct {
	defaultHook func(context.Context, *sqlf.Query) error
	hooks       []func(context.Context, *sqlf.Query) error
	history     []UserStoreExecFuncCall
	mutex       sync.Mutex
}

// Exec delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) Exec(v0 context.Context, v1 *sqlf.Query) error {
	r0 := m.ExecFunc.nextHook()(v0, v1)
	m.ExecFunc.appendCall(UserStoreExecFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Exec method of the
// parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreExecFunc) SetDefaultHook(hook func(context.Context, *sqlf.Query) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Exec method of the parent MockUserStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *UserStoreExecFunc) PushHook(hook func(context.Context, *sqlf.Query) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreExecFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *sqlf.Query) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreExecFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *sqlf.Query) error {
		return r0
	})
}

func (f *UserStoreExecFunc) nextHook() func(context.Context, *sqlf.Query) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreExecFunc) appendCall(r0 UserStoreExecFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreExecFuncCall objects describing
// the invocations of this function.
func (f *UserStoreExecFunc) History() []UserStoreExecFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreExecFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreExecFuncCall is an object that describes an invocation of method
// Exec on an instance of MockUserStore.
type UserStoreExecFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sqlf.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreExecFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreExecFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreExecResultFunc describes the behavior when the ExecResult method
// of the parent MockUserStore instance is invoked.
type UserStoreExecResultFunc struct {
	defaultHook func(context.Context, *sqlf.Query) (sql.Result, error)
	hooks       []func(context.Context, *sqlf.Query) (sql.Result, error)
	history     []UserStoreExecResultFuncCall
	mutex       sync.Mutex
}

// ExecResult delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserStore) ExecResult(v0 context.Context, v1 *sqlf.Query) (sql.Result, error) {
	r0, r1 := m.ExecResultFunc.nextHook()(v0, v1)
	m.ExecResultFunc.appendCall(UserStoreExecResultFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ExecResult method of
// the parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreExecResultFunc) SetDefaultHook(hook func(context.Context, *sqlf.Query) (sql.Result, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExecResult method of the parent MockUserStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreExecResultFunc) PushHook(hook func(context.Context, *sqlf.Query) (sql.Result, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreExecResultFunc) SetDefaultReturn(r0 sql.Result, r1 error) {
	f.SetDefaultHook(func(context.Context, *sqlf.Query) (sql.Result, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreExecResultFunc) PushReturn(r0 sql.Result, r1 error) {
	f.PushHook(func(context.Context, *sqlf.Query) (sql.Result, error) {
		return r0, r1
	})
}

func (f *UserStoreExecResultFunc) nextHook() func(context.Context, *sqlf.Query) (sql.Result, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreExecResultFunc) appendCall(r0 UserStoreExecResultFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreExecResultFuncCall objects
// describing the invocations of this function.
func (f *UserStoreExecResultFunc) History() []UserStoreExecResultFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreExecResultFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreExecResultFuncCall is an object that describes an invocation of
// method ExecResult on an instance of MockUserStore.
type UserStoreExecResultFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sqlf.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 sql.Result
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreExecResultFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreExecResultFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreGetByCurrentAuthUserFunc describes the behavior when the
// GetByCurrentAuthUser method of the parent MockUserStore instance is
// invoked.
type UserStoreGetByCurrentAuthUserFunc struct {
	defaultHook func(context.Context) (*types.User, error)
	hooks       []func(context.Context) (*types.User, error)
	history     []UserStoreGetByCurrentAuthUserFuncCall
	mutex       sync.Mutex
}

// GetByCurrentAuthUser delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserStore) GetByCurrentAuthUser(v0 context.Context) (*types.User, error) {
	r0, r1 := m.GetByCurrentAuthUserFunc.nextHook()(v0)
	m.GetByCurrentAuthUserFunc.appendCall(UserStoreGetByCurrentAuthUserFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByCurrentAuthUser
// method of the parent MockUserStore instance is invoked and the hook queue
// is empty.
func (f *UserStoreGetByCurrentAuthUserFunc) SetDefaultHook(hook func(context.Context) (*types.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByCurrentAuthUser method of the parent MockUserStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserStoreGetByCurrentAuthUserFunc) PushHook(hook func(context.Context) (*types.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreGetByCurrentAuthUserFunc) SetDefaultReturn(r0 *types.User, r1 error) {
	f.SetDefaultHook(func(context.Context) (*types.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreGetByCurrentAuthUserFunc) PushReturn(r0 *types.User, r1 error) {
	f.PushHook(func(context.Context) (*types.User, error) {
		return r0, r1
	})
}

func (f *UserStoreGetByCurrentAuthUserFunc) nextHook() func(context.Context) (*types.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreGetByCurrentAuthUserFunc) appendCall(r0 UserStoreGetByCurrentAuthUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreGetByCurrentAuthUserFuncCall
// objects describing the invocations of this function.
func (f *UserStoreGetByCurrentAuthUserFunc) History() []UserStoreGetByCurrentAuthUserFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreGetByCurrentAuthUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreGetByCurrentAuthUserFuncCall is an object that describes an
// invocation of method GetByCurrentAuthUser on an instance of
// MockUserStore.
type UserStoreGetByCurrentAuthUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreGetByCurrentAuthUserFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreGetByCurrentAuthUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreGetByIDFunc describes the behavior when the GetByID method of
// the parent MockUserStore instance is invoked.
type UserStoreGetByIDFunc struct {
	defaultHook func(context.Context, int32) (*types.User, error)
	hooks       []func(context.Context, int32) (*types.User, error)
	history     []UserStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) GetByID(v0 context.Context, v1 int32) (*types.User, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(UserStoreGetByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int32) (*types.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockUserStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreGetByIDFunc) PushHook(hook func(context.Context, int32) (*types.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreGetByIDFunc) SetDefaultReturn(r0 *types.User, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (*types.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreGetByIDFunc) PushReturn(r0 *types.User, r1 error) {
	f.PushHook(func(context.Context, int32) (*types.User, error) {
		return r0, r1
	})
}

func (f *UserStoreGetByIDFunc) nextHook() func(context.Context, int32) (*types.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreGetByIDFunc) appendCall(r0 UserStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreGetByIDFuncCall objects describing
// the invocations of this function.
func (f *UserStoreGetByIDFunc) History() []UserStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreGetByIDFuncCall is an object that describes an invocation of
// method GetByID on an instance of MockUserStore.
type UserStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreGetByUsernameFunc describes the behavior when the GetByUsername
// method of the parent MockUserStore instance is invoked.
type UserStoreGetByUsernameFunc struct {
	defaultHook func(context.Context, string) (*types.User, error)
	hooks       []func(context.Context, string) (*types.User, error)
	history     []UserStoreGetByUsernameFuncCall
	mutex       sync.Mutex
}

// GetByUsername delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserStore) GetByUsername(v0 context.Context, v1 string) (*types.User, error) {
	r0, r1 := m.GetByUsernameFunc.nextHook()(v0, v1)
	m.GetByUsernameFunc.appendCall(UserStoreGetByUsernameFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByUsername method
// of the parent MockUserStore instance is invoked and the hook queue is
// empty.
func (f *UserStoreGetByUsernameFunc) SetDefaultHook(hook func(context.Context, string) (*types.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByUsername method of the parent MockUserStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserStoreGetByUsernameFunc) PushHook(hook func(context.Context, string) (*types.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreGetByUsernameFunc) SetDefaultReturn(r0 *types.User, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*types.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreGetByUsernameFunc) PushReturn(r0 *types.User, r1 error) {
	f.PushHook(func(context.Context, string) (*types.User, error) {
		return r0, r1
	})
}

func (f *UserStoreGetByUsernameFunc) nextHook() func(context.Context, string) (*types.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreGetByUsernameFunc) appendCall(r0 UserStoreGetByUsernameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreGetByUsernameFuncCall objects
// describing the invocations of this function.
func (f *UserStoreGetByUsernameFunc) History() []UserStoreGetByUsernameFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreGetByUsernameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreGetByUsernameFuncCall is an object that describes an invocation
// of method GetByUsername on an instance of MockUserStore.
type UserStoreGetByUsernameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreGetByUsernameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreGetByUsernameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreGetByUsernamesFunc describes the behavior when the
// GetByUsernames method of the parent MockUserStore instance is invoked.
type UserStoreGetByUsernamesFunc struct {
	defaultHook func(context.Context, ...string) ([]*types.User, error)
	hooks       []func(context.Context, ...string) ([]*types.User, error)
	history     []UserStoreGetByUsernamesFuncCall
	mutex       sync.Mutex
}

// GetByUsernames delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserStore) GetByUsernames(v0 context.Context, v1 ...string) ([]*types.User, error) {
	r0, r1 := m.GetByUsernamesFunc.nextHook()(v0, v1...)
	m.GetByUsernamesFunc.appendCall(UserStoreGetByUsernamesFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByUsernames
// method of the parent MockUserStore instance is invoked and the hook queue
// is empty.
func (f *UserStoreGetByUsernamesFunc) SetDefaultHook(hook func(context.Context, ...string) ([]*types.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByUsernames method of the parent MockUserStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserStoreGetByUsernamesFunc) PushHook(hook func(context.Context, ...string) ([]*types.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreGetByUsernamesFunc) SetDefaultReturn(r0 []*types.User, r1 error) {
	f.SetDefaultHook(func(context.Context, ...string) ([]*types.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreGetByUsernamesFunc) PushReturn(r0 []*types.User, r1 error) {
	f.PushHook(func(context.Context, ...string) ([]*types.User, error) {
		return r0, r1
	})
}

func (f *UserStoreGetByUsernamesFunc) nextHook() func(context.Context, ...string) ([]*types.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreGetByUsernamesFunc) appendCall(r0 UserStoreGetByUsernamesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreGetByUsernamesFuncCall objects
// describing the invocations of this function.
func (f *UserStoreGetByUsernamesFunc) History() []UserStoreGetByUsernamesFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreGetByUsernamesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreGetByUsernamesFuncCall is an object that describes an invocation
// of method GetByUsernames on an instance of MockUserStore.
type UserStoreGetByUsernamesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c UserStoreGetByUsernamesFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreGetByUsernamesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreGetByVerifiedEmailFunc describes the behavior when the
// GetByVerifiedEmail method of the parent MockUserStore instance is
// invoked.
type UserStoreGetByVerifiedEmailFunc struct {
	defaultHook func(context.Context, string) (*types.User, error)
	hooks       []func(context.Context, string) (*types.User, error)
	history     []UserStoreGetByVerifiedEmailFuncCall
	mutex       sync.Mutex
}

// GetByVerifiedEmail delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserStore) GetByVerifiedEmail(v0 context.Context, v1 string) (*types.User, error) {
	r0, r1 := m.GetByVerifiedEmailFunc.nextHook()(v0, v1)
	m.GetByVerifiedEmailFunc.appendCall(UserStoreGetByVerifiedEmailFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByVerifiedEmail
// method of the parent MockUserStore instance is invoked and the hook queue
// is empty.
func (f *UserStoreGetByVerifiedEmailFunc) SetDefaultHook(hook func(context.Context, string) (*types.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByVerifiedEmail method of the parent MockUserStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserStoreGetByVerifiedEmailFunc) PushHook(hook func(context.Context, string) (*types.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreGetByVerifiedEmailFunc) SetDefaultReturn(r0 *types.User, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*types.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreGetByVerifiedEmailFunc) PushReturn(r0 *types.User, r1 error) {
	f.PushHook(func(context.Context, string) (*types.User, error) {
		return r0, r1
	})
}

func (f *UserStoreGetByVerifiedEmailFunc) nextHook() func(context.Context, string) (*types.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreGetByVerifiedEmailFunc) appendCall(r0 UserStoreGetByVerifiedEmailFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreGetByVerifiedEmailFuncCall objects
// describing the invocations of this function.
func (f *UserStoreGetByVerifiedEmailFunc) History() []UserStoreGetByVerifiedEmailFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreGetByVerifiedEmailFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreGetByVerifiedEmailFuncCall is an object that describes an
// invocation of method GetByVerifiedEmail on an instance of MockUserStore.
type UserStoreGetByVerifiedEmailFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreGetByVerifiedEmailFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreGetByVerifiedEmailFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreHardDeleteFunc describes the behavior when the HardDelete method
// of the parent MockUserStore instance is invoked.
type UserStoreHardDeleteFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []UserStoreHardDeleteFuncCall
	mutex       sync.Mutex
}

// HardDelete delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserStore) HardDelete(v0 context.Context, v1 int32) error {
	r0 := m.HardDeleteFunc.nextHook()(v0, v1)
	m.HardDeleteFunc.appendCall(UserStoreHardDeleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the HardDelete method of
// the parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreHardDeleteFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// HardDelete method of the parent MockUserStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreHardDeleteFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreHardDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreHardDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *UserStoreHardDeleteFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreHardDeleteFunc) appendCall(r0 UserStoreHardDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreHardDeleteFuncCall objects
// describing the invocations of this function.
func (f *UserStoreHardDeleteFunc) History() []UserStoreHardDeleteFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreHardDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreHardDeleteFuncCall is an object that describes an invocation of
// method HardDelete on an instance of MockUserStore.
type UserStoreHardDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreHardDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreHardDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreHasTagFunc describes the behavior when the HasTag method of the
// parent MockUserStore instance is invoked.
type UserStoreHasTagFunc struct {
	defaultHook func(context.Context, int32, string) (bool, error)
	hooks       []func(context.Context, int32, string) (bool, error)
	history     []UserStoreHasTagFuncCall
	mutex       sync.Mutex
}

// HasTag delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) HasTag(v0 context.Context, v1 int32, v2 string) (bool, error) {
	r0, r1 := m.HasTagFunc.nextHook()(v0, v1, v2)
	m.HasTagFunc.appendCall(UserStoreHasTagFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the HasTag method of the
// parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreHasTagFunc) SetDefaultHook(hook func(context.Context, int32, string) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// HasTag method of the parent MockUserStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreHasTagFunc) PushHook(hook func(context.Context, int32, string) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreHasTagFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, string) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreHasTagFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int32, string) (bool, error) {
		return r0, r1
	})
}

func (f *UserStoreHasTagFunc) nextHook() func(context.Context, int32, string) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreHasTagFunc) appendCall(r0 UserStoreHasTagFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreHasTagFuncCall objects describing
// the invocations of this function.
func (f *UserStoreHasTagFunc) History() []UserStoreHasTagFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreHasTagFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreHasTagFuncCall is an object that describes an invocation of
// method HasTag on an instance of MockUserStore.
type UserStoreHasTagFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreHasTagFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreHasTagFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreInvalidateSessionsByIDFunc describes the behavior when the
// InvalidateSessionsByID method of the parent MockUserStore instance is
// invoked.
type UserStoreInvalidateSessionsByIDFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []UserStoreInvalidateSessionsByIDFuncCall
	mutex       sync.Mutex
}

// InvalidateSessionsByID delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUserStore) InvalidateSessionsByID(v0 context.Context, v1 int32) error {
	r0 := m.InvalidateSessionsByIDFunc.nextHook()(v0, v1)
	m.InvalidateSessionsByIDFunc.appendCall(UserStoreInvalidateSessionsByIDFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// InvalidateSessionsByID method of the parent MockUserStore instance is
// invoked and the hook queue is empty.
func (f *UserStoreInvalidateSessionsByIDFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// InvalidateSessionsByID method of the parent MockUserStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserStoreInvalidateSessionsByIDFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreInvalidateSessionsByIDFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreInvalidateSessionsByIDFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *UserStoreInvalidateSessionsByIDFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreInvalidateSessionsByIDFunc) appendCall(r0 UserStoreInvalidateSessionsByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreInvalidateSessionsByIDFuncCall
// objects describing the invocations of this function.
func (f *UserStoreInvalidateSessionsByIDFunc) History() []UserStoreInvalidateSessionsByIDFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreInvalidateSessionsByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreInvalidateSessionsByIDFuncCall is an object that describes an
// invocation of method InvalidateSessionsByID on an instance of
// MockUserStore.
type UserStoreInvalidateSessionsByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreInvalidateSessionsByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreInvalidateSessionsByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreIsPasswordFunc describes the behavior when the IsPassword method
// of the parent MockUserStore instance is invoked.
type UserStoreIsPasswordFunc struct {
	defaultHook func(context.Context, int32, string) (bool, error)
	hooks       []func(context.Context, int32, string) (bool, error)
	history     []UserStoreIsPasswordFuncCall
	mutex       sync.Mutex
}

// IsPassword delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserStore) IsPassword(v0 context.Context, v1 int32, v2 string) (bool, error) {
	r0, r1 := m.IsPasswordFunc.nextHook()(v0, v1, v2)
	m.IsPasswordFunc.appendCall(UserStoreIsPasswordFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IsPassword method of
// the parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreIsPasswordFunc) SetDefaultHook(hook func(context.Context, int32, string) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsPassword method of the parent MockUserStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreIsPasswordFunc) PushHook(hook func(context.Context, int32, string) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreIsPasswordFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, string) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreIsPasswordFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int32, string) (bool, error) {
		return r0, r1
	})
}

func (f *UserStoreIsPasswordFunc) nextHook() func(context.Context, int32, string) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreIsPasswordFunc) appendCall(r0 UserStoreIsPasswordFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreIsPasswordFuncCall objects
// describing the invocations of this function.
func (f *UserStoreIsPasswordFunc) History() []UserStoreIsPasswordFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreIsPasswordFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreIsPasswordFuncCall is an object that describes an invocation of
// method IsPassword on an instance of MockUserStore.
type UserStoreIsPasswordFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreIsPasswordFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreIsPasswordFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreListFunc describes the behavior when the List method of the
// parent MockUserStore instance is invoked.
type UserStoreListFunc struct {
	defaultHook func(context.Context, *UsersListOptions) ([]*types.User, error)
	hooks       []func(context.Context, *UsersListOptions) ([]*types.User, error)
	history     []UserStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) List(v0 context.Context, v1 *UsersListOptions) ([]*types.User, error) {
	r0, r1 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(UserStoreListFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreListFunc) SetDefaultHook(hook func(context.Context, *UsersListOptions) ([]*types.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockUserStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *UserStoreListFunc) PushHook(hook func(context.Context, *UsersListOptions) ([]*types.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreListFunc) SetDefaultReturn(r0 []*types.User, r1 error) {
	f.SetDefaultHook(func(context.Context, *UsersListOptions) ([]*types.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreListFunc) PushReturn(r0 []*types.User, r1 error) {
	f.PushHook(func(context.Context, *UsersListOptions) ([]*types.User, error) {
		return r0, r1
	})
}

func (f *UserStoreListFunc) nextHook() func(context.Context, *UsersListOptions) ([]*types.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreListFunc) appendCall(r0 UserStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreListFuncCall objects describing
// the invocations of this function.
func (f *UserStoreListFunc) History() []UserStoreListFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreListFuncCall is an object that describes an invocation of method
// List on an instance of MockUserStore.
type UserStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *UsersListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreListDatesFunc describes the behavior when the ListDates method
// of the parent MockUserStore instance is invoked.
type UserStoreListDatesFunc struct {
	defaultHook func(context.Context) ([]types.UserDates, error)
	hooks       []func(context.Context) ([]types.UserDates, error)
	history     []UserStoreListDatesFuncCall
	mutex       sync.Mutex
}

// ListDates delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) ListDates(v0 context.Context) ([]types.UserDates, error) {
	r0, r1 := m.ListDatesFunc.nextHook()(v0)
	m.ListDatesFunc.appendCall(UserStoreListDatesFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListDates method of
// the parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreListDatesFunc) SetDefaultHook(hook func(context.Context) ([]types.UserDates, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListDates method of the parent MockUserStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreListDatesFunc) PushHook(hook func(context.Context) ([]types.UserDates, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreListDatesFunc) SetDefaultReturn(r0 []types.UserDates, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]types.UserDates, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreListDatesFunc) PushReturn(r0 []types.UserDates, r1 error) {
	f.PushHook(func(context.Context) ([]types.UserDates, error) {
		return r0, r1
	})
}

func (f *UserStoreListDatesFunc) nextHook() func(context.Context) ([]types.UserDates, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreListDatesFunc) appendCall(r0 UserStoreListDatesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreListDatesFuncCall objects
// describing the invocations of this function.
func (f *UserStoreListDatesFunc) History() []UserStoreListDatesFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreListDatesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreListDatesFuncCall is an object that describes an invocation of
// method ListDates on an instance of MockUserStore.
type UserStoreListDatesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.UserDates
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreListDatesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreListDatesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc describes
// the behavior when the RandomizePasswordAndClearPasswordResetRateLimit
// method of the parent MockUserStore instance is invoked.
type UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []UserStoreRandomizePasswordAndClearPasswordResetRateLimitFuncCall
	mutex       sync.Mutex
}

// RandomizePasswordAndClearPasswordResetRateLimit delegates to the next
// hook function in the queue and stores the parameter and result values of
// this invocation.
func (m *MockUserStore) RandomizePasswordAndClearPasswordResetRateLimit(v0 context.Context, v1 int32) error {
	r0 := m.RandomizePasswordAndClearPasswordResetRateLimitFunc.nextHook()(v0, v1)
	m.RandomizePasswordAndClearPasswordResetRateLimitFunc.appendCall(UserStoreRandomizePasswordAndClearPasswordResetRateLimitFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// RandomizePasswordAndClearPasswordResetRateLimit method of the parent
// MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RandomizePasswordAndClearPasswordResetRateLimit method of the parent
// MockUserStore instance invokes the hook at the front of the queue and
// discards it. After the queue is empty, the default hook function is
// invoked for any future action.
func (f *UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc) appendCall(r0 UserStoreRandomizePasswordAndClearPasswordResetRateLimitFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UserStoreRandomizePasswordAndClearPasswordResetRateLimitFuncCall objects
// describing the invocations of this function.
func (f *UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc) History() []UserStoreRandomizePasswordAndClearPasswordResetRateLimitFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreRandomizePasswordAndClearPasswordResetRateLimitFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreRandomizePasswordAndClearPasswordResetRateLimitFuncCall is an
// object that describes an invocation of method
// RandomizePasswordAndClearPasswordResetRateLimit on an instance of
// MockUserStore.
type UserStoreRandomizePasswordAndClearPasswordResetRateLimitFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreRandomizePasswordAndClearPasswordResetRateLimitFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreRandomizePasswordAndClearPasswordResetRateLimitFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreRenewPasswordResetCodeFunc describes the behavior when the
// RenewPasswordResetCode method of the parent MockUserStore instance is
// invoked.
type UserStoreRenewPasswordResetCodeFunc struct {
	defaultHook func(context.Context, int32) (string, error)
	hooks       []func(context.Context, int32) (string, error)
	history     []UserStoreRenewPasswordResetCodeFuncCall
	mutex       sync.Mutex
}

// RenewPasswordResetCode delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUserStore) RenewPasswordResetCode(v0 context.Context, v1 int32) (string, error) {
	r0, r1 := m.RenewPasswordResetCodeFunc.nextHook()(v0, v1)
	m.RenewPasswordResetCodeFunc.appendCall(UserStoreRenewPasswordResetCodeFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// RenewPasswordResetCode method of the parent MockUserStore instance is
// invoked and the hook queue is empty.
func (f *UserStoreRenewPasswordResetCodeFunc) SetDefaultHook(hook func(context.Context, int32) (string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RenewPasswordResetCode method of the parent MockUserStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserStoreRenewPasswordResetCodeFunc) PushHook(hook func(context.Context, int32) (string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreRenewPasswordResetCodeFunc) SetDefaultReturn(r0 string, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreRenewPasswordResetCodeFunc) PushReturn(r0 string, r1 error) {
	f.PushHook(func(context.Context, int32) (string, error) {
		return r0, r1
	})
}

func (f *UserStoreRenewPasswordResetCodeFunc) nextHook() func(context.Context, int32) (string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreRenewPasswordResetCodeFunc) appendCall(r0 UserStoreRenewPasswordResetCodeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreRenewPasswordResetCodeFuncCall
// objects describing the invocations of this function.
func (f *UserStoreRenewPasswordResetCodeFunc) History() []UserStoreRenewPasswordResetCodeFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreRenewPasswordResetCodeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreRenewPasswordResetCodeFuncCall is an object that describes an
// invocation of method RenewPasswordResetCode on an instance of
// MockUserStore.
type UserStoreRenewPasswordResetCodeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreRenewPasswordResetCodeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreRenewPasswordResetCodeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreSetIsSiteAdminFunc describes the behavior when the
// SetIsSiteAdmin method of the parent MockUserStore instance is invoked.
type UserStoreSetIsSiteAdminFunc struct {
	defaultHook func(context.Context, int32, bool) error
	hooks       []func(context.Context, int32, bool) error
	history     []UserStoreSetIsSiteAdminFuncCall
	mutex       sync.Mutex
}

// SetIsSiteAdmin delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserStore) SetIsSiteAdmin(v0 context.Context, v1 int32, v2 bool) error {
	r0 := m.SetIsSiteAdminFunc.nextHook()(v0, v1, v2)
	m.SetIsSiteAdminFunc.appendCall(UserStoreSetIsSiteAdminFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetIsSiteAdmin
// method of the parent MockUserStore instance is invoked and the hook queue
// is empty.
func (f *UserStoreSetIsSiteAdminFunc) SetDefaultHook(hook func(context.Context, int32, bool) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetIsSiteAdmin method of the parent MockUserStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserStoreSetIsSiteAdminFunc) PushHook(hook func(context.Context, int32, bool) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreSetIsSiteAdminFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, bool) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreSetIsSiteAdminFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, bool) error {
		return r0
	})
}

func (f *UserStoreSetIsSiteAdminFunc) nextHook() func(context.Context, int32, bool) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreSetIsSiteAdminFunc) appendCall(r0 UserStoreSetIsSiteAdminFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreSetIsSiteAdminFuncCall objects
// describing the invocations of this function.
func (f *UserStoreSetIsSiteAdminFunc) History() []UserStoreSetIsSiteAdminFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreSetIsSiteAdminFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreSetIsSiteAdminFuncCall is an object that describes an invocation
// of method SetIsSiteAdmin on an instance of MockUserStore.
type UserStoreSetIsSiteAdminFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreSetIsSiteAdminFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreSetIsSiteAdminFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreSetPasswordFunc describes the behavior when the SetPassword
// method of the parent MockUserStore instance is invoked.
type UserStoreSetPasswordFunc struct {
	defaultHook func(context.Context, int32, string, string) (bool, error)
	hooks       []func(context.Context, int32, string, string) (bool, error)
	history     []UserStoreSetPasswordFuncCall
	mutex       sync.Mutex
}

// SetPassword delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserStore) SetPassword(v0 context.Context, v1 int32, v2 string, v3 string) (bool, error) {
	r0, r1 := m.SetPasswordFunc.nextHook()(v0, v1, v2, v3)
	m.SetPasswordFunc.appendCall(UserStoreSetPasswordFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SetPassword method
// of the parent MockUserStore instance is invoked and the hook queue is
// empty.
func (f *UserStoreSetPasswordFunc) SetDefaultHook(hook func(context.Context, int32, string, string) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetPassword method of the parent MockUserStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreSetPasswordFunc) PushHook(hook func(context.Context, int32, string, string) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreSetPasswordFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, string, string) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreSetPasswordFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int32, string, string) (bool, error) {
		return r0, r1
	})
}

func (f *UserStoreSetPasswordFunc) nextHook() func(context.Context, int32, string, string) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreSetPasswordFunc) appendCall(r0 UserStoreSetPasswordFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreSetPasswordFuncCall objects
// describing the invocations of this function.
func (f *UserStoreSetPasswordFunc) History() []UserStoreSetPasswordFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreSetPasswordFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreSetPasswordFuncCall is an object that describes an invocation of
// method SetPassword on an instance of MockUserStore.
type UserStoreSetPasswordFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreSetPasswordFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreSetPasswordFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreSetTagFunc describes the behavior when the SetTag method of the
// parent MockUserStore instance is invoked.
type UserStoreSetTagFunc struct {
	defaultHook func(context.Context, int32, string, bool) error
	hooks       []func(context.Context, int32, string, bool) error
	history     []UserStoreSetTagFuncCall
	mutex       sync.Mutex
}

// SetTag delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) SetTag(v0 context.Context, v1 int32, v2 string, v3 bool) error {
	r0 := m.SetTagFunc.nextHook()(v0, v1, v2, v3)
	m.SetTagFunc.appendCall(UserStoreSetTagFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetTag method of the
// parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreSetTagFunc) SetDefaultHook(hook func(context.Context, int32, string, bool) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetTag method of the parent MockUserStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreSetTagFunc) PushHook(hook func(context.Context, int32, string, bool) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreSetTagFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, string, bool) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreSetTagFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, string, bool) error {
		return r0
	})
}

func (f *UserStoreSetTagFunc) nextHook() func(context.Context, int32, string, bool) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreSetTagFunc) appendCall(r0 UserStoreSetTagFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreSetTagFuncCall objects describing
// the invocations of this function.
func (f *UserStoreSetTagFunc) History() []UserStoreSetTagFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreSetTagFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreSetTagFuncCall is an object that describes an invocation of
// method SetTag on an instance of MockUserStore.
type UserStoreSetTagFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreSetTagFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreSetTagFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreTagsFunc describes the behavior when the Tags method of the
// parent MockUserStore instance is invoked.
type UserStoreTagsFunc struct {
	defaultHook func(context.Context, int32) (map[string]bool, error)
	hooks       []func(context.Context, int32) (map[string]bool, error)
	history     []UserStoreTagsFuncCall
	mutex       sync.Mutex
}

// Tags delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) Tags(v0 context.Context, v1 int32) (map[string]bool, error) {
	r0, r1 := m.TagsFunc.nextHook()(v0, v1)
	m.TagsFunc.appendCall(UserStoreTagsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Tags method of the
// parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreTagsFunc) SetDefaultHook(hook func(context.Context, int32) (map[string]bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Tags method of the parent MockUserStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *UserStoreTagsFunc) PushHook(hook func(context.Context, int32) (map[string]bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreTagsFunc) SetDefaultReturn(r0 map[string]bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (map[string]bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreTagsFunc) PushReturn(r0 map[string]bool, r1 error) {
	f.PushHook(func(context.Context, int32) (map[string]bool, error) {
		return r0, r1
	})
}

func (f *UserStoreTagsFunc) nextHook() func(context.Context, int32) (map[string]bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreTagsFunc) appendCall(r0 UserStoreTagsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreTagsFuncCall objects describing
// the invocations of this function.
func (f *UserStoreTagsFunc) History() []UserStoreTagsFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreTagsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreTagsFuncCall is an object that describes an invocation of method
// Tags on an instance of MockUserStore.
type UserStoreTagsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[string]bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreTagsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreTagsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreTransactFunc describes the behavior when the Transact method of
// the parent MockUserStore instance is invoked.
type UserStoreTransactFunc struct {
	defaultHook func(context.Context) (UserStore, error)
	hooks       []func(context.Context) (UserStore, error)
	history     []UserStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) Transact(v0 context.Context) (UserStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(UserStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreTransactFunc) SetDefaultHook(hook func(context.Context) (UserStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockUserStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreTransactFunc) PushHook(hook func(context.Context) (UserStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreTransactFunc) SetDefaultReturn(r0 UserStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (UserStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreTransactFunc) PushReturn(r0 UserStore, r1 error) {
	f.PushHook(func(context.Context) (UserStore, error) {
		return r0, r1
	})
}

func (f *UserStoreTransactFunc) nextHook() func(context.Context) (UserStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreTransactFunc) appendCall(r0 UserStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *UserStoreTransactFunc) History() []UserStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreTransactFuncCall is an object that describes an invocation of
// method Transact on an instance of MockUserStore.
type UserStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 UserStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreUpdateFunc describes the behavior when the Update method of the
// parent MockUserStore instance is invoked.
type UserStoreUpdateFunc struct {
	defaultHook func(context.Context, int32, UserUpdate) error
	hooks       []func(context.Context, int32, UserUpdate) error
	history     []UserStoreUpdateFuncCall
	mutex       sync.Mutex
}

// Update delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) Update(v0 context.Context, v1 int32, v2 UserUpdate) error {
	r0 := m.UpdateFunc.nextHook()(v0, v1, v2)
	m.UpdateFunc.appendCall(UserStoreUpdateFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Update method of the
// parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreUpdateFunc) SetDefaultHook(hook func(context.Context, int32, UserUpdate) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Update method of the parent MockUserStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreUpdateFunc) PushHook(hook func(context.Context, int32, UserUpdate) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreUpdateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, UserUpdate) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreUpdateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, UserUpdate) error {
		return r0
	})
}

func (f *UserStoreUpdateFunc) nextHook() func(context.Context, int32, UserUpdate) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreUpdateFunc) appendCall(r0 UserStoreUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreUpdateFuncCall objects describing
// the invocations of this function.
func (f *UserStoreUpdateFunc) History() []UserStoreUpdateFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreUpdateFuncCall is an object that describes an invocation of
// method Update on an instance of MockUserStore.
type UserStoreUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 UserUpdate
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreUpdatePasswordFunc describes the behavior when the
// UpdatePassword method of the parent MockUserStore instance is invoked.
type UserStoreUpdatePasswordFunc struct {
	defaultHook func(context.Context, int32, string, string) error
	hooks       []func(context.Context, int32, string, string) error
	history     []UserStoreUpdatePasswordFuncCall
	mutex       sync.Mutex
}

// UpdatePassword delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserStore) UpdatePassword(v0 context.Context, v1 int32, v2 string, v3 string) error {
	r0 := m.UpdatePasswordFunc.nextHook()(v0, v1, v2, v3)
	m.UpdatePasswordFunc.appendCall(UserStoreUpdatePasswordFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UpdatePassword
// method of the parent MockUserStore instance is invoked and the hook queue
// is empty.
func (f *UserStoreUpdatePasswordFunc) SetDefaultHook(hook func(context.Context, int32, string, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdatePassword method of the parent MockUserStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserStoreUpdatePasswordFunc) PushHook(hook func(context.Context, int32, string, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreUpdatePasswordFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, string, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreUpdatePasswordFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, string, string) error {
		return r0
	})
}

func (f *UserStoreUpdatePasswordFunc) nextHook() func(context.Context, int32, string, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreUpdatePasswordFunc) appendCall(r0 UserStoreUpdatePasswordFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreUpdatePasswordFuncCall objects
// describing the invocations of this function.
func (f *UserStoreUpdatePasswordFunc) History() []UserStoreUpdatePasswordFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreUpdatePasswordFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreUpdatePasswordFuncCall is an object that describes an invocation
// of method UpdatePassword on an instance of MockUserStore.
type UserStoreUpdatePasswordFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreUpdatePasswordFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreUpdatePasswordFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreUserAllowedExternalServicesFunc describes the behavior when the
// UserAllowedExternalServices method of the parent MockUserStore instance
// is invoked.
type UserStoreUserAllowedExternalServicesFunc struct {
	defaultHook func(context.Context, int32) (conf.ExternalServiceMode, error)
	hooks       []func(context.Context, int32) (conf.ExternalServiceMode, error)
	history     []UserStoreUserAllowedExternalServicesFuncCall
	mutex       sync.Mutex
}

// UserAllowedExternalServices delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockUserStore) UserAllowedExternalServices(v0 context.Context, v1 int32) (conf.ExternalServiceMode, error) {
	r0, r1 := m.UserAllowedExternalServicesFunc.nextHook()(v0, v1)
	m.UserAllowedExternalServicesFunc.appendCall(UserStoreUserAllowedExternalServicesFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// UserAllowedExternalServices method of the parent MockUserStore instance
// is invoked and the hook queue is empty.
func (f *UserStoreUserAllowedExternalServicesFunc) SetDefaultHook(hook func(context.Context, int32) (conf.ExternalServiceMode, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UserAllowedExternalServices method of the parent MockUserStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserStoreUserAllowedExternalServicesFunc) PushHook(hook func(context.Context, int32) (conf.ExternalServiceMode, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreUserAllowedExternalServicesFunc) SetDefaultReturn(r0 conf.ExternalServiceMode, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (conf.ExternalServiceMode, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreUserAllowedExternalServicesFunc) PushReturn(r0 conf.ExternalServiceMode, r1 error) {
	f.PushHook(func(context.Context, int32) (conf.ExternalServiceMode, error) {
		return r0, r1
	})
}

func (f *UserStoreUserAllowedExternalServicesFunc) nextHook() func(context.Context, int32) (conf.ExternalServiceMode, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreUserAllowedExternalServicesFunc) appendCall(r0 UserStoreUserAllowedExternalServicesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UserStoreUserAllowedExternalServicesFuncCall objects describing the
// invocations of this function.
func (f *UserStoreUserAllowedExternalServicesFunc) History() []UserStoreUserAllowedExternalServicesFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreUserAllowedExternalServicesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreUserAllowedExternalServicesFuncCall is an object that describes
// an invocation of method UserAllowedExternalServices on an instance of
// MockUserStore.
type UserStoreUserAllowedExternalServicesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 conf.ExternalServiceMode
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreUserAllowedExternalServicesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreUserAllowedExternalServicesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreWithFunc describes the behavior when the With method of the
// parent MockUserStore instance is invoked.
type UserStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) UserStore
	hooks       []func(basestore.ShareableStore) UserStore
	history     []UserStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) With(v0 basestore.ShareableStore) UserStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(UserStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) UserStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockUserStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *UserStoreWithFunc) PushHook(hook func(basestore.ShareableStore) UserStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreWithFunc) SetDefaultReturn(r0 UserStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) UserStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreWithFunc) PushReturn(r0 UserStore) {
	f.PushHook(func(basestore.ShareableStore) UserStore {
		return r0
	})
}

func (f *UserStoreWithFunc) nextHook() func(basestore.ShareableStore) UserStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreWithFunc) appendCall(r0 UserStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreWithFuncCall objects describing
// the invocations of this function.
func (f *UserStoreWithFunc) History() []UserStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreWithFuncCall is an object that describes an invocation of method
// With on an instance of MockUserStore.
type UserStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 UserStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockWebhookLogStore is a mock implementation of the WebhookLogStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockWebhookLogStore struct {
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *WebhookLogStoreCountFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *WebhookLogStoreCreateFunc
	// DeleteStaleFunc is an instance of a mock function object controlling
	// the behavior of the method DeleteStale.
	DeleteStaleFunc *WebhookLogStoreDeleteStaleFunc
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *WebhookLogStoreGetByIDFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *WebhookLogStoreHandleFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *WebhookLogStoreListFunc
}

// NewMockWebhookLogStore creates a new mock of the WebhookLogStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockWebhookLogStore() *MockWebhookLogStore {
	return &MockWebhookLogStore{
		CountFunc: &WebhookLogStoreCountFunc{
			defaultHook: func(context.Context, WebhookLogListOpts) (r0 int64, r1 error) {
				return
			},
		},
		CreateFunc: &WebhookLogStoreCreateFunc{
			defaultHook: func(context.Context, *types.WebhookLog) (r0 error) {
				return
			},
		},
		DeleteStaleFunc: &WebhookLogStoreDeleteStaleFunc{
			defaultHook: func(context.Context, time.Duration) (r0 error) {
				return
			},
		},
		GetByIDFunc: &WebhookLogStoreGetByIDFunc{
			defaultHook: func(context.Context, int64) (r0 *types.WebhookLog, r1 error) {
				return
			},
		},
		HandleFunc: &WebhookLogStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		ListFunc: &WebhookLogStoreListFunc{
			defaultHook: func(context.Context, WebhookLogListOpts) (r0 []*types.WebhookLog, r1 int64, r2 error) {
				return
			},
		},
	}
}

// NewStrictMockWebhookLogStore creates a new mock of the WebhookLogStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockWebhookLogStore() *MockWebhookLogStore {
	return &MockWebhookLogStore{
		CountFunc: &WebhookLogStoreCountFunc{
			defaultHook: func(context.Context, WebhookLogListOpts) (int64, error) {
				panic("unexpected invocation of MockWebhookLogStore.Count")
			},
		},
		CreateFunc: &WebhookLogStoreCreateFunc{
			defaultHook: func(context.Context, *types.WebhookLog) error {
				panic("unexpected invocation of MockWebhookLogStore.Create")
			},
		},
		DeleteStaleFunc: &WebhookLogStoreDeleteStaleFunc{
			defaultHook: func(context.Context, time.Duration) error {
				panic("unexpected invocation of MockWebhookLogStore.DeleteStale")
			},
		},
		GetByIDFunc: &WebhookLogStoreGetByIDFunc{
			defaultHook: func(context.Context, int64) (*types.WebhookLog, error) {
				panic("unexpected invocation of MockWebhookLogStore.GetByID")
			},
		},
		HandleFunc: &WebhookLogStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockWebhookLogStore.Handle")
			},
		},
		ListFunc: &WebhookLogStoreListFunc{
			defaultHook: func(context.Context, WebhookLogListOpts) ([]*types.WebhookLog, int64, error) {
				panic("unexpected invocation of MockWebhookLogStore.List")
			},
		},
	}
}

// NewMockWebhookLogStoreFrom creates a new mock of the MockWebhookLogStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockWebhookLogStoreFrom(i WebhookLogStore) *MockWebhookLogStore {
	return &MockWebhookLogStore{
		CountFunc: &WebhookLogStoreCountFunc{
			defaultHook: i.Count,
		},
		CreateFunc: &WebhookLogStoreCreateFunc{
			defaultHook: i.Create,
		},
		DeleteStaleFunc: &WebhookLogStoreDeleteStaleFunc{
			defaultHook: i.DeleteStale,
		},
		GetByIDFunc: &WebhookLogStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		HandleFunc: &WebhookLogStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListFunc: &WebhookLogStoreListFunc{
			defaultHook: i.List,
		},
	}
}

// WebhookLogStoreCountFunc describes the behavior when the Count method of
// the parent MockWebhookLogStore instance is invoked.
type WebhookLogStoreCountFunc struct {
	defaultHook func(context.Context, WebhookLogListOpts) (int64, error)
	hooks       []func(context.Context, WebhookLogListOpts) (int64, error)
	history     []WebhookLogStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWebhookLogStore) Count(v0 context.Context, v1 WebhookLogListOpts) (int64, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(WebhookLogStoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockWebhookLogStore instance is invoked and the hook queue is
// empty.
func (f *WebhookLogStoreCountFunc) SetDefaultHook(hook func(context.Context, WebhookLogListOpts) (int64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockWebhookLogStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *WebhookLogStoreCountFunc) PushHook(hook func(context.Context, WebhookLogListOpts) (int64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WebhookLogStoreCountFunc) SetDefaultReturn(r0 int64, r1 error) {
	f.SetDefaultHook(func(context.Context, WebhookLogListOpts) (int64, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WebhookLogStoreCountFunc) PushReturn(r0 int64, r1 error) {
	f.PushHook(func(context.Context, WebhookLogListOpts) (int64, error) {
		return r0, r1
	})
}

func (f *WebhookLogStoreCountFunc) nextHook() func(context.Context, WebhookLogListOpts) (int64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WebhookLogStoreCountFunc) appendCall(r0 WebhookLogStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WebhookLogStoreCountFuncCall objects
// describing the invocations of this function.
func (f *WebhookLogStoreCountFunc) History() []WebhookLogStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]WebhookLogStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WebhookLogStoreCountFuncCall is an object that describes an invocation of
// method Count on an instance of MockWebhookLogStore.
type WebhookLogStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 WebhookLogListOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WebhookLogStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WebhookLogStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// WebhookLogStoreCreateFunc describes the behavior when the Create method
// of the parent MockWebhookLogStore instance is invoked.
type WebhookLogStoreCreateFunc struct {
	defaultHook func(context.Context, *types.WebhookLog) error
	hooks       []func(context.Context, *types.WebhookLog) error
	history     []WebhookLogStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWebhookLogStore) Create(v0 context.Context, v1 *types.WebhookLog) error {
	r0 := m.CreateFunc.nextHook()(v0, v1)
	m.CreateFunc.appendCall(WebhookLogStoreCreateFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockWebhookLogStore instance is invoked and the hook queue is
// empty.
func (f *WebhookLogStoreCreateFunc) SetDefaultHook(hook func(context.Context, *types.WebhookLog) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockWebhookLogStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *WebhookLogStoreCreateFunc) PushHook(hook func(context.Context, *types.WebhookLog) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WebhookLogStoreCreateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *types.WebhookLog) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WebhookLogStoreCreateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *types.WebhookLog) error {
		return r0
	})
}

func (f *WebhookLogStoreCreateFunc) nextHook() func(context.Context, *types.WebhookLog) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WebhookLogStoreCreateFunc) appendCall(r0 WebhookLogStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WebhookLogStoreCreateFuncCall objects
// describing the invocations of this function.
func (f *WebhookLogStoreCreateFunc) History() []WebhookLogStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]WebhookLogStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WebhookLogStoreCreateFuncCall is an object that describes an invocation
// of method Create on an instance of MockWebhookLogStore.
type WebhookLogStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.WebhookLog
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WebhookLogStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WebhookLogStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// WebhookLogStoreDeleteStaleFunc describes the behavior when the
// DeleteStale method of the parent MockWebhookLogStore instance is invoked.
type WebhookLogStoreDeleteStaleFunc struct {
	defaultHook func(context.Context, time.Duration) error
	hooks       []func(context.Context, time.Duration) error
	history     []WebhookLogStoreDeleteStaleFuncCall
	mutex       sync.Mutex
}

// DeleteStale delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockWebhookLogStore) DeleteStale(v0 context.Context, v1 time.Duration) error {
	r0 := m.DeleteStaleFunc.nextHook()(v0, v1)
	m.DeleteStaleFunc.appendCall(WebhookLogStoreDeleteStaleFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteStale method
// of the parent MockWebhookLogStore instance is invoked and the hook queue
// is empty.
func (f *WebhookLogStoreDeleteStaleFunc) SetDefaultHook(hook func(context.Context, time.Duration) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteStale method of the parent MockWebhookLogStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *WebhookLogStoreDeleteStaleFunc) PushHook(hook func(context.Context, time.Duration) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WebhookLogStoreDeleteStaleFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, time.Duration) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WebhookLogStoreDeleteStaleFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, time.Duration) error {
		return r0
	})
}

func (f *WebhookLogStoreDeleteStaleFunc) nextHook() func(context.Context, time.Duration) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WebhookLogStoreDeleteStaleFunc) appendCall(r0 WebhookLogStoreDeleteStaleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WebhookLogStoreDeleteStaleFuncCall objects
// describing the invocations of this function.
func (f *WebhookLogStoreDeleteStaleFunc) History() []WebhookLogStoreDeleteStaleFuncCall {
	f.mutex.Lock()
	history := make([]WebhookLogStoreDeleteStaleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WebhookLogStoreDeleteStaleFuncCall is an object that describes an
// invocation of method DeleteStale on an instance of MockWebhookLogStore.
type WebhookLogStoreDeleteStaleFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Duration
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WebhookLogStoreDeleteStaleFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WebhookLogStoreDeleteStaleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// WebhookLogStoreGetByIDFunc describes the behavior when the GetByID method
// of the parent MockWebhookLogStore instance is invoked.
type WebhookLogStoreGetByIDFunc struct {
	defaultHook func(context.Context, int64) (*types.WebhookLog, error)
	hooks       []func(context.Context, int64) (*types.WebhookLog, error)
	history     []WebhookLogStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWebhookLogStore) GetByID(v0 context.Context, v1 int64) (*types.WebhookLog, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(WebhookLogStoreGetByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockWebhookLogStore instance is invoked and the hook queue is
// empty.
func (f *WebhookLogStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int64) (*types.WebhookLog, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockWebhookLogStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *WebhookLogStoreGetByIDFunc) PushHook(hook func(context.Context, int64) (*types.WebhookLog, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WebhookLogStoreGetByIDFunc) SetDefaultReturn(r0 *types.WebhookLog, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (*types.WebhookLog, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WebhookLogStoreGetByIDFunc) PushReturn(r0 *types.WebhookLog, r1 error) {
	f.PushHook(func(context.Context, int64) (*types.WebhookLog, error) {
		return r0, r1
	})
}

func (f *WebhookLogStoreGetByIDFunc) nextHook() func(context.Context, int64) (*types.WebhookLog, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WebhookLogStoreGetByIDFunc) appendCall(r0 WebhookLogStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WebhookLogStoreGetByIDFuncCall objects
// describing the invocations of this function.
func (f *WebhookLogStoreGetByIDFunc) History() []WebhookLogStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]WebhookLogStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WebhookLogStoreGetByIDFuncCall is an object that describes an invocation
// of method GetByID on an instance of MockWebhookLogStore.
type WebhookLogStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.WebhookLog
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WebhookLogStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WebhookLogStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// WebhookLogStoreHandleFunc describes the behavior when the Handle method
// of the parent MockWebhookLogStore instance is invoked.
type WebhookLogStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []WebhookLogStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWebhookLogStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(WebhookLogStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockWebhookLogStore instance is invoked and the hook queue is
// empty.
func (f *WebhookLogStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockWebhookLogStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *WebhookLogStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WebhookLogStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WebhookLogStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *WebhookLogStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WebhookLogStoreHandleFunc) appendCall(r0 WebhookLogStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WebhookLogStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *WebhookLogStoreHandleFunc) History() []WebhookLogStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]WebhookLogStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WebhookLogStoreHandleFuncCall is an object that describes an invocation
// of method Handle on an instance of MockWebhookLogStore.
type WebhookLogStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WebhookLogStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WebhookLogStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// WebhookLogStoreListFunc describes the behavior when the List method of
// the parent MockWebhookLogStore instance is invoked.
type WebhookLogStoreListFunc struct {
	defaultHook func(context.Context, WebhookLogListOpts) ([]*types.WebhookLog, int64, error)
	hooks       []func(context.Context, WebhookLogListOpts) ([]*types.WebhookLog, int64, error)
	history     []WebhookLogStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWebhookLogStore) List(v0 context.Context, v1 WebhookLogListOpts) ([]*types.WebhookLog, int64, error) {
	r0, r1, r2 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(WebhookLogStoreListFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockWebhookLogStore instance is invoked and the hook queue is
// empty.
func (f *WebhookLogStoreListFunc) SetDefaultHook(hook func(context.Context, WebhookLogListOpts) ([]*types.WebhookLog, int64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockWebhookLogStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *WebhookLogStoreListFunc) PushHook(hook func(context.Context, WebhookLogListOpts) ([]*types.WebhookLog, int64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WebhookLogStoreListFunc) SetDefaultReturn(r0 []*types.WebhookLog, r1 int64, r2 error) {
	f.SetDefaultHook(func(context.Context, WebhookLogListOpts) ([]*types.WebhookLog, int64, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WebhookLogStoreListFunc) PushReturn(r0 []*types.WebhookLog, r1 int64, r2 error) {
	f.PushHook(func(context.Context, WebhookLogListOpts) ([]*types.WebhookLog, int64, error) {
		return r0, r1, r2
	})
}

func (f *WebhookLogStoreListFunc) nextHook() func(context.Context, WebhookLogListOpts) ([]*types.WebhookLog, int64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WebhookLogStoreListFunc) appendCall(r0 WebhookLogStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WebhookLogStoreListFuncCall objects
// describing the invocations of this function.
func (f *WebhookLogStoreListFunc) History() []WebhookLogStoreListFuncCall {
	f.mutex.Lock()
	history := make([]WebhookLogStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WebhookLogStoreListFuncCall is an object that describes an invocation of
// method List on an instance of MockWebhookLogStore.
type WebhookLogStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 WebhookLogListOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.WebhookLog
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int64
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WebhookLogStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WebhookLogStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}
