// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package database

import (
	"context"
	"database/sql"
	"sync"
	"time"

	uuid "github.com/google/uuid"
	sqlf "github.com/keegancsmith/sqlf"
	api "github.com/sourcegraph/sourcegraph/internal/api"
	conf "github.com/sourcegraph/sourcegraph/internal/conf"
	basestore "github.com/sourcegraph/sourcegraph/internal/database/basestore"
	encryption "github.com/sourcegraph/sourcegraph/internal/encryption"
	extsvc "github.com/sourcegraph/sourcegraph/internal/extsvc"
	auth "github.com/sourcegraph/sourcegraph/internal/extsvc/auth"
	featureflag "github.com/sourcegraph/sourcegraph/internal/featureflag"
	temporarysettings "github.com/sourcegraph/sourcegraph/internal/temporarysettings"
	types "github.com/sourcegraph/sourcegraph/internal/types"
	schema "github.com/sourcegraph/sourcegraph/schema"
	zoekt "github.com/sourcegraph/zoekt"
)

// MockAccessRequestStore is a mock implementation of the AccessRequestStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockAccessRequestStore struct {
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *AccessRequestStoreCountFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *AccessRequestStoreCreateFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *AccessRequestStoreDoneFunc
	// GetByEmailFunc is an instance of a mock function object controlling
	// the behavior of the method GetByEmail.
	GetByEmailFunc *AccessRequestStoreGetByEmailFunc
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *AccessRequestStoreGetByIDFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *AccessRequestStoreHandleFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *AccessRequestStoreListFunc
	// UpdateFunc is an instance of a mock function object controlling the
	// behavior of the method Update.
	UpdateFunc *AccessRequestStoreUpdateFunc
	// WithTransactFunc is an instance of a mock function object controlling
	// the behavior of the method WithTransact.
	WithTransactFunc *AccessRequestStoreWithTransactFunc
}

// NewMockAccessRequestStore creates a new mock of the AccessRequestStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockAccessRequestStore() *MockAccessRequestStore {
	return &MockAccessRequestStore{
		CountFunc: &AccessRequestStoreCountFunc{
			defaultHook: func(context.Context, *AccessRequestsFilterArgs) (r0 int, r1 error) {
				return
			},
		},
		CreateFunc: &AccessRequestStoreCreateFunc{
			defaultHook: func(context.Context, *types.AccessRequest) (r0 *types.AccessRequest, r1 error) {
				return
			},
		},
		DoneFunc: &AccessRequestStoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		GetByEmailFunc: &AccessRequestStoreGetByEmailFunc{
			defaultHook: func(context.Context, string) (r0 *types.AccessRequest, r1 error) {
				return
			},
		},
		GetByIDFunc: &AccessRequestStoreGetByIDFunc{
			defaultHook: func(context.Context, int32) (r0 *types.AccessRequest, r1 error) {
				return
			},
		},
		HandleFunc: &AccessRequestStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		ListFunc: &AccessRequestStoreListFunc{
			defaultHook: func(context.Context, *AccessRequestsFilterArgs, *PaginationArgs) (r0 []*types.AccessRequest, r1 error) {
				return
			},
		},
		UpdateFunc: &AccessRequestStoreUpdateFunc{
			defaultHook: func(context.Context, *types.AccessRequest) (r0 *types.AccessRequest, r1 error) {
				return
			},
		},
		WithTransactFunc: &AccessRequestStoreWithTransactFunc{
			defaultHook: func(context.Context, func(AccessRequestStore) error) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockAccessRequestStore creates a new mock of the
// AccessRequestStore interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockAccessRequestStore() *MockAccessRequestStore {
	return &MockAccessRequestStore{
		CountFunc: &AccessRequestStoreCountFunc{
			defaultHook: func(context.Context, *AccessRequestsFilterArgs) (int, error) {
				panic("unexpected invocation of MockAccessRequestStore.Count")
			},
		},
		CreateFunc: &AccessRequestStoreCreateFunc{
			defaultHook: func(context.Context, *types.AccessRequest) (*types.AccessRequest, error) {
				panic("unexpected invocation of MockAccessRequestStore.Create")
			},
		},
		DoneFunc: &AccessRequestStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockAccessRequestStore.Done")
			},
		},
		GetByEmailFunc: &AccessRequestStoreGetByEmailFunc{
			defaultHook: func(context.Context, string) (*types.AccessRequest, error) {
				panic("unexpected invocation of MockAccessRequestStore.GetByEmail")
			},
		},
		GetByIDFunc: &AccessRequestStoreGetByIDFunc{
			defaultHook: func(context.Context, int32) (*types.AccessRequest, error) {
				panic("unexpected invocation of MockAccessRequestStore.GetByID")
			},
		},
		HandleFunc: &AccessRequestStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockAccessRequestStore.Handle")
			},
		},
		ListFunc: &AccessRequestStoreListFunc{
			defaultHook: func(context.Context, *AccessRequestsFilterArgs, *PaginationArgs) ([]*types.AccessRequest, error) {
				panic("unexpected invocation of MockAccessRequestStore.List")
			},
		},
		UpdateFunc: &AccessRequestStoreUpdateFunc{
			defaultHook: func(context.Context, *types.AccessRequest) (*types.AccessRequest, error) {
				panic("unexpected invocation of MockAccessRequestStore.Update")
			},
		},
		WithTransactFunc: &AccessRequestStoreWithTransactFunc{
			defaultHook: func(context.Context, func(AccessRequestStore) error) error {
				panic("unexpected invocation of MockAccessRequestStore.WithTransact")
			},
		},
	}
}

// NewMockAccessRequestStoreFrom creates a new mock of the
// MockAccessRequestStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockAccessRequestStoreFrom(i AccessRequestStore) *MockAccessRequestStore {
	return &MockAccessRequestStore{
		CountFunc: &AccessRequestStoreCountFunc{
			defaultHook: i.Count,
		},
		CreateFunc: &AccessRequestStoreCreateFunc{
			defaultHook: i.Create,
		},
		DoneFunc: &AccessRequestStoreDoneFunc{
			defaultHook: i.Done,
		},
		GetByEmailFunc: &AccessRequestStoreGetByEmailFunc{
			defaultHook: i.GetByEmail,
		},
		GetByIDFunc: &AccessRequestStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		HandleFunc: &AccessRequestStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListFunc: &AccessRequestStoreListFunc{
			defaultHook: i.List,
		},
		UpdateFunc: &AccessRequestStoreUpdateFunc{
			defaultHook: i.Update,
		},
		WithTransactFunc: &AccessRequestStoreWithTransactFunc{
			defaultHook: i.WithTransact,
		},
	}
}

// AccessRequestStoreCountFunc describes the behavior when the Count method
// of the parent MockAccessRequestStore instance is invoked.
type AccessRequestStoreCountFunc struct {
	defaultHook func(context.Context, *AccessRequestsFilterArgs) (int, error)
	hooks       []func(context.Context, *AccessRequestsFilterArgs) (int, error)
	history     []AccessRequestStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccessRequestStore) Count(v0 context.Context, v1 *AccessRequestsFilterArgs) (int, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(AccessRequestStoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockAccessRequestStore instance is invoked and the hook queue is
// empty.
func (f *AccessRequestStoreCountFunc) SetDefaultHook(hook func(context.Context, *AccessRequestsFilterArgs) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockAccessRequestStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AccessRequestStoreCountFunc) PushHook(hook func(context.Context, *AccessRequestsFilterArgs) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccessRequestStoreCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, *AccessRequestsFilterArgs) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccessRequestStoreCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, *AccessRequestsFilterArgs) (int, error) {
		return r0, r1
	})
}

func (f *AccessRequestStoreCountFunc) nextHook() func(context.Context, *AccessRequestsFilterArgs) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessRequestStoreCountFunc) appendCall(r0 AccessRequestStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessRequestStoreCountFuncCall objects
// describing the invocations of this function.
func (f *AccessRequestStoreCountFunc) History() []AccessRequestStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]AccessRequestStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessRequestStoreCountFuncCall is an object that describes an invocation
// of method Count on an instance of MockAccessRequestStore.
type AccessRequestStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *AccessRequestsFilterArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessRequestStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessRequestStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AccessRequestStoreCreateFunc describes the behavior when the Create
// method of the parent MockAccessRequestStore instance is invoked.
type AccessRequestStoreCreateFunc struct {
	defaultHook func(context.Context, *types.AccessRequest) (*types.AccessRequest, error)
	hooks       []func(context.Context, *types.AccessRequest) (*types.AccessRequest, error)
	history     []AccessRequestStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccessRequestStore) Create(v0 context.Context, v1 *types.AccessRequest) (*types.AccessRequest, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1)
	m.CreateFunc.appendCall(AccessRequestStoreCreateFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockAccessRequestStore instance is invoked and the hook queue is
// empty.
func (f *AccessRequestStoreCreateFunc) SetDefaultHook(hook func(context.Context, *types.AccessRequest) (*types.AccessRequest, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockAccessRequestStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AccessRequestStoreCreateFunc) PushHook(hook func(context.Context, *types.AccessRequest) (*types.AccessRequest, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccessRequestStoreCreateFunc) SetDefaultReturn(r0 *types.AccessRequest, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.AccessRequest) (*types.AccessRequest, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccessRequestStoreCreateFunc) PushReturn(r0 *types.AccessRequest, r1 error) {
	f.PushHook(func(context.Context, *types.AccessRequest) (*types.AccessRequest, error) {
		return r0, r1
	})
}

func (f *AccessRequestStoreCreateFunc) nextHook() func(context.Context, *types.AccessRequest) (*types.AccessRequest, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessRequestStoreCreateFunc) appendCall(r0 AccessRequestStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessRequestStoreCreateFuncCall objects
// describing the invocations of this function.
func (f *AccessRequestStoreCreateFunc) History() []AccessRequestStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]AccessRequestStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessRequestStoreCreateFuncCall is an object that describes an
// invocation of method Create on an instance of MockAccessRequestStore.
type AccessRequestStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.AccessRequest
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.AccessRequest
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessRequestStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessRequestStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AccessRequestStoreDoneFunc describes the behavior when the Done method of
// the parent MockAccessRequestStore instance is invoked.
type AccessRequestStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []AccessRequestStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccessRequestStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(AccessRequestStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockAccessRequestStore instance is invoked and the hook queue is
// empty.
func (f *AccessRequestStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockAccessRequestStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AccessRequestStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccessRequestStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccessRequestStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *AccessRequestStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessRequestStoreDoneFunc) appendCall(r0 AccessRequestStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessRequestStoreDoneFuncCall objects
// describing the invocations of this function.
func (f *AccessRequestStoreDoneFunc) History() []AccessRequestStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]AccessRequestStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessRequestStoreDoneFuncCall is an object that describes an invocation
// of method Done on an instance of MockAccessRequestStore.
type AccessRequestStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessRequestStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessRequestStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AccessRequestStoreGetByEmailFunc describes the behavior when the
// GetByEmail method of the parent MockAccessRequestStore instance is
// invoked.
type AccessRequestStoreGetByEmailFunc struct {
	defaultHook func(context.Context, string) (*types.AccessRequest, error)
	hooks       []func(context.Context, string) (*types.AccessRequest, error)
	history     []AccessRequestStoreGetByEmailFuncCall
	mutex       sync.Mutex
}

// GetByEmail delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAccessRequestStore) GetByEmail(v0 context.Context, v1 string) (*types.AccessRequest, error) {
	r0, r1 := m.GetByEmailFunc.nextHook()(v0, v1)
	m.GetByEmailFunc.appendCall(AccessRequestStoreGetByEmailFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByEmail method of
// the parent MockAccessRequestStore instance is invoked and the hook queue
// is empty.
func (f *AccessRequestStoreGetByEmailFunc) SetDefaultHook(hook func(context.Context, string) (*types.AccessRequest, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByEmail method of the parent MockAccessRequestStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *AccessRequestStoreGetByEmailFunc) PushHook(hook func(context.Context, string) (*types.AccessRequest, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccessRequestStoreGetByEmailFunc) SetDefaultReturn(r0 *types.AccessRequest, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*types.AccessRequest, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccessRequestStoreGetByEmailFunc) PushReturn(r0 *types.AccessRequest, r1 error) {
	f.PushHook(func(context.Context, string) (*types.AccessRequest, error) {
		return r0, r1
	})
}

func (f *AccessRequestStoreGetByEmailFunc) nextHook() func(context.Context, string) (*types.AccessRequest, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessRequestStoreGetByEmailFunc) appendCall(r0 AccessRequestStoreGetByEmailFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessRequestStoreGetByEmailFuncCall
// objects describing the invocations of this function.
func (f *AccessRequestStoreGetByEmailFunc) History() []AccessRequestStoreGetByEmailFuncCall {
	f.mutex.Lock()
	history := make([]AccessRequestStoreGetByEmailFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessRequestStoreGetByEmailFuncCall is an object that describes an
// invocation of method GetByEmail on an instance of MockAccessRequestStore.
type AccessRequestStoreGetByEmailFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.AccessRequest
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessRequestStoreGetByEmailFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessRequestStoreGetByEmailFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AccessRequestStoreGetByIDFunc describes the behavior when the GetByID
// method of the parent MockAccessRequestStore instance is invoked.
type AccessRequestStoreGetByIDFunc struct {
	defaultHook func(context.Context, int32) (*types.AccessRequest, error)
	hooks       []func(context.Context, int32) (*types.AccessRequest, error)
	history     []AccessRequestStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccessRequestStore) GetByID(v0 context.Context, v1 int32) (*types.AccessRequest, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(AccessRequestStoreGetByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockAccessRequestStore instance is invoked and the hook queue
// is empty.
func (f *AccessRequestStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int32) (*types.AccessRequest, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockAccessRequestStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AccessRequestStoreGetByIDFunc) PushHook(hook func(context.Context, int32) (*types.AccessRequest, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccessRequestStoreGetByIDFunc) SetDefaultReturn(r0 *types.AccessRequest, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (*types.AccessRequest, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccessRequestStoreGetByIDFunc) PushReturn(r0 *types.AccessRequest, r1 error) {
	f.PushHook(func(context.Context, int32) (*types.AccessRequest, error) {
		return r0, r1
	})
}

func (f *AccessRequestStoreGetByIDFunc) nextHook() func(context.Context, int32) (*types.AccessRequest, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessRequestStoreGetByIDFunc) appendCall(r0 AccessRequestStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessRequestStoreGetByIDFuncCall objects
// describing the invocations of this function.
func (f *AccessRequestStoreGetByIDFunc) History() []AccessRequestStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]AccessRequestStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessRequestStoreGetByIDFuncCall is an object that describes an
// invocation of method GetByID on an instance of MockAccessRequestStore.
type AccessRequestStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.AccessRequest
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessRequestStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessRequestStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AccessRequestStoreHandleFunc describes the behavior when the Handle
// method of the parent MockAccessRequestStore instance is invoked.
type AccessRequestStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []AccessRequestStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccessRequestStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(AccessRequestStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockAccessRequestStore instance is invoked and the hook queue is
// empty.
func (f *AccessRequestStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockAccessRequestStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AccessRequestStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccessRequestStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccessRequestStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *AccessRequestStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessRequestStoreHandleFunc) appendCall(r0 AccessRequestStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessRequestStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *AccessRequestStoreHandleFunc) History() []AccessRequestStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]AccessRequestStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessRequestStoreHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of MockAccessRequestStore.
type AccessRequestStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessRequestStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessRequestStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AccessRequestStoreListFunc describes the behavior when the List method of
// the parent MockAccessRequestStore instance is invoked.
type AccessRequestStoreListFunc struct {
	defaultHook func(context.Context, *AccessRequestsFilterArgs, *PaginationArgs) ([]*types.AccessRequest, error)
	hooks       []func(context.Context, *AccessRequestsFilterArgs, *PaginationArgs) ([]*types.AccessRequest, error)
	history     []AccessRequestStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccessRequestStore) List(v0 context.Context, v1 *AccessRequestsFilterArgs, v2 *PaginationArgs) ([]*types.AccessRequest, error) {
	r0, r1 := m.ListFunc.nextHook()(v0, v1, v2)
	m.ListFunc.appendCall(AccessRequestStoreListFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockAccessRequestStore instance is invoked and the hook queue is
// empty.
func (f *AccessRequestStoreListFunc) SetDefaultHook(hook func(context.Context, *AccessRequestsFilterArgs, *PaginationArgs) ([]*types.AccessRequest, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockAccessRequestStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AccessRequestStoreListFunc) PushHook(hook func(context.Context, *AccessRequestsFilterArgs, *PaginationArgs) ([]*types.AccessRequest, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccessRequestStoreListFunc) SetDefaultReturn(r0 []*types.AccessRequest, r1 error) {
	f.SetDefaultHook(func(context.Context, *AccessRequestsFilterArgs, *PaginationArgs) ([]*types.AccessRequest, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccessRequestStoreListFunc) PushReturn(r0 []*types.AccessRequest, r1 error) {
	f.PushHook(func(context.Context, *AccessRequestsFilterArgs, *PaginationArgs) ([]*types.AccessRequest, error) {
		return r0, r1
	})
}

func (f *AccessRequestStoreListFunc) nextHook() func(context.Context, *AccessRequestsFilterArgs, *PaginationArgs) ([]*types.AccessRequest, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessRequestStoreListFunc) appendCall(r0 AccessRequestStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessRequestStoreListFuncCall objects
// describing the invocations of this function.
func (f *AccessRequestStoreListFunc) History() []AccessRequestStoreListFuncCall {
	f.mutex.Lock()
	history := make([]AccessRequestStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessRequestStoreListFuncCall is an object that describes an invocation
// of method List on an instance of MockAccessRequestStore.
type AccessRequestStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *AccessRequestsFilterArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *PaginationArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.AccessRequest
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessRequestStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessRequestStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AccessRequestStoreUpdateFunc describes the behavior when the Update
// method of the parent MockAccessRequestStore instance is invoked.
type AccessRequestStoreUpdateFunc struct {
	defaultHook func(context.Context, *types.AccessRequest) (*types.AccessRequest, error)
	hooks       []func(context.Context, *types.AccessRequest) (*types.AccessRequest, error)
	history     []AccessRequestStoreUpdateFuncCall
	mutex       sync.Mutex
}

// Update delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccessRequestStore) Update(v0 context.Context, v1 *types.AccessRequest) (*types.AccessRequest, error) {
	r0, r1 := m.UpdateFunc.nextHook()(v0, v1)
	m.UpdateFunc.appendCall(AccessRequestStoreUpdateFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Update method of the
// parent MockAccessRequestStore instance is invoked and the hook queue is
// empty.
func (f *AccessRequestStoreUpdateFunc) SetDefaultHook(hook func(context.Context, *types.AccessRequest) (*types.AccessRequest, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Update method of the parent MockAccessRequestStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AccessRequestStoreUpdateFunc) PushHook(hook func(context.Context, *types.AccessRequest) (*types.AccessRequest, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccessRequestStoreUpdateFunc) SetDefaultReturn(r0 *types.AccessRequest, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.AccessRequest) (*types.AccessRequest, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccessRequestStoreUpdateFunc) PushReturn(r0 *types.AccessRequest, r1 error) {
	f.PushHook(func(context.Context, *types.AccessRequest) (*types.AccessRequest, error) {
		return r0, r1
	})
}

func (f *AccessRequestStoreUpdateFunc) nextHook() func(context.Context, *types.AccessRequest) (*types.AccessRequest, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessRequestStoreUpdateFunc) appendCall(r0 AccessRequestStoreUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessRequestStoreUpdateFuncCall objects
// describing the invocations of this function.
func (f *AccessRequestStoreUpdateFunc) History() []AccessRequestStoreUpdateFuncCall {
	f.mutex.Lock()
	history := make([]AccessRequestStoreUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessRequestStoreUpdateFuncCall is an object that describes an
// invocation of method Update on an instance of MockAccessRequestStore.
type AccessRequestStoreUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.AccessRequest
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.AccessRequest
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessRequestStoreUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessRequestStoreUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AccessRequestStoreWithTransactFunc describes the behavior when the
// WithTransact method of the parent MockAccessRequestStore instance is
// invoked.
type AccessRequestStoreWithTransactFunc struct {
	defaultHook func(context.Context, func(AccessRequestStore) error) error
	hooks       []func(context.Context, func(AccessRequestStore) error) error
	history     []AccessRequestStoreWithTransactFuncCall
	mutex       sync.Mutex
}

// WithTransact delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAccessRequestStore) WithTransact(v0 context.Context, v1 func(AccessRequestStore) error) error {
	r0 := m.WithTransactFunc.nextHook()(v0, v1)
	m.WithTransactFunc.appendCall(AccessRequestStoreWithTransactFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithTransact method
// of the parent MockAccessRequestStore instance is invoked and the hook
// queue is empty.
func (f *AccessRequestStoreWithTransactFunc) SetDefaultHook(hook func(context.Context, func(AccessRequestStore) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithTransact method of the parent MockAccessRequestStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *AccessRequestStoreWithTransactFunc) PushHook(hook func(context.Context, func(AccessRequestStore) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccessRequestStoreWithTransactFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, func(AccessRequestStore) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccessRequestStoreWithTransactFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, func(AccessRequestStore) error) error {
		return r0
	})
}

func (f *AccessRequestStoreWithTransactFunc) nextHook() func(context.Context, func(AccessRequestStore) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessRequestStoreWithTransactFunc) appendCall(r0 AccessRequestStoreWithTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessRequestStoreWithTransactFuncCall
// objects describing the invocations of this function.
func (f *AccessRequestStoreWithTransactFunc) History() []AccessRequestStoreWithTransactFuncCall {
	f.mutex.Lock()
	history := make([]AccessRequestStoreWithTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessRequestStoreWithTransactFuncCall is an object that describes an
// invocation of method WithTransact on an instance of
// MockAccessRequestStore.
type AccessRequestStoreWithTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 func(AccessRequestStore) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessRequestStoreWithTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessRequestStoreWithTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockAccessTokenStore is a mock implementation of the AccessTokenStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockAccessTokenStore struct {
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *AccessTokenStoreCountFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *AccessTokenStoreCreateFunc
	// CreateInternalFunc is an instance of a mock function object
	// controlling the behavior of the method CreateInternal.
	CreateInternalFunc *AccessTokenStoreCreateInternalFunc
	// DeleteByIDFunc is an instance of a mock function object controlling
	// the behavior of the method DeleteByID.
	DeleteByIDFunc *AccessTokenStoreDeleteByIDFunc
	// DeleteByTokenFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteByToken.
	DeleteByTokenFunc *AccessTokenStoreDeleteByTokenFunc
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *AccessTokenStoreGetByIDFunc
	// GetByTokenFunc is an instance of a mock function object controlling
	// the behavior of the method GetByToken.
	GetByTokenFunc *AccessTokenStoreGetByTokenFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *AccessTokenStoreHandleFunc
	// HardDeleteByIDFunc is an instance of a mock function object
	// controlling the behavior of the method HardDeleteByID.
	HardDeleteByIDFunc *AccessTokenStoreHardDeleteByIDFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *AccessTokenStoreListFunc
	// LookupFunc is an instance of a mock function object controlling the
	// behavior of the method Lookup.
	LookupFunc *AccessTokenStoreLookupFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *AccessTokenStoreWithFunc
	// WithTransactFunc is an instance of a mock function object controlling
	// the behavior of the method WithTransact.
	WithTransactFunc *AccessTokenStoreWithTransactFunc
}

// NewMockAccessTokenStore creates a new mock of the AccessTokenStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockAccessTokenStore() *MockAccessTokenStore {
	return &MockAccessTokenStore{
		CountFunc: &AccessTokenStoreCountFunc{
			defaultHook: func(context.Context, AccessTokensListOptions) (r0 int, r1 error) {
				return
			},
		},
		CreateFunc: &AccessTokenStoreCreateFunc{
			defaultHook: func(context.Context, int32, []string, string, int32) (r0 int64, r1 string, r2 error) {
				return
			},
		},
		CreateInternalFunc: &AccessTokenStoreCreateInternalFunc{
			defaultHook: func(context.Context, int32, []string, string, int32) (r0 int64, r1 string, r2 error) {
				return
			},
		},
		DeleteByIDFunc: &AccessTokenStoreDeleteByIDFunc{
			defaultHook: func(context.Context, int64) (r0 error) {
				return
			},
		},
		DeleteByTokenFunc: &AccessTokenStoreDeleteByTokenFunc{
			defaultHook: func(context.Context, string) (r0 error) {
				return
			},
		},
		GetByIDFunc: &AccessTokenStoreGetByIDFunc{
			defaultHook: func(context.Context, int64) (r0 *AccessToken, r1 error) {
				return
			},
		},
		GetByTokenFunc: &AccessTokenStoreGetByTokenFunc{
			defaultHook: func(context.Context, string) (r0 *AccessToken, r1 error) {
				return
			},
		},
		HandleFunc: &AccessTokenStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		HardDeleteByIDFunc: &AccessTokenStoreHardDeleteByIDFunc{
			defaultHook: func(context.Context, int64) (r0 error) {
				return
			},
		},
		ListFunc: &AccessTokenStoreListFunc{
			defaultHook: func(context.Context, AccessTokensListOptions) (r0 []*AccessToken, r1 error) {
				return
			},
		},
		LookupFunc: &AccessTokenStoreLookupFunc{
			defaultHook: func(context.Context, string, string) (r0 int32, r1 error) {
				return
			},
		},
		WithFunc: &AccessTokenStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 AccessTokenStore) {
				return
			},
		},
		WithTransactFunc: &AccessTokenStoreWithTransactFunc{
			defaultHook: func(context.Context, func(AccessTokenStore) error) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockAccessTokenStore creates a new mock of the AccessTokenStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockAccessTokenStore() *MockAccessTokenStore {
	return &MockAccessTokenStore{
		CountFunc: &AccessTokenStoreCountFunc{
			defaultHook: func(context.Context, AccessTokensListOptions) (int, error) {
				panic("unexpected invocation of MockAccessTokenStore.Count")
			},
		},
		CreateFunc: &AccessTokenStoreCreateFunc{
			defaultHook: func(context.Context, int32, []string, string, int32) (int64, string, error) {
				panic("unexpected invocation of MockAccessTokenStore.Create")
			},
		},
		CreateInternalFunc: &AccessTokenStoreCreateInternalFunc{
			defaultHook: func(context.Context, int32, []string, string, int32) (int64, string, error) {
				panic("unexpected invocation of MockAccessTokenStore.CreateInternal")
			},
		},
		DeleteByIDFunc: &AccessTokenStoreDeleteByIDFunc{
			defaultHook: func(context.Context, int64) error {
				panic("unexpected invocation of MockAccessTokenStore.DeleteByID")
			},
		},
		DeleteByTokenFunc: &AccessTokenStoreDeleteByTokenFunc{
			defaultHook: func(context.Context, string) error {
				panic("unexpected invocation of MockAccessTokenStore.DeleteByToken")
			},
		},
		GetByIDFunc: &AccessTokenStoreGetByIDFunc{
			defaultHook: func(context.Context, int64) (*AccessToken, error) {
				panic("unexpected invocation of MockAccessTokenStore.GetByID")
			},
		},
		GetByTokenFunc: &AccessTokenStoreGetByTokenFunc{
			defaultHook: func(context.Context, string) (*AccessToken, error) {
				panic("unexpected invocation of MockAccessTokenStore.GetByToken")
			},
		},
		HandleFunc: &AccessTokenStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockAccessTokenStore.Handle")
			},
		},
		HardDeleteByIDFunc: &AccessTokenStoreHardDeleteByIDFunc{
			defaultHook: func(context.Context, int64) error {
				panic("unexpected invocation of MockAccessTokenStore.HardDeleteByID")
			},
		},
		ListFunc: &AccessTokenStoreListFunc{
			defaultHook: func(context.Context, AccessTokensListOptions) ([]*AccessToken, error) {
				panic("unexpected invocation of MockAccessTokenStore.List")
			},
		},
		LookupFunc: &AccessTokenStoreLookupFunc{
			defaultHook: func(context.Context, string, string) (int32, error) {
				panic("unexpected invocation of MockAccessTokenStore.Lookup")
			},
		},
		WithFunc: &AccessTokenStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) AccessTokenStore {
				panic("unexpected invocation of MockAccessTokenStore.With")
			},
		},
		WithTransactFunc: &AccessTokenStoreWithTransactFunc{
			defaultHook: func(context.Context, func(AccessTokenStore) error) error {
				panic("unexpected invocation of MockAccessTokenStore.WithTransact")
			},
		},
	}
}

// NewMockAccessTokenStoreFrom creates a new mock of the
// MockAccessTokenStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockAccessTokenStoreFrom(i AccessTokenStore) *MockAccessTokenStore {
	return &MockAccessTokenStore{
		CountFunc: &AccessTokenStoreCountFunc{
			defaultHook: i.Count,
		},
		CreateFunc: &AccessTokenStoreCreateFunc{
			defaultHook: i.Create,
		},
		CreateInternalFunc: &AccessTokenStoreCreateInternalFunc{
			defaultHook: i.CreateInternal,
		},
		DeleteByIDFunc: &AccessTokenStoreDeleteByIDFunc{
			defaultHook: i.DeleteByID,
		},
		DeleteByTokenFunc: &AccessTokenStoreDeleteByTokenFunc{
			defaultHook: i.DeleteByToken,
		},
		GetByIDFunc: &AccessTokenStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		GetByTokenFunc: &AccessTokenStoreGetByTokenFunc{
			defaultHook: i.GetByToken,
		},
		HandleFunc: &AccessTokenStoreHandleFunc{
			defaultHook: i.Handle,
		},
		HardDeleteByIDFunc: &AccessTokenStoreHardDeleteByIDFunc{
			defaultHook: i.HardDeleteByID,
		},
		ListFunc: &AccessTokenStoreListFunc{
			defaultHook: i.List,
		},
		LookupFunc: &AccessTokenStoreLookupFunc{
			defaultHook: i.Lookup,
		},
		WithFunc: &AccessTokenStoreWithFunc{
			defaultHook: i.With,
		},
		WithTransactFunc: &AccessTokenStoreWithTransactFunc{
			defaultHook: i.WithTransact,
		},
	}
}

// AccessTokenStoreCountFunc describes the behavior when the Count method of
// the parent MockAccessTokenStore instance is invoked.
type AccessTokenStoreCountFunc struct {
	defaultHook func(context.Context, AccessTokensListOptions) (int, error)
	hooks       []func(context.Context, AccessTokensListOptions) (int, error)
	history     []AccessTokenStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccessTokenStore) Count(v0 context.Context, v1 AccessTokensListOptions) (int, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(AccessTokenStoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockAccessTokenStore instance is invoked and the hook queue is
// empty.
func (f *AccessTokenStoreCountFunc) SetDefaultHook(hook func(context.Context, AccessTokensListOptions) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockAccessTokenStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *AccessTokenStoreCountFunc) PushHook(hook func(context.Context, AccessTokensListOptions) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccessTokenStoreCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, AccessTokensListOptions) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccessTokenStoreCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, AccessTokensListOptions) (int, error) {
		return r0, r1
	})
}

func (f *AccessTokenStoreCountFunc) nextHook() func(context.Context, AccessTokensListOptions) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreCountFunc) appendCall(r0 AccessTokenStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreCountFuncCall objects
// describing the invocations of this function.
func (f *AccessTokenStoreCountFunc) History() []AccessTokenStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreCountFuncCall is an object that describes an invocation
// of method Count on an instance of MockAccessTokenStore.
type AccessTokenStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 AccessTokensListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AccessTokenStoreCreateFunc describes the behavior when the Create method
// of the parent MockAccessTokenStore instance is invoked.
type AccessTokenStoreCreateFunc struct {
	defaultHook func(context.Context, int32, []string, string, int32) (int64, string, error)
	hooks       []func(context.Context, int32, []string, string, int32) (int64, string, error)
	history     []AccessTokenStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccessTokenStore) Create(v0 context.Context, v1 int32, v2 []string, v3 string, v4 int32) (int64, string, error) {
	r0, r1, r2 := m.CreateFunc.nextHook()(v0, v1, v2, v3, v4)
	m.CreateFunc.appendCall(AccessTokenStoreCreateFuncCall{v0, v1, v2, v3, v4, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockAccessTokenStore instance is invoked and the hook queue is
// empty.
func (f *AccessTokenStoreCreateFunc) SetDefaultHook(hook func(context.Context, int32, []string, string, int32) (int64, string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockAccessTokenStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AccessTokenStoreCreateFunc) PushHook(hook func(context.Context, int32, []string, string, int32) (int64, string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccessTokenStoreCreateFunc) SetDefaultReturn(r0 int64, r1 string, r2 error) {
	f.SetDefaultHook(func(context.Context, int32, []string, string, int32) (int64, string, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccessTokenStoreCreateFunc) PushReturn(r0 int64, r1 string, r2 error) {
	f.PushHook(func(context.Context, int32, []string, string, int32) (int64, string, error) {
		return r0, r1, r2
	})
}

func (f *AccessTokenStoreCreateFunc) nextHook() func(context.Context, int32, []string, string, int32) (int64, string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreCreateFunc) appendCall(r0 AccessTokenStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreCreateFuncCall objects
// describing the invocations of this function.
func (f *AccessTokenStoreCreateFunc) History() []AccessTokenStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreCreateFuncCall is an object that describes an invocation
// of method Create on an instance of MockAccessTokenStore.
type AccessTokenStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 string
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// AccessTokenStoreCreateInternalFunc describes the behavior when the
// CreateInternal method of the parent MockAccessTokenStore instance is
// invoked.
type AccessTokenStoreCreateInternalFunc struct {
	defaultHook func(context.Context, int32, []string, string, int32) (int64, string, error)
	hooks       []func(context.Context, int32, []string, string, int32) (int64, string, error)
	history     []AccessTokenStoreCreateInternalFuncCall
	mutex       sync.Mutex
}

// CreateInternal delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockAccessTokenStore) CreateInternal(v0 context.Context, v1 int32, v2 []string, v3 string, v4 int32) (int64, string, error) {
	r0, r1, r2 := m.CreateInternalFunc.nextHook()(v0, v1, v2, v3, v4)
	m.CreateInternalFunc.appendCall(AccessTokenStoreCreateInternalFuncCall{v0, v1, v2, v3, v4, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the CreateInternal
// method of the parent MockAccessTokenStore instance is invoked and the
// hook queue is empty.
func (f *AccessTokenStoreCreateInternalFunc) SetDefaultHook(hook func(context.Context, int32, []string, string, int32) (int64, string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateInternal method of the parent MockAccessTokenStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *AccessTokenStoreCreateInternalFunc) PushHook(hook func(context.Context, int32, []string, string, int32) (int64, string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccessTokenStoreCreateInternalFunc) SetDefaultReturn(r0 int64, r1 string, r2 error) {
	f.SetDefaultHook(func(context.Context, int32, []string, string, int32) (int64, string, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccessTokenStoreCreateInternalFunc) PushReturn(r0 int64, r1 string, r2 error) {
	f.PushHook(func(context.Context, int32, []string, string, int32) (int64, string, error) {
		return r0, r1, r2
	})
}

func (f *AccessTokenStoreCreateInternalFunc) nextHook() func(context.Context, int32, []string, string, int32) (int64, string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreCreateInternalFunc) appendCall(r0 AccessTokenStoreCreateInternalFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreCreateInternalFuncCall
// objects describing the invocations of this function.
func (f *AccessTokenStoreCreateInternalFunc) History() []AccessTokenStoreCreateInternalFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreCreateInternalFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreCreateInternalFuncCall is an object that describes an
// invocation of method CreateInternal on an instance of
// MockAccessTokenStore.
type AccessTokenStoreCreateInternalFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 string
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreCreateInternalFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreCreateInternalFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// AccessTokenStoreDeleteByIDFunc describes the behavior when the DeleteByID
// method of the parent MockAccessTokenStore instance is invoked.
type AccessTokenStoreDeleteByIDFunc struct {
	defaultHook func(context.Context, int64) error
	hooks       []func(context.Context, int64) error
	history     []AccessTokenStoreDeleteByIDFuncCall
	mutex       sync.Mutex
}

// DeleteByID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAccessTokenStore) DeleteByID(v0 context.Context, v1 int64) error {
	r0 := m.DeleteByIDFunc.nextHook()(v0, v1)
	m.DeleteByIDFunc.appendCall(AccessTokenStoreDeleteByIDFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteByID method of
// the parent MockAccessTokenStore instance is invoked and the hook queue is
// empty.
func (f *AccessTokenStoreDeleteByIDFunc) SetDefaultHook(hook func(context.Context, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteByID method of the parent MockAccessTokenStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AccessTokenStoreDeleteByIDFunc) PushHook(hook func(context.Context, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccessTokenStoreDeleteByIDFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccessTokenStoreDeleteByIDFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64) error {
		return r0
	})
}

func (f *AccessTokenStoreDeleteByIDFunc) nextHook() func(context.Context, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreDeleteByIDFunc) appendCall(r0 AccessTokenStoreDeleteByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreDeleteByIDFuncCall objects
// describing the invocations of this function.
func (f *AccessTokenStoreDeleteByIDFunc) History() []AccessTokenStoreDeleteByIDFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreDeleteByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreDeleteByIDFuncCall is an object that describes an
// invocation of method DeleteByID on an instance of MockAccessTokenStore.
type AccessTokenStoreDeleteByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreDeleteByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreDeleteByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AccessTokenStoreDeleteByTokenFunc describes the behavior when the
// DeleteByToken method of the parent MockAccessTokenStore instance is
// invoked.
type AccessTokenStoreDeleteByTokenFunc struct {
	defaultHook func(context.Context, string) error
	hooks       []func(context.Context, string) error
	history     []AccessTokenStoreDeleteByTokenFuncCall
	mutex       sync.Mutex
}

// DeleteByToken delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAccessTokenStore) DeleteByToken(v0 context.Context, v1 string) error {
	r0 := m.DeleteByTokenFunc.nextHook()(v0, v1)
	m.DeleteByTokenFunc.appendCall(AccessTokenStoreDeleteByTokenFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteByToken method
// of the parent MockAccessTokenStore instance is invoked and the hook queue
// is empty.
func (f *AccessTokenStoreDeleteByTokenFunc) SetDefaultHook(hook func(context.Context, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteByToken method of the parent MockAccessTokenStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *AccessTokenStoreDeleteByTokenFunc) PushHook(hook func(context.Context, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccessTokenStoreDeleteByTokenFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccessTokenStoreDeleteByTokenFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string) error {
		return r0
	})
}

func (f *AccessTokenStoreDeleteByTokenFunc) nextHook() func(context.Context, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreDeleteByTokenFunc) appendCall(r0 AccessTokenStoreDeleteByTokenFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreDeleteByTokenFuncCall
// objects describing the invocations of this function.
func (f *AccessTokenStoreDeleteByTokenFunc) History() []AccessTokenStoreDeleteByTokenFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreDeleteByTokenFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreDeleteByTokenFuncCall is an object that describes an
// invocation of method DeleteByToken on an instance of
// MockAccessTokenStore.
type AccessTokenStoreDeleteByTokenFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreDeleteByTokenFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreDeleteByTokenFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AccessTokenStoreGetByIDFunc describes the behavior when the GetByID
// method of the parent MockAccessTokenStore instance is invoked.
type AccessTokenStoreGetByIDFunc struct {
	defaultHook func(context.Context, int64) (*AccessToken, error)
	hooks       []func(context.Context, int64) (*AccessToken, error)
	history     []AccessTokenStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccessTokenStore) GetByID(v0 context.Context, v1 int64) (*AccessToken, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(AccessTokenStoreGetByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockAccessTokenStore instance is invoked and the hook queue is
// empty.
func (f *AccessTokenStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int64) (*AccessToken, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockAccessTokenStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AccessTokenStoreGetByIDFunc) PushHook(hook func(context.Context, int64) (*AccessToken, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccessTokenStoreGetByIDFunc) SetDefaultReturn(r0 *AccessToken, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (*AccessToken, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccessTokenStoreGetByIDFunc) PushReturn(r0 *AccessToken, r1 error) {
	f.PushHook(func(context.Context, int64) (*AccessToken, error) {
		return r0, r1
	})
}

func (f *AccessTokenStoreGetByIDFunc) nextHook() func(context.Context, int64) (*AccessToken, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreGetByIDFunc) appendCall(r0 AccessTokenStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreGetByIDFuncCall objects
// describing the invocations of this function.
func (f *AccessTokenStoreGetByIDFunc) History() []AccessTokenStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreGetByIDFuncCall is an object that describes an invocation
// of method GetByID on an instance of MockAccessTokenStore.
type AccessTokenStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *AccessToken
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AccessTokenStoreGetByTokenFunc describes the behavior when the GetByToken
// method of the parent MockAccessTokenStore instance is invoked.
type AccessTokenStoreGetByTokenFunc struct {
	defaultHook func(context.Context, string) (*AccessToken, error)
	hooks       []func(context.Context, string) (*AccessToken, error)
	history     []AccessTokenStoreGetByTokenFuncCall
	mutex       sync.Mutex
}

// GetByToken delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAccessTokenStore) GetByToken(v0 context.Context, v1 string) (*AccessToken, error) {
	r0, r1 := m.GetByTokenFunc.nextHook()(v0, v1)
	m.GetByTokenFunc.appendCall(AccessTokenStoreGetByTokenFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByToken method of
// the parent MockAccessTokenStore instance is invoked and the hook queue is
// empty.
func (f *AccessTokenStoreGetByTokenFunc) SetDefaultHook(hook func(context.Context, string) (*AccessToken, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByToken method of the parent MockAccessTokenStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AccessTokenStoreGetByTokenFunc) PushHook(hook func(context.Context, string) (*AccessToken, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccessTokenStoreGetByTokenFunc) SetDefaultReturn(r0 *AccessToken, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*AccessToken, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccessTokenStoreGetByTokenFunc) PushReturn(r0 *AccessToken, r1 error) {
	f.PushHook(func(context.Context, string) (*AccessToken, error) {
		return r0, r1
	})
}

func (f *AccessTokenStoreGetByTokenFunc) nextHook() func(context.Context, string) (*AccessToken, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreGetByTokenFunc) appendCall(r0 AccessTokenStoreGetByTokenFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreGetByTokenFuncCall objects
// describing the invocations of this function.
func (f *AccessTokenStoreGetByTokenFunc) History() []AccessTokenStoreGetByTokenFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreGetByTokenFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreGetByTokenFuncCall is an object that describes an
// invocation of method GetByToken on an instance of MockAccessTokenStore.
type AccessTokenStoreGetByTokenFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *AccessToken
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreGetByTokenFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreGetByTokenFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AccessTokenStoreHandleFunc describes the behavior when the Handle method
// of the parent MockAccessTokenStore instance is invoked.
type AccessTokenStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []AccessTokenStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccessTokenStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(AccessTokenStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockAccessTokenStore instance is invoked and the hook queue is
// empty.
func (f *AccessTokenStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockAccessTokenStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AccessTokenStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccessTokenStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccessTokenStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *AccessTokenStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreHandleFunc) appendCall(r0 AccessTokenStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *AccessTokenStoreHandleFunc) History() []AccessTokenStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreHandleFuncCall is an object that describes an invocation
// of method Handle on an instance of MockAccessTokenStore.
type AccessTokenStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AccessTokenStoreHardDeleteByIDFunc describes the behavior when the
// HardDeleteByID method of the parent MockAccessTokenStore instance is
// invoked.
type AccessTokenStoreHardDeleteByIDFunc struct {
	defaultHook func(context.Context, int64) error
	hooks       []func(context.Context, int64) error
	history     []AccessTokenStoreHardDeleteByIDFuncCall
	mutex       sync.Mutex
}

// HardDeleteByID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockAccessTokenStore) HardDeleteByID(v0 context.Context, v1 int64) error {
	r0 := m.HardDeleteByIDFunc.nextHook()(v0, v1)
	m.HardDeleteByIDFunc.appendCall(AccessTokenStoreHardDeleteByIDFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the HardDeleteByID
// method of the parent MockAccessTokenStore instance is invoked and the
// hook queue is empty.
func (f *AccessTokenStoreHardDeleteByIDFunc) SetDefaultHook(hook func(context.Context, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// HardDeleteByID method of the parent MockAccessTokenStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *AccessTokenStoreHardDeleteByIDFunc) PushHook(hook func(context.Context, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccessTokenStoreHardDeleteByIDFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccessTokenStoreHardDeleteByIDFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64) error {
		return r0
	})
}

func (f *AccessTokenStoreHardDeleteByIDFunc) nextHook() func(context.Context, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreHardDeleteByIDFunc) appendCall(r0 AccessTokenStoreHardDeleteByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreHardDeleteByIDFuncCall
// objects describing the invocations of this function.
func (f *AccessTokenStoreHardDeleteByIDFunc) History() []AccessTokenStoreHardDeleteByIDFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreHardDeleteByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreHardDeleteByIDFuncCall is an object that describes an
// invocation of method HardDeleteByID on an instance of
// MockAccessTokenStore.
type AccessTokenStoreHardDeleteByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreHardDeleteByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreHardDeleteByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AccessTokenStoreListFunc describes the behavior when the List method of
// the parent MockAccessTokenStore instance is invoked.
type AccessTokenStoreListFunc struct {
	defaultHook func(context.Context, AccessTokensListOptions) ([]*AccessToken, error)
	hooks       []func(context.Context, AccessTokensListOptions) ([]*AccessToken, error)
	history     []AccessTokenStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccessTokenStore) List(v0 context.Context, v1 AccessTokensListOptions) ([]*AccessToken, error) {
	r0, r1 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(AccessTokenStoreListFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockAccessTokenStore instance is invoked and the hook queue is
// empty.
func (f *AccessTokenStoreListFunc) SetDefaultHook(hook func(context.Context, AccessTokensListOptions) ([]*AccessToken, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockAccessTokenStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *AccessTokenStoreListFunc) PushHook(hook func(context.Context, AccessTokensListOptions) ([]*AccessToken, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccessTokenStoreListFunc) SetDefaultReturn(r0 []*AccessToken, r1 error) {
	f.SetDefaultHook(func(context.Context, AccessTokensListOptions) ([]*AccessToken, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccessTokenStoreListFunc) PushReturn(r0 []*AccessToken, r1 error) {
	f.PushHook(func(context.Context, AccessTokensListOptions) ([]*AccessToken, error) {
		return r0, r1
	})
}

func (f *AccessTokenStoreListFunc) nextHook() func(context.Context, AccessTokensListOptions) ([]*AccessToken, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreListFunc) appendCall(r0 AccessTokenStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreListFuncCall objects
// describing the invocations of this function.
func (f *AccessTokenStoreListFunc) History() []AccessTokenStoreListFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreListFuncCall is an object that describes an invocation of
// method List on an instance of MockAccessTokenStore.
type AccessTokenStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 AccessTokensListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*AccessToken
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AccessTokenStoreLookupFunc describes the behavior when the Lookup method
// of the parent MockAccessTokenStore instance is invoked.
type AccessTokenStoreLookupFunc struct {
	defaultHook func(context.Context, string, string) (int32, error)
	hooks       []func(context.Context, string, string) (int32, error)
	history     []AccessTokenStoreLookupFuncCall
	mutex       sync.Mutex
}

// Lookup delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccessTokenStore) Lookup(v0 context.Context, v1 string, v2 string) (int32, error) {
	r0, r1 := m.LookupFunc.nextHook()(v0, v1, v2)
	m.LookupFunc.appendCall(AccessTokenStoreLookupFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Lookup method of the
// parent MockAccessTokenStore instance is invoked and the hook queue is
// empty.
func (f *AccessTokenStoreLookupFunc) SetDefaultHook(hook func(context.Context, string, string) (int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Lookup method of the parent MockAccessTokenStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AccessTokenStoreLookupFunc) PushHook(hook func(context.Context, string, string) (int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccessTokenStoreLookupFunc) SetDefaultReturn(r0 int32, r1 error) {
	f.SetDefaultHook(func(context.Context, string, string) (int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccessTokenStoreLookupFunc) PushReturn(r0 int32, r1 error) {
	f.PushHook(func(context.Context, string, string) (int32, error) {
		return r0, r1
	})
}

func (f *AccessTokenStoreLookupFunc) nextHook() func(context.Context, string, string) (int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreLookupFunc) appendCall(r0 AccessTokenStoreLookupFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreLookupFuncCall objects
// describing the invocations of this function.
func (f *AccessTokenStoreLookupFunc) History() []AccessTokenStoreLookupFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreLookupFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreLookupFuncCall is an object that describes an invocation
// of method Lookup on an instance of MockAccessTokenStore.
type AccessTokenStoreLookupFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreLookupFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreLookupFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AccessTokenStoreWithFunc describes the behavior when the With method of
// the parent MockAccessTokenStore instance is invoked.
type AccessTokenStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) AccessTokenStore
	hooks       []func(basestore.ShareableStore) AccessTokenStore
	history     []AccessTokenStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAccessTokenStore) With(v0 basestore.ShareableStore) AccessTokenStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(AccessTokenStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockAccessTokenStore instance is invoked and the hook queue is
// empty.
func (f *AccessTokenStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) AccessTokenStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockAccessTokenStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *AccessTokenStoreWithFunc) PushHook(hook func(basestore.ShareableStore) AccessTokenStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccessTokenStoreWithFunc) SetDefaultReturn(r0 AccessTokenStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) AccessTokenStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccessTokenStoreWithFunc) PushReturn(r0 AccessTokenStore) {
	f.PushHook(func(basestore.ShareableStore) AccessTokenStore {
		return r0
	})
}

func (f *AccessTokenStoreWithFunc) nextHook() func(basestore.ShareableStore) AccessTokenStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreWithFunc) appendCall(r0 AccessTokenStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreWithFuncCall objects
// describing the invocations of this function.
func (f *AccessTokenStoreWithFunc) History() []AccessTokenStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockAccessTokenStore.
type AccessTokenStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 AccessTokenStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AccessTokenStoreWithTransactFunc describes the behavior when the
// WithTransact method of the parent MockAccessTokenStore instance is
// invoked.
type AccessTokenStoreWithTransactFunc struct {
	defaultHook func(context.Context, func(AccessTokenStore) error) error
	hooks       []func(context.Context, func(AccessTokenStore) error) error
	history     []AccessTokenStoreWithTransactFuncCall
	mutex       sync.Mutex
}

// WithTransact delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAccessTokenStore) WithTransact(v0 context.Context, v1 func(AccessTokenStore) error) error {
	r0 := m.WithTransactFunc.nextHook()(v0, v1)
	m.WithTransactFunc.appendCall(AccessTokenStoreWithTransactFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithTransact method
// of the parent MockAccessTokenStore instance is invoked and the hook queue
// is empty.
func (f *AccessTokenStoreWithTransactFunc) SetDefaultHook(hook func(context.Context, func(AccessTokenStore) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithTransact method of the parent MockAccessTokenStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *AccessTokenStoreWithTransactFunc) PushHook(hook func(context.Context, func(AccessTokenStore) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AccessTokenStoreWithTransactFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, func(AccessTokenStore) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AccessTokenStoreWithTransactFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, func(AccessTokenStore) error) error {
		return r0
	})
}

func (f *AccessTokenStoreWithTransactFunc) nextHook() func(context.Context, func(AccessTokenStore) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AccessTokenStoreWithTransactFunc) appendCall(r0 AccessTokenStoreWithTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AccessTokenStoreWithTransactFuncCall
// objects describing the invocations of this function.
func (f *AccessTokenStoreWithTransactFunc) History() []AccessTokenStoreWithTransactFuncCall {
	f.mutex.Lock()
	history := make([]AccessTokenStoreWithTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AccessTokenStoreWithTransactFuncCall is an object that describes an
// invocation of method WithTransact on an instance of MockAccessTokenStore.
type AccessTokenStoreWithTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 func(AccessTokenStore) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AccessTokenStoreWithTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AccessTokenStoreWithTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockAssignedOwnersStore is a mock implementation of the
// AssignedOwnersStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockAssignedOwnersStore struct {
	// DeleteOwnerFunc is an instance of a mock function object controlling
	// the behavior of the method DeleteOwner.
	DeleteOwnerFunc *AssignedOwnersStoreDeleteOwnerFunc
	// InsertFunc is an instance of a mock function object controlling the
	// behavior of the method Insert.
	InsertFunc *AssignedOwnersStoreInsertFunc
	// ListAssignedOwnersForRepoFunc is an instance of a mock function
	// object controlling the behavior of the method
	// ListAssignedOwnersForRepo.
	ListAssignedOwnersForRepoFunc *AssignedOwnersStoreListAssignedOwnersForRepoFunc
}

// NewMockAssignedOwnersStore creates a new mock of the AssignedOwnersStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockAssignedOwnersStore() *MockAssignedOwnersStore {
	return &MockAssignedOwnersStore{
		DeleteOwnerFunc: &AssignedOwnersStoreDeleteOwnerFunc{
			defaultHook: func(context.Context, int32, api.RepoID, string) (r0 error) {
				return
			},
		},
		InsertFunc: &AssignedOwnersStoreInsertFunc{
			defaultHook: func(context.Context, int32, api.RepoID, string, int32) (r0 error) {
				return
			},
		},
		ListAssignedOwnersForRepoFunc: &AssignedOwnersStoreListAssignedOwnersForRepoFunc{
			defaultHook: func(context.Context, api.RepoID) (r0 []*AssignedOwnerSummary, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockAssignedOwnersStore creates a new mock of the
// AssignedOwnersStore interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockAssignedOwnersStore() *MockAssignedOwnersStore {
	return &MockAssignedOwnersStore{
		DeleteOwnerFunc: &AssignedOwnersStoreDeleteOwnerFunc{
			defaultHook: func(context.Context, int32, api.RepoID, string) error {
				panic("unexpected invocation of MockAssignedOwnersStore.DeleteOwner")
			},
		},
		InsertFunc: &AssignedOwnersStoreInsertFunc{
			defaultHook: func(context.Context, int32, api.RepoID, string, int32) error {
				panic("unexpected invocation of MockAssignedOwnersStore.Insert")
			},
		},
		ListAssignedOwnersForRepoFunc: &AssignedOwnersStoreListAssignedOwnersForRepoFunc{
			defaultHook: func(context.Context, api.RepoID) ([]*AssignedOwnerSummary, error) {
				panic("unexpected invocation of MockAssignedOwnersStore.ListAssignedOwnersForRepo")
			},
		},
	}
}

// NewMockAssignedOwnersStoreFrom creates a new mock of the
// MockAssignedOwnersStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockAssignedOwnersStoreFrom(i AssignedOwnersStore) *MockAssignedOwnersStore {
	return &MockAssignedOwnersStore{
		DeleteOwnerFunc: &AssignedOwnersStoreDeleteOwnerFunc{
			defaultHook: i.DeleteOwner,
		},
		InsertFunc: &AssignedOwnersStoreInsertFunc{
			defaultHook: i.Insert,
		},
		ListAssignedOwnersForRepoFunc: &AssignedOwnersStoreListAssignedOwnersForRepoFunc{
			defaultHook: i.ListAssignedOwnersForRepo,
		},
	}
}

// AssignedOwnersStoreDeleteOwnerFunc describes the behavior when the
// DeleteOwner method of the parent MockAssignedOwnersStore instance is
// invoked.
type AssignedOwnersStoreDeleteOwnerFunc struct {
	defaultHook func(context.Context, int32, api.RepoID, string) error
	hooks       []func(context.Context, int32, api.RepoID, string) error
	history     []AssignedOwnersStoreDeleteOwnerFuncCall
	mutex       sync.Mutex
}

// DeleteOwner delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAssignedOwnersStore) DeleteOwner(v0 context.Context, v1 int32, v2 api.RepoID, v3 string) error {
	r0 := m.DeleteOwnerFunc.nextHook()(v0, v1, v2, v3)
	m.DeleteOwnerFunc.appendCall(AssignedOwnersStoreDeleteOwnerFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteOwner method
// of the parent MockAssignedOwnersStore instance is invoked and the hook
// queue is empty.
func (f *AssignedOwnersStoreDeleteOwnerFunc) SetDefaultHook(hook func(context.Context, int32, api.RepoID, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteOwner method of the parent MockAssignedOwnersStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *AssignedOwnersStoreDeleteOwnerFunc) PushHook(hook func(context.Context, int32, api.RepoID, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AssignedOwnersStoreDeleteOwnerFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, api.RepoID, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AssignedOwnersStoreDeleteOwnerFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, api.RepoID, string) error {
		return r0
	})
}

func (f *AssignedOwnersStoreDeleteOwnerFunc) nextHook() func(context.Context, int32, api.RepoID, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AssignedOwnersStoreDeleteOwnerFunc) appendCall(r0 AssignedOwnersStoreDeleteOwnerFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AssignedOwnersStoreDeleteOwnerFuncCall
// objects describing the invocations of this function.
func (f *AssignedOwnersStoreDeleteOwnerFunc) History() []AssignedOwnersStoreDeleteOwnerFuncCall {
	f.mutex.Lock()
	history := make([]AssignedOwnersStoreDeleteOwnerFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AssignedOwnersStoreDeleteOwnerFuncCall is an object that describes an
// invocation of method DeleteOwner on an instance of
// MockAssignedOwnersStore.
type AssignedOwnersStoreDeleteOwnerFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoID
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AssignedOwnersStoreDeleteOwnerFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AssignedOwnersStoreDeleteOwnerFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AssignedOwnersStoreInsertFunc describes the behavior when the Insert
// method of the parent MockAssignedOwnersStore instance is invoked.
type AssignedOwnersStoreInsertFunc struct {
	defaultHook func(context.Context, int32, api.RepoID, string, int32) error
	hooks       []func(context.Context, int32, api.RepoID, string, int32) error
	history     []AssignedOwnersStoreInsertFuncCall
	mutex       sync.Mutex
}

// Insert delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAssignedOwnersStore) Insert(v0 context.Context, v1 int32, v2 api.RepoID, v3 string, v4 int32) error {
	r0 := m.InsertFunc.nextHook()(v0, v1, v2, v3, v4)
	m.InsertFunc.appendCall(AssignedOwnersStoreInsertFuncCall{v0, v1, v2, v3, v4, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Insert method of the
// parent MockAssignedOwnersStore instance is invoked and the hook queue is
// empty.
func (f *AssignedOwnersStoreInsertFunc) SetDefaultHook(hook func(context.Context, int32, api.RepoID, string, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Insert method of the parent MockAssignedOwnersStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AssignedOwnersStoreInsertFunc) PushHook(hook func(context.Context, int32, api.RepoID, string, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AssignedOwnersStoreInsertFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, api.RepoID, string, int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AssignedOwnersStoreInsertFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, api.RepoID, string, int32) error {
		return r0
	})
}

func (f *AssignedOwnersStoreInsertFunc) nextHook() func(context.Context, int32, api.RepoID, string, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AssignedOwnersStoreInsertFunc) appendCall(r0 AssignedOwnersStoreInsertFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AssignedOwnersStoreInsertFuncCall objects
// describing the invocations of this function.
func (f *AssignedOwnersStoreInsertFunc) History() []AssignedOwnersStoreInsertFuncCall {
	f.mutex.Lock()
	history := make([]AssignedOwnersStoreInsertFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AssignedOwnersStoreInsertFuncCall is an object that describes an
// invocation of method Insert on an instance of MockAssignedOwnersStore.
type AssignedOwnersStoreInsertFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoID
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AssignedOwnersStoreInsertFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AssignedOwnersStoreInsertFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AssignedOwnersStoreListAssignedOwnersForRepoFunc describes the behavior
// when the ListAssignedOwnersForRepo method of the parent
// MockAssignedOwnersStore instance is invoked.
type AssignedOwnersStoreListAssignedOwnersForRepoFunc struct {
	defaultHook func(context.Context, api.RepoID) ([]*AssignedOwnerSummary, error)
	hooks       []func(context.Context, api.RepoID) ([]*AssignedOwnerSummary, error)
	history     []AssignedOwnersStoreListAssignedOwnersForRepoFuncCall
	mutex       sync.Mutex
}

// ListAssignedOwnersForRepo delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockAssignedOwnersStore) ListAssignedOwnersForRepo(v0 context.Context, v1 api.RepoID) ([]*AssignedOwnerSummary, error) {
	r0, r1 := m.ListAssignedOwnersForRepoFunc.nextHook()(v0, v1)
	m.ListAssignedOwnersForRepoFunc.appendCall(AssignedOwnersStoreListAssignedOwnersForRepoFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ListAssignedOwnersForRepo method of the parent MockAssignedOwnersStore
// instance is invoked and the hook queue is empty.
func (f *AssignedOwnersStoreListAssignedOwnersForRepoFunc) SetDefaultHook(hook func(context.Context, api.RepoID) ([]*AssignedOwnerSummary, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListAssignedOwnersForRepo method of the parent MockAssignedOwnersStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *AssignedOwnersStoreListAssignedOwnersForRepoFunc) PushHook(hook func(context.Context, api.RepoID) ([]*AssignedOwnerSummary, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AssignedOwnersStoreListAssignedOwnersForRepoFunc) SetDefaultReturn(r0 []*AssignedOwnerSummary, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoID) ([]*AssignedOwnerSummary, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AssignedOwnersStoreListAssignedOwnersForRepoFunc) PushReturn(r0 []*AssignedOwnerSummary, r1 error) {
	f.PushHook(func(context.Context, api.RepoID) ([]*AssignedOwnerSummary, error) {
		return r0, r1
	})
}

func (f *AssignedOwnersStoreListAssignedOwnersForRepoFunc) nextHook() func(context.Context, api.RepoID) ([]*AssignedOwnerSummary, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AssignedOwnersStoreListAssignedOwnersForRepoFunc) appendCall(r0 AssignedOwnersStoreListAssignedOwnersForRepoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// AssignedOwnersStoreListAssignedOwnersForRepoFuncCall objects describing
// the invocations of this function.
func (f *AssignedOwnersStoreListAssignedOwnersForRepoFunc) History() []AssignedOwnersStoreListAssignedOwnersForRepoFuncCall {
	f.mutex.Lock()
	history := make([]AssignedOwnersStoreListAssignedOwnersForRepoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AssignedOwnersStoreListAssignedOwnersForRepoFuncCall is an object that
// describes an invocation of method ListAssignedOwnersForRepo on an
// instance of MockAssignedOwnersStore.
type AssignedOwnersStoreListAssignedOwnersForRepoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*AssignedOwnerSummary
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AssignedOwnersStoreListAssignedOwnersForRepoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AssignedOwnersStoreListAssignedOwnersForRepoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockAssignedTeamsStore is a mock implementation of the AssignedTeamsStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockAssignedTeamsStore struct {
	// DeleteOwnerTeamFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteOwnerTeam.
	DeleteOwnerTeamFunc *AssignedTeamsStoreDeleteOwnerTeamFunc
	// InsertFunc is an instance of a mock function object controlling the
	// behavior of the method Insert.
	InsertFunc *AssignedTeamsStoreInsertFunc
	// ListAssignedTeamsForRepoFunc is an instance of a mock function object
	// controlling the behavior of the method ListAssignedTeamsForRepo.
	ListAssignedTeamsForRepoFunc *AssignedTeamsStoreListAssignedTeamsForRepoFunc
}

// NewMockAssignedTeamsStore creates a new mock of the AssignedTeamsStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockAssignedTeamsStore() *MockAssignedTeamsStore {
	return &MockAssignedTeamsStore{
		DeleteOwnerTeamFunc: &AssignedTeamsStoreDeleteOwnerTeamFunc{
			defaultHook: func(context.Context, int32, api.RepoID, string) (r0 error) {
				return
			},
		},
		InsertFunc: &AssignedTeamsStoreInsertFunc{
			defaultHook: func(context.Context, int32, api.RepoID, string, int32) (r0 error) {
				return
			},
		},
		ListAssignedTeamsForRepoFunc: &AssignedTeamsStoreListAssignedTeamsForRepoFunc{
			defaultHook: func(context.Context, api.RepoID) (r0 []*AssignedTeamSummary, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockAssignedTeamsStore creates a new mock of the
// AssignedTeamsStore interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockAssignedTeamsStore() *MockAssignedTeamsStore {
	return &MockAssignedTeamsStore{
		DeleteOwnerTeamFunc: &AssignedTeamsStoreDeleteOwnerTeamFunc{
			defaultHook: func(context.Context, int32, api.RepoID, string) error {
				panic("unexpected invocation of MockAssignedTeamsStore.DeleteOwnerTeam")
			},
		},
		InsertFunc: &AssignedTeamsStoreInsertFunc{
			defaultHook: func(context.Context, int32, api.RepoID, string, int32) error {
				panic("unexpected invocation of MockAssignedTeamsStore.Insert")
			},
		},
		ListAssignedTeamsForRepoFunc: &AssignedTeamsStoreListAssignedTeamsForRepoFunc{
			defaultHook: func(context.Context, api.RepoID) ([]*AssignedTeamSummary, error) {
				panic("unexpected invocation of MockAssignedTeamsStore.ListAssignedTeamsForRepo")
			},
		},
	}
}

// NewMockAssignedTeamsStoreFrom creates a new mock of the
// MockAssignedTeamsStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockAssignedTeamsStoreFrom(i AssignedTeamsStore) *MockAssignedTeamsStore {
	return &MockAssignedTeamsStore{
		DeleteOwnerTeamFunc: &AssignedTeamsStoreDeleteOwnerTeamFunc{
			defaultHook: i.DeleteOwnerTeam,
		},
		InsertFunc: &AssignedTeamsStoreInsertFunc{
			defaultHook: i.Insert,
		},
		ListAssignedTeamsForRepoFunc: &AssignedTeamsStoreListAssignedTeamsForRepoFunc{
			defaultHook: i.ListAssignedTeamsForRepo,
		},
	}
}

// AssignedTeamsStoreDeleteOwnerTeamFunc describes the behavior when the
// DeleteOwnerTeam method of the parent MockAssignedTeamsStore instance is
// invoked.
type AssignedTeamsStoreDeleteOwnerTeamFunc struct {
	defaultHook func(context.Context, int32, api.RepoID, string) error
	hooks       []func(context.Context, int32, api.RepoID, string) error
	history     []AssignedTeamsStoreDeleteOwnerTeamFuncCall
	mutex       sync.Mutex
}

// DeleteOwnerTeam delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockAssignedTeamsStore) DeleteOwnerTeam(v0 context.Context, v1 int32, v2 api.RepoID, v3 string) error {
	r0 := m.DeleteOwnerTeamFunc.nextHook()(v0, v1, v2, v3)
	m.DeleteOwnerTeamFunc.appendCall(AssignedTeamsStoreDeleteOwnerTeamFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteOwnerTeam
// method of the parent MockAssignedTeamsStore instance is invoked and the
// hook queue is empty.
func (f *AssignedTeamsStoreDeleteOwnerTeamFunc) SetDefaultHook(hook func(context.Context, int32, api.RepoID, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteOwnerTeam method of the parent MockAssignedTeamsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *AssignedTeamsStoreDeleteOwnerTeamFunc) PushHook(hook func(context.Context, int32, api.RepoID, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AssignedTeamsStoreDeleteOwnerTeamFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, api.RepoID, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AssignedTeamsStoreDeleteOwnerTeamFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, api.RepoID, string) error {
		return r0
	})
}

func (f *AssignedTeamsStoreDeleteOwnerTeamFunc) nextHook() func(context.Context, int32, api.RepoID, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AssignedTeamsStoreDeleteOwnerTeamFunc) appendCall(r0 AssignedTeamsStoreDeleteOwnerTeamFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AssignedTeamsStoreDeleteOwnerTeamFuncCall
// objects describing the invocations of this function.
func (f *AssignedTeamsStoreDeleteOwnerTeamFunc) History() []AssignedTeamsStoreDeleteOwnerTeamFuncCall {
	f.mutex.Lock()
	history := make([]AssignedTeamsStoreDeleteOwnerTeamFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AssignedTeamsStoreDeleteOwnerTeamFuncCall is an object that describes an
// invocation of method DeleteOwnerTeam on an instance of
// MockAssignedTeamsStore.
type AssignedTeamsStoreDeleteOwnerTeamFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoID
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AssignedTeamsStoreDeleteOwnerTeamFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AssignedTeamsStoreDeleteOwnerTeamFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AssignedTeamsStoreInsertFunc describes the behavior when the Insert
// method of the parent MockAssignedTeamsStore instance is invoked.
type AssignedTeamsStoreInsertFunc struct {
	defaultHook func(context.Context, int32, api.RepoID, string, int32) error
	hooks       []func(context.Context, int32, api.RepoID, string, int32) error
	history     []AssignedTeamsStoreInsertFuncCall
	mutex       sync.Mutex
}

// Insert delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAssignedTeamsStore) Insert(v0 context.Context, v1 int32, v2 api.RepoID, v3 string, v4 int32) error {
	r0 := m.InsertFunc.nextHook()(v0, v1, v2, v3, v4)
	m.InsertFunc.appendCall(AssignedTeamsStoreInsertFuncCall{v0, v1, v2, v3, v4, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Insert method of the
// parent MockAssignedTeamsStore instance is invoked and the hook queue is
// empty.
func (f *AssignedTeamsStoreInsertFunc) SetDefaultHook(hook func(context.Context, int32, api.RepoID, string, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Insert method of the parent MockAssignedTeamsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AssignedTeamsStoreInsertFunc) PushHook(hook func(context.Context, int32, api.RepoID, string, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AssignedTeamsStoreInsertFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, api.RepoID, string, int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AssignedTeamsStoreInsertFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, api.RepoID, string, int32) error {
		return r0
	})
}

func (f *AssignedTeamsStoreInsertFunc) nextHook() func(context.Context, int32, api.RepoID, string, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AssignedTeamsStoreInsertFunc) appendCall(r0 AssignedTeamsStoreInsertFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AssignedTeamsStoreInsertFuncCall objects
// describing the invocations of this function.
func (f *AssignedTeamsStoreInsertFunc) History() []AssignedTeamsStoreInsertFuncCall {
	f.mutex.Lock()
	history := make([]AssignedTeamsStoreInsertFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AssignedTeamsStoreInsertFuncCall is an object that describes an
// invocation of method Insert on an instance of MockAssignedTeamsStore.
type AssignedTeamsStoreInsertFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoID
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AssignedTeamsStoreInsertFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AssignedTeamsStoreInsertFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AssignedTeamsStoreListAssignedTeamsForRepoFunc describes the behavior
// when the ListAssignedTeamsForRepo method of the parent
// MockAssignedTeamsStore instance is invoked.
type AssignedTeamsStoreListAssignedTeamsForRepoFunc struct {
	defaultHook func(context.Context, api.RepoID) ([]*AssignedTeamSummary, error)
	hooks       []func(context.Context, api.RepoID) ([]*AssignedTeamSummary, error)
	history     []AssignedTeamsStoreListAssignedTeamsForRepoFuncCall
	mutex       sync.Mutex
}

// ListAssignedTeamsForRepo delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockAssignedTeamsStore) ListAssignedTeamsForRepo(v0 context.Context, v1 api.RepoID) ([]*AssignedTeamSummary, error) {
	r0, r1 := m.ListAssignedTeamsForRepoFunc.nextHook()(v0, v1)
	m.ListAssignedTeamsForRepoFunc.appendCall(AssignedTeamsStoreListAssignedTeamsForRepoFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ListAssignedTeamsForRepo method of the parent MockAssignedTeamsStore
// instance is invoked and the hook queue is empty.
func (f *AssignedTeamsStoreListAssignedTeamsForRepoFunc) SetDefaultHook(hook func(context.Context, api.RepoID) ([]*AssignedTeamSummary, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListAssignedTeamsForRepo method of the parent MockAssignedTeamsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *AssignedTeamsStoreListAssignedTeamsForRepoFunc) PushHook(hook func(context.Context, api.RepoID) ([]*AssignedTeamSummary, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AssignedTeamsStoreListAssignedTeamsForRepoFunc) SetDefaultReturn(r0 []*AssignedTeamSummary, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoID) ([]*AssignedTeamSummary, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AssignedTeamsStoreListAssignedTeamsForRepoFunc) PushReturn(r0 []*AssignedTeamSummary, r1 error) {
	f.PushHook(func(context.Context, api.RepoID) ([]*AssignedTeamSummary, error) {
		return r0, r1
	})
}

func (f *AssignedTeamsStoreListAssignedTeamsForRepoFunc) nextHook() func(context.Context, api.RepoID) ([]*AssignedTeamSummary, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AssignedTeamsStoreListAssignedTeamsForRepoFunc) appendCall(r0 AssignedTeamsStoreListAssignedTeamsForRepoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// AssignedTeamsStoreListAssignedTeamsForRepoFuncCall objects describing the
// invocations of this function.
func (f *AssignedTeamsStoreListAssignedTeamsForRepoFunc) History() []AssignedTeamsStoreListAssignedTeamsForRepoFuncCall {
	f.mutex.Lock()
	history := make([]AssignedTeamsStoreListAssignedTeamsForRepoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AssignedTeamsStoreListAssignedTeamsForRepoFuncCall is an object that
// describes an invocation of method ListAssignedTeamsForRepo on an instance
// of MockAssignedTeamsStore.
type AssignedTeamsStoreListAssignedTeamsForRepoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*AssignedTeamSummary
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AssignedTeamsStoreListAssignedTeamsForRepoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AssignedTeamsStoreListAssignedTeamsForRepoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockAuthzStore is a mock implementation of the AuthzStore interface (from
// the package github.com/sourcegraph/sourcegraph/internal/database) used
// for unit testing.
type MockAuthzStore struct {
	// AuthorizedReposFunc is an instance of a mock function object
	// controlling the behavior of the method AuthorizedRepos.
	AuthorizedReposFunc *AuthzStoreAuthorizedReposFunc
	// GrantPendingPermissionsFunc is an instance of a mock function object
	// controlling the behavior of the method GrantPendingPermissions.
	GrantPendingPermissionsFunc *AuthzStoreGrantPendingPermissionsFunc
	// RevokeUserPermissionsFunc is an instance of a mock function object
	// controlling the behavior of the method RevokeUserPermissions.
	RevokeUserPermissionsFunc *AuthzStoreRevokeUserPermissionsFunc
	// RevokeUserPermissionsListFunc is an instance of a mock function
	// object controlling the behavior of the method
	// RevokeUserPermissionsList.
	RevokeUserPermissionsListFunc *AuthzStoreRevokeUserPermissionsListFunc
}

// NewMockAuthzStore creates a new mock of the AuthzStore interface. All
// methods return zero values for all results, unless overwritten.
func NewMockAuthzStore() *MockAuthzStore {
	return &MockAuthzStore{
		AuthorizedReposFunc: &AuthzStoreAuthorizedReposFunc{
			defaultHook: func(context.Context, *AuthorizedReposArgs) (r0 []*types.Repo, r1 error) {
				return
			},
		},
		GrantPendingPermissionsFunc: &AuthzStoreGrantPendingPermissionsFunc{
			defaultHook: func(context.Context, *GrantPendingPermissionsArgs) (r0 error) {
				return
			},
		},
		RevokeUserPermissionsFunc: &AuthzStoreRevokeUserPermissionsFunc{
			defaultHook: func(context.Context, *RevokeUserPermissionsArgs) (r0 error) {
				return
			},
		},
		RevokeUserPermissionsListFunc: &AuthzStoreRevokeUserPermissionsListFunc{
			defaultHook: func(context.Context, []*RevokeUserPermissionsArgs) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockAuthzStore creates a new mock of the AuthzStore interface.
// All methods panic on invocation, unless overwritten.
func NewStrictMockAuthzStore() *MockAuthzStore {
	return &MockAuthzStore{
		AuthorizedReposFunc: &AuthzStoreAuthorizedReposFunc{
			defaultHook: func(context.Context, *AuthorizedReposArgs) ([]*types.Repo, error) {
				panic("unexpected invocation of MockAuthzStore.AuthorizedRepos")
			},
		},
		GrantPendingPermissionsFunc: &AuthzStoreGrantPendingPermissionsFunc{
			defaultHook: func(context.Context, *GrantPendingPermissionsArgs) error {
				panic("unexpected invocation of MockAuthzStore.GrantPendingPermissions")
			},
		},
		RevokeUserPermissionsFunc: &AuthzStoreRevokeUserPermissionsFunc{
			defaultHook: func(context.Context, *RevokeUserPermissionsArgs) error {
				panic("unexpected invocation of MockAuthzStore.RevokeUserPermissions")
			},
		},
		RevokeUserPermissionsListFunc: &AuthzStoreRevokeUserPermissionsListFunc{
			defaultHook: func(context.Context, []*RevokeUserPermissionsArgs) error {
				panic("unexpected invocation of MockAuthzStore.RevokeUserPermissionsList")
			},
		},
	}
}

// NewMockAuthzStoreFrom creates a new mock of the MockAuthzStore interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockAuthzStoreFrom(i AuthzStore) *MockAuthzStore {
	return &MockAuthzStore{
		AuthorizedReposFunc: &AuthzStoreAuthorizedReposFunc{
			defaultHook: i.AuthorizedRepos,
		},
		GrantPendingPermissionsFunc: &AuthzStoreGrantPendingPermissionsFunc{
			defaultHook: i.GrantPendingPermissions,
		},
		RevokeUserPermissionsFunc: &AuthzStoreRevokeUserPermissionsFunc{
			defaultHook: i.RevokeUserPermissions,
		},
		RevokeUserPermissionsListFunc: &AuthzStoreRevokeUserPermissionsListFunc{
			defaultHook: i.RevokeUserPermissionsList,
		},
	}
}

// AuthzStoreAuthorizedReposFunc describes the behavior when the
// AuthorizedRepos method of the parent MockAuthzStore instance is invoked.
type AuthzStoreAuthorizedReposFunc struct {
	defaultHook func(context.Context, *AuthorizedReposArgs) ([]*types.Repo, error)
	hooks       []func(context.Context, *AuthorizedReposArgs) ([]*types.Repo, error)
	history     []AuthzStoreAuthorizedReposFuncCall
	mutex       sync.Mutex
}

// AuthorizedRepos delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockAuthzStore) AuthorizedRepos(v0 context.Context, v1 *AuthorizedReposArgs) ([]*types.Repo, error) {
	r0, r1 := m.AuthorizedReposFunc.nextHook()(v0, v1)
	m.AuthorizedReposFunc.appendCall(AuthzStoreAuthorizedReposFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the AuthorizedRepos
// method of the parent MockAuthzStore instance is invoked and the hook
// queue is empty.
func (f *AuthzStoreAuthorizedReposFunc) SetDefaultHook(hook func(context.Context, *AuthorizedReposArgs) ([]*types.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AuthorizedRepos method of the parent MockAuthzStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *AuthzStoreAuthorizedReposFunc) PushHook(hook func(context.Context, *AuthorizedReposArgs) ([]*types.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AuthzStoreAuthorizedReposFunc) SetDefaultReturn(r0 []*types.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, *AuthorizedReposArgs) ([]*types.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AuthzStoreAuthorizedReposFunc) PushReturn(r0 []*types.Repo, r1 error) {
	f.PushHook(func(context.Context, *AuthorizedReposArgs) ([]*types.Repo, error) {
		return r0, r1
	})
}

func (f *AuthzStoreAuthorizedReposFunc) nextHook() func(context.Context, *AuthorizedReposArgs) ([]*types.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AuthzStoreAuthorizedReposFunc) appendCall(r0 AuthzStoreAuthorizedReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AuthzStoreAuthorizedReposFuncCall objects
// describing the invocations of this function.
func (f *AuthzStoreAuthorizedReposFunc) History() []AuthzStoreAuthorizedReposFuncCall {
	f.mutex.Lock()
	history := make([]AuthzStoreAuthorizedReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AuthzStoreAuthorizedReposFuncCall is an object that describes an
// invocation of method AuthorizedRepos on an instance of MockAuthzStore.
type AuthzStoreAuthorizedReposFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *AuthorizedReposArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AuthzStoreAuthorizedReposFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AuthzStoreAuthorizedReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// AuthzStoreGrantPendingPermissionsFunc describes the behavior when the
// GrantPendingPermissions method of the parent MockAuthzStore instance is
// invoked.
type AuthzStoreGrantPendingPermissionsFunc struct {
	defaultHook func(context.Context, *GrantPendingPermissionsArgs) error
	hooks       []func(context.Context, *GrantPendingPermissionsArgs) error
	history     []AuthzStoreGrantPendingPermissionsFuncCall
	mutex       sync.Mutex
}

// GrantPendingPermissions delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockAuthzStore) GrantPendingPermissions(v0 context.Context, v1 *GrantPendingPermissionsArgs) error {
	r0 := m.GrantPendingPermissionsFunc.nextHook()(v0, v1)
	m.GrantPendingPermissionsFunc.appendCall(AuthzStoreGrantPendingPermissionsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// GrantPendingPermissions method of the parent MockAuthzStore instance is
// invoked and the hook queue is empty.
func (f *AuthzStoreGrantPendingPermissionsFunc) SetDefaultHook(hook func(context.Context, *GrantPendingPermissionsArgs) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GrantPendingPermissions method of the parent MockAuthzStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *AuthzStoreGrantPendingPermissionsFunc) PushHook(hook func(context.Context, *GrantPendingPermissionsArgs) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AuthzStoreGrantPendingPermissionsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *GrantPendingPermissionsArgs) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AuthzStoreGrantPendingPermissionsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *GrantPendingPermissionsArgs) error {
		return r0
	})
}

func (f *AuthzStoreGrantPendingPermissionsFunc) nextHook() func(context.Context, *GrantPendingPermissionsArgs) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AuthzStoreGrantPendingPermissionsFunc) appendCall(r0 AuthzStoreGrantPendingPermissionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AuthzStoreGrantPendingPermissionsFuncCall
// objects describing the invocations of this function.
func (f *AuthzStoreGrantPendingPermissionsFunc) History() []AuthzStoreGrantPendingPermissionsFuncCall {
	f.mutex.Lock()
	history := make([]AuthzStoreGrantPendingPermissionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AuthzStoreGrantPendingPermissionsFuncCall is an object that describes an
// invocation of method GrantPendingPermissions on an instance of
// MockAuthzStore.
type AuthzStoreGrantPendingPermissionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *GrantPendingPermissionsArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AuthzStoreGrantPendingPermissionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AuthzStoreGrantPendingPermissionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AuthzStoreRevokeUserPermissionsFunc describes the behavior when the
// RevokeUserPermissions method of the parent MockAuthzStore instance is
// invoked.
type AuthzStoreRevokeUserPermissionsFunc struct {
	defaultHook func(context.Context, *RevokeUserPermissionsArgs) error
	hooks       []func(context.Context, *RevokeUserPermissionsArgs) error
	history     []AuthzStoreRevokeUserPermissionsFuncCall
	mutex       sync.Mutex
}

// RevokeUserPermissions delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockAuthzStore) RevokeUserPermissions(v0 context.Context, v1 *RevokeUserPermissionsArgs) error {
	r0 := m.RevokeUserPermissionsFunc.nextHook()(v0, v1)
	m.RevokeUserPermissionsFunc.appendCall(AuthzStoreRevokeUserPermissionsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// RevokeUserPermissions method of the parent MockAuthzStore instance is
// invoked and the hook queue is empty.
func (f *AuthzStoreRevokeUserPermissionsFunc) SetDefaultHook(hook func(context.Context, *RevokeUserPermissionsArgs) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RevokeUserPermissions method of the parent MockAuthzStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *AuthzStoreRevokeUserPermissionsFunc) PushHook(hook func(context.Context, *RevokeUserPermissionsArgs) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AuthzStoreRevokeUserPermissionsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *RevokeUserPermissionsArgs) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AuthzStoreRevokeUserPermissionsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *RevokeUserPermissionsArgs) error {
		return r0
	})
}

func (f *AuthzStoreRevokeUserPermissionsFunc) nextHook() func(context.Context, *RevokeUserPermissionsArgs) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AuthzStoreRevokeUserPermissionsFunc) appendCall(r0 AuthzStoreRevokeUserPermissionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AuthzStoreRevokeUserPermissionsFuncCall
// objects describing the invocations of this function.
func (f *AuthzStoreRevokeUserPermissionsFunc) History() []AuthzStoreRevokeUserPermissionsFuncCall {
	f.mutex.Lock()
	history := make([]AuthzStoreRevokeUserPermissionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AuthzStoreRevokeUserPermissionsFuncCall is an object that describes an
// invocation of method RevokeUserPermissions on an instance of
// MockAuthzStore.
type AuthzStoreRevokeUserPermissionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *RevokeUserPermissionsArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AuthzStoreRevokeUserPermissionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AuthzStoreRevokeUserPermissionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AuthzStoreRevokeUserPermissionsListFunc describes the behavior when the
// RevokeUserPermissionsList method of the parent MockAuthzStore instance is
// invoked.
type AuthzStoreRevokeUserPermissionsListFunc struct {
	defaultHook func(context.Context, []*RevokeUserPermissionsArgs) error
	hooks       []func(context.Context, []*RevokeUserPermissionsArgs) error
	history     []AuthzStoreRevokeUserPermissionsListFuncCall
	mutex       sync.Mutex
}

// RevokeUserPermissionsList delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockAuthzStore) RevokeUserPermissionsList(v0 context.Context, v1 []*RevokeUserPermissionsArgs) error {
	r0 := m.RevokeUserPermissionsListFunc.nextHook()(v0, v1)
	m.RevokeUserPermissionsListFunc.appendCall(AuthzStoreRevokeUserPermissionsListFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// RevokeUserPermissionsList method of the parent MockAuthzStore instance is
// invoked and the hook queue is empty.
func (f *AuthzStoreRevokeUserPermissionsListFunc) SetDefaultHook(hook func(context.Context, []*RevokeUserPermissionsArgs) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RevokeUserPermissionsList method of the parent MockAuthzStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *AuthzStoreRevokeUserPermissionsListFunc) PushHook(hook func(context.Context, []*RevokeUserPermissionsArgs) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AuthzStoreRevokeUserPermissionsListFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []*RevokeUserPermissionsArgs) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AuthzStoreRevokeUserPermissionsListFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []*RevokeUserPermissionsArgs) error {
		return r0
	})
}

func (f *AuthzStoreRevokeUserPermissionsListFunc) nextHook() func(context.Context, []*RevokeUserPermissionsArgs) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AuthzStoreRevokeUserPermissionsListFunc) appendCall(r0 AuthzStoreRevokeUserPermissionsListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AuthzStoreRevokeUserPermissionsListFuncCall
// objects describing the invocations of this function.
func (f *AuthzStoreRevokeUserPermissionsListFunc) History() []AuthzStoreRevokeUserPermissionsListFuncCall {
	f.mutex.Lock()
	history := make([]AuthzStoreRevokeUserPermissionsListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AuthzStoreRevokeUserPermissionsListFuncCall is an object that describes
// an invocation of method RevokeUserPermissionsList on an instance of
// MockAuthzStore.
type AuthzStoreRevokeUserPermissionsListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []*RevokeUserPermissionsArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AuthzStoreRevokeUserPermissionsListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AuthzStoreRevokeUserPermissionsListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockBitbucketProjectPermissionsStore is a mock implementation of the
// BitbucketProjectPermissionsStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockBitbucketProjectPermissionsStore struct {
	// EnqueueFunc is an instance of a mock function object controlling the
	// behavior of the method Enqueue.
	EnqueueFunc *BitbucketProjectPermissionsStoreEnqueueFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *BitbucketProjectPermissionsStoreHandleFunc
	// ListJobsFunc is an instance of a mock function object controlling the
	// behavior of the method ListJobs.
	ListJobsFunc *BitbucketProjectPermissionsStoreListJobsFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *BitbucketProjectPermissionsStoreWithFunc
	// WithTransactFunc is an instance of a mock function object controlling
	// the behavior of the method WithTransact.
	WithTransactFunc *BitbucketProjectPermissionsStoreWithTransactFunc
}

// NewMockBitbucketProjectPermissionsStore creates a new mock of the
// BitbucketProjectPermissionsStore interface. All methods return zero
// values for all results, unless overwritten.
func NewMockBitbucketProjectPermissionsStore() *MockBitbucketProjectPermissionsStore {
	return &MockBitbucketProjectPermissionsStore{
		EnqueueFunc: &BitbucketProjectPermissionsStoreEnqueueFunc{
			defaultHook: func(context.Context, string, int64, []types.UserPermission, bool) (r0 int, r1 error) {
				return
			},
		},
		HandleFunc: &BitbucketProjectPermissionsStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		ListJobsFunc: &BitbucketProjectPermissionsStoreListJobsFunc{
			defaultHook: func(context.Context, ListJobsOptions) (r0 []*types.BitbucketProjectPermissionJob, r1 error) {
				return
			},
		},
		WithFunc: &BitbucketProjectPermissionsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 BitbucketProjectPermissionsStore) {
				return
			},
		},
		WithTransactFunc: &BitbucketProjectPermissionsStoreWithTransactFunc{
			defaultHook: func(context.Context, func(BitbucketProjectPermissionsStore) error) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockBitbucketProjectPermissionsStore creates a new mock of the
// BitbucketProjectPermissionsStore interface. All methods panic on
// invocation, unless overwritten.
func NewStrictMockBitbucketProjectPermissionsStore() *MockBitbucketProjectPermissionsStore {
	return &MockBitbucketProjectPermissionsStore{
		EnqueueFunc: &BitbucketProjectPermissionsStoreEnqueueFunc{
			defaultHook: func(context.Context, string, int64, []types.UserPermission, bool) (int, error) {
				panic("unexpected invocation of MockBitbucketProjectPermissionsStore.Enqueue")
			},
		},
		HandleFunc: &BitbucketProjectPermissionsStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockBitbucketProjectPermissionsStore.Handle")
			},
		},
		ListJobsFunc: &BitbucketProjectPermissionsStoreListJobsFunc{
			defaultHook: func(context.Context, ListJobsOptions) ([]*types.BitbucketProjectPermissionJob, error) {
				panic("unexpected invocation of MockBitbucketProjectPermissionsStore.ListJobs")
			},
		},
		WithFunc: &BitbucketProjectPermissionsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) BitbucketProjectPermissionsStore {
				panic("unexpected invocation of MockBitbucketProjectPermissionsStore.With")
			},
		},
		WithTransactFunc: &BitbucketProjectPermissionsStoreWithTransactFunc{
			defaultHook: func(context.Context, func(BitbucketProjectPermissionsStore) error) error {
				panic("unexpected invocation of MockBitbucketProjectPermissionsStore.WithTransact")
			},
		},
	}
}

// NewMockBitbucketProjectPermissionsStoreFrom creates a new mock of the
// MockBitbucketProjectPermissionsStore interface. All methods delegate to
// the given implementation, unless overwritten.
func NewMockBitbucketProjectPermissionsStoreFrom(i BitbucketProjectPermissionsStore) *MockBitbucketProjectPermissionsStore {
	return &MockBitbucketProjectPermissionsStore{
		EnqueueFunc: &BitbucketProjectPermissionsStoreEnqueueFunc{
			defaultHook: i.Enqueue,
		},
		HandleFunc: &BitbucketProjectPermissionsStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListJobsFunc: &BitbucketProjectPermissionsStoreListJobsFunc{
			defaultHook: i.ListJobs,
		},
		WithFunc: &BitbucketProjectPermissionsStoreWithFunc{
			defaultHook: i.With,
		},
		WithTransactFunc: &BitbucketProjectPermissionsStoreWithTransactFunc{
			defaultHook: i.WithTransact,
		},
	}
}

// BitbucketProjectPermissionsStoreEnqueueFunc describes the behavior when
// the Enqueue method of the parent MockBitbucketProjectPermissionsStore
// instance is invoked.
type BitbucketProjectPermissionsStoreEnqueueFunc struct {
	defaultHook func(context.Context, string, int64, []types.UserPermission, bool) (int, error)
	hooks       []func(context.Context, string, int64, []types.UserPermission, bool) (int, error)
	history     []BitbucketProjectPermissionsStoreEnqueueFuncCall
	mutex       sync.Mutex
}

// Enqueue delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBitbucketProjectPermissionsStore) Enqueue(v0 context.Context, v1 string, v2 int64, v3 []types.UserPermission, v4 bool) (int, error) {
	r0, r1 := m.EnqueueFunc.nextHook()(v0, v1, v2, v3, v4)
	m.EnqueueFunc.appendCall(BitbucketProjectPermissionsStoreEnqueueFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Enqueue method of
// the parent MockBitbucketProjectPermissionsStore instance is invoked and
// the hook queue is empty.
func (f *BitbucketProjectPermissionsStoreEnqueueFunc) SetDefaultHook(hook func(context.Context, string, int64, []types.UserPermission, bool) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Enqueue method of the parent MockBitbucketProjectPermissionsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *BitbucketProjectPermissionsStoreEnqueueFunc) PushHook(hook func(context.Context, string, int64, []types.UserPermission, bool) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketProjectPermissionsStoreEnqueueFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, string, int64, []types.UserPermission, bool) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketProjectPermissionsStoreEnqueueFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, string, int64, []types.UserPermission, bool) (int, error) {
		return r0, r1
	})
}

func (f *BitbucketProjectPermissionsStoreEnqueueFunc) nextHook() func(context.Context, string, int64, []types.UserPermission, bool) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketProjectPermissionsStoreEnqueueFunc) appendCall(r0 BitbucketProjectPermissionsStoreEnqueueFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BitbucketProjectPermissionsStoreEnqueueFuncCall objects describing the
// invocations of this function.
func (f *BitbucketProjectPermissionsStoreEnqueueFunc) History() []BitbucketProjectPermissionsStoreEnqueueFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketProjectPermissionsStoreEnqueueFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketProjectPermissionsStoreEnqueueFuncCall is an object that
// describes an invocation of method Enqueue on an instance of
// MockBitbucketProjectPermissionsStore.
type BitbucketProjectPermissionsStoreEnqueueFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int64
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []types.UserPermission
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketProjectPermissionsStoreEnqueueFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketProjectPermissionsStoreEnqueueFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BitbucketProjectPermissionsStoreHandleFunc describes the behavior when
// the Handle method of the parent MockBitbucketProjectPermissionsStore
// instance is invoked.
type BitbucketProjectPermissionsStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []BitbucketProjectPermissionsStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBitbucketProjectPermissionsStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(BitbucketProjectPermissionsStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockBitbucketProjectPermissionsStore instance is invoked and the
// hook queue is empty.
func (f *BitbucketProjectPermissionsStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockBitbucketProjectPermissionsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BitbucketProjectPermissionsStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketProjectPermissionsStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketProjectPermissionsStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *BitbucketProjectPermissionsStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketProjectPermissionsStoreHandleFunc) appendCall(r0 BitbucketProjectPermissionsStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BitbucketProjectPermissionsStoreHandleFuncCall objects describing the
// invocations of this function.
func (f *BitbucketProjectPermissionsStoreHandleFunc) History() []BitbucketProjectPermissionsStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketProjectPermissionsStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketProjectPermissionsStoreHandleFuncCall is an object that
// describes an invocation of method Handle on an instance of
// MockBitbucketProjectPermissionsStore.
type BitbucketProjectPermissionsStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketProjectPermissionsStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketProjectPermissionsStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BitbucketProjectPermissionsStoreListJobsFunc describes the behavior when
// the ListJobs method of the parent MockBitbucketProjectPermissionsStore
// instance is invoked.
type BitbucketProjectPermissionsStoreListJobsFunc struct {
	defaultHook func(context.Context, ListJobsOptions) ([]*types.BitbucketProjectPermissionJob, error)
	hooks       []func(context.Context, ListJobsOptions) ([]*types.BitbucketProjectPermissionJob, error)
	history     []BitbucketProjectPermissionsStoreListJobsFuncCall
	mutex       sync.Mutex
}

// ListJobs delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBitbucketProjectPermissionsStore) ListJobs(v0 context.Context, v1 ListJobsOptions) ([]*types.BitbucketProjectPermissionJob, error) {
	r0, r1 := m.ListJobsFunc.nextHook()(v0, v1)
	m.ListJobsFunc.appendCall(BitbucketProjectPermissionsStoreListJobsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListJobs method of
// the parent MockBitbucketProjectPermissionsStore instance is invoked and
// the hook queue is empty.
func (f *BitbucketProjectPermissionsStoreListJobsFunc) SetDefaultHook(hook func(context.Context, ListJobsOptions) ([]*types.BitbucketProjectPermissionJob, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListJobs method of the parent MockBitbucketProjectPermissionsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *BitbucketProjectPermissionsStoreListJobsFunc) PushHook(hook func(context.Context, ListJobsOptions) ([]*types.BitbucketProjectPermissionJob, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketProjectPermissionsStoreListJobsFunc) SetDefaultReturn(r0 []*types.BitbucketProjectPermissionJob, r1 error) {
	f.SetDefaultHook(func(context.Context, ListJobsOptions) ([]*types.BitbucketProjectPermissionJob, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketProjectPermissionsStoreListJobsFunc) PushReturn(r0 []*types.BitbucketProjectPermissionJob, r1 error) {
	f.PushHook(func(context.Context, ListJobsOptions) ([]*types.BitbucketProjectPermissionJob, error) {
		return r0, r1
	})
}

func (f *BitbucketProjectPermissionsStoreListJobsFunc) nextHook() func(context.Context, ListJobsOptions) ([]*types.BitbucketProjectPermissionJob, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketProjectPermissionsStoreListJobsFunc) appendCall(r0 BitbucketProjectPermissionsStoreListJobsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BitbucketProjectPermissionsStoreListJobsFuncCall objects describing the
// invocations of this function.
func (f *BitbucketProjectPermissionsStoreListJobsFunc) History() []BitbucketProjectPermissionsStoreListJobsFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketProjectPermissionsStoreListJobsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketProjectPermissionsStoreListJobsFuncCall is an object that
// describes an invocation of method ListJobs on an instance of
// MockBitbucketProjectPermissionsStore.
type BitbucketProjectPermissionsStoreListJobsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ListJobsOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.BitbucketProjectPermissionJob
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketProjectPermissionsStoreListJobsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketProjectPermissionsStoreListJobsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// BitbucketProjectPermissionsStoreWithFunc describes the behavior when the
// With method of the parent MockBitbucketProjectPermissionsStore instance
// is invoked.
type BitbucketProjectPermissionsStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) BitbucketProjectPermissionsStore
	hooks       []func(basestore.ShareableStore) BitbucketProjectPermissionsStore
	history     []BitbucketProjectPermissionsStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockBitbucketProjectPermissionsStore) With(v0 basestore.ShareableStore) BitbucketProjectPermissionsStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(BitbucketProjectPermissionsStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockBitbucketProjectPermissionsStore instance is invoked and the
// hook queue is empty.
func (f *BitbucketProjectPermissionsStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) BitbucketProjectPermissionsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockBitbucketProjectPermissionsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *BitbucketProjectPermissionsStoreWithFunc) PushHook(hook func(basestore.ShareableStore) BitbucketProjectPermissionsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketProjectPermissionsStoreWithFunc) SetDefaultReturn(r0 BitbucketProjectPermissionsStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) BitbucketProjectPermissionsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketProjectPermissionsStoreWithFunc) PushReturn(r0 BitbucketProjectPermissionsStore) {
	f.PushHook(func(basestore.ShareableStore) BitbucketProjectPermissionsStore {
		return r0
	})
}

func (f *BitbucketProjectPermissionsStoreWithFunc) nextHook() func(basestore.ShareableStore) BitbucketProjectPermissionsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketProjectPermissionsStoreWithFunc) appendCall(r0 BitbucketProjectPermissionsStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BitbucketProjectPermissionsStoreWithFuncCall objects describing the
// invocations of this function.
func (f *BitbucketProjectPermissionsStoreWithFunc) History() []BitbucketProjectPermissionsStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketProjectPermissionsStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketProjectPermissionsStoreWithFuncCall is an object that describes
// an invocation of method With on an instance of
// MockBitbucketProjectPermissionsStore.
type BitbucketProjectPermissionsStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 BitbucketProjectPermissionsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketProjectPermissionsStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketProjectPermissionsStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// BitbucketProjectPermissionsStoreWithTransactFunc describes the behavior
// when the WithTransact method of the parent
// MockBitbucketProjectPermissionsStore instance is invoked.
type BitbucketProjectPermissionsStoreWithTransactFunc struct {
	defaultHook func(context.Context, func(BitbucketProjectPermissionsStore) error) error
	hooks       []func(context.Context, func(BitbucketProjectPermissionsStore) error) error
	history     []BitbucketProjectPermissionsStoreWithTransactFuncCall
	mutex       sync.Mutex
}

// WithTransact delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockBitbucketProjectPermissionsStore) WithTransact(v0 context.Context, v1 func(BitbucketProjectPermissionsStore) error) error {
	r0 := m.WithTransactFunc.nextHook()(v0, v1)
	m.WithTransactFunc.appendCall(BitbucketProjectPermissionsStoreWithTransactFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithTransact method
// of the parent MockBitbucketProjectPermissionsStore instance is invoked
// and the hook queue is empty.
func (f *BitbucketProjectPermissionsStoreWithTransactFunc) SetDefaultHook(hook func(context.Context, func(BitbucketProjectPermissionsStore) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithTransact method of the parent MockBitbucketProjectPermissionsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *BitbucketProjectPermissionsStoreWithTransactFunc) PushHook(hook func(context.Context, func(BitbucketProjectPermissionsStore) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *BitbucketProjectPermissionsStoreWithTransactFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, func(BitbucketProjectPermissionsStore) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *BitbucketProjectPermissionsStoreWithTransactFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, func(BitbucketProjectPermissionsStore) error) error {
		return r0
	})
}

func (f *BitbucketProjectPermissionsStoreWithTransactFunc) nextHook() func(context.Context, func(BitbucketProjectPermissionsStore) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *BitbucketProjectPermissionsStoreWithTransactFunc) appendCall(r0 BitbucketProjectPermissionsStoreWithTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// BitbucketProjectPermissionsStoreWithTransactFuncCall objects describing
// the invocations of this function.
func (f *BitbucketProjectPermissionsStoreWithTransactFunc) History() []BitbucketProjectPermissionsStoreWithTransactFuncCall {
	f.mutex.Lock()
	history := make([]BitbucketProjectPermissionsStoreWithTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// BitbucketProjectPermissionsStoreWithTransactFuncCall is an object that
// describes an invocation of method WithTransact on an instance of
// MockBitbucketProjectPermissionsStore.
type BitbucketProjectPermissionsStoreWithTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 func(BitbucketProjectPermissionsStore) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c BitbucketProjectPermissionsStoreWithTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c BitbucketProjectPermissionsStoreWithTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockConfStore is a mock implementation of the ConfStore interface (from
// the package github.com/sourcegraph/sourcegraph/internal/database) used
// for unit testing.
type MockConfStore struct {
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *ConfStoreDoneFunc
	// GetSiteConfigCountFunc is an instance of a mock function object
	// controlling the behavior of the method GetSiteConfigCount.
	GetSiteConfigCountFunc *ConfStoreGetSiteConfigCountFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *ConfStoreHandleFunc
	// ListSiteConfigsFunc is an instance of a mock function object
	// controlling the behavior of the method ListSiteConfigs.
	ListSiteConfigsFunc *ConfStoreListSiteConfigsFunc
	// SiteCreateIfUpToDateFunc is an instance of a mock function object
	// controlling the behavior of the method SiteCreateIfUpToDate.
	SiteCreateIfUpToDateFunc *ConfStoreSiteCreateIfUpToDateFunc
	// SiteGetLatestFunc is an instance of a mock function object
	// controlling the behavior of the method SiteGetLatest.
	SiteGetLatestFunc *ConfStoreSiteGetLatestFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *ConfStoreTransactFunc
}

// NewMockConfStore creates a new mock of the ConfStore interface. All
// methods return zero values for all results, unless overwritten.
func NewMockConfStore() *MockConfStore {
	return &MockConfStore{
		DoneFunc: &ConfStoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		GetSiteConfigCountFunc: &ConfStoreGetSiteConfigCountFunc{
			defaultHook: func(context.Context) (r0 int, r1 error) {
				return
			},
		},
		HandleFunc: &ConfStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		ListSiteConfigsFunc: &ConfStoreListSiteConfigsFunc{
			defaultHook: func(context.Context, *PaginationArgs) (r0 []*SiteConfig, r1 error) {
				return
			},
		},
		SiteCreateIfUpToDateFunc: &ConfStoreSiteCreateIfUpToDateFunc{
			defaultHook: func(context.Context, *int32, int32, string, bool) (r0 *SiteConfig, r1 error) {
				return
			},
		},
		SiteGetLatestFunc: &ConfStoreSiteGetLatestFunc{
			defaultHook: func(context.Context) (r0 *SiteConfig, r1 error) {
				return
			},
		},
		TransactFunc: &ConfStoreTransactFunc{
			defaultHook: func(context.Context) (r0 ConfStore, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockConfStore creates a new mock of the ConfStore interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockConfStore() *MockConfStore {
	return &MockConfStore{
		DoneFunc: &ConfStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockConfStore.Done")
			},
		},
		GetSiteConfigCountFunc: &ConfStoreGetSiteConfigCountFunc{
			defaultHook: func(context.Context) (int, error) {
				panic("unexpected invocation of MockConfStore.GetSiteConfigCount")
			},
		},
		HandleFunc: &ConfStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockConfStore.Handle")
			},
		},
		ListSiteConfigsFunc: &ConfStoreListSiteConfigsFunc{
			defaultHook: func(context.Context, *PaginationArgs) ([]*SiteConfig, error) {
				panic("unexpected invocation of MockConfStore.ListSiteConfigs")
			},
		},
		SiteCreateIfUpToDateFunc: &ConfStoreSiteCreateIfUpToDateFunc{
			defaultHook: func(context.Context, *int32, int32, string, bool) (*SiteConfig, error) {
				panic("unexpected invocation of MockConfStore.SiteCreateIfUpToDate")
			},
		},
		SiteGetLatestFunc: &ConfStoreSiteGetLatestFunc{
			defaultHook: func(context.Context) (*SiteConfig, error) {
				panic("unexpected invocation of MockConfStore.SiteGetLatest")
			},
		},
		TransactFunc: &ConfStoreTransactFunc{
			defaultHook: func(context.Context) (ConfStore, error) {
				panic("unexpected invocation of MockConfStore.Transact")
			},
		},
	}
}

// NewMockConfStoreFrom creates a new mock of the MockConfStore interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockConfStoreFrom(i ConfStore) *MockConfStore {
	return &MockConfStore{
		DoneFunc: &ConfStoreDoneFunc{
			defaultHook: i.Done,
		},
		GetSiteConfigCountFunc: &ConfStoreGetSiteConfigCountFunc{
			defaultHook: i.GetSiteConfigCount,
		},
		HandleFunc: &ConfStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListSiteConfigsFunc: &ConfStoreListSiteConfigsFunc{
			defaultHook: i.ListSiteConfigs,
		},
		SiteCreateIfUpToDateFunc: &ConfStoreSiteCreateIfUpToDateFunc{
			defaultHook: i.SiteCreateIfUpToDate,
		},
		SiteGetLatestFunc: &ConfStoreSiteGetLatestFunc{
			defaultHook: i.SiteGetLatest,
		},
		TransactFunc: &ConfStoreTransactFunc{
			defaultHook: i.Transact,
		},
	}
}

// ConfStoreDoneFunc describes the behavior when the Done method of the
// parent MockConfStore instance is invoked.
type ConfStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []ConfStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockConfStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(ConfStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockConfStore instance is invoked and the hook queue is empty.
func (f *ConfStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockConfStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ConfStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ConfStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ConfStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *ConfStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ConfStoreDoneFunc) appendCall(r0 ConfStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ConfStoreDoneFuncCall objects describing
// the invocations of this function.
func (f *ConfStoreDoneFunc) History() []ConfStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]ConfStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ConfStoreDoneFuncCall is an object that describes an invocation of method
// Done on an instance of MockConfStore.
type ConfStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ConfStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ConfStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ConfStoreGetSiteConfigCountFunc describes the behavior when the
// GetSiteConfigCount method of the parent MockConfStore instance is
// invoked.
type ConfStoreGetSiteConfigCountFunc struct {
	defaultHook func(context.Context) (int, error)
	hooks       []func(context.Context) (int, error)
	history     []ConfStoreGetSiteConfigCountFuncCall
	mutex       sync.Mutex
}

// GetSiteConfigCount delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockConfStore) GetSiteConfigCount(v0 context.Context) (int, error) {
	r0, r1 := m.GetSiteConfigCountFunc.nextHook()(v0)
	m.GetSiteConfigCountFunc.appendCall(ConfStoreGetSiteConfigCountFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetSiteConfigCount
// method of the parent MockConfStore instance is invoked and the hook queue
// is empty.
func (f *ConfStoreGetSiteConfigCountFunc) SetDefaultHook(hook func(context.Context) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetSiteConfigCount method of the parent MockConfStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ConfStoreGetSiteConfigCountFunc) PushHook(hook func(context.Context) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ConfStoreGetSiteConfigCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ConfStoreGetSiteConfigCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

func (f *ConfStoreGetSiteConfigCountFunc) nextHook() func(context.Context) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ConfStoreGetSiteConfigCountFunc) appendCall(r0 ConfStoreGetSiteConfigCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ConfStoreGetSiteConfigCountFuncCall objects
// describing the invocations of this function.
func (f *ConfStoreGetSiteConfigCountFunc) History() []ConfStoreGetSiteConfigCountFuncCall {
	f.mutex.Lock()
	history := make([]ConfStoreGetSiteConfigCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ConfStoreGetSiteConfigCountFuncCall is an object that describes an
// invocation of method GetSiteConfigCount on an instance of MockConfStore.
type ConfStoreGetSiteConfigCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ConfStoreGetSiteConfigCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ConfStoreGetSiteConfigCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ConfStoreHandleFunc describes the behavior when the Handle method of the
// parent MockConfStore instance is invoked.
type ConfStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []ConfStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockConfStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(ConfStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockConfStore instance is invoked and the hook queue is empty.
func (f *ConfStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockConfStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ConfStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ConfStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ConfStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *ConfStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ConfStoreHandleFunc) appendCall(r0 ConfStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ConfStoreHandleFuncCall objects describing
// the invocations of this function.
func (f *ConfStoreHandleFunc) History() []ConfStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]ConfStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ConfStoreHandleFuncCall is an object that describes an invocation of
// method Handle on an instance of MockConfStore.
type ConfStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ConfStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ConfStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ConfStoreListSiteConfigsFunc describes the behavior when the
// ListSiteConfigs method of the parent MockConfStore instance is invoked.
type ConfStoreListSiteConfigsFunc struct {
	defaultHook func(context.Context, *PaginationArgs) ([]*SiteConfig, error)
	hooks       []func(context.Context, *PaginationArgs) ([]*SiteConfig, error)
	history     []ConfStoreListSiteConfigsFuncCall
	mutex       sync.Mutex
}

// ListSiteConfigs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockConfStore) ListSiteConfigs(v0 context.Context, v1 *PaginationArgs) ([]*SiteConfig, error) {
	r0, r1 := m.ListSiteConfigsFunc.nextHook()(v0, v1)
	m.ListSiteConfigsFunc.appendCall(ConfStoreListSiteConfigsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListSiteConfigs
// method of the parent MockConfStore instance is invoked and the hook queue
// is empty.
func (f *ConfStoreListSiteConfigsFunc) SetDefaultHook(hook func(context.Context, *PaginationArgs) ([]*SiteConfig, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListSiteConfigs method of the parent MockConfStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ConfStoreListSiteConfigsFunc) PushHook(hook func(context.Context, *PaginationArgs) ([]*SiteConfig, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ConfStoreListSiteConfigsFunc) SetDefaultReturn(r0 []*SiteConfig, r1 error) {
	f.SetDefaultHook(func(context.Context, *PaginationArgs) ([]*SiteConfig, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ConfStoreListSiteConfigsFunc) PushReturn(r0 []*SiteConfig, r1 error) {
	f.PushHook(func(context.Context, *PaginationArgs) ([]*SiteConfig, error) {
		return r0, r1
	})
}

func (f *ConfStoreListSiteConfigsFunc) nextHook() func(context.Context, *PaginationArgs) ([]*SiteConfig, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ConfStoreListSiteConfigsFunc) appendCall(r0 ConfStoreListSiteConfigsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ConfStoreListSiteConfigsFuncCall objects
// describing the invocations of this function.
func (f *ConfStoreListSiteConfigsFunc) History() []ConfStoreListSiteConfigsFuncCall {
	f.mutex.Lock()
	history := make([]ConfStoreListSiteConfigsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ConfStoreListSiteConfigsFuncCall is an object that describes an
// invocation of method ListSiteConfigs on an instance of MockConfStore.
type ConfStoreListSiteConfigsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *PaginationArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*SiteConfig
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ConfStoreListSiteConfigsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ConfStoreListSiteConfigsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ConfStoreSiteCreateIfUpToDateFunc describes the behavior when the
// SiteCreateIfUpToDate method of the parent MockConfStore instance is
// invoked.
type ConfStoreSiteCreateIfUpToDateFunc struct {
	defaultHook func(context.Context, *int32, int32, string, bool) (*SiteConfig, error)
	hooks       []func(context.Context, *int32, int32, string, bool) (*SiteConfig, error)
	history     []ConfStoreSiteCreateIfUpToDateFuncCall
	mutex       sync.Mutex
}

// SiteCreateIfUpToDate delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockConfStore) SiteCreateIfUpToDate(v0 context.Context, v1 *int32, v2 int32, v3 string, v4 bool) (*SiteConfig, error) {
	r0, r1 := m.SiteCreateIfUpToDateFunc.nextHook()(v0, v1, v2, v3, v4)
	m.SiteCreateIfUpToDateFunc.appendCall(ConfStoreSiteCreateIfUpToDateFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SiteCreateIfUpToDate
// method of the parent MockConfStore instance is invoked and the hook queue
// is empty.
func (f *ConfStoreSiteCreateIfUpToDateFunc) SetDefaultHook(hook func(context.Context, *int32, int32, string, bool) (*SiteConfig, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SiteCreateIfUpToDate method of the parent MockConfStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ConfStoreSiteCreateIfUpToDateFunc) PushHook(hook func(context.Context, *int32, int32, string, bool) (*SiteConfig, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ConfStoreSiteCreateIfUpToDateFunc) SetDefaultReturn(r0 *SiteConfig, r1 error) {
	f.SetDefaultHook(func(context.Context, *int32, int32, string, bool) (*SiteConfig, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ConfStoreSiteCreateIfUpToDateFunc) PushReturn(r0 *SiteConfig, r1 error) {
	f.PushHook(func(context.Context, *int32, int32, string, bool) (*SiteConfig, error) {
		return r0, r1
	})
}

func (f *ConfStoreSiteCreateIfUpToDateFunc) nextHook() func(context.Context, *int32, int32, string, bool) (*SiteConfig, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ConfStoreSiteCreateIfUpToDateFunc) appendCall(r0 ConfStoreSiteCreateIfUpToDateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ConfStoreSiteCreateIfUpToDateFuncCall
// objects describing the invocations of this function.
func (f *ConfStoreSiteCreateIfUpToDateFunc) History() []ConfStoreSiteCreateIfUpToDateFuncCall {
	f.mutex.Lock()
	history := make([]ConfStoreSiteCreateIfUpToDateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ConfStoreSiteCreateIfUpToDateFuncCall is an object that describes an
// invocation of method SiteCreateIfUpToDate on an instance of
// MockConfStore.
type ConfStoreSiteCreateIfUpToDateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int32
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *SiteConfig
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ConfStoreSiteCreateIfUpToDateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ConfStoreSiteCreateIfUpToDateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ConfStoreSiteGetLatestFunc describes the behavior when the SiteGetLatest
// method of the parent MockConfStore instance is invoked.
type ConfStoreSiteGetLatestFunc struct {
	defaultHook func(context.Context) (*SiteConfig, error)
	hooks       []func(context.Context) (*SiteConfig, error)
	history     []ConfStoreSiteGetLatestFuncCall
	mutex       sync.Mutex
}

// SiteGetLatest delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockConfStore) SiteGetLatest(v0 context.Context) (*SiteConfig, error) {
	r0, r1 := m.SiteGetLatestFunc.nextHook()(v0)
	m.SiteGetLatestFunc.appendCall(ConfStoreSiteGetLatestFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SiteGetLatest method
// of the parent MockConfStore instance is invoked and the hook queue is
// empty.
func (f *ConfStoreSiteGetLatestFunc) SetDefaultHook(hook func(context.Context) (*SiteConfig, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SiteGetLatest method of the parent MockConfStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ConfStoreSiteGetLatestFunc) PushHook(hook func(context.Context) (*SiteConfig, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ConfStoreSiteGetLatestFunc) SetDefaultReturn(r0 *SiteConfig, r1 error) {
	f.SetDefaultHook(func(context.Context) (*SiteConfig, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ConfStoreSiteGetLatestFunc) PushReturn(r0 *SiteConfig, r1 error) {
	f.PushHook(func(context.Context) (*SiteConfig, error) {
		return r0, r1
	})
}

func (f *ConfStoreSiteGetLatestFunc) nextHook() func(context.Context) (*SiteConfig, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ConfStoreSiteGetLatestFunc) appendCall(r0 ConfStoreSiteGetLatestFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ConfStoreSiteGetLatestFuncCall objects
// describing the invocations of this function.
func (f *ConfStoreSiteGetLatestFunc) History() []ConfStoreSiteGetLatestFuncCall {
	f.mutex.Lock()
	history := make([]ConfStoreSiteGetLatestFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ConfStoreSiteGetLatestFuncCall is an object that describes an invocation
// of method SiteGetLatest on an instance of MockConfStore.
type ConfStoreSiteGetLatestFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *SiteConfig
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ConfStoreSiteGetLatestFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ConfStoreSiteGetLatestFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ConfStoreTransactFunc describes the behavior when the Transact method of
// the parent MockConfStore instance is invoked.
type ConfStoreTransactFunc struct {
	defaultHook func(context.Context) (ConfStore, error)
	hooks       []func(context.Context) (ConfStore, error)
	history     []ConfStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockConfStore) Transact(v0 context.Context) (ConfStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(ConfStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockConfStore instance is invoked and the hook queue is empty.
func (f *ConfStoreTransactFunc) SetDefaultHook(hook func(context.Context) (ConfStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockConfStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ConfStoreTransactFunc) PushHook(hook func(context.Context) (ConfStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ConfStoreTransactFunc) SetDefaultReturn(r0 ConfStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (ConfStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ConfStoreTransactFunc) PushReturn(r0 ConfStore, r1 error) {
	f.PushHook(func(context.Context) (ConfStore, error) {
		return r0, r1
	})
}

func (f *ConfStoreTransactFunc) nextHook() func(context.Context) (ConfStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ConfStoreTransactFunc) appendCall(r0 ConfStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ConfStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *ConfStoreTransactFunc) History() []ConfStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]ConfStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ConfStoreTransactFuncCall is an object that describes an invocation of
// method Transact on an instance of MockConfStore.
type ConfStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 ConfStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ConfStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ConfStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockDB is a mock implementation of the DB interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockDB struct {
	// AccessRequestsFunc is an instance of a mock function object
	// controlling the behavior of the method AccessRequests.
	AccessRequestsFunc *DBAccessRequestsFunc
	// AccessTokensFunc is an instance of a mock function object controlling
	// the behavior of the method AccessTokens.
	AccessTokensFunc *DBAccessTokensFunc
	// AssignedOwnersFunc is an instance of a mock function object
	// controlling the behavior of the method AssignedOwners.
	AssignedOwnersFunc *DBAssignedOwnersFunc
	// AssignedTeamsFunc is an instance of a mock function object
	// controlling the behavior of the method AssignedTeams.
	AssignedTeamsFunc *DBAssignedTeamsFunc
	// AuthzFunc is an instance of a mock function object controlling the
	// behavior of the method Authz.
	AuthzFunc *DBAuthzFunc
	// BitbucketProjectPermissionsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// BitbucketProjectPermissions.
	BitbucketProjectPermissionsFunc *DBBitbucketProjectPermissionsFunc
	// ConfFunc is an instance of a mock function object controlling the
	// behavior of the method Conf.
	ConfFunc *DBConfFunc
	// EventLogsFunc is an instance of a mock function object controlling
	// the behavior of the method EventLogs.
	EventLogsFunc *DBEventLogsFunc
	// EventLogsScrapeStateFunc is an instance of a mock function object
	// controlling the behavior of the method EventLogsScrapeState.
	EventLogsScrapeStateFunc *DBEventLogsScrapeStateFunc
	// ExecContextFunc is an instance of a mock function object controlling
	// the behavior of the method ExecContext.
	ExecContextFunc *DBExecContextFunc
	// ExecutorSecretAccessLogsFunc is an instance of a mock function object
	// controlling the behavior of the method ExecutorSecretAccessLogs.
	ExecutorSecretAccessLogsFunc *DBExecutorSecretAccessLogsFunc
	// ExecutorSecretsFunc is an instance of a mock function object
	// controlling the behavior of the method ExecutorSecrets.
	ExecutorSecretsFunc *DBExecutorSecretsFunc
	// ExecutorsFunc is an instance of a mock function object controlling
	// the behavior of the method Executors.
	ExecutorsFunc *DBExecutorsFunc
	// ExternalServicesFunc is an instance of a mock function object
	// controlling the behavior of the method ExternalServices.
	ExternalServicesFunc *DBExternalServicesFunc
	// FeatureFlagsFunc is an instance of a mock function object controlling
	// the behavior of the method FeatureFlags.
	FeatureFlagsFunc *DBFeatureFlagsFunc
	// GitserverLocalCloneFunc is an instance of a mock function object
	// controlling the behavior of the method GitserverLocalClone.
	GitserverLocalCloneFunc *DBGitserverLocalCloneFunc
	// GitserverReposFunc is an instance of a mock function object
	// controlling the behavior of the method GitserverRepos.
	GitserverReposFunc *DBGitserverReposFunc
	// GlobalStateFunc is an instance of a mock function object controlling
	// the behavior of the method GlobalState.
	GlobalStateFunc *DBGlobalStateFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *DBHandleFunc
	// NamespacePermissionsFunc is an instance of a mock function object
	// controlling the behavior of the method NamespacePermissions.
	NamespacePermissionsFunc *DBNamespacePermissionsFunc
	// NamespacesFunc is an instance of a mock function object controlling
	// the behavior of the method Namespaces.
	NamespacesFunc *DBNamespacesFunc
	// OrgInvitationsFunc is an instance of a mock function object
	// controlling the behavior of the method OrgInvitations.
	OrgInvitationsFunc *DBOrgInvitationsFunc
	// OrgMembersFunc is an instance of a mock function object controlling
	// the behavior of the method OrgMembers.
	OrgMembersFunc *DBOrgMembersFunc
	// OrgsFunc is an instance of a mock function object controlling the
	// behavior of the method Orgs.
	OrgsFunc *DBOrgsFunc
	// OutboundWebhookJobsFunc is an instance of a mock function object
	// controlling the behavior of the method OutboundWebhookJobs.
	OutboundWebhookJobsFunc *DBOutboundWebhookJobsFunc
	// OutboundWebhookLogsFunc is an instance of a mock function object
	// controlling the behavior of the method OutboundWebhookLogs.
	OutboundWebhookLogsFunc *DBOutboundWebhookLogsFunc
	// OutboundWebhooksFunc is an instance of a mock function object
	// controlling the behavior of the method OutboundWebhooks.
	OutboundWebhooksFunc *DBOutboundWebhooksFunc
	// OwnSignalConfigurationsFunc is an instance of a mock function object
	// controlling the behavior of the method OwnSignalConfigurations.
	OwnSignalConfigurationsFunc *DBOwnSignalConfigurationsFunc
	// OwnershipStatsFunc is an instance of a mock function object
	// controlling the behavior of the method OwnershipStats.
	OwnershipStatsFunc *DBOwnershipStatsFunc
	// PermissionSyncJobsFunc is an instance of a mock function object
	// controlling the behavior of the method PermissionSyncJobs.
	PermissionSyncJobsFunc *DBPermissionSyncJobsFunc
	// PermissionsFunc is an instance of a mock function object controlling
	// the behavior of the method Permissions.
	PermissionsFunc *DBPermissionsFunc
	// PhabricatorFunc is an instance of a mock function object controlling
	// the behavior of the method Phabricator.
	PhabricatorFunc *DBPhabricatorFunc
	// QueryContextFunc is an instance of a mock function object controlling
	// the behavior of the method QueryContext.
	QueryContextFunc *DBQueryContextFunc
	// QueryRowContextFunc is an instance of a mock function object
	// controlling the behavior of the method QueryRowContext.
	QueryRowContextFunc *DBQueryRowContextFunc
	// RecentContributionSignalsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// RecentContributionSignals.
	RecentContributionSignalsFunc *DBRecentContributionSignalsFunc
	// RecentViewSignalFunc is an instance of a mock function object
	// controlling the behavior of the method RecentViewSignal.
	RecentViewSignalFunc *DBRecentViewSignalFunc
	// RedisKeyValueFunc is an instance of a mock function object
	// controlling the behavior of the method RedisKeyValue.
	RedisKeyValueFunc *DBRedisKeyValueFunc
	// RepoCommitsChangelistsFunc is an instance of a mock function object
	// controlling the behavior of the method RepoCommitsChangelists.
	RepoCommitsChangelistsFunc *DBRepoCommitsChangelistsFunc
	// RepoKVPsFunc is an instance of a mock function object controlling the
	// behavior of the method RepoKVPs.
	RepoKVPsFunc *DBRepoKVPsFunc
	// RepoPathsFunc is an instance of a mock function object controlling
	// the behavior of the method RepoPaths.
	RepoPathsFunc *DBRepoPathsFunc
	// RepoStatisticsFunc is an instance of a mock function object
	// controlling the behavior of the method RepoStatistics.
	RepoStatisticsFunc *DBRepoStatisticsFunc
	// ReposFunc is an instance of a mock function object controlling the
	// behavior of the method Repos.
	ReposFunc *DBReposFunc
	// RolePermissionsFunc is an instance of a mock function object
	// controlling the behavior of the method RolePermissions.
	RolePermissionsFunc *DBRolePermissionsFunc
	// RolesFunc is an instance of a mock function object controlling the
	// behavior of the method Roles.
	RolesFunc *DBRolesFunc
	// SavedSearchesFunc is an instance of a mock function object
	// controlling the behavior of the method SavedSearches.
	SavedSearchesFunc *DBSavedSearchesFunc
	// SearchContextsFunc is an instance of a mock function object
	// controlling the behavior of the method SearchContexts.
	SearchContextsFunc *DBSearchContextsFunc
	// SecurityEventLogsFunc is an instance of a mock function object
	// controlling the behavior of the method SecurityEventLogs.
	SecurityEventLogsFunc *DBSecurityEventLogsFunc
	// SettingsFunc is an instance of a mock function object controlling the
	// behavior of the method Settings.
	SettingsFunc *DBSettingsFunc
	// TeamsFunc is an instance of a mock function object controlling the
	// behavior of the method Teams.
	TeamsFunc *DBTeamsFunc
	// TemporarySettingsFunc is an instance of a mock function object
	// controlling the behavior of the method TemporarySettings.
	TemporarySettingsFunc *DBTemporarySettingsFunc
	// UserCredentialsFunc is an instance of a mock function object
	// controlling the behavior of the method UserCredentials.
	UserCredentialsFunc *DBUserCredentialsFunc
	// UserEmailsFunc is an instance of a mock function object controlling
	// the behavior of the method UserEmails.
	UserEmailsFunc *DBUserEmailsFunc
	// UserExternalAccountsFunc is an instance of a mock function object
	// controlling the behavior of the method UserExternalAccounts.
	UserExternalAccountsFunc *DBUserExternalAccountsFunc
	// UserRolesFunc is an instance of a mock function object controlling
	// the behavior of the method UserRoles.
	UserRolesFunc *DBUserRolesFunc
	// UsersFunc is an instance of a mock function object controlling the
	// behavior of the method Users.
	UsersFunc *DBUsersFunc
	// WebhookLogsFunc is an instance of a mock function object controlling
	// the behavior of the method WebhookLogs.
	WebhookLogsFunc *DBWebhookLogsFunc
	// WebhooksFunc is an instance of a mock function object controlling the
	// behavior of the method Webhooks.
	WebhooksFunc *DBWebhooksFunc
	// WithTransactFunc is an instance of a mock function object controlling
	// the behavior of the method WithTransact.
	WithTransactFunc *DBWithTransactFunc
	// ZoektReposFunc is an instance of a mock function object controlling
	// the behavior of the method ZoektRepos.
	ZoektReposFunc *DBZoektReposFunc
}

// NewMockDB creates a new mock of the DB interface. All methods return zero
// values for all results, unless overwritten.
func NewMockDB() *MockDB {
	return &MockDB{
		AccessRequestsFunc: &DBAccessRequestsFunc{
			defaultHook: func() (r0 AccessRequestStore) {
				return
			},
		},
		AccessTokensFunc: &DBAccessTokensFunc{
			defaultHook: func() (r0 AccessTokenStore) {
				return
			},
		},
		AssignedOwnersFunc: &DBAssignedOwnersFunc{
			defaultHook: func() (r0 AssignedOwnersStore) {
				return
			},
		},
		AssignedTeamsFunc: &DBAssignedTeamsFunc{
			defaultHook: func() (r0 AssignedTeamsStore) {
				return
			},
		},
		AuthzFunc: &DBAuthzFunc{
			defaultHook: func() (r0 AuthzStore) {
				return
			},
		},
		BitbucketProjectPermissionsFunc: &DBBitbucketProjectPermissionsFunc{
			defaultHook: func() (r0 BitbucketProjectPermissionsStore) {
				return
			},
		},
		ConfFunc: &DBConfFunc{
			defaultHook: func() (r0 ConfStore) {
				return
			},
		},
		EventLogsFunc: &DBEventLogsFunc{
			defaultHook: func() (r0 EventLogStore) {
				return
			},
		},
		EventLogsScrapeStateFunc: &DBEventLogsScrapeStateFunc{
			defaultHook: func() (r0 EventLogsScrapeStateStore) {
				return
			},
		},
		ExecContextFunc: &DBExecContextFunc{
			defaultHook: func(context.Context, string, ...interface{}) (r0 sql.Result, r1 error) {
				return
			},
		},
		ExecutorSecretAccessLogsFunc: &DBExecutorSecretAccessLogsFunc{
			defaultHook: func() (r0 ExecutorSecretAccessLogStore) {
				return
			},
		},
		ExecutorSecretsFunc: &DBExecutorSecretsFunc{
			defaultHook: func(encryption.Key) (r0 ExecutorSecretStore) {
				return
			},
		},
		ExecutorsFunc: &DBExecutorsFunc{
			defaultHook: func() (r0 ExecutorStore) {
				return
			},
		},
		ExternalServicesFunc: &DBExternalServicesFunc{
			defaultHook: func() (r0 ExternalServiceStore) {
				return
			},
		},
		FeatureFlagsFunc: &DBFeatureFlagsFunc{
			defaultHook: func() (r0 FeatureFlagStore) {
				return
			},
		},
		GitserverLocalCloneFunc: &DBGitserverLocalCloneFunc{
			defaultHook: func() (r0 GitserverLocalCloneStore) {
				return
			},
		},
		GitserverReposFunc: &DBGitserverReposFunc{
			defaultHook: func() (r0 GitserverRepoStore) {
				return
			},
		},
		GlobalStateFunc: &DBGlobalStateFunc{
			defaultHook: func() (r0 GlobalStateStore) {
				return
			},
		},
		HandleFunc: &DBHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		NamespacePermissionsFunc: &DBNamespacePermissionsFunc{
			defaultHook: func() (r0 NamespacePermissionStore) {
				return
			},
		},
		NamespacesFunc: &DBNamespacesFunc{
			defaultHook: func() (r0 NamespaceStore) {
				return
			},
		},
		OrgInvitationsFunc: &DBOrgInvitationsFunc{
			defaultHook: func() (r0 OrgInvitationStore) {
				return
			},
		},
		OrgMembersFunc: &DBOrgMembersFunc{
			defaultHook: func() (r0 OrgMemberStore) {
				return
			},
		},
		OrgsFunc: &DBOrgsFunc{
			defaultHook: func() (r0 OrgStore) {
				return
			},
		},
		OutboundWebhookJobsFunc: &DBOutboundWebhookJobsFunc{
			defaultHook: func(encryption.Key) (r0 OutboundWebhookJobStore) {
				return
			},
		},
		OutboundWebhookLogsFunc: &DBOutboundWebhookLogsFunc{
			defaultHook: func(encryption.Key) (r0 OutboundWebhookLogStore) {
				return
			},
		},
		OutboundWebhooksFunc: &DBOutboundWebhooksFunc{
			defaultHook: func(encryption.Key) (r0 OutboundWebhookStore) {
				return
			},
		},
		OwnSignalConfigurationsFunc: &DBOwnSignalConfigurationsFunc{
			defaultHook: func() (r0 SignalConfigurationStore) {
				return
			},
		},
		OwnershipStatsFunc: &DBOwnershipStatsFunc{
			defaultHook: func() (r0 OwnershipStatsStore) {
				return
			},
		},
		PermissionSyncJobsFunc: &DBPermissionSyncJobsFunc{
			defaultHook: func() (r0 PermissionSyncJobStore) {
				return
			},
		},
		PermissionsFunc: &DBPermissionsFunc{
			defaultHook: func() (r0 PermissionStore) {
				return
			},
		},
		PhabricatorFunc: &DBPhabricatorFunc{
			defaultHook: func() (r0 PhabricatorStore) {
				return
			},
		},
		QueryContextFunc: &DBQueryContextFunc{
			defaultHook: func(context.Context, string, ...interface{}) (r0 *sql.Rows, r1 error) {
				return
			},
		},
		QueryRowContextFunc: &DBQueryRowContextFunc{
			defaultHook: func(context.Context, string, ...interface{}) (r0 *sql.Row) {
				return
			},
		},
		RecentContributionSignalsFunc: &DBRecentContributionSignalsFunc{
			defaultHook: func() (r0 RecentContributionSignalStore) {
				return
			},
		},
		RecentViewSignalFunc: &DBRecentViewSignalFunc{
			defaultHook: func() (r0 RecentViewSignalStore) {
				return
			},
		},
		RedisKeyValueFunc: &DBRedisKeyValueFunc{
			defaultHook: func() (r0 RedisKeyValueStore) {
				return
			},
		},
		RepoCommitsChangelistsFunc: &DBRepoCommitsChangelistsFunc{
			defaultHook: func() (r0 RepoCommitsChangelistsStore) {
				return
			},
		},
		RepoKVPsFunc: &DBRepoKVPsFunc{
			defaultHook: func() (r0 RepoKVPStore) {
				return
			},
		},
		RepoPathsFunc: &DBRepoPathsFunc{
			defaultHook: func() (r0 RepoPathStore) {
				return
			},
		},
		RepoStatisticsFunc: &DBRepoStatisticsFunc{
			defaultHook: func() (r0 RepoStatisticsStore) {
				return
			},
		},
		ReposFunc: &DBReposFunc{
			defaultHook: func() (r0 RepoStore) {
				return
			},
		},
		RolePermissionsFunc: &DBRolePermissionsFunc{
			defaultHook: func() (r0 RolePermissionStore) {
				return
			},
		},
		RolesFunc: &DBRolesFunc{
			defaultHook: func() (r0 RoleStore) {
				return
			},
		},
		SavedSearchesFunc: &DBSavedSearchesFunc{
			defaultHook: func() (r0 SavedSearchStore) {
				return
			},
		},
		SearchContextsFunc: &DBSearchContextsFunc{
			defaultHook: func() (r0 SearchContextsStore) {
				return
			},
		},
		SecurityEventLogsFunc: &DBSecurityEventLogsFunc{
			defaultHook: func() (r0 SecurityEventLogsStore) {
				return
			},
		},
		SettingsFunc: &DBSettingsFunc{
			defaultHook: func() (r0 SettingsStore) {
				return
			},
		},
		TeamsFunc: &DBTeamsFunc{
			defaultHook: func() (r0 TeamStore) {
				return
			},
		},
		TemporarySettingsFunc: &DBTemporarySettingsFunc{
			defaultHook: func() (r0 TemporarySettingsStore) {
				return
			},
		},
		UserCredentialsFunc: &DBUserCredentialsFunc{
			defaultHook: func(encryption.Key) (r0 UserCredentialsStore) {
				return
			},
		},
		UserEmailsFunc: &DBUserEmailsFunc{
			defaultHook: func() (r0 UserEmailsStore) {
				return
			},
		},
		UserExternalAccountsFunc: &DBUserExternalAccountsFunc{
			defaultHook: func() (r0 UserExternalAccountsStore) {
				return
			},
		},
		UserRolesFunc: &DBUserRolesFunc{
			defaultHook: func() (r0 UserRoleStore) {
				return
			},
		},
		UsersFunc: &DBUsersFunc{
			defaultHook: func() (r0 UserStore) {
				return
			},
		},
		WebhookLogsFunc: &DBWebhookLogsFunc{
			defaultHook: func(encryption.Key) (r0 WebhookLogStore) {
				return
			},
		},
		WebhooksFunc: &DBWebhooksFunc{
			defaultHook: func(encryption.Key) (r0 WebhookStore) {
				return
			},
		},
		WithTransactFunc: &DBWithTransactFunc{
			defaultHook: func(context.Context, func(tx DB) error) (r0 error) {
				return
			},
		},
		ZoektReposFunc: &DBZoektReposFunc{
			defaultHook: func() (r0 ZoektReposStore) {
				return
			},
		},
	}
}

// NewStrictMockDB creates a new mock of the DB interface. All methods panic
// on invocation, unless overwritten.
func NewStrictMockDB() *MockDB {
	return &MockDB{
		AccessRequestsFunc: &DBAccessRequestsFunc{
			defaultHook: func() AccessRequestStore {
				panic("unexpected invocation of MockDB.AccessRequests")
			},
		},
		AccessTokensFunc: &DBAccessTokensFunc{
			defaultHook: func() AccessTokenStore {
				panic("unexpected invocation of MockDB.AccessTokens")
			},
		},
		AssignedOwnersFunc: &DBAssignedOwnersFunc{
			defaultHook: func() AssignedOwnersStore {
				panic("unexpected invocation of MockDB.AssignedOwners")
			},
		},
		AssignedTeamsFunc: &DBAssignedTeamsFunc{
			defaultHook: func() AssignedTeamsStore {
				panic("unexpected invocation of MockDB.AssignedTeams")
			},
		},
		AuthzFunc: &DBAuthzFunc{
			defaultHook: func() AuthzStore {
				panic("unexpected invocation of MockDB.Authz")
			},
		},
		BitbucketProjectPermissionsFunc: &DBBitbucketProjectPermissionsFunc{
			defaultHook: func() BitbucketProjectPermissionsStore {
				panic("unexpected invocation of MockDB.BitbucketProjectPermissions")
			},
		},
		ConfFunc: &DBConfFunc{
			defaultHook: func() ConfStore {
				panic("unexpected invocation of MockDB.Conf")
			},
		},
		EventLogsFunc: &DBEventLogsFunc{
			defaultHook: func() EventLogStore {
				panic("unexpected invocation of MockDB.EventLogs")
			},
		},
		EventLogsScrapeStateFunc: &DBEventLogsScrapeStateFunc{
			defaultHook: func() EventLogsScrapeStateStore {
				panic("unexpected invocation of MockDB.EventLogsScrapeState")
			},
		},
		ExecContextFunc: &DBExecContextFunc{
			defaultHook: func(context.Context, string, ...interface{}) (sql.Result, error) {
				panic("unexpected invocation of MockDB.ExecContext")
			},
		},
		ExecutorSecretAccessLogsFunc: &DBExecutorSecretAccessLogsFunc{
			defaultHook: func() ExecutorSecretAccessLogStore {
				panic("unexpected invocation of MockDB.ExecutorSecretAccessLogs")
			},
		},
		ExecutorSecretsFunc: &DBExecutorSecretsFunc{
			defaultHook: func(encryption.Key) ExecutorSecretStore {
				panic("unexpected invocation of MockDB.ExecutorSecrets")
			},
		},
		ExecutorsFunc: &DBExecutorsFunc{
			defaultHook: func() ExecutorStore {
				panic("unexpected invocation of MockDB.Executors")
			},
		},
		ExternalServicesFunc: &DBExternalServicesFunc{
			defaultHook: func() ExternalServiceStore {
				panic("unexpected invocation of MockDB.ExternalServices")
			},
		},
		FeatureFlagsFunc: &DBFeatureFlagsFunc{
			defaultHook: func() FeatureFlagStore {
				panic("unexpected invocation of MockDB.FeatureFlags")
			},
		},
		GitserverLocalCloneFunc: &DBGitserverLocalCloneFunc{
			defaultHook: func() GitserverLocalCloneStore {
				panic("unexpected invocation of MockDB.GitserverLocalClone")
			},
		},
		GitserverReposFunc: &DBGitserverReposFunc{
			defaultHook: func() GitserverRepoStore {
				panic("unexpected invocation of MockDB.GitserverRepos")
			},
		},
		GlobalStateFunc: &DBGlobalStateFunc{
			defaultHook: func() GlobalStateStore {
				panic("unexpected invocation of MockDB.GlobalState")
			},
		},
		HandleFunc: &DBHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockDB.Handle")
			},
		},
		NamespacePermissionsFunc: &DBNamespacePermissionsFunc{
			defaultHook: func() NamespacePermissionStore {
				panic("unexpected invocation of MockDB.NamespacePermissions")
			},
		},
		NamespacesFunc: &DBNamespacesFunc{
			defaultHook: func() NamespaceStore {
				panic("unexpected invocation of MockDB.Namespaces")
			},
		},
		OrgInvitationsFunc: &DBOrgInvitationsFunc{
			defaultHook: func() OrgInvitationStore {
				panic("unexpected invocation of MockDB.OrgInvitations")
			},
		},
		OrgMembersFunc: &DBOrgMembersFunc{
			defaultHook: func() OrgMemberStore {
				panic("unexpected invocation of MockDB.OrgMembers")
			},
		},
		OrgsFunc: &DBOrgsFunc{
			defaultHook: func() OrgStore {
				panic("unexpected invocation of MockDB.Orgs")
			},
		},
		OutboundWebhookJobsFunc: &DBOutboundWebhookJobsFunc{
			defaultHook: func(encryption.Key) OutboundWebhookJobStore {
				panic("unexpected invocation of MockDB.OutboundWebhookJobs")
			},
		},
		OutboundWebhookLogsFunc: &DBOutboundWebhookLogsFunc{
			defaultHook: func(encryption.Key) OutboundWebhookLogStore {
				panic("unexpected invocation of MockDB.OutboundWebhookLogs")
			},
		},
		OutboundWebhooksFunc: &DBOutboundWebhooksFunc{
			defaultHook: func(encryption.Key) OutboundWebhookStore {
				panic("unexpected invocation of MockDB.OutboundWebhooks")
			},
		},
		OwnSignalConfigurationsFunc: &DBOwnSignalConfigurationsFunc{
			defaultHook: func() SignalConfigurationStore {
				panic("unexpected invocation of MockDB.OwnSignalConfigurations")
			},
		},
		OwnershipStatsFunc: &DBOwnershipStatsFunc{
			defaultHook: func() OwnershipStatsStore {
				panic("unexpected invocation of MockDB.OwnershipStats")
			},
		},
		PermissionSyncJobsFunc: &DBPermissionSyncJobsFunc{
			defaultHook: func() PermissionSyncJobStore {
				panic("unexpected invocation of MockDB.PermissionSyncJobs")
			},
		},
		PermissionsFunc: &DBPermissionsFunc{
			defaultHook: func() PermissionStore {
				panic("unexpected invocation of MockDB.Permissions")
			},
		},
		PhabricatorFunc: &DBPhabricatorFunc{
			defaultHook: func() PhabricatorStore {
				panic("unexpected invocation of MockDB.Phabricator")
			},
		},
		QueryContextFunc: &DBQueryContextFunc{
			defaultHook: func(context.Context, string, ...interface{}) (*sql.Rows, error) {
				panic("unexpected invocation of MockDB.QueryContext")
			},
		},
		QueryRowContextFunc: &DBQueryRowContextFunc{
			defaultHook: func(context.Context, string, ...interface{}) *sql.Row {
				panic("unexpected invocation of MockDB.QueryRowContext")
			},
		},
		RecentContributionSignalsFunc: &DBRecentContributionSignalsFunc{
			defaultHook: func() RecentContributionSignalStore {
				panic("unexpected invocation of MockDB.RecentContributionSignals")
			},
		},
		RecentViewSignalFunc: &DBRecentViewSignalFunc{
			defaultHook: func() RecentViewSignalStore {
				panic("unexpected invocation of MockDB.RecentViewSignal")
			},
		},
		RedisKeyValueFunc: &DBRedisKeyValueFunc{
			defaultHook: func() RedisKeyValueStore {
				panic("unexpected invocation of MockDB.RedisKeyValue")
			},
		},
		RepoCommitsChangelistsFunc: &DBRepoCommitsChangelistsFunc{
			defaultHook: func() RepoCommitsChangelistsStore {
				panic("unexpected invocation of MockDB.RepoCommitsChangelists")
			},
		},
		RepoKVPsFunc: &DBRepoKVPsFunc{
			defaultHook: func() RepoKVPStore {
				panic("unexpected invocation of MockDB.RepoKVPs")
			},
		},
		RepoPathsFunc: &DBRepoPathsFunc{
			defaultHook: func() RepoPathStore {
				panic("unexpected invocation of MockDB.RepoPaths")
			},
		},
		RepoStatisticsFunc: &DBRepoStatisticsFunc{
			defaultHook: func() RepoStatisticsStore {
				panic("unexpected invocation of MockDB.RepoStatistics")
			},
		},
		ReposFunc: &DBReposFunc{
			defaultHook: func() RepoStore {
				panic("unexpected invocation of MockDB.Repos")
			},
		},
		RolePermissionsFunc: &DBRolePermissionsFunc{
			defaultHook: func() RolePermissionStore {
				panic("unexpected invocation of MockDB.RolePermissions")
			},
		},
		RolesFunc: &DBRolesFunc{
			defaultHook: func() RoleStore {
				panic("unexpected invocation of MockDB.Roles")
			},
		},
		SavedSearchesFunc: &DBSavedSearchesFunc{
			defaultHook: func() SavedSearchStore {
				panic("unexpected invocation of MockDB.SavedSearches")
			},
		},
		SearchContextsFunc: &DBSearchContextsFunc{
			defaultHook: func() SearchContextsStore {
				panic("unexpected invocation of MockDB.SearchContexts")
			},
		},
		SecurityEventLogsFunc: &DBSecurityEventLogsFunc{
			defaultHook: func() SecurityEventLogsStore {
				panic("unexpected invocation of MockDB.SecurityEventLogs")
			},
		},
		SettingsFunc: &DBSettingsFunc{
			defaultHook: func() SettingsStore {
				panic("unexpected invocation of MockDB.Settings")
			},
		},
		TeamsFunc: &DBTeamsFunc{
			defaultHook: func() TeamStore {
				panic("unexpected invocation of MockDB.Teams")
			},
		},
		TemporarySettingsFunc: &DBTemporarySettingsFunc{
			defaultHook: func() TemporarySettingsStore {
				panic("unexpected invocation of MockDB.TemporarySettings")
			},
		},
		UserCredentialsFunc: &DBUserCredentialsFunc{
			defaultHook: func(encryption.Key) UserCredentialsStore {
				panic("unexpected invocation of MockDB.UserCredentials")
			},
		},
		UserEmailsFunc: &DBUserEmailsFunc{
			defaultHook: func() UserEmailsStore {
				panic("unexpected invocation of MockDB.UserEmails")
			},
		},
		UserExternalAccountsFunc: &DBUserExternalAccountsFunc{
			defaultHook: func() UserExternalAccountsStore {
				panic("unexpected invocation of MockDB.UserExternalAccounts")
			},
		},
		UserRolesFunc: &DBUserRolesFunc{
			defaultHook: func() UserRoleStore {
				panic("unexpected invocation of MockDB.UserRoles")
			},
		},
		UsersFunc: &DBUsersFunc{
			defaultHook: func() UserStore {
				panic("unexpected invocation of MockDB.Users")
			},
		},
		WebhookLogsFunc: &DBWebhookLogsFunc{
			defaultHook: func(encryption.Key) WebhookLogStore {
				panic("unexpected invocation of MockDB.WebhookLogs")
			},
		},
		WebhooksFunc: &DBWebhooksFunc{
			defaultHook: func(encryption.Key) WebhookStore {
				panic("unexpected invocation of MockDB.Webhooks")
			},
		},
		WithTransactFunc: &DBWithTransactFunc{
			defaultHook: func(context.Context, func(tx DB) error) error {
				panic("unexpected invocation of MockDB.WithTransact")
			},
		},
		ZoektReposFunc: &DBZoektReposFunc{
			defaultHook: func() ZoektReposStore {
				panic("unexpected invocation of MockDB.ZoektRepos")
			},
		},
	}
}

// NewMockDBFrom creates a new mock of the MockDB interface. All methods
// delegate to the given implementation, unless overwritten.
func NewMockDBFrom(i DB) *MockDB {
	return &MockDB{
		AccessRequestsFunc: &DBAccessRequestsFunc{
			defaultHook: i.AccessRequests,
		},
		AccessTokensFunc: &DBAccessTokensFunc{
			defaultHook: i.AccessTokens,
		},
		AssignedOwnersFunc: &DBAssignedOwnersFunc{
			defaultHook: i.AssignedOwners,
		},
		AssignedTeamsFunc: &DBAssignedTeamsFunc{
			defaultHook: i.AssignedTeams,
		},
		AuthzFunc: &DBAuthzFunc{
			defaultHook: i.Authz,
		},
		BitbucketProjectPermissionsFunc: &DBBitbucketProjectPermissionsFunc{
			defaultHook: i.BitbucketProjectPermissions,
		},
		ConfFunc: &DBConfFunc{
			defaultHook: i.Conf,
		},
		EventLogsFunc: &DBEventLogsFunc{
			defaultHook: i.EventLogs,
		},
		EventLogsScrapeStateFunc: &DBEventLogsScrapeStateFunc{
			defaultHook: i.EventLogsScrapeState,
		},
		ExecContextFunc: &DBExecContextFunc{
			defaultHook: i.ExecContext,
		},
		ExecutorSecretAccessLogsFunc: &DBExecutorSecretAccessLogsFunc{
			defaultHook: i.ExecutorSecretAccessLogs,
		},
		ExecutorSecretsFunc: &DBExecutorSecretsFunc{
			defaultHook: i.ExecutorSecrets,
		},
		ExecutorsFunc: &DBExecutorsFunc{
			defaultHook: i.Executors,
		},
		ExternalServicesFunc: &DBExternalServicesFunc{
			defaultHook: i.ExternalServices,
		},
		FeatureFlagsFunc: &DBFeatureFlagsFunc{
			defaultHook: i.FeatureFlags,
		},
		GitserverLocalCloneFunc: &DBGitserverLocalCloneFunc{
			defaultHook: i.GitserverLocalClone,
		},
		GitserverReposFunc: &DBGitserverReposFunc{
			defaultHook: i.GitserverRepos,
		},
		GlobalStateFunc: &DBGlobalStateFunc{
			defaultHook: i.GlobalState,
		},
		HandleFunc: &DBHandleFunc{
			defaultHook: i.Handle,
		},
		NamespacePermissionsFunc: &DBNamespacePermissionsFunc{
			defaultHook: i.NamespacePermissions,
		},
		NamespacesFunc: &DBNamespacesFunc{
			defaultHook: i.Namespaces,
		},
		OrgInvitationsFunc: &DBOrgInvitationsFunc{
			defaultHook: i.OrgInvitations,
		},
		OrgMembersFunc: &DBOrgMembersFunc{
			defaultHook: i.OrgMembers,
		},
		OrgsFunc: &DBOrgsFunc{
			defaultHook: i.Orgs,
		},
		OutboundWebhookJobsFunc: &DBOutboundWebhookJobsFunc{
			defaultHook: i.OutboundWebhookJobs,
		},
		OutboundWebhookLogsFunc: &DBOutboundWebhookLogsFunc{
			defaultHook: i.OutboundWebhookLogs,
		},
		OutboundWebhooksFunc: &DBOutboundWebhooksFunc{
			defaultHook: i.OutboundWebhooks,
		},
		OwnSignalConfigurationsFunc: &DBOwnSignalConfigurationsFunc{
			defaultHook: i.OwnSignalConfigurations,
		},
		OwnershipStatsFunc: &DBOwnershipStatsFunc{
			defaultHook: i.OwnershipStats,
		},
		PermissionSyncJobsFunc: &DBPermissionSyncJobsFunc{
			defaultHook: i.PermissionSyncJobs,
		},
		PermissionsFunc: &DBPermissionsFunc{
			defaultHook: i.Permissions,
		},
		PhabricatorFunc: &DBPhabricatorFunc{
			defaultHook: i.Phabricator,
		},
		QueryContextFunc: &DBQueryContextFunc{
			defaultHook: i.QueryContext,
		},
		QueryRowContextFunc: &DBQueryRowContextFunc{
			defaultHook: i.QueryRowContext,
		},
		RecentContributionSignalsFunc: &DBRecentContributionSignalsFunc{
			defaultHook: i.RecentContributionSignals,
		},
		RecentViewSignalFunc: &DBRecentViewSignalFunc{
			defaultHook: i.RecentViewSignal,
		},
		RedisKeyValueFunc: &DBRedisKeyValueFunc{
			defaultHook: i.RedisKeyValue,
		},
		RepoCommitsChangelistsFunc: &DBRepoCommitsChangelistsFunc{
			defaultHook: i.RepoCommitsChangelists,
		},
		RepoKVPsFunc: &DBRepoKVPsFunc{
			defaultHook: i.RepoKVPs,
		},
		RepoPathsFunc: &DBRepoPathsFunc{
			defaultHook: i.RepoPaths,
		},
		RepoStatisticsFunc: &DBRepoStatisticsFunc{
			defaultHook: i.RepoStatistics,
		},
		ReposFunc: &DBReposFunc{
			defaultHook: i.Repos,
		},
		RolePermissionsFunc: &DBRolePermissionsFunc{
			defaultHook: i.RolePermissions,
		},
		RolesFunc: &DBRolesFunc{
			defaultHook: i.Roles,
		},
		SavedSearchesFunc: &DBSavedSearchesFunc{
			defaultHook: i.SavedSearches,
		},
		SearchContextsFunc: &DBSearchContextsFunc{
			defaultHook: i.SearchContexts,
		},
		SecurityEventLogsFunc: &DBSecurityEventLogsFunc{
			defaultHook: i.SecurityEventLogs,
		},
		SettingsFunc: &DBSettingsFunc{
			defaultHook: i.Settings,
		},
		TeamsFunc: &DBTeamsFunc{
			defaultHook: i.Teams,
		},
		TemporarySettingsFunc: &DBTemporarySettingsFunc{
			defaultHook: i.TemporarySettings,
		},
		UserCredentialsFunc: &DBUserCredentialsFunc{
			defaultHook: i.UserCredentials,
		},
		UserEmailsFunc: &DBUserEmailsFunc{
			defaultHook: i.UserEmails,
		},
		UserExternalAccountsFunc: &DBUserExternalAccountsFunc{
			defaultHook: i.UserExternalAccounts,
		},
		UserRolesFunc: &DBUserRolesFunc{
			defaultHook: i.UserRoles,
		},
		UsersFunc: &DBUsersFunc{
			defaultHook: i.Users,
		},
		WebhookLogsFunc: &DBWebhookLogsFunc{
			defaultHook: i.WebhookLogs,
		},
		WebhooksFunc: &DBWebhooksFunc{
			defaultHook: i.Webhooks,
		},
		WithTransactFunc: &DBWithTransactFunc{
			defaultHook: i.WithTransact,
		},
		ZoektReposFunc: &DBZoektReposFunc{
			defaultHook: i.ZoektRepos,
		},
	}
}

// DBAccessRequestsFunc describes the behavior when the AccessRequests
// method of the parent MockDB instance is invoked.
type DBAccessRequestsFunc struct {
	defaultHook func() AccessRequestStore
	hooks       []func() AccessRequestStore
	history     []DBAccessRequestsFuncCall
	mutex       sync.Mutex
}

// AccessRequests delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) AccessRequests() AccessRequestStore {
	r0 := m.AccessRequestsFunc.nextHook()()
	m.AccessRequestsFunc.appendCall(DBAccessRequestsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the AccessRequests
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBAccessRequestsFunc) SetDefaultHook(hook func() AccessRequestStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AccessRequests method of the parent MockDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBAccessRequestsFunc) PushHook(hook func() AccessRequestStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBAccessRequestsFunc) SetDefaultReturn(r0 AccessRequestStore) {
	f.SetDefaultHook(func() AccessRequestStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBAccessRequestsFunc) PushReturn(r0 AccessRequestStore) {
	f.PushHook(func() AccessRequestStore {
		return r0
	})
}

func (f *DBAccessRequestsFunc) nextHook() func() AccessRequestStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBAccessRequestsFunc) appendCall(r0 DBAccessRequestsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBAccessRequestsFuncCall objects describing
// the invocations of this function.
func (f *DBAccessRequestsFunc) History() []DBAccessRequestsFuncCall {
	f.mutex.Lock()
	history := make([]DBAccessRequestsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBAccessRequestsFuncCall is an object that describes an invocation of
// method AccessRequests on an instance of MockDB.
type DBAccessRequestsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 AccessRequestStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBAccessRequestsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBAccessRequestsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBAccessTokensFunc describes the behavior when the AccessTokens method of
// the parent MockDB instance is invoked.
type DBAccessTokensFunc struct {
	defaultHook func() AccessTokenStore
	hooks       []func() AccessTokenStore
	history     []DBAccessTokensFuncCall
	mutex       sync.Mutex
}

// AccessTokens delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) AccessTokens() AccessTokenStore {
	r0 := m.AccessTokensFunc.nextHook()()
	m.AccessTokensFunc.appendCall(DBAccessTokensFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the AccessTokens method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBAccessTokensFunc) SetDefaultHook(hook func() AccessTokenStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AccessTokens method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBAccessTokensFunc) PushHook(hook func() AccessTokenStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBAccessTokensFunc) SetDefaultReturn(r0 AccessTokenStore) {
	f.SetDefaultHook(func() AccessTokenStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBAccessTokensFunc) PushReturn(r0 AccessTokenStore) {
	f.PushHook(func() AccessTokenStore {
		return r0
	})
}

func (f *DBAccessTokensFunc) nextHook() func() AccessTokenStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBAccessTokensFunc) appendCall(r0 DBAccessTokensFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBAccessTokensFuncCall objects describing
// the invocations of this function.
func (f *DBAccessTokensFunc) History() []DBAccessTokensFuncCall {
	f.mutex.Lock()
	history := make([]DBAccessTokensFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBAccessTokensFuncCall is an object that describes an invocation of
// method AccessTokens on an instance of MockDB.
type DBAccessTokensFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 AccessTokenStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBAccessTokensFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBAccessTokensFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBAssignedOwnersFunc describes the behavior when the AssignedOwners
// method of the parent MockDB instance is invoked.
type DBAssignedOwnersFunc struct {
	defaultHook func() AssignedOwnersStore
	hooks       []func() AssignedOwnersStore
	history     []DBAssignedOwnersFuncCall
	mutex       sync.Mutex
}

// AssignedOwners delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) AssignedOwners() AssignedOwnersStore {
	r0 := m.AssignedOwnersFunc.nextHook()()
	m.AssignedOwnersFunc.appendCall(DBAssignedOwnersFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the AssignedOwners
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBAssignedOwnersFunc) SetDefaultHook(hook func() AssignedOwnersStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AssignedOwners method of the parent MockDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBAssignedOwnersFunc) PushHook(hook func() AssignedOwnersStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBAssignedOwnersFunc) SetDefaultReturn(r0 AssignedOwnersStore) {
	f.SetDefaultHook(func() AssignedOwnersStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBAssignedOwnersFunc) PushReturn(r0 AssignedOwnersStore) {
	f.PushHook(func() AssignedOwnersStore {
		return r0
	})
}

func (f *DBAssignedOwnersFunc) nextHook() func() AssignedOwnersStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBAssignedOwnersFunc) appendCall(r0 DBAssignedOwnersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBAssignedOwnersFuncCall objects describing
// the invocations of this function.
func (f *DBAssignedOwnersFunc) History() []DBAssignedOwnersFuncCall {
	f.mutex.Lock()
	history := make([]DBAssignedOwnersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBAssignedOwnersFuncCall is an object that describes an invocation of
// method AssignedOwners on an instance of MockDB.
type DBAssignedOwnersFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 AssignedOwnersStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBAssignedOwnersFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBAssignedOwnersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBAssignedTeamsFunc describes the behavior when the AssignedTeams method
// of the parent MockDB instance is invoked.
type DBAssignedTeamsFunc struct {
	defaultHook func() AssignedTeamsStore
	hooks       []func() AssignedTeamsStore
	history     []DBAssignedTeamsFuncCall
	mutex       sync.Mutex
}

// AssignedTeams delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) AssignedTeams() AssignedTeamsStore {
	r0 := m.AssignedTeamsFunc.nextHook()()
	m.AssignedTeamsFunc.appendCall(DBAssignedTeamsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the AssignedTeams method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBAssignedTeamsFunc) SetDefaultHook(hook func() AssignedTeamsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AssignedTeams method of the parent MockDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBAssignedTeamsFunc) PushHook(hook func() AssignedTeamsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBAssignedTeamsFunc) SetDefaultReturn(r0 AssignedTeamsStore) {
	f.SetDefaultHook(func() AssignedTeamsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBAssignedTeamsFunc) PushReturn(r0 AssignedTeamsStore) {
	f.PushHook(func() AssignedTeamsStore {
		return r0
	})
}

func (f *DBAssignedTeamsFunc) nextHook() func() AssignedTeamsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBAssignedTeamsFunc) appendCall(r0 DBAssignedTeamsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBAssignedTeamsFuncCall objects describing
// the invocations of this function.
func (f *DBAssignedTeamsFunc) History() []DBAssignedTeamsFuncCall {
	f.mutex.Lock()
	history := make([]DBAssignedTeamsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBAssignedTeamsFuncCall is an object that describes an invocation of
// method AssignedTeams on an instance of MockDB.
type DBAssignedTeamsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 AssignedTeamsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBAssignedTeamsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBAssignedTeamsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBAuthzFunc describes the behavior when the Authz method of the parent
// MockDB instance is invoked.
type DBAuthzFunc struct {
	defaultHook func() AuthzStore
	hooks       []func() AuthzStore
	history     []DBAuthzFuncCall
	mutex       sync.Mutex
}

// Authz delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) Authz() AuthzStore {
	r0 := m.AuthzFunc.nextHook()()
	m.AuthzFunc.appendCall(DBAuthzFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Authz method of the
// parent MockDB instance is invoked and the hook queue is empty.
func (f *DBAuthzFunc) SetDefaultHook(hook func() AuthzStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Authz method of the parent MockDB instance invokes the hook at the front
// of the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *DBAuthzFunc) PushHook(hook func() AuthzStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBAuthzFunc) SetDefaultReturn(r0 AuthzStore) {
	f.SetDefaultHook(func() AuthzStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBAuthzFunc) PushReturn(r0 AuthzStore) {
	f.PushHook(func() AuthzStore {
		return r0
	})
}

func (f *DBAuthzFunc) nextHook() func() AuthzStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBAuthzFunc) appendCall(r0 DBAuthzFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBAuthzFuncCall objects describing the
// invocations of this function.
func (f *DBAuthzFunc) History() []DBAuthzFuncCall {
	f.mutex.Lock()
	history := make([]DBAuthzFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBAuthzFuncCall is an object that describes an invocation of method Authz
// on an instance of MockDB.
type DBAuthzFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 AuthzStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBAuthzFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBAuthzFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBBitbucketProjectPermissionsFunc describes the behavior when the
// BitbucketProjectPermissions method of the parent MockDB instance is
// invoked.
type DBBitbucketProjectPermissionsFunc struct {
	defaultHook func() BitbucketProjectPermissionsStore
	hooks       []func() BitbucketProjectPermissionsStore
	history     []DBBitbucketProjectPermissionsFuncCall
	mutex       sync.Mutex
}

// BitbucketProjectPermissions delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockDB) BitbucketProjectPermissions() BitbucketProjectPermissionsStore {
	r0 := m.BitbucketProjectPermissionsFunc.nextHook()()
	m.BitbucketProjectPermissionsFunc.appendCall(DBBitbucketProjectPermissionsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// BitbucketProjectPermissions method of the parent MockDB instance is
// invoked and the hook queue is empty.
func (f *DBBitbucketProjectPermissionsFunc) SetDefaultHook(hook func() BitbucketProjectPermissionsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BitbucketProjectPermissions method of the parent MockDB instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *DBBitbucketProjectPermissionsFunc) PushHook(hook func() BitbucketProjectPermissionsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBBitbucketProjectPermissionsFunc) SetDefaultReturn(r0 BitbucketProjectPermissionsStore) {
	f.SetDefaultHook(func() BitbucketProjectPermissionsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBBitbucketProjectPermissionsFunc) PushReturn(r0 BitbucketProjectPermissionsStore) {
	f.PushHook(func() BitbucketProjectPermissionsStore {
		return r0
	})
}

func (f *DBBitbucketProjectPermissionsFunc) nextHook() func() BitbucketProjectPermissionsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBBitbucketProjectPermissionsFunc) appendCall(r0 DBBitbucketProjectPermissionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBBitbucketProjectPermissionsFuncCall
// objects describing the invocations of this function.
func (f *DBBitbucketProjectPermissionsFunc) History() []DBBitbucketProjectPermissionsFuncCall {
	f.mutex.Lock()
	history := make([]DBBitbucketProjectPermissionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBBitbucketProjectPermissionsFuncCall is an object that describes an
// invocation of method BitbucketProjectPermissions on an instance of
// MockDB.
type DBBitbucketProjectPermissionsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 BitbucketProjectPermissionsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBBitbucketProjectPermissionsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBBitbucketProjectPermissionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBConfFunc describes the behavior when the Conf method of the parent
// MockDB instance is invoked.
type DBConfFunc struct {
	defaultHook func() ConfStore
	hooks       []func() ConfStore
	history     []DBConfFuncCall
	mutex       sync.Mutex
}

// Conf delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) Conf() ConfStore {
	r0 := m.ConfFunc.nextHook()()
	m.ConfFunc.appendCall(DBConfFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Conf method of the
// parent MockDB instance is invoked and the hook queue is empty.
func (f *DBConfFunc) SetDefaultHook(hook func() ConfStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Conf method of the parent MockDB instance invokes the hook at the front
// of the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *DBConfFunc) PushHook(hook func() ConfStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBConfFunc) SetDefaultReturn(r0 ConfStore) {
	f.SetDefaultHook(func() ConfStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBConfFunc) PushReturn(r0 ConfStore) {
	f.PushHook(func() ConfStore {
		return r0
	})
}

func (f *DBConfFunc) nextHook() func() ConfStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBConfFunc) appendCall(r0 DBConfFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBConfFuncCall objects describing the
// invocations of this function.
func (f *DBConfFunc) History() []DBConfFuncCall {
	f.mutex.Lock()
	history := make([]DBConfFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBConfFuncCall is an object that describes an invocation of method Conf
// on an instance of MockDB.
type DBConfFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 ConfStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBConfFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBConfFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBEventLogsFunc describes the behavior when the EventLogs method of the
// parent MockDB instance is invoked.
type DBEventLogsFunc struct {
	defaultHook func() EventLogStore
	hooks       []func() EventLogStore
	history     []DBEventLogsFuncCall
	mutex       sync.Mutex
}

// EventLogs delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) EventLogs() EventLogStore {
	r0 := m.EventLogsFunc.nextHook()()
	m.EventLogsFunc.appendCall(DBEventLogsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the EventLogs method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBEventLogsFunc) SetDefaultHook(hook func() EventLogStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EventLogs method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBEventLogsFunc) PushHook(hook func() EventLogStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBEventLogsFunc) SetDefaultReturn(r0 EventLogStore) {
	f.SetDefaultHook(func() EventLogStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBEventLogsFunc) PushReturn(r0 EventLogStore) {
	f.PushHook(func() EventLogStore {
		return r0
	})
}

func (f *DBEventLogsFunc) nextHook() func() EventLogStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBEventLogsFunc) appendCall(r0 DBEventLogsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBEventLogsFuncCall objects describing the
// invocations of this function.
func (f *DBEventLogsFunc) History() []DBEventLogsFuncCall {
	f.mutex.Lock()
	history := make([]DBEventLogsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBEventLogsFuncCall is an object that describes an invocation of method
// EventLogs on an instance of MockDB.
type DBEventLogsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 EventLogStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBEventLogsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBEventLogsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBEventLogsScrapeStateFunc describes the behavior when the
// EventLogsScrapeState method of the parent MockDB instance is invoked.
type DBEventLogsScrapeStateFunc struct {
	defaultHook func() EventLogsScrapeStateStore
	hooks       []func() EventLogsScrapeStateStore
	history     []DBEventLogsScrapeStateFuncCall
	mutex       sync.Mutex
}

// EventLogsScrapeState delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) EventLogsScrapeState() EventLogsScrapeStateStore {
	r0 := m.EventLogsScrapeStateFunc.nextHook()()
	m.EventLogsScrapeStateFunc.appendCall(DBEventLogsScrapeStateFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the EventLogsScrapeState
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBEventLogsScrapeStateFunc) SetDefaultHook(hook func() EventLogsScrapeStateStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EventLogsScrapeState method of the parent MockDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *DBEventLogsScrapeStateFunc) PushHook(hook func() EventLogsScrapeStateStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBEventLogsScrapeStateFunc) SetDefaultReturn(r0 EventLogsScrapeStateStore) {
	f.SetDefaultHook(func() EventLogsScrapeStateStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBEventLogsScrapeStateFunc) PushReturn(r0 EventLogsScrapeStateStore) {
	f.PushHook(func() EventLogsScrapeStateStore {
		return r0
	})
}

func (f *DBEventLogsScrapeStateFunc) nextHook() func() EventLogsScrapeStateStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBEventLogsScrapeStateFunc) appendCall(r0 DBEventLogsScrapeStateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBEventLogsScrapeStateFuncCall objects
// describing the invocations of this function.
func (f *DBEventLogsScrapeStateFunc) History() []DBEventLogsScrapeStateFuncCall {
	f.mutex.Lock()
	history := make([]DBEventLogsScrapeStateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBEventLogsScrapeStateFuncCall is an object that describes an invocation
// of method EventLogsScrapeState on an instance of MockDB.
type DBEventLogsScrapeStateFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 EventLogsScrapeStateStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBEventLogsScrapeStateFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBEventLogsScrapeStateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBExecContextFunc describes the behavior when the ExecContext method of
// the parent MockDB instance is invoked.
type DBExecContextFunc struct {
	defaultHook func(context.Context, string, ...interface{}) (sql.Result, error)
	hooks       []func(context.Context, string, ...interface{}) (sql.Result, error)
	history     []DBExecContextFuncCall
	mutex       sync.Mutex
}

// ExecContext delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) ExecContext(v0 context.Context, v1 string, v2 ...interface{}) (sql.Result, error) {
	r0, r1 := m.ExecContextFunc.nextHook()(v0, v1, v2...)
	m.ExecContextFunc.appendCall(DBExecContextFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ExecContext method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBExecContextFunc) SetDefaultHook(hook func(context.Context, string, ...interface{}) (sql.Result, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExecContext method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBExecContextFunc) PushHook(hook func(context.Context, string, ...interface{}) (sql.Result, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBExecContextFunc) SetDefaultReturn(r0 sql.Result, r1 error) {
	f.SetDefaultHook(func(context.Context, string, ...interface{}) (sql.Result, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBExecContextFunc) PushReturn(r0 sql.Result, r1 error) {
	f.PushHook(func(context.Context, string, ...interface{}) (sql.Result, error) {
		return r0, r1
	})
}

func (f *DBExecContextFunc) nextHook() func(context.Context, string, ...interface{}) (sql.Result, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBExecContextFunc) appendCall(r0 DBExecContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBExecContextFuncCall objects describing
// the invocations of this function.
func (f *DBExecContextFunc) History() []DBExecContextFuncCall {
	f.mutex.Lock()
	history := make([]DBExecContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBExecContextFuncCall is an object that describes an invocation of method
// ExecContext on an instance of MockDB.
type DBExecContextFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 sql.Result
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c DBExecContextFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBExecContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DBExecutorSecretAccessLogsFunc describes the behavior when the
// ExecutorSecretAccessLogs method of the parent MockDB instance is invoked.
type DBExecutorSecretAccessLogsFunc struct {
	defaultHook func() ExecutorSecretAccessLogStore
	hooks       []func() ExecutorSecretAccessLogStore
	history     []DBExecutorSecretAccessLogsFuncCall
	mutex       sync.Mutex
}

// ExecutorSecretAccessLogs delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockDB) ExecutorSecretAccessLogs() ExecutorSecretAccessLogStore {
	r0 := m.ExecutorSecretAccessLogsFunc.nextHook()()
	m.ExecutorSecretAccessLogsFunc.appendCall(DBExecutorSecretAccessLogsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// ExecutorSecretAccessLogs method of the parent MockDB instance is invoked
// and the hook queue is empty.
func (f *DBExecutorSecretAccessLogsFunc) SetDefaultHook(hook func() ExecutorSecretAccessLogStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExecutorSecretAccessLogs method of the parent MockDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *DBExecutorSecretAccessLogsFunc) PushHook(hook func() ExecutorSecretAccessLogStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBExecutorSecretAccessLogsFunc) SetDefaultReturn(r0 ExecutorSecretAccessLogStore) {
	f.SetDefaultHook(func() ExecutorSecretAccessLogStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBExecutorSecretAccessLogsFunc) PushReturn(r0 ExecutorSecretAccessLogStore) {
	f.PushHook(func() ExecutorSecretAccessLogStore {
		return r0
	})
}

func (f *DBExecutorSecretAccessLogsFunc) nextHook() func() ExecutorSecretAccessLogStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBExecutorSecretAccessLogsFunc) appendCall(r0 DBExecutorSecretAccessLogsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBExecutorSecretAccessLogsFuncCall objects
// describing the invocations of this function.
func (f *DBExecutorSecretAccessLogsFunc) History() []DBExecutorSecretAccessLogsFuncCall {
	f.mutex.Lock()
	history := make([]DBExecutorSecretAccessLogsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBExecutorSecretAccessLogsFuncCall is an object that describes an
// invocation of method ExecutorSecretAccessLogs on an instance of MockDB.
type DBExecutorSecretAccessLogsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 ExecutorSecretAccessLogStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBExecutorSecretAccessLogsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBExecutorSecretAccessLogsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBExecutorSecretsFunc describes the behavior when the ExecutorSecrets
// method of the parent MockDB instance is invoked.
type DBExecutorSecretsFunc struct {
	defaultHook func(encryption.Key) ExecutorSecretStore
	hooks       []func(encryption.Key) ExecutorSecretStore
	history     []DBExecutorSecretsFuncCall
	mutex       sync.Mutex
}

// ExecutorSecrets delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) ExecutorSecrets(v0 encryption.Key) ExecutorSecretStore {
	r0 := m.ExecutorSecretsFunc.nextHook()(v0)
	m.ExecutorSecretsFunc.appendCall(DBExecutorSecretsFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the ExecutorSecrets
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBExecutorSecretsFunc) SetDefaultHook(hook func(encryption.Key) ExecutorSecretStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExecutorSecrets method of the parent MockDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBExecutorSecretsFunc) PushHook(hook func(encryption.Key) ExecutorSecretStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBExecutorSecretsFunc) SetDefaultReturn(r0 ExecutorSecretStore) {
	f.SetDefaultHook(func(encryption.Key) ExecutorSecretStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBExecutorSecretsFunc) PushReturn(r0 ExecutorSecretStore) {
	f.PushHook(func(encryption.Key) ExecutorSecretStore {
		return r0
	})
}

func (f *DBExecutorSecretsFunc) nextHook() func(encryption.Key) ExecutorSecretStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBExecutorSecretsFunc) appendCall(r0 DBExecutorSecretsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBExecutorSecretsFuncCall objects
// describing the invocations of this function.
func (f *DBExecutorSecretsFunc) History() []DBExecutorSecretsFuncCall {
	f.mutex.Lock()
	history := make([]DBExecutorSecretsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBExecutorSecretsFuncCall is an object that describes an invocation of
// method ExecutorSecrets on an instance of MockDB.
type DBExecutorSecretsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 encryption.Key
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 ExecutorSecretStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBExecutorSecretsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBExecutorSecretsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBExecutorsFunc describes the behavior when the Executors method of the
// parent MockDB instance is invoked.
type DBExecutorsFunc struct {
	defaultHook func() ExecutorStore
	hooks       []func() ExecutorStore
	history     []DBExecutorsFuncCall
	mutex       sync.Mutex
}

// Executors delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) Executors() ExecutorStore {
	r0 := m.ExecutorsFunc.nextHook()()
	m.ExecutorsFunc.appendCall(DBExecutorsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Executors method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBExecutorsFunc) SetDefaultHook(hook func() ExecutorStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Executors method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBExecutorsFunc) PushHook(hook func() ExecutorStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBExecutorsFunc) SetDefaultReturn(r0 ExecutorStore) {
	f.SetDefaultHook(func() ExecutorStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBExecutorsFunc) PushReturn(r0 ExecutorStore) {
	f.PushHook(func() ExecutorStore {
		return r0
	})
}

func (f *DBExecutorsFunc) nextHook() func() ExecutorStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBExecutorsFunc) appendCall(r0 DBExecutorsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBExecutorsFuncCall objects describing the
// invocations of this function.
func (f *DBExecutorsFunc) History() []DBExecutorsFuncCall {
	f.mutex.Lock()
	history := make([]DBExecutorsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBExecutorsFuncCall is an object that describes an invocation of method
// Executors on an instance of MockDB.
type DBExecutorsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 ExecutorStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBExecutorsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBExecutorsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBExternalServicesFunc describes the behavior when the ExternalServices
// method of the parent MockDB instance is invoked.
type DBExternalServicesFunc struct {
	defaultHook func() ExternalServiceStore
	hooks       []func() ExternalServiceStore
	history     []DBExternalServicesFuncCall
	mutex       sync.Mutex
}

// ExternalServices delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) ExternalServices() ExternalServiceStore {
	r0 := m.ExternalServicesFunc.nextHook()()
	m.ExternalServicesFunc.appendCall(DBExternalServicesFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ExternalServices
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBExternalServicesFunc) SetDefaultHook(hook func() ExternalServiceStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExternalServices method of the parent MockDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBExternalServicesFunc) PushHook(hook func() ExternalServiceStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBExternalServicesFunc) SetDefaultReturn(r0 ExternalServiceStore) {
	f.SetDefaultHook(func() ExternalServiceStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBExternalServicesFunc) PushReturn(r0 ExternalServiceStore) {
	f.PushHook(func() ExternalServiceStore {
		return r0
	})
}

func (f *DBExternalServicesFunc) nextHook() func() ExternalServiceStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBExternalServicesFunc) appendCall(r0 DBExternalServicesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBExternalServicesFuncCall objects
// describing the invocations of this function.
func (f *DBExternalServicesFunc) History() []DBExternalServicesFuncCall {
	f.mutex.Lock()
	history := make([]DBExternalServicesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBExternalServicesFuncCall is an object that describes an invocation of
// method ExternalServices on an instance of MockDB.
type DBExternalServicesFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 ExternalServiceStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBExternalServicesFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBExternalServicesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBFeatureFlagsFunc describes the behavior when the FeatureFlags method of
// the parent MockDB instance is invoked.
type DBFeatureFlagsFunc struct {
	defaultHook func() FeatureFlagStore
	hooks       []func() FeatureFlagStore
	history     []DBFeatureFlagsFuncCall
	mutex       sync.Mutex
}

// FeatureFlags delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) FeatureFlags() FeatureFlagStore {
	r0 := m.FeatureFlagsFunc.nextHook()()
	m.FeatureFlagsFunc.appendCall(DBFeatureFlagsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the FeatureFlags method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBFeatureFlagsFunc) SetDefaultHook(hook func() FeatureFlagStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FeatureFlags method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBFeatureFlagsFunc) PushHook(hook func() FeatureFlagStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBFeatureFlagsFunc) SetDefaultReturn(r0 FeatureFlagStore) {
	f.SetDefaultHook(func() FeatureFlagStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBFeatureFlagsFunc) PushReturn(r0 FeatureFlagStore) {
	f.PushHook(func() FeatureFlagStore {
		return r0
	})
}

func (f *DBFeatureFlagsFunc) nextHook() func() FeatureFlagStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBFeatureFlagsFunc) appendCall(r0 DBFeatureFlagsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBFeatureFlagsFuncCall objects describing
// the invocations of this function.
func (f *DBFeatureFlagsFunc) History() []DBFeatureFlagsFuncCall {
	f.mutex.Lock()
	history := make([]DBFeatureFlagsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBFeatureFlagsFuncCall is an object that describes an invocation of
// method FeatureFlags on an instance of MockDB.
type DBFeatureFlagsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 FeatureFlagStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBFeatureFlagsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBFeatureFlagsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBGitserverLocalCloneFunc describes the behavior when the
// GitserverLocalClone method of the parent MockDB instance is invoked.
type DBGitserverLocalCloneFunc struct {
	defaultHook func() GitserverLocalCloneStore
	hooks       []func() GitserverLocalCloneStore
	history     []DBGitserverLocalCloneFuncCall
	mutex       sync.Mutex
}

// GitserverLocalClone delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) GitserverLocalClone() GitserverLocalCloneStore {
	r0 := m.GitserverLocalCloneFunc.nextHook()()
	m.GitserverLocalCloneFunc.appendCall(DBGitserverLocalCloneFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GitserverLocalClone
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBGitserverLocalCloneFunc) SetDefaultHook(hook func() GitserverLocalCloneStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GitserverLocalClone method of the parent MockDB instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBGitserverLocalCloneFunc) PushHook(hook func() GitserverLocalCloneStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBGitserverLocalCloneFunc) SetDefaultReturn(r0 GitserverLocalCloneStore) {
	f.SetDefaultHook(func() GitserverLocalCloneStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBGitserverLocalCloneFunc) PushReturn(r0 GitserverLocalCloneStore) {
	f.PushHook(func() GitserverLocalCloneStore {
		return r0
	})
}

func (f *DBGitserverLocalCloneFunc) nextHook() func() GitserverLocalCloneStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBGitserverLocalCloneFunc) appendCall(r0 DBGitserverLocalCloneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBGitserverLocalCloneFuncCall objects
// describing the invocations of this function.
func (f *DBGitserverLocalCloneFunc) History() []DBGitserverLocalCloneFuncCall {
	f.mutex.Lock()
	history := make([]DBGitserverLocalCloneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBGitserverLocalCloneFuncCall is an object that describes an invocation
// of method GitserverLocalClone on an instance of MockDB.
type DBGitserverLocalCloneFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 GitserverLocalCloneStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBGitserverLocalCloneFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBGitserverLocalCloneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBGitserverReposFunc describes the behavior when the GitserverRepos
// method of the parent MockDB instance is invoked.
type DBGitserverReposFunc struct {
	defaultHook func() GitserverRepoStore
	hooks       []func() GitserverRepoStore
	history     []DBGitserverReposFuncCall
	mutex       sync.Mutex
}

// GitserverRepos delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) GitserverRepos() GitserverRepoStore {
	r0 := m.GitserverReposFunc.nextHook()()
	m.GitserverReposFunc.appendCall(DBGitserverReposFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GitserverRepos
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBGitserverReposFunc) SetDefaultHook(hook func() GitserverRepoStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GitserverRepos method of the parent MockDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBGitserverReposFunc) PushHook(hook func() GitserverRepoStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBGitserverReposFunc) SetDefaultReturn(r0 GitserverRepoStore) {
	f.SetDefaultHook(func() GitserverRepoStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBGitserverReposFunc) PushReturn(r0 GitserverRepoStore) {
	f.PushHook(func() GitserverRepoStore {
		return r0
	})
}

func (f *DBGitserverReposFunc) nextHook() func() GitserverRepoStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBGitserverReposFunc) appendCall(r0 DBGitserverReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBGitserverReposFuncCall objects describing
// the invocations of this function.
func (f *DBGitserverReposFunc) History() []DBGitserverReposFuncCall {
	f.mutex.Lock()
	history := make([]DBGitserverReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBGitserverReposFuncCall is an object that describes an invocation of
// method GitserverRepos on an instance of MockDB.
type DBGitserverReposFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 GitserverRepoStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBGitserverReposFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBGitserverReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBGlobalStateFunc describes the behavior when the GlobalState method of
// the parent MockDB instance is invoked.
type DBGlobalStateFunc struct {
	defaultHook func() GlobalStateStore
	hooks       []func() GlobalStateStore
	history     []DBGlobalStateFuncCall
	mutex       sync.Mutex
}

// GlobalState delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) GlobalState() GlobalStateStore {
	r0 := m.GlobalStateFunc.nextHook()()
	m.GlobalStateFunc.appendCall(DBGlobalStateFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GlobalState method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBGlobalStateFunc) SetDefaultHook(hook func() GlobalStateStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GlobalState method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBGlobalStateFunc) PushHook(hook func() GlobalStateStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBGlobalStateFunc) SetDefaultReturn(r0 GlobalStateStore) {
	f.SetDefaultHook(func() GlobalStateStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBGlobalStateFunc) PushReturn(r0 GlobalStateStore) {
	f.PushHook(func() GlobalStateStore {
		return r0
	})
}

func (f *DBGlobalStateFunc) nextHook() func() GlobalStateStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBGlobalStateFunc) appendCall(r0 DBGlobalStateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBGlobalStateFuncCall objects describing
// the invocations of this function.
func (f *DBGlobalStateFunc) History() []DBGlobalStateFuncCall {
	f.mutex.Lock()
	history := make([]DBGlobalStateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBGlobalStateFuncCall is an object that describes an invocation of method
// GlobalState on an instance of MockDB.
type DBGlobalStateFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 GlobalStateStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBGlobalStateFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBGlobalStateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBHandleFunc describes the behavior when the Handle method of the parent
// MockDB instance is invoked.
type DBHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []DBHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(DBHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockDB instance is invoked and the hook queue is empty.
func (f *DBHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockDB instance invokes the hook at the front
// of the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *DBHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *DBHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBHandleFunc) appendCall(r0 DBHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBHandleFuncCall objects describing the
// invocations of this function.
func (f *DBHandleFunc) History() []DBHandleFuncCall {
	f.mutex.Lock()
	history := make([]DBHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBHandleFuncCall is an object that describes an invocation of method
// Handle on an instance of MockDB.
type DBHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBNamespacePermissionsFunc describes the behavior when the
// NamespacePermissions method of the parent MockDB instance is invoked.
type DBNamespacePermissionsFunc struct {
	defaultHook func() NamespacePermissionStore
	hooks       []func() NamespacePermissionStore
	history     []DBNamespacePermissionsFuncCall
	mutex       sync.Mutex
}

// NamespacePermissions delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) NamespacePermissions() NamespacePermissionStore {
	r0 := m.NamespacePermissionsFunc.nextHook()()
	m.NamespacePermissionsFunc.appendCall(DBNamespacePermissionsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the NamespacePermissions
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBNamespacePermissionsFunc) SetDefaultHook(hook func() NamespacePermissionStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// NamespacePermissions method of the parent MockDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *DBNamespacePermissionsFunc) PushHook(hook func() NamespacePermissionStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBNamespacePermissionsFunc) SetDefaultReturn(r0 NamespacePermissionStore) {
	f.SetDefaultHook(func() NamespacePermissionStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBNamespacePermissionsFunc) PushReturn(r0 NamespacePermissionStore) {
	f.PushHook(func() NamespacePermissionStore {
		return r0
	})
}

func (f *DBNamespacePermissionsFunc) nextHook() func() NamespacePermissionStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBNamespacePermissionsFunc) appendCall(r0 DBNamespacePermissionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBNamespacePermissionsFuncCall objects
// describing the invocations of this function.
func (f *DBNamespacePermissionsFunc) History() []DBNamespacePermissionsFuncCall {
	f.mutex.Lock()
	history := make([]DBNamespacePermissionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBNamespacePermissionsFuncCall is an object that describes an invocation
// of method NamespacePermissions on an instance of MockDB.
type DBNamespacePermissionsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 NamespacePermissionStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBNamespacePermissionsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBNamespacePermissionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBNamespacesFunc describes the behavior when the Namespaces method of the
// parent MockDB instance is invoked.
type DBNamespacesFunc struct {
	defaultHook func() NamespaceStore
	hooks       []func() NamespaceStore
	history     []DBNamespacesFuncCall
	mutex       sync.Mutex
}

// Namespaces delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) Namespaces() NamespaceStore {
	r0 := m.NamespacesFunc.nextHook()()
	m.NamespacesFunc.appendCall(DBNamespacesFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Namespaces method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBNamespacesFunc) SetDefaultHook(hook func() NamespaceStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Namespaces method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBNamespacesFunc) PushHook(hook func() NamespaceStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBNamespacesFunc) SetDefaultReturn(r0 NamespaceStore) {
	f.SetDefaultHook(func() NamespaceStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBNamespacesFunc) PushReturn(r0 NamespaceStore) {
	f.PushHook(func() NamespaceStore {
		return r0
	})
}

func (f *DBNamespacesFunc) nextHook() func() NamespaceStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBNamespacesFunc) appendCall(r0 DBNamespacesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBNamespacesFuncCall objects describing the
// invocations of this function.
func (f *DBNamespacesFunc) History() []DBNamespacesFuncCall {
	f.mutex.Lock()
	history := make([]DBNamespacesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBNamespacesFuncCall is an object that describes an invocation of method
// Namespaces on an instance of MockDB.
type DBNamespacesFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 NamespaceStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBNamespacesFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBNamespacesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBOrgInvitationsFunc describes the behavior when the OrgInvitations
// method of the parent MockDB instance is invoked.
type DBOrgInvitationsFunc struct {
	defaultHook func() OrgInvitationStore
	hooks       []func() OrgInvitationStore
	history     []DBOrgInvitationsFuncCall
	mutex       sync.Mutex
}

// OrgInvitations delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) OrgInvitations() OrgInvitationStore {
	r0 := m.OrgInvitationsFunc.nextHook()()
	m.OrgInvitationsFunc.appendCall(DBOrgInvitationsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the OrgInvitations
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBOrgInvitationsFunc) SetDefaultHook(hook func() OrgInvitationStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// OrgInvitations method of the parent MockDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBOrgInvitationsFunc) PushHook(hook func() OrgInvitationStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBOrgInvitationsFunc) SetDefaultReturn(r0 OrgInvitationStore) {
	f.SetDefaultHook(func() OrgInvitationStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBOrgInvitationsFunc) PushReturn(r0 OrgInvitationStore) {
	f.PushHook(func() OrgInvitationStore {
		return r0
	})
}

func (f *DBOrgInvitationsFunc) nextHook() func() OrgInvitationStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBOrgInvitationsFunc) appendCall(r0 DBOrgInvitationsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBOrgInvitationsFuncCall objects describing
// the invocations of this function.
func (f *DBOrgInvitationsFunc) History() []DBOrgInvitationsFuncCall {
	f.mutex.Lock()
	history := make([]DBOrgInvitationsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBOrgInvitationsFuncCall is an object that describes an invocation of
// method OrgInvitations on an instance of MockDB.
type DBOrgInvitationsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 OrgInvitationStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBOrgInvitationsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBOrgInvitationsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBOrgMembersFunc describes the behavior when the OrgMembers method of the
// parent MockDB instance is invoked.
type DBOrgMembersFunc struct {
	defaultHook func() OrgMemberStore
	hooks       []func() OrgMemberStore
	history     []DBOrgMembersFuncCall
	mutex       sync.Mutex
}

// OrgMembers delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) OrgMembers() OrgMemberStore {
	r0 := m.OrgMembersFunc.nextHook()()
	m.OrgMembersFunc.appendCall(DBOrgMembersFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the OrgMembers method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBOrgMembersFunc) SetDefaultHook(hook func() OrgMemberStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// OrgMembers method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBOrgMembersFunc) PushHook(hook func() OrgMemberStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBOrgMembersFunc) SetDefaultReturn(r0 OrgMemberStore) {
	f.SetDefaultHook(func() OrgMemberStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBOrgMembersFunc) PushReturn(r0 OrgMemberStore) {
	f.PushHook(func() OrgMemberStore {
		return r0
	})
}

func (f *DBOrgMembersFunc) nextHook() func() OrgMemberStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBOrgMembersFunc) appendCall(r0 DBOrgMembersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBOrgMembersFuncCall objects describing the
// invocations of this function.
func (f *DBOrgMembersFunc) History() []DBOrgMembersFuncCall {
	f.mutex.Lock()
	history := make([]DBOrgMembersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBOrgMembersFuncCall is an object that describes an invocation of method
// OrgMembers on an instance of MockDB.
type DBOrgMembersFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 OrgMemberStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBOrgMembersFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBOrgMembersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBOrgsFunc describes the behavior when the Orgs method of the parent
// MockDB instance is invoked.
type DBOrgsFunc struct {
	defaultHook func() OrgStore
	hooks       []func() OrgStore
	history     []DBOrgsFuncCall
	mutex       sync.Mutex
}

// Orgs delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) Orgs() OrgStore {
	r0 := m.OrgsFunc.nextHook()()
	m.OrgsFunc.appendCall(DBOrgsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Orgs method of the
// parent MockDB instance is invoked and the hook queue is empty.
func (f *DBOrgsFunc) SetDefaultHook(hook func() OrgStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Orgs method of the parent MockDB instance invokes the hook at the front
// of the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *DBOrgsFunc) PushHook(hook func() OrgStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBOrgsFunc) SetDefaultReturn(r0 OrgStore) {
	f.SetDefaultHook(func() OrgStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBOrgsFunc) PushReturn(r0 OrgStore) {
	f.PushHook(func() OrgStore {
		return r0
	})
}

func (f *DBOrgsFunc) nextHook() func() OrgStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBOrgsFunc) appendCall(r0 DBOrgsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBOrgsFuncCall objects describing the
// invocations of this function.
func (f *DBOrgsFunc) History() []DBOrgsFuncCall {
	f.mutex.Lock()
	history := make([]DBOrgsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBOrgsFuncCall is an object that describes an invocation of method Orgs
// on an instance of MockDB.
type DBOrgsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 OrgStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBOrgsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBOrgsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBOutboundWebhookJobsFunc describes the behavior when the
// OutboundWebhookJobs method of the parent MockDB instance is invoked.
type DBOutboundWebhookJobsFunc struct {
	defaultHook func(encryption.Key) OutboundWebhookJobStore
	hooks       []func(encryption.Key) OutboundWebhookJobStore
	history     []DBOutboundWebhookJobsFuncCall
	mutex       sync.Mutex
}

// OutboundWebhookJobs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) OutboundWebhookJobs(v0 encryption.Key) OutboundWebhookJobStore {
	r0 := m.OutboundWebhookJobsFunc.nextHook()(v0)
	m.OutboundWebhookJobsFunc.appendCall(DBOutboundWebhookJobsFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the OutboundWebhookJobs
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBOutboundWebhookJobsFunc) SetDefaultHook(hook func(encryption.Key) OutboundWebhookJobStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// OutboundWebhookJobs method of the parent MockDB instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBOutboundWebhookJobsFunc) PushHook(hook func(encryption.Key) OutboundWebhookJobStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBOutboundWebhookJobsFunc) SetDefaultReturn(r0 OutboundWebhookJobStore) {
	f.SetDefaultHook(func(encryption.Key) OutboundWebhookJobStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBOutboundWebhookJobsFunc) PushReturn(r0 OutboundWebhookJobStore) {
	f.PushHook(func(encryption.Key) OutboundWebhookJobStore {
		return r0
	})
}

func (f *DBOutboundWebhookJobsFunc) nextHook() func(encryption.Key) OutboundWebhookJobStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBOutboundWebhookJobsFunc) appendCall(r0 DBOutboundWebhookJobsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBOutboundWebhookJobsFuncCall objects
// describing the invocations of this function.
func (f *DBOutboundWebhookJobsFunc) History() []DBOutboundWebhookJobsFuncCall {
	f.mutex.Lock()
	history := make([]DBOutboundWebhookJobsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBOutboundWebhookJobsFuncCall is an object that describes an invocation
// of method OutboundWebhookJobs on an instance of MockDB.
type DBOutboundWebhookJobsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 encryption.Key
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 OutboundWebhookJobStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBOutboundWebhookJobsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBOutboundWebhookJobsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBOutboundWebhookLogsFunc describes the behavior when the
// OutboundWebhookLogs method of the parent MockDB instance is invoked.
type DBOutboundWebhookLogsFunc struct {
	defaultHook func(encryption.Key) OutboundWebhookLogStore
	hooks       []func(encryption.Key) OutboundWebhookLogStore
	history     []DBOutboundWebhookLogsFuncCall
	mutex       sync.Mutex
}

// OutboundWebhookLogs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) OutboundWebhookLogs(v0 encryption.Key) OutboundWebhookLogStore {
	r0 := m.OutboundWebhookLogsFunc.nextHook()(v0)
	m.OutboundWebhookLogsFunc.appendCall(DBOutboundWebhookLogsFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the OutboundWebhookLogs
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBOutboundWebhookLogsFunc) SetDefaultHook(hook func(encryption.Key) OutboundWebhookLogStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// OutboundWebhookLogs method of the parent MockDB instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBOutboundWebhookLogsFunc) PushHook(hook func(encryption.Key) OutboundWebhookLogStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBOutboundWebhookLogsFunc) SetDefaultReturn(r0 OutboundWebhookLogStore) {
	f.SetDefaultHook(func(encryption.Key) OutboundWebhookLogStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBOutboundWebhookLogsFunc) PushReturn(r0 OutboundWebhookLogStore) {
	f.PushHook(func(encryption.Key) OutboundWebhookLogStore {
		return r0
	})
}

func (f *DBOutboundWebhookLogsFunc) nextHook() func(encryption.Key) OutboundWebhookLogStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBOutboundWebhookLogsFunc) appendCall(r0 DBOutboundWebhookLogsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBOutboundWebhookLogsFuncCall objects
// describing the invocations of this function.
func (f *DBOutboundWebhookLogsFunc) History() []DBOutboundWebhookLogsFuncCall {
	f.mutex.Lock()
	history := make([]DBOutboundWebhookLogsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBOutboundWebhookLogsFuncCall is an object that describes an invocation
// of method OutboundWebhookLogs on an instance of MockDB.
type DBOutboundWebhookLogsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 encryption.Key
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 OutboundWebhookLogStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBOutboundWebhookLogsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBOutboundWebhookLogsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBOutboundWebhooksFunc describes the behavior when the OutboundWebhooks
// method of the parent MockDB instance is invoked.
type DBOutboundWebhooksFunc struct {
	defaultHook func(encryption.Key) OutboundWebhookStore
	hooks       []func(encryption.Key) OutboundWebhookStore
	history     []DBOutboundWebhooksFuncCall
	mutex       sync.Mutex
}

// OutboundWebhooks delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) OutboundWebhooks(v0 encryption.Key) OutboundWebhookStore {
	r0 := m.OutboundWebhooksFunc.nextHook()(v0)
	m.OutboundWebhooksFunc.appendCall(DBOutboundWebhooksFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the OutboundWebhooks
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBOutboundWebhooksFunc) SetDefaultHook(hook func(encryption.Key) OutboundWebhookStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// OutboundWebhooks method of the parent MockDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBOutboundWebhooksFunc) PushHook(hook func(encryption.Key) OutboundWebhookStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBOutboundWebhooksFunc) SetDefaultReturn(r0 OutboundWebhookStore) {
	f.SetDefaultHook(func(encryption.Key) OutboundWebhookStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBOutboundWebhooksFunc) PushReturn(r0 OutboundWebhookStore) {
	f.PushHook(func(encryption.Key) OutboundWebhookStore {
		return r0
	})
}

func (f *DBOutboundWebhooksFunc) nextHook() func(encryption.Key) OutboundWebhookStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBOutboundWebhooksFunc) appendCall(r0 DBOutboundWebhooksFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBOutboundWebhooksFuncCall objects
// describing the invocations of this function.
func (f *DBOutboundWebhooksFunc) History() []DBOutboundWebhooksFuncCall {
	f.mutex.Lock()
	history := make([]DBOutboundWebhooksFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBOutboundWebhooksFuncCall is an object that describes an invocation of
// method OutboundWebhooks on an instance of MockDB.
type DBOutboundWebhooksFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 encryption.Key
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 OutboundWebhookStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBOutboundWebhooksFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBOutboundWebhooksFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBOwnSignalConfigurationsFunc describes the behavior when the
// OwnSignalConfigurations method of the parent MockDB instance is invoked.
type DBOwnSignalConfigurationsFunc struct {
	defaultHook func() SignalConfigurationStore
	hooks       []func() SignalConfigurationStore
	history     []DBOwnSignalConfigurationsFuncCall
	mutex       sync.Mutex
}

// OwnSignalConfigurations delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockDB) OwnSignalConfigurations() SignalConfigurationStore {
	r0 := m.OwnSignalConfigurationsFunc.nextHook()()
	m.OwnSignalConfigurationsFunc.appendCall(DBOwnSignalConfigurationsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// OwnSignalConfigurations method of the parent MockDB instance is invoked
// and the hook queue is empty.
func (f *DBOwnSignalConfigurationsFunc) SetDefaultHook(hook func() SignalConfigurationStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// OwnSignalConfigurations method of the parent MockDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *DBOwnSignalConfigurationsFunc) PushHook(hook func() SignalConfigurationStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBOwnSignalConfigurationsFunc) SetDefaultReturn(r0 SignalConfigurationStore) {
	f.SetDefaultHook(func() SignalConfigurationStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBOwnSignalConfigurationsFunc) PushReturn(r0 SignalConfigurationStore) {
	f.PushHook(func() SignalConfigurationStore {
		return r0
	})
}

func (f *DBOwnSignalConfigurationsFunc) nextHook() func() SignalConfigurationStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBOwnSignalConfigurationsFunc) appendCall(r0 DBOwnSignalConfigurationsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBOwnSignalConfigurationsFuncCall objects
// describing the invocations of this function.
func (f *DBOwnSignalConfigurationsFunc) History() []DBOwnSignalConfigurationsFuncCall {
	f.mutex.Lock()
	history := make([]DBOwnSignalConfigurationsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBOwnSignalConfigurationsFuncCall is an object that describes an
// invocation of method OwnSignalConfigurations on an instance of MockDB.
type DBOwnSignalConfigurationsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 SignalConfigurationStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBOwnSignalConfigurationsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBOwnSignalConfigurationsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBOwnershipStatsFunc describes the behavior when the OwnershipStats
// method of the parent MockDB instance is invoked.
type DBOwnershipStatsFunc struct {
	defaultHook func() OwnershipStatsStore
	hooks       []func() OwnershipStatsStore
	history     []DBOwnershipStatsFuncCall
	mutex       sync.Mutex
}

// OwnershipStats delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) OwnershipStats() OwnershipStatsStore {
	r0 := m.OwnershipStatsFunc.nextHook()()
	m.OwnershipStatsFunc.appendCall(DBOwnershipStatsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the OwnershipStats
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBOwnershipStatsFunc) SetDefaultHook(hook func() OwnershipStatsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// OwnershipStats method of the parent MockDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBOwnershipStatsFunc) PushHook(hook func() OwnershipStatsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBOwnershipStatsFunc) SetDefaultReturn(r0 OwnershipStatsStore) {
	f.SetDefaultHook(func() OwnershipStatsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBOwnershipStatsFunc) PushReturn(r0 OwnershipStatsStore) {
	f.PushHook(func() OwnershipStatsStore {
		return r0
	})
}

func (f *DBOwnershipStatsFunc) nextHook() func() OwnershipStatsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBOwnershipStatsFunc) appendCall(r0 DBOwnershipStatsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBOwnershipStatsFuncCall objects describing
// the invocations of this function.
func (f *DBOwnershipStatsFunc) History() []DBOwnershipStatsFuncCall {
	f.mutex.Lock()
	history := make([]DBOwnershipStatsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBOwnershipStatsFuncCall is an object that describes an invocation of
// method OwnershipStats on an instance of MockDB.
type DBOwnershipStatsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 OwnershipStatsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBOwnershipStatsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBOwnershipStatsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBPermissionSyncJobsFunc describes the behavior when the
// PermissionSyncJobs method of the parent MockDB instance is invoked.
type DBPermissionSyncJobsFunc struct {
	defaultHook func() PermissionSyncJobStore
	hooks       []func() PermissionSyncJobStore
	history     []DBPermissionSyncJobsFuncCall
	mutex       sync.Mutex
}

// PermissionSyncJobs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) PermissionSyncJobs() PermissionSyncJobStore {
	r0 := m.PermissionSyncJobsFunc.nextHook()()
	m.PermissionSyncJobsFunc.appendCall(DBPermissionSyncJobsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the PermissionSyncJobs
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBPermissionSyncJobsFunc) SetDefaultHook(hook func() PermissionSyncJobStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PermissionSyncJobs method of the parent MockDB instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBPermissionSyncJobsFunc) PushHook(hook func() PermissionSyncJobStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBPermissionSyncJobsFunc) SetDefaultReturn(r0 PermissionSyncJobStore) {
	f.SetDefaultHook(func() PermissionSyncJobStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBPermissionSyncJobsFunc) PushReturn(r0 PermissionSyncJobStore) {
	f.PushHook(func() PermissionSyncJobStore {
		return r0
	})
}

func (f *DBPermissionSyncJobsFunc) nextHook() func() PermissionSyncJobStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBPermissionSyncJobsFunc) appendCall(r0 DBPermissionSyncJobsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBPermissionSyncJobsFuncCall objects
// describing the invocations of this function.
func (f *DBPermissionSyncJobsFunc) History() []DBPermissionSyncJobsFuncCall {
	f.mutex.Lock()
	history := make([]DBPermissionSyncJobsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBPermissionSyncJobsFuncCall is an object that describes an invocation of
// method PermissionSyncJobs on an instance of MockDB.
type DBPermissionSyncJobsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 PermissionSyncJobStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBPermissionSyncJobsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBPermissionSyncJobsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBPermissionsFunc describes the behavior when the Permissions method of
// the parent MockDB instance is invoked.
type DBPermissionsFunc struct {
	defaultHook func() PermissionStore
	hooks       []func() PermissionStore
	history     []DBPermissionsFuncCall
	mutex       sync.Mutex
}

// Permissions delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) Permissions() PermissionStore {
	r0 := m.PermissionsFunc.nextHook()()
	m.PermissionsFunc.appendCall(DBPermissionsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Permissions method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBPermissionsFunc) SetDefaultHook(hook func() PermissionStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Permissions method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBPermissionsFunc) PushHook(hook func() PermissionStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBPermissionsFunc) SetDefaultReturn(r0 PermissionStore) {
	f.SetDefaultHook(func() PermissionStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBPermissionsFunc) PushReturn(r0 PermissionStore) {
	f.PushHook(func() PermissionStore {
		return r0
	})
}

func (f *DBPermissionsFunc) nextHook() func() PermissionStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBPermissionsFunc) appendCall(r0 DBPermissionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBPermissionsFuncCall objects describing
// the invocations of this function.
func (f *DBPermissionsFunc) History() []DBPermissionsFuncCall {
	f.mutex.Lock()
	history := make([]DBPermissionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBPermissionsFuncCall is an object that describes an invocation of method
// Permissions on an instance of MockDB.
type DBPermissionsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 PermissionStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBPermissionsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBPermissionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBPhabricatorFunc describes the behavior when the Phabricator method of
// the parent MockDB instance is invoked.
type DBPhabricatorFunc struct {
	defaultHook func() PhabricatorStore
	hooks       []func() PhabricatorStore
	history     []DBPhabricatorFuncCall
	mutex       sync.Mutex
}

// Phabricator delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) Phabricator() PhabricatorStore {
	r0 := m.PhabricatorFunc.nextHook()()
	m.PhabricatorFunc.appendCall(DBPhabricatorFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Phabricator method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBPhabricatorFunc) SetDefaultHook(hook func() PhabricatorStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Phabricator method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBPhabricatorFunc) PushHook(hook func() PhabricatorStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBPhabricatorFunc) SetDefaultReturn(r0 PhabricatorStore) {
	f.SetDefaultHook(func() PhabricatorStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBPhabricatorFunc) PushReturn(r0 PhabricatorStore) {
	f.PushHook(func() PhabricatorStore {
		return r0
	})
}

func (f *DBPhabricatorFunc) nextHook() func() PhabricatorStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBPhabricatorFunc) appendCall(r0 DBPhabricatorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBPhabricatorFuncCall objects describing
// the invocations of this function.
func (f *DBPhabricatorFunc) History() []DBPhabricatorFuncCall {
	f.mutex.Lock()
	history := make([]DBPhabricatorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBPhabricatorFuncCall is an object that describes an invocation of method
// Phabricator on an instance of MockDB.
type DBPhabricatorFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 PhabricatorStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBPhabricatorFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBPhabricatorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBQueryContextFunc describes the behavior when the QueryContext method of
// the parent MockDB instance is invoked.
type DBQueryContextFunc struct {
	defaultHook func(context.Context, string, ...interface{}) (*sql.Rows, error)
	hooks       []func(context.Context, string, ...interface{}) (*sql.Rows, error)
	history     []DBQueryContextFuncCall
	mutex       sync.Mutex
}

// QueryContext delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) QueryContext(v0 context.Context, v1 string, v2 ...interface{}) (*sql.Rows, error) {
	r0, r1 := m.QueryContextFunc.nextHook()(v0, v1, v2...)
	m.QueryContextFunc.appendCall(DBQueryContextFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the QueryContext method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBQueryContextFunc) SetDefaultHook(hook func(context.Context, string, ...interface{}) (*sql.Rows, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueryContext method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBQueryContextFunc) PushHook(hook func(context.Context, string, ...interface{}) (*sql.Rows, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBQueryContextFunc) SetDefaultReturn(r0 *sql.Rows, r1 error) {
	f.SetDefaultHook(func(context.Context, string, ...interface{}) (*sql.Rows, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBQueryContextFunc) PushReturn(r0 *sql.Rows, r1 error) {
	f.PushHook(func(context.Context, string, ...interface{}) (*sql.Rows, error) {
		return r0, r1
	})
}

func (f *DBQueryContextFunc) nextHook() func(context.Context, string, ...interface{}) (*sql.Rows, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBQueryContextFunc) appendCall(r0 DBQueryContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBQueryContextFuncCall objects describing
// the invocations of this function.
func (f *DBQueryContextFunc) History() []DBQueryContextFuncCall {
	f.mutex.Lock()
	history := make([]DBQueryContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBQueryContextFuncCall is an object that describes an invocation of
// method QueryContext on an instance of MockDB.
type DBQueryContextFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *sql.Rows
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c DBQueryContextFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBQueryContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DBQueryRowContextFunc describes the behavior when the QueryRowContext
// method of the parent MockDB instance is invoked.
type DBQueryRowContextFunc struct {
	defaultHook func(context.Context, string, ...interface{}) *sql.Row
	hooks       []func(context.Context, string, ...interface{}) *sql.Row
	history     []DBQueryRowContextFuncCall
	mutex       sync.Mutex
}

// QueryRowContext delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) QueryRowContext(v0 context.Context, v1 string, v2 ...interface{}) *sql.Row {
	r0 := m.QueryRowContextFunc.nextHook()(v0, v1, v2...)
	m.QueryRowContextFunc.appendCall(DBQueryRowContextFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the QueryRowContext
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBQueryRowContextFunc) SetDefaultHook(hook func(context.Context, string, ...interface{}) *sql.Row) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueryRowContext method of the parent MockDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBQueryRowContextFunc) PushHook(hook func(context.Context, string, ...interface{}) *sql.Row) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBQueryRowContextFunc) SetDefaultReturn(r0 *sql.Row) {
	f.SetDefaultHook(func(context.Context, string, ...interface{}) *sql.Row {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBQueryRowContextFunc) PushReturn(r0 *sql.Row) {
	f.PushHook(func(context.Context, string, ...interface{}) *sql.Row {
		return r0
	})
}

func (f *DBQueryRowContextFunc) nextHook() func(context.Context, string, ...interface{}) *sql.Row {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBQueryRowContextFunc) appendCall(r0 DBQueryRowContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBQueryRowContextFuncCall objects
// describing the invocations of this function.
func (f *DBQueryRowContextFunc) History() []DBQueryRowContextFuncCall {
	f.mutex.Lock()
	history := make([]DBQueryRowContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBQueryRowContextFuncCall is an object that describes an invocation of
// method QueryRowContext on an instance of MockDB.
type DBQueryRowContextFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *sql.Row
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c DBQueryRowContextFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBQueryRowContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBRecentContributionSignalsFunc describes the behavior when the
// RecentContributionSignals method of the parent MockDB instance is
// invoked.
type DBRecentContributionSignalsFunc struct {
	defaultHook func() RecentContributionSignalStore
	hooks       []func() RecentContributionSignalStore
	history     []DBRecentContributionSignalsFuncCall
	mutex       sync.Mutex
}

// RecentContributionSignals delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockDB) RecentContributionSignals() RecentContributionSignalStore {
	r0 := m.RecentContributionSignalsFunc.nextHook()()
	m.RecentContributionSignalsFunc.appendCall(DBRecentContributionSignalsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// RecentContributionSignals method of the parent MockDB instance is invoked
// and the hook queue is empty.
func (f *DBRecentContributionSignalsFunc) SetDefaultHook(hook func() RecentContributionSignalStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RecentContributionSignals method of the parent MockDB instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *DBRecentContributionSignalsFunc) PushHook(hook func() RecentContributionSignalStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBRecentContributionSignalsFunc) SetDefaultReturn(r0 RecentContributionSignalStore) {
	f.SetDefaultHook(func() RecentContributionSignalStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBRecentContributionSignalsFunc) PushReturn(r0 RecentContributionSignalStore) {
	f.PushHook(func() RecentContributionSignalStore {
		return r0
	})
}

func (f *DBRecentContributionSignalsFunc) nextHook() func() RecentContributionSignalStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBRecentContributionSignalsFunc) appendCall(r0 DBRecentContributionSignalsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBRecentContributionSignalsFuncCall objects
// describing the invocations of this function.
func (f *DBRecentContributionSignalsFunc) History() []DBRecentContributionSignalsFuncCall {
	f.mutex.Lock()
	history := make([]DBRecentContributionSignalsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBRecentContributionSignalsFuncCall is an object that describes an
// invocation of method RecentContributionSignals on an instance of MockDB.
type DBRecentContributionSignalsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 RecentContributionSignalStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBRecentContributionSignalsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBRecentContributionSignalsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBRecentViewSignalFunc describes the behavior when the RecentViewSignal
// method of the parent MockDB instance is invoked.
type DBRecentViewSignalFunc struct {
	defaultHook func() RecentViewSignalStore
	hooks       []func() RecentViewSignalStore
	history     []DBRecentViewSignalFuncCall
	mutex       sync.Mutex
}

// RecentViewSignal delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) RecentViewSignal() RecentViewSignalStore {
	r0 := m.RecentViewSignalFunc.nextHook()()
	m.RecentViewSignalFunc.appendCall(DBRecentViewSignalFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the RecentViewSignal
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBRecentViewSignalFunc) SetDefaultHook(hook func() RecentViewSignalStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RecentViewSignal method of the parent MockDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBRecentViewSignalFunc) PushHook(hook func() RecentViewSignalStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBRecentViewSignalFunc) SetDefaultReturn(r0 RecentViewSignalStore) {
	f.SetDefaultHook(func() RecentViewSignalStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBRecentViewSignalFunc) PushReturn(r0 RecentViewSignalStore) {
	f.PushHook(func() RecentViewSignalStore {
		return r0
	})
}

func (f *DBRecentViewSignalFunc) nextHook() func() RecentViewSignalStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBRecentViewSignalFunc) appendCall(r0 DBRecentViewSignalFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBRecentViewSignalFuncCall objects
// describing the invocations of this function.
func (f *DBRecentViewSignalFunc) History() []DBRecentViewSignalFuncCall {
	f.mutex.Lock()
	history := make([]DBRecentViewSignalFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBRecentViewSignalFuncCall is an object that describes an invocation of
// method RecentViewSignal on an instance of MockDB.
type DBRecentViewSignalFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 RecentViewSignalStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBRecentViewSignalFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBRecentViewSignalFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBRedisKeyValueFunc describes the behavior when the RedisKeyValue method
// of the parent MockDB instance is invoked.
type DBRedisKeyValueFunc struct {
	defaultHook func() RedisKeyValueStore
	hooks       []func() RedisKeyValueStore
	history     []DBRedisKeyValueFuncCall
	mutex       sync.Mutex
}

// RedisKeyValue delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) RedisKeyValue() RedisKeyValueStore {
	r0 := m.RedisKeyValueFunc.nextHook()()
	m.RedisKeyValueFunc.appendCall(DBRedisKeyValueFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the RedisKeyValue method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBRedisKeyValueFunc) SetDefaultHook(hook func() RedisKeyValueStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RedisKeyValue method of the parent MockDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBRedisKeyValueFunc) PushHook(hook func() RedisKeyValueStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBRedisKeyValueFunc) SetDefaultReturn(r0 RedisKeyValueStore) {
	f.SetDefaultHook(func() RedisKeyValueStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBRedisKeyValueFunc) PushReturn(r0 RedisKeyValueStore) {
	f.PushHook(func() RedisKeyValueStore {
		return r0
	})
}

func (f *DBRedisKeyValueFunc) nextHook() func() RedisKeyValueStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBRedisKeyValueFunc) appendCall(r0 DBRedisKeyValueFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBRedisKeyValueFuncCall objects describing
// the invocations of this function.
func (f *DBRedisKeyValueFunc) History() []DBRedisKeyValueFuncCall {
	f.mutex.Lock()
	history := make([]DBRedisKeyValueFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBRedisKeyValueFuncCall is an object that describes an invocation of
// method RedisKeyValue on an instance of MockDB.
type DBRedisKeyValueFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 RedisKeyValueStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBRedisKeyValueFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBRedisKeyValueFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBRepoCommitsChangelistsFunc describes the behavior when the
// RepoCommitsChangelists method of the parent MockDB instance is invoked.
type DBRepoCommitsChangelistsFunc struct {
	defaultHook func() RepoCommitsChangelistsStore
	hooks       []func() RepoCommitsChangelistsStore
	history     []DBRepoCommitsChangelistsFuncCall
	mutex       sync.Mutex
}

// RepoCommitsChangelists delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockDB) RepoCommitsChangelists() RepoCommitsChangelistsStore {
	r0 := m.RepoCommitsChangelistsFunc.nextHook()()
	m.RepoCommitsChangelistsFunc.appendCall(DBRepoCommitsChangelistsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// RepoCommitsChangelists method of the parent MockDB instance is invoked
// and the hook queue is empty.
func (f *DBRepoCommitsChangelistsFunc) SetDefaultHook(hook func() RepoCommitsChangelistsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepoCommitsChangelists method of the parent MockDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *DBRepoCommitsChangelistsFunc) PushHook(hook func() RepoCommitsChangelistsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBRepoCommitsChangelistsFunc) SetDefaultReturn(r0 RepoCommitsChangelistsStore) {
	f.SetDefaultHook(func() RepoCommitsChangelistsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBRepoCommitsChangelistsFunc) PushReturn(r0 RepoCommitsChangelistsStore) {
	f.PushHook(func() RepoCommitsChangelistsStore {
		return r0
	})
}

func (f *DBRepoCommitsChangelistsFunc) nextHook() func() RepoCommitsChangelistsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBRepoCommitsChangelistsFunc) appendCall(r0 DBRepoCommitsChangelistsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBRepoCommitsChangelistsFuncCall objects
// describing the invocations of this function.
func (f *DBRepoCommitsChangelistsFunc) History() []DBRepoCommitsChangelistsFuncCall {
	f.mutex.Lock()
	history := make([]DBRepoCommitsChangelistsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBRepoCommitsChangelistsFuncCall is an object that describes an
// invocation of method RepoCommitsChangelists on an instance of MockDB.
type DBRepoCommitsChangelistsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 RepoCommitsChangelistsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBRepoCommitsChangelistsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBRepoCommitsChangelistsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBRepoKVPsFunc describes the behavior when the RepoKVPs method of the
// parent MockDB instance is invoked.
type DBRepoKVPsFunc struct {
	defaultHook func() RepoKVPStore
	hooks       []func() RepoKVPStore
	history     []DBRepoKVPsFuncCall
	mutex       sync.Mutex
}

// RepoKVPs delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) RepoKVPs() RepoKVPStore {
	r0 := m.RepoKVPsFunc.nextHook()()
	m.RepoKVPsFunc.appendCall(DBRepoKVPsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the RepoKVPs method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBRepoKVPsFunc) SetDefaultHook(hook func() RepoKVPStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepoKVPs method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBRepoKVPsFunc) PushHook(hook func() RepoKVPStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBRepoKVPsFunc) SetDefaultReturn(r0 RepoKVPStore) {
	f.SetDefaultHook(func() RepoKVPStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBRepoKVPsFunc) PushReturn(r0 RepoKVPStore) {
	f.PushHook(func() RepoKVPStore {
		return r0
	})
}

func (f *DBRepoKVPsFunc) nextHook() func() RepoKVPStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBRepoKVPsFunc) appendCall(r0 DBRepoKVPsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBRepoKVPsFuncCall objects describing the
// invocations of this function.
func (f *DBRepoKVPsFunc) History() []DBRepoKVPsFuncCall {
	f.mutex.Lock()
	history := make([]DBRepoKVPsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBRepoKVPsFuncCall is an object that describes an invocation of method
// RepoKVPs on an instance of MockDB.
type DBRepoKVPsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 RepoKVPStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBRepoKVPsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBRepoKVPsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBRepoPathsFunc describes the behavior when the RepoPaths method of the
// parent MockDB instance is invoked.
type DBRepoPathsFunc struct {
	defaultHook func() RepoPathStore
	hooks       []func() RepoPathStore
	history     []DBRepoPathsFuncCall
	mutex       sync.Mutex
}

// RepoPaths delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) RepoPaths() RepoPathStore {
	r0 := m.RepoPathsFunc.nextHook()()
	m.RepoPathsFunc.appendCall(DBRepoPathsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the RepoPaths method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBRepoPathsFunc) SetDefaultHook(hook func() RepoPathStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepoPaths method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBRepoPathsFunc) PushHook(hook func() RepoPathStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBRepoPathsFunc) SetDefaultReturn(r0 RepoPathStore) {
	f.SetDefaultHook(func() RepoPathStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBRepoPathsFunc) PushReturn(r0 RepoPathStore) {
	f.PushHook(func() RepoPathStore {
		return r0
	})
}

func (f *DBRepoPathsFunc) nextHook() func() RepoPathStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBRepoPathsFunc) appendCall(r0 DBRepoPathsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBRepoPathsFuncCall objects describing the
// invocations of this function.
func (f *DBRepoPathsFunc) History() []DBRepoPathsFuncCall {
	f.mutex.Lock()
	history := make([]DBRepoPathsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBRepoPathsFuncCall is an object that describes an invocation of method
// RepoPaths on an instance of MockDB.
type DBRepoPathsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 RepoPathStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBRepoPathsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBRepoPathsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBRepoStatisticsFunc describes the behavior when the RepoStatistics
// method of the parent MockDB instance is invoked.
type DBRepoStatisticsFunc struct {
	defaultHook func() RepoStatisticsStore
	hooks       []func() RepoStatisticsStore
	history     []DBRepoStatisticsFuncCall
	mutex       sync.Mutex
}

// RepoStatistics delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) RepoStatistics() RepoStatisticsStore {
	r0 := m.RepoStatisticsFunc.nextHook()()
	m.RepoStatisticsFunc.appendCall(DBRepoStatisticsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the RepoStatistics
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBRepoStatisticsFunc) SetDefaultHook(hook func() RepoStatisticsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepoStatistics method of the parent MockDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBRepoStatisticsFunc) PushHook(hook func() RepoStatisticsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBRepoStatisticsFunc) SetDefaultReturn(r0 RepoStatisticsStore) {
	f.SetDefaultHook(func() RepoStatisticsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBRepoStatisticsFunc) PushReturn(r0 RepoStatisticsStore) {
	f.PushHook(func() RepoStatisticsStore {
		return r0
	})
}

func (f *DBRepoStatisticsFunc) nextHook() func() RepoStatisticsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBRepoStatisticsFunc) appendCall(r0 DBRepoStatisticsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBRepoStatisticsFuncCall objects describing
// the invocations of this function.
func (f *DBRepoStatisticsFunc) History() []DBRepoStatisticsFuncCall {
	f.mutex.Lock()
	history := make([]DBRepoStatisticsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBRepoStatisticsFuncCall is an object that describes an invocation of
// method RepoStatistics on an instance of MockDB.
type DBRepoStatisticsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 RepoStatisticsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBRepoStatisticsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBRepoStatisticsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBReposFunc describes the behavior when the Repos method of the parent
// MockDB instance is invoked.
type DBReposFunc struct {
	defaultHook func() RepoStore
	hooks       []func() RepoStore
	history     []DBReposFuncCall
	mutex       sync.Mutex
}

// Repos delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) Repos() RepoStore {
	r0 := m.ReposFunc.nextHook()()
	m.ReposFunc.appendCall(DBReposFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Repos method of the
// parent MockDB instance is invoked and the hook queue is empty.
func (f *DBReposFunc) SetDefaultHook(hook func() RepoStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Repos method of the parent MockDB instance invokes the hook at the front
// of the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *DBReposFunc) PushHook(hook func() RepoStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBReposFunc) SetDefaultReturn(r0 RepoStore) {
	f.SetDefaultHook(func() RepoStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBReposFunc) PushReturn(r0 RepoStore) {
	f.PushHook(func() RepoStore {
		return r0
	})
}

func (f *DBReposFunc) nextHook() func() RepoStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBReposFunc) appendCall(r0 DBReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBReposFuncCall objects describing the
// invocations of this function.
func (f *DBReposFunc) History() []DBReposFuncCall {
	f.mutex.Lock()
	history := make([]DBReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBReposFuncCall is an object that describes an invocation of method Repos
// on an instance of MockDB.
type DBReposFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 RepoStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBReposFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBRolePermissionsFunc describes the behavior when the RolePermissions
// method of the parent MockDB instance is invoked.
type DBRolePermissionsFunc struct {
	defaultHook func() RolePermissionStore
	hooks       []func() RolePermissionStore
	history     []DBRolePermissionsFuncCall
	mutex       sync.Mutex
}

// RolePermissions delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) RolePermissions() RolePermissionStore {
	r0 := m.RolePermissionsFunc.nextHook()()
	m.RolePermissionsFunc.appendCall(DBRolePermissionsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the RolePermissions
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBRolePermissionsFunc) SetDefaultHook(hook func() RolePermissionStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RolePermissions method of the parent MockDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBRolePermissionsFunc) PushHook(hook func() RolePermissionStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBRolePermissionsFunc) SetDefaultReturn(r0 RolePermissionStore) {
	f.SetDefaultHook(func() RolePermissionStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBRolePermissionsFunc) PushReturn(r0 RolePermissionStore) {
	f.PushHook(func() RolePermissionStore {
		return r0
	})
}

func (f *DBRolePermissionsFunc) nextHook() func() RolePermissionStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBRolePermissionsFunc) appendCall(r0 DBRolePermissionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBRolePermissionsFuncCall objects
// describing the invocations of this function.
func (f *DBRolePermissionsFunc) History() []DBRolePermissionsFuncCall {
	f.mutex.Lock()
	history := make([]DBRolePermissionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBRolePermissionsFuncCall is an object that describes an invocation of
// method RolePermissions on an instance of MockDB.
type DBRolePermissionsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 RolePermissionStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBRolePermissionsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBRolePermissionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBRolesFunc describes the behavior when the Roles method of the parent
// MockDB instance is invoked.
type DBRolesFunc struct {
	defaultHook func() RoleStore
	hooks       []func() RoleStore
	history     []DBRolesFuncCall
	mutex       sync.Mutex
}

// Roles delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) Roles() RoleStore {
	r0 := m.RolesFunc.nextHook()()
	m.RolesFunc.appendCall(DBRolesFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Roles method of the
// parent MockDB instance is invoked and the hook queue is empty.
func (f *DBRolesFunc) SetDefaultHook(hook func() RoleStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Roles method of the parent MockDB instance invokes the hook at the front
// of the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *DBRolesFunc) PushHook(hook func() RoleStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBRolesFunc) SetDefaultReturn(r0 RoleStore) {
	f.SetDefaultHook(func() RoleStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBRolesFunc) PushReturn(r0 RoleStore) {
	f.PushHook(func() RoleStore {
		return r0
	})
}

func (f *DBRolesFunc) nextHook() func() RoleStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBRolesFunc) appendCall(r0 DBRolesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBRolesFuncCall objects describing the
// invocations of this function.
func (f *DBRolesFunc) History() []DBRolesFuncCall {
	f.mutex.Lock()
	history := make([]DBRolesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBRolesFuncCall is an object that describes an invocation of method Roles
// on an instance of MockDB.
type DBRolesFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 RoleStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBRolesFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBRolesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBSavedSearchesFunc describes the behavior when the SavedSearches method
// of the parent MockDB instance is invoked.
type DBSavedSearchesFunc struct {
	defaultHook func() SavedSearchStore
	hooks       []func() SavedSearchStore
	history     []DBSavedSearchesFuncCall
	mutex       sync.Mutex
}

// SavedSearches delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) SavedSearches() SavedSearchStore {
	r0 := m.SavedSearchesFunc.nextHook()()
	m.SavedSearchesFunc.appendCall(DBSavedSearchesFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the SavedSearches method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBSavedSearchesFunc) SetDefaultHook(hook func() SavedSearchStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SavedSearches method of the parent MockDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBSavedSearchesFunc) PushHook(hook func() SavedSearchStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBSavedSearchesFunc) SetDefaultReturn(r0 SavedSearchStore) {
	f.SetDefaultHook(func() SavedSearchStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBSavedSearchesFunc) PushReturn(r0 SavedSearchStore) {
	f.PushHook(func() SavedSearchStore {
		return r0
	})
}

func (f *DBSavedSearchesFunc) nextHook() func() SavedSearchStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBSavedSearchesFunc) appendCall(r0 DBSavedSearchesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBSavedSearchesFuncCall objects describing
// the invocations of this function.
func (f *DBSavedSearchesFunc) History() []DBSavedSearchesFuncCall {
	f.mutex.Lock()
	history := make([]DBSavedSearchesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBSavedSearchesFuncCall is an object that describes an invocation of
// method SavedSearches on an instance of MockDB.
type DBSavedSearchesFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 SavedSearchStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBSavedSearchesFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBSavedSearchesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBSearchContextsFunc describes the behavior when the SearchContexts
// method of the parent MockDB instance is invoked.
type DBSearchContextsFunc struct {
	defaultHook func() SearchContextsStore
	hooks       []func() SearchContextsStore
	history     []DBSearchContextsFuncCall
	mutex       sync.Mutex
}

// SearchContexts delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) SearchContexts() SearchContextsStore {
	r0 := m.SearchContextsFunc.nextHook()()
	m.SearchContextsFunc.appendCall(DBSearchContextsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the SearchContexts
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBSearchContextsFunc) SetDefaultHook(hook func() SearchContextsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SearchContexts method of the parent MockDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBSearchContextsFunc) PushHook(hook func() SearchContextsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBSearchContextsFunc) SetDefaultReturn(r0 SearchContextsStore) {
	f.SetDefaultHook(func() SearchContextsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBSearchContextsFunc) PushReturn(r0 SearchContextsStore) {
	f.PushHook(func() SearchContextsStore {
		return r0
	})
}

func (f *DBSearchContextsFunc) nextHook() func() SearchContextsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBSearchContextsFunc) appendCall(r0 DBSearchContextsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBSearchContextsFuncCall objects describing
// the invocations of this function.
func (f *DBSearchContextsFunc) History() []DBSearchContextsFuncCall {
	f.mutex.Lock()
	history := make([]DBSearchContextsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBSearchContextsFuncCall is an object that describes an invocation of
// method SearchContexts on an instance of MockDB.
type DBSearchContextsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 SearchContextsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBSearchContextsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBSearchContextsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBSecurityEventLogsFunc describes the behavior when the SecurityEventLogs
// method of the parent MockDB instance is invoked.
type DBSecurityEventLogsFunc struct {
	defaultHook func() SecurityEventLogsStore
	hooks       []func() SecurityEventLogsStore
	history     []DBSecurityEventLogsFuncCall
	mutex       sync.Mutex
}

// SecurityEventLogs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) SecurityEventLogs() SecurityEventLogsStore {
	r0 := m.SecurityEventLogsFunc.nextHook()()
	m.SecurityEventLogsFunc.appendCall(DBSecurityEventLogsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the SecurityEventLogs
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBSecurityEventLogsFunc) SetDefaultHook(hook func() SecurityEventLogsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SecurityEventLogs method of the parent MockDB instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBSecurityEventLogsFunc) PushHook(hook func() SecurityEventLogsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBSecurityEventLogsFunc) SetDefaultReturn(r0 SecurityEventLogsStore) {
	f.SetDefaultHook(func() SecurityEventLogsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBSecurityEventLogsFunc) PushReturn(r0 SecurityEventLogsStore) {
	f.PushHook(func() SecurityEventLogsStore {
		return r0
	})
}

func (f *DBSecurityEventLogsFunc) nextHook() func() SecurityEventLogsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBSecurityEventLogsFunc) appendCall(r0 DBSecurityEventLogsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBSecurityEventLogsFuncCall objects
// describing the invocations of this function.
func (f *DBSecurityEventLogsFunc) History() []DBSecurityEventLogsFuncCall {
	f.mutex.Lock()
	history := make([]DBSecurityEventLogsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBSecurityEventLogsFuncCall is an object that describes an invocation of
// method SecurityEventLogs on an instance of MockDB.
type DBSecurityEventLogsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 SecurityEventLogsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBSecurityEventLogsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBSecurityEventLogsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBSettingsFunc describes the behavior when the Settings method of the
// parent MockDB instance is invoked.
type DBSettingsFunc struct {
	defaultHook func() SettingsStore
	hooks       []func() SettingsStore
	history     []DBSettingsFuncCall
	mutex       sync.Mutex
}

// Settings delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) Settings() SettingsStore {
	r0 := m.SettingsFunc.nextHook()()
	m.SettingsFunc.appendCall(DBSettingsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Settings method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBSettingsFunc) SetDefaultHook(hook func() SettingsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Settings method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBSettingsFunc) PushHook(hook func() SettingsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBSettingsFunc) SetDefaultReturn(r0 SettingsStore) {
	f.SetDefaultHook(func() SettingsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBSettingsFunc) PushReturn(r0 SettingsStore) {
	f.PushHook(func() SettingsStore {
		return r0
	})
}

func (f *DBSettingsFunc) nextHook() func() SettingsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBSettingsFunc) appendCall(r0 DBSettingsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBSettingsFuncCall objects describing the
// invocations of this function.
func (f *DBSettingsFunc) History() []DBSettingsFuncCall {
	f.mutex.Lock()
	history := make([]DBSettingsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBSettingsFuncCall is an object that describes an invocation of method
// Settings on an instance of MockDB.
type DBSettingsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 SettingsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBSettingsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBSettingsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBTeamsFunc describes the behavior when the Teams method of the parent
// MockDB instance is invoked.
type DBTeamsFunc struct {
	defaultHook func() TeamStore
	hooks       []func() TeamStore
	history     []DBTeamsFuncCall
	mutex       sync.Mutex
}

// Teams delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) Teams() TeamStore {
	r0 := m.TeamsFunc.nextHook()()
	m.TeamsFunc.appendCall(DBTeamsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Teams method of the
// parent MockDB instance is invoked and the hook queue is empty.
func (f *DBTeamsFunc) SetDefaultHook(hook func() TeamStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Teams method of the parent MockDB instance invokes the hook at the front
// of the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *DBTeamsFunc) PushHook(hook func() TeamStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBTeamsFunc) SetDefaultReturn(r0 TeamStore) {
	f.SetDefaultHook(func() TeamStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBTeamsFunc) PushReturn(r0 TeamStore) {
	f.PushHook(func() TeamStore {
		return r0
	})
}

func (f *DBTeamsFunc) nextHook() func() TeamStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBTeamsFunc) appendCall(r0 DBTeamsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBTeamsFuncCall objects describing the
// invocations of this function.
func (f *DBTeamsFunc) History() []DBTeamsFuncCall {
	f.mutex.Lock()
	history := make([]DBTeamsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBTeamsFuncCall is an object that describes an invocation of method Teams
// on an instance of MockDB.
type DBTeamsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 TeamStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBTeamsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBTeamsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBTemporarySettingsFunc describes the behavior when the TemporarySettings
// method of the parent MockDB instance is invoked.
type DBTemporarySettingsFunc struct {
	defaultHook func() TemporarySettingsStore
	hooks       []func() TemporarySettingsStore
	history     []DBTemporarySettingsFuncCall
	mutex       sync.Mutex
}

// TemporarySettings delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) TemporarySettings() TemporarySettingsStore {
	r0 := m.TemporarySettingsFunc.nextHook()()
	m.TemporarySettingsFunc.appendCall(DBTemporarySettingsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the TemporarySettings
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBTemporarySettingsFunc) SetDefaultHook(hook func() TemporarySettingsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TemporarySettings method of the parent MockDB instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBTemporarySettingsFunc) PushHook(hook func() TemporarySettingsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBTemporarySettingsFunc) SetDefaultReturn(r0 TemporarySettingsStore) {
	f.SetDefaultHook(func() TemporarySettingsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBTemporarySettingsFunc) PushReturn(r0 TemporarySettingsStore) {
	f.PushHook(func() TemporarySettingsStore {
		return r0
	})
}

func (f *DBTemporarySettingsFunc) nextHook() func() TemporarySettingsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBTemporarySettingsFunc) appendCall(r0 DBTemporarySettingsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBTemporarySettingsFuncCall objects
// describing the invocations of this function.
func (f *DBTemporarySettingsFunc) History() []DBTemporarySettingsFuncCall {
	f.mutex.Lock()
	history := make([]DBTemporarySettingsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBTemporarySettingsFuncCall is an object that describes an invocation of
// method TemporarySettings on an instance of MockDB.
type DBTemporarySettingsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 TemporarySettingsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBTemporarySettingsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBTemporarySettingsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBUserCredentialsFunc describes the behavior when the UserCredentials
// method of the parent MockDB instance is invoked.
type DBUserCredentialsFunc struct {
	defaultHook func(encryption.Key) UserCredentialsStore
	hooks       []func(encryption.Key) UserCredentialsStore
	history     []DBUserCredentialsFuncCall
	mutex       sync.Mutex
}

// UserCredentials delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) UserCredentials(v0 encryption.Key) UserCredentialsStore {
	r0 := m.UserCredentialsFunc.nextHook()(v0)
	m.UserCredentialsFunc.appendCall(DBUserCredentialsFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UserCredentials
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBUserCredentialsFunc) SetDefaultHook(hook func(encryption.Key) UserCredentialsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UserCredentials method of the parent MockDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DBUserCredentialsFunc) PushHook(hook func(encryption.Key) UserCredentialsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBUserCredentialsFunc) SetDefaultReturn(r0 UserCredentialsStore) {
	f.SetDefaultHook(func(encryption.Key) UserCredentialsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBUserCredentialsFunc) PushReturn(r0 UserCredentialsStore) {
	f.PushHook(func(encryption.Key) UserCredentialsStore {
		return r0
	})
}

func (f *DBUserCredentialsFunc) nextHook() func(encryption.Key) UserCredentialsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBUserCredentialsFunc) appendCall(r0 DBUserCredentialsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBUserCredentialsFuncCall objects
// describing the invocations of this function.
func (f *DBUserCredentialsFunc) History() []DBUserCredentialsFuncCall {
	f.mutex.Lock()
	history := make([]DBUserCredentialsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBUserCredentialsFuncCall is an object that describes an invocation of
// method UserCredentials on an instance of MockDB.
type DBUserCredentialsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 encryption.Key
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 UserCredentialsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBUserCredentialsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBUserCredentialsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBUserEmailsFunc describes the behavior when the UserEmails method of the
// parent MockDB instance is invoked.
type DBUserEmailsFunc struct {
	defaultHook func() UserEmailsStore
	hooks       []func() UserEmailsStore
	history     []DBUserEmailsFuncCall
	mutex       sync.Mutex
}

// UserEmails delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) UserEmails() UserEmailsStore {
	r0 := m.UserEmailsFunc.nextHook()()
	m.UserEmailsFunc.appendCall(DBUserEmailsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the UserEmails method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBUserEmailsFunc) SetDefaultHook(hook func() UserEmailsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UserEmails method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBUserEmailsFunc) PushHook(hook func() UserEmailsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBUserEmailsFunc) SetDefaultReturn(r0 UserEmailsStore) {
	f.SetDefaultHook(func() UserEmailsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBUserEmailsFunc) PushReturn(r0 UserEmailsStore) {
	f.PushHook(func() UserEmailsStore {
		return r0
	})
}

func (f *DBUserEmailsFunc) nextHook() func() UserEmailsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBUserEmailsFunc) appendCall(r0 DBUserEmailsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBUserEmailsFuncCall objects describing the
// invocations of this function.
func (f *DBUserEmailsFunc) History() []DBUserEmailsFuncCall {
	f.mutex.Lock()
	history := make([]DBUserEmailsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBUserEmailsFuncCall is an object that describes an invocation of method
// UserEmails on an instance of MockDB.
type DBUserEmailsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 UserEmailsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBUserEmailsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBUserEmailsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBUserExternalAccountsFunc describes the behavior when the
// UserExternalAccounts method of the parent MockDB instance is invoked.
type DBUserExternalAccountsFunc struct {
	defaultHook func() UserExternalAccountsStore
	hooks       []func() UserExternalAccountsStore
	history     []DBUserExternalAccountsFuncCall
	mutex       sync.Mutex
}

// UserExternalAccounts delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDB) UserExternalAccounts() UserExternalAccountsStore {
	r0 := m.UserExternalAccountsFunc.nextHook()()
	m.UserExternalAccountsFunc.appendCall(DBUserExternalAccountsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the UserExternalAccounts
// method of the parent MockDB instance is invoked and the hook queue is
// empty.
func (f *DBUserExternalAccountsFunc) SetDefaultHook(hook func() UserExternalAccountsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UserExternalAccounts method of the parent MockDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *DBUserExternalAccountsFunc) PushHook(hook func() UserExternalAccountsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBUserExternalAccountsFunc) SetDefaultReturn(r0 UserExternalAccountsStore) {
	f.SetDefaultHook(func() UserExternalAccountsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBUserExternalAccountsFunc) PushReturn(r0 UserExternalAccountsStore) {
	f.PushHook(func() UserExternalAccountsStore {
		return r0
	})
}

func (f *DBUserExternalAccountsFunc) nextHook() func() UserExternalAccountsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBUserExternalAccountsFunc) appendCall(r0 DBUserExternalAccountsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBUserExternalAccountsFuncCall objects
// describing the invocations of this function.
func (f *DBUserExternalAccountsFunc) History() []DBUserExternalAccountsFuncCall {
	f.mutex.Lock()
	history := make([]DBUserExternalAccountsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBUserExternalAccountsFuncCall is an object that describes an invocation
// of method UserExternalAccounts on an instance of MockDB.
type DBUserExternalAccountsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 UserExternalAccountsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBUserExternalAccountsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBUserExternalAccountsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBUserRolesFunc describes the behavior when the UserRoles method of the
// parent MockDB instance is invoked.
type DBUserRolesFunc struct {
	defaultHook func() UserRoleStore
	hooks       []func() UserRoleStore
	history     []DBUserRolesFuncCall
	mutex       sync.Mutex
}

// UserRoles delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) UserRoles() UserRoleStore {
	r0 := m.UserRolesFunc.nextHook()()
	m.UserRolesFunc.appendCall(DBUserRolesFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the UserRoles method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBUserRolesFunc) SetDefaultHook(hook func() UserRoleStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UserRoles method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBUserRolesFunc) PushHook(hook func() UserRoleStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBUserRolesFunc) SetDefaultReturn(r0 UserRoleStore) {
	f.SetDefaultHook(func() UserRoleStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBUserRolesFunc) PushReturn(r0 UserRoleStore) {
	f.PushHook(func() UserRoleStore {
		return r0
	})
}

func (f *DBUserRolesFunc) nextHook() func() UserRoleStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBUserRolesFunc) appendCall(r0 DBUserRolesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBUserRolesFuncCall objects describing the
// invocations of this function.
func (f *DBUserRolesFunc) History() []DBUserRolesFuncCall {
	f.mutex.Lock()
	history := make([]DBUserRolesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBUserRolesFuncCall is an object that describes an invocation of method
// UserRoles on an instance of MockDB.
type DBUserRolesFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 UserRoleStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBUserRolesFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBUserRolesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBUsersFunc describes the behavior when the Users method of the parent
// MockDB instance is invoked.
type DBUsersFunc struct {
	defaultHook func() UserStore
	hooks       []func() UserStore
	history     []DBUsersFuncCall
	mutex       sync.Mutex
}

// Users delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) Users() UserStore {
	r0 := m.UsersFunc.nextHook()()
	m.UsersFunc.appendCall(DBUsersFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Users method of the
// parent MockDB instance is invoked and the hook queue is empty.
func (f *DBUsersFunc) SetDefaultHook(hook func() UserStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Users method of the parent MockDB instance invokes the hook at the front
// of the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *DBUsersFunc) PushHook(hook func() UserStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBUsersFunc) SetDefaultReturn(r0 UserStore) {
	f.SetDefaultHook(func() UserStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBUsersFunc) PushReturn(r0 UserStore) {
	f.PushHook(func() UserStore {
		return r0
	})
}

func (f *DBUsersFunc) nextHook() func() UserStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBUsersFunc) appendCall(r0 DBUsersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBUsersFuncCall objects describing the
// invocations of this function.
func (f *DBUsersFunc) History() []DBUsersFuncCall {
	f.mutex.Lock()
	history := make([]DBUsersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBUsersFuncCall is an object that describes an invocation of method Users
// on an instance of MockDB.
type DBUsersFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 UserStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBUsersFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBUsersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBWebhookLogsFunc describes the behavior when the WebhookLogs method of
// the parent MockDB instance is invoked.
type DBWebhookLogsFunc struct {
	defaultHook func(encryption.Key) WebhookLogStore
	hooks       []func(encryption.Key) WebhookLogStore
	history     []DBWebhookLogsFuncCall
	mutex       sync.Mutex
}

// WebhookLogs delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) WebhookLogs(v0 encryption.Key) WebhookLogStore {
	r0 := m.WebhookLogsFunc.nextHook()(v0)
	m.WebhookLogsFunc.appendCall(DBWebhookLogsFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WebhookLogs method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBWebhookLogsFunc) SetDefaultHook(hook func(encryption.Key) WebhookLogStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WebhookLogs method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBWebhookLogsFunc) PushHook(hook func(encryption.Key) WebhookLogStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBWebhookLogsFunc) SetDefaultReturn(r0 WebhookLogStore) {
	f.SetDefaultHook(func(encryption.Key) WebhookLogStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBWebhookLogsFunc) PushReturn(r0 WebhookLogStore) {
	f.PushHook(func(encryption.Key) WebhookLogStore {
		return r0
	})
}

func (f *DBWebhookLogsFunc) nextHook() func(encryption.Key) WebhookLogStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBWebhookLogsFunc) appendCall(r0 DBWebhookLogsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBWebhookLogsFuncCall objects describing
// the invocations of this function.
func (f *DBWebhookLogsFunc) History() []DBWebhookLogsFuncCall {
	f.mutex.Lock()
	history := make([]DBWebhookLogsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBWebhookLogsFuncCall is an object that describes an invocation of method
// WebhookLogs on an instance of MockDB.
type DBWebhookLogsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 encryption.Key
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 WebhookLogStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBWebhookLogsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBWebhookLogsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBWebhooksFunc describes the behavior when the Webhooks method of the
// parent MockDB instance is invoked.
type DBWebhooksFunc struct {
	defaultHook func(encryption.Key) WebhookStore
	hooks       []func(encryption.Key) WebhookStore
	history     []DBWebhooksFuncCall
	mutex       sync.Mutex
}

// Webhooks delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockDB) Webhooks(v0 encryption.Key) WebhookStore {
	r0 := m.WebhooksFunc.nextHook()(v0)
	m.WebhooksFunc.appendCall(DBWebhooksFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Webhooks method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBWebhooksFunc) SetDefaultHook(hook func(encryption.Key) WebhookStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Webhooks method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBWebhooksFunc) PushHook(hook func(encryption.Key) WebhookStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBWebhooksFunc) SetDefaultReturn(r0 WebhookStore) {
	f.SetDefaultHook(func(encryption.Key) WebhookStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBWebhooksFunc) PushReturn(r0 WebhookStore) {
	f.PushHook(func(encryption.Key) WebhookStore {
		return r0
	})
}

func (f *DBWebhooksFunc) nextHook() func(encryption.Key) WebhookStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBWebhooksFunc) appendCall(r0 DBWebhooksFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBWebhooksFuncCall objects describing the
// invocations of this function.
func (f *DBWebhooksFunc) History() []DBWebhooksFuncCall {
	f.mutex.Lock()
	history := make([]DBWebhooksFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBWebhooksFuncCall is an object that describes an invocation of method
// Webhooks on an instance of MockDB.
type DBWebhooksFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 encryption.Key
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 WebhookStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBWebhooksFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBWebhooksFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBWithTransactFunc describes the behavior when the WithTransact method of
// the parent MockDB instance is invoked.
type DBWithTransactFunc struct {
	defaultHook func(context.Context, func(tx DB) error) error
	hooks       []func(context.Context, func(tx DB) error) error
	history     []DBWithTransactFuncCall
	mutex       sync.Mutex
}

// WithTransact delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) WithTransact(v0 context.Context, v1 func(tx DB) error) error {
	r0 := m.WithTransactFunc.nextHook()(v0, v1)
	m.WithTransactFunc.appendCall(DBWithTransactFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithTransact method
// of the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBWithTransactFunc) SetDefaultHook(hook func(context.Context, func(tx DB) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithTransact method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBWithTransactFunc) PushHook(hook func(context.Context, func(tx DB) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBWithTransactFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, func(tx DB) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBWithTransactFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, func(tx DB) error) error {
		return r0
	})
}

func (f *DBWithTransactFunc) nextHook() func(context.Context, func(tx DB) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBWithTransactFunc) appendCall(r0 DBWithTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBWithTransactFuncCall objects describing
// the invocations of this function.
func (f *DBWithTransactFunc) History() []DBWithTransactFuncCall {
	f.mutex.Lock()
	history := make([]DBWithTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBWithTransactFuncCall is an object that describes an invocation of
// method WithTransact on an instance of MockDB.
type DBWithTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 func(tx DB) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBWithTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBWithTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBZoektReposFunc describes the behavior when the ZoektRepos method of the
// parent MockDB instance is invoked.
type DBZoektReposFunc struct {
	defaultHook func() ZoektReposStore
	hooks       []func() ZoektReposStore
	history     []DBZoektReposFuncCall
	mutex       sync.Mutex
}

// ZoektRepos delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDB) ZoektRepos() ZoektReposStore {
	r0 := m.ZoektReposFunc.nextHook()()
	m.ZoektReposFunc.appendCall(DBZoektReposFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ZoektRepos method of
// the parent MockDB instance is invoked and the hook queue is empty.
func (f *DBZoektReposFunc) SetDefaultHook(hook func() ZoektReposStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ZoektRepos method of the parent MockDB instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *DBZoektReposFunc) PushHook(hook func() ZoektReposStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DBZoektReposFunc) SetDefaultReturn(r0 ZoektReposStore) {
	f.SetDefaultHook(func() ZoektReposStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DBZoektReposFunc) PushReturn(r0 ZoektReposStore) {
	f.PushHook(func() ZoektReposStore {
		return r0
	})
}

func (f *DBZoektReposFunc) nextHook() func() ZoektReposStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBZoektReposFunc) appendCall(r0 DBZoektReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBZoektReposFuncCall objects describing the
// invocations of this function.
func (f *DBZoektReposFunc) History() []DBZoektReposFuncCall {
	f.mutex.Lock()
	history := make([]DBZoektReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBZoektReposFuncCall is an object that describes an invocation of method
// ZoektRepos on an instance of MockDB.
type DBZoektReposFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 ZoektReposStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBZoektReposFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBZoektReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockEventLogStore is a mock implementation of the EventLogStore interface
// (from the package github.com/sourcegraph/sourcegraph/internal/database)
// used for unit testing.
type MockEventLogStore struct {
	// AggregatedCodeIntelEventsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// AggregatedCodeIntelEvents.
	AggregatedCodeIntelEventsFunc *EventLogStoreAggregatedCodeIntelEventsFunc
	// AggregatedCodeIntelInvestigationEventsFunc is an instance of a mock
	// function object controlling the behavior of the method
	// AggregatedCodeIntelInvestigationEvents.
	AggregatedCodeIntelInvestigationEventsFunc *EventLogStoreAggregatedCodeIntelInvestigationEventsFunc
	// AggregatedCodyEventsFunc is an instance of a mock function object
	// controlling the behavior of the method AggregatedCodyEvents.
	AggregatedCodyEventsFunc *EventLogStoreAggregatedCodyEventsFunc
	// AggregatedRepoMetadataEventsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// AggregatedRepoMetadataEvents.
	AggregatedRepoMetadataEventsFunc *EventLogStoreAggregatedRepoMetadataEventsFunc
	// AggregatedSearchEventsFunc is an instance of a mock function object
	// controlling the behavior of the method AggregatedSearchEvents.
	AggregatedSearchEventsFunc *EventLogStoreAggregatedSearchEventsFunc
	// BulkInsertFunc is an instance of a mock function object controlling
	// the behavior of the method BulkInsert.
	BulkInsertFunc *EventLogStoreBulkInsertFunc
	// CodeIntelligenceCrossRepositoryWAUsFunc is an instance of a mock
	// function object controlling the behavior of the method
	// CodeIntelligenceCrossRepositoryWAUs.
	CodeIntelligenceCrossRepositoryWAUsFunc *EventLogStoreCodeIntelligenceCrossRepositoryWAUsFunc
	// CodeIntelligencePreciseCrossRepositoryWAUsFunc is an instance of a
	// mock function object controlling the behavior of the method
	// CodeIntelligencePreciseCrossRepositoryWAUs.
	CodeIntelligencePreciseCrossRepositoryWAUsFunc *EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFunc
	// CodeIntelligencePreciseWAUsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// CodeIntelligencePreciseWAUs.
	CodeIntelligencePreciseWAUsFunc *EventLogStoreCodeIntelligencePreciseWAUsFunc
	// CodeIntelligenceRepositoryCountsFunc is an instance of a mock
	// function object controlling the behavior of the method
	// CodeIntelligenceRepositoryCounts.
	CodeIntelligenceRepositoryCountsFunc *EventLogStoreCodeIntelligenceRepositoryCountsFunc
	// CodeIntelligenceRepositoryCountsByLanguageFunc is an instance of a
	// mock function object controlling the behavior of the method
	// CodeIntelligenceRepositoryCountsByLanguage.
	CodeIntelligenceRepositoryCountsByLanguageFunc *EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFunc
	// CodeIntelligenceSearchBasedCrossRepositoryWAUsFunc is an instance of
	// a mock function object controlling the behavior of the method
	// CodeIntelligenceSearchBasedCrossRepositoryWAUs.
	CodeIntelligenceSearchBasedCrossRepositoryWAUsFunc *EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFunc
	// CodeIntelligenceSearchBasedWAUsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// CodeIntelligenceSearchBasedWAUs.
	CodeIntelligenceSearchBasedWAUsFunc *EventLogStoreCodeIntelligenceSearchBasedWAUsFunc
	// CodeIntelligenceSettingsPageViewCountFunc is an instance of a mock
	// function object controlling the behavior of the method
	// CodeIntelligenceSettingsPageViewCount.
	CodeIntelligenceSettingsPageViewCountFunc *EventLogStoreCodeIntelligenceSettingsPageViewCountFunc
	// CodeIntelligenceWAUsFunc is an instance of a mock function object
	// controlling the behavior of the method CodeIntelligenceWAUs.
	CodeIntelligenceWAUsFunc *EventLogStoreCodeIntelligenceWAUsFunc
	// CountByUserIDFunc is an instance of a mock function object
	// controlling the behavior of the method CountByUserID.
	CountByUserIDFunc *EventLogStoreCountByUserIDFunc
	// CountByUserIDAndEventNameFunc is an instance of a mock function
	// object controlling the behavior of the method
	// CountByUserIDAndEventName.
	CountByUserIDAndEventNameFunc *EventLogStoreCountByUserIDAndEventNameFunc
	// CountByUserIDAndEventNamePrefixFunc is an instance of a mock function
	// object controlling the behavior of the method
	// CountByUserIDAndEventNamePrefix.
	CountByUserIDAndEventNamePrefixFunc *EventLogStoreCountByUserIDAndEventNamePrefixFunc
	// CountByUserIDAndEventNamesFunc is an instance of a mock function
	// object controlling the behavior of the method
	// CountByUserIDAndEventNames.
	CountByUserIDAndEventNamesFunc *EventLogStoreCountByUserIDAndEventNamesFunc
	// CountUniqueUsersAllFunc is an instance of a mock function object
	// controlling the behavior of the method CountUniqueUsersAll.
	CountUniqueUsersAllFunc *EventLogStoreCountUniqueUsersAllFunc
	// CountUniqueUsersByEventNameFunc is an instance of a mock function
	// object controlling the behavior of the method
	// CountUniqueUsersByEventName.
	CountUniqueUsersByEventNameFunc *EventLogStoreCountUniqueUsersByEventNameFunc
	// CountUniqueUsersByEventNamePrefixFunc is an instance of a mock
	// function object controlling the behavior of the method
	// CountUniqueUsersByEventNamePrefix.
	CountUniqueUsersByEventNamePrefixFunc *EventLogStoreCountUniqueUsersByEventNamePrefixFunc
	// CountUniqueUsersByEventNamesFunc is an instance of a mock function
	// object controlling the behavior of the method
	// CountUniqueUsersByEventNames.
	CountUniqueUsersByEventNamesFunc *EventLogStoreCountUniqueUsersByEventNamesFunc
	// CountUsersWithSettingFunc is an instance of a mock function object
	// controlling the behavior of the method CountUsersWithSetting.
	CountUsersWithSettingFunc *EventLogStoreCountUsersWithSettingFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *EventLogStoreHandleFunc
	// InsertFunc is an instance of a mock function object controlling the
	// behavior of the method Insert.
	InsertFunc *EventLogStoreInsertFunc
	// LatestPingFunc is an instance of a mock function object controlling
	// the behavior of the method LatestPing.
	LatestPingFunc *EventLogStoreLatestPingFunc
	// ListAllFunc is an instance of a mock function object controlling the
	// behavior of the method ListAll.
	ListAllFunc *EventLogStoreListAllFunc
	// ListExportableEventsFunc is an instance of a mock function object
	// controlling the behavior of the method ListExportableEvents.
	ListExportableEventsFunc *EventLogStoreListExportableEventsFunc
	// ListUniqueUsersAllFunc is an instance of a mock function object
	// controlling the behavior of the method ListUniqueUsersAll.
	ListUniqueUsersAllFunc *EventLogStoreListUniqueUsersAllFunc
	// MaxTimestampByUserIDFunc is an instance of a mock function object
	// controlling the behavior of the method MaxTimestampByUserID.
	MaxTimestampByUserIDFunc *EventLogStoreMaxTimestampByUserIDFunc
	// MaxTimestampByUserIDAndSourceFunc is an instance of a mock function
	// object controlling the behavior of the method
	// MaxTimestampByUserIDAndSource.
	MaxTimestampByUserIDAndSourceFunc *EventLogStoreMaxTimestampByUserIDAndSourceFunc
	// OwnershipFeatureActivityFunc is an instance of a mock function object
	// controlling the behavior of the method OwnershipFeatureActivity.
	OwnershipFeatureActivityFunc *EventLogStoreOwnershipFeatureActivityFunc
	// RequestsByLanguageFunc is an instance of a mock function object
	// controlling the behavior of the method RequestsByLanguage.
	RequestsByLanguageFunc *EventLogStoreRequestsByLanguageFunc
	// SiteUsageCurrentPeriodsFunc is an instance of a mock function object
	// controlling the behavior of the method SiteUsageCurrentPeriods.
	SiteUsageCurrentPeriodsFunc *EventLogStoreSiteUsageCurrentPeriodsFunc
	// SiteUsageMultiplePeriodsFunc is an instance of a mock function object
	// controlling the behavior of the method SiteUsageMultiplePeriods.
	SiteUsageMultiplePeriodsFunc *EventLogStoreSiteUsageMultiplePeriodsFunc
	// UsersUsageCountsFunc is an instance of a mock function object
	// controlling the behavior of the method UsersUsageCounts.
	UsersUsageCountsFunc *EventLogStoreUsersUsageCountsFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *EventLogStoreWithFunc
	// WithTransactFunc is an instance of a mock function object controlling
	// the behavior of the method WithTransact.
	WithTransactFunc *EventLogStoreWithTransactFunc
}

// NewMockEventLogStore creates a new mock of the EventLogStore interface.
// All methods return zero values for all results, unless overwritten.
func NewMockEventLogStore() *MockEventLogStore {
	return &MockEventLogStore{
		AggregatedCodeIntelEventsFunc: &EventLogStoreAggregatedCodeIntelEventsFunc{
			defaultHook: func(context.Context) (r0 []types.CodeIntelAggregatedEvent, r1 error) {
				return
			},
		},
		AggregatedCodeIntelInvestigationEventsFunc: &EventLogStoreAggregatedCodeIntelInvestigationEventsFunc{
			defaultHook: func(context.Context) (r0 []types.CodeIntelAggregatedInvestigationEvent, r1 error) {
				return
			},
		},
		AggregatedCodyEventsFunc: &EventLogStoreAggregatedCodyEventsFunc{
			defaultHook: func(context.Context, time.Time) (r0 []types.CodyAggregatedEvent, r1 error) {
				return
			},
		},
		AggregatedRepoMetadataEventsFunc: &EventLogStoreAggregatedRepoMetadataEventsFunc{
			defaultHook: func(context.Context, time.Time, PeriodType) (r0 *types.RepoMetadataAggregatedEvents, r1 error) {
				return
			},
		},
		AggregatedSearchEventsFunc: &EventLogStoreAggregatedSearchEventsFunc{
			defaultHook: func(context.Context, time.Time) (r0 []types.SearchAggregatedEvent, r1 error) {
				return
			},
		},
		BulkInsertFunc: &EventLogStoreBulkInsertFunc{
			defaultHook: func(context.Context, []*Event) (r0 error) {
				return
			},
		},
		CodeIntelligenceCrossRepositoryWAUsFunc: &EventLogStoreCodeIntelligenceCrossRepositoryWAUsFunc{
			defaultHook: func(context.Context) (r0 int, r1 error) {
				return
			},
		},
		CodeIntelligencePreciseCrossRepositoryWAUsFunc: &EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFunc{
			defaultHook: func(context.Context) (r0 int, r1 error) {
				return
			},
		},
		CodeIntelligencePreciseWAUsFunc: &EventLogStoreCodeIntelligencePreciseWAUsFunc{
			defaultHook: func(context.Context) (r0 int, r1 error) {
				return
			},
		},
		CodeIntelligenceRepositoryCountsFunc: &EventLogStoreCodeIntelligenceRepositoryCountsFunc{
			defaultHook: func(context.Context) (r0 CodeIntelligenceRepositoryCounts, r1 error) {
				return
			},
		},
		CodeIntelligenceRepositoryCountsByLanguageFunc: &EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFunc{
			defaultHook: func(context.Context) (r0 map[string]CodeIntelligenceRepositoryCountsForLanguage, r1 error) {
				return
			},
		},
		CodeIntelligenceSearchBasedCrossRepositoryWAUsFunc: &EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFunc{
			defaultHook: func(context.Context) (r0 int, r1 error) {
				return
			},
		},
		CodeIntelligenceSearchBasedWAUsFunc: &EventLogStoreCodeIntelligenceSearchBasedWAUsFunc{
			defaultHook: func(context.Context) (r0 int, r1 error) {
				return
			},
		},
		CodeIntelligenceSettingsPageViewCountFunc: &EventLogStoreCodeIntelligenceSettingsPageViewCountFunc{
			defaultHook: func(context.Context) (r0 int, r1 error) {
				return
			},
		},
		CodeIntelligenceWAUsFunc: &EventLogStoreCodeIntelligenceWAUsFunc{
			defaultHook: func(context.Context) (r0 int, r1 error) {
				return
			},
		},
		CountByUserIDFunc: &EventLogStoreCountByUserIDFunc{
			defaultHook: func(context.Context, int32) (r0 int, r1 error) {
				return
			},
		},
		CountByUserIDAndEventNameFunc: &EventLogStoreCountByUserIDAndEventNameFunc{
			defaultHook: func(context.Context, int32, string) (r0 int, r1 error) {
				return
			},
		},
		CountByUserIDAndEventNamePrefixFunc: &EventLogStoreCountByUserIDAndEventNamePrefixFunc{
			defaultHook: func(context.Context, int32, string) (r0 int, r1 error) {
				return
			},
		},
		CountByUserIDAndEventNamesFunc: &EventLogStoreCountByUserIDAndEventNamesFunc{
			defaultHook: func(context.Context, int32, []string) (r0 int, r1 error) {
				return
			},
		},
		CountUniqueUsersAllFunc: &EventLogStoreCountUniqueUsersAllFunc{
			defaultHook: func(context.Context, time.Time, time.Time, *CountUniqueUsersOptions) (r0 int, r1 error) {
				return
			},
		},
		CountUniqueUsersByEventNameFunc: &EventLogStoreCountUniqueUsersByEventNameFunc{
			defaultHook: func(context.Context, time.Time, time.Time, string) (r0 int, r1 error) {
				return
			},
		},
		CountUniqueUsersByEventNamePrefixFunc: &EventLogStoreCountUniqueUsersByEventNamePrefixFunc{
			defaultHook: func(context.Context, time.Time, time.Time, string) (r0 int, r1 error) {
				return
			},
		},
		CountUniqueUsersByEventNamesFunc: &EventLogStoreCountUniqueUsersByEventNamesFunc{
			defaultHook: func(context.Context, time.Time, time.Time, []string) (r0 int, r1 error) {
				return
			},
		},
		CountUsersWithSettingFunc: &EventLogStoreCountUsersWithSettingFunc{
			defaultHook: func(context.Context, string, interface{}) (r0 int, r1 error) {
				return
			},
		},
		HandleFunc: &EventLogStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		InsertFunc: &EventLogStoreInsertFunc{
			defaultHook: func(context.Context, *Event) (r0 error) {
				return
			},
		},
		LatestPingFunc: &EventLogStoreLatestPingFunc{
			defaultHook: func(context.Context) (r0 *Event, r1 error) {
				return
			},
		},
		ListAllFunc: &EventLogStoreListAllFunc{
			defaultHook: func(context.Context, EventLogsListOptions) (r0 []*Event, r1 error) {
				return
			},
		},
		ListExportableEventsFunc: &EventLogStoreListExportableEventsFunc{
			defaultHook: func(context.Context, int, int) (r0 []*Event, r1 error) {
				return
			},
		},
		ListUniqueUsersAllFunc: &EventLogStoreListUniqueUsersAllFunc{
			defaultHook: func(context.Context, time.Time, time.Time) (r0 []int32, r1 error) {
				return
			},
		},
		MaxTimestampByUserIDFunc: &EventLogStoreMaxTimestampByUserIDFunc{
			defaultHook: func(context.Context, int32) (r0 *time.Time, r1 error) {
				return
			},
		},
		MaxTimestampByUserIDAndSourceFunc: &EventLogStoreMaxTimestampByUserIDAndSourceFunc{
			defaultHook: func(context.Context, int32, string) (r0 *time.Time, r1 error) {
				return
			},
		},
		OwnershipFeatureActivityFunc: &EventLogStoreOwnershipFeatureActivityFunc{
			defaultHook: func(context.Context, time.Time, ...string) (r0 map[string]*types.OwnershipUsageStatisticsActiveUsers, r1 error) {
				return
			},
		},
		RequestsByLanguageFunc: &EventLogStoreRequestsByLanguageFunc{
			defaultHook: func(context.Context) (r0 map[string]int, r1 error) {
				return
			},
		},
		SiteUsageCurrentPeriodsFunc: &EventLogStoreSiteUsageCurrentPeriodsFunc{
			defaultHook: func(context.Context) (r0 types.SiteUsageSummary, r1 error) {
				return
			},
		},
		SiteUsageMultiplePeriodsFunc: &EventLogStoreSiteUsageMultiplePeriodsFunc{
			defaultHook: func(context.Context, time.Time, int, int, int, *CountUniqueUsersOptions) (r0 *types.SiteUsageStatistics, r1 error) {
				return
			},
		},
		UsersUsageCountsFunc: &EventLogStoreUsersUsageCountsFunc{
			defaultHook: func(context.Context) (r0 []types.UserUsageCounts, r1 error) {
				return
			},
		},
		WithFunc: &EventLogStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 EventLogStore) {
				return
			},
		},
		WithTransactFunc: &EventLogStoreWithTransactFunc{
			defaultHook: func(context.Context, func(EventLogStore) error) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockEventLogStore creates a new mock of the EventLogStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockEventLogStore() *MockEventLogStore {
	return &MockEventLogStore{
		AggregatedCodeIntelEventsFunc: &EventLogStoreAggregatedCodeIntelEventsFunc{
			defaultHook: func(context.Context) ([]types.CodeIntelAggregatedEvent, error) {
				panic("unexpected invocation of MockEventLogStore.AggregatedCodeIntelEvents")
			},
		},
		AggregatedCodeIntelInvestigationEventsFunc: &EventLogStoreAggregatedCodeIntelInvestigationEventsFunc{
			defaultHook: func(context.Context) ([]types.CodeIntelAggregatedInvestigationEvent, error) {
				panic("unexpected invocation of MockEventLogStore.AggregatedCodeIntelInvestigationEvents")
			},
		},
		AggregatedCodyEventsFunc: &EventLogStoreAggregatedCodyEventsFunc{
			defaultHook: func(context.Context, time.Time) ([]types.CodyAggregatedEvent, error) {
				panic("unexpected invocation of MockEventLogStore.AggregatedCodyEvents")
			},
		},
		AggregatedRepoMetadataEventsFunc: &EventLogStoreAggregatedRepoMetadataEventsFunc{
			defaultHook: func(context.Context, time.Time, PeriodType) (*types.RepoMetadataAggregatedEvents, error) {
				panic("unexpected invocation of MockEventLogStore.AggregatedRepoMetadataEvents")
			},
		},
		AggregatedSearchEventsFunc: &EventLogStoreAggregatedSearchEventsFunc{
			defaultHook: func(context.Context, time.Time) ([]types.SearchAggregatedEvent, error) {
				panic("unexpected invocation of MockEventLogStore.AggregatedSearchEvents")
			},
		},
		BulkInsertFunc: &EventLogStoreBulkInsertFunc{
			defaultHook: func(context.Context, []*Event) error {
				panic("unexpected invocation of MockEventLogStore.BulkInsert")
			},
		},
		CodeIntelligenceCrossRepositoryWAUsFunc: &EventLogStoreCodeIntelligenceCrossRepositoryWAUsFunc{
			defaultHook: func(context.Context) (int, error) {
				panic("unexpected invocation of MockEventLogStore.CodeIntelligenceCrossRepositoryWAUs")
			},
		},
		CodeIntelligencePreciseCrossRepositoryWAUsFunc: &EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFunc{
			defaultHook: func(context.Context) (int, error) {
				panic("unexpected invocation of MockEventLogStore.CodeIntelligencePreciseCrossRepositoryWAUs")
			},
		},
		CodeIntelligencePreciseWAUsFunc: &EventLogStoreCodeIntelligencePreciseWAUsFunc{
			defaultHook: func(context.Context) (int, error) {
				panic("unexpected invocation of MockEventLogStore.CodeIntelligencePreciseWAUs")
			},
		},
		CodeIntelligenceRepositoryCountsFunc: &EventLogStoreCodeIntelligenceRepositoryCountsFunc{
			defaultHook: func(context.Context) (CodeIntelligenceRepositoryCounts, error) {
				panic("unexpected invocation of MockEventLogStore.CodeIntelligenceRepositoryCounts")
			},
		},
		CodeIntelligenceRepositoryCountsByLanguageFunc: &EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFunc{
			defaultHook: func(context.Context) (map[string]CodeIntelligenceRepositoryCountsForLanguage, error) {
				panic("unexpected invocation of MockEventLogStore.CodeIntelligenceRepositoryCountsByLanguage")
			},
		},
		CodeIntelligenceSearchBasedCrossRepositoryWAUsFunc: &EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFunc{
			defaultHook: func(context.Context) (int, error) {
				panic("unexpected invocation of MockEventLogStore.CodeIntelligenceSearchBasedCrossRepositoryWAUs")
			},
		},
		CodeIntelligenceSearchBasedWAUsFunc: &EventLogStoreCodeIntelligenceSearchBasedWAUsFunc{
			defaultHook: func(context.Context) (int, error) {
				panic("unexpected invocation of MockEventLogStore.CodeIntelligenceSearchBasedWAUs")
			},
		},
		CodeIntelligenceSettingsPageViewCountFunc: &EventLogStoreCodeIntelligenceSettingsPageViewCountFunc{
			defaultHook: func(context.Context) (int, error) {
				panic("unexpected invocation of MockEventLogStore.CodeIntelligenceSettingsPageViewCount")
			},
		},
		CodeIntelligenceWAUsFunc: &EventLogStoreCodeIntelligenceWAUsFunc{
			defaultHook: func(context.Context) (int, error) {
				panic("unexpected invocation of MockEventLogStore.CodeIntelligenceWAUs")
			},
		},
		CountByUserIDFunc: &EventLogStoreCountByUserIDFunc{
			defaultHook: func(context.Context, int32) (int, error) {
				panic("unexpected invocation of MockEventLogStore.CountByUserID")
			},
		},
		CountByUserIDAndEventNameFunc: &EventLogStoreCountByUserIDAndEventNameFunc{
			defaultHook: func(context.Context, int32, string) (int, error) {
				panic("unexpected invocation of MockEventLogStore.CountByUserIDAndEventName")
			},
		},
		CountByUserIDAndEventNamePrefixFunc: &EventLogStoreCountByUserIDAndEventNamePrefixFunc{
			defaultHook: func(context.Context, int32, string) (int, error) {
				panic("unexpected invocation of MockEventLogStore.CountByUserIDAndEventNamePrefix")
			},
		},
		CountByUserIDAndEventNamesFunc: &EventLogStoreCountByUserIDAndEventNamesFunc{
			defaultHook: func(context.Context, int32, []string) (int, error) {
				panic("unexpected invocation of MockEventLogStore.CountByUserIDAndEventNames")
			},
		},
		CountUniqueUsersAllFunc: &EventLogStoreCountUniqueUsersAllFunc{
			defaultHook: func(context.Context, time.Time, time.Time, *CountUniqueUsersOptions) (int, error) {
				panic("unexpected invocation of MockEventLogStore.CountUniqueUsersAll")
			},
		},
		CountUniqueUsersByEventNameFunc: &EventLogStoreCountUniqueUsersByEventNameFunc{
			defaultHook: func(context.Context, time.Time, time.Time, string) (int, error) {
				panic("unexpected invocation of MockEventLogStore.CountUniqueUsersByEventName")
			},
		},
		CountUniqueUsersByEventNamePrefixFunc: &EventLogStoreCountUniqueUsersByEventNamePrefixFunc{
			defaultHook: func(context.Context, time.Time, time.Time, string) (int, error) {
				panic("unexpected invocation of MockEventLogStore.CountUniqueUsersByEventNamePrefix")
			},
		},
		CountUniqueUsersByEventNamesFunc: &EventLogStoreCountUniqueUsersByEventNamesFunc{
			defaultHook: func(context.Context, time.Time, time.Time, []string) (int, error) {
				panic("unexpected invocation of MockEventLogStore.CountUniqueUsersByEventNames")
			},
		},
		CountUsersWithSettingFunc: &EventLogStoreCountUsersWithSettingFunc{
			defaultHook: func(context.Context, string, interface{}) (int, error) {
				panic("unexpected invocation of MockEventLogStore.CountUsersWithSetting")
			},
		},
		HandleFunc: &EventLogStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockEventLogStore.Handle")
			},
		},
		InsertFunc: &EventLogStoreInsertFunc{
			defaultHook: func(context.Context, *Event) error {
				panic("unexpected invocation of MockEventLogStore.Insert")
			},
		},
		LatestPingFunc: &EventLogStoreLatestPingFunc{
			defaultHook: func(context.Context) (*Event, error) {
				panic("unexpected invocation of MockEventLogStore.LatestPing")
			},
		},
		ListAllFunc: &EventLogStoreListAllFunc{
			defaultHook: func(context.Context, EventLogsListOptions) ([]*Event, error) {
				panic("unexpected invocation of MockEventLogStore.ListAll")
			},
		},
		ListExportableEventsFunc: &EventLogStoreListExportableEventsFunc{
			defaultHook: func(context.Context, int, int) ([]*Event, error) {
				panic("unexpected invocation of MockEventLogStore.ListExportableEvents")
			},
		},
		ListUniqueUsersAllFunc: &EventLogStoreListUniqueUsersAllFunc{
			defaultHook: func(context.Context, time.Time, time.Time) ([]int32, error) {
				panic("unexpected invocation of MockEventLogStore.ListUniqueUsersAll")
			},
		},
		MaxTimestampByUserIDFunc: &EventLogStoreMaxTimestampByUserIDFunc{
			defaultHook: func(context.Context, int32) (*time.Time, error) {
				panic("unexpected invocation of MockEventLogStore.MaxTimestampByUserID")
			},
		},
		MaxTimestampByUserIDAndSourceFunc: &EventLogStoreMaxTimestampByUserIDAndSourceFunc{
			defaultHook: func(context.Context, int32, string) (*time.Time, error) {
				panic("unexpected invocation of MockEventLogStore.MaxTimestampByUserIDAndSource")
			},
		},
		OwnershipFeatureActivityFunc: &EventLogStoreOwnershipFeatureActivityFunc{
			defaultHook: func(context.Context, time.Time, ...string) (map[string]*types.OwnershipUsageStatisticsActiveUsers, error) {
				panic("unexpected invocation of MockEventLogStore.OwnershipFeatureActivity")
			},
		},
		RequestsByLanguageFunc: &EventLogStoreRequestsByLanguageFunc{
			defaultHook: func(context.Context) (map[string]int, error) {
				panic("unexpected invocation of MockEventLogStore.RequestsByLanguage")
			},
		},
		SiteUsageCurrentPeriodsFunc: &EventLogStoreSiteUsageCurrentPeriodsFunc{
			defaultHook: func(context.Context) (types.SiteUsageSummary, error) {
				panic("unexpected invocation of MockEventLogStore.SiteUsageCurrentPeriods")
			},
		},
		SiteUsageMultiplePeriodsFunc: &EventLogStoreSiteUsageMultiplePeriodsFunc{
			defaultHook: func(context.Context, time.Time, int, int, int, *CountUniqueUsersOptions) (*types.SiteUsageStatistics, error) {
				panic("unexpected invocation of MockEventLogStore.SiteUsageMultiplePeriods")
			},
		},
		UsersUsageCountsFunc: &EventLogStoreUsersUsageCountsFunc{
			defaultHook: func(context.Context) ([]types.UserUsageCounts, error) {
				panic("unexpected invocation of MockEventLogStore.UsersUsageCounts")
			},
		},
		WithFunc: &EventLogStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) EventLogStore {
				panic("unexpected invocation of MockEventLogStore.With")
			},
		},
		WithTransactFunc: &EventLogStoreWithTransactFunc{
			defaultHook: func(context.Context, func(EventLogStore) error) error {
				panic("unexpected invocation of MockEventLogStore.WithTransact")
			},
		},
	}
}

// NewMockEventLogStoreFrom creates a new mock of the MockEventLogStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockEventLogStoreFrom(i EventLogStore) *MockEventLogStore {
	return &MockEventLogStore{
		AggregatedCodeIntelEventsFunc: &EventLogStoreAggregatedCodeIntelEventsFunc{
			defaultHook: i.AggregatedCodeIntelEvents,
		},
		AggregatedCodeIntelInvestigationEventsFunc: &EventLogStoreAggregatedCodeIntelInvestigationEventsFunc{
			defaultHook: i.AggregatedCodeIntelInvestigationEvents,
		},
		AggregatedCodyEventsFunc: &EventLogStoreAggregatedCodyEventsFunc{
			defaultHook: i.AggregatedCodyEvents,
		},
		AggregatedRepoMetadataEventsFunc: &EventLogStoreAggregatedRepoMetadataEventsFunc{
			defaultHook: i.AggregatedRepoMetadataEvents,
		},
		AggregatedSearchEventsFunc: &EventLogStoreAggregatedSearchEventsFunc{
			defaultHook: i.AggregatedSearchEvents,
		},
		BulkInsertFunc: &EventLogStoreBulkInsertFunc{
			defaultHook: i.BulkInsert,
		},
		CodeIntelligenceCrossRepositoryWAUsFunc: &EventLogStoreCodeIntelligenceCrossRepositoryWAUsFunc{
			defaultHook: i.CodeIntelligenceCrossRepositoryWAUs,
		},
		CodeIntelligencePreciseCrossRepositoryWAUsFunc: &EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFunc{
			defaultHook: i.CodeIntelligencePreciseCrossRepositoryWAUs,
		},
		CodeIntelligencePreciseWAUsFunc: &EventLogStoreCodeIntelligencePreciseWAUsFunc{
			defaultHook: i.CodeIntelligencePreciseWAUs,
		},
		CodeIntelligenceRepositoryCountsFunc: &EventLogStoreCodeIntelligenceRepositoryCountsFunc{
			defaultHook: i.CodeIntelligenceRepositoryCounts,
		},
		CodeIntelligenceRepositoryCountsByLanguageFunc: &EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFunc{
			defaultHook: i.CodeIntelligenceRepositoryCountsByLanguage,
		},
		CodeIntelligenceSearchBasedCrossRepositoryWAUsFunc: &EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFunc{
			defaultHook: i.CodeIntelligenceSearchBasedCrossRepositoryWAUs,
		},
		CodeIntelligenceSearchBasedWAUsFunc: &EventLogStoreCodeIntelligenceSearchBasedWAUsFunc{
			defaultHook: i.CodeIntelligenceSearchBasedWAUs,
		},
		CodeIntelligenceSettingsPageViewCountFunc: &EventLogStoreCodeIntelligenceSettingsPageViewCountFunc{
			defaultHook: i.CodeIntelligenceSettingsPageViewCount,
		},
		CodeIntelligenceWAUsFunc: &EventLogStoreCodeIntelligenceWAUsFunc{
			defaultHook: i.CodeIntelligenceWAUs,
		},
		CountByUserIDFunc: &EventLogStoreCountByUserIDFunc{
			defaultHook: i.CountByUserID,
		},
		CountByUserIDAndEventNameFunc: &EventLogStoreCountByUserIDAndEventNameFunc{
			defaultHook: i.CountByUserIDAndEventName,
		},
		CountByUserIDAndEventNamePrefixFunc: &EventLogStoreCountByUserIDAndEventNamePrefixFunc{
			defaultHook: i.CountByUserIDAndEventNamePrefix,
		},
		CountByUserIDAndEventNamesFunc: &EventLogStoreCountByUserIDAndEventNamesFunc{
			defaultHook: i.CountByUserIDAndEventNames,
		},
		CountUniqueUsersAllFunc: &EventLogStoreCountUniqueUsersAllFunc{
			defaultHook: i.CountUniqueUsersAll,
		},
		CountUniqueUsersByEventNameFunc: &EventLogStoreCountUniqueUsersByEventNameFunc{
			defaultHook: i.CountUniqueUsersByEventName,
		},
		CountUniqueUsersByEventNamePrefixFunc: &EventLogStoreCountUniqueUsersByEventNamePrefixFunc{
			defaultHook: i.CountUniqueUsersByEventNamePrefix,
		},
		CountUniqueUsersByEventNamesFunc: &EventLogStoreCountUniqueUsersByEventNamesFunc{
			defaultHook: i.CountUniqueUsersByEventNames,
		},
		CountUsersWithSettingFunc: &EventLogStoreCountUsersWithSettingFunc{
			defaultHook: i.CountUsersWithSetting,
		},
		HandleFunc: &EventLogStoreHandleFunc{
			defaultHook: i.Handle,
		},
		InsertFunc: &EventLogStoreInsertFunc{
			defaultHook: i.Insert,
		},
		LatestPingFunc: &EventLogStoreLatestPingFunc{
			defaultHook: i.LatestPing,
		},
		ListAllFunc: &EventLogStoreListAllFunc{
			defaultHook: i.ListAll,
		},
		ListExportableEventsFunc: &EventLogStoreListExportableEventsFunc{
			defaultHook: i.ListExportableEvents,
		},
		ListUniqueUsersAllFunc: &EventLogStoreListUniqueUsersAllFunc{
			defaultHook: i.ListUniqueUsersAll,
		},
		MaxTimestampByUserIDFunc: &EventLogStoreMaxTimestampByUserIDFunc{
			defaultHook: i.MaxTimestampByUserID,
		},
		MaxTimestampByUserIDAndSourceFunc: &EventLogStoreMaxTimestampByUserIDAndSourceFunc{
			defaultHook: i.MaxTimestampByUserIDAndSource,
		},
		OwnershipFeatureActivityFunc: &EventLogStoreOwnershipFeatureActivityFunc{
			defaultHook: i.OwnershipFeatureActivity,
		},
		RequestsByLanguageFunc: &EventLogStoreRequestsByLanguageFunc{
			defaultHook: i.RequestsByLanguage,
		},
		SiteUsageCurrentPeriodsFunc: &EventLogStoreSiteUsageCurrentPeriodsFunc{
			defaultHook: i.SiteUsageCurrentPeriods,
		},
		SiteUsageMultiplePeriodsFunc: &EventLogStoreSiteUsageMultiplePeriodsFunc{
			defaultHook: i.SiteUsageMultiplePeriods,
		},
		UsersUsageCountsFunc: &EventLogStoreUsersUsageCountsFunc{
			defaultHook: i.UsersUsageCounts,
		},
		WithFunc: &EventLogStoreWithFunc{
			defaultHook: i.With,
		},
		WithTransactFunc: &EventLogStoreWithTransactFunc{
			defaultHook: i.WithTransact,
		},
	}
}

// EventLogStoreAggregatedCodeIntelEventsFunc describes the behavior when
// the AggregatedCodeIntelEvents method of the parent MockEventLogStore
// instance is invoked.
type EventLogStoreAggregatedCodeIntelEventsFunc struct {
	defaultHook func(context.Context) ([]types.CodeIntelAggregatedEvent, error)
	hooks       []func(context.Context) ([]types.CodeIntelAggregatedEvent, error)
	history     []EventLogStoreAggregatedCodeIntelEventsFuncCall
	mutex       sync.Mutex
}

// AggregatedCodeIntelEvents delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockEventLogStore) AggregatedCodeIntelEvents(v0 context.Context) ([]types.CodeIntelAggregatedEvent, error) {
	r0, r1 := m.AggregatedCodeIntelEventsFunc.nextHook()(v0)
	m.AggregatedCodeIntelEventsFunc.appendCall(EventLogStoreAggregatedCodeIntelEventsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// AggregatedCodeIntelEvents method of the parent MockEventLogStore instance
// is invoked and the hook queue is empty.
func (f *EventLogStoreAggregatedCodeIntelEventsFunc) SetDefaultHook(hook func(context.Context) ([]types.CodeIntelAggregatedEvent, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AggregatedCodeIntelEvents method of the parent MockEventLogStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EventLogStoreAggregatedCodeIntelEventsFunc) PushHook(hook func(context.Context) ([]types.CodeIntelAggregatedEvent, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreAggregatedCodeIntelEventsFunc) SetDefaultReturn(r0 []types.CodeIntelAggregatedEvent, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]types.CodeIntelAggregatedEvent, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreAggregatedCodeIntelEventsFunc) PushReturn(r0 []types.CodeIntelAggregatedEvent, r1 error) {
	f.PushHook(func(context.Context) ([]types.CodeIntelAggregatedEvent, error) {
		return r0, r1
	})
}

func (f *EventLogStoreAggregatedCodeIntelEventsFunc) nextHook() func(context.Context) ([]types.CodeIntelAggregatedEvent, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreAggregatedCodeIntelEventsFunc) appendCall(r0 EventLogStoreAggregatedCodeIntelEventsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreAggregatedCodeIntelEventsFuncCall objects describing the
// invocations of this function.
func (f *EventLogStoreAggregatedCodeIntelEventsFunc) History() []EventLogStoreAggregatedCodeIntelEventsFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreAggregatedCodeIntelEventsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreAggregatedCodeIntelEventsFuncCall is an object that
// describes an invocation of method AggregatedCodeIntelEvents on an
// instance of MockEventLogStore.
type EventLogStoreAggregatedCodeIntelEventsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.CodeIntelAggregatedEvent
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreAggregatedCodeIntelEventsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreAggregatedCodeIntelEventsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreAggregatedCodeIntelInvestigationEventsFunc describes the
// behavior when the AggregatedCodeIntelInvestigationEvents method of the
// parent MockEventLogStore instance is invoked.
type EventLogStoreAggregatedCodeIntelInvestigationEventsFunc struct {
	defaultHook func(context.Context) ([]types.CodeIntelAggregatedInvestigationEvent, error)
	hooks       []func(context.Context) ([]types.CodeIntelAggregatedInvestigationEvent, error)
	history     []EventLogStoreAggregatedCodeIntelInvestigationEventsFuncCall
	mutex       sync.Mutex
}

// AggregatedCodeIntelInvestigationEvents delegates to the next hook
// function in the queue and stores the parameter and result values of this
// invocation.
func (m *MockEventLogStore) AggregatedCodeIntelInvestigationEvents(v0 context.Context) ([]types.CodeIntelAggregatedInvestigationEvent, error) {
	r0, r1 := m.AggregatedCodeIntelInvestigationEventsFunc.nextHook()(v0)
	m.AggregatedCodeIntelInvestigationEventsFunc.appendCall(EventLogStoreAggregatedCodeIntelInvestigationEventsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// AggregatedCodeIntelInvestigationEvents method of the parent
// MockEventLogStore instance is invoked and the hook queue is empty.
func (f *EventLogStoreAggregatedCodeIntelInvestigationEventsFunc) SetDefaultHook(hook func(context.Context) ([]types.CodeIntelAggregatedInvestigationEvent, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AggregatedCodeIntelInvestigationEvents method of the parent
// MockEventLogStore instance invokes the hook at the front of the queue and
// discards it. After the queue is empty, the default hook function is
// invoked for any future action.
func (f *EventLogStoreAggregatedCodeIntelInvestigationEventsFunc) PushHook(hook func(context.Context) ([]types.CodeIntelAggregatedInvestigationEvent, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreAggregatedCodeIntelInvestigationEventsFunc) SetDefaultReturn(r0 []types.CodeIntelAggregatedInvestigationEvent, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]types.CodeIntelAggregatedInvestigationEvent, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreAggregatedCodeIntelInvestigationEventsFunc) PushReturn(r0 []types.CodeIntelAggregatedInvestigationEvent, r1 error) {
	f.PushHook(func(context.Context) ([]types.CodeIntelAggregatedInvestigationEvent, error) {
		return r0, r1
	})
}

func (f *EventLogStoreAggregatedCodeIntelInvestigationEventsFunc) nextHook() func(context.Context) ([]types.CodeIntelAggregatedInvestigationEvent, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreAggregatedCodeIntelInvestigationEventsFunc) appendCall(r0 EventLogStoreAggregatedCodeIntelInvestigationEventsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreAggregatedCodeIntelInvestigationEventsFuncCall objects
// describing the invocations of this function.
func (f *EventLogStoreAggregatedCodeIntelInvestigationEventsFunc) History() []EventLogStoreAggregatedCodeIntelInvestigationEventsFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreAggregatedCodeIntelInvestigationEventsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreAggregatedCodeIntelInvestigationEventsFuncCall is an object
// that describes an invocation of method
// AggregatedCodeIntelInvestigationEvents on an instance of
// MockEventLogStore.
type EventLogStoreAggregatedCodeIntelInvestigationEventsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.CodeIntelAggregatedInvestigationEvent
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreAggregatedCodeIntelInvestigationEventsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreAggregatedCodeIntelInvestigationEventsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreAggregatedCodyEventsFunc describes the behavior when the
// AggregatedCodyEvents method of the parent MockEventLogStore instance is
// invoked.
type EventLogStoreAggregatedCodyEventsFunc struct {
	defaultHook func(context.Context, time.Time) ([]types.CodyAggregatedEvent, error)
	hooks       []func(context.Context, time.Time) ([]types.CodyAggregatedEvent, error)
	history     []EventLogStoreAggregatedCodyEventsFuncCall
	mutex       sync.Mutex
}

// AggregatedCodyEvents delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEventLogStore) AggregatedCodyEvents(v0 context.Context, v1 time.Time) ([]types.CodyAggregatedEvent, error) {
	r0, r1 := m.AggregatedCodyEventsFunc.nextHook()(v0, v1)
	m.AggregatedCodyEventsFunc.appendCall(EventLogStoreAggregatedCodyEventsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the AggregatedCodyEvents
// method of the parent MockEventLogStore instance is invoked and the hook
// queue is empty.
func (f *EventLogStoreAggregatedCodyEventsFunc) SetDefaultHook(hook func(context.Context, time.Time) ([]types.CodyAggregatedEvent, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AggregatedCodyEvents method of the parent MockEventLogStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EventLogStoreAggregatedCodyEventsFunc) PushHook(hook func(context.Context, time.Time) ([]types.CodyAggregatedEvent, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreAggregatedCodyEventsFunc) SetDefaultReturn(r0 []types.CodyAggregatedEvent, r1 error) {
	f.SetDefaultHook(func(context.Context, time.Time) ([]types.CodyAggregatedEvent, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreAggregatedCodyEventsFunc) PushReturn(r0 []types.CodyAggregatedEvent, r1 error) {
	f.PushHook(func(context.Context, time.Time) ([]types.CodyAggregatedEvent, error) {
		return r0, r1
	})
}

func (f *EventLogStoreAggregatedCodyEventsFunc) nextHook() func(context.Context, time.Time) ([]types.CodyAggregatedEvent, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreAggregatedCodyEventsFunc) appendCall(r0 EventLogStoreAggregatedCodyEventsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreAggregatedCodyEventsFuncCall
// objects describing the invocations of this function.
func (f *EventLogStoreAggregatedCodyEventsFunc) History() []EventLogStoreAggregatedCodyEventsFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreAggregatedCodyEventsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreAggregatedCodyEventsFuncCall is an object that describes an
// invocation of method AggregatedCodyEvents on an instance of
// MockEventLogStore.
type EventLogStoreAggregatedCodyEventsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.CodyAggregatedEvent
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreAggregatedCodyEventsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreAggregatedCodyEventsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreAggregatedRepoMetadataEventsFunc describes the behavior when
// the AggregatedRepoMetadataEvents method of the parent MockEventLogStore
// instance is invoked.
type EventLogStoreAggregatedRepoMetadataEventsFunc struct {
	defaultHook func(context.Context, time.Time, PeriodType) (*types.RepoMetadataAggregatedEvents, error)
	hooks       []func(context.Context, time.Time, PeriodType) (*types.RepoMetadataAggregatedEvents, error)
	history     []EventLogStoreAggregatedRepoMetadataEventsFuncCall
	mutex       sync.Mutex
}

// AggregatedRepoMetadataEvents delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockEventLogStore) AggregatedRepoMetadataEvents(v0 context.Context, v1 time.Time, v2 PeriodType) (*types.RepoMetadataAggregatedEvents, error) {
	r0, r1 := m.AggregatedRepoMetadataEventsFunc.nextHook()(v0, v1, v2)
	m.AggregatedRepoMetadataEventsFunc.appendCall(EventLogStoreAggregatedRepoMetadataEventsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// AggregatedRepoMetadataEvents method of the parent MockEventLogStore
// instance is invoked and the hook queue is empty.
func (f *EventLogStoreAggregatedRepoMetadataEventsFunc) SetDefaultHook(hook func(context.Context, time.Time, PeriodType) (*types.RepoMetadataAggregatedEvents, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AggregatedRepoMetadataEvents method of the parent MockEventLogStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *EventLogStoreAggregatedRepoMetadataEventsFunc) PushHook(hook func(context.Context, time.Time, PeriodType) (*types.RepoMetadataAggregatedEvents, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreAggregatedRepoMetadataEventsFunc) SetDefaultReturn(r0 *types.RepoMetadataAggregatedEvents, r1 error) {
	f.SetDefaultHook(func(context.Context, time.Time, PeriodType) (*types.RepoMetadataAggregatedEvents, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreAggregatedRepoMetadataEventsFunc) PushReturn(r0 *types.RepoMetadataAggregatedEvents, r1 error) {
	f.PushHook(func(context.Context, time.Time, PeriodType) (*types.RepoMetadataAggregatedEvents, error) {
		return r0, r1
	})
}

func (f *EventLogStoreAggregatedRepoMetadataEventsFunc) nextHook() func(context.Context, time.Time, PeriodType) (*types.RepoMetadataAggregatedEvents, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreAggregatedRepoMetadataEventsFunc) appendCall(r0 EventLogStoreAggregatedRepoMetadataEventsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreAggregatedRepoMetadataEventsFuncCall objects describing the
// invocations of this function.
func (f *EventLogStoreAggregatedRepoMetadataEventsFunc) History() []EventLogStoreAggregatedRepoMetadataEventsFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreAggregatedRepoMetadataEventsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreAggregatedRepoMetadataEventsFuncCall is an object that
// describes an invocation of method AggregatedRepoMetadataEvents on an
// instance of MockEventLogStore.
type EventLogStoreAggregatedRepoMetadataEventsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Time
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 PeriodType
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.RepoMetadataAggregatedEvents
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreAggregatedRepoMetadataEventsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreAggregatedRepoMetadataEventsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreAggregatedSearchEventsFunc describes the behavior when the
// AggregatedSearchEvents method of the parent MockEventLogStore instance is
// invoked.
type EventLogStoreAggregatedSearchEventsFunc struct {
	defaultHook func(context.Context, time.Time) ([]types.SearchAggregatedEvent, error)
	hooks       []func(context.Context, time.Time) ([]types.SearchAggregatedEvent, error)
	history     []EventLogStoreAggregatedSearchEventsFuncCall
	mutex       sync.Mutex
}

// AggregatedSearchEvents delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockEventLogStore) AggregatedSearchEvents(v0 context.Context, v1 time.Time) ([]types.SearchAggregatedEvent, error) {
	r0, r1 := m.AggregatedSearchEventsFunc.nextHook()(v0, v1)
	m.AggregatedSearchEventsFunc.appendCall(EventLogStoreAggregatedSearchEventsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// AggregatedSearchEvents method of the parent MockEventLogStore instance is
// invoked and the hook queue is empty.
func (f *EventLogStoreAggregatedSearchEventsFunc) SetDefaultHook(hook func(context.Context, time.Time) ([]types.SearchAggregatedEvent, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AggregatedSearchEvents method of the parent MockEventLogStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EventLogStoreAggregatedSearchEventsFunc) PushHook(hook func(context.Context, time.Time) ([]types.SearchAggregatedEvent, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreAggregatedSearchEventsFunc) SetDefaultReturn(r0 []types.SearchAggregatedEvent, r1 error) {
	f.SetDefaultHook(func(context.Context, time.Time) ([]types.SearchAggregatedEvent, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreAggregatedSearchEventsFunc) PushReturn(r0 []types.SearchAggregatedEvent, r1 error) {
	f.PushHook(func(context.Context, time.Time) ([]types.SearchAggregatedEvent, error) {
		return r0, r1
	})
}

func (f *EventLogStoreAggregatedSearchEventsFunc) nextHook() func(context.Context, time.Time) ([]types.SearchAggregatedEvent, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreAggregatedSearchEventsFunc) appendCall(r0 EventLogStoreAggregatedSearchEventsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreAggregatedSearchEventsFuncCall
// objects describing the invocations of this function.
func (f *EventLogStoreAggregatedSearchEventsFunc) History() []EventLogStoreAggregatedSearchEventsFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreAggregatedSearchEventsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreAggregatedSearchEventsFuncCall is an object that describes
// an invocation of method AggregatedSearchEvents on an instance of
// MockEventLogStore.
type EventLogStoreAggregatedSearchEventsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.SearchAggregatedEvent
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreAggregatedSearchEventsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreAggregatedSearchEventsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreBulkInsertFunc describes the behavior when the BulkInsert
// method of the parent MockEventLogStore instance is invoked.
type EventLogStoreBulkInsertFunc struct {
	defaultHook func(context.Context, []*Event) error
	hooks       []func(context.Context, []*Event) error
	history     []EventLogStoreBulkInsertFuncCall
	mutex       sync.Mutex
}

// BulkInsert delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEventLogStore) BulkInsert(v0 context.Context, v1 []*Event) error {
	r0 := m.BulkInsertFunc.nextHook()(v0, v1)
	m.BulkInsertFunc.appendCall(EventLogStoreBulkInsertFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the BulkInsert method of
// the parent MockEventLogStore instance is invoked and the hook queue is
// empty.
func (f *EventLogStoreBulkInsertFunc) SetDefaultHook(hook func(context.Context, []*Event) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BulkInsert method of the parent MockEventLogStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EventLogStoreBulkInsertFunc) PushHook(hook func(context.Context, []*Event) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreBulkInsertFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []*Event) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreBulkInsertFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []*Event) error {
		return r0
	})
}

func (f *EventLogStoreBulkInsertFunc) nextHook() func(context.Context, []*Event) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreBulkInsertFunc) appendCall(r0 EventLogStoreBulkInsertFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreBulkInsertFuncCall objects
// describing the invocations of this function.
func (f *EventLogStoreBulkInsertFunc) History() []EventLogStoreBulkInsertFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreBulkInsertFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreBulkInsertFuncCall is an object that describes an invocation
// of method BulkInsert on an instance of MockEventLogStore.
type EventLogStoreBulkInsertFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []*Event
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreBulkInsertFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreBulkInsertFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EventLogStoreCodeIntelligenceCrossRepositoryWAUsFunc describes the
// behavior when the CodeIntelligenceCrossRepositoryWAUs method of the
// parent MockEventLogStore instance is invoked.
type EventLogStoreCodeIntelligenceCrossRepositoryWAUsFunc struct {
	defaultHook func(context.Context) (int, error)
	hooks       []func(context.Context) (int, error)
	history     []EventLogStoreCodeIntelligenceCrossRepositoryWAUsFuncCall
	mutex       sync.Mutex
}

// CodeIntelligenceCrossRepositoryWAUs delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockEventLogStore) CodeIntelligenceCrossRepositoryWAUs(v0 context.Context) (int, error) {
	r0, r1 := m.CodeIntelligenceCrossRepositoryWAUsFunc.nextHook()(v0)
	m.CodeIntelligenceCrossRepositoryWAUsFunc.appendCall(EventLogStoreCodeIntelligenceCrossRepositoryWAUsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CodeIntelligenceCrossRepositoryWAUs method of the parent
// MockEventLogStore instance is invoked and the hook queue is empty.
func (f *EventLogStoreCodeIntelligenceCrossRepositoryWAUsFunc) SetDefaultHook(hook func(context.Context) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CodeIntelligenceCrossRepositoryWAUs method of the parent
// MockEventLogStore instance invokes the hook at the front of the queue and
// discards it. After the queue is empty, the default hook function is
// invoked for any future action.
func (f *EventLogStoreCodeIntelligenceCrossRepositoryWAUsFunc) PushHook(hook func(context.Context) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCodeIntelligenceCrossRepositoryWAUsFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCodeIntelligenceCrossRepositoryWAUsFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCodeIntelligenceCrossRepositoryWAUsFunc) nextHook() func(context.Context) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCodeIntelligenceCrossRepositoryWAUsFunc) appendCall(r0 EventLogStoreCodeIntelligenceCrossRepositoryWAUsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreCodeIntelligenceCrossRepositoryWAUsFuncCall objects
// describing the invocations of this function.
func (f *EventLogStoreCodeIntelligenceCrossRepositoryWAUsFunc) History() []EventLogStoreCodeIntelligenceCrossRepositoryWAUsFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCodeIntelligenceCrossRepositoryWAUsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCodeIntelligenceCrossRepositoryWAUsFuncCall is an object
// that describes an invocation of method
// CodeIntelligenceCrossRepositoryWAUs on an instance of MockEventLogStore.
type EventLogStoreCodeIntelligenceCrossRepositoryWAUsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCodeIntelligenceCrossRepositoryWAUsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCodeIntelligenceCrossRepositoryWAUsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFunc describes the
// behavior when the CodeIntelligencePreciseCrossRepositoryWAUs method of
// the parent MockEventLogStore instance is invoked.
type EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFunc struct {
	defaultHook func(context.Context) (int, error)
	hooks       []func(context.Context) (int, error)
	history     []EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFuncCall
	mutex       sync.Mutex
}

// CodeIntelligencePreciseCrossRepositoryWAUs delegates to the next hook
// function in the queue and stores the parameter and result values of this
// invocation.
func (m *MockEventLogStore) CodeIntelligencePreciseCrossRepositoryWAUs(v0 context.Context) (int, error) {
	r0, r1 := m.CodeIntelligencePreciseCrossRepositoryWAUsFunc.nextHook()(v0)
	m.CodeIntelligencePreciseCrossRepositoryWAUsFunc.appendCall(EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CodeIntelligencePreciseCrossRepositoryWAUs method of the parent
// MockEventLogStore instance is invoked and the hook queue is empty.
func (f *EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFunc) SetDefaultHook(hook func(context.Context) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CodeIntelligencePreciseCrossRepositoryWAUs method of the parent
// MockEventLogStore instance invokes the hook at the front of the queue and
// discards it. After the queue is empty, the default hook function is
// invoked for any future action.
func (f *EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFunc) PushHook(hook func(context.Context) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFunc) nextHook() func(context.Context) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFunc) appendCall(r0 EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFuncCall objects
// describing the invocations of this function.
func (f *EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFunc) History() []EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFuncCall is an
// object that describes an invocation of method
// CodeIntelligencePreciseCrossRepositoryWAUs on an instance of
// MockEventLogStore.
type EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCodeIntelligencePreciseCrossRepositoryWAUsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreCodeIntelligencePreciseWAUsFunc describes the behavior when
// the CodeIntelligencePreciseWAUs method of the parent MockEventLogStore
// instance is invoked.
type EventLogStoreCodeIntelligencePreciseWAUsFunc struct {
	defaultHook func(context.Context) (int, error)
	hooks       []func(context.Context) (int, error)
	history     []EventLogStoreCodeIntelligencePreciseWAUsFuncCall
	mutex       sync.Mutex
}

// CodeIntelligencePreciseWAUs delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockEventLogStore) CodeIntelligencePreciseWAUs(v0 context.Context) (int, error) {
	r0, r1 := m.CodeIntelligencePreciseWAUsFunc.nextHook()(v0)
	m.CodeIntelligencePreciseWAUsFunc.appendCall(EventLogStoreCodeIntelligencePreciseWAUsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CodeIntelligencePreciseWAUs method of the parent MockEventLogStore
// instance is invoked and the hook queue is empty.
func (f *EventLogStoreCodeIntelligencePreciseWAUsFunc) SetDefaultHook(hook func(context.Context) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CodeIntelligencePreciseWAUs method of the parent MockEventLogStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *EventLogStoreCodeIntelligencePreciseWAUsFunc) PushHook(hook func(context.Context) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCodeIntelligencePreciseWAUsFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCodeIntelligencePreciseWAUsFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCodeIntelligencePreciseWAUsFunc) nextHook() func(context.Context) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCodeIntelligencePreciseWAUsFunc) appendCall(r0 EventLogStoreCodeIntelligencePreciseWAUsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreCodeIntelligencePreciseWAUsFuncCall objects describing the
// invocations of this function.
func (f *EventLogStoreCodeIntelligencePreciseWAUsFunc) History() []EventLogStoreCodeIntelligencePreciseWAUsFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCodeIntelligencePreciseWAUsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCodeIntelligencePreciseWAUsFuncCall is an object that
// describes an invocation of method CodeIntelligencePreciseWAUs on an
// instance of MockEventLogStore.
type EventLogStoreCodeIntelligencePreciseWAUsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCodeIntelligencePreciseWAUsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCodeIntelligencePreciseWAUsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreCodeIntelligenceRepositoryCountsFunc describes the behavior
// when the CodeIntelligenceRepositoryCounts method of the parent
// MockEventLogStore instance is invoked.
type EventLogStoreCodeIntelligenceRepositoryCountsFunc struct {
	defaultHook func(context.Context) (CodeIntelligenceRepositoryCounts, error)
	hooks       []func(context.Context) (CodeIntelligenceRepositoryCounts, error)
	history     []EventLogStoreCodeIntelligenceRepositoryCountsFuncCall
	mutex       sync.Mutex
}

// CodeIntelligenceRepositoryCounts delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockEventLogStore) CodeIntelligenceRepositoryCounts(v0 context.Context) (CodeIntelligenceRepositoryCounts, error) {
	r0, r1 := m.CodeIntelligenceRepositoryCountsFunc.nextHook()(v0)
	m.CodeIntelligenceRepositoryCountsFunc.appendCall(EventLogStoreCodeIntelligenceRepositoryCountsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CodeIntelligenceRepositoryCounts method of the parent MockEventLogStore
// instance is invoked and the hook queue is empty.
func (f *EventLogStoreCodeIntelligenceRepositoryCountsFunc) SetDefaultHook(hook func(context.Context) (CodeIntelligenceRepositoryCounts, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CodeIntelligenceRepositoryCounts method of the parent MockEventLogStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *EventLogStoreCodeIntelligenceRepositoryCountsFunc) PushHook(hook func(context.Context) (CodeIntelligenceRepositoryCounts, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCodeIntelligenceRepositoryCountsFunc) SetDefaultReturn(r0 CodeIntelligenceRepositoryCounts, r1 error) {
	f.SetDefaultHook(func(context.Context) (CodeIntelligenceRepositoryCounts, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCodeIntelligenceRepositoryCountsFunc) PushReturn(r0 CodeIntelligenceRepositoryCounts, r1 error) {
	f.PushHook(func(context.Context) (CodeIntelligenceRepositoryCounts, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCodeIntelligenceRepositoryCountsFunc) nextHook() func(context.Context) (CodeIntelligenceRepositoryCounts, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCodeIntelligenceRepositoryCountsFunc) appendCall(r0 EventLogStoreCodeIntelligenceRepositoryCountsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreCodeIntelligenceRepositoryCountsFuncCall objects describing
// the invocations of this function.
func (f *EventLogStoreCodeIntelligenceRepositoryCountsFunc) History() []EventLogStoreCodeIntelligenceRepositoryCountsFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCodeIntelligenceRepositoryCountsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCodeIntelligenceRepositoryCountsFuncCall is an object that
// describes an invocation of method CodeIntelligenceRepositoryCounts on an
// instance of MockEventLogStore.
type EventLogStoreCodeIntelligenceRepositoryCountsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 CodeIntelligenceRepositoryCounts
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCodeIntelligenceRepositoryCountsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCodeIntelligenceRepositoryCountsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFunc describes the
// behavior when the CodeIntelligenceRepositoryCountsByLanguage method of
// the parent MockEventLogStore instance is invoked.
type EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFunc struct {
	defaultHook func(context.Context) (map[string]CodeIntelligenceRepositoryCountsForLanguage, error)
	hooks       []func(context.Context) (map[string]CodeIntelligenceRepositoryCountsForLanguage, error)
	history     []EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFuncCall
	mutex       sync.Mutex
}

// CodeIntelligenceRepositoryCountsByLanguage delegates to the next hook
// function in the queue and stores the parameter and result values of this
// invocation.
func (m *MockEventLogStore) CodeIntelligenceRepositoryCountsByLanguage(v0 context.Context) (map[string]CodeIntelligenceRepositoryCountsForLanguage, error) {
	r0, r1 := m.CodeIntelligenceRepositoryCountsByLanguageFunc.nextHook()(v0)
	m.CodeIntelligenceRepositoryCountsByLanguageFunc.appendCall(EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CodeIntelligenceRepositoryCountsByLanguage method of the parent
// MockEventLogStore instance is invoked and the hook queue is empty.
func (f *EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFunc) SetDefaultHook(hook func(context.Context) (map[string]CodeIntelligenceRepositoryCountsForLanguage, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CodeIntelligenceRepositoryCountsByLanguage method of the parent
// MockEventLogStore instance invokes the hook at the front of the queue and
// discards it. After the queue is empty, the default hook function is
// invoked for any future action.
func (f *EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFunc) PushHook(hook func(context.Context) (map[string]CodeIntelligenceRepositoryCountsForLanguage, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFunc) SetDefaultReturn(r0 map[string]CodeIntelligenceRepositoryCountsForLanguage, r1 error) {
	f.SetDefaultHook(func(context.Context) (map[string]CodeIntelligenceRepositoryCountsForLanguage, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFunc) PushReturn(r0 map[string]CodeIntelligenceRepositoryCountsForLanguage, r1 error) {
	f.PushHook(func(context.Context) (map[string]CodeIntelligenceRepositoryCountsForLanguage, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFunc) nextHook() func(context.Context) (map[string]CodeIntelligenceRepositoryCountsForLanguage, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFunc) appendCall(r0 EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFuncCall objects
// describing the invocations of this function.
func (f *EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFunc) History() []EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFuncCall is an
// object that describes an invocation of method
// CodeIntelligenceRepositoryCountsByLanguage on an instance of
// MockEventLogStore.
type EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[string]CodeIntelligenceRepositoryCountsForLanguage
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCodeIntelligenceRepositoryCountsByLanguageFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFunc describes
// the behavior when the CodeIntelligenceSearchBasedCrossRepositoryWAUs
// method of the parent MockEventLogStore instance is invoked.
type EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFunc struct {
	defaultHook func(context.Context) (int, error)
	hooks       []func(context.Context) (int, error)
	history     []EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFuncCall
	mutex       sync.Mutex
}

// CodeIntelligenceSearchBasedCrossRepositoryWAUs delegates to the next hook
// function in the queue and stores the parameter and result values of this
// invocation.
func (m *MockEventLogStore) CodeIntelligenceSearchBasedCrossRepositoryWAUs(v0 context.Context) (int, error) {
	r0, r1 := m.CodeIntelligenceSearchBasedCrossRepositoryWAUsFunc.nextHook()(v0)
	m.CodeIntelligenceSearchBasedCrossRepositoryWAUsFunc.appendCall(EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CodeIntelligenceSearchBasedCrossRepositoryWAUs method of the parent
// MockEventLogStore instance is invoked and the hook queue is empty.
func (f *EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFunc) SetDefaultHook(hook func(context.Context) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CodeIntelligenceSearchBasedCrossRepositoryWAUs method of the parent
// MockEventLogStore instance invokes the hook at the front of the queue and
// discards it. After the queue is empty, the default hook function is
// invoked for any future action.
func (f *EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFunc) PushHook(hook func(context.Context) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFunc) nextHook() func(context.Context) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFunc) appendCall(r0 EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFuncCall
// objects describing the invocations of this function.
func (f *EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFunc) History() []EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFuncCall is an
// object that describes an invocation of method
// CodeIntelligenceSearchBasedCrossRepositoryWAUs on an instance of
// MockEventLogStore.
type EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCodeIntelligenceSearchBasedCrossRepositoryWAUsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreCodeIntelligenceSearchBasedWAUsFunc describes the behavior
// when the CodeIntelligenceSearchBasedWAUs method of the parent
// MockEventLogStore instance is invoked.
type EventLogStoreCodeIntelligenceSearchBasedWAUsFunc struct {
	defaultHook func(context.Context) (int, error)
	hooks       []func(context.Context) (int, error)
	history     []EventLogStoreCodeIntelligenceSearchBasedWAUsFuncCall
	mutex       sync.Mutex
}

// CodeIntelligenceSearchBasedWAUs delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockEventLogStore) CodeIntelligenceSearchBasedWAUs(v0 context.Context) (int, error) {
	r0, r1 := m.CodeIntelligenceSearchBasedWAUsFunc.nextHook()(v0)
	m.CodeIntelligenceSearchBasedWAUsFunc.appendCall(EventLogStoreCodeIntelligenceSearchBasedWAUsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CodeIntelligenceSearchBasedWAUs method of the parent MockEventLogStore
// instance is invoked and the hook queue is empty.
func (f *EventLogStoreCodeIntelligenceSearchBasedWAUsFunc) SetDefaultHook(hook func(context.Context) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CodeIntelligenceSearchBasedWAUs method of the parent MockEventLogStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *EventLogStoreCodeIntelligenceSearchBasedWAUsFunc) PushHook(hook func(context.Context) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCodeIntelligenceSearchBasedWAUsFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCodeIntelligenceSearchBasedWAUsFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCodeIntelligenceSearchBasedWAUsFunc) nextHook() func(context.Context) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCodeIntelligenceSearchBasedWAUsFunc) appendCall(r0 EventLogStoreCodeIntelligenceSearchBasedWAUsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreCodeIntelligenceSearchBasedWAUsFuncCall objects describing
// the invocations of this function.
func (f *EventLogStoreCodeIntelligenceSearchBasedWAUsFunc) History() []EventLogStoreCodeIntelligenceSearchBasedWAUsFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCodeIntelligenceSearchBasedWAUsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCodeIntelligenceSearchBasedWAUsFuncCall is an object that
// describes an invocation of method CodeIntelligenceSearchBasedWAUs on an
// instance of MockEventLogStore.
type EventLogStoreCodeIntelligenceSearchBasedWAUsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCodeIntelligenceSearchBasedWAUsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCodeIntelligenceSearchBasedWAUsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreCodeIntelligenceSettingsPageViewCountFunc describes the
// behavior when the CodeIntelligenceSettingsPageViewCount method of the
// parent MockEventLogStore instance is invoked.
type EventLogStoreCodeIntelligenceSettingsPageViewCountFunc struct {
	defaultHook func(context.Context) (int, error)
	hooks       []func(context.Context) (int, error)
	history     []EventLogStoreCodeIntelligenceSettingsPageViewCountFuncCall
	mutex       sync.Mutex
}

// CodeIntelligenceSettingsPageViewCount delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockEventLogStore) CodeIntelligenceSettingsPageViewCount(v0 context.Context) (int, error) {
	r0, r1 := m.CodeIntelligenceSettingsPageViewCountFunc.nextHook()(v0)
	m.CodeIntelligenceSettingsPageViewCountFunc.appendCall(EventLogStoreCodeIntelligenceSettingsPageViewCountFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CodeIntelligenceSettingsPageViewCount method of the parent
// MockEventLogStore instance is invoked and the hook queue is empty.
func (f *EventLogStoreCodeIntelligenceSettingsPageViewCountFunc) SetDefaultHook(hook func(context.Context) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CodeIntelligenceSettingsPageViewCount method of the parent
// MockEventLogStore instance invokes the hook at the front of the queue and
// discards it. After the queue is empty, the default hook function is
// invoked for any future action.
func (f *EventLogStoreCodeIntelligenceSettingsPageViewCountFunc) PushHook(hook func(context.Context) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCodeIntelligenceSettingsPageViewCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCodeIntelligenceSettingsPageViewCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCodeIntelligenceSettingsPageViewCountFunc) nextHook() func(context.Context) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCodeIntelligenceSettingsPageViewCountFunc) appendCall(r0 EventLogStoreCodeIntelligenceSettingsPageViewCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreCodeIntelligenceSettingsPageViewCountFuncCall objects
// describing the invocations of this function.
func (f *EventLogStoreCodeIntelligenceSettingsPageViewCountFunc) History() []EventLogStoreCodeIntelligenceSettingsPageViewCountFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCodeIntelligenceSettingsPageViewCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCodeIntelligenceSettingsPageViewCountFuncCall is an object
// that describes an invocation of method
// CodeIntelligenceSettingsPageViewCount on an instance of
// MockEventLogStore.
type EventLogStoreCodeIntelligenceSettingsPageViewCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCodeIntelligenceSettingsPageViewCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCodeIntelligenceSettingsPageViewCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreCodeIntelligenceWAUsFunc describes the behavior when the
// CodeIntelligenceWAUs method of the parent MockEventLogStore instance is
// invoked.
type EventLogStoreCodeIntelligenceWAUsFunc struct {
	defaultHook func(context.Context) (int, error)
	hooks       []func(context.Context) (int, error)
	history     []EventLogStoreCodeIntelligenceWAUsFuncCall
	mutex       sync.Mutex
}

// CodeIntelligenceWAUs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEventLogStore) CodeIntelligenceWAUs(v0 context.Context) (int, error) {
	r0, r1 := m.CodeIntelligenceWAUsFunc.nextHook()(v0)
	m.CodeIntelligenceWAUsFunc.appendCall(EventLogStoreCodeIntelligenceWAUsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CodeIntelligenceWAUs
// method of the parent MockEventLogStore instance is invoked and the hook
// queue is empty.
func (f *EventLogStoreCodeIntelligenceWAUsFunc) SetDefaultHook(hook func(context.Context) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CodeIntelligenceWAUs method of the parent MockEventLogStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EventLogStoreCodeIntelligenceWAUsFunc) PushHook(hook func(context.Context) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCodeIntelligenceWAUsFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCodeIntelligenceWAUsFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCodeIntelligenceWAUsFunc) nextHook() func(context.Context) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCodeIntelligenceWAUsFunc) appendCall(r0 EventLogStoreCodeIntelligenceWAUsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreCodeIntelligenceWAUsFuncCall
// objects describing the invocations of this function.
func (f *EventLogStoreCodeIntelligenceWAUsFunc) History() []EventLogStoreCodeIntelligenceWAUsFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCodeIntelligenceWAUsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCodeIntelligenceWAUsFuncCall is an object that describes an
// invocation of method CodeIntelligenceWAUs on an instance of
// MockEventLogStore.
type EventLogStoreCodeIntelligenceWAUsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCodeIntelligenceWAUsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCodeIntelligenceWAUsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreCountByUserIDFunc describes the behavior when the
// CountByUserID method of the parent MockEventLogStore instance is invoked.
type EventLogStoreCountByUserIDFunc struct {
	defaultHook func(context.Context, int32) (int, error)
	hooks       []func(context.Context, int32) (int, error)
	history     []EventLogStoreCountByUserIDFuncCall
	mutex       sync.Mutex
}

// CountByUserID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEventLogStore) CountByUserID(v0 context.Context, v1 int32) (int, error) {
	r0, r1 := m.CountByUserIDFunc.nextHook()(v0, v1)
	m.CountByUserIDFunc.appendCall(EventLogStoreCountByUserIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CountByUserID method
// of the parent MockEventLogStore instance is invoked and the hook queue is
// empty.
func (f *EventLogStoreCountByUserIDFunc) SetDefaultHook(hook func(context.Context, int32) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountByUserID method of the parent MockEventLogStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EventLogStoreCountByUserIDFunc) PushHook(hook func(context.Context, int32) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCountByUserIDFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCountByUserIDFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, int32) (int, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCountByUserIDFunc) nextHook() func(context.Context, int32) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCountByUserIDFunc) appendCall(r0 EventLogStoreCountByUserIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreCountByUserIDFuncCall objects
// describing the invocations of this function.
func (f *EventLogStoreCountByUserIDFunc) History() []EventLogStoreCountByUserIDFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCountByUserIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCountByUserIDFuncCall is an object that describes an
// invocation of method CountByUserID on an instance of MockEventLogStore.
type EventLogStoreCountByUserIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCountByUserIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCountByUserIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreCountByUserIDAndEventNameFunc describes the behavior when
// the CountByUserIDAndEventName method of the parent MockEventLogStore
// instance is invoked.
type EventLogStoreCountByUserIDAndEventNameFunc struct {
	defaultHook func(context.Context, int32, string) (int, error)
	hooks       []func(context.Context, int32, string) (int, error)
	history     []EventLogStoreCountByUserIDAndEventNameFuncCall
	mutex       sync.Mutex
}

// CountByUserIDAndEventName delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockEventLogStore) CountByUserIDAndEventName(v0 context.Context, v1 int32, v2 string) (int, error) {
	r0, r1 := m.CountByUserIDAndEventNameFunc.nextHook()(v0, v1, v2)
	m.CountByUserIDAndEventNameFunc.appendCall(EventLogStoreCountByUserIDAndEventNameFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CountByUserIDAndEventName method of the parent MockEventLogStore instance
// is invoked and the hook queue is empty.
func (f *EventLogStoreCountByUserIDAndEventNameFunc) SetDefaultHook(hook func(context.Context, int32, string) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountByUserIDAndEventName method of the parent MockEventLogStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EventLogStoreCountByUserIDAndEventNameFunc) PushHook(hook func(context.Context, int32, string) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCountByUserIDAndEventNameFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, string) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCountByUserIDAndEventNameFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, int32, string) (int, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCountByUserIDAndEventNameFunc) nextHook() func(context.Context, int32, string) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCountByUserIDAndEventNameFunc) appendCall(r0 EventLogStoreCountByUserIDAndEventNameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreCountByUserIDAndEventNameFuncCall objects describing the
// invocations of this function.
func (f *EventLogStoreCountByUserIDAndEventNameFunc) History() []EventLogStoreCountByUserIDAndEventNameFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCountByUserIDAndEventNameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCountByUserIDAndEventNameFuncCall is an object that
// describes an invocation of method CountByUserIDAndEventName on an
// instance of MockEventLogStore.
type EventLogStoreCountByUserIDAndEventNameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCountByUserIDAndEventNameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCountByUserIDAndEventNameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreCountByUserIDAndEventNamePrefixFunc describes the behavior
// when the CountByUserIDAndEventNamePrefix method of the parent
// MockEventLogStore instance is invoked.
type EventLogStoreCountByUserIDAndEventNamePrefixFunc struct {
	defaultHook func(context.Context, int32, string) (int, error)
	hooks       []func(context.Context, int32, string) (int, error)
	history     []EventLogStoreCountByUserIDAndEventNamePrefixFuncCall
	mutex       sync.Mutex
}

// CountByUserIDAndEventNamePrefix delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockEventLogStore) CountByUserIDAndEventNamePrefix(v0 context.Context, v1 int32, v2 string) (int, error) {
	r0, r1 := m.CountByUserIDAndEventNamePrefixFunc.nextHook()(v0, v1, v2)
	m.CountByUserIDAndEventNamePrefixFunc.appendCall(EventLogStoreCountByUserIDAndEventNamePrefixFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CountByUserIDAndEventNamePrefix method of the parent MockEventLogStore
// instance is invoked and the hook queue is empty.
func (f *EventLogStoreCountByUserIDAndEventNamePrefixFunc) SetDefaultHook(hook func(context.Context, int32, string) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountByUserIDAndEventNamePrefix method of the parent MockEventLogStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *EventLogStoreCountByUserIDAndEventNamePrefixFunc) PushHook(hook func(context.Context, int32, string) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCountByUserIDAndEventNamePrefixFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, string) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCountByUserIDAndEventNamePrefixFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, int32, string) (int, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCountByUserIDAndEventNamePrefixFunc) nextHook() func(context.Context, int32, string) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCountByUserIDAndEventNamePrefixFunc) appendCall(r0 EventLogStoreCountByUserIDAndEventNamePrefixFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreCountByUserIDAndEventNamePrefixFuncCall objects describing
// the invocations of this function.
func (f *EventLogStoreCountByUserIDAndEventNamePrefixFunc) History() []EventLogStoreCountByUserIDAndEventNamePrefixFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCountByUserIDAndEventNamePrefixFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCountByUserIDAndEventNamePrefixFuncCall is an object that
// describes an invocation of method CountByUserIDAndEventNamePrefix on an
// instance of MockEventLogStore.
type EventLogStoreCountByUserIDAndEventNamePrefixFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCountByUserIDAndEventNamePrefixFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCountByUserIDAndEventNamePrefixFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreCountByUserIDAndEventNamesFunc describes the behavior when
// the CountByUserIDAndEventNames method of the parent MockEventLogStore
// instance is invoked.
type EventLogStoreCountByUserIDAndEventNamesFunc struct {
	defaultHook func(context.Context, int32, []string) (int, error)
	hooks       []func(context.Context, int32, []string) (int, error)
	history     []EventLogStoreCountByUserIDAndEventNamesFuncCall
	mutex       sync.Mutex
}

// CountByUserIDAndEventNames delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockEventLogStore) CountByUserIDAndEventNames(v0 context.Context, v1 int32, v2 []string) (int, error) {
	r0, r1 := m.CountByUserIDAndEventNamesFunc.nextHook()(v0, v1, v2)
	m.CountByUserIDAndEventNamesFunc.appendCall(EventLogStoreCountByUserIDAndEventNamesFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CountByUserIDAndEventNames method of the parent MockEventLogStore
// instance is invoked and the hook queue is empty.
func (f *EventLogStoreCountByUserIDAndEventNamesFunc) SetDefaultHook(hook func(context.Context, int32, []string) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountByUserIDAndEventNames method of the parent MockEventLogStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *EventLogStoreCountByUserIDAndEventNamesFunc) PushHook(hook func(context.Context, int32, []string) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCountByUserIDAndEventNamesFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, []string) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCountByUserIDAndEventNamesFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, int32, []string) (int, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCountByUserIDAndEventNamesFunc) nextHook() func(context.Context, int32, []string) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCountByUserIDAndEventNamesFunc) appendCall(r0 EventLogStoreCountByUserIDAndEventNamesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreCountByUserIDAndEventNamesFuncCall objects describing the
// invocations of this function.
func (f *EventLogStoreCountByUserIDAndEventNamesFunc) History() []EventLogStoreCountByUserIDAndEventNamesFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCountByUserIDAndEventNamesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCountByUserIDAndEventNamesFuncCall is an object that
// describes an invocation of method CountByUserIDAndEventNames on an
// instance of MockEventLogStore.
type EventLogStoreCountByUserIDAndEventNamesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCountByUserIDAndEventNamesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCountByUserIDAndEventNamesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreCountUniqueUsersAllFunc describes the behavior when the
// CountUniqueUsersAll method of the parent MockEventLogStore instance is
// invoked.
type EventLogStoreCountUniqueUsersAllFunc struct {
	defaultHook func(context.Context, time.Time, time.Time, *CountUniqueUsersOptions) (int, error)
	hooks       []func(context.Context, time.Time, time.Time, *CountUniqueUsersOptions) (int, error)
	history     []EventLogStoreCountUniqueUsersAllFuncCall
	mutex       sync.Mutex
}

// CountUniqueUsersAll delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEventLogStore) CountUniqueUsersAll(v0 context.Context, v1 time.Time, v2 time.Time, v3 *CountUniqueUsersOptions) (int, error) {
	r0, r1 := m.CountUniqueUsersAllFunc.nextHook()(v0, v1, v2, v3)
	m.CountUniqueUsersAllFunc.appendCall(EventLogStoreCountUniqueUsersAllFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CountUniqueUsersAll
// method of the parent MockEventLogStore instance is invoked and the hook
// queue is empty.
func (f *EventLogStoreCountUniqueUsersAllFunc) SetDefaultHook(hook func(context.Context, time.Time, time.Time, *CountUniqueUsersOptions) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountUniqueUsersAll method of the parent MockEventLogStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EventLogStoreCountUniqueUsersAllFunc) PushHook(hook func(context.Context, time.Time, time.Time, *CountUniqueUsersOptions) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCountUniqueUsersAllFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, time.Time, time.Time, *CountUniqueUsersOptions) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCountUniqueUsersAllFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, time.Time, time.Time, *CountUniqueUsersOptions) (int, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCountUniqueUsersAllFunc) nextHook() func(context.Context, time.Time, time.Time, *CountUniqueUsersOptions) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCountUniqueUsersAllFunc) appendCall(r0 EventLogStoreCountUniqueUsersAllFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreCountUniqueUsersAllFuncCall
// objects describing the invocations of this function.
func (f *EventLogStoreCountUniqueUsersAllFunc) History() []EventLogStoreCountUniqueUsersAllFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCountUniqueUsersAllFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCountUniqueUsersAllFuncCall is an object that describes an
// invocation of method CountUniqueUsersAll on an instance of
// MockEventLogStore.
type EventLogStoreCountUniqueUsersAllFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Time
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Time
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *CountUniqueUsersOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCountUniqueUsersAllFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCountUniqueUsersAllFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreCountUniqueUsersByEventNameFunc describes the behavior when
// the CountUniqueUsersByEventName method of the parent MockEventLogStore
// instance is invoked.
type EventLogStoreCountUniqueUsersByEventNameFunc struct {
	defaultHook func(context.Context, time.Time, time.Time, string) (int, error)
	hooks       []func(context.Context, time.Time, time.Time, string) (int, error)
	history     []EventLogStoreCountUniqueUsersByEventNameFuncCall
	mutex       sync.Mutex
}

// CountUniqueUsersByEventName delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockEventLogStore) CountUniqueUsersByEventName(v0 context.Context, v1 time.Time, v2 time.Time, v3 string) (int, error) {
	r0, r1 := m.CountUniqueUsersByEventNameFunc.nextHook()(v0, v1, v2, v3)
	m.CountUniqueUsersByEventNameFunc.appendCall(EventLogStoreCountUniqueUsersByEventNameFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CountUniqueUsersByEventName method of the parent MockEventLogStore
// instance is invoked and the hook queue is empty.
func (f *EventLogStoreCountUniqueUsersByEventNameFunc) SetDefaultHook(hook func(context.Context, time.Time, time.Time, string) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountUniqueUsersByEventName method of the parent MockEventLogStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *EventLogStoreCountUniqueUsersByEventNameFunc) PushHook(hook func(context.Context, time.Time, time.Time, string) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCountUniqueUsersByEventNameFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, time.Time, time.Time, string) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCountUniqueUsersByEventNameFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, time.Time, time.Time, string) (int, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCountUniqueUsersByEventNameFunc) nextHook() func(context.Context, time.Time, time.Time, string) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCountUniqueUsersByEventNameFunc) appendCall(r0 EventLogStoreCountUniqueUsersByEventNameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreCountUniqueUsersByEventNameFuncCall objects describing the
// invocations of this function.
func (f *EventLogStoreCountUniqueUsersByEventNameFunc) History() []EventLogStoreCountUniqueUsersByEventNameFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCountUniqueUsersByEventNameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCountUniqueUsersByEventNameFuncCall is an object that
// describes an invocation of method CountUniqueUsersByEventName on an
// instance of MockEventLogStore.
type EventLogStoreCountUniqueUsersByEventNameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Time
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Time
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCountUniqueUsersByEventNameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCountUniqueUsersByEventNameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreCountUniqueUsersByEventNamePrefixFunc describes the behavior
// when the CountUniqueUsersByEventNamePrefix method of the parent
// MockEventLogStore instance is invoked.
type EventLogStoreCountUniqueUsersByEventNamePrefixFunc struct {
	defaultHook func(context.Context, time.Time, time.Time, string) (int, error)
	hooks       []func(context.Context, time.Time, time.Time, string) (int, error)
	history     []EventLogStoreCountUniqueUsersByEventNamePrefixFuncCall
	mutex       sync.Mutex
}

// CountUniqueUsersByEventNamePrefix delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockEventLogStore) CountUniqueUsersByEventNamePrefix(v0 context.Context, v1 time.Time, v2 time.Time, v3 string) (int, error) {
	r0, r1 := m.CountUniqueUsersByEventNamePrefixFunc.nextHook()(v0, v1, v2, v3)
	m.CountUniqueUsersByEventNamePrefixFunc.appendCall(EventLogStoreCountUniqueUsersByEventNamePrefixFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CountUniqueUsersByEventNamePrefix method of the parent MockEventLogStore
// instance is invoked and the hook queue is empty.
func (f *EventLogStoreCountUniqueUsersByEventNamePrefixFunc) SetDefaultHook(hook func(context.Context, time.Time, time.Time, string) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountUniqueUsersByEventNamePrefix method of the parent MockEventLogStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *EventLogStoreCountUniqueUsersByEventNamePrefixFunc) PushHook(hook func(context.Context, time.Time, time.Time, string) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCountUniqueUsersByEventNamePrefixFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, time.Time, time.Time, string) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCountUniqueUsersByEventNamePrefixFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, time.Time, time.Time, string) (int, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCountUniqueUsersByEventNamePrefixFunc) nextHook() func(context.Context, time.Time, time.Time, string) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCountUniqueUsersByEventNamePrefixFunc) appendCall(r0 EventLogStoreCountUniqueUsersByEventNamePrefixFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreCountUniqueUsersByEventNamePrefixFuncCall objects describing
// the invocations of this function.
func (f *EventLogStoreCountUniqueUsersByEventNamePrefixFunc) History() []EventLogStoreCountUniqueUsersByEventNamePrefixFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCountUniqueUsersByEventNamePrefixFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCountUniqueUsersByEventNamePrefixFuncCall is an object that
// describes an invocation of method CountUniqueUsersByEventNamePrefix on an
// instance of MockEventLogStore.
type EventLogStoreCountUniqueUsersByEventNamePrefixFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Time
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Time
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCountUniqueUsersByEventNamePrefixFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCountUniqueUsersByEventNamePrefixFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreCountUniqueUsersByEventNamesFunc describes the behavior when
// the CountUniqueUsersByEventNames method of the parent MockEventLogStore
// instance is invoked.
type EventLogStoreCountUniqueUsersByEventNamesFunc struct {
	defaultHook func(context.Context, time.Time, time.Time, []string) (int, error)
	hooks       []func(context.Context, time.Time, time.Time, []string) (int, error)
	history     []EventLogStoreCountUniqueUsersByEventNamesFuncCall
	mutex       sync.Mutex
}

// CountUniqueUsersByEventNames delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockEventLogStore) CountUniqueUsersByEventNames(v0 context.Context, v1 time.Time, v2 time.Time, v3 []string) (int, error) {
	r0, r1 := m.CountUniqueUsersByEventNamesFunc.nextHook()(v0, v1, v2, v3)
	m.CountUniqueUsersByEventNamesFunc.appendCall(EventLogStoreCountUniqueUsersByEventNamesFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CountUniqueUsersByEventNames method of the parent MockEventLogStore
// instance is invoked and the hook queue is empty.
func (f *EventLogStoreCountUniqueUsersByEventNamesFunc) SetDefaultHook(hook func(context.Context, time.Time, time.Time, []string) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountUniqueUsersByEventNames method of the parent MockEventLogStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *EventLogStoreCountUniqueUsersByEventNamesFunc) PushHook(hook func(context.Context, time.Time, time.Time, []string) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCountUniqueUsersByEventNamesFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, time.Time, time.Time, []string) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCountUniqueUsersByEventNamesFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, time.Time, time.Time, []string) (int, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCountUniqueUsersByEventNamesFunc) nextHook() func(context.Context, time.Time, time.Time, []string) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCountUniqueUsersByEventNamesFunc) appendCall(r0 EventLogStoreCountUniqueUsersByEventNamesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreCountUniqueUsersByEventNamesFuncCall objects describing the
// invocations of this function.
func (f *EventLogStoreCountUniqueUsersByEventNamesFunc) History() []EventLogStoreCountUniqueUsersByEventNamesFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCountUniqueUsersByEventNamesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCountUniqueUsersByEventNamesFuncCall is an object that
// describes an invocation of method CountUniqueUsersByEventNames on an
// instance of MockEventLogStore.
type EventLogStoreCountUniqueUsersByEventNamesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Time
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Time
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCountUniqueUsersByEventNamesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCountUniqueUsersByEventNamesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreCountUsersWithSettingFunc describes the behavior when the
// CountUsersWithSetting method of the parent MockEventLogStore instance is
// invoked.
type EventLogStoreCountUsersWithSettingFunc struct {
	defaultHook func(context.Context, string, interface{}) (int, error)
	hooks       []func(context.Context, string, interface{}) (int, error)
	history     []EventLogStoreCountUsersWithSettingFuncCall
	mutex       sync.Mutex
}

// CountUsersWithSetting delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockEventLogStore) CountUsersWithSetting(v0 context.Context, v1 string, v2 interface{}) (int, error) {
	r0, r1 := m.CountUsersWithSettingFunc.nextHook()(v0, v1, v2)
	m.CountUsersWithSettingFunc.appendCall(EventLogStoreCountUsersWithSettingFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CountUsersWithSetting method of the parent MockEventLogStore instance is
// invoked and the hook queue is empty.
func (f *EventLogStoreCountUsersWithSettingFunc) SetDefaultHook(hook func(context.Context, string, interface{}) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountUsersWithSetting method of the parent MockEventLogStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EventLogStoreCountUsersWithSettingFunc) PushHook(hook func(context.Context, string, interface{}) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreCountUsersWithSettingFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, string, interface{}) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreCountUsersWithSettingFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, string, interface{}) (int, error) {
		return r0, r1
	})
}

func (f *EventLogStoreCountUsersWithSettingFunc) nextHook() func(context.Context, string, interface{}) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreCountUsersWithSettingFunc) appendCall(r0 EventLogStoreCountUsersWithSettingFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreCountUsersWithSettingFuncCall
// objects describing the invocations of this function.
func (f *EventLogStoreCountUsersWithSettingFunc) History() []EventLogStoreCountUsersWithSettingFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreCountUsersWithSettingFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreCountUsersWithSettingFuncCall is an object that describes an
// invocation of method CountUsersWithSetting on an instance of
// MockEventLogStore.
type EventLogStoreCountUsersWithSettingFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreCountUsersWithSettingFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreCountUsersWithSettingFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreHandleFunc describes the behavior when the Handle method of
// the parent MockEventLogStore instance is invoked.
type EventLogStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []EventLogStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEventLogStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(EventLogStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockEventLogStore instance is invoked and the hook queue is empty.
func (f *EventLogStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockEventLogStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EventLogStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *EventLogStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreHandleFunc) appendCall(r0 EventLogStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *EventLogStoreHandleFunc) History() []EventLogStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreHandleFuncCall is an object that describes an invocation of
// method Handle on an instance of MockEventLogStore.
type EventLogStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EventLogStoreInsertFunc describes the behavior when the Insert method of
// the parent MockEventLogStore instance is invoked.
type EventLogStoreInsertFunc struct {
	defaultHook func(context.Context, *Event) error
	hooks       []func(context.Context, *Event) error
	history     []EventLogStoreInsertFuncCall
	mutex       sync.Mutex
}

// Insert delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEventLogStore) Insert(v0 context.Context, v1 *Event) error {
	r0 := m.InsertFunc.nextHook()(v0, v1)
	m.InsertFunc.appendCall(EventLogStoreInsertFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Insert method of the
// parent MockEventLogStore instance is invoked and the hook queue is empty.
func (f *EventLogStoreInsertFunc) SetDefaultHook(hook func(context.Context, *Event) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Insert method of the parent MockEventLogStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EventLogStoreInsertFunc) PushHook(hook func(context.Context, *Event) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreInsertFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *Event) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreInsertFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *Event) error {
		return r0
	})
}

func (f *EventLogStoreInsertFunc) nextHook() func(context.Context, *Event) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreInsertFunc) appendCall(r0 EventLogStoreInsertFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreInsertFuncCall objects
// describing the invocations of this function.
func (f *EventLogStoreInsertFunc) History() []EventLogStoreInsertFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreInsertFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreInsertFuncCall is an object that describes an invocation of
// method Insert on an instance of MockEventLogStore.
type EventLogStoreInsertFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *Event
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreInsertFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreInsertFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EventLogStoreLatestPingFunc describes the behavior when the LatestPing
// method of the parent MockEventLogStore instance is invoked.
type EventLogStoreLatestPingFunc struct {
	defaultHook func(context.Context) (*Event, error)
	hooks       []func(context.Context) (*Event, error)
	history     []EventLogStoreLatestPingFuncCall
	mutex       sync.Mutex
}

// LatestPing delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEventLogStore) LatestPing(v0 context.Context) (*Event, error) {
	r0, r1 := m.LatestPingFunc.nextHook()(v0)
	m.LatestPingFunc.appendCall(EventLogStoreLatestPingFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the LatestPing method of
// the parent MockEventLogStore instance is invoked and the hook queue is
// empty.
func (f *EventLogStoreLatestPingFunc) SetDefaultHook(hook func(context.Context) (*Event, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LatestPing method of the parent MockEventLogStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EventLogStoreLatestPingFunc) PushHook(hook func(context.Context) (*Event, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreLatestPingFunc) SetDefaultReturn(r0 *Event, r1 error) {
	f.SetDefaultHook(func(context.Context) (*Event, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreLatestPingFunc) PushReturn(r0 *Event, r1 error) {
	f.PushHook(func(context.Context) (*Event, error) {
		return r0, r1
	})
}

func (f *EventLogStoreLatestPingFunc) nextHook() func(context.Context) (*Event, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreLatestPingFunc) appendCall(r0 EventLogStoreLatestPingFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreLatestPingFuncCall objects
// describing the invocations of this function.
func (f *EventLogStoreLatestPingFunc) History() []EventLogStoreLatestPingFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreLatestPingFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreLatestPingFuncCall is an object that describes an invocation
// of method LatestPing on an instance of MockEventLogStore.
type EventLogStoreLatestPingFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *Event
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreLatestPingFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreLatestPingFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreListAllFunc describes the behavior when the ListAll method
// of the parent MockEventLogStore instance is invoked.
type EventLogStoreListAllFunc struct {
	defaultHook func(context.Context, EventLogsListOptions) ([]*Event, error)
	hooks       []func(context.Context, EventLogsListOptions) ([]*Event, error)
	history     []EventLogStoreListAllFuncCall
	mutex       sync.Mutex
}

// ListAll delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEventLogStore) ListAll(v0 context.Context, v1 EventLogsListOptions) ([]*Event, error) {
	r0, r1 := m.ListAllFunc.nextHook()(v0, v1)
	m.ListAllFunc.appendCall(EventLogStoreListAllFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListAll method of
// the parent MockEventLogStore instance is invoked and the hook queue is
// empty.
func (f *EventLogStoreListAllFunc) SetDefaultHook(hook func(context.Context, EventLogsListOptions) ([]*Event, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListAll method of the parent MockEventLogStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EventLogStoreListAllFunc) PushHook(hook func(context.Context, EventLogsListOptions) ([]*Event, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreListAllFunc) SetDefaultReturn(r0 []*Event, r1 error) {
	f.SetDefaultHook(func(context.Context, EventLogsListOptions) ([]*Event, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreListAllFunc) PushReturn(r0 []*Event, r1 error) {
	f.PushHook(func(context.Context, EventLogsListOptions) ([]*Event, error) {
		return r0, r1
	})
}

func (f *EventLogStoreListAllFunc) nextHook() func(context.Context, EventLogsListOptions) ([]*Event, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreListAllFunc) appendCall(r0 EventLogStoreListAllFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreListAllFuncCall objects
// describing the invocations of this function.
func (f *EventLogStoreListAllFunc) History() []EventLogStoreListAllFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreListAllFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreListAllFuncCall is an object that describes an invocation of
// method ListAll on an instance of MockEventLogStore.
type EventLogStoreListAllFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 EventLogsListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*Event
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreListAllFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreListAllFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreListExportableEventsFunc describes the behavior when the
// ListExportableEvents method of the parent MockEventLogStore instance is
// invoked.
type EventLogStoreListExportableEventsFunc struct {
	defaultHook func(context.Context, int, int) ([]*Event, error)
	hooks       []func(context.Context, int, int) ([]*Event, error)
	history     []EventLogStoreListExportableEventsFuncCall
	mutex       sync.Mutex
}

// ListExportableEvents delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEventLogStore) ListExportableEvents(v0 context.Context, v1 int, v2 int) ([]*Event, error) {
	r0, r1 := m.ListExportableEventsFunc.nextHook()(v0, v1, v2)
	m.ListExportableEventsFunc.appendCall(EventLogStoreListExportableEventsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListExportableEvents
// method of the parent MockEventLogStore instance is invoked and the hook
// queue is empty.
func (f *EventLogStoreListExportableEventsFunc) SetDefaultHook(hook func(context.Context, int, int) ([]*Event, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListExportableEvents method of the parent MockEventLogStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EventLogStoreListExportableEventsFunc) PushHook(hook func(context.Context, int, int) ([]*Event, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreListExportableEventsFunc) SetDefaultReturn(r0 []*Event, r1 error) {
	f.SetDefaultHook(func(context.Context, int, int) ([]*Event, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreListExportableEventsFunc) PushReturn(r0 []*Event, r1 error) {
	f.PushHook(func(context.Context, int, int) ([]*Event, error) {
		return r0, r1
	})
}

func (f *EventLogStoreListExportableEventsFunc) nextHook() func(context.Context, int, int) ([]*Event, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreListExportableEventsFunc) appendCall(r0 EventLogStoreListExportableEventsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreListExportableEventsFuncCall
// objects describing the invocations of this function.
func (f *EventLogStoreListExportableEventsFunc) History() []EventLogStoreListExportableEventsFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreListExportableEventsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreListExportableEventsFuncCall is an object that describes an
// invocation of method ListExportableEvents on an instance of
// MockEventLogStore.
type EventLogStoreListExportableEventsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*Event
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreListExportableEventsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreListExportableEventsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreListUniqueUsersAllFunc describes the behavior when the
// ListUniqueUsersAll method of the parent MockEventLogStore instance is
// invoked.
type EventLogStoreListUniqueUsersAllFunc struct {
	defaultHook func(context.Context, time.Time, time.Time) ([]int32, error)
	hooks       []func(context.Context, time.Time, time.Time) ([]int32, error)
	history     []EventLogStoreListUniqueUsersAllFuncCall
	mutex       sync.Mutex
}

// ListUniqueUsersAll delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEventLogStore) ListUniqueUsersAll(v0 context.Context, v1 time.Time, v2 time.Time) ([]int32, error) {
	r0, r1 := m.ListUniqueUsersAllFunc.nextHook()(v0, v1, v2)
	m.ListUniqueUsersAllFunc.appendCall(EventLogStoreListUniqueUsersAllFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListUniqueUsersAll
// method of the parent MockEventLogStore instance is invoked and the hook
// queue is empty.
func (f *EventLogStoreListUniqueUsersAllFunc) SetDefaultHook(hook func(context.Context, time.Time, time.Time) ([]int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListUniqueUsersAll method of the parent MockEventLogStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EventLogStoreListUniqueUsersAllFunc) PushHook(hook func(context.Context, time.Time, time.Time) ([]int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreListUniqueUsersAllFunc) SetDefaultReturn(r0 []int32, r1 error) {
	f.SetDefaultHook(func(context.Context, time.Time, time.Time) ([]int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreListUniqueUsersAllFunc) PushReturn(r0 []int32, r1 error) {
	f.PushHook(func(context.Context, time.Time, time.Time) ([]int32, error) {
		return r0, r1
	})
}

func (f *EventLogStoreListUniqueUsersAllFunc) nextHook() func(context.Context, time.Time, time.Time) ([]int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreListUniqueUsersAllFunc) appendCall(r0 EventLogStoreListUniqueUsersAllFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreListUniqueUsersAllFuncCall
// objects describing the invocations of this function.
func (f *EventLogStoreListUniqueUsersAllFunc) History() []EventLogStoreListUniqueUsersAllFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreListUniqueUsersAllFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreListUniqueUsersAllFuncCall is an object that describes an
// invocation of method ListUniqueUsersAll on an instance of
// MockEventLogStore.
type EventLogStoreListUniqueUsersAllFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Time
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreListUniqueUsersAllFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreListUniqueUsersAllFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreMaxTimestampByUserIDFunc describes the behavior when the
// MaxTimestampByUserID method of the parent MockEventLogStore instance is
// invoked.
type EventLogStoreMaxTimestampByUserIDFunc struct {
	defaultHook func(context.Context, int32) (*time.Time, error)
	hooks       []func(context.Context, int32) (*time.Time, error)
	history     []EventLogStoreMaxTimestampByUserIDFuncCall
	mutex       sync.Mutex
}

// MaxTimestampByUserID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEventLogStore) MaxTimestampByUserID(v0 context.Context, v1 int32) (*time.Time, error) {
	r0, r1 := m.MaxTimestampByUserIDFunc.nextHook()(v0, v1)
	m.MaxTimestampByUserIDFunc.appendCall(EventLogStoreMaxTimestampByUserIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MaxTimestampByUserID
// method of the parent MockEventLogStore instance is invoked and the hook
// queue is empty.
func (f *EventLogStoreMaxTimestampByUserIDFunc) SetDefaultHook(hook func(context.Context, int32) (*time.Time, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MaxTimestampByUserID method of the parent MockEventLogStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EventLogStoreMaxTimestampByUserIDFunc) PushHook(hook func(context.Context, int32) (*time.Time, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreMaxTimestampByUserIDFunc) SetDefaultReturn(r0 *time.Time, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (*time.Time, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreMaxTimestampByUserIDFunc) PushReturn(r0 *time.Time, r1 error) {
	f.PushHook(func(context.Context, int32) (*time.Time, error) {
		return r0, r1
	})
}

func (f *EventLogStoreMaxTimestampByUserIDFunc) nextHook() func(context.Context, int32) (*time.Time, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreMaxTimestampByUserIDFunc) appendCall(r0 EventLogStoreMaxTimestampByUserIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreMaxTimestampByUserIDFuncCall
// objects describing the invocations of this function.
func (f *EventLogStoreMaxTimestampByUserIDFunc) History() []EventLogStoreMaxTimestampByUserIDFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreMaxTimestampByUserIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreMaxTimestampByUserIDFuncCall is an object that describes an
// invocation of method MaxTimestampByUserID on an instance of
// MockEventLogStore.
type EventLogStoreMaxTimestampByUserIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *time.Time
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreMaxTimestampByUserIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreMaxTimestampByUserIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreMaxTimestampByUserIDAndSourceFunc describes the behavior
// when the MaxTimestampByUserIDAndSource method of the parent
// MockEventLogStore instance is invoked.
type EventLogStoreMaxTimestampByUserIDAndSourceFunc struct {
	defaultHook func(context.Context, int32, string) (*time.Time, error)
	hooks       []func(context.Context, int32, string) (*time.Time, error)
	history     []EventLogStoreMaxTimestampByUserIDAndSourceFuncCall
	mutex       sync.Mutex
}

// MaxTimestampByUserIDAndSource delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockEventLogStore) MaxTimestampByUserIDAndSource(v0 context.Context, v1 int32, v2 string) (*time.Time, error) {
	r0, r1 := m.MaxTimestampByUserIDAndSourceFunc.nextHook()(v0, v1, v2)
	m.MaxTimestampByUserIDAndSourceFunc.appendCall(EventLogStoreMaxTimestampByUserIDAndSourceFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// MaxTimestampByUserIDAndSource method of the parent MockEventLogStore
// instance is invoked and the hook queue is empty.
func (f *EventLogStoreMaxTimestampByUserIDAndSourceFunc) SetDefaultHook(hook func(context.Context, int32, string) (*time.Time, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MaxTimestampByUserIDAndSource method of the parent MockEventLogStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *EventLogStoreMaxTimestampByUserIDAndSourceFunc) PushHook(hook func(context.Context, int32, string) (*time.Time, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreMaxTimestampByUserIDAndSourceFunc) SetDefaultReturn(r0 *time.Time, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, string) (*time.Time, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreMaxTimestampByUserIDAndSourceFunc) PushReturn(r0 *time.Time, r1 error) {
	f.PushHook(func(context.Context, int32, string) (*time.Time, error) {
		return r0, r1
	})
}

func (f *EventLogStoreMaxTimestampByUserIDAndSourceFunc) nextHook() func(context.Context, int32, string) (*time.Time, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreMaxTimestampByUserIDAndSourceFunc) appendCall(r0 EventLogStoreMaxTimestampByUserIDAndSourceFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreMaxTimestampByUserIDAndSourceFuncCall objects describing the
// invocations of this function.
func (f *EventLogStoreMaxTimestampByUserIDAndSourceFunc) History() []EventLogStoreMaxTimestampByUserIDAndSourceFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreMaxTimestampByUserIDAndSourceFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreMaxTimestampByUserIDAndSourceFuncCall is an object that
// describes an invocation of method MaxTimestampByUserIDAndSource on an
// instance of MockEventLogStore.
type EventLogStoreMaxTimestampByUserIDAndSourceFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *time.Time
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreMaxTimestampByUserIDAndSourceFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreMaxTimestampByUserIDAndSourceFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreOwnershipFeatureActivityFunc describes the behavior when the
// OwnershipFeatureActivity method of the parent MockEventLogStore instance
// is invoked.
type EventLogStoreOwnershipFeatureActivityFunc struct {
	defaultHook func(context.Context, time.Time, ...string) (map[string]*types.OwnershipUsageStatisticsActiveUsers, error)
	hooks       []func(context.Context, time.Time, ...string) (map[string]*types.OwnershipUsageStatisticsActiveUsers, error)
	history     []EventLogStoreOwnershipFeatureActivityFuncCall
	mutex       sync.Mutex
}

// OwnershipFeatureActivity delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockEventLogStore) OwnershipFeatureActivity(v0 context.Context, v1 time.Time, v2 ...string) (map[string]*types.OwnershipUsageStatisticsActiveUsers, error) {
	r0, r1 := m.OwnershipFeatureActivityFunc.nextHook()(v0, v1, v2...)
	m.OwnershipFeatureActivityFunc.appendCall(EventLogStoreOwnershipFeatureActivityFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// OwnershipFeatureActivity method of the parent MockEventLogStore instance
// is invoked and the hook queue is empty.
func (f *EventLogStoreOwnershipFeatureActivityFunc) SetDefaultHook(hook func(context.Context, time.Time, ...string) (map[string]*types.OwnershipUsageStatisticsActiveUsers, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// OwnershipFeatureActivity method of the parent MockEventLogStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EventLogStoreOwnershipFeatureActivityFunc) PushHook(hook func(context.Context, time.Time, ...string) (map[string]*types.OwnershipUsageStatisticsActiveUsers, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreOwnershipFeatureActivityFunc) SetDefaultReturn(r0 map[string]*types.OwnershipUsageStatisticsActiveUsers, r1 error) {
	f.SetDefaultHook(func(context.Context, time.Time, ...string) (map[string]*types.OwnershipUsageStatisticsActiveUsers, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreOwnershipFeatureActivityFunc) PushReturn(r0 map[string]*types.OwnershipUsageStatisticsActiveUsers, r1 error) {
	f.PushHook(func(context.Context, time.Time, ...string) (map[string]*types.OwnershipUsageStatisticsActiveUsers, error) {
		return r0, r1
	})
}

func (f *EventLogStoreOwnershipFeatureActivityFunc) nextHook() func(context.Context, time.Time, ...string) (map[string]*types.OwnershipUsageStatisticsActiveUsers, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreOwnershipFeatureActivityFunc) appendCall(r0 EventLogStoreOwnershipFeatureActivityFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreOwnershipFeatureActivityFuncCall objects describing the
// invocations of this function.
func (f *EventLogStoreOwnershipFeatureActivityFunc) History() []EventLogStoreOwnershipFeatureActivityFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreOwnershipFeatureActivityFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreOwnershipFeatureActivityFuncCall is an object that describes
// an invocation of method OwnershipFeatureActivity on an instance of
// MockEventLogStore.
type EventLogStoreOwnershipFeatureActivityFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Time
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[string]*types.OwnershipUsageStatisticsActiveUsers
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c EventLogStoreOwnershipFeatureActivityFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreOwnershipFeatureActivityFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreRequestsByLanguageFunc describes the behavior when the
// RequestsByLanguage method of the parent MockEventLogStore instance is
// invoked.
type EventLogStoreRequestsByLanguageFunc struct {
	defaultHook func(context.Context) (map[string]int, error)
	hooks       []func(context.Context) (map[string]int, error)
	history     []EventLogStoreRequestsByLanguageFuncCall
	mutex       sync.Mutex
}

// RequestsByLanguage delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEventLogStore) RequestsByLanguage(v0 context.Context) (map[string]int, error) {
	r0, r1 := m.RequestsByLanguageFunc.nextHook()(v0)
	m.RequestsByLanguageFunc.appendCall(EventLogStoreRequestsByLanguageFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RequestsByLanguage
// method of the parent MockEventLogStore instance is invoked and the hook
// queue is empty.
func (f *EventLogStoreRequestsByLanguageFunc) SetDefaultHook(hook func(context.Context) (map[string]int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RequestsByLanguage method of the parent MockEventLogStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EventLogStoreRequestsByLanguageFunc) PushHook(hook func(context.Context) (map[string]int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreRequestsByLanguageFunc) SetDefaultReturn(r0 map[string]int, r1 error) {
	f.SetDefaultHook(func(context.Context) (map[string]int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreRequestsByLanguageFunc) PushReturn(r0 map[string]int, r1 error) {
	f.PushHook(func(context.Context) (map[string]int, error) {
		return r0, r1
	})
}

func (f *EventLogStoreRequestsByLanguageFunc) nextHook() func(context.Context) (map[string]int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreRequestsByLanguageFunc) appendCall(r0 EventLogStoreRequestsByLanguageFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreRequestsByLanguageFuncCall
// objects describing the invocations of this function.
func (f *EventLogStoreRequestsByLanguageFunc) History() []EventLogStoreRequestsByLanguageFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreRequestsByLanguageFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreRequestsByLanguageFuncCall is an object that describes an
// invocation of method RequestsByLanguage on an instance of
// MockEventLogStore.
type EventLogStoreRequestsByLanguageFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[string]int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreRequestsByLanguageFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreRequestsByLanguageFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreSiteUsageCurrentPeriodsFunc describes the behavior when the
// SiteUsageCurrentPeriods method of the parent MockEventLogStore instance
// is invoked.
type EventLogStoreSiteUsageCurrentPeriodsFunc struct {
	defaultHook func(context.Context) (types.SiteUsageSummary, error)
	hooks       []func(context.Context) (types.SiteUsageSummary, error)
	history     []EventLogStoreSiteUsageCurrentPeriodsFuncCall
	mutex       sync.Mutex
}

// SiteUsageCurrentPeriods delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockEventLogStore) SiteUsageCurrentPeriods(v0 context.Context) (types.SiteUsageSummary, error) {
	r0, r1 := m.SiteUsageCurrentPeriodsFunc.nextHook()(v0)
	m.SiteUsageCurrentPeriodsFunc.appendCall(EventLogStoreSiteUsageCurrentPeriodsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// SiteUsageCurrentPeriods method of the parent MockEventLogStore instance
// is invoked and the hook queue is empty.
func (f *EventLogStoreSiteUsageCurrentPeriodsFunc) SetDefaultHook(hook func(context.Context) (types.SiteUsageSummary, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SiteUsageCurrentPeriods method of the parent MockEventLogStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EventLogStoreSiteUsageCurrentPeriodsFunc) PushHook(hook func(context.Context) (types.SiteUsageSummary, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreSiteUsageCurrentPeriodsFunc) SetDefaultReturn(r0 types.SiteUsageSummary, r1 error) {
	f.SetDefaultHook(func(context.Context) (types.SiteUsageSummary, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreSiteUsageCurrentPeriodsFunc) PushReturn(r0 types.SiteUsageSummary, r1 error) {
	f.PushHook(func(context.Context) (types.SiteUsageSummary, error) {
		return r0, r1
	})
}

func (f *EventLogStoreSiteUsageCurrentPeriodsFunc) nextHook() func(context.Context) (types.SiteUsageSummary, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreSiteUsageCurrentPeriodsFunc) appendCall(r0 EventLogStoreSiteUsageCurrentPeriodsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreSiteUsageCurrentPeriodsFuncCall objects describing the
// invocations of this function.
func (f *EventLogStoreSiteUsageCurrentPeriodsFunc) History() []EventLogStoreSiteUsageCurrentPeriodsFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreSiteUsageCurrentPeriodsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreSiteUsageCurrentPeriodsFuncCall is an object that describes
// an invocation of method SiteUsageCurrentPeriods on an instance of
// MockEventLogStore.
type EventLogStoreSiteUsageCurrentPeriodsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 types.SiteUsageSummary
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreSiteUsageCurrentPeriodsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreSiteUsageCurrentPeriodsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreSiteUsageMultiplePeriodsFunc describes the behavior when the
// SiteUsageMultiplePeriods method of the parent MockEventLogStore instance
// is invoked.
type EventLogStoreSiteUsageMultiplePeriodsFunc struct {
	defaultHook func(context.Context, time.Time, int, int, int, *CountUniqueUsersOptions) (*types.SiteUsageStatistics, error)
	hooks       []func(context.Context, time.Time, int, int, int, *CountUniqueUsersOptions) (*types.SiteUsageStatistics, error)
	history     []EventLogStoreSiteUsageMultiplePeriodsFuncCall
	mutex       sync.Mutex
}

// SiteUsageMultiplePeriods delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockEventLogStore) SiteUsageMultiplePeriods(v0 context.Context, v1 time.Time, v2 int, v3 int, v4 int, v5 *CountUniqueUsersOptions) (*types.SiteUsageStatistics, error) {
	r0, r1 := m.SiteUsageMultiplePeriodsFunc.nextHook()(v0, v1, v2, v3, v4, v5)
	m.SiteUsageMultiplePeriodsFunc.appendCall(EventLogStoreSiteUsageMultiplePeriodsFuncCall{v0, v1, v2, v3, v4, v5, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// SiteUsageMultiplePeriods method of the parent MockEventLogStore instance
// is invoked and the hook queue is empty.
func (f *EventLogStoreSiteUsageMultiplePeriodsFunc) SetDefaultHook(hook func(context.Context, time.Time, int, int, int, *CountUniqueUsersOptions) (*types.SiteUsageStatistics, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SiteUsageMultiplePeriods method of the parent MockEventLogStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EventLogStoreSiteUsageMultiplePeriodsFunc) PushHook(hook func(context.Context, time.Time, int, int, int, *CountUniqueUsersOptions) (*types.SiteUsageStatistics, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreSiteUsageMultiplePeriodsFunc) SetDefaultReturn(r0 *types.SiteUsageStatistics, r1 error) {
	f.SetDefaultHook(func(context.Context, time.Time, int, int, int, *CountUniqueUsersOptions) (*types.SiteUsageStatistics, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreSiteUsageMultiplePeriodsFunc) PushReturn(r0 *types.SiteUsageStatistics, r1 error) {
	f.PushHook(func(context.Context, time.Time, int, int, int, *CountUniqueUsersOptions) (*types.SiteUsageStatistics, error) {
		return r0, r1
	})
}

func (f *EventLogStoreSiteUsageMultiplePeriodsFunc) nextHook() func(context.Context, time.Time, int, int, int, *CountUniqueUsersOptions) (*types.SiteUsageStatistics, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreSiteUsageMultiplePeriodsFunc) appendCall(r0 EventLogStoreSiteUsageMultiplePeriodsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EventLogStoreSiteUsageMultiplePeriodsFuncCall objects describing the
// invocations of this function.
func (f *EventLogStoreSiteUsageMultiplePeriodsFunc) History() []EventLogStoreSiteUsageMultiplePeriodsFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreSiteUsageMultiplePeriodsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreSiteUsageMultiplePeriodsFuncCall is an object that describes
// an invocation of method SiteUsageMultiplePeriods on an instance of
// MockEventLogStore.
type EventLogStoreSiteUsageMultiplePeriodsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Time
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 *CountUniqueUsersOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.SiteUsageStatistics
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreSiteUsageMultiplePeriodsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreSiteUsageMultiplePeriodsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreUsersUsageCountsFunc describes the behavior when the
// UsersUsageCounts method of the parent MockEventLogStore instance is
// invoked.
type EventLogStoreUsersUsageCountsFunc struct {
	defaultHook func(context.Context) ([]types.UserUsageCounts, error)
	hooks       []func(context.Context) ([]types.UserUsageCounts, error)
	history     []EventLogStoreUsersUsageCountsFuncCall
	mutex       sync.Mutex
}

// UsersUsageCounts delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEventLogStore) UsersUsageCounts(v0 context.Context) ([]types.UserUsageCounts, error) {
	r0, r1 := m.UsersUsageCountsFunc.nextHook()(v0)
	m.UsersUsageCountsFunc.appendCall(EventLogStoreUsersUsageCountsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the UsersUsageCounts
// method of the parent MockEventLogStore instance is invoked and the hook
// queue is empty.
func (f *EventLogStoreUsersUsageCountsFunc) SetDefaultHook(hook func(context.Context) ([]types.UserUsageCounts, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UsersUsageCounts method of the parent MockEventLogStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *EventLogStoreUsersUsageCountsFunc) PushHook(hook func(context.Context) ([]types.UserUsageCounts, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreUsersUsageCountsFunc) SetDefaultReturn(r0 []types.UserUsageCounts, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]types.UserUsageCounts, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreUsersUsageCountsFunc) PushReturn(r0 []types.UserUsageCounts, r1 error) {
	f.PushHook(func(context.Context) ([]types.UserUsageCounts, error) {
		return r0, r1
	})
}

func (f *EventLogStoreUsersUsageCountsFunc) nextHook() func(context.Context) ([]types.UserUsageCounts, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreUsersUsageCountsFunc) appendCall(r0 EventLogStoreUsersUsageCountsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreUsersUsageCountsFuncCall
// objects describing the invocations of this function.
func (f *EventLogStoreUsersUsageCountsFunc) History() []EventLogStoreUsersUsageCountsFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreUsersUsageCountsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreUsersUsageCountsFuncCall is an object that describes an
// invocation of method UsersUsageCounts on an instance of
// MockEventLogStore.
type EventLogStoreUsersUsageCountsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.UserUsageCounts
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreUsersUsageCountsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreUsersUsageCountsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EventLogStoreWithFunc describes the behavior when the With method of the
// parent MockEventLogStore instance is invoked.
type EventLogStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) EventLogStore
	hooks       []func(basestore.ShareableStore) EventLogStore
	history     []EventLogStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEventLogStore) With(v0 basestore.ShareableStore) EventLogStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(EventLogStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockEventLogStore instance is invoked and the hook queue is empty.
func (f *EventLogStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) EventLogStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockEventLogStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EventLogStoreWithFunc) PushHook(hook func(basestore.ShareableStore) EventLogStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreWithFunc) SetDefaultReturn(r0 EventLogStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) EventLogStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreWithFunc) PushReturn(r0 EventLogStore) {
	f.PushHook(func(basestore.ShareableStore) EventLogStore {
		return r0
	})
}

func (f *EventLogStoreWithFunc) nextHook() func(basestore.ShareableStore) EventLogStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreWithFunc) appendCall(r0 EventLogStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreWithFuncCall objects
// describing the invocations of this function.
func (f *EventLogStoreWithFunc) History() []EventLogStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockEventLogStore.
type EventLogStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 EventLogStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EventLogStoreWithTransactFunc describes the behavior when the
// WithTransact method of the parent MockEventLogStore instance is invoked.
type EventLogStoreWithTransactFunc struct {
	defaultHook func(context.Context, func(EventLogStore) error) error
	hooks       []func(context.Context, func(EventLogStore) error) error
	history     []EventLogStoreWithTransactFuncCall
	mutex       sync.Mutex
}

// WithTransact delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEventLogStore) WithTransact(v0 context.Context, v1 func(EventLogStore) error) error {
	r0 := m.WithTransactFunc.nextHook()(v0, v1)
	m.WithTransactFunc.appendCall(EventLogStoreWithTransactFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithTransact method
// of the parent MockEventLogStore instance is invoked and the hook queue is
// empty.
func (f *EventLogStoreWithTransactFunc) SetDefaultHook(hook func(context.Context, func(EventLogStore) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithTransact method of the parent MockEventLogStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EventLogStoreWithTransactFunc) PushHook(hook func(context.Context, func(EventLogStore) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EventLogStoreWithTransactFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, func(EventLogStore) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EventLogStoreWithTransactFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, func(EventLogStore) error) error {
		return r0
	})
}

func (f *EventLogStoreWithTransactFunc) nextHook() func(context.Context, func(EventLogStore) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EventLogStoreWithTransactFunc) appendCall(r0 EventLogStoreWithTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EventLogStoreWithTransactFuncCall objects
// describing the invocations of this function.
func (f *EventLogStoreWithTransactFunc) History() []EventLogStoreWithTransactFuncCall {
	f.mutex.Lock()
	history := make([]EventLogStoreWithTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EventLogStoreWithTransactFuncCall is an object that describes an
// invocation of method WithTransact on an instance of MockEventLogStore.
type EventLogStoreWithTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 func(EventLogStore) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EventLogStoreWithTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EventLogStoreWithTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockExecutorSecretAccessLogStore is a mock implementation of the
// ExecutorSecretAccessLogStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockExecutorSecretAccessLogStore struct {
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *ExecutorSecretAccessLogStoreCountFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *ExecutorSecretAccessLogStoreCreateFunc
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *ExecutorSecretAccessLogStoreGetByIDFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *ExecutorSecretAccessLogStoreHandleFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *ExecutorSecretAccessLogStoreListFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *ExecutorSecretAccessLogStoreWithFunc
	// WithTransactFunc is an instance of a mock function object controlling
	// the behavior of the method WithTransact.
	WithTransactFunc *ExecutorSecretAccessLogStoreWithTransactFunc
}

// NewMockExecutorSecretAccessLogStore creates a new mock of the
// ExecutorSecretAccessLogStore interface. All methods return zero values
// for all results, unless overwritten.
func NewMockExecutorSecretAccessLogStore() *MockExecutorSecretAccessLogStore {
	return &MockExecutorSecretAccessLogStore{
		CountFunc: &ExecutorSecretAccessLogStoreCountFunc{
			defaultHook: func(context.Context, ExecutorSecretAccessLogsListOpts) (r0 int, r1 error) {
				return
			},
		},
		CreateFunc: &ExecutorSecretAccessLogStoreCreateFunc{
			defaultHook: func(context.Context, *ExecutorSecretAccessLog) (r0 error) {
				return
			},
		},
		GetByIDFunc: &ExecutorSecretAccessLogStoreGetByIDFunc{
			defaultHook: func(context.Context, int64) (r0 *ExecutorSecretAccessLog, r1 error) {
				return
			},
		},
		HandleFunc: &ExecutorSecretAccessLogStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		ListFunc: &ExecutorSecretAccessLogStoreListFunc{
			defaultHook: func(context.Context, ExecutorSecretAccessLogsListOpts) (r0 []*ExecutorSecretAccessLog, r1 int, r2 error) {
				return
			},
		},
		WithFunc: &ExecutorSecretAccessLogStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 ExecutorSecretAccessLogStore) {
				return
			},
		},
		WithTransactFunc: &ExecutorSecretAccessLogStoreWithTransactFunc{
			defaultHook: func(context.Context, func(ExecutorSecretAccessLogStore) error) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockExecutorSecretAccessLogStore creates a new mock of the
// ExecutorSecretAccessLogStore interface. All methods panic on invocation,
// unless overwritten.
func NewStrictMockExecutorSecretAccessLogStore() *MockExecutorSecretAccessLogStore {
	return &MockExecutorSecretAccessLogStore{
		CountFunc: &ExecutorSecretAccessLogStoreCountFunc{
			defaultHook: func(context.Context, ExecutorSecretAccessLogsListOpts) (int, error) {
				panic("unexpected invocation of MockExecutorSecretAccessLogStore.Count")
			},
		},
		CreateFunc: &ExecutorSecretAccessLogStoreCreateFunc{
			defaultHook: func(context.Context, *ExecutorSecretAccessLog) error {
				panic("unexpected invocation of MockExecutorSecretAccessLogStore.Create")
			},
		},
		GetByIDFunc: &ExecutorSecretAccessLogStoreGetByIDFunc{
			defaultHook: func(context.Context, int64) (*ExecutorSecretAccessLog, error) {
				panic("unexpected invocation of MockExecutorSecretAccessLogStore.GetByID")
			},
		},
		HandleFunc: &ExecutorSecretAccessLogStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockExecutorSecretAccessLogStore.Handle")
			},
		},
		ListFunc: &ExecutorSecretAccessLogStoreListFunc{
			defaultHook: func(context.Context, ExecutorSecretAccessLogsListOpts) ([]*ExecutorSecretAccessLog, int, error) {
				panic("unexpected invocation of MockExecutorSecretAccessLogStore.List")
			},
		},
		WithFunc: &ExecutorSecretAccessLogStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) ExecutorSecretAccessLogStore {
				panic("unexpected invocation of MockExecutorSecretAccessLogStore.With")
			},
		},
		WithTransactFunc: &ExecutorSecretAccessLogStoreWithTransactFunc{
			defaultHook: func(context.Context, func(ExecutorSecretAccessLogStore) error) error {
				panic("unexpected invocation of MockExecutorSecretAccessLogStore.WithTransact")
			},
		},
	}
}

// NewMockExecutorSecretAccessLogStoreFrom creates a new mock of the
// MockExecutorSecretAccessLogStore interface. All methods delegate to the
// given implementation, unless overwritten.
func NewMockExecutorSecretAccessLogStoreFrom(i ExecutorSecretAccessLogStore) *MockExecutorSecretAccessLogStore {
	return &MockExecutorSecretAccessLogStore{
		CountFunc: &ExecutorSecretAccessLogStoreCountFunc{
			defaultHook: i.Count,
		},
		CreateFunc: &ExecutorSecretAccessLogStoreCreateFunc{
			defaultHook: i.Create,
		},
		GetByIDFunc: &ExecutorSecretAccessLogStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		HandleFunc: &ExecutorSecretAccessLogStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListFunc: &ExecutorSecretAccessLogStoreListFunc{
			defaultHook: i.List,
		},
		WithFunc: &ExecutorSecretAccessLogStoreWithFunc{
			defaultHook: i.With,
		},
		WithTransactFunc: &ExecutorSecretAccessLogStoreWithTransactFunc{
			defaultHook: i.WithTransact,
		},
	}
}

// ExecutorSecretAccessLogStoreCountFunc describes the behavior when the
// Count method of the parent MockExecutorSecretAccessLogStore instance is
// invoked.
type ExecutorSecretAccessLogStoreCountFunc struct {
	defaultHook func(context.Context, ExecutorSecretAccessLogsListOpts) (int, error)
	hooks       []func(context.Context, ExecutorSecretAccessLogsListOpts) (int, error)
	history     []ExecutorSecretAccessLogStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExecutorSecretAccessLogStore) Count(v0 context.Context, v1 ExecutorSecretAccessLogsListOpts) (int, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(ExecutorSecretAccessLogStoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockExecutorSecretAccessLogStore instance is invoked and the hook
// queue is empty.
func (f *ExecutorSecretAccessLogStoreCountFunc) SetDefaultHook(hook func(context.Context, ExecutorSecretAccessLogsListOpts) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockExecutorSecretAccessLogStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ExecutorSecretAccessLogStoreCountFunc) PushHook(hook func(context.Context, ExecutorSecretAccessLogsListOpts) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExecutorSecretAccessLogStoreCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, ExecutorSecretAccessLogsListOpts) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExecutorSecretAccessLogStoreCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, ExecutorSecretAccessLogsListOpts) (int, error) {
		return r0, r1
	})
}

func (f *ExecutorSecretAccessLogStoreCountFunc) nextHook() func(context.Context, ExecutorSecretAccessLogsListOpts) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExecutorSecretAccessLogStoreCountFunc) appendCall(r0 ExecutorSecretAccessLogStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExecutorSecretAccessLogStoreCountFuncCall
// objects describing the invocations of this function.
func (f *ExecutorSecretAccessLogStoreCountFunc) History() []ExecutorSecretAccessLogStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]ExecutorSecretAccessLogStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExecutorSecretAccessLogStoreCountFuncCall is an object that describes an
// invocation of method Count on an instance of
// MockExecutorSecretAccessLogStore.
type ExecutorSecretAccessLogStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ExecutorSecretAccessLogsListOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExecutorSecretAccessLogStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExecutorSecretAccessLogStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExecutorSecretAccessLogStoreCreateFunc describes the behavior when the
// Create method of the parent MockExecutorSecretAccessLogStore instance is
// invoked.
type ExecutorSecretAccessLogStoreCreateFunc struct {
	defaultHook func(context.Context, *ExecutorSecretAccessLog) error
	hooks       []func(context.Context, *ExecutorSecretAccessLog) error
	history     []ExecutorSecretAccessLogStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExecutorSecretAccessLogStore) Create(v0 context.Context, v1 *ExecutorSecretAccessLog) error {
	r0 := m.CreateFunc.nextHook()(v0, v1)
	m.CreateFunc.appendCall(ExecutorSecretAccessLogStoreCreateFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockExecutorSecretAccessLogStore instance is invoked and the hook
// queue is empty.
func (f *ExecutorSecretAccessLogStoreCreateFunc) SetDefaultHook(hook func(context.Context, *ExecutorSecretAccessLog) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockExecutorSecretAccessLogStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ExecutorSecretAccessLogStoreCreateFunc) PushHook(hook func(context.Context, *ExecutorSecretAccessLog) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExecutorSecretAccessLogStoreCreateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *ExecutorSecretAccessLog) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExecutorSecretAccessLogStoreCreateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *ExecutorSecretAccessLog) error {
		return r0
	})
}

func (f *ExecutorSecretAccessLogStoreCreateFunc) nextHook() func(context.Context, *ExecutorSecretAccessLog) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExecutorSecretAccessLogStoreCreateFunc) appendCall(r0 ExecutorSecretAccessLogStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExecutorSecretAccessLogStoreCreateFuncCall
// objects describing the invocations of this function.
func (f *ExecutorSecretAccessLogStoreCreateFunc) History() []ExecutorSecretAccessLogStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]ExecutorSecretAccessLogStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExecutorSecretAccessLogStoreCreateFuncCall is an object that describes an
// invocation of method Create on an instance of
// MockExecutorSecretAccessLogStore.
type ExecutorSecretAccessLogStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *ExecutorSecretAccessLog
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExecutorSecretAccessLogStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExecutorSecretAccessLogStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExecutorSecretAccessLogStoreGetByIDFunc describes the behavior when the
// GetByID method of the parent MockExecutorSecretAccessLogStore instance is
// invoked.
type ExecutorSecretAccessLogStoreGetByIDFunc struct {
	defaultHook func(context.Context, int64) (*ExecutorSecretAccessLog, error)
	hooks       []func(context.Context, int64) (*ExecutorSecretAccessLog, error)
	history     []ExecutorSecretAccessLogStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExecutorSecretAccessLogStore) GetByID(v0 context.Context, v1 int64) (*ExecutorSecretAccessLog, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(ExecutorSecretAccessLogStoreGetByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockExecutorSecretAccessLogStore instance is invoked and the
// hook queue is empty.
func (f *ExecutorSecretAccessLogStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int64) (*ExecutorSecretAccessLog, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockExecutorSecretAccessLogStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ExecutorSecretAccessLogStoreGetByIDFunc) PushHook(hook func(context.Context, int64) (*ExecutorSecretAccessLog, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExecutorSecretAccessLogStoreGetByIDFunc) SetDefaultReturn(r0 *ExecutorSecretAccessLog, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (*ExecutorSecretAccessLog, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExecutorSecretAccessLogStoreGetByIDFunc) PushReturn(r0 *ExecutorSecretAccessLog, r1 error) {
	f.PushHook(func(context.Context, int64) (*ExecutorSecretAccessLog, error) {
		return r0, r1
	})
}

func (f *ExecutorSecretAccessLogStoreGetByIDFunc) nextHook() func(context.Context, int64) (*ExecutorSecretAccessLog, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExecutorSecretAccessLogStoreGetByIDFunc) appendCall(r0 ExecutorSecretAccessLogStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExecutorSecretAccessLogStoreGetByIDFuncCall
// objects describing the invocations of this function.
func (f *ExecutorSecretAccessLogStoreGetByIDFunc) History() []ExecutorSecretAccessLogStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]ExecutorSecretAccessLogStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExecutorSecretAccessLogStoreGetByIDFuncCall is an object that describes
// an invocation of method GetByID on an instance of
// MockExecutorSecretAccessLogStore.
type ExecutorSecretAccessLogStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *ExecutorSecretAccessLog
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExecutorSecretAccessLogStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExecutorSecretAccessLogStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExecutorSecretAccessLogStoreHandleFunc describes the behavior when the
// Handle method of the parent MockExecutorSecretAccessLogStore instance is
// invoked.
type ExecutorSecretAccessLogStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []ExecutorSecretAccessLogStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExecutorSecretAccessLogStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(ExecutorSecretAccessLogStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockExecutorSecretAccessLogStore instance is invoked and the hook
// queue is empty.
func (f *ExecutorSecretAccessLogStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockExecutorSecretAccessLogStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ExecutorSecretAccessLogStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExecutorSecretAccessLogStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExecutorSecretAccessLogStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *ExecutorSecretAccessLogStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExecutorSecretAccessLogStoreHandleFunc) appendCall(r0 ExecutorSecretAccessLogStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExecutorSecretAccessLogStoreHandleFuncCall
// objects describing the invocations of this function.
func (f *ExecutorSecretAccessLogStoreHandleFunc) History() []ExecutorSecretAccessLogStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]ExecutorSecretAccessLogStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExecutorSecretAccessLogStoreHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of
// MockExecutorSecretAccessLogStore.
type ExecutorSecretAccessLogStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExecutorSecretAccessLogStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExecutorSecretAccessLogStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExecutorSecretAccessLogStoreListFunc describes the behavior when the List
// method of the parent MockExecutorSecretAccessLogStore instance is
// invoked.
type ExecutorSecretAccessLogStoreListFunc struct {
	defaultHook func(context.Context, ExecutorSecretAccessLogsListOpts) ([]*ExecutorSecretAccessLog, int, error)
	hooks       []func(context.Context, ExecutorSecretAccessLogsListOpts) ([]*ExecutorSecretAccessLog, int, error)
	history     []ExecutorSecretAccessLogStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExecutorSecretAccessLogStore) List(v0 context.Context, v1 ExecutorSecretAccessLogsListOpts) ([]*ExecutorSecretAccessLog, int, error) {
	r0, r1, r2 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(ExecutorSecretAccessLogStoreListFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockExecutorSecretAccessLogStore instance is invoked and the hook
// queue is empty.
func (f *ExecutorSecretAccessLogStoreListFunc) SetDefaultHook(hook func(context.Context, ExecutorSecretAccessLogsListOpts) ([]*ExecutorSecretAccessLog, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockExecutorSecretAccessLogStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ExecutorSecretAccessLogStoreListFunc) PushHook(hook func(context.Context, ExecutorSecretAccessLogsListOpts) ([]*ExecutorSecretAccessLog, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExecutorSecretAccessLogStoreListFunc) SetDefaultReturn(r0 []*ExecutorSecretAccessLog, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, ExecutorSecretAccessLogsListOpts) ([]*ExecutorSecretAccessLog, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExecutorSecretAccessLogStoreListFunc) PushReturn(r0 []*ExecutorSecretAccessLog, r1 int, r2 error) {
	f.PushHook(func(context.Context, ExecutorSecretAccessLogsListOpts) ([]*ExecutorSecretAccessLog, int, error) {
		return r0, r1, r2
	})
}

func (f *ExecutorSecretAccessLogStoreListFunc) nextHook() func(context.Context, ExecutorSecretAccessLogsListOpts) ([]*ExecutorSecretAccessLog, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExecutorSecretAccessLogStoreListFunc) appendCall(r0 ExecutorSecretAccessLogStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExecutorSecretAccessLogStoreListFuncCall
// objects describing the invocations of this function.
func (f *ExecutorSecretAccessLogStoreListFunc) History() []ExecutorSecretAccessLogStoreListFuncCall {
	f.mutex.Lock()
	history := make([]ExecutorSecretAccessLogStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExecutorSecretAccessLogStoreListFuncCall is an object that describes an
// invocation of method List on an instance of
// MockExecutorSecretAccessLogStore.
type ExecutorSecretAccessLogStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ExecutorSecretAccessLogsListOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*ExecutorSecretAccessLog
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExecutorSecretAccessLogStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExecutorSecretAccessLogStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ExecutorSecretAccessLogStoreWithFunc describes the behavior when the With
// method of the parent MockExecutorSecretAccessLogStore instance is
// invoked.
type ExecutorSecretAccessLogStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) ExecutorSecretAccessLogStore
	hooks       []func(basestore.ShareableStore) ExecutorSecretAccessLogStore
	history     []ExecutorSecretAccessLogStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExecutorSecretAccessLogStore) With(v0 basestore.ShareableStore) ExecutorSecretAccessLogStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(ExecutorSecretAccessLogStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockExecutorSecretAccessLogStore instance is invoked and the hook
// queue is empty.
func (f *ExecutorSecretAccessLogStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) ExecutorSecretAccessLogStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockExecutorSecretAccessLogStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ExecutorSecretAccessLogStoreWithFunc) PushHook(hook func(basestore.ShareableStore) ExecutorSecretAccessLogStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExecutorSecretAccessLogStoreWithFunc) SetDefaultReturn(r0 ExecutorSecretAccessLogStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) ExecutorSecretAccessLogStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExecutorSecretAccessLogStoreWithFunc) PushReturn(r0 ExecutorSecretAccessLogStore) {
	f.PushHook(func(basestore.ShareableStore) ExecutorSecretAccessLogStore {
		return r0
	})
}

func (f *ExecutorSecretAccessLogStoreWithFunc) nextHook() func(basestore.ShareableStore) ExecutorSecretAccessLogStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExecutorSecretAccessLogStoreWithFunc) appendCall(r0 ExecutorSecretAccessLogStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExecutorSecretAccessLogStoreWithFuncCall
// objects describing the invocations of this function.
func (f *ExecutorSecretAccessLogStoreWithFunc) History() []ExecutorSecretAccessLogStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]ExecutorSecretAccessLogStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExecutorSecretAccessLogStoreWithFuncCall is an object that describes an
// invocation of method With on an instance of
// MockExecutorSecretAccessLogStore.
type ExecutorSecretAccessLogStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 ExecutorSecretAccessLogStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExecutorSecretAccessLogStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExecutorSecretAccessLogStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExecutorSecretAccessLogStoreWithTransactFunc describes the behavior when
// the WithTransact method of the parent MockExecutorSecretAccessLogStore
// instance is invoked.
type ExecutorSecretAccessLogStoreWithTransactFunc struct {
	defaultHook func(context.Context, func(ExecutorSecretAccessLogStore) error) error
	hooks       []func(context.Context, func(ExecutorSecretAccessLogStore) error) error
	history     []ExecutorSecretAccessLogStoreWithTransactFuncCall
	mutex       sync.Mutex
}

// WithTransact delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockExecutorSecretAccessLogStore) WithTransact(v0 context.Context, v1 func(ExecutorSecretAccessLogStore) error) error {
	r0 := m.WithTransactFunc.nextHook()(v0, v1)
	m.WithTransactFunc.appendCall(ExecutorSecretAccessLogStoreWithTransactFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithTransact method
// of the parent MockExecutorSecretAccessLogStore instance is invoked and
// the hook queue is empty.
func (f *ExecutorSecretAccessLogStoreWithTransactFunc) SetDefaultHook(hook func(context.Context, func(ExecutorSecretAccessLogStore) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithTransact method of the parent MockExecutorSecretAccessLogStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *ExecutorSecretAccessLogStoreWithTransactFunc) PushHook(hook func(context.Context, func(ExecutorSecretAccessLogStore) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExecutorSecretAccessLogStoreWithTransactFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, func(ExecutorSecretAccessLogStore) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExecutorSecretAccessLogStoreWithTransactFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, func(ExecutorSecretAccessLogStore) error) error {
		return r0
	})
}

func (f *ExecutorSecretAccessLogStoreWithTransactFunc) nextHook() func(context.Context, func(ExecutorSecretAccessLogStore) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExecutorSecretAccessLogStoreWithTransactFunc) appendCall(r0 ExecutorSecretAccessLogStoreWithTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ExecutorSecretAccessLogStoreWithTransactFuncCall objects describing the
// invocations of this function.
func (f *ExecutorSecretAccessLogStoreWithTransactFunc) History() []ExecutorSecretAccessLogStoreWithTransactFuncCall {
	f.mutex.Lock()
	history := make([]ExecutorSecretAccessLogStoreWithTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExecutorSecretAccessLogStoreWithTransactFuncCall is an object that
// describes an invocation of method WithTransact on an instance of
// MockExecutorSecretAccessLogStore.
type ExecutorSecretAccessLogStoreWithTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 func(ExecutorSecretAccessLogStore) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExecutorSecretAccessLogStoreWithTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExecutorSecretAccessLogStoreWithTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockExecutorSecretStore is a mock implementation of the
// ExecutorSecretStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockExecutorSecretStore struct {
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *ExecutorSecretStoreCountFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *ExecutorSecretStoreCreateFunc
	// DeleteFunc is an instance of a mock function object controlling the
	// behavior of the method Delete.
	DeleteFunc *ExecutorSecretStoreDeleteFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *ExecutorSecretStoreDoneFunc
	// ExecResultFunc is an instance of a mock function object controlling
	// the behavior of the method ExecResult.
	ExecResultFunc *ExecutorSecretStoreExecResultFunc
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *ExecutorSecretStoreGetByIDFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *ExecutorSecretStoreHandleFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *ExecutorSecretStoreListFunc
	// UpdateFunc is an instance of a mock function object controlling the
	// behavior of the method Update.
	UpdateFunc *ExecutorSecretStoreUpdateFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *ExecutorSecretStoreWithFunc
	// WithTransactFunc is an instance of a mock function object controlling
	// the behavior of the method WithTransact.
	WithTransactFunc *ExecutorSecretStoreWithTransactFunc
}

// NewMockExecutorSecretStore creates a new mock of the ExecutorSecretStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockExecutorSecretStore() *MockExecutorSecretStore {
	return &MockExecutorSecretStore{
		CountFunc: &ExecutorSecretStoreCountFunc{
			defaultHook: func(context.Context, ExecutorSecretScope, ExecutorSecretsListOpts) (r0 int, r1 error) {
				return
			},
		},
		CreateFunc: &ExecutorSecretStoreCreateFunc{
			defaultHook: func(context.Context, ExecutorSecretScope, *ExecutorSecret, string) (r0 error) {
				return
			},
		},
		DeleteFunc: &ExecutorSecretStoreDeleteFunc{
			defaultHook: func(context.Context, ExecutorSecretScope, int64) (r0 error) {
				return
			},
		},
		DoneFunc: &ExecutorSecretStoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		ExecResultFunc: &ExecutorSecretStoreExecResultFunc{
			defaultHook: func(context.Context, *sqlf.Query) (r0 sql.Result, r1 error) {
				return
			},
		},
		GetByIDFunc: &ExecutorSecretStoreGetByIDFunc{
			defaultHook: func(context.Context, ExecutorSecretScope, int64) (r0 *ExecutorSecret, r1 error) {
				return
			},
		},
		HandleFunc: &ExecutorSecretStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		ListFunc: &ExecutorSecretStoreListFunc{
			defaultHook: func(context.Context, ExecutorSecretScope, ExecutorSecretsListOpts) (r0 []*ExecutorSecret, r1 int, r2 error) {
				return
			},
		},
		UpdateFunc: &ExecutorSecretStoreUpdateFunc{
			defaultHook: func(context.Context, ExecutorSecretScope, *ExecutorSecret, string) (r0 error) {
				return
			},
		},
		WithFunc: &ExecutorSecretStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 ExecutorSecretStore) {
				return
			},
		},
		WithTransactFunc: &ExecutorSecretStoreWithTransactFunc{
			defaultHook: func(context.Context, func(ExecutorSecretStore) error) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockExecutorSecretStore creates a new mock of the
// ExecutorSecretStore interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockExecutorSecretStore() *MockExecutorSecretStore {
	return &MockExecutorSecretStore{
		CountFunc: &ExecutorSecretStoreCountFunc{
			defaultHook: func(context.Context, ExecutorSecretScope, ExecutorSecretsListOpts) (int, error) {
				panic("unexpected invocation of MockExecutorSecretStore.Count")
			},
		},
		CreateFunc: &ExecutorSecretStoreCreateFunc{
			defaultHook: func(context.Context, ExecutorSecretScope, *ExecutorSecret, string) error {
				panic("unexpected invocation of MockExecutorSecretStore.Create")
			},
		},
		DeleteFunc: &ExecutorSecretStoreDeleteFunc{
			defaultHook: func(context.Context, ExecutorSecretScope, int64) error {
				panic("unexpected invocation of MockExecutorSecretStore.Delete")
			},
		},
		DoneFunc: &ExecutorSecretStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockExecutorSecretStore.Done")
			},
		},
		ExecResultFunc: &ExecutorSecretStoreExecResultFunc{
			defaultHook: func(context.Context, *sqlf.Query) (sql.Result, error) {
				panic("unexpected invocation of MockExecutorSecretStore.ExecResult")
			},
		},
		GetByIDFunc: &ExecutorSecretStoreGetByIDFunc{
			defaultHook: func(context.Context, ExecutorSecretScope, int64) (*ExecutorSecret, error) {
				panic("unexpected invocation of MockExecutorSecretStore.GetByID")
			},
		},
		HandleFunc: &ExecutorSecretStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockExecutorSecretStore.Handle")
			},
		},
		ListFunc: &ExecutorSecretStoreListFunc{
			defaultHook: func(context.Context, ExecutorSecretScope, ExecutorSecretsListOpts) ([]*ExecutorSecret, int, error) {
				panic("unexpected invocation of MockExecutorSecretStore.List")
			},
		},
		UpdateFunc: &ExecutorSecretStoreUpdateFunc{
			defaultHook: func(context.Context, ExecutorSecretScope, *ExecutorSecret, string) error {
				panic("unexpected invocation of MockExecutorSecretStore.Update")
			},
		},
		WithFunc: &ExecutorSecretStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) ExecutorSecretStore {
				panic("unexpected invocation of MockExecutorSecretStore.With")
			},
		},
		WithTransactFunc: &ExecutorSecretStoreWithTransactFunc{
			defaultHook: func(context.Context, func(ExecutorSecretStore) error) error {
				panic("unexpected invocation of MockExecutorSecretStore.WithTransact")
			},
		},
	}
}

// NewMockExecutorSecretStoreFrom creates a new mock of the
// MockExecutorSecretStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockExecutorSecretStoreFrom(i ExecutorSecretStore) *MockExecutorSecretStore {
	return &MockExecutorSecretStore{
		CountFunc: &ExecutorSecretStoreCountFunc{
			defaultHook: i.Count,
		},
		CreateFunc: &ExecutorSecretStoreCreateFunc{
			defaultHook: i.Create,
		},
		DeleteFunc: &ExecutorSecretStoreDeleteFunc{
			defaultHook: i.Delete,
		},
		DoneFunc: &ExecutorSecretStoreDoneFunc{
			defaultHook: i.Done,
		},
		ExecResultFunc: &ExecutorSecretStoreExecResultFunc{
			defaultHook: i.ExecResult,
		},
		GetByIDFunc: &ExecutorSecretStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		HandleFunc: &ExecutorSecretStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListFunc: &ExecutorSecretStoreListFunc{
			defaultHook: i.List,
		},
		UpdateFunc: &ExecutorSecretStoreUpdateFunc{
			defaultHook: i.Update,
		},
		WithFunc: &ExecutorSecretStoreWithFunc{
			defaultHook: i.With,
		},
		WithTransactFunc: &ExecutorSecretStoreWithTransactFunc{
			defaultHook: i.WithTransact,
		},
	}
}

// ExecutorSecretStoreCountFunc describes the behavior when the Count method
// of the parent MockExecutorSecretStore instance is invoked.
type ExecutorSecretStoreCountFunc struct {
	defaultHook func(context.Context, ExecutorSecretScope, ExecutorSecretsListOpts) (int, error)
	hooks       []func(context.Context, ExecutorSecretScope, ExecutorSecretsListOpts) (int, error)
	history     []ExecutorSecretStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExecutorSecretStore) Count(v0 context.Context, v1 ExecutorSecretScope, v2 ExecutorSecretsListOpts) (int, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1, v2)
	m.CountFunc.appendCall(ExecutorSecretStoreCountFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockExecutorSecretStore instance is invoked and the hook queue is
// empty.
func (f *ExecutorSecretStoreCountFunc) SetDefaultHook(hook func(context.Context, ExecutorSecretScope, ExecutorSecretsListOpts) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockExecutorSecretStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExecutorSecretStoreCountFunc) PushHook(hook func(context.Context, ExecutorSecretScope, ExecutorSecretsListOpts) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExecutorSecretStoreCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, ExecutorSecretScope, ExecutorSecretsListOpts) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExecutorSecretStoreCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, ExecutorSecretScope, ExecutorSecretsListOpts) (int, error) {
		return r0, r1
	})
}

func (f *ExecutorSecretStoreCountFunc) nextHook() func(context.Context, ExecutorSecretScope, ExecutorSecretsListOpts) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExecutorSecretStoreCountFunc) appendCall(r0 ExecutorSecretStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExecutorSecretStoreCountFuncCall objects
// describing the invocations of this function.
func (f *ExecutorSecretStoreCountFunc) History() []ExecutorSecretStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]ExecutorSecretStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExecutorSecretStoreCountFuncCall is an object that describes an
// invocation of method Count on an instance of MockExecutorSecretStore.
type ExecutorSecretStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ExecutorSecretScope
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 ExecutorSecretsListOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExecutorSecretStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExecutorSecretStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExecutorSecretStoreCreateFunc describes the behavior when the Create
// method of the parent MockExecutorSecretStore instance is invoked.
type ExecutorSecretStoreCreateFunc struct {
	defaultHook func(context.Context, ExecutorSecretScope, *ExecutorSecret, string) error
	hooks       []func(context.Context, ExecutorSecretScope, *ExecutorSecret, string) error
	history     []ExecutorSecretStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExecutorSecretStore) Create(v0 context.Context, v1 ExecutorSecretScope, v2 *ExecutorSecret, v3 string) error {
	r0 := m.CreateFunc.nextHook()(v0, v1, v2, v3)
	m.CreateFunc.appendCall(ExecutorSecretStoreCreateFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockExecutorSecretStore instance is invoked and the hook queue is
// empty.
func (f *ExecutorSecretStoreCreateFunc) SetDefaultHook(hook func(context.Context, ExecutorSecretScope, *ExecutorSecret, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockExecutorSecretStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExecutorSecretStoreCreateFunc) PushHook(hook func(context.Context, ExecutorSecretScope, *ExecutorSecret, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExecutorSecretStoreCreateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ExecutorSecretScope, *ExecutorSecret, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExecutorSecretStoreCreateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ExecutorSecretScope, *ExecutorSecret, string) error {
		return r0
	})
}

func (f *ExecutorSecretStoreCreateFunc) nextHook() func(context.Context, ExecutorSecretScope, *ExecutorSecret, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExecutorSecretStoreCreateFunc) appendCall(r0 ExecutorSecretStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExecutorSecretStoreCreateFuncCall objects
// describing the invocations of this function.
func (f *ExecutorSecretStoreCreateFunc) History() []ExecutorSecretStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]ExecutorSecretStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExecutorSecretStoreCreateFuncCall is an object that describes an
// invocation of method Create on an instance of MockExecutorSecretStore.
type ExecutorSecretStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ExecutorSecretScope
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *ExecutorSecret
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExecutorSecretStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExecutorSecretStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExecutorSecretStoreDeleteFunc describes the behavior when the Delete
// method of the parent MockExecutorSecretStore instance is invoked.
type ExecutorSecretStoreDeleteFunc struct {
	defaultHook func(context.Context, ExecutorSecretScope, int64) error
	hooks       []func(context.Context, ExecutorSecretScope, int64) error
	history     []ExecutorSecretStoreDeleteFuncCall
	mutex       sync.Mutex
}

// Delete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExecutorSecretStore) Delete(v0 context.Context, v1 ExecutorSecretScope, v2 int64) error {
	r0 := m.DeleteFunc.nextHook()(v0, v1, v2)
	m.DeleteFunc.appendCall(ExecutorSecretStoreDeleteFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Delete method of the
// parent MockExecutorSecretStore instance is invoked and the hook queue is
// empty.
func (f *ExecutorSecretStoreDeleteFunc) SetDefaultHook(hook func(context.Context, ExecutorSecretScope, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Delete method of the parent MockExecutorSecretStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExecutorSecretStoreDeleteFunc) PushHook(hook func(context.Context, ExecutorSecretScope, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExecutorSecretStoreDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ExecutorSecretScope, int64) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExecutorSecretStoreDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ExecutorSecretScope, int64) error {
		return r0
	})
}

func (f *ExecutorSecretStoreDeleteFunc) nextHook() func(context.Context, ExecutorSecretScope, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExecutorSecretStoreDeleteFunc) appendCall(r0 ExecutorSecretStoreDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExecutorSecretStoreDeleteFuncCall objects
// describing the invocations of this function.
func (f *ExecutorSecretStoreDeleteFunc) History() []ExecutorSecretStoreDeleteFuncCall {
	f.mutex.Lock()
	history := make([]ExecutorSecretStoreDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExecutorSecretStoreDeleteFuncCall is an object that describes an
// invocation of method Delete on an instance of MockExecutorSecretStore.
type ExecutorSecretStoreDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ExecutorSecretScope
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExecutorSecretStoreDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExecutorSecretStoreDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExecutorSecretStoreDoneFunc describes the behavior when the Done method
// of the parent MockExecutorSecretStore instance is invoked.
type ExecutorSecretStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []ExecutorSecretStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExecutorSecretStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(ExecutorSecretStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockExecutorSecretStore instance is invoked and the hook queue is
// empty.
func (f *ExecutorSecretStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockExecutorSecretStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExecutorSecretStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExecutorSecretStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExecutorSecretStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *ExecutorSecretStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExecutorSecretStoreDoneFunc) appendCall(r0 ExecutorSecretStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExecutorSecretStoreDoneFuncCall objects
// describing the invocations of this function.
func (f *ExecutorSecretStoreDoneFunc) History() []ExecutorSecretStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]ExecutorSecretStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExecutorSecretStoreDoneFuncCall is an object that describes an invocation
// of method Done on an instance of MockExecutorSecretStore.
type ExecutorSecretStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExecutorSecretStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExecutorSecretStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExecutorSecretStoreExecResultFunc describes the behavior when the
// ExecResult method of the parent MockExecutorSecretStore instance is
// invoked.
type ExecutorSecretStoreExecResultFunc struct {
	defaultHook func(context.Context, *sqlf.Query) (sql.Result, error)
	hooks       []func(context.Context, *sqlf.Query) (sql.Result, error)
	history     []ExecutorSecretStoreExecResultFuncCall
	mutex       sync.Mutex
}

// ExecResult delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockExecutorSecretStore) ExecResult(v0 context.Context, v1 *sqlf.Query) (sql.Result, error) {
	r0, r1 := m.ExecResultFunc.nextHook()(v0, v1)
	m.ExecResultFunc.appendCall(ExecutorSecretStoreExecResultFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ExecResult method of
// the parent MockExecutorSecretStore instance is invoked and the hook queue
// is empty.
func (f *ExecutorSecretStoreExecResultFunc) SetDefaultHook(hook func(context.Context, *sqlf.Query) (sql.Result, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExecResult method of the parent MockExecutorSecretStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ExecutorSecretStoreExecResultFunc) PushHook(hook func(context.Context, *sqlf.Query) (sql.Result, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExecutorSecretStoreExecResultFunc) SetDefaultReturn(r0 sql.Result, r1 error) {
	f.SetDefaultHook(func(context.Context, *sqlf.Query) (sql.Result, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExecutorSecretStoreExecResultFunc) PushReturn(r0 sql.Result, r1 error) {
	f.PushHook(func(context.Context, *sqlf.Query) (sql.Result, error) {
		return r0, r1
	})
}

func (f *ExecutorSecretStoreExecResultFunc) nextHook() func(context.Context, *sqlf.Query) (sql.Result, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExecutorSecretStoreExecResultFunc) appendCall(r0 ExecutorSecretStoreExecResultFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExecutorSecretStoreExecResultFuncCall
// objects describing the invocations of this function.
func (f *ExecutorSecretStoreExecResultFunc) History() []ExecutorSecretStoreExecResultFuncCall {
	f.mutex.Lock()
	history := make([]ExecutorSecretStoreExecResultFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExecutorSecretStoreExecResultFuncCall is an object that describes an
// invocation of method ExecResult on an instance of
// MockExecutorSecretStore.
type ExecutorSecretStoreExecResultFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sqlf.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 sql.Result
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExecutorSecretStoreExecResultFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExecutorSecretStoreExecResultFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExecutorSecretStoreGetByIDFunc describes the behavior when the GetByID
// method of the parent MockExecutorSecretStore instance is invoked.
type ExecutorSecretStoreGetByIDFunc struct {
	defaultHook func(context.Context, ExecutorSecretScope, int64) (*ExecutorSecret, error)
	hooks       []func(context.Context, ExecutorSecretScope, int64) (*ExecutorSecret, error)
	history     []ExecutorSecretStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExecutorSecretStore) GetByID(v0 context.Context, v1 ExecutorSecretScope, v2 int64) (*ExecutorSecret, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1, v2)
	m.GetByIDFunc.appendCall(ExecutorSecretStoreGetByIDFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockExecutorSecretStore instance is invoked and the hook queue
// is empty.
func (f *ExecutorSecretStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, ExecutorSecretScope, int64) (*ExecutorSecret, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockExecutorSecretStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExecutorSecretStoreGetByIDFunc) PushHook(hook func(context.Context, ExecutorSecretScope, int64) (*ExecutorSecret, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExecutorSecretStoreGetByIDFunc) SetDefaultReturn(r0 *ExecutorSecret, r1 error) {
	f.SetDefaultHook(func(context.Context, ExecutorSecretScope, int64) (*ExecutorSecret, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExecutorSecretStoreGetByIDFunc) PushReturn(r0 *ExecutorSecret, r1 error) {
	f.PushHook(func(context.Context, ExecutorSecretScope, int64) (*ExecutorSecret, error) {
		return r0, r1
	})
}

func (f *ExecutorSecretStoreGetByIDFunc) nextHook() func(context.Context, ExecutorSecretScope, int64) (*ExecutorSecret, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExecutorSecretStoreGetByIDFunc) appendCall(r0 ExecutorSecretStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExecutorSecretStoreGetByIDFuncCall objects
// describing the invocations of this function.
func (f *ExecutorSecretStoreGetByIDFunc) History() []ExecutorSecretStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]ExecutorSecretStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExecutorSecretStoreGetByIDFuncCall is an object that describes an
// invocation of method GetByID on an instance of MockExecutorSecretStore.
type ExecutorSecretStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ExecutorSecretScope
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *ExecutorSecret
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExecutorSecretStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExecutorSecretStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExecutorSecretStoreHandleFunc describes the behavior when the Handle
// method of the parent MockExecutorSecretStore instance is invoked.
type ExecutorSecretStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []ExecutorSecretStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExecutorSecretStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(ExecutorSecretStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockExecutorSecretStore instance is invoked and the hook queue is
// empty.
func (f *ExecutorSecretStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockExecutorSecretStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExecutorSecretStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExecutorSecretStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExecutorSecretStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *ExecutorSecretStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExecutorSecretStoreHandleFunc) appendCall(r0 ExecutorSecretStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExecutorSecretStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *ExecutorSecretStoreHandleFunc) History() []ExecutorSecretStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]ExecutorSecretStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExecutorSecretStoreHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of MockExecutorSecretStore.
type ExecutorSecretStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExecutorSecretStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExecutorSecretStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExecutorSecretStoreListFunc describes the behavior when the List method
// of the parent MockExecutorSecretStore instance is invoked.
type ExecutorSecretStoreListFunc struct {
	defaultHook func(context.Context, ExecutorSecretScope, ExecutorSecretsListOpts) ([]*ExecutorSecret, int, error)
	hooks       []func(context.Context, ExecutorSecretScope, ExecutorSecretsListOpts) ([]*ExecutorSecret, int, error)
	history     []ExecutorSecretStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExecutorSecretStore) List(v0 context.Context, v1 ExecutorSecretScope, v2 ExecutorSecretsListOpts) ([]*ExecutorSecret, int, error) {
	r0, r1, r2 := m.ListFunc.nextHook()(v0, v1, v2)
	m.ListFunc.appendCall(ExecutorSecretStoreListFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockExecutorSecretStore instance is invoked and the hook queue is
// empty.
func (f *ExecutorSecretStoreListFunc) SetDefaultHook(hook func(context.Context, ExecutorSecretScope, ExecutorSecretsListOpts) ([]*ExecutorSecret, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockExecutorSecretStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExecutorSecretStoreListFunc) PushHook(hook func(context.Context, ExecutorSecretScope, ExecutorSecretsListOpts) ([]*ExecutorSecret, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExecutorSecretStoreListFunc) SetDefaultReturn(r0 []*ExecutorSecret, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, ExecutorSecretScope, ExecutorSecretsListOpts) ([]*ExecutorSecret, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExecutorSecretStoreListFunc) PushReturn(r0 []*ExecutorSecret, r1 int, r2 error) {
	f.PushHook(func(context.Context, ExecutorSecretScope, ExecutorSecretsListOpts) ([]*ExecutorSecret, int, error) {
		return r0, r1, r2
	})
}

func (f *ExecutorSecretStoreListFunc) nextHook() func(context.Context, ExecutorSecretScope, ExecutorSecretsListOpts) ([]*ExecutorSecret, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExecutorSecretStoreListFunc) appendCall(r0 ExecutorSecretStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExecutorSecretStoreListFuncCall objects
// describing the invocations of this function.
func (f *ExecutorSecretStoreListFunc) History() []ExecutorSecretStoreListFuncCall {
	f.mutex.Lock()
	history := make([]ExecutorSecretStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExecutorSecretStoreListFuncCall is an object that describes an invocation
// of method List on an instance of MockExecutorSecretStore.
type ExecutorSecretStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ExecutorSecretScope
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 ExecutorSecretsListOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*ExecutorSecret
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExecutorSecretStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExecutorSecretStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ExecutorSecretStoreUpdateFunc describes the behavior when the Update
// method of the parent MockExecutorSecretStore instance is invoked.
type ExecutorSecretStoreUpdateFunc struct {
	defaultHook func(context.Context, ExecutorSecretScope, *ExecutorSecret, string) error
	hooks       []func(context.Context, ExecutorSecretScope, *ExecutorSecret, string) error
	history     []ExecutorSecretStoreUpdateFuncCall
	mutex       sync.Mutex
}

// Update delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExecutorSecretStore) Update(v0 context.Context, v1 ExecutorSecretScope, v2 *ExecutorSecret, v3 string) error {
	r0 := m.UpdateFunc.nextHook()(v0, v1, v2, v3)
	m.UpdateFunc.appendCall(ExecutorSecretStoreUpdateFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Update method of the
// parent MockExecutorSecretStore instance is invoked and the hook queue is
// empty.
func (f *ExecutorSecretStoreUpdateFunc) SetDefaultHook(hook func(context.Context, ExecutorSecretScope, *ExecutorSecret, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Update method of the parent MockExecutorSecretStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExecutorSecretStoreUpdateFunc) PushHook(hook func(context.Context, ExecutorSecretScope, *ExecutorSecret, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExecutorSecretStoreUpdateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ExecutorSecretScope, *ExecutorSecret, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExecutorSecretStoreUpdateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ExecutorSecretScope, *ExecutorSecret, string) error {
		return r0
	})
}

func (f *ExecutorSecretStoreUpdateFunc) nextHook() func(context.Context, ExecutorSecretScope, *ExecutorSecret, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExecutorSecretStoreUpdateFunc) appendCall(r0 ExecutorSecretStoreUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExecutorSecretStoreUpdateFuncCall objects
// describing the invocations of this function.
func (f *ExecutorSecretStoreUpdateFunc) History() []ExecutorSecretStoreUpdateFuncCall {
	f.mutex.Lock()
	history := make([]ExecutorSecretStoreUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExecutorSecretStoreUpdateFuncCall is an object that describes an
// invocation of method Update on an instance of MockExecutorSecretStore.
type ExecutorSecretStoreUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ExecutorSecretScope
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *ExecutorSecret
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExecutorSecretStoreUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExecutorSecretStoreUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExecutorSecretStoreWithFunc describes the behavior when the With method
// of the parent MockExecutorSecretStore instance is invoked.
type ExecutorSecretStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) ExecutorSecretStore
	hooks       []func(basestore.ShareableStore) ExecutorSecretStore
	history     []ExecutorSecretStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExecutorSecretStore) With(v0 basestore.ShareableStore) ExecutorSecretStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(ExecutorSecretStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockExecutorSecretStore instance is invoked and the hook queue is
// empty.
func (f *ExecutorSecretStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) ExecutorSecretStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockExecutorSecretStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExecutorSecretStoreWithFunc) PushHook(hook func(basestore.ShareableStore) ExecutorSecretStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExecutorSecretStoreWithFunc) SetDefaultReturn(r0 ExecutorSecretStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) ExecutorSecretStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExecutorSecretStoreWithFunc) PushReturn(r0 ExecutorSecretStore) {
	f.PushHook(func(basestore.ShareableStore) ExecutorSecretStore {
		return r0
	})
}

func (f *ExecutorSecretStoreWithFunc) nextHook() func(basestore.ShareableStore) ExecutorSecretStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExecutorSecretStoreWithFunc) appendCall(r0 ExecutorSecretStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExecutorSecretStoreWithFuncCall objects
// describing the invocations of this function.
func (f *ExecutorSecretStoreWithFunc) History() []ExecutorSecretStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]ExecutorSecretStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExecutorSecretStoreWithFuncCall is an object that describes an invocation
// of method With on an instance of MockExecutorSecretStore.
type ExecutorSecretStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 ExecutorSecretStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExecutorSecretStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExecutorSecretStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExecutorSecretStoreWithTransactFunc describes the behavior when the
// WithTransact method of the parent MockExecutorSecretStore instance is
// invoked.
type ExecutorSecretStoreWithTransactFunc struct {
	defaultHook func(context.Context, func(ExecutorSecretStore) error) error
	hooks       []func(context.Context, func(ExecutorSecretStore) error) error
	history     []ExecutorSecretStoreWithTransactFuncCall
	mutex       sync.Mutex
}

// WithTransact delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockExecutorSecretStore) WithTransact(v0 context.Context, v1 func(ExecutorSecretStore) error) error {
	r0 := m.WithTransactFunc.nextHook()(v0, v1)
	m.WithTransactFunc.appendCall(ExecutorSecretStoreWithTransactFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithTransact method
// of the parent MockExecutorSecretStore instance is invoked and the hook
// queue is empty.
func (f *ExecutorSecretStoreWithTransactFunc) SetDefaultHook(hook func(context.Context, func(ExecutorSecretStore) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithTransact method of the parent MockExecutorSecretStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ExecutorSecretStoreWithTransactFunc) PushHook(hook func(context.Context, func(ExecutorSecretStore) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExecutorSecretStoreWithTransactFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, func(ExecutorSecretStore) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExecutorSecretStoreWithTransactFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, func(ExecutorSecretStore) error) error {
		return r0
	})
}

func (f *ExecutorSecretStoreWithTransactFunc) nextHook() func(context.Context, func(ExecutorSecretStore) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExecutorSecretStoreWithTransactFunc) appendCall(r0 ExecutorSecretStoreWithTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExecutorSecretStoreWithTransactFuncCall
// objects describing the invocations of this function.
func (f *ExecutorSecretStoreWithTransactFunc) History() []ExecutorSecretStoreWithTransactFuncCall {
	f.mutex.Lock()
	history := make([]ExecutorSecretStoreWithTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExecutorSecretStoreWithTransactFuncCall is an object that describes an
// invocation of method WithTransact on an instance of
// MockExecutorSecretStore.
type ExecutorSecretStoreWithTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 func(ExecutorSecretStore) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExecutorSecretStoreWithTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExecutorSecretStoreWithTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockExecutorStore is a mock implementation of the ExecutorStore interface
// (from the package github.com/sourcegraph/sourcegraph/internal/database)
// used for unit testing.
type MockExecutorStore struct {
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *ExecutorStoreCountFunc
	// DeleteInactiveHeartbeatsFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteInactiveHeartbeats.
	DeleteInactiveHeartbeatsFunc *ExecutorStoreDeleteInactiveHeartbeatsFunc
	// GetByHostnameFunc is an instance of a mock function object
	// controlling the behavior of the method GetByHostname.
	GetByHostnameFunc *ExecutorStoreGetByHostnameFunc
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *ExecutorStoreGetByIDFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *ExecutorStoreHandleFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *ExecutorStoreListFunc
	// QueryFunc is an instance of a mock function object controlling the
	// behavior of the method Query.
	QueryFunc *ExecutorStoreQueryFunc
	// UpsertHeartbeatFunc is an instance of a mock function object
	// controlling the behavior of the method UpsertHeartbeat.
	UpsertHeartbeatFunc *ExecutorStoreUpsertHeartbeatFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *ExecutorStoreWithFunc
	// WithTransactFunc is an instance of a mock function object controlling
	// the behavior of the method WithTransact.
	WithTransactFunc *ExecutorStoreWithTransactFunc
}

// NewMockExecutorStore creates a new mock of the ExecutorStore interface.
// All methods return zero values for all results, unless overwritten.
func NewMockExecutorStore() *MockExecutorStore {
	return &MockExecutorStore{
		CountFunc: &ExecutorStoreCountFunc{
			defaultHook: func(context.Context, ExecutorStoreListOptions) (r0 int, r1 error) {
				return
			},
		},
		DeleteInactiveHeartbeatsFunc: &ExecutorStoreDeleteInactiveHeartbeatsFunc{
			defaultHook: func(context.Context, time.Duration) (r0 error) {
				return
			},
		},
		GetByHostnameFunc: &ExecutorStoreGetByHostnameFunc{
			defaultHook: func(context.Context, string) (r0 types.Executor, r1 bool, r2 error) {
				return
			},
		},
		GetByIDFunc: &ExecutorStoreGetByIDFunc{
			defaultHook: func(context.Context, int) (r0 types.Executor, r1 bool, r2 error) {
				return
			},
		},
		HandleFunc: &ExecutorStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		ListFunc: &ExecutorStoreListFunc{
			defaultHook: func(context.Context, ExecutorStoreListOptions) (r0 []types.Executor, r1 error) {
				return
			},
		},
		QueryFunc: &ExecutorStoreQueryFunc{
			defaultHook: func(context.Context, *sqlf.Query) (r0 *sql.Rows, r1 error) {
				return
			},
		},
		UpsertHeartbeatFunc: &ExecutorStoreUpsertHeartbeatFunc{
			defaultHook: func(context.Context, types.Executor) (r0 error) {
				return
			},
		},
		WithFunc: &ExecutorStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 ExecutorStore) {
				return
			},
		},
		WithTransactFunc: &ExecutorStoreWithTransactFunc{
			defaultHook: func(context.Context, func(ExecutorStore) error) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockExecutorStore creates a new mock of the ExecutorStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockExecutorStore() *MockExecutorStore {
	return &MockExecutorStore{
		CountFunc: &ExecutorStoreCountFunc{
			defaultHook: func(context.Context, ExecutorStoreListOptions) (int, error) {
				panic("unexpected invocation of MockExecutorStore.Count")
			},
		},
		DeleteInactiveHeartbeatsFunc: &ExecutorStoreDeleteInactiveHeartbeatsFunc{
			defaultHook: func(context.Context, time.Duration) error {
				panic("unexpected invocation of MockExecutorStore.DeleteInactiveHeartbeats")
			},
		},
		GetByHostnameFunc: &ExecutorStoreGetByHostnameFunc{
			defaultHook: func(context.Context, string) (types.Executor, bool, error) {
				panic("unexpected invocation of MockExecutorStore.GetByHostname")
			},
		},
		GetByIDFunc: &ExecutorStoreGetByIDFunc{
			defaultHook: func(context.Context, int) (types.Executor, bool, error) {
				panic("unexpected invocation of MockExecutorStore.GetByID")
			},
		},
		HandleFunc: &ExecutorStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockExecutorStore.Handle")
			},
		},
		ListFunc: &ExecutorStoreListFunc{
			defaultHook: func(context.Context, ExecutorStoreListOptions) ([]types.Executor, error) {
				panic("unexpected invocation of MockExecutorStore.List")
			},
		},
		QueryFunc: &ExecutorStoreQueryFunc{
			defaultHook: func(context.Context, *sqlf.Query) (*sql.Rows, error) {
				panic("unexpected invocation of MockExecutorStore.Query")
			},
		},
		UpsertHeartbeatFunc: &ExecutorStoreUpsertHeartbeatFunc{
			defaultHook: func(context.Context, types.Executor) error {
				panic("unexpected invocation of MockExecutorStore.UpsertHeartbeat")
			},
		},
		WithFunc: &ExecutorStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) ExecutorStore {
				panic("unexpected invocation of MockExecutorStore.With")
			},
		},
		WithTransactFunc: &ExecutorStoreWithTransactFunc{
			defaultHook: func(context.Context, func(ExecutorStore) error) error {
				panic("unexpected invocation of MockExecutorStore.WithTransact")
			},
		},
	}
}

// NewMockExecutorStoreFrom creates a new mock of the MockExecutorStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockExecutorStoreFrom(i ExecutorStore) *MockExecutorStore {
	return &MockExecutorStore{
		CountFunc: &ExecutorStoreCountFunc{
			defaultHook: i.Count,
		},
		DeleteInactiveHeartbeatsFunc: &ExecutorStoreDeleteInactiveHeartbeatsFunc{
			defaultHook: i.DeleteInactiveHeartbeats,
		},
		GetByHostnameFunc: &ExecutorStoreGetByHostnameFunc{
			defaultHook: i.GetByHostname,
		},
		GetByIDFunc: &ExecutorStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		HandleFunc: &ExecutorStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListFunc: &ExecutorStoreListFunc{
			defaultHook: i.List,
		},
		QueryFunc: &ExecutorStoreQueryFunc{
			defaultHook: i.Query,
		},
		UpsertHeartbeatFunc: &ExecutorStoreUpsertHeartbeatFunc{
			defaultHook: i.UpsertHeartbeat,
		},
		WithFunc: &ExecutorStoreWithFunc{
			defaultHook: i.With,
		},
		WithTransactFunc: &ExecutorStoreWithTransactFunc{
			defaultHook: i.WithTransact,
		},
	}
}

// ExecutorStoreCountFunc describes the behavior when the Count method of
// the parent MockExecutorStore instance is invoked.
type ExecutorStoreCountFunc struct {
	defaultHook func(context.Context, ExecutorStoreListOptions) (int, error)
	hooks       []func(context.Context, ExecutorStoreListOptions) (int, error)
	history     []ExecutorStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExecutorStore) Count(v0 context.Context, v1 ExecutorStoreListOptions) (int, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(ExecutorStoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockExecutorStore instance is invoked and the hook queue is empty.
func (f *ExecutorStoreCountFunc) SetDefaultHook(hook func(context.Context, ExecutorStoreListOptions) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockExecutorStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ExecutorStoreCountFunc) PushHook(hook func(context.Context, ExecutorStoreListOptions) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExecutorStoreCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, ExecutorStoreListOptions) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExecutorStoreCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, ExecutorStoreListOptions) (int, error) {
		return r0, r1
	})
}

func (f *ExecutorStoreCountFunc) nextHook() func(context.Context, ExecutorStoreListOptions) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExecutorStoreCountFunc) appendCall(r0 ExecutorStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExecutorStoreCountFuncCall objects
// describing the invocations of this function.
func (f *ExecutorStoreCountFunc) History() []ExecutorStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]ExecutorStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExecutorStoreCountFuncCall is an object that describes an invocation of
// method Count on an instance of MockExecutorStore.
type ExecutorStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ExecutorStoreListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExecutorStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExecutorStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExecutorStoreDeleteInactiveHeartbeatsFunc describes the behavior when the
// DeleteInactiveHeartbeats method of the parent MockExecutorStore instance
// is invoked.
type ExecutorStoreDeleteInactiveHeartbeatsFunc struct {
	defaultHook func(context.Context, time.Duration) error
	hooks       []func(context.Context, time.Duration) error
	history     []ExecutorStoreDeleteInactiveHeartbeatsFuncCall
	mutex       sync.Mutex
}

// DeleteInactiveHeartbeats delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockExecutorStore) DeleteInactiveHeartbeats(v0 context.Context, v1 time.Duration) error {
	r0 := m.DeleteInactiveHeartbeatsFunc.nextHook()(v0, v1)
	m.DeleteInactiveHeartbeatsFunc.appendCall(ExecutorStoreDeleteInactiveHeartbeatsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// DeleteInactiveHeartbeats method of the parent MockExecutorStore instance
// is invoked and the hook queue is empty.
func (f *ExecutorStoreDeleteInactiveHeartbeatsFunc) SetDefaultHook(hook func(context.Context, time.Duration) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteInactiveHeartbeats method of the parent MockExecutorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ExecutorStoreDeleteInactiveHeartbeatsFunc) PushHook(hook func(context.Context, time.Duration) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExecutorStoreDeleteInactiveHeartbeatsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, time.Duration) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExecutorStoreDeleteInactiveHeartbeatsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, time.Duration) error {
		return r0
	})
}

func (f *ExecutorStoreDeleteInactiveHeartbeatsFunc) nextHook() func(context.Context, time.Duration) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExecutorStoreDeleteInactiveHeartbeatsFunc) appendCall(r0 ExecutorStoreDeleteInactiveHeartbeatsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ExecutorStoreDeleteInactiveHeartbeatsFuncCall objects describing the
// invocations of this function.
func (f *ExecutorStoreDeleteInactiveHeartbeatsFunc) History() []ExecutorStoreDeleteInactiveHeartbeatsFuncCall {
	f.mutex.Lock()
	history := make([]ExecutorStoreDeleteInactiveHeartbeatsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExecutorStoreDeleteInactiveHeartbeatsFuncCall is an object that describes
// an invocation of method DeleteInactiveHeartbeats on an instance of
// MockExecutorStore.
type ExecutorStoreDeleteInactiveHeartbeatsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Duration
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExecutorStoreDeleteInactiveHeartbeatsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExecutorStoreDeleteInactiveHeartbeatsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExecutorStoreGetByHostnameFunc describes the behavior when the
// GetByHostname method of the parent MockExecutorStore instance is invoked.
type ExecutorStoreGetByHostnameFunc struct {
	defaultHook func(context.Context, string) (types.Executor, bool, error)
	hooks       []func(context.Context, string) (types.Executor, bool, error)
	history     []ExecutorStoreGetByHostnameFuncCall
	mutex       sync.Mutex
}

// GetByHostname delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockExecutorStore) GetByHostname(v0 context.Context, v1 string) (types.Executor, bool, error) {
	r0, r1, r2 := m.GetByHostnameFunc.nextHook()(v0, v1)
	m.GetByHostnameFunc.appendCall(ExecutorStoreGetByHostnameFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetByHostname method
// of the parent MockExecutorStore instance is invoked and the hook queue is
// empty.
func (f *ExecutorStoreGetByHostnameFunc) SetDefaultHook(hook func(context.Context, string) (types.Executor, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByHostname method of the parent MockExecutorStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExecutorStoreGetByHostnameFunc) PushHook(hook func(context.Context, string) (types.Executor, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExecutorStoreGetByHostnameFunc) SetDefaultReturn(r0 types.Executor, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, string) (types.Executor, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExecutorStoreGetByHostnameFunc) PushReturn(r0 types.Executor, r1 bool, r2 error) {
	f.PushHook(func(context.Context, string) (types.Executor, bool, error) {
		return r0, r1, r2
	})
}

func (f *ExecutorStoreGetByHostnameFunc) nextHook() func(context.Context, string) (types.Executor, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExecutorStoreGetByHostnameFunc) appendCall(r0 ExecutorStoreGetByHostnameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExecutorStoreGetByHostnameFuncCall objects
// describing the invocations of this function.
func (f *ExecutorStoreGetByHostnameFunc) History() []ExecutorStoreGetByHostnameFuncCall {
	f.mutex.Lock()
	history := make([]ExecutorStoreGetByHostnameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExecutorStoreGetByHostnameFuncCall is an object that describes an
// invocation of method GetByHostname on an instance of MockExecutorStore.
type ExecutorStoreGetByHostnameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 types.Executor
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExecutorStoreGetByHostnameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExecutorStoreGetByHostnameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ExecutorStoreGetByIDFunc describes the behavior when the GetByID method
// of the parent MockExecutorStore instance is invoked.
type ExecutorStoreGetByIDFunc struct {
	defaultHook func(context.Context, int) (types.Executor, bool, error)
	hooks       []func(context.Context, int) (types.Executor, bool, error)
	history     []ExecutorStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExecutorStore) GetByID(v0 context.Context, v1 int) (types.Executor, bool, error) {
	r0, r1, r2 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(ExecutorStoreGetByIDFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockExecutorStore instance is invoked and the hook queue is
// empty.
func (f *ExecutorStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int) (types.Executor, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockExecutorStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ExecutorStoreGetByIDFunc) PushHook(hook func(context.Context, int) (types.Executor, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExecutorStoreGetByIDFunc) SetDefaultReturn(r0 types.Executor, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, int) (types.Executor, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExecutorStoreGetByIDFunc) PushReturn(r0 types.Executor, r1 bool, r2 error) {
	f.PushHook(func(context.Context, int) (types.Executor, bool, error) {
		return r0, r1, r2
	})
}

func (f *ExecutorStoreGetByIDFunc) nextHook() func(context.Context, int) (types.Executor, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExecutorStoreGetByIDFunc) appendCall(r0 ExecutorStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExecutorStoreGetByIDFuncCall objects
// describing the invocations of this function.
func (f *ExecutorStoreGetByIDFunc) History() []ExecutorStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]ExecutorStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExecutorStoreGetByIDFuncCall is an object that describes an invocation of
// method GetByID on an instance of MockExecutorStore.
type ExecutorStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 types.Executor
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExecutorStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExecutorStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ExecutorStoreHandleFunc describes the behavior when the Handle method of
// the parent MockExecutorStore instance is invoked.
type ExecutorStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []ExecutorStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExecutorStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(ExecutorStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockExecutorStore instance is invoked and the hook queue is empty.
func (f *ExecutorStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockExecutorStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ExecutorStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExecutorStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExecutorStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *ExecutorStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExecutorStoreHandleFunc) appendCall(r0 ExecutorStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExecutorStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *ExecutorStoreHandleFunc) History() []ExecutorStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]ExecutorStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExecutorStoreHandleFuncCall is an object that describes an invocation of
// method Handle on an instance of MockExecutorStore.
type ExecutorStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExecutorStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExecutorStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExecutorStoreListFunc describes the behavior when the List method of the
// parent MockExecutorStore instance is invoked.
type ExecutorStoreListFunc struct {
	defaultHook func(context.Context, ExecutorStoreListOptions) ([]types.Executor, error)
	hooks       []func(context.Context, ExecutorStoreListOptions) ([]types.Executor, error)
	history     []ExecutorStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExecutorStore) List(v0 context.Context, v1 ExecutorStoreListOptions) ([]types.Executor, error) {
	r0, r1 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(ExecutorStoreListFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockExecutorStore instance is invoked and the hook queue is empty.
func (f *ExecutorStoreListFunc) SetDefaultHook(hook func(context.Context, ExecutorStoreListOptions) ([]types.Executor, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockExecutorStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ExecutorStoreListFunc) PushHook(hook func(context.Context, ExecutorStoreListOptions) ([]types.Executor, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExecutorStoreListFunc) SetDefaultReturn(r0 []types.Executor, r1 error) {
	f.SetDefaultHook(func(context.Context, ExecutorStoreListOptions) ([]types.Executor, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExecutorStoreListFunc) PushReturn(r0 []types.Executor, r1 error) {
	f.PushHook(func(context.Context, ExecutorStoreListOptions) ([]types.Executor, error) {
		return r0, r1
	})
}

func (f *ExecutorStoreListFunc) nextHook() func(context.Context, ExecutorStoreListOptions) ([]types.Executor, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExecutorStoreListFunc) appendCall(r0 ExecutorStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExecutorStoreListFuncCall objects
// describing the invocations of this function.
func (f *ExecutorStoreListFunc) History() []ExecutorStoreListFuncCall {
	f.mutex.Lock()
	history := make([]ExecutorStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExecutorStoreListFuncCall is an object that describes an invocation of
// method List on an instance of MockExecutorStore.
type ExecutorStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ExecutorStoreListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.Executor
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExecutorStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExecutorStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExecutorStoreQueryFunc describes the behavior when the Query method of
// the parent MockExecutorStore instance is invoked.
type ExecutorStoreQueryFunc struct {
	defaultHook func(context.Context, *sqlf.Query) (*sql.Rows, error)
	hooks       []func(context.Context, *sqlf.Query) (*sql.Rows, error)
	history     []ExecutorStoreQueryFuncCall
	mutex       sync.Mutex
}

// Query delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExecutorStore) Query(v0 context.Context, v1 *sqlf.Query) (*sql.Rows, error) {
	r0, r1 := m.QueryFunc.nextHook()(v0, v1)
	m.QueryFunc.appendCall(ExecutorStoreQueryFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Query method of the
// parent MockExecutorStore instance is invoked and the hook queue is empty.
func (f *ExecutorStoreQueryFunc) SetDefaultHook(hook func(context.Context, *sqlf.Query) (*sql.Rows, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Query method of the parent MockExecutorStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ExecutorStoreQueryFunc) PushHook(hook func(context.Context, *sqlf.Query) (*sql.Rows, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExecutorStoreQueryFunc) SetDefaultReturn(r0 *sql.Rows, r1 error) {
	f.SetDefaultHook(func(context.Context, *sqlf.Query) (*sql.Rows, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExecutorStoreQueryFunc) PushReturn(r0 *sql.Rows, r1 error) {
	f.PushHook(func(context.Context, *sqlf.Query) (*sql.Rows, error) {
		return r0, r1
	})
}

func (f *ExecutorStoreQueryFunc) nextHook() func(context.Context, *sqlf.Query) (*sql.Rows, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExecutorStoreQueryFunc) appendCall(r0 ExecutorStoreQueryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExecutorStoreQueryFuncCall objects
// describing the invocations of this function.
func (f *ExecutorStoreQueryFunc) History() []ExecutorStoreQueryFuncCall {
	f.mutex.Lock()
	history := make([]ExecutorStoreQueryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExecutorStoreQueryFuncCall is an object that describes an invocation of
// method Query on an instance of MockExecutorStore.
type ExecutorStoreQueryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sqlf.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *sql.Rows
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExecutorStoreQueryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExecutorStoreQueryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExecutorStoreUpsertHeartbeatFunc describes the behavior when the
// UpsertHeartbeat method of the parent MockExecutorStore instance is
// invoked.
type ExecutorStoreUpsertHeartbeatFunc struct {
	defaultHook func(context.Context, types.Executor) error
	hooks       []func(context.Context, types.Executor) error
	history     []ExecutorStoreUpsertHeartbeatFuncCall
	mutex       sync.Mutex
}

// UpsertHeartbeat delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockExecutorStore) UpsertHeartbeat(v0 context.Context, v1 types.Executor) error {
	r0 := m.UpsertHeartbeatFunc.nextHook()(v0, v1)
	m.UpsertHeartbeatFunc.appendCall(ExecutorStoreUpsertHeartbeatFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UpsertHeartbeat
// method of the parent MockExecutorStore instance is invoked and the hook
// queue is empty.
func (f *ExecutorStoreUpsertHeartbeatFunc) SetDefaultHook(hook func(context.Context, types.Executor) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpsertHeartbeat method of the parent MockExecutorStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ExecutorStoreUpsertHeartbeatFunc) PushHook(hook func(context.Context, types.Executor) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExecutorStoreUpsertHeartbeatFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, types.Executor) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExecutorStoreUpsertHeartbeatFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, types.Executor) error {
		return r0
	})
}

func (f *ExecutorStoreUpsertHeartbeatFunc) nextHook() func(context.Context, types.Executor) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExecutorStoreUpsertHeartbeatFunc) appendCall(r0 ExecutorStoreUpsertHeartbeatFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExecutorStoreUpsertHeartbeatFuncCall
// objects describing the invocations of this function.
func (f *ExecutorStoreUpsertHeartbeatFunc) History() []ExecutorStoreUpsertHeartbeatFuncCall {
	f.mutex.Lock()
	history := make([]ExecutorStoreUpsertHeartbeatFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExecutorStoreUpsertHeartbeatFuncCall is an object that describes an
// invocation of method UpsertHeartbeat on an instance of MockExecutorStore.
type ExecutorStoreUpsertHeartbeatFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 types.Executor
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExecutorStoreUpsertHeartbeatFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExecutorStoreUpsertHeartbeatFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExecutorStoreWithFunc describes the behavior when the With method of the
// parent MockExecutorStore instance is invoked.
type ExecutorStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) ExecutorStore
	hooks       []func(basestore.ShareableStore) ExecutorStore
	history     []ExecutorStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExecutorStore) With(v0 basestore.ShareableStore) ExecutorStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(ExecutorStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockExecutorStore instance is invoked and the hook queue is empty.
func (f *ExecutorStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) ExecutorStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockExecutorStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ExecutorStoreWithFunc) PushHook(hook func(basestore.ShareableStore) ExecutorStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExecutorStoreWithFunc) SetDefaultReturn(r0 ExecutorStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) ExecutorStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExecutorStoreWithFunc) PushReturn(r0 ExecutorStore) {
	f.PushHook(func(basestore.ShareableStore) ExecutorStore {
		return r0
	})
}

func (f *ExecutorStoreWithFunc) nextHook() func(basestore.ShareableStore) ExecutorStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExecutorStoreWithFunc) appendCall(r0 ExecutorStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExecutorStoreWithFuncCall objects
// describing the invocations of this function.
func (f *ExecutorStoreWithFunc) History() []ExecutorStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]ExecutorStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExecutorStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockExecutorStore.
type ExecutorStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 ExecutorStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExecutorStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExecutorStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExecutorStoreWithTransactFunc describes the behavior when the
// WithTransact method of the parent MockExecutorStore instance is invoked.
type ExecutorStoreWithTransactFunc struct {
	defaultHook func(context.Context, func(ExecutorStore) error) error
	hooks       []func(context.Context, func(ExecutorStore) error) error
	history     []ExecutorStoreWithTransactFuncCall
	mutex       sync.Mutex
}

// WithTransact delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockExecutorStore) WithTransact(v0 context.Context, v1 func(ExecutorStore) error) error {
	r0 := m.WithTransactFunc.nextHook()(v0, v1)
	m.WithTransactFunc.appendCall(ExecutorStoreWithTransactFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithTransact method
// of the parent MockExecutorStore instance is invoked and the hook queue is
// empty.
func (f *ExecutorStoreWithTransactFunc) SetDefaultHook(hook func(context.Context, func(ExecutorStore) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithTransact method of the parent MockExecutorStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExecutorStoreWithTransactFunc) PushHook(hook func(context.Context, func(ExecutorStore) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExecutorStoreWithTransactFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, func(ExecutorStore) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExecutorStoreWithTransactFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, func(ExecutorStore) error) error {
		return r0
	})
}

func (f *ExecutorStoreWithTransactFunc) nextHook() func(context.Context, func(ExecutorStore) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExecutorStoreWithTransactFunc) appendCall(r0 ExecutorStoreWithTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExecutorStoreWithTransactFuncCall objects
// describing the invocations of this function.
func (f *ExecutorStoreWithTransactFunc) History() []ExecutorStoreWithTransactFuncCall {
	f.mutex.Lock()
	history := make([]ExecutorStoreWithTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExecutorStoreWithTransactFuncCall is an object that describes an
// invocation of method WithTransact on an instance of MockExecutorStore.
type ExecutorStoreWithTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 func(ExecutorStore) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExecutorStoreWithTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExecutorStoreWithTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockExternalServiceStore is a mock implementation of the
// ExternalServiceStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockExternalServiceStore struct {
	// CancelSyncJobFunc is an instance of a mock function object
	// controlling the behavior of the method CancelSyncJob.
	CancelSyncJobFunc *ExternalServiceStoreCancelSyncJobFunc
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *ExternalServiceStoreCountFunc
	// CountSyncJobsFunc is an instance of a mock function object
	// controlling the behavior of the method CountSyncJobs.
	CountSyncJobsFunc *ExternalServiceStoreCountSyncJobsFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *ExternalServiceStoreCreateFunc
	// DeleteFunc is an instance of a mock function object controlling the
	// behavior of the method Delete.
	DeleteFunc *ExternalServiceStoreDeleteFunc
	// DistinctKindsFunc is an instance of a mock function object
	// controlling the behavior of the method DistinctKinds.
	DistinctKindsFunc *ExternalServiceStoreDistinctKindsFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *ExternalServiceStoreDoneFunc
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *ExternalServiceStoreGetByIDFunc
	// GetLastSyncErrorFunc is an instance of a mock function object
	// controlling the behavior of the method GetLastSyncError.
	GetLastSyncErrorFunc *ExternalServiceStoreGetLastSyncErrorFunc
	// GetLatestSyncErrorsFunc is an instance of a mock function object
	// controlling the behavior of the method GetLatestSyncErrors.
	GetLatestSyncErrorsFunc *ExternalServiceStoreGetLatestSyncErrorsFunc
	// GetSyncJobByIDFunc is an instance of a mock function object
	// controlling the behavior of the method GetSyncJobByID.
	GetSyncJobByIDFunc *ExternalServiceStoreGetSyncJobByIDFunc
	// GetSyncJobsFunc is an instance of a mock function object controlling
	// the behavior of the method GetSyncJobs.
	GetSyncJobsFunc *ExternalServiceStoreGetSyncJobsFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *ExternalServiceStoreHandleFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *ExternalServiceStoreListFunc
	// ListReposFunc is an instance of a mock function object controlling
	// the behavior of the method ListRepos.
	ListReposFunc *ExternalServiceStoreListReposFunc
	// RepoCountFunc is an instance of a mock function object controlling
	// the behavior of the method RepoCount.
	RepoCountFunc *ExternalServiceStoreRepoCountFunc
	// SyncDueFunc is an instance of a mock function object controlling the
	// behavior of the method SyncDue.
	SyncDueFunc *ExternalServiceStoreSyncDueFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *ExternalServiceStoreTransactFunc
	// UpdateFunc is an instance of a mock function object controlling the
	// behavior of the method Update.
	UpdateFunc *ExternalServiceStoreUpdateFunc
	// UpdateSyncJobCountersFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateSyncJobCounters.
	UpdateSyncJobCountersFunc *ExternalServiceStoreUpdateSyncJobCountersFunc
	// UpsertFunc is an instance of a mock function object controlling the
	// behavior of the method Upsert.
	UpsertFunc *ExternalServiceStoreUpsertFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *ExternalServiceStoreWithFunc
	// WithEncryptionKeyFunc is an instance of a mock function object
	// controlling the behavior of the method WithEncryptionKey.
	WithEncryptionKeyFunc *ExternalServiceStoreWithEncryptionKeyFunc
}

// NewMockExternalServiceStore creates a new mock of the
// ExternalServiceStore interface. All methods return zero values for all
// results, unless overwritten.
func NewMockExternalServiceStore() *MockExternalServiceStore {
	return &MockExternalServiceStore{
		CancelSyncJobFunc: &ExternalServiceStoreCancelSyncJobFunc{
			defaultHook: func(context.Context, ExternalServicesCancelSyncJobOptions) (r0 error) {
				return
			},
		},
		CountFunc: &ExternalServiceStoreCountFunc{
			defaultHook: func(context.Context, ExternalServicesListOptions) (r0 int, r1 error) {
				return
			},
		},
		CountSyncJobsFunc: &ExternalServiceStoreCountSyncJobsFunc{
			defaultHook: func(context.Context, ExternalServicesGetSyncJobsOptions) (r0 int64, r1 error) {
				return
			},
		},
		CreateFunc: &ExternalServiceStoreCreateFunc{
			defaultHook: func(context.Context, func() *conf.Unified, *types.ExternalService) (r0 error) {
				return
			},
		},
		DeleteFunc: &ExternalServiceStoreDeleteFunc{
			defaultHook: func(context.Context, int64) (r0 error) {
				return
			},
		},
		DistinctKindsFunc: &ExternalServiceStoreDistinctKindsFunc{
			defaultHook: func(context.Context) (r0 []string, r1 error) {
				return
			},
		},
		DoneFunc: &ExternalServiceStoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		GetByIDFunc: &ExternalServiceStoreGetByIDFunc{
			defaultHook: func(context.Context, int64) (r0 *types.ExternalService, r1 error) {
				return
			},
		},
		GetLastSyncErrorFunc: &ExternalServiceStoreGetLastSyncErrorFunc{
			defaultHook: func(context.Context, int64) (r0 string, r1 error) {
				return
			},
		},
		GetLatestSyncErrorsFunc: &ExternalServiceStoreGetLatestSyncErrorsFunc{
			defaultHook: func(context.Context) (r0 []*SyncError, r1 error) {
				return
			},
		},
		GetSyncJobByIDFunc: &ExternalServiceStoreGetSyncJobByIDFunc{
			defaultHook: func(context.Context, int64) (r0 *types.ExternalServiceSyncJob, r1 error) {
				return
			},
		},
		GetSyncJobsFunc: &ExternalServiceStoreGetSyncJobsFunc{
			defaultHook: func(context.Context, ExternalServicesGetSyncJobsOptions) (r0 []*types.ExternalServiceSyncJob, r1 error) {
				return
			},
		},
		HandleFunc: &ExternalServiceStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		ListFunc: &ExternalServiceStoreListFunc{
			defaultHook: func(context.Context, ExternalServicesListOptions) (r0 []*types.ExternalService, r1 error) {
				return
			},
		},
		ListReposFunc: &ExternalServiceStoreListReposFunc{
			defaultHook: func(context.Context, ExternalServiceReposListOptions) (r0 []*types.ExternalServiceRepo, r1 error) {
				return
			},
		},
		RepoCountFunc: &ExternalServiceStoreRepoCountFunc{
			defaultHook: func(context.Context, int64) (r0 int32, r1 error) {
				return
			},
		},
		SyncDueFunc: &ExternalServiceStoreSyncDueFunc{
			defaultHook: func(context.Context, []int64, time.Duration) (r0 bool, r1 error) {
				return
			},
		},
		TransactFunc: &ExternalServiceStoreTransactFunc{
			defaultHook: func(context.Context) (r0 ExternalServiceStore, r1 error) {
				return
			},
		},
		UpdateFunc: &ExternalServiceStoreUpdateFunc{
			defaultHook: func(context.Context, []schema.AuthProviders, int64, *ExternalServiceUpdate) (r0 error) {
				return
			},
		},
		UpdateSyncJobCountersFunc: &ExternalServiceStoreUpdateSyncJobCountersFunc{
			defaultHook: func(context.Context, *types.ExternalServiceSyncJob) (r0 error) {
				return
			},
		},
		UpsertFunc: &ExternalServiceStoreUpsertFunc{
			defaultHook: func(context.Context, ...*types.ExternalService) (r0 error) {
				return
			},
		},
		WithFunc: &ExternalServiceStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 ExternalServiceStore) {
				return
			},
		},
		WithEncryptionKeyFunc: &ExternalServiceStoreWithEncryptionKeyFunc{
			defaultHook: func(encryption.Key) (r0 ExternalServiceStore) {
				return
			},
		},
	}
}

// NewStrictMockExternalServiceStore creates a new mock of the
// ExternalServiceStore interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockExternalServiceStore() *MockExternalServiceStore {
	return &MockExternalServiceStore{
		CancelSyncJobFunc: &ExternalServiceStoreCancelSyncJobFunc{
			defaultHook: func(context.Context, ExternalServicesCancelSyncJobOptions) error {
				panic("unexpected invocation of MockExternalServiceStore.CancelSyncJob")
			},
		},
		CountFunc: &ExternalServiceStoreCountFunc{
			defaultHook: func(context.Context, ExternalServicesListOptions) (int, error) {
				panic("unexpected invocation of MockExternalServiceStore.Count")
			},
		},
		CountSyncJobsFunc: &ExternalServiceStoreCountSyncJobsFunc{
			defaultHook: func(context.Context, ExternalServicesGetSyncJobsOptions) (int64, error) {
				panic("unexpected invocation of MockExternalServiceStore.CountSyncJobs")
			},
		},
		CreateFunc: &ExternalServiceStoreCreateFunc{
			defaultHook: func(context.Context, func() *conf.Unified, *types.ExternalService) error {
				panic("unexpected invocation of MockExternalServiceStore.Create")
			},
		},
		DeleteFunc: &ExternalServiceStoreDeleteFunc{
			defaultHook: func(context.Context, int64) error {
				panic("unexpected invocation of MockExternalServiceStore.Delete")
			},
		},
		DistinctKindsFunc: &ExternalServiceStoreDistinctKindsFunc{
			defaultHook: func(context.Context) ([]string, error) {
				panic("unexpected invocation of MockExternalServiceStore.DistinctKinds")
			},
		},
		DoneFunc: &ExternalServiceStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockExternalServiceStore.Done")
			},
		},
		GetByIDFunc: &ExternalServiceStoreGetByIDFunc{
			defaultHook: func(context.Context, int64) (*types.ExternalService, error) {
				panic("unexpected invocation of MockExternalServiceStore.GetByID")
			},
		},
		GetLastSyncErrorFunc: &ExternalServiceStoreGetLastSyncErrorFunc{
			defaultHook: func(context.Context, int64) (string, error) {
				panic("unexpected invocation of MockExternalServiceStore.GetLastSyncError")
			},
		},
		GetLatestSyncErrorsFunc: &ExternalServiceStoreGetLatestSyncErrorsFunc{
			defaultHook: func(context.Context) ([]*SyncError, error) {
				panic("unexpected invocation of MockExternalServiceStore.GetLatestSyncErrors")
			},
		},
		GetSyncJobByIDFunc: &ExternalServiceStoreGetSyncJobByIDFunc{
			defaultHook: func(context.Context, int64) (*types.ExternalServiceSyncJob, error) {
				panic("unexpected invocation of MockExternalServiceStore.GetSyncJobByID")
			},
		},
		GetSyncJobsFunc: &ExternalServiceStoreGetSyncJobsFunc{
			defaultHook: func(context.Context, ExternalServicesGetSyncJobsOptions) ([]*types.ExternalServiceSyncJob, error) {
				panic("unexpected invocation of MockExternalServiceStore.GetSyncJobs")
			},
		},
		HandleFunc: &ExternalServiceStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockExternalServiceStore.Handle")
			},
		},
		ListFunc: &ExternalServiceStoreListFunc{
			defaultHook: func(context.Context, ExternalServicesListOptions) ([]*types.ExternalService, error) {
				panic("unexpected invocation of MockExternalServiceStore.List")
			},
		},
		ListReposFunc: &ExternalServiceStoreListReposFunc{
			defaultHook: func(context.Context, ExternalServiceReposListOptions) ([]*types.ExternalServiceRepo, error) {
				panic("unexpected invocation of MockExternalServiceStore.ListRepos")
			},
		},
		RepoCountFunc: &ExternalServiceStoreRepoCountFunc{
			defaultHook: func(context.Context, int64) (int32, error) {
				panic("unexpected invocation of MockExternalServiceStore.RepoCount")
			},
		},
		SyncDueFunc: &ExternalServiceStoreSyncDueFunc{
			defaultHook: func(context.Context, []int64, time.Duration) (bool, error) {
				panic("unexpected invocation of MockExternalServiceStore.SyncDue")
			},
		},
		TransactFunc: &ExternalServiceStoreTransactFunc{
			defaultHook: func(context.Context) (ExternalServiceStore, error) {
				panic("unexpected invocation of MockExternalServiceStore.Transact")
			},
		},
		UpdateFunc: &ExternalServiceStoreUpdateFunc{
			defaultHook: func(context.Context, []schema.AuthProviders, int64, *ExternalServiceUpdate) error {
				panic("unexpected invocation of MockExternalServiceStore.Update")
			},
		},
		UpdateSyncJobCountersFunc: &ExternalServiceStoreUpdateSyncJobCountersFunc{
			defaultHook: func(context.Context, *types.ExternalServiceSyncJob) error {
				panic("unexpected invocation of MockExternalServiceStore.UpdateSyncJobCounters")
			},
		},
		UpsertFunc: &ExternalServiceStoreUpsertFunc{
			defaultHook: func(context.Context, ...*types.ExternalService) error {
				panic("unexpected invocation of MockExternalServiceStore.Upsert")
			},
		},
		WithFunc: &ExternalServiceStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) ExternalServiceStore {
				panic("unexpected invocation of MockExternalServiceStore.With")
			},
		},
		WithEncryptionKeyFunc: &ExternalServiceStoreWithEncryptionKeyFunc{
			defaultHook: func(encryption.Key) ExternalServiceStore {
				panic("unexpected invocation of MockExternalServiceStore.WithEncryptionKey")
			},
		},
	}
}

// NewMockExternalServiceStoreFrom creates a new mock of the
// MockExternalServiceStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockExternalServiceStoreFrom(i ExternalServiceStore) *MockExternalServiceStore {
	return &MockExternalServiceStore{
		CancelSyncJobFunc: &ExternalServiceStoreCancelSyncJobFunc{
			defaultHook: i.CancelSyncJob,
		},
		CountFunc: &ExternalServiceStoreCountFunc{
			defaultHook: i.Count,
		},
		CountSyncJobsFunc: &ExternalServiceStoreCountSyncJobsFunc{
			defaultHook: i.CountSyncJobs,
		},
		CreateFunc: &ExternalServiceStoreCreateFunc{
			defaultHook: i.Create,
		},
		DeleteFunc: &ExternalServiceStoreDeleteFunc{
			defaultHook: i.Delete,
		},
		DistinctKindsFunc: &ExternalServiceStoreDistinctKindsFunc{
			defaultHook: i.DistinctKinds,
		},
		DoneFunc: &ExternalServiceStoreDoneFunc{
			defaultHook: i.Done,
		},
		GetByIDFunc: &ExternalServiceStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		GetLastSyncErrorFunc: &ExternalServiceStoreGetLastSyncErrorFunc{
			defaultHook: i.GetLastSyncError,
		},
		GetLatestSyncErrorsFunc: &ExternalServiceStoreGetLatestSyncErrorsFunc{
			defaultHook: i.GetLatestSyncErrors,
		},
		GetSyncJobByIDFunc: &ExternalServiceStoreGetSyncJobByIDFunc{
			defaultHook: i.GetSyncJobByID,
		},
		GetSyncJobsFunc: &ExternalServiceStoreGetSyncJobsFunc{
			defaultHook: i.GetSyncJobs,
		},
		HandleFunc: &ExternalServiceStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListFunc: &ExternalServiceStoreListFunc{
			defaultHook: i.List,
		},
		ListReposFunc: &ExternalServiceStoreListReposFunc{
			defaultHook: i.ListRepos,
		},
		RepoCountFunc: &ExternalServiceStoreRepoCountFunc{
			defaultHook: i.RepoCount,
		},
		SyncDueFunc: &ExternalServiceStoreSyncDueFunc{
			defaultHook: i.SyncDue,
		},
		TransactFunc: &ExternalServiceStoreTransactFunc{
			defaultHook: i.Transact,
		},
		UpdateFunc: &ExternalServiceStoreUpdateFunc{
			defaultHook: i.Update,
		},
		UpdateSyncJobCountersFunc: &ExternalServiceStoreUpdateSyncJobCountersFunc{
			defaultHook: i.UpdateSyncJobCounters,
		},
		UpsertFunc: &ExternalServiceStoreUpsertFunc{
			defaultHook: i.Upsert,
		},
		WithFunc: &ExternalServiceStoreWithFunc{
			defaultHook: i.With,
		},
		WithEncryptionKeyFunc: &ExternalServiceStoreWithEncryptionKeyFunc{
			defaultHook: i.WithEncryptionKey,
		},
	}
}

// ExternalServiceStoreCancelSyncJobFunc describes the behavior when the
// CancelSyncJob method of the parent MockExternalServiceStore instance is
// invoked.
type ExternalServiceStoreCancelSyncJobFunc struct {
	defaultHook func(context.Context, ExternalServicesCancelSyncJobOptions) error
	hooks       []func(context.Context, ExternalServicesCancelSyncJobOptions) error
	history     []ExternalServiceStoreCancelSyncJobFuncCall
	mutex       sync.Mutex
}

// CancelSyncJob delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockExternalServiceStore) CancelSyncJob(v0 context.Context, v1 ExternalServicesCancelSyncJobOptions) error {
	r0 := m.CancelSyncJobFunc.nextHook()(v0, v1)
	m.CancelSyncJobFunc.appendCall(ExternalServiceStoreCancelSyncJobFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the CancelSyncJob method
// of the parent MockExternalServiceStore instance is invoked and the hook
// queue is empty.
func (f *ExternalServiceStoreCancelSyncJobFunc) SetDefaultHook(hook func(context.Context, ExternalServicesCancelSyncJobOptions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CancelSyncJob method of the parent MockExternalServiceStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ExternalServiceStoreCancelSyncJobFunc) PushHook(hook func(context.Context, ExternalServicesCancelSyncJobOptions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreCancelSyncJobFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ExternalServicesCancelSyncJobOptions) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreCancelSyncJobFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ExternalServicesCancelSyncJobOptions) error {
		return r0
	})
}

func (f *ExternalServiceStoreCancelSyncJobFunc) nextHook() func(context.Context, ExternalServicesCancelSyncJobOptions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreCancelSyncJobFunc) appendCall(r0 ExternalServiceStoreCancelSyncJobFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreCancelSyncJobFuncCall
// objects describing the invocations of this function.
func (f *ExternalServiceStoreCancelSyncJobFunc) History() []ExternalServiceStoreCancelSyncJobFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreCancelSyncJobFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreCancelSyncJobFuncCall is an object that describes an
// invocation of method CancelSyncJob on an instance of
// MockExternalServiceStore.
type ExternalServiceStoreCancelSyncJobFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ExternalServicesCancelSyncJobOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreCancelSyncJobFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreCancelSyncJobFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExternalServiceStoreCountFunc describes the behavior when the Count
// method of the parent MockExternalServiceStore instance is invoked.
type ExternalServiceStoreCountFunc struct {
	defaultHook func(context.Context, ExternalServicesListOptions) (int, error)
	hooks       []func(context.Context, ExternalServicesListOptions) (int, error)
	history     []ExternalServiceStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) Count(v0 context.Context, v1 ExternalServicesListOptions) (int, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(ExternalServiceStoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockExternalServiceStore instance is invoked and the hook queue is
// empty.
func (f *ExternalServiceStoreCountFunc) SetDefaultHook(hook func(context.Context, ExternalServicesListOptions) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockExternalServiceStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExternalServiceStoreCountFunc) PushHook(hook func(context.Context, ExternalServicesListOptions) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, ExternalServicesListOptions) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, ExternalServicesListOptions) (int, error) {
		return r0, r1
	})
}

func (f *ExternalServiceStoreCountFunc) nextHook() func(context.Context, ExternalServicesListOptions) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreCountFunc) appendCall(r0 ExternalServiceStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreCountFuncCall objects
// describing the invocations of this function.
func (f *ExternalServiceStoreCountFunc) History() []ExternalServiceStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreCountFuncCall is an object that describes an
// invocation of method Count on an instance of MockExternalServiceStore.
type ExternalServiceStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ExternalServicesListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExternalServiceStoreCountSyncJobsFunc describes the behavior when the
// CountSyncJobs method of the parent MockExternalServiceStore instance is
// invoked.
type ExternalServiceStoreCountSyncJobsFunc struct {
	defaultHook func(context.Context, ExternalServicesGetSyncJobsOptions) (int64, error)
	hooks       []func(context.Context, ExternalServicesGetSyncJobsOptions) (int64, error)
	history     []ExternalServiceStoreCountSyncJobsFuncCall
	mutex       sync.Mutex
}

// CountSyncJobs delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockExternalServiceStore) CountSyncJobs(v0 context.Context, v1 ExternalServicesGetSyncJobsOptions) (int64, error) {
	r0, r1 := m.CountSyncJobsFunc.nextHook()(v0, v1)
	m.CountSyncJobsFunc.appendCall(ExternalServiceStoreCountSyncJobsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CountSyncJobs method
// of the parent MockExternalServiceStore instance is invoked and the hook
// queue is empty.
func (f *ExternalServiceStoreCountSyncJobsFunc) SetDefaultHook(hook func(context.Context, ExternalServicesGetSyncJobsOptions) (int64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountSyncJobs method of the parent MockExternalServiceStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ExternalServiceStoreCountSyncJobsFunc) PushHook(hook func(context.Context, ExternalServicesGetSyncJobsOptions) (int64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreCountSyncJobsFunc) SetDefaultReturn(r0 int64, r1 error) {
	f.SetDefaultHook(func(context.Context, ExternalServicesGetSyncJobsOptions) (int64, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreCountSyncJobsFunc) PushReturn(r0 int64, r1 error) {
	f.PushHook(func(context.Context, ExternalServicesGetSyncJobsOptions) (int64, error) {
		return r0, r1
	})
}

func (f *ExternalServiceStoreCountSyncJobsFunc) nextHook() func(context.Context, ExternalServicesGetSyncJobsOptions) (int64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreCountSyncJobsFunc) appendCall(r0 ExternalServiceStoreCountSyncJobsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreCountSyncJobsFuncCall
// objects describing the invocations of this function.
func (f *ExternalServiceStoreCountSyncJobsFunc) History() []ExternalServiceStoreCountSyncJobsFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreCountSyncJobsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreCountSyncJobsFuncCall is an object that describes an
// invocation of method CountSyncJobs on an instance of
// MockExternalServiceStore.
type ExternalServiceStoreCountSyncJobsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ExternalServicesGetSyncJobsOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreCountSyncJobsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreCountSyncJobsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExternalServiceStoreCreateFunc describes the behavior when the Create
// method of the parent MockExternalServiceStore instance is invoked.
type ExternalServiceStoreCreateFunc struct {
	defaultHook func(context.Context, func() *conf.Unified, *types.ExternalService) error
	hooks       []func(context.Context, func() *conf.Unified, *types.ExternalService) error
	history     []ExternalServiceStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) Create(v0 context.Context, v1 func() *conf.Unified, v2 *types.ExternalService) error {
	r0 := m.CreateFunc.nextHook()(v0, v1, v2)
	m.CreateFunc.appendCall(ExternalServiceStoreCreateFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockExternalServiceStore instance is invoked and the hook queue is
// empty.
func (f *ExternalServiceStoreCreateFunc) SetDefaultHook(hook func(context.Context, func() *conf.Unified, *types.ExternalService) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockExternalServiceStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExternalServiceStoreCreateFunc) PushHook(hook func(context.Context, func() *conf.Unified, *types.ExternalService) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreCreateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, func() *conf.Unified, *types.ExternalService) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreCreateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, func() *conf.Unified, *types.ExternalService) error {
		return r0
	})
}

func (f *ExternalServiceStoreCreateFunc) nextHook() func(context.Context, func() *conf.Unified, *types.ExternalService) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreCreateFunc) appendCall(r0 ExternalServiceStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreCreateFuncCall objects
// describing the invocations of this function.
func (f *ExternalServiceStoreCreateFunc) History() []ExternalServiceStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreCreateFuncCall is an object that describes an
// invocation of method Create on an instance of MockExternalServiceStore.
type ExternalServiceStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 func() *conf.Unified
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *types.ExternalService
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExternalServiceStoreDeleteFunc describes the behavior when the Delete
// method of the parent MockExternalServiceStore instance is invoked.
type ExternalServiceStoreDeleteFunc struct {
	defaultHook func(context.Context, int64) error
	hooks       []func(context.Context, int64) error
	history     []ExternalServiceStoreDeleteFuncCall
	mutex       sync.Mutex
}

// Delete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) Delete(v0 context.Context, v1 int64) error {
	r0 := m.DeleteFunc.nextHook()(v0, v1)
	m.DeleteFunc.appendCall(ExternalServiceStoreDeleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Delete method of the
// parent MockExternalServiceStore instance is invoked and the hook queue is
// empty.
func (f *ExternalServiceStoreDeleteFunc) SetDefaultHook(hook func(context.Context, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Delete method of the parent MockExternalServiceStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExternalServiceStoreDeleteFunc) PushHook(hook func(context.Context, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64) error {
		return r0
	})
}

func (f *ExternalServiceStoreDeleteFunc) nextHook() func(context.Context, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreDeleteFunc) appendCall(r0 ExternalServiceStoreDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreDeleteFuncCall objects
// describing the invocations of this function.
func (f *ExternalServiceStoreDeleteFunc) History() []ExternalServiceStoreDeleteFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreDeleteFuncCall is an object that describes an
// invocation of method Delete on an instance of MockExternalServiceStore.
type ExternalServiceStoreDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExternalServiceStoreDistinctKindsFunc describes the behavior when the
// DistinctKinds method of the parent MockExternalServiceStore instance is
// invoked.
type ExternalServiceStoreDistinctKindsFunc struct {
	defaultHook func(context.Context) ([]string, error)
	hooks       []func(context.Context) ([]string, error)
	history     []ExternalServiceStoreDistinctKindsFuncCall
	mutex       sync.Mutex
}

// DistinctKinds delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockExternalServiceStore) DistinctKinds(v0 context.Context) ([]string, error) {
	r0, r1 := m.DistinctKindsFunc.nextHook()(v0)
	m.DistinctKindsFunc.appendCall(ExternalServiceStoreDistinctKindsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DistinctKinds method
// of the parent MockExternalServiceStore instance is invoked and the hook
// queue is empty.
func (f *ExternalServiceStoreDistinctKindsFunc) SetDefaultHook(hook func(context.Context) ([]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DistinctKinds method of the parent MockExternalServiceStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ExternalServiceStoreDistinctKindsFunc) PushHook(hook func(context.Context) ([]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreDistinctKindsFunc) SetDefaultReturn(r0 []string, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreDistinctKindsFunc) PushReturn(r0 []string, r1 error) {
	f.PushHook(func(context.Context) ([]string, error) {
		return r0, r1
	})
}

func (f *ExternalServiceStoreDistinctKindsFunc) nextHook() func(context.Context) ([]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreDistinctKindsFunc) appendCall(r0 ExternalServiceStoreDistinctKindsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreDistinctKindsFuncCall
// objects describing the invocations of this function.
func (f *ExternalServiceStoreDistinctKindsFunc) History() []ExternalServiceStoreDistinctKindsFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreDistinctKindsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreDistinctKindsFuncCall is an object that describes an
// invocation of method DistinctKinds on an instance of
// MockExternalServiceStore.
type ExternalServiceStoreDistinctKindsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreDistinctKindsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreDistinctKindsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExternalServiceStoreDoneFunc describes the behavior when the Done method
// of the parent MockExternalServiceStore instance is invoked.
type ExternalServiceStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []ExternalServiceStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(ExternalServiceStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockExternalServiceStore instance is invoked and the hook queue is
// empty.
func (f *ExternalServiceStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockExternalServiceStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExternalServiceStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *ExternalServiceStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreDoneFunc) appendCall(r0 ExternalServiceStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreDoneFuncCall objects
// describing the invocations of this function.
func (f *ExternalServiceStoreDoneFunc) History() []ExternalServiceStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreDoneFuncCall is an object that describes an
// invocation of method Done on an instance of MockExternalServiceStore.
type ExternalServiceStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExternalServiceStoreGetByIDFunc describes the behavior when the GetByID
// method of the parent MockExternalServiceStore instance is invoked.
type ExternalServiceStoreGetByIDFunc struct {
	defaultHook func(context.Context, int64) (*types.ExternalService, error)
	hooks       []func(context.Context, int64) (*types.ExternalService, error)
	history     []ExternalServiceStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) GetByID(v0 context.Context, v1 int64) (*types.ExternalService, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(ExternalServiceStoreGetByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockExternalServiceStore instance is invoked and the hook
// queue is empty.
func (f *ExternalServiceStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int64) (*types.ExternalService, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockExternalServiceStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ExternalServiceStoreGetByIDFunc) PushHook(hook func(context.Context, int64) (*types.ExternalService, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreGetByIDFunc) SetDefaultReturn(r0 *types.ExternalService, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (*types.ExternalService, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreGetByIDFunc) PushReturn(r0 *types.ExternalService, r1 error) {
	f.PushHook(func(context.Context, int64) (*types.ExternalService, error) {
		return r0, r1
	})
}

func (f *ExternalServiceStoreGetByIDFunc) nextHook() func(context.Context, int64) (*types.ExternalService, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreGetByIDFunc) appendCall(r0 ExternalServiceStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreGetByIDFuncCall objects
// describing the invocations of this function.
func (f *ExternalServiceStoreGetByIDFunc) History() []ExternalServiceStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreGetByIDFuncCall is an object that describes an
// invocation of method GetByID on an instance of MockExternalServiceStore.
type ExternalServiceStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.ExternalService
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExternalServiceStoreGetLastSyncErrorFunc describes the behavior when the
// GetLastSyncError method of the parent MockExternalServiceStore instance
// is invoked.
type ExternalServiceStoreGetLastSyncErrorFunc struct {
	defaultHook func(context.Context, int64) (string, error)
	hooks       []func(context.Context, int64) (string, error)
	history     []ExternalServiceStoreGetLastSyncErrorFuncCall
	mutex       sync.Mutex
}

// GetLastSyncError delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockExternalServiceStore) GetLastSyncError(v0 context.Context, v1 int64) (string, error) {
	r0, r1 := m.GetLastSyncErrorFunc.nextHook()(v0, v1)
	m.GetLastSyncErrorFunc.appendCall(ExternalServiceStoreGetLastSyncErrorFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetLastSyncError
// method of the parent MockExternalServiceStore instance is invoked and the
// hook queue is empty.
func (f *ExternalServiceStoreGetLastSyncErrorFunc) SetDefaultHook(hook func(context.Context, int64) (string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLastSyncError method of the parent MockExternalServiceStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ExternalServiceStoreGetLastSyncErrorFunc) PushHook(hook func(context.Context, int64) (string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreGetLastSyncErrorFunc) SetDefaultReturn(r0 string, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreGetLastSyncErrorFunc) PushReturn(r0 string, r1 error) {
	f.PushHook(func(context.Context, int64) (string, error) {
		return r0, r1
	})
}

func (f *ExternalServiceStoreGetLastSyncErrorFunc) nextHook() func(context.Context, int64) (string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreGetLastSyncErrorFunc) appendCall(r0 ExternalServiceStoreGetLastSyncErrorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ExternalServiceStoreGetLastSyncErrorFuncCall objects describing the
// invocations of this function.
func (f *ExternalServiceStoreGetLastSyncErrorFunc) History() []ExternalServiceStoreGetLastSyncErrorFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreGetLastSyncErrorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreGetLastSyncErrorFuncCall is an object that describes
// an invocation of method GetLastSyncError on an instance of
// MockExternalServiceStore.
type ExternalServiceStoreGetLastSyncErrorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreGetLastSyncErrorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreGetLastSyncErrorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExternalServiceStoreGetLatestSyncErrorsFunc describes the behavior when
// the GetLatestSyncErrors method of the parent MockExternalServiceStore
// instance is invoked.
type ExternalServiceStoreGetLatestSyncErrorsFunc struct {
	defaultHook func(context.Context) ([]*SyncError, error)
	hooks       []func(context.Context) ([]*SyncError, error)
	history     []ExternalServiceStoreGetLatestSyncErrorsFuncCall
	mutex       sync.Mutex
}

// GetLatestSyncErrors delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockExternalServiceStore) GetLatestSyncErrors(v0 context.Context) ([]*SyncError, error) {
	r0, r1 := m.GetLatestSyncErrorsFunc.nextHook()(v0)
	m.GetLatestSyncErrorsFunc.appendCall(ExternalServiceStoreGetLatestSyncErrorsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetLatestSyncErrors
// method of the parent MockExternalServiceStore instance is invoked and the
// hook queue is empty.
func (f *ExternalServiceStoreGetLatestSyncErrorsFunc) SetDefaultHook(hook func(context.Context) ([]*SyncError, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLatestSyncErrors method of the parent MockExternalServiceStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *ExternalServiceStoreGetLatestSyncErrorsFunc) PushHook(hook func(context.Context) ([]*SyncError, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreGetLatestSyncErrorsFunc) SetDefaultReturn(r0 []*SyncError, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]*SyncError, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreGetLatestSyncErrorsFunc) PushReturn(r0 []*SyncError, r1 error) {
	f.PushHook(func(context.Context) ([]*SyncError, error) {
		return r0, r1
	})
}

func (f *ExternalServiceStoreGetLatestSyncErrorsFunc) nextHook() func(context.Context) ([]*SyncError, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreGetLatestSyncErrorsFunc) appendCall(r0 ExternalServiceStoreGetLatestSyncErrorsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ExternalServiceStoreGetLatestSyncErrorsFuncCall objects describing the
// invocations of this function.
func (f *ExternalServiceStoreGetLatestSyncErrorsFunc) History() []ExternalServiceStoreGetLatestSyncErrorsFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreGetLatestSyncErrorsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreGetLatestSyncErrorsFuncCall is an object that
// describes an invocation of method GetLatestSyncErrors on an instance of
// MockExternalServiceStore.
type ExternalServiceStoreGetLatestSyncErrorsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*SyncError
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreGetLatestSyncErrorsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreGetLatestSyncErrorsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExternalServiceStoreGetSyncJobByIDFunc describes the behavior when the
// GetSyncJobByID method of the parent MockExternalServiceStore instance is
// invoked.
type ExternalServiceStoreGetSyncJobByIDFunc struct {
	defaultHook func(context.Context, int64) (*types.ExternalServiceSyncJob, error)
	hooks       []func(context.Context, int64) (*types.ExternalServiceSyncJob, error)
	history     []ExternalServiceStoreGetSyncJobByIDFuncCall
	mutex       sync.Mutex
}

// GetSyncJobByID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockExternalServiceStore) GetSyncJobByID(v0 context.Context, v1 int64) (*types.ExternalServiceSyncJob, error) {
	r0, r1 := m.GetSyncJobByIDFunc.nextHook()(v0, v1)
	m.GetSyncJobByIDFunc.appendCall(ExternalServiceStoreGetSyncJobByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetSyncJobByID
// method of the parent MockExternalServiceStore instance is invoked and the
// hook queue is empty.
func (f *ExternalServiceStoreGetSyncJobByIDFunc) SetDefaultHook(hook func(context.Context, int64) (*types.ExternalServiceSyncJob, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetSyncJobByID method of the parent MockExternalServiceStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ExternalServiceStoreGetSyncJobByIDFunc) PushHook(hook func(context.Context, int64) (*types.ExternalServiceSyncJob, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreGetSyncJobByIDFunc) SetDefaultReturn(r0 *types.ExternalServiceSyncJob, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (*types.ExternalServiceSyncJob, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreGetSyncJobByIDFunc) PushReturn(r0 *types.ExternalServiceSyncJob, r1 error) {
	f.PushHook(func(context.Context, int64) (*types.ExternalServiceSyncJob, error) {
		return r0, r1
	})
}

func (f *ExternalServiceStoreGetSyncJobByIDFunc) nextHook() func(context.Context, int64) (*types.ExternalServiceSyncJob, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreGetSyncJobByIDFunc) appendCall(r0 ExternalServiceStoreGetSyncJobByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreGetSyncJobByIDFuncCall
// objects describing the invocations of this function.
func (f *ExternalServiceStoreGetSyncJobByIDFunc) History() []ExternalServiceStoreGetSyncJobByIDFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreGetSyncJobByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreGetSyncJobByIDFuncCall is an object that describes an
// invocation of method GetSyncJobByID on an instance of
// MockExternalServiceStore.
type ExternalServiceStoreGetSyncJobByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.ExternalServiceSyncJob
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreGetSyncJobByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreGetSyncJobByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExternalServiceStoreGetSyncJobsFunc describes the behavior when the
// GetSyncJobs method of the parent MockExternalServiceStore instance is
// invoked.
type ExternalServiceStoreGetSyncJobsFunc struct {
	defaultHook func(context.Context, ExternalServicesGetSyncJobsOptions) ([]*types.ExternalServiceSyncJob, error)
	hooks       []func(context.Context, ExternalServicesGetSyncJobsOptions) ([]*types.ExternalServiceSyncJob, error)
	history     []ExternalServiceStoreGetSyncJobsFuncCall
	mutex       sync.Mutex
}

// GetSyncJobs delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockExternalServiceStore) GetSyncJobs(v0 context.Context, v1 ExternalServicesGetSyncJobsOptions) ([]*types.ExternalServiceSyncJob, error) {
	r0, r1 := m.GetSyncJobsFunc.nextHook()(v0, v1)
	m.GetSyncJobsFunc.appendCall(ExternalServiceStoreGetSyncJobsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetSyncJobs method
// of the parent MockExternalServiceStore instance is invoked and the hook
// queue is empty.
func (f *ExternalServiceStoreGetSyncJobsFunc) SetDefaultHook(hook func(context.Context, ExternalServicesGetSyncJobsOptions) ([]*types.ExternalServiceSyncJob, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetSyncJobs method of the parent MockExternalServiceStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ExternalServiceStoreGetSyncJobsFunc) PushHook(hook func(context.Context, ExternalServicesGetSyncJobsOptions) ([]*types.ExternalServiceSyncJob, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreGetSyncJobsFunc) SetDefaultReturn(r0 []*types.ExternalServiceSyncJob, r1 error) {
	f.SetDefaultHook(func(context.Context, ExternalServicesGetSyncJobsOptions) ([]*types.ExternalServiceSyncJob, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreGetSyncJobsFunc) PushReturn(r0 []*types.ExternalServiceSyncJob, r1 error) {
	f.PushHook(func(context.Context, ExternalServicesGetSyncJobsOptions) ([]*types.ExternalServiceSyncJob, error) {
		return r0, r1
	})
}

func (f *ExternalServiceStoreGetSyncJobsFunc) nextHook() func(context.Context, ExternalServicesGetSyncJobsOptions) ([]*types.ExternalServiceSyncJob, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreGetSyncJobsFunc) appendCall(r0 ExternalServiceStoreGetSyncJobsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreGetSyncJobsFuncCall
// objects describing the invocations of this function.
func (f *ExternalServiceStoreGetSyncJobsFunc) History() []ExternalServiceStoreGetSyncJobsFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreGetSyncJobsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreGetSyncJobsFuncCall is an object that describes an
// invocation of method GetSyncJobs on an instance of
// MockExternalServiceStore.
type ExternalServiceStoreGetSyncJobsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ExternalServicesGetSyncJobsOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.ExternalServiceSyncJob
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreGetSyncJobsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreGetSyncJobsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExternalServiceStoreHandleFunc describes the behavior when the Handle
// method of the parent MockExternalServiceStore instance is invoked.
type ExternalServiceStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []ExternalServiceStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(ExternalServiceStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockExternalServiceStore instance is invoked and the hook queue is
// empty.
func (f *ExternalServiceStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockExternalServiceStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExternalServiceStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *ExternalServiceStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreHandleFunc) appendCall(r0 ExternalServiceStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *ExternalServiceStoreHandleFunc) History() []ExternalServiceStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of MockExternalServiceStore.
type ExternalServiceStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExternalServiceStoreListFunc describes the behavior when the List method
// of the parent MockExternalServiceStore instance is invoked.
type ExternalServiceStoreListFunc struct {
	defaultHook func(context.Context, ExternalServicesListOptions) ([]*types.ExternalService, error)
	hooks       []func(context.Context, ExternalServicesListOptions) ([]*types.ExternalService, error)
	history     []ExternalServiceStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) List(v0 context.Context, v1 ExternalServicesListOptions) ([]*types.ExternalService, error) {
	r0, r1 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(ExternalServiceStoreListFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockExternalServiceStore instance is invoked and the hook queue is
// empty.
func (f *ExternalServiceStoreListFunc) SetDefaultHook(hook func(context.Context, ExternalServicesListOptions) ([]*types.ExternalService, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockExternalServiceStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExternalServiceStoreListFunc) PushHook(hook func(context.Context, ExternalServicesListOptions) ([]*types.ExternalService, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreListFunc) SetDefaultReturn(r0 []*types.ExternalService, r1 error) {
	f.SetDefaultHook(func(context.Context, ExternalServicesListOptions) ([]*types.ExternalService, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreListFunc) PushReturn(r0 []*types.ExternalService, r1 error) {
	f.PushHook(func(context.Context, ExternalServicesListOptions) ([]*types.ExternalService, error) {
		return r0, r1
	})
}

func (f *ExternalServiceStoreListFunc) nextHook() func(context.Context, ExternalServicesListOptions) ([]*types.ExternalService, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreListFunc) appendCall(r0 ExternalServiceStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreListFuncCall objects
// describing the invocations of this function.
func (f *ExternalServiceStoreListFunc) History() []ExternalServiceStoreListFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreListFuncCall is an object that describes an
// invocation of method List on an instance of MockExternalServiceStore.
type ExternalServiceStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ExternalServicesListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.ExternalService
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExternalServiceStoreListReposFunc describes the behavior when the
// ListRepos method of the parent MockExternalServiceStore instance is
// invoked.
type ExternalServiceStoreListReposFunc struct {
	defaultHook func(context.Context, ExternalServiceReposListOptions) ([]*types.ExternalServiceRepo, error)
	hooks       []func(context.Context, ExternalServiceReposListOptions) ([]*types.ExternalServiceRepo, error)
	history     []ExternalServiceStoreListReposFuncCall
	mutex       sync.Mutex
}

// ListRepos delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) ListRepos(v0 context.Context, v1 ExternalServiceReposListOptions) ([]*types.ExternalServiceRepo, error) {
	r0, r1 := m.ListReposFunc.nextHook()(v0, v1)
	m.ListReposFunc.appendCall(ExternalServiceStoreListReposFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListRepos method of
// the parent MockExternalServiceStore instance is invoked and the hook
// queue is empty.
func (f *ExternalServiceStoreListReposFunc) SetDefaultHook(hook func(context.Context, ExternalServiceReposListOptions) ([]*types.ExternalServiceRepo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListRepos method of the parent MockExternalServiceStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ExternalServiceStoreListReposFunc) PushHook(hook func(context.Context, ExternalServiceReposListOptions) ([]*types.ExternalServiceRepo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreListReposFunc) SetDefaultReturn(r0 []*types.ExternalServiceRepo, r1 error) {
	f.SetDefaultHook(func(context.Context, ExternalServiceReposListOptions) ([]*types.ExternalServiceRepo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreListReposFunc) PushReturn(r0 []*types.ExternalServiceRepo, r1 error) {
	f.PushHook(func(context.Context, ExternalServiceReposListOptions) ([]*types.ExternalServiceRepo, error) {
		return r0, r1
	})
}

func (f *ExternalServiceStoreListReposFunc) nextHook() func(context.Context, ExternalServiceReposListOptions) ([]*types.ExternalServiceRepo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreListReposFunc) appendCall(r0 ExternalServiceStoreListReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreListReposFuncCall
// objects describing the invocations of this function.
func (f *ExternalServiceStoreListReposFunc) History() []ExternalServiceStoreListReposFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreListReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreListReposFuncCall is an object that describes an
// invocation of method ListRepos on an instance of
// MockExternalServiceStore.
type ExternalServiceStoreListReposFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ExternalServiceReposListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.ExternalServiceRepo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreListReposFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreListReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExternalServiceStoreRepoCountFunc describes the behavior when the
// RepoCount method of the parent MockExternalServiceStore instance is
// invoked.
type ExternalServiceStoreRepoCountFunc struct {
	defaultHook func(context.Context, int64) (int32, error)
	hooks       []func(context.Context, int64) (int32, error)
	history     []ExternalServiceStoreRepoCountFuncCall
	mutex       sync.Mutex
}

// RepoCount delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) RepoCount(v0 context.Context, v1 int64) (int32, error) {
	r0, r1 := m.RepoCountFunc.nextHook()(v0, v1)
	m.RepoCountFunc.appendCall(ExternalServiceStoreRepoCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RepoCount method of
// the parent MockExternalServiceStore instance is invoked and the hook
// queue is empty.
func (f *ExternalServiceStoreRepoCountFunc) SetDefaultHook(hook func(context.Context, int64) (int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepoCount method of the parent MockExternalServiceStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ExternalServiceStoreRepoCountFunc) PushHook(hook func(context.Context, int64) (int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreRepoCountFunc) SetDefaultReturn(r0 int32, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreRepoCountFunc) PushReturn(r0 int32, r1 error) {
	f.PushHook(func(context.Context, int64) (int32, error) {
		return r0, r1
	})
}

func (f *ExternalServiceStoreRepoCountFunc) nextHook() func(context.Context, int64) (int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreRepoCountFunc) appendCall(r0 ExternalServiceStoreRepoCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreRepoCountFuncCall
// objects describing the invocations of this function.
func (f *ExternalServiceStoreRepoCountFunc) History() []ExternalServiceStoreRepoCountFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreRepoCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreRepoCountFuncCall is an object that describes an
// invocation of method RepoCount on an instance of
// MockExternalServiceStore.
type ExternalServiceStoreRepoCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreRepoCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreRepoCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExternalServiceStoreSyncDueFunc describes the behavior when the SyncDue
// method of the parent MockExternalServiceStore instance is invoked.
type ExternalServiceStoreSyncDueFunc struct {
	defaultHook func(context.Context, []int64, time.Duration) (bool, error)
	hooks       []func(context.Context, []int64, time.Duration) (bool, error)
	history     []ExternalServiceStoreSyncDueFuncCall
	mutex       sync.Mutex
}

// SyncDue delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) SyncDue(v0 context.Context, v1 []int64, v2 time.Duration) (bool, error) {
	r0, r1 := m.SyncDueFunc.nextHook()(v0, v1, v2)
	m.SyncDueFunc.appendCall(ExternalServiceStoreSyncDueFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SyncDue method of
// the parent MockExternalServiceStore instance is invoked and the hook
// queue is empty.
func (f *ExternalServiceStoreSyncDueFunc) SetDefaultHook(hook func(context.Context, []int64, time.Duration) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SyncDue method of the parent MockExternalServiceStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ExternalServiceStoreSyncDueFunc) PushHook(hook func(context.Context, []int64, time.Duration) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreSyncDueFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, []int64, time.Duration) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreSyncDueFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, []int64, time.Duration) (bool, error) {
		return r0, r1
	})
}

func (f *ExternalServiceStoreSyncDueFunc) nextHook() func(context.Context, []int64, time.Duration) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreSyncDueFunc) appendCall(r0 ExternalServiceStoreSyncDueFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreSyncDueFuncCall objects
// describing the invocations of this function.
func (f *ExternalServiceStoreSyncDueFunc) History() []ExternalServiceStoreSyncDueFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreSyncDueFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreSyncDueFuncCall is an object that describes an
// invocation of method SyncDue on an instance of MockExternalServiceStore.
type ExternalServiceStoreSyncDueFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Duration
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreSyncDueFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreSyncDueFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExternalServiceStoreTransactFunc describes the behavior when the Transact
// method of the parent MockExternalServiceStore instance is invoked.
type ExternalServiceStoreTransactFunc struct {
	defaultHook func(context.Context) (ExternalServiceStore, error)
	hooks       []func(context.Context) (ExternalServiceStore, error)
	history     []ExternalServiceStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) Transact(v0 context.Context) (ExternalServiceStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(ExternalServiceStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockExternalServiceStore instance is invoked and the hook
// queue is empty.
func (f *ExternalServiceStoreTransactFunc) SetDefaultHook(hook func(context.Context) (ExternalServiceStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockExternalServiceStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ExternalServiceStoreTransactFunc) PushHook(hook func(context.Context) (ExternalServiceStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreTransactFunc) SetDefaultReturn(r0 ExternalServiceStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (ExternalServiceStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreTransactFunc) PushReturn(r0 ExternalServiceStore, r1 error) {
	f.PushHook(func(context.Context) (ExternalServiceStore, error) {
		return r0, r1
	})
}

func (f *ExternalServiceStoreTransactFunc) nextHook() func(context.Context) (ExternalServiceStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreTransactFunc) appendCall(r0 ExternalServiceStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreTransactFuncCall
// objects describing the invocations of this function.
func (f *ExternalServiceStoreTransactFunc) History() []ExternalServiceStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreTransactFuncCall is an object that describes an
// invocation of method Transact on an instance of MockExternalServiceStore.
type ExternalServiceStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 ExternalServiceStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExternalServiceStoreUpdateFunc describes the behavior when the Update
// method of the parent MockExternalServiceStore instance is invoked.
type ExternalServiceStoreUpdateFunc struct {
	defaultHook func(context.Context, []schema.AuthProviders, int64, *ExternalServiceUpdate) error
	hooks       []func(context.Context, []schema.AuthProviders, int64, *ExternalServiceUpdate) error
	history     []ExternalServiceStoreUpdateFuncCall
	mutex       sync.Mutex
}

// Update delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) Update(v0 context.Context, v1 []schema.AuthProviders, v2 int64, v3 *ExternalServiceUpdate) error {
	r0 := m.UpdateFunc.nextHook()(v0, v1, v2, v3)
	m.UpdateFunc.appendCall(ExternalServiceStoreUpdateFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Update method of the
// parent MockExternalServiceStore instance is invoked and the hook queue is
// empty.
func (f *ExternalServiceStoreUpdateFunc) SetDefaultHook(hook func(context.Context, []schema.AuthProviders, int64, *ExternalServiceUpdate) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Update method of the parent MockExternalServiceStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExternalServiceStoreUpdateFunc) PushHook(hook func(context.Context, []schema.AuthProviders, int64, *ExternalServiceUpdate) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreUpdateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []schema.AuthProviders, int64, *ExternalServiceUpdate) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreUpdateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []schema.AuthProviders, int64, *ExternalServiceUpdate) error {
		return r0
	})
}

func (f *ExternalServiceStoreUpdateFunc) nextHook() func(context.Context, []schema.AuthProviders, int64, *ExternalServiceUpdate) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreUpdateFunc) appendCall(r0 ExternalServiceStoreUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreUpdateFuncCall objects
// describing the invocations of this function.
func (f *ExternalServiceStoreUpdateFunc) History() []ExternalServiceStoreUpdateFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreUpdateFuncCall is an object that describes an
// invocation of method Update on an instance of MockExternalServiceStore.
type ExternalServiceStoreUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []schema.AuthProviders
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int64
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *ExternalServiceUpdate
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExternalServiceStoreUpdateSyncJobCountersFunc describes the behavior when
// the UpdateSyncJobCounters method of the parent MockExternalServiceStore
// instance is invoked.
type ExternalServiceStoreUpdateSyncJobCountersFunc struct {
	defaultHook func(context.Context, *types.ExternalServiceSyncJob) error
	hooks       []func(context.Context, *types.ExternalServiceSyncJob) error
	history     []ExternalServiceStoreUpdateSyncJobCountersFuncCall
	mutex       sync.Mutex
}

// UpdateSyncJobCounters delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockExternalServiceStore) UpdateSyncJobCounters(v0 context.Context, v1 *types.ExternalServiceSyncJob) error {
	r0 := m.UpdateSyncJobCountersFunc.nextHook()(v0, v1)
	m.UpdateSyncJobCountersFunc.appendCall(ExternalServiceStoreUpdateSyncJobCountersFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// UpdateSyncJobCounters method of the parent MockExternalServiceStore
// instance is invoked and the hook queue is empty.
func (f *ExternalServiceStoreUpdateSyncJobCountersFunc) SetDefaultHook(hook func(context.Context, *types.ExternalServiceSyncJob) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateSyncJobCounters method of the parent MockExternalServiceStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *ExternalServiceStoreUpdateSyncJobCountersFunc) PushHook(hook func(context.Context, *types.ExternalServiceSyncJob) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreUpdateSyncJobCountersFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *types.ExternalServiceSyncJob) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreUpdateSyncJobCountersFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *types.ExternalServiceSyncJob) error {
		return r0
	})
}

func (f *ExternalServiceStoreUpdateSyncJobCountersFunc) nextHook() func(context.Context, *types.ExternalServiceSyncJob) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreUpdateSyncJobCountersFunc) appendCall(r0 ExternalServiceStoreUpdateSyncJobCountersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ExternalServiceStoreUpdateSyncJobCountersFuncCall objects describing the
// invocations of this function.
func (f *ExternalServiceStoreUpdateSyncJobCountersFunc) History() []ExternalServiceStoreUpdateSyncJobCountersFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreUpdateSyncJobCountersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreUpdateSyncJobCountersFuncCall is an object that
// describes an invocation of method UpdateSyncJobCounters on an instance of
// MockExternalServiceStore.
type ExternalServiceStoreUpdateSyncJobCountersFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.ExternalServiceSyncJob
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreUpdateSyncJobCountersFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreUpdateSyncJobCountersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExternalServiceStoreUpsertFunc describes the behavior when the Upsert
// method of the parent MockExternalServiceStore instance is invoked.
type ExternalServiceStoreUpsertFunc struct {
	defaultHook func(context.Context, ...*types.ExternalService) error
	hooks       []func(context.Context, ...*types.ExternalService) error
	history     []ExternalServiceStoreUpsertFuncCall
	mutex       sync.Mutex
}

// Upsert delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) Upsert(v0 context.Context, v1 ...*types.ExternalService) error {
	r0 := m.UpsertFunc.nextHook()(v0, v1...)
	m.UpsertFunc.appendCall(ExternalServiceStoreUpsertFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Upsert method of the
// parent MockExternalServiceStore instance is invoked and the hook queue is
// empty.
func (f *ExternalServiceStoreUpsertFunc) SetDefaultHook(hook func(context.Context, ...*types.ExternalService) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Upsert method of the parent MockExternalServiceStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExternalServiceStoreUpsertFunc) PushHook(hook func(context.Context, ...*types.ExternalService) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreUpsertFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ...*types.ExternalService) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreUpsertFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ...*types.ExternalService) error {
		return r0
	})
}

func (f *ExternalServiceStoreUpsertFunc) nextHook() func(context.Context, ...*types.ExternalService) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreUpsertFunc) appendCall(r0 ExternalServiceStoreUpsertFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreUpsertFuncCall objects
// describing the invocations of this function.
func (f *ExternalServiceStoreUpsertFunc) History() []ExternalServiceStoreUpsertFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreUpsertFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreUpsertFuncCall is an object that describes an
// invocation of method Upsert on an instance of MockExternalServiceStore.
type ExternalServiceStoreUpsertFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []*types.ExternalService
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c ExternalServiceStoreUpsertFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreUpsertFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExternalServiceStoreWithFunc describes the behavior when the With method
// of the parent MockExternalServiceStore instance is invoked.
type ExternalServiceStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) ExternalServiceStore
	hooks       []func(basestore.ShareableStore) ExternalServiceStore
	history     []ExternalServiceStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExternalServiceStore) With(v0 basestore.ShareableStore) ExternalServiceStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(ExternalServiceStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockExternalServiceStore instance is invoked and the hook queue is
// empty.
func (f *ExternalServiceStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) ExternalServiceStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockExternalServiceStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExternalServiceStoreWithFunc) PushHook(hook func(basestore.ShareableStore) ExternalServiceStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreWithFunc) SetDefaultReturn(r0 ExternalServiceStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) ExternalServiceStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreWithFunc) PushReturn(r0 ExternalServiceStore) {
	f.PushHook(func(basestore.ShareableStore) ExternalServiceStore {
		return r0
	})
}

func (f *ExternalServiceStoreWithFunc) nextHook() func(basestore.ShareableStore) ExternalServiceStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreWithFunc) appendCall(r0 ExternalServiceStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExternalServiceStoreWithFuncCall objects
// describing the invocations of this function.
func (f *ExternalServiceStoreWithFunc) History() []ExternalServiceStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreWithFuncCall is an object that describes an
// invocation of method With on an instance of MockExternalServiceStore.
type ExternalServiceStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 ExternalServiceStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExternalServiceStoreWithEncryptionKeyFunc describes the behavior when the
// WithEncryptionKey method of the parent MockExternalServiceStore instance
// is invoked.
type ExternalServiceStoreWithEncryptionKeyFunc struct {
	defaultHook func(encryption.Key) ExternalServiceStore
	hooks       []func(encryption.Key) ExternalServiceStore
	history     []ExternalServiceStoreWithEncryptionKeyFuncCall
	mutex       sync.Mutex
}

// WithEncryptionKey delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockExternalServiceStore) WithEncryptionKey(v0 encryption.Key) ExternalServiceStore {
	r0 := m.WithEncryptionKeyFunc.nextHook()(v0)
	m.WithEncryptionKeyFunc.appendCall(ExternalServiceStoreWithEncryptionKeyFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithEncryptionKey
// method of the parent MockExternalServiceStore instance is invoked and the
// hook queue is empty.
func (f *ExternalServiceStoreWithEncryptionKeyFunc) SetDefaultHook(hook func(encryption.Key) ExternalServiceStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithEncryptionKey method of the parent MockExternalServiceStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ExternalServiceStoreWithEncryptionKeyFunc) PushHook(hook func(encryption.Key) ExternalServiceStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ExternalServiceStoreWithEncryptionKeyFunc) SetDefaultReturn(r0 ExternalServiceStore) {
	f.SetDefaultHook(func(encryption.Key) ExternalServiceStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ExternalServiceStoreWithEncryptionKeyFunc) PushReturn(r0 ExternalServiceStore) {
	f.PushHook(func(encryption.Key) ExternalServiceStore {
		return r0
	})
}

func (f *ExternalServiceStoreWithEncryptionKeyFunc) nextHook() func(encryption.Key) ExternalServiceStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExternalServiceStoreWithEncryptionKeyFunc) appendCall(r0 ExternalServiceStoreWithEncryptionKeyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ExternalServiceStoreWithEncryptionKeyFuncCall objects describing the
// invocations of this function.
func (f *ExternalServiceStoreWithEncryptionKeyFunc) History() []ExternalServiceStoreWithEncryptionKeyFuncCall {
	f.mutex.Lock()
	history := make([]ExternalServiceStoreWithEncryptionKeyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExternalServiceStoreWithEncryptionKeyFuncCall is an object that describes
// an invocation of method WithEncryptionKey on an instance of
// MockExternalServiceStore.
type ExternalServiceStoreWithEncryptionKeyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 encryption.Key
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 ExternalServiceStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExternalServiceStoreWithEncryptionKeyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExternalServiceStoreWithEncryptionKeyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockFeatureFlagStore is a mock implementation of the FeatureFlagStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockFeatureFlagStore struct {
	// CreateBoolFunc is an instance of a mock function object controlling
	// the behavior of the method CreateBool.
	CreateBoolFunc *FeatureFlagStoreCreateBoolFunc
	// CreateFeatureFlagFunc is an instance of a mock function object
	// controlling the behavior of the method CreateFeatureFlag.
	CreateFeatureFlagFunc *FeatureFlagStoreCreateFeatureFlagFunc
	// CreateOverrideFunc is an instance of a mock function object
	// controlling the behavior of the method CreateOverride.
	CreateOverrideFunc *FeatureFlagStoreCreateOverrideFunc
	// CreateRolloutFunc is an instance of a mock function object
	// controlling the behavior of the method CreateRollout.
	CreateRolloutFunc *FeatureFlagStoreCreateRolloutFunc
	// DeleteFeatureFlagFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteFeatureFlag.
	DeleteFeatureFlagFunc *FeatureFlagStoreDeleteFeatureFlagFunc
	// DeleteOverrideFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteOverride.
	DeleteOverrideFunc *FeatureFlagStoreDeleteOverrideFunc
	// GetAnonymousUserFlagsFunc is an instance of a mock function object
	// controlling the behavior of the method GetAnonymousUserFlags.
	GetAnonymousUserFlagsFunc *FeatureFlagStoreGetAnonymousUserFlagsFunc
	// GetFeatureFlagFunc is an instance of a mock function object
	// controlling the behavior of the method GetFeatureFlag.
	GetFeatureFlagFunc *FeatureFlagStoreGetFeatureFlagFunc
	// GetFeatureFlagsFunc is an instance of a mock function object
	// controlling the behavior of the method GetFeatureFlags.
	GetFeatureFlagsFunc *FeatureFlagStoreGetFeatureFlagsFunc
	// GetGlobalFeatureFlagsFunc is an instance of a mock function object
	// controlling the behavior of the method GetGlobalFeatureFlags.
	GetGlobalFeatureFlagsFunc *FeatureFlagStoreGetGlobalFeatureFlagsFunc
	// GetOrgFeatureFlagFunc is an instance of a mock function object
	// controlling the behavior of the method GetOrgFeatureFlag.
	GetOrgFeatureFlagFunc *FeatureFlagStoreGetOrgFeatureFlagFunc
	// GetOrgOverrideForFlagFunc is an instance of a mock function object
	// controlling the behavior of the method GetOrgOverrideForFlag.
	GetOrgOverrideForFlagFunc *FeatureFlagStoreGetOrgOverrideForFlagFunc
	// GetOrgOverridesForUserFunc is an instance of a mock function object
	// controlling the behavior of the method GetOrgOverridesForUser.
	GetOrgOverridesForUserFunc *FeatureFlagStoreGetOrgOverridesForUserFunc
	// GetOverridesForFlagFunc is an instance of a mock function object
	// controlling the behavior of the method GetOverridesForFlag.
	GetOverridesForFlagFunc *FeatureFlagStoreGetOverridesForFlagFunc
	// GetUserFlagsFunc is an instance of a mock function object controlling
	// the behavior of the method GetUserFlags.
	GetUserFlagsFunc *FeatureFlagStoreGetUserFlagsFunc
	// GetUserOverridesFunc is an instance of a mock function object
	// controlling the behavior of the method GetUserOverrides.
	GetUserOverridesFunc *FeatureFlagStoreGetUserOverridesFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *FeatureFlagStoreHandleFunc
	// UpdateFeatureFlagFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateFeatureFlag.
	UpdateFeatureFlagFunc *FeatureFlagStoreUpdateFeatureFlagFunc
	// UpdateOverrideFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateOverride.
	UpdateOverrideFunc *FeatureFlagStoreUpdateOverrideFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *FeatureFlagStoreWithFunc
	// WithTransactFunc is an instance of a mock function object controlling
	// the behavior of the method WithTransact.
	WithTransactFunc *FeatureFlagStoreWithTransactFunc
}

// NewMockFeatureFlagStore creates a new mock of the FeatureFlagStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockFeatureFlagStore() *MockFeatureFlagStore {
	return &MockFeatureFlagStore{
		CreateBoolFunc: &FeatureFlagStoreCreateBoolFunc{
			defaultHook: func(context.Context, string, bool) (r0 *featureflag.FeatureFlag, r1 error) {
				return
			},
		},
		CreateFeatureFlagFunc: &FeatureFlagStoreCreateFeatureFlagFunc{
			defaultHook: func(context.Context, *featureflag.FeatureFlag) (r0 *featureflag.FeatureFlag, r1 error) {
				return
			},
		},
		CreateOverrideFunc: &FeatureFlagStoreCreateOverrideFunc{
			defaultHook: func(context.Context, *featureflag.Override) (r0 *featureflag.Override, r1 error) {
				return
			},
		},
		CreateRolloutFunc: &FeatureFlagStoreCreateRolloutFunc{
			defaultHook: func(context.Context, string, int32) (r0 *featureflag.FeatureFlag, r1 error) {
				return
			},
		},
		DeleteFeatureFlagFunc: &FeatureFlagStoreDeleteFeatureFlagFunc{
			defaultHook: func(context.Context, string) (r0 error) {
				return
			},
		},
		DeleteOverrideFunc: &FeatureFlagStoreDeleteOverrideFunc{
			defaultHook: func(context.Context, *int32, *int32, string) (r0 error) {
				return
			},
		},
		GetAnonymousUserFlagsFunc: &FeatureFlagStoreGetAnonymousUserFlagsFunc{
			defaultHook: func(context.Context, string) (r0 map[string]bool, r1 error) {
				return
			},
		},
		GetFeatureFlagFunc: &FeatureFlagStoreGetFeatureFlagFunc{
			defaultHook: func(context.Context, string) (r0 *featureflag.FeatureFlag, r1 error) {
				return
			},
		},
		GetFeatureFlagsFunc: &FeatureFlagStoreGetFeatureFlagsFunc{
			defaultHook: func(context.Context) (r0 []*featureflag.FeatureFlag, r1 error) {
				return
			},
		},
		GetGlobalFeatureFlagsFunc: &FeatureFlagStoreGetGlobalFeatureFlagsFunc{
			defaultHook: func(context.Context) (r0 map[string]bool, r1 error) {
				return
			},
		},
		GetOrgFeatureFlagFunc: &FeatureFlagStoreGetOrgFeatureFlagFunc{
			defaultHook: func(context.Context, int32, string) (r0 bool, r1 error) {
				return
			},
		},
		GetOrgOverrideForFlagFunc: &FeatureFlagStoreGetOrgOverrideForFlagFunc{
			defaultHook: func(context.Context, int32, string) (r0 *featureflag.Override, r1 error) {
				return
			},
		},
		GetOrgOverridesForUserFunc: &FeatureFlagStoreGetOrgOverridesForUserFunc{
			defaultHook: func(context.Context, int32) (r0 []*featureflag.Override, r1 error) {
				return
			},
		},
		GetOverridesForFlagFunc: &FeatureFlagStoreGetOverridesForFlagFunc{
			defaultHook: func(context.Context, string) (r0 []*featureflag.Override, r1 error) {
				return
			},
		},
		GetUserFlagsFunc: &FeatureFlagStoreGetUserFlagsFunc{
			defaultHook: func(context.Context, int32) (r0 map[string]bool, r1 error) {
				return
			},
		},
		GetUserOverridesFunc: &FeatureFlagStoreGetUserOverridesFunc{
			defaultHook: func(context.Context, int32) (r0 []*featureflag.Override, r1 error) {
				return
			},
		},
		HandleFunc: &FeatureFlagStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		UpdateFeatureFlagFunc: &FeatureFlagStoreUpdateFeatureFlagFunc{
			defaultHook: func(context.Context, *featureflag.FeatureFlag) (r0 *featureflag.FeatureFlag, r1 error) {
				return
			},
		},
		UpdateOverrideFunc: &FeatureFlagStoreUpdateOverrideFunc{
			defaultHook: func(context.Context, *int32, *int32, string, bool) (r0 *featureflag.Override, r1 error) {
				return
			},
		},
		WithFunc: &FeatureFlagStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 FeatureFlagStore) {
				return
			},
		},
		WithTransactFunc: &FeatureFlagStoreWithTransactFunc{
			defaultHook: func(context.Context, func(FeatureFlagStore) error) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockFeatureFlagStore creates a new mock of the FeatureFlagStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockFeatureFlagStore() *MockFeatureFlagStore {
	return &MockFeatureFlagStore{
		CreateBoolFunc: &FeatureFlagStoreCreateBoolFunc{
			defaultHook: func(context.Context, string, bool) (*featureflag.FeatureFlag, error) {
				panic("unexpected invocation of MockFeatureFlagStore.CreateBool")
			},
		},
		CreateFeatureFlagFunc: &FeatureFlagStoreCreateFeatureFlagFunc{
			defaultHook: func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error) {
				panic("unexpected invocation of MockFeatureFlagStore.CreateFeatureFlag")
			},
		},
		CreateOverrideFunc: &FeatureFlagStoreCreateOverrideFunc{
			defaultHook: func(context.Context, *featureflag.Override) (*featureflag.Override, error) {
				panic("unexpected invocation of MockFeatureFlagStore.CreateOverride")
			},
		},
		CreateRolloutFunc: &FeatureFlagStoreCreateRolloutFunc{
			defaultHook: func(context.Context, string, int32) (*featureflag.FeatureFlag, error) {
				panic("unexpected invocation of MockFeatureFlagStore.CreateRollout")
			},
		},
		DeleteFeatureFlagFunc: &FeatureFlagStoreDeleteFeatureFlagFunc{
			defaultHook: func(context.Context, string) error {
				panic("unexpected invocation of MockFeatureFlagStore.DeleteFeatureFlag")
			},
		},
		DeleteOverrideFunc: &FeatureFlagStoreDeleteOverrideFunc{
			defaultHook: func(context.Context, *int32, *int32, string) error {
				panic("unexpected invocation of MockFeatureFlagStore.DeleteOverride")
			},
		},
		GetAnonymousUserFlagsFunc: &FeatureFlagStoreGetAnonymousUserFlagsFunc{
			defaultHook: func(context.Context, string) (map[string]bool, error) {
				panic("unexpected invocation of MockFeatureFlagStore.GetAnonymousUserFlags")
			},
		},
		GetFeatureFlagFunc: &FeatureFlagStoreGetFeatureFlagFunc{
			defaultHook: func(context.Context, string) (*featureflag.FeatureFlag, error) {
				panic("unexpected invocation of MockFeatureFlagStore.GetFeatureFlag")
			},
		},
		GetFeatureFlagsFunc: &FeatureFlagStoreGetFeatureFlagsFunc{
			defaultHook: func(context.Context) ([]*featureflag.FeatureFlag, error) {
				panic("unexpected invocation of MockFeatureFlagStore.GetFeatureFlags")
			},
		},
		GetGlobalFeatureFlagsFunc: &FeatureFlagStoreGetGlobalFeatureFlagsFunc{
			defaultHook: func(context.Context) (map[string]bool, error) {
				panic("unexpected invocation of MockFeatureFlagStore.GetGlobalFeatureFlags")
			},
		},
		GetOrgFeatureFlagFunc: &FeatureFlagStoreGetOrgFeatureFlagFunc{
			defaultHook: func(context.Context, int32, string) (bool, error) {
				panic("unexpected invocation of MockFeatureFlagStore.GetOrgFeatureFlag")
			},
		},
		GetOrgOverrideForFlagFunc: &FeatureFlagStoreGetOrgOverrideForFlagFunc{
			defaultHook: func(context.Context, int32, string) (*featureflag.Override, error) {
				panic("unexpected invocation of MockFeatureFlagStore.GetOrgOverrideForFlag")
			},
		},
		GetOrgOverridesForUserFunc: &FeatureFlagStoreGetOrgOverridesForUserFunc{
			defaultHook: func(context.Context, int32) ([]*featureflag.Override, error) {
				panic("unexpected invocation of MockFeatureFlagStore.GetOrgOverridesForUser")
			},
		},
		GetOverridesForFlagFunc: &FeatureFlagStoreGetOverridesForFlagFunc{
			defaultHook: func(context.Context, string) ([]*featureflag.Override, error) {
				panic("unexpected invocation of MockFeatureFlagStore.GetOverridesForFlag")
			},
		},
		GetUserFlagsFunc: &FeatureFlagStoreGetUserFlagsFunc{
			defaultHook: func(context.Context, int32) (map[string]bool, error) {
				panic("unexpected invocation of MockFeatureFlagStore.GetUserFlags")
			},
		},
		GetUserOverridesFunc: &FeatureFlagStoreGetUserOverridesFunc{
			defaultHook: func(context.Context, int32) ([]*featureflag.Override, error) {
				panic("unexpected invocation of MockFeatureFlagStore.GetUserOverrides")
			},
		},
		HandleFunc: &FeatureFlagStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockFeatureFlagStore.Handle")
			},
		},
		UpdateFeatureFlagFunc: &FeatureFlagStoreUpdateFeatureFlagFunc{
			defaultHook: func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error) {
				panic("unexpected invocation of MockFeatureFlagStore.UpdateFeatureFlag")
			},
		},
		UpdateOverrideFunc: &FeatureFlagStoreUpdateOverrideFunc{
			defaultHook: func(context.Context, *int32, *int32, string, bool) (*featureflag.Override, error) {
				panic("unexpected invocation of MockFeatureFlagStore.UpdateOverride")
			},
		},
		WithFunc: &FeatureFlagStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) FeatureFlagStore {
				panic("unexpected invocation of MockFeatureFlagStore.With")
			},
		},
		WithTransactFunc: &FeatureFlagStoreWithTransactFunc{
			defaultHook: func(context.Context, func(FeatureFlagStore) error) error {
				panic("unexpected invocation of MockFeatureFlagStore.WithTransact")
			},
		},
	}
}

// NewMockFeatureFlagStoreFrom creates a new mock of the
// MockFeatureFlagStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockFeatureFlagStoreFrom(i FeatureFlagStore) *MockFeatureFlagStore {
	return &MockFeatureFlagStore{
		CreateBoolFunc: &FeatureFlagStoreCreateBoolFunc{
			defaultHook: i.CreateBool,
		},
		CreateFeatureFlagFunc: &FeatureFlagStoreCreateFeatureFlagFunc{
			defaultHook: i.CreateFeatureFlag,
		},
		CreateOverrideFunc: &FeatureFlagStoreCreateOverrideFunc{
			defaultHook: i.CreateOverride,
		},
		CreateRolloutFunc: &FeatureFlagStoreCreateRolloutFunc{
			defaultHook: i.CreateRollout,
		},
		DeleteFeatureFlagFunc: &FeatureFlagStoreDeleteFeatureFlagFunc{
			defaultHook: i.DeleteFeatureFlag,
		},
		DeleteOverrideFunc: &FeatureFlagStoreDeleteOverrideFunc{
			defaultHook: i.DeleteOverride,
		},
		GetAnonymousUserFlagsFunc: &FeatureFlagStoreGetAnonymousUserFlagsFunc{
			defaultHook: i.GetAnonymousUserFlags,
		},
		GetFeatureFlagFunc: &FeatureFlagStoreGetFeatureFlagFunc{
			defaultHook: i.GetFeatureFlag,
		},
		GetFeatureFlagsFunc: &FeatureFlagStoreGetFeatureFlagsFunc{
			defaultHook: i.GetFeatureFlags,
		},
		GetGlobalFeatureFlagsFunc: &FeatureFlagStoreGetGlobalFeatureFlagsFunc{
			defaultHook: i.GetGlobalFeatureFlags,
		},
		GetOrgFeatureFlagFunc: &FeatureFlagStoreGetOrgFeatureFlagFunc{
			defaultHook: i.GetOrgFeatureFlag,
		},
		GetOrgOverrideForFlagFunc: &FeatureFlagStoreGetOrgOverrideForFlagFunc{
			defaultHook: i.GetOrgOverrideForFlag,
		},
		GetOrgOverridesForUserFunc: &FeatureFlagStoreGetOrgOverridesForUserFunc{
			defaultHook: i.GetOrgOverridesForUser,
		},
		GetOverridesForFlagFunc: &FeatureFlagStoreGetOverridesForFlagFunc{
			defaultHook: i.GetOverridesForFlag,
		},
		GetUserFlagsFunc: &FeatureFlagStoreGetUserFlagsFunc{
			defaultHook: i.GetUserFlags,
		},
		GetUserOverridesFunc: &FeatureFlagStoreGetUserOverridesFunc{
			defaultHook: i.GetUserOverrides,
		},
		HandleFunc: &FeatureFlagStoreHandleFunc{
			defaultHook: i.Handle,
		},
		UpdateFeatureFlagFunc: &FeatureFlagStoreUpdateFeatureFlagFunc{
			defaultHook: i.UpdateFeatureFlag,
		},
		UpdateOverrideFunc: &FeatureFlagStoreUpdateOverrideFunc{
			defaultHook: i.UpdateOverride,
		},
		WithFunc: &FeatureFlagStoreWithFunc{
			defaultHook: i.With,
		},
		WithTransactFunc: &FeatureFlagStoreWithTransactFunc{
			defaultHook: i.WithTransact,
		},
	}
}

// FeatureFlagStoreCreateBoolFunc describes the behavior when the CreateBool
// method of the parent MockFeatureFlagStore instance is invoked.
type FeatureFlagStoreCreateBoolFunc struct {
	defaultHook func(context.Context, string, bool) (*featureflag.FeatureFlag, error)
	hooks       []func(context.Context, string, bool) (*featureflag.FeatureFlag, error)
	history     []FeatureFlagStoreCreateBoolFuncCall
	mutex       sync.Mutex
}

// CreateBool delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) CreateBool(v0 context.Context, v1 string, v2 bool) (*featureflag.FeatureFlag, error) {
	r0, r1 := m.CreateBoolFunc.nextHook()(v0, v1, v2)
	m.CreateBoolFunc.appendCall(FeatureFlagStoreCreateBoolFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateBool method of
// the parent MockFeatureFlagStore instance is invoked and the hook queue is
// empty.
func (f *FeatureFlagStoreCreateBoolFunc) SetDefaultHook(hook func(context.Context, string, bool) (*featureflag.FeatureFlag, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateBool method of the parent MockFeatureFlagStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *FeatureFlagStoreCreateBoolFunc) PushHook(hook func(context.Context, string, bool) (*featureflag.FeatureFlag, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreCreateBoolFunc) SetDefaultReturn(r0 *featureflag.FeatureFlag, r1 error) {
	f.SetDefaultHook(func(context.Context, string, bool) (*featureflag.FeatureFlag, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreCreateBoolFunc) PushReturn(r0 *featureflag.FeatureFlag, r1 error) {
	f.PushHook(func(context.Context, string, bool) (*featureflag.FeatureFlag, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreCreateBoolFunc) nextHook() func(context.Context, string, bool) (*featureflag.FeatureFlag, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreCreateBoolFunc) appendCall(r0 FeatureFlagStoreCreateBoolFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreCreateBoolFuncCall objects
// describing the invocations of this function.
func (f *FeatureFlagStoreCreateBoolFunc) History() []FeatureFlagStoreCreateBoolFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreCreateBoolFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreCreateBoolFuncCall is an object that describes an
// invocation of method CreateBool on an instance of MockFeatureFlagStore.
type FeatureFlagStoreCreateBoolFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *featureflag.FeatureFlag
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreCreateBoolFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreCreateBoolFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreCreateFeatureFlagFunc describes the behavior when the
// CreateFeatureFlag method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreCreateFeatureFlagFunc struct {
	defaultHook func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error)
	hooks       []func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error)
	history     []FeatureFlagStoreCreateFeatureFlagFuncCall
	mutex       sync.Mutex
}

// CreateFeatureFlag delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) CreateFeatureFlag(v0 context.Context, v1 *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error) {
	r0, r1 := m.CreateFeatureFlagFunc.nextHook()(v0, v1)
	m.CreateFeatureFlagFunc.appendCall(FeatureFlagStoreCreateFeatureFlagFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateFeatureFlag
// method of the parent MockFeatureFlagStore instance is invoked and the
// hook queue is empty.
func (f *FeatureFlagStoreCreateFeatureFlagFunc) SetDefaultHook(hook func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateFeatureFlag method of the parent MockFeatureFlagStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *FeatureFlagStoreCreateFeatureFlagFunc) PushHook(hook func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreCreateFeatureFlagFunc) SetDefaultReturn(r0 *featureflag.FeatureFlag, r1 error) {
	f.SetDefaultHook(func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreCreateFeatureFlagFunc) PushReturn(r0 *featureflag.FeatureFlag, r1 error) {
	f.PushHook(func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreCreateFeatureFlagFunc) nextHook() func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreCreateFeatureFlagFunc) appendCall(r0 FeatureFlagStoreCreateFeatureFlagFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreCreateFeatureFlagFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreCreateFeatureFlagFunc) History() []FeatureFlagStoreCreateFeatureFlagFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreCreateFeatureFlagFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreCreateFeatureFlagFuncCall is an object that describes an
// invocation of method CreateFeatureFlag on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreCreateFeatureFlagFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *featureflag.FeatureFlag
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *featureflag.FeatureFlag
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreCreateFeatureFlagFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreCreateFeatureFlagFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreCreateOverrideFunc describes the behavior when the
// CreateOverride method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreCreateOverrideFunc struct {
	defaultHook func(context.Context, *featureflag.Override) (*featureflag.Override, error)
	hooks       []func(context.Context, *featureflag.Override) (*featureflag.Override, error)
	history     []FeatureFlagStoreCreateOverrideFuncCall
	mutex       sync.Mutex
}

// CreateOverride delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) CreateOverride(v0 context.Context, v1 *featureflag.Override) (*featureflag.Override, error) {
	r0, r1 := m.CreateOverrideFunc.nextHook()(v0, v1)
	m.CreateOverrideFunc.appendCall(FeatureFlagStoreCreateOverrideFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateOverride
// method of the parent MockFeatureFlagStore instance is invoked and the
// hook queue is empty.
func (f *FeatureFlagStoreCreateOverrideFunc) SetDefaultHook(hook func(context.Context, *featureflag.Override) (*featureflag.Override, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateOverride method of the parent MockFeatureFlagStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *FeatureFlagStoreCreateOverrideFunc) PushHook(hook func(context.Context, *featureflag.Override) (*featureflag.Override, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreCreateOverrideFunc) SetDefaultReturn(r0 *featureflag.Override, r1 error) {
	f.SetDefaultHook(func(context.Context, *featureflag.Override) (*featureflag.Override, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreCreateOverrideFunc) PushReturn(r0 *featureflag.Override, r1 error) {
	f.PushHook(func(context.Context, *featureflag.Override) (*featureflag.Override, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreCreateOverrideFunc) nextHook() func(context.Context, *featureflag.Override) (*featureflag.Override, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreCreateOverrideFunc) appendCall(r0 FeatureFlagStoreCreateOverrideFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreCreateOverrideFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreCreateOverrideFunc) History() []FeatureFlagStoreCreateOverrideFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreCreateOverrideFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreCreateOverrideFuncCall is an object that describes an
// invocation of method CreateOverride on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreCreateOverrideFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *featureflag.Override
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *featureflag.Override
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreCreateOverrideFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreCreateOverrideFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreCreateRolloutFunc describes the behavior when the
// CreateRollout method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreCreateRolloutFunc struct {
	defaultHook func(context.Context, string, int32) (*featureflag.FeatureFlag, error)
	hooks       []func(context.Context, string, int32) (*featureflag.FeatureFlag, error)
	history     []FeatureFlagStoreCreateRolloutFuncCall
	mutex       sync.Mutex
}

// CreateRollout delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) CreateRollout(v0 context.Context, v1 string, v2 int32) (*featureflag.FeatureFlag, error) {
	r0, r1 := m.CreateRolloutFunc.nextHook()(v0, v1, v2)
	m.CreateRolloutFunc.appendCall(FeatureFlagStoreCreateRolloutFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateRollout method
// of the parent MockFeatureFlagStore instance is invoked and the hook queue
// is empty.
func (f *FeatureFlagStoreCreateRolloutFunc) SetDefaultHook(hook func(context.Context, string, int32) (*featureflag.FeatureFlag, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateRollout method of the parent MockFeatureFlagStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *FeatureFlagStoreCreateRolloutFunc) PushHook(hook func(context.Context, string, int32) (*featureflag.FeatureFlag, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreCreateRolloutFunc) SetDefaultReturn(r0 *featureflag.FeatureFlag, r1 error) {
	f.SetDefaultHook(func(context.Context, string, int32) (*featureflag.FeatureFlag, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreCreateRolloutFunc) PushReturn(r0 *featureflag.FeatureFlag, r1 error) {
	f.PushHook(func(context.Context, string, int32) (*featureflag.FeatureFlag, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreCreateRolloutFunc) nextHook() func(context.Context, string, int32) (*featureflag.FeatureFlag, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreCreateRolloutFunc) appendCall(r0 FeatureFlagStoreCreateRolloutFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreCreateRolloutFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreCreateRolloutFunc) History() []FeatureFlagStoreCreateRolloutFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreCreateRolloutFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreCreateRolloutFuncCall is an object that describes an
// invocation of method CreateRollout on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreCreateRolloutFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *featureflag.FeatureFlag
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreCreateRolloutFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreCreateRolloutFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreDeleteFeatureFlagFunc describes the behavior when the
// DeleteFeatureFlag method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreDeleteFeatureFlagFunc struct {
	defaultHook func(context.Context, string) error
	hooks       []func(context.Context, string) error
	history     []FeatureFlagStoreDeleteFeatureFlagFuncCall
	mutex       sync.Mutex
}

// DeleteFeatureFlag delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) DeleteFeatureFlag(v0 context.Context, v1 string) error {
	r0 := m.DeleteFeatureFlagFunc.nextHook()(v0, v1)
	m.DeleteFeatureFlagFunc.appendCall(FeatureFlagStoreDeleteFeatureFlagFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteFeatureFlag
// method of the parent MockFeatureFlagStore instance is invoked and the
// hook queue is empty.
func (f *FeatureFlagStoreDeleteFeatureFlagFunc) SetDefaultHook(hook func(context.Context, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteFeatureFlag method of the parent MockFeatureFlagStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *FeatureFlagStoreDeleteFeatureFlagFunc) PushHook(hook func(context.Context, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreDeleteFeatureFlagFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreDeleteFeatureFlagFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string) error {
		return r0
	})
}

func (f *FeatureFlagStoreDeleteFeatureFlagFunc) nextHook() func(context.Context, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreDeleteFeatureFlagFunc) appendCall(r0 FeatureFlagStoreDeleteFeatureFlagFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreDeleteFeatureFlagFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreDeleteFeatureFlagFunc) History() []FeatureFlagStoreDeleteFeatureFlagFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreDeleteFeatureFlagFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreDeleteFeatureFlagFuncCall is an object that describes an
// invocation of method DeleteFeatureFlag on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreDeleteFeatureFlagFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreDeleteFeatureFlagFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreDeleteFeatureFlagFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// FeatureFlagStoreDeleteOverrideFunc describes the behavior when the
// DeleteOverride method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreDeleteOverrideFunc struct {
	defaultHook func(context.Context, *int32, *int32, string) error
	hooks       []func(context.Context, *int32, *int32, string) error
	history     []FeatureFlagStoreDeleteOverrideFuncCall
	mutex       sync.Mutex
}

// DeleteOverride delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) DeleteOverride(v0 context.Context, v1 *int32, v2 *int32, v3 string) error {
	r0 := m.DeleteOverrideFunc.nextHook()(v0, v1, v2, v3)
	m.DeleteOverrideFunc.appendCall(FeatureFlagStoreDeleteOverrideFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteOverride
// method of the parent MockFeatureFlagStore instance is invoked and the
// hook queue is empty.
func (f *FeatureFlagStoreDeleteOverrideFunc) SetDefaultHook(hook func(context.Context, *int32, *int32, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteOverride method of the parent MockFeatureFlagStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *FeatureFlagStoreDeleteOverrideFunc) PushHook(hook func(context.Context, *int32, *int32, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreDeleteOverrideFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *int32, *int32, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreDeleteOverrideFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *int32, *int32, string) error {
		return r0
	})
}

func (f *FeatureFlagStoreDeleteOverrideFunc) nextHook() func(context.Context, *int32, *int32, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreDeleteOverrideFunc) appendCall(r0 FeatureFlagStoreDeleteOverrideFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreDeleteOverrideFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreDeleteOverrideFunc) History() []FeatureFlagStoreDeleteOverrideFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreDeleteOverrideFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreDeleteOverrideFuncCall is an object that describes an
// invocation of method DeleteOverride on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreDeleteOverrideFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *int32
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreDeleteOverrideFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreDeleteOverrideFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// FeatureFlagStoreGetAnonymousUserFlagsFunc describes the behavior when the
// GetAnonymousUserFlags method of the parent MockFeatureFlagStore instance
// is invoked.
type FeatureFlagStoreGetAnonymousUserFlagsFunc struct {
	defaultHook func(context.Context, string) (map[string]bool, error)
	hooks       []func(context.Context, string) (map[string]bool, error)
	history     []FeatureFlagStoreGetAnonymousUserFlagsFuncCall
	mutex       sync.Mutex
}

// GetAnonymousUserFlags delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) GetAnonymousUserFlags(v0 context.Context, v1 string) (map[string]bool, error) {
	r0, r1 := m.GetAnonymousUserFlagsFunc.nextHook()(v0, v1)
	m.GetAnonymousUserFlagsFunc.appendCall(FeatureFlagStoreGetAnonymousUserFlagsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetAnonymousUserFlags method of the parent MockFeatureFlagStore instance
// is invoked and the hook queue is empty.
func (f *FeatureFlagStoreGetAnonymousUserFlagsFunc) SetDefaultHook(hook func(context.Context, string) (map[string]bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAnonymousUserFlags method of the parent MockFeatureFlagStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *FeatureFlagStoreGetAnonymousUserFlagsFunc) PushHook(hook func(context.Context, string) (map[string]bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreGetAnonymousUserFlagsFunc) SetDefaultReturn(r0 map[string]bool, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (map[string]bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreGetAnonymousUserFlagsFunc) PushReturn(r0 map[string]bool, r1 error) {
	f.PushHook(func(context.Context, string) (map[string]bool, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreGetAnonymousUserFlagsFunc) nextHook() func(context.Context, string) (map[string]bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreGetAnonymousUserFlagsFunc) appendCall(r0 FeatureFlagStoreGetAnonymousUserFlagsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// FeatureFlagStoreGetAnonymousUserFlagsFuncCall objects describing the
// invocations of this function.
func (f *FeatureFlagStoreGetAnonymousUserFlagsFunc) History() []FeatureFlagStoreGetAnonymousUserFlagsFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreGetAnonymousUserFlagsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreGetAnonymousUserFlagsFuncCall is an object that describes
// an invocation of method GetAnonymousUserFlags on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreGetAnonymousUserFlagsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[string]bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreGetAnonymousUserFlagsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreGetAnonymousUserFlagsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreGetFeatureFlagFunc describes the behavior when the
// GetFeatureFlag method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreGetFeatureFlagFunc struct {
	defaultHook func(context.Context, string) (*featureflag.FeatureFlag, error)
	hooks       []func(context.Context, string) (*featureflag.FeatureFlag, error)
	history     []FeatureFlagStoreGetFeatureFlagFuncCall
	mutex       sync.Mutex
}

// GetFeatureFlag delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) GetFeatureFlag(v0 context.Context, v1 string) (*featureflag.FeatureFlag, error) {
	r0, r1 := m.GetFeatureFlagFunc.nextHook()(v0, v1)
	m.GetFeatureFlagFunc.appendCall(FeatureFlagStoreGetFeatureFlagFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetFeatureFlag
// method of the parent MockFeatureFlagStore instance is invoked and the
// hook queue is empty.
func (f *FeatureFlagStoreGetFeatureFlagFunc) SetDefaultHook(hook func(context.Context, string) (*featureflag.FeatureFlag, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetFeatureFlag method of the parent MockFeatureFlagStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *FeatureFlagStoreGetFeatureFlagFunc) PushHook(hook func(context.Context, string) (*featureflag.FeatureFlag, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreGetFeatureFlagFunc) SetDefaultReturn(r0 *featureflag.FeatureFlag, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*featureflag.FeatureFlag, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreGetFeatureFlagFunc) PushReturn(r0 *featureflag.FeatureFlag, r1 error) {
	f.PushHook(func(context.Context, string) (*featureflag.FeatureFlag, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreGetFeatureFlagFunc) nextHook() func(context.Context, string) (*featureflag.FeatureFlag, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreGetFeatureFlagFunc) appendCall(r0 FeatureFlagStoreGetFeatureFlagFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreGetFeatureFlagFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreGetFeatureFlagFunc) History() []FeatureFlagStoreGetFeatureFlagFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreGetFeatureFlagFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreGetFeatureFlagFuncCall is an object that describes an
// invocation of method GetFeatureFlag on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreGetFeatureFlagFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *featureflag.FeatureFlag
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreGetFeatureFlagFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreGetFeatureFlagFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreGetFeatureFlagsFunc describes the behavior when the
// GetFeatureFlags method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreGetFeatureFlagsFunc struct {
	defaultHook func(context.Context) ([]*featureflag.FeatureFlag, error)
	hooks       []func(context.Context) ([]*featureflag.FeatureFlag, error)
	history     []FeatureFlagStoreGetFeatureFlagsFuncCall
	mutex       sync.Mutex
}

// GetFeatureFlags delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) GetFeatureFlags(v0 context.Context) ([]*featureflag.FeatureFlag, error) {
	r0, r1 := m.GetFeatureFlagsFunc.nextHook()(v0)
	m.GetFeatureFlagsFunc.appendCall(FeatureFlagStoreGetFeatureFlagsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetFeatureFlags
// method of the parent MockFeatureFlagStore instance is invoked and the
// hook queue is empty.
func (f *FeatureFlagStoreGetFeatureFlagsFunc) SetDefaultHook(hook func(context.Context) ([]*featureflag.FeatureFlag, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetFeatureFlags method of the parent MockFeatureFlagStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *FeatureFlagStoreGetFeatureFlagsFunc) PushHook(hook func(context.Context) ([]*featureflag.FeatureFlag, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreGetFeatureFlagsFunc) SetDefaultReturn(r0 []*featureflag.FeatureFlag, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]*featureflag.FeatureFlag, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreGetFeatureFlagsFunc) PushReturn(r0 []*featureflag.FeatureFlag, r1 error) {
	f.PushHook(func(context.Context) ([]*featureflag.FeatureFlag, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreGetFeatureFlagsFunc) nextHook() func(context.Context) ([]*featureflag.FeatureFlag, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreGetFeatureFlagsFunc) appendCall(r0 FeatureFlagStoreGetFeatureFlagsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreGetFeatureFlagsFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreGetFeatureFlagsFunc) History() []FeatureFlagStoreGetFeatureFlagsFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreGetFeatureFlagsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreGetFeatureFlagsFuncCall is an object that describes an
// invocation of method GetFeatureFlags on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreGetFeatureFlagsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*featureflag.FeatureFlag
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreGetFeatureFlagsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreGetFeatureFlagsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreGetGlobalFeatureFlagsFunc describes the behavior when the
// GetGlobalFeatureFlags method of the parent MockFeatureFlagStore instance
// is invoked.
type FeatureFlagStoreGetGlobalFeatureFlagsFunc struct {
	defaultHook func(context.Context) (map[string]bool, error)
	hooks       []func(context.Context) (map[string]bool, error)
	history     []FeatureFlagStoreGetGlobalFeatureFlagsFuncCall
	mutex       sync.Mutex
}

// GetGlobalFeatureFlags delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) GetGlobalFeatureFlags(v0 context.Context) (map[string]bool, error) {
	r0, r1 := m.GetGlobalFeatureFlagsFunc.nextHook()(v0)
	m.GetGlobalFeatureFlagsFunc.appendCall(FeatureFlagStoreGetGlobalFeatureFlagsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetGlobalFeatureFlags method of the parent MockFeatureFlagStore instance
// is invoked and the hook queue is empty.
func (f *FeatureFlagStoreGetGlobalFeatureFlagsFunc) SetDefaultHook(hook func(context.Context) (map[string]bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetGlobalFeatureFlags method of the parent MockFeatureFlagStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *FeatureFlagStoreGetGlobalFeatureFlagsFunc) PushHook(hook func(context.Context) (map[string]bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreGetGlobalFeatureFlagsFunc) SetDefaultReturn(r0 map[string]bool, r1 error) {
	f.SetDefaultHook(func(context.Context) (map[string]bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreGetGlobalFeatureFlagsFunc) PushReturn(r0 map[string]bool, r1 error) {
	f.PushHook(func(context.Context) (map[string]bool, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreGetGlobalFeatureFlagsFunc) nextHook() func(context.Context) (map[string]bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreGetGlobalFeatureFlagsFunc) appendCall(r0 FeatureFlagStoreGetGlobalFeatureFlagsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// FeatureFlagStoreGetGlobalFeatureFlagsFuncCall objects describing the
// invocations of this function.
func (f *FeatureFlagStoreGetGlobalFeatureFlagsFunc) History() []FeatureFlagStoreGetGlobalFeatureFlagsFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreGetGlobalFeatureFlagsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreGetGlobalFeatureFlagsFuncCall is an object that describes
// an invocation of method GetGlobalFeatureFlags on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreGetGlobalFeatureFlagsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[string]bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreGetGlobalFeatureFlagsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreGetGlobalFeatureFlagsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreGetOrgFeatureFlagFunc describes the behavior when the
// GetOrgFeatureFlag method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreGetOrgFeatureFlagFunc struct {
	defaultHook func(context.Context, int32, string) (bool, error)
	hooks       []func(context.Context, int32, string) (bool, error)
	history     []FeatureFlagStoreGetOrgFeatureFlagFuncCall
	mutex       sync.Mutex
}

// GetOrgFeatureFlag delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) GetOrgFeatureFlag(v0 context.Context, v1 int32, v2 string) (bool, error) {
	r0, r1 := m.GetOrgFeatureFlagFunc.nextHook()(v0, v1, v2)
	m.GetOrgFeatureFlagFunc.appendCall(FeatureFlagStoreGetOrgFeatureFlagFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetOrgFeatureFlag
// method of the parent MockFeatureFlagStore instance is invoked and the
// hook queue is empty.
func (f *FeatureFlagStoreGetOrgFeatureFlagFunc) SetDefaultHook(hook func(context.Context, int32, string) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetOrgFeatureFlag method of the parent MockFeatureFlagStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *FeatureFlagStoreGetOrgFeatureFlagFunc) PushHook(hook func(context.Context, int32, string) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreGetOrgFeatureFlagFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, string) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreGetOrgFeatureFlagFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int32, string) (bool, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreGetOrgFeatureFlagFunc) nextHook() func(context.Context, int32, string) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreGetOrgFeatureFlagFunc) appendCall(r0 FeatureFlagStoreGetOrgFeatureFlagFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreGetOrgFeatureFlagFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreGetOrgFeatureFlagFunc) History() []FeatureFlagStoreGetOrgFeatureFlagFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreGetOrgFeatureFlagFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreGetOrgFeatureFlagFuncCall is an object that describes an
// invocation of method GetOrgFeatureFlag on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreGetOrgFeatureFlagFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreGetOrgFeatureFlagFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreGetOrgFeatureFlagFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreGetOrgOverrideForFlagFunc describes the behavior when the
// GetOrgOverrideForFlag method of the parent MockFeatureFlagStore instance
// is invoked.
type FeatureFlagStoreGetOrgOverrideForFlagFunc struct {
	defaultHook func(context.Context, int32, string) (*featureflag.Override, error)
	hooks       []func(context.Context, int32, string) (*featureflag.Override, error)
	history     []FeatureFlagStoreGetOrgOverrideForFlagFuncCall
	mutex       sync.Mutex
}

// GetOrgOverrideForFlag delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) GetOrgOverrideForFlag(v0 context.Context, v1 int32, v2 string) (*featureflag.Override, error) {
	r0, r1 := m.GetOrgOverrideForFlagFunc.nextHook()(v0, v1, v2)
	m.GetOrgOverrideForFlagFunc.appendCall(FeatureFlagStoreGetOrgOverrideForFlagFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetOrgOverrideForFlag method of the parent MockFeatureFlagStore instance
// is invoked and the hook queue is empty.
func (f *FeatureFlagStoreGetOrgOverrideForFlagFunc) SetDefaultHook(hook func(context.Context, int32, string) (*featureflag.Override, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetOrgOverrideForFlag method of the parent MockFeatureFlagStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *FeatureFlagStoreGetOrgOverrideForFlagFunc) PushHook(hook func(context.Context, int32, string) (*featureflag.Override, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreGetOrgOverrideForFlagFunc) SetDefaultReturn(r0 *featureflag.Override, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, string) (*featureflag.Override, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreGetOrgOverrideForFlagFunc) PushReturn(r0 *featureflag.Override, r1 error) {
	f.PushHook(func(context.Context, int32, string) (*featureflag.Override, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreGetOrgOverrideForFlagFunc) nextHook() func(context.Context, int32, string) (*featureflag.Override, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreGetOrgOverrideForFlagFunc) appendCall(r0 FeatureFlagStoreGetOrgOverrideForFlagFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// FeatureFlagStoreGetOrgOverrideForFlagFuncCall objects describing the
// invocations of this function.
func (f *FeatureFlagStoreGetOrgOverrideForFlagFunc) History() []FeatureFlagStoreGetOrgOverrideForFlagFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreGetOrgOverrideForFlagFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreGetOrgOverrideForFlagFuncCall is an object that describes
// an invocation of method GetOrgOverrideForFlag on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreGetOrgOverrideForFlagFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *featureflag.Override
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreGetOrgOverrideForFlagFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreGetOrgOverrideForFlagFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreGetOrgOverridesForUserFunc describes the behavior when
// the GetOrgOverridesForUser method of the parent MockFeatureFlagStore
// instance is invoked.
type FeatureFlagStoreGetOrgOverridesForUserFunc struct {
	defaultHook func(context.Context, int32) ([]*featureflag.Override, error)
	hooks       []func(context.Context, int32) ([]*featureflag.Override, error)
	history     []FeatureFlagStoreGetOrgOverridesForUserFuncCall
	mutex       sync.Mutex
}

// GetOrgOverridesForUser delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) GetOrgOverridesForUser(v0 context.Context, v1 int32) ([]*featureflag.Override, error) {
	r0, r1 := m.GetOrgOverridesForUserFunc.nextHook()(v0, v1)
	m.GetOrgOverridesForUserFunc.appendCall(FeatureFlagStoreGetOrgOverridesForUserFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetOrgOverridesForUser method of the parent MockFeatureFlagStore instance
// is invoked and the hook queue is empty.
func (f *FeatureFlagStoreGetOrgOverridesForUserFunc) SetDefaultHook(hook func(context.Context, int32) ([]*featureflag.Override, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetOrgOverridesForUser method of the parent MockFeatureFlagStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *FeatureFlagStoreGetOrgOverridesForUserFunc) PushHook(hook func(context.Context, int32) ([]*featureflag.Override, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreGetOrgOverridesForUserFunc) SetDefaultReturn(r0 []*featureflag.Override, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) ([]*featureflag.Override, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreGetOrgOverridesForUserFunc) PushReturn(r0 []*featureflag.Override, r1 error) {
	f.PushHook(func(context.Context, int32) ([]*featureflag.Override, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreGetOrgOverridesForUserFunc) nextHook() func(context.Context, int32) ([]*featureflag.Override, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreGetOrgOverridesForUserFunc) appendCall(r0 FeatureFlagStoreGetOrgOverridesForUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// FeatureFlagStoreGetOrgOverridesForUserFuncCall objects describing the
// invocations of this function.
func (f *FeatureFlagStoreGetOrgOverridesForUserFunc) History() []FeatureFlagStoreGetOrgOverridesForUserFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreGetOrgOverridesForUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreGetOrgOverridesForUserFuncCall is an object that
// describes an invocation of method GetOrgOverridesForUser on an instance
// of MockFeatureFlagStore.
type FeatureFlagStoreGetOrgOverridesForUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*featureflag.Override
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreGetOrgOverridesForUserFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreGetOrgOverridesForUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreGetOverridesForFlagFunc describes the behavior when the
// GetOverridesForFlag method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreGetOverridesForFlagFunc struct {
	defaultHook func(context.Context, string) ([]*featureflag.Override, error)
	hooks       []func(context.Context, string) ([]*featureflag.Override, error)
	history     []FeatureFlagStoreGetOverridesForFlagFuncCall
	mutex       sync.Mutex
}

// GetOverridesForFlag delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) GetOverridesForFlag(v0 context.Context, v1 string) ([]*featureflag.Override, error) {
	r0, r1 := m.GetOverridesForFlagFunc.nextHook()(v0, v1)
	m.GetOverridesForFlagFunc.appendCall(FeatureFlagStoreGetOverridesForFlagFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetOverridesForFlag
// method of the parent MockFeatureFlagStore instance is invoked and the
// hook queue is empty.
func (f *FeatureFlagStoreGetOverridesForFlagFunc) SetDefaultHook(hook func(context.Context, string) ([]*featureflag.Override, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetOverridesForFlag method of the parent MockFeatureFlagStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *FeatureFlagStoreGetOverridesForFlagFunc) PushHook(hook func(context.Context, string) ([]*featureflag.Override, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreGetOverridesForFlagFunc) SetDefaultReturn(r0 []*featureflag.Override, r1 error) {
	f.SetDefaultHook(func(context.Context, string) ([]*featureflag.Override, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreGetOverridesForFlagFunc) PushReturn(r0 []*featureflag.Override, r1 error) {
	f.PushHook(func(context.Context, string) ([]*featureflag.Override, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreGetOverridesForFlagFunc) nextHook() func(context.Context, string) ([]*featureflag.Override, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreGetOverridesForFlagFunc) appendCall(r0 FeatureFlagStoreGetOverridesForFlagFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreGetOverridesForFlagFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreGetOverridesForFlagFunc) History() []FeatureFlagStoreGetOverridesForFlagFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreGetOverridesForFlagFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreGetOverridesForFlagFuncCall is an object that describes
// an invocation of method GetOverridesForFlag on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreGetOverridesForFlagFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*featureflag.Override
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreGetOverridesForFlagFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreGetOverridesForFlagFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreGetUserFlagsFunc describes the behavior when the
// GetUserFlags method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreGetUserFlagsFunc struct {
	defaultHook func(context.Context, int32) (map[string]bool, error)
	hooks       []func(context.Context, int32) (map[string]bool, error)
	history     []FeatureFlagStoreGetUserFlagsFuncCall
	mutex       sync.Mutex
}

// GetUserFlags delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) GetUserFlags(v0 context.Context, v1 int32) (map[string]bool, error) {
	r0, r1 := m.GetUserFlagsFunc.nextHook()(v0, v1)
	m.GetUserFlagsFunc.appendCall(FeatureFlagStoreGetUserFlagsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetUserFlags method
// of the parent MockFeatureFlagStore instance is invoked and the hook queue
// is empty.
func (f *FeatureFlagStoreGetUserFlagsFunc) SetDefaultHook(hook func(context.Context, int32) (map[string]bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUserFlags method of the parent MockFeatureFlagStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *FeatureFlagStoreGetUserFlagsFunc) PushHook(hook func(context.Context, int32) (map[string]bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreGetUserFlagsFunc) SetDefaultReturn(r0 map[string]bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (map[string]bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreGetUserFlagsFunc) PushReturn(r0 map[string]bool, r1 error) {
	f.PushHook(func(context.Context, int32) (map[string]bool, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreGetUserFlagsFunc) nextHook() func(context.Context, int32) (map[string]bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreGetUserFlagsFunc) appendCall(r0 FeatureFlagStoreGetUserFlagsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreGetUserFlagsFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreGetUserFlagsFunc) History() []FeatureFlagStoreGetUserFlagsFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreGetUserFlagsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreGetUserFlagsFuncCall is an object that describes an
// invocation of method GetUserFlags on an instance of MockFeatureFlagStore.
type FeatureFlagStoreGetUserFlagsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[string]bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreGetUserFlagsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreGetUserFlagsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreGetUserOverridesFunc describes the behavior when the
// GetUserOverrides method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreGetUserOverridesFunc struct {
	defaultHook func(context.Context, int32) ([]*featureflag.Override, error)
	hooks       []func(context.Context, int32) ([]*featureflag.Override, error)
	history     []FeatureFlagStoreGetUserOverridesFuncCall
	mutex       sync.Mutex
}

// GetUserOverrides delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) GetUserOverrides(v0 context.Context, v1 int32) ([]*featureflag.Override, error) {
	r0, r1 := m.GetUserOverridesFunc.nextHook()(v0, v1)
	m.GetUserOverridesFunc.appendCall(FeatureFlagStoreGetUserOverridesFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetUserOverrides
// method of the parent MockFeatureFlagStore instance is invoked and the
// hook queue is empty.
func (f *FeatureFlagStoreGetUserOverridesFunc) SetDefaultHook(hook func(context.Context, int32) ([]*featureflag.Override, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUserOverrides method of the parent MockFeatureFlagStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *FeatureFlagStoreGetUserOverridesFunc) PushHook(hook func(context.Context, int32) ([]*featureflag.Override, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreGetUserOverridesFunc) SetDefaultReturn(r0 []*featureflag.Override, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) ([]*featureflag.Override, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreGetUserOverridesFunc) PushReturn(r0 []*featureflag.Override, r1 error) {
	f.PushHook(func(context.Context, int32) ([]*featureflag.Override, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreGetUserOverridesFunc) nextHook() func(context.Context, int32) ([]*featureflag.Override, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreGetUserOverridesFunc) appendCall(r0 FeatureFlagStoreGetUserOverridesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreGetUserOverridesFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreGetUserOverridesFunc) History() []FeatureFlagStoreGetUserOverridesFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreGetUserOverridesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreGetUserOverridesFuncCall is an object that describes an
// invocation of method GetUserOverrides on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreGetUserOverridesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*featureflag.Override
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreGetUserOverridesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreGetUserOverridesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreHandleFunc describes the behavior when the Handle method
// of the parent MockFeatureFlagStore instance is invoked.
type FeatureFlagStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []FeatureFlagStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockFeatureFlagStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(FeatureFlagStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockFeatureFlagStore instance is invoked and the hook queue is
// empty.
func (f *FeatureFlagStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockFeatureFlagStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *FeatureFlagStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *FeatureFlagStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreHandleFunc) appendCall(r0 FeatureFlagStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *FeatureFlagStoreHandleFunc) History() []FeatureFlagStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreHandleFuncCall is an object that describes an invocation
// of method Handle on an instance of MockFeatureFlagStore.
type FeatureFlagStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// FeatureFlagStoreUpdateFeatureFlagFunc describes the behavior when the
// UpdateFeatureFlag method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreUpdateFeatureFlagFunc struct {
	defaultHook func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error)
	hooks       []func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error)
	history     []FeatureFlagStoreUpdateFeatureFlagFuncCall
	mutex       sync.Mutex
}

// UpdateFeatureFlag delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) UpdateFeatureFlag(v0 context.Context, v1 *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error) {
	r0, r1 := m.UpdateFeatureFlagFunc.nextHook()(v0, v1)
	m.UpdateFeatureFlagFunc.appendCall(FeatureFlagStoreUpdateFeatureFlagFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the UpdateFeatureFlag
// method of the parent MockFeatureFlagStore instance is invoked and the
// hook queue is empty.
func (f *FeatureFlagStoreUpdateFeatureFlagFunc) SetDefaultHook(hook func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateFeatureFlag method of the parent MockFeatureFlagStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *FeatureFlagStoreUpdateFeatureFlagFunc) PushHook(hook func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreUpdateFeatureFlagFunc) SetDefaultReturn(r0 *featureflag.FeatureFlag, r1 error) {
	f.SetDefaultHook(func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreUpdateFeatureFlagFunc) PushReturn(r0 *featureflag.FeatureFlag, r1 error) {
	f.PushHook(func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreUpdateFeatureFlagFunc) nextHook() func(context.Context, *featureflag.FeatureFlag) (*featureflag.FeatureFlag, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreUpdateFeatureFlagFunc) appendCall(r0 FeatureFlagStoreUpdateFeatureFlagFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreUpdateFeatureFlagFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreUpdateFeatureFlagFunc) History() []FeatureFlagStoreUpdateFeatureFlagFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreUpdateFeatureFlagFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreUpdateFeatureFlagFuncCall is an object that describes an
// invocation of method UpdateFeatureFlag on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreUpdateFeatureFlagFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *featureflag.FeatureFlag
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *featureflag.FeatureFlag
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreUpdateFeatureFlagFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreUpdateFeatureFlagFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreUpdateOverrideFunc describes the behavior when the
// UpdateOverride method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreUpdateOverrideFunc struct {
	defaultHook func(context.Context, *int32, *int32, string, bool) (*featureflag.Override, error)
	hooks       []func(context.Context, *int32, *int32, string, bool) (*featureflag.Override, error)
	history     []FeatureFlagStoreUpdateOverrideFuncCall
	mutex       sync.Mutex
}

// UpdateOverride delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) UpdateOverride(v0 context.Context, v1 *int32, v2 *int32, v3 string, v4 bool) (*featureflag.Override, error) {
	r0, r1 := m.UpdateOverrideFunc.nextHook()(v0, v1, v2, v3, v4)
	m.UpdateOverrideFunc.appendCall(FeatureFlagStoreUpdateOverrideFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the UpdateOverride
// method of the parent MockFeatureFlagStore instance is invoked and the
// hook queue is empty.
func (f *FeatureFlagStoreUpdateOverrideFunc) SetDefaultHook(hook func(context.Context, *int32, *int32, string, bool) (*featureflag.Override, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateOverride method of the parent MockFeatureFlagStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *FeatureFlagStoreUpdateOverrideFunc) PushHook(hook func(context.Context, *int32, *int32, string, bool) (*featureflag.Override, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreUpdateOverrideFunc) SetDefaultReturn(r0 *featureflag.Override, r1 error) {
	f.SetDefaultHook(func(context.Context, *int32, *int32, string, bool) (*featureflag.Override, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreUpdateOverrideFunc) PushReturn(r0 *featureflag.Override, r1 error) {
	f.PushHook(func(context.Context, *int32, *int32, string, bool) (*featureflag.Override, error) {
		return r0, r1
	})
}

func (f *FeatureFlagStoreUpdateOverrideFunc) nextHook() func(context.Context, *int32, *int32, string, bool) (*featureflag.Override, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreUpdateOverrideFunc) appendCall(r0 FeatureFlagStoreUpdateOverrideFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreUpdateOverrideFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreUpdateOverrideFunc) History() []FeatureFlagStoreUpdateOverrideFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreUpdateOverrideFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreUpdateOverrideFuncCall is an object that describes an
// invocation of method UpdateOverride on an instance of
// MockFeatureFlagStore.
type FeatureFlagStoreUpdateOverrideFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *int32
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *featureflag.Override
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreUpdateOverrideFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreUpdateOverrideFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// FeatureFlagStoreWithFunc describes the behavior when the With method of
// the parent MockFeatureFlagStore instance is invoked.
type FeatureFlagStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) FeatureFlagStore
	hooks       []func(basestore.ShareableStore) FeatureFlagStore
	history     []FeatureFlagStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockFeatureFlagStore) With(v0 basestore.ShareableStore) FeatureFlagStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(FeatureFlagStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockFeatureFlagStore instance is invoked and the hook queue is
// empty.
func (f *FeatureFlagStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) FeatureFlagStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockFeatureFlagStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *FeatureFlagStoreWithFunc) PushHook(hook func(basestore.ShareableStore) FeatureFlagStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreWithFunc) SetDefaultReturn(r0 FeatureFlagStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) FeatureFlagStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreWithFunc) PushReturn(r0 FeatureFlagStore) {
	f.PushHook(func(basestore.ShareableStore) FeatureFlagStore {
		return r0
	})
}

func (f *FeatureFlagStoreWithFunc) nextHook() func(basestore.ShareableStore) FeatureFlagStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreWithFunc) appendCall(r0 FeatureFlagStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreWithFuncCall objects
// describing the invocations of this function.
func (f *FeatureFlagStoreWithFunc) History() []FeatureFlagStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockFeatureFlagStore.
type FeatureFlagStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 FeatureFlagStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// FeatureFlagStoreWithTransactFunc describes the behavior when the
// WithTransact method of the parent MockFeatureFlagStore instance is
// invoked.
type FeatureFlagStoreWithTransactFunc struct {
	defaultHook func(context.Context, func(FeatureFlagStore) error) error
	hooks       []func(context.Context, func(FeatureFlagStore) error) error
	history     []FeatureFlagStoreWithTransactFuncCall
	mutex       sync.Mutex
}

// WithTransact delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockFeatureFlagStore) WithTransact(v0 context.Context, v1 func(FeatureFlagStore) error) error {
	r0 := m.WithTransactFunc.nextHook()(v0, v1)
	m.WithTransactFunc.appendCall(FeatureFlagStoreWithTransactFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithTransact method
// of the parent MockFeatureFlagStore instance is invoked and the hook queue
// is empty.
func (f *FeatureFlagStoreWithTransactFunc) SetDefaultHook(hook func(context.Context, func(FeatureFlagStore) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithTransact method of the parent MockFeatureFlagStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *FeatureFlagStoreWithTransactFunc) PushHook(hook func(context.Context, func(FeatureFlagStore) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *FeatureFlagStoreWithTransactFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, func(FeatureFlagStore) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *FeatureFlagStoreWithTransactFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, func(FeatureFlagStore) error) error {
		return r0
	})
}

func (f *FeatureFlagStoreWithTransactFunc) nextHook() func(context.Context, func(FeatureFlagStore) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *FeatureFlagStoreWithTransactFunc) appendCall(r0 FeatureFlagStoreWithTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of FeatureFlagStoreWithTransactFuncCall
// objects describing the invocations of this function.
func (f *FeatureFlagStoreWithTransactFunc) History() []FeatureFlagStoreWithTransactFuncCall {
	f.mutex.Lock()
	history := make([]FeatureFlagStoreWithTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// FeatureFlagStoreWithTransactFuncCall is an object that describes an
// invocation of method WithTransact on an instance of MockFeatureFlagStore.
type FeatureFlagStoreWithTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 func(FeatureFlagStore) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c FeatureFlagStoreWithTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c FeatureFlagStoreWithTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockGitserverLocalCloneStore is a mock implementation of the
// GitserverLocalCloneStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockGitserverLocalCloneStore struct {
	// EnqueueFunc is an instance of a mock function object controlling the
	// behavior of the method Enqueue.
	EnqueueFunc *GitserverLocalCloneStoreEnqueueFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *GitserverLocalCloneStoreHandleFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *GitserverLocalCloneStoreWithFunc
}

// NewMockGitserverLocalCloneStore creates a new mock of the
// GitserverLocalCloneStore interface. All methods return zero values for
// all results, unless overwritten.
func NewMockGitserverLocalCloneStore() *MockGitserverLocalCloneStore {
	return &MockGitserverLocalCloneStore{
		EnqueueFunc: &GitserverLocalCloneStoreEnqueueFunc{
			defaultHook: func(context.Context, int, string, string, bool) (r0 int, r1 error) {
				return
			},
		},
		HandleFunc: &GitserverLocalCloneStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		WithFunc: &GitserverLocalCloneStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 GitserverLocalCloneStore) {
				return
			},
		},
	}
}

// NewStrictMockGitserverLocalCloneStore creates a new mock of the
// GitserverLocalCloneStore interface. All methods panic on invocation,
// unless overwritten.
func NewStrictMockGitserverLocalCloneStore() *MockGitserverLocalCloneStore {
	return &MockGitserverLocalCloneStore{
		EnqueueFunc: &GitserverLocalCloneStoreEnqueueFunc{
			defaultHook: func(context.Context, int, string, string, bool) (int, error) {
				panic("unexpected invocation of MockGitserverLocalCloneStore.Enqueue")
			},
		},
		HandleFunc: &GitserverLocalCloneStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockGitserverLocalCloneStore.Handle")
			},
		},
		WithFunc: &GitserverLocalCloneStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) GitserverLocalCloneStore {
				panic("unexpected invocation of MockGitserverLocalCloneStore.With")
			},
		},
	}
}

// NewMockGitserverLocalCloneStoreFrom creates a new mock of the
// MockGitserverLocalCloneStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockGitserverLocalCloneStoreFrom(i GitserverLocalCloneStore) *MockGitserverLocalCloneStore {
	return &MockGitserverLocalCloneStore{
		EnqueueFunc: &GitserverLocalCloneStoreEnqueueFunc{
			defaultHook: i.Enqueue,
		},
		HandleFunc: &GitserverLocalCloneStoreHandleFunc{
			defaultHook: i.Handle,
		},
		WithFunc: &GitserverLocalCloneStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// GitserverLocalCloneStoreEnqueueFunc describes the behavior when the
// Enqueue method of the parent MockGitserverLocalCloneStore instance is
// invoked.
type GitserverLocalCloneStoreEnqueueFunc struct {
	defaultHook func(context.Context, int, string, string, bool) (int, error)
	hooks       []func(context.Context, int, string, string, bool) (int, error)
	history     []GitserverLocalCloneStoreEnqueueFuncCall
	mutex       sync.Mutex
}

// Enqueue delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverLocalCloneStore) Enqueue(v0 context.Context, v1 int, v2 string, v3 string, v4 bool) (int, error) {
	r0, r1 := m.EnqueueFunc.nextHook()(v0, v1, v2, v3, v4)
	m.EnqueueFunc.appendCall(GitserverLocalCloneStoreEnqueueFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Enqueue method of
// the parent MockGitserverLocalCloneStore instance is invoked and the hook
// queue is empty.
func (f *GitserverLocalCloneStoreEnqueueFunc) SetDefaultHook(hook func(context.Context, int, string, string, bool) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Enqueue method of the parent MockGitserverLocalCloneStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverLocalCloneStoreEnqueueFunc) PushHook(hook func(context.Context, int, string, string, bool) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverLocalCloneStoreEnqueueFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string, string, bool) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverLocalCloneStoreEnqueueFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, int, string, string, bool) (int, error) {
		return r0, r1
	})
}

func (f *GitserverLocalCloneStoreEnqueueFunc) nextHook() func(context.Context, int, string, string, bool) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverLocalCloneStoreEnqueueFunc) appendCall(r0 GitserverLocalCloneStoreEnqueueFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverLocalCloneStoreEnqueueFuncCall
// objects describing the invocations of this function.
func (f *GitserverLocalCloneStoreEnqueueFunc) History() []GitserverLocalCloneStoreEnqueueFuncCall {
	f.mutex.Lock()
	history := make([]GitserverLocalCloneStoreEnqueueFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverLocalCloneStoreEnqueueFuncCall is an object that describes an
// invocation of method Enqueue on an instance of
// MockGitserverLocalCloneStore.
type GitserverLocalCloneStoreEnqueueFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverLocalCloneStoreEnqueueFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverLocalCloneStoreEnqueueFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverLocalCloneStoreHandleFunc describes the behavior when the Handle
// method of the parent MockGitserverLocalCloneStore instance is invoked.
type GitserverLocalCloneStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []GitserverLocalCloneStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverLocalCloneStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(GitserverLocalCloneStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockGitserverLocalCloneStore instance is invoked and the hook
// queue is empty.
func (f *GitserverLocalCloneStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockGitserverLocalCloneStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverLocalCloneStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverLocalCloneStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverLocalCloneStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *GitserverLocalCloneStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverLocalCloneStoreHandleFunc) appendCall(r0 GitserverLocalCloneStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverLocalCloneStoreHandleFuncCall
// objects describing the invocations of this function.
func (f *GitserverLocalCloneStoreHandleFunc) History() []GitserverLocalCloneStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]GitserverLocalCloneStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverLocalCloneStoreHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of
// MockGitserverLocalCloneStore.
type GitserverLocalCloneStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverLocalCloneStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverLocalCloneStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverLocalCloneStoreWithFunc describes the behavior when the With
// method of the parent MockGitserverLocalCloneStore instance is invoked.
type GitserverLocalCloneStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) GitserverLocalCloneStore
	hooks       []func(basestore.ShareableStore) GitserverLocalCloneStore
	history     []GitserverLocalCloneStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverLocalCloneStore) With(v0 basestore.ShareableStore) GitserverLocalCloneStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(GitserverLocalCloneStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockGitserverLocalCloneStore instance is invoked and the hook
// queue is empty.
func (f *GitserverLocalCloneStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) GitserverLocalCloneStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockGitserverLocalCloneStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverLocalCloneStoreWithFunc) PushHook(hook func(basestore.ShareableStore) GitserverLocalCloneStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverLocalCloneStoreWithFunc) SetDefaultReturn(r0 GitserverLocalCloneStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) GitserverLocalCloneStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverLocalCloneStoreWithFunc) PushReturn(r0 GitserverLocalCloneStore) {
	f.PushHook(func(basestore.ShareableStore) GitserverLocalCloneStore {
		return r0
	})
}

func (f *GitserverLocalCloneStoreWithFunc) nextHook() func(basestore.ShareableStore) GitserverLocalCloneStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverLocalCloneStoreWithFunc) appendCall(r0 GitserverLocalCloneStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverLocalCloneStoreWithFuncCall
// objects describing the invocations of this function.
func (f *GitserverLocalCloneStoreWithFunc) History() []GitserverLocalCloneStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]GitserverLocalCloneStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverLocalCloneStoreWithFuncCall is an object that describes an
// invocation of method With on an instance of MockGitserverLocalCloneStore.
type GitserverLocalCloneStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 GitserverLocalCloneStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverLocalCloneStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverLocalCloneStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockGitserverRepoStore is a mock implementation of the GitserverRepoStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockGitserverRepoStore struct {
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *GitserverRepoStoreGetByIDFunc
	// GetByNameFunc is an instance of a mock function object controlling
	// the behavior of the method GetByName.
	GetByNameFunc *GitserverRepoStoreGetByNameFunc
	// GetByNamesFunc is an instance of a mock function object controlling
	// the behavior of the method GetByNames.
	GetByNamesFunc *GitserverRepoStoreGetByNamesFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *GitserverRepoStoreHandleFunc
	// IteratePurgeableReposFunc is an instance of a mock function object
	// controlling the behavior of the method IteratePurgeableRepos.
	IteratePurgeableReposFunc *GitserverRepoStoreIteratePurgeableReposFunc
	// IterateRepoGitserverStatusFunc is an instance of a mock function
	// object controlling the behavior of the method
	// IterateRepoGitserverStatus.
	IterateRepoGitserverStatusFunc *GitserverRepoStoreIterateRepoGitserverStatusFunc
	// ListReposWithLastErrorFunc is an instance of a mock function object
	// controlling the behavior of the method ListReposWithLastError.
	ListReposWithLastErrorFunc *GitserverRepoStoreListReposWithLastErrorFunc
	// ListReposWithoutSizeFunc is an instance of a mock function object
	// controlling the behavior of the method ListReposWithoutSize.
	ListReposWithoutSizeFunc *GitserverRepoStoreListReposWithoutSizeFunc
	// LogCorruptionFunc is an instance of a mock function object
	// controlling the behavior of the method LogCorruption.
	LogCorruptionFunc *GitserverRepoStoreLogCorruptionFunc
	// SetCloneStatusFunc is an instance of a mock function object
	// controlling the behavior of the method SetCloneStatus.
	SetCloneStatusFunc *GitserverRepoStoreSetCloneStatusFunc
	// SetCloningProgressFunc is an instance of a mock function object
	// controlling the behavior of the method SetCloningProgress.
	SetCloningProgressFunc *GitserverRepoStoreSetCloningProgressFunc
	// SetLastErrorFunc is an instance of a mock function object controlling
	// the behavior of the method SetLastError.
	SetLastErrorFunc *GitserverRepoStoreSetLastErrorFunc
	// SetLastFetchedFunc is an instance of a mock function object
	// controlling the behavior of the method SetLastFetched.
	SetLastFetchedFunc *GitserverRepoStoreSetLastFetchedFunc
	// SetRepoSizeFunc is an instance of a mock function object controlling
	// the behavior of the method SetRepoSize.
	SetRepoSizeFunc *GitserverRepoStoreSetRepoSizeFunc
	// TotalErroredCloudDefaultReposFunc is an instance of a mock function
	// object controlling the behavior of the method
	// TotalErroredCloudDefaultRepos.
	TotalErroredCloudDefaultReposFunc *GitserverRepoStoreTotalErroredCloudDefaultReposFunc
	// UpdateFunc is an instance of a mock function object controlling the
	// behavior of the method Update.
	UpdateFunc *GitserverRepoStoreUpdateFunc
	// UpdateRepoSizesFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateRepoSizes.
	UpdateRepoSizesFunc *GitserverRepoStoreUpdateRepoSizesFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *GitserverRepoStoreWithFunc
}

// NewMockGitserverRepoStore creates a new mock of the GitserverRepoStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockGitserverRepoStore() *MockGitserverRepoStore {
	return &MockGitserverRepoStore{
		GetByIDFunc: &GitserverRepoStoreGetByIDFunc{
			defaultHook: func(context.Context, api.RepoID) (r0 *types.GitserverRepo, r1 error) {
				return
			},
		},
		GetByNameFunc: &GitserverRepoStoreGetByNameFunc{
			defaultHook: func(context.Context, api.RepoName) (r0 *types.GitserverRepo, r1 error) {
				return
			},
		},
		GetByNamesFunc: &GitserverRepoStoreGetByNamesFunc{
			defaultHook: func(context.Context, ...api.RepoName) (r0 map[api.RepoName]*types.GitserverRepo, r1 error) {
				return
			},
		},
		HandleFunc: &GitserverRepoStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		IteratePurgeableReposFunc: &GitserverRepoStoreIteratePurgeableReposFunc{
			defaultHook: func(context.Context, IteratePurgableReposOptions, func(repo api.RepoName) error) (r0 error) {
				return
			},
		},
		IterateRepoGitserverStatusFunc: &GitserverRepoStoreIterateRepoGitserverStatusFunc{
			defaultHook: func(context.Context, IterateRepoGitserverStatusOptions) (r0 []types.RepoGitserverStatus, r1 int, r2 error) {
				return
			},
		},
		ListReposWithLastErrorFunc: &GitserverRepoStoreListReposWithLastErrorFunc{
			defaultHook: func(context.Context) (r0 []api.RepoName, r1 error) {
				return
			},
		},
		ListReposWithoutSizeFunc: &GitserverRepoStoreListReposWithoutSizeFunc{
			defaultHook: func(context.Context) (r0 map[api.RepoName]api.RepoID, r1 error) {
				return
			},
		},
		LogCorruptionFunc: &GitserverRepoStoreLogCorruptionFunc{
			defaultHook: func(context.Context, api.RepoName, string, string) (r0 error) {
				return
			},
		},
		SetCloneStatusFunc: &GitserverRepoStoreSetCloneStatusFunc{
			defaultHook: func(context.Context, api.RepoName, types.CloneStatus, string) (r0 error) {
				return
			},
		},
		SetCloningProgressFunc: &GitserverRepoStoreSetCloningProgressFunc{
			defaultHook: func(context.Context, api.RepoName, string) (r0 error) {
				return
			},
		},
		SetLastErrorFunc: &GitserverRepoStoreSetLastErrorFunc{
			defaultHook: func(context.Context, api.RepoName, string, string) (r0 error) {
				return
			},
		},
		SetLastFetchedFunc: &GitserverRepoStoreSetLastFetchedFunc{
			defaultHook: func(context.Context, api.RepoName, GitserverFetchData) (r0 error) {
				return
			},
		},
		SetRepoSizeFunc: &GitserverRepoStoreSetRepoSizeFunc{
			defaultHook: func(context.Context, api.RepoName, int64, string) (r0 error) {
				return
			},
		},
		TotalErroredCloudDefaultReposFunc: &GitserverRepoStoreTotalErroredCloudDefaultReposFunc{
			defaultHook: func(context.Context) (r0 int, r1 error) {
				return
			},
		},
		UpdateFunc: &GitserverRepoStoreUpdateFunc{
			defaultHook: func(context.Context, ...*types.GitserverRepo) (r0 error) {
				return
			},
		},
		UpdateRepoSizesFunc: &GitserverRepoStoreUpdateRepoSizesFunc{
			defaultHook: func(context.Context, string, map[api.RepoName]int64) (r0 int, r1 error) {
				return
			},
		},
		WithFunc: &GitserverRepoStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 GitserverRepoStore) {
				return
			},
		},
	}
}

// NewStrictMockGitserverRepoStore creates a new mock of the
// GitserverRepoStore interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockGitserverRepoStore() *MockGitserverRepoStore {
	return &MockGitserverRepoStore{
		GetByIDFunc: &GitserverRepoStoreGetByIDFunc{
			defaultHook: func(context.Context, api.RepoID) (*types.GitserverRepo, error) {
				panic("unexpected invocation of MockGitserverRepoStore.GetByID")
			},
		},
		GetByNameFunc: &GitserverRepoStoreGetByNameFunc{
			defaultHook: func(context.Context, api.RepoName) (*types.GitserverRepo, error) {
				panic("unexpected invocation of MockGitserverRepoStore.GetByName")
			},
		},
		GetByNamesFunc: &GitserverRepoStoreGetByNamesFunc{
			defaultHook: func(context.Context, ...api.RepoName) (map[api.RepoName]*types.GitserverRepo, error) {
				panic("unexpected invocation of MockGitserverRepoStore.GetByNames")
			},
		},
		HandleFunc: &GitserverRepoStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockGitserverRepoStore.Handle")
			},
		},
		IteratePurgeableReposFunc: &GitserverRepoStoreIteratePurgeableReposFunc{
			defaultHook: func(context.Context, IteratePurgableReposOptions, func(repo api.RepoName) error) error {
				panic("unexpected invocation of MockGitserverRepoStore.IteratePurgeableRepos")
			},
		},
		IterateRepoGitserverStatusFunc: &GitserverRepoStoreIterateRepoGitserverStatusFunc{
			defaultHook: func(context.Context, IterateRepoGitserverStatusOptions) ([]types.RepoGitserverStatus, int, error) {
				panic("unexpected invocation of MockGitserverRepoStore.IterateRepoGitserverStatus")
			},
		},
		ListReposWithLastErrorFunc: &GitserverRepoStoreListReposWithLastErrorFunc{
			defaultHook: func(context.Context) ([]api.RepoName, error) {
				panic("unexpected invocation of MockGitserverRepoStore.ListReposWithLastError")
			},
		},
		ListReposWithoutSizeFunc: &GitserverRepoStoreListReposWithoutSizeFunc{
			defaultHook: func(context.Context) (map[api.RepoName]api.RepoID, error) {
				panic("unexpected invocation of MockGitserverRepoStore.ListReposWithoutSize")
			},
		},
		LogCorruptionFunc: &GitserverRepoStoreLogCorruptionFunc{
			defaultHook: func(context.Context, api.RepoName, string, string) error {
				panic("unexpected invocation of MockGitserverRepoStore.LogCorruption")
			},
		},
		SetCloneStatusFunc: &GitserverRepoStoreSetCloneStatusFunc{
			defaultHook: func(context.Context, api.RepoName, types.CloneStatus, string) error {
				panic("unexpected invocation of MockGitserverRepoStore.SetCloneStatus")
			},
		},
		SetCloningProgressFunc: &GitserverRepoStoreSetCloningProgressFunc{
			defaultHook: func(context.Context, api.RepoName, string) error {
				panic("unexpected invocation of MockGitserverRepoStore.SetCloningProgress")
			},
		},
		SetLastErrorFunc: &GitserverRepoStoreSetLastErrorFunc{
			defaultHook: func(context.Context, api.RepoName, string, string) error {
				panic("unexpected invocation of MockGitserverRepoStore.SetLastError")
			},
		},
		SetLastFetchedFunc: &GitserverRepoStoreSetLastFetchedFunc{
			defaultHook: func(context.Context, api.RepoName, GitserverFetchData) error {
				panic("unexpected invocation of MockGitserverRepoStore.SetLastFetched")
			},
		},
		SetRepoSizeFunc: &GitserverRepoStoreSetRepoSizeFunc{
			defaultHook: func(context.Context, api.RepoName, int64, string) error {
				panic("unexpected invocation of MockGitserverRepoStore.SetRepoSize")
			},
		},
		TotalErroredCloudDefaultReposFunc: &GitserverRepoStoreTotalErroredCloudDefaultReposFunc{
			defaultHook: func(context.Context) (int, error) {
				panic("unexpected invocation of MockGitserverRepoStore.TotalErroredCloudDefaultRepos")
			},
		},
		UpdateFunc: &GitserverRepoStoreUpdateFunc{
			defaultHook: func(context.Context, ...*types.GitserverRepo) error {
				panic("unexpected invocation of MockGitserverRepoStore.Update")
			},
		},
		UpdateRepoSizesFunc: &GitserverRepoStoreUpdateRepoSizesFunc{
			defaultHook: func(context.Context, string, map[api.RepoName]int64) (int, error) {
				panic("unexpected invocation of MockGitserverRepoStore.UpdateRepoSizes")
			},
		},
		WithFunc: &GitserverRepoStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) GitserverRepoStore {
				panic("unexpected invocation of MockGitserverRepoStore.With")
			},
		},
	}
}

// NewMockGitserverRepoStoreFrom creates a new mock of the
// MockGitserverRepoStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockGitserverRepoStoreFrom(i GitserverRepoStore) *MockGitserverRepoStore {
	return &MockGitserverRepoStore{
		GetByIDFunc: &GitserverRepoStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		GetByNameFunc: &GitserverRepoStoreGetByNameFunc{
			defaultHook: i.GetByName,
		},
		GetByNamesFunc: &GitserverRepoStoreGetByNamesFunc{
			defaultHook: i.GetByNames,
		},
		HandleFunc: &GitserverRepoStoreHandleFunc{
			defaultHook: i.Handle,
		},
		IteratePurgeableReposFunc: &GitserverRepoStoreIteratePurgeableReposFunc{
			defaultHook: i.IteratePurgeableRepos,
		},
		IterateRepoGitserverStatusFunc: &GitserverRepoStoreIterateRepoGitserverStatusFunc{
			defaultHook: i.IterateRepoGitserverStatus,
		},
		ListReposWithLastErrorFunc: &GitserverRepoStoreListReposWithLastErrorFunc{
			defaultHook: i.ListReposWithLastError,
		},
		ListReposWithoutSizeFunc: &GitserverRepoStoreListReposWithoutSizeFunc{
			defaultHook: i.ListReposWithoutSize,
		},
		LogCorruptionFunc: &GitserverRepoStoreLogCorruptionFunc{
			defaultHook: i.LogCorruption,
		},
		SetCloneStatusFunc: &GitserverRepoStoreSetCloneStatusFunc{
			defaultHook: i.SetCloneStatus,
		},
		SetCloningProgressFunc: &GitserverRepoStoreSetCloningProgressFunc{
			defaultHook: i.SetCloningProgress,
		},
		SetLastErrorFunc: &GitserverRepoStoreSetLastErrorFunc{
			defaultHook: i.SetLastError,
		},
		SetLastFetchedFunc: &GitserverRepoStoreSetLastFetchedFunc{
			defaultHook: i.SetLastFetched,
		},
		SetRepoSizeFunc: &GitserverRepoStoreSetRepoSizeFunc{
			defaultHook: i.SetRepoSize,
		},
		TotalErroredCloudDefaultReposFunc: &GitserverRepoStoreTotalErroredCloudDefaultReposFunc{
			defaultHook: i.TotalErroredCloudDefaultRepos,
		},
		UpdateFunc: &GitserverRepoStoreUpdateFunc{
			defaultHook: i.Update,
		},
		UpdateRepoSizesFunc: &GitserverRepoStoreUpdateRepoSizesFunc{
			defaultHook: i.UpdateRepoSizes,
		},
		WithFunc: &GitserverRepoStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// GitserverRepoStoreGetByIDFunc describes the behavior when the GetByID
// method of the parent MockGitserverRepoStore instance is invoked.
type GitserverRepoStoreGetByIDFunc struct {
	defaultHook func(context.Context, api.RepoID) (*types.GitserverRepo, error)
	hooks       []func(context.Context, api.RepoID) (*types.GitserverRepo, error)
	history     []GitserverRepoStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverRepoStore) GetByID(v0 context.Context, v1 api.RepoID) (*types.GitserverRepo, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(GitserverRepoStoreGetByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockGitserverRepoStore instance is invoked and the hook queue
// is empty.
func (f *GitserverRepoStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, api.RepoID) (*types.GitserverRepo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockGitserverRepoStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GitserverRepoStoreGetByIDFunc) PushHook(hook func(context.Context, api.RepoID) (*types.GitserverRepo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverRepoStoreGetByIDFunc) SetDefaultReturn(r0 *types.GitserverRepo, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoID) (*types.GitserverRepo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverRepoStoreGetByIDFunc) PushReturn(r0 *types.GitserverRepo, r1 error) {
	f.PushHook(func(context.Context, api.RepoID) (*types.GitserverRepo, error) {
		return r0, r1
	})
}

func (f *GitserverRepoStoreGetByIDFunc) nextHook() func(context.Context, api.RepoID) (*types.GitserverRepo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverRepoStoreGetByIDFunc) appendCall(r0 GitserverRepoStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverRepoStoreGetByIDFuncCall objects
// describing the invocations of this function.
func (f *GitserverRepoStoreGetByIDFunc) History() []GitserverRepoStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]GitserverRepoStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverRepoStoreGetByIDFuncCall is an object that describes an
// invocation of method GetByID on an instance of MockGitserverRepoStore.
type GitserverRepoStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.GitserverRepo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverRepoStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverRepoStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverRepoStoreGetByNameFunc describes the behavior when the GetByName
// method of the parent MockGitserverRepoStore instance is invoked.
type GitserverRepoStoreGetByNameFunc struct {
	defaultHook func(context.Context, api.RepoName) (*types.GitserverRepo, error)
	hooks       []func(context.Context, api.RepoName) (*types.GitserverRepo, error)
	history     []GitserverRepoStoreGetByNameFuncCall
	mutex       sync.Mutex
}

// GetByName delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverRepoStore) GetByName(v0 context.Context, v1 api.RepoName) (*types.GitserverRepo, error) {
	r0, r1 := m.GetByNameFunc.nextHook()(v0, v1)
	m.GetByNameFunc.appendCall(GitserverRepoStoreGetByNameFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByName method of
// the parent MockGitserverRepoStore instance is invoked and the hook queue
// is empty.
func (f *GitserverRepoStoreGetByNameFunc) SetDefaultHook(hook func(context.Context, api.RepoName) (*types.GitserverRepo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByName method of the parent MockGitserverRepoStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverRepoStoreGetByNameFunc) PushHook(hook func(context.Context, api.RepoName) (*types.GitserverRepo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverRepoStoreGetByNameFunc) SetDefaultReturn(r0 *types.GitserverRepo, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) (*types.GitserverRepo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverRepoStoreGetByNameFunc) PushReturn(r0 *types.GitserverRepo, r1 error) {
	f.PushHook(func(context.Context, api.RepoName) (*types.GitserverRepo, error) {
		return r0, r1
	})
}

func (f *GitserverRepoStoreGetByNameFunc) nextHook() func(context.Context, api.RepoName) (*types.GitserverRepo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverRepoStoreGetByNameFunc) appendCall(r0 GitserverRepoStoreGetByNameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverRepoStoreGetByNameFuncCall objects
// describing the invocations of this function.
func (f *GitserverRepoStoreGetByNameFunc) History() []GitserverRepoStoreGetByNameFuncCall {
	f.mutex.Lock()
	history := make([]GitserverRepoStoreGetByNameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverRepoStoreGetByNameFuncCall is an object that describes an
// invocation of method GetByName on an instance of MockGitserverRepoStore.
type GitserverRepoStoreGetByNameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.GitserverRepo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverRepoStoreGetByNameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverRepoStoreGetByNameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverRepoStoreGetByNamesFunc describes the behavior when the
// GetByNames method of the parent MockGitserverRepoStore instance is
// invoked.
type GitserverRepoStoreGetByNamesFunc struct {
	defaultHook func(context.Context, ...api.RepoName) (map[api.RepoName]*types.GitserverRepo, error)
	hooks       []func(context.Context, ...api.RepoName) (map[api.RepoName]*types.GitserverRepo, error)
	history     []GitserverRepoStoreGetByNamesFuncCall
	mutex       sync.Mutex
}

// GetByNames delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverRepoStore) GetByNames(v0 context.Context, v1 ...api.RepoName) (map[api.RepoName]*types.GitserverRepo, error) {
	r0, r1 := m.GetByNamesFunc.nextHook()(v0, v1...)
	m.GetByNamesFunc.appendCall(GitserverRepoStoreGetByNamesFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByNames method of
// the parent MockGitserverRepoStore instance is invoked and the hook queue
// is empty.
func (f *GitserverRepoStoreGetByNamesFunc) SetDefaultHook(hook func(context.Context, ...api.RepoName) (map[api.RepoName]*types.GitserverRepo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByNames method of the parent MockGitserverRepoStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverRepoStoreGetByNamesFunc) PushHook(hook func(context.Context, ...api.RepoName) (map[api.RepoName]*types.GitserverRepo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverRepoStoreGetByNamesFunc) SetDefaultReturn(r0 map[api.RepoName]*types.GitserverRepo, r1 error) {
	f.SetDefaultHook(func(context.Context, ...api.RepoName) (map[api.RepoName]*types.GitserverRepo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverRepoStoreGetByNamesFunc) PushReturn(r0 map[api.RepoName]*types.GitserverRepo, r1 error) {
	f.PushHook(func(context.Context, ...api.RepoName) (map[api.RepoName]*types.GitserverRepo, error) {
		return r0, r1
	})
}

func (f *GitserverRepoStoreGetByNamesFunc) nextHook() func(context.Context, ...api.RepoName) (map[api.RepoName]*types.GitserverRepo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverRepoStoreGetByNamesFunc) appendCall(r0 GitserverRepoStoreGetByNamesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverRepoStoreGetByNamesFuncCall
// objects describing the invocations of this function.
func (f *GitserverRepoStoreGetByNamesFunc) History() []GitserverRepoStoreGetByNamesFuncCall {
	f.mutex.Lock()
	history := make([]GitserverRepoStoreGetByNamesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverRepoStoreGetByNamesFuncCall is an object that describes an
// invocation of method GetByNames on an instance of MockGitserverRepoStore.
type GitserverRepoStoreGetByNamesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[api.RepoName]*types.GitserverRepo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverRepoStoreGetByNamesFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverRepoStoreGetByNamesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverRepoStoreHandleFunc describes the behavior when the Handle
// method of the parent MockGitserverRepoStore instance is invoked.
type GitserverRepoStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []GitserverRepoStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverRepoStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(GitserverRepoStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockGitserverRepoStore instance is invoked and the hook queue is
// empty.
func (f *GitserverRepoStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockGitserverRepoStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GitserverRepoStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverRepoStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverRepoStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *GitserverRepoStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverRepoStoreHandleFunc) appendCall(r0 GitserverRepoStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverRepoStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *GitserverRepoStoreHandleFunc) History() []GitserverRepoStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]GitserverRepoStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverRepoStoreHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of MockGitserverRepoStore.
type GitserverRepoStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverRepoStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverRepoStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverRepoStoreIteratePurgeableReposFunc describes the behavior when
// the IteratePurgeableRepos method of the parent MockGitserverRepoStore
// instance is invoked.
type GitserverRepoStoreIteratePurgeableReposFunc struct {
	defaultHook func(context.Context, IteratePurgableReposOptions, func(repo api.RepoName) error) error
	hooks       []func(context.Context, IteratePurgableReposOptions, func(repo api.RepoName) error) error
	history     []GitserverRepoStoreIteratePurgeableReposFuncCall
	mutex       sync.Mutex
}

// IteratePurgeableRepos delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockGitserverRepoStore) IteratePurgeableRepos(v0 context.Context, v1 IteratePurgableReposOptions, v2 func(repo api.RepoName) error) error {
	r0 := m.IteratePurgeableReposFunc.nextHook()(v0, v1, v2)
	m.IteratePurgeableReposFunc.appendCall(GitserverRepoStoreIteratePurgeableReposFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// IteratePurgeableRepos method of the parent MockGitserverRepoStore
// instance is invoked and the hook queue is empty.
func (f *GitserverRepoStoreIteratePurgeableReposFunc) SetDefaultHook(hook func(context.Context, IteratePurgableReposOptions, func(repo api.RepoName) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IteratePurgeableRepos method of the parent MockGitserverRepoStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverRepoStoreIteratePurgeableReposFunc) PushHook(hook func(context.Context, IteratePurgableReposOptions, func(repo api.RepoName) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverRepoStoreIteratePurgeableReposFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, IteratePurgableReposOptions, func(repo api.RepoName) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverRepoStoreIteratePurgeableReposFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, IteratePurgableReposOptions, func(repo api.RepoName) error) error {
		return r0
	})
}

func (f *GitserverRepoStoreIteratePurgeableReposFunc) nextHook() func(context.Context, IteratePurgableReposOptions, func(repo api.RepoName) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverRepoStoreIteratePurgeableReposFunc) appendCall(r0 GitserverRepoStoreIteratePurgeableReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverRepoStoreIteratePurgeableReposFuncCall objects describing the
// invocations of this function.
func (f *GitserverRepoStoreIteratePurgeableReposFunc) History() []GitserverRepoStoreIteratePurgeableReposFuncCall {
	f.mutex.Lock()
	history := make([]GitserverRepoStoreIteratePurgeableReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverRepoStoreIteratePurgeableReposFuncCall is an object that
// describes an invocation of method IteratePurgeableRepos on an instance of
// MockGitserverRepoStore.
type GitserverRepoStoreIteratePurgeableReposFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 IteratePurgableReposOptions
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 func(repo api.RepoName) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverRepoStoreIteratePurgeableReposFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverRepoStoreIteratePurgeableReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverRepoStoreIterateRepoGitserverStatusFunc describes the behavior
// when the IterateRepoGitserverStatus method of the parent
// MockGitserverRepoStore instance is invoked.
type GitserverRepoStoreIterateRepoGitserverStatusFunc struct {
	defaultHook func(context.Context, IterateRepoGitserverStatusOptions) ([]types.RepoGitserverStatus, int, error)
	hooks       []func(context.Context, IterateRepoGitserverStatusOptions) ([]types.RepoGitserverStatus, int, error)
	history     []GitserverRepoStoreIterateRepoGitserverStatusFuncCall
	mutex       sync.Mutex
}

// IterateRepoGitserverStatus delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockGitserverRepoStore) IterateRepoGitserverStatus(v0 context.Context, v1 IterateRepoGitserverStatusOptions) ([]types.RepoGitserverStatus, int, error) {
	r0, r1, r2 := m.IterateRepoGitserverStatusFunc.nextHook()(v0, v1)
	m.IterateRepoGitserverStatusFunc.appendCall(GitserverRepoStoreIterateRepoGitserverStatusFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// IterateRepoGitserverStatus method of the parent MockGitserverRepoStore
// instance is invoked and the hook queue is empty.
func (f *GitserverRepoStoreIterateRepoGitserverStatusFunc) SetDefaultHook(hook func(context.Context, IterateRepoGitserverStatusOptions) ([]types.RepoGitserverStatus, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IterateRepoGitserverStatus method of the parent MockGitserverRepoStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverRepoStoreIterateRepoGitserverStatusFunc) PushHook(hook func(context.Context, IterateRepoGitserverStatusOptions) ([]types.RepoGitserverStatus, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverRepoStoreIterateRepoGitserverStatusFunc) SetDefaultReturn(r0 []types.RepoGitserverStatus, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, IterateRepoGitserverStatusOptions) ([]types.RepoGitserverStatus, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverRepoStoreIterateRepoGitserverStatusFunc) PushReturn(r0 []types.RepoGitserverStatus, r1 int, r2 error) {
	f.PushHook(func(context.Context, IterateRepoGitserverStatusOptions) ([]types.RepoGitserverStatus, int, error) {
		return r0, r1, r2
	})
}

func (f *GitserverRepoStoreIterateRepoGitserverStatusFunc) nextHook() func(context.Context, IterateRepoGitserverStatusOptions) ([]types.RepoGitserverStatus, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverRepoStoreIterateRepoGitserverStatusFunc) appendCall(r0 GitserverRepoStoreIterateRepoGitserverStatusFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverRepoStoreIterateRepoGitserverStatusFuncCall objects describing
// the invocations of this function.
func (f *GitserverRepoStoreIterateRepoGitserverStatusFunc) History() []GitserverRepoStoreIterateRepoGitserverStatusFuncCall {
	f.mutex.Lock()
	history := make([]GitserverRepoStoreIterateRepoGitserverStatusFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverRepoStoreIterateRepoGitserverStatusFuncCall is an object that
// describes an invocation of method IterateRepoGitserverStatus on an
// instance of MockGitserverRepoStore.
type GitserverRepoStoreIterateRepoGitserverStatusFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 IterateRepoGitserverStatusOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.RepoGitserverStatus
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverRepoStoreIterateRepoGitserverStatusFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverRepoStoreIterateRepoGitserverStatusFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// GitserverRepoStoreListReposWithLastErrorFunc describes the behavior when
// the ListReposWithLastError method of the parent MockGitserverRepoStore
// instance is invoked.
type GitserverRepoStoreListReposWithLastErrorFunc struct {
	defaultHook func(context.Context) ([]api.RepoName, error)
	hooks       []func(context.Context) ([]api.RepoName, error)
	history     []GitserverRepoStoreListReposWithLastErrorFuncCall
	mutex       sync.Mutex
}

// ListReposWithLastError delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockGitserverRepoStore) ListReposWithLastError(v0 context.Context) ([]api.RepoName, error) {
	r0, r1 := m.ListReposWithLastErrorFunc.nextHook()(v0)
	m.ListReposWithLastErrorFunc.appendCall(GitserverRepoStoreListReposWithLastErrorFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ListReposWithLastError method of the parent MockGitserverRepoStore
// instance is invoked and the hook queue is empty.
func (f *GitserverRepoStoreListReposWithLastErrorFunc) SetDefaultHook(hook func(context.Context) ([]api.RepoName, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListReposWithLastError method of the parent MockGitserverRepoStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverRepoStoreListReposWithLastErrorFunc) PushHook(hook func(context.Context) ([]api.RepoName, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverRepoStoreListReposWithLastErrorFunc) SetDefaultReturn(r0 []api.RepoName, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]api.RepoName, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverRepoStoreListReposWithLastErrorFunc) PushReturn(r0 []api.RepoName, r1 error) {
	f.PushHook(func(context.Context) ([]api.RepoName, error) {
		return r0, r1
	})
}

func (f *GitserverRepoStoreListReposWithLastErrorFunc) nextHook() func(context.Context) ([]api.RepoName, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverRepoStoreListReposWithLastErrorFunc) appendCall(r0 GitserverRepoStoreListReposWithLastErrorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverRepoStoreListReposWithLastErrorFuncCall objects describing the
// invocations of this function.
func (f *GitserverRepoStoreListReposWithLastErrorFunc) History() []GitserverRepoStoreListReposWithLastErrorFuncCall {
	f.mutex.Lock()
	history := make([]GitserverRepoStoreListReposWithLastErrorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverRepoStoreListReposWithLastErrorFuncCall is an object that
// describes an invocation of method ListReposWithLastError on an instance
// of MockGitserverRepoStore.
type GitserverRepoStoreListReposWithLastErrorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []api.RepoName
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverRepoStoreListReposWithLastErrorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverRepoStoreListReposWithLastErrorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverRepoStoreListReposWithoutSizeFunc describes the behavior when
// the ListReposWithoutSize method of the parent MockGitserverRepoStore
// instance is invoked.
type GitserverRepoStoreListReposWithoutSizeFunc struct {
	defaultHook func(context.Context) (map[api.RepoName]api.RepoID, error)
	hooks       []func(context.Context) (map[api.RepoName]api.RepoID, error)
	history     []GitserverRepoStoreListReposWithoutSizeFuncCall
	mutex       sync.Mutex
}

// ListReposWithoutSize delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverRepoStore) ListReposWithoutSize(v0 context.Context) (map[api.RepoName]api.RepoID, error) {
	r0, r1 := m.ListReposWithoutSizeFunc.nextHook()(v0)
	m.ListReposWithoutSizeFunc.appendCall(GitserverRepoStoreListReposWithoutSizeFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListReposWithoutSize
// method of the parent MockGitserverRepoStore instance is invoked and the
// hook queue is empty.
func (f *GitserverRepoStoreListReposWithoutSizeFunc) SetDefaultHook(hook func(context.Context) (map[api.RepoName]api.RepoID, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListReposWithoutSize method of the parent MockGitserverRepoStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverRepoStoreListReposWithoutSizeFunc) PushHook(hook func(context.Context) (map[api.RepoName]api.RepoID, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverRepoStoreListReposWithoutSizeFunc) SetDefaultReturn(r0 map[api.RepoName]api.RepoID, r1 error) {
	f.SetDefaultHook(func(context.Context) (map[api.RepoName]api.RepoID, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverRepoStoreListReposWithoutSizeFunc) PushReturn(r0 map[api.RepoName]api.RepoID, r1 error) {
	f.PushHook(func(context.Context) (map[api.RepoName]api.RepoID, error) {
		return r0, r1
	})
}

func (f *GitserverRepoStoreListReposWithoutSizeFunc) nextHook() func(context.Context) (map[api.RepoName]api.RepoID, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverRepoStoreListReposWithoutSizeFunc) appendCall(r0 GitserverRepoStoreListReposWithoutSizeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverRepoStoreListReposWithoutSizeFuncCall objects describing the
// invocations of this function.
func (f *GitserverRepoStoreListReposWithoutSizeFunc) History() []GitserverRepoStoreListReposWithoutSizeFuncCall {
	f.mutex.Lock()
	history := make([]GitserverRepoStoreListReposWithoutSizeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverRepoStoreListReposWithoutSizeFuncCall is an object that
// describes an invocation of method ListReposWithoutSize on an instance of
// MockGitserverRepoStore.
type GitserverRepoStoreListReposWithoutSizeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[api.RepoName]api.RepoID
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverRepoStoreListReposWithoutSizeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverRepoStoreListReposWithoutSizeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverRepoStoreLogCorruptionFunc describes the behavior when the
// LogCorruption method of the parent MockGitserverRepoStore instance is
// invoked.
type GitserverRepoStoreLogCorruptionFunc struct {
	defaultHook func(context.Context, api.RepoName, string, string) error
	hooks       []func(context.Context, api.RepoName, string, string) error
	history     []GitserverRepoStoreLogCorruptionFuncCall
	mutex       sync.Mutex
}

// LogCorruption delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverRepoStore) LogCorruption(v0 context.Context, v1 api.RepoName, v2 string, v3 string) error {
	r0 := m.LogCorruptionFunc.nextHook()(v0, v1, v2, v3)
	m.LogCorruptionFunc.appendCall(GitserverRepoStoreLogCorruptionFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the LogCorruption method
// of the parent MockGitserverRepoStore instance is invoked and the hook
// queue is empty.
func (f *GitserverRepoStoreLogCorruptionFunc) SetDefaultHook(hook func(context.Context, api.RepoName, string, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LogCorruption method of the parent MockGitserverRepoStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverRepoStoreLogCorruptionFunc) PushHook(hook func(context.Context, api.RepoName, string, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverRepoStoreLogCorruptionFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, string, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverRepoStoreLogCorruptionFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, api.RepoName, string, string) error {
		return r0
	})
}

func (f *GitserverRepoStoreLogCorruptionFunc) nextHook() func(context.Context, api.RepoName, string, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverRepoStoreLogCorruptionFunc) appendCall(r0 GitserverRepoStoreLogCorruptionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverRepoStoreLogCorruptionFuncCall
// objects describing the invocations of this function.
func (f *GitserverRepoStoreLogCorruptionFunc) History() []GitserverRepoStoreLogCorruptionFuncCall {
	f.mutex.Lock()
	history := make([]GitserverRepoStoreLogCorruptionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverRepoStoreLogCorruptionFuncCall is an object that describes an
// invocation of method LogCorruption on an instance of
// MockGitserverRepoStore.
type GitserverRepoStoreLogCorruptionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverRepoStoreLogCorruptionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverRepoStoreLogCorruptionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverRepoStoreSetCloneStatusFunc describes the behavior when the
// SetCloneStatus method of the parent MockGitserverRepoStore instance is
// invoked.
type GitserverRepoStoreSetCloneStatusFunc struct {
	defaultHook func(context.Context, api.RepoName, types.CloneStatus, string) error
	hooks       []func(context.Context, api.RepoName, types.CloneStatus, string) error
	history     []GitserverRepoStoreSetCloneStatusFuncCall
	mutex       sync.Mutex
}

// SetCloneStatus delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverRepoStore) SetCloneStatus(v0 context.Context, v1 api.RepoName, v2 types.CloneStatus, v3 string) error {
	r0 := m.SetCloneStatusFunc.nextHook()(v0, v1, v2, v3)
	m.SetCloneStatusFunc.appendCall(GitserverRepoStoreSetCloneStatusFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetCloneStatus
// method of the parent MockGitserverRepoStore instance is invoked and the
// hook queue is empty.
func (f *GitserverRepoStoreSetCloneStatusFunc) SetDefaultHook(hook func(context.Context, api.RepoName, types.CloneStatus, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetCloneStatus method of the parent MockGitserverRepoStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverRepoStoreSetCloneStatusFunc) PushHook(hook func(context.Context, api.RepoName, types.CloneStatus, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverRepoStoreSetCloneStatusFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, types.CloneStatus, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverRepoStoreSetCloneStatusFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, api.RepoName, types.CloneStatus, string) error {
		return r0
	})
}

func (f *GitserverRepoStoreSetCloneStatusFunc) nextHook() func(context.Context, api.RepoName, types.CloneStatus, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverRepoStoreSetCloneStatusFunc) appendCall(r0 GitserverRepoStoreSetCloneStatusFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverRepoStoreSetCloneStatusFuncCall
// objects describing the invocations of this function.
func (f *GitserverRepoStoreSetCloneStatusFunc) History() []GitserverRepoStoreSetCloneStatusFuncCall {
	f.mutex.Lock()
	history := make([]GitserverRepoStoreSetCloneStatusFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverRepoStoreSetCloneStatusFuncCall is an object that describes an
// invocation of method SetCloneStatus on an instance of
// MockGitserverRepoStore.
type GitserverRepoStoreSetCloneStatusFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 types.CloneStatus
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverRepoStoreSetCloneStatusFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverRepoStoreSetCloneStatusFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverRepoStoreSetCloningProgressFunc describes the behavior when the
// SetCloningProgress method of the parent MockGitserverRepoStore instance
// is invoked.
type GitserverRepoStoreSetCloningProgressFunc struct {
	defaultHook func(context.Context, api.RepoName, string) error
	hooks       []func(context.Context, api.RepoName, string) error
	history     []GitserverRepoStoreSetCloningProgressFuncCall
	mutex       sync.Mutex
}

// SetCloningProgress delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverRepoStore) SetCloningProgress(v0 context.Context, v1 api.RepoName, v2 string) error {
	r0 := m.SetCloningProgressFunc.nextHook()(v0, v1, v2)
	m.SetCloningProgressFunc.appendCall(GitserverRepoStoreSetCloningProgressFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetCloningProgress
// method of the parent MockGitserverRepoStore instance is invoked and the
// hook queue is empty.
func (f *GitserverRepoStoreSetCloningProgressFunc) SetDefaultHook(hook func(context.Context, api.RepoName, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetCloningProgress method of the parent MockGitserverRepoStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverRepoStoreSetCloningProgressFunc) PushHook(hook func(context.Context, api.RepoName, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverRepoStoreSetCloningProgressFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverRepoStoreSetCloningProgressFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, api.RepoName, string) error {
		return r0
	})
}

func (f *GitserverRepoStoreSetCloningProgressFunc) nextHook() func(context.Context, api.RepoName, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverRepoStoreSetCloningProgressFunc) appendCall(r0 GitserverRepoStoreSetCloningProgressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverRepoStoreSetCloningProgressFuncCall objects describing the
// invocations of this function.
func (f *GitserverRepoStoreSetCloningProgressFunc) History() []GitserverRepoStoreSetCloningProgressFuncCall {
	f.mutex.Lock()
	history := make([]GitserverRepoStoreSetCloningProgressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverRepoStoreSetCloningProgressFuncCall is an object that describes
// an invocation of method SetCloningProgress on an instance of
// MockGitserverRepoStore.
type GitserverRepoStoreSetCloningProgressFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverRepoStoreSetCloningProgressFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverRepoStoreSetCloningProgressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverRepoStoreSetLastErrorFunc describes the behavior when the
// SetLastError method of the parent MockGitserverRepoStore instance is
// invoked.
type GitserverRepoStoreSetLastErrorFunc struct {
	defaultHook func(context.Context, api.RepoName, string, string) error
	hooks       []func(context.Context, api.RepoName, string, string) error
	history     []GitserverRepoStoreSetLastErrorFuncCall
	mutex       sync.Mutex
}

// SetLastError delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverRepoStore) SetLastError(v0 context.Context, v1 api.RepoName, v2 string, v3 string) error {
	r0 := m.SetLastErrorFunc.nextHook()(v0, v1, v2, v3)
	m.SetLastErrorFunc.appendCall(GitserverRepoStoreSetLastErrorFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetLastError method
// of the parent MockGitserverRepoStore instance is invoked and the hook
// queue is empty.
func (f *GitserverRepoStoreSetLastErrorFunc) SetDefaultHook(hook func(context.Context, api.RepoName, string, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetLastError method of the parent MockGitserverRepoStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverRepoStoreSetLastErrorFunc) PushHook(hook func(context.Context, api.RepoName, string, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverRepoStoreSetLastErrorFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, string, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverRepoStoreSetLastErrorFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, api.RepoName, string, string) error {
		return r0
	})
}

func (f *GitserverRepoStoreSetLastErrorFunc) nextHook() func(context.Context, api.RepoName, string, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverRepoStoreSetLastErrorFunc) appendCall(r0 GitserverRepoStoreSetLastErrorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverRepoStoreSetLastErrorFuncCall
// objects describing the invocations of this function.
func (f *GitserverRepoStoreSetLastErrorFunc) History() []GitserverRepoStoreSetLastErrorFuncCall {
	f.mutex.Lock()
	history := make([]GitserverRepoStoreSetLastErrorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverRepoStoreSetLastErrorFuncCall is an object that describes an
// invocation of method SetLastError on an instance of
// MockGitserverRepoStore.
type GitserverRepoStoreSetLastErrorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverRepoStoreSetLastErrorFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverRepoStoreSetLastErrorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverRepoStoreSetLastFetchedFunc describes the behavior when the
// SetLastFetched method of the parent MockGitserverRepoStore instance is
// invoked.
type GitserverRepoStoreSetLastFetchedFunc struct {
	defaultHook func(context.Context, api.RepoName, GitserverFetchData) error
	hooks       []func(context.Context, api.RepoName, GitserverFetchData) error
	history     []GitserverRepoStoreSetLastFetchedFuncCall
	mutex       sync.Mutex
}

// SetLastFetched delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverRepoStore) SetLastFetched(v0 context.Context, v1 api.RepoName, v2 GitserverFetchData) error {
	r0 := m.SetLastFetchedFunc.nextHook()(v0, v1, v2)
	m.SetLastFetchedFunc.appendCall(GitserverRepoStoreSetLastFetchedFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetLastFetched
// method of the parent MockGitserverRepoStore instance is invoked and the
// hook queue is empty.
func (f *GitserverRepoStoreSetLastFetchedFunc) SetDefaultHook(hook func(context.Context, api.RepoName, GitserverFetchData) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetLastFetched method of the parent MockGitserverRepoStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverRepoStoreSetLastFetchedFunc) PushHook(hook func(context.Context, api.RepoName, GitserverFetchData) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverRepoStoreSetLastFetchedFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, GitserverFetchData) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverRepoStoreSetLastFetchedFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, api.RepoName, GitserverFetchData) error {
		return r0
	})
}

func (f *GitserverRepoStoreSetLastFetchedFunc) nextHook() func(context.Context, api.RepoName, GitserverFetchData) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverRepoStoreSetLastFetchedFunc) appendCall(r0 GitserverRepoStoreSetLastFetchedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverRepoStoreSetLastFetchedFuncCall
// objects describing the invocations of this function.
func (f *GitserverRepoStoreSetLastFetchedFunc) History() []GitserverRepoStoreSetLastFetchedFuncCall {
	f.mutex.Lock()
	history := make([]GitserverRepoStoreSetLastFetchedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverRepoStoreSetLastFetchedFuncCall is an object that describes an
// invocation of method SetLastFetched on an instance of
// MockGitserverRepoStore.
type GitserverRepoStoreSetLastFetchedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 GitserverFetchData
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverRepoStoreSetLastFetchedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverRepoStoreSetLastFetchedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverRepoStoreSetRepoSizeFunc describes the behavior when the
// SetRepoSize method of the parent MockGitserverRepoStore instance is
// invoked.
type GitserverRepoStoreSetRepoSizeFunc struct {
	defaultHook func(context.Context, api.RepoName, int64, string) error
	hooks       []func(context.Context, api.RepoName, int64, string) error
	history     []GitserverRepoStoreSetRepoSizeFuncCall
	mutex       sync.Mutex
}

// SetRepoSize delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverRepoStore) SetRepoSize(v0 context.Context, v1 api.RepoName, v2 int64, v3 string) error {
	r0 := m.SetRepoSizeFunc.nextHook()(v0, v1, v2, v3)
	m.SetRepoSizeFunc.appendCall(GitserverRepoStoreSetRepoSizeFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetRepoSize method
// of the parent MockGitserverRepoStore instance is invoked and the hook
// queue is empty.
func (f *GitserverRepoStoreSetRepoSizeFunc) SetDefaultHook(hook func(context.Context, api.RepoName, int64, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetRepoSize method of the parent MockGitserverRepoStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverRepoStoreSetRepoSizeFunc) PushHook(hook func(context.Context, api.RepoName, int64, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverRepoStoreSetRepoSizeFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, int64, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverRepoStoreSetRepoSizeFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, api.RepoName, int64, string) error {
		return r0
	})
}

func (f *GitserverRepoStoreSetRepoSizeFunc) nextHook() func(context.Context, api.RepoName, int64, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverRepoStoreSetRepoSizeFunc) appendCall(r0 GitserverRepoStoreSetRepoSizeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverRepoStoreSetRepoSizeFuncCall
// objects describing the invocations of this function.
func (f *GitserverRepoStoreSetRepoSizeFunc) History() []GitserverRepoStoreSetRepoSizeFuncCall {
	f.mutex.Lock()
	history := make([]GitserverRepoStoreSetRepoSizeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverRepoStoreSetRepoSizeFuncCall is an object that describes an
// invocation of method SetRepoSize on an instance of
// MockGitserverRepoStore.
type GitserverRepoStoreSetRepoSizeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int64
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverRepoStoreSetRepoSizeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverRepoStoreSetRepoSizeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverRepoStoreTotalErroredCloudDefaultReposFunc describes the
// behavior when the TotalErroredCloudDefaultRepos method of the parent
// MockGitserverRepoStore instance is invoked.
type GitserverRepoStoreTotalErroredCloudDefaultReposFunc struct {
	defaultHook func(context.Context) (int, error)
	hooks       []func(context.Context) (int, error)
	history     []GitserverRepoStoreTotalErroredCloudDefaultReposFuncCall
	mutex       sync.Mutex
}

// TotalErroredCloudDefaultRepos delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockGitserverRepoStore) TotalErroredCloudDefaultRepos(v0 context.Context) (int, error) {
	r0, r1 := m.TotalErroredCloudDefaultReposFunc.nextHook()(v0)
	m.TotalErroredCloudDefaultReposFunc.appendCall(GitserverRepoStoreTotalErroredCloudDefaultReposFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// TotalErroredCloudDefaultRepos method of the parent MockGitserverRepoStore
// instance is invoked and the hook queue is empty.
func (f *GitserverRepoStoreTotalErroredCloudDefaultReposFunc) SetDefaultHook(hook func(context.Context) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TotalErroredCloudDefaultRepos method of the parent MockGitserverRepoStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverRepoStoreTotalErroredCloudDefaultReposFunc) PushHook(hook func(context.Context) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverRepoStoreTotalErroredCloudDefaultReposFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverRepoStoreTotalErroredCloudDefaultReposFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

func (f *GitserverRepoStoreTotalErroredCloudDefaultReposFunc) nextHook() func(context.Context) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverRepoStoreTotalErroredCloudDefaultReposFunc) appendCall(r0 GitserverRepoStoreTotalErroredCloudDefaultReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverRepoStoreTotalErroredCloudDefaultReposFuncCall objects
// describing the invocations of this function.
func (f *GitserverRepoStoreTotalErroredCloudDefaultReposFunc) History() []GitserverRepoStoreTotalErroredCloudDefaultReposFuncCall {
	f.mutex.Lock()
	history := make([]GitserverRepoStoreTotalErroredCloudDefaultReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverRepoStoreTotalErroredCloudDefaultReposFuncCall is an object that
// describes an invocation of method TotalErroredCloudDefaultRepos on an
// instance of MockGitserverRepoStore.
type GitserverRepoStoreTotalErroredCloudDefaultReposFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverRepoStoreTotalErroredCloudDefaultReposFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverRepoStoreTotalErroredCloudDefaultReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverRepoStoreUpdateFunc describes the behavior when the Update
// method of the parent MockGitserverRepoStore instance is invoked.
type GitserverRepoStoreUpdateFunc struct {
	defaultHook func(context.Context, ...*types.GitserverRepo) error
	hooks       []func(context.Context, ...*types.GitserverRepo) error
	history     []GitserverRepoStoreUpdateFuncCall
	mutex       sync.Mutex
}

// Update delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverRepoStore) Update(v0 context.Context, v1 ...*types.GitserverRepo) error {
	r0 := m.UpdateFunc.nextHook()(v0, v1...)
	m.UpdateFunc.appendCall(GitserverRepoStoreUpdateFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Update method of the
// parent MockGitserverRepoStore instance is invoked and the hook queue is
// empty.
func (f *GitserverRepoStoreUpdateFunc) SetDefaultHook(hook func(context.Context, ...*types.GitserverRepo) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Update method of the parent MockGitserverRepoStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GitserverRepoStoreUpdateFunc) PushHook(hook func(context.Context, ...*types.GitserverRepo) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverRepoStoreUpdateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ...*types.GitserverRepo) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverRepoStoreUpdateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ...*types.GitserverRepo) error {
		return r0
	})
}

func (f *GitserverRepoStoreUpdateFunc) nextHook() func(context.Context, ...*types.GitserverRepo) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverRepoStoreUpdateFunc) appendCall(r0 GitserverRepoStoreUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverRepoStoreUpdateFuncCall objects
// describing the invocations of this function.
func (f *GitserverRepoStoreUpdateFunc) History() []GitserverRepoStoreUpdateFuncCall {
	f.mutex.Lock()
	history := make([]GitserverRepoStoreUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverRepoStoreUpdateFuncCall is an object that describes an
// invocation of method Update on an instance of MockGitserverRepoStore.
type GitserverRepoStoreUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []*types.GitserverRepo
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverRepoStoreUpdateFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverRepoStoreUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverRepoStoreUpdateRepoSizesFunc describes the behavior when the
// UpdateRepoSizes method of the parent MockGitserverRepoStore instance is
// invoked.
type GitserverRepoStoreUpdateRepoSizesFunc struct {
	defaultHook func(context.Context, string, map[api.RepoName]int64) (int, error)
	hooks       []func(context.Context, string, map[api.RepoName]int64) (int, error)
	history     []GitserverRepoStoreUpdateRepoSizesFuncCall
	mutex       sync.Mutex
}

// UpdateRepoSizes delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverRepoStore) UpdateRepoSizes(v0 context.Context, v1 string, v2 map[api.RepoName]int64) (int, error) {
	r0, r1 := m.UpdateRepoSizesFunc.nextHook()(v0, v1, v2)
	m.UpdateRepoSizesFunc.appendCall(GitserverRepoStoreUpdateRepoSizesFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the UpdateRepoSizes
// method of the parent MockGitserverRepoStore instance is invoked and the
// hook queue is empty.
func (f *GitserverRepoStoreUpdateRepoSizesFunc) SetDefaultHook(hook func(context.Context, string, map[api.RepoName]int64) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateRepoSizes method of the parent MockGitserverRepoStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverRepoStoreUpdateRepoSizesFunc) PushHook(hook func(context.Context, string, map[api.RepoName]int64) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverRepoStoreUpdateRepoSizesFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, string, map[api.RepoName]int64) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverRepoStoreUpdateRepoSizesFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, string, map[api.RepoName]int64) (int, error) {
		return r0, r1
	})
}

func (f *GitserverRepoStoreUpdateRepoSizesFunc) nextHook() func(context.Context, string, map[api.RepoName]int64) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverRepoStoreUpdateRepoSizesFunc) appendCall(r0 GitserverRepoStoreUpdateRepoSizesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverRepoStoreUpdateRepoSizesFuncCall
// objects describing the invocations of this function.
func (f *GitserverRepoStoreUpdateRepoSizesFunc) History() []GitserverRepoStoreUpdateRepoSizesFuncCall {
	f.mutex.Lock()
	history := make([]GitserverRepoStoreUpdateRepoSizesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverRepoStoreUpdateRepoSizesFuncCall is an object that describes an
// invocation of method UpdateRepoSizes on an instance of
// MockGitserverRepoStore.
type GitserverRepoStoreUpdateRepoSizesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 map[api.RepoName]int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverRepoStoreUpdateRepoSizesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverRepoStoreUpdateRepoSizesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverRepoStoreWithFunc describes the behavior when the With method of
// the parent MockGitserverRepoStore instance is invoked.
type GitserverRepoStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) GitserverRepoStore
	hooks       []func(basestore.ShareableStore) GitserverRepoStore
	history     []GitserverRepoStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverRepoStore) With(v0 basestore.ShareableStore) GitserverRepoStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(GitserverRepoStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockGitserverRepoStore instance is invoked and the hook queue is
// empty.
func (f *GitserverRepoStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) GitserverRepoStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockGitserverRepoStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GitserverRepoStoreWithFunc) PushHook(hook func(basestore.ShareableStore) GitserverRepoStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverRepoStoreWithFunc) SetDefaultReturn(r0 GitserverRepoStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) GitserverRepoStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverRepoStoreWithFunc) PushReturn(r0 GitserverRepoStore) {
	f.PushHook(func(basestore.ShareableStore) GitserverRepoStore {
		return r0
	})
}

func (f *GitserverRepoStoreWithFunc) nextHook() func(basestore.ShareableStore) GitserverRepoStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverRepoStoreWithFunc) appendCall(r0 GitserverRepoStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverRepoStoreWithFuncCall objects
// describing the invocations of this function.
func (f *GitserverRepoStoreWithFunc) History() []GitserverRepoStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]GitserverRepoStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverRepoStoreWithFuncCall is an object that describes an invocation
// of method With on an instance of MockGitserverRepoStore.
type GitserverRepoStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 GitserverRepoStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverRepoStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverRepoStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockGlobalStateStore is a mock implementation of the GlobalStateStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockGlobalStateStore struct {
	// EnsureInitializedFunc is an instance of a mock function object
	// controlling the behavior of the method EnsureInitialized.
	EnsureInitializedFunc *GlobalStateStoreEnsureInitializedFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *GlobalStateStoreGetFunc
	// SiteInitializedFunc is an instance of a mock function object
	// controlling the behavior of the method SiteInitialized.
	SiteInitializedFunc *GlobalStateStoreSiteInitializedFunc
}

// NewMockGlobalStateStore creates a new mock of the GlobalStateStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockGlobalStateStore() *MockGlobalStateStore {
	return &MockGlobalStateStore{
		EnsureInitializedFunc: &GlobalStateStoreEnsureInitializedFunc{
			defaultHook: func(context.Context) (r0 bool, r1 error) {
				return
			},
		},
		GetFunc: &GlobalStateStoreGetFunc{
			defaultHook: func(context.Context) (r0 GlobalState, r1 error) {
				return
			},
		},
		SiteInitializedFunc: &GlobalStateStoreSiteInitializedFunc{
			defaultHook: func(context.Context) (r0 bool, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockGlobalStateStore creates a new mock of the GlobalStateStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockGlobalStateStore() *MockGlobalStateStore {
	return &MockGlobalStateStore{
		EnsureInitializedFunc: &GlobalStateStoreEnsureInitializedFunc{
			defaultHook: func(context.Context) (bool, error) {
				panic("unexpected invocation of MockGlobalStateStore.EnsureInitialized")
			},
		},
		GetFunc: &GlobalStateStoreGetFunc{
			defaultHook: func(context.Context) (GlobalState, error) {
				panic("unexpected invocation of MockGlobalStateStore.Get")
			},
		},
		SiteInitializedFunc: &GlobalStateStoreSiteInitializedFunc{
			defaultHook: func(context.Context) (bool, error) {
				panic("unexpected invocation of MockGlobalStateStore.SiteInitialized")
			},
		},
	}
}

// NewMockGlobalStateStoreFrom creates a new mock of the
// MockGlobalStateStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockGlobalStateStoreFrom(i GlobalStateStore) *MockGlobalStateStore {
	return &MockGlobalStateStore{
		EnsureInitializedFunc: &GlobalStateStoreEnsureInitializedFunc{
			defaultHook: i.EnsureInitialized,
		},
		GetFunc: &GlobalStateStoreGetFunc{
			defaultHook: i.Get,
		},
		SiteInitializedFunc: &GlobalStateStoreSiteInitializedFunc{
			defaultHook: i.SiteInitialized,
		},
	}
}

// GlobalStateStoreEnsureInitializedFunc describes the behavior when the
// EnsureInitialized method of the parent MockGlobalStateStore instance is
// invoked.
type GlobalStateStoreEnsureInitializedFunc struct {
	defaultHook func(context.Context) (bool, error)
	hooks       []func(context.Context) (bool, error)
	history     []GlobalStateStoreEnsureInitializedFuncCall
	mutex       sync.Mutex
}

// EnsureInitialized delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGlobalStateStore) EnsureInitialized(v0 context.Context) (bool, error) {
	r0, r1 := m.EnsureInitializedFunc.nextHook()(v0)
	m.EnsureInitializedFunc.appendCall(GlobalStateStoreEnsureInitializedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the EnsureInitialized
// method of the parent MockGlobalStateStore instance is invoked and the
// hook queue is empty.
func (f *GlobalStateStoreEnsureInitializedFunc) SetDefaultHook(hook func(context.Context) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EnsureInitialized method of the parent MockGlobalStateStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GlobalStateStoreEnsureInitializedFunc) PushHook(hook func(context.Context) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GlobalStateStoreEnsureInitializedFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GlobalStateStoreEnsureInitializedFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context) (bool, error) {
		return r0, r1
	})
}

func (f *GlobalStateStoreEnsureInitializedFunc) nextHook() func(context.Context) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GlobalStateStoreEnsureInitializedFunc) appendCall(r0 GlobalStateStoreEnsureInitializedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GlobalStateStoreEnsureInitializedFuncCall
// objects describing the invocations of this function.
func (f *GlobalStateStoreEnsureInitializedFunc) History() []GlobalStateStoreEnsureInitializedFuncCall {
	f.mutex.Lock()
	history := make([]GlobalStateStoreEnsureInitializedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GlobalStateStoreEnsureInitializedFuncCall is an object that describes an
// invocation of method EnsureInitialized on an instance of
// MockGlobalStateStore.
type GlobalStateStoreEnsureInitializedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GlobalStateStoreEnsureInitializedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GlobalStateStoreEnsureInitializedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GlobalStateStoreGetFunc describes the behavior when the Get method of the
// parent MockGlobalStateStore instance is invoked.
type GlobalStateStoreGetFunc struct {
	defaultHook func(context.Context) (GlobalState, error)
	hooks       []func(context.Context) (GlobalState, error)
	history     []GlobalStateStoreGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGlobalStateStore) Get(v0 context.Context) (GlobalState, error) {
	r0, r1 := m.GetFunc.nextHook()(v0)
	m.GetFunc.appendCall(GlobalStateStoreGetFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockGlobalStateStore instance is invoked and the hook queue is
// empty.
func (f *GlobalStateStoreGetFunc) SetDefaultHook(hook func(context.Context) (GlobalState, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockGlobalStateStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GlobalStateStoreGetFunc) PushHook(hook func(context.Context) (GlobalState, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GlobalStateStoreGetFunc) SetDefaultReturn(r0 GlobalState, r1 error) {
	f.SetDefaultHook(func(context.Context) (GlobalState, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GlobalStateStoreGetFunc) PushReturn(r0 GlobalState, r1 error) {
	f.PushHook(func(context.Context) (GlobalState, error) {
		return r0, r1
	})
}

func (f *GlobalStateStoreGetFunc) nextHook() func(context.Context) (GlobalState, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GlobalStateStoreGetFunc) appendCall(r0 GlobalStateStoreGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GlobalStateStoreGetFuncCall objects
// describing the invocations of this function.
func (f *GlobalStateStoreGetFunc) History() []GlobalStateStoreGetFuncCall {
	f.mutex.Lock()
	history := make([]GlobalStateStoreGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GlobalStateStoreGetFuncCall is an object that describes an invocation of
// method Get on an instance of MockGlobalStateStore.
type GlobalStateStoreGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 GlobalState
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GlobalStateStoreGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GlobalStateStoreGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GlobalStateStoreSiteInitializedFunc describes the behavior when the
// SiteInitialized method of the parent MockGlobalStateStore instance is
// invoked.
type GlobalStateStoreSiteInitializedFunc struct {
	defaultHook func(context.Context) (bool, error)
	hooks       []func(context.Context) (bool, error)
	history     []GlobalStateStoreSiteInitializedFuncCall
	mutex       sync.Mutex
}

// SiteInitialized delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGlobalStateStore) SiteInitialized(v0 context.Context) (bool, error) {
	r0, r1 := m.SiteInitializedFunc.nextHook()(v0)
	m.SiteInitializedFunc.appendCall(GlobalStateStoreSiteInitializedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SiteInitialized
// method of the parent MockGlobalStateStore instance is invoked and the
// hook queue is empty.
func (f *GlobalStateStoreSiteInitializedFunc) SetDefaultHook(hook func(context.Context) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SiteInitialized method of the parent MockGlobalStateStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GlobalStateStoreSiteInitializedFunc) PushHook(hook func(context.Context) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GlobalStateStoreSiteInitializedFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GlobalStateStoreSiteInitializedFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context) (bool, error) {
		return r0, r1
	})
}

func (f *GlobalStateStoreSiteInitializedFunc) nextHook() func(context.Context) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GlobalStateStoreSiteInitializedFunc) appendCall(r0 GlobalStateStoreSiteInitializedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GlobalStateStoreSiteInitializedFuncCall
// objects describing the invocations of this function.
func (f *GlobalStateStoreSiteInitializedFunc) History() []GlobalStateStoreSiteInitializedFuncCall {
	f.mutex.Lock()
	history := make([]GlobalStateStoreSiteInitializedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GlobalStateStoreSiteInitializedFuncCall is an object that describes an
// invocation of method SiteInitialized on an instance of
// MockGlobalStateStore.
type GlobalStateStoreSiteInitializedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GlobalStateStoreSiteInitializedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GlobalStateStoreSiteInitializedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockNamespaceStore is a mock implementation of the NamespaceStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockNamespaceStore struct {
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *NamespaceStoreGetByIDFunc
	// GetByNameFunc is an instance of a mock function object controlling
	// the behavior of the method GetByName.
	GetByNameFunc *NamespaceStoreGetByNameFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *NamespaceStoreHandleFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *NamespaceStoreWithFunc
	// WithTransactFunc is an instance of a mock function object controlling
	// the behavior of the method WithTransact.
	WithTransactFunc *NamespaceStoreWithTransactFunc
}

// NewMockNamespaceStore creates a new mock of the NamespaceStore interface.
// All methods return zero values for all results, unless overwritten.
func NewMockNamespaceStore() *MockNamespaceStore {
	return &MockNamespaceStore{
		GetByIDFunc: &NamespaceStoreGetByIDFunc{
			defaultHook: func(context.Context, int32, int32) (r0 *Namespace, r1 error) {
				return
			},
		},
		GetByNameFunc: &NamespaceStoreGetByNameFunc{
			defaultHook: func(context.Context, string) (r0 *Namespace, r1 error) {
				return
			},
		},
		HandleFunc: &NamespaceStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		WithFunc: &NamespaceStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 NamespaceStore) {
				return
			},
		},
		WithTransactFunc: &NamespaceStoreWithTransactFunc{
			defaultHook: func(context.Context, func(NamespaceStore) error) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockNamespaceStore creates a new mock of the NamespaceStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockNamespaceStore() *MockNamespaceStore {
	return &MockNamespaceStore{
		GetByIDFunc: &NamespaceStoreGetByIDFunc{
			defaultHook: func(context.Context, int32, int32) (*Namespace, error) {
				panic("unexpected invocation of MockNamespaceStore.GetByID")
			},
		},
		GetByNameFunc: &NamespaceStoreGetByNameFunc{
			defaultHook: func(context.Context, string) (*Namespace, error) {
				panic("unexpected invocation of MockNamespaceStore.GetByName")
			},
		},
		HandleFunc: &NamespaceStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockNamespaceStore.Handle")
			},
		},
		WithFunc: &NamespaceStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) NamespaceStore {
				panic("unexpected invocation of MockNamespaceStore.With")
			},
		},
		WithTransactFunc: &NamespaceStoreWithTransactFunc{
			defaultHook: func(context.Context, func(NamespaceStore) error) error {
				panic("unexpected invocation of MockNamespaceStore.WithTransact")
			},
		},
	}
}

// NewMockNamespaceStoreFrom creates a new mock of the MockNamespaceStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockNamespaceStoreFrom(i NamespaceStore) *MockNamespaceStore {
	return &MockNamespaceStore{
		GetByIDFunc: &NamespaceStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		GetByNameFunc: &NamespaceStoreGetByNameFunc{
			defaultHook: i.GetByName,
		},
		HandleFunc: &NamespaceStoreHandleFunc{
			defaultHook: i.Handle,
		},
		WithFunc: &NamespaceStoreWithFunc{
			defaultHook: i.With,
		},
		WithTransactFunc: &NamespaceStoreWithTransactFunc{
			defaultHook: i.WithTransact,
		},
	}
}

// NamespaceStoreGetByIDFunc describes the behavior when the GetByID method
// of the parent MockNamespaceStore instance is invoked.
type NamespaceStoreGetByIDFunc struct {
	defaultHook func(context.Context, int32, int32) (*Namespace, error)
	hooks       []func(context.Context, int32, int32) (*Namespace, error)
	history     []NamespaceStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockNamespaceStore) GetByID(v0 context.Context, v1 int32, v2 int32) (*Namespace, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1, v2)
	m.GetByIDFunc.appendCall(NamespaceStoreGetByIDFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockNamespaceStore instance is invoked and the hook queue is
// empty.
func (f *NamespaceStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int32, int32) (*Namespace, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockNamespaceStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *NamespaceStoreGetByIDFunc) PushHook(hook func(context.Context, int32, int32) (*Namespace, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NamespaceStoreGetByIDFunc) SetDefaultReturn(r0 *Namespace, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, int32) (*Namespace, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NamespaceStoreGetByIDFunc) PushReturn(r0 *Namespace, r1 error) {
	f.PushHook(func(context.Context, int32, int32) (*Namespace, error) {
		return r0, r1
	})
}

func (f *NamespaceStoreGetByIDFunc) nextHook() func(context.Context, int32, int32) (*Namespace, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NamespaceStoreGetByIDFunc) appendCall(r0 NamespaceStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NamespaceStoreGetByIDFuncCall objects
// describing the invocations of this function.
func (f *NamespaceStoreGetByIDFunc) History() []NamespaceStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]NamespaceStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NamespaceStoreGetByIDFuncCall is an object that describes an invocation
// of method GetByID on an instance of MockNamespaceStore.
type NamespaceStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *Namespace
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NamespaceStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NamespaceStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// NamespaceStoreGetByNameFunc describes the behavior when the GetByName
// method of the parent MockNamespaceStore instance is invoked.
type NamespaceStoreGetByNameFunc struct {
	defaultHook func(context.Context, string) (*Namespace, error)
	hooks       []func(context.Context, string) (*Namespace, error)
	history     []NamespaceStoreGetByNameFuncCall
	mutex       sync.Mutex
}

// GetByName delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockNamespaceStore) GetByName(v0 context.Context, v1 string) (*Namespace, error) {
	r0, r1 := m.GetByNameFunc.nextHook()(v0, v1)
	m.GetByNameFunc.appendCall(NamespaceStoreGetByNameFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByName method of
// the parent MockNamespaceStore instance is invoked and the hook queue is
// empty.
func (f *NamespaceStoreGetByNameFunc) SetDefaultHook(hook func(context.Context, string) (*Namespace, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByName method of the parent MockNamespaceStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *NamespaceStoreGetByNameFunc) PushHook(hook func(context.Context, string) (*Namespace, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NamespaceStoreGetByNameFunc) SetDefaultReturn(r0 *Namespace, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*Namespace, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NamespaceStoreGetByNameFunc) PushReturn(r0 *Namespace, r1 error) {
	f.PushHook(func(context.Context, string) (*Namespace, error) {
		return r0, r1
	})
}

func (f *NamespaceStoreGetByNameFunc) nextHook() func(context.Context, string) (*Namespace, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NamespaceStoreGetByNameFunc) appendCall(r0 NamespaceStoreGetByNameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NamespaceStoreGetByNameFuncCall objects
// describing the invocations of this function.
func (f *NamespaceStoreGetByNameFunc) History() []NamespaceStoreGetByNameFuncCall {
	f.mutex.Lock()
	history := make([]NamespaceStoreGetByNameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NamespaceStoreGetByNameFuncCall is an object that describes an invocation
// of method GetByName on an instance of MockNamespaceStore.
type NamespaceStoreGetByNameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *Namespace
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NamespaceStoreGetByNameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NamespaceStoreGetByNameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// NamespaceStoreHandleFunc describes the behavior when the Handle method of
// the parent MockNamespaceStore instance is invoked.
type NamespaceStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []NamespaceStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockNamespaceStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(NamespaceStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockNamespaceStore instance is invoked and the hook queue is
// empty.
func (f *NamespaceStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockNamespaceStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *NamespaceStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NamespaceStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NamespaceStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *NamespaceStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NamespaceStoreHandleFunc) appendCall(r0 NamespaceStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NamespaceStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *NamespaceStoreHandleFunc) History() []NamespaceStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]NamespaceStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NamespaceStoreHandleFuncCall is an object that describes an invocation of
// method Handle on an instance of MockNamespaceStore.
type NamespaceStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NamespaceStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NamespaceStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// NamespaceStoreWithFunc describes the behavior when the With method of the
// parent MockNamespaceStore instance is invoked.
type NamespaceStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) NamespaceStore
	hooks       []func(basestore.ShareableStore) NamespaceStore
	history     []NamespaceStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockNamespaceStore) With(v0 basestore.ShareableStore) NamespaceStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(NamespaceStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockNamespaceStore instance is invoked and the hook queue is
// empty.
func (f *NamespaceStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) NamespaceStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockNamespaceStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *NamespaceStoreWithFunc) PushHook(hook func(basestore.ShareableStore) NamespaceStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NamespaceStoreWithFunc) SetDefaultReturn(r0 NamespaceStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) NamespaceStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NamespaceStoreWithFunc) PushReturn(r0 NamespaceStore) {
	f.PushHook(func(basestore.ShareableStore) NamespaceStore {
		return r0
	})
}

func (f *NamespaceStoreWithFunc) nextHook() func(basestore.ShareableStore) NamespaceStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NamespaceStoreWithFunc) appendCall(r0 NamespaceStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NamespaceStoreWithFuncCall objects
// describing the invocations of this function.
func (f *NamespaceStoreWithFunc) History() []NamespaceStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]NamespaceStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NamespaceStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockNamespaceStore.
type NamespaceStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 NamespaceStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NamespaceStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NamespaceStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// NamespaceStoreWithTransactFunc describes the behavior when the
// WithTransact method of the parent MockNamespaceStore instance is invoked.
type NamespaceStoreWithTransactFunc struct {
	defaultHook func(context.Context, func(NamespaceStore) error) error
	hooks       []func(context.Context, func(NamespaceStore) error) error
	history     []NamespaceStoreWithTransactFuncCall
	mutex       sync.Mutex
}

// WithTransact delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockNamespaceStore) WithTransact(v0 context.Context, v1 func(NamespaceStore) error) error {
	r0 := m.WithTransactFunc.nextHook()(v0, v1)
	m.WithTransactFunc.appendCall(NamespaceStoreWithTransactFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithTransact method
// of the parent MockNamespaceStore instance is invoked and the hook queue
// is empty.
func (f *NamespaceStoreWithTransactFunc) SetDefaultHook(hook func(context.Context, func(NamespaceStore) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithTransact method of the parent MockNamespaceStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *NamespaceStoreWithTransactFunc) PushHook(hook func(context.Context, func(NamespaceStore) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *NamespaceStoreWithTransactFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, func(NamespaceStore) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *NamespaceStoreWithTransactFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, func(NamespaceStore) error) error {
		return r0
	})
}

func (f *NamespaceStoreWithTransactFunc) nextHook() func(context.Context, func(NamespaceStore) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *NamespaceStoreWithTransactFunc) appendCall(r0 NamespaceStoreWithTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of NamespaceStoreWithTransactFuncCall objects
// describing the invocations of this function.
func (f *NamespaceStoreWithTransactFunc) History() []NamespaceStoreWithTransactFuncCall {
	f.mutex.Lock()
	history := make([]NamespaceStoreWithTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// NamespaceStoreWithTransactFuncCall is an object that describes an
// invocation of method WithTransact on an instance of MockNamespaceStore.
type NamespaceStoreWithTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 func(NamespaceStore) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c NamespaceStoreWithTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c NamespaceStoreWithTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockOrgInvitationStore is a mock implementation of the OrgInvitationStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockOrgInvitationStore struct {
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *OrgInvitationStoreCountFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *OrgInvitationStoreCreateFunc
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *OrgInvitationStoreGetByIDFunc
	// GetPendingFunc is an instance of a mock function object controlling
	// the behavior of the method GetPending.
	GetPendingFunc *OrgInvitationStoreGetPendingFunc
	// GetPendingByIDFunc is an instance of a mock function object
	// controlling the behavior of the method GetPendingByID.
	GetPendingByIDFunc *OrgInvitationStoreGetPendingByIDFunc
	// GetPendingByOrgIDFunc is an instance of a mock function object
	// controlling the behavior of the method GetPendingByOrgID.
	GetPendingByOrgIDFunc *OrgInvitationStoreGetPendingByOrgIDFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *OrgInvitationStoreHandleFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *OrgInvitationStoreListFunc
	// RespondFunc is an instance of a mock function object controlling the
	// behavior of the method Respond.
	RespondFunc *OrgInvitationStoreRespondFunc
	// RevokeFunc is an instance of a mock function object controlling the
	// behavior of the method Revoke.
	RevokeFunc *OrgInvitationStoreRevokeFunc
	// UpdateEmailSentTimestampFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateEmailSentTimestamp.
	UpdateEmailSentTimestampFunc *OrgInvitationStoreUpdateEmailSentTimestampFunc
	// UpdateExpiryTimeFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateExpiryTime.
	UpdateExpiryTimeFunc *OrgInvitationStoreUpdateExpiryTimeFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *OrgInvitationStoreWithFunc
	// WithTransactFunc is an instance of a mock function object controlling
	// the behavior of the method WithTransact.
	WithTransactFunc *OrgInvitationStoreWithTransactFunc
}

// NewMockOrgInvitationStore creates a new mock of the OrgInvitationStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockOrgInvitationStore() *MockOrgInvitationStore {
	return &MockOrgInvitationStore{
		CountFunc: &OrgInvitationStoreCountFunc{
			defaultHook: func(context.Context, OrgInvitationsListOptions) (r0 int, r1 error) {
				return
			},
		},
		CreateFunc: &OrgInvitationStoreCreateFunc{
			defaultHook: func(context.Context, int32, int32, int32, string, time.Time) (r0 *OrgInvitation, r1 error) {
				return
			},
		},
		GetByIDFunc: &OrgInvitationStoreGetByIDFunc{
			defaultHook: func(context.Context, int64) (r0 *OrgInvitation, r1 error) {
				return
			},
		},
		GetPendingFunc: &OrgInvitationStoreGetPendingFunc{
			defaultHook: func(context.Context, int32, int32) (r0 *OrgInvitation, r1 error) {
				return
			},
		},
		GetPendingByIDFunc: &OrgInvitationStoreGetPendingByIDFunc{
			defaultHook: func(context.Context, int64) (r0 *OrgInvitation, r1 error) {
				return
			},
		},
		GetPendingByOrgIDFunc: &OrgInvitationStoreGetPendingByOrgIDFunc{
			defaultHook: func(context.Context, int32) (r0 []*OrgInvitation, r1 error) {
				return
			},
		},
		HandleFunc: &OrgInvitationStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		ListFunc: &OrgInvitationStoreListFunc{
			defaultHook: func(context.Context, OrgInvitationsListOptions) (r0 []*OrgInvitation, r1 error) {
				return
			},
		},
		RespondFunc: &OrgInvitationStoreRespondFunc{
			defaultHook: func(context.Context, int64, int32, bool) (r0 int32, r1 error) {
				return
			},
		},
		RevokeFunc: &OrgInvitationStoreRevokeFunc{
			defaultHook: func(context.Context, int64) (r0 error) {
				return
			},
		},
		UpdateEmailSentTimestampFunc: &OrgInvitationStoreUpdateEmailSentTimestampFunc{
			defaultHook: func(context.Context, int64) (r0 error) {
				return
			},
		},
		UpdateExpiryTimeFunc: &OrgInvitationStoreUpdateExpiryTimeFunc{
			defaultHook: func(context.Context, int64, time.Time) (r0 error) {
				return
			},
		},
		WithFunc: &OrgInvitationStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 OrgInvitationStore) {
				return
			},
		},
		WithTransactFunc: &OrgInvitationStoreWithTransactFunc{
			defaultHook: func(context.Context, func(OrgInvitationStore) error) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockOrgInvitationStore creates a new mock of the
// OrgInvitationStore interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockOrgInvitationStore() *MockOrgInvitationStore {
	return &MockOrgInvitationStore{
		CountFunc: &OrgInvitationStoreCountFunc{
			defaultHook: func(context.Context, OrgInvitationsListOptions) (int, error) {
				panic("unexpected invocation of MockOrgInvitationStore.Count")
			},
		},
		CreateFunc: &OrgInvitationStoreCreateFunc{
			defaultHook: func(context.Context, int32, int32, int32, string, time.Time) (*OrgInvitation, error) {
				panic("unexpected invocation of MockOrgInvitationStore.Create")
			},
		},
		GetByIDFunc: &OrgInvitationStoreGetByIDFunc{
			defaultHook: func(context.Context, int64) (*OrgInvitation, error) {
				panic("unexpected invocation of MockOrgInvitationStore.GetByID")
			},
		},
		GetPendingFunc: &OrgInvitationStoreGetPendingFunc{
			defaultHook: func(context.Context, int32, int32) (*OrgInvitation, error) {
				panic("unexpected invocation of MockOrgInvitationStore.GetPending")
			},
		},
		GetPendingByIDFunc: &OrgInvitationStoreGetPendingByIDFunc{
			defaultHook: func(context.Context, int64) (*OrgInvitation, error) {
				panic("unexpected invocation of MockOrgInvitationStore.GetPendingByID")
			},
		},
		GetPendingByOrgIDFunc: &OrgInvitationStoreGetPendingByOrgIDFunc{
			defaultHook: func(context.Context, int32) ([]*OrgInvitation, error) {
				panic("unexpected invocation of MockOrgInvitationStore.GetPendingByOrgID")
			},
		},
		HandleFunc: &OrgInvitationStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockOrgInvitationStore.Handle")
			},
		},
		ListFunc: &OrgInvitationStoreListFunc{
			defaultHook: func(context.Context, OrgInvitationsListOptions) ([]*OrgInvitation, error) {
				panic("unexpected invocation of MockOrgInvitationStore.List")
			},
		},
		RespondFunc: &OrgInvitationStoreRespondFunc{
			defaultHook: func(context.Context, int64, int32, bool) (int32, error) {
				panic("unexpected invocation of MockOrgInvitationStore.Respond")
			},
		},
		RevokeFunc: &OrgInvitationStoreRevokeFunc{
			defaultHook: func(context.Context, int64) error {
				panic("unexpected invocation of MockOrgInvitationStore.Revoke")
			},
		},
		UpdateEmailSentTimestampFunc: &OrgInvitationStoreUpdateEmailSentTimestampFunc{
			defaultHook: func(context.Context, int64) error {
				panic("unexpected invocation of MockOrgInvitationStore.UpdateEmailSentTimestamp")
			},
		},
		UpdateExpiryTimeFunc: &OrgInvitationStoreUpdateExpiryTimeFunc{
			defaultHook: func(context.Context, int64, time.Time) error {
				panic("unexpected invocation of MockOrgInvitationStore.UpdateExpiryTime")
			},
		},
		WithFunc: &OrgInvitationStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) OrgInvitationStore {
				panic("unexpected invocation of MockOrgInvitationStore.With")
			},
		},
		WithTransactFunc: &OrgInvitationStoreWithTransactFunc{
			defaultHook: func(context.Context, func(OrgInvitationStore) error) error {
				panic("unexpected invocation of MockOrgInvitationStore.WithTransact")
			},
		},
	}
}

// NewMockOrgInvitationStoreFrom creates a new mock of the
// MockOrgInvitationStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockOrgInvitationStoreFrom(i OrgInvitationStore) *MockOrgInvitationStore {
	return &MockOrgInvitationStore{
		CountFunc: &OrgInvitationStoreCountFunc{
			defaultHook: i.Count,
		},
		CreateFunc: &OrgInvitationStoreCreateFunc{
			defaultHook: i.Create,
		},
		GetByIDFunc: &OrgInvitationStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		GetPendingFunc: &OrgInvitationStoreGetPendingFunc{
			defaultHook: i.GetPending,
		},
		GetPendingByIDFunc: &OrgInvitationStoreGetPendingByIDFunc{
			defaultHook: i.GetPendingByID,
		},
		GetPendingByOrgIDFunc: &OrgInvitationStoreGetPendingByOrgIDFunc{
			defaultHook: i.GetPendingByOrgID,
		},
		HandleFunc: &OrgInvitationStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListFunc: &OrgInvitationStoreListFunc{
			defaultHook: i.List,
		},
		RespondFunc: &OrgInvitationStoreRespondFunc{
			defaultHook: i.Respond,
		},
		RevokeFunc: &OrgInvitationStoreRevokeFunc{
			defaultHook: i.Revoke,
		},
		UpdateEmailSentTimestampFunc: &OrgInvitationStoreUpdateEmailSentTimestampFunc{
			defaultHook: i.UpdateEmailSentTimestamp,
		},
		UpdateExpiryTimeFunc: &OrgInvitationStoreUpdateExpiryTimeFunc{
			defaultHook: i.UpdateExpiryTime,
		},
		WithFunc: &OrgInvitationStoreWithFunc{
			defaultHook: i.With,
		},
		WithTransactFunc: &OrgInvitationStoreWithTransactFunc{
			defaultHook: i.WithTransact,
		},
	}
}

// OrgInvitationStoreCountFunc describes the behavior when the Count method
// of the parent MockOrgInvitationStore instance is invoked.
type OrgInvitationStoreCountFunc struct {
	defaultHook func(context.Context, OrgInvitationsListOptions) (int, error)
	hooks       []func(context.Context, OrgInvitationsListOptions) (int, error)
	history     []OrgInvitationStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgInvitationStore) Count(v0 context.Context, v1 OrgInvitationsListOptions) (int, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(OrgInvitationStoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockOrgInvitationStore instance is invoked and the hook queue is
// empty.
func (f *OrgInvitationStoreCountFunc) SetDefaultHook(hook func(context.Context, OrgInvitationsListOptions) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockOrgInvitationStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgInvitationStoreCountFunc) PushHook(hook func(context.Context, OrgInvitationsListOptions) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgInvitationStoreCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, OrgInvitationsListOptions) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgInvitationStoreCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, OrgInvitationsListOptions) (int, error) {
		return r0, r1
	})
}

func (f *OrgInvitationStoreCountFunc) nextHook() func(context.Context, OrgInvitationsListOptions) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreCountFunc) appendCall(r0 OrgInvitationStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgInvitationStoreCountFuncCall objects
// describing the invocations of this function.
func (f *OrgInvitationStoreCountFunc) History() []OrgInvitationStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreCountFuncCall is an object that describes an invocation
// of method Count on an instance of MockOrgInvitationStore.
type OrgInvitationStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 OrgInvitationsListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgInvitationStoreCreateFunc describes the behavior when the Create
// method of the parent MockOrgInvitationStore instance is invoked.
type OrgInvitationStoreCreateFunc struct {
	defaultHook func(context.Context, int32, int32, int32, string, time.Time) (*OrgInvitation, error)
	hooks       []func(context.Context, int32, int32, int32, string, time.Time) (*OrgInvitation, error)
	history     []OrgInvitationStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgInvitationStore) Create(v0 context.Context, v1 int32, v2 int32, v3 int32, v4 string, v5 time.Time) (*OrgInvitation, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1, v2, v3, v4, v5)
	m.CreateFunc.appendCall(OrgInvitationStoreCreateFuncCall{v0, v1, v2, v3, v4, v5, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockOrgInvitationStore instance is invoked and the hook queue is
// empty.
func (f *OrgInvitationStoreCreateFunc) SetDefaultHook(hook func(context.Context, int32, int32, int32, string, time.Time) (*OrgInvitation, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockOrgInvitationStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgInvitationStoreCreateFunc) PushHook(hook func(context.Context, int32, int32, int32, string, time.Time) (*OrgInvitation, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgInvitationStoreCreateFunc) SetDefaultReturn(r0 *OrgInvitation, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, int32, int32, string, time.Time) (*OrgInvitation, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgInvitationStoreCreateFunc) PushReturn(r0 *OrgInvitation, r1 error) {
	f.PushHook(func(context.Context, int32, int32, int32, string, time.Time) (*OrgInvitation, error) {
		return r0, r1
	})
}

func (f *OrgInvitationStoreCreateFunc) nextHook() func(context.Context, int32, int32, int32, string, time.Time) (*OrgInvitation, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreCreateFunc) appendCall(r0 OrgInvitationStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgInvitationStoreCreateFuncCall objects
// describing the invocations of this function.
func (f *OrgInvitationStoreCreateFunc) History() []OrgInvitationStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreCreateFuncCall is an object that describes an
// invocation of method Create on an instance of MockOrgInvitationStore.
type OrgInvitationStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int32
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int32
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 string
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *OrgInvitation
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgInvitationStoreGetByIDFunc describes the behavior when the GetByID
// method of the parent MockOrgInvitationStore instance is invoked.
type OrgInvitationStoreGetByIDFunc struct {
	defaultHook func(context.Context, int64) (*OrgInvitation, error)
	hooks       []func(context.Context, int64) (*OrgInvitation, error)
	history     []OrgInvitationStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgInvitationStore) GetByID(v0 context.Context, v1 int64) (*OrgInvitation, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(OrgInvitationStoreGetByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockOrgInvitationStore instance is invoked and the hook queue
// is empty.
func (f *OrgInvitationStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int64) (*OrgInvitation, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockOrgInvitationStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgInvitationStoreGetByIDFunc) PushHook(hook func(context.Context, int64) (*OrgInvitation, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgInvitationStoreGetByIDFunc) SetDefaultReturn(r0 *OrgInvitation, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (*OrgInvitation, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgInvitationStoreGetByIDFunc) PushReturn(r0 *OrgInvitation, r1 error) {
	f.PushHook(func(context.Context, int64) (*OrgInvitation, error) {
		return r0, r1
	})
}

func (f *OrgInvitationStoreGetByIDFunc) nextHook() func(context.Context, int64) (*OrgInvitation, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreGetByIDFunc) appendCall(r0 OrgInvitationStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgInvitationStoreGetByIDFuncCall objects
// describing the invocations of this function.
func (f *OrgInvitationStoreGetByIDFunc) History() []OrgInvitationStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreGetByIDFuncCall is an object that describes an
// invocation of method GetByID on an instance of MockOrgInvitationStore.
type OrgInvitationStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *OrgInvitation
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgInvitationStoreGetPendingFunc describes the behavior when the
// GetPending method of the parent MockOrgInvitationStore instance is
// invoked.
type OrgInvitationStoreGetPendingFunc struct {
	defaultHook func(context.Context, int32, int32) (*OrgInvitation, error)
	hooks       []func(context.Context, int32, int32) (*OrgInvitation, error)
	history     []OrgInvitationStoreGetPendingFuncCall
	mutex       sync.Mutex
}

// GetPending delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockOrgInvitationStore) GetPending(v0 context.Context, v1 int32, v2 int32) (*OrgInvitation, error) {
	r0, r1 := m.GetPendingFunc.nextHook()(v0, v1, v2)
	m.GetPendingFunc.appendCall(OrgInvitationStoreGetPendingFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetPending method of
// the parent MockOrgInvitationStore instance is invoked and the hook queue
// is empty.
func (f *OrgInvitationStoreGetPendingFunc) SetDefaultHook(hook func(context.Context, int32, int32) (*OrgInvitation, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPending method of the parent MockOrgInvitationStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *OrgInvitationStoreGetPendingFunc) PushHook(hook func(context.Context, int32, int32) (*OrgInvitation, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgInvitationStoreGetPendingFunc) SetDefaultReturn(r0 *OrgInvitation, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, int32) (*OrgInvitation, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgInvitationStoreGetPendingFunc) PushReturn(r0 *OrgInvitation, r1 error) {
	f.PushHook(func(context.Context, int32, int32) (*OrgInvitation, error) {
		return r0, r1
	})
}

func (f *OrgInvitationStoreGetPendingFunc) nextHook() func(context.Context, int32, int32) (*OrgInvitation, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreGetPendingFunc) appendCall(r0 OrgInvitationStoreGetPendingFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgInvitationStoreGetPendingFuncCall
// objects describing the invocations of this function.
func (f *OrgInvitationStoreGetPendingFunc) History() []OrgInvitationStoreGetPendingFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreGetPendingFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreGetPendingFuncCall is an object that describes an
// invocation of method GetPending on an instance of MockOrgInvitationStore.
type OrgInvitationStoreGetPendingFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *OrgInvitation
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreGetPendingFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreGetPendingFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgInvitationStoreGetPendingByIDFunc describes the behavior when the
// GetPendingByID method of the parent MockOrgInvitationStore instance is
// invoked.
type OrgInvitationStoreGetPendingByIDFunc struct {
	defaultHook func(context.Context, int64) (*OrgInvitation, error)
	hooks       []func(context.Context, int64) (*OrgInvitation, error)
	history     []OrgInvitationStoreGetPendingByIDFuncCall
	mutex       sync.Mutex
}

// GetPendingByID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockOrgInvitationStore) GetPendingByID(v0 context.Context, v1 int64) (*OrgInvitation, error) {
	r0, r1 := m.GetPendingByIDFunc.nextHook()(v0, v1)
	m.GetPendingByIDFunc.appendCall(OrgInvitationStoreGetPendingByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetPendingByID
// method of the parent MockOrgInvitationStore instance is invoked and the
// hook queue is empty.
func (f *OrgInvitationStoreGetPendingByIDFunc) SetDefaultHook(hook func(context.Context, int64) (*OrgInvitation, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPendingByID method of the parent MockOrgInvitationStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *OrgInvitationStoreGetPendingByIDFunc) PushHook(hook func(context.Context, int64) (*OrgInvitation, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgInvitationStoreGetPendingByIDFunc) SetDefaultReturn(r0 *OrgInvitation, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (*OrgInvitation, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgInvitationStoreGetPendingByIDFunc) PushReturn(r0 *OrgInvitation, r1 error) {
	f.PushHook(func(context.Context, int64) (*OrgInvitation, error) {
		return r0, r1
	})
}

func (f *OrgInvitationStoreGetPendingByIDFunc) nextHook() func(context.Context, int64) (*OrgInvitation, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreGetPendingByIDFunc) appendCall(r0 OrgInvitationStoreGetPendingByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgInvitationStoreGetPendingByIDFuncCall
// objects describing the invocations of this function.
func (f *OrgInvitationStoreGetPendingByIDFunc) History() []OrgInvitationStoreGetPendingByIDFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreGetPendingByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreGetPendingByIDFuncCall is an object that describes an
// invocation of method GetPendingByID on an instance of
// MockOrgInvitationStore.
type OrgInvitationStoreGetPendingByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *OrgInvitation
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreGetPendingByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreGetPendingByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgInvitationStoreGetPendingByOrgIDFunc describes the behavior when the
// GetPendingByOrgID method of the parent MockOrgInvitationStore instance is
// invoked.
type OrgInvitationStoreGetPendingByOrgIDFunc struct {
	defaultHook func(context.Context, int32) ([]*OrgInvitation, error)
	hooks       []func(context.Context, int32) ([]*OrgInvitation, error)
	history     []OrgInvitationStoreGetPendingByOrgIDFuncCall
	mutex       sync.Mutex
}

// GetPendingByOrgID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockOrgInvitationStore) GetPendingByOrgID(v0 context.Context, v1 int32) ([]*OrgInvitation, error) {
	r0, r1 := m.GetPendingByOrgIDFunc.nextHook()(v0, v1)
	m.GetPendingByOrgIDFunc.appendCall(OrgInvitationStoreGetPendingByOrgIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetPendingByOrgID
// method of the parent MockOrgInvitationStore instance is invoked and the
// hook queue is empty.
func (f *OrgInvitationStoreGetPendingByOrgIDFunc) SetDefaultHook(hook func(context.Context, int32) ([]*OrgInvitation, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPendingByOrgID method of the parent MockOrgInvitationStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *OrgInvitationStoreGetPendingByOrgIDFunc) PushHook(hook func(context.Context, int32) ([]*OrgInvitation, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgInvitationStoreGetPendingByOrgIDFunc) SetDefaultReturn(r0 []*OrgInvitation, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) ([]*OrgInvitation, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgInvitationStoreGetPendingByOrgIDFunc) PushReturn(r0 []*OrgInvitation, r1 error) {
	f.PushHook(func(context.Context, int32) ([]*OrgInvitation, error) {
		return r0, r1
	})
}

func (f *OrgInvitationStoreGetPendingByOrgIDFunc) nextHook() func(context.Context, int32) ([]*OrgInvitation, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreGetPendingByOrgIDFunc) appendCall(r0 OrgInvitationStoreGetPendingByOrgIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgInvitationStoreGetPendingByOrgIDFuncCall
// objects describing the invocations of this function.
func (f *OrgInvitationStoreGetPendingByOrgIDFunc) History() []OrgInvitationStoreGetPendingByOrgIDFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreGetPendingByOrgIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreGetPendingByOrgIDFuncCall is an object that describes
// an invocation of method GetPendingByOrgID on an instance of
// MockOrgInvitationStore.
type OrgInvitationStoreGetPendingByOrgIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*OrgInvitation
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreGetPendingByOrgIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreGetPendingByOrgIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgInvitationStoreHandleFunc describes the behavior when the Handle
// method of the parent MockOrgInvitationStore instance is invoked.
type OrgInvitationStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []OrgInvitationStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgInvitationStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(OrgInvitationStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockOrgInvitationStore instance is invoked and the hook queue is
// empty.
func (f *OrgInvitationStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockOrgInvitationStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgInvitationStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgInvitationStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgInvitationStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *OrgInvitationStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreHandleFunc) appendCall(r0 OrgInvitationStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgInvitationStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *OrgInvitationStoreHandleFunc) History() []OrgInvitationStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of MockOrgInvitationStore.
type OrgInvitationStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OrgInvitationStoreListFunc describes the behavior when the List method of
// the parent MockOrgInvitationStore instance is invoked.
type OrgInvitationStoreListFunc struct {
	defaultHook func(context.Context, OrgInvitationsListOptions) ([]*OrgInvitation, error)
	hooks       []func(context.Context, OrgInvitationsListOptions) ([]*OrgInvitation, error)
	history     []OrgInvitationStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgInvitationStore) List(v0 context.Context, v1 OrgInvitationsListOptions) ([]*OrgInvitation, error) {
	r0, r1 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(OrgInvitationStoreListFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockOrgInvitationStore instance is invoked and the hook queue is
// empty.
func (f *OrgInvitationStoreListFunc) SetDefaultHook(hook func(context.Context, OrgInvitationsListOptions) ([]*OrgInvitation, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockOrgInvitationStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgInvitationStoreListFunc) PushHook(hook func(context.Context, OrgInvitationsListOptions) ([]*OrgInvitation, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgInvitationStoreListFunc) SetDefaultReturn(r0 []*OrgInvitation, r1 error) {
	f.SetDefaultHook(func(context.Context, OrgInvitationsListOptions) ([]*OrgInvitation, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgInvitationStoreListFunc) PushReturn(r0 []*OrgInvitation, r1 error) {
	f.PushHook(func(context.Context, OrgInvitationsListOptions) ([]*OrgInvitation, error) {
		return r0, r1
	})
}

func (f *OrgInvitationStoreListFunc) nextHook() func(context.Context, OrgInvitationsListOptions) ([]*OrgInvitation, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreListFunc) appendCall(r0 OrgInvitationStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgInvitationStoreListFuncCall objects
// describing the invocations of this function.
func (f *OrgInvitationStoreListFunc) History() []OrgInvitationStoreListFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreListFuncCall is an object that describes an invocation
// of method List on an instance of MockOrgInvitationStore.
type OrgInvitationStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 OrgInvitationsListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*OrgInvitation
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgInvitationStoreRespondFunc describes the behavior when the Respond
// method of the parent MockOrgInvitationStore instance is invoked.
type OrgInvitationStoreRespondFunc struct {
	defaultHook func(context.Context, int64, int32, bool) (int32, error)
	hooks       []func(context.Context, int64, int32, bool) (int32, error)
	history     []OrgInvitationStoreRespondFuncCall
	mutex       sync.Mutex
}

// Respond delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgInvitationStore) Respond(v0 context.Context, v1 int64, v2 int32, v3 bool) (int32, error) {
	r0, r1 := m.RespondFunc.nextHook()(v0, v1, v2, v3)
	m.RespondFunc.appendCall(OrgInvitationStoreRespondFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Respond method of
// the parent MockOrgInvitationStore instance is invoked and the hook queue
// is empty.
func (f *OrgInvitationStoreRespondFunc) SetDefaultHook(hook func(context.Context, int64, int32, bool) (int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Respond method of the parent MockOrgInvitationStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgInvitationStoreRespondFunc) PushHook(hook func(context.Context, int64, int32, bool) (int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgInvitationStoreRespondFunc) SetDefaultReturn(r0 int32, r1 error) {
	f.SetDefaultHook(func(context.Context, int64, int32, bool) (int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgInvitationStoreRespondFunc) PushReturn(r0 int32, r1 error) {
	f.PushHook(func(context.Context, int64, int32, bool) (int32, error) {
		return r0, r1
	})
}

func (f *OrgInvitationStoreRespondFunc) nextHook() func(context.Context, int64, int32, bool) (int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreRespondFunc) appendCall(r0 OrgInvitationStoreRespondFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgInvitationStoreRespondFuncCall objects
// describing the invocations of this function.
func (f *OrgInvitationStoreRespondFunc) History() []OrgInvitationStoreRespondFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreRespondFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreRespondFuncCall is an object that describes an
// invocation of method Respond on an instance of MockOrgInvitationStore.
type OrgInvitationStoreRespondFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int32
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreRespondFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreRespondFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgInvitationStoreRevokeFunc describes the behavior when the Revoke
// method of the parent MockOrgInvitationStore instance is invoked.
type OrgInvitationStoreRevokeFunc struct {
	defaultHook func(context.Context, int64) error
	hooks       []func(context.Context, int64) error
	history     []OrgInvitationStoreRevokeFuncCall
	mutex       sync.Mutex
}

// Revoke delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgInvitationStore) Revoke(v0 context.Context, v1 int64) error {
	r0 := m.RevokeFunc.nextHook()(v0, v1)
	m.RevokeFunc.appendCall(OrgInvitationStoreRevokeFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Revoke method of the
// parent MockOrgInvitationStore instance is invoked and the hook queue is
// empty.
func (f *OrgInvitationStoreRevokeFunc) SetDefaultHook(hook func(context.Context, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Revoke method of the parent MockOrgInvitationStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgInvitationStoreRevokeFunc) PushHook(hook func(context.Context, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgInvitationStoreRevokeFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgInvitationStoreRevokeFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64) error {
		return r0
	})
}

func (f *OrgInvitationStoreRevokeFunc) nextHook() func(context.Context, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreRevokeFunc) appendCall(r0 OrgInvitationStoreRevokeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgInvitationStoreRevokeFuncCall objects
// describing the invocations of this function.
func (f *OrgInvitationStoreRevokeFunc) History() []OrgInvitationStoreRevokeFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreRevokeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreRevokeFuncCall is an object that describes an
// invocation of method Revoke on an instance of MockOrgInvitationStore.
type OrgInvitationStoreRevokeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreRevokeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreRevokeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OrgInvitationStoreUpdateEmailSentTimestampFunc describes the behavior
// when the UpdateEmailSentTimestamp method of the parent
// MockOrgInvitationStore instance is invoked.
type OrgInvitationStoreUpdateEmailSentTimestampFunc struct {
	defaultHook func(context.Context, int64) error
	hooks       []func(context.Context, int64) error
	history     []OrgInvitationStoreUpdateEmailSentTimestampFuncCall
	mutex       sync.Mutex
}

// UpdateEmailSentTimestamp delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockOrgInvitationStore) UpdateEmailSentTimestamp(v0 context.Context, v1 int64) error {
	r0 := m.UpdateEmailSentTimestampFunc.nextHook()(v0, v1)
	m.UpdateEmailSentTimestampFunc.appendCall(OrgInvitationStoreUpdateEmailSentTimestampFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// UpdateEmailSentTimestamp method of the parent MockOrgInvitationStore
// instance is invoked and the hook queue is empty.
func (f *OrgInvitationStoreUpdateEmailSentTimestampFunc) SetDefaultHook(hook func(context.Context, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateEmailSentTimestamp method of the parent MockOrgInvitationStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *OrgInvitationStoreUpdateEmailSentTimestampFunc) PushHook(hook func(context.Context, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgInvitationStoreUpdateEmailSentTimestampFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgInvitationStoreUpdateEmailSentTimestampFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64) error {
		return r0
	})
}

func (f *OrgInvitationStoreUpdateEmailSentTimestampFunc) nextHook() func(context.Context, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreUpdateEmailSentTimestampFunc) appendCall(r0 OrgInvitationStoreUpdateEmailSentTimestampFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// OrgInvitationStoreUpdateEmailSentTimestampFuncCall objects describing the
// invocations of this function.
func (f *OrgInvitationStoreUpdateEmailSentTimestampFunc) History() []OrgInvitationStoreUpdateEmailSentTimestampFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreUpdateEmailSentTimestampFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreUpdateEmailSentTimestampFuncCall is an object that
// describes an invocation of method UpdateEmailSentTimestamp on an instance
// of MockOrgInvitationStore.
type OrgInvitationStoreUpdateEmailSentTimestampFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreUpdateEmailSentTimestampFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreUpdateEmailSentTimestampFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OrgInvitationStoreUpdateExpiryTimeFunc describes the behavior when the
// UpdateExpiryTime method of the parent MockOrgInvitationStore instance is
// invoked.
type OrgInvitationStoreUpdateExpiryTimeFunc struct {
	defaultHook func(context.Context, int64, time.Time) error
	hooks       []func(context.Context, int64, time.Time) error
	history     []OrgInvitationStoreUpdateExpiryTimeFuncCall
	mutex       sync.Mutex
}

// UpdateExpiryTime delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockOrgInvitationStore) UpdateExpiryTime(v0 context.Context, v1 int64, v2 time.Time) error {
	r0 := m.UpdateExpiryTimeFunc.nextHook()(v0, v1, v2)
	m.UpdateExpiryTimeFunc.appendCall(OrgInvitationStoreUpdateExpiryTimeFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UpdateExpiryTime
// method of the parent MockOrgInvitationStore instance is invoked and the
// hook queue is empty.
func (f *OrgInvitationStoreUpdateExpiryTimeFunc) SetDefaultHook(hook func(context.Context, int64, time.Time) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateExpiryTime method of the parent MockOrgInvitationStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *OrgInvitationStoreUpdateExpiryTimeFunc) PushHook(hook func(context.Context, int64, time.Time) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgInvitationStoreUpdateExpiryTimeFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64, time.Time) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgInvitationStoreUpdateExpiryTimeFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64, time.Time) error {
		return r0
	})
}

func (f *OrgInvitationStoreUpdateExpiryTimeFunc) nextHook() func(context.Context, int64, time.Time) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreUpdateExpiryTimeFunc) appendCall(r0 OrgInvitationStoreUpdateExpiryTimeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgInvitationStoreUpdateExpiryTimeFuncCall
// objects describing the invocations of this function.
func (f *OrgInvitationStoreUpdateExpiryTimeFunc) History() []OrgInvitationStoreUpdateExpiryTimeFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreUpdateExpiryTimeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreUpdateExpiryTimeFuncCall is an object that describes an
// invocation of method UpdateExpiryTime on an instance of
// MockOrgInvitationStore.
type OrgInvitationStoreUpdateExpiryTimeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreUpdateExpiryTimeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreUpdateExpiryTimeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OrgInvitationStoreWithFunc describes the behavior when the With method of
// the parent MockOrgInvitationStore instance is invoked.
type OrgInvitationStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) OrgInvitationStore
	hooks       []func(basestore.ShareableStore) OrgInvitationStore
	history     []OrgInvitationStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgInvitationStore) With(v0 basestore.ShareableStore) OrgInvitationStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(OrgInvitationStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockOrgInvitationStore instance is invoked and the hook queue is
// empty.
func (f *OrgInvitationStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) OrgInvitationStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockOrgInvitationStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgInvitationStoreWithFunc) PushHook(hook func(basestore.ShareableStore) OrgInvitationStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgInvitationStoreWithFunc) SetDefaultReturn(r0 OrgInvitationStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) OrgInvitationStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgInvitationStoreWithFunc) PushReturn(r0 OrgInvitationStore) {
	f.PushHook(func(basestore.ShareableStore) OrgInvitationStore {
		return r0
	})
}

func (f *OrgInvitationStoreWithFunc) nextHook() func(basestore.ShareableStore) OrgInvitationStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreWithFunc) appendCall(r0 OrgInvitationStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgInvitationStoreWithFuncCall objects
// describing the invocations of this function.
func (f *OrgInvitationStoreWithFunc) History() []OrgInvitationStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreWithFuncCall is an object that describes an invocation
// of method With on an instance of MockOrgInvitationStore.
type OrgInvitationStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 OrgInvitationStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OrgInvitationStoreWithTransactFunc describes the behavior when the
// WithTransact method of the parent MockOrgInvitationStore instance is
// invoked.
type OrgInvitationStoreWithTransactFunc struct {
	defaultHook func(context.Context, func(OrgInvitationStore) error) error
	hooks       []func(context.Context, func(OrgInvitationStore) error) error
	history     []OrgInvitationStoreWithTransactFuncCall
	mutex       sync.Mutex
}

// WithTransact delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockOrgInvitationStore) WithTransact(v0 context.Context, v1 func(OrgInvitationStore) error) error {
	r0 := m.WithTransactFunc.nextHook()(v0, v1)
	m.WithTransactFunc.appendCall(OrgInvitationStoreWithTransactFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithTransact method
// of the parent MockOrgInvitationStore instance is invoked and the hook
// queue is empty.
func (f *OrgInvitationStoreWithTransactFunc) SetDefaultHook(hook func(context.Context, func(OrgInvitationStore) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithTransact method of the parent MockOrgInvitationStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *OrgInvitationStoreWithTransactFunc) PushHook(hook func(context.Context, func(OrgInvitationStore) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgInvitationStoreWithTransactFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, func(OrgInvitationStore) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgInvitationStoreWithTransactFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, func(OrgInvitationStore) error) error {
		return r0
	})
}

func (f *OrgInvitationStoreWithTransactFunc) nextHook() func(context.Context, func(OrgInvitationStore) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgInvitationStoreWithTransactFunc) appendCall(r0 OrgInvitationStoreWithTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgInvitationStoreWithTransactFuncCall
// objects describing the invocations of this function.
func (f *OrgInvitationStoreWithTransactFunc) History() []OrgInvitationStoreWithTransactFuncCall {
	f.mutex.Lock()
	history := make([]OrgInvitationStoreWithTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgInvitationStoreWithTransactFuncCall is an object that describes an
// invocation of method WithTransact on an instance of
// MockOrgInvitationStore.
type OrgInvitationStoreWithTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 func(OrgInvitationStore) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgInvitationStoreWithTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgInvitationStoreWithTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockOrgMemberStore is a mock implementation of the OrgMemberStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockOrgMemberStore struct {
	// AutocompleteMembersSearchFunc is an instance of a mock function
	// object controlling the behavior of the method
	// AutocompleteMembersSearch.
	AutocompleteMembersSearchFunc *OrgMemberStoreAutocompleteMembersSearchFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *OrgMemberStoreCreateFunc
	// CreateMembershipInOrgsForAllUsersFunc is an instance of a mock
	// function object controlling the behavior of the method
	// CreateMembershipInOrgsForAllUsers.
	CreateMembershipInOrgsForAllUsersFunc *OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc
	// GetByOrgIDFunc is an instance of a mock function object controlling
	// the behavior of the method GetByOrgID.
	GetByOrgIDFunc *OrgMemberStoreGetByOrgIDFunc
	// GetByOrgIDAndUserIDFunc is an instance of a mock function object
	// controlling the behavior of the method GetByOrgIDAndUserID.
	GetByOrgIDAndUserIDFunc *OrgMemberStoreGetByOrgIDAndUserIDFunc
	// GetByUserIDFunc is an instance of a mock function object controlling
	// the behavior of the method GetByUserID.
	GetByUserIDFunc *OrgMemberStoreGetByUserIDFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *OrgMemberStoreHandleFunc
	// MemberCountFunc is an instance of a mock function object controlling
	// the behavior of the method MemberCount.
	MemberCountFunc *OrgMemberStoreMemberCountFunc
	// RemoveFunc is an instance of a mock function object controlling the
	// behavior of the method Remove.
	RemoveFunc *OrgMemberStoreRemoveFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *OrgMemberStoreWithFunc
	// WithTransactFunc is an instance of a mock function object controlling
	// the behavior of the method WithTransact.
	WithTransactFunc *OrgMemberStoreWithTransactFunc
}

// NewMockOrgMemberStore creates a new mock of the OrgMemberStore interface.
// All methods return zero values for all results, unless overwritten.
func NewMockOrgMemberStore() *MockOrgMemberStore {
	return &MockOrgMemberStore{
		AutocompleteMembersSearchFunc: &OrgMemberStoreAutocompleteMembersSearchFunc{
			defaultHook: func(context.Context, int32, string) (r0 []*types.OrgMemberAutocompleteSearchItem, r1 error) {
				return
			},
		},
		CreateFunc: &OrgMemberStoreCreateFunc{
			defaultHook: func(context.Context, int32, int32) (r0 *types.OrgMembership, r1 error) {
				return
			},
		},
		CreateMembershipInOrgsForAllUsersFunc: &OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc{
			defaultHook: func(context.Context, []string) (r0 error) {
				return
			},
		},
		GetByOrgIDFunc: &OrgMemberStoreGetByOrgIDFunc{
			defaultHook: func(context.Context, int32) (r0 []*types.OrgMembership, r1 error) {
				return
			},
		},
		GetByOrgIDAndUserIDFunc: &OrgMemberStoreGetByOrgIDAndUserIDFunc{
			defaultHook: func(context.Context, int32, int32) (r0 *types.OrgMembership, r1 error) {
				return
			},
		},
		GetByUserIDFunc: &OrgMemberStoreGetByUserIDFunc{
			defaultHook: func(context.Context, int32) (r0 []*types.OrgMembership, r1 error) {
				return
			},
		},
		HandleFunc: &OrgMemberStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		MemberCountFunc: &OrgMemberStoreMemberCountFunc{
			defaultHook: func(context.Context, int32) (r0 int, r1 error) {
				return
			},
		},
		RemoveFunc: &OrgMemberStoreRemoveFunc{
			defaultHook: func(context.Context, int32, int32) (r0 error) {
				return
			},
		},
		WithFunc: &OrgMemberStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 OrgMemberStore) {
				return
			},
		},
		WithTransactFunc: &OrgMemberStoreWithTransactFunc{
			defaultHook: func(context.Context, func(OrgMemberStore) error) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockOrgMemberStore creates a new mock of the OrgMemberStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockOrgMemberStore() *MockOrgMemberStore {
	return &MockOrgMemberStore{
		AutocompleteMembersSearchFunc: &OrgMemberStoreAutocompleteMembersSearchFunc{
			defaultHook: func(context.Context, int32, string) ([]*types.OrgMemberAutocompleteSearchItem, error) {
				panic("unexpected invocation of MockOrgMemberStore.AutocompleteMembersSearch")
			},
		},
		CreateFunc: &OrgMemberStoreCreateFunc{
			defaultHook: func(context.Context, int32, int32) (*types.OrgMembership, error) {
				panic("unexpected invocation of MockOrgMemberStore.Create")
			},
		},
		CreateMembershipInOrgsForAllUsersFunc: &OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc{
			defaultHook: func(context.Context, []string) error {
				panic("unexpected invocation of MockOrgMemberStore.CreateMembershipInOrgsForAllUsers")
			},
		},
		GetByOrgIDFunc: &OrgMemberStoreGetByOrgIDFunc{
			defaultHook: func(context.Context, int32) ([]*types.OrgMembership, error) {
				panic("unexpected invocation of MockOrgMemberStore.GetByOrgID")
			},
		},
		GetByOrgIDAndUserIDFunc: &OrgMemberStoreGetByOrgIDAndUserIDFunc{
			defaultHook: func(context.Context, int32, int32) (*types.OrgMembership, error) {
				panic("unexpected invocation of MockOrgMemberStore.GetByOrgIDAndUserID")
			},
		},
		GetByUserIDFunc: &OrgMemberStoreGetByUserIDFunc{
			defaultHook: func(context.Context, int32) ([]*types.OrgMembership, error) {
				panic("unexpected invocation of MockOrgMemberStore.GetByUserID")
			},
		},
		HandleFunc: &OrgMemberStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockOrgMemberStore.Handle")
			},
		},
		MemberCountFunc: &OrgMemberStoreMemberCountFunc{
			defaultHook: func(context.Context, int32) (int, error) {
				panic("unexpected invocation of MockOrgMemberStore.MemberCount")
			},
		},
		RemoveFunc: &OrgMemberStoreRemoveFunc{
			defaultHook: func(context.Context, int32, int32) error {
				panic("unexpected invocation of MockOrgMemberStore.Remove")
			},
		},
		WithFunc: &OrgMemberStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) OrgMemberStore {
				panic("unexpected invocation of MockOrgMemberStore.With")
			},
		},
		WithTransactFunc: &OrgMemberStoreWithTransactFunc{
			defaultHook: func(context.Context, func(OrgMemberStore) error) error {
				panic("unexpected invocation of MockOrgMemberStore.WithTransact")
			},
		},
	}
}

// NewMockOrgMemberStoreFrom creates a new mock of the MockOrgMemberStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockOrgMemberStoreFrom(i OrgMemberStore) *MockOrgMemberStore {
	return &MockOrgMemberStore{
		AutocompleteMembersSearchFunc: &OrgMemberStoreAutocompleteMembersSearchFunc{
			defaultHook: i.AutocompleteMembersSearch,
		},
		CreateFunc: &OrgMemberStoreCreateFunc{
			defaultHook: i.Create,
		},
		CreateMembershipInOrgsForAllUsersFunc: &OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc{
			defaultHook: i.CreateMembershipInOrgsForAllUsers,
		},
		GetByOrgIDFunc: &OrgMemberStoreGetByOrgIDFunc{
			defaultHook: i.GetByOrgID,
		},
		GetByOrgIDAndUserIDFunc: &OrgMemberStoreGetByOrgIDAndUserIDFunc{
			defaultHook: i.GetByOrgIDAndUserID,
		},
		GetByUserIDFunc: &OrgMemberStoreGetByUserIDFunc{
			defaultHook: i.GetByUserID,
		},
		HandleFunc: &OrgMemberStoreHandleFunc{
			defaultHook: i.Handle,
		},
		MemberCountFunc: &OrgMemberStoreMemberCountFunc{
			defaultHook: i.MemberCount,
		},
		RemoveFunc: &OrgMemberStoreRemoveFunc{
			defaultHook: i.Remove,
		},
		WithFunc: &OrgMemberStoreWithFunc{
			defaultHook: i.With,
		},
		WithTransactFunc: &OrgMemberStoreWithTransactFunc{
			defaultHook: i.WithTransact,
		},
	}
}

// OrgMemberStoreAutocompleteMembersSearchFunc describes the behavior when
// the AutocompleteMembersSearch method of the parent MockOrgMemberStore
// instance is invoked.
type OrgMemberStoreAutocompleteMembersSearchFunc struct {
	defaultHook func(context.Context, int32, string) ([]*types.OrgMemberAutocompleteSearchItem, error)
	hooks       []func(context.Context, int32, string) ([]*types.OrgMemberAutocompleteSearchItem, error)
	history     []OrgMemberStoreAutocompleteMembersSearchFuncCall
	mutex       sync.Mutex
}

// AutocompleteMembersSearch delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockOrgMemberStore) AutocompleteMembersSearch(v0 context.Context, v1 int32, v2 string) ([]*types.OrgMemberAutocompleteSearchItem, error) {
	r0, r1 := m.AutocompleteMembersSearchFunc.nextHook()(v0, v1, v2)
	m.AutocompleteMembersSearchFunc.appendCall(OrgMemberStoreAutocompleteMembersSearchFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// AutocompleteMembersSearch method of the parent MockOrgMemberStore
// instance is invoked and the hook queue is empty.
func (f *OrgMemberStoreAutocompleteMembersSearchFunc) SetDefaultHook(hook func(context.Context, int32, string) ([]*types.OrgMemberAutocompleteSearchItem, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AutocompleteMembersSearch method of the parent MockOrgMemberStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *OrgMemberStoreAutocompleteMembersSearchFunc) PushHook(hook func(context.Context, int32, string) ([]*types.OrgMemberAutocompleteSearchItem, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgMemberStoreAutocompleteMembersSearchFunc) SetDefaultReturn(r0 []*types.OrgMemberAutocompleteSearchItem, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, string) ([]*types.OrgMemberAutocompleteSearchItem, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgMemberStoreAutocompleteMembersSearchFunc) PushReturn(r0 []*types.OrgMemberAutocompleteSearchItem, r1 error) {
	f.PushHook(func(context.Context, int32, string) ([]*types.OrgMemberAutocompleteSearchItem, error) {
		return r0, r1
	})
}

func (f *OrgMemberStoreAutocompleteMembersSearchFunc) nextHook() func(context.Context, int32, string) ([]*types.OrgMemberAutocompleteSearchItem, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgMemberStoreAutocompleteMembersSearchFunc) appendCall(r0 OrgMemberStoreAutocompleteMembersSearchFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// OrgMemberStoreAutocompleteMembersSearchFuncCall objects describing the
// invocations of this function.
func (f *OrgMemberStoreAutocompleteMembersSearchFunc) History() []OrgMemberStoreAutocompleteMembersSearchFuncCall {
	f.mutex.Lock()
	history := make([]OrgMemberStoreAutocompleteMembersSearchFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgMemberStoreAutocompleteMembersSearchFuncCall is an object that
// describes an invocation of method AutocompleteMembersSearch on an
// instance of MockOrgMemberStore.
type OrgMemberStoreAutocompleteMembersSearchFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.OrgMemberAutocompleteSearchItem
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgMemberStoreAutocompleteMembersSearchFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgMemberStoreAutocompleteMembersSearchFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgMemberStoreCreateFunc describes the behavior when the Create method of
// the parent MockOrgMemberStore instance is invoked.
type OrgMemberStoreCreateFunc struct {
	defaultHook func(context.Context, int32, int32) (*types.OrgMembership, error)
	hooks       []func(context.Context, int32, int32) (*types.OrgMembership, error)
	history     []OrgMemberStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgMemberStore) Create(v0 context.Context, v1 int32, v2 int32) (*types.OrgMembership, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1, v2)
	m.CreateFunc.appendCall(OrgMemberStoreCreateFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockOrgMemberStore instance is invoked and the hook queue is
// empty.
func (f *OrgMemberStoreCreateFunc) SetDefaultHook(hook func(context.Context, int32, int32) (*types.OrgMembership, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockOrgMemberStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *OrgMemberStoreCreateFunc) PushHook(hook func(context.Context, int32, int32) (*types.OrgMembership, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgMemberStoreCreateFunc) SetDefaultReturn(r0 *types.OrgMembership, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, int32) (*types.OrgMembership, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgMemberStoreCreateFunc) PushReturn(r0 *types.OrgMembership, r1 error) {
	f.PushHook(func(context.Context, int32, int32) (*types.OrgMembership, error) {
		return r0, r1
	})
}

func (f *OrgMemberStoreCreateFunc) nextHook() func(context.Context, int32, int32) (*types.OrgMembership, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgMemberStoreCreateFunc) appendCall(r0 OrgMemberStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgMemberStoreCreateFuncCall objects
// describing the invocations of this function.
func (f *OrgMemberStoreCreateFunc) History() []OrgMemberStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]OrgMemberStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgMemberStoreCreateFuncCall is an object that describes an invocation of
// method Create on an instance of MockOrgMemberStore.
type OrgMemberStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.OrgMembership
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgMemberStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgMemberStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc describes the
// behavior when the CreateMembershipInOrgsForAllUsers method of the parent
// MockOrgMemberStore instance is invoked.
type OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc struct {
	defaultHook func(context.Context, []string) error
	hooks       []func(context.Context, []string) error
	history     []OrgMemberStoreCreateMembershipInOrgsForAllUsersFuncCall
	mutex       sync.Mutex
}

// CreateMembershipInOrgsForAllUsers delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockOrgMemberStore) CreateMembershipInOrgsForAllUsers(v0 context.Context, v1 []string) error {
	r0 := m.CreateMembershipInOrgsForAllUsersFunc.nextHook()(v0, v1)
	m.CreateMembershipInOrgsForAllUsersFunc.appendCall(OrgMemberStoreCreateMembershipInOrgsForAllUsersFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// CreateMembershipInOrgsForAllUsers method of the parent MockOrgMemberStore
// instance is invoked and the hook queue is empty.
func (f *OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc) SetDefaultHook(hook func(context.Context, []string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateMembershipInOrgsForAllUsers method of the parent MockOrgMemberStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc) PushHook(hook func(context.Context, []string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []string) error {
		return r0
	})
}

func (f *OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc) nextHook() func(context.Context, []string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc) appendCall(r0 OrgMemberStoreCreateMembershipInOrgsForAllUsersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// OrgMemberStoreCreateMembershipInOrgsForAllUsersFuncCall objects
// describing the invocations of this function.
func (f *OrgMemberStoreCreateMembershipInOrgsForAllUsersFunc) History() []OrgMemberStoreCreateMembershipInOrgsForAllUsersFuncCall {
	f.mutex.Lock()
	history := make([]OrgMemberStoreCreateMembershipInOrgsForAllUsersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgMemberStoreCreateMembershipInOrgsForAllUsersFuncCall is an object that
// describes an invocation of method CreateMembershipInOrgsForAllUsers on an
// instance of MockOrgMemberStore.
type OrgMemberStoreCreateMembershipInOrgsForAllUsersFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgMemberStoreCreateMembershipInOrgsForAllUsersFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgMemberStoreCreateMembershipInOrgsForAllUsersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OrgMemberStoreGetByOrgIDFunc describes the behavior when the GetByOrgID
// method of the parent MockOrgMemberStore instance is invoked.
type OrgMemberStoreGetByOrgIDFunc struct {
	defaultHook func(context.Context, int32) ([]*types.OrgMembership, error)
	hooks       []func(context.Context, int32) ([]*types.OrgMembership, error)
	history     []OrgMemberStoreGetByOrgIDFuncCall
	mutex       sync.Mutex
}

// GetByOrgID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockOrgMemberStore) GetByOrgID(v0 context.Context, v1 int32) ([]*types.OrgMembership, error) {
	r0, r1 := m.GetByOrgIDFunc.nextHook()(v0, v1)
	m.GetByOrgIDFunc.appendCall(OrgMemberStoreGetByOrgIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByOrgID method of
// the parent MockOrgMemberStore instance is invoked and the hook queue is
// empty.
func (f *OrgMemberStoreGetByOrgIDFunc) SetDefaultHook(hook func(context.Context, int32) ([]*types.OrgMembership, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByOrgID method of the parent MockOrgMemberStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgMemberStoreGetByOrgIDFunc) PushHook(hook func(context.Context, int32) ([]*types.OrgMembership, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgMemberStoreGetByOrgIDFunc) SetDefaultReturn(r0 []*types.OrgMembership, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) ([]*types.OrgMembership, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgMemberStoreGetByOrgIDFunc) PushReturn(r0 []*types.OrgMembership, r1 error) {
	f.PushHook(func(context.Context, int32) ([]*types.OrgMembership, error) {
		return r0, r1
	})
}

func (f *OrgMemberStoreGetByOrgIDFunc) nextHook() func(context.Context, int32) ([]*types.OrgMembership, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgMemberStoreGetByOrgIDFunc) appendCall(r0 OrgMemberStoreGetByOrgIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgMemberStoreGetByOrgIDFuncCall objects
// describing the invocations of this function.
func (f *OrgMemberStoreGetByOrgIDFunc) History() []OrgMemberStoreGetByOrgIDFuncCall {
	f.mutex.Lock()
	history := make([]OrgMemberStoreGetByOrgIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgMemberStoreGetByOrgIDFuncCall is an object that describes an
// invocation of method GetByOrgID on an instance of MockOrgMemberStore.
type OrgMemberStoreGetByOrgIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.OrgMembership
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgMemberStoreGetByOrgIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgMemberStoreGetByOrgIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgMemberStoreGetByOrgIDAndUserIDFunc describes the behavior when the
// GetByOrgIDAndUserID method of the parent MockOrgMemberStore instance is
// invoked.
type OrgMemberStoreGetByOrgIDAndUserIDFunc struct {
	defaultHook func(context.Context, int32, int32) (*types.OrgMembership, error)
	hooks       []func(context.Context, int32, int32) (*types.OrgMembership, error)
	history     []OrgMemberStoreGetByOrgIDAndUserIDFuncCall
	mutex       sync.Mutex
}

// GetByOrgIDAndUserID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockOrgMemberStore) GetByOrgIDAndUserID(v0 context.Context, v1 int32, v2 int32) (*types.OrgMembership, error) {
	r0, r1 := m.GetByOrgIDAndUserIDFunc.nextHook()(v0, v1, v2)
	m.GetByOrgIDAndUserIDFunc.appendCall(OrgMemberStoreGetByOrgIDAndUserIDFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByOrgIDAndUserID
// method of the parent MockOrgMemberStore instance is invoked and the hook
// queue is empty.
func (f *OrgMemberStoreGetByOrgIDAndUserIDFunc) SetDefaultHook(hook func(context.Context, int32, int32) (*types.OrgMembership, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByOrgIDAndUserID method of the parent MockOrgMemberStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *OrgMemberStoreGetByOrgIDAndUserIDFunc) PushHook(hook func(context.Context, int32, int32) (*types.OrgMembership, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgMemberStoreGetByOrgIDAndUserIDFunc) SetDefaultReturn(r0 *types.OrgMembership, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, int32) (*types.OrgMembership, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgMemberStoreGetByOrgIDAndUserIDFunc) PushReturn(r0 *types.OrgMembership, r1 error) {
	f.PushHook(func(context.Context, int32, int32) (*types.OrgMembership, error) {
		return r0, r1
	})
}

func (f *OrgMemberStoreGetByOrgIDAndUserIDFunc) nextHook() func(context.Context, int32, int32) (*types.OrgMembership, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgMemberStoreGetByOrgIDAndUserIDFunc) appendCall(r0 OrgMemberStoreGetByOrgIDAndUserIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgMemberStoreGetByOrgIDAndUserIDFuncCall
// objects describing the invocations of this function.
func (f *OrgMemberStoreGetByOrgIDAndUserIDFunc) History() []OrgMemberStoreGetByOrgIDAndUserIDFuncCall {
	f.mutex.Lock()
	history := make([]OrgMemberStoreGetByOrgIDAndUserIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgMemberStoreGetByOrgIDAndUserIDFuncCall is an object that describes an
// invocation of method GetByOrgIDAndUserID on an instance of
// MockOrgMemberStore.
type OrgMemberStoreGetByOrgIDAndUserIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.OrgMembership
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgMemberStoreGetByOrgIDAndUserIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgMemberStoreGetByOrgIDAndUserIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgMemberStoreGetByUserIDFunc describes the behavior when the GetByUserID
// method of the parent MockOrgMemberStore instance is invoked.
type OrgMemberStoreGetByUserIDFunc struct {
	defaultHook func(context.Context, int32) ([]*types.OrgMembership, error)
	hooks       []func(context.Context, int32) ([]*types.OrgMembership, error)
	history     []OrgMemberStoreGetByUserIDFuncCall
	mutex       sync.Mutex
}

// GetByUserID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockOrgMemberStore) GetByUserID(v0 context.Context, v1 int32) ([]*types.OrgMembership, error) {
	r0, r1 := m.GetByUserIDFunc.nextHook()(v0, v1)
	m.GetByUserIDFunc.appendCall(OrgMemberStoreGetByUserIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByUserID method
// of the parent MockOrgMemberStore instance is invoked and the hook queue
// is empty.
func (f *OrgMemberStoreGetByUserIDFunc) SetDefaultHook(hook func(context.Context, int32) ([]*types.OrgMembership, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByUserID method of the parent MockOrgMemberStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgMemberStoreGetByUserIDFunc) PushHook(hook func(context.Context, int32) ([]*types.OrgMembership, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgMemberStoreGetByUserIDFunc) SetDefaultReturn(r0 []*types.OrgMembership, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) ([]*types.OrgMembership, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgMemberStoreGetByUserIDFunc) PushReturn(r0 []*types.OrgMembership, r1 error) {
	f.PushHook(func(context.Context, int32) ([]*types.OrgMembership, error) {
		return r0, r1
	})
}

func (f *OrgMemberStoreGetByUserIDFunc) nextHook() func(context.Context, int32) ([]*types.OrgMembership, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgMemberStoreGetByUserIDFunc) appendCall(r0 OrgMemberStoreGetByUserIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgMemberStoreGetByUserIDFuncCall objects
// describing the invocations of this function.
func (f *OrgMemberStoreGetByUserIDFunc) History() []OrgMemberStoreGetByUserIDFuncCall {
	f.mutex.Lock()
	history := make([]OrgMemberStoreGetByUserIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgMemberStoreGetByUserIDFuncCall is an object that describes an
// invocation of method GetByUserID on an instance of MockOrgMemberStore.
type OrgMemberStoreGetByUserIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.OrgMembership
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgMemberStoreGetByUserIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgMemberStoreGetByUserIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgMemberStoreHandleFunc describes the behavior when the Handle method of
// the parent MockOrgMemberStore instance is invoked.
type OrgMemberStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []OrgMemberStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgMemberStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(OrgMemberStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockOrgMemberStore instance is invoked and the hook queue is
// empty.
func (f *OrgMemberStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockOrgMemberStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *OrgMemberStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgMemberStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgMemberStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *OrgMemberStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgMemberStoreHandleFunc) appendCall(r0 OrgMemberStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgMemberStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *OrgMemberStoreHandleFunc) History() []OrgMemberStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]OrgMemberStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgMemberStoreHandleFuncCall is an object that describes an invocation of
// method Handle on an instance of MockOrgMemberStore.
type OrgMemberStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgMemberStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgMemberStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OrgMemberStoreMemberCountFunc describes the behavior when the MemberCount
// method of the parent MockOrgMemberStore instance is invoked.
type OrgMemberStoreMemberCountFunc struct {
	defaultHook func(context.Context, int32) (int, error)
	hooks       []func(context.Context, int32) (int, error)
	history     []OrgMemberStoreMemberCountFuncCall
	mutex       sync.Mutex
}

// MemberCount delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockOrgMemberStore) MemberCount(v0 context.Context, v1 int32) (int, error) {
	r0, r1 := m.MemberCountFunc.nextHook()(v0, v1)
	m.MemberCountFunc.appendCall(OrgMemberStoreMemberCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MemberCount method
// of the parent MockOrgMemberStore instance is invoked and the hook queue
// is empty.
func (f *OrgMemberStoreMemberCountFunc) SetDefaultHook(hook func(context.Context, int32) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MemberCount method of the parent MockOrgMemberStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgMemberStoreMemberCountFunc) PushHook(hook func(context.Context, int32) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgMemberStoreMemberCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgMemberStoreMemberCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, int32) (int, error) {
		return r0, r1
	})
}

func (f *OrgMemberStoreMemberCountFunc) nextHook() func(context.Context, int32) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgMemberStoreMemberCountFunc) appendCall(r0 OrgMemberStoreMemberCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgMemberStoreMemberCountFuncCall objects
// describing the invocations of this function.
func (f *OrgMemberStoreMemberCountFunc) History() []OrgMemberStoreMemberCountFuncCall {
	f.mutex.Lock()
	history := make([]OrgMemberStoreMemberCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgMemberStoreMemberCountFuncCall is an object that describes an
// invocation of method MemberCount on an instance of MockOrgMemberStore.
type OrgMemberStoreMemberCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgMemberStoreMemberCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgMemberStoreMemberCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgMemberStoreRemoveFunc describes the behavior when the Remove method of
// the parent MockOrgMemberStore instance is invoked.
type OrgMemberStoreRemoveFunc struct {
	defaultHook func(context.Context, int32, int32) error
	hooks       []func(context.Context, int32, int32) error
	history     []OrgMemberStoreRemoveFuncCall
	mutex       sync.Mutex
}

// Remove delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgMemberStore) Remove(v0 context.Context, v1 int32, v2 int32) error {
	r0 := m.RemoveFunc.nextHook()(v0, v1, v2)
	m.RemoveFunc.appendCall(OrgMemberStoreRemoveFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Remove method of the
// parent MockOrgMemberStore instance is invoked and the hook queue is
// empty.
func (f *OrgMemberStoreRemoveFunc) SetDefaultHook(hook func(context.Context, int32, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Remove method of the parent MockOrgMemberStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *OrgMemberStoreRemoveFunc) PushHook(hook func(context.Context, int32, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgMemberStoreRemoveFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgMemberStoreRemoveFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, int32) error {
		return r0
	})
}

func (f *OrgMemberStoreRemoveFunc) nextHook() func(context.Context, int32, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgMemberStoreRemoveFunc) appendCall(r0 OrgMemberStoreRemoveFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgMemberStoreRemoveFuncCall objects
// describing the invocations of this function.
func (f *OrgMemberStoreRemoveFunc) History() []OrgMemberStoreRemoveFuncCall {
	f.mutex.Lock()
	history := make([]OrgMemberStoreRemoveFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgMemberStoreRemoveFuncCall is an object that describes an invocation of
// method Remove on an instance of MockOrgMemberStore.
type OrgMemberStoreRemoveFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgMemberStoreRemoveFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgMemberStoreRemoveFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OrgMemberStoreWithFunc describes the behavior when the With method of the
// parent MockOrgMemberStore instance is invoked.
type OrgMemberStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) OrgMemberStore
	hooks       []func(basestore.ShareableStore) OrgMemberStore
	history     []OrgMemberStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgMemberStore) With(v0 basestore.ShareableStore) OrgMemberStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(OrgMemberStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockOrgMemberStore instance is invoked and the hook queue is
// empty.
func (f *OrgMemberStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) OrgMemberStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockOrgMemberStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *OrgMemberStoreWithFunc) PushHook(hook func(basestore.ShareableStore) OrgMemberStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgMemberStoreWithFunc) SetDefaultReturn(r0 OrgMemberStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) OrgMemberStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgMemberStoreWithFunc) PushReturn(r0 OrgMemberStore) {
	f.PushHook(func(basestore.ShareableStore) OrgMemberStore {
		return r0
	})
}

func (f *OrgMemberStoreWithFunc) nextHook() func(basestore.ShareableStore) OrgMemberStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgMemberStoreWithFunc) appendCall(r0 OrgMemberStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgMemberStoreWithFuncCall objects
// describing the invocations of this function.
func (f *OrgMemberStoreWithFunc) History() []OrgMemberStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]OrgMemberStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgMemberStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockOrgMemberStore.
type OrgMemberStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 OrgMemberStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgMemberStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgMemberStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OrgMemberStoreWithTransactFunc describes the behavior when the
// WithTransact method of the parent MockOrgMemberStore instance is invoked.
type OrgMemberStoreWithTransactFunc struct {
	defaultHook func(context.Context, func(OrgMemberStore) error) error
	hooks       []func(context.Context, func(OrgMemberStore) error) error
	history     []OrgMemberStoreWithTransactFuncCall
	mutex       sync.Mutex
}

// WithTransact delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockOrgMemberStore) WithTransact(v0 context.Context, v1 func(OrgMemberStore) error) error {
	r0 := m.WithTransactFunc.nextHook()(v0, v1)
	m.WithTransactFunc.appendCall(OrgMemberStoreWithTransactFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithTransact method
// of the parent MockOrgMemberStore instance is invoked and the hook queue
// is empty.
func (f *OrgMemberStoreWithTransactFunc) SetDefaultHook(hook func(context.Context, func(OrgMemberStore) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithTransact method of the parent MockOrgMemberStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OrgMemberStoreWithTransactFunc) PushHook(hook func(context.Context, func(OrgMemberStore) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgMemberStoreWithTransactFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, func(OrgMemberStore) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgMemberStoreWithTransactFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, func(OrgMemberStore) error) error {
		return r0
	})
}

func (f *OrgMemberStoreWithTransactFunc) nextHook() func(context.Context, func(OrgMemberStore) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgMemberStoreWithTransactFunc) appendCall(r0 OrgMemberStoreWithTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgMemberStoreWithTransactFuncCall objects
// describing the invocations of this function.
func (f *OrgMemberStoreWithTransactFunc) History() []OrgMemberStoreWithTransactFuncCall {
	f.mutex.Lock()
	history := make([]OrgMemberStoreWithTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgMemberStoreWithTransactFuncCall is an object that describes an
// invocation of method WithTransact on an instance of MockOrgMemberStore.
type OrgMemberStoreWithTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 func(OrgMemberStore) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgMemberStoreWithTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgMemberStoreWithTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockOrgStore is a mock implementation of the OrgStore interface (from the
// package github.com/sourcegraph/sourcegraph/internal/database) used for
// unit testing.
type MockOrgStore struct {
	// AddOrgsOpenBetaStatsFunc is an instance of a mock function object
	// controlling the behavior of the method AddOrgsOpenBetaStats.
	AddOrgsOpenBetaStatsFunc *OrgStoreAddOrgsOpenBetaStatsFunc
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *OrgStoreCountFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *OrgStoreCreateFunc
	// DeleteFunc is an instance of a mock function object controlling the
	// behavior of the method Delete.
	DeleteFunc *OrgStoreDeleteFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *OrgStoreDoneFunc
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *OrgStoreGetByIDFunc
	// GetByNameFunc is an instance of a mock function object controlling
	// the behavior of the method GetByName.
	GetByNameFunc *OrgStoreGetByNameFunc
	// GetByUserIDFunc is an instance of a mock function object controlling
	// the behavior of the method GetByUserID.
	GetByUserIDFunc *OrgStoreGetByUserIDFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *OrgStoreHandleFunc
	// HardDeleteFunc is an instance of a mock function object controlling
	// the behavior of the method HardDelete.
	HardDeleteFunc *OrgStoreHardDeleteFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *OrgStoreListFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *OrgStoreTransactFunc
	// UpdateFunc is an instance of a mock function object controlling the
	// behavior of the method Update.
	UpdateFunc *OrgStoreUpdateFunc
	// UpdateOrgsOpenBetaStatsFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateOrgsOpenBetaStats.
	UpdateOrgsOpenBetaStatsFunc *OrgStoreUpdateOrgsOpenBetaStatsFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *OrgStoreWithFunc
}

// NewMockOrgStore creates a new mock of the OrgStore interface. All methods
// return zero values for all results, unless overwritten.
func NewMockOrgStore() *MockOrgStore {
	return &MockOrgStore{
		AddOrgsOpenBetaStatsFunc: &OrgStoreAddOrgsOpenBetaStatsFunc{
			defaultHook: func(context.Context, int32, string) (r0 string, r1 error) {
				return
			},
		},
		CountFunc: &OrgStoreCountFunc{
			defaultHook: func(context.Context, OrgsListOptions) (r0 int, r1 error) {
				return
			},
		},
		CreateFunc: &OrgStoreCreateFunc{
			defaultHook: func(context.Context, string, *string) (r0 *types.Org, r1 error) {
				return
			},
		},
		DeleteFunc: &OrgStoreDeleteFunc{
			defaultHook: func(context.Context, int32) (r0 error) {
				return
			},
		},
		DoneFunc: &OrgStoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		GetByIDFunc: &OrgStoreGetByIDFunc{
			defaultHook: func(context.Context, int32) (r0 *types.Org, r1 error) {
				return
			},
		},
		GetByNameFunc: &OrgStoreGetByNameFunc{
			defaultHook: func(context.Context, string) (r0 *types.Org, r1 error) {
				return
			},
		},
		GetByUserIDFunc: &OrgStoreGetByUserIDFunc{
			defaultHook: func(context.Context, int32) (r0 []*types.Org, r1 error) {
				return
			},
		},
		HandleFunc: &OrgStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		HardDeleteFunc: &OrgStoreHardDeleteFunc{
			defaultHook: func(context.Context, int32) (r0 error) {
				return
			},
		},
		ListFunc: &OrgStoreListFunc{
			defaultHook: func(context.Context, *OrgsListOptions) (r0 []*types.Org, r1 error) {
				return
			},
		},
		TransactFunc: &OrgStoreTransactFunc{
			defaultHook: func(context.Context) (r0 OrgStore, r1 error) {
				return
			},
		},
		UpdateFunc: &OrgStoreUpdateFunc{
			defaultHook: func(context.Context, int32, *string) (r0 *types.Org, r1 error) {
				return
			},
		},
		UpdateOrgsOpenBetaStatsFunc: &OrgStoreUpdateOrgsOpenBetaStatsFunc{
			defaultHook: func(context.Context, string, int32) (r0 error) {
				return
			},
		},
		WithFunc: &OrgStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 OrgStore) {
				return
			},
		},
	}
}

// NewStrictMockOrgStore creates a new mock of the OrgStore interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockOrgStore() *MockOrgStore {
	return &MockOrgStore{
		AddOrgsOpenBetaStatsFunc: &OrgStoreAddOrgsOpenBetaStatsFunc{
			defaultHook: func(context.Context, int32, string) (string, error) {
				panic("unexpected invocation of MockOrgStore.AddOrgsOpenBetaStats")
			},
		},
		CountFunc: &OrgStoreCountFunc{
			defaultHook: func(context.Context, OrgsListOptions) (int, error) {
				panic("unexpected invocation of MockOrgStore.Count")
			},
		},
		CreateFunc: &OrgStoreCreateFunc{
			defaultHook: func(context.Context, string, *string) (*types.Org, error) {
				panic("unexpected invocation of MockOrgStore.Create")
			},
		},
		DeleteFunc: &OrgStoreDeleteFunc{
			defaultHook: func(context.Context, int32) error {
				panic("unexpected invocation of MockOrgStore.Delete")
			},
		},
		DoneFunc: &OrgStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockOrgStore.Done")
			},
		},
		GetByIDFunc: &OrgStoreGetByIDFunc{
			defaultHook: func(context.Context, int32) (*types.Org, error) {
				panic("unexpected invocation of MockOrgStore.GetByID")
			},
		},
		GetByNameFunc: &OrgStoreGetByNameFunc{
			defaultHook: func(context.Context, string) (*types.Org, error) {
				panic("unexpected invocation of MockOrgStore.GetByName")
			},
		},
		GetByUserIDFunc: &OrgStoreGetByUserIDFunc{
			defaultHook: func(context.Context, int32) ([]*types.Org, error) {
				panic("unexpected invocation of MockOrgStore.GetByUserID")
			},
		},
		HandleFunc: &OrgStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockOrgStore.Handle")
			},
		},
		HardDeleteFunc: &OrgStoreHardDeleteFunc{
			defaultHook: func(context.Context, int32) error {
				panic("unexpected invocation of MockOrgStore.HardDelete")
			},
		},
		ListFunc: &OrgStoreListFunc{
			defaultHook: func(context.Context, *OrgsListOptions) ([]*types.Org, error) {
				panic("unexpected invocation of MockOrgStore.List")
			},
		},
		TransactFunc: &OrgStoreTransactFunc{
			defaultHook: func(context.Context) (OrgStore, error) {
				panic("unexpected invocation of MockOrgStore.Transact")
			},
		},
		UpdateFunc: &OrgStoreUpdateFunc{
			defaultHook: func(context.Context, int32, *string) (*types.Org, error) {
				panic("unexpected invocation of MockOrgStore.Update")
			},
		},
		UpdateOrgsOpenBetaStatsFunc: &OrgStoreUpdateOrgsOpenBetaStatsFunc{
			defaultHook: func(context.Context, string, int32) error {
				panic("unexpected invocation of MockOrgStore.UpdateOrgsOpenBetaStats")
			},
		},
		WithFunc: &OrgStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) OrgStore {
				panic("unexpected invocation of MockOrgStore.With")
			},
		},
	}
}

// NewMockOrgStoreFrom creates a new mock of the MockOrgStore interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockOrgStoreFrom(i OrgStore) *MockOrgStore {
	return &MockOrgStore{
		AddOrgsOpenBetaStatsFunc: &OrgStoreAddOrgsOpenBetaStatsFunc{
			defaultHook: i.AddOrgsOpenBetaStats,
		},
		CountFunc: &OrgStoreCountFunc{
			defaultHook: i.Count,
		},
		CreateFunc: &OrgStoreCreateFunc{
			defaultHook: i.Create,
		},
		DeleteFunc: &OrgStoreDeleteFunc{
			defaultHook: i.Delete,
		},
		DoneFunc: &OrgStoreDoneFunc{
			defaultHook: i.Done,
		},
		GetByIDFunc: &OrgStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		GetByNameFunc: &OrgStoreGetByNameFunc{
			defaultHook: i.GetByName,
		},
		GetByUserIDFunc: &OrgStoreGetByUserIDFunc{
			defaultHook: i.GetByUserID,
		},
		HandleFunc: &OrgStoreHandleFunc{
			defaultHook: i.Handle,
		},
		HardDeleteFunc: &OrgStoreHardDeleteFunc{
			defaultHook: i.HardDelete,
		},
		ListFunc: &OrgStoreListFunc{
			defaultHook: i.List,
		},
		TransactFunc: &OrgStoreTransactFunc{
			defaultHook: i.Transact,
		},
		UpdateFunc: &OrgStoreUpdateFunc{
			defaultHook: i.Update,
		},
		UpdateOrgsOpenBetaStatsFunc: &OrgStoreUpdateOrgsOpenBetaStatsFunc{
			defaultHook: i.UpdateOrgsOpenBetaStats,
		},
		WithFunc: &OrgStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// OrgStoreAddOrgsOpenBetaStatsFunc describes the behavior when the
// AddOrgsOpenBetaStats method of the parent MockOrgStore instance is
// invoked.
type OrgStoreAddOrgsOpenBetaStatsFunc struct {
	defaultHook func(context.Context, int32, string) (string, error)
	hooks       []func(context.Context, int32, string) (string, error)
	history     []OrgStoreAddOrgsOpenBetaStatsFuncCall
	mutex       sync.Mutex
}

// AddOrgsOpenBetaStats delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockOrgStore) AddOrgsOpenBetaStats(v0 context.Context, v1 int32, v2 string) (string, error) {
	r0, r1 := m.AddOrgsOpenBetaStatsFunc.nextHook()(v0, v1, v2)
	m.AddOrgsOpenBetaStatsFunc.appendCall(OrgStoreAddOrgsOpenBetaStatsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the AddOrgsOpenBetaStats
// method of the parent MockOrgStore instance is invoked and the hook queue
// is empty.
func (f *OrgStoreAddOrgsOpenBetaStatsFunc) SetDefaultHook(hook func(context.Context, int32, string) (string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AddOrgsOpenBetaStats method of the parent MockOrgStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *OrgStoreAddOrgsOpenBetaStatsFunc) PushHook(hook func(context.Context, int32, string) (string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgStoreAddOrgsOpenBetaStatsFunc) SetDefaultReturn(r0 string, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, string) (string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgStoreAddOrgsOpenBetaStatsFunc) PushReturn(r0 string, r1 error) {
	f.PushHook(func(context.Context, int32, string) (string, error) {
		return r0, r1
	})
}

func (f *OrgStoreAddOrgsOpenBetaStatsFunc) nextHook() func(context.Context, int32, string) (string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreAddOrgsOpenBetaStatsFunc) appendCall(r0 OrgStoreAddOrgsOpenBetaStatsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreAddOrgsOpenBetaStatsFuncCall
// objects describing the invocations of this function.
func (f *OrgStoreAddOrgsOpenBetaStatsFunc) History() []OrgStoreAddOrgsOpenBetaStatsFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreAddOrgsOpenBetaStatsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreAddOrgsOpenBetaStatsFuncCall is an object that describes an
// invocation of method AddOrgsOpenBetaStats on an instance of MockOrgStore.
type OrgStoreAddOrgsOpenBetaStatsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreAddOrgsOpenBetaStatsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreAddOrgsOpenBetaStatsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgStoreCountFunc describes the behavior when the Count method of the
// parent MockOrgStore instance is invoked.
type OrgStoreCountFunc struct {
	defaultHook func(context.Context, OrgsListOptions) (int, error)
	hooks       []func(context.Context, OrgsListOptions) (int, error)
	history     []OrgStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgStore) Count(v0 context.Context, v1 OrgsListOptions) (int, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(OrgStoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockOrgStore instance is invoked and the hook queue is empty.
func (f *OrgStoreCountFunc) SetDefaultHook(hook func(context.Context, OrgsListOptions) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockOrgStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *OrgStoreCountFunc) PushHook(hook func(context.Context, OrgsListOptions) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgStoreCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, OrgsListOptions) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgStoreCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, OrgsListOptions) (int, error) {
		return r0, r1
	})
}

func (f *OrgStoreCountFunc) nextHook() func(context.Context, OrgsListOptions) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreCountFunc) appendCall(r0 OrgStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreCountFuncCall objects describing
// the invocations of this function.
func (f *OrgStoreCountFunc) History() []OrgStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreCountFuncCall is an object that describes an invocation of method
// Count on an instance of MockOrgStore.
type OrgStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 OrgsListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgStoreCreateFunc describes the behavior when the Create method of the
// parent MockOrgStore instance is invoked.
type OrgStoreCreateFunc struct {
	defaultHook func(context.Context, string, *string) (*types.Org, error)
	hooks       []func(context.Context, string, *string) (*types.Org, error)
	history     []OrgStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgStore) Create(v0 context.Context, v1 string, v2 *string) (*types.Org, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1, v2)
	m.CreateFunc.appendCall(OrgStoreCreateFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockOrgStore instance is invoked and the hook queue is empty.
func (f *OrgStoreCreateFunc) SetDefaultHook(hook func(context.Context, string, *string) (*types.Org, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockOrgStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *OrgStoreCreateFunc) PushHook(hook func(context.Context, string, *string) (*types.Org, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgStoreCreateFunc) SetDefaultReturn(r0 *types.Org, r1 error) {
	f.SetDefaultHook(func(context.Context, string, *string) (*types.Org, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgStoreCreateFunc) PushReturn(r0 *types.Org, r1 error) {
	f.PushHook(func(context.Context, string, *string) (*types.Org, error) {
		return r0, r1
	})
}

func (f *OrgStoreCreateFunc) nextHook() func(context.Context, string, *string) (*types.Org, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreCreateFunc) appendCall(r0 OrgStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreCreateFuncCall objects describing
// the invocations of this function.
func (f *OrgStoreCreateFunc) History() []OrgStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreCreateFuncCall is an object that describes an invocation of
// method Create on an instance of MockOrgStore.
type OrgStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Org
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgStoreDeleteFunc describes the behavior when the Delete method of the
// parent MockOrgStore instance is invoked.
type OrgStoreDeleteFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []OrgStoreDeleteFuncCall
	mutex       sync.Mutex
}

// Delete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgStore) Delete(v0 context.Context, v1 int32) error {
	r0 := m.DeleteFunc.nextHook()(v0, v1)
	m.DeleteFunc.appendCall(OrgStoreDeleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Delete method of the
// parent MockOrgStore instance is invoked and the hook queue is empty.
func (f *OrgStoreDeleteFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Delete method of the parent MockOrgStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *OrgStoreDeleteFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgStoreDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgStoreDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *OrgStoreDeleteFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreDeleteFunc) appendCall(r0 OrgStoreDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreDeleteFuncCall objects describing
// the invocations of this function.
func (f *OrgStoreDeleteFunc) History() []OrgStoreDeleteFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreDeleteFuncCall is an object that describes an invocation of
// method Delete on an instance of MockOrgStore.
type OrgStoreDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OrgStoreDoneFunc describes the behavior when the Done method of the
// parent MockOrgStore instance is invoked.
type OrgStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []OrgStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(OrgStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockOrgStore instance is invoked and the hook queue is empty.
func (f *OrgStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockOrgStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *OrgStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *OrgStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreDoneFunc) appendCall(r0 OrgStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreDoneFuncCall objects describing the
// invocations of this function.
func (f *OrgStoreDoneFunc) History() []OrgStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreDoneFuncCall is an object that describes an invocation of method
// Done on an instance of MockOrgStore.
type OrgStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OrgStoreGetByIDFunc describes the behavior when the GetByID method of the
// parent MockOrgStore instance is invoked.
type OrgStoreGetByIDFunc struct {
	defaultHook func(context.Context, int32) (*types.Org, error)
	hooks       []func(context.Context, int32) (*types.Org, error)
	history     []OrgStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgStore) GetByID(v0 context.Context, v1 int32) (*types.Org, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(OrgStoreGetByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockOrgStore instance is invoked and the hook queue is empty.
func (f *OrgStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int32) (*types.Org, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockOrgStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *OrgStoreGetByIDFunc) PushHook(hook func(context.Context, int32) (*types.Org, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgStoreGetByIDFunc) SetDefaultReturn(r0 *types.Org, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (*types.Org, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgStoreGetByIDFunc) PushReturn(r0 *types.Org, r1 error) {
	f.PushHook(func(context.Context, int32) (*types.Org, error) {
		return r0, r1
	})
}

func (f *OrgStoreGetByIDFunc) nextHook() func(context.Context, int32) (*types.Org, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreGetByIDFunc) appendCall(r0 OrgStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreGetByIDFuncCall objects describing
// the invocations of this function.
func (f *OrgStoreGetByIDFunc) History() []OrgStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreGetByIDFuncCall is an object that describes an invocation of
// method GetByID on an instance of MockOrgStore.
type OrgStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Org
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgStoreGetByNameFunc describes the behavior when the GetByName method of
// the parent MockOrgStore instance is invoked.
type OrgStoreGetByNameFunc struct {
	defaultHook func(context.Context, string) (*types.Org, error)
	hooks       []func(context.Context, string) (*types.Org, error)
	history     []OrgStoreGetByNameFuncCall
	mutex       sync.Mutex
}

// GetByName delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgStore) GetByName(v0 context.Context, v1 string) (*types.Org, error) {
	r0, r1 := m.GetByNameFunc.nextHook()(v0, v1)
	m.GetByNameFunc.appendCall(OrgStoreGetByNameFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByName method of
// the parent MockOrgStore instance is invoked and the hook queue is empty.
func (f *OrgStoreGetByNameFunc) SetDefaultHook(hook func(context.Context, string) (*types.Org, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByName method of the parent MockOrgStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *OrgStoreGetByNameFunc) PushHook(hook func(context.Context, string) (*types.Org, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgStoreGetByNameFunc) SetDefaultReturn(r0 *types.Org, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*types.Org, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgStoreGetByNameFunc) PushReturn(r0 *types.Org, r1 error) {
	f.PushHook(func(context.Context, string) (*types.Org, error) {
		return r0, r1
	})
}

func (f *OrgStoreGetByNameFunc) nextHook() func(context.Context, string) (*types.Org, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreGetByNameFunc) appendCall(r0 OrgStoreGetByNameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreGetByNameFuncCall objects
// describing the invocations of this function.
func (f *OrgStoreGetByNameFunc) History() []OrgStoreGetByNameFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreGetByNameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreGetByNameFuncCall is an object that describes an invocation of
// method GetByName on an instance of MockOrgStore.
type OrgStoreGetByNameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Org
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreGetByNameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreGetByNameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgStoreGetByUserIDFunc describes the behavior when the GetByUserID
// method of the parent MockOrgStore instance is invoked.
type OrgStoreGetByUserIDFunc struct {
	defaultHook func(context.Context, int32) ([]*types.Org, error)
	hooks       []func(context.Context, int32) ([]*types.Org, error)
	history     []OrgStoreGetByUserIDFuncCall
	mutex       sync.Mutex
}

// GetByUserID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockOrgStore) GetByUserID(v0 context.Context, v1 int32) ([]*types.Org, error) {
	r0, r1 := m.GetByUserIDFunc.nextHook()(v0, v1)
	m.GetByUserIDFunc.appendCall(OrgStoreGetByUserIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByUserID method
// of the parent MockOrgStore instance is invoked and the hook queue is
// empty.
func (f *OrgStoreGetByUserIDFunc) SetDefaultHook(hook func(context.Context, int32) ([]*types.Org, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByUserID method of the parent MockOrgStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *OrgStoreGetByUserIDFunc) PushHook(hook func(context.Context, int32) ([]*types.Org, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgStoreGetByUserIDFunc) SetDefaultReturn(r0 []*types.Org, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) ([]*types.Org, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgStoreGetByUserIDFunc) PushReturn(r0 []*types.Org, r1 error) {
	f.PushHook(func(context.Context, int32) ([]*types.Org, error) {
		return r0, r1
	})
}

func (f *OrgStoreGetByUserIDFunc) nextHook() func(context.Context, int32) ([]*types.Org, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreGetByUserIDFunc) appendCall(r0 OrgStoreGetByUserIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreGetByUserIDFuncCall objects
// describing the invocations of this function.
func (f *OrgStoreGetByUserIDFunc) History() []OrgStoreGetByUserIDFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreGetByUserIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreGetByUserIDFuncCall is an object that describes an invocation of
// method GetByUserID on an instance of MockOrgStore.
type OrgStoreGetByUserIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.Org
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreGetByUserIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreGetByUserIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgStoreHandleFunc describes the behavior when the Handle method of the
// parent MockOrgStore instance is invoked.
type OrgStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []OrgStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(OrgStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockOrgStore instance is invoked and the hook queue is empty.
func (f *OrgStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockOrgStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *OrgStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *OrgStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreHandleFunc) appendCall(r0 OrgStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreHandleFuncCall objects describing
// the invocations of this function.
func (f *OrgStoreHandleFunc) History() []OrgStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreHandleFuncCall is an object that describes an invocation of
// method Handle on an instance of MockOrgStore.
type OrgStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OrgStoreHardDeleteFunc describes the behavior when the HardDelete method
// of the parent MockOrgStore instance is invoked.
type OrgStoreHardDeleteFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []OrgStoreHardDeleteFuncCall
	mutex       sync.Mutex
}

// HardDelete delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockOrgStore) HardDelete(v0 context.Context, v1 int32) error {
	r0 := m.HardDeleteFunc.nextHook()(v0, v1)
	m.HardDeleteFunc.appendCall(OrgStoreHardDeleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the HardDelete method of
// the parent MockOrgStore instance is invoked and the hook queue is empty.
func (f *OrgStoreHardDeleteFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// HardDelete method of the parent MockOrgStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *OrgStoreHardDeleteFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgStoreHardDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgStoreHardDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *OrgStoreHardDeleteFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreHardDeleteFunc) appendCall(r0 OrgStoreHardDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreHardDeleteFuncCall objects
// describing the invocations of this function.
func (f *OrgStoreHardDeleteFunc) History() []OrgStoreHardDeleteFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreHardDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreHardDeleteFuncCall is an object that describes an invocation of
// method HardDelete on an instance of MockOrgStore.
type OrgStoreHardDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreHardDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreHardDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OrgStoreListFunc describes the behavior when the List method of the
// parent MockOrgStore instance is invoked.
type OrgStoreListFunc struct {
	defaultHook func(context.Context, *OrgsListOptions) ([]*types.Org, error)
	hooks       []func(context.Context, *OrgsListOptions) ([]*types.Org, error)
	history     []OrgStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgStore) List(v0 context.Context, v1 *OrgsListOptions) ([]*types.Org, error) {
	r0, r1 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(OrgStoreListFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockOrgStore instance is invoked and the hook queue is empty.
func (f *OrgStoreListFunc) SetDefaultHook(hook func(context.Context, *OrgsListOptions) ([]*types.Org, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockOrgStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *OrgStoreListFunc) PushHook(hook func(context.Context, *OrgsListOptions) ([]*types.Org, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgStoreListFunc) SetDefaultReturn(r0 []*types.Org, r1 error) {
	f.SetDefaultHook(func(context.Context, *OrgsListOptions) ([]*types.Org, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgStoreListFunc) PushReturn(r0 []*types.Org, r1 error) {
	f.PushHook(func(context.Context, *OrgsListOptions) ([]*types.Org, error) {
		return r0, r1
	})
}

func (f *OrgStoreListFunc) nextHook() func(context.Context, *OrgsListOptions) ([]*types.Org, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreListFunc) appendCall(r0 OrgStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreListFuncCall objects describing the
// invocations of this function.
func (f *OrgStoreListFunc) History() []OrgStoreListFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreListFuncCall is an object that describes an invocation of method
// List on an instance of MockOrgStore.
type OrgStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *OrgsListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.Org
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgStoreTransactFunc describes the behavior when the Transact method of
// the parent MockOrgStore instance is invoked.
type OrgStoreTransactFunc struct {
	defaultHook func(context.Context) (OrgStore, error)
	hooks       []func(context.Context) (OrgStore, error)
	history     []OrgStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgStore) Transact(v0 context.Context) (OrgStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(OrgStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockOrgStore instance is invoked and the hook queue is empty.
func (f *OrgStoreTransactFunc) SetDefaultHook(hook func(context.Context) (OrgStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockOrgStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *OrgStoreTransactFunc) PushHook(hook func(context.Context) (OrgStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgStoreTransactFunc) SetDefaultReturn(r0 OrgStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (OrgStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgStoreTransactFunc) PushReturn(r0 OrgStore, r1 error) {
	f.PushHook(func(context.Context) (OrgStore, error) {
		return r0, r1
	})
}

func (f *OrgStoreTransactFunc) nextHook() func(context.Context) (OrgStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreTransactFunc) appendCall(r0 OrgStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreTransactFuncCall objects describing
// the invocations of this function.
func (f *OrgStoreTransactFunc) History() []OrgStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreTransactFuncCall is an object that describes an invocation of
// method Transact on an instance of MockOrgStore.
type OrgStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 OrgStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgStoreUpdateFunc describes the behavior when the Update method of the
// parent MockOrgStore instance is invoked.
type OrgStoreUpdateFunc struct {
	defaultHook func(context.Context, int32, *string) (*types.Org, error)
	hooks       []func(context.Context, int32, *string) (*types.Org, error)
	history     []OrgStoreUpdateFuncCall
	mutex       sync.Mutex
}

// Update delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgStore) Update(v0 context.Context, v1 int32, v2 *string) (*types.Org, error) {
	r0, r1 := m.UpdateFunc.nextHook()(v0, v1, v2)
	m.UpdateFunc.appendCall(OrgStoreUpdateFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Update method of the
// parent MockOrgStore instance is invoked and the hook queue is empty.
func (f *OrgStoreUpdateFunc) SetDefaultHook(hook func(context.Context, int32, *string) (*types.Org, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Update method of the parent MockOrgStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *OrgStoreUpdateFunc) PushHook(hook func(context.Context, int32, *string) (*types.Org, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgStoreUpdateFunc) SetDefaultReturn(r0 *types.Org, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, *string) (*types.Org, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgStoreUpdateFunc) PushReturn(r0 *types.Org, r1 error) {
	f.PushHook(func(context.Context, int32, *string) (*types.Org, error) {
		return r0, r1
	})
}

func (f *OrgStoreUpdateFunc) nextHook() func(context.Context, int32, *string) (*types.Org, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreUpdateFunc) appendCall(r0 OrgStoreUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreUpdateFuncCall objects describing
// the invocations of this function.
func (f *OrgStoreUpdateFunc) History() []OrgStoreUpdateFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreUpdateFuncCall is an object that describes an invocation of
// method Update on an instance of MockOrgStore.
type OrgStoreUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Org
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OrgStoreUpdateOrgsOpenBetaStatsFunc describes the behavior when the
// UpdateOrgsOpenBetaStats method of the parent MockOrgStore instance is
// invoked.
type OrgStoreUpdateOrgsOpenBetaStatsFunc struct {
	defaultHook func(context.Context, string, int32) error
	hooks       []func(context.Context, string, int32) error
	history     []OrgStoreUpdateOrgsOpenBetaStatsFuncCall
	mutex       sync.Mutex
}

// UpdateOrgsOpenBetaStats delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockOrgStore) UpdateOrgsOpenBetaStats(v0 context.Context, v1 string, v2 int32) error {
	r0 := m.UpdateOrgsOpenBetaStatsFunc.nextHook()(v0, v1, v2)
	m.UpdateOrgsOpenBetaStatsFunc.appendCall(OrgStoreUpdateOrgsOpenBetaStatsFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// UpdateOrgsOpenBetaStats method of the parent MockOrgStore instance is
// invoked and the hook queue is empty.
func (f *OrgStoreUpdateOrgsOpenBetaStatsFunc) SetDefaultHook(hook func(context.Context, string, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateOrgsOpenBetaStats method of the parent MockOrgStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *OrgStoreUpdateOrgsOpenBetaStatsFunc) PushHook(hook func(context.Context, string, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgStoreUpdateOrgsOpenBetaStatsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string, int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgStoreUpdateOrgsOpenBetaStatsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string, int32) error {
		return r0
	})
}

func (f *OrgStoreUpdateOrgsOpenBetaStatsFunc) nextHook() func(context.Context, string, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreUpdateOrgsOpenBetaStatsFunc) appendCall(r0 OrgStoreUpdateOrgsOpenBetaStatsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreUpdateOrgsOpenBetaStatsFuncCall
// objects describing the invocations of this function.
func (f *OrgStoreUpdateOrgsOpenBetaStatsFunc) History() []OrgStoreUpdateOrgsOpenBetaStatsFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreUpdateOrgsOpenBetaStatsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreUpdateOrgsOpenBetaStatsFuncCall is an object that describes an
// invocation of method UpdateOrgsOpenBetaStats on an instance of
// MockOrgStore.
type OrgStoreUpdateOrgsOpenBetaStatsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreUpdateOrgsOpenBetaStatsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreUpdateOrgsOpenBetaStatsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OrgStoreWithFunc describes the behavior when the With method of the
// parent MockOrgStore instance is invoked.
type OrgStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) OrgStore
	hooks       []func(basestore.ShareableStore) OrgStore
	history     []OrgStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOrgStore) With(v0 basestore.ShareableStore) OrgStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(OrgStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockOrgStore instance is invoked and the hook queue is empty.
func (f *OrgStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) OrgStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockOrgStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *OrgStoreWithFunc) PushHook(hook func(basestore.ShareableStore) OrgStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OrgStoreWithFunc) SetDefaultReturn(r0 OrgStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) OrgStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OrgStoreWithFunc) PushReturn(r0 OrgStore) {
	f.PushHook(func(basestore.ShareableStore) OrgStore {
		return r0
	})
}

func (f *OrgStoreWithFunc) nextHook() func(basestore.ShareableStore) OrgStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OrgStoreWithFunc) appendCall(r0 OrgStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OrgStoreWithFuncCall objects describing the
// invocations of this function.
func (f *OrgStoreWithFunc) History() []OrgStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]OrgStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OrgStoreWithFuncCall is an object that describes an invocation of method
// With on an instance of MockOrgStore.
type OrgStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 OrgStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OrgStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OrgStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockOutboundWebhookJobStore is a mock implementation of the
// OutboundWebhookJobStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockOutboundWebhookJobStore struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *OutboundWebhookJobStoreCreateFunc
	// DeleteBeforeFunc is an instance of a mock function object controlling
	// the behavior of the method DeleteBefore.
	DeleteBeforeFunc *OutboundWebhookJobStoreDeleteBeforeFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *OutboundWebhookJobStoreDoneFunc
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *OutboundWebhookJobStoreGetByIDFunc
	// GetLastFunc is an instance of a mock function object controlling the
	// behavior of the method GetLast.
	GetLastFunc *OutboundWebhookJobStoreGetLastFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *OutboundWebhookJobStoreHandleFunc
	// QueryFunc is an instance of a mock function object controlling the
	// behavior of the method Query.
	QueryFunc *OutboundWebhookJobStoreQueryFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *OutboundWebhookJobStoreWithFunc
	// WithTransactFunc is an instance of a mock function object controlling
	// the behavior of the method WithTransact.
	WithTransactFunc *OutboundWebhookJobStoreWithTransactFunc
}

// NewMockOutboundWebhookJobStore creates a new mock of the
// OutboundWebhookJobStore interface. All methods return zero values for all
// results, unless overwritten.
func NewMockOutboundWebhookJobStore() *MockOutboundWebhookJobStore {
	return &MockOutboundWebhookJobStore{
		CreateFunc: &OutboundWebhookJobStoreCreateFunc{
			defaultHook: func(context.Context, string, *string, []byte) (r0 *types.OutboundWebhookJob, r1 error) {
				return
			},
		},
		DeleteBeforeFunc: &OutboundWebhookJobStoreDeleteBeforeFunc{
			defaultHook: func(context.Context, time.Time) (r0 error) {
				return
			},
		},
		DoneFunc: &OutboundWebhookJobStoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		GetByIDFunc: &OutboundWebhookJobStoreGetByIDFunc{
			defaultHook: func(context.Context, int64) (r0 *types.OutboundWebhookJob, r1 error) {
				return
			},
		},
		GetLastFunc: &OutboundWebhookJobStoreGetLastFunc{
			defaultHook: func(context.Context) (r0 *types.OutboundWebhookJob, r1 error) {
				return
			},
		},
		HandleFunc: &OutboundWebhookJobStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		QueryFunc: &OutboundWebhookJobStoreQueryFunc{
			defaultHook: func(context.Context, *sqlf.Query) (r0 *sql.Rows, r1 error) {
				return
			},
		},
		WithFunc: &OutboundWebhookJobStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 OutboundWebhookJobStore) {
				return
			},
		},
		WithTransactFunc: &OutboundWebhookJobStoreWithTransactFunc{
			defaultHook: func(context.Context, func(OutboundWebhookJobStore) error) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockOutboundWebhookJobStore creates a new mock of the
// OutboundWebhookJobStore interface. All methods panic on invocation,
// unless overwritten.
func NewStrictMockOutboundWebhookJobStore() *MockOutboundWebhookJobStore {
	return &MockOutboundWebhookJobStore{
		CreateFunc: &OutboundWebhookJobStoreCreateFunc{
			defaultHook: func(context.Context, string, *string, []byte) (*types.OutboundWebhookJob, error) {
				panic("unexpected invocation of MockOutboundWebhookJobStore.Create")
			},
		},
		DeleteBeforeFunc: &OutboundWebhookJobStoreDeleteBeforeFunc{
			defaultHook: func(context.Context, time.Time) error {
				panic("unexpected invocation of MockOutboundWebhookJobStore.DeleteBefore")
			},
		},
		DoneFunc: &OutboundWebhookJobStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockOutboundWebhookJobStore.Done")
			},
		},
		GetByIDFunc: &OutboundWebhookJobStoreGetByIDFunc{
			defaultHook: func(context.Context, int64) (*types.OutboundWebhookJob, error) {
				panic("unexpected invocation of MockOutboundWebhookJobStore.GetByID")
			},
		},
		GetLastFunc: &OutboundWebhookJobStoreGetLastFunc{
			defaultHook: func(context.Context) (*types.OutboundWebhookJob, error) {
				panic("unexpected invocation of MockOutboundWebhookJobStore.GetLast")
			},
		},
		HandleFunc: &OutboundWebhookJobStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockOutboundWebhookJobStore.Handle")
			},
		},
		QueryFunc: &OutboundWebhookJobStoreQueryFunc{
			defaultHook: func(context.Context, *sqlf.Query) (*sql.Rows, error) {
				panic("unexpected invocation of MockOutboundWebhookJobStore.Query")
			},
		},
		WithFunc: &OutboundWebhookJobStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) OutboundWebhookJobStore {
				panic("unexpected invocation of MockOutboundWebhookJobStore.With")
			},
		},
		WithTransactFunc: &OutboundWebhookJobStoreWithTransactFunc{
			defaultHook: func(context.Context, func(OutboundWebhookJobStore) error) error {
				panic("unexpected invocation of MockOutboundWebhookJobStore.WithTransact")
			},
		},
	}
}

// NewMockOutboundWebhookJobStoreFrom creates a new mock of the
// MockOutboundWebhookJobStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockOutboundWebhookJobStoreFrom(i OutboundWebhookJobStore) *MockOutboundWebhookJobStore {
	return &MockOutboundWebhookJobStore{
		CreateFunc: &OutboundWebhookJobStoreCreateFunc{
			defaultHook: i.Create,
		},
		DeleteBeforeFunc: &OutboundWebhookJobStoreDeleteBeforeFunc{
			defaultHook: i.DeleteBefore,
		},
		DoneFunc: &OutboundWebhookJobStoreDoneFunc{
			defaultHook: i.Done,
		},
		GetByIDFunc: &OutboundWebhookJobStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		GetLastFunc: &OutboundWebhookJobStoreGetLastFunc{
			defaultHook: i.GetLast,
		},
		HandleFunc: &OutboundWebhookJobStoreHandleFunc{
			defaultHook: i.Handle,
		},
		QueryFunc: &OutboundWebhookJobStoreQueryFunc{
			defaultHook: i.Query,
		},
		WithFunc: &OutboundWebhookJobStoreWithFunc{
			defaultHook: i.With,
		},
		WithTransactFunc: &OutboundWebhookJobStoreWithTransactFunc{
			defaultHook: i.WithTransact,
		},
	}
}

// OutboundWebhookJobStoreCreateFunc describes the behavior when the Create
// method of the parent MockOutboundWebhookJobStore instance is invoked.
type OutboundWebhookJobStoreCreateFunc struct {
	defaultHook func(context.Context, string, *string, []byte) (*types.OutboundWebhookJob, error)
	hooks       []func(context.Context, string, *string, []byte) (*types.OutboundWebhookJob, error)
	history     []OutboundWebhookJobStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOutboundWebhookJobStore) Create(v0 context.Context, v1 string, v2 *string, v3 []byte) (*types.OutboundWebhookJob, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1, v2, v3)
	m.CreateFunc.appendCall(OutboundWebhookJobStoreCreateFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockOutboundWebhookJobStore instance is invoked and the hook queue
// is empty.
func (f *OutboundWebhookJobStoreCreateFunc) SetDefaultHook(hook func(context.Context, string, *string, []byte) (*types.OutboundWebhookJob, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockOutboundWebhookJobStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *OutboundWebhookJobStoreCreateFunc) PushHook(hook func(context.Context, string, *string, []byte) (*types.OutboundWebhookJob, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OutboundWebhookJobStoreCreateFunc) SetDefaultReturn(r0 *types.OutboundWebhookJob, r1 error) {
	f.SetDefaultHook(func(context.Context, string, *string, []byte) (*types.OutboundWebhookJob, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OutboundWebhookJobStoreCreateFunc) PushReturn(r0 *types.OutboundWebhookJob, r1 error) {
	f.PushHook(func(context.Context, string, *string, []byte) (*types.OutboundWebhookJob, error) {
		return r0, r1
	})
}

func (f *OutboundWebhookJobStoreCreateFunc) nextHook() func(context.Context, string, *string, []byte) (*types.OutboundWebhookJob, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OutboundWebhookJobStoreCreateFunc) appendCall(r0 OutboundWebhookJobStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OutboundWebhookJobStoreCreateFuncCall
// objects describing the invocations of this function.
func (f *OutboundWebhookJobStoreCreateFunc) History() []OutboundWebhookJobStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]OutboundWebhookJobStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OutboundWebhookJobStoreCreateFuncCall is an object that describes an
// invocation of method Create on an instance of
// MockOutboundWebhookJobStore.
type OutboundWebhookJobStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []byte
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.OutboundWebhookJob
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OutboundWebhookJobStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OutboundWebhookJobStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OutboundWebhookJobStoreDeleteBeforeFunc describes the behavior when the
// DeleteBefore method of the parent MockOutboundWebhookJobStore instance is
// invoked.
type OutboundWebhookJobStoreDeleteBeforeFunc struct {
	defaultHook func(context.Context, time.Time) error
	hooks       []func(context.Context, time.Time) error
	history     []OutboundWebhookJobStoreDeleteBeforeFuncCall
	mutex       sync.Mutex
}

// DeleteBefore delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockOutboundWebhookJobStore) DeleteBefore(v0 context.Context, v1 time.Time) error {
	r0 := m.DeleteBeforeFunc.nextHook()(v0, v1)
	m.DeleteBeforeFunc.appendCall(OutboundWebhookJobStoreDeleteBeforeFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteBefore method
// of the parent MockOutboundWebhookJobStore instance is invoked and the
// hook queue is empty.
func (f *OutboundWebhookJobStoreDeleteBeforeFunc) SetDefaultHook(hook func(context.Context, time.Time) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteBefore method of the parent MockOutboundWebhookJobStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *OutboundWebhookJobStoreDeleteBeforeFunc) PushHook(hook func(context.Context, time.Time) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OutboundWebhookJobStoreDeleteBeforeFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, time.Time) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OutboundWebhookJobStoreDeleteBeforeFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, time.Time) error {
		return r0
	})
}

func (f *OutboundWebhookJobStoreDeleteBeforeFunc) nextHook() func(context.Context, time.Time) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OutboundWebhookJobStoreDeleteBeforeFunc) appendCall(r0 OutboundWebhookJobStoreDeleteBeforeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OutboundWebhookJobStoreDeleteBeforeFuncCall
// objects describing the invocations of this function.
func (f *OutboundWebhookJobStoreDeleteBeforeFunc) History() []OutboundWebhookJobStoreDeleteBeforeFuncCall {
	f.mutex.Lock()
	history := make([]OutboundWebhookJobStoreDeleteBeforeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OutboundWebhookJobStoreDeleteBeforeFuncCall is an object that describes
// an invocation of method DeleteBefore on an instance of
// MockOutboundWebhookJobStore.
type OutboundWebhookJobStoreDeleteBeforeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OutboundWebhookJobStoreDeleteBeforeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OutboundWebhookJobStoreDeleteBeforeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OutboundWebhookJobStoreDoneFunc describes the behavior when the Done
// method of the parent MockOutboundWebhookJobStore instance is invoked.
type OutboundWebhookJobStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []OutboundWebhookJobStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOutboundWebhookJobStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(OutboundWebhookJobStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockOutboundWebhookJobStore instance is invoked and the hook queue
// is empty.
func (f *OutboundWebhookJobStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockOutboundWebhookJobStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *OutboundWebhookJobStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OutboundWebhookJobStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OutboundWebhookJobStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *OutboundWebhookJobStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OutboundWebhookJobStoreDoneFunc) appendCall(r0 OutboundWebhookJobStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OutboundWebhookJobStoreDoneFuncCall objects
// describing the invocations of this function.
func (f *OutboundWebhookJobStoreDoneFunc) History() []OutboundWebhookJobStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]OutboundWebhookJobStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OutboundWebhookJobStoreDoneFuncCall is an object that describes an
// invocation of method Done on an instance of MockOutboundWebhookJobStore.
type OutboundWebhookJobStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OutboundWebhookJobStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OutboundWebhookJobStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OutboundWebhookJobStoreGetByIDFunc describes the behavior when the
// GetByID method of the parent MockOutboundWebhookJobStore instance is
// invoked.
type OutboundWebhookJobStoreGetByIDFunc struct {
	defaultHook func(context.Context, int64) (*types.OutboundWebhookJob, error)
	hooks       []func(context.Context, int64) (*types.OutboundWebhookJob, error)
	history     []OutboundWebhookJobStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOutboundWebhookJobStore) GetByID(v0 context.Context, v1 int64) (*types.OutboundWebhookJob, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(OutboundWebhookJobStoreGetByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockOutboundWebhookJobStore instance is invoked and the hook
// queue is empty.
func (f *OutboundWebhookJobStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int64) (*types.OutboundWebhookJob, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockOutboundWebhookJobStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *OutboundWebhookJobStoreGetByIDFunc) PushHook(hook func(context.Context, int64) (*types.OutboundWebhookJob, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OutboundWebhookJobStoreGetByIDFunc) SetDefaultReturn(r0 *types.OutboundWebhookJob, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (*types.OutboundWebhookJob, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OutboundWebhookJobStoreGetByIDFunc) PushReturn(r0 *types.OutboundWebhookJob, r1 error) {
	f.PushHook(func(context.Context, int64) (*types.OutboundWebhookJob, error) {
		return r0, r1
	})
}

func (f *OutboundWebhookJobStoreGetByIDFunc) nextHook() func(context.Context, int64) (*types.OutboundWebhookJob, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OutboundWebhookJobStoreGetByIDFunc) appendCall(r0 OutboundWebhookJobStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OutboundWebhookJobStoreGetByIDFuncCall
// objects describing the invocations of this function.
func (f *OutboundWebhookJobStoreGetByIDFunc) History() []OutboundWebhookJobStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]OutboundWebhookJobStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OutboundWebhookJobStoreGetByIDFuncCall is an object that describes an
// invocation of method GetByID on an instance of
// MockOutboundWebhookJobStore.
type OutboundWebhookJobStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.OutboundWebhookJob
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OutboundWebhookJobStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OutboundWebhookJobStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OutboundWebhookJobStoreGetLastFunc describes the behavior when the
// GetLast method of the parent MockOutboundWebhookJobStore instance is
// invoked.
type OutboundWebhookJobStoreGetLastFunc struct {
	defaultHook func(context.Context) (*types.OutboundWebhookJob, error)
	hooks       []func(context.Context) (*types.OutboundWebhookJob, error)
	history     []OutboundWebhookJobStoreGetLastFuncCall
	mutex       sync.Mutex
}

// GetLast delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOutboundWebhookJobStore) GetLast(v0 context.Context) (*types.OutboundWebhookJob, error) {
	r0, r1 := m.GetLastFunc.nextHook()(v0)
	m.GetLastFunc.appendCall(OutboundWebhookJobStoreGetLastFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetLast method of
// the parent MockOutboundWebhookJobStore instance is invoked and the hook
// queue is empty.
func (f *OutboundWebhookJobStoreGetLastFunc) SetDefaultHook(hook func(context.Context) (*types.OutboundWebhookJob, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLast method of the parent MockOutboundWebhookJobStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *OutboundWebhookJobStoreGetLastFunc) PushHook(hook func(context.Context) (*types.OutboundWebhookJob, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OutboundWebhookJobStoreGetLastFunc) SetDefaultReturn(r0 *types.OutboundWebhookJob, r1 error) {
	f.SetDefaultHook(func(context.Context) (*types.OutboundWebhookJob, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OutboundWebhookJobStoreGetLastFunc) PushReturn(r0 *types.OutboundWebhookJob, r1 error) {
	f.PushHook(func(context.Context) (*types.OutboundWebhookJob, error) {
		return r0, r1
	})
}

func (f *OutboundWebhookJobStoreGetLastFunc) nextHook() func(context.Context) (*types.OutboundWebhookJob, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OutboundWebhookJobStoreGetLastFunc) appendCall(r0 OutboundWebhookJobStoreGetLastFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OutboundWebhookJobStoreGetLastFuncCall
// objects describing the invocations of this function.
func (f *OutboundWebhookJobStoreGetLastFunc) History() []OutboundWebhookJobStoreGetLastFuncCall {
	f.mutex.Lock()
	history := make([]OutboundWebhookJobStoreGetLastFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OutboundWebhookJobStoreGetLastFuncCall is an object that describes an
// invocation of method GetLast on an instance of
// MockOutboundWebhookJobStore.
type OutboundWebhookJobStoreGetLastFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.OutboundWebhookJob
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OutboundWebhookJobStoreGetLastFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OutboundWebhookJobStoreGetLastFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OutboundWebhookJobStoreHandleFunc describes the behavior when the Handle
// method of the parent MockOutboundWebhookJobStore instance is invoked.
type OutboundWebhookJobStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []OutboundWebhookJobStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOutboundWebhookJobStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(OutboundWebhookJobStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockOutboundWebhookJobStore instance is invoked and the hook queue
// is empty.
func (f *OutboundWebhookJobStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockOutboundWebhookJobStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *OutboundWebhookJobStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OutboundWebhookJobStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OutboundWebhookJobStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *OutboundWebhookJobStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OutboundWebhookJobStoreHandleFunc) appendCall(r0 OutboundWebhookJobStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OutboundWebhookJobStoreHandleFuncCall
// objects describing the invocations of this function.
func (f *OutboundWebhookJobStoreHandleFunc) History() []OutboundWebhookJobStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]OutboundWebhookJobStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OutboundWebhookJobStoreHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of
// MockOutboundWebhookJobStore.
type OutboundWebhookJobStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OutboundWebhookJobStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OutboundWebhookJobStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OutboundWebhookJobStoreQueryFunc describes the behavior when the Query
// method of the parent MockOutboundWebhookJobStore instance is invoked.
type OutboundWebhookJobStoreQueryFunc struct {
	defaultHook func(context.Context, *sqlf.Query) (*sql.Rows, error)
	hooks       []func(context.Context, *sqlf.Query) (*sql.Rows, error)
	history     []OutboundWebhookJobStoreQueryFuncCall
	mutex       sync.Mutex
}

// Query delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOutboundWebhookJobStore) Query(v0 context.Context, v1 *sqlf.Query) (*sql.Rows, error) {
	r0, r1 := m.QueryFunc.nextHook()(v0, v1)
	m.QueryFunc.appendCall(OutboundWebhookJobStoreQueryFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Query method of the
// parent MockOutboundWebhookJobStore instance is invoked and the hook queue
// is empty.
func (f *OutboundWebhookJobStoreQueryFunc) SetDefaultHook(hook func(context.Context, *sqlf.Query) (*sql.Rows, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Query method of the parent MockOutboundWebhookJobStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *OutboundWebhookJobStoreQueryFunc) PushHook(hook func(context.Context, *sqlf.Query) (*sql.Rows, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OutboundWebhookJobStoreQueryFunc) SetDefaultReturn(r0 *sql.Rows, r1 error) {
	f.SetDefaultHook(func(context.Context, *sqlf.Query) (*sql.Rows, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OutboundWebhookJobStoreQueryFunc) PushReturn(r0 *sql.Rows, r1 error) {
	f.PushHook(func(context.Context, *sqlf.Query) (*sql.Rows, error) {
		return r0, r1
	})
}

func (f *OutboundWebhookJobStoreQueryFunc) nextHook() func(context.Context, *sqlf.Query) (*sql.Rows, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OutboundWebhookJobStoreQueryFunc) appendCall(r0 OutboundWebhookJobStoreQueryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OutboundWebhookJobStoreQueryFuncCall
// objects describing the invocations of this function.
func (f *OutboundWebhookJobStoreQueryFunc) History() []OutboundWebhookJobStoreQueryFuncCall {
	f.mutex.Lock()
	history := make([]OutboundWebhookJobStoreQueryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OutboundWebhookJobStoreQueryFuncCall is an object that describes an
// invocation of method Query on an instance of MockOutboundWebhookJobStore.
type OutboundWebhookJobStoreQueryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sqlf.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *sql.Rows
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OutboundWebhookJobStoreQueryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OutboundWebhookJobStoreQueryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OutboundWebhookJobStoreWithFunc describes the behavior when the With
// method of the parent MockOutboundWebhookJobStore instance is invoked.
type OutboundWebhookJobStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) OutboundWebhookJobStore
	hooks       []func(basestore.ShareableStore) OutboundWebhookJobStore
	history     []OutboundWebhookJobStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOutboundWebhookJobStore) With(v0 basestore.ShareableStore) OutboundWebhookJobStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(OutboundWebhookJobStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockOutboundWebhookJobStore instance is invoked and the hook queue
// is empty.
func (f *OutboundWebhookJobStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) OutboundWebhookJobStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockOutboundWebhookJobStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *OutboundWebhookJobStoreWithFunc) PushHook(hook func(basestore.ShareableStore) OutboundWebhookJobStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OutboundWebhookJobStoreWithFunc) SetDefaultReturn(r0 OutboundWebhookJobStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) OutboundWebhookJobStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OutboundWebhookJobStoreWithFunc) PushReturn(r0 OutboundWebhookJobStore) {
	f.PushHook(func(basestore.ShareableStore) OutboundWebhookJobStore {
		return r0
	})
}

func (f *OutboundWebhookJobStoreWithFunc) nextHook() func(basestore.ShareableStore) OutboundWebhookJobStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OutboundWebhookJobStoreWithFunc) appendCall(r0 OutboundWebhookJobStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OutboundWebhookJobStoreWithFuncCall objects
// describing the invocations of this function.
func (f *OutboundWebhookJobStoreWithFunc) History() []OutboundWebhookJobStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]OutboundWebhookJobStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OutboundWebhookJobStoreWithFuncCall is an object that describes an
// invocation of method With on an instance of MockOutboundWebhookJobStore.
type OutboundWebhookJobStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 OutboundWebhookJobStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OutboundWebhookJobStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OutboundWebhookJobStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OutboundWebhookJobStoreWithTransactFunc describes the behavior when the
// WithTransact method of the parent MockOutboundWebhookJobStore instance is
// invoked.
type OutboundWebhookJobStoreWithTransactFunc struct {
	defaultHook func(context.Context, func(OutboundWebhookJobStore) error) error
	hooks       []func(context.Context, func(OutboundWebhookJobStore) error) error
	history     []OutboundWebhookJobStoreWithTransactFuncCall
	mutex       sync.Mutex
}

// WithTransact delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockOutboundWebhookJobStore) WithTransact(v0 context.Context, v1 func(OutboundWebhookJobStore) error) error {
	r0 := m.WithTransactFunc.nextHook()(v0, v1)
	m.WithTransactFunc.appendCall(OutboundWebhookJobStoreWithTransactFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithTransact method
// of the parent MockOutboundWebhookJobStore instance is invoked and the
// hook queue is empty.
func (f *OutboundWebhookJobStoreWithTransactFunc) SetDefaultHook(hook func(context.Context, func(OutboundWebhookJobStore) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithTransact method of the parent MockOutboundWebhookJobStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *OutboundWebhookJobStoreWithTransactFunc) PushHook(hook func(context.Context, func(OutboundWebhookJobStore) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OutboundWebhookJobStoreWithTransactFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, func(OutboundWebhookJobStore) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OutboundWebhookJobStoreWithTransactFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, func(OutboundWebhookJobStore) error) error {
		return r0
	})
}

func (f *OutboundWebhookJobStoreWithTransactFunc) nextHook() func(context.Context, func(OutboundWebhookJobStore) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OutboundWebhookJobStoreWithTransactFunc) appendCall(r0 OutboundWebhookJobStoreWithTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OutboundWebhookJobStoreWithTransactFuncCall
// objects describing the invocations of this function.
func (f *OutboundWebhookJobStoreWithTransactFunc) History() []OutboundWebhookJobStoreWithTransactFuncCall {
	f.mutex.Lock()
	history := make([]OutboundWebhookJobStoreWithTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OutboundWebhookJobStoreWithTransactFuncCall is an object that describes
// an invocation of method WithTransact on an instance of
// MockOutboundWebhookJobStore.
type OutboundWebhookJobStoreWithTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 func(OutboundWebhookJobStore) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OutboundWebhookJobStoreWithTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OutboundWebhookJobStoreWithTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockOutboundWebhookLogStore is a mock implementation of the
// OutboundWebhookLogStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockOutboundWebhookLogStore struct {
	// CountsForOutboundWebhookFunc is an instance of a mock function object
	// controlling the behavior of the method CountsForOutboundWebhook.
	CountsForOutboundWebhookFunc *OutboundWebhookLogStoreCountsForOutboundWebhookFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *OutboundWebhookLogStoreCreateFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *OutboundWebhookLogStoreDoneFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *OutboundWebhookLogStoreHandleFunc
	// ListForOutboundWebhookFunc is an instance of a mock function object
	// controlling the behavior of the method ListForOutboundWebhook.
	ListForOutboundWebhookFunc *OutboundWebhookLogStoreListForOutboundWebhookFunc
	// QueryFunc is an instance of a mock function object controlling the
	// behavior of the method Query.
	QueryFunc *OutboundWebhookLogStoreQueryFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *OutboundWebhookLogStoreWithFunc
	// WithTransactFunc is an instance of a mock function object controlling
	// the behavior of the method WithTransact.
	WithTransactFunc *OutboundWebhookLogStoreWithTransactFunc
}

// NewMockOutboundWebhookLogStore creates a new mock of the
// OutboundWebhookLogStore interface. All methods return zero values for all
// results, unless overwritten.
func NewMockOutboundWebhookLogStore() *MockOutboundWebhookLogStore {
	return &MockOutboundWebhookLogStore{
		CountsForOutboundWebhookFunc: &OutboundWebhookLogStoreCountsForOutboundWebhookFunc{
			defaultHook: func(context.Context, int64) (r0 int64, r1 int64, r2 error) {
				return
			},
		},
		CreateFunc: &OutboundWebhookLogStoreCreateFunc{
			defaultHook: func(context.Context, *types.OutboundWebhookLog) (r0 error) {
				return
			},
		},
		DoneFunc: &OutboundWebhookLogStoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		HandleFunc: &OutboundWebhookLogStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		ListForOutboundWebhookFunc: &OutboundWebhookLogStoreListForOutboundWebhookFunc{
			defaultHook: func(context.Context, OutboundWebhookLogListOpts) (r0 []*types.OutboundWebhookLog, r1 error) {
				return
			},
		},
		QueryFunc: &OutboundWebhookLogStoreQueryFunc{
			defaultHook: func(context.Context, *sqlf.Query) (r0 *sql.Rows, r1 error) {
				return
			},
		},
		WithFunc: &OutboundWebhookLogStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 OutboundWebhookLogStore) {
				return
			},
		},
		WithTransactFunc: &OutboundWebhookLogStoreWithTransactFunc{
			defaultHook: func(context.Context, func(OutboundWebhookLogStore) error) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockOutboundWebhookLogStore creates a new mock of the
// OutboundWebhookLogStore interface. All methods panic on invocation,
// unless overwritten.
func NewStrictMockOutboundWebhookLogStore() *MockOutboundWebhookLogStore {
	return &MockOutboundWebhookLogStore{
		CountsForOutboundWebhookFunc: &OutboundWebhookLogStoreCountsForOutboundWebhookFunc{
			defaultHook: func(context.Context, int64) (int64, int64, error) {
				panic("unexpected invocation of MockOutboundWebhookLogStore.CountsForOutboundWebhook")
			},
		},
		CreateFunc: &OutboundWebhookLogStoreCreateFunc{
			defaultHook: func(context.Context, *types.OutboundWebhookLog) error {
				panic("unexpected invocation of MockOutboundWebhookLogStore.Create")
			},
		},
		DoneFunc: &OutboundWebhookLogStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockOutboundWebhookLogStore.Done")
			},
		},
		HandleFunc: &OutboundWebhookLogStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockOutboundWebhookLogStore.Handle")
			},
		},
		ListForOutboundWebhookFunc: &OutboundWebhookLogStoreListForOutboundWebhookFunc{
			defaultHook: func(context.Context, OutboundWebhookLogListOpts) ([]*types.OutboundWebhookLog, error) {
				panic("unexpected invocation of MockOutboundWebhookLogStore.ListForOutboundWebhook")
			},
		},
		QueryFunc: &OutboundWebhookLogStoreQueryFunc{
			defaultHook: func(context.Context, *sqlf.Query) (*sql.Rows, error) {
				panic("unexpected invocation of MockOutboundWebhookLogStore.Query")
			},
		},
		WithFunc: &OutboundWebhookLogStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) OutboundWebhookLogStore {
				panic("unexpected invocation of MockOutboundWebhookLogStore.With")
			},
		},
		WithTransactFunc: &OutboundWebhookLogStoreWithTransactFunc{
			defaultHook: func(context.Context, func(OutboundWebhookLogStore) error) error {
				panic("unexpected invocation of MockOutboundWebhookLogStore.WithTransact")
			},
		},
	}
}

// NewMockOutboundWebhookLogStoreFrom creates a new mock of the
// MockOutboundWebhookLogStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockOutboundWebhookLogStoreFrom(i OutboundWebhookLogStore) *MockOutboundWebhookLogStore {
	return &MockOutboundWebhookLogStore{
		CountsForOutboundWebhookFunc: &OutboundWebhookLogStoreCountsForOutboundWebhookFunc{
			defaultHook: i.CountsForOutboundWebhook,
		},
		CreateFunc: &OutboundWebhookLogStoreCreateFunc{
			defaultHook: i.Create,
		},
		DoneFunc: &OutboundWebhookLogStoreDoneFunc{
			defaultHook: i.Done,
		},
		HandleFunc: &OutboundWebhookLogStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListForOutboundWebhookFunc: &OutboundWebhookLogStoreListForOutboundWebhookFunc{
			defaultHook: i.ListForOutboundWebhook,
		},
		QueryFunc: &OutboundWebhookLogStoreQueryFunc{
			defaultHook: i.Query,
		},
		WithFunc: &OutboundWebhookLogStoreWithFunc{
			defaultHook: i.With,
		},
		WithTransactFunc: &OutboundWebhookLogStoreWithTransactFunc{
			defaultHook: i.WithTransact,
		},
	}
}

// OutboundWebhookLogStoreCountsForOutboundWebhookFunc describes the
// behavior when the CountsForOutboundWebhook method of the parent
// MockOutboundWebhookLogStore instance is invoked.
type OutboundWebhookLogStoreCountsForOutboundWebhookFunc struct {
	defaultHook func(context.Context, int64) (int64, int64, error)
	hooks       []func(context.Context, int64) (int64, int64, error)
	history     []OutboundWebhookLogStoreCountsForOutboundWebhookFuncCall
	mutex       sync.Mutex
}

// CountsForOutboundWebhook delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockOutboundWebhookLogStore) CountsForOutboundWebhook(v0 context.Context, v1 int64) (int64, int64, error) {
	r0, r1, r2 := m.CountsForOutboundWebhookFunc.nextHook()(v0, v1)
	m.CountsForOutboundWebhookFunc.appendCall(OutboundWebhookLogStoreCountsForOutboundWebhookFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// CountsForOutboundWebhook method of the parent MockOutboundWebhookLogStore
// instance is invoked and the hook queue is empty.
func (f *OutboundWebhookLogStoreCountsForOutboundWebhookFunc) SetDefaultHook(hook func(context.Context, int64) (int64, int64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountsForOutboundWebhook method of the parent MockOutboundWebhookLogStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *OutboundWebhookLogStoreCountsForOutboundWebhookFunc) PushHook(hook func(context.Context, int64) (int64, int64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OutboundWebhookLogStoreCountsForOutboundWebhookFunc) SetDefaultReturn(r0 int64, r1 int64, r2 error) {
	f.SetDefaultHook(func(context.Context, int64) (int64, int64, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OutboundWebhookLogStoreCountsForOutboundWebhookFunc) PushReturn(r0 int64, r1 int64, r2 error) {
	f.PushHook(func(context.Context, int64) (int64, int64, error) {
		return r0, r1, r2
	})
}

func (f *OutboundWebhookLogStoreCountsForOutboundWebhookFunc) nextHook() func(context.Context, int64) (int64, int64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OutboundWebhookLogStoreCountsForOutboundWebhookFunc) appendCall(r0 OutboundWebhookLogStoreCountsForOutboundWebhookFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// OutboundWebhookLogStoreCountsForOutboundWebhookFuncCall objects
// describing the invocations of this function.
func (f *OutboundWebhookLogStoreCountsForOutboundWebhookFunc) History() []OutboundWebhookLogStoreCountsForOutboundWebhookFuncCall {
	f.mutex.Lock()
	history := make([]OutboundWebhookLogStoreCountsForOutboundWebhookFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OutboundWebhookLogStoreCountsForOutboundWebhookFuncCall is an object that
// describes an invocation of method CountsForOutboundWebhook on an instance
// of MockOutboundWebhookLogStore.
type OutboundWebhookLogStoreCountsForOutboundWebhookFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int64
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OutboundWebhookLogStoreCountsForOutboundWebhookFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OutboundWebhookLogStoreCountsForOutboundWebhookFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// OutboundWebhookLogStoreCreateFunc describes the behavior when the Create
// method of the parent MockOutboundWebhookLogStore instance is invoked.
type OutboundWebhookLogStoreCreateFunc struct {
	defaultHook func(context.Context, *types.OutboundWebhookLog) error
	hooks       []func(context.Context, *types.OutboundWebhookLog) error
	history     []OutboundWebhookLogStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOutboundWebhookLogStore) Create(v0 context.Context, v1 *types.OutboundWebhookLog) error {
	r0 := m.CreateFunc.nextHook()(v0, v1)
	m.CreateFunc.appendCall(OutboundWebhookLogStoreCreateFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockOutboundWebhookLogStore instance is invoked and the hook queue
// is empty.
func (f *OutboundWebhookLogStoreCreateFunc) SetDefaultHook(hook func(context.Context, *types.OutboundWebhookLog) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockOutboundWebhookLogStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *OutboundWebhookLogStoreCreateFunc) PushHook(hook func(context.Context, *types.OutboundWebhookLog) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OutboundWebhookLogStoreCreateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *types.OutboundWebhookLog) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OutboundWebhookLogStoreCreateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *types.OutboundWebhookLog) error {
		return r0
	})
}

func (f *OutboundWebhookLogStoreCreateFunc) nextHook() func(context.Context, *types.OutboundWebhookLog) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OutboundWebhookLogStoreCreateFunc) appendCall(r0 OutboundWebhookLogStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OutboundWebhookLogStoreCreateFuncCall
// objects describing the invocations of this function.
func (f *OutboundWebhookLogStoreCreateFunc) History() []OutboundWebhookLogStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]OutboundWebhookLogStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OutboundWebhookLogStoreCreateFuncCall is an object that describes an
// invocation of method Create on an instance of
// MockOutboundWebhookLogStore.
type OutboundWebhookLogStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.OutboundWebhookLog
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OutboundWebhookLogStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OutboundWebhookLogStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OutboundWebhookLogStoreDoneFunc describes the behavior when the Done
// method of the parent MockOutboundWebhookLogStore instance is invoked.
type OutboundWebhookLogStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []OutboundWebhookLogStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOutboundWebhookLogStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(OutboundWebhookLogStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockOutboundWebhookLogStore instance is invoked and the hook queue
// is empty.
func (f *OutboundWebhookLogStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockOutboundWebhookLogStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *OutboundWebhookLogStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OutboundWebhookLogStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OutboundWebhookLogStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *OutboundWebhookLogStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OutboundWebhookLogStoreDoneFunc) appendCall(r0 OutboundWebhookLogStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OutboundWebhookLogStoreDoneFuncCall objects
// describing the invocations of this function.
func (f *OutboundWebhookLogStoreDoneFunc) History() []OutboundWebhookLogStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]OutboundWebhookLogStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OutboundWebhookLogStoreDoneFuncCall is an object that describes an
// invocation of method Done on an instance of MockOutboundWebhookLogStore.
type OutboundWebhookLogStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OutboundWebhookLogStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OutboundWebhookLogStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OutboundWebhookLogStoreHandleFunc describes the behavior when the Handle
// method of the parent MockOutboundWebhookLogStore instance is invoked.
type OutboundWebhookLogStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []OutboundWebhookLogStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOutboundWebhookLogStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(OutboundWebhookLogStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockOutboundWebhookLogStore instance is invoked and the hook queue
// is empty.
func (f *OutboundWebhookLogStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockOutboundWebhookLogStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *OutboundWebhookLogStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OutboundWebhookLogStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OutboundWebhookLogStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *OutboundWebhookLogStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OutboundWebhookLogStoreHandleFunc) appendCall(r0 OutboundWebhookLogStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OutboundWebhookLogStoreHandleFuncCall
// objects describing the invocations of this function.
func (f *OutboundWebhookLogStoreHandleFunc) History() []OutboundWebhookLogStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]OutboundWebhookLogStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OutboundWebhookLogStoreHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of
// MockOutboundWebhookLogStore.
type OutboundWebhookLogStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OutboundWebhookLogStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OutboundWebhookLogStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OutboundWebhookLogStoreListForOutboundWebhookFunc describes the behavior
// when the ListForOutboundWebhook method of the parent
// MockOutboundWebhookLogStore instance is invoked.
type OutboundWebhookLogStoreListForOutboundWebhookFunc struct {
	defaultHook func(context.Context, OutboundWebhookLogListOpts) ([]*types.OutboundWebhookLog, error)
	hooks       []func(context.Context, OutboundWebhookLogListOpts) ([]*types.OutboundWebhookLog, error)
	history     []OutboundWebhookLogStoreListForOutboundWebhookFuncCall
	mutex       sync.Mutex
}

// ListForOutboundWebhook delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockOutboundWebhookLogStore) ListForOutboundWebhook(v0 context.Context, v1 OutboundWebhookLogListOpts) ([]*types.OutboundWebhookLog, error) {
	r0, r1 := m.ListForOutboundWebhookFunc.nextHook()(v0, v1)
	m.ListForOutboundWebhookFunc.appendCall(OutboundWebhookLogStoreListForOutboundWebhookFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ListForOutboundWebhook method of the parent MockOutboundWebhookLogStore
// instance is invoked and the hook queue is empty.
func (f *OutboundWebhookLogStoreListForOutboundWebhookFunc) SetDefaultHook(hook func(context.Context, OutboundWebhookLogListOpts) ([]*types.OutboundWebhookLog, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListForOutboundWebhook method of the parent MockOutboundWebhookLogStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *OutboundWebhookLogStoreListForOutboundWebhookFunc) PushHook(hook func(context.Context, OutboundWebhookLogListOpts) ([]*types.OutboundWebhookLog, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OutboundWebhookLogStoreListForOutboundWebhookFunc) SetDefaultReturn(r0 []*types.OutboundWebhookLog, r1 error) {
	f.SetDefaultHook(func(context.Context, OutboundWebhookLogListOpts) ([]*types.OutboundWebhookLog, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OutboundWebhookLogStoreListForOutboundWebhookFunc) PushReturn(r0 []*types.OutboundWebhookLog, r1 error) {
	f.PushHook(func(context.Context, OutboundWebhookLogListOpts) ([]*types.OutboundWebhookLog, error) {
		return r0, r1
	})
}

func (f *OutboundWebhookLogStoreListForOutboundWebhookFunc) nextHook() func(context.Context, OutboundWebhookLogListOpts) ([]*types.OutboundWebhookLog, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OutboundWebhookLogStoreListForOutboundWebhookFunc) appendCall(r0 OutboundWebhookLogStoreListForOutboundWebhookFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// OutboundWebhookLogStoreListForOutboundWebhookFuncCall objects describing
// the invocations of this function.
func (f *OutboundWebhookLogStoreListForOutboundWebhookFunc) History() []OutboundWebhookLogStoreListForOutboundWebhookFuncCall {
	f.mutex.Lock()
	history := make([]OutboundWebhookLogStoreListForOutboundWebhookFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OutboundWebhookLogStoreListForOutboundWebhookFuncCall is an object that
// describes an invocation of method ListForOutboundWebhook on an instance
// of MockOutboundWebhookLogStore.
type OutboundWebhookLogStoreListForOutboundWebhookFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 OutboundWebhookLogListOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.OutboundWebhookLog
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OutboundWebhookLogStoreListForOutboundWebhookFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OutboundWebhookLogStoreListForOutboundWebhookFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OutboundWebhookLogStoreQueryFunc describes the behavior when the Query
// method of the parent MockOutboundWebhookLogStore instance is invoked.
type OutboundWebhookLogStoreQueryFunc struct {
	defaultHook func(context.Context, *sqlf.Query) (*sql.Rows, error)
	hooks       []func(context.Context, *sqlf.Query) (*sql.Rows, error)
	history     []OutboundWebhookLogStoreQueryFuncCall
	mutex       sync.Mutex
}

// Query delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOutboundWebhookLogStore) Query(v0 context.Context, v1 *sqlf.Query) (*sql.Rows, error) {
	r0, r1 := m.QueryFunc.nextHook()(v0, v1)
	m.QueryFunc.appendCall(OutboundWebhookLogStoreQueryFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Query method of the
// parent MockOutboundWebhookLogStore instance is invoked and the hook queue
// is empty.
func (f *OutboundWebhookLogStoreQueryFunc) SetDefaultHook(hook func(context.Context, *sqlf.Query) (*sql.Rows, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Query method of the parent MockOutboundWebhookLogStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *OutboundWebhookLogStoreQueryFunc) PushHook(hook func(context.Context, *sqlf.Query) (*sql.Rows, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OutboundWebhookLogStoreQueryFunc) SetDefaultReturn(r0 *sql.Rows, r1 error) {
	f.SetDefaultHook(func(context.Context, *sqlf.Query) (*sql.Rows, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OutboundWebhookLogStoreQueryFunc) PushReturn(r0 *sql.Rows, r1 error) {
	f.PushHook(func(context.Context, *sqlf.Query) (*sql.Rows, error) {
		return r0, r1
	})
}

func (f *OutboundWebhookLogStoreQueryFunc) nextHook() func(context.Context, *sqlf.Query) (*sql.Rows, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OutboundWebhookLogStoreQueryFunc) appendCall(r0 OutboundWebhookLogStoreQueryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OutboundWebhookLogStoreQueryFuncCall
// objects describing the invocations of this function.
func (f *OutboundWebhookLogStoreQueryFunc) History() []OutboundWebhookLogStoreQueryFuncCall {
	f.mutex.Lock()
	history := make([]OutboundWebhookLogStoreQueryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OutboundWebhookLogStoreQueryFuncCall is an object that describes an
// invocation of method Query on an instance of MockOutboundWebhookLogStore.
type OutboundWebhookLogStoreQueryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sqlf.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *sql.Rows
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OutboundWebhookLogStoreQueryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OutboundWebhookLogStoreQueryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OutboundWebhookLogStoreWithFunc describes the behavior when the With
// method of the parent MockOutboundWebhookLogStore instance is invoked.
type OutboundWebhookLogStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) OutboundWebhookLogStore
	hooks       []func(basestore.ShareableStore) OutboundWebhookLogStore
	history     []OutboundWebhookLogStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOutboundWebhookLogStore) With(v0 basestore.ShareableStore) OutboundWebhookLogStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(OutboundWebhookLogStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockOutboundWebhookLogStore instance is invoked and the hook queue
// is empty.
func (f *OutboundWebhookLogStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) OutboundWebhookLogStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockOutboundWebhookLogStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *OutboundWebhookLogStoreWithFunc) PushHook(hook func(basestore.ShareableStore) OutboundWebhookLogStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OutboundWebhookLogStoreWithFunc) SetDefaultReturn(r0 OutboundWebhookLogStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) OutboundWebhookLogStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OutboundWebhookLogStoreWithFunc) PushReturn(r0 OutboundWebhookLogStore) {
	f.PushHook(func(basestore.ShareableStore) OutboundWebhookLogStore {
		return r0
	})
}

func (f *OutboundWebhookLogStoreWithFunc) nextHook() func(basestore.ShareableStore) OutboundWebhookLogStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OutboundWebhookLogStoreWithFunc) appendCall(r0 OutboundWebhookLogStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OutboundWebhookLogStoreWithFuncCall objects
// describing the invocations of this function.
func (f *OutboundWebhookLogStoreWithFunc) History() []OutboundWebhookLogStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]OutboundWebhookLogStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OutboundWebhookLogStoreWithFuncCall is an object that describes an
// invocation of method With on an instance of MockOutboundWebhookLogStore.
type OutboundWebhookLogStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 OutboundWebhookLogStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OutboundWebhookLogStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OutboundWebhookLogStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OutboundWebhookLogStoreWithTransactFunc describes the behavior when the
// WithTransact method of the parent MockOutboundWebhookLogStore instance is
// invoked.
type OutboundWebhookLogStoreWithTransactFunc struct {
	defaultHook func(context.Context, func(OutboundWebhookLogStore) error) error
	hooks       []func(context.Context, func(OutboundWebhookLogStore) error) error
	history     []OutboundWebhookLogStoreWithTransactFuncCall
	mutex       sync.Mutex
}

// WithTransact delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockOutboundWebhookLogStore) WithTransact(v0 context.Context, v1 func(OutboundWebhookLogStore) error) error {
	r0 := m.WithTransactFunc.nextHook()(v0, v1)
	m.WithTransactFunc.appendCall(OutboundWebhookLogStoreWithTransactFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithTransact method
// of the parent MockOutboundWebhookLogStore instance is invoked and the
// hook queue is empty.
func (f *OutboundWebhookLogStoreWithTransactFunc) SetDefaultHook(hook func(context.Context, func(OutboundWebhookLogStore) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithTransact method of the parent MockOutboundWebhookLogStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *OutboundWebhookLogStoreWithTransactFunc) PushHook(hook func(context.Context, func(OutboundWebhookLogStore) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OutboundWebhookLogStoreWithTransactFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, func(OutboundWebhookLogStore) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OutboundWebhookLogStoreWithTransactFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, func(OutboundWebhookLogStore) error) error {
		return r0
	})
}

func (f *OutboundWebhookLogStoreWithTransactFunc) nextHook() func(context.Context, func(OutboundWebhookLogStore) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OutboundWebhookLogStoreWithTransactFunc) appendCall(r0 OutboundWebhookLogStoreWithTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OutboundWebhookLogStoreWithTransactFuncCall
// objects describing the invocations of this function.
func (f *OutboundWebhookLogStoreWithTransactFunc) History() []OutboundWebhookLogStoreWithTransactFuncCall {
	f.mutex.Lock()
	history := make([]OutboundWebhookLogStoreWithTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OutboundWebhookLogStoreWithTransactFuncCall is an object that describes
// an invocation of method WithTransact on an instance of
// MockOutboundWebhookLogStore.
type OutboundWebhookLogStoreWithTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 func(OutboundWebhookLogStore) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OutboundWebhookLogStoreWithTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OutboundWebhookLogStoreWithTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockOutboundWebhookStore is a mock implementation of the
// OutboundWebhookStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockOutboundWebhookStore struct {
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *OutboundWebhookStoreCountFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *OutboundWebhookStoreCreateFunc
	// DeleteFunc is an instance of a mock function object controlling the
	// behavior of the method Delete.
	DeleteFunc *OutboundWebhookStoreDeleteFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *OutboundWebhookStoreDoneFunc
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *OutboundWebhookStoreGetByIDFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *OutboundWebhookStoreHandleFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *OutboundWebhookStoreListFunc
	// QueryFunc is an instance of a mock function object controlling the
	// behavior of the method Query.
	QueryFunc *OutboundWebhookStoreQueryFunc
	// ToJobStoreFunc is an instance of a mock function object controlling
	// the behavior of the method ToJobStore.
	ToJobStoreFunc *OutboundWebhookStoreToJobStoreFunc
	// ToLogStoreFunc is an instance of a mock function object controlling
	// the behavior of the method ToLogStore.
	ToLogStoreFunc *OutboundWebhookStoreToLogStoreFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *OutboundWebhookStoreTransactFunc
	// UpdateFunc is an instance of a mock function object controlling the
	// behavior of the method Update.
	UpdateFunc *OutboundWebhookStoreUpdateFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *OutboundWebhookStoreWithFunc
}

// NewMockOutboundWebhookStore creates a new mock of the
// OutboundWebhookStore interface. All methods return zero values for all
// results, unless overwritten.
func NewMockOutboundWebhookStore() *MockOutboundWebhookStore {
	return &MockOutboundWebhookStore{
		CountFunc: &OutboundWebhookStoreCountFunc{
			defaultHook: func(context.Context, OutboundWebhookCountOpts) (r0 int64, r1 error) {
				return
			},
		},
		CreateFunc: &OutboundWebhookStoreCreateFunc{
			defaultHook: func(context.Context, *types.OutboundWebhook) (r0 error) {
				return
			},
		},
		DeleteFunc: &OutboundWebhookStoreDeleteFunc{
			defaultHook: func(context.Context, int64) (r0 error) {
				return
			},
		},
		DoneFunc: &OutboundWebhookStoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		GetByIDFunc: &OutboundWebhookStoreGetByIDFunc{
			defaultHook: func(context.Context, int64) (r0 *types.OutboundWebhook, r1 error) {
				return
			},
		},
		HandleFunc: &OutboundWebhookStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		ListFunc: &OutboundWebhookStoreListFunc{
			defaultHook: func(context.Context, OutboundWebhookListOpts) (r0 []*types.OutboundWebhook, r1 error) {
				return
			},
		},
		QueryFunc: &OutboundWebhookStoreQueryFunc{
			defaultHook: func(context.Context, *sqlf.Query) (r0 *sql.Rows, r1 error) {
				return
			},
		},
		ToJobStoreFunc: &OutboundWebhookStoreToJobStoreFunc{
			defaultHook: func() (r0 OutboundWebhookJobStore) {
				return
			},
		},
		ToLogStoreFunc: &OutboundWebhookStoreToLogStoreFunc{
			defaultHook: func() (r0 OutboundWebhookLogStore) {
				return
			},
		},
		TransactFunc: &OutboundWebhookStoreTransactFunc{
			defaultHook: func(context.Context) (r0 OutboundWebhookStore, r1 error) {
				return
			},
		},
		UpdateFunc: &OutboundWebhookStoreUpdateFunc{
			defaultHook: func(context.Context, *types.OutboundWebhook) (r0 error) {
				return
			},
		},
		WithFunc: &OutboundWebhookStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 OutboundWebhookStore) {
				return
			},
		},
	}
}

// NewStrictMockOutboundWebhookStore creates a new mock of the
// OutboundWebhookStore interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockOutboundWebhookStore() *MockOutboundWebhookStore {
	return &MockOutboundWebhookStore{
		CountFunc: &OutboundWebhookStoreCountFunc{
			defaultHook: func(context.Context, OutboundWebhookCountOpts) (int64, error) {
				panic("unexpected invocation of MockOutboundWebhookStore.Count")
			},
		},
		CreateFunc: &OutboundWebhookStoreCreateFunc{
			defaultHook: func(context.Context, *types.OutboundWebhook) error {
				panic("unexpected invocation of MockOutboundWebhookStore.Create")
			},
		},
		DeleteFunc: &OutboundWebhookStoreDeleteFunc{
			defaultHook: func(context.Context, int64) error {
				panic("unexpected invocation of MockOutboundWebhookStore.Delete")
			},
		},
		DoneFunc: &OutboundWebhookStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockOutboundWebhookStore.Done")
			},
		},
		GetByIDFunc: &OutboundWebhookStoreGetByIDFunc{
			defaultHook: func(context.Context, int64) (*types.OutboundWebhook, error) {
				panic("unexpected invocation of MockOutboundWebhookStore.GetByID")
			},
		},
		HandleFunc: &OutboundWebhookStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockOutboundWebhookStore.Handle")
			},
		},
		ListFunc: &OutboundWebhookStoreListFunc{
			defaultHook: func(context.Context, OutboundWebhookListOpts) ([]*types.OutboundWebhook, error) {
				panic("unexpected invocation of MockOutboundWebhookStore.List")
			},
		},
		QueryFunc: &OutboundWebhookStoreQueryFunc{
			defaultHook: func(context.Context, *sqlf.Query) (*sql.Rows, error) {
				panic("unexpected invocation of MockOutboundWebhookStore.Query")
			},
		},
		ToJobStoreFunc: &OutboundWebhookStoreToJobStoreFunc{
			defaultHook: func() OutboundWebhookJobStore {
				panic("unexpected invocation of MockOutboundWebhookStore.ToJobStore")
			},
		},
		ToLogStoreFunc: &OutboundWebhookStoreToLogStoreFunc{
			defaultHook: func() OutboundWebhookLogStore {
				panic("unexpected invocation of MockOutboundWebhookStore.ToLogStore")
			},
		},
		TransactFunc: &OutboundWebhookStoreTransactFunc{
			defaultHook: func(context.Context) (OutboundWebhookStore, error) {
				panic("unexpected invocation of MockOutboundWebhookStore.Transact")
			},
		},
		UpdateFunc: &OutboundWebhookStoreUpdateFunc{
			defaultHook: func(context.Context, *types.OutboundWebhook) error {
				panic("unexpected invocation of MockOutboundWebhookStore.Update")
			},
		},
		WithFunc: &OutboundWebhookStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) OutboundWebhookStore {
				panic("unexpected invocation of MockOutboundWebhookStore.With")
			},
		},
	}
}

// NewMockOutboundWebhookStoreFrom creates a new mock of the
// MockOutboundWebhookStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockOutboundWebhookStoreFrom(i OutboundWebhookStore) *MockOutboundWebhookStore {
	return &MockOutboundWebhookStore{
		CountFunc: &OutboundWebhookStoreCountFunc{
			defaultHook: i.Count,
		},
		CreateFunc: &OutboundWebhookStoreCreateFunc{
			defaultHook: i.Create,
		},
		DeleteFunc: &OutboundWebhookStoreDeleteFunc{
			defaultHook: i.Delete,
		},
		DoneFunc: &OutboundWebhookStoreDoneFunc{
			defaultHook: i.Done,
		},
		GetByIDFunc: &OutboundWebhookStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		HandleFunc: &OutboundWebhookStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListFunc: &OutboundWebhookStoreListFunc{
			defaultHook: i.List,
		},
		QueryFunc: &OutboundWebhookStoreQueryFunc{
			defaultHook: i.Query,
		},
		ToJobStoreFunc: &OutboundWebhookStoreToJobStoreFunc{
			defaultHook: i.ToJobStore,
		},
		ToLogStoreFunc: &OutboundWebhookStoreToLogStoreFunc{
			defaultHook: i.ToLogStore,
		},
		TransactFunc: &OutboundWebhookStoreTransactFunc{
			defaultHook: i.Transact,
		},
		UpdateFunc: &OutboundWebhookStoreUpdateFunc{
			defaultHook: i.Update,
		},
		WithFunc: &OutboundWebhookStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// OutboundWebhookStoreCountFunc describes the behavior when the Count
// method of the parent MockOutboundWebhookStore instance is invoked.
type OutboundWebhookStoreCountFunc struct {
	defaultHook func(context.Context, OutboundWebhookCountOpts) (int64, error)
	hooks       []func(context.Context, OutboundWebhookCountOpts) (int64, error)
	history     []OutboundWebhookStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOutboundWebhookStore) Count(v0 context.Context, v1 OutboundWebhookCountOpts) (int64, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(OutboundWebhookStoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockOutboundWebhookStore instance is invoked and the hook queue is
// empty.
func (f *OutboundWebhookStoreCountFunc) SetDefaultHook(hook func(context.Context, OutboundWebhookCountOpts) (int64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockOutboundWebhookStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OutboundWebhookStoreCountFunc) PushHook(hook func(context.Context, OutboundWebhookCountOpts) (int64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OutboundWebhookStoreCountFunc) SetDefaultReturn(r0 int64, r1 error) {
	f.SetDefaultHook(func(context.Context, OutboundWebhookCountOpts) (int64, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OutboundWebhookStoreCountFunc) PushReturn(r0 int64, r1 error) {
	f.PushHook(func(context.Context, OutboundWebhookCountOpts) (int64, error) {
		return r0, r1
	})
}

func (f *OutboundWebhookStoreCountFunc) nextHook() func(context.Context, OutboundWebhookCountOpts) (int64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OutboundWebhookStoreCountFunc) appendCall(r0 OutboundWebhookStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OutboundWebhookStoreCountFuncCall objects
// describing the invocations of this function.
func (f *OutboundWebhookStoreCountFunc) History() []OutboundWebhookStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]OutboundWebhookStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OutboundWebhookStoreCountFuncCall is an object that describes an
// invocation of method Count on an instance of MockOutboundWebhookStore.
type OutboundWebhookStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 OutboundWebhookCountOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OutboundWebhookStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OutboundWebhookStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OutboundWebhookStoreCreateFunc describes the behavior when the Create
// method of the parent MockOutboundWebhookStore instance is invoked.
type OutboundWebhookStoreCreateFunc struct {
	defaultHook func(context.Context, *types.OutboundWebhook) error
	hooks       []func(context.Context, *types.OutboundWebhook) error
	history     []OutboundWebhookStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOutboundWebhookStore) Create(v0 context.Context, v1 *types.OutboundWebhook) error {
	r0 := m.CreateFunc.nextHook()(v0, v1)
	m.CreateFunc.appendCall(OutboundWebhookStoreCreateFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockOutboundWebhookStore instance is invoked and the hook queue is
// empty.
func (f *OutboundWebhookStoreCreateFunc) SetDefaultHook(hook func(context.Context, *types.OutboundWebhook) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockOutboundWebhookStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OutboundWebhookStoreCreateFunc) PushHook(hook func(context.Context, *types.OutboundWebhook) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OutboundWebhookStoreCreateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *types.OutboundWebhook) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OutboundWebhookStoreCreateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *types.OutboundWebhook) error {
		return r0
	})
}

func (f *OutboundWebhookStoreCreateFunc) nextHook() func(context.Context, *types.OutboundWebhook) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OutboundWebhookStoreCreateFunc) appendCall(r0 OutboundWebhookStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OutboundWebhookStoreCreateFuncCall objects
// describing the invocations of this function.
func (f *OutboundWebhookStoreCreateFunc) History() []OutboundWebhookStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]OutboundWebhookStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OutboundWebhookStoreCreateFuncCall is an object that describes an
// invocation of method Create on an instance of MockOutboundWebhookStore.
type OutboundWebhookStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.OutboundWebhook
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OutboundWebhookStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OutboundWebhookStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OutboundWebhookStoreDeleteFunc describes the behavior when the Delete
// method of the parent MockOutboundWebhookStore instance is invoked.
type OutboundWebhookStoreDeleteFunc struct {
	defaultHook func(context.Context, int64) error
	hooks       []func(context.Context, int64) error
	history     []OutboundWebhookStoreDeleteFuncCall
	mutex       sync.Mutex
}

// Delete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOutboundWebhookStore) Delete(v0 context.Context, v1 int64) error {
	r0 := m.DeleteFunc.nextHook()(v0, v1)
	m.DeleteFunc.appendCall(OutboundWebhookStoreDeleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Delete method of the
// parent MockOutboundWebhookStore instance is invoked and the hook queue is
// empty.
func (f *OutboundWebhookStoreDeleteFunc) SetDefaultHook(hook func(context.Context, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Delete method of the parent MockOutboundWebhookStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OutboundWebhookStoreDeleteFunc) PushHook(hook func(context.Context, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OutboundWebhookStoreDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OutboundWebhookStoreDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64) error {
		return r0
	})
}

func (f *OutboundWebhookStoreDeleteFunc) nextHook() func(context.Context, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OutboundWebhookStoreDeleteFunc) appendCall(r0 OutboundWebhookStoreDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OutboundWebhookStoreDeleteFuncCall objects
// describing the invocations of this function.
func (f *OutboundWebhookStoreDeleteFunc) History() []OutboundWebhookStoreDeleteFuncCall {
	f.mutex.Lock()
	history := make([]OutboundWebhookStoreDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OutboundWebhookStoreDeleteFuncCall is an object that describes an
// invocation of method Delete on an instance of MockOutboundWebhookStore.
type OutboundWebhookStoreDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OutboundWebhookStoreDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OutboundWebhookStoreDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OutboundWebhookStoreDoneFunc describes the behavior when the Done method
// of the parent MockOutboundWebhookStore instance is invoked.
type OutboundWebhookStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []OutboundWebhookStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOutboundWebhookStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(OutboundWebhookStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockOutboundWebhookStore instance is invoked and the hook queue is
// empty.
func (f *OutboundWebhookStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockOutboundWebhookStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OutboundWebhookStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OutboundWebhookStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OutboundWebhookStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *OutboundWebhookStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OutboundWebhookStoreDoneFunc) appendCall(r0 OutboundWebhookStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OutboundWebhookStoreDoneFuncCall objects
// describing the invocations of this function.
func (f *OutboundWebhookStoreDoneFunc) History() []OutboundWebhookStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]OutboundWebhookStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OutboundWebhookStoreDoneFuncCall is an object that describes an
// invocation of method Done on an instance of MockOutboundWebhookStore.
type OutboundWebhookStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OutboundWebhookStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OutboundWebhookStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OutboundWebhookStoreGetByIDFunc describes the behavior when the GetByID
// method of the parent MockOutboundWebhookStore instance is invoked.
type OutboundWebhookStoreGetByIDFunc struct {
	defaultHook func(context.Context, int64) (*types.OutboundWebhook, error)
	hooks       []func(context.Context, int64) (*types.OutboundWebhook, error)
	history     []OutboundWebhookStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOutboundWebhookStore) GetByID(v0 context.Context, v1 int64) (*types.OutboundWebhook, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(OutboundWebhookStoreGetByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockOutboundWebhookStore instance is invoked and the hook
// queue is empty.
func (f *OutboundWebhookStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int64) (*types.OutboundWebhook, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockOutboundWebhookStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *OutboundWebhookStoreGetByIDFunc) PushHook(hook func(context.Context, int64) (*types.OutboundWebhook, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OutboundWebhookStoreGetByIDFunc) SetDefaultReturn(r0 *types.OutboundWebhook, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (*types.OutboundWebhook, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OutboundWebhookStoreGetByIDFunc) PushReturn(r0 *types.OutboundWebhook, r1 error) {
	f.PushHook(func(context.Context, int64) (*types.OutboundWebhook, error) {
		return r0, r1
	})
}

func (f *OutboundWebhookStoreGetByIDFunc) nextHook() func(context.Context, int64) (*types.OutboundWebhook, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OutboundWebhookStoreGetByIDFunc) appendCall(r0 OutboundWebhookStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OutboundWebhookStoreGetByIDFuncCall objects
// describing the invocations of this function.
func (f *OutboundWebhookStoreGetByIDFunc) History() []OutboundWebhookStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]OutboundWebhookStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OutboundWebhookStoreGetByIDFuncCall is an object that describes an
// invocation of method GetByID on an instance of MockOutboundWebhookStore.
type OutboundWebhookStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.OutboundWebhook
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OutboundWebhookStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OutboundWebhookStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OutboundWebhookStoreHandleFunc describes the behavior when the Handle
// method of the parent MockOutboundWebhookStore instance is invoked.
type OutboundWebhookStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []OutboundWebhookStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOutboundWebhookStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(OutboundWebhookStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockOutboundWebhookStore instance is invoked and the hook queue is
// empty.
func (f *OutboundWebhookStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockOutboundWebhookStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OutboundWebhookStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OutboundWebhookStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OutboundWebhookStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *OutboundWebhookStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OutboundWebhookStoreHandleFunc) appendCall(r0 OutboundWebhookStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OutboundWebhookStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *OutboundWebhookStoreHandleFunc) History() []OutboundWebhookStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]OutboundWebhookStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OutboundWebhookStoreHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of MockOutboundWebhookStore.
type OutboundWebhookStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OutboundWebhookStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OutboundWebhookStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OutboundWebhookStoreListFunc describes the behavior when the List method
// of the parent MockOutboundWebhookStore instance is invoked.
type OutboundWebhookStoreListFunc struct {
	defaultHook func(context.Context, OutboundWebhookListOpts) ([]*types.OutboundWebhook, error)
	hooks       []func(context.Context, OutboundWebhookListOpts) ([]*types.OutboundWebhook, error)
	history     []OutboundWebhookStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOutboundWebhookStore) List(v0 context.Context, v1 OutboundWebhookListOpts) ([]*types.OutboundWebhook, error) {
	r0, r1 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(OutboundWebhookStoreListFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockOutboundWebhookStore instance is invoked and the hook queue is
// empty.
func (f *OutboundWebhookStoreListFunc) SetDefaultHook(hook func(context.Context, OutboundWebhookListOpts) ([]*types.OutboundWebhook, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockOutboundWebhookStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OutboundWebhookStoreListFunc) PushHook(hook func(context.Context, OutboundWebhookListOpts) ([]*types.OutboundWebhook, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OutboundWebhookStoreListFunc) SetDefaultReturn(r0 []*types.OutboundWebhook, r1 error) {
	f.SetDefaultHook(func(context.Context, OutboundWebhookListOpts) ([]*types.OutboundWebhook, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OutboundWebhookStoreListFunc) PushReturn(r0 []*types.OutboundWebhook, r1 error) {
	f.PushHook(func(context.Context, OutboundWebhookListOpts) ([]*types.OutboundWebhook, error) {
		return r0, r1
	})
}

func (f *OutboundWebhookStoreListFunc) nextHook() func(context.Context, OutboundWebhookListOpts) ([]*types.OutboundWebhook, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OutboundWebhookStoreListFunc) appendCall(r0 OutboundWebhookStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OutboundWebhookStoreListFuncCall objects
// describing the invocations of this function.
func (f *OutboundWebhookStoreListFunc) History() []OutboundWebhookStoreListFuncCall {
	f.mutex.Lock()
	history := make([]OutboundWebhookStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OutboundWebhookStoreListFuncCall is an object that describes an
// invocation of method List on an instance of MockOutboundWebhookStore.
type OutboundWebhookStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 OutboundWebhookListOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.OutboundWebhook
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OutboundWebhookStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OutboundWebhookStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OutboundWebhookStoreQueryFunc describes the behavior when the Query
// method of the parent MockOutboundWebhookStore instance is invoked.
type OutboundWebhookStoreQueryFunc struct {
	defaultHook func(context.Context, *sqlf.Query) (*sql.Rows, error)
	hooks       []func(context.Context, *sqlf.Query) (*sql.Rows, error)
	history     []OutboundWebhookStoreQueryFuncCall
	mutex       sync.Mutex
}

// Query delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOutboundWebhookStore) Query(v0 context.Context, v1 *sqlf.Query) (*sql.Rows, error) {
	r0, r1 := m.QueryFunc.nextHook()(v0, v1)
	m.QueryFunc.appendCall(OutboundWebhookStoreQueryFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Query method of the
// parent MockOutboundWebhookStore instance is invoked and the hook queue is
// empty.
func (f *OutboundWebhookStoreQueryFunc) SetDefaultHook(hook func(context.Context, *sqlf.Query) (*sql.Rows, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Query method of the parent MockOutboundWebhookStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OutboundWebhookStoreQueryFunc) PushHook(hook func(context.Context, *sqlf.Query) (*sql.Rows, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OutboundWebhookStoreQueryFunc) SetDefaultReturn(r0 *sql.Rows, r1 error) {
	f.SetDefaultHook(func(context.Context, *sqlf.Query) (*sql.Rows, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OutboundWebhookStoreQueryFunc) PushReturn(r0 *sql.Rows, r1 error) {
	f.PushHook(func(context.Context, *sqlf.Query) (*sql.Rows, error) {
		return r0, r1
	})
}

func (f *OutboundWebhookStoreQueryFunc) nextHook() func(context.Context, *sqlf.Query) (*sql.Rows, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OutboundWebhookStoreQueryFunc) appendCall(r0 OutboundWebhookStoreQueryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OutboundWebhookStoreQueryFuncCall objects
// describing the invocations of this function.
func (f *OutboundWebhookStoreQueryFunc) History() []OutboundWebhookStoreQueryFuncCall {
	f.mutex.Lock()
	history := make([]OutboundWebhookStoreQueryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OutboundWebhookStoreQueryFuncCall is an object that describes an
// invocation of method Query on an instance of MockOutboundWebhookStore.
type OutboundWebhookStoreQueryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sqlf.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *sql.Rows
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OutboundWebhookStoreQueryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OutboundWebhookStoreQueryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OutboundWebhookStoreToJobStoreFunc describes the behavior when the
// ToJobStore method of the parent MockOutboundWebhookStore instance is
// invoked.
type OutboundWebhookStoreToJobStoreFunc struct {
	defaultHook func() OutboundWebhookJobStore
	hooks       []func() OutboundWebhookJobStore
	history     []OutboundWebhookStoreToJobStoreFuncCall
	mutex       sync.Mutex
}

// ToJobStore delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockOutboundWebhookStore) ToJobStore() OutboundWebhookJobStore {
	r0 := m.ToJobStoreFunc.nextHook()()
	m.ToJobStoreFunc.appendCall(OutboundWebhookStoreToJobStoreFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ToJobStore method of
// the parent MockOutboundWebhookStore instance is invoked and the hook
// queue is empty.
func (f *OutboundWebhookStoreToJobStoreFunc) SetDefaultHook(hook func() OutboundWebhookJobStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ToJobStore method of the parent MockOutboundWebhookStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *OutboundWebhookStoreToJobStoreFunc) PushHook(hook func() OutboundWebhookJobStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OutboundWebhookStoreToJobStoreFunc) SetDefaultReturn(r0 OutboundWebhookJobStore) {
	f.SetDefaultHook(func() OutboundWebhookJobStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OutboundWebhookStoreToJobStoreFunc) PushReturn(r0 OutboundWebhookJobStore) {
	f.PushHook(func() OutboundWebhookJobStore {
		return r0
	})
}

func (f *OutboundWebhookStoreToJobStoreFunc) nextHook() func() OutboundWebhookJobStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OutboundWebhookStoreToJobStoreFunc) appendCall(r0 OutboundWebhookStoreToJobStoreFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OutboundWebhookStoreToJobStoreFuncCall
// objects describing the invocations of this function.
func (f *OutboundWebhookStoreToJobStoreFunc) History() []OutboundWebhookStoreToJobStoreFuncCall {
	f.mutex.Lock()
	history := make([]OutboundWebhookStoreToJobStoreFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OutboundWebhookStoreToJobStoreFuncCall is an object that describes an
// invocation of method ToJobStore on an instance of
// MockOutboundWebhookStore.
type OutboundWebhookStoreToJobStoreFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 OutboundWebhookJobStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OutboundWebhookStoreToJobStoreFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OutboundWebhookStoreToJobStoreFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OutboundWebhookStoreToLogStoreFunc describes the behavior when the
// ToLogStore method of the parent MockOutboundWebhookStore instance is
// invoked.
type OutboundWebhookStoreToLogStoreFunc struct {
	defaultHook func() OutboundWebhookLogStore
	hooks       []func() OutboundWebhookLogStore
	history     []OutboundWebhookStoreToLogStoreFuncCall
	mutex       sync.Mutex
}

// ToLogStore delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockOutboundWebhookStore) ToLogStore() OutboundWebhookLogStore {
	r0 := m.ToLogStoreFunc.nextHook()()
	m.ToLogStoreFunc.appendCall(OutboundWebhookStoreToLogStoreFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ToLogStore method of
// the parent MockOutboundWebhookStore instance is invoked and the hook
// queue is empty.
func (f *OutboundWebhookStoreToLogStoreFunc) SetDefaultHook(hook func() OutboundWebhookLogStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ToLogStore method of the parent MockOutboundWebhookStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *OutboundWebhookStoreToLogStoreFunc) PushHook(hook func() OutboundWebhookLogStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OutboundWebhookStoreToLogStoreFunc) SetDefaultReturn(r0 OutboundWebhookLogStore) {
	f.SetDefaultHook(func() OutboundWebhookLogStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OutboundWebhookStoreToLogStoreFunc) PushReturn(r0 OutboundWebhookLogStore) {
	f.PushHook(func() OutboundWebhookLogStore {
		return r0
	})
}

func (f *OutboundWebhookStoreToLogStoreFunc) nextHook() func() OutboundWebhookLogStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OutboundWebhookStoreToLogStoreFunc) appendCall(r0 OutboundWebhookStoreToLogStoreFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OutboundWebhookStoreToLogStoreFuncCall
// objects describing the invocations of this function.
func (f *OutboundWebhookStoreToLogStoreFunc) History() []OutboundWebhookStoreToLogStoreFuncCall {
	f.mutex.Lock()
	history := make([]OutboundWebhookStoreToLogStoreFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OutboundWebhookStoreToLogStoreFuncCall is an object that describes an
// invocation of method ToLogStore on an instance of
// MockOutboundWebhookStore.
type OutboundWebhookStoreToLogStoreFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 OutboundWebhookLogStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OutboundWebhookStoreToLogStoreFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OutboundWebhookStoreToLogStoreFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OutboundWebhookStoreTransactFunc describes the behavior when the Transact
// method of the parent MockOutboundWebhookStore instance is invoked.
type OutboundWebhookStoreTransactFunc struct {
	defaultHook func(context.Context) (OutboundWebhookStore, error)
	hooks       []func(context.Context) (OutboundWebhookStore, error)
	history     []OutboundWebhookStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOutboundWebhookStore) Transact(v0 context.Context) (OutboundWebhookStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(OutboundWebhookStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockOutboundWebhookStore instance is invoked and the hook
// queue is empty.
func (f *OutboundWebhookStoreTransactFunc) SetDefaultHook(hook func(context.Context) (OutboundWebhookStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockOutboundWebhookStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *OutboundWebhookStoreTransactFunc) PushHook(hook func(context.Context) (OutboundWebhookStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OutboundWebhookStoreTransactFunc) SetDefaultReturn(r0 OutboundWebhookStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (OutboundWebhookStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OutboundWebhookStoreTransactFunc) PushReturn(r0 OutboundWebhookStore, r1 error) {
	f.PushHook(func(context.Context) (OutboundWebhookStore, error) {
		return r0, r1
	})
}

func (f *OutboundWebhookStoreTransactFunc) nextHook() func(context.Context) (OutboundWebhookStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OutboundWebhookStoreTransactFunc) appendCall(r0 OutboundWebhookStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OutboundWebhookStoreTransactFuncCall
// objects describing the invocations of this function.
func (f *OutboundWebhookStoreTransactFunc) History() []OutboundWebhookStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]OutboundWebhookStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OutboundWebhookStoreTransactFuncCall is an object that describes an
// invocation of method Transact on an instance of MockOutboundWebhookStore.
type OutboundWebhookStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 OutboundWebhookStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OutboundWebhookStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OutboundWebhookStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OutboundWebhookStoreUpdateFunc describes the behavior when the Update
// method of the parent MockOutboundWebhookStore instance is invoked.
type OutboundWebhookStoreUpdateFunc struct {
	defaultHook func(context.Context, *types.OutboundWebhook) error
	hooks       []func(context.Context, *types.OutboundWebhook) error
	history     []OutboundWebhookStoreUpdateFuncCall
	mutex       sync.Mutex
}

// Update delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOutboundWebhookStore) Update(v0 context.Context, v1 *types.OutboundWebhook) error {
	r0 := m.UpdateFunc.nextHook()(v0, v1)
	m.UpdateFunc.appendCall(OutboundWebhookStoreUpdateFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Update method of the
// parent MockOutboundWebhookStore instance is invoked and the hook queue is
// empty.
func (f *OutboundWebhookStoreUpdateFunc) SetDefaultHook(hook func(context.Context, *types.OutboundWebhook) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Update method of the parent MockOutboundWebhookStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OutboundWebhookStoreUpdateFunc) PushHook(hook func(context.Context, *types.OutboundWebhook) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OutboundWebhookStoreUpdateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *types.OutboundWebhook) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OutboundWebhookStoreUpdateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *types.OutboundWebhook) error {
		return r0
	})
}

func (f *OutboundWebhookStoreUpdateFunc) nextHook() func(context.Context, *types.OutboundWebhook) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OutboundWebhookStoreUpdateFunc) appendCall(r0 OutboundWebhookStoreUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OutboundWebhookStoreUpdateFuncCall objects
// describing the invocations of this function.
func (f *OutboundWebhookStoreUpdateFunc) History() []OutboundWebhookStoreUpdateFuncCall {
	f.mutex.Lock()
	history := make([]OutboundWebhookStoreUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OutboundWebhookStoreUpdateFuncCall is an object that describes an
// invocation of method Update on an instance of MockOutboundWebhookStore.
type OutboundWebhookStoreUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.OutboundWebhook
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OutboundWebhookStoreUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OutboundWebhookStoreUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// OutboundWebhookStoreWithFunc describes the behavior when the With method
// of the parent MockOutboundWebhookStore instance is invoked.
type OutboundWebhookStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) OutboundWebhookStore
	hooks       []func(basestore.ShareableStore) OutboundWebhookStore
	history     []OutboundWebhookStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockOutboundWebhookStore) With(v0 basestore.ShareableStore) OutboundWebhookStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(OutboundWebhookStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockOutboundWebhookStore instance is invoked and the hook queue is
// empty.
func (f *OutboundWebhookStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) OutboundWebhookStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockOutboundWebhookStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *OutboundWebhookStoreWithFunc) PushHook(hook func(basestore.ShareableStore) OutboundWebhookStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OutboundWebhookStoreWithFunc) SetDefaultReturn(r0 OutboundWebhookStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) OutboundWebhookStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OutboundWebhookStoreWithFunc) PushReturn(r0 OutboundWebhookStore) {
	f.PushHook(func(basestore.ShareableStore) OutboundWebhookStore {
		return r0
	})
}

func (f *OutboundWebhookStoreWithFunc) nextHook() func(basestore.ShareableStore) OutboundWebhookStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OutboundWebhookStoreWithFunc) appendCall(r0 OutboundWebhookStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of OutboundWebhookStoreWithFuncCall objects
// describing the invocations of this function.
func (f *OutboundWebhookStoreWithFunc) History() []OutboundWebhookStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]OutboundWebhookStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OutboundWebhookStoreWithFuncCall is an object that describes an
// invocation of method With on an instance of MockOutboundWebhookStore.
type OutboundWebhookStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 OutboundWebhookStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OutboundWebhookStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OutboundWebhookStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockOwnershipStatsStore is a mock implementation of the
// OwnershipStatsStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockOwnershipStatsStore struct {
	// QueryAggregateCountsFunc is an instance of a mock function object
	// controlling the behavior of the method QueryAggregateCounts.
	QueryAggregateCountsFunc *OwnershipStatsStoreQueryAggregateCountsFunc
	// QueryIndividualCountsFunc is an instance of a mock function object
	// controlling the behavior of the method QueryIndividualCounts.
	QueryIndividualCountsFunc *OwnershipStatsStoreQueryIndividualCountsFunc
	// UpdateAggregateCountsFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateAggregateCounts.
	UpdateAggregateCountsFunc *OwnershipStatsStoreUpdateAggregateCountsFunc
	// UpdateIndividualCountsFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateIndividualCounts.
	UpdateIndividualCountsFunc *OwnershipStatsStoreUpdateIndividualCountsFunc
}

// NewMockOwnershipStatsStore creates a new mock of the OwnershipStatsStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockOwnershipStatsStore() *MockOwnershipStatsStore {
	return &MockOwnershipStatsStore{
		QueryAggregateCountsFunc: &OwnershipStatsStoreQueryAggregateCountsFunc{
			defaultHook: func(context.Context, TreeLocationOpts) (r0 []PathAggregateCounts, r1 error) {
				return
			},
		},
		QueryIndividualCountsFunc: &OwnershipStatsStoreQueryIndividualCountsFunc{
			defaultHook: func(context.Context, TreeLocationOpts, *LimitOffset) (r0 []PathCodeownersCounts, r1 error) {
				return
			},
		},
		UpdateAggregateCountsFunc: &OwnershipStatsStoreUpdateAggregateCountsFunc{
			defaultHook: func(context.Context, api.RepoID, TreeAggregateStats, time.Time) (r0 int, r1 error) {
				return
			},
		},
		UpdateIndividualCountsFunc: &OwnershipStatsStoreUpdateIndividualCountsFunc{
			defaultHook: func(context.Context, api.RepoID, TreeCodeownersStats, time.Time) (r0 int, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockOwnershipStatsStore creates a new mock of the
// OwnershipStatsStore interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockOwnershipStatsStore() *MockOwnershipStatsStore {
	return &MockOwnershipStatsStore{
		QueryAggregateCountsFunc: &OwnershipStatsStoreQueryAggregateCountsFunc{
			defaultHook: func(context.Context, TreeLocationOpts) ([]PathAggregateCounts, error) {
				panic("unexpected invocation of MockOwnershipStatsStore.QueryAggregateCounts")
			},
		},
		QueryIndividualCountsFunc: &OwnershipStatsStoreQueryIndividualCountsFunc{
			defaultHook: func(context.Context, TreeLocationOpts, *LimitOffset) ([]PathCodeownersCounts, error) {
				panic("unexpected invocation of MockOwnershipStatsStore.QueryIndividualCounts")
			},
		},
		UpdateAggregateCountsFunc: &OwnershipStatsStoreUpdateAggregateCountsFunc{
			defaultHook: func(context.Context, api.RepoID, TreeAggregateStats, time.Time) (int, error) {
				panic("unexpected invocation of MockOwnershipStatsStore.UpdateAggregateCounts")
			},
		},
		UpdateIndividualCountsFunc: &OwnershipStatsStoreUpdateIndividualCountsFunc{
			defaultHook: func(context.Context, api.RepoID, TreeCodeownersStats, time.Time) (int, error) {
				panic("unexpected invocation of MockOwnershipStatsStore.UpdateIndividualCounts")
			},
		},
	}
}

// NewMockOwnershipStatsStoreFrom creates a new mock of the
// MockOwnershipStatsStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockOwnershipStatsStoreFrom(i OwnershipStatsStore) *MockOwnershipStatsStore {
	return &MockOwnershipStatsStore{
		QueryAggregateCountsFunc: &OwnershipStatsStoreQueryAggregateCountsFunc{
			defaultHook: i.QueryAggregateCounts,
		},
		QueryIndividualCountsFunc: &OwnershipStatsStoreQueryIndividualCountsFunc{
			defaultHook: i.QueryIndividualCounts,
		},
		UpdateAggregateCountsFunc: &OwnershipStatsStoreUpdateAggregateCountsFunc{
			defaultHook: i.UpdateAggregateCounts,
		},
		UpdateIndividualCountsFunc: &OwnershipStatsStoreUpdateIndividualCountsFunc{
			defaultHook: i.UpdateIndividualCounts,
		},
	}
}

// OwnershipStatsStoreQueryAggregateCountsFunc describes the behavior when
// the QueryAggregateCounts method of the parent MockOwnershipStatsStore
// instance is invoked.
type OwnershipStatsStoreQueryAggregateCountsFunc struct {
	defaultHook func(context.Context, TreeLocationOpts) ([]PathAggregateCounts, error)
	hooks       []func(context.Context, TreeLocationOpts) ([]PathAggregateCounts, error)
	history     []OwnershipStatsStoreQueryAggregateCountsFuncCall
	mutex       sync.Mutex
}

// QueryAggregateCounts delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockOwnershipStatsStore) QueryAggregateCounts(v0 context.Context, v1 TreeLocationOpts) ([]PathAggregateCounts, error) {
	r0, r1 := m.QueryAggregateCountsFunc.nextHook()(v0, v1)
	m.QueryAggregateCountsFunc.appendCall(OwnershipStatsStoreQueryAggregateCountsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the QueryAggregateCounts
// method of the parent MockOwnershipStatsStore instance is invoked and the
// hook queue is empty.
func (f *OwnershipStatsStoreQueryAggregateCountsFunc) SetDefaultHook(hook func(context.Context, TreeLocationOpts) ([]PathAggregateCounts, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueryAggregateCounts method of the parent MockOwnershipStatsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *OwnershipStatsStoreQueryAggregateCountsFunc) PushHook(hook func(context.Context, TreeLocationOpts) ([]PathAggregateCounts, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OwnershipStatsStoreQueryAggregateCountsFunc) SetDefaultReturn(r0 []PathAggregateCounts, r1 error) {
	f.SetDefaultHook(func(context.Context, TreeLocationOpts) ([]PathAggregateCounts, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OwnershipStatsStoreQueryAggregateCountsFunc) PushReturn(r0 []PathAggregateCounts, r1 error) {
	f.PushHook(func(context.Context, TreeLocationOpts) ([]PathAggregateCounts, error) {
		return r0, r1
	})
}

func (f *OwnershipStatsStoreQueryAggregateCountsFunc) nextHook() func(context.Context, TreeLocationOpts) ([]PathAggregateCounts, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OwnershipStatsStoreQueryAggregateCountsFunc) appendCall(r0 OwnershipStatsStoreQueryAggregateCountsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// OwnershipStatsStoreQueryAggregateCountsFuncCall objects describing the
// invocations of this function.
func (f *OwnershipStatsStoreQueryAggregateCountsFunc) History() []OwnershipStatsStoreQueryAggregateCountsFuncCall {
	f.mutex.Lock()
	history := make([]OwnershipStatsStoreQueryAggregateCountsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OwnershipStatsStoreQueryAggregateCountsFuncCall is an object that
// describes an invocation of method QueryAggregateCounts on an instance of
// MockOwnershipStatsStore.
type OwnershipStatsStoreQueryAggregateCountsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 TreeLocationOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []PathAggregateCounts
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OwnershipStatsStoreQueryAggregateCountsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OwnershipStatsStoreQueryAggregateCountsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OwnershipStatsStoreQueryIndividualCountsFunc describes the behavior when
// the QueryIndividualCounts method of the parent MockOwnershipStatsStore
// instance is invoked.
type OwnershipStatsStoreQueryIndividualCountsFunc struct {
	defaultHook func(context.Context, TreeLocationOpts, *LimitOffset) ([]PathCodeownersCounts, error)
	hooks       []func(context.Context, TreeLocationOpts, *LimitOffset) ([]PathCodeownersCounts, error)
	history     []OwnershipStatsStoreQueryIndividualCountsFuncCall
	mutex       sync.Mutex
}

// QueryIndividualCounts delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockOwnershipStatsStore) QueryIndividualCounts(v0 context.Context, v1 TreeLocationOpts, v2 *LimitOffset) ([]PathCodeownersCounts, error) {
	r0, r1 := m.QueryIndividualCountsFunc.nextHook()(v0, v1, v2)
	m.QueryIndividualCountsFunc.appendCall(OwnershipStatsStoreQueryIndividualCountsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// QueryIndividualCounts method of the parent MockOwnershipStatsStore
// instance is invoked and the hook queue is empty.
func (f *OwnershipStatsStoreQueryIndividualCountsFunc) SetDefaultHook(hook func(context.Context, TreeLocationOpts, *LimitOffset) ([]PathCodeownersCounts, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueryIndividualCounts method of the parent MockOwnershipStatsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *OwnershipStatsStoreQueryIndividualCountsFunc) PushHook(hook func(context.Context, TreeLocationOpts, *LimitOffset) ([]PathCodeownersCounts, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OwnershipStatsStoreQueryIndividualCountsFunc) SetDefaultReturn(r0 []PathCodeownersCounts, r1 error) {
	f.SetDefaultHook(func(context.Context, TreeLocationOpts, *LimitOffset) ([]PathCodeownersCounts, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OwnershipStatsStoreQueryIndividualCountsFunc) PushReturn(r0 []PathCodeownersCounts, r1 error) {
	f.PushHook(func(context.Context, TreeLocationOpts, *LimitOffset) ([]PathCodeownersCounts, error) {
		return r0, r1
	})
}

func (f *OwnershipStatsStoreQueryIndividualCountsFunc) nextHook() func(context.Context, TreeLocationOpts, *LimitOffset) ([]PathCodeownersCounts, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OwnershipStatsStoreQueryIndividualCountsFunc) appendCall(r0 OwnershipStatsStoreQueryIndividualCountsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// OwnershipStatsStoreQueryIndividualCountsFuncCall objects describing the
// invocations of this function.
func (f *OwnershipStatsStoreQueryIndividualCountsFunc) History() []OwnershipStatsStoreQueryIndividualCountsFuncCall {
	f.mutex.Lock()
	history := make([]OwnershipStatsStoreQueryIndividualCountsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OwnershipStatsStoreQueryIndividualCountsFuncCall is an object that
// describes an invocation of method QueryIndividualCounts on an instance of
// MockOwnershipStatsStore.
type OwnershipStatsStoreQueryIndividualCountsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 TreeLocationOpts
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *LimitOffset
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []PathCodeownersCounts
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OwnershipStatsStoreQueryIndividualCountsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OwnershipStatsStoreQueryIndividualCountsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OwnershipStatsStoreUpdateAggregateCountsFunc describes the behavior when
// the UpdateAggregateCounts method of the parent MockOwnershipStatsStore
// instance is invoked.
type OwnershipStatsStoreUpdateAggregateCountsFunc struct {
	defaultHook func(context.Context, api.RepoID, TreeAggregateStats, time.Time) (int, error)
	hooks       []func(context.Context, api.RepoID, TreeAggregateStats, time.Time) (int, error)
	history     []OwnershipStatsStoreUpdateAggregateCountsFuncCall
	mutex       sync.Mutex
}

// UpdateAggregateCounts delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockOwnershipStatsStore) UpdateAggregateCounts(v0 context.Context, v1 api.RepoID, v2 TreeAggregateStats, v3 time.Time) (int, error) {
	r0, r1 := m.UpdateAggregateCountsFunc.nextHook()(v0, v1, v2, v3)
	m.UpdateAggregateCountsFunc.appendCall(OwnershipStatsStoreUpdateAggregateCountsFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// UpdateAggregateCounts method of the parent MockOwnershipStatsStore
// instance is invoked and the hook queue is empty.
func (f *OwnershipStatsStoreUpdateAggregateCountsFunc) SetDefaultHook(hook func(context.Context, api.RepoID, TreeAggregateStats, time.Time) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateAggregateCounts method of the parent MockOwnershipStatsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *OwnershipStatsStoreUpdateAggregateCountsFunc) PushHook(hook func(context.Context, api.RepoID, TreeAggregateStats, time.Time) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OwnershipStatsStoreUpdateAggregateCountsFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoID, TreeAggregateStats, time.Time) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OwnershipStatsStoreUpdateAggregateCountsFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, api.RepoID, TreeAggregateStats, time.Time) (int, error) {
		return r0, r1
	})
}

func (f *OwnershipStatsStoreUpdateAggregateCountsFunc) nextHook() func(context.Context, api.RepoID, TreeAggregateStats, time.Time) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OwnershipStatsStoreUpdateAggregateCountsFunc) appendCall(r0 OwnershipStatsStoreUpdateAggregateCountsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// OwnershipStatsStoreUpdateAggregateCountsFuncCall objects describing the
// invocations of this function.
func (f *OwnershipStatsStoreUpdateAggregateCountsFunc) History() []OwnershipStatsStoreUpdateAggregateCountsFuncCall {
	f.mutex.Lock()
	history := make([]OwnershipStatsStoreUpdateAggregateCountsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OwnershipStatsStoreUpdateAggregateCountsFuncCall is an object that
// describes an invocation of method UpdateAggregateCounts on an instance of
// MockOwnershipStatsStore.
type OwnershipStatsStoreUpdateAggregateCountsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoID
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 TreeAggregateStats
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OwnershipStatsStoreUpdateAggregateCountsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OwnershipStatsStoreUpdateAggregateCountsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// OwnershipStatsStoreUpdateIndividualCountsFunc describes the behavior when
// the UpdateIndividualCounts method of the parent MockOwnershipStatsStore
// instance is invoked.
type OwnershipStatsStoreUpdateIndividualCountsFunc struct {
	defaultHook func(context.Context, api.RepoID, TreeCodeownersStats, time.Time) (int, error)
	hooks       []func(context.Context, api.RepoID, TreeCodeownersStats, time.Time) (int, error)
	history     []OwnershipStatsStoreUpdateIndividualCountsFuncCall
	mutex       sync.Mutex
}

// UpdateIndividualCounts delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockOwnershipStatsStore) UpdateIndividualCounts(v0 context.Context, v1 api.RepoID, v2 TreeCodeownersStats, v3 time.Time) (int, error) {
	r0, r1 := m.UpdateIndividualCountsFunc.nextHook()(v0, v1, v2, v3)
	m.UpdateIndividualCountsFunc.appendCall(OwnershipStatsStoreUpdateIndividualCountsFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// UpdateIndividualCounts method of the parent MockOwnershipStatsStore
// instance is invoked and the hook queue is empty.
func (f *OwnershipStatsStoreUpdateIndividualCountsFunc) SetDefaultHook(hook func(context.Context, api.RepoID, TreeCodeownersStats, time.Time) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateIndividualCounts method of the parent MockOwnershipStatsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *OwnershipStatsStoreUpdateIndividualCountsFunc) PushHook(hook func(context.Context, api.RepoID, TreeCodeownersStats, time.Time) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *OwnershipStatsStoreUpdateIndividualCountsFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoID, TreeCodeownersStats, time.Time) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *OwnershipStatsStoreUpdateIndividualCountsFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, api.RepoID, TreeCodeownersStats, time.Time) (int, error) {
		return r0, r1
	})
}

func (f *OwnershipStatsStoreUpdateIndividualCountsFunc) nextHook() func(context.Context, api.RepoID, TreeCodeownersStats, time.Time) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *OwnershipStatsStoreUpdateIndividualCountsFunc) appendCall(r0 OwnershipStatsStoreUpdateIndividualCountsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// OwnershipStatsStoreUpdateIndividualCountsFuncCall objects describing the
// invocations of this function.
func (f *OwnershipStatsStoreUpdateIndividualCountsFunc) History() []OwnershipStatsStoreUpdateIndividualCountsFuncCall {
	f.mutex.Lock()
	history := make([]OwnershipStatsStoreUpdateIndividualCountsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// OwnershipStatsStoreUpdateIndividualCountsFuncCall is an object that
// describes an invocation of method UpdateIndividualCounts on an instance
// of MockOwnershipStatsStore.
type OwnershipStatsStoreUpdateIndividualCountsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoID
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 TreeCodeownersStats
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c OwnershipStatsStoreUpdateIndividualCountsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c OwnershipStatsStoreUpdateIndividualCountsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockPermissionStore is a mock implementation of the PermissionStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockPermissionStore struct {
	// BulkCreateFunc is an instance of a mock function object controlling
	// the behavior of the method BulkCreate.
	BulkCreateFunc *PermissionStoreBulkCreateFunc
	// BulkDeleteFunc is an instance of a mock function object controlling
	// the behavior of the method BulkDelete.
	BulkDeleteFunc *PermissionStoreBulkDeleteFunc
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *PermissionStoreCountFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *PermissionStoreCreateFunc
	// DeleteFunc is an instance of a mock function object controlling the
	// behavior of the method Delete.
	DeleteFunc *PermissionStoreDeleteFunc
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *PermissionStoreGetByIDFunc
	// GetPermissionForUserFunc is an instance of a mock function object
	// controlling the behavior of the method GetPermissionForUser.
	GetPermissionForUserFunc *PermissionStoreGetPermissionForUserFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *PermissionStoreHandleFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *PermissionStoreListFunc
	// WithTransactFunc is an instance of a mock function object controlling
	// the behavior of the method WithTransact.
	WithTransactFunc *PermissionStoreWithTransactFunc
}

// NewMockPermissionStore creates a new mock of the PermissionStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockPermissionStore() *MockPermissionStore {
	return &MockPermissionStore{
		BulkCreateFunc: &PermissionStoreBulkCreateFunc{
			defaultHook: func(context.Context, []CreatePermissionOpts) (r0 []*types.Permission, r1 error) {
				return
			},
		},
		BulkDeleteFunc: &PermissionStoreBulkDeleteFunc{
			defaultHook: func(context.Context, []DeletePermissionOpts) (r0 error) {
				return
			},
		},
		CountFunc: &PermissionStoreCountFunc{
			defaultHook: func(context.Context, PermissionListOpts) (r0 int, r1 error) {
				return
			},
		},
		CreateFunc: &PermissionStoreCreateFunc{
			defaultHook: func(context.Context, CreatePermissionOpts) (r0 *types.Permission, r1 error) {
				return
			},
		},
		DeleteFunc: &PermissionStoreDeleteFunc{
			defaultHook: func(context.Context, DeletePermissionOpts) (r0 error) {
				return
			},
		},
		GetByIDFunc: &PermissionStoreGetByIDFunc{
			defaultHook: func(context.Context, GetPermissionOpts) (r0 *types.Permission, r1 error) {
				return
			},
		},
		GetPermissionForUserFunc: &PermissionStoreGetPermissionForUserFunc{
			defaultHook: func(context.Context, GetPermissionForUserOpts) (r0 *types.Permission, r1 error) {
				return
			},
		},
		HandleFunc: &PermissionStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		ListFunc: &PermissionStoreListFunc{
			defaultHook: func(context.Context, PermissionListOpts) (r0 []*types.Permission, r1 error) {
				return
			},
		},
		WithTransactFunc: &PermissionStoreWithTransactFunc{
			defaultHook: func(context.Context, func(PermissionStore) error) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockPermissionStore creates a new mock of the PermissionStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockPermissionStore() *MockPermissionStore {
	return &MockPermissionStore{
		BulkCreateFunc: &PermissionStoreBulkCreateFunc{
			defaultHook: func(context.Context, []CreatePermissionOpts) ([]*types.Permission, error) {
				panic("unexpected invocation of MockPermissionStore.BulkCreate")
			},
		},
		BulkDeleteFunc: &PermissionStoreBulkDeleteFunc{
			defaultHook: func(context.Context, []DeletePermissionOpts) error {
				panic("unexpected invocation of MockPermissionStore.BulkDelete")
			},
		},
		CountFunc: &PermissionStoreCountFunc{
			defaultHook: func(context.Context, PermissionListOpts) (int, error) {
				panic("unexpected invocation of MockPermissionStore.Count")
			},
		},
		CreateFunc: &PermissionStoreCreateFunc{
			defaultHook: func(context.Context, CreatePermissionOpts) (*types.Permission, error) {
				panic("unexpected invocation of MockPermissionStore.Create")
			},
		},
		DeleteFunc: &PermissionStoreDeleteFunc{
			defaultHook: func(context.Context, DeletePermissionOpts) error {
				panic("unexpected invocation of MockPermissionStore.Delete")
			},
		},
		GetByIDFunc: &PermissionStoreGetByIDFunc{
			defaultHook: func(context.Context, GetPermissionOpts) (*types.Permission, error) {
				panic("unexpected invocation of MockPermissionStore.GetByID")
			},
		},
		GetPermissionForUserFunc: &PermissionStoreGetPermissionForUserFunc{
			defaultHook: func(context.Context, GetPermissionForUserOpts) (*types.Permission, error) {
				panic("unexpected invocation of MockPermissionStore.GetPermissionForUser")
			},
		},
		HandleFunc: &PermissionStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockPermissionStore.Handle")
			},
		},
		ListFunc: &PermissionStoreListFunc{
			defaultHook: func(context.Context, PermissionListOpts) ([]*types.Permission, error) {
				panic("unexpected invocation of MockPermissionStore.List")
			},
		},
		WithTransactFunc: &PermissionStoreWithTransactFunc{
			defaultHook: func(context.Context, func(PermissionStore) error) error {
				panic("unexpected invocation of MockPermissionStore.WithTransact")
			},
		},
	}
}

// NewMockPermissionStoreFrom creates a new mock of the MockPermissionStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockPermissionStoreFrom(i PermissionStore) *MockPermissionStore {
	return &MockPermissionStore{
		BulkCreateFunc: &PermissionStoreBulkCreateFunc{
			defaultHook: i.BulkCreate,
		},
		BulkDeleteFunc: &PermissionStoreBulkDeleteFunc{
			defaultHook: i.BulkDelete,
		},
		CountFunc: &PermissionStoreCountFunc{
			defaultHook: i.Count,
		},
		CreateFunc: &PermissionStoreCreateFunc{
			defaultHook: i.Create,
		},
		DeleteFunc: &PermissionStoreDeleteFunc{
			defaultHook: i.Delete,
		},
		GetByIDFunc: &PermissionStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		GetPermissionForUserFunc: &PermissionStoreGetPermissionForUserFunc{
			defaultHook: i.GetPermissionForUser,
		},
		HandleFunc: &PermissionStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListFunc: &PermissionStoreListFunc{
			defaultHook: i.List,
		},
		WithTransactFunc: &PermissionStoreWithTransactFunc{
			defaultHook: i.WithTransact,
		},
	}
}

// PermissionStoreBulkCreateFunc describes the behavior when the BulkCreate
// method of the parent MockPermissionStore instance is invoked.
type PermissionStoreBulkCreateFunc struct {
	defaultHook func(context.Context, []CreatePermissionOpts) ([]*types.Permission, error)
	hooks       []func(context.Context, []CreatePermissionOpts) ([]*types.Permission, error)
	history     []PermissionStoreBulkCreateFuncCall
	mutex       sync.Mutex
}

// BulkCreate delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockPermissionStore) BulkCreate(v0 context.Context, v1 []CreatePermissionOpts) ([]*types.Permission, error) {
	r0, r1 := m.BulkCreateFunc.nextHook()(v0, v1)
	m.BulkCreateFunc.appendCall(PermissionStoreBulkCreateFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the BulkCreate method of
// the parent MockPermissionStore instance is invoked and the hook queue is
// empty.
func (f *PermissionStoreBulkCreateFunc) SetDefaultHook(hook func(context.Context, []CreatePermissionOpts) ([]*types.Permission, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BulkCreate method of the parent MockPermissionStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *PermissionStoreBulkCreateFunc) PushHook(hook func(context.Context, []CreatePermissionOpts) ([]*types.Permission, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermissionStoreBulkCreateFunc) SetDefaultReturn(r0 []*types.Permission, r1 error) {
	f.SetDefaultHook(func(context.Context, []CreatePermissionOpts) ([]*types.Permission, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermissionStoreBulkCreateFunc) PushReturn(r0 []*types.Permission, r1 error) {
	f.PushHook(func(context.Context, []CreatePermissionOpts) ([]*types.Permission, error) {
		return r0, r1
	})
}

func (f *PermissionStoreBulkCreateFunc) nextHook() func(context.Context, []CreatePermissionOpts) ([]*types.Permission, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermissionStoreBulkCreateFunc) appendCall(r0 PermissionStoreBulkCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermissionStoreBulkCreateFuncCall objects
// describing the invocations of this function.
func (f *PermissionStoreBulkCreateFunc) History() []PermissionStoreBulkCreateFuncCall {
	f.mutex.Lock()
	history := make([]PermissionStoreBulkCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermissionStoreBulkCreateFuncCall is an object that describes an
// invocation of method BulkCreate on an instance of MockPermissionStore.
type PermissionStoreBulkCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []CreatePermissionOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.Permission
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermissionStoreBulkCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermissionStoreBulkCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermissionStoreBulkDeleteFunc describes the behavior when the BulkDelete
// method of the parent MockPermissionStore instance is invoked.
type PermissionStoreBulkDeleteFunc struct {
	defaultHook func(context.Context, []DeletePermissionOpts) error
	hooks       []func(context.Context, []DeletePermissionOpts) error
	history     []PermissionStoreBulkDeleteFuncCall
	mutex       sync.Mutex
}

// BulkDelete delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockPermissionStore) BulkDelete(v0 context.Context, v1 []DeletePermissionOpts) error {
	r0 := m.BulkDeleteFunc.nextHook()(v0, v1)
	m.BulkDeleteFunc.appendCall(PermissionStoreBulkDeleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the BulkDelete method of
// the parent MockPermissionStore instance is invoked and the hook queue is
// empty.
func (f *PermissionStoreBulkDeleteFunc) SetDefaultHook(hook func(context.Context, []DeletePermissionOpts) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BulkDelete method of the parent MockPermissionStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *PermissionStoreBulkDeleteFunc) PushHook(hook func(context.Context, []DeletePermissionOpts) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermissionStoreBulkDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []DeletePermissionOpts) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermissionStoreBulkDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []DeletePermissionOpts) error {
		return r0
	})
}

func (f *PermissionStoreBulkDeleteFunc) nextHook() func(context.Context, []DeletePermissionOpts) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermissionStoreBulkDeleteFunc) appendCall(r0 PermissionStoreBulkDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermissionStoreBulkDeleteFuncCall objects
// describing the invocations of this function.
func (f *PermissionStoreBulkDeleteFunc) History() []PermissionStoreBulkDeleteFuncCall {
	f.mutex.Lock()
	history := make([]PermissionStoreBulkDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermissionStoreBulkDeleteFuncCall is an object that describes an
// invocation of method BulkDelete on an instance of MockPermissionStore.
type PermissionStoreBulkDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []DeletePermissionOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermissionStoreBulkDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermissionStoreBulkDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// PermissionStoreCountFunc describes the behavior when the Count method of
// the parent MockPermissionStore instance is invoked.
type PermissionStoreCountFunc struct {
	defaultHook func(context.Context, PermissionListOpts) (int, error)
	hooks       []func(context.Context, PermissionListOpts) (int, error)
	history     []PermissionStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPermissionStore) Count(v0 context.Context, v1 PermissionListOpts) (int, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(PermissionStoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockPermissionStore instance is invoked and the hook queue is
// empty.
func (f *PermissionStoreCountFunc) SetDefaultHook(hook func(context.Context, PermissionListOpts) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockPermissionStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *PermissionStoreCountFunc) PushHook(hook func(context.Context, PermissionListOpts) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermissionStoreCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, PermissionListOpts) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermissionStoreCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, PermissionListOpts) (int, error) {
		return r0, r1
	})
}

func (f *PermissionStoreCountFunc) nextHook() func(context.Context, PermissionListOpts) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermissionStoreCountFunc) appendCall(r0 PermissionStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermissionStoreCountFuncCall objects
// describing the invocations of this function.
func (f *PermissionStoreCountFunc) History() []PermissionStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]PermissionStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermissionStoreCountFuncCall is an object that describes an invocation of
// method Count on an instance of MockPermissionStore.
type PermissionStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 PermissionListOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermissionStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermissionStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermissionStoreCreateFunc describes the behavior when the Create method
// of the parent MockPermissionStore instance is invoked.
type PermissionStoreCreateFunc struct {
	defaultHook func(context.Context, CreatePermissionOpts) (*types.Permission, error)
	hooks       []func(context.Context, CreatePermissionOpts) (*types.Permission, error)
	history     []PermissionStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPermissionStore) Create(v0 context.Context, v1 CreatePermissionOpts) (*types.Permission, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1)
	m.CreateFunc.appendCall(PermissionStoreCreateFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockPermissionStore instance is invoked and the hook queue is
// empty.
func (f *PermissionStoreCreateFunc) SetDefaultHook(hook func(context.Context, CreatePermissionOpts) (*types.Permission, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockPermissionStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *PermissionStoreCreateFunc) PushHook(hook func(context.Context, CreatePermissionOpts) (*types.Permission, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermissionStoreCreateFunc) SetDefaultReturn(r0 *types.Permission, r1 error) {
	f.SetDefaultHook(func(context.Context, CreatePermissionOpts) (*types.Permission, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermissionStoreCreateFunc) PushReturn(r0 *types.Permission, r1 error) {
	f.PushHook(func(context.Context, CreatePermissionOpts) (*types.Permission, error) {
		return r0, r1
	})
}

func (f *PermissionStoreCreateFunc) nextHook() func(context.Context, CreatePermissionOpts) (*types.Permission, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermissionStoreCreateFunc) appendCall(r0 PermissionStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermissionStoreCreateFuncCall objects
// describing the invocations of this function.
func (f *PermissionStoreCreateFunc) History() []PermissionStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]PermissionStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermissionStoreCreateFuncCall is an object that describes an invocation
// of method Create on an instance of MockPermissionStore.
type PermissionStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 CreatePermissionOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Permission
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermissionStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermissionStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermissionStoreDeleteFunc describes the behavior when the Delete method
// of the parent MockPermissionStore instance is invoked.
type PermissionStoreDeleteFunc struct {
	defaultHook func(context.Context, DeletePermissionOpts) error
	hooks       []func(context.Context, DeletePermissionOpts) error
	history     []PermissionStoreDeleteFuncCall
	mutex       sync.Mutex
}

// Delete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPermissionStore) Delete(v0 context.Context, v1 DeletePermissionOpts) error {
	r0 := m.DeleteFunc.nextHook()(v0, v1)
	m.DeleteFunc.appendCall(PermissionStoreDeleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Delete method of the
// parent MockPermissionStore instance is invoked and the hook queue is
// empty.
func (f *PermissionStoreDeleteFunc) SetDefaultHook(hook func(context.Context, DeletePermissionOpts) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Delete method of the parent MockPermissionStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *PermissionStoreDeleteFunc) PushHook(hook func(context.Context, DeletePermissionOpts) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermissionStoreDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, DeletePermissionOpts) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermissionStoreDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, DeletePermissionOpts) error {
		return r0
	})
}

func (f *PermissionStoreDeleteFunc) nextHook() func(context.Context, DeletePermissionOpts) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermissionStoreDeleteFunc) appendCall(r0 PermissionStoreDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermissionStoreDeleteFuncCall objects
// describing the invocations of this function.
func (f *PermissionStoreDeleteFunc) History() []PermissionStoreDeleteFuncCall {
	f.mutex.Lock()
	history := make([]PermissionStoreDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermissionStoreDeleteFuncCall is an object that describes an invocation
// of method Delete on an instance of MockPermissionStore.
type PermissionStoreDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 DeletePermissionOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermissionStoreDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermissionStoreDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// PermissionStoreGetByIDFunc describes the behavior when the GetByID method
// of the parent MockPermissionStore instance is invoked.
type PermissionStoreGetByIDFunc struct {
	defaultHook func(context.Context, GetPermissionOpts) (*types.Permission, error)
	hooks       []func(context.Context, GetPermissionOpts) (*types.Permission, error)
	history     []PermissionStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPermissionStore) GetByID(v0 context.Context, v1 GetPermissionOpts) (*types.Permission, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(PermissionStoreGetByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockPermissionStore instance is invoked and the hook queue is
// empty.
func (f *PermissionStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, GetPermissionOpts) (*types.Permission, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockPermissionStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *PermissionStoreGetByIDFunc) PushHook(hook func(context.Context, GetPermissionOpts) (*types.Permission, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermissionStoreGetByIDFunc) SetDefaultReturn(r0 *types.Permission, r1 error) {
	f.SetDefaultHook(func(context.Context, GetPermissionOpts) (*types.Permission, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermissionStoreGetByIDFunc) PushReturn(r0 *types.Permission, r1 error) {
	f.PushHook(func(context.Context, GetPermissionOpts) (*types.Permission, error) {
		return r0, r1
	})
}

func (f *PermissionStoreGetByIDFunc) nextHook() func(context.Context, GetPermissionOpts) (*types.Permission, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermissionStoreGetByIDFunc) appendCall(r0 PermissionStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermissionStoreGetByIDFuncCall objects
// describing the invocations of this function.
func (f *PermissionStoreGetByIDFunc) History() []PermissionStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]PermissionStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermissionStoreGetByIDFuncCall is an object that describes an invocation
// of method GetByID on an instance of MockPermissionStore.
type PermissionStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 GetPermissionOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Permission
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermissionStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermissionStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermissionStoreGetPermissionForUserFunc describes the behavior when the
// GetPermissionForUser method of the parent MockPermissionStore instance is
// invoked.
type PermissionStoreGetPermissionForUserFunc struct {
	defaultHook func(context.Context, GetPermissionForUserOpts) (*types.Permission, error)
	hooks       []func(context.Context, GetPermissionForUserOpts) (*types.Permission, error)
	history     []PermissionStoreGetPermissionForUserFuncCall
	mutex       sync.Mutex
}

// GetPermissionForUser delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockPermissionStore) GetPermissionForUser(v0 context.Context, v1 GetPermissionForUserOpts) (*types.Permission, error) {
	r0, r1 := m.GetPermissionForUserFunc.nextHook()(v0, v1)
	m.GetPermissionForUserFunc.appendCall(PermissionStoreGetPermissionForUserFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetPermissionForUser
// method of the parent MockPermissionStore instance is invoked and the hook
// queue is empty.
func (f *PermissionStoreGetPermissionForUserFunc) SetDefaultHook(hook func(context.Context, GetPermissionForUserOpts) (*types.Permission, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPermissionForUser method of the parent MockPermissionStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *PermissionStoreGetPermissionForUserFunc) PushHook(hook func(context.Context, GetPermissionForUserOpts) (*types.Permission, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermissionStoreGetPermissionForUserFunc) SetDefaultReturn(r0 *types.Permission, r1 error) {
	f.SetDefaultHook(func(context.Context, GetPermissionForUserOpts) (*types.Permission, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermissionStoreGetPermissionForUserFunc) PushReturn(r0 *types.Permission, r1 error) {
	f.PushHook(func(context.Context, GetPermissionForUserOpts) (*types.Permission, error) {
		return r0, r1
	})
}

func (f *PermissionStoreGetPermissionForUserFunc) nextHook() func(context.Context, GetPermissionForUserOpts) (*types.Permission, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermissionStoreGetPermissionForUserFunc) appendCall(r0 PermissionStoreGetPermissionForUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermissionStoreGetPermissionForUserFuncCall
// objects describing the invocations of this function.
func (f *PermissionStoreGetPermissionForUserFunc) History() []PermissionStoreGetPermissionForUserFuncCall {
	f.mutex.Lock()
	history := make([]PermissionStoreGetPermissionForUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermissionStoreGetPermissionForUserFuncCall is an object that describes
// an invocation of method GetPermissionForUser on an instance of
// MockPermissionStore.
type PermissionStoreGetPermissionForUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 GetPermissionForUserOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Permission
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermissionStoreGetPermissionForUserFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermissionStoreGetPermissionForUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermissionStoreHandleFunc describes the behavior when the Handle method
// of the parent MockPermissionStore instance is invoked.
type PermissionStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []PermissionStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPermissionStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(PermissionStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockPermissionStore instance is invoked and the hook queue is
// empty.
func (f *PermissionStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockPermissionStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *PermissionStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermissionStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermissionStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *PermissionStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermissionStoreHandleFunc) appendCall(r0 PermissionStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermissionStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *PermissionStoreHandleFunc) History() []PermissionStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]PermissionStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermissionStoreHandleFuncCall is an object that describes an invocation
// of method Handle on an instance of MockPermissionStore.
type PermissionStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermissionStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermissionStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// PermissionStoreListFunc describes the behavior when the List method of
// the parent MockPermissionStore instance is invoked.
type PermissionStoreListFunc struct {
	defaultHook func(context.Context, PermissionListOpts) ([]*types.Permission, error)
	hooks       []func(context.Context, PermissionListOpts) ([]*types.Permission, error)
	history     []PermissionStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPermissionStore) List(v0 context.Context, v1 PermissionListOpts) ([]*types.Permission, error) {
	r0, r1 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(PermissionStoreListFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockPermissionStore instance is invoked and the hook queue is
// empty.
func (f *PermissionStoreListFunc) SetDefaultHook(hook func(context.Context, PermissionListOpts) ([]*types.Permission, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockPermissionStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *PermissionStoreListFunc) PushHook(hook func(context.Context, PermissionListOpts) ([]*types.Permission, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermissionStoreListFunc) SetDefaultReturn(r0 []*types.Permission, r1 error) {
	f.SetDefaultHook(func(context.Context, PermissionListOpts) ([]*types.Permission, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermissionStoreListFunc) PushReturn(r0 []*types.Permission, r1 error) {
	f.PushHook(func(context.Context, PermissionListOpts) ([]*types.Permission, error) {
		return r0, r1
	})
}

func (f *PermissionStoreListFunc) nextHook() func(context.Context, PermissionListOpts) ([]*types.Permission, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermissionStoreListFunc) appendCall(r0 PermissionStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermissionStoreListFuncCall objects
// describing the invocations of this function.
func (f *PermissionStoreListFunc) History() []PermissionStoreListFuncCall {
	f.mutex.Lock()
	history := make([]PermissionStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermissionStoreListFuncCall is an object that describes an invocation of
// method List on an instance of MockPermissionStore.
type PermissionStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 PermissionListOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.Permission
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermissionStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermissionStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermissionStoreWithTransactFunc describes the behavior when the
// WithTransact method of the parent MockPermissionStore instance is
// invoked.
type PermissionStoreWithTransactFunc struct {
	defaultHook func(context.Context, func(PermissionStore) error) error
	hooks       []func(context.Context, func(PermissionStore) error) error
	history     []PermissionStoreWithTransactFuncCall
	mutex       sync.Mutex
}

// WithTransact delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockPermissionStore) WithTransact(v0 context.Context, v1 func(PermissionStore) error) error {
	r0 := m.WithTransactFunc.nextHook()(v0, v1)
	m.WithTransactFunc.appendCall(PermissionStoreWithTransactFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithTransact method
// of the parent MockPermissionStore instance is invoked and the hook queue
// is empty.
func (f *PermissionStoreWithTransactFunc) SetDefaultHook(hook func(context.Context, func(PermissionStore) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithTransact method of the parent MockPermissionStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *PermissionStoreWithTransactFunc) PushHook(hook func(context.Context, func(PermissionStore) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermissionStoreWithTransactFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, func(PermissionStore) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermissionStoreWithTransactFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, func(PermissionStore) error) error {
		return r0
	})
}

func (f *PermissionStoreWithTransactFunc) nextHook() func(context.Context, func(PermissionStore) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermissionStoreWithTransactFunc) appendCall(r0 PermissionStoreWithTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermissionStoreWithTransactFuncCall objects
// describing the invocations of this function.
func (f *PermissionStoreWithTransactFunc) History() []PermissionStoreWithTransactFuncCall {
	f.mutex.Lock()
	history := make([]PermissionStoreWithTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermissionStoreWithTransactFuncCall is an object that describes an
// invocation of method WithTransact on an instance of MockPermissionStore.
type PermissionStoreWithTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 func(PermissionStore) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermissionStoreWithTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermissionStoreWithTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockPermissionSyncJobStore is a mock implementation of the
// PermissionSyncJobStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockPermissionSyncJobStore struct {
	// CancelQueuedJobFunc is an instance of a mock function object
	// controlling the behavior of the method CancelQueuedJob.
	CancelQueuedJobFunc *PermissionSyncJobStoreCancelQueuedJobFunc
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *PermissionSyncJobStoreCountFunc
	// CountReposWithFailingSyncJobFunc is an instance of a mock function
	// object controlling the behavior of the method
	// CountReposWithFailingSyncJob.
	CountReposWithFailingSyncJobFunc *PermissionSyncJobStoreCountReposWithFailingSyncJobFunc
	// CountUsersWithFailingSyncJobFunc is an instance of a mock function
	// object controlling the behavior of the method
	// CountUsersWithFailingSyncJob.
	CountUsersWithFailingSyncJobFunc *PermissionSyncJobStoreCountUsersWithFailingSyncJobFunc
	// CreateRepoSyncJobFunc is an instance of a mock function object
	// controlling the behavior of the method CreateRepoSyncJob.
	CreateRepoSyncJobFunc *PermissionSyncJobStoreCreateRepoSyncJobFunc
	// CreateUserSyncJobFunc is an instance of a mock function object
	// controlling the behavior of the method CreateUserSyncJob.
	CreateUserSyncJobFunc *PermissionSyncJobStoreCreateUserSyncJobFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *PermissionSyncJobStoreDoneFunc
	// GetLatestFinishedSyncJobFunc is an instance of a mock function object
	// controlling the behavior of the method GetLatestFinishedSyncJob.
	GetLatestFinishedSyncJobFunc *PermissionSyncJobStoreGetLatestFinishedSyncJobFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *PermissionSyncJobStoreHandleFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *PermissionSyncJobStoreListFunc
	// SaveSyncResultFunc is an instance of a mock function object
	// controlling the behavior of the method SaveSyncResult.
	SaveSyncResultFunc *PermissionSyncJobStoreSaveSyncResultFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *PermissionSyncJobStoreTransactFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *PermissionSyncJobStoreWithFunc
}

// NewMockPermissionSyncJobStore creates a new mock of the
// PermissionSyncJobStore interface. All methods return zero values for all
// results, unless overwritten.
func NewMockPermissionSyncJobStore() *MockPermissionSyncJobStore {
	return &MockPermissionSyncJobStore{
		CancelQueuedJobFunc: &PermissionSyncJobStoreCancelQueuedJobFunc{
			defaultHook: func(context.Context, string, int) (r0 error) {
				return
			},
		},
		CountFunc: &PermissionSyncJobStoreCountFunc{
			defaultHook: func(context.Context, ListPermissionSyncJobOpts) (r0 int, r1 error) {
				return
			},
		},
		CountReposWithFailingSyncJobFunc: &PermissionSyncJobStoreCountReposWithFailingSyncJobFunc{
			defaultHook: func(context.Context) (r0 int32, r1 error) {
				return
			},
		},
		CountUsersWithFailingSyncJobFunc: &PermissionSyncJobStoreCountUsersWithFailingSyncJobFunc{
			defaultHook: func(context.Context) (r0 int32, r1 error) {
				return
			},
		},
		CreateRepoSyncJobFunc: &PermissionSyncJobStoreCreateRepoSyncJobFunc{
			defaultHook: func(context.Context, api.RepoID, PermissionSyncJobOpts) (r0 error) {
				return
			},
		},
		CreateUserSyncJobFunc: &PermissionSyncJobStoreCreateUserSyncJobFunc{
			defaultHook: func(context.Context, int32, PermissionSyncJobOpts) (r0 error) {
				return
			},
		},
		DoneFunc: &PermissionSyncJobStoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		GetLatestFinishedSyncJobFunc: &PermissionSyncJobStoreGetLatestFinishedSyncJobFunc{
			defaultHook: func(context.Context, ListPermissionSyncJobOpts) (r0 *PermissionSyncJob, r1 error) {
				return
			},
		},
		HandleFunc: &PermissionSyncJobStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		ListFunc: &PermissionSyncJobStoreListFunc{
			defaultHook: func(context.Context, ListPermissionSyncJobOpts) (r0 []*PermissionSyncJob, r1 error) {
				return
			},
		},
		SaveSyncResultFunc: &PermissionSyncJobStoreSaveSyncResultFunc{
			defaultHook: func(context.Context, int, bool, *SetPermissionsResult, CodeHostStatusesSet) (r0 error) {
				return
			},
		},
		TransactFunc: &PermissionSyncJobStoreTransactFunc{
			defaultHook: func(context.Context) (r0 PermissionSyncJobStore, r1 error) {
				return
			},
		},
		WithFunc: &PermissionSyncJobStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 PermissionSyncJobStore) {
				return
			},
		},
	}
}

// NewStrictMockPermissionSyncJobStore creates a new mock of the
// PermissionSyncJobStore interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockPermissionSyncJobStore() *MockPermissionSyncJobStore {
	return &MockPermissionSyncJobStore{
		CancelQueuedJobFunc: &PermissionSyncJobStoreCancelQueuedJobFunc{
			defaultHook: func(context.Context, string, int) error {
				panic("unexpected invocation of MockPermissionSyncJobStore.CancelQueuedJob")
			},
		},
		CountFunc: &PermissionSyncJobStoreCountFunc{
			defaultHook: func(context.Context, ListPermissionSyncJobOpts) (int, error) {
				panic("unexpected invocation of MockPermissionSyncJobStore.Count")
			},
		},
		CountReposWithFailingSyncJobFunc: &PermissionSyncJobStoreCountReposWithFailingSyncJobFunc{
			defaultHook: func(context.Context) (int32, error) {
				panic("unexpected invocation of MockPermissionSyncJobStore.CountReposWithFailingSyncJob")
			},
		},
		CountUsersWithFailingSyncJobFunc: &PermissionSyncJobStoreCountUsersWithFailingSyncJobFunc{
			defaultHook: func(context.Context) (int32, error) {
				panic("unexpected invocation of MockPermissionSyncJobStore.CountUsersWithFailingSyncJob")
			},
		},
		CreateRepoSyncJobFunc: &PermissionSyncJobStoreCreateRepoSyncJobFunc{
			defaultHook: func(context.Context, api.RepoID, PermissionSyncJobOpts) error {
				panic("unexpected invocation of MockPermissionSyncJobStore.CreateRepoSyncJob")
			},
		},
		CreateUserSyncJobFunc: &PermissionSyncJobStoreCreateUserSyncJobFunc{
			defaultHook: func(context.Context, int32, PermissionSyncJobOpts) error {
				panic("unexpected invocation of MockPermissionSyncJobStore.CreateUserSyncJob")
			},
		},
		DoneFunc: &PermissionSyncJobStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockPermissionSyncJobStore.Done")
			},
		},
		GetLatestFinishedSyncJobFunc: &PermissionSyncJobStoreGetLatestFinishedSyncJobFunc{
			defaultHook: func(context.Context, ListPermissionSyncJobOpts) (*PermissionSyncJob, error) {
				panic("unexpected invocation of MockPermissionSyncJobStore.GetLatestFinishedSyncJob")
			},
		},
		HandleFunc: &PermissionSyncJobStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockPermissionSyncJobStore.Handle")
			},
		},
		ListFunc: &PermissionSyncJobStoreListFunc{
			defaultHook: func(context.Context, ListPermissionSyncJobOpts) ([]*PermissionSyncJob, error) {
				panic("unexpected invocation of MockPermissionSyncJobStore.List")
			},
		},
		SaveSyncResultFunc: &PermissionSyncJobStoreSaveSyncResultFunc{
			defaultHook: func(context.Context, int, bool, *SetPermissionsResult, CodeHostStatusesSet) error {
				panic("unexpected invocation of MockPermissionSyncJobStore.SaveSyncResult")
			},
		},
		TransactFunc: &PermissionSyncJobStoreTransactFunc{
			defaultHook: func(context.Context) (PermissionSyncJobStore, error) {
				panic("unexpected invocation of MockPermissionSyncJobStore.Transact")
			},
		},
		WithFunc: &PermissionSyncJobStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) PermissionSyncJobStore {
				panic("unexpected invocation of MockPermissionSyncJobStore.With")
			},
		},
	}
}

// NewMockPermissionSyncJobStoreFrom creates a new mock of the
// MockPermissionSyncJobStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockPermissionSyncJobStoreFrom(i PermissionSyncJobStore) *MockPermissionSyncJobStore {
	return &MockPermissionSyncJobStore{
		CancelQueuedJobFunc: &PermissionSyncJobStoreCancelQueuedJobFunc{
			defaultHook: i.CancelQueuedJob,
		},
		CountFunc: &PermissionSyncJobStoreCountFunc{
			defaultHook: i.Count,
		},
		CountReposWithFailingSyncJobFunc: &PermissionSyncJobStoreCountReposWithFailingSyncJobFunc{
			defaultHook: i.CountReposWithFailingSyncJob,
		},
		CountUsersWithFailingSyncJobFunc: &PermissionSyncJobStoreCountUsersWithFailingSyncJobFunc{
			defaultHook: i.CountUsersWithFailingSyncJob,
		},
		CreateRepoSyncJobFunc: &PermissionSyncJobStoreCreateRepoSyncJobFunc{
			defaultHook: i.CreateRepoSyncJob,
		},
		CreateUserSyncJobFunc: &PermissionSyncJobStoreCreateUserSyncJobFunc{
			defaultHook: i.CreateUserSyncJob,
		},
		DoneFunc: &PermissionSyncJobStoreDoneFunc{
			defaultHook: i.Done,
		},
		GetLatestFinishedSyncJobFunc: &PermissionSyncJobStoreGetLatestFinishedSyncJobFunc{
			defaultHook: i.GetLatestFinishedSyncJob,
		},
		HandleFunc: &PermissionSyncJobStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListFunc: &PermissionSyncJobStoreListFunc{
			defaultHook: i.List,
		},
		SaveSyncResultFunc: &PermissionSyncJobStoreSaveSyncResultFunc{
			defaultHook: i.SaveSyncResult,
		},
		TransactFunc: &PermissionSyncJobStoreTransactFunc{
			defaultHook: i.Transact,
		},
		WithFunc: &PermissionSyncJobStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// PermissionSyncJobStoreCancelQueuedJobFunc describes the behavior when the
// CancelQueuedJob method of the parent MockPermissionSyncJobStore instance
// is invoked.
type PermissionSyncJobStoreCancelQueuedJobFunc struct {
	defaultHook func(context.Context, string, int) error
	hooks       []func(context.Context, string, int) error
	history     []PermissionSyncJobStoreCancelQueuedJobFuncCall
	mutex       sync.Mutex
}

// CancelQueuedJob delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockPermissionSyncJobStore) CancelQueuedJob(v0 context.Context, v1 string, v2 int) error {
	r0 := m.CancelQueuedJobFunc.nextHook()(v0, v1, v2)
	m.CancelQueuedJobFunc.appendCall(PermissionSyncJobStoreCancelQueuedJobFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the CancelQueuedJob
// method of the parent MockPermissionSyncJobStore instance is invoked and
// the hook queue is empty.
func (f *PermissionSyncJobStoreCancelQueuedJobFunc) SetDefaultHook(hook func(context.Context, string, int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CancelQueuedJob method of the parent MockPermissionSyncJobStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *PermissionSyncJobStoreCancelQueuedJobFunc) PushHook(hook func(context.Context, string, int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermissionSyncJobStoreCancelQueuedJobFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string, int) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermissionSyncJobStoreCancelQueuedJobFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string, int) error {
		return r0
	})
}

func (f *PermissionSyncJobStoreCancelQueuedJobFunc) nextHook() func(context.Context, string, int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermissionSyncJobStoreCancelQueuedJobFunc) appendCall(r0 PermissionSyncJobStoreCancelQueuedJobFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// PermissionSyncJobStoreCancelQueuedJobFuncCall objects describing the
// invocations of this function.
func (f *PermissionSyncJobStoreCancelQueuedJobFunc) History() []PermissionSyncJobStoreCancelQueuedJobFuncCall {
	f.mutex.Lock()
	history := make([]PermissionSyncJobStoreCancelQueuedJobFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermissionSyncJobStoreCancelQueuedJobFuncCall is an object that describes
// an invocation of method CancelQueuedJob on an instance of
// MockPermissionSyncJobStore.
type PermissionSyncJobStoreCancelQueuedJobFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermissionSyncJobStoreCancelQueuedJobFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermissionSyncJobStoreCancelQueuedJobFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// PermissionSyncJobStoreCountFunc describes the behavior when the Count
// method of the parent MockPermissionSyncJobStore instance is invoked.
type PermissionSyncJobStoreCountFunc struct {
	defaultHook func(context.Context, ListPermissionSyncJobOpts) (int, error)
	hooks       []func(context.Context, ListPermissionSyncJobOpts) (int, error)
	history     []PermissionSyncJobStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPermissionSyncJobStore) Count(v0 context.Context, v1 ListPermissionSyncJobOpts) (int, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(PermissionSyncJobStoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockPermissionSyncJobStore instance is invoked and the hook queue
// is empty.
func (f *PermissionSyncJobStoreCountFunc) SetDefaultHook(hook func(context.Context, ListPermissionSyncJobOpts) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockPermissionSyncJobStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *PermissionSyncJobStoreCountFunc) PushHook(hook func(context.Context, ListPermissionSyncJobOpts) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermissionSyncJobStoreCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, ListPermissionSyncJobOpts) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermissionSyncJobStoreCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, ListPermissionSyncJobOpts) (int, error) {
		return r0, r1
	})
}

func (f *PermissionSyncJobStoreCountFunc) nextHook() func(context.Context, ListPermissionSyncJobOpts) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermissionSyncJobStoreCountFunc) appendCall(r0 PermissionSyncJobStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermissionSyncJobStoreCountFuncCall objects
// describing the invocations of this function.
func (f *PermissionSyncJobStoreCountFunc) History() []PermissionSyncJobStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]PermissionSyncJobStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermissionSyncJobStoreCountFuncCall is an object that describes an
// invocation of method Count on an instance of MockPermissionSyncJobStore.
type PermissionSyncJobStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ListPermissionSyncJobOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermissionSyncJobStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermissionSyncJobStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermissionSyncJobStoreCountReposWithFailingSyncJobFunc describes the
// behavior when the CountReposWithFailingSyncJob method of the parent
// MockPermissionSyncJobStore instance is invoked.
type PermissionSyncJobStoreCountReposWithFailingSyncJobFunc struct {
	defaultHook func(context.Context) (int32, error)
	hooks       []func(context.Context) (int32, error)
	history     []PermissionSyncJobStoreCountReposWithFailingSyncJobFuncCall
	mutex       sync.Mutex
}

// CountReposWithFailingSyncJob delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockPermissionSyncJobStore) CountReposWithFailingSyncJob(v0 context.Context) (int32, error) {
	r0, r1 := m.CountReposWithFailingSyncJobFunc.nextHook()(v0)
	m.CountReposWithFailingSyncJobFunc.appendCall(PermissionSyncJobStoreCountReposWithFailingSyncJobFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CountReposWithFailingSyncJob method of the parent
// MockPermissionSyncJobStore instance is invoked and the hook queue is
// empty.
func (f *PermissionSyncJobStoreCountReposWithFailingSyncJobFunc) SetDefaultHook(hook func(context.Context) (int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountReposWithFailingSyncJob method of the parent
// MockPermissionSyncJobStore instance invokes the hook at the front of the
// queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *PermissionSyncJobStoreCountReposWithFailingSyncJobFunc) PushHook(hook func(context.Context) (int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermissionSyncJobStoreCountReposWithFailingSyncJobFunc) SetDefaultReturn(r0 int32, r1 error) {
	f.SetDefaultHook(func(context.Context) (int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermissionSyncJobStoreCountReposWithFailingSyncJobFunc) PushReturn(r0 int32, r1 error) {
	f.PushHook(func(context.Context) (int32, error) {
		return r0, r1
	})
}

func (f *PermissionSyncJobStoreCountReposWithFailingSyncJobFunc) nextHook() func(context.Context) (int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermissionSyncJobStoreCountReposWithFailingSyncJobFunc) appendCall(r0 PermissionSyncJobStoreCountReposWithFailingSyncJobFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// PermissionSyncJobStoreCountReposWithFailingSyncJobFuncCall objects
// describing the invocations of this function.
func (f *PermissionSyncJobStoreCountReposWithFailingSyncJobFunc) History() []PermissionSyncJobStoreCountReposWithFailingSyncJobFuncCall {
	f.mutex.Lock()
	history := make([]PermissionSyncJobStoreCountReposWithFailingSyncJobFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermissionSyncJobStoreCountReposWithFailingSyncJobFuncCall is an object
// that describes an invocation of method CountReposWithFailingSyncJob on an
// instance of MockPermissionSyncJobStore.
type PermissionSyncJobStoreCountReposWithFailingSyncJobFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermissionSyncJobStoreCountReposWithFailingSyncJobFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermissionSyncJobStoreCountReposWithFailingSyncJobFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermissionSyncJobStoreCountUsersWithFailingSyncJobFunc describes the
// behavior when the CountUsersWithFailingSyncJob method of the parent
// MockPermissionSyncJobStore instance is invoked.
type PermissionSyncJobStoreCountUsersWithFailingSyncJobFunc struct {
	defaultHook func(context.Context) (int32, error)
	hooks       []func(context.Context) (int32, error)
	history     []PermissionSyncJobStoreCountUsersWithFailingSyncJobFuncCall
	mutex       sync.Mutex
}

// CountUsersWithFailingSyncJob delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockPermissionSyncJobStore) CountUsersWithFailingSyncJob(v0 context.Context) (int32, error) {
	r0, r1 := m.CountUsersWithFailingSyncJobFunc.nextHook()(v0)
	m.CountUsersWithFailingSyncJobFunc.appendCall(PermissionSyncJobStoreCountUsersWithFailingSyncJobFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CountUsersWithFailingSyncJob method of the parent
// MockPermissionSyncJobStore instance is invoked and the hook queue is
// empty.
func (f *PermissionSyncJobStoreCountUsersWithFailingSyncJobFunc) SetDefaultHook(hook func(context.Context) (int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountUsersWithFailingSyncJob method of the parent
// MockPermissionSyncJobStore instance invokes the hook at the front of the
// queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *PermissionSyncJobStoreCountUsersWithFailingSyncJobFunc) PushHook(hook func(context.Context) (int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermissionSyncJobStoreCountUsersWithFailingSyncJobFunc) SetDefaultReturn(r0 int32, r1 error) {
	f.SetDefaultHook(func(context.Context) (int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermissionSyncJobStoreCountUsersWithFailingSyncJobFunc) PushReturn(r0 int32, r1 error) {
	f.PushHook(func(context.Context) (int32, error) {
		return r0, r1
	})
}

func (f *PermissionSyncJobStoreCountUsersWithFailingSyncJobFunc) nextHook() func(context.Context) (int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermissionSyncJobStoreCountUsersWithFailingSyncJobFunc) appendCall(r0 PermissionSyncJobStoreCountUsersWithFailingSyncJobFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// PermissionSyncJobStoreCountUsersWithFailingSyncJobFuncCall objects
// describing the invocations of this function.
func (f *PermissionSyncJobStoreCountUsersWithFailingSyncJobFunc) History() []PermissionSyncJobStoreCountUsersWithFailingSyncJobFuncCall {
	f.mutex.Lock()
	history := make([]PermissionSyncJobStoreCountUsersWithFailingSyncJobFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermissionSyncJobStoreCountUsersWithFailingSyncJobFuncCall is an object
// that describes an invocation of method CountUsersWithFailingSyncJob on an
// instance of MockPermissionSyncJobStore.
type PermissionSyncJobStoreCountUsersWithFailingSyncJobFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermissionSyncJobStoreCountUsersWithFailingSyncJobFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermissionSyncJobStoreCountUsersWithFailingSyncJobFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermissionSyncJobStoreCreateRepoSyncJobFunc describes the behavior when
// the CreateRepoSyncJob method of the parent MockPermissionSyncJobStore
// instance is invoked.
type PermissionSyncJobStoreCreateRepoSyncJobFunc struct {
	defaultHook func(context.Context, api.RepoID, PermissionSyncJobOpts) error
	hooks       []func(context.Context, api.RepoID, PermissionSyncJobOpts) error
	history     []PermissionSyncJobStoreCreateRepoSyncJobFuncCall
	mutex       sync.Mutex
}

// CreateRepoSyncJob delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockPermissionSyncJobStore) CreateRepoSyncJob(v0 context.Context, v1 api.RepoID, v2 PermissionSyncJobOpts) error {
	r0 := m.CreateRepoSyncJobFunc.nextHook()(v0, v1, v2)
	m.CreateRepoSyncJobFunc.appendCall(PermissionSyncJobStoreCreateRepoSyncJobFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the CreateRepoSyncJob
// method of the parent MockPermissionSyncJobStore instance is invoked and
// the hook queue is empty.
func (f *PermissionSyncJobStoreCreateRepoSyncJobFunc) SetDefaultHook(hook func(context.Context, api.RepoID, PermissionSyncJobOpts) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateRepoSyncJob method of the parent MockPermissionSyncJobStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *PermissionSyncJobStoreCreateRepoSyncJobFunc) PushHook(hook func(context.Context, api.RepoID, PermissionSyncJobOpts) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermissionSyncJobStoreCreateRepoSyncJobFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, api.RepoID, PermissionSyncJobOpts) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermissionSyncJobStoreCreateRepoSyncJobFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, api.RepoID, PermissionSyncJobOpts) error {
		return r0
	})
}

func (f *PermissionSyncJobStoreCreateRepoSyncJobFunc) nextHook() func(context.Context, api.RepoID, PermissionSyncJobOpts) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermissionSyncJobStoreCreateRepoSyncJobFunc) appendCall(r0 PermissionSyncJobStoreCreateRepoSyncJobFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// PermissionSyncJobStoreCreateRepoSyncJobFuncCall objects describing the
// invocations of this function.
func (f *PermissionSyncJobStoreCreateRepoSyncJobFunc) History() []PermissionSyncJobStoreCreateRepoSyncJobFuncCall {
	f.mutex.Lock()
	history := make([]PermissionSyncJobStoreCreateRepoSyncJobFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermissionSyncJobStoreCreateRepoSyncJobFuncCall is an object that
// describes an invocation of method CreateRepoSyncJob on an instance of
// MockPermissionSyncJobStore.
type PermissionSyncJobStoreCreateRepoSyncJobFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoID
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 PermissionSyncJobOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermissionSyncJobStoreCreateRepoSyncJobFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermissionSyncJobStoreCreateRepoSyncJobFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// PermissionSyncJobStoreCreateUserSyncJobFunc describes the behavior when
// the CreateUserSyncJob method of the parent MockPermissionSyncJobStore
// instance is invoked.
type PermissionSyncJobStoreCreateUserSyncJobFunc struct {
	defaultHook func(context.Context, int32, PermissionSyncJobOpts) error
	hooks       []func(context.Context, int32, PermissionSyncJobOpts) error
	history     []PermissionSyncJobStoreCreateUserSyncJobFuncCall
	mutex       sync.Mutex
}

// CreateUserSyncJob delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockPermissionSyncJobStore) CreateUserSyncJob(v0 context.Context, v1 int32, v2 PermissionSyncJobOpts) error {
	r0 := m.CreateUserSyncJobFunc.nextHook()(v0, v1, v2)
	m.CreateUserSyncJobFunc.appendCall(PermissionSyncJobStoreCreateUserSyncJobFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the CreateUserSyncJob
// method of the parent MockPermissionSyncJobStore instance is invoked and
// the hook queue is empty.
func (f *PermissionSyncJobStoreCreateUserSyncJobFunc) SetDefaultHook(hook func(context.Context, int32, PermissionSyncJobOpts) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateUserSyncJob method of the parent MockPermissionSyncJobStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *PermissionSyncJobStoreCreateUserSyncJobFunc) PushHook(hook func(context.Context, int32, PermissionSyncJobOpts) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermissionSyncJobStoreCreateUserSyncJobFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, PermissionSyncJobOpts) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermissionSyncJobStoreCreateUserSyncJobFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, PermissionSyncJobOpts) error {
		return r0
	})
}

func (f *PermissionSyncJobStoreCreateUserSyncJobFunc) nextHook() func(context.Context, int32, PermissionSyncJobOpts) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermissionSyncJobStoreCreateUserSyncJobFunc) appendCall(r0 PermissionSyncJobStoreCreateUserSyncJobFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// PermissionSyncJobStoreCreateUserSyncJobFuncCall objects describing the
// invocations of this function.
func (f *PermissionSyncJobStoreCreateUserSyncJobFunc) History() []PermissionSyncJobStoreCreateUserSyncJobFuncCall {
	f.mutex.Lock()
	history := make([]PermissionSyncJobStoreCreateUserSyncJobFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermissionSyncJobStoreCreateUserSyncJobFuncCall is an object that
// describes an invocation of method CreateUserSyncJob on an instance of
// MockPermissionSyncJobStore.
type PermissionSyncJobStoreCreateUserSyncJobFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 PermissionSyncJobOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermissionSyncJobStoreCreateUserSyncJobFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermissionSyncJobStoreCreateUserSyncJobFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// PermissionSyncJobStoreDoneFunc describes the behavior when the Done
// method of the parent MockPermissionSyncJobStore instance is invoked.
type PermissionSyncJobStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []PermissionSyncJobStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPermissionSyncJobStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(PermissionSyncJobStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockPermissionSyncJobStore instance is invoked and the hook queue
// is empty.
func (f *PermissionSyncJobStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockPermissionSyncJobStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *PermissionSyncJobStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermissionSyncJobStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermissionSyncJobStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *PermissionSyncJobStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermissionSyncJobStoreDoneFunc) appendCall(r0 PermissionSyncJobStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermissionSyncJobStoreDoneFuncCall objects
// describing the invocations of this function.
func (f *PermissionSyncJobStoreDoneFunc) History() []PermissionSyncJobStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]PermissionSyncJobStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermissionSyncJobStoreDoneFuncCall is an object that describes an
// invocation of method Done on an instance of MockPermissionSyncJobStore.
type PermissionSyncJobStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermissionSyncJobStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermissionSyncJobStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// PermissionSyncJobStoreGetLatestFinishedSyncJobFunc describes the behavior
// when the GetLatestFinishedSyncJob method of the parent
// MockPermissionSyncJobStore instance is invoked.
type PermissionSyncJobStoreGetLatestFinishedSyncJobFunc struct {
	defaultHook func(context.Context, ListPermissionSyncJobOpts) (*PermissionSyncJob, error)
	hooks       []func(context.Context, ListPermissionSyncJobOpts) (*PermissionSyncJob, error)
	history     []PermissionSyncJobStoreGetLatestFinishedSyncJobFuncCall
	mutex       sync.Mutex
}

// GetLatestFinishedSyncJob delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockPermissionSyncJobStore) GetLatestFinishedSyncJob(v0 context.Context, v1 ListPermissionSyncJobOpts) (*PermissionSyncJob, error) {
	r0, r1 := m.GetLatestFinishedSyncJobFunc.nextHook()(v0, v1)
	m.GetLatestFinishedSyncJobFunc.appendCall(PermissionSyncJobStoreGetLatestFinishedSyncJobFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetLatestFinishedSyncJob method of the parent MockPermissionSyncJobStore
// instance is invoked and the hook queue is empty.
func (f *PermissionSyncJobStoreGetLatestFinishedSyncJobFunc) SetDefaultHook(hook func(context.Context, ListPermissionSyncJobOpts) (*PermissionSyncJob, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLatestFinishedSyncJob method of the parent MockPermissionSyncJobStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *PermissionSyncJobStoreGetLatestFinishedSyncJobFunc) PushHook(hook func(context.Context, ListPermissionSyncJobOpts) (*PermissionSyncJob, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermissionSyncJobStoreGetLatestFinishedSyncJobFunc) SetDefaultReturn(r0 *PermissionSyncJob, r1 error) {
	f.SetDefaultHook(func(context.Context, ListPermissionSyncJobOpts) (*PermissionSyncJob, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermissionSyncJobStoreGetLatestFinishedSyncJobFunc) PushReturn(r0 *PermissionSyncJob, r1 error) {
	f.PushHook(func(context.Context, ListPermissionSyncJobOpts) (*PermissionSyncJob, error) {
		return r0, r1
	})
}

func (f *PermissionSyncJobStoreGetLatestFinishedSyncJobFunc) nextHook() func(context.Context, ListPermissionSyncJobOpts) (*PermissionSyncJob, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermissionSyncJobStoreGetLatestFinishedSyncJobFunc) appendCall(r0 PermissionSyncJobStoreGetLatestFinishedSyncJobFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// PermissionSyncJobStoreGetLatestFinishedSyncJobFuncCall objects describing
// the invocations of this function.
func (f *PermissionSyncJobStoreGetLatestFinishedSyncJobFunc) History() []PermissionSyncJobStoreGetLatestFinishedSyncJobFuncCall {
	f.mutex.Lock()
	history := make([]PermissionSyncJobStoreGetLatestFinishedSyncJobFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermissionSyncJobStoreGetLatestFinishedSyncJobFuncCall is an object that
// describes an invocation of method GetLatestFinishedSyncJob on an instance
// of MockPermissionSyncJobStore.
type PermissionSyncJobStoreGetLatestFinishedSyncJobFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ListPermissionSyncJobOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *PermissionSyncJob
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermissionSyncJobStoreGetLatestFinishedSyncJobFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermissionSyncJobStoreGetLatestFinishedSyncJobFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermissionSyncJobStoreHandleFunc describes the behavior when the Handle
// method of the parent MockPermissionSyncJobStore instance is invoked.
type PermissionSyncJobStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []PermissionSyncJobStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPermissionSyncJobStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(PermissionSyncJobStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockPermissionSyncJobStore instance is invoked and the hook queue
// is empty.
func (f *PermissionSyncJobStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockPermissionSyncJobStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *PermissionSyncJobStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermissionSyncJobStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermissionSyncJobStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *PermissionSyncJobStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermissionSyncJobStoreHandleFunc) appendCall(r0 PermissionSyncJobStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermissionSyncJobStoreHandleFuncCall
// objects describing the invocations of this function.
func (f *PermissionSyncJobStoreHandleFunc) History() []PermissionSyncJobStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]PermissionSyncJobStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermissionSyncJobStoreHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of MockPermissionSyncJobStore.
type PermissionSyncJobStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermissionSyncJobStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermissionSyncJobStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// PermissionSyncJobStoreListFunc describes the behavior when the List
// method of the parent MockPermissionSyncJobStore instance is invoked.
type PermissionSyncJobStoreListFunc struct {
	defaultHook func(context.Context, ListPermissionSyncJobOpts) ([]*PermissionSyncJob, error)
	hooks       []func(context.Context, ListPermissionSyncJobOpts) ([]*PermissionSyncJob, error)
	history     []PermissionSyncJobStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPermissionSyncJobStore) List(v0 context.Context, v1 ListPermissionSyncJobOpts) ([]*PermissionSyncJob, error) {
	r0, r1 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(PermissionSyncJobStoreListFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockPermissionSyncJobStore instance is invoked and the hook queue
// is empty.
func (f *PermissionSyncJobStoreListFunc) SetDefaultHook(hook func(context.Context, ListPermissionSyncJobOpts) ([]*PermissionSyncJob, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockPermissionSyncJobStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *PermissionSyncJobStoreListFunc) PushHook(hook func(context.Context, ListPermissionSyncJobOpts) ([]*PermissionSyncJob, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermissionSyncJobStoreListFunc) SetDefaultReturn(r0 []*PermissionSyncJob, r1 error) {
	f.SetDefaultHook(func(context.Context, ListPermissionSyncJobOpts) ([]*PermissionSyncJob, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermissionSyncJobStoreListFunc) PushReturn(r0 []*PermissionSyncJob, r1 error) {
	f.PushHook(func(context.Context, ListPermissionSyncJobOpts) ([]*PermissionSyncJob, error) {
		return r0, r1
	})
}

func (f *PermissionSyncJobStoreListFunc) nextHook() func(context.Context, ListPermissionSyncJobOpts) ([]*PermissionSyncJob, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermissionSyncJobStoreListFunc) appendCall(r0 PermissionSyncJobStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermissionSyncJobStoreListFuncCall objects
// describing the invocations of this function.
func (f *PermissionSyncJobStoreListFunc) History() []PermissionSyncJobStoreListFuncCall {
	f.mutex.Lock()
	history := make([]PermissionSyncJobStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermissionSyncJobStoreListFuncCall is an object that describes an
// invocation of method List on an instance of MockPermissionSyncJobStore.
type PermissionSyncJobStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ListPermissionSyncJobOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*PermissionSyncJob
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermissionSyncJobStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermissionSyncJobStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermissionSyncJobStoreSaveSyncResultFunc describes the behavior when the
// SaveSyncResult method of the parent MockPermissionSyncJobStore instance
// is invoked.
type PermissionSyncJobStoreSaveSyncResultFunc struct {
	defaultHook func(context.Context, int, bool, *SetPermissionsResult, CodeHostStatusesSet) error
	hooks       []func(context.Context, int, bool, *SetPermissionsResult, CodeHostStatusesSet) error
	history     []PermissionSyncJobStoreSaveSyncResultFuncCall
	mutex       sync.Mutex
}

// SaveSyncResult delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockPermissionSyncJobStore) SaveSyncResult(v0 context.Context, v1 int, v2 bool, v3 *SetPermissionsResult, v4 CodeHostStatusesSet) error {
	r0 := m.SaveSyncResultFunc.nextHook()(v0, v1, v2, v3, v4)
	m.SaveSyncResultFunc.appendCall(PermissionSyncJobStoreSaveSyncResultFuncCall{v0, v1, v2, v3, v4, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SaveSyncResult
// method of the parent MockPermissionSyncJobStore instance is invoked and
// the hook queue is empty.
func (f *PermissionSyncJobStoreSaveSyncResultFunc) SetDefaultHook(hook func(context.Context, int, bool, *SetPermissionsResult, CodeHostStatusesSet) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SaveSyncResult method of the parent MockPermissionSyncJobStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *PermissionSyncJobStoreSaveSyncResultFunc) PushHook(hook func(context.Context, int, bool, *SetPermissionsResult, CodeHostStatusesSet) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermissionSyncJobStoreSaveSyncResultFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int, bool, *SetPermissionsResult, CodeHostStatusesSet) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermissionSyncJobStoreSaveSyncResultFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int, bool, *SetPermissionsResult, CodeHostStatusesSet) error {
		return r0
	})
}

func (f *PermissionSyncJobStoreSaveSyncResultFunc) nextHook() func(context.Context, int, bool, *SetPermissionsResult, CodeHostStatusesSet) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermissionSyncJobStoreSaveSyncResultFunc) appendCall(r0 PermissionSyncJobStoreSaveSyncResultFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// PermissionSyncJobStoreSaveSyncResultFuncCall objects describing the
// invocations of this function.
func (f *PermissionSyncJobStoreSaveSyncResultFunc) History() []PermissionSyncJobStoreSaveSyncResultFuncCall {
	f.mutex.Lock()
	history := make([]PermissionSyncJobStoreSaveSyncResultFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermissionSyncJobStoreSaveSyncResultFuncCall is an object that describes
// an invocation of method SaveSyncResult on an instance of
// MockPermissionSyncJobStore.
type PermissionSyncJobStoreSaveSyncResultFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bool
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *SetPermissionsResult
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 CodeHostStatusesSet
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermissionSyncJobStoreSaveSyncResultFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermissionSyncJobStoreSaveSyncResultFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// PermissionSyncJobStoreTransactFunc describes the behavior when the
// Transact method of the parent MockPermissionSyncJobStore instance is
// invoked.
type PermissionSyncJobStoreTransactFunc struct {
	defaultHook func(context.Context) (PermissionSyncJobStore, error)
	hooks       []func(context.Context) (PermissionSyncJobStore, error)
	history     []PermissionSyncJobStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPermissionSyncJobStore) Transact(v0 context.Context) (PermissionSyncJobStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(PermissionSyncJobStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockPermissionSyncJobStore instance is invoked and the hook
// queue is empty.
func (f *PermissionSyncJobStoreTransactFunc) SetDefaultHook(hook func(context.Context) (PermissionSyncJobStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockPermissionSyncJobStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *PermissionSyncJobStoreTransactFunc) PushHook(hook func(context.Context) (PermissionSyncJobStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermissionSyncJobStoreTransactFunc) SetDefaultReturn(r0 PermissionSyncJobStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (PermissionSyncJobStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermissionSyncJobStoreTransactFunc) PushReturn(r0 PermissionSyncJobStore, r1 error) {
	f.PushHook(func(context.Context) (PermissionSyncJobStore, error) {
		return r0, r1
	})
}

func (f *PermissionSyncJobStoreTransactFunc) nextHook() func(context.Context) (PermissionSyncJobStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermissionSyncJobStoreTransactFunc) appendCall(r0 PermissionSyncJobStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermissionSyncJobStoreTransactFuncCall
// objects describing the invocations of this function.
func (f *PermissionSyncJobStoreTransactFunc) History() []PermissionSyncJobStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]PermissionSyncJobStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermissionSyncJobStoreTransactFuncCall is an object that describes an
// invocation of method Transact on an instance of
// MockPermissionSyncJobStore.
type PermissionSyncJobStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 PermissionSyncJobStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermissionSyncJobStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermissionSyncJobStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermissionSyncJobStoreWithFunc describes the behavior when the With
// method of the parent MockPermissionSyncJobStore instance is invoked.
type PermissionSyncJobStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) PermissionSyncJobStore
	hooks       []func(basestore.ShareableStore) PermissionSyncJobStore
	history     []PermissionSyncJobStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPermissionSyncJobStore) With(v0 basestore.ShareableStore) PermissionSyncJobStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(PermissionSyncJobStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockPermissionSyncJobStore instance is invoked and the hook queue
// is empty.
func (f *PermissionSyncJobStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) PermissionSyncJobStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockPermissionSyncJobStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *PermissionSyncJobStoreWithFunc) PushHook(hook func(basestore.ShareableStore) PermissionSyncJobStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermissionSyncJobStoreWithFunc) SetDefaultReturn(r0 PermissionSyncJobStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) PermissionSyncJobStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermissionSyncJobStoreWithFunc) PushReturn(r0 PermissionSyncJobStore) {
	f.PushHook(func(basestore.ShareableStore) PermissionSyncJobStore {
		return r0
	})
}

func (f *PermissionSyncJobStoreWithFunc) nextHook() func(basestore.ShareableStore) PermissionSyncJobStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermissionSyncJobStoreWithFunc) appendCall(r0 PermissionSyncJobStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermissionSyncJobStoreWithFuncCall objects
// describing the invocations of this function.
func (f *PermissionSyncJobStoreWithFunc) History() []PermissionSyncJobStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]PermissionSyncJobStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermissionSyncJobStoreWithFuncCall is an object that describes an
// invocation of method With on an instance of MockPermissionSyncJobStore.
type PermissionSyncJobStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 PermissionSyncJobStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermissionSyncJobStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermissionSyncJobStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockPhabricatorStore is a mock implementation of the PhabricatorStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockPhabricatorStore struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *PhabricatorStoreCreateFunc
	// CreateIfNotExistsFunc is an instance of a mock function object
	// controlling the behavior of the method CreateIfNotExists.
	CreateIfNotExistsFunc *PhabricatorStoreCreateIfNotExistsFunc
	// CreateOrUpdateFunc is an instance of a mock function object
	// controlling the behavior of the method CreateOrUpdate.
	CreateOrUpdateFunc *PhabricatorStoreCreateOrUpdateFunc
	// GetByNameFunc is an instance of a mock function object controlling
	// the behavior of the method GetByName.
	GetByNameFunc *PhabricatorStoreGetByNameFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *PhabricatorStoreHandleFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *PhabricatorStoreWithFunc
	// WithTransactFunc is an instance of a mock function object controlling
	// the behavior of the method WithTransact.
	WithTransactFunc *PhabricatorStoreWithTransactFunc
}

// NewMockPhabricatorStore creates a new mock of the PhabricatorStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockPhabricatorStore() *MockPhabricatorStore {
	return &MockPhabricatorStore{
		CreateFunc: &PhabricatorStoreCreateFunc{
			defaultHook: func(context.Context, string, api.RepoName, string) (r0 *types.PhabricatorRepo, r1 error) {
				return
			},
		},
		CreateIfNotExistsFunc: &PhabricatorStoreCreateIfNotExistsFunc{
			defaultHook: func(context.Context, string, api.RepoName, string) (r0 *types.PhabricatorRepo, r1 error) {
				return
			},
		},
		CreateOrUpdateFunc: &PhabricatorStoreCreateOrUpdateFunc{
			defaultHook: func(context.Context, string, api.RepoName, string) (r0 *types.PhabricatorRepo, r1 error) {
				return
			},
		},
		GetByNameFunc: &PhabricatorStoreGetByNameFunc{
			defaultHook: func(context.Context, api.RepoName) (r0 *types.PhabricatorRepo, r1 error) {
				return
			},
		},
		HandleFunc: &PhabricatorStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		WithFunc: &PhabricatorStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 PhabricatorStore) {
				return
			},
		},
		WithTransactFunc: &PhabricatorStoreWithTransactFunc{
			defaultHook: func(context.Context, func(PhabricatorStore) error) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockPhabricatorStore creates a new mock of the PhabricatorStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockPhabricatorStore() *MockPhabricatorStore {
	return &MockPhabricatorStore{
		CreateFunc: &PhabricatorStoreCreateFunc{
			defaultHook: func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
				panic("unexpected invocation of MockPhabricatorStore.Create")
			},
		},
		CreateIfNotExistsFunc: &PhabricatorStoreCreateIfNotExistsFunc{
			defaultHook: func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
				panic("unexpected invocation of MockPhabricatorStore.CreateIfNotExists")
			},
		},
		CreateOrUpdateFunc: &PhabricatorStoreCreateOrUpdateFunc{
			defaultHook: func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
				panic("unexpected invocation of MockPhabricatorStore.CreateOrUpdate")
			},
		},
		GetByNameFunc: &PhabricatorStoreGetByNameFunc{
			defaultHook: func(context.Context, api.RepoName) (*types.PhabricatorRepo, error) {
				panic("unexpected invocation of MockPhabricatorStore.GetByName")
			},
		},
		HandleFunc: &PhabricatorStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockPhabricatorStore.Handle")
			},
		},
		WithFunc: &PhabricatorStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) PhabricatorStore {
				panic("unexpected invocation of MockPhabricatorStore.With")
			},
		},
		WithTransactFunc: &PhabricatorStoreWithTransactFunc{
			defaultHook: func(context.Context, func(PhabricatorStore) error) error {
				panic("unexpected invocation of MockPhabricatorStore.WithTransact")
			},
		},
	}
}

// NewMockPhabricatorStoreFrom creates a new mock of the
// MockPhabricatorStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockPhabricatorStoreFrom(i PhabricatorStore) *MockPhabricatorStore {
	return &MockPhabricatorStore{
		CreateFunc: &PhabricatorStoreCreateFunc{
			defaultHook: i.Create,
		},
		CreateIfNotExistsFunc: &PhabricatorStoreCreateIfNotExistsFunc{
			defaultHook: i.CreateIfNotExists,
		},
		CreateOrUpdateFunc: &PhabricatorStoreCreateOrUpdateFunc{
			defaultHook: i.CreateOrUpdate,
		},
		GetByNameFunc: &PhabricatorStoreGetByNameFunc{
			defaultHook: i.GetByName,
		},
		HandleFunc: &PhabricatorStoreHandleFunc{
			defaultHook: i.Handle,
		},
		WithFunc: &PhabricatorStoreWithFunc{
			defaultHook: i.With,
		},
		WithTransactFunc: &PhabricatorStoreWithTransactFunc{
			defaultHook: i.WithTransact,
		},
	}
}

// PhabricatorStoreCreateFunc describes the behavior when the Create method
// of the parent MockPhabricatorStore instance is invoked.
type PhabricatorStoreCreateFunc struct {
	defaultHook func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error)
	hooks       []func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error)
	history     []PhabricatorStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPhabricatorStore) Create(v0 context.Context, v1 string, v2 api.RepoName, v3 string) (*types.PhabricatorRepo, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1, v2, v3)
	m.CreateFunc.appendCall(PhabricatorStoreCreateFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockPhabricatorStore instance is invoked and the hook queue is
// empty.
func (f *PhabricatorStoreCreateFunc) SetDefaultHook(hook func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockPhabricatorStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *PhabricatorStoreCreateFunc) PushHook(hook func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PhabricatorStoreCreateFunc) SetDefaultReturn(r0 *types.PhabricatorRepo, r1 error) {
	f.SetDefaultHook(func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PhabricatorStoreCreateFunc) PushReturn(r0 *types.PhabricatorRepo, r1 error) {
	f.PushHook(func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
		return r0, r1
	})
}

func (f *PhabricatorStoreCreateFunc) nextHook() func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PhabricatorStoreCreateFunc) appendCall(r0 PhabricatorStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PhabricatorStoreCreateFuncCall objects
// describing the invocations of this function.
func (f *PhabricatorStoreCreateFunc) History() []PhabricatorStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]PhabricatorStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PhabricatorStoreCreateFuncCall is an object that describes an invocation
// of method Create on an instance of MockPhabricatorStore.
type PhabricatorStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoName
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.PhabricatorRepo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PhabricatorStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PhabricatorStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PhabricatorStoreCreateIfNotExistsFunc describes the behavior when the
// CreateIfNotExists method of the parent MockPhabricatorStore instance is
// invoked.
type PhabricatorStoreCreateIfNotExistsFunc struct {
	defaultHook func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error)
	hooks       []func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error)
	history     []PhabricatorStoreCreateIfNotExistsFuncCall
	mutex       sync.Mutex
}

// CreateIfNotExists delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockPhabricatorStore) CreateIfNotExists(v0 context.Context, v1 string, v2 api.RepoName, v3 string) (*types.PhabricatorRepo, error) {
	r0, r1 := m.CreateIfNotExistsFunc.nextHook()(v0, v1, v2, v3)
	m.CreateIfNotExistsFunc.appendCall(PhabricatorStoreCreateIfNotExistsFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateIfNotExists
// method of the parent MockPhabricatorStore instance is invoked and the
// hook queue is empty.
func (f *PhabricatorStoreCreateIfNotExistsFunc) SetDefaultHook(hook func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateIfNotExists method of the parent MockPhabricatorStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *PhabricatorStoreCreateIfNotExistsFunc) PushHook(hook func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PhabricatorStoreCreateIfNotExistsFunc) SetDefaultReturn(r0 *types.PhabricatorRepo, r1 error) {
	f.SetDefaultHook(func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PhabricatorStoreCreateIfNotExistsFunc) PushReturn(r0 *types.PhabricatorRepo, r1 error) {
	f.PushHook(func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
		return r0, r1
	})
}

func (f *PhabricatorStoreCreateIfNotExistsFunc) nextHook() func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PhabricatorStoreCreateIfNotExistsFunc) appendCall(r0 PhabricatorStoreCreateIfNotExistsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PhabricatorStoreCreateIfNotExistsFuncCall
// objects describing the invocations of this function.
func (f *PhabricatorStoreCreateIfNotExistsFunc) History() []PhabricatorStoreCreateIfNotExistsFuncCall {
	f.mutex.Lock()
	history := make([]PhabricatorStoreCreateIfNotExistsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PhabricatorStoreCreateIfNotExistsFuncCall is an object that describes an
// invocation of method CreateIfNotExists on an instance of
// MockPhabricatorStore.
type PhabricatorStoreCreateIfNotExistsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoName
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.PhabricatorRepo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PhabricatorStoreCreateIfNotExistsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PhabricatorStoreCreateIfNotExistsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PhabricatorStoreCreateOrUpdateFunc describes the behavior when the
// CreateOrUpdate method of the parent MockPhabricatorStore instance is
// invoked.
type PhabricatorStoreCreateOrUpdateFunc struct {
	defaultHook func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error)
	hooks       []func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error)
	history     []PhabricatorStoreCreateOrUpdateFuncCall
	mutex       sync.Mutex
}

// CreateOrUpdate delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockPhabricatorStore) CreateOrUpdate(v0 context.Context, v1 string, v2 api.RepoName, v3 string) (*types.PhabricatorRepo, error) {
	r0, r1 := m.CreateOrUpdateFunc.nextHook()(v0, v1, v2, v3)
	m.CreateOrUpdateFunc.appendCall(PhabricatorStoreCreateOrUpdateFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateOrUpdate
// method of the parent MockPhabricatorStore instance is invoked and the
// hook queue is empty.
func (f *PhabricatorStoreCreateOrUpdateFunc) SetDefaultHook(hook func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateOrUpdate method of the parent MockPhabricatorStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *PhabricatorStoreCreateOrUpdateFunc) PushHook(hook func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PhabricatorStoreCreateOrUpdateFunc) SetDefaultReturn(r0 *types.PhabricatorRepo, r1 error) {
	f.SetDefaultHook(func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PhabricatorStoreCreateOrUpdateFunc) PushReturn(r0 *types.PhabricatorRepo, r1 error) {
	f.PushHook(func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
		return r0, r1
	})
}

func (f *PhabricatorStoreCreateOrUpdateFunc) nextHook() func(context.Context, string, api.RepoName, string) (*types.PhabricatorRepo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PhabricatorStoreCreateOrUpdateFunc) appendCall(r0 PhabricatorStoreCreateOrUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PhabricatorStoreCreateOrUpdateFuncCall
// objects describing the invocations of this function.
func (f *PhabricatorStoreCreateOrUpdateFunc) History() []PhabricatorStoreCreateOrUpdateFuncCall {
	f.mutex.Lock()
	history := make([]PhabricatorStoreCreateOrUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PhabricatorStoreCreateOrUpdateFuncCall is an object that describes an
// invocation of method CreateOrUpdate on an instance of
// MockPhabricatorStore.
type PhabricatorStoreCreateOrUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoName
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.PhabricatorRepo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PhabricatorStoreCreateOrUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PhabricatorStoreCreateOrUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PhabricatorStoreGetByNameFunc describes the behavior when the GetByName
// method of the parent MockPhabricatorStore instance is invoked.
type PhabricatorStoreGetByNameFunc struct {
	defaultHook func(context.Context, api.RepoName) (*types.PhabricatorRepo, error)
	hooks       []func(context.Context, api.RepoName) (*types.PhabricatorRepo, error)
	history     []PhabricatorStoreGetByNameFuncCall
	mutex       sync.Mutex
}

// GetByName delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPhabricatorStore) GetByName(v0 context.Context, v1 api.RepoName) (*types.PhabricatorRepo, error) {
	r0, r1 := m.GetByNameFunc.nextHook()(v0, v1)
	m.GetByNameFunc.appendCall(PhabricatorStoreGetByNameFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByName method of
// the parent MockPhabricatorStore instance is invoked and the hook queue is
// empty.
func (f *PhabricatorStoreGetByNameFunc) SetDefaultHook(hook func(context.Context, api.RepoName) (*types.PhabricatorRepo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByName method of the parent MockPhabricatorStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *PhabricatorStoreGetByNameFunc) PushHook(hook func(context.Context, api.RepoName) (*types.PhabricatorRepo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PhabricatorStoreGetByNameFunc) SetDefaultReturn(r0 *types.PhabricatorRepo, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) (*types.PhabricatorRepo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PhabricatorStoreGetByNameFunc) PushReturn(r0 *types.PhabricatorRepo, r1 error) {
	f.PushHook(func(context.Context, api.RepoName) (*types.PhabricatorRepo, error) {
		return r0, r1
	})
}

func (f *PhabricatorStoreGetByNameFunc) nextHook() func(context.Context, api.RepoName) (*types.PhabricatorRepo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PhabricatorStoreGetByNameFunc) appendCall(r0 PhabricatorStoreGetByNameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PhabricatorStoreGetByNameFuncCall objects
// describing the invocations of this function.
func (f *PhabricatorStoreGetByNameFunc) History() []PhabricatorStoreGetByNameFuncCall {
	f.mutex.Lock()
	history := make([]PhabricatorStoreGetByNameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PhabricatorStoreGetByNameFuncCall is an object that describes an
// invocation of method GetByName on an instance of MockPhabricatorStore.
type PhabricatorStoreGetByNameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.PhabricatorRepo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PhabricatorStoreGetByNameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PhabricatorStoreGetByNameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PhabricatorStoreHandleFunc describes the behavior when the Handle method
// of the parent MockPhabricatorStore instance is invoked.
type PhabricatorStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []PhabricatorStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPhabricatorStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(PhabricatorStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockPhabricatorStore instance is invoked and the hook queue is
// empty.
func (f *PhabricatorStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockPhabricatorStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *PhabricatorStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PhabricatorStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PhabricatorStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *PhabricatorStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PhabricatorStoreHandleFunc) appendCall(r0 PhabricatorStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PhabricatorStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *PhabricatorStoreHandleFunc) History() []PhabricatorStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]PhabricatorStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PhabricatorStoreHandleFuncCall is an object that describes an invocation
// of method Handle on an instance of MockPhabricatorStore.
type PhabricatorStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PhabricatorStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PhabricatorStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// PhabricatorStoreWithFunc describes the behavior when the With method of
// the parent MockPhabricatorStore instance is invoked.
type PhabricatorStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) PhabricatorStore
	hooks       []func(basestore.ShareableStore) PhabricatorStore
	history     []PhabricatorStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPhabricatorStore) With(v0 basestore.ShareableStore) PhabricatorStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(PhabricatorStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockPhabricatorStore instance is invoked and the hook queue is
// empty.
func (f *PhabricatorStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) PhabricatorStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockPhabricatorStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *PhabricatorStoreWithFunc) PushHook(hook func(basestore.ShareableStore) PhabricatorStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PhabricatorStoreWithFunc) SetDefaultReturn(r0 PhabricatorStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) PhabricatorStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PhabricatorStoreWithFunc) PushReturn(r0 PhabricatorStore) {
	f.PushHook(func(basestore.ShareableStore) PhabricatorStore {
		return r0
	})
}

func (f *PhabricatorStoreWithFunc) nextHook() func(basestore.ShareableStore) PhabricatorStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PhabricatorStoreWithFunc) appendCall(r0 PhabricatorStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PhabricatorStoreWithFuncCall objects
// describing the invocations of this function.
func (f *PhabricatorStoreWithFunc) History() []PhabricatorStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]PhabricatorStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PhabricatorStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockPhabricatorStore.
type PhabricatorStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 PhabricatorStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PhabricatorStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PhabricatorStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// PhabricatorStoreWithTransactFunc describes the behavior when the
// WithTransact method of the parent MockPhabricatorStore instance is
// invoked.
type PhabricatorStoreWithTransactFunc struct {
	defaultHook func(context.Context, func(PhabricatorStore) error) error
	hooks       []func(context.Context, func(PhabricatorStore) error) error
	history     []PhabricatorStoreWithTransactFuncCall
	mutex       sync.Mutex
}

// WithTransact delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockPhabricatorStore) WithTransact(v0 context.Context, v1 func(PhabricatorStore) error) error {
	r0 := m.WithTransactFunc.nextHook()(v0, v1)
	m.WithTransactFunc.appendCall(PhabricatorStoreWithTransactFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithTransact method
// of the parent MockPhabricatorStore instance is invoked and the hook queue
// is empty.
func (f *PhabricatorStoreWithTransactFunc) SetDefaultHook(hook func(context.Context, func(PhabricatorStore) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithTransact method of the parent MockPhabricatorStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *PhabricatorStoreWithTransactFunc) PushHook(hook func(context.Context, func(PhabricatorStore) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PhabricatorStoreWithTransactFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, func(PhabricatorStore) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PhabricatorStoreWithTransactFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, func(PhabricatorStore) error) error {
		return r0
	})
}

func (f *PhabricatorStoreWithTransactFunc) nextHook() func(context.Context, func(PhabricatorStore) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PhabricatorStoreWithTransactFunc) appendCall(r0 PhabricatorStoreWithTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PhabricatorStoreWithTransactFuncCall
// objects describing the invocations of this function.
func (f *PhabricatorStoreWithTransactFunc) History() []PhabricatorStoreWithTransactFuncCall {
	f.mutex.Lock()
	history := make([]PhabricatorStoreWithTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PhabricatorStoreWithTransactFuncCall is an object that describes an
// invocation of method WithTransact on an instance of MockPhabricatorStore.
type PhabricatorStoreWithTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 func(PhabricatorStore) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PhabricatorStoreWithTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PhabricatorStoreWithTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockRecentContributionSignalStore is a mock implementation of the
// RecentContributionSignalStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockRecentContributionSignalStore struct {
	// AddCommitFunc is an instance of a mock function object controlling
	// the behavior of the method AddCommit.
	AddCommitFunc *RecentContributionSignalStoreAddCommitFunc
	// ClearSignalsFunc is an instance of a mock function object controlling
	// the behavior of the method ClearSignals.
	ClearSignalsFunc *RecentContributionSignalStoreClearSignalsFunc
	// FindRecentAuthorsFunc is an instance of a mock function object
	// controlling the behavior of the method FindRecentAuthors.
	FindRecentAuthorsFunc *RecentContributionSignalStoreFindRecentAuthorsFunc
	// WithTransactFunc is an instance of a mock function object controlling
	// the behavior of the method WithTransact.
	WithTransactFunc *RecentContributionSignalStoreWithTransactFunc
}

// NewMockRecentContributionSignalStore creates a new mock of the
// RecentContributionSignalStore interface. All methods return zero values
// for all results, unless overwritten.
func NewMockRecentContributionSignalStore() *MockRecentContributionSignalStore {
	return &MockRecentContributionSignalStore{
		AddCommitFunc: &RecentContributionSignalStoreAddCommitFunc{
			defaultHook: func(context.Context, Commit) (r0 error) {
				return
			},
		},
		ClearSignalsFunc: &RecentContributionSignalStoreClearSignalsFunc{
			defaultHook: func(context.Context, api.RepoID) (r0 error) {
				return
			},
		},
		FindRecentAuthorsFunc: &RecentContributionSignalStoreFindRecentAuthorsFunc{
			defaultHook: func(context.Context, api.RepoID, string) (r0 []RecentContributorSummary, r1 error) {
				return
			},
		},
		WithTransactFunc: &RecentContributionSignalStoreWithTransactFunc{
			defaultHook: func(context.Context, func(store RecentContributionSignalStore) error) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockRecentContributionSignalStore creates a new mock of the
// RecentContributionSignalStore interface. All methods panic on invocation,
// unless overwritten.
func NewStrictMockRecentContributionSignalStore() *MockRecentContributionSignalStore {
	return &MockRecentContributionSignalStore{
		AddCommitFunc: &RecentContributionSignalStoreAddCommitFunc{
			defaultHook: func(context.Context, Commit) error {
				panic("unexpected invocation of MockRecentContributionSignalStore.AddCommit")
			},
		},
		ClearSignalsFunc: &RecentContributionSignalStoreClearSignalsFunc{
			defaultHook: func(context.Context, api.RepoID) error {
				panic("unexpected invocation of MockRecentContributionSignalStore.ClearSignals")
			},
		},
		FindRecentAuthorsFunc: &RecentContributionSignalStoreFindRecentAuthorsFunc{
			defaultHook: func(context.Context, api.RepoID, string) ([]RecentContributorSummary, error) {
				panic("unexpected invocation of MockRecentContributionSignalStore.FindRecentAuthors")
			},
		},
		WithTransactFunc: &RecentContributionSignalStoreWithTransactFunc{
			defaultHook: func(context.Context, func(store RecentContributionSignalStore) error) error {
				panic("unexpected invocation of MockRecentContributionSignalStore.WithTransact")
			},
		},
	}
}

// NewMockRecentContributionSignalStoreFrom creates a new mock of the
// MockRecentContributionSignalStore interface. All methods delegate to the
// given implementation, unless overwritten.
func NewMockRecentContributionSignalStoreFrom(i RecentContributionSignalStore) *MockRecentContributionSignalStore {
	return &MockRecentContributionSignalStore{
		AddCommitFunc: &RecentContributionSignalStoreAddCommitFunc{
			defaultHook: i.AddCommit,
		},
		ClearSignalsFunc: &RecentContributionSignalStoreClearSignalsFunc{
			defaultHook: i.ClearSignals,
		},
		FindRecentAuthorsFunc: &RecentContributionSignalStoreFindRecentAuthorsFunc{
			defaultHook: i.FindRecentAuthors,
		},
		WithTransactFunc: &RecentContributionSignalStoreWithTransactFunc{
			defaultHook: i.WithTransact,
		},
	}
}

// RecentContributionSignalStoreAddCommitFunc describes the behavior when
// the AddCommit method of the parent MockRecentContributionSignalStore
// instance is invoked.
type RecentContributionSignalStoreAddCommitFunc struct {
	defaultHook func(context.Context, Commit) error
	hooks       []func(context.Context, Commit) error
	history     []RecentContributionSignalStoreAddCommitFuncCall
	mutex       sync.Mutex
}

// AddCommit delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRecentContributionSignalStore) AddCommit(v0 context.Context, v1 Commit) error {
	r0 := m.AddCommitFunc.nextHook()(v0, v1)
	m.AddCommitFunc.appendCall(RecentContributionSignalStoreAddCommitFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the AddCommit method of
// the parent MockRecentContributionSignalStore instance is invoked and the
// hook queue is empty.
func (f *RecentContributionSignalStoreAddCommitFunc) SetDefaultHook(hook func(context.Context, Commit) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AddCommit method of the parent MockRecentContributionSignalStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *RecentContributionSignalStoreAddCommitFunc) PushHook(hook func(context.Context, Commit) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RecentContributionSignalStoreAddCommitFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, Commit) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RecentContributionSignalStoreAddCommitFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, Commit) error {
		return r0
	})
}

func (f *RecentContributionSignalStoreAddCommitFunc) nextHook() func(context.Context, Commit) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RecentContributionSignalStoreAddCommitFunc) appendCall(r0 RecentContributionSignalStoreAddCommitFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// RecentContributionSignalStoreAddCommitFuncCall objects describing the
// invocations of this function.
func (f *RecentContributionSignalStoreAddCommitFunc) History() []RecentContributionSignalStoreAddCommitFuncCall {
	f.mutex.Lock()
	history := make([]RecentContributionSignalStoreAddCommitFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RecentContributionSignalStoreAddCommitFuncCall is an object that
// describes an invocation of method AddCommit on an instance of
// MockRecentContributionSignalStore.
type RecentContributionSignalStoreAddCommitFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 Commit
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RecentContributionSignalStoreAddCommitFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RecentContributionSignalStoreAddCommitFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RecentContributionSignalStoreClearSignalsFunc describes the behavior when
// the ClearSignals method of the parent MockRecentContributionSignalStore
// instance is invoked.
type RecentContributionSignalStoreClearSignalsFunc struct {
	defaultHook func(context.Context, api.RepoID) error
	hooks       []func(context.Context, api.RepoID) error
	history     []RecentContributionSignalStoreClearSignalsFuncCall
	mutex       sync.Mutex
}

// ClearSignals delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockRecentContributionSignalStore) ClearSignals(v0 context.Context, v1 api.RepoID) error {
	r0 := m.ClearSignalsFunc.nextHook()(v0, v1)
	m.ClearSignalsFunc.appendCall(RecentContributionSignalStoreClearSignalsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the ClearSignals method
// of the parent MockRecentContributionSignalStore instance is invoked and
// the hook queue is empty.
func (f *RecentContributionSignalStoreClearSignalsFunc) SetDefaultHook(hook func(context.Context, api.RepoID) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ClearSignals method of the parent MockRecentContributionSignalStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *RecentContributionSignalStoreClearSignalsFunc) PushHook(hook func(context.Context, api.RepoID) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RecentContributionSignalStoreClearSignalsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, api.RepoID) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RecentContributionSignalStoreClearSignalsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, api.RepoID) error {
		return r0
	})
}

func (f *RecentContributionSignalStoreClearSignalsFunc) nextHook() func(context.Context, api.RepoID) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RecentContributionSignalStoreClearSignalsFunc) appendCall(r0 RecentContributionSignalStoreClearSignalsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// RecentContributionSignalStoreClearSignalsFuncCall objects describing the
// invocations of this function.
func (f *RecentContributionSignalStoreClearSignalsFunc) History() []RecentContributionSignalStoreClearSignalsFuncCall {
	f.mutex.Lock()
	history := make([]RecentContributionSignalStoreClearSignalsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RecentContributionSignalStoreClearSignalsFuncCall is an object that
// describes an invocation of method ClearSignals on an instance of
// MockRecentContributionSignalStore.
type RecentContributionSignalStoreClearSignalsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RecentContributionSignalStoreClearSignalsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RecentContributionSignalStoreClearSignalsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RecentContributionSignalStoreFindRecentAuthorsFunc describes the behavior
// when the FindRecentAuthors method of the parent
// MockRecentContributionSignalStore instance is invoked.
type RecentContributionSignalStoreFindRecentAuthorsFunc struct {
	defaultHook func(context.Context, api.RepoID, string) ([]RecentContributorSummary, error)
	hooks       []func(context.Context, api.RepoID, string) ([]RecentContributorSummary, error)
	history     []RecentContributionSignalStoreFindRecentAuthorsFuncCall
	mutex       sync.Mutex
}

// FindRecentAuthors delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockRecentContributionSignalStore) FindRecentAuthors(v0 context.Context, v1 api.RepoID, v2 string) ([]RecentContributorSummary, error) {
	r0, r1 := m.FindRecentAuthorsFunc.nextHook()(v0, v1, v2)
	m.FindRecentAuthorsFunc.appendCall(RecentContributionSignalStoreFindRecentAuthorsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FindRecentAuthors
// method of the parent MockRecentContributionSignalStore instance is
// invoked and the hook queue is empty.
func (f *RecentContributionSignalStoreFindRecentAuthorsFunc) SetDefaultHook(hook func(context.Context, api.RepoID, string) ([]RecentContributorSummary, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FindRecentAuthors method of the parent MockRecentContributionSignalStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *RecentContributionSignalStoreFindRecentAuthorsFunc) PushHook(hook func(context.Context, api.RepoID, string) ([]RecentContributorSummary, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RecentContributionSignalStoreFindRecentAuthorsFunc) SetDefaultReturn(r0 []RecentContributorSummary, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoID, string) ([]RecentContributorSummary, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RecentContributionSignalStoreFindRecentAuthorsFunc) PushReturn(r0 []RecentContributorSummary, r1 error) {
	f.PushHook(func(context.Context, api.RepoID, string) ([]RecentContributorSummary, error) {
		return r0, r1
	})
}

func (f *RecentContributionSignalStoreFindRecentAuthorsFunc) nextHook() func(context.Context, api.RepoID, string) ([]RecentContributorSummary, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RecentContributionSignalStoreFindRecentAuthorsFunc) appendCall(r0 RecentContributionSignalStoreFindRecentAuthorsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// RecentContributionSignalStoreFindRecentAuthorsFuncCall objects describing
// the invocations of this function.
func (f *RecentContributionSignalStoreFindRecentAuthorsFunc) History() []RecentContributionSignalStoreFindRecentAuthorsFuncCall {
	f.mutex.Lock()
	history := make([]RecentContributionSignalStoreFindRecentAuthorsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RecentContributionSignalStoreFindRecentAuthorsFuncCall is an object that
// describes an invocation of method FindRecentAuthors on an instance of
// MockRecentContributionSignalStore.
type RecentContributionSignalStoreFindRecentAuthorsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoID
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []RecentContributorSummary
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RecentContributionSignalStoreFindRecentAuthorsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RecentContributionSignalStoreFindRecentAuthorsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RecentContributionSignalStoreWithTransactFunc describes the behavior when
// the WithTransact method of the parent MockRecentContributionSignalStore
// instance is invoked.
type RecentContributionSignalStoreWithTransactFunc struct {
	defaultHook func(context.Context, func(store RecentContributionSignalStore) error) error
	hooks       []func(context.Context, func(store RecentContributionSignalStore) error) error
	history     []RecentContributionSignalStoreWithTransactFuncCall
	mutex       sync.Mutex
}

// WithTransact delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockRecentContributionSignalStore) WithTransact(v0 context.Context, v1 func(store RecentContributionSignalStore) error) error {
	r0 := m.WithTransactFunc.nextHook()(v0, v1)
	m.WithTransactFunc.appendCall(RecentContributionSignalStoreWithTransactFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithTransact method
// of the parent MockRecentContributionSignalStore instance is invoked and
// the hook queue is empty.
func (f *RecentContributionSignalStoreWithTransactFunc) SetDefaultHook(hook func(context.Context, func(store RecentContributionSignalStore) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithTransact method of the parent MockRecentContributionSignalStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *RecentContributionSignalStoreWithTransactFunc) PushHook(hook func(context.Context, func(store RecentContributionSignalStore) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RecentContributionSignalStoreWithTransactFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, func(store RecentContributionSignalStore) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RecentContributionSignalStoreWithTransactFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, func(store RecentContributionSignalStore) error) error {
		return r0
	})
}

func (f *RecentContributionSignalStoreWithTransactFunc) nextHook() func(context.Context, func(store RecentContributionSignalStore) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RecentContributionSignalStoreWithTransactFunc) appendCall(r0 RecentContributionSignalStoreWithTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// RecentContributionSignalStoreWithTransactFuncCall objects describing the
// invocations of this function.
func (f *RecentContributionSignalStoreWithTransactFunc) History() []RecentContributionSignalStoreWithTransactFuncCall {
	f.mutex.Lock()
	history := make([]RecentContributionSignalStoreWithTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RecentContributionSignalStoreWithTransactFuncCall is an object that
// describes an invocation of method WithTransact on an instance of
// MockRecentContributionSignalStore.
type RecentContributionSignalStoreWithTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 func(store RecentContributionSignalStore) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RecentContributionSignalStoreWithTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RecentContributionSignalStoreWithTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockRecentViewSignalStore is a mock implementation of the
// RecentViewSignalStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockRecentViewSignalStore struct {
	// BuildAggregateFromEventsFunc is an instance of a mock function object
	// controlling the behavior of the method BuildAggregateFromEvents.
	BuildAggregateFromEventsFunc *RecentViewSignalStoreBuildAggregateFromEventsFunc
	// InsertFunc is an instance of a mock function object controlling the
	// behavior of the method Insert.
	InsertFunc *RecentViewSignalStoreInsertFunc
	// InsertPathsFunc is an instance of a mock function object controlling
	// the behavior of the method InsertPaths.
	InsertPathsFunc *RecentViewSignalStoreInsertPathsFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *RecentViewSignalStoreListFunc
}

// NewMockRecentViewSignalStore creates a new mock of the
// RecentViewSignalStore interface. All methods return zero values for all
// results, unless overwritten.
func NewMockRecentViewSignalStore() *MockRecentViewSignalStore {
	return &MockRecentViewSignalStore{
		BuildAggregateFromEventsFunc: &RecentViewSignalStoreBuildAggregateFromEventsFunc{
			defaultHook: func(context.Context, []*Event) (r0 error) {
				return
			},
		},
		InsertFunc: &RecentViewSignalStoreInsertFunc{
			defaultHook: func(context.Context, int32, int, int) (r0 error) {
				return
			},
		},
		InsertPathsFunc: &RecentViewSignalStoreInsertPathsFunc{
			defaultHook: func(context.Context, int32, map[int]int) (r0 error) {
				return
			},
		},
		ListFunc: &RecentViewSignalStoreListFunc{
			defaultHook: func(context.Context, ListRecentViewSignalOpts) (r0 []RecentViewSummary, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockRecentViewSignalStore creates a new mock of the
// RecentViewSignalStore interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockRecentViewSignalStore() *MockRecentViewSignalStore {
	return &MockRecentViewSignalStore{
		BuildAggregateFromEventsFunc: &RecentViewSignalStoreBuildAggregateFromEventsFunc{
			defaultHook: func(context.Context, []*Event) error {
				panic("unexpected invocation of MockRecentViewSignalStore.BuildAggregateFromEvents")
			},
		},
		InsertFunc: &RecentViewSignalStoreInsertFunc{
			defaultHook: func(context.Context, int32, int, int) error {
				panic("unexpected invocation of MockRecentViewSignalStore.Insert")
			},
		},
		InsertPathsFunc: &RecentViewSignalStoreInsertPathsFunc{
			defaultHook: func(context.Context, int32, map[int]int) error {
				panic("unexpected invocation of MockRecentViewSignalStore.InsertPaths")
			},
		},
		ListFunc: &RecentViewSignalStoreListFunc{
			defaultHook: func(context.Context, ListRecentViewSignalOpts) ([]RecentViewSummary, error) {
				panic("unexpected invocation of MockRecentViewSignalStore.List")
			},
		},
	}
}

// NewMockRecentViewSignalStoreFrom creates a new mock of the
// MockRecentViewSignalStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockRecentViewSignalStoreFrom(i RecentViewSignalStore) *MockRecentViewSignalStore {
	return &MockRecentViewSignalStore{
		BuildAggregateFromEventsFunc: &RecentViewSignalStoreBuildAggregateFromEventsFunc{
			defaultHook: i.BuildAggregateFromEvents,
		},
		InsertFunc: &RecentViewSignalStoreInsertFunc{
			defaultHook: i.Insert,
		},
		InsertPathsFunc: &RecentViewSignalStoreInsertPathsFunc{
			defaultHook: i.InsertPaths,
		},
		ListFunc: &RecentViewSignalStoreListFunc{
			defaultHook: i.List,
		},
	}
}

// RecentViewSignalStoreBuildAggregateFromEventsFunc describes the behavior
// when the BuildAggregateFromEvents method of the parent
// MockRecentViewSignalStore instance is invoked.
type RecentViewSignalStoreBuildAggregateFromEventsFunc struct {
	defaultHook func(context.Context, []*Event) error
	hooks       []func(context.Context, []*Event) error
	history     []RecentViewSignalStoreBuildAggregateFromEventsFuncCall
	mutex       sync.Mutex
}

// BuildAggregateFromEvents delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockRecentViewSignalStore) BuildAggregateFromEvents(v0 context.Context, v1 []*Event) error {
	r0 := m.BuildAggregateFromEventsFunc.nextHook()(v0, v1)
	m.BuildAggregateFromEventsFunc.appendCall(RecentViewSignalStoreBuildAggregateFromEventsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// BuildAggregateFromEvents method of the parent MockRecentViewSignalStore
// instance is invoked and the hook queue is empty.
func (f *RecentViewSignalStoreBuildAggregateFromEventsFunc) SetDefaultHook(hook func(context.Context, []*Event) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BuildAggregateFromEvents method of the parent MockRecentViewSignalStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *RecentViewSignalStoreBuildAggregateFromEventsFunc) PushHook(hook func(context.Context, []*Event) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RecentViewSignalStoreBuildAggregateFromEventsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []*Event) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RecentViewSignalStoreBuildAggregateFromEventsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []*Event) error {
		return r0
	})
}

func (f *RecentViewSignalStoreBuildAggregateFromEventsFunc) nextHook() func(context.Context, []*Event) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RecentViewSignalStoreBuildAggregateFromEventsFunc) appendCall(r0 RecentViewSignalStoreBuildAggregateFromEventsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// RecentViewSignalStoreBuildAggregateFromEventsFuncCall objects describing
// the invocations of this function.
func (f *RecentViewSignalStoreBuildAggregateFromEventsFunc) History() []RecentViewSignalStoreBuildAggregateFromEventsFuncCall {
	f.mutex.Lock()
	history := make([]RecentViewSignalStoreBuildAggregateFromEventsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RecentViewSignalStoreBuildAggregateFromEventsFuncCall is an object that
// describes an invocation of method BuildAggregateFromEvents on an instance
// of MockRecentViewSignalStore.
type RecentViewSignalStoreBuildAggregateFromEventsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []*Event
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RecentViewSignalStoreBuildAggregateFromEventsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RecentViewSignalStoreBuildAggregateFromEventsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RecentViewSignalStoreInsertFunc describes the behavior when the Insert
// method of the parent MockRecentViewSignalStore instance is invoked.
type RecentViewSignalStoreInsertFunc struct {
	defaultHook func(context.Context, int32, int, int) error
	hooks       []func(context.Context, int32, int, int) error
	history     []RecentViewSignalStoreInsertFuncCall
	mutex       sync.Mutex
}

// Insert delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRecentViewSignalStore) Insert(v0 context.Context, v1 int32, v2 int, v3 int) error {
	r0 := m.InsertFunc.nextHook()(v0, v1, v2, v3)
	m.InsertFunc.appendCall(RecentViewSignalStoreInsertFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Insert method of the
// parent MockRecentViewSignalStore instance is invoked and the hook queue
// is empty.
func (f *RecentViewSignalStoreInsertFunc) SetDefaultHook(hook func(context.Context, int32, int, int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Insert method of the parent MockRecentViewSignalStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *RecentViewSignalStoreInsertFunc) PushHook(hook func(context.Context, int32, int, int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RecentViewSignalStoreInsertFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, int, int) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RecentViewSignalStoreInsertFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, int, int) error {
		return r0
	})
}

func (f *RecentViewSignalStoreInsertFunc) nextHook() func(context.Context, int32, int, int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RecentViewSignalStoreInsertFunc) appendCall(r0 RecentViewSignalStoreInsertFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RecentViewSignalStoreInsertFuncCall objects
// describing the invocations of this function.
func (f *RecentViewSignalStoreInsertFunc) History() []RecentViewSignalStoreInsertFuncCall {
	f.mutex.Lock()
	history := make([]RecentViewSignalStoreInsertFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RecentViewSignalStoreInsertFuncCall is an object that describes an
// invocation of method Insert on an instance of MockRecentViewSignalStore.
type RecentViewSignalStoreInsertFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RecentViewSignalStoreInsertFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RecentViewSignalStoreInsertFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RecentViewSignalStoreInsertPathsFunc describes the behavior when the
// InsertPaths method of the parent MockRecentViewSignalStore instance is
// invoked.
type RecentViewSignalStoreInsertPathsFunc struct {
	defaultHook func(context.Context, int32, map[int]int) error
	hooks       []func(context.Context, int32, map[int]int) error
	history     []RecentViewSignalStoreInsertPathsFuncCall
	mutex       sync.Mutex
}

// InsertPaths delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockRecentViewSignalStore) InsertPaths(v0 context.Context, v1 int32, v2 map[int]int) error {
	r0 := m.InsertPathsFunc.nextHook()(v0, v1, v2)
	m.InsertPathsFunc.appendCall(RecentViewSignalStoreInsertPathsFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the InsertPaths method
// of the parent MockRecentViewSignalStore instance is invoked and the hook
// queue is empty.
func (f *RecentViewSignalStoreInsertPathsFunc) SetDefaultHook(hook func(context.Context, int32, map[int]int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// InsertPaths method of the parent MockRecentViewSignalStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *RecentViewSignalStoreInsertPathsFunc) PushHook(hook func(context.Context, int32, map[int]int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RecentViewSignalStoreInsertPathsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, map[int]int) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RecentViewSignalStoreInsertPathsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, map[int]int) error {
		return r0
	})
}

func (f *RecentViewSignalStoreInsertPathsFunc) nextHook() func(context.Context, int32, map[int]int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RecentViewSignalStoreInsertPathsFunc) appendCall(r0 RecentViewSignalStoreInsertPathsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RecentViewSignalStoreInsertPathsFuncCall
// objects describing the invocations of this function.
func (f *RecentViewSignalStoreInsertPathsFunc) History() []RecentViewSignalStoreInsertPathsFuncCall {
	f.mutex.Lock()
	history := make([]RecentViewSignalStoreInsertPathsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RecentViewSignalStoreInsertPathsFuncCall is an object that describes an
// invocation of method InsertPaths on an instance of
// MockRecentViewSignalStore.
type RecentViewSignalStoreInsertPathsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 map[int]int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RecentViewSignalStoreInsertPathsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RecentViewSignalStoreInsertPathsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RecentViewSignalStoreListFunc describes the behavior when the List method
// of the parent MockRecentViewSignalStore instance is invoked.
type RecentViewSignalStoreListFunc struct {
	defaultHook func(context.Context, ListRecentViewSignalOpts) ([]RecentViewSummary, error)
	hooks       []func(context.Context, ListRecentViewSignalOpts) ([]RecentViewSummary, error)
	history     []RecentViewSignalStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRecentViewSignalStore) List(v0 context.Context, v1 ListRecentViewSignalOpts) ([]RecentViewSummary, error) {
	r0, r1 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(RecentViewSignalStoreListFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockRecentViewSignalStore instance is invoked and the hook queue
// is empty.
func (f *RecentViewSignalStoreListFunc) SetDefaultHook(hook func(context.Context, ListRecentViewSignalOpts) ([]RecentViewSummary, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockRecentViewSignalStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *RecentViewSignalStoreListFunc) PushHook(hook func(context.Context, ListRecentViewSignalOpts) ([]RecentViewSummary, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RecentViewSignalStoreListFunc) SetDefaultReturn(r0 []RecentViewSummary, r1 error) {
	f.SetDefaultHook(func(context.Context, ListRecentViewSignalOpts) ([]RecentViewSummary, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RecentViewSignalStoreListFunc) PushReturn(r0 []RecentViewSummary, r1 error) {
	f.PushHook(func(context.Context, ListRecentViewSignalOpts) ([]RecentViewSummary, error) {
		return r0, r1
	})
}

func (f *RecentViewSignalStoreListFunc) nextHook() func(context.Context, ListRecentViewSignalOpts) ([]RecentViewSummary, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RecentViewSignalStoreListFunc) appendCall(r0 RecentViewSignalStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RecentViewSignalStoreListFuncCall objects
// describing the invocations of this function.
func (f *RecentViewSignalStoreListFunc) History() []RecentViewSignalStoreListFuncCall {
	f.mutex.Lock()
	history := make([]RecentViewSignalStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RecentViewSignalStoreListFuncCall is an object that describes an
// invocation of method List on an instance of MockRecentViewSignalStore.
type RecentViewSignalStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ListRecentViewSignalOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []RecentViewSummary
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RecentViewSignalStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RecentViewSignalStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockRepoCommitsChangelistsStore is a mock implementation of the
// RepoCommitsChangelistsStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockRepoCommitsChangelistsStore struct {
	// BatchInsertCommitSHAsWithPerforceChangelistIDFunc is an instance of a
	// mock function object controlling the behavior of the method
	// BatchInsertCommitSHAsWithPerforceChangelistID.
	BatchInsertCommitSHAsWithPerforceChangelistIDFunc *RepoCommitsChangelistsStoreBatchInsertCommitSHAsWithPerforceChangelistIDFunc
	// GetLatestForRepoFunc is an instance of a mock function object
	// controlling the behavior of the method GetLatestForRepo.
	GetLatestForRepoFunc *RepoCommitsChangelistsStoreGetLatestForRepoFunc
}

// NewMockRepoCommitsChangelistsStore creates a new mock of the
// RepoCommitsChangelistsStore interface. All methods return zero values for
// all results, unless overwritten.
func NewMockRepoCommitsChangelistsStore() *MockRepoCommitsChangelistsStore {
	return &MockRepoCommitsChangelistsStore{
		BatchInsertCommitSHAsWithPerforceChangelistIDFunc: &RepoCommitsChangelistsStoreBatchInsertCommitSHAsWithPerforceChangelistIDFunc{
			defaultHook: func(context.Context, api.RepoID, []types.PerforceChangelist) (r0 error) {
				return
			},
		},
		GetLatestForRepoFunc: &RepoCommitsChangelistsStoreGetLatestForRepoFunc{
			defaultHook: func(context.Context, api.RepoID) (r0 *types.RepoCommit, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockRepoCommitsChangelistsStore creates a new mock of the
// RepoCommitsChangelistsStore interface. All methods panic on invocation,
// unless overwritten.
func NewStrictMockRepoCommitsChangelistsStore() *MockRepoCommitsChangelistsStore {
	return &MockRepoCommitsChangelistsStore{
		BatchInsertCommitSHAsWithPerforceChangelistIDFunc: &RepoCommitsChangelistsStoreBatchInsertCommitSHAsWithPerforceChangelistIDFunc{
			defaultHook: func(context.Context, api.RepoID, []types.PerforceChangelist) error {
				panic("unexpected invocation of MockRepoCommitsChangelistsStore.BatchInsertCommitSHAsWithPerforceChangelistID")
			},
		},
		GetLatestForRepoFunc: &RepoCommitsChangelistsStoreGetLatestForRepoFunc{
			defaultHook: func(context.Context, api.RepoID) (*types.RepoCommit, error) {
				panic("unexpected invocation of MockRepoCommitsChangelistsStore.GetLatestForRepo")
			},
		},
	}
}

// NewMockRepoCommitsChangelistsStoreFrom creates a new mock of the
// MockRepoCommitsChangelistsStore interface. All methods delegate to the
// given implementation, unless overwritten.
func NewMockRepoCommitsChangelistsStoreFrom(i RepoCommitsChangelistsStore) *MockRepoCommitsChangelistsStore {
	return &MockRepoCommitsChangelistsStore{
		BatchInsertCommitSHAsWithPerforceChangelistIDFunc: &RepoCommitsChangelistsStoreBatchInsertCommitSHAsWithPerforceChangelistIDFunc{
			defaultHook: i.BatchInsertCommitSHAsWithPerforceChangelistID,
		},
		GetLatestForRepoFunc: &RepoCommitsChangelistsStoreGetLatestForRepoFunc{
			defaultHook: i.GetLatestForRepo,
		},
	}
}

// RepoCommitsChangelistsStoreBatchInsertCommitSHAsWithPerforceChangelistIDFunc
// describes the behavior when the
// BatchInsertCommitSHAsWithPerforceChangelistID method of the parent
// MockRepoCommitsChangelistsStore instance is invoked.
type RepoCommitsChangelistsStoreBatchInsertCommitSHAsWithPerforceChangelistIDFunc struct {
	defaultHook func(context.Context, api.RepoID, []types.PerforceChangelist) error
	hooks       []func(context.Context, api.RepoID, []types.PerforceChangelist) error
	history     []RepoCommitsChangelistsStoreBatchInsertCommitSHAsWithPerforceChangelistIDFuncCall
	mutex       sync.Mutex
}

// BatchInsertCommitSHAsWithPerforceChangelistID delegates to the next hook
// function in the queue and stores the parameter and result values of this
// invocation.
func (m *MockRepoCommitsChangelistsStore) BatchInsertCommitSHAsWithPerforceChangelistID(v0 context.Context, v1 api.RepoID, v2 []types.PerforceChangelist) error {
	r0 := m.BatchInsertCommitSHAsWithPerforceChangelistIDFunc.nextHook()(v0, v1, v2)
	m.BatchInsertCommitSHAsWithPerforceChangelistIDFunc.appendCall(RepoCommitsChangelistsStoreBatchInsertCommitSHAsWithPerforceChangelistIDFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// BatchInsertCommitSHAsWithPerforceChangelistID method of the parent
// MockRepoCommitsChangelistsStore instance is invoked and the hook queue is
// empty.
func (f *RepoCommitsChangelistsStoreBatchInsertCommitSHAsWithPerforceChangelistIDFunc) SetDefaultHook(hook func(context.Context, api.RepoID, []types.PerforceChangelist) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BatchInsertCommitSHAsWithPerforceChangelistID method of the parent
// MockRepoCommitsChangelistsStore instance invokes the hook at the front of
// the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *RepoCommitsChangelistsStoreBatchInsertCommitSHAsWithPerforceChangelistIDFunc) PushHook(hook func(context.Context, api.RepoID, []types.PerforceChangelist) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoCommitsChangelistsStoreBatchInsertCommitSHAsWithPerforceChangelistIDFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, api.RepoID, []types.PerforceChangelist) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoCommitsChangelistsStoreBatchInsertCommitSHAsWithPerforceChangelistIDFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, api.RepoID, []types.PerforceChangelist) error {
		return r0
	})
}

func (f *RepoCommitsChangelistsStoreBatchInsertCommitSHAsWithPerforceChangelistIDFunc) nextHook() func(context.Context, api.RepoID, []types.PerforceChangelist) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoCommitsChangelistsStoreBatchInsertCommitSHAsWithPerforceChangelistIDFunc) appendCall(r0 RepoCommitsChangelistsStoreBatchInsertCommitSHAsWithPerforceChangelistIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// RepoCommitsChangelistsStoreBatchInsertCommitSHAsWithPerforceChangelistIDFuncCall
// objects describing the invocations of this function.
func (f *RepoCommitsChangelistsStoreBatchInsertCommitSHAsWithPerforceChangelistIDFunc) History() []RepoCommitsChangelistsStoreBatchInsertCommitSHAsWithPerforceChangelistIDFuncCall {
	f.mutex.Lock()
	history := make([]RepoCommitsChangelistsStoreBatchInsertCommitSHAsWithPerforceChangelistIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoCommitsChangelistsStoreBatchInsertCommitSHAsWithPerforceChangelistIDFuncCall
// is an object that describes an invocation of method
// BatchInsertCommitSHAsWithPerforceChangelistID on an instance of
// MockRepoCommitsChangelistsStore.
type RepoCommitsChangelistsStoreBatchInsertCommitSHAsWithPerforceChangelistIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoID
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []types.PerforceChangelist
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoCommitsChangelistsStoreBatchInsertCommitSHAsWithPerforceChangelistIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoCommitsChangelistsStoreBatchInsertCommitSHAsWithPerforceChangelistIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RepoCommitsChangelistsStoreGetLatestForRepoFunc describes the behavior
// when the GetLatestForRepo method of the parent
// MockRepoCommitsChangelistsStore instance is invoked.
type RepoCommitsChangelistsStoreGetLatestForRepoFunc struct {
	defaultHook func(context.Context, api.RepoID) (*types.RepoCommit, error)
	hooks       []func(context.Context, api.RepoID) (*types.RepoCommit, error)
	history     []RepoCommitsChangelistsStoreGetLatestForRepoFuncCall
	mutex       sync.Mutex
}

// GetLatestForRepo delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockRepoCommitsChangelistsStore) GetLatestForRepo(v0 context.Context, v1 api.RepoID) (*types.RepoCommit, error) {
	r0, r1 := m.GetLatestForRepoFunc.nextHook()(v0, v1)
	m.GetLatestForRepoFunc.appendCall(RepoCommitsChangelistsStoreGetLatestForRepoFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetLatestForRepo
// method of the parent MockRepoCommitsChangelistsStore instance is invoked
// and the hook queue is empty.
func (f *RepoCommitsChangelistsStoreGetLatestForRepoFunc) SetDefaultHook(hook func(context.Context, api.RepoID) (*types.RepoCommit, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLatestForRepo method of the parent MockRepoCommitsChangelistsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *RepoCommitsChangelistsStoreGetLatestForRepoFunc) PushHook(hook func(context.Context, api.RepoID) (*types.RepoCommit, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoCommitsChangelistsStoreGetLatestForRepoFunc) SetDefaultReturn(r0 *types.RepoCommit, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoID) (*types.RepoCommit, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoCommitsChangelistsStoreGetLatestForRepoFunc) PushReturn(r0 *types.RepoCommit, r1 error) {
	f.PushHook(func(context.Context, api.RepoID) (*types.RepoCommit, error) {
		return r0, r1
	})
}

func (f *RepoCommitsChangelistsStoreGetLatestForRepoFunc) nextHook() func(context.Context, api.RepoID) (*types.RepoCommit, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoCommitsChangelistsStoreGetLatestForRepoFunc) appendCall(r0 RepoCommitsChangelistsStoreGetLatestForRepoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// RepoCommitsChangelistsStoreGetLatestForRepoFuncCall objects describing
// the invocations of this function.
func (f *RepoCommitsChangelistsStoreGetLatestForRepoFunc) History() []RepoCommitsChangelistsStoreGetLatestForRepoFuncCall {
	f.mutex.Lock()
	history := make([]RepoCommitsChangelistsStoreGetLatestForRepoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoCommitsChangelistsStoreGetLatestForRepoFuncCall is an object that
// describes an invocation of method GetLatestForRepo on an instance of
// MockRepoCommitsChangelistsStore.
type RepoCommitsChangelistsStoreGetLatestForRepoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.RepoCommit
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoCommitsChangelistsStoreGetLatestForRepoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoCommitsChangelistsStoreGetLatestForRepoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockRepoStatisticsStore is a mock implementation of the
// RepoStatisticsStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockRepoStatisticsStore struct {
	// CompactRepoStatisticsFunc is an instance of a mock function object
	// controlling the behavior of the method CompactRepoStatistics.
	CompactRepoStatisticsFunc *RepoStatisticsStoreCompactRepoStatisticsFunc
	// GetGitserverReposStatisticsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetGitserverReposStatistics.
	GetGitserverReposStatisticsFunc *RepoStatisticsStoreGetGitserverReposStatisticsFunc
	// GetRepoStatisticsFunc is an instance of a mock function object
	// controlling the behavior of the method GetRepoStatistics.
	GetRepoStatisticsFunc *RepoStatisticsStoreGetRepoStatisticsFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *RepoStatisticsStoreHandleFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *RepoStatisticsStoreWithFunc
	// WithTransactFunc is an instance of a mock function object controlling
	// the behavior of the method WithTransact.
	WithTransactFunc *RepoStatisticsStoreWithTransactFunc
}

// NewMockRepoStatisticsStore creates a new mock of the RepoStatisticsStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockRepoStatisticsStore() *MockRepoStatisticsStore {
	return &MockRepoStatisticsStore{
		CompactRepoStatisticsFunc: &RepoStatisticsStoreCompactRepoStatisticsFunc{
			defaultHook: func(context.Context) (r0 error) {
				return
			},
		},
		GetGitserverReposStatisticsFunc: &RepoStatisticsStoreGetGitserverReposStatisticsFunc{
			defaultHook: func(context.Context) (r0 []GitserverReposStatistic, r1 error) {
				return
			},
		},
		GetRepoStatisticsFunc: &RepoStatisticsStoreGetRepoStatisticsFunc{
			defaultHook: func(context.Context) (r0 RepoStatistics, r1 error) {
				return
			},
		},
		HandleFunc: &RepoStatisticsStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		WithFunc: &RepoStatisticsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 RepoStatisticsStore) {
				return
			},
		},
		WithTransactFunc: &RepoStatisticsStoreWithTransactFunc{
			defaultHook: func(context.Context, func(RepoStatisticsStore) error) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockRepoStatisticsStore creates a new mock of the
// RepoStatisticsStore interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockRepoStatisticsStore() *MockRepoStatisticsStore {
	return &MockRepoStatisticsStore{
		CompactRepoStatisticsFunc: &RepoStatisticsStoreCompactRepoStatisticsFunc{
			defaultHook: func(context.Context) error {
				panic("unexpected invocation of MockRepoStatisticsStore.CompactRepoStatistics")
			},
		},
		GetGitserverReposStatisticsFunc: &RepoStatisticsStoreGetGitserverReposStatisticsFunc{
			defaultHook: func(context.Context) ([]GitserverReposStatistic, error) {
				panic("unexpected invocation of MockRepoStatisticsStore.GetGitserverReposStatistics")
			},
		},
		GetRepoStatisticsFunc: &RepoStatisticsStoreGetRepoStatisticsFunc{
			defaultHook: func(context.Context) (RepoStatistics, error) {
				panic("unexpected invocation of MockRepoStatisticsStore.GetRepoStatistics")
			},
		},
		HandleFunc: &RepoStatisticsStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockRepoStatisticsStore.Handle")
			},
		},
		WithFunc: &RepoStatisticsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) RepoStatisticsStore {
				panic("unexpected invocation of MockRepoStatisticsStore.With")
			},
		},
		WithTransactFunc: &RepoStatisticsStoreWithTransactFunc{
			defaultHook: func(context.Context, func(RepoStatisticsStore) error) error {
				panic("unexpected invocation of MockRepoStatisticsStore.WithTransact")
			},
		},
	}
}

// NewMockRepoStatisticsStoreFrom creates a new mock of the
// MockRepoStatisticsStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockRepoStatisticsStoreFrom(i RepoStatisticsStore) *MockRepoStatisticsStore {
	return &MockRepoStatisticsStore{
		CompactRepoStatisticsFunc: &RepoStatisticsStoreCompactRepoStatisticsFunc{
			defaultHook: i.CompactRepoStatistics,
		},
		GetGitserverReposStatisticsFunc: &RepoStatisticsStoreGetGitserverReposStatisticsFunc{
			defaultHook: i.GetGitserverReposStatistics,
		},
		GetRepoStatisticsFunc: &RepoStatisticsStoreGetRepoStatisticsFunc{
			defaultHook: i.GetRepoStatistics,
		},
		HandleFunc: &RepoStatisticsStoreHandleFunc{
			defaultHook: i.Handle,
		},
		WithFunc: &RepoStatisticsStoreWithFunc{
			defaultHook: i.With,
		},
		WithTransactFunc: &RepoStatisticsStoreWithTransactFunc{
			defaultHook: i.WithTransact,
		},
	}
}

// RepoStatisticsStoreCompactRepoStatisticsFunc describes the behavior when
// the CompactRepoStatistics method of the parent MockRepoStatisticsStore
// instance is invoked.
type RepoStatisticsStoreCompactRepoStatisticsFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []RepoStatisticsStoreCompactRepoStatisticsFuncCall
	mutex       sync.Mutex
}

// CompactRepoStatistics delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockRepoStatisticsStore) CompactRepoStatistics(v0 context.Context) error {
	r0 := m.CompactRepoStatisticsFunc.nextHook()(v0)
	m.CompactRepoStatisticsFunc.appendCall(RepoStatisticsStoreCompactRepoStatisticsFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// CompactRepoStatistics method of the parent MockRepoStatisticsStore
// instance is invoked and the hook queue is empty.
func (f *RepoStatisticsStoreCompactRepoStatisticsFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CompactRepoStatistics method of the parent MockRepoStatisticsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *RepoStatisticsStoreCompactRepoStatisticsFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStatisticsStoreCompactRepoStatisticsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStatisticsStoreCompactRepoStatisticsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *RepoStatisticsStoreCompactRepoStatisticsFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStatisticsStoreCompactRepoStatisticsFunc) appendCall(r0 RepoStatisticsStoreCompactRepoStatisticsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// RepoStatisticsStoreCompactRepoStatisticsFuncCall objects describing the
// invocations of this function.
func (f *RepoStatisticsStoreCompactRepoStatisticsFunc) History() []RepoStatisticsStoreCompactRepoStatisticsFuncCall {
	f.mutex.Lock()
	history := make([]RepoStatisticsStoreCompactRepoStatisticsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStatisticsStoreCompactRepoStatisticsFuncCall is an object that
// describes an invocation of method CompactRepoStatistics on an instance of
// MockRepoStatisticsStore.
type RepoStatisticsStoreCompactRepoStatisticsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStatisticsStoreCompactRepoStatisticsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStatisticsStoreCompactRepoStatisticsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RepoStatisticsStoreGetGitserverReposStatisticsFunc describes the behavior
// when the GetGitserverReposStatistics method of the parent
// MockRepoStatisticsStore instance is invoked.
type RepoStatisticsStoreGetGitserverReposStatisticsFunc struct {
	defaultHook func(context.Context) ([]GitserverReposStatistic, error)
	hooks       []func(context.Context) ([]GitserverReposStatistic, error)
	history     []RepoStatisticsStoreGetGitserverReposStatisticsFuncCall
	mutex       sync.Mutex
}

// GetGitserverReposStatistics delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockRepoStatisticsStore) GetGitserverReposStatistics(v0 context.Context) ([]GitserverReposStatistic, error) {
	r0, r1 := m.GetGitserverReposStatisticsFunc.nextHook()(v0)
	m.GetGitserverReposStatisticsFunc.appendCall(RepoStatisticsStoreGetGitserverReposStatisticsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetGitserverReposStatistics method of the parent MockRepoStatisticsStore
// instance is invoked and the hook queue is empty.
func (f *RepoStatisticsStoreGetGitserverReposStatisticsFunc) SetDefaultHook(hook func(context.Context) ([]GitserverReposStatistic, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetGitserverReposStatistics method of the parent MockRepoStatisticsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *RepoStatisticsStoreGetGitserverReposStatisticsFunc) PushHook(hook func(context.Context) ([]GitserverReposStatistic, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStatisticsStoreGetGitserverReposStatisticsFunc) SetDefaultReturn(r0 []GitserverReposStatistic, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]GitserverReposStatistic, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStatisticsStoreGetGitserverReposStatisticsFunc) PushReturn(r0 []GitserverReposStatistic, r1 error) {
	f.PushHook(func(context.Context) ([]GitserverReposStatistic, error) {
		return r0, r1
	})
}

func (f *RepoStatisticsStoreGetGitserverReposStatisticsFunc) nextHook() func(context.Context) ([]GitserverReposStatistic, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStatisticsStoreGetGitserverReposStatisticsFunc) appendCall(r0 RepoStatisticsStoreGetGitserverReposStatisticsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// RepoStatisticsStoreGetGitserverReposStatisticsFuncCall objects describing
// the invocations of this function.
func (f *RepoStatisticsStoreGetGitserverReposStatisticsFunc) History() []RepoStatisticsStoreGetGitserverReposStatisticsFuncCall {
	f.mutex.Lock()
	history := make([]RepoStatisticsStoreGetGitserverReposStatisticsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStatisticsStoreGetGitserverReposStatisticsFuncCall is an object that
// describes an invocation of method GetGitserverReposStatistics on an
// instance of MockRepoStatisticsStore.
type RepoStatisticsStoreGetGitserverReposStatisticsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []GitserverReposStatistic
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStatisticsStoreGetGitserverReposStatisticsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStatisticsStoreGetGitserverReposStatisticsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStatisticsStoreGetRepoStatisticsFunc describes the behavior when the
// GetRepoStatistics method of the parent MockRepoStatisticsStore instance
// is invoked.
type RepoStatisticsStoreGetRepoStatisticsFunc struct {
	defaultHook func(context.Context) (RepoStatistics, error)
	hooks       []func(context.Context) (RepoStatistics, error)
	history     []RepoStatisticsStoreGetRepoStatisticsFuncCall
	mutex       sync.Mutex
}

// GetRepoStatistics delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockRepoStatisticsStore) GetRepoStatistics(v0 context.Context) (RepoStatistics, error) {
	r0, r1 := m.GetRepoStatisticsFunc.nextHook()(v0)
	m.GetRepoStatisticsFunc.appendCall(RepoStatisticsStoreGetRepoStatisticsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetRepoStatistics
// method of the parent MockRepoStatisticsStore instance is invoked and the
// hook queue is empty.
func (f *RepoStatisticsStoreGetRepoStatisticsFunc) SetDefaultHook(hook func(context.Context) (RepoStatistics, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetRepoStatistics method of the parent MockRepoStatisticsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *RepoStatisticsStoreGetRepoStatisticsFunc) PushHook(hook func(context.Context) (RepoStatistics, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStatisticsStoreGetRepoStatisticsFunc) SetDefaultReturn(r0 RepoStatistics, r1 error) {
	f.SetDefaultHook(func(context.Context) (RepoStatistics, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStatisticsStoreGetRepoStatisticsFunc) PushReturn(r0 RepoStatistics, r1 error) {
	f.PushHook(func(context.Context) (RepoStatistics, error) {
		return r0, r1
	})
}

func (f *RepoStatisticsStoreGetRepoStatisticsFunc) nextHook() func(context.Context) (RepoStatistics, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStatisticsStoreGetRepoStatisticsFunc) appendCall(r0 RepoStatisticsStoreGetRepoStatisticsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// RepoStatisticsStoreGetRepoStatisticsFuncCall objects describing the
// invocations of this function.
func (f *RepoStatisticsStoreGetRepoStatisticsFunc) History() []RepoStatisticsStoreGetRepoStatisticsFuncCall {
	f.mutex.Lock()
	history := make([]RepoStatisticsStoreGetRepoStatisticsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStatisticsStoreGetRepoStatisticsFuncCall is an object that describes
// an invocation of method GetRepoStatistics on an instance of
// MockRepoStatisticsStore.
type RepoStatisticsStoreGetRepoStatisticsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 RepoStatistics
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStatisticsStoreGetRepoStatisticsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStatisticsStoreGetRepoStatisticsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStatisticsStoreHandleFunc describes the behavior when the Handle
// method of the parent MockRepoStatisticsStore instance is invoked.
type RepoStatisticsStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []RepoStatisticsStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStatisticsStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(RepoStatisticsStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockRepoStatisticsStore instance is invoked and the hook queue is
// empty.
func (f *RepoStatisticsStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockRepoStatisticsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *RepoStatisticsStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStatisticsStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStatisticsStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *RepoStatisticsStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStatisticsStoreHandleFunc) appendCall(r0 RepoStatisticsStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStatisticsStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *RepoStatisticsStoreHandleFunc) History() []RepoStatisticsStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]RepoStatisticsStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStatisticsStoreHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of MockRepoStatisticsStore.
type RepoStatisticsStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStatisticsStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStatisticsStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RepoStatisticsStoreWithFunc describes the behavior when the With method
// of the parent MockRepoStatisticsStore instance is invoked.
type RepoStatisticsStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) RepoStatisticsStore
	hooks       []func(basestore.ShareableStore) RepoStatisticsStore
	history     []RepoStatisticsStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStatisticsStore) With(v0 basestore.ShareableStore) RepoStatisticsStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(RepoStatisticsStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockRepoStatisticsStore instance is invoked and the hook queue is
// empty.
func (f *RepoStatisticsStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) RepoStatisticsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockRepoStatisticsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *RepoStatisticsStoreWithFunc) PushHook(hook func(basestore.ShareableStore) RepoStatisticsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStatisticsStoreWithFunc) SetDefaultReturn(r0 RepoStatisticsStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) RepoStatisticsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStatisticsStoreWithFunc) PushReturn(r0 RepoStatisticsStore) {
	f.PushHook(func(basestore.ShareableStore) RepoStatisticsStore {
		return r0
	})
}

func (f *RepoStatisticsStoreWithFunc) nextHook() func(basestore.ShareableStore) RepoStatisticsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStatisticsStoreWithFunc) appendCall(r0 RepoStatisticsStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStatisticsStoreWithFuncCall objects
// describing the invocations of this function.
func (f *RepoStatisticsStoreWithFunc) History() []RepoStatisticsStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]RepoStatisticsStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStatisticsStoreWithFuncCall is an object that describes an invocation
// of method With on an instance of MockRepoStatisticsStore.
type RepoStatisticsStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 RepoStatisticsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStatisticsStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStatisticsStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RepoStatisticsStoreWithTransactFunc describes the behavior when the
// WithTransact method of the parent MockRepoStatisticsStore instance is
// invoked.
type RepoStatisticsStoreWithTransactFunc struct {
	defaultHook func(context.Context, func(RepoStatisticsStore) error) error
	hooks       []func(context.Context, func(RepoStatisticsStore) error) error
	history     []RepoStatisticsStoreWithTransactFuncCall
	mutex       sync.Mutex
}

// WithTransact delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockRepoStatisticsStore) WithTransact(v0 context.Context, v1 func(RepoStatisticsStore) error) error {
	r0 := m.WithTransactFunc.nextHook()(v0, v1)
	m.WithTransactFunc.appendCall(RepoStatisticsStoreWithTransactFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithTransact method
// of the parent MockRepoStatisticsStore instance is invoked and the hook
// queue is empty.
func (f *RepoStatisticsStoreWithTransactFunc) SetDefaultHook(hook func(context.Context, func(RepoStatisticsStore) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithTransact method of the parent MockRepoStatisticsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *RepoStatisticsStoreWithTransactFunc) PushHook(hook func(context.Context, func(RepoStatisticsStore) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStatisticsStoreWithTransactFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, func(RepoStatisticsStore) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStatisticsStoreWithTransactFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, func(RepoStatisticsStore) error) error {
		return r0
	})
}

func (f *RepoStatisticsStoreWithTransactFunc) nextHook() func(context.Context, func(RepoStatisticsStore) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStatisticsStoreWithTransactFunc) appendCall(r0 RepoStatisticsStoreWithTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStatisticsStoreWithTransactFuncCall
// objects describing the invocations of this function.
func (f *RepoStatisticsStoreWithTransactFunc) History() []RepoStatisticsStoreWithTransactFuncCall {
	f.mutex.Lock()
	history := make([]RepoStatisticsStoreWithTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStatisticsStoreWithTransactFuncCall is an object that describes an
// invocation of method WithTransact on an instance of
// MockRepoStatisticsStore.
type RepoStatisticsStoreWithTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 func(RepoStatisticsStore) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStatisticsStoreWithTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStatisticsStoreWithTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockRepoStore is a mock implementation of the RepoStore interface (from
// the package github.com/sourcegraph/sourcegraph/internal/database) used
// for unit testing.
type MockRepoStore struct {
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *RepoStoreCountFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *RepoStoreCreateFunc
	// DeleteFunc is an instance of a mock function object controlling the
	// behavior of the method Delete.
	DeleteFunc *RepoStoreDeleteFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *RepoStoreDoneFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *RepoStoreGetFunc
	// GetByHashedNameFunc is an instance of a mock function object
	// controlling the behavior of the method GetByHashedName.
	GetByHashedNameFunc *RepoStoreGetByHashedNameFunc
	// GetByIDsFunc is an instance of a mock function object controlling the
	// behavior of the method GetByIDs.
	GetByIDsFunc *RepoStoreGetByIDsFunc
	// GetByNameFunc is an instance of a mock function object controlling
	// the behavior of the method GetByName.
	GetByNameFunc *RepoStoreGetByNameFunc
	// GetFirstRepoByCloneURLFunc is an instance of a mock function object
	// controlling the behavior of the method GetFirstRepoByCloneURL.
	GetFirstRepoByCloneURLFunc *RepoStoreGetFirstRepoByCloneURLFunc
	// GetFirstRepoNameByCloneURLFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetFirstRepoNameByCloneURL.
	GetFirstRepoNameByCloneURLFunc *RepoStoreGetFirstRepoNameByCloneURLFunc
	// GetRepoDescriptionsByIDsFunc is an instance of a mock function object
	// controlling the behavior of the method GetRepoDescriptionsByIDs.
	GetRepoDescriptionsByIDsFunc *RepoStoreGetRepoDescriptionsByIDsFunc
	// GetReposSetByIDsFunc is an instance of a mock function object
	// controlling the behavior of the method GetReposSetByIDs.
	GetReposSetByIDsFunc *RepoStoreGetReposSetByIDsFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *RepoStoreHandleFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *RepoStoreListFunc
	// ListMinimalReposFunc is an instance of a mock function object
	// controlling the behavior of the method ListMinimalRepos.
	ListMinimalReposFunc *RepoStoreListMinimalReposFunc
	// ListSourcegraphDotComIndexableReposFunc is an instance of a mock
	// function object controlling the behavior of the method
	// ListSourcegraphDotComIndexableRepos.
	ListSourcegraphDotComIndexableReposFunc *RepoStoreListSourcegraphDotComIndexableReposFunc
	// MetadataFunc is an instance of a mock function object controlling the
	// behavior of the method Metadata.
	MetadataFunc *RepoStoreMetadataFunc
	// QueryFunc is an instance of a mock function object controlling the
	// behavior of the method Query.
	QueryFunc *RepoStoreQueryFunc
	// RepoEmbeddingExistsFunc is an instance of a mock function object
	// controlling the behavior of the method RepoEmbeddingExists.
	RepoEmbeddingExistsFunc *RepoStoreRepoEmbeddingExistsFunc
	// StreamMinimalReposFunc is an instance of a mock function object
	// controlling the behavior of the method StreamMinimalRepos.
	StreamMinimalReposFunc *RepoStoreStreamMinimalReposFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *RepoStoreTransactFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *RepoStoreWithFunc
}

// NewMockRepoStore creates a new mock of the RepoStore interface. All
// methods return zero values for all results, unless overwritten.
func NewMockRepoStore() *MockRepoStore {
	return &MockRepoStore{
		CountFunc: &RepoStoreCountFunc{
			defaultHook: func(context.Context, ReposListOptions) (r0 int, r1 error) {
				return
			},
		},
		CreateFunc: &RepoStoreCreateFunc{
			defaultHook: func(context.Context, ...*types.Repo) (r0 error) {
				return
			},
		},
		DeleteFunc: &RepoStoreDeleteFunc{
			defaultHook: func(context.Context, ...api.RepoID) (r0 error) {
				return
			},
		},
		DoneFunc: &RepoStoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		GetFunc: &RepoStoreGetFunc{
			defaultHook: func(context.Context, api.RepoID) (r0 *types.Repo, r1 error) {
				return
			},
		},
		GetByHashedNameFunc: &RepoStoreGetByHashedNameFunc{
			defaultHook: func(context.Context, api.RepoHashedName) (r0 *types.Repo, r1 error) {
				return
			},
		},
		GetByIDsFunc: &RepoStoreGetByIDsFunc{
			defaultHook: func(context.Context, ...api.RepoID) (r0 []*types.Repo, r1 error) {
				return
			},
		},
		GetByNameFunc: &RepoStoreGetByNameFunc{
			defaultHook: func(context.Context, api.RepoName) (r0 *types.Repo, r1 error) {
				return
			},
		},
		GetFirstRepoByCloneURLFunc: &RepoStoreGetFirstRepoByCloneURLFunc{
			defaultHook: func(context.Context, string) (r0 *types.Repo, r1 error) {
				return
			},
		},
		GetFirstRepoNameByCloneURLFunc: &RepoStoreGetFirstRepoNameByCloneURLFunc{
			defaultHook: func(context.Context, string) (r0 api.RepoName, r1 error) {
				return
			},
		},
		GetRepoDescriptionsByIDsFunc: &RepoStoreGetRepoDescriptionsByIDsFunc{
			defaultHook: func(context.Context, ...api.RepoID) (r0 map[api.RepoID]string, r1 error) {
				return
			},
		},
		GetReposSetByIDsFunc: &RepoStoreGetReposSetByIDsFunc{
			defaultHook: func(context.Context, ...api.RepoID) (r0 map[api.RepoID]*types.Repo, r1 error) {
				return
			},
		},
		HandleFunc: &RepoStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		ListFunc: &RepoStoreListFunc{
			defaultHook: func(context.Context, ReposListOptions) (r0 []*types.Repo, r1 error) {
				return
			},
		},
		ListMinimalReposFunc: &RepoStoreListMinimalReposFunc{
			defaultHook: func(context.Context, ReposListOptions) (r0 []types.MinimalRepo, r1 error) {
				return
			},
		},
		ListSourcegraphDotComIndexableReposFunc: &RepoStoreListSourcegraphDotComIndexableReposFunc{
			defaultHook: func(context.Context, ListSourcegraphDotComIndexableReposOptions) (r0 []types.MinimalRepo, r1 error) {
				return
			},
		},
		MetadataFunc: &RepoStoreMetadataFunc{
			defaultHook: func(context.Context, ...api.RepoID) (r0 []*types.SearchedRepo, r1 error) {
				return
			},
		},
		QueryFunc: &RepoStoreQueryFunc{
			defaultHook: func(context.Context, *sqlf.Query) (r0 *sql.Rows, r1 error) {
				return
			},
		},
		RepoEmbeddingExistsFunc: &RepoStoreRepoEmbeddingExistsFunc{
			defaultHook: func(context.Context, api.RepoID) (r0 bool, r1 error) {
				return
			},
		},
		StreamMinimalReposFunc: &RepoStoreStreamMinimalReposFunc{
			defaultHook: func(context.Context, ReposListOptions, func(*types.MinimalRepo)) (r0 error) {
				return
			},
		},
		TransactFunc: &RepoStoreTransactFunc{
			defaultHook: func(context.Context) (r0 RepoStore, r1 error) {
				return
			},
		},
		WithFunc: &RepoStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 RepoStore) {
				return
			},
		},
	}
}

// NewStrictMockRepoStore creates a new mock of the RepoStore interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockRepoStore() *MockRepoStore {
	return &MockRepoStore{
		CountFunc: &RepoStoreCountFunc{
			defaultHook: func(context.Context, ReposListOptions) (int, error) {
				panic("unexpected invocation of MockRepoStore.Count")
			},
		},
		CreateFunc: &RepoStoreCreateFunc{
			defaultHook: func(context.Context, ...*types.Repo) error {
				panic("unexpected invocation of MockRepoStore.Create")
			},
		},
		DeleteFunc: &RepoStoreDeleteFunc{
			defaultHook: func(context.Context, ...api.RepoID) error {
				panic("unexpected invocation of MockRepoStore.Delete")
			},
		},
		DoneFunc: &RepoStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockRepoStore.Done")
			},
		},
		GetFunc: &RepoStoreGetFunc{
			defaultHook: func(context.Context, api.RepoID) (*types.Repo, error) {
				panic("unexpected invocation of MockRepoStore.Get")
			},
		},
		GetByHashedNameFunc: &RepoStoreGetByHashedNameFunc{
			defaultHook: func(context.Context, api.RepoHashedName) (*types.Repo, error) {
				panic("unexpected invocation of MockRepoStore.GetByHashedName")
			},
		},
		GetByIDsFunc: &RepoStoreGetByIDsFunc{
			defaultHook: func(context.Context, ...api.RepoID) ([]*types.Repo, error) {
				panic("unexpected invocation of MockRepoStore.GetByIDs")
			},
		},
		GetByNameFunc: &RepoStoreGetByNameFunc{
			defaultHook: func(context.Context, api.RepoName) (*types.Repo, error) {
				panic("unexpected invocation of MockRepoStore.GetByName")
			},
		},
		GetFirstRepoByCloneURLFunc: &RepoStoreGetFirstRepoByCloneURLFunc{
			defaultHook: func(context.Context, string) (*types.Repo, error) {
				panic("unexpected invocation of MockRepoStore.GetFirstRepoByCloneURL")
			},
		},
		GetFirstRepoNameByCloneURLFunc: &RepoStoreGetFirstRepoNameByCloneURLFunc{
			defaultHook: func(context.Context, string) (api.RepoName, error) {
				panic("unexpected invocation of MockRepoStore.GetFirstRepoNameByCloneURL")
			},
		},
		GetRepoDescriptionsByIDsFunc: &RepoStoreGetRepoDescriptionsByIDsFunc{
			defaultHook: func(context.Context, ...api.RepoID) (map[api.RepoID]string, error) {
				panic("unexpected invocation of MockRepoStore.GetRepoDescriptionsByIDs")
			},
		},
		GetReposSetByIDsFunc: &RepoStoreGetReposSetByIDsFunc{
			defaultHook: func(context.Context, ...api.RepoID) (map[api.RepoID]*types.Repo, error) {
				panic("unexpected invocation of MockRepoStore.GetReposSetByIDs")
			},
		},
		HandleFunc: &RepoStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockRepoStore.Handle")
			},
		},
		ListFunc: &RepoStoreListFunc{
			defaultHook: func(context.Context, ReposListOptions) ([]*types.Repo, error) {
				panic("unexpected invocation of MockRepoStore.List")
			},
		},
		ListMinimalReposFunc: &RepoStoreListMinimalReposFunc{
			defaultHook: func(context.Context, ReposListOptions) ([]types.MinimalRepo, error) {
				panic("unexpected invocation of MockRepoStore.ListMinimalRepos")
			},
		},
		ListSourcegraphDotComIndexableReposFunc: &RepoStoreListSourcegraphDotComIndexableReposFunc{
			defaultHook: func(context.Context, ListSourcegraphDotComIndexableReposOptions) ([]types.MinimalRepo, error) {
				panic("unexpected invocation of MockRepoStore.ListSourcegraphDotComIndexableRepos")
			},
		},
		MetadataFunc: &RepoStoreMetadataFunc{
			defaultHook: func(context.Context, ...api.RepoID) ([]*types.SearchedRepo, error) {
				panic("unexpected invocation of MockRepoStore.Metadata")
			},
		},
		QueryFunc: &RepoStoreQueryFunc{
			defaultHook: func(context.Context, *sqlf.Query) (*sql.Rows, error) {
				panic("unexpected invocation of MockRepoStore.Query")
			},
		},
		RepoEmbeddingExistsFunc: &RepoStoreRepoEmbeddingExistsFunc{
			defaultHook: func(context.Context, api.RepoID) (bool, error) {
				panic("unexpected invocation of MockRepoStore.RepoEmbeddingExists")
			},
		},
		StreamMinimalReposFunc: &RepoStoreStreamMinimalReposFunc{
			defaultHook: func(context.Context, ReposListOptions, func(*types.MinimalRepo)) error {
				panic("unexpected invocation of MockRepoStore.StreamMinimalRepos")
			},
		},
		TransactFunc: &RepoStoreTransactFunc{
			defaultHook: func(context.Context) (RepoStore, error) {
				panic("unexpected invocation of MockRepoStore.Transact")
			},
		},
		WithFunc: &RepoStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) RepoStore {
				panic("unexpected invocation of MockRepoStore.With")
			},
		},
	}
}

// NewMockRepoStoreFrom creates a new mock of the MockRepoStore interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockRepoStoreFrom(i RepoStore) *MockRepoStore {
	return &MockRepoStore{
		CountFunc: &RepoStoreCountFunc{
			defaultHook: i.Count,
		},
		CreateFunc: &RepoStoreCreateFunc{
			defaultHook: i.Create,
		},
		DeleteFunc: &RepoStoreDeleteFunc{
			defaultHook: i.Delete,
		},
		DoneFunc: &RepoStoreDoneFunc{
			defaultHook: i.Done,
		},
		GetFunc: &RepoStoreGetFunc{
			defaultHook: i.Get,
		},
		GetByHashedNameFunc: &RepoStoreGetByHashedNameFunc{
			defaultHook: i.GetByHashedName,
		},
		GetByIDsFunc: &RepoStoreGetByIDsFunc{
			defaultHook: i.GetByIDs,
		},
		GetByNameFunc: &RepoStoreGetByNameFunc{
			defaultHook: i.GetByName,
		},
		GetFirstRepoByCloneURLFunc: &RepoStoreGetFirstRepoByCloneURLFunc{
			defaultHook: i.GetFirstRepoByCloneURL,
		},
		GetFirstRepoNameByCloneURLFunc: &RepoStoreGetFirstRepoNameByCloneURLFunc{
			defaultHook: i.GetFirstRepoNameByCloneURL,
		},
		GetRepoDescriptionsByIDsFunc: &RepoStoreGetRepoDescriptionsByIDsFunc{
			defaultHook: i.GetRepoDescriptionsByIDs,
		},
		GetReposSetByIDsFunc: &RepoStoreGetReposSetByIDsFunc{
			defaultHook: i.GetReposSetByIDs,
		},
		HandleFunc: &RepoStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListFunc: &RepoStoreListFunc{
			defaultHook: i.List,
		},
		ListMinimalReposFunc: &RepoStoreListMinimalReposFunc{
			defaultHook: i.ListMinimalRepos,
		},
		ListSourcegraphDotComIndexableReposFunc: &RepoStoreListSourcegraphDotComIndexableReposFunc{
			defaultHook: i.ListSourcegraphDotComIndexableRepos,
		},
		MetadataFunc: &RepoStoreMetadataFunc{
			defaultHook: i.Metadata,
		},
		QueryFunc: &RepoStoreQueryFunc{
			defaultHook: i.Query,
		},
		RepoEmbeddingExistsFunc: &RepoStoreRepoEmbeddingExistsFunc{
			defaultHook: i.RepoEmbeddingExists,
		},
		StreamMinimalReposFunc: &RepoStoreStreamMinimalReposFunc{
			defaultHook: i.StreamMinimalRepos,
		},
		TransactFunc: &RepoStoreTransactFunc{
			defaultHook: i.Transact,
		},
		WithFunc: &RepoStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// RepoStoreCountFunc describes the behavior when the Count method of the
// parent MockRepoStore instance is invoked.
type RepoStoreCountFunc struct {
	defaultHook func(context.Context, ReposListOptions) (int, error)
	hooks       []func(context.Context, ReposListOptions) (int, error)
	history     []RepoStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) Count(v0 context.Context, v1 ReposListOptions) (int, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(RepoStoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreCountFunc) SetDefaultHook(hook func(context.Context, ReposListOptions) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockRepoStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *RepoStoreCountFunc) PushHook(hook func(context.Context, ReposListOptions) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, ReposListOptions) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, ReposListOptions) (int, error) {
		return r0, r1
	})
}

func (f *RepoStoreCountFunc) nextHook() func(context.Context, ReposListOptions) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreCountFunc) appendCall(r0 RepoStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreCountFuncCall objects describing
// the invocations of this function.
func (f *RepoStoreCountFunc) History() []RepoStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreCountFuncCall is an object that describes an invocation of
// method Count on an instance of MockRepoStore.
type RepoStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ReposListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreCreateFunc describes the behavior when the Create method of the
// parent MockRepoStore instance is invoked.
type RepoStoreCreateFunc struct {
	defaultHook func(context.Context, ...*types.Repo) error
	hooks       []func(context.Context, ...*types.Repo) error
	history     []RepoStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) Create(v0 context.Context, v1 ...*types.Repo) error {
	r0 := m.CreateFunc.nextHook()(v0, v1...)
	m.CreateFunc.appendCall(RepoStoreCreateFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreCreateFunc) SetDefaultHook(hook func(context.Context, ...*types.Repo) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockRepoStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *RepoStoreCreateFunc) PushHook(hook func(context.Context, ...*types.Repo) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreCreateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ...*types.Repo) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreCreateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ...*types.Repo) error {
		return r0
	})
}

func (f *RepoStoreCreateFunc) nextHook() func(context.Context, ...*types.Repo) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreCreateFunc) appendCall(r0 RepoStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreCreateFuncCall objects describing
// the invocations of this function.
func (f *RepoStoreCreateFunc) History() []RepoStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreCreateFuncCall is an object that describes an invocation of
// method Create on an instance of MockRepoStore.
type RepoStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []*types.Repo
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c RepoStoreCreateFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RepoStoreDeleteFunc describes the behavior when the Delete method of the
// parent MockRepoStore instance is invoked.
type RepoStoreDeleteFunc struct {
	defaultHook func(context.Context, ...api.RepoID) error
	hooks       []func(context.Context, ...api.RepoID) error
	history     []RepoStoreDeleteFuncCall
	mutex       sync.Mutex
}

// Delete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) Delete(v0 context.Context, v1 ...api.RepoID) error {
	r0 := m.DeleteFunc.nextHook()(v0, v1...)
	m.DeleteFunc.appendCall(RepoStoreDeleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Delete method of the
// parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreDeleteFunc) SetDefaultHook(hook func(context.Context, ...api.RepoID) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Delete method of the parent MockRepoStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *RepoStoreDeleteFunc) PushHook(hook func(context.Context, ...api.RepoID) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ...api.RepoID) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ...api.RepoID) error {
		return r0
	})
}

func (f *RepoStoreDeleteFunc) nextHook() func(context.Context, ...api.RepoID) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreDeleteFunc) appendCall(r0 RepoStoreDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreDeleteFuncCall objects describing
// the invocations of this function.
func (f *RepoStoreDeleteFunc) History() []RepoStoreDeleteFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreDeleteFuncCall is an object that describes an invocation of
// method Delete on an instance of MockRepoStore.
type RepoStoreDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c RepoStoreDeleteFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RepoStoreDoneFunc describes the behavior when the Done method of the
// parent MockRepoStore instance is invoked.
type RepoStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []RepoStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(RepoStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockRepoStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *RepoStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *RepoStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreDoneFunc) appendCall(r0 RepoStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreDoneFuncCall objects describing
// the invocations of this function.
func (f *RepoStoreDoneFunc) History() []RepoStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreDoneFuncCall is an object that describes an invocation of method
// Done on an instance of MockRepoStore.
type RepoStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RepoStoreGetFunc describes the behavior when the Get method of the parent
// MockRepoStore instance is invoked.
type RepoStoreGetFunc struct {
	defaultHook func(context.Context, api.RepoID) (*types.Repo, error)
	hooks       []func(context.Context, api.RepoID) (*types.Repo, error)
	history     []RepoStoreGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) Get(v0 context.Context, v1 api.RepoID) (*types.Repo, error) {
	r0, r1 := m.GetFunc.nextHook()(v0, v1)
	m.GetFunc.appendCall(RepoStoreGetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreGetFunc) SetDefaultHook(hook func(context.Context, api.RepoID) (*types.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockRepoStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *RepoStoreGetFunc) PushHook(hook func(context.Context, api.RepoID) (*types.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreGetFunc) SetDefaultReturn(r0 *types.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoID) (*types.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreGetFunc) PushReturn(r0 *types.Repo, r1 error) {
	f.PushHook(func(context.Context, api.RepoID) (*types.Repo, error) {
		return r0, r1
	})
}

func (f *RepoStoreGetFunc) nextHook() func(context.Context, api.RepoID) (*types.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreGetFunc) appendCall(r0 RepoStoreGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreGetFuncCall objects describing the
// invocations of this function.
func (f *RepoStoreGetFunc) History() []RepoStoreGetFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreGetFuncCall is an object that describes an invocation of method
// Get on an instance of MockRepoStore.
type RepoStoreGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreGetByHashedNameFunc describes the behavior when the
// GetByHashedName method of the parent MockRepoStore instance is invoked.
type RepoStoreGetByHashedNameFunc struct {
	defaultHook func(context.Context, api.RepoHashedName) (*types.Repo, error)
	hooks       []func(context.Context, api.RepoHashedName) (*types.Repo, error)
	history     []RepoStoreGetByHashedNameFuncCall
	mutex       sync.Mutex
}

// GetByHashedName delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockRepoStore) GetByHashedName(v0 context.Context, v1 api.RepoHashedName) (*types.Repo, error) {
	r0, r1 := m.GetByHashedNameFunc.nextHook()(v0, v1)
	m.GetByHashedNameFunc.appendCall(RepoStoreGetByHashedNameFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByHashedName
// method of the parent MockRepoStore instance is invoked and the hook queue
// is empty.
func (f *RepoStoreGetByHashedNameFunc) SetDefaultHook(hook func(context.Context, api.RepoHashedName) (*types.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByHashedName method of the parent MockRepoStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *RepoStoreGetByHashedNameFunc) PushHook(hook func(context.Context, api.RepoHashedName) (*types.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreGetByHashedNameFunc) SetDefaultReturn(r0 *types.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoHashedName) (*types.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreGetByHashedNameFunc) PushReturn(r0 *types.Repo, r1 error) {
	f.PushHook(func(context.Context, api.RepoHashedName) (*types.Repo, error) {
		return r0, r1
	})
}

func (f *RepoStoreGetByHashedNameFunc) nextHook() func(context.Context, api.RepoHashedName) (*types.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreGetByHashedNameFunc) appendCall(r0 RepoStoreGetByHashedNameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreGetByHashedNameFuncCall objects
// describing the invocations of this function.
func (f *RepoStoreGetByHashedNameFunc) History() []RepoStoreGetByHashedNameFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreGetByHashedNameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreGetByHashedNameFuncCall is an object that describes an
// invocation of method GetByHashedName on an instance of MockRepoStore.
type RepoStoreGetByHashedNameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoHashedName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreGetByHashedNameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreGetByHashedNameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreGetByIDsFunc describes the behavior when the GetByIDs method of
// the parent MockRepoStore instance is invoked.
type RepoStoreGetByIDsFunc struct {
	defaultHook func(context.Context, ...api.RepoID) ([]*types.Repo, error)
	hooks       []func(context.Context, ...api.RepoID) ([]*types.Repo, error)
	history     []RepoStoreGetByIDsFuncCall
	mutex       sync.Mutex
}

// GetByIDs delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) GetByIDs(v0 context.Context, v1 ...api.RepoID) ([]*types.Repo, error) {
	r0, r1 := m.GetByIDsFunc.nextHook()(v0, v1...)
	m.GetByIDsFunc.appendCall(RepoStoreGetByIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByIDs method of
// the parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreGetByIDsFunc) SetDefaultHook(hook func(context.Context, ...api.RepoID) ([]*types.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByIDs method of the parent MockRepoStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *RepoStoreGetByIDsFunc) PushHook(hook func(context.Context, ...api.RepoID) ([]*types.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreGetByIDsFunc) SetDefaultReturn(r0 []*types.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, ...api.RepoID) ([]*types.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreGetByIDsFunc) PushReturn(r0 []*types.Repo, r1 error) {
	f.PushHook(func(context.Context, ...api.RepoID) ([]*types.Repo, error) {
		return r0, r1
	})
}

func (f *RepoStoreGetByIDsFunc) nextHook() func(context.Context, ...api.RepoID) ([]*types.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreGetByIDsFunc) appendCall(r0 RepoStoreGetByIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreGetByIDsFuncCall objects
// describing the invocations of this function.
func (f *RepoStoreGetByIDsFunc) History() []RepoStoreGetByIDsFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreGetByIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreGetByIDsFuncCall is an object that describes an invocation of
// method GetByIDs on an instance of MockRepoStore.
type RepoStoreGetByIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c RepoStoreGetByIDsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreGetByIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreGetByNameFunc describes the behavior when the GetByName method
// of the parent MockRepoStore instance is invoked.
type RepoStoreGetByNameFunc struct {
	defaultHook func(context.Context, api.RepoName) (*types.Repo, error)
	hooks       []func(context.Context, api.RepoName) (*types.Repo, error)
	history     []RepoStoreGetByNameFuncCall
	mutex       sync.Mutex
}

// GetByName delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) GetByName(v0 context.Context, v1 api.RepoName) (*types.Repo, error) {
	r0, r1 := m.GetByNameFunc.nextHook()(v0, v1)
	m.GetByNameFunc.appendCall(RepoStoreGetByNameFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByName method of
// the parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreGetByNameFunc) SetDefaultHook(hook func(context.Context, api.RepoName) (*types.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByName method of the parent MockRepoStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *RepoStoreGetByNameFunc) PushHook(hook func(context.Context, api.RepoName) (*types.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreGetByNameFunc) SetDefaultReturn(r0 *types.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) (*types.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreGetByNameFunc) PushReturn(r0 *types.Repo, r1 error) {
	f.PushHook(func(context.Context, api.RepoName) (*types.Repo, error) {
		return r0, r1
	})
}

func (f *RepoStoreGetByNameFunc) nextHook() func(context.Context, api.RepoName) (*types.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreGetByNameFunc) appendCall(r0 RepoStoreGetByNameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreGetByNameFuncCall objects
// describing the invocations of this function.
func (f *RepoStoreGetByNameFunc) History() []RepoStoreGetByNameFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreGetByNameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreGetByNameFuncCall is an object that describes an invocation of
// method GetByName on an instance of MockRepoStore.
type RepoStoreGetByNameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreGetByNameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreGetByNameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreGetFirstRepoByCloneURLFunc describes the behavior when the
// GetFirstRepoByCloneURL method of the parent MockRepoStore instance is
// invoked.
type RepoStoreGetFirstRepoByCloneURLFunc struct {
	defaultHook func(context.Context, string) (*types.Repo, error)
	hooks       []func(context.Context, string) (*types.Repo, error)
	history     []RepoStoreGetFirstRepoByCloneURLFuncCall
	mutex       sync.Mutex
}

// GetFirstRepoByCloneURL delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockRepoStore) GetFirstRepoByCloneURL(v0 context.Context, v1 string) (*types.Repo, error) {
	r0, r1 := m.GetFirstRepoByCloneURLFunc.nextHook()(v0, v1)
	m.GetFirstRepoByCloneURLFunc.appendCall(RepoStoreGetFirstRepoByCloneURLFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetFirstRepoByCloneURL method of the parent MockRepoStore instance is
// invoked and the hook queue is empty.
func (f *RepoStoreGetFirstRepoByCloneURLFunc) SetDefaultHook(hook func(context.Context, string) (*types.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetFirstRepoByCloneURL method of the parent MockRepoStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *RepoStoreGetFirstRepoByCloneURLFunc) PushHook(hook func(context.Context, string) (*types.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreGetFirstRepoByCloneURLFunc) SetDefaultReturn(r0 *types.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*types.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreGetFirstRepoByCloneURLFunc) PushReturn(r0 *types.Repo, r1 error) {
	f.PushHook(func(context.Context, string) (*types.Repo, error) {
		return r0, r1
	})
}

func (f *RepoStoreGetFirstRepoByCloneURLFunc) nextHook() func(context.Context, string) (*types.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreGetFirstRepoByCloneURLFunc) appendCall(r0 RepoStoreGetFirstRepoByCloneURLFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreGetFirstRepoByCloneURLFuncCall
// objects describing the invocations of this function.
func (f *RepoStoreGetFirstRepoByCloneURLFunc) History() []RepoStoreGetFirstRepoByCloneURLFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreGetFirstRepoByCloneURLFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreGetFirstRepoByCloneURLFuncCall is an object that describes an
// invocation of method GetFirstRepoByCloneURL on an instance of
// MockRepoStore.
type RepoStoreGetFirstRepoByCloneURLFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreGetFirstRepoByCloneURLFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreGetFirstRepoByCloneURLFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreGetFirstRepoNameByCloneURLFunc describes the behavior when the
// GetFirstRepoNameByCloneURL method of the parent MockRepoStore instance is
// invoked.
type RepoStoreGetFirstRepoNameByCloneURLFunc struct {
	defaultHook func(context.Context, string) (api.RepoName, error)
	hooks       []func(context.Context, string) (api.RepoName, error)
	history     []RepoStoreGetFirstRepoNameByCloneURLFuncCall
	mutex       sync.Mutex
}

// GetFirstRepoNameByCloneURL delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockRepoStore) GetFirstRepoNameByCloneURL(v0 context.Context, v1 string) (api.RepoName, error) {
	r0, r1 := m.GetFirstRepoNameByCloneURLFunc.nextHook()(v0, v1)
	m.GetFirstRepoNameByCloneURLFunc.appendCall(RepoStoreGetFirstRepoNameByCloneURLFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetFirstRepoNameByCloneURL method of the parent MockRepoStore instance is
// invoked and the hook queue is empty.
func (f *RepoStoreGetFirstRepoNameByCloneURLFunc) SetDefaultHook(hook func(context.Context, string) (api.RepoName, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetFirstRepoNameByCloneURL method of the parent MockRepoStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *RepoStoreGetFirstRepoNameByCloneURLFunc) PushHook(hook func(context.Context, string) (api.RepoName, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreGetFirstRepoNameByCloneURLFunc) SetDefaultReturn(r0 api.RepoName, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (api.RepoName, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreGetFirstRepoNameByCloneURLFunc) PushReturn(r0 api.RepoName, r1 error) {
	f.PushHook(func(context.Context, string) (api.RepoName, error) {
		return r0, r1
	})
}

func (f *RepoStoreGetFirstRepoNameByCloneURLFunc) nextHook() func(context.Context, string) (api.RepoName, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreGetFirstRepoNameByCloneURLFunc) appendCall(r0 RepoStoreGetFirstRepoNameByCloneURLFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreGetFirstRepoNameByCloneURLFuncCall
// objects describing the invocations of this function.
func (f *RepoStoreGetFirstRepoNameByCloneURLFunc) History() []RepoStoreGetFirstRepoNameByCloneURLFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreGetFirstRepoNameByCloneURLFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreGetFirstRepoNameByCloneURLFuncCall is an object that describes
// an invocation of method GetFirstRepoNameByCloneURL on an instance of
// MockRepoStore.
type RepoStoreGetFirstRepoNameByCloneURLFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 api.RepoName
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreGetFirstRepoNameByCloneURLFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreGetFirstRepoNameByCloneURLFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreGetRepoDescriptionsByIDsFunc describes the behavior when the
// GetRepoDescriptionsByIDs method of the parent MockRepoStore instance is
// invoked.
type RepoStoreGetRepoDescriptionsByIDsFunc struct {
	defaultHook func(context.Context, ...api.RepoID) (map[api.RepoID]string, error)
	hooks       []func(context.Context, ...api.RepoID) (map[api.RepoID]string, error)
	history     []RepoStoreGetRepoDescriptionsByIDsFuncCall
	mutex       sync.Mutex
}

// GetRepoDescriptionsByIDs delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockRepoStore) GetRepoDescriptionsByIDs(v0 context.Context, v1 ...api.RepoID) (map[api.RepoID]string, error) {
	r0, r1 := m.GetRepoDescriptionsByIDsFunc.nextHook()(v0, v1...)
	m.GetRepoDescriptionsByIDsFunc.appendCall(RepoStoreGetRepoDescriptionsByIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetRepoDescriptionsByIDs method of the parent MockRepoStore instance is
// invoked and the hook queue is empty.
func (f *RepoStoreGetRepoDescriptionsByIDsFunc) SetDefaultHook(hook func(context.Context, ...api.RepoID) (map[api.RepoID]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetRepoDescriptionsByIDs method of the parent MockRepoStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *RepoStoreGetRepoDescriptionsByIDsFunc) PushHook(hook func(context.Context, ...api.RepoID) (map[api.RepoID]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreGetRepoDescriptionsByIDsFunc) SetDefaultReturn(r0 map[api.RepoID]string, r1 error) {
	f.SetDefaultHook(func(context.Context, ...api.RepoID) (map[api.RepoID]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreGetRepoDescriptionsByIDsFunc) PushReturn(r0 map[api.RepoID]string, r1 error) {
	f.PushHook(func(context.Context, ...api.RepoID) (map[api.RepoID]string, error) {
		return r0, r1
	})
}

func (f *RepoStoreGetRepoDescriptionsByIDsFunc) nextHook() func(context.Context, ...api.RepoID) (map[api.RepoID]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreGetRepoDescriptionsByIDsFunc) appendCall(r0 RepoStoreGetRepoDescriptionsByIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreGetRepoDescriptionsByIDsFuncCall
// objects describing the invocations of this function.
func (f *RepoStoreGetRepoDescriptionsByIDsFunc) History() []RepoStoreGetRepoDescriptionsByIDsFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreGetRepoDescriptionsByIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreGetRepoDescriptionsByIDsFuncCall is an object that describes an
// invocation of method GetRepoDescriptionsByIDs on an instance of
// MockRepoStore.
type RepoStoreGetRepoDescriptionsByIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[api.RepoID]string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c RepoStoreGetRepoDescriptionsByIDsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreGetRepoDescriptionsByIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreGetReposSetByIDsFunc describes the behavior when the
// GetReposSetByIDs method of the parent MockRepoStore instance is invoked.
type RepoStoreGetReposSetByIDsFunc struct {
	defaultHook func(context.Context, ...api.RepoID) (map[api.RepoID]*types.Repo, error)
	hooks       []func(context.Context, ...api.RepoID) (map[api.RepoID]*types.Repo, error)
	history     []RepoStoreGetReposSetByIDsFuncCall
	mutex       sync.Mutex
}

// GetReposSetByIDs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockRepoStore) GetReposSetByIDs(v0 context.Context, v1 ...api.RepoID) (map[api.RepoID]*types.Repo, error) {
	r0, r1 := m.GetReposSetByIDsFunc.nextHook()(v0, v1...)
	m.GetReposSetByIDsFunc.appendCall(RepoStoreGetReposSetByIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetReposSetByIDs
// method of the parent MockRepoStore instance is invoked and the hook queue
// is empty.
func (f *RepoStoreGetReposSetByIDsFunc) SetDefaultHook(hook func(context.Context, ...api.RepoID) (map[api.RepoID]*types.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetReposSetByIDs method of the parent MockRepoStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *RepoStoreGetReposSetByIDsFunc) PushHook(hook func(context.Context, ...api.RepoID) (map[api.RepoID]*types.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreGetReposSetByIDsFunc) SetDefaultReturn(r0 map[api.RepoID]*types.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, ...api.RepoID) (map[api.RepoID]*types.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreGetReposSetByIDsFunc) PushReturn(r0 map[api.RepoID]*types.Repo, r1 error) {
	f.PushHook(func(context.Context, ...api.RepoID) (map[api.RepoID]*types.Repo, error) {
		return r0, r1
	})
}

func (f *RepoStoreGetReposSetByIDsFunc) nextHook() func(context.Context, ...api.RepoID) (map[api.RepoID]*types.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreGetReposSetByIDsFunc) appendCall(r0 RepoStoreGetReposSetByIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreGetReposSetByIDsFuncCall objects
// describing the invocations of this function.
func (f *RepoStoreGetReposSetByIDsFunc) History() []RepoStoreGetReposSetByIDsFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreGetReposSetByIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreGetReposSetByIDsFuncCall is an object that describes an
// invocation of method GetReposSetByIDs on an instance of MockRepoStore.
type RepoStoreGetReposSetByIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[api.RepoID]*types.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c RepoStoreGetReposSetByIDsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreGetReposSetByIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreHandleFunc describes the behavior when the Handle method of the
// parent MockRepoStore instance is invoked.
type RepoStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []RepoStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(RepoStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockRepoStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *RepoStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *RepoStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreHandleFunc) appendCall(r0 RepoStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreHandleFuncCall objects describing
// the invocations of this function.
func (f *RepoStoreHandleFunc) History() []RepoStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreHandleFuncCall is an object that describes an invocation of
// method Handle on an instance of MockRepoStore.
type RepoStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RepoStoreListFunc describes the behavior when the List method of the
// parent MockRepoStore instance is invoked.
type RepoStoreListFunc struct {
	defaultHook func(context.Context, ReposListOptions) ([]*types.Repo, error)
	hooks       []func(context.Context, ReposListOptions) ([]*types.Repo, error)
	history     []RepoStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) List(v0 context.Context, v1 ReposListOptions) ([]*types.Repo, error) {
	r0, r1 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(RepoStoreListFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreListFunc) SetDefaultHook(hook func(context.Context, ReposListOptions) ([]*types.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockRepoStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *RepoStoreListFunc) PushHook(hook func(context.Context, ReposListOptions) ([]*types.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreListFunc) SetDefaultReturn(r0 []*types.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, ReposListOptions) ([]*types.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreListFunc) PushReturn(r0 []*types.Repo, r1 error) {
	f.PushHook(func(context.Context, ReposListOptions) ([]*types.Repo, error) {
		return r0, r1
	})
}

func (f *RepoStoreListFunc) nextHook() func(context.Context, ReposListOptions) ([]*types.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreListFunc) appendCall(r0 RepoStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreListFuncCall objects describing
// the invocations of this function.
func (f *RepoStoreListFunc) History() []RepoStoreListFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreListFuncCall is an object that describes an invocation of method
// List on an instance of MockRepoStore.
type RepoStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ReposListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreListMinimalReposFunc describes the behavior when the
// ListMinimalRepos method of the parent MockRepoStore instance is invoked.
type RepoStoreListMinimalReposFunc struct {
	defaultHook func(context.Context, ReposListOptions) ([]types.MinimalRepo, error)
	hooks       []func(context.Context, ReposListOptions) ([]types.MinimalRepo, error)
	history     []RepoStoreListMinimalReposFuncCall
	mutex       sync.Mutex
}

// ListMinimalRepos delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockRepoStore) ListMinimalRepos(v0 context.Context, v1 ReposListOptions) ([]types.MinimalRepo, error) {
	r0, r1 := m.ListMinimalReposFunc.nextHook()(v0, v1)
	m.ListMinimalReposFunc.appendCall(RepoStoreListMinimalReposFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListMinimalRepos
// method of the parent MockRepoStore instance is invoked and the hook queue
// is empty.
func (f *RepoStoreListMinimalReposFunc) SetDefaultHook(hook func(context.Context, ReposListOptions) ([]types.MinimalRepo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListMinimalRepos method of the parent MockRepoStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *RepoStoreListMinimalReposFunc) PushHook(hook func(context.Context, ReposListOptions) ([]types.MinimalRepo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreListMinimalReposFunc) SetDefaultReturn(r0 []types.MinimalRepo, r1 error) {
	f.SetDefaultHook(func(context.Context, ReposListOptions) ([]types.MinimalRepo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreListMinimalReposFunc) PushReturn(r0 []types.MinimalRepo, r1 error) {
	f.PushHook(func(context.Context, ReposListOptions) ([]types.MinimalRepo, error) {
		return r0, r1
	})
}

func (f *RepoStoreListMinimalReposFunc) nextHook() func(context.Context, ReposListOptions) ([]types.MinimalRepo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreListMinimalReposFunc) appendCall(r0 RepoStoreListMinimalReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreListMinimalReposFuncCall objects
// describing the invocations of this function.
func (f *RepoStoreListMinimalReposFunc) History() []RepoStoreListMinimalReposFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreListMinimalReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreListMinimalReposFuncCall is an object that describes an
// invocation of method ListMinimalRepos on an instance of MockRepoStore.
type RepoStoreListMinimalReposFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ReposListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.MinimalRepo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreListMinimalReposFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreListMinimalReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreListSourcegraphDotComIndexableReposFunc describes the behavior
// when the ListSourcegraphDotComIndexableRepos method of the parent
// MockRepoStore instance is invoked.
type RepoStoreListSourcegraphDotComIndexableReposFunc struct {
	defaultHook func(context.Context, ListSourcegraphDotComIndexableReposOptions) ([]types.MinimalRepo, error)
	hooks       []func(context.Context, ListSourcegraphDotComIndexableReposOptions) ([]types.MinimalRepo, error)
	history     []RepoStoreListSourcegraphDotComIndexableReposFuncCall
	mutex       sync.Mutex
}

// ListSourcegraphDotComIndexableRepos delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockRepoStore) ListSourcegraphDotComIndexableRepos(v0 context.Context, v1 ListSourcegraphDotComIndexableReposOptions) ([]types.MinimalRepo, error) {
	r0, r1 := m.ListSourcegraphDotComIndexableReposFunc.nextHook()(v0, v1)
	m.ListSourcegraphDotComIndexableReposFunc.appendCall(RepoStoreListSourcegraphDotComIndexableReposFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ListSourcegraphDotComIndexableRepos method of the parent MockRepoStore
// instance is invoked and the hook queue is empty.
func (f *RepoStoreListSourcegraphDotComIndexableReposFunc) SetDefaultHook(hook func(context.Context, ListSourcegraphDotComIndexableReposOptions) ([]types.MinimalRepo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListSourcegraphDotComIndexableRepos method of the parent MockRepoStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *RepoStoreListSourcegraphDotComIndexableReposFunc) PushHook(hook func(context.Context, ListSourcegraphDotComIndexableReposOptions) ([]types.MinimalRepo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreListSourcegraphDotComIndexableReposFunc) SetDefaultReturn(r0 []types.MinimalRepo, r1 error) {
	f.SetDefaultHook(func(context.Context, ListSourcegraphDotComIndexableReposOptions) ([]types.MinimalRepo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreListSourcegraphDotComIndexableReposFunc) PushReturn(r0 []types.MinimalRepo, r1 error) {
	f.PushHook(func(context.Context, ListSourcegraphDotComIndexableReposOptions) ([]types.MinimalRepo, error) {
		return r0, r1
	})
}

func (f *RepoStoreListSourcegraphDotComIndexableReposFunc) nextHook() func(context.Context, ListSourcegraphDotComIndexableReposOptions) ([]types.MinimalRepo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreListSourcegraphDotComIndexableReposFunc) appendCall(r0 RepoStoreListSourcegraphDotComIndexableReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// RepoStoreListSourcegraphDotComIndexableReposFuncCall objects describing
// the invocations of this function.
func (f *RepoStoreListSourcegraphDotComIndexableReposFunc) History() []RepoStoreListSourcegraphDotComIndexableReposFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreListSourcegraphDotComIndexableReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreListSourcegraphDotComIndexableReposFuncCall is an object that
// describes an invocation of method ListSourcegraphDotComIndexableRepos on
// an instance of MockRepoStore.
type RepoStoreListSourcegraphDotComIndexableReposFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ListSourcegraphDotComIndexableReposOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.MinimalRepo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreListSourcegraphDotComIndexableReposFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreListSourcegraphDotComIndexableReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreMetadataFunc describes the behavior when the Metadata method of
// the parent MockRepoStore instance is invoked.
type RepoStoreMetadataFunc struct {
	defaultHook func(context.Context, ...api.RepoID) ([]*types.SearchedRepo, error)
	hooks       []func(context.Context, ...api.RepoID) ([]*types.SearchedRepo, error)
	history     []RepoStoreMetadataFuncCall
	mutex       sync.Mutex
}

// Metadata delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) Metadata(v0 context.Context, v1 ...api.RepoID) ([]*types.SearchedRepo, error) {
	r0, r1 := m.MetadataFunc.nextHook()(v0, v1...)
	m.MetadataFunc.appendCall(RepoStoreMetadataFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Metadata method of
// the parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreMetadataFunc) SetDefaultHook(hook func(context.Context, ...api.RepoID) ([]*types.SearchedRepo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Metadata method of the parent MockRepoStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *RepoStoreMetadataFunc) PushHook(hook func(context.Context, ...api.RepoID) ([]*types.SearchedRepo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreMetadataFunc) SetDefaultReturn(r0 []*types.SearchedRepo, r1 error) {
	f.SetDefaultHook(func(context.Context, ...api.RepoID) ([]*types.SearchedRepo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreMetadataFunc) PushReturn(r0 []*types.SearchedRepo, r1 error) {
	f.PushHook(func(context.Context, ...api.RepoID) ([]*types.SearchedRepo, error) {
		return r0, r1
	})
}

func (f *RepoStoreMetadataFunc) nextHook() func(context.Context, ...api.RepoID) ([]*types.SearchedRepo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreMetadataFunc) appendCall(r0 RepoStoreMetadataFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreMetadataFuncCall objects
// describing the invocations of this function.
func (f *RepoStoreMetadataFunc) History() []RepoStoreMetadataFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreMetadataFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreMetadataFuncCall is an object that describes an invocation of
// method Metadata on an instance of MockRepoStore.
type RepoStoreMetadataFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.SearchedRepo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c RepoStoreMetadataFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreMetadataFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreQueryFunc describes the behavior when the Query method of the
// parent MockRepoStore instance is invoked.
type RepoStoreQueryFunc struct {
	defaultHook func(context.Context, *sqlf.Query) (*sql.Rows, error)
	hooks       []func(context.Context, *sqlf.Query) (*sql.Rows, error)
	history     []RepoStoreQueryFuncCall
	mutex       sync.Mutex
}

// Query delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) Query(v0 context.Context, v1 *sqlf.Query) (*sql.Rows, error) {
	r0, r1 := m.QueryFunc.nextHook()(v0, v1)
	m.QueryFunc.appendCall(RepoStoreQueryFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Query method of the
// parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreQueryFunc) SetDefaultHook(hook func(context.Context, *sqlf.Query) (*sql.Rows, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Query method of the parent MockRepoStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *RepoStoreQueryFunc) PushHook(hook func(context.Context, *sqlf.Query) (*sql.Rows, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreQueryFunc) SetDefaultReturn(r0 *sql.Rows, r1 error) {
	f.SetDefaultHook(func(context.Context, *sqlf.Query) (*sql.Rows, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreQueryFunc) PushReturn(r0 *sql.Rows, r1 error) {
	f.PushHook(func(context.Context, *sqlf.Query) (*sql.Rows, error) {
		return r0, r1
	})
}

func (f *RepoStoreQueryFunc) nextHook() func(context.Context, *sqlf.Query) (*sql.Rows, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreQueryFunc) appendCall(r0 RepoStoreQueryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreQueryFuncCall objects describing
// the invocations of this function.
func (f *RepoStoreQueryFunc) History() []RepoStoreQueryFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreQueryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreQueryFuncCall is an object that describes an invocation of
// method Query on an instance of MockRepoStore.
type RepoStoreQueryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sqlf.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *sql.Rows
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreQueryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreQueryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreRepoEmbeddingExistsFunc describes the behavior when the
// RepoEmbeddingExists method of the parent MockRepoStore instance is
// invoked.
type RepoStoreRepoEmbeddingExistsFunc struct {
	defaultHook func(context.Context, api.RepoID) (bool, error)
	hooks       []func(context.Context, api.RepoID) (bool, error)
	history     []RepoStoreRepoEmbeddingExistsFuncCall
	mutex       sync.Mutex
}

// RepoEmbeddingExists delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockRepoStore) RepoEmbeddingExists(v0 context.Context, v1 api.RepoID) (bool, error) {
	r0, r1 := m.RepoEmbeddingExistsFunc.nextHook()(v0, v1)
	m.RepoEmbeddingExistsFunc.appendCall(RepoStoreRepoEmbeddingExistsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RepoEmbeddingExists
// method of the parent MockRepoStore instance is invoked and the hook queue
// is empty.
func (f *RepoStoreRepoEmbeddingExistsFunc) SetDefaultHook(hook func(context.Context, api.RepoID) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepoEmbeddingExists method of the parent MockRepoStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *RepoStoreRepoEmbeddingExistsFunc) PushHook(hook func(context.Context, api.RepoID) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreRepoEmbeddingExistsFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoID) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreRepoEmbeddingExistsFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, api.RepoID) (bool, error) {
		return r0, r1
	})
}

func (f *RepoStoreRepoEmbeddingExistsFunc) nextHook() func(context.Context, api.RepoID) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreRepoEmbeddingExistsFunc) appendCall(r0 RepoStoreRepoEmbeddingExistsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreRepoEmbeddingExistsFuncCall
// objects describing the invocations of this function.
func (f *RepoStoreRepoEmbeddingExistsFunc) History() []RepoStoreRepoEmbeddingExistsFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreRepoEmbeddingExistsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreRepoEmbeddingExistsFuncCall is an object that describes an
// invocation of method RepoEmbeddingExists on an instance of MockRepoStore.
type RepoStoreRepoEmbeddingExistsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreRepoEmbeddingExistsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreRepoEmbeddingExistsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreStreamMinimalReposFunc describes the behavior when the
// StreamMinimalRepos method of the parent MockRepoStore instance is
// invoked.
type RepoStoreStreamMinimalReposFunc struct {
	defaultHook func(context.Context, ReposListOptions, func(*types.MinimalRepo)) error
	hooks       []func(context.Context, ReposListOptions, func(*types.MinimalRepo)) error
	history     []RepoStoreStreamMinimalReposFuncCall
	mutex       sync.Mutex
}

// StreamMinimalRepos delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockRepoStore) StreamMinimalRepos(v0 context.Context, v1 ReposListOptions, v2 func(*types.MinimalRepo)) error {
	r0 := m.StreamMinimalReposFunc.nextHook()(v0, v1, v2)
	m.StreamMinimalReposFunc.appendCall(RepoStoreStreamMinimalReposFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the StreamMinimalRepos
// method of the parent MockRepoStore instance is invoked and the hook queue
// is empty.
func (f *RepoStoreStreamMinimalReposFunc) SetDefaultHook(hook func(context.Context, ReposListOptions, func(*types.MinimalRepo)) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// StreamMinimalRepos method of the parent MockRepoStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *RepoStoreStreamMinimalReposFunc) PushHook(hook func(context.Context, ReposListOptions, func(*types.MinimalRepo)) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreStreamMinimalReposFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ReposListOptions, func(*types.MinimalRepo)) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreStreamMinimalReposFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ReposListOptions, func(*types.MinimalRepo)) error {
		return r0
	})
}

func (f *RepoStoreStreamMinimalReposFunc) nextHook() func(context.Context, ReposListOptions, func(*types.MinimalRepo)) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreStreamMinimalReposFunc) appendCall(r0 RepoStoreStreamMinimalReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreStreamMinimalReposFuncCall objects
// describing the invocations of this function.
func (f *RepoStoreStreamMinimalReposFunc) History() []RepoStoreStreamMinimalReposFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreStreamMinimalReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreStreamMinimalReposFuncCall is an object that describes an
// invocation of method StreamMinimalRepos on an instance of MockRepoStore.
type RepoStoreStreamMinimalReposFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ReposListOptions
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 func(*types.MinimalRepo)
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreStreamMinimalReposFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreStreamMinimalReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RepoStoreTransactFunc describes the behavior when the Transact method of
// the parent MockRepoStore instance is invoked.
type RepoStoreTransactFunc struct {
	defaultHook func(context.Context) (RepoStore, error)
	hooks       []func(context.Context) (RepoStore, error)
	history     []RepoStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) Transact(v0 context.Context) (RepoStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(RepoStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreTransactFunc) SetDefaultHook(hook func(context.Context) (RepoStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockRepoStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *RepoStoreTransactFunc) PushHook(hook func(context.Context) (RepoStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreTransactFunc) SetDefaultReturn(r0 RepoStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (RepoStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreTransactFunc) PushReturn(r0 RepoStore, r1 error) {
	f.PushHook(func(context.Context) (RepoStore, error) {
		return r0, r1
	})
}

func (f *RepoStoreTransactFunc) nextHook() func(context.Context) (RepoStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreTransactFunc) appendCall(r0 RepoStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *RepoStoreTransactFunc) History() []RepoStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreTransactFuncCall is an object that describes an invocation of
// method Transact on an instance of MockRepoStore.
type RepoStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 RepoStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RepoStoreWithFunc describes the behavior when the With method of the
// parent MockRepoStore instance is invoked.
type RepoStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) RepoStore
	hooks       []func(basestore.ShareableStore) RepoStore
	history     []RepoStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) With(v0 basestore.ShareableStore) RepoStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(RepoStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) RepoStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockRepoStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *RepoStoreWithFunc) PushHook(hook func(basestore.ShareableStore) RepoStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreWithFunc) SetDefaultReturn(r0 RepoStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) RepoStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreWithFunc) PushReturn(r0 RepoStore) {
	f.PushHook(func(basestore.ShareableStore) RepoStore {
		return r0
	})
}

func (f *RepoStoreWithFunc) nextHook() func(basestore.ShareableStore) RepoStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreWithFunc) appendCall(r0 RepoStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreWithFuncCall objects describing
// the invocations of this function.
func (f *RepoStoreWithFunc) History() []RepoStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreWithFuncCall is an object that describes an invocation of method
// With on an instance of MockRepoStore.
type RepoStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 RepoStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockRolePermissionStore is a mock implementation of the
// RolePermissionStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockRolePermissionStore struct {
	// AssignFunc is an instance of a mock function object controlling the
	// behavior of the method Assign.
	AssignFunc *RolePermissionStoreAssignFunc
	// AssignToSystemRoleFunc is an instance of a mock function object
	// controlling the behavior of the method AssignToSystemRole.
	AssignToSystemRoleFunc *RolePermissionStoreAssignToSystemRoleFunc
	// BulkAssignPermissionsToRoleFunc is an instance of a mock function
	// object controlling the behavior of the method
	// BulkAssignPermissionsToRole.
	BulkAssignPermissionsToRoleFunc *RolePermissionStoreBulkAssignPermissionsToRoleFunc
	// BulkAssignPermissionsToSystemRolesFunc is an instance of a mock
	// function object controlling the behavior of the method
	// BulkAssignPermissionsToSystemRoles.
	BulkAssignPermissionsToSystemRolesFunc *RolePermissionStoreBulkAssignPermissionsToSystemRolesFunc
	// BulkRevokePermissionsForRoleFunc is an instance of a mock function
	// object controlling the behavior of the method
	// BulkRevokePermissionsForRole.
	BulkRevokePermissionsForRoleFunc *RolePermissionStoreBulkRevokePermissionsForRoleFunc
	// GetByPermissionIDFunc is an instance of a mock function object
	// controlling the behavior of the method GetByPermissionID.
	GetByPermissionIDFunc *RolePermissionStoreGetByPermissionIDFunc
	// GetByRoleIDFunc is an instance of a mock function object controlling
	// the behavior of the method GetByRoleID.
	GetByRoleIDFunc *RolePermissionStoreGetByRoleIDFunc
	// GetByRoleIDAndPermissionIDFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetByRoleIDAndPermissionID.
	GetByRoleIDAndPermissionIDFunc *RolePermissionStoreGetByRoleIDAndPermissionIDFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *RolePermissionStoreHandleFunc
	// RevokeFunc is an instance of a mock function object controlling the
	// behavior of the method Revoke.
	RevokeFunc *RolePermissionStoreRevokeFunc
	// SetPermissionsForRoleFunc is an instance of a mock function object
	// controlling the behavior of the method SetPermissionsForRole.
	SetPermissionsForRoleFunc *RolePermissionStoreSetPermissionsForRoleFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *RolePermissionStoreWithFunc
	// WithTransactFunc is an instance of a mock function object controlling
	// the behavior of the method WithTransact.
	WithTransactFunc *RolePermissionStoreWithTransactFunc
}

// NewMockRolePermissionStore creates a new mock of the RolePermissionStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockRolePermissionStore() *MockRolePermissionStore {
	return &MockRolePermissionStore{
		AssignFunc: &RolePermissionStoreAssignFunc{
			defaultHook: func(context.Context, AssignRolePermissionOpts) (r0 error) {
				return
			},
		},
		AssignToSystemRoleFunc: &RolePermissionStoreAssignToSystemRoleFunc{
			defaultHook: func(context.Context, AssignToSystemRoleOpts) (r0 error) {
				return
			},
		},
		BulkAssignPermissionsToRoleFunc: &RolePermissionStoreBulkAssignPermissionsToRoleFunc{
			defaultHook: func(context.Context, BulkAssignPermissionsToRoleOpts) (r0 error) {
				return
			},
		},
		BulkAssignPermissionsToSystemRolesFunc: &RolePermissionStoreBulkAssignPermissionsToSystemRolesFunc{
			defaultHook: func(context.Context, BulkAssignPermissionsToSystemRolesOpts) (r0 error) {
				return
			},
		},
		BulkRevokePermissionsForRoleFunc: &RolePermissionStoreBulkRevokePermissionsForRoleFunc{
			defaultHook: func(context.Context, BulkRevokePermissionsForRoleOpts) (r0 error) {
				return
			},
		},
		GetByPermissionIDFunc: &RolePermissionStoreGetByPermissionIDFunc{
			defaultHook: func(context.Context, GetRolePermissionOpts) (r0 []*types.RolePermission, r1 error) {
				return
			},
		},
		GetByRoleIDFunc: &RolePermissionStoreGetByRoleIDFunc{
			defaultHook: func(context.Context, GetRolePermissionOpts) (r0 []*types.RolePermission, r1 error) {
				return
			},
		},
		GetByRoleIDAndPermissionIDFunc: &RolePermissionStoreGetByRoleIDAndPermissionIDFunc{
			defaultHook: func(context.Context, GetRolePermissionOpts) (r0 *types.RolePermission, r1 error) {
				return
			},
		},
		HandleFunc: &RolePermissionStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		RevokeFunc: &RolePermissionStoreRevokeFunc{
			defaultHook: func(context.Context, RevokeRolePermissionOpts) (r0 error) {
				return
			},
		},
		SetPermissionsForRoleFunc: &RolePermissionStoreSetPermissionsForRoleFunc{
			defaultHook: func(context.Context, SetPermissionsForRoleOpts) (r0 error) {
				return
			},
		},
		WithFunc: &RolePermissionStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 RolePermissionStore) {
				return
			},
		},
		WithTransactFunc: &RolePermissionStoreWithTransactFunc{
			defaultHook: func(context.Context, func(RolePermissionStore) error) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockRolePermissionStore creates a new mock of the
// RolePermissionStore interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockRolePermissionStore() *MockRolePermissionStore {
	return &MockRolePermissionStore{
		AssignFunc: &RolePermissionStoreAssignFunc{
			defaultHook: func(context.Context, AssignRolePermissionOpts) error {
				panic("unexpected invocation of MockRolePermissionStore.Assign")
			},
		},
		AssignToSystemRoleFunc: &RolePermissionStoreAssignToSystemRoleFunc{
			defaultHook: func(context.Context, AssignToSystemRoleOpts) error {
				panic("unexpected invocation of MockRolePermissionStore.AssignToSystemRole")
			},
		},
		BulkAssignPermissionsToRoleFunc: &RolePermissionStoreBulkAssignPermissionsToRoleFunc{
			defaultHook: func(context.Context, BulkAssignPermissionsToRoleOpts) error {
				panic("unexpected invocation of MockRolePermissionStore.BulkAssignPermissionsToRole")
			},
		},
		BulkAssignPermissionsToSystemRolesFunc: &RolePermissionStoreBulkAssignPermissionsToSystemRolesFunc{
			defaultHook: func(context.Context, BulkAssignPermissionsToSystemRolesOpts) error {
				panic("unexpected invocation of MockRolePermissionStore.BulkAssignPermissionsToSystemRoles")
			},
		},
		BulkRevokePermissionsForRoleFunc: &RolePermissionStoreBulkRevokePermissionsForRoleFunc{
			defaultHook: func(context.Context, BulkRevokePermissionsForRoleOpts) error {
				panic("unexpected invocation of MockRolePermissionStore.BulkRevokePermissionsForRole")
			},
		},
		GetByPermissionIDFunc: &RolePermissionStoreGetByPermissionIDFunc{
			defaultHook: func(context.Context, GetRolePermissionOpts) ([]*types.RolePermission, error) {
				panic("unexpected invocation of MockRolePermissionStore.GetByPermissionID")
			},
		},
		GetByRoleIDFunc: &RolePermissionStoreGetByRoleIDFunc{
			defaultHook: func(context.Context, GetRolePermissionOpts) ([]*types.RolePermission, error) {
				panic("unexpected invocation of MockRolePermissionStore.GetByRoleID")
			},
		},
		GetByRoleIDAndPermissionIDFunc: &RolePermissionStoreGetByRoleIDAndPermissionIDFunc{
			defaultHook: func(context.Context, GetRolePermissionOpts) (*types.RolePermission, error) {
				panic("unexpected invocation of MockRolePermissionStore.GetByRoleIDAndPermissionID")
			},
		},
		HandleFunc: &RolePermissionStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockRolePermissionStore.Handle")
			},
		},
		RevokeFunc: &RolePermissionStoreRevokeFunc{
			defaultHook: func(context.Context, RevokeRolePermissionOpts) error {
				panic("unexpected invocation of MockRolePermissionStore.Revoke")
			},
		},
		SetPermissionsForRoleFunc: &RolePermissionStoreSetPermissionsForRoleFunc{
			defaultHook: func(context.Context, SetPermissionsForRoleOpts) error {
				panic("unexpected invocation of MockRolePermissionStore.SetPermissionsForRole")
			},
		},
		WithFunc: &RolePermissionStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) RolePermissionStore {
				panic("unexpected invocation of MockRolePermissionStore.With")
			},
		},
		WithTransactFunc: &RolePermissionStoreWithTransactFunc{
			defaultHook: func(context.Context, func(RolePermissionStore) error) error {
				panic("unexpected invocation of MockRolePermissionStore.WithTransact")
			},
		},
	}
}

// NewMockRolePermissionStoreFrom creates a new mock of the
// MockRolePermissionStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockRolePermissionStoreFrom(i RolePermissionStore) *MockRolePermissionStore {
	return &MockRolePermissionStore{
		AssignFunc: &RolePermissionStoreAssignFunc{
			defaultHook: i.Assign,
		},
		AssignToSystemRoleFunc: &RolePermissionStoreAssignToSystemRoleFunc{
			defaultHook: i.AssignToSystemRole,
		},
		BulkAssignPermissionsToRoleFunc: &RolePermissionStoreBulkAssignPermissionsToRoleFunc{
			defaultHook: i.BulkAssignPermissionsToRole,
		},
		BulkAssignPermissionsToSystemRolesFunc: &RolePermissionStoreBulkAssignPermissionsToSystemRolesFunc{
			defaultHook: i.BulkAssignPermissionsToSystemRoles,
		},
		BulkRevokePermissionsForRoleFunc: &RolePermissionStoreBulkRevokePermissionsForRoleFunc{
			defaultHook: i.BulkRevokePermissionsForRole,
		},
		GetByPermissionIDFunc: &RolePermissionStoreGetByPermissionIDFunc{
			defaultHook: i.GetByPermissionID,
		},
		GetByRoleIDFunc: &RolePermissionStoreGetByRoleIDFunc{
			defaultHook: i.GetByRoleID,
		},
		GetByRoleIDAndPermissionIDFunc: &RolePermissionStoreGetByRoleIDAndPermissionIDFunc{
			defaultHook: i.GetByRoleIDAndPermissionID,
		},
		HandleFunc: &RolePermissionStoreHandleFunc{
			defaultHook: i.Handle,
		},
		RevokeFunc: &RolePermissionStoreRevokeFunc{
			defaultHook: i.Revoke,
		},
		SetPermissionsForRoleFunc: &RolePermissionStoreSetPermissionsForRoleFunc{
			defaultHook: i.SetPermissionsForRole,
		},
		WithFunc: &RolePermissionStoreWithFunc{
			defaultHook: i.With,
		},
		WithTransactFunc: &RolePermissionStoreWithTransactFunc{
			defaultHook: i.WithTransact,
		},
	}
}

// RolePermissionStoreAssignFunc describes the behavior when the Assign
// method of the parent MockRolePermissionStore instance is invoked.
type RolePermissionStoreAssignFunc struct {
	defaultHook func(context.Context, AssignRolePermissionOpts) error
	hooks       []func(context.Context, AssignRolePermissionOpts) error
	history     []RolePermissionStoreAssignFuncCall
	mutex       sync.Mutex
}

// Assign delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRolePermissionStore) Assign(v0 context.Context, v1 AssignRolePermissionOpts) error {
	r0 := m.AssignFunc.nextHook()(v0, v1)
	m.AssignFunc.appendCall(RolePermissionStoreAssignFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Assign method of the
// parent MockRolePermissionStore instance is invoked and the hook queue is
// empty.
func (f *RolePermissionStoreAssignFunc) SetDefaultHook(hook func(context.Context, AssignRolePermissionOpts) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Assign method of the parent MockRolePermissionStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *RolePermissionStoreAssignFunc) PushHook(hook func(context.Context, AssignRolePermissionOpts) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RolePermissionStoreAssignFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, AssignRolePermissionOpts) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RolePermissionStoreAssignFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, AssignRolePermissionOpts) error {
		return r0
	})
}

func (f *RolePermissionStoreAssignFunc) nextHook() func(context.Context, AssignRolePermissionOpts) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RolePermissionStoreAssignFunc) appendCall(r0 RolePermissionStoreAssignFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RolePermissionStoreAssignFuncCall objects
// describing the invocations of this function.
func (f *RolePermissionStoreAssignFunc) History() []RolePermissionStoreAssignFuncCall {
	f.mutex.Lock()
	history := make([]RolePermissionStoreAssignFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RolePermissionStoreAssignFuncCall is an object that describes an
// invocation of method Assign on an instance of MockRolePermissionStore.
type RolePermissionStoreAssignFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 AssignRolePermissionOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RolePermissionStoreAssignFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RolePermissionStoreAssignFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RolePermissionStoreAssignToSystemRoleFunc describes the behavior when the
// AssignToSystemRole method of the parent MockRolePermissionStore instance
// is invoked.
type RolePermissionStoreAssignToSystemRoleFunc struct {
	defaultHook func(context.Context, AssignToSystemRoleOpts) error
	hooks       []func(context.Context, AssignToSystemRoleOpts) error
	history     []RolePermissionStoreAssignToSystemRoleFuncCall
	mutex       sync.Mutex
}

// AssignToSystemRole delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockRolePermissionStore) AssignToSystemRole(v0 context.Context, v1 AssignToSystemRoleOpts) error {
	r0 := m.AssignToSystemRoleFunc.nextHook()(v0, v1)
	m.AssignToSystemRoleFunc.appendCall(RolePermissionStoreAssignToSystemRoleFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the AssignToSystemRole
// method of the parent MockRolePermissionStore instance is invoked and the
// hook queue is empty.
func (f *RolePermissionStoreAssignToSystemRoleFunc) SetDefaultHook(hook func(context.Context, AssignToSystemRoleOpts) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AssignToSystemRole method of the parent MockRolePermissionStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *RolePermissionStoreAssignToSystemRoleFunc) PushHook(hook func(context.Context, AssignToSystemRoleOpts) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RolePermissionStoreAssignToSystemRoleFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, AssignToSystemRoleOpts) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RolePermissionStoreAssignToSystemRoleFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, AssignToSystemRoleOpts) error {
		return r0
	})
}

func (f *RolePermissionStoreAssignToSystemRoleFunc) nextHook() func(context.Context, AssignToSystemRoleOpts) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RolePermissionStoreAssignToSystemRoleFunc) appendCall(r0 RolePermissionStoreAssignToSystemRoleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// RolePermissionStoreAssignToSystemRoleFuncCall objects describing the
// invocations of this function.
func (f *RolePermissionStoreAssignToSystemRoleFunc) History() []RolePermissionStoreAssignToSystemRoleFuncCall {
	f.mutex.Lock()
	history := make([]RolePermissionStoreAssignToSystemRoleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RolePermissionStoreAssignToSystemRoleFuncCall is an object that describes
// an invocation of method AssignToSystemRole on an instance of
// MockRolePermissionStore.
type RolePermissionStoreAssignToSystemRoleFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 AssignToSystemRoleOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RolePermissionStoreAssignToSystemRoleFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RolePermissionStoreAssignToSystemRoleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RolePermissionStoreBulkAssignPermissionsToRoleFunc describes the behavior
// when the BulkAssignPermissionsToRole method of the parent
// MockRolePermissionStore instance is invoked.
type RolePermissionStoreBulkAssignPermissionsToRoleFunc struct {
	defaultHook func(context.Context, BulkAssignPermissionsToRoleOpts) error
	hooks       []func(context.Context, BulkAssignPermissionsToRoleOpts) error
	history     []RolePermissionStoreBulkAssignPermissionsToRoleFuncCall
	mutex       sync.Mutex
}

// BulkAssignPermissionsToRole delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockRolePermissionStore) BulkAssignPermissionsToRole(v0 context.Context, v1 BulkAssignPermissionsToRoleOpts) error {
	r0 := m.BulkAssignPermissionsToRoleFunc.nextHook()(v0, v1)
	m.BulkAssignPermissionsToRoleFunc.appendCall(RolePermissionStoreBulkAssignPermissionsToRoleFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// BulkAssignPermissionsToRole method of the parent MockRolePermissionStore
// instance is invoked and the hook queue is empty.
func (f *RolePermissionStoreBulkAssignPermissionsToRoleFunc) SetDefaultHook(hook func(context.Context, BulkAssignPermissionsToRoleOpts) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BulkAssignPermissionsToRole method of the parent MockRolePermissionStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *RolePermissionStoreBulkAssignPermissionsToRoleFunc) PushHook(hook func(context.Context, BulkAssignPermissionsToRoleOpts) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RolePermissionStoreBulkAssignPermissionsToRoleFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, BulkAssignPermissionsToRoleOpts) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RolePermissionStoreBulkAssignPermissionsToRoleFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, BulkAssignPermissionsToRoleOpts) error {
		return r0
	})
}

func (f *RolePermissionStoreBulkAssignPermissionsToRoleFunc) nextHook() func(context.Context, BulkAssignPermissionsToRoleOpts) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RolePermissionStoreBulkAssignPermissionsToRoleFunc) appendCall(r0 RolePermissionStoreBulkAssignPermissionsToRoleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// RolePermissionStoreBulkAssignPermissionsToRoleFuncCall objects describing
// the invocations of this function.
func (f *RolePermissionStoreBulkAssignPermissionsToRoleFunc) History() []RolePermissionStoreBulkAssignPermissionsToRoleFuncCall {
	f.mutex.Lock()
	history := make([]RolePermissionStoreBulkAssignPermissionsToRoleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RolePermissionStoreBulkAssignPermissionsToRoleFuncCall is an object that
// describes an invocation of method BulkAssignPermissionsToRole on an
// instance of MockRolePermissionStore.
type RolePermissionStoreBulkAssignPermissionsToRoleFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 BulkAssignPermissionsToRoleOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RolePermissionStoreBulkAssignPermissionsToRoleFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RolePermissionStoreBulkAssignPermissionsToRoleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RolePermissionStoreBulkAssignPermissionsToSystemRolesFunc describes the
// behavior when the BulkAssignPermissionsToSystemRoles method of the parent
// MockRolePermissionStore instance is invoked.
type RolePermissionStoreBulkAssignPermissionsToSystemRolesFunc struct {
	defaultHook func(context.Context, BulkAssignPermissionsToSystemRolesOpts) error
	hooks       []func(context.Context, BulkAssignPermissionsToSystemRolesOpts) error
	history     []RolePermissionStoreBulkAssignPermissionsToSystemRolesFuncCall
	mutex       sync.Mutex
}

// BulkAssignPermissionsToSystemRoles delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockRolePermissionStore) BulkAssignPermissionsToSystemRoles(v0 context.Context, v1 BulkAssignPermissionsToSystemRolesOpts) error {
	r0 := m.BulkAssignPermissionsToSystemRolesFunc.nextHook()(v0, v1)
	m.BulkAssignPermissionsToSystemRolesFunc.appendCall(RolePermissionStoreBulkAssignPermissionsToSystemRolesFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// BulkAssignPermissionsToSystemRoles method of the parent
// MockRolePermissionStore instance is invoked and the hook queue is empty.
func (f *RolePermissionStoreBulkAssignPermissionsToSystemRolesFunc) SetDefaultHook(hook func(context.Context, BulkAssignPermissionsToSystemRolesOpts) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BulkAssignPermissionsToSystemRoles method of the parent
// MockRolePermissionStore instance invokes the hook at the front of the
// queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *RolePermissionStoreBulkAssignPermissionsToSystemRolesFunc) PushHook(hook func(context.Context, BulkAssignPermissionsToSystemRolesOpts) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RolePermissionStoreBulkAssignPermissionsToSystemRolesFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, BulkAssignPermissionsToSystemRolesOpts) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RolePermissionStoreBulkAssignPermissionsToSystemRolesFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, BulkAssignPermissionsToSystemRolesOpts) error {
		return r0
	})
}

func (f *RolePermissionStoreBulkAssignPermissionsToSystemRolesFunc) nextHook() func(context.Context, BulkAssignPermissionsToSystemRolesOpts) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RolePermissionStoreBulkAssignPermissionsToSystemRolesFunc) appendCall(r0 RolePermissionStoreBulkAssignPermissionsToSystemRolesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// RolePermissionStoreBulkAssignPermissionsToSystemRolesFuncCall objects
// describing the invocations of this function.
func (f *RolePermissionStoreBulkAssignPermissionsToSystemRolesFunc) History() []RolePermissionStoreBulkAssignPermissionsToSystemRolesFuncCall {
	f.mutex.Lock()
	history := make([]RolePermissionStoreBulkAssignPermissionsToSystemRolesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RolePermissionStoreBulkAssignPermissionsToSystemRolesFuncCall is an
// object that describes an invocation of method
// BulkAssignPermissionsToSystemRoles on an instance of
// MockRolePermissionStore.
type RolePermissionStoreBulkAssignPermissionsToSystemRolesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 BulkAssignPermissionsToSystemRolesOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RolePermissionStoreBulkAssignPermissionsToSystemRolesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RolePermissionStoreBulkAssignPermissionsToSystemRolesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RolePermissionStoreBulkRevokePermissionsForRoleFunc describes the
// behavior when the BulkRevokePermissionsForRole method of the parent
// MockRolePermissionStore instance is invoked.
type RolePermissionStoreBulkRevokePermissionsForRoleFunc struct {
	defaultHook func(context.Context, BulkRevokePermissionsForRoleOpts) error
	hooks       []func(context.Context, BulkRevokePermissionsForRoleOpts) error
	history     []RolePermissionStoreBulkRevokePermissionsForRoleFuncCall
	mutex       sync.Mutex
}

// BulkRevokePermissionsForRole delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockRolePermissionStore) BulkRevokePermissionsForRole(v0 context.Context, v1 BulkRevokePermissionsForRoleOpts) error {
	r0 := m.BulkRevokePermissionsForRoleFunc.nextHook()(v0, v1)
	m.BulkRevokePermissionsForRoleFunc.appendCall(RolePermissionStoreBulkRevokePermissionsForRoleFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// BulkRevokePermissionsForRole method of the parent MockRolePermissionStore
// instance is invoked and the hook queue is empty.
func (f *RolePermissionStoreBulkRevokePermissionsForRoleFunc) SetDefaultHook(hook func(context.Context, BulkRevokePermissionsForRoleOpts) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BulkRevokePermissionsForRole method of the parent MockRolePermissionStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *RolePermissionStoreBulkRevokePermissionsForRoleFunc) PushHook(hook func(context.Context, BulkRevokePermissionsForRoleOpts) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RolePermissionStoreBulkRevokePermissionsForRoleFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, BulkRevokePermissionsForRoleOpts) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RolePermissionStoreBulkRevokePermissionsForRoleFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, BulkRevokePermissionsForRoleOpts) error {
		return r0
	})
}

func (f *RolePermissionStoreBulkRevokePermissionsForRoleFunc) nextHook() func(context.Context, BulkRevokePermissionsForRoleOpts) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RolePermissionStoreBulkRevokePermissionsForRoleFunc) appendCall(r0 RolePermissionStoreBulkRevokePermissionsForRoleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// RolePermissionStoreBulkRevokePermissionsForRoleFuncCall objects
// describing the invocations of this function.
func (f *RolePermissionStoreBulkRevokePermissionsForRoleFunc) History() []RolePermissionStoreBulkRevokePermissionsForRoleFuncCall {
	f.mutex.Lock()
	history := make([]RolePermissionStoreBulkRevokePermissionsForRoleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RolePermissionStoreBulkRevokePermissionsForRoleFuncCall is an object that
// describes an invocation of method BulkRevokePermissionsForRole on an
// instance of MockRolePermissionStore.
type RolePermissionStoreBulkRevokePermissionsForRoleFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 BulkRevokePermissionsForRoleOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RolePermissionStoreBulkRevokePermissionsForRoleFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RolePermissionStoreBulkRevokePermissionsForRoleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RolePermissionStoreGetByPermissionIDFunc describes the behavior when the
// GetByPermissionID method of the parent MockRolePermissionStore instance
// is invoked.
type RolePermissionStoreGetByPermissionIDFunc struct {
	defaultHook func(context.Context, GetRolePermissionOpts) ([]*types.RolePermission, error)
	hooks       []func(context.Context, GetRolePermissionOpts) ([]*types.RolePermission, error)
	history     []RolePermissionStoreGetByPermissionIDFuncCall
	mutex       sync.Mutex
}

// GetByPermissionID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockRolePermissionStore) GetByPermissionID(v0 context.Context, v1 GetRolePermissionOpts) ([]*types.RolePermission, error) {
	r0, r1 := m.GetByPermissionIDFunc.nextHook()(v0, v1)
	m.GetByPermissionIDFunc.appendCall(RolePermissionStoreGetByPermissionIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByPermissionID
// method of the parent MockRolePermissionStore instance is invoked and the
// hook queue is empty.
func (f *RolePermissionStoreGetByPermissionIDFunc) SetDefaultHook(hook func(context.Context, GetRolePermissionOpts) ([]*types.RolePermission, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByPermissionID method of the parent MockRolePermissionStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *RolePermissionStoreGetByPermissionIDFunc) PushHook(hook func(context.Context, GetRolePermissionOpts) ([]*types.RolePermission, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RolePermissionStoreGetByPermissionIDFunc) SetDefaultReturn(r0 []*types.RolePermission, r1 error) {
	f.SetDefaultHook(func(context.Context, GetRolePermissionOpts) ([]*types.RolePermission, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RolePermissionStoreGetByPermissionIDFunc) PushReturn(r0 []*types.RolePermission, r1 error) {
	f.PushHook(func(context.Context, GetRolePermissionOpts) ([]*types.RolePermission, error) {
		return r0, r1
	})
}

func (f *RolePermissionStoreGetByPermissionIDFunc) nextHook() func(context.Context, GetRolePermissionOpts) ([]*types.RolePermission, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RolePermissionStoreGetByPermissionIDFunc) appendCall(r0 RolePermissionStoreGetByPermissionIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// RolePermissionStoreGetByPermissionIDFuncCall objects describing the
// invocations of this function.
func (f *RolePermissionStoreGetByPermissionIDFunc) History() []RolePermissionStoreGetByPermissionIDFuncCall {
	f.mutex.Lock()
	history := make([]RolePermissionStoreGetByPermissionIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RolePermissionStoreGetByPermissionIDFuncCall is an object that describes
// an invocation of method GetByPermissionID on an instance of
// MockRolePermissionStore.
type RolePermissionStoreGetByPermissionIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 GetRolePermissionOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.RolePermission
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RolePermissionStoreGetByPermissionIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RolePermissionStoreGetByPermissionIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RolePermissionStoreGetByRoleIDFunc describes the behavior when the
// GetByRoleID method of the parent MockRolePermissionStore instance is
// invoked.
type RolePermissionStoreGetByRoleIDFunc struct {
	defaultHook func(context.Context, GetRolePermissionOpts) ([]*types.RolePermission, error)
	hooks       []func(context.Context, GetRolePermissionOpts) ([]*types.RolePermission, error)
	history     []RolePermissionStoreGetByRoleIDFuncCall
	mutex       sync.Mutex
}

// GetByRoleID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockRolePermissionStore) GetByRoleID(v0 context.Context, v1 GetRolePermissionOpts) ([]*types.RolePermission, error) {
	r0, r1 := m.GetByRoleIDFunc.nextHook()(v0, v1)
	m.GetByRoleIDFunc.appendCall(RolePermissionStoreGetByRoleIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByRoleID method
// of the parent MockRolePermissionStore instance is invoked and the hook
// queue is empty.
func (f *RolePermissionStoreGetByRoleIDFunc) SetDefaultHook(hook func(context.Context, GetRolePermissionOpts) ([]*types.RolePermission, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByRoleID method of the parent MockRolePermissionStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *RolePermissionStoreGetByRoleIDFunc) PushHook(hook func(context.Context, GetRolePermissionOpts) ([]*types.RolePermission, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RolePermissionStoreGetByRoleIDFunc) SetDefaultReturn(r0 []*types.RolePermission, r1 error) {
	f.SetDefaultHook(func(context.Context, GetRolePermissionOpts) ([]*types.RolePermission, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RolePermissionStoreGetByRoleIDFunc) PushReturn(r0 []*types.RolePermission, r1 error) {
	f.PushHook(func(context.Context, GetRolePermissionOpts) ([]*types.RolePermission, error) {
		return r0, r1
	})
}

func (f *RolePermissionStoreGetByRoleIDFunc) nextHook() func(context.Context, GetRolePermissionOpts) ([]*types.RolePermission, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RolePermissionStoreGetByRoleIDFunc) appendCall(r0 RolePermissionStoreGetByRoleIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RolePermissionStoreGetByRoleIDFuncCall
// objects describing the invocations of this function.
func (f *RolePermissionStoreGetByRoleIDFunc) History() []RolePermissionStoreGetByRoleIDFuncCall {
	f.mutex.Lock()
	history := make([]RolePermissionStoreGetByRoleIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RolePermissionStoreGetByRoleIDFuncCall is an object that describes an
// invocation of method GetByRoleID on an instance of
// MockRolePermissionStore.
type RolePermissionStoreGetByRoleIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 GetRolePermissionOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.RolePermission
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RolePermissionStoreGetByRoleIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RolePermissionStoreGetByRoleIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RolePermissionStoreGetByRoleIDAndPermissionIDFunc describes the behavior
// when the GetByRoleIDAndPermissionID method of the parent
// MockRolePermissionStore instance is invoked.
type RolePermissionStoreGetByRoleIDAndPermissionIDFunc struct {
	defaultHook func(context.Context, GetRolePermissionOpts) (*types.RolePermission, error)
	hooks       []func(context.Context, GetRolePermissionOpts) (*types.RolePermission, error)
	history     []RolePermissionStoreGetByRoleIDAndPermissionIDFuncCall
	mutex       sync.Mutex
}

// GetByRoleIDAndPermissionID delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockRolePermissionStore) GetByRoleIDAndPermissionID(v0 context.Context, v1 GetRolePermissionOpts) (*types.RolePermission, error) {
	r0, r1 := m.GetByRoleIDAndPermissionIDFunc.nextHook()(v0, v1)
	m.GetByRoleIDAndPermissionIDFunc.appendCall(RolePermissionStoreGetByRoleIDAndPermissionIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetByRoleIDAndPermissionID method of the parent MockRolePermissionStore
// instance is invoked and the hook queue is empty.
func (f *RolePermissionStoreGetByRoleIDAndPermissionIDFunc) SetDefaultHook(hook func(context.Context, GetRolePermissionOpts) (*types.RolePermission, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByRoleIDAndPermissionID method of the parent MockRolePermissionStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *RolePermissionStoreGetByRoleIDAndPermissionIDFunc) PushHook(hook func(context.Context, GetRolePermissionOpts) (*types.RolePermission, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RolePermissionStoreGetByRoleIDAndPermissionIDFunc) SetDefaultReturn(r0 *types.RolePermission, r1 error) {
	f.SetDefaultHook(func(context.Context, GetRolePermissionOpts) (*types.RolePermission, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RolePermissionStoreGetByRoleIDAndPermissionIDFunc) PushReturn(r0 *types.RolePermission, r1 error) {
	f.PushHook(func(context.Context, GetRolePermissionOpts) (*types.RolePermission, error) {
		return r0, r1
	})
}

func (f *RolePermissionStoreGetByRoleIDAndPermissionIDFunc) nextHook() func(context.Context, GetRolePermissionOpts) (*types.RolePermission, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RolePermissionStoreGetByRoleIDAndPermissionIDFunc) appendCall(r0 RolePermissionStoreGetByRoleIDAndPermissionIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// RolePermissionStoreGetByRoleIDAndPermissionIDFuncCall objects describing
// the invocations of this function.
func (f *RolePermissionStoreGetByRoleIDAndPermissionIDFunc) History() []RolePermissionStoreGetByRoleIDAndPermissionIDFuncCall {
	f.mutex.Lock()
	history := make([]RolePermissionStoreGetByRoleIDAndPermissionIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RolePermissionStoreGetByRoleIDAndPermissionIDFuncCall is an object that
// describes an invocation of method GetByRoleIDAndPermissionID on an
// instance of MockRolePermissionStore.
type RolePermissionStoreGetByRoleIDAndPermissionIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 GetRolePermissionOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.RolePermission
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RolePermissionStoreGetByRoleIDAndPermissionIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RolePermissionStoreGetByRoleIDAndPermissionIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RolePermissionStoreHandleFunc describes the behavior when the Handle
// method of the parent MockRolePermissionStore instance is invoked.
type RolePermissionStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []RolePermissionStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRolePermissionStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(RolePermissionStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockRolePermissionStore instance is invoked and the hook queue is
// empty.
func (f *RolePermissionStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockRolePermissionStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *RolePermissionStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RolePermissionStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RolePermissionStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *RolePermissionStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RolePermissionStoreHandleFunc) appendCall(r0 RolePermissionStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RolePermissionStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *RolePermissionStoreHandleFunc) History() []RolePermissionStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]RolePermissionStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RolePermissionStoreHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of MockRolePermissionStore.
type RolePermissionStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RolePermissionStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RolePermissionStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RolePermissionStoreRevokeFunc describes the behavior when the Revoke
// method of the parent MockRolePermissionStore instance is invoked.
type RolePermissionStoreRevokeFunc struct {
	defaultHook func(context.Context, RevokeRolePermissionOpts) error
	hooks       []func(context.Context, RevokeRolePermissionOpts) error
	history     []RolePermissionStoreRevokeFuncCall
	mutex       sync.Mutex
}

// Revoke delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRolePermissionStore) Revoke(v0 context.Context, v1 RevokeRolePermissionOpts) error {
	r0 := m.RevokeFunc.nextHook()(v0, v1)
	m.RevokeFunc.appendCall(RolePermissionStoreRevokeFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Revoke method of the
// parent MockRolePermissionStore instance is invoked and the hook queue is
// empty.
func (f *RolePermissionStoreRevokeFunc) SetDefaultHook(hook func(context.Context, RevokeRolePermissionOpts) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Revoke method of the parent MockRolePermissionStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *RolePermissionStoreRevokeFunc) PushHook(hook func(context.Context, RevokeRolePermissionOpts) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RolePermissionStoreRevokeFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, RevokeRolePermissionOpts) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RolePermissionStoreRevokeFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, RevokeRolePermissionOpts) error {
		return r0
	})
}

func (f *RolePermissionStoreRevokeFunc) nextHook() func(context.Context, RevokeRolePermissionOpts) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RolePermissionStoreRevokeFunc) appendCall(r0 RolePermissionStoreRevokeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RolePermissionStoreRevokeFuncCall objects
// describing the invocations of this function.
func (f *RolePermissionStoreRevokeFunc) History() []RolePermissionStoreRevokeFuncCall {
	f.mutex.Lock()
	history := make([]RolePermissionStoreRevokeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RolePermissionStoreRevokeFuncCall is an object that describes an
// invocation of method Revoke on an instance of MockRolePermissionStore.
type RolePermissionStoreRevokeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 RevokeRolePermissionOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RolePermissionStoreRevokeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RolePermissionStoreRevokeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RolePermissionStoreSetPermissionsForRoleFunc describes the behavior when
// the SetPermissionsForRole method of the parent MockRolePermissionStore
// instance is invoked.
type RolePermissionStoreSetPermissionsForRoleFunc struct {
	defaultHook func(context.Context, SetPermissionsForRoleOpts) error
	hooks       []func(context.Context, SetPermissionsForRoleOpts) error
	history     []RolePermissionStoreSetPermissionsForRoleFuncCall
	mutex       sync.Mutex
}

// SetPermissionsForRole delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockRolePermissionStore) SetPermissionsForRole(v0 context.Context, v1 SetPermissionsForRoleOpts) error {
	r0 := m.SetPermissionsForRoleFunc.nextHook()(v0, v1)
	m.SetPermissionsForRoleFunc.appendCall(RolePermissionStoreSetPermissionsForRoleFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// SetPermissionsForRole method of the parent MockRolePermissionStore
// instance is invoked and the hook queue is empty.
func (f *RolePermissionStoreSetPermissionsForRoleFunc) SetDefaultHook(hook func(context.Context, SetPermissionsForRoleOpts) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetPermissionsForRole method of the parent MockRolePermissionStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *RolePermissionStoreSetPermissionsForRoleFunc) PushHook(hook func(context.Context, SetPermissionsForRoleOpts) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RolePermissionStoreSetPermissionsForRoleFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, SetPermissionsForRoleOpts) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RolePermissionStoreSetPermissionsForRoleFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, SetPermissionsForRoleOpts) error {
		return r0
	})
}

func (f *RolePermissionStoreSetPermissionsForRoleFunc) nextHook() func(context.Context, SetPermissionsForRoleOpts) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RolePermissionStoreSetPermissionsForRoleFunc) appendCall(r0 RolePermissionStoreSetPermissionsForRoleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// RolePermissionStoreSetPermissionsForRoleFuncCall objects describing the
// invocations of this function.
func (f *RolePermissionStoreSetPermissionsForRoleFunc) History() []RolePermissionStoreSetPermissionsForRoleFuncCall {
	f.mutex.Lock()
	history := make([]RolePermissionStoreSetPermissionsForRoleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RolePermissionStoreSetPermissionsForRoleFuncCall is an object that
// describes an invocation of method SetPermissionsForRole on an instance of
// MockRolePermissionStore.
type RolePermissionStoreSetPermissionsForRoleFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 SetPermissionsForRoleOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RolePermissionStoreSetPermissionsForRoleFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RolePermissionStoreSetPermissionsForRoleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RolePermissionStoreWithFunc describes the behavior when the With method
// of the parent MockRolePermissionStore instance is invoked.
type RolePermissionStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) RolePermissionStore
	hooks       []func(basestore.ShareableStore) RolePermissionStore
	history     []RolePermissionStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRolePermissionStore) With(v0 basestore.ShareableStore) RolePermissionStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(RolePermissionStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockRolePermissionStore instance is invoked and the hook queue is
// empty.
func (f *RolePermissionStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) RolePermissionStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockRolePermissionStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *RolePermissionStoreWithFunc) PushHook(hook func(basestore.ShareableStore) RolePermissionStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RolePermissionStoreWithFunc) SetDefaultReturn(r0 RolePermissionStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) RolePermissionStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RolePermissionStoreWithFunc) PushReturn(r0 RolePermissionStore) {
	f.PushHook(func(basestore.ShareableStore) RolePermissionStore {
		return r0
	})
}

func (f *RolePermissionStoreWithFunc) nextHook() func(basestore.ShareableStore) RolePermissionStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RolePermissionStoreWithFunc) appendCall(r0 RolePermissionStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RolePermissionStoreWithFuncCall objects
// describing the invocations of this function.
func (f *RolePermissionStoreWithFunc) History() []RolePermissionStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]RolePermissionStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RolePermissionStoreWithFuncCall is an object that describes an invocation
// of method With on an instance of MockRolePermissionStore.
type RolePermissionStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 RolePermissionStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RolePermissionStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RolePermissionStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RolePermissionStoreWithTransactFunc describes the behavior when the
// WithTransact method of the parent MockRolePermissionStore instance is
// invoked.
type RolePermissionStoreWithTransactFunc struct {
	defaultHook func(context.Context, func(RolePermissionStore) error) error
	hooks       []func(context.Context, func(RolePermissionStore) error) error
	history     []RolePermissionStoreWithTransactFuncCall
	mutex       sync.Mutex
}

// WithTransact delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockRolePermissionStore) WithTransact(v0 context.Context, v1 func(RolePermissionStore) error) error {
	r0 := m.WithTransactFunc.nextHook()(v0, v1)
	m.WithTransactFunc.appendCall(RolePermissionStoreWithTransactFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithTransact method
// of the parent MockRolePermissionStore instance is invoked and the hook
// queue is empty.
func (f *RolePermissionStoreWithTransactFunc) SetDefaultHook(hook func(context.Context, func(RolePermissionStore) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithTransact method of the parent MockRolePermissionStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *RolePermissionStoreWithTransactFunc) PushHook(hook func(context.Context, func(RolePermissionStore) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RolePermissionStoreWithTransactFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, func(RolePermissionStore) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RolePermissionStoreWithTransactFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, func(RolePermissionStore) error) error {
		return r0
	})
}

func (f *RolePermissionStoreWithTransactFunc) nextHook() func(context.Context, func(RolePermissionStore) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RolePermissionStoreWithTransactFunc) appendCall(r0 RolePermissionStoreWithTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RolePermissionStoreWithTransactFuncCall
// objects describing the invocations of this function.
func (f *RolePermissionStoreWithTransactFunc) History() []RolePermissionStoreWithTransactFuncCall {
	f.mutex.Lock()
	history := make([]RolePermissionStoreWithTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RolePermissionStoreWithTransactFuncCall is an object that describes an
// invocation of method WithTransact on an instance of
// MockRolePermissionStore.
type RolePermissionStoreWithTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 func(RolePermissionStore) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RolePermissionStoreWithTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RolePermissionStoreWithTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockRoleStore is a mock implementation of the RoleStore interface (from
// the package github.com/sourcegraph/sourcegraph/internal/database) used
// for unit testing.
type MockRoleStore struct {
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *RoleStoreCountFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *RoleStoreCreateFunc
	// DeleteFunc is an instance of a mock function object controlling the
	// behavior of the method Delete.
	DeleteFunc *RoleStoreDeleteFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *RoleStoreGetFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *RoleStoreHandleFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *RoleStoreListFunc
	// UpdateFunc is an instance of a mock function object controlling the
	// behavior of the method Update.
	UpdateFunc *RoleStoreUpdateFunc
}

// NewMockRoleStore creates a new mock of the RoleStore interface. All
// methods return zero values for all results, unless overwritten.
func NewMockRoleStore() *MockRoleStore {
	return &MockRoleStore{
		CountFunc: &RoleStoreCountFunc{
			defaultHook: func(context.Context, RolesListOptions) (r0 int, r1 error) {
				return
			},
		},
		CreateFunc: &RoleStoreCreateFunc{
			defaultHook: func(context.Context, string, bool) (r0 *types.Role, r1 error) {
				return
			},
		},
		DeleteFunc: &RoleStoreDeleteFunc{
			defaultHook: func(context.Context, DeleteRoleOpts) (r0 error) {
				return
			},
		},
		GetFunc: &RoleStoreGetFunc{
			defaultHook: func(context.Context, GetRoleOpts) (r0 *types.Role, r1 error) {
				return
			},
		},
		HandleFunc: &RoleStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		ListFunc: &RoleStoreListFunc{
			defaultHook: func(context.Context, RolesListOptions) (r0 []*types.Role, r1 error) {
				return
			},
		},
		UpdateFunc: &RoleStoreUpdateFunc{
			defaultHook: func(context.Context, *types.Role) (r0 *types.Role, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockRoleStore creates a new mock of the RoleStore interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockRoleStore() *MockRoleStore {
	return &MockRoleStore{
		CountFunc: &RoleStoreCountFunc{
			defaultHook: func(context.Context, RolesListOptions) (int, error) {
				panic("unexpected invocation of MockRoleStore.Count")
			},
		},
		CreateFunc: &RoleStoreCreateFunc{
			defaultHook: func(context.Context, string, bool) (*types.Role, error) {
				panic("unexpected invocation of MockRoleStore.Create")
			},
		},
		DeleteFunc: &RoleStoreDeleteFunc{
			defaultHook: func(context.Context, DeleteRoleOpts) error {
				panic("unexpected invocation of MockRoleStore.Delete")
			},
		},
		GetFunc: &RoleStoreGetFunc{
			defaultHook: func(context.Context, GetRoleOpts) (*types.Role, error) {
				panic("unexpected invocation of MockRoleStore.Get")
			},
		},
		HandleFunc: &RoleStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockRoleStore.Handle")
			},
		},
		ListFunc: &RoleStoreListFunc{
			defaultHook: func(context.Context, RolesListOptions) ([]*types.Role, error) {
				panic("unexpected invocation of MockRoleStore.List")
			},
		},
		UpdateFunc: &RoleStoreUpdateFunc{
			defaultHook: func(context.Context, *types.Role) (*types.Role, error) {
				panic("unexpected invocation of MockRoleStore.Update")
			},
		},
	}
}

// NewMockRoleStoreFrom creates a new mock of the MockRoleStore interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockRoleStoreFrom(i RoleStore) *MockRoleStore {
	return &MockRoleStore{
		CountFunc: &RoleStoreCountFunc{
			defaultHook: i.Count,
		},
		CreateFunc: &RoleStoreCreateFunc{
			defaultHook: i.Create,
		},
		DeleteFunc: &RoleStoreDeleteFunc{
			defaultHook: i.Delete,
		},
		GetFunc: &RoleStoreGetFunc{
			defaultHook: i.Get,
		},
		HandleFunc: &RoleStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListFunc: &RoleStoreListFunc{
			defaultHook: i.List,
		},
		UpdateFunc: &RoleStoreUpdateFunc{
			defaultHook: i.Update,
		},
	}
}

// RoleStoreCountFunc describes the behavior when the Count method of the
// parent MockRoleStore instance is invoked.
type RoleStoreCountFunc struct {
	defaultHook func(context.Context, RolesListOptions) (int, error)
	hooks       []func(context.Context, RolesListOptions) (int, error)
	history     []RoleStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRoleStore) Count(v0 context.Context, v1 RolesListOptions) (int, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(RoleStoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockRoleStore instance is invoked and the hook queue is empty.
func (f *RoleStoreCountFunc) SetDefaultHook(hook func(context.Context, RolesListOptions) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockRoleStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *RoleStoreCountFunc) PushHook(hook func(context.Context, RolesListOptions) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RoleStoreCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, RolesListOptions) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RoleStoreCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, RolesListOptions) (int, error) {
		return r0, r1
	})
}

func (f *RoleStoreCountFunc) nextHook() func(context.Context, RolesListOptions) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RoleStoreCountFunc) appendCall(r0 RoleStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RoleStoreCountFuncCall objects describing
// the invocations of this function.
func (f *RoleStoreCountFunc) History() []RoleStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]RoleStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RoleStoreCountFuncCall is an object that describes an invocation of
// method Count on an instance of MockRoleStore.
type RoleStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 RolesListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RoleStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RoleStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RoleStoreCreateFunc describes the behavior when the Create method of the
// parent MockRoleStore instance is invoked.
type RoleStoreCreateFunc struct {
	defaultHook func(context.Context, string, bool) (*types.Role, error)
	hooks       []func(context.Context, string, bool) (*types.Role, error)
	history     []RoleStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRoleStore) Create(v0 context.Context, v1 string, v2 bool) (*types.Role, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1, v2)
	m.CreateFunc.appendCall(RoleStoreCreateFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockRoleStore instance is invoked and the hook queue is empty.
func (f *RoleStoreCreateFunc) SetDefaultHook(hook func(context.Context, string, bool) (*types.Role, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockRoleStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *RoleStoreCreateFunc) PushHook(hook func(context.Context, string, bool) (*types.Role, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RoleStoreCreateFunc) SetDefaultReturn(r0 *types.Role, r1 error) {
	f.SetDefaultHook(func(context.Context, string, bool) (*types.Role, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RoleStoreCreateFunc) PushReturn(r0 *types.Role, r1 error) {
	f.PushHook(func(context.Context, string, bool) (*types.Role, error) {
		return r0, r1
	})
}

func (f *RoleStoreCreateFunc) nextHook() func(context.Context, string, bool) (*types.Role, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RoleStoreCreateFunc) appendCall(r0 RoleStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RoleStoreCreateFuncCall objects describing
// the invocations of this function.
func (f *RoleStoreCreateFunc) History() []RoleStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]RoleStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RoleStoreCreateFuncCall is an object that describes an invocation of
// method Create on an instance of MockRoleStore.
type RoleStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Role
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RoleStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RoleStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RoleStoreDeleteFunc describes the behavior when the Delete method of the
// parent MockRoleStore instance is invoked.
type RoleStoreDeleteFunc struct {
	defaultHook func(context.Context, DeleteRoleOpts) error
	hooks       []func(context.Context, DeleteRoleOpts) error
	history     []RoleStoreDeleteFuncCall
	mutex       sync.Mutex
}

// Delete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRoleStore) Delete(v0 context.Context, v1 DeleteRoleOpts) error {
	r0 := m.DeleteFunc.nextHook()(v0, v1)
	m.DeleteFunc.appendCall(RoleStoreDeleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Delete method of the
// parent MockRoleStore instance is invoked and the hook queue is empty.
func (f *RoleStoreDeleteFunc) SetDefaultHook(hook func(context.Context, DeleteRoleOpts) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Delete method of the parent MockRoleStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *RoleStoreDeleteFunc) PushHook(hook func(context.Context, DeleteRoleOpts) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RoleStoreDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, DeleteRoleOpts) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RoleStoreDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, DeleteRoleOpts) error {
		return r0
	})
}

func (f *RoleStoreDeleteFunc) nextHook() func(context.Context, DeleteRoleOpts) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RoleStoreDeleteFunc) appendCall(r0 RoleStoreDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RoleStoreDeleteFuncCall objects describing
// the invocations of this function.
func (f *RoleStoreDeleteFunc) History() []RoleStoreDeleteFuncCall {
	f.mutex.Lock()
	history := make([]RoleStoreDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RoleStoreDeleteFuncCall is an object that describes an invocation of
// method Delete on an instance of MockRoleStore.
type RoleStoreDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 DeleteRoleOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RoleStoreDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RoleStoreDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RoleStoreGetFunc describes the behavior when the Get method of the parent
// MockRoleStore instance is invoked.
type RoleStoreGetFunc struct {
	defaultHook func(context.Context, GetRoleOpts) (*types.Role, error)
	hooks       []func(context.Context, GetRoleOpts) (*types.Role, error)
	history     []RoleStoreGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRoleStore) Get(v0 context.Context, v1 GetRoleOpts) (*types.Role, error) {
	r0, r1 := m.GetFunc.nextHook()(v0, v1)
	m.GetFunc.appendCall(RoleStoreGetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockRoleStore instance is invoked and the hook queue is empty.
func (f *RoleStoreGetFunc) SetDefaultHook(hook func(context.Context, GetRoleOpts) (*types.Role, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockRoleStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *RoleStoreGetFunc) PushHook(hook func(context.Context, GetRoleOpts) (*types.Role, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RoleStoreGetFunc) SetDefaultReturn(r0 *types.Role, r1 error) {
	f.SetDefaultHook(func(context.Context, GetRoleOpts) (*types.Role, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RoleStoreGetFunc) PushReturn(r0 *types.Role, r1 error) {
	f.PushHook(func(context.Context, GetRoleOpts) (*types.Role, error) {
		return r0, r1
	})
}

func (f *RoleStoreGetFunc) nextHook() func(context.Context, GetRoleOpts) (*types.Role, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RoleStoreGetFunc) appendCall(r0 RoleStoreGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RoleStoreGetFuncCall objects describing the
// invocations of this function.
func (f *RoleStoreGetFunc) History() []RoleStoreGetFuncCall {
	f.mutex.Lock()
	history := make([]RoleStoreGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RoleStoreGetFuncCall is an object that describes an invocation of method
// Get on an instance of MockRoleStore.
type RoleStoreGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 GetRoleOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Role
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RoleStoreGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RoleStoreGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RoleStoreHandleFunc describes the behavior when the Handle method of the
// parent MockRoleStore instance is invoked.
type RoleStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []RoleStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRoleStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(RoleStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockRoleStore instance is invoked and the hook queue is empty.
func (f *RoleStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockRoleStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *RoleStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RoleStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RoleStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *RoleStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RoleStoreHandleFunc) appendCall(r0 RoleStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RoleStoreHandleFuncCall objects describing
// the invocations of this function.
func (f *RoleStoreHandleFunc) History() []RoleStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]RoleStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RoleStoreHandleFuncCall is an object that describes an invocation of
// method Handle on an instance of MockRoleStore.
type RoleStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RoleStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RoleStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// RoleStoreListFunc describes the behavior when the List method of the
// parent MockRoleStore instance is invoked.
type RoleStoreListFunc struct {
	defaultHook func(context.Context, RolesListOptions) ([]*types.Role, error)
	hooks       []func(context.Context, RolesListOptions) ([]*types.Role, error)
	history     []RoleStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRoleStore) List(v0 context.Context, v1 RolesListOptions) ([]*types.Role, error) {
	r0, r1 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(RoleStoreListFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockRoleStore instance is invoked and the hook queue is empty.
func (f *RoleStoreListFunc) SetDefaultHook(hook func(context.Context, RolesListOptions) ([]*types.Role, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockRoleStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *RoleStoreListFunc) PushHook(hook func(context.Context, RolesListOptions) ([]*types.Role, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RoleStoreListFunc) SetDefaultReturn(r0 []*types.Role, r1 error) {
	f.SetDefaultHook(func(context.Context, RolesListOptions) ([]*types.Role, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RoleStoreListFunc) PushReturn(r0 []*types.Role, r1 error) {
	f.PushHook(func(context.Context, RolesListOptions) ([]*types.Role, error) {
		return r0, r1
	})
}

func (f *RoleStoreListFunc) nextHook() func(context.Context, RolesListOptions) ([]*types.Role, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RoleStoreListFunc) appendCall(r0 RoleStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RoleStoreListFuncCall objects describing
// the invocations of this function.
func (f *RoleStoreListFunc) History() []RoleStoreListFuncCall {
	f.mutex.Lock()
	history := make([]RoleStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RoleStoreListFuncCall is an object that describes an invocation of method
// List on an instance of MockRoleStore.
type RoleStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 RolesListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.Role
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RoleStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RoleStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// RoleStoreUpdateFunc describes the behavior when the Update method of the
// parent MockRoleStore instance is invoked.
type RoleStoreUpdateFunc struct {
	defaultHook func(context.Context, *types.Role) (*types.Role, error)
	hooks       []func(context.Context, *types.Role) (*types.Role, error)
	history     []RoleStoreUpdateFuncCall
	mutex       sync.Mutex
}

// Update delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRoleStore) Update(v0 context.Context, v1 *types.Role) (*types.Role, error) {
	r0, r1 := m.UpdateFunc.nextHook()(v0, v1)
	m.UpdateFunc.appendCall(RoleStoreUpdateFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Update method of the
// parent MockRoleStore instance is invoked and the hook queue is empty.
func (f *RoleStoreUpdateFunc) SetDefaultHook(hook func(context.Context, *types.Role) (*types.Role, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Update method of the parent MockRoleStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *RoleStoreUpdateFunc) PushHook(hook func(context.Context, *types.Role) (*types.Role, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RoleStoreUpdateFunc) SetDefaultReturn(r0 *types.Role, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.Role) (*types.Role, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RoleStoreUpdateFunc) PushReturn(r0 *types.Role, r1 error) {
	f.PushHook(func(context.Context, *types.Role) (*types.Role, error) {
		return r0, r1
	})
}

func (f *RoleStoreUpdateFunc) nextHook() func(context.Context, *types.Role) (*types.Role, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RoleStoreUpdateFunc) appendCall(r0 RoleStoreUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RoleStoreUpdateFuncCall objects describing
// the invocations of this function.
func (f *RoleStoreUpdateFunc) History() []RoleStoreUpdateFuncCall {
	f.mutex.Lock()
	history := make([]RoleStoreUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RoleStoreUpdateFuncCall is an object that describes an invocation of
// method Update on an instance of MockRoleStore.
type RoleStoreUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.Role
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Role
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RoleStoreUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RoleStoreUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockSavedSearchStore is a mock implementation of the SavedSearchStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockSavedSearchStore struct {
	// CountSavedSearchesByOrgOrUserFunc is an instance of a mock function
	// object controlling the behavior of the method
	// CountSavedSearchesByOrgOrUser.
	CountSavedSearchesByOrgOrUserFunc *SavedSearchStoreCountSavedSearchesByOrgOrUserFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *SavedSearchStoreCreateFunc
	// DeleteFunc is an instance of a mock function object controlling the
	// behavior of the method Delete.
	DeleteFunc *SavedSearchStoreDeleteFunc
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *SavedSearchStoreGetByIDFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *SavedSearchStoreHandleFunc
	// IsEmptyFunc is an instance of a mock function object controlling the
	// behavior of the method IsEmpty.
	IsEmptyFunc *SavedSearchStoreIsEmptyFunc
	// ListAllFunc is an instance of a mock function object controlling the
	// behavior of the method ListAll.
	ListAllFunc *SavedSearchStoreListAllFunc
	// ListSavedSearchesByOrgIDFunc is an instance of a mock function object
	// controlling the behavior of the method ListSavedSearchesByOrgID.
	ListSavedSearchesByOrgIDFunc *SavedSearchStoreListSavedSearchesByOrgIDFunc
	// ListSavedSearchesByOrgOrUserFunc is an instance of a mock function
	// object controlling the behavior of the method
	// ListSavedSearchesByOrgOrUser.
	ListSavedSearchesByOrgOrUserFunc *SavedSearchStoreListSavedSearchesByOrgOrUserFunc
	// ListSavedSearchesByUserIDFunc is an instance of a mock function
	// object controlling the behavior of the method
	// ListSavedSearchesByUserID.
	ListSavedSearchesByUserIDFunc *SavedSearchStoreListSavedSearchesByUserIDFunc
	// UpdateFunc is an instance of a mock function object controlling the
	// behavior of the method Update.
	UpdateFunc *SavedSearchStoreUpdateFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *SavedSearchStoreWithFunc
	// WithTransactFunc is an instance of a mock function object controlling
	// the behavior of the method WithTransact.
	WithTransactFunc *SavedSearchStoreWithTransactFunc
}

// NewMockSavedSearchStore creates a new mock of the SavedSearchStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockSavedSearchStore() *MockSavedSearchStore {
	return &MockSavedSearchStore{
		CountSavedSearchesByOrgOrUserFunc: &SavedSearchStoreCountSavedSearchesByOrgOrUserFunc{
			defaultHook: func(context.Context, *int32, *int32) (r0 int, r1 error) {
				return
			},
		},
		CreateFunc: &SavedSearchStoreCreateFunc{
			defaultHook: func(context.Context, *types.SavedSearch) (r0 *types.SavedSearch, r1 error) {
				return
			},
		},
		DeleteFunc: &SavedSearchStoreDeleteFunc{
			defaultHook: func(context.Context, int32) (r0 error) {
				return
			},
		},
		GetByIDFunc: &SavedSearchStoreGetByIDFunc{
			defaultHook: func(context.Context, int32) (r0 *api.SavedQuerySpecAndConfig, r1 error) {
				return
			},
		},
		HandleFunc: &SavedSearchStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		IsEmptyFunc: &SavedSearchStoreIsEmptyFunc{
			defaultHook: func(context.Context) (r0 bool, r1 error) {
				return
			},
		},
		ListAllFunc: &SavedSearchStoreListAllFunc{
			defaultHook: func(context.Context) (r0 []api.SavedQuerySpecAndConfig, r1 error) {
				return
			},
		},
		ListSavedSearchesByOrgIDFunc: &SavedSearchStoreListSavedSearchesByOrgIDFunc{
			defaultHook: func(context.Context, int32) (r0 []*types.SavedSearch, r1 error) {
				return
			},
		},
		ListSavedSearchesByOrgOrUserFunc: &SavedSearchStoreListSavedSearchesByOrgOrUserFunc{
			defaultHook: func(context.Context, *int32, *int32, *PaginationArgs) (r0 []*types.SavedSearch, r1 error) {
				return
			},
		},
		ListSavedSearchesByUserIDFunc: &SavedSearchStoreListSavedSearchesByUserIDFunc{
			defaultHook: func(context.Context, int32) (r0 []*types.SavedSearch, r1 error) {
				return
			},
		},
		UpdateFunc: &SavedSearchStoreUpdateFunc{
			defaultHook: func(context.Context, *types.SavedSearch) (r0 *types.SavedSearch, r1 error) {
				return
			},
		},
		WithFunc: &SavedSearchStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 SavedSearchStore) {
				return
			},
		},
		WithTransactFunc: &SavedSearchStoreWithTransactFunc{
			defaultHook: func(context.Context, func(SavedSearchStore) error) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockSavedSearchStore creates a new mock of the SavedSearchStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockSavedSearchStore() *MockSavedSearchStore {
	return &MockSavedSearchStore{
		CountSavedSearchesByOrgOrUserFunc: &SavedSearchStoreCountSavedSearchesByOrgOrUserFunc{
			defaultHook: func(context.Context, *int32, *int32) (int, error) {
				panic("unexpected invocation of MockSavedSearchStore.CountSavedSearchesByOrgOrUser")
			},
		},
		CreateFunc: &SavedSearchStoreCreateFunc{
			defaultHook: func(context.Context, *types.SavedSearch) (*types.SavedSearch, error) {
				panic("unexpected invocation of MockSavedSearchStore.Create")
			},
		},
		DeleteFunc: &SavedSearchStoreDeleteFunc{
			defaultHook: func(context.Context, int32) error {
				panic("unexpected invocation of MockSavedSearchStore.Delete")
			},
		},
		GetByIDFunc: &SavedSearchStoreGetByIDFunc{
			defaultHook: func(context.Context, int32) (*api.SavedQuerySpecAndConfig, error) {
				panic("unexpected invocation of MockSavedSearchStore.GetByID")
			},
		},
		HandleFunc: &SavedSearchStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockSavedSearchStore.Handle")
			},
		},
		IsEmptyFunc: &SavedSearchStoreIsEmptyFunc{
			defaultHook: func(context.Context) (bool, error) {
				panic("unexpected invocation of MockSavedSearchStore.IsEmpty")
			},
		},
		ListAllFunc: &SavedSearchStoreListAllFunc{
			defaultHook: func(context.Context) ([]api.SavedQuerySpecAndConfig, error) {
				panic("unexpected invocation of MockSavedSearchStore.ListAll")
			},
		},
		ListSavedSearchesByOrgIDFunc: &SavedSearchStoreListSavedSearchesByOrgIDFunc{
			defaultHook: func(context.Context, int32) ([]*types.SavedSearch, error) {
				panic("unexpected invocation of MockSavedSearchStore.ListSavedSearchesByOrgID")
			},
		},
		ListSavedSearchesByOrgOrUserFunc: &SavedSearchStoreListSavedSearchesByOrgOrUserFunc{
			defaultHook: func(context.Context, *int32, *int32, *PaginationArgs) ([]*types.SavedSearch, error) {
				panic("unexpected invocation of MockSavedSearchStore.ListSavedSearchesByOrgOrUser")
			},
		},
		ListSavedSearchesByUserIDFunc: &SavedSearchStoreListSavedSearchesByUserIDFunc{
			defaultHook: func(context.Context, int32) ([]*types.SavedSearch, error) {
				panic("unexpected invocation of MockSavedSearchStore.ListSavedSearchesByUserID")
			},
		},
		UpdateFunc: &SavedSearchStoreUpdateFunc{
			defaultHook: func(context.Context, *types.SavedSearch) (*types.SavedSearch, error) {
				panic("unexpected invocation of MockSavedSearchStore.Update")
			},
		},
		WithFunc: &SavedSearchStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) SavedSearchStore {
				panic("unexpected invocation of MockSavedSearchStore.With")
			},
		},
		WithTransactFunc: &SavedSearchStoreWithTransactFunc{
			defaultHook: func(context.Context, func(SavedSearchStore) error) error {
				panic("unexpected invocation of MockSavedSearchStore.WithTransact")
			},
		},
	}
}

// NewMockSavedSearchStoreFrom creates a new mock of the
// MockSavedSearchStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockSavedSearchStoreFrom(i SavedSearchStore) *MockSavedSearchStore {
	return &MockSavedSearchStore{
		CountSavedSearchesByOrgOrUserFunc: &SavedSearchStoreCountSavedSearchesByOrgOrUserFunc{
			defaultHook: i.CountSavedSearchesByOrgOrUser,
		},
		CreateFunc: &SavedSearchStoreCreateFunc{
			defaultHook: i.Create,
		},
		DeleteFunc: &SavedSearchStoreDeleteFunc{
			defaultHook: i.Delete,
		},
		GetByIDFunc: &SavedSearchStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		HandleFunc: &SavedSearchStoreHandleFunc{
			defaultHook: i.Handle,
		},
		IsEmptyFunc: &SavedSearchStoreIsEmptyFunc{
			defaultHook: i.IsEmpty,
		},
		ListAllFunc: &SavedSearchStoreListAllFunc{
			defaultHook: i.ListAll,
		},
		ListSavedSearchesByOrgIDFunc: &SavedSearchStoreListSavedSearchesByOrgIDFunc{
			defaultHook: i.ListSavedSearchesByOrgID,
		},
		ListSavedSearchesByOrgOrUserFunc: &SavedSearchStoreListSavedSearchesByOrgOrUserFunc{
			defaultHook: i.ListSavedSearchesByOrgOrUser,
		},
		ListSavedSearchesByUserIDFunc: &SavedSearchStoreListSavedSearchesByUserIDFunc{
			defaultHook: i.ListSavedSearchesByUserID,
		},
		UpdateFunc: &SavedSearchStoreUpdateFunc{
			defaultHook: i.Update,
		},
		WithFunc: &SavedSearchStoreWithFunc{
			defaultHook: i.With,
		},
		WithTransactFunc: &SavedSearchStoreWithTransactFunc{
			defaultHook: i.WithTransact,
		},
	}
}

// SavedSearchStoreCountSavedSearchesByOrgOrUserFunc describes the behavior
// when the CountSavedSearchesByOrgOrUser method of the parent
// MockSavedSearchStore instance is invoked.
type SavedSearchStoreCountSavedSearchesByOrgOrUserFunc struct {
	defaultHook func(context.Context, *int32, *int32) (int, error)
	hooks       []func(context.Context, *int32, *int32) (int, error)
	history     []SavedSearchStoreCountSavedSearchesByOrgOrUserFuncCall
	mutex       sync.Mutex
}

// CountSavedSearchesByOrgOrUser delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockSavedSearchStore) CountSavedSearchesByOrgOrUser(v0 context.Context, v1 *int32, v2 *int32) (int, error) {
	r0, r1 := m.CountSavedSearchesByOrgOrUserFunc.nextHook()(v0, v1, v2)
	m.CountSavedSearchesByOrgOrUserFunc.appendCall(SavedSearchStoreCountSavedSearchesByOrgOrUserFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CountSavedSearchesByOrgOrUser method of the parent MockSavedSearchStore
// instance is invoked and the hook queue is empty.
func (f *SavedSearchStoreCountSavedSearchesByOrgOrUserFunc) SetDefaultHook(hook func(context.Context, *int32, *int32) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountSavedSearchesByOrgOrUser method of the parent MockSavedSearchStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *SavedSearchStoreCountSavedSearchesByOrgOrUserFunc) PushHook(hook func(context.Context, *int32, *int32) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SavedSearchStoreCountSavedSearchesByOrgOrUserFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, *int32, *int32) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SavedSearchStoreCountSavedSearchesByOrgOrUserFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, *int32, *int32) (int, error) {
		return r0, r1
	})
}

func (f *SavedSearchStoreCountSavedSearchesByOrgOrUserFunc) nextHook() func(context.Context, *int32, *int32) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SavedSearchStoreCountSavedSearchesByOrgOrUserFunc) appendCall(r0 SavedSearchStoreCountSavedSearchesByOrgOrUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SavedSearchStoreCountSavedSearchesByOrgOrUserFuncCall objects describing
// the invocations of this function.
func (f *SavedSearchStoreCountSavedSearchesByOrgOrUserFunc) History() []SavedSearchStoreCountSavedSearchesByOrgOrUserFuncCall {
	f.mutex.Lock()
	history := make([]SavedSearchStoreCountSavedSearchesByOrgOrUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SavedSearchStoreCountSavedSearchesByOrgOrUserFuncCall is an object that
// describes an invocation of method CountSavedSearchesByOrgOrUser on an
// instance of MockSavedSearchStore.
type SavedSearchStoreCountSavedSearchesByOrgOrUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SavedSearchStoreCountSavedSearchesByOrgOrUserFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SavedSearchStoreCountSavedSearchesByOrgOrUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SavedSearchStoreCreateFunc describes the behavior when the Create method
// of the parent MockSavedSearchStore instance is invoked.
type SavedSearchStoreCreateFunc struct {
	defaultHook func(context.Context, *types.SavedSearch) (*types.SavedSearch, error)
	hooks       []func(context.Context, *types.SavedSearch) (*types.SavedSearch, error)
	history     []SavedSearchStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSavedSearchStore) Create(v0 context.Context, v1 *types.SavedSearch) (*types.SavedSearch, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1)
	m.CreateFunc.appendCall(SavedSearchStoreCreateFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockSavedSearchStore instance is invoked and the hook queue is
// empty.
func (f *SavedSearchStoreCreateFunc) SetDefaultHook(hook func(context.Context, *types.SavedSearch) (*types.SavedSearch, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockSavedSearchStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SavedSearchStoreCreateFunc) PushHook(hook func(context.Context, *types.SavedSearch) (*types.SavedSearch, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SavedSearchStoreCreateFunc) SetDefaultReturn(r0 *types.SavedSearch, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.SavedSearch) (*types.SavedSearch, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SavedSearchStoreCreateFunc) PushReturn(r0 *types.SavedSearch, r1 error) {
	f.PushHook(func(context.Context, *types.SavedSearch) (*types.SavedSearch, error) {
		return r0, r1
	})
}

func (f *SavedSearchStoreCreateFunc) nextHook() func(context.Context, *types.SavedSearch) (*types.SavedSearch, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SavedSearchStoreCreateFunc) appendCall(r0 SavedSearchStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SavedSearchStoreCreateFuncCall objects
// describing the invocations of this function.
func (f *SavedSearchStoreCreateFunc) History() []SavedSearchStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]SavedSearchStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SavedSearchStoreCreateFuncCall is an object that describes an invocation
// of method Create on an instance of MockSavedSearchStore.
type SavedSearchStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.SavedSearch
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.SavedSearch
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SavedSearchStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SavedSearchStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SavedSearchStoreDeleteFunc describes the behavior when the Delete method
// of the parent MockSavedSearchStore instance is invoked.
type SavedSearchStoreDeleteFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []SavedSearchStoreDeleteFuncCall
	mutex       sync.Mutex
}

// Delete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSavedSearchStore) Delete(v0 context.Context, v1 int32) error {
	r0 := m.DeleteFunc.nextHook()(v0, v1)
	m.DeleteFunc.appendCall(SavedSearchStoreDeleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Delete method of the
// parent MockSavedSearchStore instance is invoked and the hook queue is
// empty.
func (f *SavedSearchStoreDeleteFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Delete method of the parent MockSavedSearchStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SavedSearchStoreDeleteFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SavedSearchStoreDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SavedSearchStoreDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *SavedSearchStoreDeleteFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SavedSearchStoreDeleteFunc) appendCall(r0 SavedSearchStoreDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SavedSearchStoreDeleteFuncCall objects
// describing the invocations of this function.
func (f *SavedSearchStoreDeleteFunc) History() []SavedSearchStoreDeleteFuncCall {
	f.mutex.Lock()
	history := make([]SavedSearchStoreDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SavedSearchStoreDeleteFuncCall is an object that describes an invocation
// of method Delete on an instance of MockSavedSearchStore.
type SavedSearchStoreDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SavedSearchStoreDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SavedSearchStoreDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SavedSearchStoreGetByIDFunc describes the behavior when the GetByID
// method of the parent MockSavedSearchStore instance is invoked.
type SavedSearchStoreGetByIDFunc struct {
	defaultHook func(context.Context, int32) (*api.SavedQuerySpecAndConfig, error)
	hooks       []func(context.Context, int32) (*api.SavedQuerySpecAndConfig, error)
	history     []SavedSearchStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSavedSearchStore) GetByID(v0 context.Context, v1 int32) (*api.SavedQuerySpecAndConfig, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(SavedSearchStoreGetByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockSavedSearchStore instance is invoked and the hook queue is
// empty.
func (f *SavedSearchStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int32) (*api.SavedQuerySpecAndConfig, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockSavedSearchStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SavedSearchStoreGetByIDFunc) PushHook(hook func(context.Context, int32) (*api.SavedQuerySpecAndConfig, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SavedSearchStoreGetByIDFunc) SetDefaultReturn(r0 *api.SavedQuerySpecAndConfig, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (*api.SavedQuerySpecAndConfig, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SavedSearchStoreGetByIDFunc) PushReturn(r0 *api.SavedQuerySpecAndConfig, r1 error) {
	f.PushHook(func(context.Context, int32) (*api.SavedQuerySpecAndConfig, error) {
		return r0, r1
	})
}

func (f *SavedSearchStoreGetByIDFunc) nextHook() func(context.Context, int32) (*api.SavedQuerySpecAndConfig, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SavedSearchStoreGetByIDFunc) appendCall(r0 SavedSearchStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SavedSearchStoreGetByIDFuncCall objects
// describing the invocations of this function.
func (f *SavedSearchStoreGetByIDFunc) History() []SavedSearchStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]SavedSearchStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SavedSearchStoreGetByIDFuncCall is an object that describes an invocation
// of method GetByID on an instance of MockSavedSearchStore.
type SavedSearchStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *api.SavedQuerySpecAndConfig
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SavedSearchStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SavedSearchStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SavedSearchStoreHandleFunc describes the behavior when the Handle method
// of the parent MockSavedSearchStore instance is invoked.
type SavedSearchStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []SavedSearchStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSavedSearchStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(SavedSearchStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockSavedSearchStore instance is invoked and the hook queue is
// empty.
func (f *SavedSearchStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockSavedSearchStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SavedSearchStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SavedSearchStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SavedSearchStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *SavedSearchStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SavedSearchStoreHandleFunc) appendCall(r0 SavedSearchStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SavedSearchStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *SavedSearchStoreHandleFunc) History() []SavedSearchStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]SavedSearchStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SavedSearchStoreHandleFuncCall is an object that describes an invocation
// of method Handle on an instance of MockSavedSearchStore.
type SavedSearchStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SavedSearchStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SavedSearchStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SavedSearchStoreIsEmptyFunc describes the behavior when the IsEmpty
// method of the parent MockSavedSearchStore instance is invoked.
type SavedSearchStoreIsEmptyFunc struct {
	defaultHook func(context.Context) (bool, error)
	hooks       []func(context.Context) (bool, error)
	history     []SavedSearchStoreIsEmptyFuncCall
	mutex       sync.Mutex
}

// IsEmpty delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSavedSearchStore) IsEmpty(v0 context.Context) (bool, error) {
	r0, r1 := m.IsEmptyFunc.nextHook()(v0)
	m.IsEmptyFunc.appendCall(SavedSearchStoreIsEmptyFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IsEmpty method of
// the parent MockSavedSearchStore instance is invoked and the hook queue is
// empty.
func (f *SavedSearchStoreIsEmptyFunc) SetDefaultHook(hook func(context.Context) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsEmpty method of the parent MockSavedSearchStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SavedSearchStoreIsEmptyFunc) PushHook(hook func(context.Context) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SavedSearchStoreIsEmptyFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SavedSearchStoreIsEmptyFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context) (bool, error) {
		return r0, r1
	})
}

func (f *SavedSearchStoreIsEmptyFunc) nextHook() func(context.Context) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SavedSearchStoreIsEmptyFunc) appendCall(r0 SavedSearchStoreIsEmptyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SavedSearchStoreIsEmptyFuncCall objects
// describing the invocations of this function.
func (f *SavedSearchStoreIsEmptyFunc) History() []SavedSearchStoreIsEmptyFuncCall {
	f.mutex.Lock()
	history := make([]SavedSearchStoreIsEmptyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SavedSearchStoreIsEmptyFuncCall is an object that describes an invocation
// of method IsEmpty on an instance of MockSavedSearchStore.
type SavedSearchStoreIsEmptyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SavedSearchStoreIsEmptyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SavedSearchStoreIsEmptyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SavedSearchStoreListAllFunc describes the behavior when the ListAll
// method of the parent MockSavedSearchStore instance is invoked.
type SavedSearchStoreListAllFunc struct {
	defaultHook func(context.Context) ([]api.SavedQuerySpecAndConfig, error)
	hooks       []func(context.Context) ([]api.SavedQuerySpecAndConfig, error)
	history     []SavedSearchStoreListAllFuncCall
	mutex       sync.Mutex
}

// ListAll delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSavedSearchStore) ListAll(v0 context.Context) ([]api.SavedQuerySpecAndConfig, error) {
	r0, r1 := m.ListAllFunc.nextHook()(v0)
	m.ListAllFunc.appendCall(SavedSearchStoreListAllFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListAll method of
// the parent MockSavedSearchStore instance is invoked and the hook queue is
// empty.
func (f *SavedSearchStoreListAllFunc) SetDefaultHook(hook func(context.Context) ([]api.SavedQuerySpecAndConfig, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListAll method of the parent MockSavedSearchStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SavedSearchStoreListAllFunc) PushHook(hook func(context.Context) ([]api.SavedQuerySpecAndConfig, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SavedSearchStoreListAllFunc) SetDefaultReturn(r0 []api.SavedQuerySpecAndConfig, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]api.SavedQuerySpecAndConfig, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SavedSearchStoreListAllFunc) PushReturn(r0 []api.SavedQuerySpecAndConfig, r1 error) {
	f.PushHook(func(context.Context) ([]api.SavedQuerySpecAndConfig, error) {
		return r0, r1
	})
}

func (f *SavedSearchStoreListAllFunc) nextHook() func(context.Context) ([]api.SavedQuerySpecAndConfig, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SavedSearchStoreListAllFunc) appendCall(r0 SavedSearchStoreListAllFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SavedSearchStoreListAllFuncCall objects
// describing the invocations of this function.
func (f *SavedSearchStoreListAllFunc) History() []SavedSearchStoreListAllFuncCall {
	f.mutex.Lock()
	history := make([]SavedSearchStoreListAllFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SavedSearchStoreListAllFuncCall is an object that describes an invocation
// of method ListAll on an instance of MockSavedSearchStore.
type SavedSearchStoreListAllFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []api.SavedQuerySpecAndConfig
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SavedSearchStoreListAllFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SavedSearchStoreListAllFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SavedSearchStoreListSavedSearchesByOrgIDFunc describes the behavior when
// the ListSavedSearchesByOrgID method of the parent MockSavedSearchStore
// instance is invoked.
type SavedSearchStoreListSavedSearchesByOrgIDFunc struct {
	defaultHook func(context.Context, int32) ([]*types.SavedSearch, error)
	hooks       []func(context.Context, int32) ([]*types.SavedSearch, error)
	history     []SavedSearchStoreListSavedSearchesByOrgIDFuncCall
	mutex       sync.Mutex
}

// ListSavedSearchesByOrgID delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockSavedSearchStore) ListSavedSearchesByOrgID(v0 context.Context, v1 int32) ([]*types.SavedSearch, error) {
	r0, r1 := m.ListSavedSearchesByOrgIDFunc.nextHook()(v0, v1)
	m.ListSavedSearchesByOrgIDFunc.appendCall(SavedSearchStoreListSavedSearchesByOrgIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ListSavedSearchesByOrgID method of the parent MockSavedSearchStore
// instance is invoked and the hook queue is empty.
func (f *SavedSearchStoreListSavedSearchesByOrgIDFunc) SetDefaultHook(hook func(context.Context, int32) ([]*types.SavedSearch, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListSavedSearchesByOrgID method of the parent MockSavedSearchStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *SavedSearchStoreListSavedSearchesByOrgIDFunc) PushHook(hook func(context.Context, int32) ([]*types.SavedSearch, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SavedSearchStoreListSavedSearchesByOrgIDFunc) SetDefaultReturn(r0 []*types.SavedSearch, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) ([]*types.SavedSearch, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SavedSearchStoreListSavedSearchesByOrgIDFunc) PushReturn(r0 []*types.SavedSearch, r1 error) {
	f.PushHook(func(context.Context, int32) ([]*types.SavedSearch, error) {
		return r0, r1
	})
}

func (f *SavedSearchStoreListSavedSearchesByOrgIDFunc) nextHook() func(context.Context, int32) ([]*types.SavedSearch, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SavedSearchStoreListSavedSearchesByOrgIDFunc) appendCall(r0 SavedSearchStoreListSavedSearchesByOrgIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SavedSearchStoreListSavedSearchesByOrgIDFuncCall objects describing the
// invocations of this function.
func (f *SavedSearchStoreListSavedSearchesByOrgIDFunc) History() []SavedSearchStoreListSavedSearchesByOrgIDFuncCall {
	f.mutex.Lock()
	history := make([]SavedSearchStoreListSavedSearchesByOrgIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SavedSearchStoreListSavedSearchesByOrgIDFuncCall is an object that
// describes an invocation of method ListSavedSearchesByOrgID on an instance
// of MockSavedSearchStore.
type SavedSearchStoreListSavedSearchesByOrgIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.SavedSearch
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SavedSearchStoreListSavedSearchesByOrgIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SavedSearchStoreListSavedSearchesByOrgIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SavedSearchStoreListSavedSearchesByOrgOrUserFunc describes the behavior
// when the ListSavedSearchesByOrgOrUser method of the parent
// MockSavedSearchStore instance is invoked.
type SavedSearchStoreListSavedSearchesByOrgOrUserFunc struct {
	defaultHook func(context.Context, *int32, *int32, *PaginationArgs) ([]*types.SavedSearch, error)
	hooks       []func(context.Context, *int32, *int32, *PaginationArgs) ([]*types.SavedSearch, error)
	history     []SavedSearchStoreListSavedSearchesByOrgOrUserFuncCall
	mutex       sync.Mutex
}

// ListSavedSearchesByOrgOrUser delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockSavedSearchStore) ListSavedSearchesByOrgOrUser(v0 context.Context, v1 *int32, v2 *int32, v3 *PaginationArgs) ([]*types.SavedSearch, error) {
	r0, r1 := m.ListSavedSearchesByOrgOrUserFunc.nextHook()(v0, v1, v2, v3)
	m.ListSavedSearchesByOrgOrUserFunc.appendCall(SavedSearchStoreListSavedSearchesByOrgOrUserFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ListSavedSearchesByOrgOrUser method of the parent MockSavedSearchStore
// instance is invoked and the hook queue is empty.
func (f *SavedSearchStoreListSavedSearchesByOrgOrUserFunc) SetDefaultHook(hook func(context.Context, *int32, *int32, *PaginationArgs) ([]*types.SavedSearch, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListSavedSearchesByOrgOrUser method of the parent MockSavedSearchStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *SavedSearchStoreListSavedSearchesByOrgOrUserFunc) PushHook(hook func(context.Context, *int32, *int32, *PaginationArgs) ([]*types.SavedSearch, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SavedSearchStoreListSavedSearchesByOrgOrUserFunc) SetDefaultReturn(r0 []*types.SavedSearch, r1 error) {
	f.SetDefaultHook(func(context.Context, *int32, *int32, *PaginationArgs) ([]*types.SavedSearch, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SavedSearchStoreListSavedSearchesByOrgOrUserFunc) PushReturn(r0 []*types.SavedSearch, r1 error) {
	f.PushHook(func(context.Context, *int32, *int32, *PaginationArgs) ([]*types.SavedSearch, error) {
		return r0, r1
	})
}

func (f *SavedSearchStoreListSavedSearchesByOrgOrUserFunc) nextHook() func(context.Context, *int32, *int32, *PaginationArgs) ([]*types.SavedSearch, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SavedSearchStoreListSavedSearchesByOrgOrUserFunc) appendCall(r0 SavedSearchStoreListSavedSearchesByOrgOrUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SavedSearchStoreListSavedSearchesByOrgOrUserFuncCall objects describing
// the invocations of this function.
func (f *SavedSearchStoreListSavedSearchesByOrgOrUserFunc) History() []SavedSearchStoreListSavedSearchesByOrgOrUserFuncCall {
	f.mutex.Lock()
	history := make([]SavedSearchStoreListSavedSearchesByOrgOrUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SavedSearchStoreListSavedSearchesByOrgOrUserFuncCall is an object that
// describes an invocation of method ListSavedSearchesByOrgOrUser on an
// instance of MockSavedSearchStore.
type SavedSearchStoreListSavedSearchesByOrgOrUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *int32
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *PaginationArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.SavedSearch
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SavedSearchStoreListSavedSearchesByOrgOrUserFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SavedSearchStoreListSavedSearchesByOrgOrUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SavedSearchStoreListSavedSearchesByUserIDFunc describes the behavior when
// the ListSavedSearchesByUserID method of the parent MockSavedSearchStore
// instance is invoked.
type SavedSearchStoreListSavedSearchesByUserIDFunc struct {
	defaultHook func(context.Context, int32) ([]*types.SavedSearch, error)
	hooks       []func(context.Context, int32) ([]*types.SavedSearch, error)
	history     []SavedSearchStoreListSavedSearchesByUserIDFuncCall
	mutex       sync.Mutex
}

// ListSavedSearchesByUserID delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockSavedSearchStore) ListSavedSearchesByUserID(v0 context.Context, v1 int32) ([]*types.SavedSearch, error) {
	r0, r1 := m.ListSavedSearchesByUserIDFunc.nextHook()(v0, v1)
	m.ListSavedSearchesByUserIDFunc.appendCall(SavedSearchStoreListSavedSearchesByUserIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ListSavedSearchesByUserID method of the parent MockSavedSearchStore
// instance is invoked and the hook queue is empty.
func (f *SavedSearchStoreListSavedSearchesByUserIDFunc) SetDefaultHook(hook func(context.Context, int32) ([]*types.SavedSearch, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListSavedSearchesByUserID method of the parent MockSavedSearchStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *SavedSearchStoreListSavedSearchesByUserIDFunc) PushHook(hook func(context.Context, int32) ([]*types.SavedSearch, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SavedSearchStoreListSavedSearchesByUserIDFunc) SetDefaultReturn(r0 []*types.SavedSearch, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) ([]*types.SavedSearch, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SavedSearchStoreListSavedSearchesByUserIDFunc) PushReturn(r0 []*types.SavedSearch, r1 error) {
	f.PushHook(func(context.Context, int32) ([]*types.SavedSearch, error) {
		return r0, r1
	})
}

func (f *SavedSearchStoreListSavedSearchesByUserIDFunc) nextHook() func(context.Context, int32) ([]*types.SavedSearch, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SavedSearchStoreListSavedSearchesByUserIDFunc) appendCall(r0 SavedSearchStoreListSavedSearchesByUserIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SavedSearchStoreListSavedSearchesByUserIDFuncCall objects describing the
// invocations of this function.
func (f *SavedSearchStoreListSavedSearchesByUserIDFunc) History() []SavedSearchStoreListSavedSearchesByUserIDFuncCall {
	f.mutex.Lock()
	history := make([]SavedSearchStoreListSavedSearchesByUserIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SavedSearchStoreListSavedSearchesByUserIDFuncCall is an object that
// describes an invocation of method ListSavedSearchesByUserID on an
// instance of MockSavedSearchStore.
type SavedSearchStoreListSavedSearchesByUserIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.SavedSearch
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SavedSearchStoreListSavedSearchesByUserIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SavedSearchStoreListSavedSearchesByUserIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SavedSearchStoreUpdateFunc describes the behavior when the Update method
// of the parent MockSavedSearchStore instance is invoked.
type SavedSearchStoreUpdateFunc struct {
	defaultHook func(context.Context, *types.SavedSearch) (*types.SavedSearch, error)
	hooks       []func(context.Context, *types.SavedSearch) (*types.SavedSearch, error)
	history     []SavedSearchStoreUpdateFuncCall
	mutex       sync.Mutex
}

// Update delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSavedSearchStore) Update(v0 context.Context, v1 *types.SavedSearch) (*types.SavedSearch, error) {
	r0, r1 := m.UpdateFunc.nextHook()(v0, v1)
	m.UpdateFunc.appendCall(SavedSearchStoreUpdateFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Update method of the
// parent MockSavedSearchStore instance is invoked and the hook queue is
// empty.
func (f *SavedSearchStoreUpdateFunc) SetDefaultHook(hook func(context.Context, *types.SavedSearch) (*types.SavedSearch, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Update method of the parent MockSavedSearchStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SavedSearchStoreUpdateFunc) PushHook(hook func(context.Context, *types.SavedSearch) (*types.SavedSearch, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SavedSearchStoreUpdateFunc) SetDefaultReturn(r0 *types.SavedSearch, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.SavedSearch) (*types.SavedSearch, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SavedSearchStoreUpdateFunc) PushReturn(r0 *types.SavedSearch, r1 error) {
	f.PushHook(func(context.Context, *types.SavedSearch) (*types.SavedSearch, error) {
		return r0, r1
	})
}

func (f *SavedSearchStoreUpdateFunc) nextHook() func(context.Context, *types.SavedSearch) (*types.SavedSearch, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SavedSearchStoreUpdateFunc) appendCall(r0 SavedSearchStoreUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SavedSearchStoreUpdateFuncCall objects
// describing the invocations of this function.
func (f *SavedSearchStoreUpdateFunc) History() []SavedSearchStoreUpdateFuncCall {
	f.mutex.Lock()
	history := make([]SavedSearchStoreUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SavedSearchStoreUpdateFuncCall is an object that describes an invocation
// of method Update on an instance of MockSavedSearchStore.
type SavedSearchStoreUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.SavedSearch
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.SavedSearch
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SavedSearchStoreUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SavedSearchStoreUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SavedSearchStoreWithFunc describes the behavior when the With method of
// the parent MockSavedSearchStore instance is invoked.
type SavedSearchStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) SavedSearchStore
	hooks       []func(basestore.ShareableStore) SavedSearchStore
	history     []SavedSearchStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSavedSearchStore) With(v0 basestore.ShareableStore) SavedSearchStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(SavedSearchStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockSavedSearchStore instance is invoked and the hook queue is
// empty.
func (f *SavedSearchStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) SavedSearchStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockSavedSearchStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SavedSearchStoreWithFunc) PushHook(hook func(basestore.ShareableStore) SavedSearchStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SavedSearchStoreWithFunc) SetDefaultReturn(r0 SavedSearchStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) SavedSearchStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SavedSearchStoreWithFunc) PushReturn(r0 SavedSearchStore) {
	f.PushHook(func(basestore.ShareableStore) SavedSearchStore {
		return r0
	})
}

func (f *SavedSearchStoreWithFunc) nextHook() func(basestore.ShareableStore) SavedSearchStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SavedSearchStoreWithFunc) appendCall(r0 SavedSearchStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SavedSearchStoreWithFuncCall objects
// describing the invocations of this function.
func (f *SavedSearchStoreWithFunc) History() []SavedSearchStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]SavedSearchStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SavedSearchStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockSavedSearchStore.
type SavedSearchStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 SavedSearchStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SavedSearchStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SavedSearchStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SavedSearchStoreWithTransactFunc describes the behavior when the
// WithTransact method of the parent MockSavedSearchStore instance is
// invoked.
type SavedSearchStoreWithTransactFunc struct {
	defaultHook func(context.Context, func(SavedSearchStore) error) error
	hooks       []func(context.Context, func(SavedSearchStore) error) error
	history     []SavedSearchStoreWithTransactFuncCall
	mutex       sync.Mutex
}

// WithTransact delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockSavedSearchStore) WithTransact(v0 context.Context, v1 func(SavedSearchStore) error) error {
	r0 := m.WithTransactFunc.nextHook()(v0, v1)
	m.WithTransactFunc.appendCall(SavedSearchStoreWithTransactFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithTransact method
// of the parent MockSavedSearchStore instance is invoked and the hook queue
// is empty.
func (f *SavedSearchStoreWithTransactFunc) SetDefaultHook(hook func(context.Context, func(SavedSearchStore) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithTransact method of the parent MockSavedSearchStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *SavedSearchStoreWithTransactFunc) PushHook(hook func(context.Context, func(SavedSearchStore) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SavedSearchStoreWithTransactFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, func(SavedSearchStore) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SavedSearchStoreWithTransactFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, func(SavedSearchStore) error) error {
		return r0
	})
}

func (f *SavedSearchStoreWithTransactFunc) nextHook() func(context.Context, func(SavedSearchStore) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SavedSearchStoreWithTransactFunc) appendCall(r0 SavedSearchStoreWithTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SavedSearchStoreWithTransactFuncCall
// objects describing the invocations of this function.
func (f *SavedSearchStoreWithTransactFunc) History() []SavedSearchStoreWithTransactFuncCall {
	f.mutex.Lock()
	history := make([]SavedSearchStoreWithTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SavedSearchStoreWithTransactFuncCall is an object that describes an
// invocation of method WithTransact on an instance of MockSavedSearchStore.
type SavedSearchStoreWithTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 func(SavedSearchStore) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SavedSearchStoreWithTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SavedSearchStoreWithTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockSearchContextsStore is a mock implementation of the
// SearchContextsStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockSearchContextsStore struct {
	// CountSearchContextsFunc is an instance of a mock function object
	// controlling the behavior of the method CountSearchContexts.
	CountSearchContextsFunc *SearchContextsStoreCountSearchContextsFunc
	// CreateSearchContextStarForUserFunc is an instance of a mock function
	// object controlling the behavior of the method
	// CreateSearchContextStarForUser.
	CreateSearchContextStarForUserFunc *SearchContextsStoreCreateSearchContextStarForUserFunc
	// CreateSearchContextWithRepositoryRevisionsFunc is an instance of a
	// mock function object controlling the behavior of the method
	// CreateSearchContextWithRepositoryRevisions.
	CreateSearchContextWithRepositoryRevisionsFunc *SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc
	// DeleteSearchContextFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteSearchContext.
	DeleteSearchContextFunc *SearchContextsStoreDeleteSearchContextFunc
	// DeleteSearchContextStarForUserFunc is an instance of a mock function
	// object controlling the behavior of the method
	// DeleteSearchContextStarForUser.
	DeleteSearchContextStarForUserFunc *SearchContextsStoreDeleteSearchContextStarForUserFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *SearchContextsStoreDoneFunc
	// ExecFunc is an instance of a mock function object controlling the
	// behavior of the method Exec.
	ExecFunc *SearchContextsStoreExecFunc
	// GetAllQueriesFunc is an instance of a mock function object
	// controlling the behavior of the method GetAllQueries.
	GetAllQueriesFunc *SearchContextsStoreGetAllQueriesFunc
	// GetAllRevisionsForReposFunc is an instance of a mock function object
	// controlling the behavior of the method GetAllRevisionsForRepos.
	GetAllRevisionsForReposFunc *SearchContextsStoreGetAllRevisionsForReposFunc
	// GetDefaultSearchContextForCurrentUserFunc is an instance of a mock
	// function object controlling the behavior of the method
	// GetDefaultSearchContextForCurrentUser.
	GetDefaultSearchContextForCurrentUserFunc *SearchContextsStoreGetDefaultSearchContextForCurrentUserFunc
	// GetSearchContextFunc is an instance of a mock function object
	// controlling the behavior of the method GetSearchContext.
	GetSearchContextFunc *SearchContextsStoreGetSearchContextFunc
	// GetSearchContextRepositoryRevisionsFunc is an instance of a mock
	// function object controlling the behavior of the method
	// GetSearchContextRepositoryRevisions.
	GetSearchContextRepositoryRevisionsFunc *SearchContextsStoreGetSearchContextRepositoryRevisionsFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *SearchContextsStoreHandleFunc
	// ListSearchContextsFunc is an instance of a mock function object
	// controlling the behavior of the method ListSearchContexts.
	ListSearchContextsFunc *SearchContextsStoreListSearchContextsFunc
	// SetSearchContextRepositoryRevisionsFunc is an instance of a mock
	// function object controlling the behavior of the method
	// SetSearchContextRepositoryRevisions.
	SetSearchContextRepositoryRevisionsFunc *SearchContextsStoreSetSearchContextRepositoryRevisionsFunc
	// SetUserDefaultSearchContextIDFunc is an instance of a mock function
	// object controlling the behavior of the method
	// SetUserDefaultSearchContextID.
	SetUserDefaultSearchContextIDFunc *SearchContextsStoreSetUserDefaultSearchContextIDFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *SearchContextsStoreTransactFunc
	// UpdateSearchContextWithRepositoryRevisionsFunc is an instance of a
	// mock function object controlling the behavior of the method
	// UpdateSearchContextWithRepositoryRevisions.
	UpdateSearchContextWithRepositoryRevisionsFunc *SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc
}

// NewMockSearchContextsStore creates a new mock of the SearchContextsStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockSearchContextsStore() *MockSearchContextsStore {
	return &MockSearchContextsStore{
		CountSearchContextsFunc: &SearchContextsStoreCountSearchContextsFunc{
			defaultHook: func(context.Context, ListSearchContextsOptions) (r0 int32, r1 error) {
				return
			},
		},
		CreateSearchContextStarForUserFunc: &SearchContextsStoreCreateSearchContextStarForUserFunc{
			defaultHook: func(context.Context, int32, int64) (r0 error) {
				return
			},
		},
		CreateSearchContextWithRepositoryRevisionsFunc: &SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc{
			defaultHook: func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (r0 *types.SearchContext, r1 error) {
				return
			},
		},
		DeleteSearchContextFunc: &SearchContextsStoreDeleteSearchContextFunc{
			defaultHook: func(context.Context, int64) (r0 error) {
				return
			},
		},
		DeleteSearchContextStarForUserFunc: &SearchContextsStoreDeleteSearchContextStarForUserFunc{
			defaultHook: func(context.Context, int32, int64) (r0 error) {
				return
			},
		},
		DoneFunc: &SearchContextsStoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		ExecFunc: &SearchContextsStoreExecFunc{
			defaultHook: func(context.Context, *sqlf.Query) (r0 error) {
				return
			},
		},
		GetAllQueriesFunc: &SearchContextsStoreGetAllQueriesFunc{
			defaultHook: func(context.Context) (r0 []string, r1 error) {
				return
			},
		},
		GetAllRevisionsForReposFunc: &SearchContextsStoreGetAllRevisionsForReposFunc{
			defaultHook: func(context.Context, []api.RepoID) (r0 map[api.RepoID][]string, r1 error) {
				return
			},
		},
		GetDefaultSearchContextForCurrentUserFunc: &SearchContextsStoreGetDefaultSearchContextForCurrentUserFunc{
			defaultHook: func(context.Context) (r0 *types.SearchContext, r1 error) {
				return
			},
		},
		GetSearchContextFunc: &SearchContextsStoreGetSearchContextFunc{
			defaultHook: func(context.Context, GetSearchContextOptions) (r0 *types.SearchContext, r1 error) {
				return
			},
		},
		GetSearchContextRepositoryRevisionsFunc: &SearchContextsStoreGetSearchContextRepositoryRevisionsFunc{
			defaultHook: func(context.Context, int64) (r0 []*types.SearchContextRepositoryRevisions, r1 error) {
				return
			},
		},
		HandleFunc: &SearchContextsStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		ListSearchContextsFunc: &SearchContextsStoreListSearchContextsFunc{
			defaultHook: func(context.Context, ListSearchContextsPageOptions, ListSearchContextsOptions) (r0 []*types.SearchContext, r1 error) {
				return
			},
		},
		SetSearchContextRepositoryRevisionsFunc: &SearchContextsStoreSetSearchContextRepositoryRevisionsFunc{
			defaultHook: func(context.Context, int64, []*types.SearchContextRepositoryRevisions) (r0 error) {
				return
			},
		},
		SetUserDefaultSearchContextIDFunc: &SearchContextsStoreSetUserDefaultSearchContextIDFunc{
			defaultHook: func(context.Context, int32, int64) (r0 error) {
				return
			},
		},
		TransactFunc: &SearchContextsStoreTransactFunc{
			defaultHook: func(context.Context) (r0 SearchContextsStore, r1 error) {
				return
			},
		},
		UpdateSearchContextWithRepositoryRevisionsFunc: &SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc{
			defaultHook: func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (r0 *types.SearchContext, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockSearchContextsStore creates a new mock of the
// SearchContextsStore interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockSearchContextsStore() *MockSearchContextsStore {
	return &MockSearchContextsStore{
		CountSearchContextsFunc: &SearchContextsStoreCountSearchContextsFunc{
			defaultHook: func(context.Context, ListSearchContextsOptions) (int32, error) {
				panic("unexpected invocation of MockSearchContextsStore.CountSearchContexts")
			},
		},
		CreateSearchContextStarForUserFunc: &SearchContextsStoreCreateSearchContextStarForUserFunc{
			defaultHook: func(context.Context, int32, int64) error {
				panic("unexpected invocation of MockSearchContextsStore.CreateSearchContextStarForUser")
			},
		},
		CreateSearchContextWithRepositoryRevisionsFunc: &SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc{
			defaultHook: func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error) {
				panic("unexpected invocation of MockSearchContextsStore.CreateSearchContextWithRepositoryRevisions")
			},
		},
		DeleteSearchContextFunc: &SearchContextsStoreDeleteSearchContextFunc{
			defaultHook: func(context.Context, int64) error {
				panic("unexpected invocation of MockSearchContextsStore.DeleteSearchContext")
			},
		},
		DeleteSearchContextStarForUserFunc: &SearchContextsStoreDeleteSearchContextStarForUserFunc{
			defaultHook: func(context.Context, int32, int64) error {
				panic("unexpected invocation of MockSearchContextsStore.DeleteSearchContextStarForUser")
			},
		},
		DoneFunc: &SearchContextsStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockSearchContextsStore.Done")
			},
		},
		ExecFunc: &SearchContextsStoreExecFunc{
			defaultHook: func(context.Context, *sqlf.Query) error {
				panic("unexpected invocation of MockSearchContextsStore.Exec")
			},
		},
		GetAllQueriesFunc: &SearchContextsStoreGetAllQueriesFunc{
			defaultHook: func(context.Context) ([]string, error) {
				panic("unexpected invocation of MockSearchContextsStore.GetAllQueries")
			},
		},
		GetAllRevisionsForReposFunc: &SearchContextsStoreGetAllRevisionsForReposFunc{
			defaultHook: func(context.Context, []api.RepoID) (map[api.RepoID][]string, error) {
				panic("unexpected invocation of MockSearchContextsStore.GetAllRevisionsForRepos")
			},
		},
		GetDefaultSearchContextForCurrentUserFunc: &SearchContextsStoreGetDefaultSearchContextForCurrentUserFunc{
			defaultHook: func(context.Context) (*types.SearchContext, error) {
				panic("unexpected invocation of MockSearchContextsStore.GetDefaultSearchContextForCurrentUser")
			},
		},
		GetSearchContextFunc: &SearchContextsStoreGetSearchContextFunc{
			defaultHook: func(context.Context, GetSearchContextOptions) (*types.SearchContext, error) {
				panic("unexpected invocation of MockSearchContextsStore.GetSearchContext")
			},
		},
		GetSearchContextRepositoryRevisionsFunc: &SearchContextsStoreGetSearchContextRepositoryRevisionsFunc{
			defaultHook: func(context.Context, int64) ([]*types.SearchContextRepositoryRevisions, error) {
				panic("unexpected invocation of MockSearchContextsStore.GetSearchContextRepositoryRevisions")
			},
		},
		HandleFunc: &SearchContextsStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockSearchContextsStore.Handle")
			},
		},
		ListSearchContextsFunc: &SearchContextsStoreListSearchContextsFunc{
			defaultHook: func(context.Context, ListSearchContextsPageOptions, ListSearchContextsOptions) ([]*types.SearchContext, error) {
				panic("unexpected invocation of MockSearchContextsStore.ListSearchContexts")
			},
		},
		SetSearchContextRepositoryRevisionsFunc: &SearchContextsStoreSetSearchContextRepositoryRevisionsFunc{
			defaultHook: func(context.Context, int64, []*types.SearchContextRepositoryRevisions) error {
				panic("unexpected invocation of MockSearchContextsStore.SetSearchContextRepositoryRevisions")
			},
		},
		SetUserDefaultSearchContextIDFunc: &SearchContextsStoreSetUserDefaultSearchContextIDFunc{
			defaultHook: func(context.Context, int32, int64) error {
				panic("unexpected invocation of MockSearchContextsStore.SetUserDefaultSearchContextID")
			},
		},
		TransactFunc: &SearchContextsStoreTransactFunc{
			defaultHook: func(context.Context) (SearchContextsStore, error) {
				panic("unexpected invocation of MockSearchContextsStore.Transact")
			},
		},
		UpdateSearchContextWithRepositoryRevisionsFunc: &SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc{
			defaultHook: func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error) {
				panic("unexpected invocation of MockSearchContextsStore.UpdateSearchContextWithRepositoryRevisions")
			},
		},
	}
}

// NewMockSearchContextsStoreFrom creates a new mock of the
// MockSearchContextsStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockSearchContextsStoreFrom(i SearchContextsStore) *MockSearchContextsStore {
	return &MockSearchContextsStore{
		CountSearchContextsFunc: &SearchContextsStoreCountSearchContextsFunc{
			defaultHook: i.CountSearchContexts,
		},
		CreateSearchContextStarForUserFunc: &SearchContextsStoreCreateSearchContextStarForUserFunc{
			defaultHook: i.CreateSearchContextStarForUser,
		},
		CreateSearchContextWithRepositoryRevisionsFunc: &SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc{
			defaultHook: i.CreateSearchContextWithRepositoryRevisions,
		},
		DeleteSearchContextFunc: &SearchContextsStoreDeleteSearchContextFunc{
			defaultHook: i.DeleteSearchContext,
		},
		DeleteSearchContextStarForUserFunc: &SearchContextsStoreDeleteSearchContextStarForUserFunc{
			defaultHook: i.DeleteSearchContextStarForUser,
		},
		DoneFunc: &SearchContextsStoreDoneFunc{
			defaultHook: i.Done,
		},
		ExecFunc: &SearchContextsStoreExecFunc{
			defaultHook: i.Exec,
		},
		GetAllQueriesFunc: &SearchContextsStoreGetAllQueriesFunc{
			defaultHook: i.GetAllQueries,
		},
		GetAllRevisionsForReposFunc: &SearchContextsStoreGetAllRevisionsForReposFunc{
			defaultHook: i.GetAllRevisionsForRepos,
		},
		GetDefaultSearchContextForCurrentUserFunc: &SearchContextsStoreGetDefaultSearchContextForCurrentUserFunc{
			defaultHook: i.GetDefaultSearchContextForCurrentUser,
		},
		GetSearchContextFunc: &SearchContextsStoreGetSearchContextFunc{
			defaultHook: i.GetSearchContext,
		},
		GetSearchContextRepositoryRevisionsFunc: &SearchContextsStoreGetSearchContextRepositoryRevisionsFunc{
			defaultHook: i.GetSearchContextRepositoryRevisions,
		},
		HandleFunc: &SearchContextsStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListSearchContextsFunc: &SearchContextsStoreListSearchContextsFunc{
			defaultHook: i.ListSearchContexts,
		},
		SetSearchContextRepositoryRevisionsFunc: &SearchContextsStoreSetSearchContextRepositoryRevisionsFunc{
			defaultHook: i.SetSearchContextRepositoryRevisions,
		},
		SetUserDefaultSearchContextIDFunc: &SearchContextsStoreSetUserDefaultSearchContextIDFunc{
			defaultHook: i.SetUserDefaultSearchContextID,
		},
		TransactFunc: &SearchContextsStoreTransactFunc{
			defaultHook: i.Transact,
		},
		UpdateSearchContextWithRepositoryRevisionsFunc: &SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc{
			defaultHook: i.UpdateSearchContextWithRepositoryRevisions,
		},
	}
}

// SearchContextsStoreCountSearchContextsFunc describes the behavior when
// the CountSearchContexts method of the parent MockSearchContextsStore
// instance is invoked.
type SearchContextsStoreCountSearchContextsFunc struct {
	defaultHook func(context.Context, ListSearchContextsOptions) (int32, error)
	hooks       []func(context.Context, ListSearchContextsOptions) (int32, error)
	history     []SearchContextsStoreCountSearchContextsFuncCall
	mutex       sync.Mutex
}

// CountSearchContexts delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSearchContextsStore) CountSearchContexts(v0 context.Context, v1 ListSearchContextsOptions) (int32, error) {
	r0, r1 := m.CountSearchContextsFunc.nextHook()(v0, v1)
	m.CountSearchContextsFunc.appendCall(SearchContextsStoreCountSearchContextsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CountSearchContexts
// method of the parent MockSearchContextsStore instance is invoked and the
// hook queue is empty.
func (f *SearchContextsStoreCountSearchContextsFunc) SetDefaultHook(hook func(context.Context, ListSearchContextsOptions) (int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountSearchContexts method of the parent MockSearchContextsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *SearchContextsStoreCountSearchContextsFunc) PushHook(hook func(context.Context, ListSearchContextsOptions) (int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SearchContextsStoreCountSearchContextsFunc) SetDefaultReturn(r0 int32, r1 error) {
	f.SetDefaultHook(func(context.Context, ListSearchContextsOptions) (int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SearchContextsStoreCountSearchContextsFunc) PushReturn(r0 int32, r1 error) {
	f.PushHook(func(context.Context, ListSearchContextsOptions) (int32, error) {
		return r0, r1
	})
}

func (f *SearchContextsStoreCountSearchContextsFunc) nextHook() func(context.Context, ListSearchContextsOptions) (int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreCountSearchContextsFunc) appendCall(r0 SearchContextsStoreCountSearchContextsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SearchContextsStoreCountSearchContextsFuncCall objects describing the
// invocations of this function.
func (f *SearchContextsStoreCountSearchContextsFunc) History() []SearchContextsStoreCountSearchContextsFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreCountSearchContextsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreCountSearchContextsFuncCall is an object that
// describes an invocation of method CountSearchContexts on an instance of
// MockSearchContextsStore.
type SearchContextsStoreCountSearchContextsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ListSearchContextsOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreCountSearchContextsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreCountSearchContextsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SearchContextsStoreCreateSearchContextStarForUserFunc describes the
// behavior when the CreateSearchContextStarForUser method of the parent
// MockSearchContextsStore instance is invoked.
type SearchContextsStoreCreateSearchContextStarForUserFunc struct {
	defaultHook func(context.Context, int32, int64) error
	hooks       []func(context.Context, int32, int64) error
	history     []SearchContextsStoreCreateSearchContextStarForUserFuncCall
	mutex       sync.Mutex
}

// CreateSearchContextStarForUser delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockSearchContextsStore) CreateSearchContextStarForUser(v0 context.Context, v1 int32, v2 int64) error {
	r0 := m.CreateSearchContextStarForUserFunc.nextHook()(v0, v1, v2)
	m.CreateSearchContextStarForUserFunc.appendCall(SearchContextsStoreCreateSearchContextStarForUserFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// CreateSearchContextStarForUser method of the parent
// MockSearchContextsStore instance is invoked and the hook queue is empty.
func (f *SearchContextsStoreCreateSearchContextStarForUserFunc) SetDefaultHook(hook func(context.Context, int32, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateSearchContextStarForUser method of the parent
// MockSearchContextsStore instance invokes the hook at the front of the
// queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *SearchContextsStoreCreateSearchContextStarForUserFunc) PushHook(hook func(context.Context, int32, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SearchContextsStoreCreateSearchContextStarForUserFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, int64) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SearchContextsStoreCreateSearchContextStarForUserFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, int64) error {
		return r0
	})
}

func (f *SearchContextsStoreCreateSearchContextStarForUserFunc) nextHook() func(context.Context, int32, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreCreateSearchContextStarForUserFunc) appendCall(r0 SearchContextsStoreCreateSearchContextStarForUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SearchContextsStoreCreateSearchContextStarForUserFuncCall objects
// describing the invocations of this function.
func (f *SearchContextsStoreCreateSearchContextStarForUserFunc) History() []SearchContextsStoreCreateSearchContextStarForUserFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreCreateSearchContextStarForUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreCreateSearchContextStarForUserFuncCall is an object
// that describes an invocation of method CreateSearchContextStarForUser on
// an instance of MockSearchContextsStore.
type SearchContextsStoreCreateSearchContextStarForUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreCreateSearchContextStarForUserFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreCreateSearchContextStarForUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc
// describes the behavior when the
// CreateSearchContextWithRepositoryRevisions method of the parent
// MockSearchContextsStore instance is invoked.
type SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc struct {
	defaultHook func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error)
	hooks       []func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error)
	history     []SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFuncCall
	mutex       sync.Mutex
}

// CreateSearchContextWithRepositoryRevisions delegates to the next hook
// function in the queue and stores the parameter and result values of this
// invocation.
func (m *MockSearchContextsStore) CreateSearchContextWithRepositoryRevisions(v0 context.Context, v1 *types.SearchContext, v2 []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error) {
	r0, r1 := m.CreateSearchContextWithRepositoryRevisionsFunc.nextHook()(v0, v1, v2)
	m.CreateSearchContextWithRepositoryRevisionsFunc.appendCall(SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CreateSearchContextWithRepositoryRevisions method of the parent
// MockSearchContextsStore instance is invoked and the hook queue is empty.
func (f *SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc) SetDefaultHook(hook func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateSearchContextWithRepositoryRevisions method of the parent
// MockSearchContextsStore instance invokes the hook at the front of the
// queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc) PushHook(hook func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc) SetDefaultReturn(r0 *types.SearchContext, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc) PushReturn(r0 *types.SearchContext, r1 error) {
	f.PushHook(func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error) {
		return r0, r1
	})
}

func (f *SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc) nextHook() func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc) appendCall(r0 SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFuncCall
// objects describing the invocations of this function.
func (f *SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFunc) History() []SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFuncCall is
// an object that describes an invocation of method
// CreateSearchContextWithRepositoryRevisions on an instance of
// MockSearchContextsStore.
type SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.SearchContext
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []*types.SearchContextRepositoryRevisions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.SearchContext
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreCreateSearchContextWithRepositoryRevisionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SearchContextsStoreDeleteSearchContextFunc describes the behavior when
// the DeleteSearchContext method of the parent MockSearchContextsStore
// instance is invoked.
type SearchContextsStoreDeleteSearchContextFunc struct {
	defaultHook func(context.Context, int64) error
	hooks       []func(context.Context, int64) error
	history     []SearchContextsStoreDeleteSearchContextFuncCall
	mutex       sync.Mutex
}

// DeleteSearchContext delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSearchContextsStore) DeleteSearchContext(v0 context.Context, v1 int64) error {
	r0 := m.DeleteSearchContextFunc.nextHook()(v0, v1)
	m.DeleteSearchContextFunc.appendCall(SearchContextsStoreDeleteSearchContextFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteSearchContext
// method of the parent MockSearchContextsStore instance is invoked and the
// hook queue is empty.
func (f *SearchContextsStoreDeleteSearchContextFunc) SetDefaultHook(hook func(context.Context, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteSearchContext method of the parent MockSearchContextsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *SearchContextsStoreDeleteSearchContextFunc) PushHook(hook func(context.Context, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SearchContextsStoreDeleteSearchContextFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SearchContextsStoreDeleteSearchContextFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64) error {
		return r0
	})
}

func (f *SearchContextsStoreDeleteSearchContextFunc) nextHook() func(context.Context, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreDeleteSearchContextFunc) appendCall(r0 SearchContextsStoreDeleteSearchContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SearchContextsStoreDeleteSearchContextFuncCall objects describing the
// invocations of this function.
func (f *SearchContextsStoreDeleteSearchContextFunc) History() []SearchContextsStoreDeleteSearchContextFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreDeleteSearchContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreDeleteSearchContextFuncCall is an object that
// describes an invocation of method DeleteSearchContext on an instance of
// MockSearchContextsStore.
type SearchContextsStoreDeleteSearchContextFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreDeleteSearchContextFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreDeleteSearchContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SearchContextsStoreDeleteSearchContextStarForUserFunc describes the
// behavior when the DeleteSearchContextStarForUser method of the parent
// MockSearchContextsStore instance is invoked.
type SearchContextsStoreDeleteSearchContextStarForUserFunc struct {
	defaultHook func(context.Context, int32, int64) error
	hooks       []func(context.Context, int32, int64) error
	history     []SearchContextsStoreDeleteSearchContextStarForUserFuncCall
	mutex       sync.Mutex
}

// DeleteSearchContextStarForUser delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockSearchContextsStore) DeleteSearchContextStarForUser(v0 context.Context, v1 int32, v2 int64) error {
	r0 := m.DeleteSearchContextStarForUserFunc.nextHook()(v0, v1, v2)
	m.DeleteSearchContextStarForUserFunc.appendCall(SearchContextsStoreDeleteSearchContextStarForUserFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// DeleteSearchContextStarForUser method of the parent
// MockSearchContextsStore instance is invoked and the hook queue is empty.
func (f *SearchContextsStoreDeleteSearchContextStarForUserFunc) SetDefaultHook(hook func(context.Context, int32, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteSearchContextStarForUser method of the parent
// MockSearchContextsStore instance invokes the hook at the front of the
// queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *SearchContextsStoreDeleteSearchContextStarForUserFunc) PushHook(hook func(context.Context, int32, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SearchContextsStoreDeleteSearchContextStarForUserFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, int64) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SearchContextsStoreDeleteSearchContextStarForUserFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, int64) error {
		return r0
	})
}

func (f *SearchContextsStoreDeleteSearchContextStarForUserFunc) nextHook() func(context.Context, int32, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreDeleteSearchContextStarForUserFunc) appendCall(r0 SearchContextsStoreDeleteSearchContextStarForUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SearchContextsStoreDeleteSearchContextStarForUserFuncCall objects
// describing the invocations of this function.
func (f *SearchContextsStoreDeleteSearchContextStarForUserFunc) History() []SearchContextsStoreDeleteSearchContextStarForUserFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreDeleteSearchContextStarForUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreDeleteSearchContextStarForUserFuncCall is an object
// that describes an invocation of method DeleteSearchContextStarForUser on
// an instance of MockSearchContextsStore.
type SearchContextsStoreDeleteSearchContextStarForUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreDeleteSearchContextStarForUserFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreDeleteSearchContextStarForUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SearchContextsStoreDoneFunc describes the behavior when the Done method
// of the parent MockSearchContextsStore instance is invoked.
type SearchContextsStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []SearchContextsStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSearchContextsStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(SearchContextsStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockSearchContextsStore instance is invoked and the hook queue is
// empty.
func (f *SearchContextsStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockSearchContextsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SearchContextsStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SearchContextsStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SearchContextsStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *SearchContextsStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreDoneFunc) appendCall(r0 SearchContextsStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SearchContextsStoreDoneFuncCall objects
// describing the invocations of this function.
func (f *SearchContextsStoreDoneFunc) History() []SearchContextsStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreDoneFuncCall is an object that describes an invocation
// of method Done on an instance of MockSearchContextsStore.
type SearchContextsStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SearchContextsStoreExecFunc describes the behavior when the Exec method
// of the parent MockSearchContextsStore instance is invoked.
type SearchContextsStoreExecFunc struct {
	defaultHook func(context.Context, *sqlf.Query) error
	hooks       []func(context.Context, *sqlf.Query) error
	history     []SearchContextsStoreExecFuncCall
	mutex       sync.Mutex
}

// Exec delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSearchContextsStore) Exec(v0 context.Context, v1 *sqlf.Query) error {
	r0 := m.ExecFunc.nextHook()(v0, v1)
	m.ExecFunc.appendCall(SearchContextsStoreExecFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Exec method of the
// parent MockSearchContextsStore instance is invoked and the hook queue is
// empty.
func (f *SearchContextsStoreExecFunc) SetDefaultHook(hook func(context.Context, *sqlf.Query) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Exec method of the parent MockSearchContextsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SearchContextsStoreExecFunc) PushHook(hook func(context.Context, *sqlf.Query) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SearchContextsStoreExecFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *sqlf.Query) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SearchContextsStoreExecFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *sqlf.Query) error {
		return r0
	})
}

func (f *SearchContextsStoreExecFunc) nextHook() func(context.Context, *sqlf.Query) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreExecFunc) appendCall(r0 SearchContextsStoreExecFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SearchContextsStoreExecFuncCall objects
// describing the invocations of this function.
func (f *SearchContextsStoreExecFunc) History() []SearchContextsStoreExecFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreExecFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreExecFuncCall is an object that describes an invocation
// of method Exec on an instance of MockSearchContextsStore.
type SearchContextsStoreExecFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sqlf.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreExecFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreExecFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SearchContextsStoreGetAllQueriesFunc describes the behavior when the
// GetAllQueries method of the parent MockSearchContextsStore instance is
// invoked.
type SearchContextsStoreGetAllQueriesFunc struct {
	defaultHook func(context.Context) ([]string, error)
	hooks       []func(context.Context) ([]string, error)
	history     []SearchContextsStoreGetAllQueriesFuncCall
	mutex       sync.Mutex
}

// GetAllQueries delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockSearchContextsStore) GetAllQueries(v0 context.Context) ([]string, error) {
	r0, r1 := m.GetAllQueriesFunc.nextHook()(v0)
	m.GetAllQueriesFunc.appendCall(SearchContextsStoreGetAllQueriesFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetAllQueries method
// of the parent MockSearchContextsStore instance is invoked and the hook
// queue is empty.
func (f *SearchContextsStoreGetAllQueriesFunc) SetDefaultHook(hook func(context.Context) ([]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAllQueries method of the parent MockSearchContextsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *SearchContextsStoreGetAllQueriesFunc) PushHook(hook func(context.Context) ([]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SearchContextsStoreGetAllQueriesFunc) SetDefaultReturn(r0 []string, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SearchContextsStoreGetAllQueriesFunc) PushReturn(r0 []string, r1 error) {
	f.PushHook(func(context.Context) ([]string, error) {
		return r0, r1
	})
}

func (f *SearchContextsStoreGetAllQueriesFunc) nextHook() func(context.Context) ([]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreGetAllQueriesFunc) appendCall(r0 SearchContextsStoreGetAllQueriesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SearchContextsStoreGetAllQueriesFuncCall
// objects describing the invocations of this function.
func (f *SearchContextsStoreGetAllQueriesFunc) History() []SearchContextsStoreGetAllQueriesFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreGetAllQueriesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreGetAllQueriesFuncCall is an object that describes an
// invocation of method GetAllQueries on an instance of
// MockSearchContextsStore.
type SearchContextsStoreGetAllQueriesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreGetAllQueriesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreGetAllQueriesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SearchContextsStoreGetAllRevisionsForReposFunc describes the behavior
// when the GetAllRevisionsForRepos method of the parent
// MockSearchContextsStore instance is invoked.
type SearchContextsStoreGetAllRevisionsForReposFunc struct {
	defaultHook func(context.Context, []api.RepoID) (map[api.RepoID][]string, error)
	hooks       []func(context.Context, []api.RepoID) (map[api.RepoID][]string, error)
	history     []SearchContextsStoreGetAllRevisionsForReposFuncCall
	mutex       sync.Mutex
}

// GetAllRevisionsForRepos delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockSearchContextsStore) GetAllRevisionsForRepos(v0 context.Context, v1 []api.RepoID) (map[api.RepoID][]string, error) {
	r0, r1 := m.GetAllRevisionsForReposFunc.nextHook()(v0, v1)
	m.GetAllRevisionsForReposFunc.appendCall(SearchContextsStoreGetAllRevisionsForReposFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetAllRevisionsForRepos method of the parent MockSearchContextsStore
// instance is invoked and the hook queue is empty.
func (f *SearchContextsStoreGetAllRevisionsForReposFunc) SetDefaultHook(hook func(context.Context, []api.RepoID) (map[api.RepoID][]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAllRevisionsForRepos method of the parent MockSearchContextsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *SearchContextsStoreGetAllRevisionsForReposFunc) PushHook(hook func(context.Context, []api.RepoID) (map[api.RepoID][]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SearchContextsStoreGetAllRevisionsForReposFunc) SetDefaultReturn(r0 map[api.RepoID][]string, r1 error) {
	f.SetDefaultHook(func(context.Context, []api.RepoID) (map[api.RepoID][]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SearchContextsStoreGetAllRevisionsForReposFunc) PushReturn(r0 map[api.RepoID][]string, r1 error) {
	f.PushHook(func(context.Context, []api.RepoID) (map[api.RepoID][]string, error) {
		return r0, r1
	})
}

func (f *SearchContextsStoreGetAllRevisionsForReposFunc) nextHook() func(context.Context, []api.RepoID) (map[api.RepoID][]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreGetAllRevisionsForReposFunc) appendCall(r0 SearchContextsStoreGetAllRevisionsForReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SearchContextsStoreGetAllRevisionsForReposFuncCall objects describing the
// invocations of this function.
func (f *SearchContextsStoreGetAllRevisionsForReposFunc) History() []SearchContextsStoreGetAllRevisionsForReposFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreGetAllRevisionsForReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreGetAllRevisionsForReposFuncCall is an object that
// describes an invocation of method GetAllRevisionsForRepos on an instance
// of MockSearchContextsStore.
type SearchContextsStoreGetAllRevisionsForReposFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[api.RepoID][]string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreGetAllRevisionsForReposFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreGetAllRevisionsForReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SearchContextsStoreGetDefaultSearchContextForCurrentUserFunc describes
// the behavior when the GetDefaultSearchContextForCurrentUser method of the
// parent MockSearchContextsStore instance is invoked.
type SearchContextsStoreGetDefaultSearchContextForCurrentUserFunc struct {
	defaultHook func(context.Context) (*types.SearchContext, error)
	hooks       []func(context.Context) (*types.SearchContext, error)
	history     []SearchContextsStoreGetDefaultSearchContextForCurrentUserFuncCall
	mutex       sync.Mutex
}

// GetDefaultSearchContextForCurrentUser delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockSearchContextsStore) GetDefaultSearchContextForCurrentUser(v0 context.Context) (*types.SearchContext, error) {
	r0, r1 := m.GetDefaultSearchContextForCurrentUserFunc.nextHook()(v0)
	m.GetDefaultSearchContextForCurrentUserFunc.appendCall(SearchContextsStoreGetDefaultSearchContextForCurrentUserFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetDefaultSearchContextForCurrentUser method of the parent
// MockSearchContextsStore instance is invoked and the hook queue is empty.
func (f *SearchContextsStoreGetDefaultSearchContextForCurrentUserFunc) SetDefaultHook(hook func(context.Context) (*types.SearchContext, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDefaultSearchContextForCurrentUser method of the parent
// MockSearchContextsStore instance invokes the hook at the front of the
// queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *SearchContextsStoreGetDefaultSearchContextForCurrentUserFunc) PushHook(hook func(context.Context) (*types.SearchContext, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SearchContextsStoreGetDefaultSearchContextForCurrentUserFunc) SetDefaultReturn(r0 *types.SearchContext, r1 error) {
	f.SetDefaultHook(func(context.Context) (*types.SearchContext, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SearchContextsStoreGetDefaultSearchContextForCurrentUserFunc) PushReturn(r0 *types.SearchContext, r1 error) {
	f.PushHook(func(context.Context) (*types.SearchContext, error) {
		return r0, r1
	})
}

func (f *SearchContextsStoreGetDefaultSearchContextForCurrentUserFunc) nextHook() func(context.Context) (*types.SearchContext, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreGetDefaultSearchContextForCurrentUserFunc) appendCall(r0 SearchContextsStoreGetDefaultSearchContextForCurrentUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SearchContextsStoreGetDefaultSearchContextForCurrentUserFuncCall objects
// describing the invocations of this function.
func (f *SearchContextsStoreGetDefaultSearchContextForCurrentUserFunc) History() []SearchContextsStoreGetDefaultSearchContextForCurrentUserFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreGetDefaultSearchContextForCurrentUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreGetDefaultSearchContextForCurrentUserFuncCall is an
// object that describes an invocation of method
// GetDefaultSearchContextForCurrentUser on an instance of
// MockSearchContextsStore.
type SearchContextsStoreGetDefaultSearchContextForCurrentUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.SearchContext
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreGetDefaultSearchContextForCurrentUserFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreGetDefaultSearchContextForCurrentUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SearchContextsStoreGetSearchContextFunc describes the behavior when the
// GetSearchContext method of the parent MockSearchContextsStore instance is
// invoked.
type SearchContextsStoreGetSearchContextFunc struct {
	defaultHook func(context.Context, GetSearchContextOptions) (*types.SearchContext, error)
	hooks       []func(context.Context, GetSearchContextOptions) (*types.SearchContext, error)
	history     []SearchContextsStoreGetSearchContextFuncCall
	mutex       sync.Mutex
}

// GetSearchContext delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSearchContextsStore) GetSearchContext(v0 context.Context, v1 GetSearchContextOptions) (*types.SearchContext, error) {
	r0, r1 := m.GetSearchContextFunc.nextHook()(v0, v1)
	m.GetSearchContextFunc.appendCall(SearchContextsStoreGetSearchContextFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetSearchContext
// method of the parent MockSearchContextsStore instance is invoked and the
// hook queue is empty.
func (f *SearchContextsStoreGetSearchContextFunc) SetDefaultHook(hook func(context.Context, GetSearchContextOptions) (*types.SearchContext, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetSearchContext method of the parent MockSearchContextsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *SearchContextsStoreGetSearchContextFunc) PushHook(hook func(context.Context, GetSearchContextOptions) (*types.SearchContext, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SearchContextsStoreGetSearchContextFunc) SetDefaultReturn(r0 *types.SearchContext, r1 error) {
	f.SetDefaultHook(func(context.Context, GetSearchContextOptions) (*types.SearchContext, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SearchContextsStoreGetSearchContextFunc) PushReturn(r0 *types.SearchContext, r1 error) {
	f.PushHook(func(context.Context, GetSearchContextOptions) (*types.SearchContext, error) {
		return r0, r1
	})
}

func (f *SearchContextsStoreGetSearchContextFunc) nextHook() func(context.Context, GetSearchContextOptions) (*types.SearchContext, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreGetSearchContextFunc) appendCall(r0 SearchContextsStoreGetSearchContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SearchContextsStoreGetSearchContextFuncCall
// objects describing the invocations of this function.
func (f *SearchContextsStoreGetSearchContextFunc) History() []SearchContextsStoreGetSearchContextFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreGetSearchContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreGetSearchContextFuncCall is an object that describes
// an invocation of method GetSearchContext on an instance of
// MockSearchContextsStore.
type SearchContextsStoreGetSearchContextFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 GetSearchContextOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.SearchContext
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreGetSearchContextFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreGetSearchContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SearchContextsStoreGetSearchContextRepositoryRevisionsFunc describes the
// behavior when the GetSearchContextRepositoryRevisions method of the
// parent MockSearchContextsStore instance is invoked.
type SearchContextsStoreGetSearchContextRepositoryRevisionsFunc struct {
	defaultHook func(context.Context, int64) ([]*types.SearchContextRepositoryRevisions, error)
	hooks       []func(context.Context, int64) ([]*types.SearchContextRepositoryRevisions, error)
	history     []SearchContextsStoreGetSearchContextRepositoryRevisionsFuncCall
	mutex       sync.Mutex
}

// GetSearchContextRepositoryRevisions delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockSearchContextsStore) GetSearchContextRepositoryRevisions(v0 context.Context, v1 int64) ([]*types.SearchContextRepositoryRevisions, error) {
	r0, r1 := m.GetSearchContextRepositoryRevisionsFunc.nextHook()(v0, v1)
	m.GetSearchContextRepositoryRevisionsFunc.appendCall(SearchContextsStoreGetSearchContextRepositoryRevisionsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetSearchContextRepositoryRevisions method of the parent
// MockSearchContextsStore instance is invoked and the hook queue is empty.
func (f *SearchContextsStoreGetSearchContextRepositoryRevisionsFunc) SetDefaultHook(hook func(context.Context, int64) ([]*types.SearchContextRepositoryRevisions, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetSearchContextRepositoryRevisions method of the parent
// MockSearchContextsStore instance invokes the hook at the front of the
// queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *SearchContextsStoreGetSearchContextRepositoryRevisionsFunc) PushHook(hook func(context.Context, int64) ([]*types.SearchContextRepositoryRevisions, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SearchContextsStoreGetSearchContextRepositoryRevisionsFunc) SetDefaultReturn(r0 []*types.SearchContextRepositoryRevisions, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) ([]*types.SearchContextRepositoryRevisions, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SearchContextsStoreGetSearchContextRepositoryRevisionsFunc) PushReturn(r0 []*types.SearchContextRepositoryRevisions, r1 error) {
	f.PushHook(func(context.Context, int64) ([]*types.SearchContextRepositoryRevisions, error) {
		return r0, r1
	})
}

func (f *SearchContextsStoreGetSearchContextRepositoryRevisionsFunc) nextHook() func(context.Context, int64) ([]*types.SearchContextRepositoryRevisions, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreGetSearchContextRepositoryRevisionsFunc) appendCall(r0 SearchContextsStoreGetSearchContextRepositoryRevisionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SearchContextsStoreGetSearchContextRepositoryRevisionsFuncCall objects
// describing the invocations of this function.
func (f *SearchContextsStoreGetSearchContextRepositoryRevisionsFunc) History() []SearchContextsStoreGetSearchContextRepositoryRevisionsFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreGetSearchContextRepositoryRevisionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreGetSearchContextRepositoryRevisionsFuncCall is an
// object that describes an invocation of method
// GetSearchContextRepositoryRevisions on an instance of
// MockSearchContextsStore.
type SearchContextsStoreGetSearchContextRepositoryRevisionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.SearchContextRepositoryRevisions
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreGetSearchContextRepositoryRevisionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreGetSearchContextRepositoryRevisionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SearchContextsStoreHandleFunc describes the behavior when the Handle
// method of the parent MockSearchContextsStore instance is invoked.
type SearchContextsStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []SearchContextsStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSearchContextsStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(SearchContextsStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockSearchContextsStore instance is invoked and the hook queue is
// empty.
func (f *SearchContextsStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockSearchContextsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SearchContextsStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SearchContextsStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SearchContextsStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *SearchContextsStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreHandleFunc) appendCall(r0 SearchContextsStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SearchContextsStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *SearchContextsStoreHandleFunc) History() []SearchContextsStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of MockSearchContextsStore.
type SearchContextsStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SearchContextsStoreListSearchContextsFunc describes the behavior when the
// ListSearchContexts method of the parent MockSearchContextsStore instance
// is invoked.
type SearchContextsStoreListSearchContextsFunc struct {
	defaultHook func(context.Context, ListSearchContextsPageOptions, ListSearchContextsOptions) ([]*types.SearchContext, error)
	hooks       []func(context.Context, ListSearchContextsPageOptions, ListSearchContextsOptions) ([]*types.SearchContext, error)
	history     []SearchContextsStoreListSearchContextsFuncCall
	mutex       sync.Mutex
}

// ListSearchContexts delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSearchContextsStore) ListSearchContexts(v0 context.Context, v1 ListSearchContextsPageOptions, v2 ListSearchContextsOptions) ([]*types.SearchContext, error) {
	r0, r1 := m.ListSearchContextsFunc.nextHook()(v0, v1, v2)
	m.ListSearchContextsFunc.appendCall(SearchContextsStoreListSearchContextsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListSearchContexts
// method of the parent MockSearchContextsStore instance is invoked and the
// hook queue is empty.
func (f *SearchContextsStoreListSearchContextsFunc) SetDefaultHook(hook func(context.Context, ListSearchContextsPageOptions, ListSearchContextsOptions) ([]*types.SearchContext, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListSearchContexts method of the parent MockSearchContextsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *SearchContextsStoreListSearchContextsFunc) PushHook(hook func(context.Context, ListSearchContextsPageOptions, ListSearchContextsOptions) ([]*types.SearchContext, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SearchContextsStoreListSearchContextsFunc) SetDefaultReturn(r0 []*types.SearchContext, r1 error) {
	f.SetDefaultHook(func(context.Context, ListSearchContextsPageOptions, ListSearchContextsOptions) ([]*types.SearchContext, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SearchContextsStoreListSearchContextsFunc) PushReturn(r0 []*types.SearchContext, r1 error) {
	f.PushHook(func(context.Context, ListSearchContextsPageOptions, ListSearchContextsOptions) ([]*types.SearchContext, error) {
		return r0, r1
	})
}

func (f *SearchContextsStoreListSearchContextsFunc) nextHook() func(context.Context, ListSearchContextsPageOptions, ListSearchContextsOptions) ([]*types.SearchContext, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreListSearchContextsFunc) appendCall(r0 SearchContextsStoreListSearchContextsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SearchContextsStoreListSearchContextsFuncCall objects describing the
// invocations of this function.
func (f *SearchContextsStoreListSearchContextsFunc) History() []SearchContextsStoreListSearchContextsFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreListSearchContextsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreListSearchContextsFuncCall is an object that describes
// an invocation of method ListSearchContexts on an instance of
// MockSearchContextsStore.
type SearchContextsStoreListSearchContextsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ListSearchContextsPageOptions
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 ListSearchContextsOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.SearchContext
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreListSearchContextsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreListSearchContextsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SearchContextsStoreSetSearchContextRepositoryRevisionsFunc describes the
// behavior when the SetSearchContextRepositoryRevisions method of the
// parent MockSearchContextsStore instance is invoked.
type SearchContextsStoreSetSearchContextRepositoryRevisionsFunc struct {
	defaultHook func(context.Context, int64, []*types.SearchContextRepositoryRevisions) error
	hooks       []func(context.Context, int64, []*types.SearchContextRepositoryRevisions) error
	history     []SearchContextsStoreSetSearchContextRepositoryRevisionsFuncCall
	mutex       sync.Mutex
}

// SetSearchContextRepositoryRevisions delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockSearchContextsStore) SetSearchContextRepositoryRevisions(v0 context.Context, v1 int64, v2 []*types.SearchContextRepositoryRevisions) error {
	r0 := m.SetSearchContextRepositoryRevisionsFunc.nextHook()(v0, v1, v2)
	m.SetSearchContextRepositoryRevisionsFunc.appendCall(SearchContextsStoreSetSearchContextRepositoryRevisionsFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// SetSearchContextRepositoryRevisions method of the parent
// MockSearchContextsStore instance is invoked and the hook queue is empty.
func (f *SearchContextsStoreSetSearchContextRepositoryRevisionsFunc) SetDefaultHook(hook func(context.Context, int64, []*types.SearchContextRepositoryRevisions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetSearchContextRepositoryRevisions method of the parent
// MockSearchContextsStore instance invokes the hook at the front of the
// queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *SearchContextsStoreSetSearchContextRepositoryRevisionsFunc) PushHook(hook func(context.Context, int64, []*types.SearchContextRepositoryRevisions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SearchContextsStoreSetSearchContextRepositoryRevisionsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64, []*types.SearchContextRepositoryRevisions) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SearchContextsStoreSetSearchContextRepositoryRevisionsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64, []*types.SearchContextRepositoryRevisions) error {
		return r0
	})
}

func (f *SearchContextsStoreSetSearchContextRepositoryRevisionsFunc) nextHook() func(context.Context, int64, []*types.SearchContextRepositoryRevisions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreSetSearchContextRepositoryRevisionsFunc) appendCall(r0 SearchContextsStoreSetSearchContextRepositoryRevisionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SearchContextsStoreSetSearchContextRepositoryRevisionsFuncCall objects
// describing the invocations of this function.
func (f *SearchContextsStoreSetSearchContextRepositoryRevisionsFunc) History() []SearchContextsStoreSetSearchContextRepositoryRevisionsFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreSetSearchContextRepositoryRevisionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreSetSearchContextRepositoryRevisionsFuncCall is an
// object that describes an invocation of method
// SetSearchContextRepositoryRevisions on an instance of
// MockSearchContextsStore.
type SearchContextsStoreSetSearchContextRepositoryRevisionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []*types.SearchContextRepositoryRevisions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreSetSearchContextRepositoryRevisionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreSetSearchContextRepositoryRevisionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SearchContextsStoreSetUserDefaultSearchContextIDFunc describes the
// behavior when the SetUserDefaultSearchContextID method of the parent
// MockSearchContextsStore instance is invoked.
type SearchContextsStoreSetUserDefaultSearchContextIDFunc struct {
	defaultHook func(context.Context, int32, int64) error
	hooks       []func(context.Context, int32, int64) error
	history     []SearchContextsStoreSetUserDefaultSearchContextIDFuncCall
	mutex       sync.Mutex
}

// SetUserDefaultSearchContextID delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockSearchContextsStore) SetUserDefaultSearchContextID(v0 context.Context, v1 int32, v2 int64) error {
	r0 := m.SetUserDefaultSearchContextIDFunc.nextHook()(v0, v1, v2)
	m.SetUserDefaultSearchContextIDFunc.appendCall(SearchContextsStoreSetUserDefaultSearchContextIDFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// SetUserDefaultSearchContextID method of the parent
// MockSearchContextsStore instance is invoked and the hook queue is empty.
func (f *SearchContextsStoreSetUserDefaultSearchContextIDFunc) SetDefaultHook(hook func(context.Context, int32, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetUserDefaultSearchContextID method of the parent
// MockSearchContextsStore instance invokes the hook at the front of the
// queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *SearchContextsStoreSetUserDefaultSearchContextIDFunc) PushHook(hook func(context.Context, int32, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SearchContextsStoreSetUserDefaultSearchContextIDFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, int64) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SearchContextsStoreSetUserDefaultSearchContextIDFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, int64) error {
		return r0
	})
}

func (f *SearchContextsStoreSetUserDefaultSearchContextIDFunc) nextHook() func(context.Context, int32, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreSetUserDefaultSearchContextIDFunc) appendCall(r0 SearchContextsStoreSetUserDefaultSearchContextIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SearchContextsStoreSetUserDefaultSearchContextIDFuncCall objects
// describing the invocations of this function.
func (f *SearchContextsStoreSetUserDefaultSearchContextIDFunc) History() []SearchContextsStoreSetUserDefaultSearchContextIDFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreSetUserDefaultSearchContextIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreSetUserDefaultSearchContextIDFuncCall is an object
// that describes an invocation of method SetUserDefaultSearchContextID on
// an instance of MockSearchContextsStore.
type SearchContextsStoreSetUserDefaultSearchContextIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreSetUserDefaultSearchContextIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreSetUserDefaultSearchContextIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SearchContextsStoreTransactFunc describes the behavior when the Transact
// method of the parent MockSearchContextsStore instance is invoked.
type SearchContextsStoreTransactFunc struct {
	defaultHook func(context.Context) (SearchContextsStore, error)
	hooks       []func(context.Context) (SearchContextsStore, error)
	history     []SearchContextsStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSearchContextsStore) Transact(v0 context.Context) (SearchContextsStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(SearchContextsStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockSearchContextsStore instance is invoked and the hook queue
// is empty.
func (f *SearchContextsStoreTransactFunc) SetDefaultHook(hook func(context.Context) (SearchContextsStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockSearchContextsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *SearchContextsStoreTransactFunc) PushHook(hook func(context.Context) (SearchContextsStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SearchContextsStoreTransactFunc) SetDefaultReturn(r0 SearchContextsStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (SearchContextsStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SearchContextsStoreTransactFunc) PushReturn(r0 SearchContextsStore, r1 error) {
	f.PushHook(func(context.Context) (SearchContextsStore, error) {
		return r0, r1
	})
}

func (f *SearchContextsStoreTransactFunc) nextHook() func(context.Context) (SearchContextsStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreTransactFunc) appendCall(r0 SearchContextsStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SearchContextsStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *SearchContextsStoreTransactFunc) History() []SearchContextsStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreTransactFuncCall is an object that describes an
// invocation of method Transact on an instance of MockSearchContextsStore.
type SearchContextsStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 SearchContextsStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc
// describes the behavior when the
// UpdateSearchContextWithRepositoryRevisions method of the parent
// MockSearchContextsStore instance is invoked.
type SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc struct {
	defaultHook func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error)
	hooks       []func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error)
	history     []SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFuncCall
	mutex       sync.Mutex
}

// UpdateSearchContextWithRepositoryRevisions delegates to the next hook
// function in the queue and stores the parameter and result values of this
// invocation.
func (m *MockSearchContextsStore) UpdateSearchContextWithRepositoryRevisions(v0 context.Context, v1 *types.SearchContext, v2 []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error) {
	r0, r1 := m.UpdateSearchContextWithRepositoryRevisionsFunc.nextHook()(v0, v1, v2)
	m.UpdateSearchContextWithRepositoryRevisionsFunc.appendCall(SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// UpdateSearchContextWithRepositoryRevisions method of the parent
// MockSearchContextsStore instance is invoked and the hook queue is empty.
func (f *SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc) SetDefaultHook(hook func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateSearchContextWithRepositoryRevisions method of the parent
// MockSearchContextsStore instance invokes the hook at the front of the
// queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc) PushHook(hook func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc) SetDefaultReturn(r0 *types.SearchContext, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc) PushReturn(r0 *types.SearchContext, r1 error) {
	f.PushHook(func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error) {
		return r0, r1
	})
}

func (f *SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc) nextHook() func(context.Context, *types.SearchContext, []*types.SearchContextRepositoryRevisions) (*types.SearchContext, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc) appendCall(r0 SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFuncCall
// objects describing the invocations of this function.
func (f *SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFunc) History() []SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFuncCall {
	f.mutex.Lock()
	history := make([]SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFuncCall is
// an object that describes an invocation of method
// UpdateSearchContextWithRepositoryRevisions on an instance of
// MockSearchContextsStore.
type SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.SearchContext
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []*types.SearchContextRepositoryRevisions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.SearchContext
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchContextsStoreUpdateSearchContextWithRepositoryRevisionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockSecurityEventLogsStore is a mock implementation of the
// SecurityEventLogsStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockSecurityEventLogsStore struct {
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *SecurityEventLogsStoreHandleFunc
	// InsertFunc is an instance of a mock function object controlling the
	// behavior of the method Insert.
	InsertFunc *SecurityEventLogsStoreInsertFunc
	// InsertListFunc is an instance of a mock function object controlling
	// the behavior of the method InsertList.
	InsertListFunc *SecurityEventLogsStoreInsertListFunc
	// LogEventFunc is an instance of a mock function object controlling the
	// behavior of the method LogEvent.
	LogEventFunc *SecurityEventLogsStoreLogEventFunc
	// LogEventListFunc is an instance of a mock function object controlling
	// the behavior of the method LogEventList.
	LogEventListFunc *SecurityEventLogsStoreLogEventListFunc
}

// NewMockSecurityEventLogsStore creates a new mock of the
// SecurityEventLogsStore interface. All methods return zero values for all
// results, unless overwritten.
func NewMockSecurityEventLogsStore() *MockSecurityEventLogsStore {
	return &MockSecurityEventLogsStore{
		HandleFunc: &SecurityEventLogsStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		InsertFunc: &SecurityEventLogsStoreInsertFunc{
			defaultHook: func(context.Context, *SecurityEvent) (r0 error) {
				return
			},
		},
		InsertListFunc: &SecurityEventLogsStoreInsertListFunc{
			defaultHook: func(context.Context, []*SecurityEvent) (r0 error) {
				return
			},
		},
		LogEventFunc: &SecurityEventLogsStoreLogEventFunc{
			defaultHook: func(context.Context, *SecurityEvent) {
				return
			},
		},
		LogEventListFunc: &SecurityEventLogsStoreLogEventListFunc{
			defaultHook: func(context.Context, []*SecurityEvent) {
				return
			},
		},
	}
}

// NewStrictMockSecurityEventLogsStore creates a new mock of the
// SecurityEventLogsStore interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockSecurityEventLogsStore() *MockSecurityEventLogsStore {
	return &MockSecurityEventLogsStore{
		HandleFunc: &SecurityEventLogsStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockSecurityEventLogsStore.Handle")
			},
		},
		InsertFunc: &SecurityEventLogsStoreInsertFunc{
			defaultHook: func(context.Context, *SecurityEvent) error {
				panic("unexpected invocation of MockSecurityEventLogsStore.Insert")
			},
		},
		InsertListFunc: &SecurityEventLogsStoreInsertListFunc{
			defaultHook: func(context.Context, []*SecurityEvent) error {
				panic("unexpected invocation of MockSecurityEventLogsStore.InsertList")
			},
		},
		LogEventFunc: &SecurityEventLogsStoreLogEventFunc{
			defaultHook: func(context.Context, *SecurityEvent) {
				panic("unexpected invocation of MockSecurityEventLogsStore.LogEvent")
			},
		},
		LogEventListFunc: &SecurityEventLogsStoreLogEventListFunc{
			defaultHook: func(context.Context, []*SecurityEvent) {
				panic("unexpected invocation of MockSecurityEventLogsStore.LogEventList")
			},
		},
	}
}

// NewMockSecurityEventLogsStoreFrom creates a new mock of the
// MockSecurityEventLogsStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockSecurityEventLogsStoreFrom(i SecurityEventLogsStore) *MockSecurityEventLogsStore {
	return &MockSecurityEventLogsStore{
		HandleFunc: &SecurityEventLogsStoreHandleFunc{
			defaultHook: i.Handle,
		},
		InsertFunc: &SecurityEventLogsStoreInsertFunc{
			defaultHook: i.Insert,
		},
		InsertListFunc: &SecurityEventLogsStoreInsertListFunc{
			defaultHook: i.InsertList,
		},
		LogEventFunc: &SecurityEventLogsStoreLogEventFunc{
			defaultHook: i.LogEvent,
		},
		LogEventListFunc: &SecurityEventLogsStoreLogEventListFunc{
			defaultHook: i.LogEventList,
		},
	}
}

// SecurityEventLogsStoreHandleFunc describes the behavior when the Handle
// method of the parent MockSecurityEventLogsStore instance is invoked.
type SecurityEventLogsStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []SecurityEventLogsStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSecurityEventLogsStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(SecurityEventLogsStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockSecurityEventLogsStore instance is invoked and the hook queue
// is empty.
func (f *SecurityEventLogsStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockSecurityEventLogsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *SecurityEventLogsStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SecurityEventLogsStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SecurityEventLogsStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *SecurityEventLogsStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SecurityEventLogsStoreHandleFunc) appendCall(r0 SecurityEventLogsStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SecurityEventLogsStoreHandleFuncCall
// objects describing the invocations of this function.
func (f *SecurityEventLogsStoreHandleFunc) History() []SecurityEventLogsStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]SecurityEventLogsStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SecurityEventLogsStoreHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of MockSecurityEventLogsStore.
type SecurityEventLogsStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SecurityEventLogsStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SecurityEventLogsStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SecurityEventLogsStoreInsertFunc describes the behavior when the Insert
// method of the parent MockSecurityEventLogsStore instance is invoked.
type SecurityEventLogsStoreInsertFunc struct {
	defaultHook func(context.Context, *SecurityEvent) error
	hooks       []func(context.Context, *SecurityEvent) error
	history     []SecurityEventLogsStoreInsertFuncCall
	mutex       sync.Mutex
}

// Insert delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSecurityEventLogsStore) Insert(v0 context.Context, v1 *SecurityEvent) error {
	r0 := m.InsertFunc.nextHook()(v0, v1)
	m.InsertFunc.appendCall(SecurityEventLogsStoreInsertFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Insert method of the
// parent MockSecurityEventLogsStore instance is invoked and the hook queue
// is empty.
func (f *SecurityEventLogsStoreInsertFunc) SetDefaultHook(hook func(context.Context, *SecurityEvent) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Insert method of the parent MockSecurityEventLogsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *SecurityEventLogsStoreInsertFunc) PushHook(hook func(context.Context, *SecurityEvent) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SecurityEventLogsStoreInsertFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *SecurityEvent) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SecurityEventLogsStoreInsertFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *SecurityEvent) error {
		return r0
	})
}

func (f *SecurityEventLogsStoreInsertFunc) nextHook() func(context.Context, *SecurityEvent) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SecurityEventLogsStoreInsertFunc) appendCall(r0 SecurityEventLogsStoreInsertFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SecurityEventLogsStoreInsertFuncCall
// objects describing the invocations of this function.
func (f *SecurityEventLogsStoreInsertFunc) History() []SecurityEventLogsStoreInsertFuncCall {
	f.mutex.Lock()
	history := make([]SecurityEventLogsStoreInsertFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SecurityEventLogsStoreInsertFuncCall is an object that describes an
// invocation of method Insert on an instance of MockSecurityEventLogsStore.
type SecurityEventLogsStoreInsertFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *SecurityEvent
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SecurityEventLogsStoreInsertFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SecurityEventLogsStoreInsertFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SecurityEventLogsStoreInsertListFunc describes the behavior when the
// InsertList method of the parent MockSecurityEventLogsStore instance is
// invoked.
type SecurityEventLogsStoreInsertListFunc struct {
	defaultHook func(context.Context, []*SecurityEvent) error
	hooks       []func(context.Context, []*SecurityEvent) error
	history     []SecurityEventLogsStoreInsertListFuncCall
	mutex       sync.Mutex
}

// InsertList delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockSecurityEventLogsStore) InsertList(v0 context.Context, v1 []*SecurityEvent) error {
	r0 := m.InsertListFunc.nextHook()(v0, v1)
	m.InsertListFunc.appendCall(SecurityEventLogsStoreInsertListFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the InsertList method of
// the parent MockSecurityEventLogsStore instance is invoked and the hook
// queue is empty.
func (f *SecurityEventLogsStoreInsertListFunc) SetDefaultHook(hook func(context.Context, []*SecurityEvent) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// InsertList method of the parent MockSecurityEventLogsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *SecurityEventLogsStoreInsertListFunc) PushHook(hook func(context.Context, []*SecurityEvent) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SecurityEventLogsStoreInsertListFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []*SecurityEvent) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SecurityEventLogsStoreInsertListFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []*SecurityEvent) error {
		return r0
	})
}

func (f *SecurityEventLogsStoreInsertListFunc) nextHook() func(context.Context, []*SecurityEvent) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SecurityEventLogsStoreInsertListFunc) appendCall(r0 SecurityEventLogsStoreInsertListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SecurityEventLogsStoreInsertListFuncCall
// objects describing the invocations of this function.
func (f *SecurityEventLogsStoreInsertListFunc) History() []SecurityEventLogsStoreInsertListFuncCall {
	f.mutex.Lock()
	history := make([]SecurityEventLogsStoreInsertListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SecurityEventLogsStoreInsertListFuncCall is an object that describes an
// invocation of method InsertList on an instance of
// MockSecurityEventLogsStore.
type SecurityEventLogsStoreInsertListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []*SecurityEvent
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SecurityEventLogsStoreInsertListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SecurityEventLogsStoreInsertListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SecurityEventLogsStoreLogEventFunc describes the behavior when the
// LogEvent method of the parent MockSecurityEventLogsStore instance is
// invoked.
type SecurityEventLogsStoreLogEventFunc struct {
	defaultHook func(context.Context, *SecurityEvent)
	hooks       []func(context.Context, *SecurityEvent)
	history     []SecurityEventLogsStoreLogEventFuncCall
	mutex       sync.Mutex
}

// LogEvent delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSecurityEventLogsStore) LogEvent(v0 context.Context, v1 *SecurityEvent) {
	m.LogEventFunc.nextHook()(v0, v1)
	m.LogEventFunc.appendCall(SecurityEventLogsStoreLogEventFuncCall{v0, v1})
	return
}

// SetDefaultHook sets function that is called when the LogEvent method of
// the parent MockSecurityEventLogsStore instance is invoked and the hook
// queue is empty.
func (f *SecurityEventLogsStoreLogEventFunc) SetDefaultHook(hook func(context.Context, *SecurityEvent)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LogEvent method of the parent MockSecurityEventLogsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *SecurityEventLogsStoreLogEventFunc) PushHook(hook func(context.Context, *SecurityEvent)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SecurityEventLogsStoreLogEventFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(context.Context, *SecurityEvent) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SecurityEventLogsStoreLogEventFunc) PushReturn() {
	f.PushHook(func(context.Context, *SecurityEvent) {
		return
	})
}

func (f *SecurityEventLogsStoreLogEventFunc) nextHook() func(context.Context, *SecurityEvent) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SecurityEventLogsStoreLogEventFunc) appendCall(r0 SecurityEventLogsStoreLogEventFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SecurityEventLogsStoreLogEventFuncCall
// objects describing the invocations of this function.
func (f *SecurityEventLogsStoreLogEventFunc) History() []SecurityEventLogsStoreLogEventFuncCall {
	f.mutex.Lock()
	history := make([]SecurityEventLogsStoreLogEventFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SecurityEventLogsStoreLogEventFuncCall is an object that describes an
// invocation of method LogEvent on an instance of
// MockSecurityEventLogsStore.
type SecurityEventLogsStoreLogEventFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *SecurityEvent
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SecurityEventLogsStoreLogEventFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SecurityEventLogsStoreLogEventFuncCall) Results() []interface{} {
	return []interface{}{}
}

// SecurityEventLogsStoreLogEventListFunc describes the behavior when the
// LogEventList method of the parent MockSecurityEventLogsStore instance is
// invoked.
type SecurityEventLogsStoreLogEventListFunc struct {
	defaultHook func(context.Context, []*SecurityEvent)
	hooks       []func(context.Context, []*SecurityEvent)
	history     []SecurityEventLogsStoreLogEventListFuncCall
	mutex       sync.Mutex
}

// LogEventList delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockSecurityEventLogsStore) LogEventList(v0 context.Context, v1 []*SecurityEvent) {
	m.LogEventListFunc.nextHook()(v0, v1)
	m.LogEventListFunc.appendCall(SecurityEventLogsStoreLogEventListFuncCall{v0, v1})
	return
}

// SetDefaultHook sets function that is called when the LogEventList method
// of the parent MockSecurityEventLogsStore instance is invoked and the hook
// queue is empty.
func (f *SecurityEventLogsStoreLogEventListFunc) SetDefaultHook(hook func(context.Context, []*SecurityEvent)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LogEventList method of the parent MockSecurityEventLogsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *SecurityEventLogsStoreLogEventListFunc) PushHook(hook func(context.Context, []*SecurityEvent)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SecurityEventLogsStoreLogEventListFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(context.Context, []*SecurityEvent) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SecurityEventLogsStoreLogEventListFunc) PushReturn() {
	f.PushHook(func(context.Context, []*SecurityEvent) {
		return
	})
}

func (f *SecurityEventLogsStoreLogEventListFunc) nextHook() func(context.Context, []*SecurityEvent) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SecurityEventLogsStoreLogEventListFunc) appendCall(r0 SecurityEventLogsStoreLogEventListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SecurityEventLogsStoreLogEventListFuncCall
// objects describing the invocations of this function.
func (f *SecurityEventLogsStoreLogEventListFunc) History() []SecurityEventLogsStoreLogEventListFuncCall {
	f.mutex.Lock()
	history := make([]SecurityEventLogsStoreLogEventListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SecurityEventLogsStoreLogEventListFuncCall is an object that describes an
// invocation of method LogEventList on an instance of
// MockSecurityEventLogsStore.
type SecurityEventLogsStoreLogEventListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []*SecurityEvent
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SecurityEventLogsStoreLogEventListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SecurityEventLogsStoreLogEventListFuncCall) Results() []interface{} {
	return []interface{}{}
}

// MockSettingsStore is a mock implementation of the SettingsStore interface
// (from the package github.com/sourcegraph/sourcegraph/internal/database)
// used for unit testing.
type MockSettingsStore struct {
	// CreateIfUpToDateFunc is an instance of a mock function object
	// controlling the behavior of the method CreateIfUpToDate.
	CreateIfUpToDateFunc *SettingsStoreCreateIfUpToDateFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *SettingsStoreDoneFunc
	// GetLatestFunc is an instance of a mock function object controlling
	// the behavior of the method GetLatest.
	GetLatestFunc *SettingsStoreGetLatestFunc
	// GetLatestSchemaSettingsFunc is an instance of a mock function object
	// controlling the behavior of the method GetLatestSchemaSettings.
	GetLatestSchemaSettingsFunc *SettingsStoreGetLatestSchemaSettingsFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *SettingsStoreHandleFunc
	// ListAllFunc is an instance of a mock function object controlling the
	// behavior of the method ListAll.
	ListAllFunc *SettingsStoreListAllFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *SettingsStoreTransactFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *SettingsStoreWithFunc
}

// NewMockSettingsStore creates a new mock of the SettingsStore interface.
// All methods return zero values for all results, unless overwritten.
func NewMockSettingsStore() *MockSettingsStore {
	return &MockSettingsStore{
		CreateIfUpToDateFunc: &SettingsStoreCreateIfUpToDateFunc{
			defaultHook: func(context.Context, api.SettingsSubject, *int32, *int32, string) (r0 *api.Settings, r1 error) {
				return
			},
		},
		DoneFunc: &SettingsStoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		GetLatestFunc: &SettingsStoreGetLatestFunc{
			defaultHook: func(context.Context, api.SettingsSubject) (r0 *api.Settings, r1 error) {
				return
			},
		},
		GetLatestSchemaSettingsFunc: &SettingsStoreGetLatestSchemaSettingsFunc{
			defaultHook: func(context.Context, api.SettingsSubject) (r0 *schema.Settings, r1 error) {
				return
			},
		},
		HandleFunc: &SettingsStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		ListAllFunc: &SettingsStoreListAllFunc{
			defaultHook: func(context.Context, string) (r0 []*api.Settings, r1 error) {
				return
			},
		},
		TransactFunc: &SettingsStoreTransactFunc{
			defaultHook: func(context.Context) (r0 SettingsStore, r1 error) {
				return
			},
		},
		WithFunc: &SettingsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 SettingsStore) {
				return
			},
		},
	}
}

// NewStrictMockSettingsStore creates a new mock of the SettingsStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockSettingsStore() *MockSettingsStore {
	return &MockSettingsStore{
		CreateIfUpToDateFunc: &SettingsStoreCreateIfUpToDateFunc{
			defaultHook: func(context.Context, api.SettingsSubject, *int32, *int32, string) (*api.Settings, error) {
				panic("unexpected invocation of MockSettingsStore.CreateIfUpToDate")
			},
		},
		DoneFunc: &SettingsStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockSettingsStore.Done")
			},
		},
		GetLatestFunc: &SettingsStoreGetLatestFunc{
			defaultHook: func(context.Context, api.SettingsSubject) (*api.Settings, error) {
				panic("unexpected invocation of MockSettingsStore.GetLatest")
			},
		},
		GetLatestSchemaSettingsFunc: &SettingsStoreGetLatestSchemaSettingsFunc{
			defaultHook: func(context.Context, api.SettingsSubject) (*schema.Settings, error) {
				panic("unexpected invocation of MockSettingsStore.GetLatestSchemaSettings")
			},
		},
		HandleFunc: &SettingsStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockSettingsStore.Handle")
			},
		},
		ListAllFunc: &SettingsStoreListAllFunc{
			defaultHook: func(context.Context, string) ([]*api.Settings, error) {
				panic("unexpected invocation of MockSettingsStore.ListAll")
			},
		},
		TransactFunc: &SettingsStoreTransactFunc{
			defaultHook: func(context.Context) (SettingsStore, error) {
				panic("unexpected invocation of MockSettingsStore.Transact")
			},
		},
		WithFunc: &SettingsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) SettingsStore {
				panic("unexpected invocation of MockSettingsStore.With")
			},
		},
	}
}

// NewMockSettingsStoreFrom creates a new mock of the MockSettingsStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockSettingsStoreFrom(i SettingsStore) *MockSettingsStore {
	return &MockSettingsStore{
		CreateIfUpToDateFunc: &SettingsStoreCreateIfUpToDateFunc{
			defaultHook: i.CreateIfUpToDate,
		},
		DoneFunc: &SettingsStoreDoneFunc{
			defaultHook: i.Done,
		},
		GetLatestFunc: &SettingsStoreGetLatestFunc{
			defaultHook: i.GetLatest,
		},
		GetLatestSchemaSettingsFunc: &SettingsStoreGetLatestSchemaSettingsFunc{
			defaultHook: i.GetLatestSchemaSettings,
		},
		HandleFunc: &SettingsStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListAllFunc: &SettingsStoreListAllFunc{
			defaultHook: i.ListAll,
		},
		TransactFunc: &SettingsStoreTransactFunc{
			defaultHook: i.Transact,
		},
		WithFunc: &SettingsStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// SettingsStoreCreateIfUpToDateFunc describes the behavior when the
// CreateIfUpToDate method of the parent MockSettingsStore instance is
// invoked.
type SettingsStoreCreateIfUpToDateFunc struct {
	defaultHook func(context.Context, api.SettingsSubject, *int32, *int32, string) (*api.Settings, error)
	hooks       []func(context.Context, api.SettingsSubject, *int32, *int32, string) (*api.Settings, error)
	history     []SettingsStoreCreateIfUpToDateFuncCall
	mutex       sync.Mutex
}

// CreateIfUpToDate delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSettingsStore) CreateIfUpToDate(v0 context.Context, v1 api.SettingsSubject, v2 *int32, v3 *int32, v4 string) (*api.Settings, error) {
	r0, r1 := m.CreateIfUpToDateFunc.nextHook()(v0, v1, v2, v3, v4)
	m.CreateIfUpToDateFunc.appendCall(SettingsStoreCreateIfUpToDateFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateIfUpToDate
// method of the parent MockSettingsStore instance is invoked and the hook
// queue is empty.
func (f *SettingsStoreCreateIfUpToDateFunc) SetDefaultHook(hook func(context.Context, api.SettingsSubject, *int32, *int32, string) (*api.Settings, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateIfUpToDate method of the parent MockSettingsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *SettingsStoreCreateIfUpToDateFunc) PushHook(hook func(context.Context, api.SettingsSubject, *int32, *int32, string) (*api.Settings, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SettingsStoreCreateIfUpToDateFunc) SetDefaultReturn(r0 *api.Settings, r1 error) {
	f.SetDefaultHook(func(context.Context, api.SettingsSubject, *int32, *int32, string) (*api.Settings, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SettingsStoreCreateIfUpToDateFunc) PushReturn(r0 *api.Settings, r1 error) {
	f.PushHook(func(context.Context, api.SettingsSubject, *int32, *int32, string) (*api.Settings, error) {
		return r0, r1
	})
}

func (f *SettingsStoreCreateIfUpToDateFunc) nextHook() func(context.Context, api.SettingsSubject, *int32, *int32, string) (*api.Settings, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SettingsStoreCreateIfUpToDateFunc) appendCall(r0 SettingsStoreCreateIfUpToDateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SettingsStoreCreateIfUpToDateFuncCall
// objects describing the invocations of this function.
func (f *SettingsStoreCreateIfUpToDateFunc) History() []SettingsStoreCreateIfUpToDateFuncCall {
	f.mutex.Lock()
	history := make([]SettingsStoreCreateIfUpToDateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SettingsStoreCreateIfUpToDateFuncCall is an object that describes an
// invocation of method CreateIfUpToDate on an instance of
// MockSettingsStore.
type SettingsStoreCreateIfUpToDateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.SettingsSubject
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *int32
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *int32
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *api.Settings
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SettingsStoreCreateIfUpToDateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SettingsStoreCreateIfUpToDateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SettingsStoreDoneFunc describes the behavior when the Done method of the
// parent MockSettingsStore instance is invoked.
type SettingsStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []SettingsStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSettingsStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(SettingsStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockSettingsStore instance is invoked and the hook queue is empty.
func (f *SettingsStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockSettingsStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SettingsStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SettingsStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SettingsStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *SettingsStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SettingsStoreDoneFunc) appendCall(r0 SettingsStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SettingsStoreDoneFuncCall objects
// describing the invocations of this function.
func (f *SettingsStoreDoneFunc) History() []SettingsStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]SettingsStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SettingsStoreDoneFuncCall is an object that describes an invocation of
// method Done on an instance of MockSettingsStore.
type SettingsStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SettingsStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SettingsStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SettingsStoreGetLatestFunc describes the behavior when the GetLatest
// method of the parent MockSettingsStore instance is invoked.
type SettingsStoreGetLatestFunc struct {
	defaultHook func(context.Context, api.SettingsSubject) (*api.Settings, error)
	hooks       []func(context.Context, api.SettingsSubject) (*api.Settings, error)
	history     []SettingsStoreGetLatestFuncCall
	mutex       sync.Mutex
}

// GetLatest delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSettingsStore) GetLatest(v0 context.Context, v1 api.SettingsSubject) (*api.Settings, error) {
	r0, r1 := m.GetLatestFunc.nextHook()(v0, v1)
	m.GetLatestFunc.appendCall(SettingsStoreGetLatestFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetLatest method of
// the parent MockSettingsStore instance is invoked and the hook queue is
// empty.
func (f *SettingsStoreGetLatestFunc) SetDefaultHook(hook func(context.Context, api.SettingsSubject) (*api.Settings, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLatest method of the parent MockSettingsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SettingsStoreGetLatestFunc) PushHook(hook func(context.Context, api.SettingsSubject) (*api.Settings, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SettingsStoreGetLatestFunc) SetDefaultReturn(r0 *api.Settings, r1 error) {
	f.SetDefaultHook(func(context.Context, api.SettingsSubject) (*api.Settings, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SettingsStoreGetLatestFunc) PushReturn(r0 *api.Settings, r1 error) {
	f.PushHook(func(context.Context, api.SettingsSubject) (*api.Settings, error) {
		return r0, r1
	})
}

func (f *SettingsStoreGetLatestFunc) nextHook() func(context.Context, api.SettingsSubject) (*api.Settings, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SettingsStoreGetLatestFunc) appendCall(r0 SettingsStoreGetLatestFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SettingsStoreGetLatestFuncCall objects
// describing the invocations of this function.
func (f *SettingsStoreGetLatestFunc) History() []SettingsStoreGetLatestFuncCall {
	f.mutex.Lock()
	history := make([]SettingsStoreGetLatestFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SettingsStoreGetLatestFuncCall is an object that describes an invocation
// of method GetLatest on an instance of MockSettingsStore.
type SettingsStoreGetLatestFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.SettingsSubject
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *api.Settings
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SettingsStoreGetLatestFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SettingsStoreGetLatestFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SettingsStoreGetLatestSchemaSettingsFunc describes the behavior when the
// GetLatestSchemaSettings method of the parent MockSettingsStore instance
// is invoked.
type SettingsStoreGetLatestSchemaSettingsFunc struct {
	defaultHook func(context.Context, api.SettingsSubject) (*schema.Settings, error)
	hooks       []func(context.Context, api.SettingsSubject) (*schema.Settings, error)
	history     []SettingsStoreGetLatestSchemaSettingsFuncCall
	mutex       sync.Mutex
}

// GetLatestSchemaSettings delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockSettingsStore) GetLatestSchemaSettings(v0 context.Context, v1 api.SettingsSubject) (*schema.Settings, error) {
	r0, r1 := m.GetLatestSchemaSettingsFunc.nextHook()(v0, v1)
	m.GetLatestSchemaSettingsFunc.appendCall(SettingsStoreGetLatestSchemaSettingsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetLatestSchemaSettings method of the parent MockSettingsStore instance
// is invoked and the hook queue is empty.
func (f *SettingsStoreGetLatestSchemaSettingsFunc) SetDefaultHook(hook func(context.Context, api.SettingsSubject) (*schema.Settings, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLatestSchemaSettings method of the parent MockSettingsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *SettingsStoreGetLatestSchemaSettingsFunc) PushHook(hook func(context.Context, api.SettingsSubject) (*schema.Settings, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SettingsStoreGetLatestSchemaSettingsFunc) SetDefaultReturn(r0 *schema.Settings, r1 error) {
	f.SetDefaultHook(func(context.Context, api.SettingsSubject) (*schema.Settings, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SettingsStoreGetLatestSchemaSettingsFunc) PushReturn(r0 *schema.Settings, r1 error) {
	f.PushHook(func(context.Context, api.SettingsSubject) (*schema.Settings, error) {
		return r0, r1
	})
}

func (f *SettingsStoreGetLatestSchemaSettingsFunc) nextHook() func(context.Context, api.SettingsSubject) (*schema.Settings, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SettingsStoreGetLatestSchemaSettingsFunc) appendCall(r0 SettingsStoreGetLatestSchemaSettingsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SettingsStoreGetLatestSchemaSettingsFuncCall objects describing the
// invocations of this function.
func (f *SettingsStoreGetLatestSchemaSettingsFunc) History() []SettingsStoreGetLatestSchemaSettingsFuncCall {
	f.mutex.Lock()
	history := make([]SettingsStoreGetLatestSchemaSettingsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SettingsStoreGetLatestSchemaSettingsFuncCall is an object that describes
// an invocation of method GetLatestSchemaSettings on an instance of
// MockSettingsStore.
type SettingsStoreGetLatestSchemaSettingsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.SettingsSubject
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *schema.Settings
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SettingsStoreGetLatestSchemaSettingsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SettingsStoreGetLatestSchemaSettingsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SettingsStoreHandleFunc describes the behavior when the Handle method of
// the parent MockSettingsStore instance is invoked.
type SettingsStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []SettingsStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSettingsStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(SettingsStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockSettingsStore instance is invoked and the hook queue is empty.
func (f *SettingsStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockSettingsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SettingsStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SettingsStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SettingsStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *SettingsStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SettingsStoreHandleFunc) appendCall(r0 SettingsStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SettingsStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *SettingsStoreHandleFunc) History() []SettingsStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]SettingsStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SettingsStoreHandleFuncCall is an object that describes an invocation of
// method Handle on an instance of MockSettingsStore.
type SettingsStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SettingsStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SettingsStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SettingsStoreListAllFunc describes the behavior when the ListAll method
// of the parent MockSettingsStore instance is invoked.
type SettingsStoreListAllFunc struct {
	defaultHook func(context.Context, string) ([]*api.Settings, error)
	hooks       []func(context.Context, string) ([]*api.Settings, error)
	history     []SettingsStoreListAllFuncCall
	mutex       sync.Mutex
}

// ListAll delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSettingsStore) ListAll(v0 context.Context, v1 string) ([]*api.Settings, error) {
	r0, r1 := m.ListAllFunc.nextHook()(v0, v1)
	m.ListAllFunc.appendCall(SettingsStoreListAllFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListAll method of
// the parent MockSettingsStore instance is invoked and the hook queue is
// empty.
func (f *SettingsStoreListAllFunc) SetDefaultHook(hook func(context.Context, string) ([]*api.Settings, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListAll method of the parent MockSettingsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SettingsStoreListAllFunc) PushHook(hook func(context.Context, string) ([]*api.Settings, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SettingsStoreListAllFunc) SetDefaultReturn(r0 []*api.Settings, r1 error) {
	f.SetDefaultHook(func(context.Context, string) ([]*api.Settings, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SettingsStoreListAllFunc) PushReturn(r0 []*api.Settings, r1 error) {
	f.PushHook(func(context.Context, string) ([]*api.Settings, error) {
		return r0, r1
	})
}

func (f *SettingsStoreListAllFunc) nextHook() func(context.Context, string) ([]*api.Settings, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SettingsStoreListAllFunc) appendCall(r0 SettingsStoreListAllFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SettingsStoreListAllFuncCall objects
// describing the invocations of this function.
func (f *SettingsStoreListAllFunc) History() []SettingsStoreListAllFuncCall {
	f.mutex.Lock()
	history := make([]SettingsStoreListAllFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SettingsStoreListAllFuncCall is an object that describes an invocation of
// method ListAll on an instance of MockSettingsStore.
type SettingsStoreListAllFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*api.Settings
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SettingsStoreListAllFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SettingsStoreListAllFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SettingsStoreTransactFunc describes the behavior when the Transact method
// of the parent MockSettingsStore instance is invoked.
type SettingsStoreTransactFunc struct {
	defaultHook func(context.Context) (SettingsStore, error)
	hooks       []func(context.Context) (SettingsStore, error)
	history     []SettingsStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSettingsStore) Transact(v0 context.Context) (SettingsStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(SettingsStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockSettingsStore instance is invoked and the hook queue is
// empty.
func (f *SettingsStoreTransactFunc) SetDefaultHook(hook func(context.Context) (SettingsStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockSettingsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SettingsStoreTransactFunc) PushHook(hook func(context.Context) (SettingsStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SettingsStoreTransactFunc) SetDefaultReturn(r0 SettingsStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (SettingsStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SettingsStoreTransactFunc) PushReturn(r0 SettingsStore, r1 error) {
	f.PushHook(func(context.Context) (SettingsStore, error) {
		return r0, r1
	})
}

func (f *SettingsStoreTransactFunc) nextHook() func(context.Context) (SettingsStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SettingsStoreTransactFunc) appendCall(r0 SettingsStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SettingsStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *SettingsStoreTransactFunc) History() []SettingsStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]SettingsStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SettingsStoreTransactFuncCall is an object that describes an invocation
// of method Transact on an instance of MockSettingsStore.
type SettingsStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 SettingsStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SettingsStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SettingsStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SettingsStoreWithFunc describes the behavior when the With method of the
// parent MockSettingsStore instance is invoked.
type SettingsStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) SettingsStore
	hooks       []func(basestore.ShareableStore) SettingsStore
	history     []SettingsStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSettingsStore) With(v0 basestore.ShareableStore) SettingsStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(SettingsStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockSettingsStore instance is invoked and the hook queue is empty.
func (f *SettingsStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) SettingsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockSettingsStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SettingsStoreWithFunc) PushHook(hook func(basestore.ShareableStore) SettingsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SettingsStoreWithFunc) SetDefaultReturn(r0 SettingsStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) SettingsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SettingsStoreWithFunc) PushReturn(r0 SettingsStore) {
	f.PushHook(func(basestore.ShareableStore) SettingsStore {
		return r0
	})
}

func (f *SettingsStoreWithFunc) nextHook() func(basestore.ShareableStore) SettingsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SettingsStoreWithFunc) appendCall(r0 SettingsStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SettingsStoreWithFuncCall objects
// describing the invocations of this function.
func (f *SettingsStoreWithFunc) History() []SettingsStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]SettingsStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SettingsStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockSettingsStore.
type SettingsStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 SettingsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SettingsStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SettingsStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockSignalConfigurationStore is a mock implementation of the
// SignalConfigurationStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockSignalConfigurationStore struct {
	// IsEnabledFunc is an instance of a mock function object controlling
	// the behavior of the method IsEnabled.
	IsEnabledFunc *SignalConfigurationStoreIsEnabledFunc
	// LoadConfigurationsFunc is an instance of a mock function object
	// controlling the behavior of the method LoadConfigurations.
	LoadConfigurationsFunc *SignalConfigurationStoreLoadConfigurationsFunc
	// UpdateConfigurationFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateConfiguration.
	UpdateConfigurationFunc *SignalConfigurationStoreUpdateConfigurationFunc
	// WithTransactFunc is an instance of a mock function object controlling
	// the behavior of the method WithTransact.
	WithTransactFunc *SignalConfigurationStoreWithTransactFunc
}

// NewMockSignalConfigurationStore creates a new mock of the
// SignalConfigurationStore interface. All methods return zero values for
// all results, unless overwritten.
func NewMockSignalConfigurationStore() *MockSignalConfigurationStore {
	return &MockSignalConfigurationStore{
		IsEnabledFunc: &SignalConfigurationStoreIsEnabledFunc{
			defaultHook: func(context.Context, string) (r0 bool, r1 error) {
				return
			},
		},
		LoadConfigurationsFunc: &SignalConfigurationStoreLoadConfigurationsFunc{
			defaultHook: func(context.Context, LoadSignalConfigurationArgs) (r0 []SignalConfiguration, r1 error) {
				return
			},
		},
		UpdateConfigurationFunc: &SignalConfigurationStoreUpdateConfigurationFunc{
			defaultHook: func(context.Context, UpdateSignalConfigurationArgs) (r0 error) {
				return
			},
		},
		WithTransactFunc: &SignalConfigurationStoreWithTransactFunc{
			defaultHook: func(context.Context, func(store SignalConfigurationStore) error) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockSignalConfigurationStore creates a new mock of the
// SignalConfigurationStore interface. All methods panic on invocation,
// unless overwritten.
func NewStrictMockSignalConfigurationStore() *MockSignalConfigurationStore {
	return &MockSignalConfigurationStore{
		IsEnabledFunc: &SignalConfigurationStoreIsEnabledFunc{
			defaultHook: func(context.Context, string) (bool, error) {
				panic("unexpected invocation of MockSignalConfigurationStore.IsEnabled")
			},
		},
		LoadConfigurationsFunc: &SignalConfigurationStoreLoadConfigurationsFunc{
			defaultHook: func(context.Context, LoadSignalConfigurationArgs) ([]SignalConfiguration, error) {
				panic("unexpected invocation of MockSignalConfigurationStore.LoadConfigurations")
			},
		},
		UpdateConfigurationFunc: &SignalConfigurationStoreUpdateConfigurationFunc{
			defaultHook: func(context.Context, UpdateSignalConfigurationArgs) error {
				panic("unexpected invocation of MockSignalConfigurationStore.UpdateConfiguration")
			},
		},
		WithTransactFunc: &SignalConfigurationStoreWithTransactFunc{
			defaultHook: func(context.Context, func(store SignalConfigurationStore) error) error {
				panic("unexpected invocation of MockSignalConfigurationStore.WithTransact")
			},
		},
	}
}

// NewMockSignalConfigurationStoreFrom creates a new mock of the
// MockSignalConfigurationStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockSignalConfigurationStoreFrom(i SignalConfigurationStore) *MockSignalConfigurationStore {
	return &MockSignalConfigurationStore{
		IsEnabledFunc: &SignalConfigurationStoreIsEnabledFunc{
			defaultHook: i.IsEnabled,
		},
		LoadConfigurationsFunc: &SignalConfigurationStoreLoadConfigurationsFunc{
			defaultHook: i.LoadConfigurations,
		},
		UpdateConfigurationFunc: &SignalConfigurationStoreUpdateConfigurationFunc{
			defaultHook: i.UpdateConfiguration,
		},
		WithTransactFunc: &SignalConfigurationStoreWithTransactFunc{
			defaultHook: i.WithTransact,
		},
	}
}

// SignalConfigurationStoreIsEnabledFunc describes the behavior when the
// IsEnabled method of the parent MockSignalConfigurationStore instance is
// invoked.
type SignalConfigurationStoreIsEnabledFunc struct {
	defaultHook func(context.Context, string) (bool, error)
	hooks       []func(context.Context, string) (bool, error)
	history     []SignalConfigurationStoreIsEnabledFuncCall
	mutex       sync.Mutex
}

// IsEnabled delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSignalConfigurationStore) IsEnabled(v0 context.Context, v1 string) (bool, error) {
	r0, r1 := m.IsEnabledFunc.nextHook()(v0, v1)
	m.IsEnabledFunc.appendCall(SignalConfigurationStoreIsEnabledFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IsEnabled method of
// the parent MockSignalConfigurationStore instance is invoked and the hook
// queue is empty.
func (f *SignalConfigurationStoreIsEnabledFunc) SetDefaultHook(hook func(context.Context, string) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsEnabled method of the parent MockSignalConfigurationStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *SignalConfigurationStoreIsEnabledFunc) PushHook(hook func(context.Context, string) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SignalConfigurationStoreIsEnabledFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SignalConfigurationStoreIsEnabledFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, string) (bool, error) {
		return r0, r1
	})
}

func (f *SignalConfigurationStoreIsEnabledFunc) nextHook() func(context.Context, string) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SignalConfigurationStoreIsEnabledFunc) appendCall(r0 SignalConfigurationStoreIsEnabledFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SignalConfigurationStoreIsEnabledFuncCall
// objects describing the invocations of this function.
func (f *SignalConfigurationStoreIsEnabledFunc) History() []SignalConfigurationStoreIsEnabledFuncCall {
	f.mutex.Lock()
	history := make([]SignalConfigurationStoreIsEnabledFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SignalConfigurationStoreIsEnabledFuncCall is an object that describes an
// invocation of method IsEnabled on an instance of
// MockSignalConfigurationStore.
type SignalConfigurationStoreIsEnabledFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SignalConfigurationStoreIsEnabledFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SignalConfigurationStoreIsEnabledFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SignalConfigurationStoreLoadConfigurationsFunc describes the behavior
// when the LoadConfigurations method of the parent
// MockSignalConfigurationStore instance is invoked.
type SignalConfigurationStoreLoadConfigurationsFunc struct {
	defaultHook func(context.Context, LoadSignalConfigurationArgs) ([]SignalConfiguration, error)
	hooks       []func(context.Context, LoadSignalConfigurationArgs) ([]SignalConfiguration, error)
	history     []SignalConfigurationStoreLoadConfigurationsFuncCall
	mutex       sync.Mutex
}

// LoadConfigurations delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSignalConfigurationStore) LoadConfigurations(v0 context.Context, v1 LoadSignalConfigurationArgs) ([]SignalConfiguration, error) {
	r0, r1 := m.LoadConfigurationsFunc.nextHook()(v0, v1)
	m.LoadConfigurationsFunc.appendCall(SignalConfigurationStoreLoadConfigurationsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the LoadConfigurations
// method of the parent MockSignalConfigurationStore instance is invoked and
// the hook queue is empty.
func (f *SignalConfigurationStoreLoadConfigurationsFunc) SetDefaultHook(hook func(context.Context, LoadSignalConfigurationArgs) ([]SignalConfiguration, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LoadConfigurations method of the parent MockSignalConfigurationStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *SignalConfigurationStoreLoadConfigurationsFunc) PushHook(hook func(context.Context, LoadSignalConfigurationArgs) ([]SignalConfiguration, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SignalConfigurationStoreLoadConfigurationsFunc) SetDefaultReturn(r0 []SignalConfiguration, r1 error) {
	f.SetDefaultHook(func(context.Context, LoadSignalConfigurationArgs) ([]SignalConfiguration, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SignalConfigurationStoreLoadConfigurationsFunc) PushReturn(r0 []SignalConfiguration, r1 error) {
	f.PushHook(func(context.Context, LoadSignalConfigurationArgs) ([]SignalConfiguration, error) {
		return r0, r1
	})
}

func (f *SignalConfigurationStoreLoadConfigurationsFunc) nextHook() func(context.Context, LoadSignalConfigurationArgs) ([]SignalConfiguration, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SignalConfigurationStoreLoadConfigurationsFunc) appendCall(r0 SignalConfigurationStoreLoadConfigurationsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SignalConfigurationStoreLoadConfigurationsFuncCall objects describing the
// invocations of this function.
func (f *SignalConfigurationStoreLoadConfigurationsFunc) History() []SignalConfigurationStoreLoadConfigurationsFuncCall {
	f.mutex.Lock()
	history := make([]SignalConfigurationStoreLoadConfigurationsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SignalConfigurationStoreLoadConfigurationsFuncCall is an object that
// describes an invocation of method LoadConfigurations on an instance of
// MockSignalConfigurationStore.
type SignalConfigurationStoreLoadConfigurationsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 LoadSignalConfigurationArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []SignalConfiguration
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SignalConfigurationStoreLoadConfigurationsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SignalConfigurationStoreLoadConfigurationsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SignalConfigurationStoreUpdateConfigurationFunc describes the behavior
// when the UpdateConfiguration method of the parent
// MockSignalConfigurationStore instance is invoked.
type SignalConfigurationStoreUpdateConfigurationFunc struct {
	defaultHook func(context.Context, UpdateSignalConfigurationArgs) error
	hooks       []func(context.Context, UpdateSignalConfigurationArgs) error
	history     []SignalConfigurationStoreUpdateConfigurationFuncCall
	mutex       sync.Mutex
}

// UpdateConfiguration delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSignalConfigurationStore) UpdateConfiguration(v0 context.Context, v1 UpdateSignalConfigurationArgs) error {
	r0 := m.UpdateConfigurationFunc.nextHook()(v0, v1)
	m.UpdateConfigurationFunc.appendCall(SignalConfigurationStoreUpdateConfigurationFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UpdateConfiguration
// method of the parent MockSignalConfigurationStore instance is invoked and
// the hook queue is empty.
func (f *SignalConfigurationStoreUpdateConfigurationFunc) SetDefaultHook(hook func(context.Context, UpdateSignalConfigurationArgs) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateConfiguration method of the parent MockSignalConfigurationStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *SignalConfigurationStoreUpdateConfigurationFunc) PushHook(hook func(context.Context, UpdateSignalConfigurationArgs) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SignalConfigurationStoreUpdateConfigurationFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, UpdateSignalConfigurationArgs) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SignalConfigurationStoreUpdateConfigurationFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, UpdateSignalConfigurationArgs) error {
		return r0
	})
}

func (f *SignalConfigurationStoreUpdateConfigurationFunc) nextHook() func(context.Context, UpdateSignalConfigurationArgs) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SignalConfigurationStoreUpdateConfigurationFunc) appendCall(r0 SignalConfigurationStoreUpdateConfigurationFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SignalConfigurationStoreUpdateConfigurationFuncCall objects describing
// the invocations of this function.
func (f *SignalConfigurationStoreUpdateConfigurationFunc) History() []SignalConfigurationStoreUpdateConfigurationFuncCall {
	f.mutex.Lock()
	history := make([]SignalConfigurationStoreUpdateConfigurationFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SignalConfigurationStoreUpdateConfigurationFuncCall is an object that
// describes an invocation of method UpdateConfiguration on an instance of
// MockSignalConfigurationStore.
type SignalConfigurationStoreUpdateConfigurationFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 UpdateSignalConfigurationArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SignalConfigurationStoreUpdateConfigurationFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SignalConfigurationStoreUpdateConfigurationFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SignalConfigurationStoreWithTransactFunc describes the behavior when the
// WithTransact method of the parent MockSignalConfigurationStore instance
// is invoked.
type SignalConfigurationStoreWithTransactFunc struct {
	defaultHook func(context.Context, func(store SignalConfigurationStore) error) error
	hooks       []func(context.Context, func(store SignalConfigurationStore) error) error
	history     []SignalConfigurationStoreWithTransactFuncCall
	mutex       sync.Mutex
}

// WithTransact delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockSignalConfigurationStore) WithTransact(v0 context.Context, v1 func(store SignalConfigurationStore) error) error {
	r0 := m.WithTransactFunc.nextHook()(v0, v1)
	m.WithTransactFunc.appendCall(SignalConfigurationStoreWithTransactFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithTransact method
// of the parent MockSignalConfigurationStore instance is invoked and the
// hook queue is empty.
func (f *SignalConfigurationStoreWithTransactFunc) SetDefaultHook(hook func(context.Context, func(store SignalConfigurationStore) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithTransact method of the parent MockSignalConfigurationStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *SignalConfigurationStoreWithTransactFunc) PushHook(hook func(context.Context, func(store SignalConfigurationStore) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SignalConfigurationStoreWithTransactFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, func(store SignalConfigurationStore) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SignalConfigurationStoreWithTransactFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, func(store SignalConfigurationStore) error) error {
		return r0
	})
}

func (f *SignalConfigurationStoreWithTransactFunc) nextHook() func(context.Context, func(store SignalConfigurationStore) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SignalConfigurationStoreWithTransactFunc) appendCall(r0 SignalConfigurationStoreWithTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SignalConfigurationStoreWithTransactFuncCall objects describing the
// invocations of this function.
func (f *SignalConfigurationStoreWithTransactFunc) History() []SignalConfigurationStoreWithTransactFuncCall {
	f.mutex.Lock()
	history := make([]SignalConfigurationStoreWithTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SignalConfigurationStoreWithTransactFuncCall is an object that describes
// an invocation of method WithTransact on an instance of
// MockSignalConfigurationStore.
type SignalConfigurationStoreWithTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 func(store SignalConfigurationStore) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SignalConfigurationStoreWithTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SignalConfigurationStoreWithTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockTeamStore is a mock implementation of the TeamStore interface (from
// the package github.com/sourcegraph/sourcegraph/internal/database) used
// for unit testing.
type MockTeamStore struct {
	// ContainsTeamFunc is an instance of a mock function object controlling
	// the behavior of the method ContainsTeam.
	ContainsTeamFunc *TeamStoreContainsTeamFunc
	// CountTeamMembersFunc is an instance of a mock function object
	// controlling the behavior of the method CountTeamMembers.
	CountTeamMembersFunc *TeamStoreCountTeamMembersFunc
	// CountTeamsFunc is an instance of a mock function object controlling
	// the behavior of the method CountTeams.
	CountTeamsFunc *TeamStoreCountTeamsFunc
	// CreateTeamFunc is an instance of a mock function object controlling
	// the behavior of the method CreateTeam.
	CreateTeamFunc *TeamStoreCreateTeamFunc
	// CreateTeamMemberFunc is an instance of a mock function object
	// controlling the behavior of the method CreateTeamMember.
	CreateTeamMemberFunc *TeamStoreCreateTeamMemberFunc
	// DeleteTeamFunc is an instance of a mock function object controlling
	// the behavior of the method DeleteTeam.
	DeleteTeamFunc *TeamStoreDeleteTeamFunc
	// DeleteTeamMemberFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteTeamMember.
	DeleteTeamMemberFunc *TeamStoreDeleteTeamMemberFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *TeamStoreDoneFunc
	// GetTeamByIDFunc is an instance of a mock function object controlling
	// the behavior of the method GetTeamByID.
	GetTeamByIDFunc *TeamStoreGetTeamByIDFunc
	// GetTeamByNameFunc is an instance of a mock function object
	// controlling the behavior of the method GetTeamByName.
	GetTeamByNameFunc *TeamStoreGetTeamByNameFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *TeamStoreHandleFunc
	// IsTeamMemberFunc is an instance of a mock function object controlling
	// the behavior of the method IsTeamMember.
	IsTeamMemberFunc *TeamStoreIsTeamMemberFunc
	// ListTeamMembersFunc is an instance of a mock function object
	// controlling the behavior of the method ListTeamMembers.
	ListTeamMembersFunc *TeamStoreListTeamMembersFunc
	// ListTeamsFunc is an instance of a mock function object controlling
	// the behavior of the method ListTeams.
	ListTeamsFunc *TeamStoreListTeamsFunc
	// UpdateTeamFunc is an instance of a mock function object controlling
	// the behavior of the method UpdateTeam.
	UpdateTeamFunc *TeamStoreUpdateTeamFunc
}

// NewMockTeamStore creates a new mock of the TeamStore interface. All
// methods return zero values for all results, unless overwritten.
func NewMockTeamStore() *MockTeamStore {
	return &MockTeamStore{
		ContainsTeamFunc: &TeamStoreContainsTeamFunc{
			defaultHook: func(context.Context, int32, ListTeamsOpts) (r0 bool, r1 error) {
				return
			},
		},
		CountTeamMembersFunc: &TeamStoreCountTeamMembersFunc{
			defaultHook: func(context.Context, ListTeamMembersOpts) (r0 int32, r1 error) {
				return
			},
		},
		CountTeamsFunc: &TeamStoreCountTeamsFunc{
			defaultHook: func(context.Context, ListTeamsOpts) (r0 int32, r1 error) {
				return
			},
		},
		CreateTeamFunc: &TeamStoreCreateTeamFunc{
			defaultHook: func(context.Context, *types.Team) (r0 error) {
				return
			},
		},
		CreateTeamMemberFunc: &TeamStoreCreateTeamMemberFunc{
			defaultHook: func(context.Context, ...*types.TeamMember) (r0 error) {
				return
			},
		},
		DeleteTeamFunc: &TeamStoreDeleteTeamFunc{
			defaultHook: func(context.Context, int32) (r0 error) {
				return
			},
		},
		DeleteTeamMemberFunc: &TeamStoreDeleteTeamMemberFunc{
			defaultHook: func(context.Context, ...*types.TeamMember) (r0 error) {
				return
			},
		},
		DoneFunc: &TeamStoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		GetTeamByIDFunc: &TeamStoreGetTeamByIDFunc{
			defaultHook: func(context.Context, int32) (r0 *types.Team, r1 error) {
				return
			},
		},
		GetTeamByNameFunc: &TeamStoreGetTeamByNameFunc{
			defaultHook: func(context.Context, string) (r0 *types.Team, r1 error) {
				return
			},
		},
		HandleFunc: &TeamStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		IsTeamMemberFunc: &TeamStoreIsTeamMemberFunc{
			defaultHook: func(context.Context, int32, int32) (r0 bool, r1 error) {
				return
			},
		},
		ListTeamMembersFunc: &TeamStoreListTeamMembersFunc{
			defaultHook: func(context.Context, ListTeamMembersOpts) (r0 []*types.TeamMember, r1 *TeamMemberListCursor, r2 error) {
				return
			},
		},
		ListTeamsFunc: &TeamStoreListTeamsFunc{
			defaultHook: func(context.Context, ListTeamsOpts) (r0 []*types.Team, r1 int32, r2 error) {
				return
			},
		},
		UpdateTeamFunc: &TeamStoreUpdateTeamFunc{
			defaultHook: func(context.Context, *types.Team) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockTeamStore creates a new mock of the TeamStore interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockTeamStore() *MockTeamStore {
	return &MockTeamStore{
		ContainsTeamFunc: &TeamStoreContainsTeamFunc{
			defaultHook: func(context.Context, int32, ListTeamsOpts) (bool, error) {
				panic("unexpected invocation of MockTeamStore.ContainsTeam")
			},
		},
		CountTeamMembersFunc: &TeamStoreCountTeamMembersFunc{
			defaultHook: func(context.Context, ListTeamMembersOpts) (int32, error) {
				panic("unexpected invocation of MockTeamStore.CountTeamMembers")
			},
		},
		CountTeamsFunc: &TeamStoreCountTeamsFunc{
			defaultHook: func(context.Context, ListTeamsOpts) (int32, error) {
				panic("unexpected invocation of MockTeamStore.CountTeams")
			},
		},
		CreateTeamFunc: &TeamStoreCreateTeamFunc{
			defaultHook: func(context.Context, *types.Team) error {
				panic("unexpected invocation of MockTeamStore.CreateTeam")
			},
		},
		CreateTeamMemberFunc: &TeamStoreCreateTeamMemberFunc{
			defaultHook: func(context.Context, ...*types.TeamMember) error {
				panic("unexpected invocation of MockTeamStore.CreateTeamMember")
			},
		},
		DeleteTeamFunc: &TeamStoreDeleteTeamFunc{
			defaultHook: func(context.Context, int32) error {
				panic("unexpected invocation of MockTeamStore.DeleteTeam")
			},
		},
		DeleteTeamMemberFunc: &TeamStoreDeleteTeamMemberFunc{
			defaultHook: func(context.Context, ...*types.TeamMember) error {
				panic("unexpected invocation of MockTeamStore.DeleteTeamMember")
			},
		},
		DoneFunc: &TeamStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockTeamStore.Done")
			},
		},
		GetTeamByIDFunc: &TeamStoreGetTeamByIDFunc{
			defaultHook: func(context.Context, int32) (*types.Team, error) {
				panic("unexpected invocation of MockTeamStore.GetTeamByID")
			},
		},
		GetTeamByNameFunc: &TeamStoreGetTeamByNameFunc{
			defaultHook: func(context.Context, string) (*types.Team, error) {
				panic("unexpected invocation of MockTeamStore.GetTeamByName")
			},
		},
		HandleFunc: &TeamStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockTeamStore.Handle")
			},
		},
		IsTeamMemberFunc: &TeamStoreIsTeamMemberFunc{
			defaultHook: func(context.Context, int32, int32) (bool, error) {
				panic("unexpected invocation of MockTeamStore.IsTeamMember")
			},
		},
		ListTeamMembersFunc: &TeamStoreListTeamMembersFunc{
			defaultHook: func(context.Context, ListTeamMembersOpts) ([]*types.TeamMember, *TeamMemberListCursor, error) {
				panic("unexpected invocation of MockTeamStore.ListTeamMembers")
			},
		},
		ListTeamsFunc: &TeamStoreListTeamsFunc{
			defaultHook: func(context.Context, ListTeamsOpts) ([]*types.Team, int32, error) {
				panic("unexpected invocation of MockTeamStore.ListTeams")
			},
		},
		UpdateTeamFunc: &TeamStoreUpdateTeamFunc{
			defaultHook: func(context.Context, *types.Team) error {
				panic("unexpected invocation of MockTeamStore.UpdateTeam")
			},
		},
	}
}

// NewMockTeamStoreFrom creates a new mock of the MockTeamStore interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockTeamStoreFrom(i TeamStore) *MockTeamStore {
	return &MockTeamStore{
		ContainsTeamFunc: &TeamStoreContainsTeamFunc{
			defaultHook: i.ContainsTeam,
		},
		CountTeamMembersFunc: &TeamStoreCountTeamMembersFunc{
			defaultHook: i.CountTeamMembers,
		},
		CountTeamsFunc: &TeamStoreCountTeamsFunc{
			defaultHook: i.CountTeams,
		},
		CreateTeamFunc: &TeamStoreCreateTeamFunc{
			defaultHook: i.CreateTeam,
		},
		CreateTeamMemberFunc: &TeamStoreCreateTeamMemberFunc{
			defaultHook: i.CreateTeamMember,
		},
		DeleteTeamFunc: &TeamStoreDeleteTeamFunc{
			defaultHook: i.DeleteTeam,
		},
		DeleteTeamMemberFunc: &TeamStoreDeleteTeamMemberFunc{
			defaultHook: i.DeleteTeamMember,
		},
		DoneFunc: &TeamStoreDoneFunc{
			defaultHook: i.Done,
		},
		GetTeamByIDFunc: &TeamStoreGetTeamByIDFunc{
			defaultHook: i.GetTeamByID,
		},
		GetTeamByNameFunc: &TeamStoreGetTeamByNameFunc{
			defaultHook: i.GetTeamByName,
		},
		HandleFunc: &TeamStoreHandleFunc{
			defaultHook: i.Handle,
		},
		IsTeamMemberFunc: &TeamStoreIsTeamMemberFunc{
			defaultHook: i.IsTeamMember,
		},
		ListTeamMembersFunc: &TeamStoreListTeamMembersFunc{
			defaultHook: i.ListTeamMembers,
		},
		ListTeamsFunc: &TeamStoreListTeamsFunc{
			defaultHook: i.ListTeams,
		},
		UpdateTeamFunc: &TeamStoreUpdateTeamFunc{
			defaultHook: i.UpdateTeam,
		},
	}
}

// TeamStoreContainsTeamFunc describes the behavior when the ContainsTeam
// method of the parent MockTeamStore instance is invoked.
type TeamStoreContainsTeamFunc struct {
	defaultHook func(context.Context, int32, ListTeamsOpts) (bool, error)
	hooks       []func(context.Context, int32, ListTeamsOpts) (bool, error)
	history     []TeamStoreContainsTeamFuncCall
	mutex       sync.Mutex
}

// ContainsTeam delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockTeamStore) ContainsTeam(v0 context.Context, v1 int32, v2 ListTeamsOpts) (bool, error) {
	r0, r1 := m.ContainsTeamFunc.nextHook()(v0, v1, v2)
	m.ContainsTeamFunc.appendCall(TeamStoreContainsTeamFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ContainsTeam method
// of the parent MockTeamStore instance is invoked and the hook queue is
// empty.
func (f *TeamStoreContainsTeamFunc) SetDefaultHook(hook func(context.Context, int32, ListTeamsOpts) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ContainsTeam method of the parent MockTeamStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *TeamStoreContainsTeamFunc) PushHook(hook func(context.Context, int32, ListTeamsOpts) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TeamStoreContainsTeamFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, ListTeamsOpts) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TeamStoreContainsTeamFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int32, ListTeamsOpts) (bool, error) {
		return r0, r1
	})
}

func (f *TeamStoreContainsTeamFunc) nextHook() func(context.Context, int32, ListTeamsOpts) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TeamStoreContainsTeamFunc) appendCall(r0 TeamStoreContainsTeamFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TeamStoreContainsTeamFuncCall objects
// describing the invocations of this function.
func (f *TeamStoreContainsTeamFunc) History() []TeamStoreContainsTeamFuncCall {
	f.mutex.Lock()
	history := make([]TeamStoreContainsTeamFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TeamStoreContainsTeamFuncCall is an object that describes an invocation
// of method ContainsTeam on an instance of MockTeamStore.
type TeamStoreContainsTeamFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 ListTeamsOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TeamStoreContainsTeamFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TeamStoreContainsTeamFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// TeamStoreCountTeamMembersFunc describes the behavior when the
// CountTeamMembers method of the parent MockTeamStore instance is invoked.
type TeamStoreCountTeamMembersFunc struct {
	defaultHook func(context.Context, ListTeamMembersOpts) (int32, error)
	hooks       []func(context.Context, ListTeamMembersOpts) (int32, error)
	history     []TeamStoreCountTeamMembersFuncCall
	mutex       sync.Mutex
}

// CountTeamMembers delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockTeamStore) CountTeamMembers(v0 context.Context, v1 ListTeamMembersOpts) (int32, error) {
	r0, r1 := m.CountTeamMembersFunc.nextHook()(v0, v1)
	m.CountTeamMembersFunc.appendCall(TeamStoreCountTeamMembersFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CountTeamMembers
// method of the parent MockTeamStore instance is invoked and the hook queue
// is empty.
func (f *TeamStoreCountTeamMembersFunc) SetDefaultHook(hook func(context.Context, ListTeamMembersOpts) (int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountTeamMembers method of the parent MockTeamStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *TeamStoreCountTeamMembersFunc) PushHook(hook func(context.Context, ListTeamMembersOpts) (int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TeamStoreCountTeamMembersFunc) SetDefaultReturn(r0 int32, r1 error) {
	f.SetDefaultHook(func(context.Context, ListTeamMembersOpts) (int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TeamStoreCountTeamMembersFunc) PushReturn(r0 int32, r1 error) {
	f.PushHook(func(context.Context, ListTeamMembersOpts) (int32, error) {
		return r0, r1
	})
}

func (f *TeamStoreCountTeamMembersFunc) nextHook() func(context.Context, ListTeamMembersOpts) (int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TeamStoreCountTeamMembersFunc) appendCall(r0 TeamStoreCountTeamMembersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TeamStoreCountTeamMembersFuncCall objects
// describing the invocations of this function.
func (f *TeamStoreCountTeamMembersFunc) History() []TeamStoreCountTeamMembersFuncCall {
	f.mutex.Lock()
	history := make([]TeamStoreCountTeamMembersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TeamStoreCountTeamMembersFuncCall is an object that describes an
// invocation of method CountTeamMembers on an instance of MockTeamStore.
type TeamStoreCountTeamMembersFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ListTeamMembersOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TeamStoreCountTeamMembersFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TeamStoreCountTeamMembersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// TeamStoreCountTeamsFunc describes the behavior when the CountTeams method
// of the parent MockTeamStore instance is invoked.
type TeamStoreCountTeamsFunc struct {
	defaultHook func(context.Context, ListTeamsOpts) (int32, error)
	hooks       []func(context.Context, ListTeamsOpts) (int32, error)
	history     []TeamStoreCountTeamsFuncCall
	mutex       sync.Mutex
}

// CountTeams delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockTeamStore) CountTeams(v0 context.Context, v1 ListTeamsOpts) (int32, error) {
	r0, r1 := m.CountTeamsFunc.nextHook()(v0, v1)
	m.CountTeamsFunc.appendCall(TeamStoreCountTeamsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CountTeams method of
// the parent MockTeamStore instance is invoked and the hook queue is empty.
func (f *TeamStoreCountTeamsFunc) SetDefaultHook(hook func(context.Context, ListTeamsOpts) (int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountTeams method of the parent MockTeamStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *TeamStoreCountTeamsFunc) PushHook(hook func(context.Context, ListTeamsOpts) (int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TeamStoreCountTeamsFunc) SetDefaultReturn(r0 int32, r1 error) {
	f.SetDefaultHook(func(context.Context, ListTeamsOpts) (int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TeamStoreCountTeamsFunc) PushReturn(r0 int32, r1 error) {
	f.PushHook(func(context.Context, ListTeamsOpts) (int32, error) {
		return r0, r1
	})
}

func (f *TeamStoreCountTeamsFunc) nextHook() func(context.Context, ListTeamsOpts) (int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TeamStoreCountTeamsFunc) appendCall(r0 TeamStoreCountTeamsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TeamStoreCountTeamsFuncCall objects
// describing the invocations of this function.
func (f *TeamStoreCountTeamsFunc) History() []TeamStoreCountTeamsFuncCall {
	f.mutex.Lock()
	history := make([]TeamStoreCountTeamsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TeamStoreCountTeamsFuncCall is an object that describes an invocation of
// method CountTeams on an instance of MockTeamStore.
type TeamStoreCountTeamsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ListTeamsOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TeamStoreCountTeamsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TeamStoreCountTeamsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// TeamStoreCreateTeamFunc describes the behavior when the CreateTeam method
// of the parent MockTeamStore instance is invoked.
type TeamStoreCreateTeamFunc struct {
	defaultHook func(context.Context, *types.Team) error
	hooks       []func(context.Context, *types.Team) error
	history     []TeamStoreCreateTeamFuncCall
	mutex       sync.Mutex
}

// CreateTeam delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockTeamStore) CreateTeam(v0 context.Context, v1 *types.Team) error {
	r0 := m.CreateTeamFunc.nextHook()(v0, v1)
	m.CreateTeamFunc.appendCall(TeamStoreCreateTeamFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the CreateTeam method of
// the parent MockTeamStore instance is invoked and the hook queue is empty.
func (f *TeamStoreCreateTeamFunc) SetDefaultHook(hook func(context.Context, *types.Team) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateTeam method of the parent MockTeamStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *TeamStoreCreateTeamFunc) PushHook(hook func(context.Context, *types.Team) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TeamStoreCreateTeamFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *types.Team) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TeamStoreCreateTeamFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *types.Team) error {
		return r0
	})
}

func (f *TeamStoreCreateTeamFunc) nextHook() func(context.Context, *types.Team) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TeamStoreCreateTeamFunc) appendCall(r0 TeamStoreCreateTeamFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TeamStoreCreateTeamFuncCall objects
// describing the invocations of this function.
func (f *TeamStoreCreateTeamFunc) History() []TeamStoreCreateTeamFuncCall {
	f.mutex.Lock()
	history := make([]TeamStoreCreateTeamFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TeamStoreCreateTeamFuncCall is an object that describes an invocation of
// method CreateTeam on an instance of MockTeamStore.
type TeamStoreCreateTeamFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.Team
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TeamStoreCreateTeamFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TeamStoreCreateTeamFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TeamStoreCreateTeamMemberFunc describes the behavior when the
// CreateTeamMember method of the parent MockTeamStore instance is invoked.
type TeamStoreCreateTeamMemberFunc struct {
	defaultHook func(context.Context, ...*types.TeamMember) error
	hooks       []func(context.Context, ...*types.TeamMember) error
	history     []TeamStoreCreateTeamMemberFuncCall
	mutex       sync.Mutex
}

// CreateTeamMember delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockTeamStore) CreateTeamMember(v0 context.Context, v1 ...*types.TeamMember) error {
	r0 := m.CreateTeamMemberFunc.nextHook()(v0, v1...)
	m.CreateTeamMemberFunc.appendCall(TeamStoreCreateTeamMemberFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the CreateTeamMember
// method of the parent MockTeamStore instance is invoked and the hook queue
// is empty.
func (f *TeamStoreCreateTeamMemberFunc) SetDefaultHook(hook func(context.Context, ...*types.TeamMember) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateTeamMember method of the parent MockTeamStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *TeamStoreCreateTeamMemberFunc) PushHook(hook func(context.Context, ...*types.TeamMember) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TeamStoreCreateTeamMemberFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ...*types.TeamMember) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TeamStoreCreateTeamMemberFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ...*types.TeamMember) error {
		return r0
	})
}

func (f *TeamStoreCreateTeamMemberFunc) nextHook() func(context.Context, ...*types.TeamMember) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TeamStoreCreateTeamMemberFunc) appendCall(r0 TeamStoreCreateTeamMemberFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TeamStoreCreateTeamMemberFuncCall objects
// describing the invocations of this function.
func (f *TeamStoreCreateTeamMemberFunc) History() []TeamStoreCreateTeamMemberFuncCall {
	f.mutex.Lock()
	history := make([]TeamStoreCreateTeamMemberFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TeamStoreCreateTeamMemberFuncCall is an object that describes an
// invocation of method CreateTeamMember on an instance of MockTeamStore.
type TeamStoreCreateTeamMemberFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []*types.TeamMember
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c TeamStoreCreateTeamMemberFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TeamStoreCreateTeamMemberFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TeamStoreDeleteTeamFunc describes the behavior when the DeleteTeam method
// of the parent MockTeamStore instance is invoked.
type TeamStoreDeleteTeamFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []TeamStoreDeleteTeamFuncCall
	mutex       sync.Mutex
}

// DeleteTeam delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockTeamStore) DeleteTeam(v0 context.Context, v1 int32) error {
	r0 := m.DeleteTeamFunc.nextHook()(v0, v1)
	m.DeleteTeamFunc.appendCall(TeamStoreDeleteTeamFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteTeam method of
// the parent MockTeamStore instance is invoked and the hook queue is empty.
func (f *TeamStoreDeleteTeamFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteTeam method of the parent MockTeamStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *TeamStoreDeleteTeamFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TeamStoreDeleteTeamFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TeamStoreDeleteTeamFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *TeamStoreDeleteTeamFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TeamStoreDeleteTeamFunc) appendCall(r0 TeamStoreDeleteTeamFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TeamStoreDeleteTeamFuncCall objects
// describing the invocations of this function.
func (f *TeamStoreDeleteTeamFunc) History() []TeamStoreDeleteTeamFuncCall {
	f.mutex.Lock()
	history := make([]TeamStoreDeleteTeamFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TeamStoreDeleteTeamFuncCall is an object that describes an invocation of
// method DeleteTeam on an instance of MockTeamStore.
type TeamStoreDeleteTeamFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TeamStoreDeleteTeamFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TeamStoreDeleteTeamFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TeamStoreDeleteTeamMemberFunc describes the behavior when the
// DeleteTeamMember method of the parent MockTeamStore instance is invoked.
type TeamStoreDeleteTeamMemberFunc struct {
	defaultHook func(context.Context, ...*types.TeamMember) error
	hooks       []func(context.Context, ...*types.TeamMember) error
	history     []TeamStoreDeleteTeamMemberFuncCall
	mutex       sync.Mutex
}

// DeleteTeamMember delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockTeamStore) DeleteTeamMember(v0 context.Context, v1 ...*types.TeamMember) error {
	r0 := m.DeleteTeamMemberFunc.nextHook()(v0, v1...)
	m.DeleteTeamMemberFunc.appendCall(TeamStoreDeleteTeamMemberFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteTeamMember
// method of the parent MockTeamStore instance is invoked and the hook queue
// is empty.
func (f *TeamStoreDeleteTeamMemberFunc) SetDefaultHook(hook func(context.Context, ...*types.TeamMember) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteTeamMember method of the parent MockTeamStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *TeamStoreDeleteTeamMemberFunc) PushHook(hook func(context.Context, ...*types.TeamMember) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TeamStoreDeleteTeamMemberFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ...*types.TeamMember) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TeamStoreDeleteTeamMemberFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ...*types.TeamMember) error {
		return r0
	})
}

func (f *TeamStoreDeleteTeamMemberFunc) nextHook() func(context.Context, ...*types.TeamMember) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TeamStoreDeleteTeamMemberFunc) appendCall(r0 TeamStoreDeleteTeamMemberFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TeamStoreDeleteTeamMemberFuncCall objects
// describing the invocations of this function.
func (f *TeamStoreDeleteTeamMemberFunc) History() []TeamStoreDeleteTeamMemberFuncCall {
	f.mutex.Lock()
	history := make([]TeamStoreDeleteTeamMemberFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TeamStoreDeleteTeamMemberFuncCall is an object that describes an
// invocation of method DeleteTeamMember on an instance of MockTeamStore.
type TeamStoreDeleteTeamMemberFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []*types.TeamMember
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c TeamStoreDeleteTeamMemberFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TeamStoreDeleteTeamMemberFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TeamStoreDoneFunc describes the behavior when the Done method of the
// parent MockTeamStore instance is invoked.
type TeamStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []TeamStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTeamStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(TeamStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockTeamStore instance is invoked and the hook queue is empty.
func (f *TeamStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockTeamStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *TeamStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TeamStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TeamStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *TeamStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TeamStoreDoneFunc) appendCall(r0 TeamStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TeamStoreDoneFuncCall objects describing
// the invocations of this function.
func (f *TeamStoreDoneFunc) History() []TeamStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]TeamStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TeamStoreDoneFuncCall is an object that describes an invocation of method
// Done on an instance of MockTeamStore.
type TeamStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TeamStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TeamStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TeamStoreGetTeamByIDFunc describes the behavior when the GetTeamByID
// method of the parent MockTeamStore instance is invoked.
type TeamStoreGetTeamByIDFunc struct {
	defaultHook func(context.Context, int32) (*types.Team, error)
	hooks       []func(context.Context, int32) (*types.Team, error)
	history     []TeamStoreGetTeamByIDFuncCall
	mutex       sync.Mutex
}

// GetTeamByID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockTeamStore) GetTeamByID(v0 context.Context, v1 int32) (*types.Team, error) {
	r0, r1 := m.GetTeamByIDFunc.nextHook()(v0, v1)
	m.GetTeamByIDFunc.appendCall(TeamStoreGetTeamByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetTeamByID method
// of the parent MockTeamStore instance is invoked and the hook queue is
// empty.
func (f *TeamStoreGetTeamByIDFunc) SetDefaultHook(hook func(context.Context, int32) (*types.Team, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTeamByID method of the parent MockTeamStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *TeamStoreGetTeamByIDFunc) PushHook(hook func(context.Context, int32) (*types.Team, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TeamStoreGetTeamByIDFunc) SetDefaultReturn(r0 *types.Team, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (*types.Team, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TeamStoreGetTeamByIDFunc) PushReturn(r0 *types.Team, r1 error) {
	f.PushHook(func(context.Context, int32) (*types.Team, error) {
		return r0, r1
	})
}

func (f *TeamStoreGetTeamByIDFunc) nextHook() func(context.Context, int32) (*types.Team, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TeamStoreGetTeamByIDFunc) appendCall(r0 TeamStoreGetTeamByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TeamStoreGetTeamByIDFuncCall objects
// describing the invocations of this function.
func (f *TeamStoreGetTeamByIDFunc) History() []TeamStoreGetTeamByIDFuncCall {
	f.mutex.Lock()
	history := make([]TeamStoreGetTeamByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TeamStoreGetTeamByIDFuncCall is an object that describes an invocation of
// method GetTeamByID on an instance of MockTeamStore.
type TeamStoreGetTeamByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Team
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TeamStoreGetTeamByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TeamStoreGetTeamByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// TeamStoreGetTeamByNameFunc describes the behavior when the GetTeamByName
// method of the parent MockTeamStore instance is invoked.
type TeamStoreGetTeamByNameFunc struct {
	defaultHook func(context.Context, string) (*types.Team, error)
	hooks       []func(context.Context, string) (*types.Team, error)
	history     []TeamStoreGetTeamByNameFuncCall
	mutex       sync.Mutex
}

// GetTeamByName delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockTeamStore) GetTeamByName(v0 context.Context, v1 string) (*types.Team, error) {
	r0, r1 := m.GetTeamByNameFunc.nextHook()(v0, v1)
	m.GetTeamByNameFunc.appendCall(TeamStoreGetTeamByNameFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetTeamByName method
// of the parent MockTeamStore instance is invoked and the hook queue is
// empty.
func (f *TeamStoreGetTeamByNameFunc) SetDefaultHook(hook func(context.Context, string) (*types.Team, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTeamByName method of the parent MockTeamStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *TeamStoreGetTeamByNameFunc) PushHook(hook func(context.Context, string) (*types.Team, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TeamStoreGetTeamByNameFunc) SetDefaultReturn(r0 *types.Team, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*types.Team, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TeamStoreGetTeamByNameFunc) PushReturn(r0 *types.Team, r1 error) {
	f.PushHook(func(context.Context, string) (*types.Team, error) {
		return r0, r1
	})
}

func (f *TeamStoreGetTeamByNameFunc) nextHook() func(context.Context, string) (*types.Team, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TeamStoreGetTeamByNameFunc) appendCall(r0 TeamStoreGetTeamByNameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TeamStoreGetTeamByNameFuncCall objects
// describing the invocations of this function.
func (f *TeamStoreGetTeamByNameFunc) History() []TeamStoreGetTeamByNameFuncCall {
	f.mutex.Lock()
	history := make([]TeamStoreGetTeamByNameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TeamStoreGetTeamByNameFuncCall is an object that describes an invocation
// of method GetTeamByName on an instance of MockTeamStore.
type TeamStoreGetTeamByNameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Team
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TeamStoreGetTeamByNameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TeamStoreGetTeamByNameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// TeamStoreHandleFunc describes the behavior when the Handle method of the
// parent MockTeamStore instance is invoked.
type TeamStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []TeamStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTeamStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(TeamStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockTeamStore instance is invoked and the hook queue is empty.
func (f *TeamStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockTeamStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *TeamStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TeamStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TeamStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *TeamStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TeamStoreHandleFunc) appendCall(r0 TeamStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TeamStoreHandleFuncCall objects describing
// the invocations of this function.
func (f *TeamStoreHandleFunc) History() []TeamStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]TeamStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TeamStoreHandleFuncCall is an object that describes an invocation of
// method Handle on an instance of MockTeamStore.
type TeamStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TeamStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TeamStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TeamStoreIsTeamMemberFunc describes the behavior when the IsTeamMember
// method of the parent MockTeamStore instance is invoked.
type TeamStoreIsTeamMemberFunc struct {
	defaultHook func(context.Context, int32, int32) (bool, error)
	hooks       []func(context.Context, int32, int32) (bool, error)
	history     []TeamStoreIsTeamMemberFuncCall
	mutex       sync.Mutex
}

// IsTeamMember delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockTeamStore) IsTeamMember(v0 context.Context, v1 int32, v2 int32) (bool, error) {
	r0, r1 := m.IsTeamMemberFunc.nextHook()(v0, v1, v2)
	m.IsTeamMemberFunc.appendCall(TeamStoreIsTeamMemberFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IsTeamMember method
// of the parent MockTeamStore instance is invoked and the hook queue is
// empty.
func (f *TeamStoreIsTeamMemberFunc) SetDefaultHook(hook func(context.Context, int32, int32) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsTeamMember method of the parent MockTeamStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *TeamStoreIsTeamMemberFunc) PushHook(hook func(context.Context, int32, int32) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TeamStoreIsTeamMemberFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, int32) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TeamStoreIsTeamMemberFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int32, int32) (bool, error) {
		return r0, r1
	})
}

func (f *TeamStoreIsTeamMemberFunc) nextHook() func(context.Context, int32, int32) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TeamStoreIsTeamMemberFunc) appendCall(r0 TeamStoreIsTeamMemberFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TeamStoreIsTeamMemberFuncCall objects
// describing the invocations of this function.
func (f *TeamStoreIsTeamMemberFunc) History() []TeamStoreIsTeamMemberFuncCall {
	f.mutex.Lock()
	history := make([]TeamStoreIsTeamMemberFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TeamStoreIsTeamMemberFuncCall is an object that describes an invocation
// of method IsTeamMember on an instance of MockTeamStore.
type TeamStoreIsTeamMemberFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TeamStoreIsTeamMemberFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TeamStoreIsTeamMemberFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// TeamStoreListTeamMembersFunc describes the behavior when the
// ListTeamMembers method of the parent MockTeamStore instance is invoked.
type TeamStoreListTeamMembersFunc struct {
	defaultHook func(context.Context, ListTeamMembersOpts) ([]*types.TeamMember, *TeamMemberListCursor, error)
	hooks       []func(context.Context, ListTeamMembersOpts) ([]*types.TeamMember, *TeamMemberListCursor, error)
	history     []TeamStoreListTeamMembersFuncCall
	mutex       sync.Mutex
}

// ListTeamMembers delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockTeamStore) ListTeamMembers(v0 context.Context, v1 ListTeamMembersOpts) ([]*types.TeamMember, *TeamMemberListCursor, error) {
	r0, r1, r2 := m.ListTeamMembersFunc.nextHook()(v0, v1)
	m.ListTeamMembersFunc.appendCall(TeamStoreListTeamMembersFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the ListTeamMembers
// method of the parent MockTeamStore instance is invoked and the hook queue
// is empty.
func (f *TeamStoreListTeamMembersFunc) SetDefaultHook(hook func(context.Context, ListTeamMembersOpts) ([]*types.TeamMember, *TeamMemberListCursor, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListTeamMembers method of the parent MockTeamStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *TeamStoreListTeamMembersFunc) PushHook(hook func(context.Context, ListTeamMembersOpts) ([]*types.TeamMember, *TeamMemberListCursor, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TeamStoreListTeamMembersFunc) SetDefaultReturn(r0 []*types.TeamMember, r1 *TeamMemberListCursor, r2 error) {
	f.SetDefaultHook(func(context.Context, ListTeamMembersOpts) ([]*types.TeamMember, *TeamMemberListCursor, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TeamStoreListTeamMembersFunc) PushReturn(r0 []*types.TeamMember, r1 *TeamMemberListCursor, r2 error) {
	f.PushHook(func(context.Context, ListTeamMembersOpts) ([]*types.TeamMember, *TeamMemberListCursor, error) {
		return r0, r1, r2
	})
}

func (f *TeamStoreListTeamMembersFunc) nextHook() func(context.Context, ListTeamMembersOpts) ([]*types.TeamMember, *TeamMemberListCursor, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TeamStoreListTeamMembersFunc) appendCall(r0 TeamStoreListTeamMembersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TeamStoreListTeamMembersFuncCall objects
// describing the invocations of this function.
func (f *TeamStoreListTeamMembersFunc) History() []TeamStoreListTeamMembersFuncCall {
	f.mutex.Lock()
	history := make([]TeamStoreListTeamMembersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TeamStoreListTeamMembersFuncCall is an object that describes an
// invocation of method ListTeamMembers on an instance of MockTeamStore.
type TeamStoreListTeamMembersFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ListTeamMembersOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.TeamMember
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 *TeamMemberListCursor
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TeamStoreListTeamMembersFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TeamStoreListTeamMembersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// TeamStoreListTeamsFunc describes the behavior when the ListTeams method
// of the parent MockTeamStore instance is invoked.
type TeamStoreListTeamsFunc struct {
	defaultHook func(context.Context, ListTeamsOpts) ([]*types.Team, int32, error)
	hooks       []func(context.Context, ListTeamsOpts) ([]*types.Team, int32, error)
	history     []TeamStoreListTeamsFuncCall
	mutex       sync.Mutex
}

// ListTeams delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTeamStore) ListTeams(v0 context.Context, v1 ListTeamsOpts) ([]*types.Team, int32, error) {
	r0, r1, r2 := m.ListTeamsFunc.nextHook()(v0, v1)
	m.ListTeamsFunc.appendCall(TeamStoreListTeamsFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the ListTeams method of
// the parent MockTeamStore instance is invoked and the hook queue is empty.
func (f *TeamStoreListTeamsFunc) SetDefaultHook(hook func(context.Context, ListTeamsOpts) ([]*types.Team, int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListTeams method of the parent MockTeamStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *TeamStoreListTeamsFunc) PushHook(hook func(context.Context, ListTeamsOpts) ([]*types.Team, int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TeamStoreListTeamsFunc) SetDefaultReturn(r0 []*types.Team, r1 int32, r2 error) {
	f.SetDefaultHook(func(context.Context, ListTeamsOpts) ([]*types.Team, int32, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TeamStoreListTeamsFunc) PushReturn(r0 []*types.Team, r1 int32, r2 error) {
	f.PushHook(func(context.Context, ListTeamsOpts) ([]*types.Team, int32, error) {
		return r0, r1, r2
	})
}

func (f *TeamStoreListTeamsFunc) nextHook() func(context.Context, ListTeamsOpts) ([]*types.Team, int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TeamStoreListTeamsFunc) appendCall(r0 TeamStoreListTeamsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TeamStoreListTeamsFuncCall objects
// describing the invocations of this function.
func (f *TeamStoreListTeamsFunc) History() []TeamStoreListTeamsFuncCall {
	f.mutex.Lock()
	history := make([]TeamStoreListTeamsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TeamStoreListTeamsFuncCall is an object that describes an invocation of
// method ListTeams on an instance of MockTeamStore.
type TeamStoreListTeamsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ListTeamsOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.Team
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int32
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TeamStoreListTeamsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TeamStoreListTeamsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// TeamStoreUpdateTeamFunc describes the behavior when the UpdateTeam method
// of the parent MockTeamStore instance is invoked.
type TeamStoreUpdateTeamFunc struct {
	defaultHook func(context.Context, *types.Team) error
	hooks       []func(context.Context, *types.Team) error
	history     []TeamStoreUpdateTeamFuncCall
	mutex       sync.Mutex
}

// UpdateTeam delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockTeamStore) UpdateTeam(v0 context.Context, v1 *types.Team) error {
	r0 := m.UpdateTeamFunc.nextHook()(v0, v1)
	m.UpdateTeamFunc.appendCall(TeamStoreUpdateTeamFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UpdateTeam method of
// the parent MockTeamStore instance is invoked and the hook queue is empty.
func (f *TeamStoreUpdateTeamFunc) SetDefaultHook(hook func(context.Context, *types.Team) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateTeam method of the parent MockTeamStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *TeamStoreUpdateTeamFunc) PushHook(hook func(context.Context, *types.Team) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TeamStoreUpdateTeamFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *types.Team) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TeamStoreUpdateTeamFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *types.Team) error {
		return r0
	})
}

func (f *TeamStoreUpdateTeamFunc) nextHook() func(context.Context, *types.Team) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TeamStoreUpdateTeamFunc) appendCall(r0 TeamStoreUpdateTeamFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TeamStoreUpdateTeamFuncCall objects
// describing the invocations of this function.
func (f *TeamStoreUpdateTeamFunc) History() []TeamStoreUpdateTeamFuncCall {
	f.mutex.Lock()
	history := make([]TeamStoreUpdateTeamFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TeamStoreUpdateTeamFuncCall is an object that describes an invocation of
// method UpdateTeam on an instance of MockTeamStore.
type TeamStoreUpdateTeamFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.Team
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TeamStoreUpdateTeamFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TeamStoreUpdateTeamFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockTemporarySettingsStore is a mock implementation of the
// TemporarySettingsStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockTemporarySettingsStore struct {
	// EditTemporarySettingsFunc is an instance of a mock function object
	// controlling the behavior of the method EditTemporarySettings.
	EditTemporarySettingsFunc *TemporarySettingsStoreEditTemporarySettingsFunc
	// GetTemporarySettingsFunc is an instance of a mock function object
	// controlling the behavior of the method GetTemporarySettings.
	GetTemporarySettingsFunc *TemporarySettingsStoreGetTemporarySettingsFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *TemporarySettingsStoreHandleFunc
	// OverwriteTemporarySettingsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// OverwriteTemporarySettings.
	OverwriteTemporarySettingsFunc *TemporarySettingsStoreOverwriteTemporarySettingsFunc
}

// NewMockTemporarySettingsStore creates a new mock of the
// TemporarySettingsStore interface. All methods return zero values for all
// results, unless overwritten.
func NewMockTemporarySettingsStore() *MockTemporarySettingsStore {
	return &MockTemporarySettingsStore{
		EditTemporarySettingsFunc: &TemporarySettingsStoreEditTemporarySettingsFunc{
			defaultHook: func(context.Context, int32, string) (r0 error) {
				return
			},
		},
		GetTemporarySettingsFunc: &TemporarySettingsStoreGetTemporarySettingsFunc{
			defaultHook: func(context.Context, int32) (r0 *temporarysettings.TemporarySettings, r1 error) {
				return
			},
		},
		HandleFunc: &TemporarySettingsStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		OverwriteTemporarySettingsFunc: &TemporarySettingsStoreOverwriteTemporarySettingsFunc{
			defaultHook: func(context.Context, int32, string) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockTemporarySettingsStore creates a new mock of the
// TemporarySettingsStore interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockTemporarySettingsStore() *MockTemporarySettingsStore {
	return &MockTemporarySettingsStore{
		EditTemporarySettingsFunc: &TemporarySettingsStoreEditTemporarySettingsFunc{
			defaultHook: func(context.Context, int32, string) error {
				panic("unexpected invocation of MockTemporarySettingsStore.EditTemporarySettings")
			},
		},
		GetTemporarySettingsFunc: &TemporarySettingsStoreGetTemporarySettingsFunc{
			defaultHook: func(context.Context, int32) (*temporarysettings.TemporarySettings, error) {
				panic("unexpected invocation of MockTemporarySettingsStore.GetTemporarySettings")
			},
		},
		HandleFunc: &TemporarySettingsStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockTemporarySettingsStore.Handle")
			},
		},
		OverwriteTemporarySettingsFunc: &TemporarySettingsStoreOverwriteTemporarySettingsFunc{
			defaultHook: func(context.Context, int32, string) error {
				panic("unexpected invocation of MockTemporarySettingsStore.OverwriteTemporarySettings")
			},
		},
	}
}

// NewMockTemporarySettingsStoreFrom creates a new mock of the
// MockTemporarySettingsStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockTemporarySettingsStoreFrom(i TemporarySettingsStore) *MockTemporarySettingsStore {
	return &MockTemporarySettingsStore{
		EditTemporarySettingsFunc: &TemporarySettingsStoreEditTemporarySettingsFunc{
			defaultHook: i.EditTemporarySettings,
		},
		GetTemporarySettingsFunc: &TemporarySettingsStoreGetTemporarySettingsFunc{
			defaultHook: i.GetTemporarySettings,
		},
		HandleFunc: &TemporarySettingsStoreHandleFunc{
			defaultHook: i.Handle,
		},
		OverwriteTemporarySettingsFunc: &TemporarySettingsStoreOverwriteTemporarySettingsFunc{
			defaultHook: i.OverwriteTemporarySettings,
		},
	}
}

// TemporarySettingsStoreEditTemporarySettingsFunc describes the behavior
// when the EditTemporarySettings method of the parent
// MockTemporarySettingsStore instance is invoked.
type TemporarySettingsStoreEditTemporarySettingsFunc struct {
	defaultHook func(context.Context, int32, string) error
	hooks       []func(context.Context, int32, string) error
	history     []TemporarySettingsStoreEditTemporarySettingsFuncCall
	mutex       sync.Mutex
}

// EditTemporarySettings delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockTemporarySettingsStore) EditTemporarySettings(v0 context.Context, v1 int32, v2 string) error {
	r0 := m.EditTemporarySettingsFunc.nextHook()(v0, v1, v2)
	m.EditTemporarySettingsFunc.appendCall(TemporarySettingsStoreEditTemporarySettingsFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// EditTemporarySettings method of the parent MockTemporarySettingsStore
// instance is invoked and the hook queue is empty.
func (f *TemporarySettingsStoreEditTemporarySettingsFunc) SetDefaultHook(hook func(context.Context, int32, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EditTemporarySettings method of the parent MockTemporarySettingsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *TemporarySettingsStoreEditTemporarySettingsFunc) PushHook(hook func(context.Context, int32, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TemporarySettingsStoreEditTemporarySettingsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TemporarySettingsStoreEditTemporarySettingsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, string) error {
		return r0
	})
}

func (f *TemporarySettingsStoreEditTemporarySettingsFunc) nextHook() func(context.Context, int32, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TemporarySettingsStoreEditTemporarySettingsFunc) appendCall(r0 TemporarySettingsStoreEditTemporarySettingsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// TemporarySettingsStoreEditTemporarySettingsFuncCall objects describing
// the invocations of this function.
func (f *TemporarySettingsStoreEditTemporarySettingsFunc) History() []TemporarySettingsStoreEditTemporarySettingsFuncCall {
	f.mutex.Lock()
	history := make([]TemporarySettingsStoreEditTemporarySettingsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TemporarySettingsStoreEditTemporarySettingsFuncCall is an object that
// describes an invocation of method EditTemporarySettings on an instance of
// MockTemporarySettingsStore.
type TemporarySettingsStoreEditTemporarySettingsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TemporarySettingsStoreEditTemporarySettingsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TemporarySettingsStoreEditTemporarySettingsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TemporarySettingsStoreGetTemporarySettingsFunc describes the behavior
// when the GetTemporarySettings method of the parent
// MockTemporarySettingsStore instance is invoked.
type TemporarySettingsStoreGetTemporarySettingsFunc struct {
	defaultHook func(context.Context, int32) (*temporarysettings.TemporarySettings, error)
	hooks       []func(context.Context, int32) (*temporarysettings.TemporarySettings, error)
	history     []TemporarySettingsStoreGetTemporarySettingsFuncCall
	mutex       sync.Mutex
}

// GetTemporarySettings delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockTemporarySettingsStore) GetTemporarySettings(v0 context.Context, v1 int32) (*temporarysettings.TemporarySettings, error) {
	r0, r1 := m.GetTemporarySettingsFunc.nextHook()(v0, v1)
	m.GetTemporarySettingsFunc.appendCall(TemporarySettingsStoreGetTemporarySettingsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetTemporarySettings
// method of the parent MockTemporarySettingsStore instance is invoked and
// the hook queue is empty.
func (f *TemporarySettingsStoreGetTemporarySettingsFunc) SetDefaultHook(hook func(context.Context, int32) (*temporarysettings.TemporarySettings, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTemporarySettings method of the parent MockTemporarySettingsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *TemporarySettingsStoreGetTemporarySettingsFunc) PushHook(hook func(context.Context, int32) (*temporarysettings.TemporarySettings, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TemporarySettingsStoreGetTemporarySettingsFunc) SetDefaultReturn(r0 *temporarysettings.TemporarySettings, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (*temporarysettings.TemporarySettings, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TemporarySettingsStoreGetTemporarySettingsFunc) PushReturn(r0 *temporarysettings.TemporarySettings, r1 error) {
	f.PushHook(func(context.Context, int32) (*temporarysettings.TemporarySettings, error) {
		return r0, r1
	})
}

func (f *TemporarySettingsStoreGetTemporarySettingsFunc) nextHook() func(context.Context, int32) (*temporarysettings.TemporarySettings, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TemporarySettingsStoreGetTemporarySettingsFunc) appendCall(r0 TemporarySettingsStoreGetTemporarySettingsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// TemporarySettingsStoreGetTemporarySettingsFuncCall objects describing the
// invocations of this function.
func (f *TemporarySettingsStoreGetTemporarySettingsFunc) History() []TemporarySettingsStoreGetTemporarySettingsFuncCall {
	f.mutex.Lock()
	history := make([]TemporarySettingsStoreGetTemporarySettingsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TemporarySettingsStoreGetTemporarySettingsFuncCall is an object that
// describes an invocation of method GetTemporarySettings on an instance of
// MockTemporarySettingsStore.
type TemporarySettingsStoreGetTemporarySettingsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *temporarysettings.TemporarySettings
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TemporarySettingsStoreGetTemporarySettingsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TemporarySettingsStoreGetTemporarySettingsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// TemporarySettingsStoreHandleFunc describes the behavior when the Handle
// method of the parent MockTemporarySettingsStore instance is invoked.
type TemporarySettingsStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []TemporarySettingsStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockTemporarySettingsStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(TemporarySettingsStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockTemporarySettingsStore instance is invoked and the hook queue
// is empty.
func (f *TemporarySettingsStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockTemporarySettingsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *TemporarySettingsStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TemporarySettingsStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TemporarySettingsStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *TemporarySettingsStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TemporarySettingsStoreHandleFunc) appendCall(r0 TemporarySettingsStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of TemporarySettingsStoreHandleFuncCall
// objects describing the invocations of this function.
func (f *TemporarySettingsStoreHandleFunc) History() []TemporarySettingsStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]TemporarySettingsStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TemporarySettingsStoreHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of MockTemporarySettingsStore.
type TemporarySettingsStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TemporarySettingsStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TemporarySettingsStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// TemporarySettingsStoreOverwriteTemporarySettingsFunc describes the
// behavior when the OverwriteTemporarySettings method of the parent
// MockTemporarySettingsStore instance is invoked.
type TemporarySettingsStoreOverwriteTemporarySettingsFunc struct {
	defaultHook func(context.Context, int32, string) error
	hooks       []func(context.Context, int32, string) error
	history     []TemporarySettingsStoreOverwriteTemporarySettingsFuncCall
	mutex       sync.Mutex
}

// OverwriteTemporarySettings delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockTemporarySettingsStore) OverwriteTemporarySettings(v0 context.Context, v1 int32, v2 string) error {
	r0 := m.OverwriteTemporarySettingsFunc.nextHook()(v0, v1, v2)
	m.OverwriteTemporarySettingsFunc.appendCall(TemporarySettingsStoreOverwriteTemporarySettingsFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// OverwriteTemporarySettings method of the parent
// MockTemporarySettingsStore instance is invoked and the hook queue is
// empty.
func (f *TemporarySettingsStoreOverwriteTemporarySettingsFunc) SetDefaultHook(hook func(context.Context, int32, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// OverwriteTemporarySettings method of the parent
// MockTemporarySettingsStore instance invokes the hook at the front of the
// queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *TemporarySettingsStoreOverwriteTemporarySettingsFunc) PushHook(hook func(context.Context, int32, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *TemporarySettingsStoreOverwriteTemporarySettingsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *TemporarySettingsStoreOverwriteTemporarySettingsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, string) error {
		return r0
	})
}

func (f *TemporarySettingsStoreOverwriteTemporarySettingsFunc) nextHook() func(context.Context, int32, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *TemporarySettingsStoreOverwriteTemporarySettingsFunc) appendCall(r0 TemporarySettingsStoreOverwriteTemporarySettingsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// TemporarySettingsStoreOverwriteTemporarySettingsFuncCall objects
// describing the invocations of this function.
func (f *TemporarySettingsStoreOverwriteTemporarySettingsFunc) History() []TemporarySettingsStoreOverwriteTemporarySettingsFuncCall {
	f.mutex.Lock()
	history := make([]TemporarySettingsStoreOverwriteTemporarySettingsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// TemporarySettingsStoreOverwriteTemporarySettingsFuncCall is an object
// that describes an invocation of method OverwriteTemporarySettings on an
// instance of MockTemporarySettingsStore.
type TemporarySettingsStoreOverwriteTemporarySettingsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c TemporarySettingsStoreOverwriteTemporarySettingsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c TemporarySettingsStoreOverwriteTemporarySettingsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockUserCredentialsStore is a mock implementation of the
// UserCredentialsStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockUserCredentialsStore struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *UserCredentialsStoreCreateFunc
	// DeleteFunc is an instance of a mock function object controlling the
	// behavior of the method Delete.
	DeleteFunc *UserCredentialsStoreDeleteFunc
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *UserCredentialsStoreGetByIDFunc
	// GetByScopeFunc is an instance of a mock function object controlling
	// the behavior of the method GetByScope.
	GetByScopeFunc *UserCredentialsStoreGetByScopeFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *UserCredentialsStoreHandleFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *UserCredentialsStoreListFunc
	// UpdateFunc is an instance of a mock function object controlling the
	// behavior of the method Update.
	UpdateFunc *UserCredentialsStoreUpdateFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *UserCredentialsStoreWithFunc
	// WithTransactFunc is an instance of a mock function object controlling
	// the behavior of the method WithTransact.
	WithTransactFunc *UserCredentialsStoreWithTransactFunc
}

// NewMockUserCredentialsStore creates a new mock of the
// UserCredentialsStore interface. All methods return zero values for all
// results, unless overwritten.
func NewMockUserCredentialsStore() *MockUserCredentialsStore {
	return &MockUserCredentialsStore{
		CreateFunc: &UserCredentialsStoreCreateFunc{
			defaultHook: func(context.Context, UserCredentialScope, auth.Authenticator) (r0 *UserCredential, r1 error) {
				return
			},
		},
		DeleteFunc: &UserCredentialsStoreDeleteFunc{
			defaultHook: func(context.Context, int64) (r0 error) {
				return
			},
		},
		GetByIDFunc: &UserCredentialsStoreGetByIDFunc{
			defaultHook: func(context.Context, int64) (r0 *UserCredential, r1 error) {
				return
			},
		},
		GetByScopeFunc: &UserCredentialsStoreGetByScopeFunc{
			defaultHook: func(context.Context, UserCredentialScope) (r0 *UserCredential, r1 error) {
				return
			},
		},
		HandleFunc: &UserCredentialsStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		ListFunc: &UserCredentialsStoreListFunc{
			defaultHook: func(context.Context, UserCredentialsListOpts) (r0 []*UserCredential, r1 int, r2 error) {
				return
			},
		},
		UpdateFunc: &UserCredentialsStoreUpdateFunc{
			defaultHook: func(context.Context, *UserCredential) (r0 error) {
				return
			},
		},
		WithFunc: &UserCredentialsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 UserCredentialsStore) {
				return
			},
		},
		WithTransactFunc: &UserCredentialsStoreWithTransactFunc{
			defaultHook: func(context.Context, func(UserCredentialsStore) error) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockUserCredentialsStore creates a new mock of the
// UserCredentialsStore interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockUserCredentialsStore() *MockUserCredentialsStore {
	return &MockUserCredentialsStore{
		CreateFunc: &UserCredentialsStoreCreateFunc{
			defaultHook: func(context.Context, UserCredentialScope, auth.Authenticator) (*UserCredential, error) {
				panic("unexpected invocation of MockUserCredentialsStore.Create")
			},
		},
		DeleteFunc: &UserCredentialsStoreDeleteFunc{
			defaultHook: func(context.Context, int64) error {
				panic("unexpected invocation of MockUserCredentialsStore.Delete")
			},
		},
		GetByIDFunc: &UserCredentialsStoreGetByIDFunc{
			defaultHook: func(context.Context, int64) (*UserCredential, error) {
				panic("unexpected invocation of MockUserCredentialsStore.GetByID")
			},
		},
		GetByScopeFunc: &UserCredentialsStoreGetByScopeFunc{
			defaultHook: func(context.Context, UserCredentialScope) (*UserCredential, error) {
				panic("unexpected invocation of MockUserCredentialsStore.GetByScope")
			},
		},
		HandleFunc: &UserCredentialsStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockUserCredentialsStore.Handle")
			},
		},
		ListFunc: &UserCredentialsStoreListFunc{
			defaultHook: func(context.Context, UserCredentialsListOpts) ([]*UserCredential, int, error) {
				panic("unexpected invocation of MockUserCredentialsStore.List")
			},
		},
		UpdateFunc: &UserCredentialsStoreUpdateFunc{
			defaultHook: func(context.Context, *UserCredential) error {
				panic("unexpected invocation of MockUserCredentialsStore.Update")
			},
		},
		WithFunc: &UserCredentialsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) UserCredentialsStore {
				panic("unexpected invocation of MockUserCredentialsStore.With")
			},
		},
		WithTransactFunc: &UserCredentialsStoreWithTransactFunc{
			defaultHook: func(context.Context, func(UserCredentialsStore) error) error {
				panic("unexpected invocation of MockUserCredentialsStore.WithTransact")
			},
		},
	}
}

// NewMockUserCredentialsStoreFrom creates a new mock of the
// MockUserCredentialsStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockUserCredentialsStoreFrom(i UserCredentialsStore) *MockUserCredentialsStore {
	return &MockUserCredentialsStore{
		CreateFunc: &UserCredentialsStoreCreateFunc{
			defaultHook: i.Create,
		},
		DeleteFunc: &UserCredentialsStoreDeleteFunc{
			defaultHook: i.Delete,
		},
		GetByIDFunc: &UserCredentialsStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		GetByScopeFunc: &UserCredentialsStoreGetByScopeFunc{
			defaultHook: i.GetByScope,
		},
		HandleFunc: &UserCredentialsStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListFunc: &UserCredentialsStoreListFunc{
			defaultHook: i.List,
		},
		UpdateFunc: &UserCredentialsStoreUpdateFunc{
			defaultHook: i.Update,
		},
		WithFunc: &UserCredentialsStoreWithFunc{
			defaultHook: i.With,
		},
		WithTransactFunc: &UserCredentialsStoreWithTransactFunc{
			defaultHook: i.WithTransact,
		},
	}
}

// UserCredentialsStoreCreateFunc describes the behavior when the Create
// method of the parent MockUserCredentialsStore instance is invoked.
type UserCredentialsStoreCreateFunc struct {
	defaultHook func(context.Context, UserCredentialScope, auth.Authenticator) (*UserCredential, error)
	hooks       []func(context.Context, UserCredentialScope, auth.Authenticator) (*UserCredential, error)
	history     []UserCredentialsStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserCredentialsStore) Create(v0 context.Context, v1 UserCredentialScope, v2 auth.Authenticator) (*UserCredential, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1, v2)
	m.CreateFunc.appendCall(UserCredentialsStoreCreateFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockUserCredentialsStore instance is invoked and the hook queue is
// empty.
func (f *UserCredentialsStoreCreateFunc) SetDefaultHook(hook func(context.Context, UserCredentialScope, auth.Authenticator) (*UserCredential, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockUserCredentialsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserCredentialsStoreCreateFunc) PushHook(hook func(context.Context, UserCredentialScope, auth.Authenticator) (*UserCredential, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserCredentialsStoreCreateFunc) SetDefaultReturn(r0 *UserCredential, r1 error) {
	f.SetDefaultHook(func(context.Context, UserCredentialScope, auth.Authenticator) (*UserCredential, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserCredentialsStoreCreateFunc) PushReturn(r0 *UserCredential, r1 error) {
	f.PushHook(func(context.Context, UserCredentialScope, auth.Authenticator) (*UserCredential, error) {
		return r0, r1
	})
}

func (f *UserCredentialsStoreCreateFunc) nextHook() func(context.Context, UserCredentialScope, auth.Authenticator) (*UserCredential, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserCredentialsStoreCreateFunc) appendCall(r0 UserCredentialsStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserCredentialsStoreCreateFuncCall objects
// describing the invocations of this function.
func (f *UserCredentialsStoreCreateFunc) History() []UserCredentialsStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]UserCredentialsStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserCredentialsStoreCreateFuncCall is an object that describes an
// invocation of method Create on an instance of MockUserCredentialsStore.
type UserCredentialsStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 UserCredentialScope
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 auth.Authenticator
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *UserCredential
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserCredentialsStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserCredentialsStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserCredentialsStoreDeleteFunc describes the behavior when the Delete
// method of the parent MockUserCredentialsStore instance is invoked.
type UserCredentialsStoreDeleteFunc struct {
	defaultHook func(context.Context, int64) error
	hooks       []func(context.Context, int64) error
	history     []UserCredentialsStoreDeleteFuncCall
	mutex       sync.Mutex
}

// Delete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserCredentialsStore) Delete(v0 context.Context, v1 int64) error {
	r0 := m.DeleteFunc.nextHook()(v0, v1)
	m.DeleteFunc.appendCall(UserCredentialsStoreDeleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Delete method of the
// parent MockUserCredentialsStore instance is invoked and the hook queue is
// empty.
func (f *UserCredentialsStoreDeleteFunc) SetDefaultHook(hook func(context.Context, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Delete method of the parent MockUserCredentialsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserCredentialsStoreDeleteFunc) PushHook(hook func(context.Context, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserCredentialsStoreDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserCredentialsStoreDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64) error {
		return r0
	})
}

func (f *UserCredentialsStoreDeleteFunc) nextHook() func(context.Context, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserCredentialsStoreDeleteFunc) appendCall(r0 UserCredentialsStoreDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserCredentialsStoreDeleteFuncCall objects
// describing the invocations of this function.
func (f *UserCredentialsStoreDeleteFunc) History() []UserCredentialsStoreDeleteFuncCall {
	f.mutex.Lock()
	history := make([]UserCredentialsStoreDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserCredentialsStoreDeleteFuncCall is an object that describes an
// invocation of method Delete on an instance of MockUserCredentialsStore.
type UserCredentialsStoreDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserCredentialsStoreDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserCredentialsStoreDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserCredentialsStoreGetByIDFunc describes the behavior when the GetByID
// method of the parent MockUserCredentialsStore instance is invoked.
type UserCredentialsStoreGetByIDFunc struct {
	defaultHook func(context.Context, int64) (*UserCredential, error)
	hooks       []func(context.Context, int64) (*UserCredential, error)
	history     []UserCredentialsStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserCredentialsStore) GetByID(v0 context.Context, v1 int64) (*UserCredential, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(UserCredentialsStoreGetByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockUserCredentialsStore instance is invoked and the hook
// queue is empty.
func (f *UserCredentialsStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int64) (*UserCredential, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockUserCredentialsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserCredentialsStoreGetByIDFunc) PushHook(hook func(context.Context, int64) (*UserCredential, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserCredentialsStoreGetByIDFunc) SetDefaultReturn(r0 *UserCredential, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (*UserCredential, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserCredentialsStoreGetByIDFunc) PushReturn(r0 *UserCredential, r1 error) {
	f.PushHook(func(context.Context, int64) (*UserCredential, error) {
		return r0, r1
	})
}

func (f *UserCredentialsStoreGetByIDFunc) nextHook() func(context.Context, int64) (*UserCredential, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserCredentialsStoreGetByIDFunc) appendCall(r0 UserCredentialsStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserCredentialsStoreGetByIDFuncCall objects
// describing the invocations of this function.
func (f *UserCredentialsStoreGetByIDFunc) History() []UserCredentialsStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]UserCredentialsStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserCredentialsStoreGetByIDFuncCall is an object that describes an
// invocation of method GetByID on an instance of MockUserCredentialsStore.
type UserCredentialsStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *UserCredential
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserCredentialsStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserCredentialsStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserCredentialsStoreGetByScopeFunc describes the behavior when the
// GetByScope method of the parent MockUserCredentialsStore instance is
// invoked.
type UserCredentialsStoreGetByScopeFunc struct {
	defaultHook func(context.Context, UserCredentialScope) (*UserCredential, error)
	hooks       []func(context.Context, UserCredentialScope) (*UserCredential, error)
	history     []UserCredentialsStoreGetByScopeFuncCall
	mutex       sync.Mutex
}

// GetByScope delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserCredentialsStore) GetByScope(v0 context.Context, v1 UserCredentialScope) (*UserCredential, error) {
	r0, r1 := m.GetByScopeFunc.nextHook()(v0, v1)
	m.GetByScopeFunc.appendCall(UserCredentialsStoreGetByScopeFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByScope method of
// the parent MockUserCredentialsStore instance is invoked and the hook
// queue is empty.
func (f *UserCredentialsStoreGetByScopeFunc) SetDefaultHook(hook func(context.Context, UserCredentialScope) (*UserCredential, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByScope method of the parent MockUserCredentialsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserCredentialsStoreGetByScopeFunc) PushHook(hook func(context.Context, UserCredentialScope) (*UserCredential, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserCredentialsStoreGetByScopeFunc) SetDefaultReturn(r0 *UserCredential, r1 error) {
	f.SetDefaultHook(func(context.Context, UserCredentialScope) (*UserCredential, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserCredentialsStoreGetByScopeFunc) PushReturn(r0 *UserCredential, r1 error) {
	f.PushHook(func(context.Context, UserCredentialScope) (*UserCredential, error) {
		return r0, r1
	})
}

func (f *UserCredentialsStoreGetByScopeFunc) nextHook() func(context.Context, UserCredentialScope) (*UserCredential, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserCredentialsStoreGetByScopeFunc) appendCall(r0 UserCredentialsStoreGetByScopeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserCredentialsStoreGetByScopeFuncCall
// objects describing the invocations of this function.
func (f *UserCredentialsStoreGetByScopeFunc) History() []UserCredentialsStoreGetByScopeFuncCall {
	f.mutex.Lock()
	history := make([]UserCredentialsStoreGetByScopeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserCredentialsStoreGetByScopeFuncCall is an object that describes an
// invocation of method GetByScope on an instance of
// MockUserCredentialsStore.
type UserCredentialsStoreGetByScopeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 UserCredentialScope
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *UserCredential
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserCredentialsStoreGetByScopeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserCredentialsStoreGetByScopeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserCredentialsStoreHandleFunc describes the behavior when the Handle
// method of the parent MockUserCredentialsStore instance is invoked.
type UserCredentialsStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []UserCredentialsStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserCredentialsStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(UserCredentialsStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockUserCredentialsStore instance is invoked and the hook queue is
// empty.
func (f *UserCredentialsStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockUserCredentialsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserCredentialsStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserCredentialsStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserCredentialsStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *UserCredentialsStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserCredentialsStoreHandleFunc) appendCall(r0 UserCredentialsStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserCredentialsStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *UserCredentialsStoreHandleFunc) History() []UserCredentialsStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]UserCredentialsStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserCredentialsStoreHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of MockUserCredentialsStore.
type UserCredentialsStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserCredentialsStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserCredentialsStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserCredentialsStoreListFunc describes the behavior when the List method
// of the parent MockUserCredentialsStore instance is invoked.
type UserCredentialsStoreListFunc struct {
	defaultHook func(context.Context, UserCredentialsListOpts) ([]*UserCredential, int, error)
	hooks       []func(context.Context, UserCredentialsListOpts) ([]*UserCredential, int, error)
	history     []UserCredentialsStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserCredentialsStore) List(v0 context.Context, v1 UserCredentialsListOpts) ([]*UserCredential, int, error) {
	r0, r1, r2 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(UserCredentialsStoreListFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockUserCredentialsStore instance is invoked and the hook queue is
// empty.
func (f *UserCredentialsStoreListFunc) SetDefaultHook(hook func(context.Context, UserCredentialsListOpts) ([]*UserCredential, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockUserCredentialsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserCredentialsStoreListFunc) PushHook(hook func(context.Context, UserCredentialsListOpts) ([]*UserCredential, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserCredentialsStoreListFunc) SetDefaultReturn(r0 []*UserCredential, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, UserCredentialsListOpts) ([]*UserCredential, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserCredentialsStoreListFunc) PushReturn(r0 []*UserCredential, r1 int, r2 error) {
	f.PushHook(func(context.Context, UserCredentialsListOpts) ([]*UserCredential, int, error) {
		return r0, r1, r2
	})
}

func (f *UserCredentialsStoreListFunc) nextHook() func(context.Context, UserCredentialsListOpts) ([]*UserCredential, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserCredentialsStoreListFunc) appendCall(r0 UserCredentialsStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserCredentialsStoreListFuncCall objects
// describing the invocations of this function.
func (f *UserCredentialsStoreListFunc) History() []UserCredentialsStoreListFuncCall {
	f.mutex.Lock()
	history := make([]UserCredentialsStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserCredentialsStoreListFuncCall is an object that describes an
// invocation of method List on an instance of MockUserCredentialsStore.
type UserCredentialsStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 UserCredentialsListOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*UserCredential
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserCredentialsStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserCredentialsStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// UserCredentialsStoreUpdateFunc describes the behavior when the Update
// method of the parent MockUserCredentialsStore instance is invoked.
type UserCredentialsStoreUpdateFunc struct {
	defaultHook func(context.Context, *UserCredential) error
	hooks       []func(context.Context, *UserCredential) error
	history     []UserCredentialsStoreUpdateFuncCall
	mutex       sync.Mutex
}

// Update delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserCredentialsStore) Update(v0 context.Context, v1 *UserCredential) error {
	r0 := m.UpdateFunc.nextHook()(v0, v1)
	m.UpdateFunc.appendCall(UserCredentialsStoreUpdateFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Update method of the
// parent MockUserCredentialsStore instance is invoked and the hook queue is
// empty.
func (f *UserCredentialsStoreUpdateFunc) SetDefaultHook(hook func(context.Context, *UserCredential) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Update method of the parent MockUserCredentialsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserCredentialsStoreUpdateFunc) PushHook(hook func(context.Context, *UserCredential) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserCredentialsStoreUpdateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *UserCredential) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserCredentialsStoreUpdateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *UserCredential) error {
		return r0
	})
}

func (f *UserCredentialsStoreUpdateFunc) nextHook() func(context.Context, *UserCredential) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserCredentialsStoreUpdateFunc) appendCall(r0 UserCredentialsStoreUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserCredentialsStoreUpdateFuncCall objects
// describing the invocations of this function.
func (f *UserCredentialsStoreUpdateFunc) History() []UserCredentialsStoreUpdateFuncCall {
	f.mutex.Lock()
	history := make([]UserCredentialsStoreUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserCredentialsStoreUpdateFuncCall is an object that describes an
// invocation of method Update on an instance of MockUserCredentialsStore.
type UserCredentialsStoreUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *UserCredential
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserCredentialsStoreUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserCredentialsStoreUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserCredentialsStoreWithFunc describes the behavior when the With method
// of the parent MockUserCredentialsStore instance is invoked.
type UserCredentialsStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) UserCredentialsStore
	hooks       []func(basestore.ShareableStore) UserCredentialsStore
	history     []UserCredentialsStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserCredentialsStore) With(v0 basestore.ShareableStore) UserCredentialsStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(UserCredentialsStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockUserCredentialsStore instance is invoked and the hook queue is
// empty.
func (f *UserCredentialsStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) UserCredentialsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockUserCredentialsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserCredentialsStoreWithFunc) PushHook(hook func(basestore.ShareableStore) UserCredentialsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserCredentialsStoreWithFunc) SetDefaultReturn(r0 UserCredentialsStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) UserCredentialsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserCredentialsStoreWithFunc) PushReturn(r0 UserCredentialsStore) {
	f.PushHook(func(basestore.ShareableStore) UserCredentialsStore {
		return r0
	})
}

func (f *UserCredentialsStoreWithFunc) nextHook() func(basestore.ShareableStore) UserCredentialsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserCredentialsStoreWithFunc) appendCall(r0 UserCredentialsStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserCredentialsStoreWithFuncCall objects
// describing the invocations of this function.
func (f *UserCredentialsStoreWithFunc) History() []UserCredentialsStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]UserCredentialsStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserCredentialsStoreWithFuncCall is an object that describes an
// invocation of method With on an instance of MockUserCredentialsStore.
type UserCredentialsStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 UserCredentialsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserCredentialsStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserCredentialsStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserCredentialsStoreWithTransactFunc describes the behavior when the
// WithTransact method of the parent MockUserCredentialsStore instance is
// invoked.
type UserCredentialsStoreWithTransactFunc struct {
	defaultHook func(context.Context, func(UserCredentialsStore) error) error
	hooks       []func(context.Context, func(UserCredentialsStore) error) error
	history     []UserCredentialsStoreWithTransactFuncCall
	mutex       sync.Mutex
}

// WithTransact delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserCredentialsStore) WithTransact(v0 context.Context, v1 func(UserCredentialsStore) error) error {
	r0 := m.WithTransactFunc.nextHook()(v0, v1)
	m.WithTransactFunc.appendCall(UserCredentialsStoreWithTransactFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithTransact method
// of the parent MockUserCredentialsStore instance is invoked and the hook
// queue is empty.
func (f *UserCredentialsStoreWithTransactFunc) SetDefaultHook(hook func(context.Context, func(UserCredentialsStore) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithTransact method of the parent MockUserCredentialsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserCredentialsStoreWithTransactFunc) PushHook(hook func(context.Context, func(UserCredentialsStore) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserCredentialsStoreWithTransactFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, func(UserCredentialsStore) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserCredentialsStoreWithTransactFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, func(UserCredentialsStore) error) error {
		return r0
	})
}

func (f *UserCredentialsStoreWithTransactFunc) nextHook() func(context.Context, func(UserCredentialsStore) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserCredentialsStoreWithTransactFunc) appendCall(r0 UserCredentialsStoreWithTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserCredentialsStoreWithTransactFuncCall
// objects describing the invocations of this function.
func (f *UserCredentialsStoreWithTransactFunc) History() []UserCredentialsStoreWithTransactFuncCall {
	f.mutex.Lock()
	history := make([]UserCredentialsStoreWithTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserCredentialsStoreWithTransactFuncCall is an object that describes an
// invocation of method WithTransact on an instance of
// MockUserCredentialsStore.
type UserCredentialsStoreWithTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 func(UserCredentialsStore) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserCredentialsStoreWithTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserCredentialsStoreWithTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockUserEmailsStore is a mock implementation of the UserEmailsStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockUserEmailsStore struct {
	// AddFunc is an instance of a mock function object controlling the
	// behavior of the method Add.
	AddFunc *UserEmailsStoreAddFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *UserEmailsStoreDoneFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *UserEmailsStoreGetFunc
	// GetInitialSiteAdminInfoFunc is an instance of a mock function object
	// controlling the behavior of the method GetInitialSiteAdminInfo.
	GetInitialSiteAdminInfoFunc *UserEmailsStoreGetInitialSiteAdminInfoFunc
	// GetLatestVerificationSentEmailFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetLatestVerificationSentEmail.
	GetLatestVerificationSentEmailFunc *UserEmailsStoreGetLatestVerificationSentEmailFunc
	// GetPrimaryEmailFunc is an instance of a mock function object
	// controlling the behavior of the method GetPrimaryEmail.
	GetPrimaryEmailFunc *UserEmailsStoreGetPrimaryEmailFunc
	// GetVerifiedEmailsFunc is an instance of a mock function object
	// controlling the behavior of the method GetVerifiedEmails.
	GetVerifiedEmailsFunc *UserEmailsStoreGetVerifiedEmailsFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *UserEmailsStoreHandleFunc
	// HasVerifiedEmailFunc is an instance of a mock function object
	// controlling the behavior of the method HasVerifiedEmail.
	HasVerifiedEmailFunc *UserEmailsStoreHasVerifiedEmailFunc
	// ListByUserFunc is an instance of a mock function object controlling
	// the behavior of the method ListByUser.
	ListByUserFunc *UserEmailsStoreListByUserFunc
	// RemoveFunc is an instance of a mock function object controlling the
	// behavior of the method Remove.
	RemoveFunc *UserEmailsStoreRemoveFunc
	// SetLastVerificationFunc is an instance of a mock function object
	// controlling the behavior of the method SetLastVerification.
	SetLastVerificationFunc *UserEmailsStoreSetLastVerificationFunc
	// SetPrimaryEmailFunc is an instance of a mock function object
	// controlling the behavior of the method SetPrimaryEmail.
	SetPrimaryEmailFunc *UserEmailsStoreSetPrimaryEmailFunc
	// SetVerifiedFunc is an instance of a mock function object controlling
	// the behavior of the method SetVerified.
	SetVerifiedFunc *UserEmailsStoreSetVerifiedFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *UserEmailsStoreTransactFunc
	// VerifyFunc is an instance of a mock function object controlling the
	// behavior of the method Verify.
	VerifyFunc *UserEmailsStoreVerifyFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *UserEmailsStoreWithFunc
}

// NewMockUserEmailsStore creates a new mock of the UserEmailsStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockUserEmailsStore() *MockUserEmailsStore {
	return &MockUserEmailsStore{
		AddFunc: &UserEmailsStoreAddFunc{
			defaultHook: func(context.Context, int32, string, *string) (r0 error) {
				return
			},
		},
		DoneFunc: &UserEmailsStoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		GetFunc: &UserEmailsStoreGetFunc{
			defaultHook: func(context.Context, int32, string) (r0 string, r1 bool, r2 error) {
				return
			},
		},
		GetInitialSiteAdminInfoFunc: &UserEmailsStoreGetInitialSiteAdminInfoFunc{
			defaultHook: func(context.Context) (r0 string, r1 bool, r2 error) {
				return
			},
		},
		GetLatestVerificationSentEmailFunc: &UserEmailsStoreGetLatestVerificationSentEmailFunc{
			defaultHook: func(context.Context, string) (r0 *UserEmail, r1 error) {
				return
			},
		},
		GetPrimaryEmailFunc: &UserEmailsStoreGetPrimaryEmailFunc{
			defaultHook: func(context.Context, int32) (r0 string, r1 bool, r2 error) {
				return
			},
		},
		GetVerifiedEmailsFunc: &UserEmailsStoreGetVerifiedEmailsFunc{
			defaultHook: func(context.Context, ...string) (r0 []*UserEmail, r1 error) {
				return
			},
		},
		HandleFunc: &UserEmailsStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		HasVerifiedEmailFunc: &UserEmailsStoreHasVerifiedEmailFunc{
			defaultHook: func(context.Context, int32) (r0 bool, r1 error) {
				return
			},
		},
		ListByUserFunc: &UserEmailsStoreListByUserFunc{
			defaultHook: func(context.Context, UserEmailsListOptions) (r0 []*UserEmail, r1 error) {
				return
			},
		},
		RemoveFunc: &UserEmailsStoreRemoveFunc{
			defaultHook: func(context.Context, int32, string) (r0 error) {
				return
			},
		},
		SetLastVerificationFunc: &UserEmailsStoreSetLastVerificationFunc{
			defaultHook: func(context.Context, int32, string, string, time.Time) (r0 error) {
				return
			},
		},
		SetPrimaryEmailFunc: &UserEmailsStoreSetPrimaryEmailFunc{
			defaultHook: func(context.Context, int32, string) (r0 error) {
				return
			},
		},
		SetVerifiedFunc: &UserEmailsStoreSetVerifiedFunc{
			defaultHook: func(context.Context, int32, string, bool) (r0 error) {
				return
			},
		},
		TransactFunc: &UserEmailsStoreTransactFunc{
			defaultHook: func(context.Context) (r0 UserEmailsStore, r1 error) {
				return
			},
		},
		VerifyFunc: &UserEmailsStoreVerifyFunc{
			defaultHook: func(context.Context, int32, string, string) (r0 bool, r1 error) {
				return
			},
		},
		WithFunc: &UserEmailsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 UserEmailsStore) {
				return
			},
		},
	}
}

// NewStrictMockUserEmailsStore creates a new mock of the UserEmailsStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockUserEmailsStore() *MockUserEmailsStore {
	return &MockUserEmailsStore{
		AddFunc: &UserEmailsStoreAddFunc{
			defaultHook: func(context.Context, int32, string, *string) error {
				panic("unexpected invocation of MockUserEmailsStore.Add")
			},
		},
		DoneFunc: &UserEmailsStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockUserEmailsStore.Done")
			},
		},
		GetFunc: &UserEmailsStoreGetFunc{
			defaultHook: func(context.Context, int32, string) (string, bool, error) {
				panic("unexpected invocation of MockUserEmailsStore.Get")
			},
		},
		GetInitialSiteAdminInfoFunc: &UserEmailsStoreGetInitialSiteAdminInfoFunc{
			defaultHook: func(context.Context) (string, bool, error) {
				panic("unexpected invocation of MockUserEmailsStore.GetInitialSiteAdminInfo")
			},
		},
		GetLatestVerificationSentEmailFunc: &UserEmailsStoreGetLatestVerificationSentEmailFunc{
			defaultHook: func(context.Context, string) (*UserEmail, error) {
				panic("unexpected invocation of MockUserEmailsStore.GetLatestVerificationSentEmail")
			},
		},
		GetPrimaryEmailFunc: &UserEmailsStoreGetPrimaryEmailFunc{
			defaultHook: func(context.Context, int32) (string, bool, error) {
				panic("unexpected invocation of MockUserEmailsStore.GetPrimaryEmail")
			},
		},
		GetVerifiedEmailsFunc: &UserEmailsStoreGetVerifiedEmailsFunc{
			defaultHook: func(context.Context, ...string) ([]*UserEmail, error) {
				panic("unexpected invocation of MockUserEmailsStore.GetVerifiedEmails")
			},
		},
		HandleFunc: &UserEmailsStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockUserEmailsStore.Handle")
			},
		},
		HasVerifiedEmailFunc: &UserEmailsStoreHasVerifiedEmailFunc{
			defaultHook: func(context.Context, int32) (bool, error) {
				panic("unexpected invocation of MockUserEmailsStore.HasVerifiedEmail")
			},
		},
		ListByUserFunc: &UserEmailsStoreListByUserFunc{
			defaultHook: func(context.Context, UserEmailsListOptions) ([]*UserEmail, error) {
				panic("unexpected invocation of MockUserEmailsStore.ListByUser")
			},
		},
		RemoveFunc: &UserEmailsStoreRemoveFunc{
			defaultHook: func(context.Context, int32, string) error {
				panic("unexpected invocation of MockUserEmailsStore.Remove")
			},
		},
		SetLastVerificationFunc: &UserEmailsStoreSetLastVerificationFunc{
			defaultHook: func(context.Context, int32, string, string, time.Time) error {
				panic("unexpected invocation of MockUserEmailsStore.SetLastVerification")
			},
		},
		SetPrimaryEmailFunc: &UserEmailsStoreSetPrimaryEmailFunc{
			defaultHook: func(context.Context, int32, string) error {
				panic("unexpected invocation of MockUserEmailsStore.SetPrimaryEmail")
			},
		},
		SetVerifiedFunc: &UserEmailsStoreSetVerifiedFunc{
			defaultHook: func(context.Context, int32, string, bool) error {
				panic("unexpected invocation of MockUserEmailsStore.SetVerified")
			},
		},
		TransactFunc: &UserEmailsStoreTransactFunc{
			defaultHook: func(context.Context) (UserEmailsStore, error) {
				panic("unexpected invocation of MockUserEmailsStore.Transact")
			},
		},
		VerifyFunc: &UserEmailsStoreVerifyFunc{
			defaultHook: func(context.Context, int32, string, string) (bool, error) {
				panic("unexpected invocation of MockUserEmailsStore.Verify")
			},
		},
		WithFunc: &UserEmailsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) UserEmailsStore {
				panic("unexpected invocation of MockUserEmailsStore.With")
			},
		},
	}
}

// NewMockUserEmailsStoreFrom creates a new mock of the MockUserEmailsStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockUserEmailsStoreFrom(i UserEmailsStore) *MockUserEmailsStore {
	return &MockUserEmailsStore{
		AddFunc: &UserEmailsStoreAddFunc{
			defaultHook: i.Add,
		},
		DoneFunc: &UserEmailsStoreDoneFunc{
			defaultHook: i.Done,
		},
		GetFunc: &UserEmailsStoreGetFunc{
			defaultHook: i.Get,
		},
		GetInitialSiteAdminInfoFunc: &UserEmailsStoreGetInitialSiteAdminInfoFunc{
			defaultHook: i.GetInitialSiteAdminInfo,
		},
		GetLatestVerificationSentEmailFunc: &UserEmailsStoreGetLatestVerificationSentEmailFunc{
			defaultHook: i.GetLatestVerificationSentEmail,
		},
		GetPrimaryEmailFunc: &UserEmailsStoreGetPrimaryEmailFunc{
			defaultHook: i.GetPrimaryEmail,
		},
		GetVerifiedEmailsFunc: &UserEmailsStoreGetVerifiedEmailsFunc{
			defaultHook: i.GetVerifiedEmails,
		},
		HandleFunc: &UserEmailsStoreHandleFunc{
			defaultHook: i.Handle,
		},
		HasVerifiedEmailFunc: &UserEmailsStoreHasVerifiedEmailFunc{
			defaultHook: i.HasVerifiedEmail,
		},
		ListByUserFunc: &UserEmailsStoreListByUserFunc{
			defaultHook: i.ListByUser,
		},
		RemoveFunc: &UserEmailsStoreRemoveFunc{
			defaultHook: i.Remove,
		},
		SetLastVerificationFunc: &UserEmailsStoreSetLastVerificationFunc{
			defaultHook: i.SetLastVerification,
		},
		SetPrimaryEmailFunc: &UserEmailsStoreSetPrimaryEmailFunc{
			defaultHook: i.SetPrimaryEmail,
		},
		SetVerifiedFunc: &UserEmailsStoreSetVerifiedFunc{
			defaultHook: i.SetVerified,
		},
		TransactFunc: &UserEmailsStoreTransactFunc{
			defaultHook: i.Transact,
		},
		VerifyFunc: &UserEmailsStoreVerifyFunc{
			defaultHook: i.Verify,
		},
		WithFunc: &UserEmailsStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// UserEmailsStoreAddFunc describes the behavior when the Add method of the
// parent MockUserEmailsStore instance is invoked.
type UserEmailsStoreAddFunc struct {
	defaultHook func(context.Context, int32, string, *string) error
	hooks       []func(context.Context, int32, string, *string) error
	history     []UserEmailsStoreAddFuncCall
	mutex       sync.Mutex
}

// Add delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserEmailsStore) Add(v0 context.Context, v1 int32, v2 string, v3 *string) error {
	r0 := m.AddFunc.nextHook()(v0, v1, v2, v3)
	m.AddFunc.appendCall(UserEmailsStoreAddFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Add method of the
// parent MockUserEmailsStore instance is invoked and the hook queue is
// empty.
func (f *UserEmailsStoreAddFunc) SetDefaultHook(hook func(context.Context, int32, string, *string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Add method of the parent MockUserEmailsStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserEmailsStoreAddFunc) PushHook(hook func(context.Context, int32, string, *string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserEmailsStoreAddFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, string, *string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserEmailsStoreAddFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, string, *string) error {
		return r0
	})
}

func (f *UserEmailsStoreAddFunc) nextHook() func(context.Context, int32, string, *string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreAddFunc) appendCall(r0 UserEmailsStoreAddFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreAddFuncCall objects
// describing the invocations of this function.
func (f *UserEmailsStoreAddFunc) History() []UserEmailsStoreAddFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreAddFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreAddFuncCall is an object that describes an invocation of
// method Add on an instance of MockUserEmailsStore.
type UserEmailsStoreAddFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreAddFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreAddFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserEmailsStoreDoneFunc describes the behavior when the Done method of
// the parent MockUserEmailsStore instance is invoked.
type UserEmailsStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []UserEmailsStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserEmailsStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(UserEmailsStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockUserEmailsStore instance is invoked and the hook queue is
// empty.
func (f *UserEmailsStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockUserEmailsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserEmailsStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserEmailsStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserEmailsStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *UserEmailsStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreDoneFunc) appendCall(r0 UserEmailsStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreDoneFuncCall objects
// describing the invocations of this function.
func (f *UserEmailsStoreDoneFunc) History() []UserEmailsStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreDoneFuncCall is an object that describes an invocation of
// method Done on an instance of MockUserEmailsStore.
type UserEmailsStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserEmailsStoreGetFunc describes the behavior when the Get method of the
// parent MockUserEmailsStore instance is invoked.
type UserEmailsStoreGetFunc struct {
	defaultHook func(context.Context, int32, string) (string, bool, error)
	hooks       []func(context.Context, int32, string) (string, bool, error)
	history     []UserEmailsStoreGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserEmailsStore) Get(v0 context.Context, v1 int32, v2 string) (string, bool, error) {
	r0, r1, r2 := m.GetFunc.nextHook()(v0, v1, v2)
	m.GetFunc.appendCall(UserEmailsStoreGetFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockUserEmailsStore instance is invoked and the hook queue is
// empty.
func (f *UserEmailsStoreGetFunc) SetDefaultHook(hook func(context.Context, int32, string) (string, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockUserEmailsStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserEmailsStoreGetFunc) PushHook(hook func(context.Context, int32, string) (string, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserEmailsStoreGetFunc) SetDefaultReturn(r0 string, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, int32, string) (string, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserEmailsStoreGetFunc) PushReturn(r0 string, r1 bool, r2 error) {
	f.PushHook(func(context.Context, int32, string) (string, bool, error) {
		return r0, r1, r2
	})
}

func (f *UserEmailsStoreGetFunc) nextHook() func(context.Context, int32, string) (string, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreGetFunc) appendCall(r0 UserEmailsStoreGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreGetFuncCall objects
// describing the invocations of this function.
func (f *UserEmailsStoreGetFunc) History() []UserEmailsStoreGetFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreGetFuncCall is an object that describes an invocation of
// method Get on an instance of MockUserEmailsStore.
type UserEmailsStoreGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// UserEmailsStoreGetInitialSiteAdminInfoFunc describes the behavior when
// the GetInitialSiteAdminInfo method of the parent MockUserEmailsStore
// instance is invoked.
type UserEmailsStoreGetInitialSiteAdminInfoFunc struct {
	defaultHook func(context.Context) (string, bool, error)
	hooks       []func(context.Context) (string, bool, error)
	history     []UserEmailsStoreGetInitialSiteAdminInfoFuncCall
	mutex       sync.Mutex
}

// GetInitialSiteAdminInfo delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUserEmailsStore) GetInitialSiteAdminInfo(v0 context.Context) (string, bool, error) {
	r0, r1, r2 := m.GetInitialSiteAdminInfoFunc.nextHook()(v0)
	m.GetInitialSiteAdminInfoFunc.appendCall(UserEmailsStoreGetInitialSiteAdminInfoFuncCall{v0, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// GetInitialSiteAdminInfo method of the parent MockUserEmailsStore instance
// is invoked and the hook queue is empty.
func (f *UserEmailsStoreGetInitialSiteAdminInfoFunc) SetDefaultHook(hook func(context.Context) (string, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetInitialSiteAdminInfo method of the parent MockUserEmailsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserEmailsStoreGetInitialSiteAdminInfoFunc) PushHook(hook func(context.Context) (string, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserEmailsStoreGetInitialSiteAdminInfoFunc) SetDefaultReturn(r0 string, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context) (string, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserEmailsStoreGetInitialSiteAdminInfoFunc) PushReturn(r0 string, r1 bool, r2 error) {
	f.PushHook(func(context.Context) (string, bool, error) {
		return r0, r1, r2
	})
}

func (f *UserEmailsStoreGetInitialSiteAdminInfoFunc) nextHook() func(context.Context) (string, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreGetInitialSiteAdminInfoFunc) appendCall(r0 UserEmailsStoreGetInitialSiteAdminInfoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UserEmailsStoreGetInitialSiteAdminInfoFuncCall objects describing the
// invocations of this function.
func (f *UserEmailsStoreGetInitialSiteAdminInfoFunc) History() []UserEmailsStoreGetInitialSiteAdminInfoFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreGetInitialSiteAdminInfoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreGetInitialSiteAdminInfoFuncCall is an object that
// describes an invocation of method GetInitialSiteAdminInfo on an instance
// of MockUserEmailsStore.
type UserEmailsStoreGetInitialSiteAdminInfoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreGetInitialSiteAdminInfoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreGetInitialSiteAdminInfoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// UserEmailsStoreGetLatestVerificationSentEmailFunc describes the behavior
// when the GetLatestVerificationSentEmail method of the parent
// MockUserEmailsStore instance is invoked.
type UserEmailsStoreGetLatestVerificationSentEmailFunc struct {
	defaultHook func(context.Context, string) (*UserEmail, error)
	hooks       []func(context.Context, string) (*UserEmail, error)
	history     []UserEmailsStoreGetLatestVerificationSentEmailFuncCall
	mutex       sync.Mutex
}

// GetLatestVerificationSentEmail delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockUserEmailsStore) GetLatestVerificationSentEmail(v0 context.Context, v1 string) (*UserEmail, error) {
	r0, r1 := m.GetLatestVerificationSentEmailFunc.nextHook()(v0, v1)
	m.GetLatestVerificationSentEmailFunc.appendCall(UserEmailsStoreGetLatestVerificationSentEmailFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetLatestVerificationSentEmail method of the parent MockUserEmailsStore
// instance is invoked and the hook queue is empty.
func (f *UserEmailsStoreGetLatestVerificationSentEmailFunc) SetDefaultHook(hook func(context.Context, string) (*UserEmail, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLatestVerificationSentEmail method of the parent MockUserEmailsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *UserEmailsStoreGetLatestVerificationSentEmailFunc) PushHook(hook func(context.Context, string) (*UserEmail, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserEmailsStoreGetLatestVerificationSentEmailFunc) SetDefaultReturn(r0 *UserEmail, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*UserEmail, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserEmailsStoreGetLatestVerificationSentEmailFunc) PushReturn(r0 *UserEmail, r1 error) {
	f.PushHook(func(context.Context, string) (*UserEmail, error) {
		return r0, r1
	})
}

func (f *UserEmailsStoreGetLatestVerificationSentEmailFunc) nextHook() func(context.Context, string) (*UserEmail, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreGetLatestVerificationSentEmailFunc) appendCall(r0 UserEmailsStoreGetLatestVerificationSentEmailFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UserEmailsStoreGetLatestVerificationSentEmailFuncCall objects describing
// the invocations of this function.
func (f *UserEmailsStoreGetLatestVerificationSentEmailFunc) History() []UserEmailsStoreGetLatestVerificationSentEmailFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreGetLatestVerificationSentEmailFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreGetLatestVerificationSentEmailFuncCall is an object that
// describes an invocation of method GetLatestVerificationSentEmail on an
// instance of MockUserEmailsStore.
type UserEmailsStoreGetLatestVerificationSentEmailFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *UserEmail
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreGetLatestVerificationSentEmailFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreGetLatestVerificationSentEmailFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserEmailsStoreGetPrimaryEmailFunc describes the behavior when the
// GetPrimaryEmail method of the parent MockUserEmailsStore instance is
// invoked.
type UserEmailsStoreGetPrimaryEmailFunc struct {
	defaultHook func(context.Context, int32) (string, bool, error)
	hooks       []func(context.Context, int32) (string, bool, error)
	history     []UserEmailsStoreGetPrimaryEmailFuncCall
	mutex       sync.Mutex
}

// GetPrimaryEmail delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserEmailsStore) GetPrimaryEmail(v0 context.Context, v1 int32) (string, bool, error) {
	r0, r1, r2 := m.GetPrimaryEmailFunc.nextHook()(v0, v1)
	m.GetPrimaryEmailFunc.appendCall(UserEmailsStoreGetPrimaryEmailFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetPrimaryEmail
// method of the parent MockUserEmailsStore instance is invoked and the hook
// queue is empty.
func (f *UserEmailsStoreGetPrimaryEmailFunc) SetDefaultHook(hook func(context.Context, int32) (string, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPrimaryEmail method of the parent MockUserEmailsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserEmailsStoreGetPrimaryEmailFunc) PushHook(hook func(context.Context, int32) (string, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserEmailsStoreGetPrimaryEmailFunc) SetDefaultReturn(r0 string, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, int32) (string, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserEmailsStoreGetPrimaryEmailFunc) PushReturn(r0 string, r1 bool, r2 error) {
	f.PushHook(func(context.Context, int32) (string, bool, error) {
		return r0, r1, r2
	})
}

func (f *UserEmailsStoreGetPrimaryEmailFunc) nextHook() func(context.Context, int32) (string, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreGetPrimaryEmailFunc) appendCall(r0 UserEmailsStoreGetPrimaryEmailFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreGetPrimaryEmailFuncCall
// objects describing the invocations of this function.
func (f *UserEmailsStoreGetPrimaryEmailFunc) History() []UserEmailsStoreGetPrimaryEmailFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreGetPrimaryEmailFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreGetPrimaryEmailFuncCall is an object that describes an
// invocation of method GetPrimaryEmail on an instance of
// MockUserEmailsStore.
type UserEmailsStoreGetPrimaryEmailFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreGetPrimaryEmailFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreGetPrimaryEmailFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// UserEmailsStoreGetVerifiedEmailsFunc describes the behavior when the
// GetVerifiedEmails method of the parent MockUserEmailsStore instance is
// invoked.
type UserEmailsStoreGetVerifiedEmailsFunc struct {
	defaultHook func(context.Context, ...string) ([]*UserEmail, error)
	hooks       []func(context.Context, ...string) ([]*UserEmail, error)
	history     []UserEmailsStoreGetVerifiedEmailsFuncCall
	mutex       sync.Mutex
}

// GetVerifiedEmails delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserEmailsStore) GetVerifiedEmails(v0 context.Context, v1 ...string) ([]*UserEmail, error) {
	r0, r1 := m.GetVerifiedEmailsFunc.nextHook()(v0, v1...)
	m.GetVerifiedEmailsFunc.appendCall(UserEmailsStoreGetVerifiedEmailsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetVerifiedEmails
// method of the parent MockUserEmailsStore instance is invoked and the hook
// queue is empty.
func (f *UserEmailsStoreGetVerifiedEmailsFunc) SetDefaultHook(hook func(context.Context, ...string) ([]*UserEmail, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetVerifiedEmails method of the parent MockUserEmailsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserEmailsStoreGetVerifiedEmailsFunc) PushHook(hook func(context.Context, ...string) ([]*UserEmail, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserEmailsStoreGetVerifiedEmailsFunc) SetDefaultReturn(r0 []*UserEmail, r1 error) {
	f.SetDefaultHook(func(context.Context, ...string) ([]*UserEmail, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserEmailsStoreGetVerifiedEmailsFunc) PushReturn(r0 []*UserEmail, r1 error) {
	f.PushHook(func(context.Context, ...string) ([]*UserEmail, error) {
		return r0, r1
	})
}

func (f *UserEmailsStoreGetVerifiedEmailsFunc) nextHook() func(context.Context, ...string) ([]*UserEmail, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreGetVerifiedEmailsFunc) appendCall(r0 UserEmailsStoreGetVerifiedEmailsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreGetVerifiedEmailsFuncCall
// objects describing the invocations of this function.
func (f *UserEmailsStoreGetVerifiedEmailsFunc) History() []UserEmailsStoreGetVerifiedEmailsFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreGetVerifiedEmailsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreGetVerifiedEmailsFuncCall is an object that describes an
// invocation of method GetVerifiedEmails on an instance of
// MockUserEmailsStore.
type UserEmailsStoreGetVerifiedEmailsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*UserEmail
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c UserEmailsStoreGetVerifiedEmailsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreGetVerifiedEmailsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserEmailsStoreHandleFunc describes the behavior when the Handle method
// of the parent MockUserEmailsStore instance is invoked.
type UserEmailsStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []UserEmailsStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserEmailsStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(UserEmailsStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockUserEmailsStore instance is invoked and the hook queue is
// empty.
func (f *UserEmailsStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockUserEmailsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserEmailsStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserEmailsStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserEmailsStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *UserEmailsStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreHandleFunc) appendCall(r0 UserEmailsStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *UserEmailsStoreHandleFunc) History() []UserEmailsStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreHandleFuncCall is an object that describes an invocation
// of method Handle on an instance of MockUserEmailsStore.
type UserEmailsStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserEmailsStoreHasVerifiedEmailFunc describes the behavior when the
// HasVerifiedEmail method of the parent MockUserEmailsStore instance is
// invoked.
type UserEmailsStoreHasVerifiedEmailFunc struct {
	defaultHook func(context.Context, int32) (bool, error)
	hooks       []func(context.Context, int32) (bool, error)
	history     []UserEmailsStoreHasVerifiedEmailFuncCall
	mutex       sync.Mutex
}

// HasVerifiedEmail delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserEmailsStore) HasVerifiedEmail(v0 context.Context, v1 int32) (bool, error) {
	r0, r1 := m.HasVerifiedEmailFunc.nextHook()(v0, v1)
	m.HasVerifiedEmailFunc.appendCall(UserEmailsStoreHasVerifiedEmailFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the HasVerifiedEmail
// method of the parent MockUserEmailsStore instance is invoked and the hook
// queue is empty.
func (f *UserEmailsStoreHasVerifiedEmailFunc) SetDefaultHook(hook func(context.Context, int32) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// HasVerifiedEmail method of the parent MockUserEmailsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserEmailsStoreHasVerifiedEmailFunc) PushHook(hook func(context.Context, int32) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserEmailsStoreHasVerifiedEmailFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserEmailsStoreHasVerifiedEmailFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int32) (bool, error) {
		return r0, r1
	})
}

func (f *UserEmailsStoreHasVerifiedEmailFunc) nextHook() func(context.Context, int32) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreHasVerifiedEmailFunc) appendCall(r0 UserEmailsStoreHasVerifiedEmailFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreHasVerifiedEmailFuncCall
// objects describing the invocations of this function.
func (f *UserEmailsStoreHasVerifiedEmailFunc) History() []UserEmailsStoreHasVerifiedEmailFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreHasVerifiedEmailFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreHasVerifiedEmailFuncCall is an object that describes an
// invocation of method HasVerifiedEmail on an instance of
// MockUserEmailsStore.
type UserEmailsStoreHasVerifiedEmailFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreHasVerifiedEmailFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreHasVerifiedEmailFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserEmailsStoreListByUserFunc describes the behavior when the ListByUser
// method of the parent MockUserEmailsStore instance is invoked.
type UserEmailsStoreListByUserFunc struct {
	defaultHook func(context.Context, UserEmailsListOptions) ([]*UserEmail, error)
	hooks       []func(context.Context, UserEmailsListOptions) ([]*UserEmail, error)
	history     []UserEmailsStoreListByUserFuncCall
	mutex       sync.Mutex
}

// ListByUser delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserEmailsStore) ListByUser(v0 context.Context, v1 UserEmailsListOptions) ([]*UserEmail, error) {
	r0, r1 := m.ListByUserFunc.nextHook()(v0, v1)
	m.ListByUserFunc.appendCall(UserEmailsStoreListByUserFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListByUser method of
// the parent MockUserEmailsStore instance is invoked and the hook queue is
// empty.
func (f *UserEmailsStoreListByUserFunc) SetDefaultHook(hook func(context.Context, UserEmailsListOptions) ([]*UserEmail, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListByUser method of the parent MockUserEmailsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserEmailsStoreListByUserFunc) PushHook(hook func(context.Context, UserEmailsListOptions) ([]*UserEmail, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserEmailsStoreListByUserFunc) SetDefaultReturn(r0 []*UserEmail, r1 error) {
	f.SetDefaultHook(func(context.Context, UserEmailsListOptions) ([]*UserEmail, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserEmailsStoreListByUserFunc) PushReturn(r0 []*UserEmail, r1 error) {
	f.PushHook(func(context.Context, UserEmailsListOptions) ([]*UserEmail, error) {
		return r0, r1
	})
}

func (f *UserEmailsStoreListByUserFunc) nextHook() func(context.Context, UserEmailsListOptions) ([]*UserEmail, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreListByUserFunc) appendCall(r0 UserEmailsStoreListByUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreListByUserFuncCall objects
// describing the invocations of this function.
func (f *UserEmailsStoreListByUserFunc) History() []UserEmailsStoreListByUserFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreListByUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreListByUserFuncCall is an object that describes an
// invocation of method ListByUser on an instance of MockUserEmailsStore.
type UserEmailsStoreListByUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 UserEmailsListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*UserEmail
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreListByUserFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreListByUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserEmailsStoreRemoveFunc describes the behavior when the Remove method
// of the parent MockUserEmailsStore instance is invoked.
type UserEmailsStoreRemoveFunc struct {
	defaultHook func(context.Context, int32, string) error
	hooks       []func(context.Context, int32, string) error
	history     []UserEmailsStoreRemoveFuncCall
	mutex       sync.Mutex
}

// Remove delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserEmailsStore) Remove(v0 context.Context, v1 int32, v2 string) error {
	r0 := m.RemoveFunc.nextHook()(v0, v1, v2)
	m.RemoveFunc.appendCall(UserEmailsStoreRemoveFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Remove method of the
// parent MockUserEmailsStore instance is invoked and the hook queue is
// empty.
func (f *UserEmailsStoreRemoveFunc) SetDefaultHook(hook func(context.Context, int32, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Remove method of the parent MockUserEmailsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserEmailsStoreRemoveFunc) PushHook(hook func(context.Context, int32, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserEmailsStoreRemoveFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserEmailsStoreRemoveFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, string) error {
		return r0
	})
}

func (f *UserEmailsStoreRemoveFunc) nextHook() func(context.Context, int32, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreRemoveFunc) appendCall(r0 UserEmailsStoreRemoveFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreRemoveFuncCall objects
// describing the invocations of this function.
func (f *UserEmailsStoreRemoveFunc) History() []UserEmailsStoreRemoveFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreRemoveFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreRemoveFuncCall is an object that describes an invocation
// of method Remove on an instance of MockUserEmailsStore.
type UserEmailsStoreRemoveFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreRemoveFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreRemoveFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserEmailsStoreSetLastVerificationFunc describes the behavior when the
// SetLastVerification method of the parent MockUserEmailsStore instance is
// invoked.
type UserEmailsStoreSetLastVerificationFunc struct {
	defaultHook func(context.Context, int32, string, string, time.Time) error
	hooks       []func(context.Context, int32, string, string, time.Time) error
	history     []UserEmailsStoreSetLastVerificationFuncCall
	mutex       sync.Mutex
}

// SetLastVerification delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserEmailsStore) SetLastVerification(v0 context.Context, v1 int32, v2 string, v3 string, v4 time.Time) error {
	r0 := m.SetLastVerificationFunc.nextHook()(v0, v1, v2, v3, v4)
	m.SetLastVerificationFunc.appendCall(UserEmailsStoreSetLastVerificationFuncCall{v0, v1, v2, v3, v4, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetLastVerification
// method of the parent MockUserEmailsStore instance is invoked and the hook
// queue is empty.
func (f *UserEmailsStoreSetLastVerificationFunc) SetDefaultHook(hook func(context.Context, int32, string, string, time.Time) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetLastVerification method of the parent MockUserEmailsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserEmailsStoreSetLastVerificationFunc) PushHook(hook func(context.Context, int32, string, string, time.Time) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserEmailsStoreSetLastVerificationFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, string, string, time.Time) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserEmailsStoreSetLastVerificationFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, string, string, time.Time) error {
		return r0
	})
}

func (f *UserEmailsStoreSetLastVerificationFunc) nextHook() func(context.Context, int32, string, string, time.Time) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreSetLastVerificationFunc) appendCall(r0 UserEmailsStoreSetLastVerificationFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreSetLastVerificationFuncCall
// objects describing the invocations of this function.
func (f *UserEmailsStoreSetLastVerificationFunc) History() []UserEmailsStoreSetLastVerificationFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreSetLastVerificationFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreSetLastVerificationFuncCall is an object that describes an
// invocation of method SetLastVerification on an instance of
// MockUserEmailsStore.
type UserEmailsStoreSetLastVerificationFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreSetLastVerificationFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreSetLastVerificationFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserEmailsStoreSetPrimaryEmailFunc describes the behavior when the
// SetPrimaryEmail method of the parent MockUserEmailsStore instance is
// invoked.
type UserEmailsStoreSetPrimaryEmailFunc struct {
	defaultHook func(context.Context, int32, string) error
	hooks       []func(context.Context, int32, string) error
	history     []UserEmailsStoreSetPrimaryEmailFuncCall
	mutex       sync.Mutex
}

// SetPrimaryEmail delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserEmailsStore) SetPrimaryEmail(v0 context.Context, v1 int32, v2 string) error {
	r0 := m.SetPrimaryEmailFunc.nextHook()(v0, v1, v2)
	m.SetPrimaryEmailFunc.appendCall(UserEmailsStoreSetPrimaryEmailFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetPrimaryEmail
// method of the parent MockUserEmailsStore instance is invoked and the hook
// queue is empty.
func (f *UserEmailsStoreSetPrimaryEmailFunc) SetDefaultHook(hook func(context.Context, int32, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetPrimaryEmail method of the parent MockUserEmailsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserEmailsStoreSetPrimaryEmailFunc) PushHook(hook func(context.Context, int32, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserEmailsStoreSetPrimaryEmailFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserEmailsStoreSetPrimaryEmailFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, string) error {
		return r0
	})
}

func (f *UserEmailsStoreSetPrimaryEmailFunc) nextHook() func(context.Context, int32, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreSetPrimaryEmailFunc) appendCall(r0 UserEmailsStoreSetPrimaryEmailFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreSetPrimaryEmailFuncCall
// objects describing the invocations of this function.
func (f *UserEmailsStoreSetPrimaryEmailFunc) History() []UserEmailsStoreSetPrimaryEmailFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreSetPrimaryEmailFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreSetPrimaryEmailFuncCall is an object that describes an
// invocation of method SetPrimaryEmail on an instance of
// MockUserEmailsStore.
type UserEmailsStoreSetPrimaryEmailFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreSetPrimaryEmailFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreSetPrimaryEmailFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserEmailsStoreSetVerifiedFunc describes the behavior when the
// SetVerified method of the parent MockUserEmailsStore instance is invoked.
type UserEmailsStoreSetVerifiedFunc struct {
	defaultHook func(context.Context, int32, string, bool) error
	hooks       []func(context.Context, int32, string, bool) error
	history     []UserEmailsStoreSetVerifiedFuncCall
	mutex       sync.Mutex
}

// SetVerified delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserEmailsStore) SetVerified(v0 context.Context, v1 int32, v2 string, v3 bool) error {
	r0 := m.SetVerifiedFunc.nextHook()(v0, v1, v2, v3)
	m.SetVerifiedFunc.appendCall(UserEmailsStoreSetVerifiedFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetVerified method
// of the parent MockUserEmailsStore instance is invoked and the hook queue
// is empty.
func (f *UserEmailsStoreSetVerifiedFunc) SetDefaultHook(hook func(context.Context, int32, string, bool) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetVerified method of the parent MockUserEmailsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserEmailsStoreSetVerifiedFunc) PushHook(hook func(context.Context, int32, string, bool) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserEmailsStoreSetVerifiedFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, string, bool) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserEmailsStoreSetVerifiedFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, string, bool) error {
		return r0
	})
}

func (f *UserEmailsStoreSetVerifiedFunc) nextHook() func(context.Context, int32, string, bool) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreSetVerifiedFunc) appendCall(r0 UserEmailsStoreSetVerifiedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreSetVerifiedFuncCall objects
// describing the invocations of this function.
func (f *UserEmailsStoreSetVerifiedFunc) History() []UserEmailsStoreSetVerifiedFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreSetVerifiedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreSetVerifiedFuncCall is an object that describes an
// invocation of method SetVerified on an instance of MockUserEmailsStore.
type UserEmailsStoreSetVerifiedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreSetVerifiedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreSetVerifiedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserEmailsStoreTransactFunc describes the behavior when the Transact
// method of the parent MockUserEmailsStore instance is invoked.
type UserEmailsStoreTransactFunc struct {
	defaultHook func(context.Context) (UserEmailsStore, error)
	hooks       []func(context.Context) (UserEmailsStore, error)
	history     []UserEmailsStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserEmailsStore) Transact(v0 context.Context) (UserEmailsStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(UserEmailsStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockUserEmailsStore instance is invoked and the hook queue is
// empty.
func (f *UserEmailsStoreTransactFunc) SetDefaultHook(hook func(context.Context) (UserEmailsStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockUserEmailsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserEmailsStoreTransactFunc) PushHook(hook func(context.Context) (UserEmailsStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserEmailsStoreTransactFunc) SetDefaultReturn(r0 UserEmailsStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (UserEmailsStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserEmailsStoreTransactFunc) PushReturn(r0 UserEmailsStore, r1 error) {
	f.PushHook(func(context.Context) (UserEmailsStore, error) {
		return r0, r1
	})
}

func (f *UserEmailsStoreTransactFunc) nextHook() func(context.Context) (UserEmailsStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreTransactFunc) appendCall(r0 UserEmailsStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *UserEmailsStoreTransactFunc) History() []UserEmailsStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreTransactFuncCall is an object that describes an invocation
// of method Transact on an instance of MockUserEmailsStore.
type UserEmailsStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 UserEmailsStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserEmailsStoreVerifyFunc describes the behavior when the Verify method
// of the parent MockUserEmailsStore instance is invoked.
type UserEmailsStoreVerifyFunc struct {
	defaultHook func(context.Context, int32, string, string) (bool, error)
	hooks       []func(context.Context, int32, string, string) (bool, error)
	history     []UserEmailsStoreVerifyFuncCall
	mutex       sync.Mutex
}

// Verify delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserEmailsStore) Verify(v0 context.Context, v1 int32, v2 string, v3 string) (bool, error) {
	r0, r1 := m.VerifyFunc.nextHook()(v0, v1, v2, v3)
	m.VerifyFunc.appendCall(UserEmailsStoreVerifyFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Verify method of the
// parent MockUserEmailsStore instance is invoked and the hook queue is
// empty.
func (f *UserEmailsStoreVerifyFunc) SetDefaultHook(hook func(context.Context, int32, string, string) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Verify method of the parent MockUserEmailsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserEmailsStoreVerifyFunc) PushHook(hook func(context.Context, int32, string, string) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserEmailsStoreVerifyFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, string, string) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserEmailsStoreVerifyFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int32, string, string) (bool, error) {
		return r0, r1
	})
}

func (f *UserEmailsStoreVerifyFunc) nextHook() func(context.Context, int32, string, string) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreVerifyFunc) appendCall(r0 UserEmailsStoreVerifyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreVerifyFuncCall objects
// describing the invocations of this function.
func (f *UserEmailsStoreVerifyFunc) History() []UserEmailsStoreVerifyFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreVerifyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreVerifyFuncCall is an object that describes an invocation
// of method Verify on an instance of MockUserEmailsStore.
type UserEmailsStoreVerifyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreVerifyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreVerifyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserEmailsStoreWithFunc describes the behavior when the With method of
// the parent MockUserEmailsStore instance is invoked.
type UserEmailsStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) UserEmailsStore
	hooks       []func(basestore.ShareableStore) UserEmailsStore
	history     []UserEmailsStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserEmailsStore) With(v0 basestore.ShareableStore) UserEmailsStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(UserEmailsStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockUserEmailsStore instance is invoked and the hook queue is
// empty.
func (f *UserEmailsStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) UserEmailsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockUserEmailsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserEmailsStoreWithFunc) PushHook(hook func(basestore.ShareableStore) UserEmailsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserEmailsStoreWithFunc) SetDefaultReturn(r0 UserEmailsStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) UserEmailsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserEmailsStoreWithFunc) PushReturn(r0 UserEmailsStore) {
	f.PushHook(func(basestore.ShareableStore) UserEmailsStore {
		return r0
	})
}

func (f *UserEmailsStoreWithFunc) nextHook() func(basestore.ShareableStore) UserEmailsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserEmailsStoreWithFunc) appendCall(r0 UserEmailsStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserEmailsStoreWithFuncCall objects
// describing the invocations of this function.
func (f *UserEmailsStoreWithFunc) History() []UserEmailsStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]UserEmailsStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserEmailsStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockUserEmailsStore.
type UserEmailsStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 UserEmailsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserEmailsStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserEmailsStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockUserExternalAccountsStore is a mock implementation of the
// UserExternalAccountsStore interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockUserExternalAccountsStore struct {
	// AssociateUserAndSaveFunc is an instance of a mock function object
	// controlling the behavior of the method AssociateUserAndSave.
	AssociateUserAndSaveFunc *UserExternalAccountsStoreAssociateUserAndSaveFunc
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *UserExternalAccountsStoreCountFunc
	// CreateUserAndSaveFunc is an instance of a mock function object
	// controlling the behavior of the method CreateUserAndSave.
	CreateUserAndSaveFunc *UserExternalAccountsStoreCreateUserAndSaveFunc
	// DeleteFunc is an instance of a mock function object controlling the
	// behavior of the method Delete.
	DeleteFunc *UserExternalAccountsStoreDeleteFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *UserExternalAccountsStoreDoneFunc
	// ExecResultFunc is an instance of a mock function object controlling
	// the behavior of the method ExecResult.
	ExecResultFunc *UserExternalAccountsStoreExecResultFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *UserExternalAccountsStoreGetFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *UserExternalAccountsStoreHandleFunc
	// InsertFunc is an instance of a mock function object controlling the
	// behavior of the method Insert.
	InsertFunc *UserExternalAccountsStoreInsertFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *UserExternalAccountsStoreListFunc
	// LookupUserAndSaveFunc is an instance of a mock function object
	// controlling the behavior of the method LookupUserAndSave.
	LookupUserAndSaveFunc *UserExternalAccountsStoreLookupUserAndSaveFunc
	// QueryRowFunc is an instance of a mock function object controlling the
	// behavior of the method QueryRow.
	QueryRowFunc *UserExternalAccountsStoreQueryRowFunc
	// TouchExpiredFunc is an instance of a mock function object controlling
	// the behavior of the method TouchExpired.
	TouchExpiredFunc *UserExternalAccountsStoreTouchExpiredFunc
	// TouchLastValidFunc is an instance of a mock function object
	// controlling the behavior of the method TouchLastValid.
	TouchLastValidFunc *UserExternalAccountsStoreTouchLastValidFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *UserExternalAccountsStoreTransactFunc
	// UpsertSCIMDataFunc is an instance of a mock function object
	// controlling the behavior of the method UpsertSCIMData.
	UpsertSCIMDataFunc *UserExternalAccountsStoreUpsertSCIMDataFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *UserExternalAccountsStoreWithFunc
	// WithEncryptionKeyFunc is an instance of a mock function object
	// controlling the behavior of the method WithEncryptionKey.
	WithEncryptionKeyFunc *UserExternalAccountsStoreWithEncryptionKeyFunc
}

// NewMockUserExternalAccountsStore creates a new mock of the
// UserExternalAccountsStore interface. All methods return zero values for
// all results, unless overwritten.
func NewMockUserExternalAccountsStore() *MockUserExternalAccountsStore {
	return &MockUserExternalAccountsStore{
		AssociateUserAndSaveFunc: &UserExternalAccountsStoreAssociateUserAndSaveFunc{
			defaultHook: func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) (r0 error) {
				return
			},
		},
		CountFunc: &UserExternalAccountsStoreCountFunc{
			defaultHook: func(context.Context, ExternalAccountsListOptions) (r0 int, r1 error) {
				return
			},
		},
		CreateUserAndSaveFunc: &UserExternalAccountsStoreCreateUserAndSaveFunc{
			defaultHook: func(context.Context, NewUser, extsvc.AccountSpec, extsvc.AccountData) (r0 *types.User, r1 error) {
				return
			},
		},
		DeleteFunc: &UserExternalAccountsStoreDeleteFunc{
			defaultHook: func(context.Context, ExternalAccountsDeleteOptions) (r0 error) {
				return
			},
		},
		DoneFunc: &UserExternalAccountsStoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		ExecResultFunc: &UserExternalAccountsStoreExecResultFunc{
			defaultHook: func(context.Context, *sqlf.Query) (r0 sql.Result, r1 error) {
				return
			},
		},
		GetFunc: &UserExternalAccountsStoreGetFunc{
			defaultHook: func(context.Context, int32) (r0 *extsvc.Account, r1 error) {
				return
			},
		},
		HandleFunc: &UserExternalAccountsStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		InsertFunc: &UserExternalAccountsStoreInsertFunc{
			defaultHook: func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) (r0 error) {
				return
			},
		},
		ListFunc: &UserExternalAccountsStoreListFunc{
			defaultHook: func(context.Context, ExternalAccountsListOptions) (r0 []*extsvc.Account, r1 error) {
				return
			},
		},
		LookupUserAndSaveFunc: &UserExternalAccountsStoreLookupUserAndSaveFunc{
			defaultHook: func(context.Context, extsvc.AccountSpec, extsvc.AccountData) (r0 int32, r1 error) {
				return
			},
		},
		QueryRowFunc: &UserExternalAccountsStoreQueryRowFunc{
			defaultHook: func(context.Context, *sqlf.Query) (r0 *sql.Row) {
				return
			},
		},
		TouchExpiredFunc: &UserExternalAccountsStoreTouchExpiredFunc{
			defaultHook: func(context.Context, ...int32) (r0 error) {
				return
			},
		},
		TouchLastValidFunc: &UserExternalAccountsStoreTouchLastValidFunc{
			defaultHook: func(context.Context, int32) (r0 error) {
				return
			},
		},
		TransactFunc: &UserExternalAccountsStoreTransactFunc{
			defaultHook: func(context.Context) (r0 UserExternalAccountsStore, r1 error) {
				return
			},
		},
		UpsertSCIMDataFunc: &UserExternalAccountsStoreUpsertSCIMDataFunc{
			defaultHook: func(context.Context, int32, string, extsvc.AccountData) (r0 error) {
				return
			},
		},
		WithFunc: &UserExternalAccountsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 UserExternalAccountsStore) {
				return
			},
		},
		WithEncryptionKeyFunc: &UserExternalAccountsStoreWithEncryptionKeyFunc{
			defaultHook: func(encryption.Key) (r0 UserExternalAccountsStore) {
				return
			},
		},
	}
}

// NewStrictMockUserExternalAccountsStore creates a new mock of the
// UserExternalAccountsStore interface. All methods panic on invocation,
// unless overwritten.
func NewStrictMockUserExternalAccountsStore() *MockUserExternalAccountsStore {
	return &MockUserExternalAccountsStore{
		AssociateUserAndSaveFunc: &UserExternalAccountsStoreAssociateUserAndSaveFunc{
			defaultHook: func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error {
				panic("unexpected invocation of MockUserExternalAccountsStore.AssociateUserAndSave")
			},
		},
		CountFunc: &UserExternalAccountsStoreCountFunc{
			defaultHook: func(context.Context, ExternalAccountsListOptions) (int, error) {
				panic("unexpected invocation of MockUserExternalAccountsStore.Count")
			},
		},
		CreateUserAndSaveFunc: &UserExternalAccountsStoreCreateUserAndSaveFunc{
			defaultHook: func(context.Context, NewUser, extsvc.AccountSpec, extsvc.AccountData) (*types.User, error) {
				panic("unexpected invocation of MockUserExternalAccountsStore.CreateUserAndSave")
			},
		},
		DeleteFunc: &UserExternalAccountsStoreDeleteFunc{
			defaultHook: func(context.Context, ExternalAccountsDeleteOptions) error {
				panic("unexpected invocation of MockUserExternalAccountsStore.Delete")
			},
		},
		DoneFunc: &UserExternalAccountsStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockUserExternalAccountsStore.Done")
			},
		},
		ExecResultFunc: &UserExternalAccountsStoreExecResultFunc{
			defaultHook: func(context.Context, *sqlf.Query) (sql.Result, error) {
				panic("unexpected invocation of MockUserExternalAccountsStore.ExecResult")
			},
		},
		GetFunc: &UserExternalAccountsStoreGetFunc{
			defaultHook: func(context.Context, int32) (*extsvc.Account, error) {
				panic("unexpected invocation of MockUserExternalAccountsStore.Get")
			},
		},
		HandleFunc: &UserExternalAccountsStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockUserExternalAccountsStore.Handle")
			},
		},
		InsertFunc: &UserExternalAccountsStoreInsertFunc{
			defaultHook: func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error {
				panic("unexpected invocation of MockUserExternalAccountsStore.Insert")
			},
		},
		ListFunc: &UserExternalAccountsStoreListFunc{
			defaultHook: func(context.Context, ExternalAccountsListOptions) ([]*extsvc.Account, error) {
				panic("unexpected invocation of MockUserExternalAccountsStore.List")
			},
		},
		LookupUserAndSaveFunc: &UserExternalAccountsStoreLookupUserAndSaveFunc{
			defaultHook: func(context.Context, extsvc.AccountSpec, extsvc.AccountData) (int32, error) {
				panic("unexpected invocation of MockUserExternalAccountsStore.LookupUserAndSave")
			},
		},
		QueryRowFunc: &UserExternalAccountsStoreQueryRowFunc{
			defaultHook: func(context.Context, *sqlf.Query) *sql.Row {
				panic("unexpected invocation of MockUserExternalAccountsStore.QueryRow")
			},
		},
		TouchExpiredFunc: &UserExternalAccountsStoreTouchExpiredFunc{
			defaultHook: func(context.Context, ...int32) error {
				panic("unexpected invocation of MockUserExternalAccountsStore.TouchExpired")
			},
		},
		TouchLastValidFunc: &UserExternalAccountsStoreTouchLastValidFunc{
			defaultHook: func(context.Context, int32) error {
				panic("unexpected invocation of MockUserExternalAccountsStore.TouchLastValid")
			},
		},
		TransactFunc: &UserExternalAccountsStoreTransactFunc{
			defaultHook: func(context.Context) (UserExternalAccountsStore, error) {
				panic("unexpected invocation of MockUserExternalAccountsStore.Transact")
			},
		},
		UpsertSCIMDataFunc: &UserExternalAccountsStoreUpsertSCIMDataFunc{
			defaultHook: func(context.Context, int32, string, extsvc.AccountData) error {
				panic("unexpected invocation of MockUserExternalAccountsStore.UpsertSCIMData")
			},
		},
		WithFunc: &UserExternalAccountsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) UserExternalAccountsStore {
				panic("unexpected invocation of MockUserExternalAccountsStore.With")
			},
		},
		WithEncryptionKeyFunc: &UserExternalAccountsStoreWithEncryptionKeyFunc{
			defaultHook: func(encryption.Key) UserExternalAccountsStore {
				panic("unexpected invocation of MockUserExternalAccountsStore.WithEncryptionKey")
			},
		},
	}
}

// NewMockUserExternalAccountsStoreFrom creates a new mock of the
// MockUserExternalAccountsStore interface. All methods delegate to the
// given implementation, unless overwritten.
func NewMockUserExternalAccountsStoreFrom(i UserExternalAccountsStore) *MockUserExternalAccountsStore {
	return &MockUserExternalAccountsStore{
		AssociateUserAndSaveFunc: &UserExternalAccountsStoreAssociateUserAndSaveFunc{
			defaultHook: i.AssociateUserAndSave,
		},
		CountFunc: &UserExternalAccountsStoreCountFunc{
			defaultHook: i.Count,
		},
		CreateUserAndSaveFunc: &UserExternalAccountsStoreCreateUserAndSaveFunc{
			defaultHook: i.CreateUserAndSave,
		},
		DeleteFunc: &UserExternalAccountsStoreDeleteFunc{
			defaultHook: i.Delete,
		},
		DoneFunc: &UserExternalAccountsStoreDoneFunc{
			defaultHook: i.Done,
		},
		ExecResultFunc: &UserExternalAccountsStoreExecResultFunc{
			defaultHook: i.ExecResult,
		},
		GetFunc: &UserExternalAccountsStoreGetFunc{
			defaultHook: i.Get,
		},
		HandleFunc: &UserExternalAccountsStoreHandleFunc{
			defaultHook: i.Handle,
		},
		InsertFunc: &UserExternalAccountsStoreInsertFunc{
			defaultHook: i.Insert,
		},
		ListFunc: &UserExternalAccountsStoreListFunc{
			defaultHook: i.List,
		},
		LookupUserAndSaveFunc: &UserExternalAccountsStoreLookupUserAndSaveFunc{
			defaultHook: i.LookupUserAndSave,
		},
		QueryRowFunc: &UserExternalAccountsStoreQueryRowFunc{
			defaultHook: i.QueryRow,
		},
		TouchExpiredFunc: &UserExternalAccountsStoreTouchExpiredFunc{
			defaultHook: i.TouchExpired,
		},
		TouchLastValidFunc: &UserExternalAccountsStoreTouchLastValidFunc{
			defaultHook: i.TouchLastValid,
		},
		TransactFunc: &UserExternalAccountsStoreTransactFunc{
			defaultHook: i.Transact,
		},
		UpsertSCIMDataFunc: &UserExternalAccountsStoreUpsertSCIMDataFunc{
			defaultHook: i.UpsertSCIMData,
		},
		WithFunc: &UserExternalAccountsStoreWithFunc{
			defaultHook: i.With,
		},
		WithEncryptionKeyFunc: &UserExternalAccountsStoreWithEncryptionKeyFunc{
			defaultHook: i.WithEncryptionKey,
		},
	}
}

// UserExternalAccountsStoreAssociateUserAndSaveFunc describes the behavior
// when the AssociateUserAndSave method of the parent
// MockUserExternalAccountsStore instance is invoked.
type UserExternalAccountsStoreAssociateUserAndSaveFunc struct {
	defaultHook func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error
	hooks       []func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error
	history     []UserExternalAccountsStoreAssociateUserAndSaveFuncCall
	mutex       sync.Mutex
}

// AssociateUserAndSave delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) AssociateUserAndSave(v0 context.Context, v1 int32, v2 extsvc.AccountSpec, v3 extsvc.AccountData) error {
	r0 := m.AssociateUserAndSaveFunc.nextHook()(v0, v1, v2, v3)
	m.AssociateUserAndSaveFunc.appendCall(UserExternalAccountsStoreAssociateUserAndSaveFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the AssociateUserAndSave
// method of the parent MockUserExternalAccountsStore instance is invoked
// and the hook queue is empty.
func (f *UserExternalAccountsStoreAssociateUserAndSaveFunc) SetDefaultHook(hook func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AssociateUserAndSave method of the parent MockUserExternalAccountsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *UserExternalAccountsStoreAssociateUserAndSaveFunc) PushHook(hook func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserExternalAccountsStoreAssociateUserAndSaveFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserExternalAccountsStoreAssociateUserAndSaveFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error {
		return r0
	})
}

func (f *UserExternalAccountsStoreAssociateUserAndSaveFunc) nextHook() func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreAssociateUserAndSaveFunc) appendCall(r0 UserExternalAccountsStoreAssociateUserAndSaveFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UserExternalAccountsStoreAssociateUserAndSaveFuncCall objects describing
// the invocations of this function.
func (f *UserExternalAccountsStoreAssociateUserAndSaveFunc) History() []UserExternalAccountsStoreAssociateUserAndSaveFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreAssociateUserAndSaveFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreAssociateUserAndSaveFuncCall is an object that
// describes an invocation of method AssociateUserAndSave on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreAssociateUserAndSaveFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 extsvc.AccountSpec
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 extsvc.AccountData
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreAssociateUserAndSaveFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreAssociateUserAndSaveFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserExternalAccountsStoreCountFunc describes the behavior when the Count
// method of the parent MockUserExternalAccountsStore instance is invoked.
type UserExternalAccountsStoreCountFunc struct {
	defaultHook func(context.Context, ExternalAccountsListOptions) (int, error)
	hooks       []func(context.Context, ExternalAccountsListOptions) (int, error)
	history     []UserExternalAccountsStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) Count(v0 context.Context, v1 ExternalAccountsListOptions) (int, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(UserExternalAccountsStoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockUserExternalAccountsStore instance is invoked and the hook
// queue is empty.
func (f *UserExternalAccountsStoreCountFunc) SetDefaultHook(hook func(context.Context, ExternalAccountsListOptions) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockUserExternalAccountsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserExternalAccountsStoreCountFunc) PushHook(hook func(context.Context, ExternalAccountsListOptions) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserExternalAccountsStoreCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, ExternalAccountsListOptions) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserExternalAccountsStoreCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, ExternalAccountsListOptions) (int, error) {
		return r0, r1
	})
}

func (f *UserExternalAccountsStoreCountFunc) nextHook() func(context.Context, ExternalAccountsListOptions) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreCountFunc) appendCall(r0 UserExternalAccountsStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserExternalAccountsStoreCountFuncCall
// objects describing the invocations of this function.
func (f *UserExternalAccountsStoreCountFunc) History() []UserExternalAccountsStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreCountFuncCall is an object that describes an
// invocation of method Count on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ExternalAccountsListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserExternalAccountsStoreCreateUserAndSaveFunc describes the behavior
// when the CreateUserAndSave method of the parent
// MockUserExternalAccountsStore instance is invoked.
type UserExternalAccountsStoreCreateUserAndSaveFunc struct {
	defaultHook func(context.Context, NewUser, extsvc.AccountSpec, extsvc.AccountData) (*types.User, error)
	hooks       []func(context.Context, NewUser, extsvc.AccountSpec, extsvc.AccountData) (*types.User, error)
	history     []UserExternalAccountsStoreCreateUserAndSaveFuncCall
	mutex       sync.Mutex
}

// CreateUserAndSave delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) CreateUserAndSave(v0 context.Context, v1 NewUser, v2 extsvc.AccountSpec, v3 extsvc.AccountData) (*types.User, error) {
	r0, r1 := m.CreateUserAndSaveFunc.nextHook()(v0, v1, v2, v3)
	m.CreateUserAndSaveFunc.appendCall(UserExternalAccountsStoreCreateUserAndSaveFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateUserAndSave
// method of the parent MockUserExternalAccountsStore instance is invoked
// and the hook queue is empty.
func (f *UserExternalAccountsStoreCreateUserAndSaveFunc) SetDefaultHook(hook func(context.Context, NewUser, extsvc.AccountSpec, extsvc.AccountData) (*types.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateUserAndSave method of the parent MockUserExternalAccountsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *UserExternalAccountsStoreCreateUserAndSaveFunc) PushHook(hook func(context.Context, NewUser, extsvc.AccountSpec, extsvc.AccountData) (*types.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserExternalAccountsStoreCreateUserAndSaveFunc) SetDefaultReturn(r0 *types.User, r1 error) {
	f.SetDefaultHook(func(context.Context, NewUser, extsvc.AccountSpec, extsvc.AccountData) (*types.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserExternalAccountsStoreCreateUserAndSaveFunc) PushReturn(r0 *types.User, r1 error) {
	f.PushHook(func(context.Context, NewUser, extsvc.AccountSpec, extsvc.AccountData) (*types.User, error) {
		return r0, r1
	})
}

func (f *UserExternalAccountsStoreCreateUserAndSaveFunc) nextHook() func(context.Context, NewUser, extsvc.AccountSpec, extsvc.AccountData) (*types.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreCreateUserAndSaveFunc) appendCall(r0 UserExternalAccountsStoreCreateUserAndSaveFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UserExternalAccountsStoreCreateUserAndSaveFuncCall objects describing the
// invocations of this function.
func (f *UserExternalAccountsStoreCreateUserAndSaveFunc) History() []UserExternalAccountsStoreCreateUserAndSaveFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreCreateUserAndSaveFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreCreateUserAndSaveFuncCall is an object that
// describes an invocation of method CreateUserAndSave on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreCreateUserAndSaveFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 NewUser
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 extsvc.AccountSpec
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 extsvc.AccountData
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreCreateUserAndSaveFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreCreateUserAndSaveFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserExternalAccountsStoreDeleteFunc describes the behavior when the
// Delete method of the parent MockUserExternalAccountsStore instance is
// invoked.
type UserExternalAccountsStoreDeleteFunc struct {
	defaultHook func(context.Context, ExternalAccountsDeleteOptions) error
	hooks       []func(context.Context, ExternalAccountsDeleteOptions) error
	history     []UserExternalAccountsStoreDeleteFuncCall
	mutex       sync.Mutex
}

// Delete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) Delete(v0 context.Context, v1 ExternalAccountsDeleteOptions) error {
	r0 := m.DeleteFunc.nextHook()(v0, v1)
	m.DeleteFunc.appendCall(UserExternalAccountsStoreDeleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Delete method of the
// parent MockUserExternalAccountsStore instance is invoked and the hook
// queue is empty.
func (f *UserExternalAccountsStoreDeleteFunc) SetDefaultHook(hook func(context.Context, ExternalAccountsDeleteOptions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Delete method of the parent MockUserExternalAccountsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserExternalAccountsStoreDeleteFunc) PushHook(hook func(context.Context, ExternalAccountsDeleteOptions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserExternalAccountsStoreDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ExternalAccountsDeleteOptions) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserExternalAccountsStoreDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ExternalAccountsDeleteOptions) error {
		return r0
	})
}

func (f *UserExternalAccountsStoreDeleteFunc) nextHook() func(context.Context, ExternalAccountsDeleteOptions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreDeleteFunc) appendCall(r0 UserExternalAccountsStoreDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserExternalAccountsStoreDeleteFuncCall
// objects describing the invocations of this function.
func (f *UserExternalAccountsStoreDeleteFunc) History() []UserExternalAccountsStoreDeleteFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreDeleteFuncCall is an object that describes an
// invocation of method Delete on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ExternalAccountsDeleteOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserExternalAccountsStoreDoneFunc describes the behavior when the Done
// method of the parent MockUserExternalAccountsStore instance is invoked.
type UserExternalAccountsStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []UserExternalAccountsStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(UserExternalAccountsStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockUserExternalAccountsStore instance is invoked and the hook
// queue is empty.
func (f *UserExternalAccountsStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockUserExternalAccountsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserExternalAccountsStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserExternalAccountsStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserExternalAccountsStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *UserExternalAccountsStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreDoneFunc) appendCall(r0 UserExternalAccountsStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserExternalAccountsStoreDoneFuncCall
// objects describing the invocations of this function.
func (f *UserExternalAccountsStoreDoneFunc) History() []UserExternalAccountsStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreDoneFuncCall is an object that describes an
// invocation of method Done on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserExternalAccountsStoreExecResultFunc describes the behavior when the
// ExecResult method of the parent MockUserExternalAccountsStore instance is
// invoked.
type UserExternalAccountsStoreExecResultFunc struct {
	defaultHook func(context.Context, *sqlf.Query) (sql.Result, error)
	hooks       []func(context.Context, *sqlf.Query) (sql.Result, error)
	history     []UserExternalAccountsStoreExecResultFuncCall
	mutex       sync.Mutex
}

// ExecResult delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) ExecResult(v0 context.Context, v1 *sqlf.Query) (sql.Result, error) {
	r0, r1 := m.ExecResultFunc.nextHook()(v0, v1)
	m.ExecResultFunc.appendCall(UserExternalAccountsStoreExecResultFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ExecResult method of
// the parent MockUserExternalAccountsStore instance is invoked and the hook
// queue is empty.
func (f *UserExternalAccountsStoreExecResultFunc) SetDefaultHook(hook func(context.Context, *sqlf.Query) (sql.Result, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExecResult method of the parent MockUserExternalAccountsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserExternalAccountsStoreExecResultFunc) PushHook(hook func(context.Context, *sqlf.Query) (sql.Result, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserExternalAccountsStoreExecResultFunc) SetDefaultReturn(r0 sql.Result, r1 error) {
	f.SetDefaultHook(func(context.Context, *sqlf.Query) (sql.Result, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserExternalAccountsStoreExecResultFunc) PushReturn(r0 sql.Result, r1 error) {
	f.PushHook(func(context.Context, *sqlf.Query) (sql.Result, error) {
		return r0, r1
	})
}

func (f *UserExternalAccountsStoreExecResultFunc) nextHook() func(context.Context, *sqlf.Query) (sql.Result, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreExecResultFunc) appendCall(r0 UserExternalAccountsStoreExecResultFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserExternalAccountsStoreExecResultFuncCall
// objects describing the invocations of this function.
func (f *UserExternalAccountsStoreExecResultFunc) History() []UserExternalAccountsStoreExecResultFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreExecResultFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreExecResultFuncCall is an object that describes
// an invocation of method ExecResult on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreExecResultFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sqlf.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 sql.Result
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreExecResultFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreExecResultFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserExternalAccountsStoreGetFunc describes the behavior when the Get
// method of the parent MockUserExternalAccountsStore instance is invoked.
type UserExternalAccountsStoreGetFunc struct {
	defaultHook func(context.Context, int32) (*extsvc.Account, error)
	hooks       []func(context.Context, int32) (*extsvc.Account, error)
	history     []UserExternalAccountsStoreGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) Get(v0 context.Context, v1 int32) (*extsvc.Account, error) {
	r0, r1 := m.GetFunc.nextHook()(v0, v1)
	m.GetFunc.appendCall(UserExternalAccountsStoreGetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockUserExternalAccountsStore instance is invoked and the hook
// queue is empty.
func (f *UserExternalAccountsStoreGetFunc) SetDefaultHook(hook func(context.Context, int32) (*extsvc.Account, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockUserExternalAccountsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserExternalAccountsStoreGetFunc) PushHook(hook func(context.Context, int32) (*extsvc.Account, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserExternalAccountsStoreGetFunc) SetDefaultReturn(r0 *extsvc.Account, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (*extsvc.Account, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserExternalAccountsStoreGetFunc) PushReturn(r0 *extsvc.Account, r1 error) {
	f.PushHook(func(context.Context, int32) (*extsvc.Account, error) {
		return r0, r1
	})
}

func (f *UserExternalAccountsStoreGetFunc) nextHook() func(context.Context, int32) (*extsvc.Account, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreGetFunc) appendCall(r0 UserExternalAccountsStoreGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserExternalAccountsStoreGetFuncCall
// objects describing the invocations of this function.
func (f *UserExternalAccountsStoreGetFunc) History() []UserExternalAccountsStoreGetFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreGetFuncCall is an object that describes an
// invocation of method Get on an instance of MockUserExternalAccountsStore.
type UserExternalAccountsStoreGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *extsvc.Account
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserExternalAccountsStoreHandleFunc describes the behavior when the
// Handle method of the parent MockUserExternalAccountsStore instance is
// invoked.
type UserExternalAccountsStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []UserExternalAccountsStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(UserExternalAccountsStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockUserExternalAccountsStore instance is invoked and the hook
// queue is empty.
func (f *UserExternalAccountsStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockUserExternalAccountsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserExternalAccountsStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserExternalAccountsStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserExternalAccountsStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *UserExternalAccountsStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreHandleFunc) appendCall(r0 UserExternalAccountsStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserExternalAccountsStoreHandleFuncCall
// objects describing the invocations of this function.
func (f *UserExternalAccountsStoreHandleFunc) History() []UserExternalAccountsStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreHandleFuncCall is an object that describes an
// invocation of method Handle on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserExternalAccountsStoreInsertFunc describes the behavior when the
// Insert method of the parent MockUserExternalAccountsStore instance is
// invoked.
type UserExternalAccountsStoreInsertFunc struct {
	defaultHook func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error
	hooks       []func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error
	history     []UserExternalAccountsStoreInsertFuncCall
	mutex       sync.Mutex
}

// Insert delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) Insert(v0 context.Context, v1 int32, v2 extsvc.AccountSpec, v3 extsvc.AccountData) error {
	r0 := m.InsertFunc.nextHook()(v0, v1, v2, v3)
	m.InsertFunc.appendCall(UserExternalAccountsStoreInsertFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Insert method of the
// parent MockUserExternalAccountsStore instance is invoked and the hook
// queue is empty.
func (f *UserExternalAccountsStoreInsertFunc) SetDefaultHook(hook func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Insert method of the parent MockUserExternalAccountsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserExternalAccountsStoreInsertFunc) PushHook(hook func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserExternalAccountsStoreInsertFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserExternalAccountsStoreInsertFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error {
		return r0
	})
}

func (f *UserExternalAccountsStoreInsertFunc) nextHook() func(context.Context, int32, extsvc.AccountSpec, extsvc.AccountData) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreInsertFunc) appendCall(r0 UserExternalAccountsStoreInsertFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserExternalAccountsStoreInsertFuncCall
// objects describing the invocations of this function.
func (f *UserExternalAccountsStoreInsertFunc) History() []UserExternalAccountsStoreInsertFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreInsertFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreInsertFuncCall is an object that describes an
// invocation of method Insert on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreInsertFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 extsvc.AccountSpec
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 extsvc.AccountData
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreInsertFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreInsertFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserExternalAccountsStoreListFunc describes the behavior when the List
// method of the parent MockUserExternalAccountsStore instance is invoked.
type UserExternalAccountsStoreListFunc struct {
	defaultHook func(context.Context, ExternalAccountsListOptions) ([]*extsvc.Account, error)
	hooks       []func(context.Context, ExternalAccountsListOptions) ([]*extsvc.Account, error)
	history     []UserExternalAccountsStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) List(v0 context.Context, v1 ExternalAccountsListOptions) ([]*extsvc.Account, error) {
	r0, r1 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(UserExternalAccountsStoreListFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockUserExternalAccountsStore instance is invoked and the hook
// queue is empty.
func (f *UserExternalAccountsStoreListFunc) SetDefaultHook(hook func(context.Context, ExternalAccountsListOptions) ([]*extsvc.Account, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockUserExternalAccountsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserExternalAccountsStoreListFunc) PushHook(hook func(context.Context, ExternalAccountsListOptions) ([]*extsvc.Account, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserExternalAccountsStoreListFunc) SetDefaultReturn(r0 []*extsvc.Account, r1 error) {
	f.SetDefaultHook(func(context.Context, ExternalAccountsListOptions) ([]*extsvc.Account, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserExternalAccountsStoreListFunc) PushReturn(r0 []*extsvc.Account, r1 error) {
	f.PushHook(func(context.Context, ExternalAccountsListOptions) ([]*extsvc.Account, error) {
		return r0, r1
	})
}

func (f *UserExternalAccountsStoreListFunc) nextHook() func(context.Context, ExternalAccountsListOptions) ([]*extsvc.Account, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreListFunc) appendCall(r0 UserExternalAccountsStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserExternalAccountsStoreListFuncCall
// objects describing the invocations of this function.
func (f *UserExternalAccountsStoreListFunc) History() []UserExternalAccountsStoreListFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreListFuncCall is an object that describes an
// invocation of method List on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ExternalAccountsListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*extsvc.Account
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserExternalAccountsStoreLookupUserAndSaveFunc describes the behavior
// when the LookupUserAndSave method of the parent
// MockUserExternalAccountsStore instance is invoked.
type UserExternalAccountsStoreLookupUserAndSaveFunc struct {
	defaultHook func(context.Context, extsvc.AccountSpec, extsvc.AccountData) (int32, error)
	hooks       []func(context.Context, extsvc.AccountSpec, extsvc.AccountData) (int32, error)
	history     []UserExternalAccountsStoreLookupUserAndSaveFuncCall
	mutex       sync.Mutex
}

// LookupUserAndSave delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) LookupUserAndSave(v0 context.Context, v1 extsvc.AccountSpec, v2 extsvc.AccountData) (int32, error) {
	r0, r1 := m.LookupUserAndSaveFunc.nextHook()(v0, v1, v2)
	m.LookupUserAndSaveFunc.appendCall(UserExternalAccountsStoreLookupUserAndSaveFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the LookupUserAndSave
// method of the parent MockUserExternalAccountsStore instance is invoked
// and the hook queue is empty.
func (f *UserExternalAccountsStoreLookupUserAndSaveFunc) SetDefaultHook(hook func(context.Context, extsvc.AccountSpec, extsvc.AccountData) (int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LookupUserAndSave method of the parent MockUserExternalAccountsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *UserExternalAccountsStoreLookupUserAndSaveFunc) PushHook(hook func(context.Context, extsvc.AccountSpec, extsvc.AccountData) (int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserExternalAccountsStoreLookupUserAndSaveFunc) SetDefaultReturn(r0 int32, r1 error) {
	f.SetDefaultHook(func(context.Context, extsvc.AccountSpec, extsvc.AccountData) (int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserExternalAccountsStoreLookupUserAndSaveFunc) PushReturn(r0 int32, r1 error) {
	f.PushHook(func(context.Context, extsvc.AccountSpec, extsvc.AccountData) (int32, error) {
		return r0, r1
	})
}

func (f *UserExternalAccountsStoreLookupUserAndSaveFunc) nextHook() func(context.Context, extsvc.AccountSpec, extsvc.AccountData) (int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreLookupUserAndSaveFunc) appendCall(r0 UserExternalAccountsStoreLookupUserAndSaveFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UserExternalAccountsStoreLookupUserAndSaveFuncCall objects describing the
// invocations of this function.
func (f *UserExternalAccountsStoreLookupUserAndSaveFunc) History() []UserExternalAccountsStoreLookupUserAndSaveFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreLookupUserAndSaveFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreLookupUserAndSaveFuncCall is an object that
// describes an invocation of method LookupUserAndSave on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreLookupUserAndSaveFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 extsvc.AccountSpec
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 extsvc.AccountData
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreLookupUserAndSaveFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreLookupUserAndSaveFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserExternalAccountsStoreQueryRowFunc describes the behavior when the
// QueryRow method of the parent MockUserExternalAccountsStore instance is
// invoked.
type UserExternalAccountsStoreQueryRowFunc struct {
	defaultHook func(context.Context, *sqlf.Query) *sql.Row
	hooks       []func(context.Context, *sqlf.Query) *sql.Row
	history     []UserExternalAccountsStoreQueryRowFuncCall
	mutex       sync.Mutex
}

// QueryRow delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) QueryRow(v0 context.Context, v1 *sqlf.Query) *sql.Row {
	r0 := m.QueryRowFunc.nextHook()(v0, v1)
	m.QueryRowFunc.appendCall(UserExternalAccountsStoreQueryRowFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the QueryRow method of
// the parent MockUserExternalAccountsStore instance is invoked and the hook
// queue is empty.
func (f *UserExternalAccountsStoreQueryRowFunc) SetDefaultHook(hook func(context.Context, *sqlf.Query) *sql.Row) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueryRow method of the parent MockUserExternalAccountsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserExternalAccountsStoreQueryRowFunc) PushHook(hook func(context.Context, *sqlf.Query) *sql.Row) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserExternalAccountsStoreQueryRowFunc) SetDefaultReturn(r0 *sql.Row) {
	f.SetDefaultHook(func(context.Context, *sqlf.Query) *sql.Row {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserExternalAccountsStoreQueryRowFunc) PushReturn(r0 *sql.Row) {
	f.PushHook(func(context.Context, *sqlf.Query) *sql.Row {
		return r0
	})
}

func (f *UserExternalAccountsStoreQueryRowFunc) nextHook() func(context.Context, *sqlf.Query) *sql.Row {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreQueryRowFunc) appendCall(r0 UserExternalAccountsStoreQueryRowFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserExternalAccountsStoreQueryRowFuncCall
// objects describing the invocations of this function.
func (f *UserExternalAccountsStoreQueryRowFunc) History() []UserExternalAccountsStoreQueryRowFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreQueryRowFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreQueryRowFuncCall is an object that describes an
// invocation of method QueryRow on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreQueryRowFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sqlf.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *sql.Row
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreQueryRowFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreQueryRowFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserExternalAccountsStoreTouchExpiredFunc describes the behavior when the
// TouchExpired method of the parent MockUserExternalAccountsStore instance
// is invoked.
type UserExternalAccountsStoreTouchExpiredFunc struct {
	defaultHook func(context.Context, ...int32) error
	hooks       []func(context.Context, ...int32) error
	history     []UserExternalAccountsStoreTouchExpiredFuncCall
	mutex       sync.Mutex
}

// TouchExpired delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) TouchExpired(v0 context.Context, v1 ...int32) error {
	r0 := m.TouchExpiredFunc.nextHook()(v0, v1...)
	m.TouchExpiredFunc.appendCall(UserExternalAccountsStoreTouchExpiredFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the TouchExpired method
// of the parent MockUserExternalAccountsStore instance is invoked and the
// hook queue is empty.
func (f *UserExternalAccountsStoreTouchExpiredFunc) SetDefaultHook(hook func(context.Context, ...int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TouchExpired method of the parent MockUserExternalAccountsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserExternalAccountsStoreTouchExpiredFunc) PushHook(hook func(context.Context, ...int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserExternalAccountsStoreTouchExpiredFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ...int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserExternalAccountsStoreTouchExpiredFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ...int32) error {
		return r0
	})
}

func (f *UserExternalAccountsStoreTouchExpiredFunc) nextHook() func(context.Context, ...int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreTouchExpiredFunc) appendCall(r0 UserExternalAccountsStoreTouchExpiredFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UserExternalAccountsStoreTouchExpiredFuncCall objects describing the
// invocations of this function.
func (f *UserExternalAccountsStoreTouchExpiredFunc) History() []UserExternalAccountsStoreTouchExpiredFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreTouchExpiredFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreTouchExpiredFuncCall is an object that describes
// an invocation of method TouchExpired on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreTouchExpiredFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c UserExternalAccountsStoreTouchExpiredFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreTouchExpiredFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserExternalAccountsStoreTouchLastValidFunc describes the behavior when
// the TouchLastValid method of the parent MockUserExternalAccountsStore
// instance is invoked.
type UserExternalAccountsStoreTouchLastValidFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []UserExternalAccountsStoreTouchLastValidFuncCall
	mutex       sync.Mutex
}

// TouchLastValid delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) TouchLastValid(v0 context.Context, v1 int32) error {
	r0 := m.TouchLastValidFunc.nextHook()(v0, v1)
	m.TouchLastValidFunc.appendCall(UserExternalAccountsStoreTouchLastValidFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the TouchLastValid
// method of the parent MockUserExternalAccountsStore instance is invoked
// and the hook queue is empty.
func (f *UserExternalAccountsStoreTouchLastValidFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TouchLastValid method of the parent MockUserExternalAccountsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *UserExternalAccountsStoreTouchLastValidFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserExternalAccountsStoreTouchLastValidFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserExternalAccountsStoreTouchLastValidFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *UserExternalAccountsStoreTouchLastValidFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreTouchLastValidFunc) appendCall(r0 UserExternalAccountsStoreTouchLastValidFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UserExternalAccountsStoreTouchLastValidFuncCall objects describing the
// invocations of this function.
func (f *UserExternalAccountsStoreTouchLastValidFunc) History() []UserExternalAccountsStoreTouchLastValidFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreTouchLastValidFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreTouchLastValidFuncCall is an object that
// describes an invocation of method TouchLastValid on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreTouchLastValidFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreTouchLastValidFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreTouchLastValidFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserExternalAccountsStoreTransactFunc describes the behavior when the
// Transact method of the parent MockUserExternalAccountsStore instance is
// invoked.
type UserExternalAccountsStoreTransactFunc struct {
	defaultHook func(context.Context) (UserExternalAccountsStore, error)
	hooks       []func(context.Context) (UserExternalAccountsStore, error)
	history     []UserExternalAccountsStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) Transact(v0 context.Context) (UserExternalAccountsStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(UserExternalAccountsStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockUserExternalAccountsStore instance is invoked and the hook
// queue is empty.
func (f *UserExternalAccountsStoreTransactFunc) SetDefaultHook(hook func(context.Context) (UserExternalAccountsStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockUserExternalAccountsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserExternalAccountsStoreTransactFunc) PushHook(hook func(context.Context) (UserExternalAccountsStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserExternalAccountsStoreTransactFunc) SetDefaultReturn(r0 UserExternalAccountsStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (UserExternalAccountsStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserExternalAccountsStoreTransactFunc) PushReturn(r0 UserExternalAccountsStore, r1 error) {
	f.PushHook(func(context.Context) (UserExternalAccountsStore, error) {
		return r0, r1
	})
}

func (f *UserExternalAccountsStoreTransactFunc) nextHook() func(context.Context) (UserExternalAccountsStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreTransactFunc) appendCall(r0 UserExternalAccountsStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserExternalAccountsStoreTransactFuncCall
// objects describing the invocations of this function.
func (f *UserExternalAccountsStoreTransactFunc) History() []UserExternalAccountsStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreTransactFuncCall is an object that describes an
// invocation of method Transact on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 UserExternalAccountsStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserExternalAccountsStoreUpsertSCIMDataFunc describes the behavior when
// the UpsertSCIMData method of the parent MockUserExternalAccountsStore
// instance is invoked.
type UserExternalAccountsStoreUpsertSCIMDataFunc struct {
	defaultHook func(context.Context, int32, string, extsvc.AccountData) error
	hooks       []func(context.Context, int32, string, extsvc.AccountData) error
	history     []UserExternalAccountsStoreUpsertSCIMDataFuncCall
	mutex       sync.Mutex
}

// UpsertSCIMData delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) UpsertSCIMData(v0 context.Context, v1 int32, v2 string, v3 extsvc.AccountData) error {
	r0 := m.UpsertSCIMDataFunc.nextHook()(v0, v1, v2, v3)
	m.UpsertSCIMDataFunc.appendCall(UserExternalAccountsStoreUpsertSCIMDataFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UpsertSCIMData
// method of the parent MockUserExternalAccountsStore instance is invoked
// and the hook queue is empty.
func (f *UserExternalAccountsStoreUpsertSCIMDataFunc) SetDefaultHook(hook func(context.Context, int32, string, extsvc.AccountData) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpsertSCIMData method of the parent MockUserExternalAccountsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *UserExternalAccountsStoreUpsertSCIMDataFunc) PushHook(hook func(context.Context, int32, string, extsvc.AccountData) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserExternalAccountsStoreUpsertSCIMDataFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, string, extsvc.AccountData) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserExternalAccountsStoreUpsertSCIMDataFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, string, extsvc.AccountData) error {
		return r0
	})
}

func (f *UserExternalAccountsStoreUpsertSCIMDataFunc) nextHook() func(context.Context, int32, string, extsvc.AccountData) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreUpsertSCIMDataFunc) appendCall(r0 UserExternalAccountsStoreUpsertSCIMDataFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UserExternalAccountsStoreUpsertSCIMDataFuncCall objects describing the
// invocations of this function.
func (f *UserExternalAccountsStoreUpsertSCIMDataFunc) History() []UserExternalAccountsStoreUpsertSCIMDataFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreUpsertSCIMDataFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreUpsertSCIMDataFuncCall is an object that
// describes an invocation of method UpsertSCIMData on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreUpsertSCIMDataFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 extsvc.AccountData
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreUpsertSCIMDataFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreUpsertSCIMDataFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserExternalAccountsStoreWithFunc describes the behavior when the With
// method of the parent MockUserExternalAccountsStore instance is invoked.
type UserExternalAccountsStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) UserExternalAccountsStore
	hooks       []func(basestore.ShareableStore) UserExternalAccountsStore
	history     []UserExternalAccountsStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) With(v0 basestore.ShareableStore) UserExternalAccountsStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(UserExternalAccountsStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockUserExternalAccountsStore instance is invoked and the hook
// queue is empty.
func (f *UserExternalAccountsStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) UserExternalAccountsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockUserExternalAccountsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserExternalAccountsStoreWithFunc) PushHook(hook func(basestore.ShareableStore) UserExternalAccountsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserExternalAccountsStoreWithFunc) SetDefaultReturn(r0 UserExternalAccountsStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) UserExternalAccountsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserExternalAccountsStoreWithFunc) PushReturn(r0 UserExternalAccountsStore) {
	f.PushHook(func(basestore.ShareableStore) UserExternalAccountsStore {
		return r0
	})
}

func (f *UserExternalAccountsStoreWithFunc) nextHook() func(basestore.ShareableStore) UserExternalAccountsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreWithFunc) appendCall(r0 UserExternalAccountsStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserExternalAccountsStoreWithFuncCall
// objects describing the invocations of this function.
func (f *UserExternalAccountsStoreWithFunc) History() []UserExternalAccountsStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreWithFuncCall is an object that describes an
// invocation of method With on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 UserExternalAccountsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserExternalAccountsStoreWithEncryptionKeyFunc describes the behavior
// when the WithEncryptionKey method of the parent
// MockUserExternalAccountsStore instance is invoked.
type UserExternalAccountsStoreWithEncryptionKeyFunc struct {
	defaultHook func(encryption.Key) UserExternalAccountsStore
	hooks       []func(encryption.Key) UserExternalAccountsStore
	history     []UserExternalAccountsStoreWithEncryptionKeyFuncCall
	mutex       sync.Mutex
}

// WithEncryptionKey delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserExternalAccountsStore) WithEncryptionKey(v0 encryption.Key) UserExternalAccountsStore {
	r0 := m.WithEncryptionKeyFunc.nextHook()(v0)
	m.WithEncryptionKeyFunc.appendCall(UserExternalAccountsStoreWithEncryptionKeyFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithEncryptionKey
// method of the parent MockUserExternalAccountsStore instance is invoked
// and the hook queue is empty.
func (f *UserExternalAccountsStoreWithEncryptionKeyFunc) SetDefaultHook(hook func(encryption.Key) UserExternalAccountsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithEncryptionKey method of the parent MockUserExternalAccountsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *UserExternalAccountsStoreWithEncryptionKeyFunc) PushHook(hook func(encryption.Key) UserExternalAccountsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserExternalAccountsStoreWithEncryptionKeyFunc) SetDefaultReturn(r0 UserExternalAccountsStore) {
	f.SetDefaultHook(func(encryption.Key) UserExternalAccountsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserExternalAccountsStoreWithEncryptionKeyFunc) PushReturn(r0 UserExternalAccountsStore) {
	f.PushHook(func(encryption.Key) UserExternalAccountsStore {
		return r0
	})
}

func (f *UserExternalAccountsStoreWithEncryptionKeyFunc) nextHook() func(encryption.Key) UserExternalAccountsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserExternalAccountsStoreWithEncryptionKeyFunc) appendCall(r0 UserExternalAccountsStoreWithEncryptionKeyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UserExternalAccountsStoreWithEncryptionKeyFuncCall objects describing the
// invocations of this function.
func (f *UserExternalAccountsStoreWithEncryptionKeyFunc) History() []UserExternalAccountsStoreWithEncryptionKeyFuncCall {
	f.mutex.Lock()
	history := make([]UserExternalAccountsStoreWithEncryptionKeyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserExternalAccountsStoreWithEncryptionKeyFuncCall is an object that
// describes an invocation of method WithEncryptionKey on an instance of
// MockUserExternalAccountsStore.
type UserExternalAccountsStoreWithEncryptionKeyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 encryption.Key
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 UserExternalAccountsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserExternalAccountsStoreWithEncryptionKeyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserExternalAccountsStoreWithEncryptionKeyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockUserRoleStore is a mock implementation of the UserRoleStore interface
// (from the package github.com/sourcegraph/sourcegraph/internal/database)
// used for unit testing.
type MockUserRoleStore struct {
	// AssignFunc is an instance of a mock function object controlling the
	// behavior of the method Assign.
	AssignFunc *UserRoleStoreAssignFunc
	// AssignSystemRoleFunc is an instance of a mock function object
	// controlling the behavior of the method AssignSystemRole.
	AssignSystemRoleFunc *UserRoleStoreAssignSystemRoleFunc
	// BulkAssignRolesToUserFunc is an instance of a mock function object
	// controlling the behavior of the method BulkAssignRolesToUser.
	BulkAssignRolesToUserFunc *UserRoleStoreBulkAssignRolesToUserFunc
	// BulkAssignSystemRolesToUserFunc is an instance of a mock function
	// object controlling the behavior of the method
	// BulkAssignSystemRolesToUser.
	BulkAssignSystemRolesToUserFunc *UserRoleStoreBulkAssignSystemRolesToUserFunc
	// BulkRevokeRolesForUserFunc is an instance of a mock function object
	// controlling the behavior of the method BulkRevokeRolesForUser.
	BulkRevokeRolesForUserFunc *UserRoleStoreBulkRevokeRolesForUserFunc
	// GetByRoleIDFunc is an instance of a mock function object controlling
	// the behavior of the method GetByRoleID.
	GetByRoleIDFunc *UserRoleStoreGetByRoleIDFunc
	// GetByRoleIDAndUserIDFunc is an instance of a mock function object
	// controlling the behavior of the method GetByRoleIDAndUserID.
	GetByRoleIDAndUserIDFunc *UserRoleStoreGetByRoleIDAndUserIDFunc
	// GetByUserIDFunc is an instance of a mock function object controlling
	// the behavior of the method GetByUserID.
	GetByUserIDFunc *UserRoleStoreGetByUserIDFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *UserRoleStoreHandleFunc
	// RevokeFunc is an instance of a mock function object controlling the
	// behavior of the method Revoke.
	RevokeFunc *UserRoleStoreRevokeFunc
	// RevokeSystemRoleFunc is an instance of a mock function object
	// controlling the behavior of the method RevokeSystemRole.
	RevokeSystemRoleFunc *UserRoleStoreRevokeSystemRoleFunc
	// SetRolesForUserFunc is an instance of a mock function object
	// controlling the behavior of the method SetRolesForUser.
	SetRolesForUserFunc *UserRoleStoreSetRolesForUserFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *UserRoleStoreWithFunc
	// WithTransactFunc is an instance of a mock function object controlling
	// the behavior of the method WithTransact.
	WithTransactFunc *UserRoleStoreWithTransactFunc
}

// NewMockUserRoleStore creates a new mock of the UserRoleStore interface.
// All methods return zero values for all results, unless overwritten.
func NewMockUserRoleStore() *MockUserRoleStore {
	return &MockUserRoleStore{
		AssignFunc: &UserRoleStoreAssignFunc{
			defaultHook: func(context.Context, AssignUserRoleOpts) (r0 error) {
				return
			},
		},
		AssignSystemRoleFunc: &UserRoleStoreAssignSystemRoleFunc{
			defaultHook: func(context.Context, AssignSystemRoleOpts) (r0 error) {
				return
			},
		},
		BulkAssignRolesToUserFunc: &UserRoleStoreBulkAssignRolesToUserFunc{
			defaultHook: func(context.Context, BulkAssignRolesToUserOpts) (r0 error) {
				return
			},
		},
		BulkAssignSystemRolesToUserFunc: &UserRoleStoreBulkAssignSystemRolesToUserFunc{
			defaultHook: func(context.Context, BulkAssignSystemRolesToUserOpts) (r0 error) {
				return
			},
		},
		BulkRevokeRolesForUserFunc: &UserRoleStoreBulkRevokeRolesForUserFunc{
			defaultHook: func(context.Context, BulkRevokeRolesForUserOpts) (r0 error) {
				return
			},
		},
		GetByRoleIDFunc: &UserRoleStoreGetByRoleIDFunc{
			defaultHook: func(context.Context, GetUserRoleOpts) (r0 []*types.UserRole, r1 error) {
				return
			},
		},
		GetByRoleIDAndUserIDFunc: &UserRoleStoreGetByRoleIDAndUserIDFunc{
			defaultHook: func(context.Context, GetUserRoleOpts) (r0 *types.UserRole, r1 error) {
				return
			},
		},
		GetByUserIDFunc: &UserRoleStoreGetByUserIDFunc{
			defaultHook: func(context.Context, GetUserRoleOpts) (r0 []*types.UserRole, r1 error) {
				return
			},
		},
		HandleFunc: &UserRoleStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		RevokeFunc: &UserRoleStoreRevokeFunc{
			defaultHook: func(context.Context, RevokeUserRoleOpts) (r0 error) {
				return
			},
		},
		RevokeSystemRoleFunc: &UserRoleStoreRevokeSystemRoleFunc{
			defaultHook: func(context.Context, RevokeSystemRoleOpts) (r0 error) {
				return
			},
		},
		SetRolesForUserFunc: &UserRoleStoreSetRolesForUserFunc{
			defaultHook: func(context.Context, SetRolesForUserOpts) (r0 error) {
				return
			},
		},
		WithFunc: &UserRoleStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 UserRoleStore) {
				return
			},
		},
		WithTransactFunc: &UserRoleStoreWithTransactFunc{
			defaultHook: func(context.Context, func(UserRoleStore) error) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockUserRoleStore creates a new mock of the UserRoleStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockUserRoleStore() *MockUserRoleStore {
	return &MockUserRoleStore{
		AssignFunc: &UserRoleStoreAssignFunc{
			defaultHook: func(context.Context, AssignUserRoleOpts) error {
				panic("unexpected invocation of MockUserRoleStore.Assign")
			},
		},
		AssignSystemRoleFunc: &UserRoleStoreAssignSystemRoleFunc{
			defaultHook: func(context.Context, AssignSystemRoleOpts) error {
				panic("unexpected invocation of MockUserRoleStore.AssignSystemRole")
			},
		},
		BulkAssignRolesToUserFunc: &UserRoleStoreBulkAssignRolesToUserFunc{
			defaultHook: func(context.Context, BulkAssignRolesToUserOpts) error {
				panic("unexpected invocation of MockUserRoleStore.BulkAssignRolesToUser")
			},
		},
		BulkAssignSystemRolesToUserFunc: &UserRoleStoreBulkAssignSystemRolesToUserFunc{
			defaultHook: func(context.Context, BulkAssignSystemRolesToUserOpts) error {
				panic("unexpected invocation of MockUserRoleStore.BulkAssignSystemRolesToUser")
			},
		},
		BulkRevokeRolesForUserFunc: &UserRoleStoreBulkRevokeRolesForUserFunc{
			defaultHook: func(context.Context, BulkRevokeRolesForUserOpts) error {
				panic("unexpected invocation of MockUserRoleStore.BulkRevokeRolesForUser")
			},
		},
		GetByRoleIDFunc: &UserRoleStoreGetByRoleIDFunc{
			defaultHook: func(context.Context, GetUserRoleOpts) ([]*types.UserRole, error) {
				panic("unexpected invocation of MockUserRoleStore.GetByRoleID")
			},
		},
		GetByRoleIDAndUserIDFunc: &UserRoleStoreGetByRoleIDAndUserIDFunc{
			defaultHook: func(context.Context, GetUserRoleOpts) (*types.UserRole, error) {
				panic("unexpected invocation of MockUserRoleStore.GetByRoleIDAndUserID")
			},
		},
		GetByUserIDFunc: &UserRoleStoreGetByUserIDFunc{
			defaultHook: func(context.Context, GetUserRoleOpts) ([]*types.UserRole, error) {
				panic("unexpected invocation of MockUserRoleStore.GetByUserID")
			},
		},
		HandleFunc: &UserRoleStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockUserRoleStore.Handle")
			},
		},
		RevokeFunc: &UserRoleStoreRevokeFunc{
			defaultHook: func(context.Context, RevokeUserRoleOpts) error {
				panic("unexpected invocation of MockUserRoleStore.Revoke")
			},
		},
		RevokeSystemRoleFunc: &UserRoleStoreRevokeSystemRoleFunc{
			defaultHook: func(context.Context, RevokeSystemRoleOpts) error {
				panic("unexpected invocation of MockUserRoleStore.RevokeSystemRole")
			},
		},
		SetRolesForUserFunc: &UserRoleStoreSetRolesForUserFunc{
			defaultHook: func(context.Context, SetRolesForUserOpts) error {
				panic("unexpected invocation of MockUserRoleStore.SetRolesForUser")
			},
		},
		WithFunc: &UserRoleStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) UserRoleStore {
				panic("unexpected invocation of MockUserRoleStore.With")
			},
		},
		WithTransactFunc: &UserRoleStoreWithTransactFunc{
			defaultHook: func(context.Context, func(UserRoleStore) error) error {
				panic("unexpected invocation of MockUserRoleStore.WithTransact")
			},
		},
	}
}

// NewMockUserRoleStoreFrom creates a new mock of the MockUserRoleStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockUserRoleStoreFrom(i UserRoleStore) *MockUserRoleStore {
	return &MockUserRoleStore{
		AssignFunc: &UserRoleStoreAssignFunc{
			defaultHook: i.Assign,
		},
		AssignSystemRoleFunc: &UserRoleStoreAssignSystemRoleFunc{
			defaultHook: i.AssignSystemRole,
		},
		BulkAssignRolesToUserFunc: &UserRoleStoreBulkAssignRolesToUserFunc{
			defaultHook: i.BulkAssignRolesToUser,
		},
		BulkAssignSystemRolesToUserFunc: &UserRoleStoreBulkAssignSystemRolesToUserFunc{
			defaultHook: i.BulkAssignSystemRolesToUser,
		},
		BulkRevokeRolesForUserFunc: &UserRoleStoreBulkRevokeRolesForUserFunc{
			defaultHook: i.BulkRevokeRolesForUser,
		},
		GetByRoleIDFunc: &UserRoleStoreGetByRoleIDFunc{
			defaultHook: i.GetByRoleID,
		},
		GetByRoleIDAndUserIDFunc: &UserRoleStoreGetByRoleIDAndUserIDFunc{
			defaultHook: i.GetByRoleIDAndUserID,
		},
		GetByUserIDFunc: &UserRoleStoreGetByUserIDFunc{
			defaultHook: i.GetByUserID,
		},
		HandleFunc: &UserRoleStoreHandleFunc{
			defaultHook: i.Handle,
		},
		RevokeFunc: &UserRoleStoreRevokeFunc{
			defaultHook: i.Revoke,
		},
		RevokeSystemRoleFunc: &UserRoleStoreRevokeSystemRoleFunc{
			defaultHook: i.RevokeSystemRole,
		},
		SetRolesForUserFunc: &UserRoleStoreSetRolesForUserFunc{
			defaultHook: i.SetRolesForUser,
		},
		WithFunc: &UserRoleStoreWithFunc{
			defaultHook: i.With,
		},
		WithTransactFunc: &UserRoleStoreWithTransactFunc{
			defaultHook: i.WithTransact,
		},
	}
}

// UserRoleStoreAssignFunc describes the behavior when the Assign method of
// the parent MockUserRoleStore instance is invoked.
type UserRoleStoreAssignFunc struct {
	defaultHook func(context.Context, AssignUserRoleOpts) error
	hooks       []func(context.Context, AssignUserRoleOpts) error
	history     []UserRoleStoreAssignFuncCall
	mutex       sync.Mutex
}

// Assign delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserRoleStore) Assign(v0 context.Context, v1 AssignUserRoleOpts) error {
	r0 := m.AssignFunc.nextHook()(v0, v1)
	m.AssignFunc.appendCall(UserRoleStoreAssignFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Assign method of the
// parent MockUserRoleStore instance is invoked and the hook queue is empty.
func (f *UserRoleStoreAssignFunc) SetDefaultHook(hook func(context.Context, AssignUserRoleOpts) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Assign method of the parent MockUserRoleStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserRoleStoreAssignFunc) PushHook(hook func(context.Context, AssignUserRoleOpts) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserRoleStoreAssignFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, AssignUserRoleOpts) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserRoleStoreAssignFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, AssignUserRoleOpts) error {
		return r0
	})
}

func (f *UserRoleStoreAssignFunc) nextHook() func(context.Context, AssignUserRoleOpts) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserRoleStoreAssignFunc) appendCall(r0 UserRoleStoreAssignFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserRoleStoreAssignFuncCall objects
// describing the invocations of this function.
func (f *UserRoleStoreAssignFunc) History() []UserRoleStoreAssignFuncCall {
	f.mutex.Lock()
	history := make([]UserRoleStoreAssignFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserRoleStoreAssignFuncCall is an object that describes an invocation of
// method Assign on an instance of MockUserRoleStore.
type UserRoleStoreAssignFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 AssignUserRoleOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserRoleStoreAssignFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserRoleStoreAssignFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserRoleStoreAssignSystemRoleFunc describes the behavior when the
// AssignSystemRole method of the parent MockUserRoleStore instance is
// invoked.
type UserRoleStoreAssignSystemRoleFunc struct {
	defaultHook func(context.Context, AssignSystemRoleOpts) error
	hooks       []func(context.Context, AssignSystemRoleOpts) error
	history     []UserRoleStoreAssignSystemRoleFuncCall
	mutex       sync.Mutex
}

// AssignSystemRole delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserRoleStore) AssignSystemRole(v0 context.Context, v1 AssignSystemRoleOpts) error {
	r0 := m.AssignSystemRoleFunc.nextHook()(v0, v1)
	m.AssignSystemRoleFunc.appendCall(UserRoleStoreAssignSystemRoleFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the AssignSystemRole
// method of the parent MockUserRoleStore instance is invoked and the hook
// queue is empty.
func (f *UserRoleStoreAssignSystemRoleFunc) SetDefaultHook(hook func(context.Context, AssignSystemRoleOpts) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AssignSystemRole method of the parent MockUserRoleStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserRoleStoreAssignSystemRoleFunc) PushHook(hook func(context.Context, AssignSystemRoleOpts) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserRoleStoreAssignSystemRoleFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, AssignSystemRoleOpts) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserRoleStoreAssignSystemRoleFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, AssignSystemRoleOpts) error {
		return r0
	})
}

func (f *UserRoleStoreAssignSystemRoleFunc) nextHook() func(context.Context, AssignSystemRoleOpts) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserRoleStoreAssignSystemRoleFunc) appendCall(r0 UserRoleStoreAssignSystemRoleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserRoleStoreAssignSystemRoleFuncCall
// objects describing the invocations of this function.
func (f *UserRoleStoreAssignSystemRoleFunc) History() []UserRoleStoreAssignSystemRoleFuncCall {
	f.mutex.Lock()
	history := make([]UserRoleStoreAssignSystemRoleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserRoleStoreAssignSystemRoleFuncCall is an object that describes an
// invocation of method AssignSystemRole on an instance of
// MockUserRoleStore.
type UserRoleStoreAssignSystemRoleFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 AssignSystemRoleOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserRoleStoreAssignSystemRoleFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserRoleStoreAssignSystemRoleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserRoleStoreBulkAssignRolesToUserFunc describes the behavior when the
// BulkAssignRolesToUser method of the parent MockUserRoleStore instance is
// invoked.
type UserRoleStoreBulkAssignRolesToUserFunc struct {
	defaultHook func(context.Context, BulkAssignRolesToUserOpts) error
	hooks       []func(context.Context, BulkAssignRolesToUserOpts) error
	history     []UserRoleStoreBulkAssignRolesToUserFuncCall
	mutex       sync.Mutex
}

// BulkAssignRolesToUser delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUserRoleStore) BulkAssignRolesToUser(v0 context.Context, v1 BulkAssignRolesToUserOpts) error {
	r0 := m.BulkAssignRolesToUserFunc.nextHook()(v0, v1)
	m.BulkAssignRolesToUserFunc.appendCall(UserRoleStoreBulkAssignRolesToUserFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// BulkAssignRolesToUser method of the parent MockUserRoleStore instance is
// invoked and the hook queue is empty.
func (f *UserRoleStoreBulkAssignRolesToUserFunc) SetDefaultHook(hook func(context.Context, BulkAssignRolesToUserOpts) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BulkAssignRolesToUser method of the parent MockUserRoleStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserRoleStoreBulkAssignRolesToUserFunc) PushHook(hook func(context.Context, BulkAssignRolesToUserOpts) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserRoleStoreBulkAssignRolesToUserFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, BulkAssignRolesToUserOpts) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserRoleStoreBulkAssignRolesToUserFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, BulkAssignRolesToUserOpts) error {
		return r0
	})
}

func (f *UserRoleStoreBulkAssignRolesToUserFunc) nextHook() func(context.Context, BulkAssignRolesToUserOpts) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserRoleStoreBulkAssignRolesToUserFunc) appendCall(r0 UserRoleStoreBulkAssignRolesToUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserRoleStoreBulkAssignRolesToUserFuncCall
// objects describing the invocations of this function.
func (f *UserRoleStoreBulkAssignRolesToUserFunc) History() []UserRoleStoreBulkAssignRolesToUserFuncCall {
	f.mutex.Lock()
	history := make([]UserRoleStoreBulkAssignRolesToUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserRoleStoreBulkAssignRolesToUserFuncCall is an object that describes an
// invocation of method BulkAssignRolesToUser on an instance of
// MockUserRoleStore.
type UserRoleStoreBulkAssignRolesToUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 BulkAssignRolesToUserOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserRoleStoreBulkAssignRolesToUserFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserRoleStoreBulkAssignRolesToUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserRoleStoreBulkAssignSystemRolesToUserFunc describes the behavior when
// the BulkAssignSystemRolesToUser method of the parent MockUserRoleStore
// instance is invoked.
type UserRoleStoreBulkAssignSystemRolesToUserFunc struct {
	defaultHook func(context.Context, BulkAssignSystemRolesToUserOpts) error
	hooks       []func(context.Context, BulkAssignSystemRolesToUserOpts) error
	history     []UserRoleStoreBulkAssignSystemRolesToUserFuncCall
	mutex       sync.Mutex
}

// BulkAssignSystemRolesToUser delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockUserRoleStore) BulkAssignSystemRolesToUser(v0 context.Context, v1 BulkAssignSystemRolesToUserOpts) error {
	r0 := m.BulkAssignSystemRolesToUserFunc.nextHook()(v0, v1)
	m.BulkAssignSystemRolesToUserFunc.appendCall(UserRoleStoreBulkAssignSystemRolesToUserFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// BulkAssignSystemRolesToUser method of the parent MockUserRoleStore
// instance is invoked and the hook queue is empty.
func (f *UserRoleStoreBulkAssignSystemRolesToUserFunc) SetDefaultHook(hook func(context.Context, BulkAssignSystemRolesToUserOpts) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BulkAssignSystemRolesToUser method of the parent MockUserRoleStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *UserRoleStoreBulkAssignSystemRolesToUserFunc) PushHook(hook func(context.Context, BulkAssignSystemRolesToUserOpts) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserRoleStoreBulkAssignSystemRolesToUserFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, BulkAssignSystemRolesToUserOpts) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserRoleStoreBulkAssignSystemRolesToUserFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, BulkAssignSystemRolesToUserOpts) error {
		return r0
	})
}

func (f *UserRoleStoreBulkAssignSystemRolesToUserFunc) nextHook() func(context.Context, BulkAssignSystemRolesToUserOpts) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserRoleStoreBulkAssignSystemRolesToUserFunc) appendCall(r0 UserRoleStoreBulkAssignSystemRolesToUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UserRoleStoreBulkAssignSystemRolesToUserFuncCall objects describing the
// invocations of this function.
func (f *UserRoleStoreBulkAssignSystemRolesToUserFunc) History() []UserRoleStoreBulkAssignSystemRolesToUserFuncCall {
	f.mutex.Lock()
	history := make([]UserRoleStoreBulkAssignSystemRolesToUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserRoleStoreBulkAssignSystemRolesToUserFuncCall is an object that
// describes an invocation of method BulkAssignSystemRolesToUser on an
// instance of MockUserRoleStore.
type UserRoleStoreBulkAssignSystemRolesToUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 BulkAssignSystemRolesToUserOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserRoleStoreBulkAssignSystemRolesToUserFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserRoleStoreBulkAssignSystemRolesToUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserRoleStoreBulkRevokeRolesForUserFunc describes the behavior when the
// BulkRevokeRolesForUser method of the parent MockUserRoleStore instance is
// invoked.
type UserRoleStoreBulkRevokeRolesForUserFunc struct {
	defaultHook func(context.Context, BulkRevokeRolesForUserOpts) error
	hooks       []func(context.Context, BulkRevokeRolesForUserOpts) error
	history     []UserRoleStoreBulkRevokeRolesForUserFuncCall
	mutex       sync.Mutex
}

// BulkRevokeRolesForUser delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUserRoleStore) BulkRevokeRolesForUser(v0 context.Context, v1 BulkRevokeRolesForUserOpts) error {
	r0 := m.BulkRevokeRolesForUserFunc.nextHook()(v0, v1)
	m.BulkRevokeRolesForUserFunc.appendCall(UserRoleStoreBulkRevokeRolesForUserFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// BulkRevokeRolesForUser method of the parent MockUserRoleStore instance is
// invoked and the hook queue is empty.
func (f *UserRoleStoreBulkRevokeRolesForUserFunc) SetDefaultHook(hook func(context.Context, BulkRevokeRolesForUserOpts) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BulkRevokeRolesForUser method of the parent MockUserRoleStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserRoleStoreBulkRevokeRolesForUserFunc) PushHook(hook func(context.Context, BulkRevokeRolesForUserOpts) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserRoleStoreBulkRevokeRolesForUserFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, BulkRevokeRolesForUserOpts) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserRoleStoreBulkRevokeRolesForUserFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, BulkRevokeRolesForUserOpts) error {
		return r0
	})
}

func (f *UserRoleStoreBulkRevokeRolesForUserFunc) nextHook() func(context.Context, BulkRevokeRolesForUserOpts) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserRoleStoreBulkRevokeRolesForUserFunc) appendCall(r0 UserRoleStoreBulkRevokeRolesForUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserRoleStoreBulkRevokeRolesForUserFuncCall
// objects describing the invocations of this function.
func (f *UserRoleStoreBulkRevokeRolesForUserFunc) History() []UserRoleStoreBulkRevokeRolesForUserFuncCall {
	f.mutex.Lock()
	history := make([]UserRoleStoreBulkRevokeRolesForUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserRoleStoreBulkRevokeRolesForUserFuncCall is an object that describes
// an invocation of method BulkRevokeRolesForUser on an instance of
// MockUserRoleStore.
type UserRoleStoreBulkRevokeRolesForUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 BulkRevokeRolesForUserOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserRoleStoreBulkRevokeRolesForUserFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserRoleStoreBulkRevokeRolesForUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserRoleStoreGetByRoleIDFunc describes the behavior when the GetByRoleID
// method of the parent MockUserRoleStore instance is invoked.
type UserRoleStoreGetByRoleIDFunc struct {
	defaultHook func(context.Context, GetUserRoleOpts) ([]*types.UserRole, error)
	hooks       []func(context.Context, GetUserRoleOpts) ([]*types.UserRole, error)
	history     []UserRoleStoreGetByRoleIDFuncCall
	mutex       sync.Mutex
}

// GetByRoleID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserRoleStore) GetByRoleID(v0 context.Context, v1 GetUserRoleOpts) ([]*types.UserRole, error) {
	r0, r1 := m.GetByRoleIDFunc.nextHook()(v0, v1)
	m.GetByRoleIDFunc.appendCall(UserRoleStoreGetByRoleIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByRoleID method
// of the parent MockUserRoleStore instance is invoked and the hook queue is
// empty.
func (f *UserRoleStoreGetByRoleIDFunc) SetDefaultHook(hook func(context.Context, GetUserRoleOpts) ([]*types.UserRole, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByRoleID method of the parent MockUserRoleStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserRoleStoreGetByRoleIDFunc) PushHook(hook func(context.Context, GetUserRoleOpts) ([]*types.UserRole, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserRoleStoreGetByRoleIDFunc) SetDefaultReturn(r0 []*types.UserRole, r1 error) {
	f.SetDefaultHook(func(context.Context, GetUserRoleOpts) ([]*types.UserRole, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserRoleStoreGetByRoleIDFunc) PushReturn(r0 []*types.UserRole, r1 error) {
	f.PushHook(func(context.Context, GetUserRoleOpts) ([]*types.UserRole, error) {
		return r0, r1
	})
}

func (f *UserRoleStoreGetByRoleIDFunc) nextHook() func(context.Context, GetUserRoleOpts) ([]*types.UserRole, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserRoleStoreGetByRoleIDFunc) appendCall(r0 UserRoleStoreGetByRoleIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserRoleStoreGetByRoleIDFuncCall objects
// describing the invocations of this function.
func (f *UserRoleStoreGetByRoleIDFunc) History() []UserRoleStoreGetByRoleIDFuncCall {
	f.mutex.Lock()
	history := make([]UserRoleStoreGetByRoleIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserRoleStoreGetByRoleIDFuncCall is an object that describes an
// invocation of method GetByRoleID on an instance of MockUserRoleStore.
type UserRoleStoreGetByRoleIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 GetUserRoleOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.UserRole
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserRoleStoreGetByRoleIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserRoleStoreGetByRoleIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserRoleStoreGetByRoleIDAndUserIDFunc describes the behavior when the
// GetByRoleIDAndUserID method of the parent MockUserRoleStore instance is
// invoked.
type UserRoleStoreGetByRoleIDAndUserIDFunc struct {
	defaultHook func(context.Context, GetUserRoleOpts) (*types.UserRole, error)
	hooks       []func(context.Context, GetUserRoleOpts) (*types.UserRole, error)
	history     []UserRoleStoreGetByRoleIDAndUserIDFuncCall
	mutex       sync.Mutex
}

// GetByRoleIDAndUserID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserRoleStore) GetByRoleIDAndUserID(v0 context.Context, v1 GetUserRoleOpts) (*types.UserRole, error) {
	r0, r1 := m.GetByRoleIDAndUserIDFunc.nextHook()(v0, v1)
	m.GetByRoleIDAndUserIDFunc.appendCall(UserRoleStoreGetByRoleIDAndUserIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByRoleIDAndUserID
// method of the parent MockUserRoleStore instance is invoked and the hook
// queue is empty.
func (f *UserRoleStoreGetByRoleIDAndUserIDFunc) SetDefaultHook(hook func(context.Context, GetUserRoleOpts) (*types.UserRole, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByRoleIDAndUserID method of the parent MockUserRoleStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserRoleStoreGetByRoleIDAndUserIDFunc) PushHook(hook func(context.Context, GetUserRoleOpts) (*types.UserRole, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserRoleStoreGetByRoleIDAndUserIDFunc) SetDefaultReturn(r0 *types.UserRole, r1 error) {
	f.SetDefaultHook(func(context.Context, GetUserRoleOpts) (*types.UserRole, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserRoleStoreGetByRoleIDAndUserIDFunc) PushReturn(r0 *types.UserRole, r1 error) {
	f.PushHook(func(context.Context, GetUserRoleOpts) (*types.UserRole, error) {
		return r0, r1
	})
}

func (f *UserRoleStoreGetByRoleIDAndUserIDFunc) nextHook() func(context.Context, GetUserRoleOpts) (*types.UserRole, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserRoleStoreGetByRoleIDAndUserIDFunc) appendCall(r0 UserRoleStoreGetByRoleIDAndUserIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserRoleStoreGetByRoleIDAndUserIDFuncCall
// objects describing the invocations of this function.
func (f *UserRoleStoreGetByRoleIDAndUserIDFunc) History() []UserRoleStoreGetByRoleIDAndUserIDFuncCall {
	f.mutex.Lock()
	history := make([]UserRoleStoreGetByRoleIDAndUserIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserRoleStoreGetByRoleIDAndUserIDFuncCall is an object that describes an
// invocation of method GetByRoleIDAndUserID on an instance of
// MockUserRoleStore.
type UserRoleStoreGetByRoleIDAndUserIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 GetUserRoleOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.UserRole
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserRoleStoreGetByRoleIDAndUserIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserRoleStoreGetByRoleIDAndUserIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserRoleStoreGetByUserIDFunc describes the behavior when the GetByUserID
// method of the parent MockUserRoleStore instance is invoked.
type UserRoleStoreGetByUserIDFunc struct {
	defaultHook func(context.Context, GetUserRoleOpts) ([]*types.UserRole, error)
	hooks       []func(context.Context, GetUserRoleOpts) ([]*types.UserRole, error)
	history     []UserRoleStoreGetByUserIDFuncCall
	mutex       sync.Mutex
}

// GetByUserID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserRoleStore) GetByUserID(v0 context.Context, v1 GetUserRoleOpts) ([]*types.UserRole, error) {
	r0, r1 := m.GetByUserIDFunc.nextHook()(v0, v1)
	m.GetByUserIDFunc.appendCall(UserRoleStoreGetByUserIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByUserID method
// of the parent MockUserRoleStore instance is invoked and the hook queue is
// empty.
func (f *UserRoleStoreGetByUserIDFunc) SetDefaultHook(hook func(context.Context, GetUserRoleOpts) ([]*types.UserRole, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByUserID method of the parent MockUserRoleStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserRoleStoreGetByUserIDFunc) PushHook(hook func(context.Context, GetUserRoleOpts) ([]*types.UserRole, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserRoleStoreGetByUserIDFunc) SetDefaultReturn(r0 []*types.UserRole, r1 error) {
	f.SetDefaultHook(func(context.Context, GetUserRoleOpts) ([]*types.UserRole, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserRoleStoreGetByUserIDFunc) PushReturn(r0 []*types.UserRole, r1 error) {
	f.PushHook(func(context.Context, GetUserRoleOpts) ([]*types.UserRole, error) {
		return r0, r1
	})
}

func (f *UserRoleStoreGetByUserIDFunc) nextHook() func(context.Context, GetUserRoleOpts) ([]*types.UserRole, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserRoleStoreGetByUserIDFunc) appendCall(r0 UserRoleStoreGetByUserIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserRoleStoreGetByUserIDFuncCall objects
// describing the invocations of this function.
func (f *UserRoleStoreGetByUserIDFunc) History() []UserRoleStoreGetByUserIDFuncCall {
	f.mutex.Lock()
	history := make([]UserRoleStoreGetByUserIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserRoleStoreGetByUserIDFuncCall is an object that describes an
// invocation of method GetByUserID on an instance of MockUserRoleStore.
type UserRoleStoreGetByUserIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 GetUserRoleOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.UserRole
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserRoleStoreGetByUserIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserRoleStoreGetByUserIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserRoleStoreHandleFunc describes the behavior when the Handle method of
// the parent MockUserRoleStore instance is invoked.
type UserRoleStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []UserRoleStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserRoleStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(UserRoleStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockUserRoleStore instance is invoked and the hook queue is empty.
func (f *UserRoleStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockUserRoleStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserRoleStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserRoleStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserRoleStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *UserRoleStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserRoleStoreHandleFunc) appendCall(r0 UserRoleStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserRoleStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *UserRoleStoreHandleFunc) History() []UserRoleStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]UserRoleStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserRoleStoreHandleFuncCall is an object that describes an invocation of
// method Handle on an instance of MockUserRoleStore.
type UserRoleStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserRoleStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserRoleStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserRoleStoreRevokeFunc describes the behavior when the Revoke method of
// the parent MockUserRoleStore instance is invoked.
type UserRoleStoreRevokeFunc struct {
	defaultHook func(context.Context, RevokeUserRoleOpts) error
	hooks       []func(context.Context, RevokeUserRoleOpts) error
	history     []UserRoleStoreRevokeFuncCall
	mutex       sync.Mutex
}

// Revoke delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserRoleStore) Revoke(v0 context.Context, v1 RevokeUserRoleOpts) error {
	r0 := m.RevokeFunc.nextHook()(v0, v1)
	m.RevokeFunc.appendCall(UserRoleStoreRevokeFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Revoke method of the
// parent MockUserRoleStore instance is invoked and the hook queue is empty.
func (f *UserRoleStoreRevokeFunc) SetDefaultHook(hook func(context.Context, RevokeUserRoleOpts) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Revoke method of the parent MockUserRoleStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserRoleStoreRevokeFunc) PushHook(hook func(context.Context, RevokeUserRoleOpts) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserRoleStoreRevokeFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, RevokeUserRoleOpts) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserRoleStoreRevokeFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, RevokeUserRoleOpts) error {
		return r0
	})
}

func (f *UserRoleStoreRevokeFunc) nextHook() func(context.Context, RevokeUserRoleOpts) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserRoleStoreRevokeFunc) appendCall(r0 UserRoleStoreRevokeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserRoleStoreRevokeFuncCall objects
// describing the invocations of this function.
func (f *UserRoleStoreRevokeFunc) History() []UserRoleStoreRevokeFuncCall {
	f.mutex.Lock()
	history := make([]UserRoleStoreRevokeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserRoleStoreRevokeFuncCall is an object that describes an invocation of
// method Revoke on an instance of MockUserRoleStore.
type UserRoleStoreRevokeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 RevokeUserRoleOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserRoleStoreRevokeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserRoleStoreRevokeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserRoleStoreRevokeSystemRoleFunc describes the behavior when the
// RevokeSystemRole method of the parent MockUserRoleStore instance is
// invoked.
type UserRoleStoreRevokeSystemRoleFunc struct {
	defaultHook func(context.Context, RevokeSystemRoleOpts) error
	hooks       []func(context.Context, RevokeSystemRoleOpts) error
	history     []UserRoleStoreRevokeSystemRoleFuncCall
	mutex       sync.Mutex
}

// RevokeSystemRole delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserRoleStore) RevokeSystemRole(v0 context.Context, v1 RevokeSystemRoleOpts) error {
	r0 := m.RevokeSystemRoleFunc.nextHook()(v0, v1)
	m.RevokeSystemRoleFunc.appendCall(UserRoleStoreRevokeSystemRoleFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the RevokeSystemRole
// method of the parent MockUserRoleStore instance is invoked and the hook
// queue is empty.
func (f *UserRoleStoreRevokeSystemRoleFunc) SetDefaultHook(hook func(context.Context, RevokeSystemRoleOpts) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RevokeSystemRole method of the parent MockUserRoleStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserRoleStoreRevokeSystemRoleFunc) PushHook(hook func(context.Context, RevokeSystemRoleOpts) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserRoleStoreRevokeSystemRoleFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, RevokeSystemRoleOpts) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserRoleStoreRevokeSystemRoleFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, RevokeSystemRoleOpts) error {
		return r0
	})
}

func (f *UserRoleStoreRevokeSystemRoleFunc) nextHook() func(context.Context, RevokeSystemRoleOpts) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserRoleStoreRevokeSystemRoleFunc) appendCall(r0 UserRoleStoreRevokeSystemRoleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserRoleStoreRevokeSystemRoleFuncCall
// objects describing the invocations of this function.
func (f *UserRoleStoreRevokeSystemRoleFunc) History() []UserRoleStoreRevokeSystemRoleFuncCall {
	f.mutex.Lock()
	history := make([]UserRoleStoreRevokeSystemRoleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserRoleStoreRevokeSystemRoleFuncCall is an object that describes an
// invocation of method RevokeSystemRole on an instance of
// MockUserRoleStore.
type UserRoleStoreRevokeSystemRoleFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 RevokeSystemRoleOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserRoleStoreRevokeSystemRoleFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserRoleStoreRevokeSystemRoleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserRoleStoreSetRolesForUserFunc describes the behavior when the
// SetRolesForUser method of the parent MockUserRoleStore instance is
// invoked.
type UserRoleStoreSetRolesForUserFunc struct {
	defaultHook func(context.Context, SetRolesForUserOpts) error
	hooks       []func(context.Context, SetRolesForUserOpts) error
	history     []UserRoleStoreSetRolesForUserFuncCall
	mutex       sync.Mutex
}

// SetRolesForUser delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserRoleStore) SetRolesForUser(v0 context.Context, v1 SetRolesForUserOpts) error {
	r0 := m.SetRolesForUserFunc.nextHook()(v0, v1)
	m.SetRolesForUserFunc.appendCall(UserRoleStoreSetRolesForUserFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetRolesForUser
// method of the parent MockUserRoleStore instance is invoked and the hook
// queue is empty.
func (f *UserRoleStoreSetRolesForUserFunc) SetDefaultHook(hook func(context.Context, SetRolesForUserOpts) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetRolesForUser method of the parent MockUserRoleStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserRoleStoreSetRolesForUserFunc) PushHook(hook func(context.Context, SetRolesForUserOpts) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserRoleStoreSetRolesForUserFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, SetRolesForUserOpts) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserRoleStoreSetRolesForUserFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, SetRolesForUserOpts) error {
		return r0
	})
}

func (f *UserRoleStoreSetRolesForUserFunc) nextHook() func(context.Context, SetRolesForUserOpts) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserRoleStoreSetRolesForUserFunc) appendCall(r0 UserRoleStoreSetRolesForUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserRoleStoreSetRolesForUserFuncCall
// objects describing the invocations of this function.
func (f *UserRoleStoreSetRolesForUserFunc) History() []UserRoleStoreSetRolesForUserFuncCall {
	f.mutex.Lock()
	history := make([]UserRoleStoreSetRolesForUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserRoleStoreSetRolesForUserFuncCall is an object that describes an
// invocation of method SetRolesForUser on an instance of MockUserRoleStore.
type UserRoleStoreSetRolesForUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 SetRolesForUserOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserRoleStoreSetRolesForUserFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserRoleStoreSetRolesForUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserRoleStoreWithFunc describes the behavior when the With method of the
// parent MockUserRoleStore instance is invoked.
type UserRoleStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) UserRoleStore
	hooks       []func(basestore.ShareableStore) UserRoleStore
	history     []UserRoleStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserRoleStore) With(v0 basestore.ShareableStore) UserRoleStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(UserRoleStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockUserRoleStore instance is invoked and the hook queue is empty.
func (f *UserRoleStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) UserRoleStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockUserRoleStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserRoleStoreWithFunc) PushHook(hook func(basestore.ShareableStore) UserRoleStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserRoleStoreWithFunc) SetDefaultReturn(r0 UserRoleStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) UserRoleStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserRoleStoreWithFunc) PushReturn(r0 UserRoleStore) {
	f.PushHook(func(basestore.ShareableStore) UserRoleStore {
		return r0
	})
}

func (f *UserRoleStoreWithFunc) nextHook() func(basestore.ShareableStore) UserRoleStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserRoleStoreWithFunc) appendCall(r0 UserRoleStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserRoleStoreWithFuncCall objects
// describing the invocations of this function.
func (f *UserRoleStoreWithFunc) History() []UserRoleStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]UserRoleStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserRoleStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockUserRoleStore.
type UserRoleStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 UserRoleStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserRoleStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserRoleStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserRoleStoreWithTransactFunc describes the behavior when the
// WithTransact method of the parent MockUserRoleStore instance is invoked.
type UserRoleStoreWithTransactFunc struct {
	defaultHook func(context.Context, func(UserRoleStore) error) error
	hooks       []func(context.Context, func(UserRoleStore) error) error
	history     []UserRoleStoreWithTransactFuncCall
	mutex       sync.Mutex
}

// WithTransact delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserRoleStore) WithTransact(v0 context.Context, v1 func(UserRoleStore) error) error {
	r0 := m.WithTransactFunc.nextHook()(v0, v1)
	m.WithTransactFunc.appendCall(UserRoleStoreWithTransactFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithTransact method
// of the parent MockUserRoleStore instance is invoked and the hook queue is
// empty.
func (f *UserRoleStoreWithTransactFunc) SetDefaultHook(hook func(context.Context, func(UserRoleStore) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithTransact method of the parent MockUserRoleStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserRoleStoreWithTransactFunc) PushHook(hook func(context.Context, func(UserRoleStore) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserRoleStoreWithTransactFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, func(UserRoleStore) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserRoleStoreWithTransactFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, func(UserRoleStore) error) error {
		return r0
	})
}

func (f *UserRoleStoreWithTransactFunc) nextHook() func(context.Context, func(UserRoleStore) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserRoleStoreWithTransactFunc) appendCall(r0 UserRoleStoreWithTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserRoleStoreWithTransactFuncCall objects
// describing the invocations of this function.
func (f *UserRoleStoreWithTransactFunc) History() []UserRoleStoreWithTransactFuncCall {
	f.mutex.Lock()
	history := make([]UserRoleStoreWithTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserRoleStoreWithTransactFuncCall is an object that describes an
// invocation of method WithTransact on an instance of MockUserRoleStore.
type UserRoleStoreWithTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 func(UserRoleStore) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserRoleStoreWithTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserRoleStoreWithTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockUserStore is a mock implementation of the UserStore interface (from
// the package github.com/sourcegraph/sourcegraph/internal/database) used
// for unit testing.
type MockUserStore struct {
	// CheckAndDecrementInviteQuotaFunc is an instance of a mock function
	// object controlling the behavior of the method
	// CheckAndDecrementInviteQuota.
	CheckAndDecrementInviteQuotaFunc *UserStoreCheckAndDecrementInviteQuotaFunc
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *UserStoreCountFunc
	// CountForSCIMFunc is an instance of a mock function object controlling
	// the behavior of the method CountForSCIM.
	CountForSCIMFunc *UserStoreCountForSCIMFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *UserStoreCreateFunc
	// CreateInTransactionFunc is an instance of a mock function object
	// controlling the behavior of the method CreateInTransaction.
	CreateInTransactionFunc *UserStoreCreateInTransactionFunc
	// CreatePasswordFunc is an instance of a mock function object
	// controlling the behavior of the method CreatePassword.
	CreatePasswordFunc *UserStoreCreatePasswordFunc
	// DeleteFunc is an instance of a mock function object controlling the
	// behavior of the method Delete.
	DeleteFunc *UserStoreDeleteFunc
	// DeleteListFunc is an instance of a mock function object controlling
	// the behavior of the method DeleteList.
	DeleteListFunc *UserStoreDeleteListFunc
	// DeletePasswordResetCodeFunc is an instance of a mock function object
	// controlling the behavior of the method DeletePasswordResetCode.
	DeletePasswordResetCodeFunc *UserStoreDeletePasswordResetCodeFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *UserStoreDoneFunc
	// ExecFunc is an instance of a mock function object controlling the
	// behavior of the method Exec.
	ExecFunc *UserStoreExecFunc
	// ExecResultFunc is an instance of a mock function object controlling
	// the behavior of the method ExecResult.
	ExecResultFunc *UserStoreExecResultFunc
	// GetByCurrentAuthUserFunc is an instance of a mock function object
	// controlling the behavior of the method GetByCurrentAuthUser.
	GetByCurrentAuthUserFunc *UserStoreGetByCurrentAuthUserFunc
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *UserStoreGetByIDFunc
	// GetByUsernameFunc is an instance of a mock function object
	// controlling the behavior of the method GetByUsername.
	GetByUsernameFunc *UserStoreGetByUsernameFunc
	// GetByUsernamesFunc is an instance of a mock function object
	// controlling the behavior of the method GetByUsernames.
	GetByUsernamesFunc *UserStoreGetByUsernamesFunc
	// GetByVerifiedEmailFunc is an instance of a mock function object
	// controlling the behavior of the method GetByVerifiedEmail.
	GetByVerifiedEmailFunc *UserStoreGetByVerifiedEmailFunc
	// GetChatCompletionsQuotaFunc is an instance of a mock function object
	// controlling the behavior of the method GetChatCompletionsQuota.
	GetChatCompletionsQuotaFunc *UserStoreGetChatCompletionsQuotaFunc
	// GetCodeCompletionsQuotaFunc is an instance of a mock function object
	// controlling the behavior of the method GetCodeCompletionsQuota.
	GetCodeCompletionsQuotaFunc *UserStoreGetCodeCompletionsQuotaFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *UserStoreHandleFunc
	// HardDeleteFunc is an instance of a mock function object controlling
	// the behavior of the method HardDelete.
	HardDeleteFunc *UserStoreHardDeleteFunc
	// HardDeleteListFunc is an instance of a mock function object
	// controlling the behavior of the method HardDeleteList.
	HardDeleteListFunc *UserStoreHardDeleteListFunc
	// InvalidateSessionsByIDFunc is an instance of a mock function object
	// controlling the behavior of the method InvalidateSessionsByID.
	InvalidateSessionsByIDFunc *UserStoreInvalidateSessionsByIDFunc
	// InvalidateSessionsByIDsFunc is an instance of a mock function object
	// controlling the behavior of the method InvalidateSessionsByIDs.
	InvalidateSessionsByIDsFunc *UserStoreInvalidateSessionsByIDsFunc
	// IsPasswordFunc is an instance of a mock function object controlling
	// the behavior of the method IsPassword.
	IsPasswordFunc *UserStoreIsPasswordFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *UserStoreListFunc
	// ListByOrgFunc is an instance of a mock function object controlling
	// the behavior of the method ListByOrg.
	ListByOrgFunc *UserStoreListByOrgFunc
	// ListDatesFunc is an instance of a mock function object controlling
	// the behavior of the method ListDates.
	ListDatesFunc *UserStoreListDatesFunc
	// ListForSCIMFunc is an instance of a mock function object controlling
	// the behavior of the method ListForSCIM.
	ListForSCIMFunc *UserStoreListForSCIMFunc
	// RandomizePasswordAndClearPasswordResetRateLimitFunc is an instance of
	// a mock function object controlling the behavior of the method
	// RandomizePasswordAndClearPasswordResetRateLimit.
	RandomizePasswordAndClearPasswordResetRateLimitFunc *UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc
	// RecoverUsersListFunc is an instance of a mock function object
	// controlling the behavior of the method RecoverUsersList.
	RecoverUsersListFunc *UserStoreRecoverUsersListFunc
	// RenewPasswordResetCodeFunc is an instance of a mock function object
	// controlling the behavior of the method RenewPasswordResetCode.
	RenewPasswordResetCodeFunc *UserStoreRenewPasswordResetCodeFunc
	// SetChatCompletionsQuotaFunc is an instance of a mock function object
	// controlling the behavior of the method SetChatCompletionsQuota.
	SetChatCompletionsQuotaFunc *UserStoreSetChatCompletionsQuotaFunc
	// SetCodeCompletionsQuotaFunc is an instance of a mock function object
	// controlling the behavior of the method SetCodeCompletionsQuota.
	SetCodeCompletionsQuotaFunc *UserStoreSetCodeCompletionsQuotaFunc
	// SetIsSiteAdminFunc is an instance of a mock function object
	// controlling the behavior of the method SetIsSiteAdmin.
	SetIsSiteAdminFunc *UserStoreSetIsSiteAdminFunc
	// SetPasswordFunc is an instance of a mock function object controlling
	// the behavior of the method SetPassword.
	SetPasswordFunc *UserStoreSetPasswordFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *UserStoreTransactFunc
	// UpdateFunc is an instance of a mock function object controlling the
	// behavior of the method Update.
	UpdateFunc *UserStoreUpdateFunc
	// UpdatePasswordFunc is an instance of a mock function object
	// controlling the behavior of the method UpdatePassword.
	UpdatePasswordFunc *UserStoreUpdatePasswordFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *UserStoreWithFunc
}

// NewMockUserStore creates a new mock of the UserStore interface. All
// methods return zero values for all results, unless overwritten.
func NewMockUserStore() *MockUserStore {
	return &MockUserStore{
		CheckAndDecrementInviteQuotaFunc: &UserStoreCheckAndDecrementInviteQuotaFunc{
			defaultHook: func(context.Context, int32) (r0 bool, r1 error) {
				return
			},
		},
		CountFunc: &UserStoreCountFunc{
			defaultHook: func(context.Context, *UsersListOptions) (r0 int, r1 error) {
				return
			},
		},
		CountForSCIMFunc: &UserStoreCountForSCIMFunc{
			defaultHook: func(context.Context, *UsersListOptions) (r0 int, r1 error) {
				return
			},
		},
		CreateFunc: &UserStoreCreateFunc{
			defaultHook: func(context.Context, NewUser) (r0 *types.User, r1 error) {
				return
			},
		},
		CreateInTransactionFunc: &UserStoreCreateInTransactionFunc{
			defaultHook: func(context.Context, NewUser, *extsvc.AccountSpec) (r0 *types.User, r1 error) {
				return
			},
		},
		CreatePasswordFunc: &UserStoreCreatePasswordFunc{
			defaultHook: func(context.Context, int32, string) (r0 error) {
				return
			},
		},
		DeleteFunc: &UserStoreDeleteFunc{
			defaultHook: func(context.Context, int32) (r0 error) {
				return
			},
		},
		DeleteListFunc: &UserStoreDeleteListFunc{
			defaultHook: func(context.Context, []int32) (r0 error) {
				return
			},
		},
		DeletePasswordResetCodeFunc: &UserStoreDeletePasswordResetCodeFunc{
			defaultHook: func(context.Context, int32) (r0 error) {
				return
			},
		},
		DoneFunc: &UserStoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		ExecFunc: &UserStoreExecFunc{
			defaultHook: func(context.Context, *sqlf.Query) (r0 error) {
				return
			},
		},
		ExecResultFunc: &UserStoreExecResultFunc{
			defaultHook: func(context.Context, *sqlf.Query) (r0 sql.Result, r1 error) {
				return
			},
		},
		GetByCurrentAuthUserFunc: &UserStoreGetByCurrentAuthUserFunc{
			defaultHook: func(context.Context) (r0 *types.User, r1 error) {
				return
			},
		},
		GetByIDFunc: &UserStoreGetByIDFunc{
			defaultHook: func(context.Context, int32) (r0 *types.User, r1 error) {
				return
			},
		},
		GetByUsernameFunc: &UserStoreGetByUsernameFunc{
			defaultHook: func(context.Context, string) (r0 *types.User, r1 error) {
				return
			},
		},
		GetByUsernamesFunc: &UserStoreGetByUsernamesFunc{
			defaultHook: func(context.Context, ...string) (r0 []*types.User, r1 error) {
				return
			},
		},
		GetByVerifiedEmailFunc: &UserStoreGetByVerifiedEmailFunc{
			defaultHook: func(context.Context, string) (r0 *types.User, r1 error) {
				return
			},
		},
		GetChatCompletionsQuotaFunc: &UserStoreGetChatCompletionsQuotaFunc{
			defaultHook: func(context.Context, int32) (r0 *int, r1 error) {
				return
			},
		},
		GetCodeCompletionsQuotaFunc: &UserStoreGetCodeCompletionsQuotaFunc{
			defaultHook: func(context.Context, int32) (r0 *int, r1 error) {
				return
			},
		},
		HandleFunc: &UserStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		HardDeleteFunc: &UserStoreHardDeleteFunc{
			defaultHook: func(context.Context, int32) (r0 error) {
				return
			},
		},
		HardDeleteListFunc: &UserStoreHardDeleteListFunc{
			defaultHook: func(context.Context, []int32) (r0 error) {
				return
			},
		},
		InvalidateSessionsByIDFunc: &UserStoreInvalidateSessionsByIDFunc{
			defaultHook: func(context.Context, int32) (r0 error) {
				return
			},
		},
		InvalidateSessionsByIDsFunc: &UserStoreInvalidateSessionsByIDsFunc{
			defaultHook: func(context.Context, []int32) (r0 error) {
				return
			},
		},
		IsPasswordFunc: &UserStoreIsPasswordFunc{
			defaultHook: func(context.Context, int32, string) (r0 bool, r1 error) {
				return
			},
		},
		ListFunc: &UserStoreListFunc{
			defaultHook: func(context.Context, *UsersListOptions) (r0 []*types.User, r1 error) {
				return
			},
		},
		ListByOrgFunc: &UserStoreListByOrgFunc{
			defaultHook: func(context.Context, int32, *PaginationArgs, *string) (r0 []*types.User, r1 error) {
				return
			},
		},
		ListDatesFunc: &UserStoreListDatesFunc{
			defaultHook: func(context.Context) (r0 []types.UserDates, r1 error) {
				return
			},
		},
		ListForSCIMFunc: &UserStoreListForSCIMFunc{
			defaultHook: func(context.Context, *UsersListOptions) (r0 []*types.UserForSCIM, r1 error) {
				return
			},
		},
		RandomizePasswordAndClearPasswordResetRateLimitFunc: &UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc{
			defaultHook: func(context.Context, int32) (r0 error) {
				return
			},
		},
		RecoverUsersListFunc: &UserStoreRecoverUsersListFunc{
			defaultHook: func(context.Context, []int32) (r0 []int32, r1 error) {
				return
			},
		},
		RenewPasswordResetCodeFunc: &UserStoreRenewPasswordResetCodeFunc{
			defaultHook: func(context.Context, int32) (r0 string, r1 error) {
				return
			},
		},
		SetChatCompletionsQuotaFunc: &UserStoreSetChatCompletionsQuotaFunc{
			defaultHook: func(context.Context, int32, *int) (r0 error) {
				return
			},
		},
		SetCodeCompletionsQuotaFunc: &UserStoreSetCodeCompletionsQuotaFunc{
			defaultHook: func(context.Context, int32, *int) (r0 error) {
				return
			},
		},
		SetIsSiteAdminFunc: &UserStoreSetIsSiteAdminFunc{
			defaultHook: func(context.Context, int32, bool) (r0 error) {
				return
			},
		},
		SetPasswordFunc: &UserStoreSetPasswordFunc{
			defaultHook: func(context.Context, int32, string, string) (r0 bool, r1 error) {
				return
			},
		},
		TransactFunc: &UserStoreTransactFunc{
			defaultHook: func(context.Context) (r0 UserStore, r1 error) {
				return
			},
		},
		UpdateFunc: &UserStoreUpdateFunc{
			defaultHook: func(context.Context, int32, UserUpdate) (r0 error) {
				return
			},
		},
		UpdatePasswordFunc: &UserStoreUpdatePasswordFunc{
			defaultHook: func(context.Context, int32, string, string) (r0 error) {
				return
			},
		},
		WithFunc: &UserStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 UserStore) {
				return
			},
		},
	}
}

// NewStrictMockUserStore creates a new mock of the UserStore interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockUserStore() *MockUserStore {
	return &MockUserStore{
		CheckAndDecrementInviteQuotaFunc: &UserStoreCheckAndDecrementInviteQuotaFunc{
			defaultHook: func(context.Context, int32) (bool, error) {
				panic("unexpected invocation of MockUserStore.CheckAndDecrementInviteQuota")
			},
		},
		CountFunc: &UserStoreCountFunc{
			defaultHook: func(context.Context, *UsersListOptions) (int, error) {
				panic("unexpected invocation of MockUserStore.Count")
			},
		},
		CountForSCIMFunc: &UserStoreCountForSCIMFunc{
			defaultHook: func(context.Context, *UsersListOptions) (int, error) {
				panic("unexpected invocation of MockUserStore.CountForSCIM")
			},
		},
		CreateFunc: &UserStoreCreateFunc{
			defaultHook: func(context.Context, NewUser) (*types.User, error) {
				panic("unexpected invocation of MockUserStore.Create")
			},
		},
		CreateInTransactionFunc: &UserStoreCreateInTransactionFunc{
			defaultHook: func(context.Context, NewUser, *extsvc.AccountSpec) (*types.User, error) {
				panic("unexpected invocation of MockUserStore.CreateInTransaction")
			},
		},
		CreatePasswordFunc: &UserStoreCreatePasswordFunc{
			defaultHook: func(context.Context, int32, string) error {
				panic("unexpected invocation of MockUserStore.CreatePassword")
			},
		},
		DeleteFunc: &UserStoreDeleteFunc{
			defaultHook: func(context.Context, int32) error {
				panic("unexpected invocation of MockUserStore.Delete")
			},
		},
		DeleteListFunc: &UserStoreDeleteListFunc{
			defaultHook: func(context.Context, []int32) error {
				panic("unexpected invocation of MockUserStore.DeleteList")
			},
		},
		DeletePasswordResetCodeFunc: &UserStoreDeletePasswordResetCodeFunc{
			defaultHook: func(context.Context, int32) error {
				panic("unexpected invocation of MockUserStore.DeletePasswordResetCode")
			},
		},
		DoneFunc: &UserStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockUserStore.Done")
			},
		},
		ExecFunc: &UserStoreExecFunc{
			defaultHook: func(context.Context, *sqlf.Query) error {
				panic("unexpected invocation of MockUserStore.Exec")
			},
		},
		ExecResultFunc: &UserStoreExecResultFunc{
			defaultHook: func(context.Context, *sqlf.Query) (sql.Result, error) {
				panic("unexpected invocation of MockUserStore.ExecResult")
			},
		},
		GetByCurrentAuthUserFunc: &UserStoreGetByCurrentAuthUserFunc{
			defaultHook: func(context.Context) (*types.User, error) {
				panic("unexpected invocation of MockUserStore.GetByCurrentAuthUser")
			},
		},
		GetByIDFunc: &UserStoreGetByIDFunc{
			defaultHook: func(context.Context, int32) (*types.User, error) {
				panic("unexpected invocation of MockUserStore.GetByID")
			},
		},
		GetByUsernameFunc: &UserStoreGetByUsernameFunc{
			defaultHook: func(context.Context, string) (*types.User, error) {
				panic("unexpected invocation of MockUserStore.GetByUsername")
			},
		},
		GetByUsernamesFunc: &UserStoreGetByUsernamesFunc{
			defaultHook: func(context.Context, ...string) ([]*types.User, error) {
				panic("unexpected invocation of MockUserStore.GetByUsernames")
			},
		},
		GetByVerifiedEmailFunc: &UserStoreGetByVerifiedEmailFunc{
			defaultHook: func(context.Context, string) (*types.User, error) {
				panic("unexpected invocation of MockUserStore.GetByVerifiedEmail")
			},
		},
		GetChatCompletionsQuotaFunc: &UserStoreGetChatCompletionsQuotaFunc{
			defaultHook: func(context.Context, int32) (*int, error) {
				panic("unexpected invocation of MockUserStore.GetChatCompletionsQuota")
			},
		},
		GetCodeCompletionsQuotaFunc: &UserStoreGetCodeCompletionsQuotaFunc{
			defaultHook: func(context.Context, int32) (*int, error) {
				panic("unexpected invocation of MockUserStore.GetCodeCompletionsQuota")
			},
		},
		HandleFunc: &UserStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockUserStore.Handle")
			},
		},
		HardDeleteFunc: &UserStoreHardDeleteFunc{
			defaultHook: func(context.Context, int32) error {
				panic("unexpected invocation of MockUserStore.HardDelete")
			},
		},
		HardDeleteListFunc: &UserStoreHardDeleteListFunc{
			defaultHook: func(context.Context, []int32) error {
				panic("unexpected invocation of MockUserStore.HardDeleteList")
			},
		},
		InvalidateSessionsByIDFunc: &UserStoreInvalidateSessionsByIDFunc{
			defaultHook: func(context.Context, int32) error {
				panic("unexpected invocation of MockUserStore.InvalidateSessionsByID")
			},
		},
		InvalidateSessionsByIDsFunc: &UserStoreInvalidateSessionsByIDsFunc{
			defaultHook: func(context.Context, []int32) error {
				panic("unexpected invocation of MockUserStore.InvalidateSessionsByIDs")
			},
		},
		IsPasswordFunc: &UserStoreIsPasswordFunc{
			defaultHook: func(context.Context, int32, string) (bool, error) {
				panic("unexpected invocation of MockUserStore.IsPassword")
			},
		},
		ListFunc: &UserStoreListFunc{
			defaultHook: func(context.Context, *UsersListOptions) ([]*types.User, error) {
				panic("unexpected invocation of MockUserStore.List")
			},
		},
		ListByOrgFunc: &UserStoreListByOrgFunc{
			defaultHook: func(context.Context, int32, *PaginationArgs, *string) ([]*types.User, error) {
				panic("unexpected invocation of MockUserStore.ListByOrg")
			},
		},
		ListDatesFunc: &UserStoreListDatesFunc{
			defaultHook: func(context.Context) ([]types.UserDates, error) {
				panic("unexpected invocation of MockUserStore.ListDates")
			},
		},
		ListForSCIMFunc: &UserStoreListForSCIMFunc{
			defaultHook: func(context.Context, *UsersListOptions) ([]*types.UserForSCIM, error) {
				panic("unexpected invocation of MockUserStore.ListForSCIM")
			},
		},
		RandomizePasswordAndClearPasswordResetRateLimitFunc: &UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc{
			defaultHook: func(context.Context, int32) error {
				panic("unexpected invocation of MockUserStore.RandomizePasswordAndClearPasswordResetRateLimit")
			},
		},
		RecoverUsersListFunc: &UserStoreRecoverUsersListFunc{
			defaultHook: func(context.Context, []int32) ([]int32, error) {
				panic("unexpected invocation of MockUserStore.RecoverUsersList")
			},
		},
		RenewPasswordResetCodeFunc: &UserStoreRenewPasswordResetCodeFunc{
			defaultHook: func(context.Context, int32) (string, error) {
				panic("unexpected invocation of MockUserStore.RenewPasswordResetCode")
			},
		},
		SetChatCompletionsQuotaFunc: &UserStoreSetChatCompletionsQuotaFunc{
			defaultHook: func(context.Context, int32, *int) error {
				panic("unexpected invocation of MockUserStore.SetChatCompletionsQuota")
			},
		},
		SetCodeCompletionsQuotaFunc: &UserStoreSetCodeCompletionsQuotaFunc{
			defaultHook: func(context.Context, int32, *int) error {
				panic("unexpected invocation of MockUserStore.SetCodeCompletionsQuota")
			},
		},
		SetIsSiteAdminFunc: &UserStoreSetIsSiteAdminFunc{
			defaultHook: func(context.Context, int32, bool) error {
				panic("unexpected invocation of MockUserStore.SetIsSiteAdmin")
			},
		},
		SetPasswordFunc: &UserStoreSetPasswordFunc{
			defaultHook: func(context.Context, int32, string, string) (bool, error) {
				panic("unexpected invocation of MockUserStore.SetPassword")
			},
		},
		TransactFunc: &UserStoreTransactFunc{
			defaultHook: func(context.Context) (UserStore, error) {
				panic("unexpected invocation of MockUserStore.Transact")
			},
		},
		UpdateFunc: &UserStoreUpdateFunc{
			defaultHook: func(context.Context, int32, UserUpdate) error {
				panic("unexpected invocation of MockUserStore.Update")
			},
		},
		UpdatePasswordFunc: &UserStoreUpdatePasswordFunc{
			defaultHook: func(context.Context, int32, string, string) error {
				panic("unexpected invocation of MockUserStore.UpdatePassword")
			},
		},
		WithFunc: &UserStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) UserStore {
				panic("unexpected invocation of MockUserStore.With")
			},
		},
	}
}

// NewMockUserStoreFrom creates a new mock of the MockUserStore interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockUserStoreFrom(i UserStore) *MockUserStore {
	return &MockUserStore{
		CheckAndDecrementInviteQuotaFunc: &UserStoreCheckAndDecrementInviteQuotaFunc{
			defaultHook: i.CheckAndDecrementInviteQuota,
		},
		CountFunc: &UserStoreCountFunc{
			defaultHook: i.Count,
		},
		CountForSCIMFunc: &UserStoreCountForSCIMFunc{
			defaultHook: i.CountForSCIM,
		},
		CreateFunc: &UserStoreCreateFunc{
			defaultHook: i.Create,
		},
		CreateInTransactionFunc: &UserStoreCreateInTransactionFunc{
			defaultHook: i.CreateInTransaction,
		},
		CreatePasswordFunc: &UserStoreCreatePasswordFunc{
			defaultHook: i.CreatePassword,
		},
		DeleteFunc: &UserStoreDeleteFunc{
			defaultHook: i.Delete,
		},
		DeleteListFunc: &UserStoreDeleteListFunc{
			defaultHook: i.DeleteList,
		},
		DeletePasswordResetCodeFunc: &UserStoreDeletePasswordResetCodeFunc{
			defaultHook: i.DeletePasswordResetCode,
		},
		DoneFunc: &UserStoreDoneFunc{
			defaultHook: i.Done,
		},
		ExecFunc: &UserStoreExecFunc{
			defaultHook: i.Exec,
		},
		ExecResultFunc: &UserStoreExecResultFunc{
			defaultHook: i.ExecResult,
		},
		GetByCurrentAuthUserFunc: &UserStoreGetByCurrentAuthUserFunc{
			defaultHook: i.GetByCurrentAuthUser,
		},
		GetByIDFunc: &UserStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		GetByUsernameFunc: &UserStoreGetByUsernameFunc{
			defaultHook: i.GetByUsername,
		},
		GetByUsernamesFunc: &UserStoreGetByUsernamesFunc{
			defaultHook: i.GetByUsernames,
		},
		GetByVerifiedEmailFunc: &UserStoreGetByVerifiedEmailFunc{
			defaultHook: i.GetByVerifiedEmail,
		},
		GetChatCompletionsQuotaFunc: &UserStoreGetChatCompletionsQuotaFunc{
			defaultHook: i.GetChatCompletionsQuota,
		},
		GetCodeCompletionsQuotaFunc: &UserStoreGetCodeCompletionsQuotaFunc{
			defaultHook: i.GetCodeCompletionsQuota,
		},
		HandleFunc: &UserStoreHandleFunc{
			defaultHook: i.Handle,
		},
		HardDeleteFunc: &UserStoreHardDeleteFunc{
			defaultHook: i.HardDelete,
		},
		HardDeleteListFunc: &UserStoreHardDeleteListFunc{
			defaultHook: i.HardDeleteList,
		},
		InvalidateSessionsByIDFunc: &UserStoreInvalidateSessionsByIDFunc{
			defaultHook: i.InvalidateSessionsByID,
		},
		InvalidateSessionsByIDsFunc: &UserStoreInvalidateSessionsByIDsFunc{
			defaultHook: i.InvalidateSessionsByIDs,
		},
		IsPasswordFunc: &UserStoreIsPasswordFunc{
			defaultHook: i.IsPassword,
		},
		ListFunc: &UserStoreListFunc{
			defaultHook: i.List,
		},
		ListByOrgFunc: &UserStoreListByOrgFunc{
			defaultHook: i.ListByOrg,
		},
		ListDatesFunc: &UserStoreListDatesFunc{
			defaultHook: i.ListDates,
		},
		ListForSCIMFunc: &UserStoreListForSCIMFunc{
			defaultHook: i.ListForSCIM,
		},
		RandomizePasswordAndClearPasswordResetRateLimitFunc: &UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc{
			defaultHook: i.RandomizePasswordAndClearPasswordResetRateLimit,
		},
		RecoverUsersListFunc: &UserStoreRecoverUsersListFunc{
			defaultHook: i.RecoverUsersList,
		},
		RenewPasswordResetCodeFunc: &UserStoreRenewPasswordResetCodeFunc{
			defaultHook: i.RenewPasswordResetCode,
		},
		SetChatCompletionsQuotaFunc: &UserStoreSetChatCompletionsQuotaFunc{
			defaultHook: i.SetChatCompletionsQuota,
		},
		SetCodeCompletionsQuotaFunc: &UserStoreSetCodeCompletionsQuotaFunc{
			defaultHook: i.SetCodeCompletionsQuota,
		},
		SetIsSiteAdminFunc: &UserStoreSetIsSiteAdminFunc{
			defaultHook: i.SetIsSiteAdmin,
		},
		SetPasswordFunc: &UserStoreSetPasswordFunc{
			defaultHook: i.SetPassword,
		},
		TransactFunc: &UserStoreTransactFunc{
			defaultHook: i.Transact,
		},
		UpdateFunc: &UserStoreUpdateFunc{
			defaultHook: i.Update,
		},
		UpdatePasswordFunc: &UserStoreUpdatePasswordFunc{
			defaultHook: i.UpdatePassword,
		},
		WithFunc: &UserStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// UserStoreCheckAndDecrementInviteQuotaFunc describes the behavior when the
// CheckAndDecrementInviteQuota method of the parent MockUserStore instance
// is invoked.
type UserStoreCheckAndDecrementInviteQuotaFunc struct {
	defaultHook func(context.Context, int32) (bool, error)
	hooks       []func(context.Context, int32) (bool, error)
	history     []UserStoreCheckAndDecrementInviteQuotaFuncCall
	mutex       sync.Mutex
}

// CheckAndDecrementInviteQuota delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockUserStore) CheckAndDecrementInviteQuota(v0 context.Context, v1 int32) (bool, error) {
	r0, r1 := m.CheckAndDecrementInviteQuotaFunc.nextHook()(v0, v1)
	m.CheckAndDecrementInviteQuotaFunc.appendCall(UserStoreCheckAndDecrementInviteQuotaFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CheckAndDecrementInviteQuota method of the parent MockUserStore instance
// is invoked and the hook queue is empty.
func (f *UserStoreCheckAndDecrementInviteQuotaFunc) SetDefaultHook(hook func(context.Context, int32) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CheckAndDecrementInviteQuota method of the parent MockUserStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserStoreCheckAndDecrementInviteQuotaFunc) PushHook(hook func(context.Context, int32) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreCheckAndDecrementInviteQuotaFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreCheckAndDecrementInviteQuotaFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int32) (bool, error) {
		return r0, r1
	})
}

func (f *UserStoreCheckAndDecrementInviteQuotaFunc) nextHook() func(context.Context, int32) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreCheckAndDecrementInviteQuotaFunc) appendCall(r0 UserStoreCheckAndDecrementInviteQuotaFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UserStoreCheckAndDecrementInviteQuotaFuncCall objects describing the
// invocations of this function.
func (f *UserStoreCheckAndDecrementInviteQuotaFunc) History() []UserStoreCheckAndDecrementInviteQuotaFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreCheckAndDecrementInviteQuotaFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreCheckAndDecrementInviteQuotaFuncCall is an object that describes
// an invocation of method CheckAndDecrementInviteQuota on an instance of
// MockUserStore.
type UserStoreCheckAndDecrementInviteQuotaFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreCheckAndDecrementInviteQuotaFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreCheckAndDecrementInviteQuotaFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreCountFunc describes the behavior when the Count method of the
// parent MockUserStore instance is invoked.
type UserStoreCountFunc struct {
	defaultHook func(context.Context, *UsersListOptions) (int, error)
	hooks       []func(context.Context, *UsersListOptions) (int, error)
	history     []UserStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) Count(v0 context.Context, v1 *UsersListOptions) (int, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(UserStoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreCountFunc) SetDefaultHook(hook func(context.Context, *UsersListOptions) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockUserStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *UserStoreCountFunc) PushHook(hook func(context.Context, *UsersListOptions) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, *UsersListOptions) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, *UsersListOptions) (int, error) {
		return r0, r1
	})
}

func (f *UserStoreCountFunc) nextHook() func(context.Context, *UsersListOptions) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreCountFunc) appendCall(r0 UserStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreCountFuncCall objects describing
// the invocations of this function.
func (f *UserStoreCountFunc) History() []UserStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreCountFuncCall is an object that describes an invocation of
// method Count on an instance of MockUserStore.
type UserStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *UsersListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreCountForSCIMFunc describes the behavior when the CountForSCIM
// method of the parent MockUserStore instance is invoked.
type UserStoreCountForSCIMFunc struct {
	defaultHook func(context.Context, *UsersListOptions) (int, error)
	hooks       []func(context.Context, *UsersListOptions) (int, error)
	history     []UserStoreCountForSCIMFuncCall
	mutex       sync.Mutex
}

// CountForSCIM delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserStore) CountForSCIM(v0 context.Context, v1 *UsersListOptions) (int, error) {
	r0, r1 := m.CountForSCIMFunc.nextHook()(v0, v1)
	m.CountForSCIMFunc.appendCall(UserStoreCountForSCIMFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CountForSCIM method
// of the parent MockUserStore instance is invoked and the hook queue is
// empty.
func (f *UserStoreCountForSCIMFunc) SetDefaultHook(hook func(context.Context, *UsersListOptions) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountForSCIM method of the parent MockUserStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreCountForSCIMFunc) PushHook(hook func(context.Context, *UsersListOptions) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreCountForSCIMFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, *UsersListOptions) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreCountForSCIMFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, *UsersListOptions) (int, error) {
		return r0, r1
	})
}

func (f *UserStoreCountForSCIMFunc) nextHook() func(context.Context, *UsersListOptions) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreCountForSCIMFunc) appendCall(r0 UserStoreCountForSCIMFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreCountForSCIMFuncCall objects
// describing the invocations of this function.
func (f *UserStoreCountForSCIMFunc) History() []UserStoreCountForSCIMFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreCountForSCIMFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreCountForSCIMFuncCall is an object that describes an invocation
// of method CountForSCIM on an instance of MockUserStore.
type UserStoreCountForSCIMFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *UsersListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreCountForSCIMFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreCountForSCIMFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreCreateFunc describes the behavior when the Create method of the
// parent MockUserStore instance is invoked.
type UserStoreCreateFunc struct {
	defaultHook func(context.Context, NewUser) (*types.User, error)
	hooks       []func(context.Context, NewUser) (*types.User, error)
	history     []UserStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) Create(v0 context.Context, v1 NewUser) (*types.User, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1)
	m.CreateFunc.appendCall(UserStoreCreateFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreCreateFunc) SetDefaultHook(hook func(context.Context, NewUser) (*types.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockUserStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreCreateFunc) PushHook(hook func(context.Context, NewUser) (*types.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreCreateFunc) SetDefaultReturn(r0 *types.User, r1 error) {
	f.SetDefaultHook(func(context.Context, NewUser) (*types.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreCreateFunc) PushReturn(r0 *types.User, r1 error) {
	f.PushHook(func(context.Context, NewUser) (*types.User, error) {
		return r0, r1
	})
}

func (f *UserStoreCreateFunc) nextHook() func(context.Context, NewUser) (*types.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreCreateFunc) appendCall(r0 UserStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreCreateFuncCall objects describing
// the invocations of this function.
func (f *UserStoreCreateFunc) History() []UserStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreCreateFuncCall is an object that describes an invocation of
// method Create on an instance of MockUserStore.
type UserStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 NewUser
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreCreateInTransactionFunc describes the behavior when the
// CreateInTransaction method of the parent MockUserStore instance is
// invoked.
type UserStoreCreateInTransactionFunc struct {
	defaultHook func(context.Context, NewUser, *extsvc.AccountSpec) (*types.User, error)
	hooks       []func(context.Context, NewUser, *extsvc.AccountSpec) (*types.User, error)
	history     []UserStoreCreateInTransactionFuncCall
	mutex       sync.Mutex
}

// CreateInTransaction delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserStore) CreateInTransaction(v0 context.Context, v1 NewUser, v2 *extsvc.AccountSpec) (*types.User, error) {
	r0, r1 := m.CreateInTransactionFunc.nextHook()(v0, v1, v2)
	m.CreateInTransactionFunc.appendCall(UserStoreCreateInTransactionFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CreateInTransaction
// method of the parent MockUserStore instance is invoked and the hook queue
// is empty.
func (f *UserStoreCreateInTransactionFunc) SetDefaultHook(hook func(context.Context, NewUser, *extsvc.AccountSpec) (*types.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateInTransaction method of the parent MockUserStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserStoreCreateInTransactionFunc) PushHook(hook func(context.Context, NewUser, *extsvc.AccountSpec) (*types.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreCreateInTransactionFunc) SetDefaultReturn(r0 *types.User, r1 error) {
	f.SetDefaultHook(func(context.Context, NewUser, *extsvc.AccountSpec) (*types.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreCreateInTransactionFunc) PushReturn(r0 *types.User, r1 error) {
	f.PushHook(func(context.Context, NewUser, *extsvc.AccountSpec) (*types.User, error) {
		return r0, r1
	})
}

func (f *UserStoreCreateInTransactionFunc) nextHook() func(context.Context, NewUser, *extsvc.AccountSpec) (*types.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreCreateInTransactionFunc) appendCall(r0 UserStoreCreateInTransactionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreCreateInTransactionFuncCall
// objects describing the invocations of this function.
func (f *UserStoreCreateInTransactionFunc) History() []UserStoreCreateInTransactionFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreCreateInTransactionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreCreateInTransactionFuncCall is an object that describes an
// invocation of method CreateInTransaction on an instance of MockUserStore.
type UserStoreCreateInTransactionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 NewUser
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *extsvc.AccountSpec
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreCreateInTransactionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreCreateInTransactionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreCreatePasswordFunc describes the behavior when the
// CreatePassword method of the parent MockUserStore instance is invoked.
type UserStoreCreatePasswordFunc struct {
	defaultHook func(context.Context, int32, string) error
	hooks       []func(context.Context, int32, string) error
	history     []UserStoreCreatePasswordFuncCall
	mutex       sync.Mutex
}

// CreatePassword delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserStore) CreatePassword(v0 context.Context, v1 int32, v2 string) error {
	r0 := m.CreatePasswordFunc.nextHook()(v0, v1, v2)
	m.CreatePasswordFunc.appendCall(UserStoreCreatePasswordFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the CreatePassword
// method of the parent MockUserStore instance is invoked and the hook queue
// is empty.
func (f *UserStoreCreatePasswordFunc) SetDefaultHook(hook func(context.Context, int32, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreatePassword method of the parent MockUserStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserStoreCreatePasswordFunc) PushHook(hook func(context.Context, int32, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreCreatePasswordFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreCreatePasswordFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, string) error {
		return r0
	})
}

func (f *UserStoreCreatePasswordFunc) nextHook() func(context.Context, int32, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreCreatePasswordFunc) appendCall(r0 UserStoreCreatePasswordFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreCreatePasswordFuncCall objects
// describing the invocations of this function.
func (f *UserStoreCreatePasswordFunc) History() []UserStoreCreatePasswordFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreCreatePasswordFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreCreatePasswordFuncCall is an object that describes an invocation
// of method CreatePassword on an instance of MockUserStore.
type UserStoreCreatePasswordFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreCreatePasswordFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreCreatePasswordFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreDeleteFunc describes the behavior when the Delete method of the
// parent MockUserStore instance is invoked.
type UserStoreDeleteFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []UserStoreDeleteFuncCall
	mutex       sync.Mutex
}

// Delete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) Delete(v0 context.Context, v1 int32) error {
	r0 := m.DeleteFunc.nextHook()(v0, v1)
	m.DeleteFunc.appendCall(UserStoreDeleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Delete method of the
// parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreDeleteFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Delete method of the parent MockUserStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreDeleteFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *UserStoreDeleteFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreDeleteFunc) appendCall(r0 UserStoreDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreDeleteFuncCall objects describing
// the invocations of this function.
func (f *UserStoreDeleteFunc) History() []UserStoreDeleteFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreDeleteFuncCall is an object that describes an invocation of
// method Delete on an instance of MockUserStore.
type UserStoreDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreDeleteListFunc describes the behavior when the DeleteList method
// of the parent MockUserStore instance is invoked.
type UserStoreDeleteListFunc struct {
	defaultHook func(context.Context, []int32) error
	hooks       []func(context.Context, []int32) error
	history     []UserStoreDeleteListFuncCall
	mutex       sync.Mutex
}

// DeleteList delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserStore) DeleteList(v0 context.Context, v1 []int32) error {
	r0 := m.DeleteListFunc.nextHook()(v0, v1)
	m.DeleteListFunc.appendCall(UserStoreDeleteListFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteList method of
// the parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreDeleteListFunc) SetDefaultHook(hook func(context.Context, []int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteList method of the parent MockUserStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreDeleteListFunc) PushHook(hook func(context.Context, []int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreDeleteListFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreDeleteListFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []int32) error {
		return r0
	})
}

func (f *UserStoreDeleteListFunc) nextHook() func(context.Context, []int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreDeleteListFunc) appendCall(r0 UserStoreDeleteListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreDeleteListFuncCall objects
// describing the invocations of this function.
func (f *UserStoreDeleteListFunc) History() []UserStoreDeleteListFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreDeleteListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreDeleteListFuncCall is an object that describes an invocation of
// method DeleteList on an instance of MockUserStore.
type UserStoreDeleteListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreDeleteListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreDeleteListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreDeletePasswordResetCodeFunc describes the behavior when the
// DeletePasswordResetCode method of the parent MockUserStore instance is
// invoked.
type UserStoreDeletePasswordResetCodeFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []UserStoreDeletePasswordResetCodeFuncCall
	mutex       sync.Mutex
}

// DeletePasswordResetCode delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUserStore) DeletePasswordResetCode(v0 context.Context, v1 int32) error {
	r0 := m.DeletePasswordResetCodeFunc.nextHook()(v0, v1)
	m.DeletePasswordResetCodeFunc.appendCall(UserStoreDeletePasswordResetCodeFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// DeletePasswordResetCode method of the parent MockUserStore instance is
// invoked and the hook queue is empty.
func (f *UserStoreDeletePasswordResetCodeFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeletePasswordResetCode method of the parent MockUserStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserStoreDeletePasswordResetCodeFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreDeletePasswordResetCodeFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreDeletePasswordResetCodeFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *UserStoreDeletePasswordResetCodeFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreDeletePasswordResetCodeFunc) appendCall(r0 UserStoreDeletePasswordResetCodeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreDeletePasswordResetCodeFuncCall
// objects describing the invocations of this function.
func (f *UserStoreDeletePasswordResetCodeFunc) History() []UserStoreDeletePasswordResetCodeFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreDeletePasswordResetCodeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreDeletePasswordResetCodeFuncCall is an object that describes an
// invocation of method DeletePasswordResetCode on an instance of
// MockUserStore.
type UserStoreDeletePasswordResetCodeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreDeletePasswordResetCodeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreDeletePasswordResetCodeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreDoneFunc describes the behavior when the Done method of the
// parent MockUserStore instance is invoked.
type UserStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []UserStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(UserStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockUserStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *UserStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *UserStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreDoneFunc) appendCall(r0 UserStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreDoneFuncCall objects describing
// the invocations of this function.
func (f *UserStoreDoneFunc) History() []UserStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreDoneFuncCall is an object that describes an invocation of method
// Done on an instance of MockUserStore.
type UserStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreExecFunc describes the behavior when the Exec method of the
// parent MockUserStore instance is invoked.
type UserStoreExecFunc struct {
	defaultHook func(context.Context, *sqlf.Query) error
	hooks       []func(context.Context, *sqlf.Query) error
	history     []UserStoreExecFuncCall
	mutex       sync.Mutex
}

// Exec delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) Exec(v0 context.Context, v1 *sqlf.Query) error {
	r0 := m.ExecFunc.nextHook()(v0, v1)
	m.ExecFunc.appendCall(UserStoreExecFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Exec method of the
// parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreExecFunc) SetDefaultHook(hook func(context.Context, *sqlf.Query) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Exec method of the parent MockUserStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *UserStoreExecFunc) PushHook(hook func(context.Context, *sqlf.Query) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreExecFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *sqlf.Query) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreExecFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *sqlf.Query) error {
		return r0
	})
}

func (f *UserStoreExecFunc) nextHook() func(context.Context, *sqlf.Query) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreExecFunc) appendCall(r0 UserStoreExecFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreExecFuncCall objects describing
// the invocations of this function.
func (f *UserStoreExecFunc) History() []UserStoreExecFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreExecFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreExecFuncCall is an object that describes an invocation of method
// Exec on an instance of MockUserStore.
type UserStoreExecFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sqlf.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreExecFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreExecFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreExecResultFunc describes the behavior when the ExecResult method
// of the parent MockUserStore instance is invoked.
type UserStoreExecResultFunc struct {
	defaultHook func(context.Context, *sqlf.Query) (sql.Result, error)
	hooks       []func(context.Context, *sqlf.Query) (sql.Result, error)
	history     []UserStoreExecResultFuncCall
	mutex       sync.Mutex
}

// ExecResult delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserStore) ExecResult(v0 context.Context, v1 *sqlf.Query) (sql.Result, error) {
	r0, r1 := m.ExecResultFunc.nextHook()(v0, v1)
	m.ExecResultFunc.appendCall(UserStoreExecResultFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ExecResult method of
// the parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreExecResultFunc) SetDefaultHook(hook func(context.Context, *sqlf.Query) (sql.Result, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExecResult method of the parent MockUserStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreExecResultFunc) PushHook(hook func(context.Context, *sqlf.Query) (sql.Result, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreExecResultFunc) SetDefaultReturn(r0 sql.Result, r1 error) {
	f.SetDefaultHook(func(context.Context, *sqlf.Query) (sql.Result, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreExecResultFunc) PushReturn(r0 sql.Result, r1 error) {
	f.PushHook(func(context.Context, *sqlf.Query) (sql.Result, error) {
		return r0, r1
	})
}

func (f *UserStoreExecResultFunc) nextHook() func(context.Context, *sqlf.Query) (sql.Result, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreExecResultFunc) appendCall(r0 UserStoreExecResultFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreExecResultFuncCall objects
// describing the invocations of this function.
func (f *UserStoreExecResultFunc) History() []UserStoreExecResultFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreExecResultFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreExecResultFuncCall is an object that describes an invocation of
// method ExecResult on an instance of MockUserStore.
type UserStoreExecResultFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *sqlf.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 sql.Result
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreExecResultFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreExecResultFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreGetByCurrentAuthUserFunc describes the behavior when the
// GetByCurrentAuthUser method of the parent MockUserStore instance is
// invoked.
type UserStoreGetByCurrentAuthUserFunc struct {
	defaultHook func(context.Context) (*types.User, error)
	hooks       []func(context.Context) (*types.User, error)
	history     []UserStoreGetByCurrentAuthUserFuncCall
	mutex       sync.Mutex
}

// GetByCurrentAuthUser delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserStore) GetByCurrentAuthUser(v0 context.Context) (*types.User, error) {
	r0, r1 := m.GetByCurrentAuthUserFunc.nextHook()(v0)
	m.GetByCurrentAuthUserFunc.appendCall(UserStoreGetByCurrentAuthUserFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByCurrentAuthUser
// method of the parent MockUserStore instance is invoked and the hook queue
// is empty.
func (f *UserStoreGetByCurrentAuthUserFunc) SetDefaultHook(hook func(context.Context) (*types.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByCurrentAuthUser method of the parent MockUserStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserStoreGetByCurrentAuthUserFunc) PushHook(hook func(context.Context) (*types.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreGetByCurrentAuthUserFunc) SetDefaultReturn(r0 *types.User, r1 error) {
	f.SetDefaultHook(func(context.Context) (*types.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreGetByCurrentAuthUserFunc) PushReturn(r0 *types.User, r1 error) {
	f.PushHook(func(context.Context) (*types.User, error) {
		return r0, r1
	})
}

func (f *UserStoreGetByCurrentAuthUserFunc) nextHook() func(context.Context) (*types.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreGetByCurrentAuthUserFunc) appendCall(r0 UserStoreGetByCurrentAuthUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreGetByCurrentAuthUserFuncCall
// objects describing the invocations of this function.
func (f *UserStoreGetByCurrentAuthUserFunc) History() []UserStoreGetByCurrentAuthUserFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreGetByCurrentAuthUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreGetByCurrentAuthUserFuncCall is an object that describes an
// invocation of method GetByCurrentAuthUser on an instance of
// MockUserStore.
type UserStoreGetByCurrentAuthUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreGetByCurrentAuthUserFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreGetByCurrentAuthUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreGetByIDFunc describes the behavior when the GetByID method of
// the parent MockUserStore instance is invoked.
type UserStoreGetByIDFunc struct {
	defaultHook func(context.Context, int32) (*types.User, error)
	hooks       []func(context.Context, int32) (*types.User, error)
	history     []UserStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) GetByID(v0 context.Context, v1 int32) (*types.User, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(UserStoreGetByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int32) (*types.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockUserStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreGetByIDFunc) PushHook(hook func(context.Context, int32) (*types.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreGetByIDFunc) SetDefaultReturn(r0 *types.User, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (*types.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreGetByIDFunc) PushReturn(r0 *types.User, r1 error) {
	f.PushHook(func(context.Context, int32) (*types.User, error) {
		return r0, r1
	})
}

func (f *UserStoreGetByIDFunc) nextHook() func(context.Context, int32) (*types.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreGetByIDFunc) appendCall(r0 UserStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreGetByIDFuncCall objects describing
// the invocations of this function.
func (f *UserStoreGetByIDFunc) History() []UserStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreGetByIDFuncCall is an object that describes an invocation of
// method GetByID on an instance of MockUserStore.
type UserStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreGetByUsernameFunc describes the behavior when the GetByUsername
// method of the parent MockUserStore instance is invoked.
type UserStoreGetByUsernameFunc struct {
	defaultHook func(context.Context, string) (*types.User, error)
	hooks       []func(context.Context, string) (*types.User, error)
	history     []UserStoreGetByUsernameFuncCall
	mutex       sync.Mutex
}

// GetByUsername delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserStore) GetByUsername(v0 context.Context, v1 string) (*types.User, error) {
	r0, r1 := m.GetByUsernameFunc.nextHook()(v0, v1)
	m.GetByUsernameFunc.appendCall(UserStoreGetByUsernameFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByUsername method
// of the parent MockUserStore instance is invoked and the hook queue is
// empty.
func (f *UserStoreGetByUsernameFunc) SetDefaultHook(hook func(context.Context, string) (*types.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByUsername method of the parent MockUserStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserStoreGetByUsernameFunc) PushHook(hook func(context.Context, string) (*types.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreGetByUsernameFunc) SetDefaultReturn(r0 *types.User, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*types.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreGetByUsernameFunc) PushReturn(r0 *types.User, r1 error) {
	f.PushHook(func(context.Context, string) (*types.User, error) {
		return r0, r1
	})
}

func (f *UserStoreGetByUsernameFunc) nextHook() func(context.Context, string) (*types.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreGetByUsernameFunc) appendCall(r0 UserStoreGetByUsernameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreGetByUsernameFuncCall objects
// describing the invocations of this function.
func (f *UserStoreGetByUsernameFunc) History() []UserStoreGetByUsernameFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreGetByUsernameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreGetByUsernameFuncCall is an object that describes an invocation
// of method GetByUsername on an instance of MockUserStore.
type UserStoreGetByUsernameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreGetByUsernameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreGetByUsernameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreGetByUsernamesFunc describes the behavior when the
// GetByUsernames method of the parent MockUserStore instance is invoked.
type UserStoreGetByUsernamesFunc struct {
	defaultHook func(context.Context, ...string) ([]*types.User, error)
	hooks       []func(context.Context, ...string) ([]*types.User, error)
	history     []UserStoreGetByUsernamesFuncCall
	mutex       sync.Mutex
}

// GetByUsernames delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserStore) GetByUsernames(v0 context.Context, v1 ...string) ([]*types.User, error) {
	r0, r1 := m.GetByUsernamesFunc.nextHook()(v0, v1...)
	m.GetByUsernamesFunc.appendCall(UserStoreGetByUsernamesFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByUsernames
// method of the parent MockUserStore instance is invoked and the hook queue
// is empty.
func (f *UserStoreGetByUsernamesFunc) SetDefaultHook(hook func(context.Context, ...string) ([]*types.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByUsernames method of the parent MockUserStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserStoreGetByUsernamesFunc) PushHook(hook func(context.Context, ...string) ([]*types.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreGetByUsernamesFunc) SetDefaultReturn(r0 []*types.User, r1 error) {
	f.SetDefaultHook(func(context.Context, ...string) ([]*types.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreGetByUsernamesFunc) PushReturn(r0 []*types.User, r1 error) {
	f.PushHook(func(context.Context, ...string) ([]*types.User, error) {
		return r0, r1
	})
}

func (f *UserStoreGetByUsernamesFunc) nextHook() func(context.Context, ...string) ([]*types.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreGetByUsernamesFunc) appendCall(r0 UserStoreGetByUsernamesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreGetByUsernamesFuncCall objects
// describing the invocations of this function.
func (f *UserStoreGetByUsernamesFunc) History() []UserStoreGetByUsernamesFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreGetByUsernamesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreGetByUsernamesFuncCall is an object that describes an invocation
// of method GetByUsernames on an instance of MockUserStore.
type UserStoreGetByUsernamesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c UserStoreGetByUsernamesFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreGetByUsernamesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreGetByVerifiedEmailFunc describes the behavior when the
// GetByVerifiedEmail method of the parent MockUserStore instance is
// invoked.
type UserStoreGetByVerifiedEmailFunc struct {
	defaultHook func(context.Context, string) (*types.User, error)
	hooks       []func(context.Context, string) (*types.User, error)
	history     []UserStoreGetByVerifiedEmailFuncCall
	mutex       sync.Mutex
}

// GetByVerifiedEmail delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserStore) GetByVerifiedEmail(v0 context.Context, v1 string) (*types.User, error) {
	r0, r1 := m.GetByVerifiedEmailFunc.nextHook()(v0, v1)
	m.GetByVerifiedEmailFunc.appendCall(UserStoreGetByVerifiedEmailFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByVerifiedEmail
// method of the parent MockUserStore instance is invoked and the hook queue
// is empty.
func (f *UserStoreGetByVerifiedEmailFunc) SetDefaultHook(hook func(context.Context, string) (*types.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByVerifiedEmail method of the parent MockUserStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UserStoreGetByVerifiedEmailFunc) PushHook(hook func(context.Context, string) (*types.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreGetByVerifiedEmailFunc) SetDefaultReturn(r0 *types.User, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*types.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreGetByVerifiedEmailFunc) PushReturn(r0 *types.User, r1 error) {
	f.PushHook(func(context.Context, string) (*types.User, error) {
		return r0, r1
	})
}

func (f *UserStoreGetByVerifiedEmailFunc) nextHook() func(context.Context, string) (*types.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreGetByVerifiedEmailFunc) appendCall(r0 UserStoreGetByVerifiedEmailFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreGetByVerifiedEmailFuncCall objects
// describing the invocations of this function.
func (f *UserStoreGetByVerifiedEmailFunc) History() []UserStoreGetByVerifiedEmailFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreGetByVerifiedEmailFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreGetByVerifiedEmailFuncCall is an object that describes an
// invocation of method GetByVerifiedEmail on an instance of MockUserStore.
type UserStoreGetByVerifiedEmailFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreGetByVerifiedEmailFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreGetByVerifiedEmailFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreGetChatCompletionsQuotaFunc describes the behavior when the
// GetChatCompletionsQuota method of the parent MockUserStore instance is
// invoked.
type UserStoreGetChatCompletionsQuotaFunc struct {
	defaultHook func(context.Context, int32) (*int, error)
	hooks       []func(context.Context, int32) (*int, error)
	history     []UserStoreGetChatCompletionsQuotaFuncCall
	mutex       sync.Mutex
}

// GetChatCompletionsQuota delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUserStore) GetChatCompletionsQuota(v0 context.Context, v1 int32) (*int, error) {
	r0, r1 := m.GetChatCompletionsQuotaFunc.nextHook()(v0, v1)
	m.GetChatCompletionsQuotaFunc.appendCall(UserStoreGetChatCompletionsQuotaFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetChatCompletionsQuota method of the parent MockUserStore instance is
// invoked and the hook queue is empty.
func (f *UserStoreGetChatCompletionsQuotaFunc) SetDefaultHook(hook func(context.Context, int32) (*int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetChatCompletionsQuota method of the parent MockUserStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserStoreGetChatCompletionsQuotaFunc) PushHook(hook func(context.Context, int32) (*int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreGetChatCompletionsQuotaFunc) SetDefaultReturn(r0 *int, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (*int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreGetChatCompletionsQuotaFunc) PushReturn(r0 *int, r1 error) {
	f.PushHook(func(context.Context, int32) (*int, error) {
		return r0, r1
	})
}

func (f *UserStoreGetChatCompletionsQuotaFunc) nextHook() func(context.Context, int32) (*int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreGetChatCompletionsQuotaFunc) appendCall(r0 UserStoreGetChatCompletionsQuotaFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreGetChatCompletionsQuotaFuncCall
// objects describing the invocations of this function.
func (f *UserStoreGetChatCompletionsQuotaFunc) History() []UserStoreGetChatCompletionsQuotaFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreGetChatCompletionsQuotaFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreGetChatCompletionsQuotaFuncCall is an object that describes an
// invocation of method GetChatCompletionsQuota on an instance of
// MockUserStore.
type UserStoreGetChatCompletionsQuotaFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreGetChatCompletionsQuotaFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreGetChatCompletionsQuotaFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreGetCodeCompletionsQuotaFunc describes the behavior when the
// GetCodeCompletionsQuota method of the parent MockUserStore instance is
// invoked.
type UserStoreGetCodeCompletionsQuotaFunc struct {
	defaultHook func(context.Context, int32) (*int, error)
	hooks       []func(context.Context, int32) (*int, error)
	history     []UserStoreGetCodeCompletionsQuotaFuncCall
	mutex       sync.Mutex
}

// GetCodeCompletionsQuota delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUserStore) GetCodeCompletionsQuota(v0 context.Context, v1 int32) (*int, error) {
	r0, r1 := m.GetCodeCompletionsQuotaFunc.nextHook()(v0, v1)
	m.GetCodeCompletionsQuotaFunc.appendCall(UserStoreGetCodeCompletionsQuotaFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetCodeCompletionsQuota method of the parent MockUserStore instance is
// invoked and the hook queue is empty.
func (f *UserStoreGetCodeCompletionsQuotaFunc) SetDefaultHook(hook func(context.Context, int32) (*int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetCodeCompletionsQuota method of the parent MockUserStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserStoreGetCodeCompletionsQuotaFunc) PushHook(hook func(context.Context, int32) (*int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreGetCodeCompletionsQuotaFunc) SetDefaultReturn(r0 *int, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (*int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreGetCodeCompletionsQuotaFunc) PushReturn(r0 *int, r1 error) {
	f.PushHook(func(context.Context, int32) (*int, error) {
		return r0, r1
	})
}

func (f *UserStoreGetCodeCompletionsQuotaFunc) nextHook() func(context.Context, int32) (*int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreGetCodeCompletionsQuotaFunc) appendCall(r0 UserStoreGetCodeCompletionsQuotaFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreGetCodeCompletionsQuotaFuncCall
// objects describing the invocations of this function.
func (f *UserStoreGetCodeCompletionsQuotaFunc) History() []UserStoreGetCodeCompletionsQuotaFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreGetCodeCompletionsQuotaFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreGetCodeCompletionsQuotaFuncCall is an object that describes an
// invocation of method GetCodeCompletionsQuota on an instance of
// MockUserStore.
type UserStoreGetCodeCompletionsQuotaFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreGetCodeCompletionsQuotaFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreGetCodeCompletionsQuotaFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreHandleFunc describes the behavior when the Handle method of the
// parent MockUserStore instance is invoked.
type UserStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []UserStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(UserStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockUserStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *UserStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreHandleFunc) appendCall(r0 UserStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreHandleFuncCall objects describing
// the invocations of this function.
func (f *UserStoreHandleFunc) History() []UserStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreHandleFuncCall is an object that describes an invocation of
// method Handle on an instance of MockUserStore.
type UserStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreHardDeleteFunc describes the behavior when the HardDelete method
// of the parent MockUserStore instance is invoked.
type UserStoreHardDeleteFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []UserStoreHardDeleteFuncCall
	mutex       sync.Mutex
}

// HardDelete delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserStore) HardDelete(v0 context.Context, v1 int32) error {
	r0 := m.HardDeleteFunc.nextHook()(v0, v1)
	m.HardDeleteFunc.appendCall(UserStoreHardDeleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the HardDelete method of
// the parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreHardDeleteFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// HardDelete method of the parent MockUserStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreHardDeleteFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreHardDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreHardDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *UserStoreHardDeleteFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreHardDeleteFunc) appendCall(r0 UserStoreHardDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreHardDeleteFuncCall objects
// describing the invocations of this function.
func (f *UserStoreHardDeleteFunc) History() []UserStoreHardDeleteFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreHardDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreHardDeleteFuncCall is an object that describes an invocation of
// method HardDelete on an instance of MockUserStore.
type UserStoreHardDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreHardDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreHardDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreHardDeleteListFunc describes the behavior when the
// HardDeleteList method of the parent MockUserStore instance is invoked.
type UserStoreHardDeleteListFunc struct {
	defaultHook func(context.Context, []int32) error
	hooks       []func(context.Context, []int32) error
	history     []UserStoreHardDeleteListFuncCall
	mutex       sync.Mutex
}

// HardDeleteList delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserStore) HardDeleteList(v0 context.Context, v1 []int32) error {
	r0 := m.HardDeleteListFunc.nextHook()(v0, v1)
	m.HardDeleteListFunc.appendCall(UserStoreHardDeleteListFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the HardDeleteList
// method of the parent MockUserStore instance is invoked and the hook queue
// is empty.
func (f *UserStoreHardDeleteListFunc) SetDefaultHook(hook func(context.Context, []int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// HardDeleteList method of the parent MockUserStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserStoreHardDeleteListFunc) PushHook(hook func(context.Context, []int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreHardDeleteListFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreHardDeleteListFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []int32) error {
		return r0
	})
}

func (f *UserStoreHardDeleteListFunc) nextHook() func(context.Context, []int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreHardDeleteListFunc) appendCall(r0 UserStoreHardDeleteListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreHardDeleteListFuncCall objects
// describing the invocations of this function.
func (f *UserStoreHardDeleteListFunc) History() []UserStoreHardDeleteListFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreHardDeleteListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreHardDeleteListFuncCall is an object that describes an invocation
// of method HardDeleteList on an instance of MockUserStore.
type UserStoreHardDeleteListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreHardDeleteListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreHardDeleteListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreInvalidateSessionsByIDFunc describes the behavior when the
// InvalidateSessionsByID method of the parent MockUserStore instance is
// invoked.
type UserStoreInvalidateSessionsByIDFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []UserStoreInvalidateSessionsByIDFuncCall
	mutex       sync.Mutex
}

// InvalidateSessionsByID delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUserStore) InvalidateSessionsByID(v0 context.Context, v1 int32) error {
	r0 := m.InvalidateSessionsByIDFunc.nextHook()(v0, v1)
	m.InvalidateSessionsByIDFunc.appendCall(UserStoreInvalidateSessionsByIDFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// InvalidateSessionsByID method of the parent MockUserStore instance is
// invoked and the hook queue is empty.
func (f *UserStoreInvalidateSessionsByIDFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// InvalidateSessionsByID method of the parent MockUserStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserStoreInvalidateSessionsByIDFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreInvalidateSessionsByIDFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreInvalidateSessionsByIDFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *UserStoreInvalidateSessionsByIDFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreInvalidateSessionsByIDFunc) appendCall(r0 UserStoreInvalidateSessionsByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreInvalidateSessionsByIDFuncCall
// objects describing the invocations of this function.
func (f *UserStoreInvalidateSessionsByIDFunc) History() []UserStoreInvalidateSessionsByIDFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreInvalidateSessionsByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreInvalidateSessionsByIDFuncCall is an object that describes an
// invocation of method InvalidateSessionsByID on an instance of
// MockUserStore.
type UserStoreInvalidateSessionsByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreInvalidateSessionsByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreInvalidateSessionsByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreInvalidateSessionsByIDsFunc describes the behavior when the
// InvalidateSessionsByIDs method of the parent MockUserStore instance is
// invoked.
type UserStoreInvalidateSessionsByIDsFunc struct {
	defaultHook func(context.Context, []int32) error
	hooks       []func(context.Context, []int32) error
	history     []UserStoreInvalidateSessionsByIDsFuncCall
	mutex       sync.Mutex
}

// InvalidateSessionsByIDs delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUserStore) InvalidateSessionsByIDs(v0 context.Context, v1 []int32) error {
	r0 := m.InvalidateSessionsByIDsFunc.nextHook()(v0, v1)
	m.InvalidateSessionsByIDsFunc.appendCall(UserStoreInvalidateSessionsByIDsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// InvalidateSessionsByIDs method of the parent MockUserStore instance is
// invoked and the hook queue is empty.
func (f *UserStoreInvalidateSessionsByIDsFunc) SetDefaultHook(hook func(context.Context, []int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// InvalidateSessionsByIDs method of the parent MockUserStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserStoreInvalidateSessionsByIDsFunc) PushHook(hook func(context.Context, []int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreInvalidateSessionsByIDsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreInvalidateSessionsByIDsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []int32) error {
		return r0
	})
}

func (f *UserStoreInvalidateSessionsByIDsFunc) nextHook() func(context.Context, []int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreInvalidateSessionsByIDsFunc) appendCall(r0 UserStoreInvalidateSessionsByIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreInvalidateSessionsByIDsFuncCall
// objects describing the invocations of this function.
func (f *UserStoreInvalidateSessionsByIDsFunc) History() []UserStoreInvalidateSessionsByIDsFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreInvalidateSessionsByIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreInvalidateSessionsByIDsFuncCall is an object that describes an
// invocation of method InvalidateSessionsByIDs on an instance of
// MockUserStore.
type UserStoreInvalidateSessionsByIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreInvalidateSessionsByIDsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreInvalidateSessionsByIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreIsPasswordFunc describes the behavior when the IsPassword method
// of the parent MockUserStore instance is invoked.
type UserStoreIsPasswordFunc struct {
	defaultHook func(context.Context, int32, string) (bool, error)
	hooks       []func(context.Context, int32, string) (bool, error)
	history     []UserStoreIsPasswordFuncCall
	mutex       sync.Mutex
}

// IsPassword delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserStore) IsPassword(v0 context.Context, v1 int32, v2 string) (bool, error) {
	r0, r1 := m.IsPasswordFunc.nextHook()(v0, v1, v2)
	m.IsPasswordFunc.appendCall(UserStoreIsPasswordFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IsPassword method of
// the parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreIsPasswordFunc) SetDefaultHook(hook func(context.Context, int32, string) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsPassword method of the parent MockUserStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreIsPasswordFunc) PushHook(hook func(context.Context, int32, string) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreIsPasswordFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, string) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreIsPasswordFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int32, string) (bool, error) {
		return r0, r1
	})
}

func (f *UserStoreIsPasswordFunc) nextHook() func(context.Context, int32, string) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreIsPasswordFunc) appendCall(r0 UserStoreIsPasswordFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreIsPasswordFuncCall objects
// describing the invocations of this function.
func (f *UserStoreIsPasswordFunc) History() []UserStoreIsPasswordFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreIsPasswordFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreIsPasswordFuncCall is an object that describes an invocation of
// method IsPassword on an instance of MockUserStore.
type UserStoreIsPasswordFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreIsPasswordFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreIsPasswordFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreListFunc describes the behavior when the List method of the
// parent MockUserStore instance is invoked.
type UserStoreListFunc struct {
	defaultHook func(context.Context, *UsersListOptions) ([]*types.User, error)
	hooks       []func(context.Context, *UsersListOptions) ([]*types.User, error)
	history     []UserStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) List(v0 context.Context, v1 *UsersListOptions) ([]*types.User, error) {
	r0, r1 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(UserStoreListFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreListFunc) SetDefaultHook(hook func(context.Context, *UsersListOptions) ([]*types.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockUserStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *UserStoreListFunc) PushHook(hook func(context.Context, *UsersListOptions) ([]*types.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreListFunc) SetDefaultReturn(r0 []*types.User, r1 error) {
	f.SetDefaultHook(func(context.Context, *UsersListOptions) ([]*types.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreListFunc) PushReturn(r0 []*types.User, r1 error) {
	f.PushHook(func(context.Context, *UsersListOptions) ([]*types.User, error) {
		return r0, r1
	})
}

func (f *UserStoreListFunc) nextHook() func(context.Context, *UsersListOptions) ([]*types.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreListFunc) appendCall(r0 UserStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreListFuncCall objects describing
// the invocations of this function.
func (f *UserStoreListFunc) History() []UserStoreListFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreListFuncCall is an object that describes an invocation of method
// List on an instance of MockUserStore.
type UserStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *UsersListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreListByOrgFunc describes the behavior when the ListByOrg method
// of the parent MockUserStore instance is invoked.
type UserStoreListByOrgFunc struct {
	defaultHook func(context.Context, int32, *PaginationArgs, *string) ([]*types.User, error)
	hooks       []func(context.Context, int32, *PaginationArgs, *string) ([]*types.User, error)
	history     []UserStoreListByOrgFuncCall
	mutex       sync.Mutex
}

// ListByOrg delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) ListByOrg(v0 context.Context, v1 int32, v2 *PaginationArgs, v3 *string) ([]*types.User, error) {
	r0, r1 := m.ListByOrgFunc.nextHook()(v0, v1, v2, v3)
	m.ListByOrgFunc.appendCall(UserStoreListByOrgFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListByOrg method of
// the parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreListByOrgFunc) SetDefaultHook(hook func(context.Context, int32, *PaginationArgs, *string) ([]*types.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListByOrg method of the parent MockUserStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreListByOrgFunc) PushHook(hook func(context.Context, int32, *PaginationArgs, *string) ([]*types.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreListByOrgFunc) SetDefaultReturn(r0 []*types.User, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, *PaginationArgs, *string) ([]*types.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreListByOrgFunc) PushReturn(r0 []*types.User, r1 error) {
	f.PushHook(func(context.Context, int32, *PaginationArgs, *string) ([]*types.User, error) {
		return r0, r1
	})
}

func (f *UserStoreListByOrgFunc) nextHook() func(context.Context, int32, *PaginationArgs, *string) ([]*types.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreListByOrgFunc) appendCall(r0 UserStoreListByOrgFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreListByOrgFuncCall objects
// describing the invocations of this function.
func (f *UserStoreListByOrgFunc) History() []UserStoreListByOrgFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreListByOrgFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreListByOrgFuncCall is an object that describes an invocation of
// method ListByOrg on an instance of MockUserStore.
type UserStoreListByOrgFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *PaginationArgs
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreListByOrgFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreListByOrgFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreListDatesFunc describes the behavior when the ListDates method
// of the parent MockUserStore instance is invoked.
type UserStoreListDatesFunc struct {
	defaultHook func(context.Context) ([]types.UserDates, error)
	hooks       []func(context.Context) ([]types.UserDates, error)
	history     []UserStoreListDatesFuncCall
	mutex       sync.Mutex
}

// ListDates delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) ListDates(v0 context.Context) ([]types.UserDates, error) {
	r0, r1 := m.ListDatesFunc.nextHook()(v0)
	m.ListDatesFunc.appendCall(UserStoreListDatesFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListDates method of
// the parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreListDatesFunc) SetDefaultHook(hook func(context.Context) ([]types.UserDates, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListDates method of the parent MockUserStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreListDatesFunc) PushHook(hook func(context.Context) ([]types.UserDates, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreListDatesFunc) SetDefaultReturn(r0 []types.UserDates, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]types.UserDates, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreListDatesFunc) PushReturn(r0 []types.UserDates, r1 error) {
	f.PushHook(func(context.Context) ([]types.UserDates, error) {
		return r0, r1
	})
}

func (f *UserStoreListDatesFunc) nextHook() func(context.Context) ([]types.UserDates, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreListDatesFunc) appendCall(r0 UserStoreListDatesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreListDatesFuncCall objects
// describing the invocations of this function.
func (f *UserStoreListDatesFunc) History() []UserStoreListDatesFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreListDatesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreListDatesFuncCall is an object that describes an invocation of
// method ListDates on an instance of MockUserStore.
type UserStoreListDatesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.UserDates
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreListDatesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreListDatesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreListForSCIMFunc describes the behavior when the ListForSCIM
// method of the parent MockUserStore instance is invoked.
type UserStoreListForSCIMFunc struct {
	defaultHook func(context.Context, *UsersListOptions) ([]*types.UserForSCIM, error)
	hooks       []func(context.Context, *UsersListOptions) ([]*types.UserForSCIM, error)
	history     []UserStoreListForSCIMFuncCall
	mutex       sync.Mutex
}

// ListForSCIM delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserStore) ListForSCIM(v0 context.Context, v1 *UsersListOptions) ([]*types.UserForSCIM, error) {
	r0, r1 := m.ListForSCIMFunc.nextHook()(v0, v1)
	m.ListForSCIMFunc.appendCall(UserStoreListForSCIMFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListForSCIM method
// of the parent MockUserStore instance is invoked and the hook queue is
// empty.
func (f *UserStoreListForSCIMFunc) SetDefaultHook(hook func(context.Context, *UsersListOptions) ([]*types.UserForSCIM, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListForSCIM method of the parent MockUserStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreListForSCIMFunc) PushHook(hook func(context.Context, *UsersListOptions) ([]*types.UserForSCIM, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreListForSCIMFunc) SetDefaultReturn(r0 []*types.UserForSCIM, r1 error) {
	f.SetDefaultHook(func(context.Context, *UsersListOptions) ([]*types.UserForSCIM, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreListForSCIMFunc) PushReturn(r0 []*types.UserForSCIM, r1 error) {
	f.PushHook(func(context.Context, *UsersListOptions) ([]*types.UserForSCIM, error) {
		return r0, r1
	})
}

func (f *UserStoreListForSCIMFunc) nextHook() func(context.Context, *UsersListOptions) ([]*types.UserForSCIM, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreListForSCIMFunc) appendCall(r0 UserStoreListForSCIMFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreListForSCIMFuncCall objects
// describing the invocations of this function.
func (f *UserStoreListForSCIMFunc) History() []UserStoreListForSCIMFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreListForSCIMFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreListForSCIMFuncCall is an object that describes an invocation of
// method ListForSCIM on an instance of MockUserStore.
type UserStoreListForSCIMFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *UsersListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.UserForSCIM
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreListForSCIMFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreListForSCIMFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc describes
// the behavior when the RandomizePasswordAndClearPasswordResetRateLimit
// method of the parent MockUserStore instance is invoked.
type UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []UserStoreRandomizePasswordAndClearPasswordResetRateLimitFuncCall
	mutex       sync.Mutex
}

// RandomizePasswordAndClearPasswordResetRateLimit delegates to the next
// hook function in the queue and stores the parameter and result values of
// this invocation.
func (m *MockUserStore) RandomizePasswordAndClearPasswordResetRateLimit(v0 context.Context, v1 int32) error {
	r0 := m.RandomizePasswordAndClearPasswordResetRateLimitFunc.nextHook()(v0, v1)
	m.RandomizePasswordAndClearPasswordResetRateLimitFunc.appendCall(UserStoreRandomizePasswordAndClearPasswordResetRateLimitFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// RandomizePasswordAndClearPasswordResetRateLimit method of the parent
// MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RandomizePasswordAndClearPasswordResetRateLimit method of the parent
// MockUserStore instance invokes the hook at the front of the queue and
// discards it. After the queue is empty, the default hook function is
// invoked for any future action.
func (f *UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc) appendCall(r0 UserStoreRandomizePasswordAndClearPasswordResetRateLimitFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UserStoreRandomizePasswordAndClearPasswordResetRateLimitFuncCall objects
// describing the invocations of this function.
func (f *UserStoreRandomizePasswordAndClearPasswordResetRateLimitFunc) History() []UserStoreRandomizePasswordAndClearPasswordResetRateLimitFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreRandomizePasswordAndClearPasswordResetRateLimitFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreRandomizePasswordAndClearPasswordResetRateLimitFuncCall is an
// object that describes an invocation of method
// RandomizePasswordAndClearPasswordResetRateLimit on an instance of
// MockUserStore.
type UserStoreRandomizePasswordAndClearPasswordResetRateLimitFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreRandomizePasswordAndClearPasswordResetRateLimitFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreRandomizePasswordAndClearPasswordResetRateLimitFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreRecoverUsersListFunc describes the behavior when the
// RecoverUsersList method of the parent MockUserStore instance is invoked.
type UserStoreRecoverUsersListFunc struct {
	defaultHook func(context.Context, []int32) ([]int32, error)
	hooks       []func(context.Context, []int32) ([]int32, error)
	history     []UserStoreRecoverUsersListFuncCall
	mutex       sync.Mutex
}

// RecoverUsersList delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserStore) RecoverUsersList(v0 context.Context, v1 []int32) ([]int32, error) {
	r0, r1 := m.RecoverUsersListFunc.nextHook()(v0, v1)
	m.RecoverUsersListFunc.appendCall(UserStoreRecoverUsersListFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RecoverUsersList
// method of the parent MockUserStore instance is invoked and the hook queue
// is empty.
func (f *UserStoreRecoverUsersListFunc) SetDefaultHook(hook func(context.Context, []int32) ([]int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RecoverUsersList method of the parent MockUserStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserStoreRecoverUsersListFunc) PushHook(hook func(context.Context, []int32) ([]int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreRecoverUsersListFunc) SetDefaultReturn(r0 []int32, r1 error) {
	f.SetDefaultHook(func(context.Context, []int32) ([]int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreRecoverUsersListFunc) PushReturn(r0 []int32, r1 error) {
	f.PushHook(func(context.Context, []int32) ([]int32, error) {
		return r0, r1
	})
}

func (f *UserStoreRecoverUsersListFunc) nextHook() func(context.Context, []int32) ([]int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreRecoverUsersListFunc) appendCall(r0 UserStoreRecoverUsersListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreRecoverUsersListFuncCall objects
// describing the invocations of this function.
func (f *UserStoreRecoverUsersListFunc) History() []UserStoreRecoverUsersListFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreRecoverUsersListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreRecoverUsersListFuncCall is an object that describes an
// invocation of method RecoverUsersList on an instance of MockUserStore.
type UserStoreRecoverUsersListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreRecoverUsersListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreRecoverUsersListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreRenewPasswordResetCodeFunc describes the behavior when the
// RenewPasswordResetCode method of the parent MockUserStore instance is
// invoked.
type UserStoreRenewPasswordResetCodeFunc struct {
	defaultHook func(context.Context, int32) (string, error)
	hooks       []func(context.Context, int32) (string, error)
	history     []UserStoreRenewPasswordResetCodeFuncCall
	mutex       sync.Mutex
}

// RenewPasswordResetCode delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUserStore) RenewPasswordResetCode(v0 context.Context, v1 int32) (string, error) {
	r0, r1 := m.RenewPasswordResetCodeFunc.nextHook()(v0, v1)
	m.RenewPasswordResetCodeFunc.appendCall(UserStoreRenewPasswordResetCodeFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// RenewPasswordResetCode method of the parent MockUserStore instance is
// invoked and the hook queue is empty.
func (f *UserStoreRenewPasswordResetCodeFunc) SetDefaultHook(hook func(context.Context, int32) (string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RenewPasswordResetCode method of the parent MockUserStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserStoreRenewPasswordResetCodeFunc) PushHook(hook func(context.Context, int32) (string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreRenewPasswordResetCodeFunc) SetDefaultReturn(r0 string, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreRenewPasswordResetCodeFunc) PushReturn(r0 string, r1 error) {
	f.PushHook(func(context.Context, int32) (string, error) {
		return r0, r1
	})
}

func (f *UserStoreRenewPasswordResetCodeFunc) nextHook() func(context.Context, int32) (string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreRenewPasswordResetCodeFunc) appendCall(r0 UserStoreRenewPasswordResetCodeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreRenewPasswordResetCodeFuncCall
// objects describing the invocations of this function.
func (f *UserStoreRenewPasswordResetCodeFunc) History() []UserStoreRenewPasswordResetCodeFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreRenewPasswordResetCodeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreRenewPasswordResetCodeFuncCall is an object that describes an
// invocation of method RenewPasswordResetCode on an instance of
// MockUserStore.
type UserStoreRenewPasswordResetCodeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreRenewPasswordResetCodeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreRenewPasswordResetCodeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreSetChatCompletionsQuotaFunc describes the behavior when the
// SetChatCompletionsQuota method of the parent MockUserStore instance is
// invoked.
type UserStoreSetChatCompletionsQuotaFunc struct {
	defaultHook func(context.Context, int32, *int) error
	hooks       []func(context.Context, int32, *int) error
	history     []UserStoreSetChatCompletionsQuotaFuncCall
	mutex       sync.Mutex
}

// SetChatCompletionsQuota delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUserStore) SetChatCompletionsQuota(v0 context.Context, v1 int32, v2 *int) error {
	r0 := m.SetChatCompletionsQuotaFunc.nextHook()(v0, v1, v2)
	m.SetChatCompletionsQuotaFunc.appendCall(UserStoreSetChatCompletionsQuotaFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// SetChatCompletionsQuota method of the parent MockUserStore instance is
// invoked and the hook queue is empty.
func (f *UserStoreSetChatCompletionsQuotaFunc) SetDefaultHook(hook func(context.Context, int32, *int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetChatCompletionsQuota method of the parent MockUserStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserStoreSetChatCompletionsQuotaFunc) PushHook(hook func(context.Context, int32, *int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreSetChatCompletionsQuotaFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, *int) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreSetChatCompletionsQuotaFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, *int) error {
		return r0
	})
}

func (f *UserStoreSetChatCompletionsQuotaFunc) nextHook() func(context.Context, int32, *int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreSetChatCompletionsQuotaFunc) appendCall(r0 UserStoreSetChatCompletionsQuotaFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreSetChatCompletionsQuotaFuncCall
// objects describing the invocations of this function.
func (f *UserStoreSetChatCompletionsQuotaFunc) History() []UserStoreSetChatCompletionsQuotaFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreSetChatCompletionsQuotaFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreSetChatCompletionsQuotaFuncCall is an object that describes an
// invocation of method SetChatCompletionsQuota on an instance of
// MockUserStore.
type UserStoreSetChatCompletionsQuotaFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreSetChatCompletionsQuotaFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreSetChatCompletionsQuotaFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreSetCodeCompletionsQuotaFunc describes the behavior when the
// SetCodeCompletionsQuota method of the parent MockUserStore instance is
// invoked.
type UserStoreSetCodeCompletionsQuotaFunc struct {
	defaultHook func(context.Context, int32, *int) error
	hooks       []func(context.Context, int32, *int) error
	history     []UserStoreSetCodeCompletionsQuotaFuncCall
	mutex       sync.Mutex
}

// SetCodeCompletionsQuota delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUserStore) SetCodeCompletionsQuota(v0 context.Context, v1 int32, v2 *int) error {
	r0 := m.SetCodeCompletionsQuotaFunc.nextHook()(v0, v1, v2)
	m.SetCodeCompletionsQuotaFunc.appendCall(UserStoreSetCodeCompletionsQuotaFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// SetCodeCompletionsQuota method of the parent MockUserStore instance is
// invoked and the hook queue is empty.
func (f *UserStoreSetCodeCompletionsQuotaFunc) SetDefaultHook(hook func(context.Context, int32, *int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetCodeCompletionsQuota method of the parent MockUserStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UserStoreSetCodeCompletionsQuotaFunc) PushHook(hook func(context.Context, int32, *int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreSetCodeCompletionsQuotaFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, *int) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreSetCodeCompletionsQuotaFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, *int) error {
		return r0
	})
}

func (f *UserStoreSetCodeCompletionsQuotaFunc) nextHook() func(context.Context, int32, *int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreSetCodeCompletionsQuotaFunc) appendCall(r0 UserStoreSetCodeCompletionsQuotaFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreSetCodeCompletionsQuotaFuncCall
// objects describing the invocations of this function.
func (f *UserStoreSetCodeCompletionsQuotaFunc) History() []UserStoreSetCodeCompletionsQuotaFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreSetCodeCompletionsQuotaFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreSetCodeCompletionsQuotaFuncCall is an object that describes an
// invocation of method SetCodeCompletionsQuota on an instance of
// MockUserStore.
type UserStoreSetCodeCompletionsQuotaFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreSetCodeCompletionsQuotaFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreSetCodeCompletionsQuotaFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreSetIsSiteAdminFunc describes the behavior when the
// SetIsSiteAdmin method of the parent MockUserStore instance is invoked.
type UserStoreSetIsSiteAdminFunc struct {
	defaultHook func(context.Context, int32, bool) error
	hooks       []func(context.Context, int32, bool) error
	history     []UserStoreSetIsSiteAdminFuncCall
	mutex       sync.Mutex
}

// SetIsSiteAdmin delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserStore) SetIsSiteAdmin(v0 context.Context, v1 int32, v2 bool) error {
	r0 := m.SetIsSiteAdminFunc.nextHook()(v0, v1, v2)
	m.SetIsSiteAdminFunc.appendCall(UserStoreSetIsSiteAdminFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetIsSiteAdmin
// method of the parent MockUserStore instance is invoked and the hook queue
// is empty.
func (f *UserStoreSetIsSiteAdminFunc) SetDefaultHook(hook func(context.Context, int32, bool) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetIsSiteAdmin method of the parent MockUserStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserStoreSetIsSiteAdminFunc) PushHook(hook func(context.Context, int32, bool) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreSetIsSiteAdminFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, bool) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreSetIsSiteAdminFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, bool) error {
		return r0
	})
}

func (f *UserStoreSetIsSiteAdminFunc) nextHook() func(context.Context, int32, bool) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreSetIsSiteAdminFunc) appendCall(r0 UserStoreSetIsSiteAdminFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreSetIsSiteAdminFuncCall objects
// describing the invocations of this function.
func (f *UserStoreSetIsSiteAdminFunc) History() []UserStoreSetIsSiteAdminFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreSetIsSiteAdminFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreSetIsSiteAdminFuncCall is an object that describes an invocation
// of method SetIsSiteAdmin on an instance of MockUserStore.
type UserStoreSetIsSiteAdminFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreSetIsSiteAdminFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreSetIsSiteAdminFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreSetPasswordFunc describes the behavior when the SetPassword
// method of the parent MockUserStore instance is invoked.
type UserStoreSetPasswordFunc struct {
	defaultHook func(context.Context, int32, string, string) (bool, error)
	hooks       []func(context.Context, int32, string, string) (bool, error)
	history     []UserStoreSetPasswordFuncCall
	mutex       sync.Mutex
}

// SetPassword delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUserStore) SetPassword(v0 context.Context, v1 int32, v2 string, v3 string) (bool, error) {
	r0, r1 := m.SetPasswordFunc.nextHook()(v0, v1, v2, v3)
	m.SetPasswordFunc.appendCall(UserStoreSetPasswordFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SetPassword method
// of the parent MockUserStore instance is invoked and the hook queue is
// empty.
func (f *UserStoreSetPasswordFunc) SetDefaultHook(hook func(context.Context, int32, string, string) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetPassword method of the parent MockUserStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreSetPasswordFunc) PushHook(hook func(context.Context, int32, string, string) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreSetPasswordFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, string, string) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreSetPasswordFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int32, string, string) (bool, error) {
		return r0, r1
	})
}

func (f *UserStoreSetPasswordFunc) nextHook() func(context.Context, int32, string, string) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreSetPasswordFunc) appendCall(r0 UserStoreSetPasswordFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreSetPasswordFuncCall objects
// describing the invocations of this function.
func (f *UserStoreSetPasswordFunc) History() []UserStoreSetPasswordFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreSetPasswordFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreSetPasswordFuncCall is an object that describes an invocation of
// method SetPassword on an instance of MockUserStore.
type UserStoreSetPasswordFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreSetPasswordFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreSetPasswordFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreTransactFunc describes the behavior when the Transact method of
// the parent MockUserStore instance is invoked.
type UserStoreTransactFunc struct {
	defaultHook func(context.Context) (UserStore, error)
	hooks       []func(context.Context) (UserStore, error)
	history     []UserStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) Transact(v0 context.Context) (UserStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(UserStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreTransactFunc) SetDefaultHook(hook func(context.Context) (UserStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockUserStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreTransactFunc) PushHook(hook func(context.Context) (UserStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreTransactFunc) SetDefaultReturn(r0 UserStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (UserStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreTransactFunc) PushReturn(r0 UserStore, r1 error) {
	f.PushHook(func(context.Context) (UserStore, error) {
		return r0, r1
	})
}

func (f *UserStoreTransactFunc) nextHook() func(context.Context) (UserStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreTransactFunc) appendCall(r0 UserStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *UserStoreTransactFunc) History() []UserStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreTransactFuncCall is an object that describes an invocation of
// method Transact on an instance of MockUserStore.
type UserStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 UserStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UserStoreUpdateFunc describes the behavior when the Update method of the
// parent MockUserStore instance is invoked.
type UserStoreUpdateFunc struct {
	defaultHook func(context.Context, int32, UserUpdate) error
	hooks       []func(context.Context, int32, UserUpdate) error
	history     []UserStoreUpdateFuncCall
	mutex       sync.Mutex
}

// Update delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) Update(v0 context.Context, v1 int32, v2 UserUpdate) error {
	r0 := m.UpdateFunc.nextHook()(v0, v1, v2)
	m.UpdateFunc.appendCall(UserStoreUpdateFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Update method of the
// parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreUpdateFunc) SetDefaultHook(hook func(context.Context, int32, UserUpdate) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Update method of the parent MockUserStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *UserStoreUpdateFunc) PushHook(hook func(context.Context, int32, UserUpdate) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreUpdateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, UserUpdate) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreUpdateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, UserUpdate) error {
		return r0
	})
}

func (f *UserStoreUpdateFunc) nextHook() func(context.Context, int32, UserUpdate) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreUpdateFunc) appendCall(r0 UserStoreUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreUpdateFuncCall objects describing
// the invocations of this function.
func (f *UserStoreUpdateFunc) History() []UserStoreUpdateFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreUpdateFuncCall is an object that describes an invocation of
// method Update on an instance of MockUserStore.
type UserStoreUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 UserUpdate
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreUpdatePasswordFunc describes the behavior when the
// UpdatePassword method of the parent MockUserStore instance is invoked.
type UserStoreUpdatePasswordFunc struct {
	defaultHook func(context.Context, int32, string, string) error
	hooks       []func(context.Context, int32, string, string) error
	history     []UserStoreUpdatePasswordFuncCall
	mutex       sync.Mutex
}

// UpdatePassword delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUserStore) UpdatePassword(v0 context.Context, v1 int32, v2 string, v3 string) error {
	r0 := m.UpdatePasswordFunc.nextHook()(v0, v1, v2, v3)
	m.UpdatePasswordFunc.appendCall(UserStoreUpdatePasswordFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UpdatePassword
// method of the parent MockUserStore instance is invoked and the hook queue
// is empty.
func (f *UserStoreUpdatePasswordFunc) SetDefaultHook(hook func(context.Context, int32, string, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdatePassword method of the parent MockUserStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UserStoreUpdatePasswordFunc) PushHook(hook func(context.Context, int32, string, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreUpdatePasswordFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, string, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreUpdatePasswordFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, string, string) error {
		return r0
	})
}

func (f *UserStoreUpdatePasswordFunc) nextHook() func(context.Context, int32, string, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreUpdatePasswordFunc) appendCall(r0 UserStoreUpdatePasswordFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreUpdatePasswordFuncCall objects
// describing the invocations of this function.
func (f *UserStoreUpdatePasswordFunc) History() []UserStoreUpdatePasswordFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreUpdatePasswordFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreUpdatePasswordFuncCall is an object that describes an invocation
// of method UpdatePassword on an instance of MockUserStore.
type UserStoreUpdatePasswordFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreUpdatePasswordFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreUpdatePasswordFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UserStoreWithFunc describes the behavior when the With method of the
// parent MockUserStore instance is invoked.
type UserStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) UserStore
	hooks       []func(basestore.ShareableStore) UserStore
	history     []UserStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockUserStore) With(v0 basestore.ShareableStore) UserStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(UserStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockUserStore instance is invoked and the hook queue is empty.
func (f *UserStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) UserStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockUserStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *UserStoreWithFunc) PushHook(hook func(basestore.ShareableStore) UserStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UserStoreWithFunc) SetDefaultReturn(r0 UserStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) UserStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UserStoreWithFunc) PushReturn(r0 UserStore) {
	f.PushHook(func(basestore.ShareableStore) UserStore {
		return r0
	})
}

func (f *UserStoreWithFunc) nextHook() func(basestore.ShareableStore) UserStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UserStoreWithFunc) appendCall(r0 UserStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UserStoreWithFuncCall objects describing
// the invocations of this function.
func (f *UserStoreWithFunc) History() []UserStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]UserStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UserStoreWithFuncCall is an object that describes an invocation of method
// With on an instance of MockUserStore.
type UserStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 UserStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UserStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UserStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockWebhookLogStore is a mock implementation of the WebhookLogStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockWebhookLogStore struct {
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *WebhookLogStoreCountFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *WebhookLogStoreCreateFunc
	// DeleteStaleFunc is an instance of a mock function object controlling
	// the behavior of the method DeleteStale.
	DeleteStaleFunc *WebhookLogStoreDeleteStaleFunc
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *WebhookLogStoreGetByIDFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *WebhookLogStoreHandleFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *WebhookLogStoreListFunc
}

// NewMockWebhookLogStore creates a new mock of the WebhookLogStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockWebhookLogStore() *MockWebhookLogStore {
	return &MockWebhookLogStore{
		CountFunc: &WebhookLogStoreCountFunc{
			defaultHook: func(context.Context, WebhookLogListOpts) (r0 int64, r1 error) {
				return
			},
		},
		CreateFunc: &WebhookLogStoreCreateFunc{
			defaultHook: func(context.Context, *types.WebhookLog) (r0 error) {
				return
			},
		},
		DeleteStaleFunc: &WebhookLogStoreDeleteStaleFunc{
			defaultHook: func(context.Context, time.Duration) (r0 error) {
				return
			},
		},
		GetByIDFunc: &WebhookLogStoreGetByIDFunc{
			defaultHook: func(context.Context, int64) (r0 *types.WebhookLog, r1 error) {
				return
			},
		},
		HandleFunc: &WebhookLogStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		ListFunc: &WebhookLogStoreListFunc{
			defaultHook: func(context.Context, WebhookLogListOpts) (r0 []*types.WebhookLog, r1 int64, r2 error) {
				return
			},
		},
	}
}

// NewStrictMockWebhookLogStore creates a new mock of the WebhookLogStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockWebhookLogStore() *MockWebhookLogStore {
	return &MockWebhookLogStore{
		CountFunc: &WebhookLogStoreCountFunc{
			defaultHook: func(context.Context, WebhookLogListOpts) (int64, error) {
				panic("unexpected invocation of MockWebhookLogStore.Count")
			},
		},
		CreateFunc: &WebhookLogStoreCreateFunc{
			defaultHook: func(context.Context, *types.WebhookLog) error {
				panic("unexpected invocation of MockWebhookLogStore.Create")
			},
		},
		DeleteStaleFunc: &WebhookLogStoreDeleteStaleFunc{
			defaultHook: func(context.Context, time.Duration) error {
				panic("unexpected invocation of MockWebhookLogStore.DeleteStale")
			},
		},
		GetByIDFunc: &WebhookLogStoreGetByIDFunc{
			defaultHook: func(context.Context, int64) (*types.WebhookLog, error) {
				panic("unexpected invocation of MockWebhookLogStore.GetByID")
			},
		},
		HandleFunc: &WebhookLogStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockWebhookLogStore.Handle")
			},
		},
		ListFunc: &WebhookLogStoreListFunc{
			defaultHook: func(context.Context, WebhookLogListOpts) ([]*types.WebhookLog, int64, error) {
				panic("unexpected invocation of MockWebhookLogStore.List")
			},
		},
	}
}

// NewMockWebhookLogStoreFrom creates a new mock of the MockWebhookLogStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockWebhookLogStoreFrom(i WebhookLogStore) *MockWebhookLogStore {
	return &MockWebhookLogStore{
		CountFunc: &WebhookLogStoreCountFunc{
			defaultHook: i.Count,
		},
		CreateFunc: &WebhookLogStoreCreateFunc{
			defaultHook: i.Create,
		},
		DeleteStaleFunc: &WebhookLogStoreDeleteStaleFunc{
			defaultHook: i.DeleteStale,
		},
		GetByIDFunc: &WebhookLogStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		HandleFunc: &WebhookLogStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListFunc: &WebhookLogStoreListFunc{
			defaultHook: i.List,
		},
	}
}

// WebhookLogStoreCountFunc describes the behavior when the Count method of
// the parent MockWebhookLogStore instance is invoked.
type WebhookLogStoreCountFunc struct {
	defaultHook func(context.Context, WebhookLogListOpts) (int64, error)
	hooks       []func(context.Context, WebhookLogListOpts) (int64, error)
	history     []WebhookLogStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWebhookLogStore) Count(v0 context.Context, v1 WebhookLogListOpts) (int64, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(WebhookLogStoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockWebhookLogStore instance is invoked and the hook queue is
// empty.
func (f *WebhookLogStoreCountFunc) SetDefaultHook(hook func(context.Context, WebhookLogListOpts) (int64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockWebhookLogStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *WebhookLogStoreCountFunc) PushHook(hook func(context.Context, WebhookLogListOpts) (int64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WebhookLogStoreCountFunc) SetDefaultReturn(r0 int64, r1 error) {
	f.SetDefaultHook(func(context.Context, WebhookLogListOpts) (int64, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WebhookLogStoreCountFunc) PushReturn(r0 int64, r1 error) {
	f.PushHook(func(context.Context, WebhookLogListOpts) (int64, error) {
		return r0, r1
	})
}

func (f *WebhookLogStoreCountFunc) nextHook() func(context.Context, WebhookLogListOpts) (int64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WebhookLogStoreCountFunc) appendCall(r0 WebhookLogStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WebhookLogStoreCountFuncCall objects
// describing the invocations of this function.
func (f *WebhookLogStoreCountFunc) History() []WebhookLogStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]WebhookLogStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WebhookLogStoreCountFuncCall is an object that describes an invocation of
// method Count on an instance of MockWebhookLogStore.
type WebhookLogStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 WebhookLogListOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WebhookLogStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WebhookLogStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// WebhookLogStoreCreateFunc describes the behavior when the Create method
// of the parent MockWebhookLogStore instance is invoked.
type WebhookLogStoreCreateFunc struct {
	defaultHook func(context.Context, *types.WebhookLog) error
	hooks       []func(context.Context, *types.WebhookLog) error
	history     []WebhookLogStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWebhookLogStore) Create(v0 context.Context, v1 *types.WebhookLog) error {
	r0 := m.CreateFunc.nextHook()(v0, v1)
	m.CreateFunc.appendCall(WebhookLogStoreCreateFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockWebhookLogStore instance is invoked and the hook queue is
// empty.
func (f *WebhookLogStoreCreateFunc) SetDefaultHook(hook func(context.Context, *types.WebhookLog) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockWebhookLogStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *WebhookLogStoreCreateFunc) PushHook(hook func(context.Context, *types.WebhookLog) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WebhookLogStoreCreateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *types.WebhookLog) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WebhookLogStoreCreateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *types.WebhookLog) error {
		return r0
	})
}

func (f *WebhookLogStoreCreateFunc) nextHook() func(context.Context, *types.WebhookLog) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WebhookLogStoreCreateFunc) appendCall(r0 WebhookLogStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WebhookLogStoreCreateFuncCall objects
// describing the invocations of this function.
func (f *WebhookLogStoreCreateFunc) History() []WebhookLogStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]WebhookLogStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WebhookLogStoreCreateFuncCall is an object that describes an invocation
// of method Create on an instance of MockWebhookLogStore.
type WebhookLogStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.WebhookLog
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WebhookLogStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WebhookLogStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// WebhookLogStoreDeleteStaleFunc describes the behavior when the
// DeleteStale method of the parent MockWebhookLogStore instance is invoked.
type WebhookLogStoreDeleteStaleFunc struct {
	defaultHook func(context.Context, time.Duration) error
	hooks       []func(context.Context, time.Duration) error
	history     []WebhookLogStoreDeleteStaleFuncCall
	mutex       sync.Mutex
}

// DeleteStale delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockWebhookLogStore) DeleteStale(v0 context.Context, v1 time.Duration) error {
	r0 := m.DeleteStaleFunc.nextHook()(v0, v1)
	m.DeleteStaleFunc.appendCall(WebhookLogStoreDeleteStaleFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteStale method
// of the parent MockWebhookLogStore instance is invoked and the hook queue
// is empty.
func (f *WebhookLogStoreDeleteStaleFunc) SetDefaultHook(hook func(context.Context, time.Duration) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteStale method of the parent MockWebhookLogStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *WebhookLogStoreDeleteStaleFunc) PushHook(hook func(context.Context, time.Duration) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WebhookLogStoreDeleteStaleFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, time.Duration) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WebhookLogStoreDeleteStaleFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, time.Duration) error {
		return r0
	})
}

func (f *WebhookLogStoreDeleteStaleFunc) nextHook() func(context.Context, time.Duration) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WebhookLogStoreDeleteStaleFunc) appendCall(r0 WebhookLogStoreDeleteStaleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WebhookLogStoreDeleteStaleFuncCall objects
// describing the invocations of this function.
func (f *WebhookLogStoreDeleteStaleFunc) History() []WebhookLogStoreDeleteStaleFuncCall {
	f.mutex.Lock()
	history := make([]WebhookLogStoreDeleteStaleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WebhookLogStoreDeleteStaleFuncCall is an object that describes an
// invocation of method DeleteStale on an instance of MockWebhookLogStore.
type WebhookLogStoreDeleteStaleFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Duration
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WebhookLogStoreDeleteStaleFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WebhookLogStoreDeleteStaleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// WebhookLogStoreGetByIDFunc describes the behavior when the GetByID method
// of the parent MockWebhookLogStore instance is invoked.
type WebhookLogStoreGetByIDFunc struct {
	defaultHook func(context.Context, int64) (*types.WebhookLog, error)
	hooks       []func(context.Context, int64) (*types.WebhookLog, error)
	history     []WebhookLogStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWebhookLogStore) GetByID(v0 context.Context, v1 int64) (*types.WebhookLog, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(WebhookLogStoreGetByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockWebhookLogStore instance is invoked and the hook queue is
// empty.
func (f *WebhookLogStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int64) (*types.WebhookLog, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockWebhookLogStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *WebhookLogStoreGetByIDFunc) PushHook(hook func(context.Context, int64) (*types.WebhookLog, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WebhookLogStoreGetByIDFunc) SetDefaultReturn(r0 *types.WebhookLog, r1 error) {
	f.SetDefaultHook(func(context.Context, int64) (*types.WebhookLog, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WebhookLogStoreGetByIDFunc) PushReturn(r0 *types.WebhookLog, r1 error) {
	f.PushHook(func(context.Context, int64) (*types.WebhookLog, error) {
		return r0, r1
	})
}

func (f *WebhookLogStoreGetByIDFunc) nextHook() func(context.Context, int64) (*types.WebhookLog, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WebhookLogStoreGetByIDFunc) appendCall(r0 WebhookLogStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WebhookLogStoreGetByIDFuncCall objects
// describing the invocations of this function.
func (f *WebhookLogStoreGetByIDFunc) History() []WebhookLogStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]WebhookLogStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WebhookLogStoreGetByIDFuncCall is an object that describes an invocation
// of method GetByID on an instance of MockWebhookLogStore.
type WebhookLogStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.WebhookLog
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WebhookLogStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WebhookLogStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// WebhookLogStoreHandleFunc describes the behavior when the Handle method
// of the parent MockWebhookLogStore instance is invoked.
type WebhookLogStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []WebhookLogStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWebhookLogStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(WebhookLogStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockWebhookLogStore instance is invoked and the hook queue is
// empty.
func (f *WebhookLogStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockWebhookLogStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *WebhookLogStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WebhookLogStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WebhookLogStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *WebhookLogStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WebhookLogStoreHandleFunc) appendCall(r0 WebhookLogStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WebhookLogStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *WebhookLogStoreHandleFunc) History() []WebhookLogStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]WebhookLogStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WebhookLogStoreHandleFuncCall is an object that describes an invocation
// of method Handle on an instance of MockWebhookLogStore.
type WebhookLogStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WebhookLogStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WebhookLogStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// WebhookLogStoreListFunc describes the behavior when the List method of
// the parent MockWebhookLogStore instance is invoked.
type WebhookLogStoreListFunc struct {
	defaultHook func(context.Context, WebhookLogListOpts) ([]*types.WebhookLog, int64, error)
	hooks       []func(context.Context, WebhookLogListOpts) ([]*types.WebhookLog, int64, error)
	history     []WebhookLogStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWebhookLogStore) List(v0 context.Context, v1 WebhookLogListOpts) ([]*types.WebhookLog, int64, error) {
	r0, r1, r2 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(WebhookLogStoreListFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockWebhookLogStore instance is invoked and the hook queue is
// empty.
func (f *WebhookLogStoreListFunc) SetDefaultHook(hook func(context.Context, WebhookLogListOpts) ([]*types.WebhookLog, int64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockWebhookLogStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *WebhookLogStoreListFunc) PushHook(hook func(context.Context, WebhookLogListOpts) ([]*types.WebhookLog, int64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WebhookLogStoreListFunc) SetDefaultReturn(r0 []*types.WebhookLog, r1 int64, r2 error) {
	f.SetDefaultHook(func(context.Context, WebhookLogListOpts) ([]*types.WebhookLog, int64, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WebhookLogStoreListFunc) PushReturn(r0 []*types.WebhookLog, r1 int64, r2 error) {
	f.PushHook(func(context.Context, WebhookLogListOpts) ([]*types.WebhookLog, int64, error) {
		return r0, r1, r2
	})
}

func (f *WebhookLogStoreListFunc) nextHook() func(context.Context, WebhookLogListOpts) ([]*types.WebhookLog, int64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WebhookLogStoreListFunc) appendCall(r0 WebhookLogStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WebhookLogStoreListFuncCall objects
// describing the invocations of this function.
func (f *WebhookLogStoreListFunc) History() []WebhookLogStoreListFuncCall {
	f.mutex.Lock()
	history := make([]WebhookLogStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WebhookLogStoreListFuncCall is an object that describes an invocation of
// method List on an instance of MockWebhookLogStore.
type WebhookLogStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 WebhookLogListOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.WebhookLog
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int64
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WebhookLogStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WebhookLogStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// MockWebhookStore is a mock implementation of the WebhookStore interface
// (from the package github.com/sourcegraph/sourcegraph/internal/database)
// used for unit testing.
type MockWebhookStore struct {
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *WebhookStoreCountFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *WebhookStoreCreateFunc
	// DeleteFunc is an instance of a mock function object controlling the
	// behavior of the method Delete.
	DeleteFunc *WebhookStoreDeleteFunc
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *WebhookStoreGetByIDFunc
	// GetByUUIDFunc is an instance of a mock function object controlling
	// the behavior of the method GetByUUID.
	GetByUUIDFunc *WebhookStoreGetByUUIDFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *WebhookStoreHandleFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *WebhookStoreListFunc
	// UpdateFunc is an instance of a mock function object controlling the
	// behavior of the method Update.
	UpdateFunc *WebhookStoreUpdateFunc
}

// NewMockWebhookStore creates a new mock of the WebhookStore interface. All
// methods return zero values for all results, unless overwritten.
func NewMockWebhookStore() *MockWebhookStore {
	return &MockWebhookStore{
		CountFunc: &WebhookStoreCountFunc{
			defaultHook: func(context.Context, WebhookListOptions) (r0 int, r1 error) {
				return
			},
		},
		CreateFunc: &WebhookStoreCreateFunc{
			defaultHook: func(context.Context, string, string, string, int32, *encryption.Encryptable) (r0 *types.Webhook, r1 error) {
				return
			},
		},
		DeleteFunc: &WebhookStoreDeleteFunc{
			defaultHook: func(context.Context, DeleteWebhookOpts) (r0 error) {
				return
			},
		},
		GetByIDFunc: &WebhookStoreGetByIDFunc{
			defaultHook: func(context.Context, int32) (r0 *types.Webhook, r1 error) {
				return
			},
		},
		GetByUUIDFunc: &WebhookStoreGetByUUIDFunc{
			defaultHook: func(context.Context, uuid.UUID) (r0 *types.Webhook, r1 error) {
				return
			},
		},
		HandleFunc: &WebhookStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		ListFunc: &WebhookStoreListFunc{
			defaultHook: func(context.Context, WebhookListOptions) (r0 []*types.Webhook, r1 error) {
				return
			},
		},
		UpdateFunc: &WebhookStoreUpdateFunc{
			defaultHook: func(context.Context, *types.Webhook) (r0 *types.Webhook, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockWebhookStore creates a new mock of the WebhookStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockWebhookStore() *MockWebhookStore {
	return &MockWebhookStore{
		CountFunc: &WebhookStoreCountFunc{
			defaultHook: func(context.Context, WebhookListOptions) (int, error) {
				panic("unexpected invocation of MockWebhookStore.Count")
			},
		},
		CreateFunc: &WebhookStoreCreateFunc{
			defaultHook: func(context.Context, string, string, string, int32, *encryption.Encryptable) (*types.Webhook, error) {
				panic("unexpected invocation of MockWebhookStore.Create")
			},
		},
		DeleteFunc: &WebhookStoreDeleteFunc{
			defaultHook: func(context.Context, DeleteWebhookOpts) error {
				panic("unexpected invocation of MockWebhookStore.Delete")
			},
		},
		GetByIDFunc: &WebhookStoreGetByIDFunc{
			defaultHook: func(context.Context, int32) (*types.Webhook, error) {
				panic("unexpected invocation of MockWebhookStore.GetByID")
			},
		},
		GetByUUIDFunc: &WebhookStoreGetByUUIDFunc{
			defaultHook: func(context.Context, uuid.UUID) (*types.Webhook, error) {
				panic("unexpected invocation of MockWebhookStore.GetByUUID")
			},
		},
		HandleFunc: &WebhookStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockWebhookStore.Handle")
			},
		},
		ListFunc: &WebhookStoreListFunc{
			defaultHook: func(context.Context, WebhookListOptions) ([]*types.Webhook, error) {
				panic("unexpected invocation of MockWebhookStore.List")
			},
		},
		UpdateFunc: &WebhookStoreUpdateFunc{
			defaultHook: func(context.Context, *types.Webhook) (*types.Webhook, error) {
				panic("unexpected invocation of MockWebhookStore.Update")
			},
		},
	}
}

// NewMockWebhookStoreFrom creates a new mock of the MockWebhookStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockWebhookStoreFrom(i WebhookStore) *MockWebhookStore {
	return &MockWebhookStore{
		CountFunc: &WebhookStoreCountFunc{
			defaultHook: i.Count,
		},
		CreateFunc: &WebhookStoreCreateFunc{
			defaultHook: i.Create,
		},
		DeleteFunc: &WebhookStoreDeleteFunc{
			defaultHook: i.Delete,
		},
		GetByIDFunc: &WebhookStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		GetByUUIDFunc: &WebhookStoreGetByUUIDFunc{
			defaultHook: i.GetByUUID,
		},
		HandleFunc: &WebhookStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListFunc: &WebhookStoreListFunc{
			defaultHook: i.List,
		},
		UpdateFunc: &WebhookStoreUpdateFunc{
			defaultHook: i.Update,
		},
	}
}

// WebhookStoreCountFunc describes the behavior when the Count method of the
// parent MockWebhookStore instance is invoked.
type WebhookStoreCountFunc struct {
	defaultHook func(context.Context, WebhookListOptions) (int, error)
	hooks       []func(context.Context, WebhookListOptions) (int, error)
	history     []WebhookStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWebhookStore) Count(v0 context.Context, v1 WebhookListOptions) (int, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(WebhookStoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockWebhookStore instance is invoked and the hook queue is empty.
func (f *WebhookStoreCountFunc) SetDefaultHook(hook func(context.Context, WebhookListOptions) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockWebhookStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *WebhookStoreCountFunc) PushHook(hook func(context.Context, WebhookListOptions) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WebhookStoreCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, WebhookListOptions) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WebhookStoreCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, WebhookListOptions) (int, error) {
		return r0, r1
	})
}

func (f *WebhookStoreCountFunc) nextHook() func(context.Context, WebhookListOptions) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WebhookStoreCountFunc) appendCall(r0 WebhookStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WebhookStoreCountFuncCall objects
// describing the invocations of this function.
func (f *WebhookStoreCountFunc) History() []WebhookStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]WebhookStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WebhookStoreCountFuncCall is an object that describes an invocation of
// method Count on an instance of MockWebhookStore.
type WebhookStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 WebhookListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WebhookStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WebhookStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// WebhookStoreCreateFunc describes the behavior when the Create method of
// the parent MockWebhookStore instance is invoked.
type WebhookStoreCreateFunc struct {
	defaultHook func(context.Context, string, string, string, int32, *encryption.Encryptable) (*types.Webhook, error)
	hooks       []func(context.Context, string, string, string, int32, *encryption.Encryptable) (*types.Webhook, error)
	history     []WebhookStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWebhookStore) Create(v0 context.Context, v1 string, v2 string, v3 string, v4 int32, v5 *encryption.Encryptable) (*types.Webhook, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1, v2, v3, v4, v5)
	m.CreateFunc.appendCall(WebhookStoreCreateFuncCall{v0, v1, v2, v3, v4, v5, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockWebhookStore instance is invoked and the hook queue is empty.
func (f *WebhookStoreCreateFunc) SetDefaultHook(hook func(context.Context, string, string, string, int32, *encryption.Encryptable) (*types.Webhook, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockWebhookStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *WebhookStoreCreateFunc) PushHook(hook func(context.Context, string, string, string, int32, *encryption.Encryptable) (*types.Webhook, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WebhookStoreCreateFunc) SetDefaultReturn(r0 *types.Webhook, r1 error) {
	f.SetDefaultHook(func(context.Context, string, string, string, int32, *encryption.Encryptable) (*types.Webhook, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WebhookStoreCreateFunc) PushReturn(r0 *types.Webhook, r1 error) {
	f.PushHook(func(context.Context, string, string, string, int32, *encryption.Encryptable) (*types.Webhook, error) {
		return r0, r1
	})
}

func (f *WebhookStoreCreateFunc) nextHook() func(context.Context, string, string, string, int32, *encryption.Encryptable) (*types.Webhook, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WebhookStoreCreateFunc) appendCall(r0 WebhookStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WebhookStoreCreateFuncCall objects
// describing the invocations of this function.
func (f *WebhookStoreCreateFunc) History() []WebhookStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]WebhookStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WebhookStoreCreateFuncCall is an object that describes an invocation of
// method Create on an instance of MockWebhookStore.
type WebhookStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int32
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 *encryption.Encryptable
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Webhook
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WebhookStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WebhookStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// WebhookStoreDeleteFunc describes the behavior when the Delete method of
// the parent MockWebhookStore instance is invoked.
type WebhookStoreDeleteFunc struct {
	defaultHook func(context.Context, DeleteWebhookOpts) error
	hooks       []func(context.Context, DeleteWebhookOpts) error
	history     []WebhookStoreDeleteFuncCall
	mutex       sync.Mutex
}

// Delete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWebhookStore) Delete(v0 context.Context, v1 DeleteWebhookOpts) error {
	r0 := m.DeleteFunc.nextHook()(v0, v1)
	m.DeleteFunc.appendCall(WebhookStoreDeleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Delete method of the
// parent MockWebhookStore instance is invoked and the hook queue is empty.
func (f *WebhookStoreDeleteFunc) SetDefaultHook(hook func(context.Context, DeleteWebhookOpts) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Delete method of the parent MockWebhookStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *WebhookStoreDeleteFunc) PushHook(hook func(context.Context, DeleteWebhookOpts) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WebhookStoreDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, DeleteWebhookOpts) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WebhookStoreDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, DeleteWebhookOpts) error {
		return r0
	})
}

func (f *WebhookStoreDeleteFunc) nextHook() func(context.Context, DeleteWebhookOpts) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WebhookStoreDeleteFunc) appendCall(r0 WebhookStoreDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WebhookStoreDeleteFuncCall objects
// describing the invocations of this function.
func (f *WebhookStoreDeleteFunc) History() []WebhookStoreDeleteFuncCall {
	f.mutex.Lock()
	history := make([]WebhookStoreDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WebhookStoreDeleteFuncCall is an object that describes an invocation of
// method Delete on an instance of MockWebhookStore.
type WebhookStoreDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 DeleteWebhookOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WebhookStoreDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WebhookStoreDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// WebhookStoreGetByIDFunc describes the behavior when the GetByID method of
// the parent MockWebhookStore instance is invoked.
type WebhookStoreGetByIDFunc struct {
	defaultHook func(context.Context, int32) (*types.Webhook, error)
	hooks       []func(context.Context, int32) (*types.Webhook, error)
	history     []WebhookStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWebhookStore) GetByID(v0 context.Context, v1 int32) (*types.Webhook, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(WebhookStoreGetByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockWebhookStore instance is invoked and the hook queue is
// empty.
func (f *WebhookStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int32) (*types.Webhook, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockWebhookStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *WebhookStoreGetByIDFunc) PushHook(hook func(context.Context, int32) (*types.Webhook, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WebhookStoreGetByIDFunc) SetDefaultReturn(r0 *types.Webhook, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (*types.Webhook, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WebhookStoreGetByIDFunc) PushReturn(r0 *types.Webhook, r1 error) {
	f.PushHook(func(context.Context, int32) (*types.Webhook, error) {
		return r0, r1
	})
}

func (f *WebhookStoreGetByIDFunc) nextHook() func(context.Context, int32) (*types.Webhook, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WebhookStoreGetByIDFunc) appendCall(r0 WebhookStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WebhookStoreGetByIDFuncCall objects
// describing the invocations of this function.
func (f *WebhookStoreGetByIDFunc) History() []WebhookStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]WebhookStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WebhookStoreGetByIDFuncCall is an object that describes an invocation of
// method GetByID on an instance of MockWebhookStore.
type WebhookStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Webhook
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WebhookStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WebhookStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// WebhookStoreGetByUUIDFunc describes the behavior when the GetByUUID
// method of the parent MockWebhookStore instance is invoked.
type WebhookStoreGetByUUIDFunc struct {
	defaultHook func(context.Context, uuid.UUID) (*types.Webhook, error)
	hooks       []func(context.Context, uuid.UUID) (*types.Webhook, error)
	history     []WebhookStoreGetByUUIDFuncCall
	mutex       sync.Mutex
}

// GetByUUID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWebhookStore) GetByUUID(v0 context.Context, v1 uuid.UUID) (*types.Webhook, error) {
	r0, r1 := m.GetByUUIDFunc.nextHook()(v0, v1)
	m.GetByUUIDFunc.appendCall(WebhookStoreGetByUUIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByUUID method of
// the parent MockWebhookStore instance is invoked and the hook queue is
// empty.
func (f *WebhookStoreGetByUUIDFunc) SetDefaultHook(hook func(context.Context, uuid.UUID) (*types.Webhook, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByUUID method of the parent MockWebhookStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *WebhookStoreGetByUUIDFunc) PushHook(hook func(context.Context, uuid.UUID) (*types.Webhook, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WebhookStoreGetByUUIDFunc) SetDefaultReturn(r0 *types.Webhook, r1 error) {
	f.SetDefaultHook(func(context.Context, uuid.UUID) (*types.Webhook, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WebhookStoreGetByUUIDFunc) PushReturn(r0 *types.Webhook, r1 error) {
	f.PushHook(func(context.Context, uuid.UUID) (*types.Webhook, error) {
		return r0, r1
	})
}

func (f *WebhookStoreGetByUUIDFunc) nextHook() func(context.Context, uuid.UUID) (*types.Webhook, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WebhookStoreGetByUUIDFunc) appendCall(r0 WebhookStoreGetByUUIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WebhookStoreGetByUUIDFuncCall objects
// describing the invocations of this function.
func (f *WebhookStoreGetByUUIDFunc) History() []WebhookStoreGetByUUIDFuncCall {
	f.mutex.Lock()
	history := make([]WebhookStoreGetByUUIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WebhookStoreGetByUUIDFuncCall is an object that describes an invocation
// of method GetByUUID on an instance of MockWebhookStore.
type WebhookStoreGetByUUIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 uuid.UUID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Webhook
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WebhookStoreGetByUUIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WebhookStoreGetByUUIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// WebhookStoreHandleFunc describes the behavior when the Handle method of
// the parent MockWebhookStore instance is invoked.
type WebhookStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []WebhookStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWebhookStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(WebhookStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockWebhookStore instance is invoked and the hook queue is empty.
func (f *WebhookStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockWebhookStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *WebhookStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WebhookStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WebhookStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *WebhookStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WebhookStoreHandleFunc) appendCall(r0 WebhookStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WebhookStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *WebhookStoreHandleFunc) History() []WebhookStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]WebhookStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WebhookStoreHandleFuncCall is an object that describes an invocation of
// method Handle on an instance of MockWebhookStore.
type WebhookStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WebhookStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WebhookStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// WebhookStoreListFunc describes the behavior when the List method of the
// parent MockWebhookStore instance is invoked.
type WebhookStoreListFunc struct {
	defaultHook func(context.Context, WebhookListOptions) ([]*types.Webhook, error)
	hooks       []func(context.Context, WebhookListOptions) ([]*types.Webhook, error)
	history     []WebhookStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWebhookStore) List(v0 context.Context, v1 WebhookListOptions) ([]*types.Webhook, error) {
	r0, r1 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(WebhookStoreListFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockWebhookStore instance is invoked and the hook queue is empty.
func (f *WebhookStoreListFunc) SetDefaultHook(hook func(context.Context, WebhookListOptions) ([]*types.Webhook, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockWebhookStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *WebhookStoreListFunc) PushHook(hook func(context.Context, WebhookListOptions) ([]*types.Webhook, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WebhookStoreListFunc) SetDefaultReturn(r0 []*types.Webhook, r1 error) {
	f.SetDefaultHook(func(context.Context, WebhookListOptions) ([]*types.Webhook, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WebhookStoreListFunc) PushReturn(r0 []*types.Webhook, r1 error) {
	f.PushHook(func(context.Context, WebhookListOptions) ([]*types.Webhook, error) {
		return r0, r1
	})
}

func (f *WebhookStoreListFunc) nextHook() func(context.Context, WebhookListOptions) ([]*types.Webhook, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WebhookStoreListFunc) appendCall(r0 WebhookStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WebhookStoreListFuncCall objects describing
// the invocations of this function.
func (f *WebhookStoreListFunc) History() []WebhookStoreListFuncCall {
	f.mutex.Lock()
	history := make([]WebhookStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WebhookStoreListFuncCall is an object that describes an invocation of
// method List on an instance of MockWebhookStore.
type WebhookStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 WebhookListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.Webhook
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WebhookStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WebhookStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// WebhookStoreUpdateFunc describes the behavior when the Update method of
// the parent MockWebhookStore instance is invoked.
type WebhookStoreUpdateFunc struct {
	defaultHook func(context.Context, *types.Webhook) (*types.Webhook, error)
	hooks       []func(context.Context, *types.Webhook) (*types.Webhook, error)
	history     []WebhookStoreUpdateFuncCall
	mutex       sync.Mutex
}

// Update delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWebhookStore) Update(v0 context.Context, v1 *types.Webhook) (*types.Webhook, error) {
	r0, r1 := m.UpdateFunc.nextHook()(v0, v1)
	m.UpdateFunc.appendCall(WebhookStoreUpdateFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Update method of the
// parent MockWebhookStore instance is invoked and the hook queue is empty.
func (f *WebhookStoreUpdateFunc) SetDefaultHook(hook func(context.Context, *types.Webhook) (*types.Webhook, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Update method of the parent MockWebhookStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *WebhookStoreUpdateFunc) PushHook(hook func(context.Context, *types.Webhook) (*types.Webhook, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WebhookStoreUpdateFunc) SetDefaultReturn(r0 *types.Webhook, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.Webhook) (*types.Webhook, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WebhookStoreUpdateFunc) PushReturn(r0 *types.Webhook, r1 error) {
	f.PushHook(func(context.Context, *types.Webhook) (*types.Webhook, error) {
		return r0, r1
	})
}

func (f *WebhookStoreUpdateFunc) nextHook() func(context.Context, *types.Webhook) (*types.Webhook, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WebhookStoreUpdateFunc) appendCall(r0 WebhookStoreUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WebhookStoreUpdateFuncCall objects
// describing the invocations of this function.
func (f *WebhookStoreUpdateFunc) History() []WebhookStoreUpdateFuncCall {
	f.mutex.Lock()
	history := make([]WebhookStoreUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WebhookStoreUpdateFuncCall is an object that describes an invocation of
// method Update on an instance of MockWebhookStore.
type WebhookStoreUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.Webhook
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Webhook
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WebhookStoreUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WebhookStoreUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockZoektReposStore is a mock implementation of the ZoektReposStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/database) used for unit
// testing.
type MockZoektReposStore struct {
	// GetStatisticsFunc is an instance of a mock function object
	// controlling the behavior of the method GetStatistics.
	GetStatisticsFunc *ZoektReposStoreGetStatisticsFunc
	// GetZoektRepoFunc is an instance of a mock function object controlling
	// the behavior of the method GetZoektRepo.
	GetZoektRepoFunc *ZoektReposStoreGetZoektRepoFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *ZoektReposStoreHandleFunc
	// UpdateIndexStatusesFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateIndexStatuses.
	UpdateIndexStatusesFunc *ZoektReposStoreUpdateIndexStatusesFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *ZoektReposStoreWithFunc
}

// NewMockZoektReposStore creates a new mock of the ZoektReposStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockZoektReposStore() *MockZoektReposStore {
	return &MockZoektReposStore{
		GetStatisticsFunc: &ZoektReposStoreGetStatisticsFunc{
			defaultHook: func(context.Context) (r0 ZoektRepoStatistics, r1 error) {
				return
			},
		},
		GetZoektRepoFunc: &ZoektReposStoreGetZoektRepoFunc{
			defaultHook: func(context.Context, api.RepoID) (r0 *ZoektRepo, r1 error) {
				return
			},
		},
		HandleFunc: &ZoektReposStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		UpdateIndexStatusesFunc: &ZoektReposStoreUpdateIndexStatusesFunc{
			defaultHook: func(context.Context, map[uint32]*zoekt.MinimalRepoListEntry) (r0 error) {
				return
			},
		},
		WithFunc: &ZoektReposStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 ZoektReposStore) {
				return
			},
		},
	}
}

// NewStrictMockZoektReposStore creates a new mock of the ZoektReposStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockZoektReposStore() *MockZoektReposStore {
	return &MockZoektReposStore{
		GetStatisticsFunc: &ZoektReposStoreGetStatisticsFunc{
			defaultHook: func(context.Context) (ZoektRepoStatistics, error) {
				panic("unexpected invocation of MockZoektReposStore.GetStatistics")
			},
		},
		GetZoektRepoFunc: &ZoektReposStoreGetZoektRepoFunc{
			defaultHook: func(context.Context, api.RepoID) (*ZoektRepo, error) {
				panic("unexpected invocation of MockZoektReposStore.GetZoektRepo")
			},
		},
		HandleFunc: &ZoektReposStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockZoektReposStore.Handle")
			},
		},
		UpdateIndexStatusesFunc: &ZoektReposStoreUpdateIndexStatusesFunc{
			defaultHook: func(context.Context, map[uint32]*zoekt.MinimalRepoListEntry) error {
				panic("unexpected invocation of MockZoektReposStore.UpdateIndexStatuses")
			},
		},
		WithFunc: &ZoektReposStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) ZoektReposStore {
				panic("unexpected invocation of MockZoektReposStore.With")
			},
		},
	}
}

// NewMockZoektReposStoreFrom creates a new mock of the MockZoektReposStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockZoektReposStoreFrom(i ZoektReposStore) *MockZoektReposStore {
	return &MockZoektReposStore{
		GetStatisticsFunc: &ZoektReposStoreGetStatisticsFunc{
			defaultHook: i.GetStatistics,
		},
		GetZoektRepoFunc: &ZoektReposStoreGetZoektRepoFunc{
			defaultHook: i.GetZoektRepo,
		},
		HandleFunc: &ZoektReposStoreHandleFunc{
			defaultHook: i.Handle,
		},
		UpdateIndexStatusesFunc: &ZoektReposStoreUpdateIndexStatusesFunc{
			defaultHook: i.UpdateIndexStatuses,
		},
		WithFunc: &ZoektReposStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// ZoektReposStoreGetStatisticsFunc describes the behavior when the
// GetStatistics method of the parent MockZoektReposStore instance is
// invoked.
type ZoektReposStoreGetStatisticsFunc struct {
	defaultHook func(context.Context) (ZoektRepoStatistics, error)
	hooks       []func(context.Context) (ZoektRepoStatistics, error)
	history     []ZoektReposStoreGetStatisticsFuncCall
	mutex       sync.Mutex
}

// GetStatistics delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockZoektReposStore) GetStatistics(v0 context.Context) (ZoektRepoStatistics, error) {
	r0, r1 := m.GetStatisticsFunc.nextHook()(v0)
	m.GetStatisticsFunc.appendCall(ZoektReposStoreGetStatisticsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetStatistics method
// of the parent MockZoektReposStore instance is invoked and the hook queue
// is empty.
func (f *ZoektReposStoreGetStatisticsFunc) SetDefaultHook(hook func(context.Context) (ZoektRepoStatistics, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetStatistics method of the parent MockZoektReposStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ZoektReposStoreGetStatisticsFunc) PushHook(hook func(context.Context) (ZoektRepoStatistics, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ZoektReposStoreGetStatisticsFunc) SetDefaultReturn(r0 ZoektRepoStatistics, r1 error) {
	f.SetDefaultHook(func(context.Context) (ZoektRepoStatistics, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ZoektReposStoreGetStatisticsFunc) PushReturn(r0 ZoektRepoStatistics, r1 error) {
	f.PushHook(func(context.Context) (ZoektRepoStatistics, error) {
		return r0, r1
	})
}

func (f *ZoektReposStoreGetStatisticsFunc) nextHook() func(context.Context) (ZoektRepoStatistics, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ZoektReposStoreGetStatisticsFunc) appendCall(r0 ZoektReposStoreGetStatisticsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ZoektReposStoreGetStatisticsFuncCall
// objects describing the invocations of this function.
func (f *ZoektReposStoreGetStatisticsFunc) History() []ZoektReposStoreGetStatisticsFuncCall {
	f.mutex.Lock()
	history := make([]ZoektReposStoreGetStatisticsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ZoektReposStoreGetStatisticsFuncCall is an object that describes an
// invocation of method GetStatistics on an instance of MockZoektReposStore.
type ZoektReposStoreGetStatisticsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 ZoektRepoStatistics
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ZoektReposStoreGetStatisticsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ZoektReposStoreGetStatisticsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ZoektReposStoreGetZoektRepoFunc describes the behavior when the
// GetZoektRepo method of the parent MockZoektReposStore instance is
// invoked.
type ZoektReposStoreGetZoektRepoFunc struct {
	defaultHook func(context.Context, api.RepoID) (*ZoektRepo, error)
	hooks       []func(context.Context, api.RepoID) (*ZoektRepo, error)
	history     []ZoektReposStoreGetZoektRepoFuncCall
	mutex       sync.Mutex
}

// GetZoektRepo delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockZoektReposStore) GetZoektRepo(v0 context.Context, v1 api.RepoID) (*ZoektRepo, error) {
	r0, r1 := m.GetZoektRepoFunc.nextHook()(v0, v1)
	m.GetZoektRepoFunc.appendCall(ZoektReposStoreGetZoektRepoFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetZoektRepo method
// of the parent MockZoektReposStore instance is invoked and the hook queue
// is empty.
func (f *ZoektReposStoreGetZoektRepoFunc) SetDefaultHook(hook func(context.Context, api.RepoID) (*ZoektRepo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetZoektRepo method of the parent MockZoektReposStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ZoektReposStoreGetZoektRepoFunc) PushHook(hook func(context.Context, api.RepoID) (*ZoektRepo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ZoektReposStoreGetZoektRepoFunc) SetDefaultReturn(r0 *ZoektRepo, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoID) (*ZoektRepo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ZoektReposStoreGetZoektRepoFunc) PushReturn(r0 *ZoektRepo, r1 error) {
	f.PushHook(func(context.Context, api.RepoID) (*ZoektRepo, error) {
		return r0, r1
	})
}

func (f *ZoektReposStoreGetZoektRepoFunc) nextHook() func(context.Context, api.RepoID) (*ZoektRepo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ZoektReposStoreGetZoektRepoFunc) appendCall(r0 ZoektReposStoreGetZoektRepoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ZoektReposStoreGetZoektRepoFuncCall objects
// describing the invocations of this function.
func (f *ZoektReposStoreGetZoektRepoFunc) History() []ZoektReposStoreGetZoektRepoFuncCall {
	f.mutex.Lock()
	history := make([]ZoektReposStoreGetZoektRepoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ZoektReposStoreGetZoektRepoFuncCall is an object that describes an
// invocation of method GetZoektRepo on an instance of MockZoektReposStore.
type ZoektReposStoreGetZoektRepoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *ZoektRepo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ZoektReposStoreGetZoektRepoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ZoektReposStoreGetZoektRepoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ZoektReposStoreHandleFunc describes the behavior when the Handle method
// of the parent MockZoektReposStore instance is invoked.
type ZoektReposStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []ZoektReposStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockZoektReposStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(ZoektReposStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockZoektReposStore instance is invoked and the hook queue is
// empty.
func (f *ZoektReposStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockZoektReposStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ZoektReposStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ZoektReposStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ZoektReposStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *ZoektReposStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ZoektReposStoreHandleFunc) appendCall(r0 ZoektReposStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ZoektReposStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *ZoektReposStoreHandleFunc) History() []ZoektReposStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]ZoektReposStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ZoektReposStoreHandleFuncCall is an object that describes an invocation
// of method Handle on an instance of MockZoektReposStore.
type ZoektReposStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ZoektReposStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ZoektReposStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ZoektReposStoreUpdateIndexStatusesFunc describes the behavior when the
// UpdateIndexStatuses method of the parent MockZoektReposStore instance is
// invoked.
type ZoektReposStoreUpdateIndexStatusesFunc struct {
	defaultHook func(context.Context, map[uint32]*zoekt.MinimalRepoListEntry) error
	hooks       []func(context.Context, map[uint32]*zoekt.MinimalRepoListEntry) error
	history     []ZoektReposStoreUpdateIndexStatusesFuncCall
	mutex       sync.Mutex
}

// UpdateIndexStatuses delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockZoektReposStore) UpdateIndexStatuses(v0 context.Context, v1 map[uint32]*zoekt.MinimalRepoListEntry) error {
	r0 := m.UpdateIndexStatusesFunc.nextHook()(v0, v1)
	m.UpdateIndexStatusesFunc.appendCall(ZoektReposStoreUpdateIndexStatusesFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UpdateIndexStatuses
// method of the parent MockZoektReposStore instance is invoked and the hook
// queue is empty.
func (f *ZoektReposStoreUpdateIndexStatusesFunc) SetDefaultHook(hook func(context.Context, map[uint32]*zoekt.MinimalRepoListEntry) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateIndexStatuses method of the parent MockZoektReposStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ZoektReposStoreUpdateIndexStatusesFunc) PushHook(hook func(context.Context, map[uint32]*zoekt.MinimalRepoListEntry) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ZoektReposStoreUpdateIndexStatusesFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, map[uint32]*zoekt.MinimalRepoListEntry) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ZoektReposStoreUpdateIndexStatusesFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, map[uint32]*zoekt.MinimalRepoListEntry) error {
		return r0
	})
}

func (f *ZoektReposStoreUpdateIndexStatusesFunc) nextHook() func(context.Context, map[uint32]*zoekt.MinimalRepoListEntry) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ZoektReposStoreUpdateIndexStatusesFunc) appendCall(r0 ZoektReposStoreUpdateIndexStatusesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ZoektReposStoreUpdateIndexStatusesFuncCall
// objects describing the invocations of this function.
func (f *ZoektReposStoreUpdateIndexStatusesFunc) History() []ZoektReposStoreUpdateIndexStatusesFuncCall {
	f.mutex.Lock()
	history := make([]ZoektReposStoreUpdateIndexStatusesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ZoektReposStoreUpdateIndexStatusesFuncCall is an object that describes an
// invocation of method UpdateIndexStatuses on an instance of
// MockZoektReposStore.
type ZoektReposStoreUpdateIndexStatusesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 map[uint32]*zoekt.MinimalRepoListEntry
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ZoektReposStoreUpdateIndexStatusesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ZoektReposStoreUpdateIndexStatusesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ZoektReposStoreWithFunc describes the behavior when the With method of
// the parent MockZoektReposStore instance is invoked.
type ZoektReposStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) ZoektReposStore
	hooks       []func(basestore.ShareableStore) ZoektReposStore
	history     []ZoektReposStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockZoektReposStore) With(v0 basestore.ShareableStore) ZoektReposStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(ZoektReposStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockZoektReposStore instance is invoked and the hook queue is
// empty.
func (f *ZoektReposStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) ZoektReposStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockZoektReposStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ZoektReposStoreWithFunc) PushHook(hook func(basestore.ShareableStore) ZoektReposStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ZoektReposStoreWithFunc) SetDefaultReturn(r0 ZoektReposStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) ZoektReposStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ZoektReposStoreWithFunc) PushReturn(r0 ZoektReposStore) {
	f.PushHook(func(basestore.ShareableStore) ZoektReposStore {
		return r0
	})
}

func (f *ZoektReposStoreWithFunc) nextHook() func(basestore.ShareableStore) ZoektReposStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ZoektReposStoreWithFunc) appendCall(r0 ZoektReposStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ZoektReposStoreWithFuncCall objects
// describing the invocations of this function.
func (f *ZoektReposStoreWithFunc) History() []ZoektReposStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]ZoektReposStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ZoektReposStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockZoektReposStore.
type ZoektReposStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 ZoektReposStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ZoektReposStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ZoektReposStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
