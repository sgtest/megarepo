package postgresdsn

import "testing"

func TestNew(t *testing.T) {
	cases := []struct {
		name   string
		prefix string
		env    map[string]string
		dsn    string
	}{
		{
			name: "default",
			env:  map[string]string{},
			dsn:  "postgres://testuser@127.0.0.1:5432",
		},
		{
			name: "deploy-sourcegraph",
			env: map[string]string{
				"PGDATABASE": "sg",
				"PGHOST":     "pgsql",
				"PGPORT":     "5432",
				"PGSSLMODE":  "disable",
				"PGUSER":     "sg",
			},
			dsn: "postgres://sg@pgsql:5432/sg?sslmode=disable",
		},
		{
			name: "deploy-sourcegraph password",
			env: map[string]string{
				"PGDATABASE": "sg",
				"PGHOST":     "pgsql",
				"PGPASSWORD": "REDACTED",
				"PGPORT":     "5432",
				"PGSSLMODE":  "disable",
				"PGUSER":     "sg",
			},
			dsn: "postgres://sg:REDACTED@pgsql:5432/sg?sslmode=disable",
		},
		{
			name: "sourcegraph server",
			env: map[string]string{
				"PGHOST":     "127.0.0.1",
				"PGUSER":     "postgres",
				"PGDATABASE": "sourcegraph",
				"PGSSLMODE":  "disable",
			},
			dsn: "postgres://postgres@127.0.0.1/sourcegraph?sslmode=disable",
		},
		{
			name: "dbtest",
			env: map[string]string{
				"PGHOST":     "127.0.0.1",
				"PGPORT":     "5432",
				"PGUSER":     "sourcegraph",
				"PGPASSWORD": "sourcegraph",
				"PGDATABASE": "sourcegraph",
				"PGSSLMODE":  "disable",
				"PGTZ":       "UTC",
			},
			dsn: "postgres://sourcegraph:sourcegraph@127.0.0.1:5432/sourcegraph?sslmode=disable&timezone=UTC",
		},
		{
			name: "datasource",
			env: map[string]string{
				"PGDATASOURCE": "postgres://foo@bar/bam",
			},
			dsn: "postgres://foo@bar/bam",
		},
		{
			name: "datasource search_path",
			env: map[string]string{
				"PGDATASOURCE": "postgres://sg:REDACTED@pgsql:5432/sg?sslmode=disable&search_path=application",
			},
			dsn: "postgres://sg:REDACTED@pgsql:5432/sg?sslmode=disable&search_path=application",
		},
		{
			name: "datasource ignore",
			env: map[string]string{
				"PGHOST":       "pgsql",
				"PGDATASOURCE": "postgres://foo@bar/bam",
			},
			dsn: "postgres://foo@bar/bam",
		},
		{
			name: "unix socket",
			// This is the envvars generated by ./dev/nix/shell-hook.sh
			env: map[string]string{
				"PGDATASOURCE": "postgresql:///postgres?host=/home/alice/.sourcegraph/postgres",
				"PGDATA":       "/home/alice/.sourcegraph/postgres/13.3",
				"PGDATABASE":   "postgres",
				"PGHOST":       "/home/alice/.sourcegraph/postgres",
				"PGUSER":       "alice",
			},
			dsn: "postgresql:///postgres?host=/home/alice/.sourcegraph/postgres",
		},
		{
			name:   "codeintel",
			prefix: "CODEINTEL",
			env: map[string]string{
				"CODEINTEL_PGDATABASE": "ci-sg",
				"CODEINTEL_PGHOST":     "ci-pgsql",
				"CODEINTEL_PGPASSWORD": "ci-REDACTED",
				"CODEINTEL_PGPORT":     "5439",
				"CODEINTEL_PGSSLMODE":  "disable",
				"CODEINTEL_PGUSER":     "ci-sg",
			},
			dsn: "postgres://ci-sg:ci-REDACTED@ci-pgsql:5439/ci-sg?sslmode=disable",
		},
		{
			name: "quoted port",
			env: map[string]string{
				"PGDATABASE": "sg",
				"PGHOST":     "pgsql",
				"PGPASSWORD": "REDACTED",
				"PGPORT":     `"5432"`,
				"PGSSLMODE":  "disable",
				"PGUSER":     "sg",
			},
			dsn: "postgres://sg:REDACTED@pgsql:5432/sg?sslmode=disable",
		},
	}

	for _, tc := range cases {
		t.Run(tc.name, func(t *testing.T) {
			have := New(tc.prefix, "testuser", func(e string) string {
				return tc.env[e]
			})
			if have != tc.dsn {
				t.Errorf("unexpected computed DSN\nhave: %s\nwant: %s", have, tc.dsn)
			}
		})
	}
}
