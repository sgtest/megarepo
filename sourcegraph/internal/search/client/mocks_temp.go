// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package client

import (
	"context"
	"sync"

	search "github.com/sourcegraph/sourcegraph/internal/search"
	job "github.com/sourcegraph/sourcegraph/internal/search/job"
	streaming "github.com/sourcegraph/sourcegraph/internal/search/streaming"
)

// MockSearchClient is a mock implementation of the SearchClient interface
// (from the package
// github.com/sourcegraph/sourcegraph/internal/search/client) used for unit
// testing.
type MockSearchClient struct {
	// ExecuteFunc is an instance of a mock function object controlling the
	// behavior of the method Execute.
	ExecuteFunc *SearchClientExecuteFunc
	// JobClientsFunc is an instance of a mock function object controlling
	// the behavior of the method JobClients.
	JobClientsFunc *SearchClientJobClientsFunc
	// PlanFunc is an instance of a mock function object controlling the
	// behavior of the method Plan.
	PlanFunc *SearchClientPlanFunc
}

// NewMockSearchClient creates a new mock of the SearchClient interface. All
// methods return zero values for all results, unless overwritten.
func NewMockSearchClient() *MockSearchClient {
	return &MockSearchClient{
		ExecuteFunc: &SearchClientExecuteFunc{
			defaultHook: func(context.Context, streaming.Sender, *search.Inputs) (r0 *search.Alert, r1 error) {
				return
			},
		},
		JobClientsFunc: &SearchClientJobClientsFunc{
			defaultHook: func() (r0 job.RuntimeClients) {
				return
			},
		},
		PlanFunc: &SearchClientPlanFunc{
			defaultHook: func(context.Context, string, *string, string, search.Mode, search.Protocol) (r0 *search.Inputs, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockSearchClient creates a new mock of the SearchClient
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockSearchClient() *MockSearchClient {
	return &MockSearchClient{
		ExecuteFunc: &SearchClientExecuteFunc{
			defaultHook: func(context.Context, streaming.Sender, *search.Inputs) (*search.Alert, error) {
				panic("unexpected invocation of MockSearchClient.Execute")
			},
		},
		JobClientsFunc: &SearchClientJobClientsFunc{
			defaultHook: func() job.RuntimeClients {
				panic("unexpected invocation of MockSearchClient.JobClients")
			},
		},
		PlanFunc: &SearchClientPlanFunc{
			defaultHook: func(context.Context, string, *string, string, search.Mode, search.Protocol) (*search.Inputs, error) {
				panic("unexpected invocation of MockSearchClient.Plan")
			},
		},
	}
}

// NewMockSearchClientFrom creates a new mock of the MockSearchClient
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockSearchClientFrom(i SearchClient) *MockSearchClient {
	return &MockSearchClient{
		ExecuteFunc: &SearchClientExecuteFunc{
			defaultHook: i.Execute,
		},
		JobClientsFunc: &SearchClientJobClientsFunc{
			defaultHook: i.JobClients,
		},
		PlanFunc: &SearchClientPlanFunc{
			defaultHook: i.Plan,
		},
	}
}

// SearchClientExecuteFunc describes the behavior when the Execute method of
// the parent MockSearchClient instance is invoked.
type SearchClientExecuteFunc struct {
	defaultHook func(context.Context, streaming.Sender, *search.Inputs) (*search.Alert, error)
	hooks       []func(context.Context, streaming.Sender, *search.Inputs) (*search.Alert, error)
	history     []SearchClientExecuteFuncCall
	mutex       sync.Mutex
}

// Execute delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSearchClient) Execute(v0 context.Context, v1 streaming.Sender, v2 *search.Inputs) (*search.Alert, error) {
	r0, r1 := m.ExecuteFunc.nextHook()(v0, v1, v2)
	m.ExecuteFunc.appendCall(SearchClientExecuteFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Execute method of
// the parent MockSearchClient instance is invoked and the hook queue is
// empty.
func (f *SearchClientExecuteFunc) SetDefaultHook(hook func(context.Context, streaming.Sender, *search.Inputs) (*search.Alert, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Execute method of the parent MockSearchClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SearchClientExecuteFunc) PushHook(hook func(context.Context, streaming.Sender, *search.Inputs) (*search.Alert, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SearchClientExecuteFunc) SetDefaultReturn(r0 *search.Alert, r1 error) {
	f.SetDefaultHook(func(context.Context, streaming.Sender, *search.Inputs) (*search.Alert, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SearchClientExecuteFunc) PushReturn(r0 *search.Alert, r1 error) {
	f.PushHook(func(context.Context, streaming.Sender, *search.Inputs) (*search.Alert, error) {
		return r0, r1
	})
}

func (f *SearchClientExecuteFunc) nextHook() func(context.Context, streaming.Sender, *search.Inputs) (*search.Alert, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchClientExecuteFunc) appendCall(r0 SearchClientExecuteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SearchClientExecuteFuncCall objects
// describing the invocations of this function.
func (f *SearchClientExecuteFunc) History() []SearchClientExecuteFuncCall {
	f.mutex.Lock()
	history := make([]SearchClientExecuteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchClientExecuteFuncCall is an object that describes an invocation of
// method Execute on an instance of MockSearchClient.
type SearchClientExecuteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 streaming.Sender
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *search.Inputs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *search.Alert
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchClientExecuteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchClientExecuteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SearchClientJobClientsFunc describes the behavior when the JobClients
// method of the parent MockSearchClient instance is invoked.
type SearchClientJobClientsFunc struct {
	defaultHook func() job.RuntimeClients
	hooks       []func() job.RuntimeClients
	history     []SearchClientJobClientsFuncCall
	mutex       sync.Mutex
}

// JobClients delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockSearchClient) JobClients() job.RuntimeClients {
	r0 := m.JobClientsFunc.nextHook()()
	m.JobClientsFunc.appendCall(SearchClientJobClientsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the JobClients method of
// the parent MockSearchClient instance is invoked and the hook queue is
// empty.
func (f *SearchClientJobClientsFunc) SetDefaultHook(hook func() job.RuntimeClients) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// JobClients method of the parent MockSearchClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SearchClientJobClientsFunc) PushHook(hook func() job.RuntimeClients) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SearchClientJobClientsFunc) SetDefaultReturn(r0 job.RuntimeClients) {
	f.SetDefaultHook(func() job.RuntimeClients {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SearchClientJobClientsFunc) PushReturn(r0 job.RuntimeClients) {
	f.PushHook(func() job.RuntimeClients {
		return r0
	})
}

func (f *SearchClientJobClientsFunc) nextHook() func() job.RuntimeClients {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchClientJobClientsFunc) appendCall(r0 SearchClientJobClientsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SearchClientJobClientsFuncCall objects
// describing the invocations of this function.
func (f *SearchClientJobClientsFunc) History() []SearchClientJobClientsFuncCall {
	f.mutex.Lock()
	history := make([]SearchClientJobClientsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchClientJobClientsFuncCall is an object that describes an invocation
// of method JobClients on an instance of MockSearchClient.
type SearchClientJobClientsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 job.RuntimeClients
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchClientJobClientsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchClientJobClientsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SearchClientPlanFunc describes the behavior when the Plan method of the
// parent MockSearchClient instance is invoked.
type SearchClientPlanFunc struct {
	defaultHook func(context.Context, string, *string, string, search.Mode, search.Protocol) (*search.Inputs, error)
	hooks       []func(context.Context, string, *string, string, search.Mode, search.Protocol) (*search.Inputs, error)
	history     []SearchClientPlanFuncCall
	mutex       sync.Mutex
}

// Plan delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSearchClient) Plan(v0 context.Context, v1 string, v2 *string, v3 string, v4 search.Mode, v5 search.Protocol) (*search.Inputs, error) {
	r0, r1 := m.PlanFunc.nextHook()(v0, v1, v2, v3, v4, v5)
	m.PlanFunc.appendCall(SearchClientPlanFuncCall{v0, v1, v2, v3, v4, v5, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Plan method of the
// parent MockSearchClient instance is invoked and the hook queue is empty.
func (f *SearchClientPlanFunc) SetDefaultHook(hook func(context.Context, string, *string, string, search.Mode, search.Protocol) (*search.Inputs, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Plan method of the parent MockSearchClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SearchClientPlanFunc) PushHook(hook func(context.Context, string, *string, string, search.Mode, search.Protocol) (*search.Inputs, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SearchClientPlanFunc) SetDefaultReturn(r0 *search.Inputs, r1 error) {
	f.SetDefaultHook(func(context.Context, string, *string, string, search.Mode, search.Protocol) (*search.Inputs, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SearchClientPlanFunc) PushReturn(r0 *search.Inputs, r1 error) {
	f.PushHook(func(context.Context, string, *string, string, search.Mode, search.Protocol) (*search.Inputs, error) {
		return r0, r1
	})
}

func (f *SearchClientPlanFunc) nextHook() func(context.Context, string, *string, string, search.Mode, search.Protocol) (*search.Inputs, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SearchClientPlanFunc) appendCall(r0 SearchClientPlanFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SearchClientPlanFuncCall objects describing
// the invocations of this function.
func (f *SearchClientPlanFunc) History() []SearchClientPlanFuncCall {
	f.mutex.Lock()
	history := make([]SearchClientPlanFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SearchClientPlanFuncCall is an object that describes an invocation of
// method Plan on an instance of MockSearchClient.
type SearchClientPlanFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 search.Mode
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 search.Protocol
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *search.Inputs
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SearchClientPlanFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SearchClientPlanFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
