load("//dev:go_defs.bzl", "go_test")
load("@io_bazel_rules_go//go:def.bzl", "go_library")

go_library(
    name = "queryrunner",
    srcs = [
        "cleaner.go",
        "errors.go",
        "search.go",
        "work_handler.go",
        "worker.go",
    ],
    importpath = "github.com/sourcegraph/sourcegraph/internal/insights/background/queryrunner",
    visibility = ["//:__subpackages__"],
    deps = [
        "//internal/actor",
        "//internal/api",
        "//internal/authz",
        "//internal/conf",
        "//internal/database",
        "//internal/database/basestore",
        "//internal/database/dbutil",
        "//internal/executor",
        "//internal/goroutine",
        "//internal/insights/compression",
        "//internal/insights/discovery",
        "//internal/insights/priority",
        "//internal/insights/query/streaming",
        "//internal/insights/store",
        "//internal/insights/types",
        "//internal/metrics",
        "//internal/observation",
        "//internal/ratelimit",
        "//internal/trace",
        "//internal/workerutil",
        "//internal/workerutil/dbworker",
        "//internal/workerutil/dbworker/store",
        "//lib/errors",
        "@com_github_keegancsmith_sqlf//:sqlf",
        "@com_github_lib_pq//:pq",
        "@com_github_prometheus_client_golang//prometheus",
        "@com_github_sourcegraph_log//:log",
        "@io_opentelemetry_go_otel//attribute",
    ],
)

go_test(
    name = "queryrunner_test",
    timeout = "moderate",
    srcs = [
        "main_test.go",
        "search_test.go",
        "work_handler_test.go",
        "worker_test.go",
    ],
    data = glob(["testdata/**"]),
    embed = [":queryrunner"],
    tags = [
        # Test requires localhost for database
        "requires-network",
    ],
    deps = [
        "//internal/actor",
        "//internal/api",
        "//internal/authz",
        "//internal/database",
        "//internal/database/basestore",
        "//internal/database/dbmocks",
        "//internal/database/dbtest",
        "//internal/insights/compression",
        "//internal/insights/priority",
        "//internal/insights/query/streaming",
        "//internal/insights/store",
        "//internal/insights/types",
        "//internal/observation",
        "//internal/ratelimit",
        "//internal/types",
        "//internal/workerutil/dbworker/store",
        "//lib/errors",
        "@com_github_hexops_autogold_v2//:autogold",
        "@com_github_keegancsmith_sqlf//:sqlf",
        "@com_github_sourcegraph_log//logtest",
        "@com_github_stretchr_testify//require",
        "@org_golang_x_time//rate",
    ],
)
