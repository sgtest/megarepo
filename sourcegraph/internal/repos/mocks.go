// Code generated by go-mockgen 1.2.0; DO NOT EDIT.

package repos

import (
	"context"
	"sync"

	api "github.com/sourcegraph/sourcegraph/internal/api"
	database "github.com/sourcegraph/sourcegraph/internal/database"
	basestore "github.com/sourcegraph/sourcegraph/internal/database/basestore"
	logging "github.com/sourcegraph/sourcegraph/internal/logging"
	trace "github.com/sourcegraph/sourcegraph/internal/trace"
	types "github.com/sourcegraph/sourcegraph/internal/types"
)

// MockStore is a mock implementation of the Store interface (from the
// package github.com/sourcegraph/sourcegraph/internal/repos) used for unit
// testing.
type MockStore struct {
	// CountNamespacedReposFunc is an instance of a mock function object
	// controlling the behavior of the method CountNamespacedRepos.
	CountNamespacedReposFunc *StoreCountNamespacedReposFunc
	// CreateExternalServiceRepoFunc is an instance of a mock function
	// object controlling the behavior of the method
	// CreateExternalServiceRepo.
	CreateExternalServiceRepoFunc *StoreCreateExternalServiceRepoFunc
	// DeleteExternalServiceRepoFunc is an instance of a mock function
	// object controlling the behavior of the method
	// DeleteExternalServiceRepo.
	DeleteExternalServiceRepoFunc *StoreDeleteExternalServiceRepoFunc
	// DeleteExternalServiceReposNotInFunc is an instance of a mock function
	// object controlling the behavior of the method
	// DeleteExternalServiceReposNotIn.
	DeleteExternalServiceReposNotInFunc *StoreDeleteExternalServiceReposNotInFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *StoreDoneFunc
	// EnqueueSingleSyncJobFunc is an instance of a mock function object
	// controlling the behavior of the method EnqueueSingleSyncJob.
	EnqueueSingleSyncJobFunc *StoreEnqueueSingleSyncJobFunc
	// EnqueueSyncJobsFunc is an instance of a mock function object
	// controlling the behavior of the method EnqueueSyncJobs.
	EnqueueSyncJobsFunc *StoreEnqueueSyncJobsFunc
	// ExternalServiceStoreFunc is an instance of a mock function object
	// controlling the behavior of the method ExternalServiceStore.
	ExternalServiceStoreFunc *StoreExternalServiceStoreFunc
	// GitserverReposStoreFunc is an instance of a mock function object
	// controlling the behavior of the method GitserverReposStore.
	GitserverReposStoreFunc *StoreGitserverReposStoreFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *StoreHandleFunc
	// ListExternalServicePrivateRepoIDsByUserIDFunc is an instance of a
	// mock function object controlling the behavior of the method
	// ListExternalServicePrivateRepoIDsByUserID.
	ListExternalServicePrivateRepoIDsByUserIDFunc *StoreListExternalServicePrivateRepoIDsByUserIDFunc
	// ListExternalServiceUserIDsByRepoIDFunc is an instance of a mock
	// function object controlling the behavior of the method
	// ListExternalServiceUserIDsByRepoID.
	ListExternalServiceUserIDsByRepoIDFunc *StoreListExternalServiceUserIDsByRepoIDFunc
	// ListSyncJobsFunc is an instance of a mock function object controlling
	// the behavior of the method ListSyncJobs.
	ListSyncJobsFunc *StoreListSyncJobsFunc
	// RepoStoreFunc is an instance of a mock function object controlling
	// the behavior of the method RepoStore.
	RepoStoreFunc *StoreRepoStoreFunc
	// SetLoggerFunc is an instance of a mock function object controlling
	// the behavior of the method SetLogger.
	SetLoggerFunc *StoreSetLoggerFunc
	// SetMetricsFunc is an instance of a mock function object controlling
	// the behavior of the method SetMetrics.
	SetMetricsFunc *StoreSetMetricsFunc
	// SetTracerFunc is an instance of a mock function object controlling
	// the behavior of the method SetTracer.
	SetTracerFunc *StoreSetTracerFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *StoreTransactFunc
	// UpdateExternalServiceRepoFunc is an instance of a mock function
	// object controlling the behavior of the method
	// UpdateExternalServiceRepo.
	UpdateExternalServiceRepoFunc *StoreUpdateExternalServiceRepoFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *StoreWithFunc
}

// NewMockStore creates a new mock of the Store interface. All methods
// return zero values for all results, unless overwritten.
func NewMockStore() *MockStore {
	return &MockStore{
		CountNamespacedReposFunc: &StoreCountNamespacedReposFunc{
			defaultHook: func(context.Context, int32, int32) (r0 uint64, r1 error) {
				return
			},
		},
		CreateExternalServiceRepoFunc: &StoreCreateExternalServiceRepoFunc{
			defaultHook: func(context.Context, *types.ExternalService, *types.Repo) (r0 error) {
				return
			},
		},
		DeleteExternalServiceRepoFunc: &StoreDeleteExternalServiceRepoFunc{
			defaultHook: func(context.Context, *types.ExternalService, api.RepoID) (r0 error) {
				return
			},
		},
		DeleteExternalServiceReposNotInFunc: &StoreDeleteExternalServiceReposNotInFunc{
			defaultHook: func(context.Context, *types.ExternalService, map[api.RepoID]struct{}) (r0 []api.RepoID, r1 error) {
				return
			},
		},
		DoneFunc: &StoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		EnqueueSingleSyncJobFunc: &StoreEnqueueSingleSyncJobFunc{
			defaultHook: func(context.Context, int64) (r0 error) {
				return
			},
		},
		EnqueueSyncJobsFunc: &StoreEnqueueSyncJobsFunc{
			defaultHook: func(context.Context, bool) (r0 error) {
				return
			},
		},
		ExternalServiceStoreFunc: &StoreExternalServiceStoreFunc{
			defaultHook: func() (r0 database.ExternalServiceStore) {
				return
			},
		},
		GitserverReposStoreFunc: &StoreGitserverReposStoreFunc{
			defaultHook: func() (r0 database.GitserverRepoStore) {
				return
			},
		},
		HandleFunc: &StoreHandleFunc{
			defaultHook: func() (r0 *basestore.TransactableHandle) {
				return
			},
		},
		ListExternalServicePrivateRepoIDsByUserIDFunc: &StoreListExternalServicePrivateRepoIDsByUserIDFunc{
			defaultHook: func(context.Context, int32) (r0 []api.RepoID, r1 error) {
				return
			},
		},
		ListExternalServiceUserIDsByRepoIDFunc: &StoreListExternalServiceUserIDsByRepoIDFunc{
			defaultHook: func(context.Context, api.RepoID) (r0 []int32, r1 error) {
				return
			},
		},
		ListSyncJobsFunc: &StoreListSyncJobsFunc{
			defaultHook: func(context.Context) (r0 []SyncJob, r1 error) {
				return
			},
		},
		RepoStoreFunc: &StoreRepoStoreFunc{
			defaultHook: func() (r0 database.RepoStore) {
				return
			},
		},
		SetLoggerFunc: &StoreSetLoggerFunc{
			defaultHook: func(logging.ErrorLogger) {
				return
			},
		},
		SetMetricsFunc: &StoreSetMetricsFunc{
			defaultHook: func(StoreMetrics) {
				return
			},
		},
		SetTracerFunc: &StoreSetTracerFunc{
			defaultHook: func(trace.Tracer) {
				return
			},
		},
		TransactFunc: &StoreTransactFunc{
			defaultHook: func(context.Context) (r0 Store, r1 error) {
				return
			},
		},
		UpdateExternalServiceRepoFunc: &StoreUpdateExternalServiceRepoFunc{
			defaultHook: func(context.Context, *types.ExternalService, *types.Repo) (r0 error) {
				return
			},
		},
		WithFunc: &StoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 Store) {
				return
			},
		},
	}
}

// NewStrictMockStore creates a new mock of the Store interface. All methods
// panic on invocation, unless overwritten.
func NewStrictMockStore() *MockStore {
	return &MockStore{
		CountNamespacedReposFunc: &StoreCountNamespacedReposFunc{
			defaultHook: func(context.Context, int32, int32) (uint64, error) {
				panic("unexpected invocation of MockStore.CountNamespacedRepos")
			},
		},
		CreateExternalServiceRepoFunc: &StoreCreateExternalServiceRepoFunc{
			defaultHook: func(context.Context, *types.ExternalService, *types.Repo) error {
				panic("unexpected invocation of MockStore.CreateExternalServiceRepo")
			},
		},
		DeleteExternalServiceRepoFunc: &StoreDeleteExternalServiceRepoFunc{
			defaultHook: func(context.Context, *types.ExternalService, api.RepoID) error {
				panic("unexpected invocation of MockStore.DeleteExternalServiceRepo")
			},
		},
		DeleteExternalServiceReposNotInFunc: &StoreDeleteExternalServiceReposNotInFunc{
			defaultHook: func(context.Context, *types.ExternalService, map[api.RepoID]struct{}) ([]api.RepoID, error) {
				panic("unexpected invocation of MockStore.DeleteExternalServiceReposNotIn")
			},
		},
		DoneFunc: &StoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockStore.Done")
			},
		},
		EnqueueSingleSyncJobFunc: &StoreEnqueueSingleSyncJobFunc{
			defaultHook: func(context.Context, int64) error {
				panic("unexpected invocation of MockStore.EnqueueSingleSyncJob")
			},
		},
		EnqueueSyncJobsFunc: &StoreEnqueueSyncJobsFunc{
			defaultHook: func(context.Context, bool) error {
				panic("unexpected invocation of MockStore.EnqueueSyncJobs")
			},
		},
		ExternalServiceStoreFunc: &StoreExternalServiceStoreFunc{
			defaultHook: func() database.ExternalServiceStore {
				panic("unexpected invocation of MockStore.ExternalServiceStore")
			},
		},
		GitserverReposStoreFunc: &StoreGitserverReposStoreFunc{
			defaultHook: func() database.GitserverRepoStore {
				panic("unexpected invocation of MockStore.GitserverReposStore")
			},
		},
		HandleFunc: &StoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				panic("unexpected invocation of MockStore.Handle")
			},
		},
		ListExternalServicePrivateRepoIDsByUserIDFunc: &StoreListExternalServicePrivateRepoIDsByUserIDFunc{
			defaultHook: func(context.Context, int32) ([]api.RepoID, error) {
				panic("unexpected invocation of MockStore.ListExternalServicePrivateRepoIDsByUserID")
			},
		},
		ListExternalServiceUserIDsByRepoIDFunc: &StoreListExternalServiceUserIDsByRepoIDFunc{
			defaultHook: func(context.Context, api.RepoID) ([]int32, error) {
				panic("unexpected invocation of MockStore.ListExternalServiceUserIDsByRepoID")
			},
		},
		ListSyncJobsFunc: &StoreListSyncJobsFunc{
			defaultHook: func(context.Context) ([]SyncJob, error) {
				panic("unexpected invocation of MockStore.ListSyncJobs")
			},
		},
		RepoStoreFunc: &StoreRepoStoreFunc{
			defaultHook: func() database.RepoStore {
				panic("unexpected invocation of MockStore.RepoStore")
			},
		},
		SetLoggerFunc: &StoreSetLoggerFunc{
			defaultHook: func(logging.ErrorLogger) {
				panic("unexpected invocation of MockStore.SetLogger")
			},
		},
		SetMetricsFunc: &StoreSetMetricsFunc{
			defaultHook: func(StoreMetrics) {
				panic("unexpected invocation of MockStore.SetMetrics")
			},
		},
		SetTracerFunc: &StoreSetTracerFunc{
			defaultHook: func(trace.Tracer) {
				panic("unexpected invocation of MockStore.SetTracer")
			},
		},
		TransactFunc: &StoreTransactFunc{
			defaultHook: func(context.Context) (Store, error) {
				panic("unexpected invocation of MockStore.Transact")
			},
		},
		UpdateExternalServiceRepoFunc: &StoreUpdateExternalServiceRepoFunc{
			defaultHook: func(context.Context, *types.ExternalService, *types.Repo) error {
				panic("unexpected invocation of MockStore.UpdateExternalServiceRepo")
			},
		},
		WithFunc: &StoreWithFunc{
			defaultHook: func(basestore.ShareableStore) Store {
				panic("unexpected invocation of MockStore.With")
			},
		},
	}
}

// NewMockStoreFrom creates a new mock of the MockStore interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockStoreFrom(i Store) *MockStore {
	return &MockStore{
		CountNamespacedReposFunc: &StoreCountNamespacedReposFunc{
			defaultHook: i.CountNamespacedRepos,
		},
		CreateExternalServiceRepoFunc: &StoreCreateExternalServiceRepoFunc{
			defaultHook: i.CreateExternalServiceRepo,
		},
		DeleteExternalServiceRepoFunc: &StoreDeleteExternalServiceRepoFunc{
			defaultHook: i.DeleteExternalServiceRepo,
		},
		DeleteExternalServiceReposNotInFunc: &StoreDeleteExternalServiceReposNotInFunc{
			defaultHook: i.DeleteExternalServiceReposNotIn,
		},
		DoneFunc: &StoreDoneFunc{
			defaultHook: i.Done,
		},
		EnqueueSingleSyncJobFunc: &StoreEnqueueSingleSyncJobFunc{
			defaultHook: i.EnqueueSingleSyncJob,
		},
		EnqueueSyncJobsFunc: &StoreEnqueueSyncJobsFunc{
			defaultHook: i.EnqueueSyncJobs,
		},
		ExternalServiceStoreFunc: &StoreExternalServiceStoreFunc{
			defaultHook: i.ExternalServiceStore,
		},
		GitserverReposStoreFunc: &StoreGitserverReposStoreFunc{
			defaultHook: i.GitserverReposStore,
		},
		HandleFunc: &StoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListExternalServicePrivateRepoIDsByUserIDFunc: &StoreListExternalServicePrivateRepoIDsByUserIDFunc{
			defaultHook: i.ListExternalServicePrivateRepoIDsByUserID,
		},
		ListExternalServiceUserIDsByRepoIDFunc: &StoreListExternalServiceUserIDsByRepoIDFunc{
			defaultHook: i.ListExternalServiceUserIDsByRepoID,
		},
		ListSyncJobsFunc: &StoreListSyncJobsFunc{
			defaultHook: i.ListSyncJobs,
		},
		RepoStoreFunc: &StoreRepoStoreFunc{
			defaultHook: i.RepoStore,
		},
		SetLoggerFunc: &StoreSetLoggerFunc{
			defaultHook: i.SetLogger,
		},
		SetMetricsFunc: &StoreSetMetricsFunc{
			defaultHook: i.SetMetrics,
		},
		SetTracerFunc: &StoreSetTracerFunc{
			defaultHook: i.SetTracer,
		},
		TransactFunc: &StoreTransactFunc{
			defaultHook: i.Transact,
		},
		UpdateExternalServiceRepoFunc: &StoreUpdateExternalServiceRepoFunc{
			defaultHook: i.UpdateExternalServiceRepo,
		},
		WithFunc: &StoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// StoreCountNamespacedReposFunc describes the behavior when the
// CountNamespacedRepos method of the parent MockStore instance is invoked.
type StoreCountNamespacedReposFunc struct {
	defaultHook func(context.Context, int32, int32) (uint64, error)
	hooks       []func(context.Context, int32, int32) (uint64, error)
	history     []StoreCountNamespacedReposFuncCall
	mutex       sync.Mutex
}

// CountNamespacedRepos delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) CountNamespacedRepos(v0 context.Context, v1 int32, v2 int32) (uint64, error) {
	r0, r1 := m.CountNamespacedReposFunc.nextHook()(v0, v1, v2)
	m.CountNamespacedReposFunc.appendCall(StoreCountNamespacedReposFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CountNamespacedRepos
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreCountNamespacedReposFunc) SetDefaultHook(hook func(context.Context, int32, int32) (uint64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountNamespacedRepos method of the parent MockStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StoreCountNamespacedReposFunc) PushHook(hook func(context.Context, int32, int32) (uint64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreCountNamespacedReposFunc) SetDefaultReturn(r0 uint64, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, int32) (uint64, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreCountNamespacedReposFunc) PushReturn(r0 uint64, r1 error) {
	f.PushHook(func(context.Context, int32, int32) (uint64, error) {
		return r0, r1
	})
}

func (f *StoreCountNamespacedReposFunc) nextHook() func(context.Context, int32, int32) (uint64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreCountNamespacedReposFunc) appendCall(r0 StoreCountNamespacedReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreCountNamespacedReposFuncCall objects
// describing the invocations of this function.
func (f *StoreCountNamespacedReposFunc) History() []StoreCountNamespacedReposFuncCall {
	f.mutex.Lock()
	history := make([]StoreCountNamespacedReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreCountNamespacedReposFuncCall is an object that describes an
// invocation of method CountNamespacedRepos on an instance of MockStore.
type StoreCountNamespacedReposFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreCountNamespacedReposFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreCountNamespacedReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreCreateExternalServiceRepoFunc describes the behavior when the
// CreateExternalServiceRepo method of the parent MockStore instance is
// invoked.
type StoreCreateExternalServiceRepoFunc struct {
	defaultHook func(context.Context, *types.ExternalService, *types.Repo) error
	hooks       []func(context.Context, *types.ExternalService, *types.Repo) error
	history     []StoreCreateExternalServiceRepoFuncCall
	mutex       sync.Mutex
}

// CreateExternalServiceRepo delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockStore) CreateExternalServiceRepo(v0 context.Context, v1 *types.ExternalService, v2 *types.Repo) error {
	r0 := m.CreateExternalServiceRepoFunc.nextHook()(v0, v1, v2)
	m.CreateExternalServiceRepoFunc.appendCall(StoreCreateExternalServiceRepoFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// CreateExternalServiceRepo method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreCreateExternalServiceRepoFunc) SetDefaultHook(hook func(context.Context, *types.ExternalService, *types.Repo) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateExternalServiceRepo method of the parent MockStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *StoreCreateExternalServiceRepoFunc) PushHook(hook func(context.Context, *types.ExternalService, *types.Repo) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreCreateExternalServiceRepoFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *types.ExternalService, *types.Repo) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreCreateExternalServiceRepoFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *types.ExternalService, *types.Repo) error {
		return r0
	})
}

func (f *StoreCreateExternalServiceRepoFunc) nextHook() func(context.Context, *types.ExternalService, *types.Repo) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreCreateExternalServiceRepoFunc) appendCall(r0 StoreCreateExternalServiceRepoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreCreateExternalServiceRepoFuncCall
// objects describing the invocations of this function.
func (f *StoreCreateExternalServiceRepoFunc) History() []StoreCreateExternalServiceRepoFuncCall {
	f.mutex.Lock()
	history := make([]StoreCreateExternalServiceRepoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreCreateExternalServiceRepoFuncCall is an object that describes an
// invocation of method CreateExternalServiceRepo on an instance of
// MockStore.
type StoreCreateExternalServiceRepoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.ExternalService
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *types.Repo
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreCreateExternalServiceRepoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreCreateExternalServiceRepoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreDeleteExternalServiceRepoFunc describes the behavior when the
// DeleteExternalServiceRepo method of the parent MockStore instance is
// invoked.
type StoreDeleteExternalServiceRepoFunc struct {
	defaultHook func(context.Context, *types.ExternalService, api.RepoID) error
	hooks       []func(context.Context, *types.ExternalService, api.RepoID) error
	history     []StoreDeleteExternalServiceRepoFuncCall
	mutex       sync.Mutex
}

// DeleteExternalServiceRepo delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockStore) DeleteExternalServiceRepo(v0 context.Context, v1 *types.ExternalService, v2 api.RepoID) error {
	r0 := m.DeleteExternalServiceRepoFunc.nextHook()(v0, v1, v2)
	m.DeleteExternalServiceRepoFunc.appendCall(StoreDeleteExternalServiceRepoFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// DeleteExternalServiceRepo method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreDeleteExternalServiceRepoFunc) SetDefaultHook(hook func(context.Context, *types.ExternalService, api.RepoID) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteExternalServiceRepo method of the parent MockStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *StoreDeleteExternalServiceRepoFunc) PushHook(hook func(context.Context, *types.ExternalService, api.RepoID) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreDeleteExternalServiceRepoFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *types.ExternalService, api.RepoID) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreDeleteExternalServiceRepoFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *types.ExternalService, api.RepoID) error {
		return r0
	})
}

func (f *StoreDeleteExternalServiceRepoFunc) nextHook() func(context.Context, *types.ExternalService, api.RepoID) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreDeleteExternalServiceRepoFunc) appendCall(r0 StoreDeleteExternalServiceRepoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreDeleteExternalServiceRepoFuncCall
// objects describing the invocations of this function.
func (f *StoreDeleteExternalServiceRepoFunc) History() []StoreDeleteExternalServiceRepoFuncCall {
	f.mutex.Lock()
	history := make([]StoreDeleteExternalServiceRepoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreDeleteExternalServiceRepoFuncCall is an object that describes an
// invocation of method DeleteExternalServiceRepo on an instance of
// MockStore.
type StoreDeleteExternalServiceRepoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.ExternalService
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreDeleteExternalServiceRepoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreDeleteExternalServiceRepoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreDeleteExternalServiceReposNotInFunc describes the behavior when the
// DeleteExternalServiceReposNotIn method of the parent MockStore instance
// is invoked.
type StoreDeleteExternalServiceReposNotInFunc struct {
	defaultHook func(context.Context, *types.ExternalService, map[api.RepoID]struct{}) ([]api.RepoID, error)
	hooks       []func(context.Context, *types.ExternalService, map[api.RepoID]struct{}) ([]api.RepoID, error)
	history     []StoreDeleteExternalServiceReposNotInFuncCall
	mutex       sync.Mutex
}

// DeleteExternalServiceReposNotIn delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockStore) DeleteExternalServiceReposNotIn(v0 context.Context, v1 *types.ExternalService, v2 map[api.RepoID]struct{}) ([]api.RepoID, error) {
	r0, r1 := m.DeleteExternalServiceReposNotInFunc.nextHook()(v0, v1, v2)
	m.DeleteExternalServiceReposNotInFunc.appendCall(StoreDeleteExternalServiceReposNotInFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// DeleteExternalServiceReposNotIn method of the parent MockStore instance
// is invoked and the hook queue is empty.
func (f *StoreDeleteExternalServiceReposNotInFunc) SetDefaultHook(hook func(context.Context, *types.ExternalService, map[api.RepoID]struct{}) ([]api.RepoID, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteExternalServiceReposNotIn method of the parent MockStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StoreDeleteExternalServiceReposNotInFunc) PushHook(hook func(context.Context, *types.ExternalService, map[api.RepoID]struct{}) ([]api.RepoID, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreDeleteExternalServiceReposNotInFunc) SetDefaultReturn(r0 []api.RepoID, r1 error) {
	f.SetDefaultHook(func(context.Context, *types.ExternalService, map[api.RepoID]struct{}) ([]api.RepoID, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreDeleteExternalServiceReposNotInFunc) PushReturn(r0 []api.RepoID, r1 error) {
	f.PushHook(func(context.Context, *types.ExternalService, map[api.RepoID]struct{}) ([]api.RepoID, error) {
		return r0, r1
	})
}

func (f *StoreDeleteExternalServiceReposNotInFunc) nextHook() func(context.Context, *types.ExternalService, map[api.RepoID]struct{}) ([]api.RepoID, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreDeleteExternalServiceReposNotInFunc) appendCall(r0 StoreDeleteExternalServiceReposNotInFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// StoreDeleteExternalServiceReposNotInFuncCall objects describing the
// invocations of this function.
func (f *StoreDeleteExternalServiceReposNotInFunc) History() []StoreDeleteExternalServiceReposNotInFuncCall {
	f.mutex.Lock()
	history := make([]StoreDeleteExternalServiceReposNotInFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreDeleteExternalServiceReposNotInFuncCall is an object that describes
// an invocation of method DeleteExternalServiceReposNotIn on an instance of
// MockStore.
type StoreDeleteExternalServiceReposNotInFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.ExternalService
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 map[api.RepoID]struct{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []api.RepoID
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreDeleteExternalServiceReposNotInFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreDeleteExternalServiceReposNotInFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreDoneFunc describes the behavior when the Done method of the parent
// MockStore instance is invoked.
type StoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []StoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(StoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *StoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreDoneFunc) appendCall(r0 StoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreDoneFuncCall objects describing the
// invocations of this function.
func (f *StoreDoneFunc) History() []StoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]StoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreDoneFuncCall is an object that describes an invocation of method
// Done on an instance of MockStore.
type StoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreEnqueueSingleSyncJobFunc describes the behavior when the
// EnqueueSingleSyncJob method of the parent MockStore instance is invoked.
type StoreEnqueueSingleSyncJobFunc struct {
	defaultHook func(context.Context, int64) error
	hooks       []func(context.Context, int64) error
	history     []StoreEnqueueSingleSyncJobFuncCall
	mutex       sync.Mutex
}

// EnqueueSingleSyncJob delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) EnqueueSingleSyncJob(v0 context.Context, v1 int64) error {
	r0 := m.EnqueueSingleSyncJobFunc.nextHook()(v0, v1)
	m.EnqueueSingleSyncJobFunc.appendCall(StoreEnqueueSingleSyncJobFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the EnqueueSingleSyncJob
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreEnqueueSingleSyncJobFunc) SetDefaultHook(hook func(context.Context, int64) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EnqueueSingleSyncJob method of the parent MockStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StoreEnqueueSingleSyncJobFunc) PushHook(hook func(context.Context, int64) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreEnqueueSingleSyncJobFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int64) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreEnqueueSingleSyncJobFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int64) error {
		return r0
	})
}

func (f *StoreEnqueueSingleSyncJobFunc) nextHook() func(context.Context, int64) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreEnqueueSingleSyncJobFunc) appendCall(r0 StoreEnqueueSingleSyncJobFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreEnqueueSingleSyncJobFuncCall objects
// describing the invocations of this function.
func (f *StoreEnqueueSingleSyncJobFunc) History() []StoreEnqueueSingleSyncJobFuncCall {
	f.mutex.Lock()
	history := make([]StoreEnqueueSingleSyncJobFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreEnqueueSingleSyncJobFuncCall is an object that describes an
// invocation of method EnqueueSingleSyncJob on an instance of MockStore.
type StoreEnqueueSingleSyncJobFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreEnqueueSingleSyncJobFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreEnqueueSingleSyncJobFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreEnqueueSyncJobsFunc describes the behavior when the EnqueueSyncJobs
// method of the parent MockStore instance is invoked.
type StoreEnqueueSyncJobsFunc struct {
	defaultHook func(context.Context, bool) error
	hooks       []func(context.Context, bool) error
	history     []StoreEnqueueSyncJobsFuncCall
	mutex       sync.Mutex
}

// EnqueueSyncJobs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) EnqueueSyncJobs(v0 context.Context, v1 bool) error {
	r0 := m.EnqueueSyncJobsFunc.nextHook()(v0, v1)
	m.EnqueueSyncJobsFunc.appendCall(StoreEnqueueSyncJobsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the EnqueueSyncJobs
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreEnqueueSyncJobsFunc) SetDefaultHook(hook func(context.Context, bool) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EnqueueSyncJobs method of the parent MockStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreEnqueueSyncJobsFunc) PushHook(hook func(context.Context, bool) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreEnqueueSyncJobsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, bool) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreEnqueueSyncJobsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, bool) error {
		return r0
	})
}

func (f *StoreEnqueueSyncJobsFunc) nextHook() func(context.Context, bool) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreEnqueueSyncJobsFunc) appendCall(r0 StoreEnqueueSyncJobsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreEnqueueSyncJobsFuncCall objects
// describing the invocations of this function.
func (f *StoreEnqueueSyncJobsFunc) History() []StoreEnqueueSyncJobsFuncCall {
	f.mutex.Lock()
	history := make([]StoreEnqueueSyncJobsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreEnqueueSyncJobsFuncCall is an object that describes an invocation of
// method EnqueueSyncJobs on an instance of MockStore.
type StoreEnqueueSyncJobsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreEnqueueSyncJobsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreEnqueueSyncJobsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreExternalServiceStoreFunc describes the behavior when the
// ExternalServiceStore method of the parent MockStore instance is invoked.
type StoreExternalServiceStoreFunc struct {
	defaultHook func() database.ExternalServiceStore
	hooks       []func() database.ExternalServiceStore
	history     []StoreExternalServiceStoreFuncCall
	mutex       sync.Mutex
}

// ExternalServiceStore delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) ExternalServiceStore() database.ExternalServiceStore {
	r0 := m.ExternalServiceStoreFunc.nextHook()()
	m.ExternalServiceStoreFunc.appendCall(StoreExternalServiceStoreFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ExternalServiceStore
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreExternalServiceStoreFunc) SetDefaultHook(hook func() database.ExternalServiceStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExternalServiceStore method of the parent MockStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StoreExternalServiceStoreFunc) PushHook(hook func() database.ExternalServiceStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreExternalServiceStoreFunc) SetDefaultReturn(r0 database.ExternalServiceStore) {
	f.SetDefaultHook(func() database.ExternalServiceStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreExternalServiceStoreFunc) PushReturn(r0 database.ExternalServiceStore) {
	f.PushHook(func() database.ExternalServiceStore {
		return r0
	})
}

func (f *StoreExternalServiceStoreFunc) nextHook() func() database.ExternalServiceStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreExternalServiceStoreFunc) appendCall(r0 StoreExternalServiceStoreFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreExternalServiceStoreFuncCall objects
// describing the invocations of this function.
func (f *StoreExternalServiceStoreFunc) History() []StoreExternalServiceStoreFuncCall {
	f.mutex.Lock()
	history := make([]StoreExternalServiceStoreFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreExternalServiceStoreFuncCall is an object that describes an
// invocation of method ExternalServiceStore on an instance of MockStore.
type StoreExternalServiceStoreFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.ExternalServiceStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreExternalServiceStoreFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreExternalServiceStoreFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreGitserverReposStoreFunc describes the behavior when the
// GitserverReposStore method of the parent MockStore instance is invoked.
type StoreGitserverReposStoreFunc struct {
	defaultHook func() database.GitserverRepoStore
	hooks       []func() database.GitserverRepoStore
	history     []StoreGitserverReposStoreFuncCall
	mutex       sync.Mutex
}

// GitserverReposStore delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStore) GitserverReposStore() database.GitserverRepoStore {
	r0 := m.GitserverReposStoreFunc.nextHook()()
	m.GitserverReposStoreFunc.appendCall(StoreGitserverReposStoreFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GitserverReposStore
// method of the parent MockStore instance is invoked and the hook queue is
// empty.
func (f *StoreGitserverReposStoreFunc) SetDefaultHook(hook func() database.GitserverRepoStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GitserverReposStore method of the parent MockStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StoreGitserverReposStoreFunc) PushHook(hook func() database.GitserverRepoStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreGitserverReposStoreFunc) SetDefaultReturn(r0 database.GitserverRepoStore) {
	f.SetDefaultHook(func() database.GitserverRepoStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreGitserverReposStoreFunc) PushReturn(r0 database.GitserverRepoStore) {
	f.PushHook(func() database.GitserverRepoStore {
		return r0
	})
}

func (f *StoreGitserverReposStoreFunc) nextHook() func() database.GitserverRepoStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreGitserverReposStoreFunc) appendCall(r0 StoreGitserverReposStoreFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreGitserverReposStoreFuncCall objects
// describing the invocations of this function.
func (f *StoreGitserverReposStoreFunc) History() []StoreGitserverReposStoreFuncCall {
	f.mutex.Lock()
	history := make([]StoreGitserverReposStoreFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreGitserverReposStoreFuncCall is an object that describes an
// invocation of method GitserverReposStore on an instance of MockStore.
type StoreGitserverReposStoreFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.GitserverRepoStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreGitserverReposStoreFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreGitserverReposStoreFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreHandleFunc describes the behavior when the Handle method of the
// parent MockStore instance is invoked.
type StoreHandleFunc struct {
	defaultHook func() *basestore.TransactableHandle
	hooks       []func() *basestore.TransactableHandle
	history     []StoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStore) Handle() *basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(StoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreHandleFunc) SetDefaultHook(hook func() *basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StoreHandleFunc) PushHook(hook func() *basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreHandleFunc) SetDefaultReturn(r0 *basestore.TransactableHandle) {
	f.SetDefaultHook(func() *basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreHandleFunc) PushReturn(r0 *basestore.TransactableHandle) {
	f.PushHook(func() *basestore.TransactableHandle {
		return r0
	})
}

func (f *StoreHandleFunc) nextHook() func() *basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreHandleFunc) appendCall(r0 StoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreHandleFuncCall objects describing the
// invocations of this function.
func (f *StoreHandleFunc) History() []StoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]StoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreHandleFuncCall is an object that describes an invocation of method
// Handle on an instance of MockStore.
type StoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreListExternalServicePrivateRepoIDsByUserIDFunc describes the behavior
// when the ListExternalServicePrivateRepoIDsByUserID method of the parent
// MockStore instance is invoked.
type StoreListExternalServicePrivateRepoIDsByUserIDFunc struct {
	defaultHook func(context.Context, int32) ([]api.RepoID, error)
	hooks       []func(context.Context, int32) ([]api.RepoID, error)
	history     []StoreListExternalServicePrivateRepoIDsByUserIDFuncCall
	mutex       sync.Mutex
}

// ListExternalServicePrivateRepoIDsByUserID delegates to the next hook
// function in the queue and stores the parameter and result values of this
// invocation.
func (m *MockStore) ListExternalServicePrivateRepoIDsByUserID(v0 context.Context, v1 int32) ([]api.RepoID, error) {
	r0, r1 := m.ListExternalServicePrivateRepoIDsByUserIDFunc.nextHook()(v0, v1)
	m.ListExternalServicePrivateRepoIDsByUserIDFunc.appendCall(StoreListExternalServicePrivateRepoIDsByUserIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ListExternalServicePrivateRepoIDsByUserID method of the parent MockStore
// instance is invoked and the hook queue is empty.
func (f *StoreListExternalServicePrivateRepoIDsByUserIDFunc) SetDefaultHook(hook func(context.Context, int32) ([]api.RepoID, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListExternalServicePrivateRepoIDsByUserID method of the parent MockStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *StoreListExternalServicePrivateRepoIDsByUserIDFunc) PushHook(hook func(context.Context, int32) ([]api.RepoID, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreListExternalServicePrivateRepoIDsByUserIDFunc) SetDefaultReturn(r0 []api.RepoID, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) ([]api.RepoID, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreListExternalServicePrivateRepoIDsByUserIDFunc) PushReturn(r0 []api.RepoID, r1 error) {
	f.PushHook(func(context.Context, int32) ([]api.RepoID, error) {
		return r0, r1
	})
}

func (f *StoreListExternalServicePrivateRepoIDsByUserIDFunc) nextHook() func(context.Context, int32) ([]api.RepoID, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreListExternalServicePrivateRepoIDsByUserIDFunc) appendCall(r0 StoreListExternalServicePrivateRepoIDsByUserIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// StoreListExternalServicePrivateRepoIDsByUserIDFuncCall objects describing
// the invocations of this function.
func (f *StoreListExternalServicePrivateRepoIDsByUserIDFunc) History() []StoreListExternalServicePrivateRepoIDsByUserIDFuncCall {
	f.mutex.Lock()
	history := make([]StoreListExternalServicePrivateRepoIDsByUserIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreListExternalServicePrivateRepoIDsByUserIDFuncCall is an object that
// describes an invocation of method
// ListExternalServicePrivateRepoIDsByUserID on an instance of MockStore.
type StoreListExternalServicePrivateRepoIDsByUserIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []api.RepoID
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreListExternalServicePrivateRepoIDsByUserIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreListExternalServicePrivateRepoIDsByUserIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreListExternalServiceUserIDsByRepoIDFunc describes the behavior when
// the ListExternalServiceUserIDsByRepoID method of the parent MockStore
// instance is invoked.
type StoreListExternalServiceUserIDsByRepoIDFunc struct {
	defaultHook func(context.Context, api.RepoID) ([]int32, error)
	hooks       []func(context.Context, api.RepoID) ([]int32, error)
	history     []StoreListExternalServiceUserIDsByRepoIDFuncCall
	mutex       sync.Mutex
}

// ListExternalServiceUserIDsByRepoID delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockStore) ListExternalServiceUserIDsByRepoID(v0 context.Context, v1 api.RepoID) ([]int32, error) {
	r0, r1 := m.ListExternalServiceUserIDsByRepoIDFunc.nextHook()(v0, v1)
	m.ListExternalServiceUserIDsByRepoIDFunc.appendCall(StoreListExternalServiceUserIDsByRepoIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ListExternalServiceUserIDsByRepoID method of the parent MockStore
// instance is invoked and the hook queue is empty.
func (f *StoreListExternalServiceUserIDsByRepoIDFunc) SetDefaultHook(hook func(context.Context, api.RepoID) ([]int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListExternalServiceUserIDsByRepoID method of the parent MockStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *StoreListExternalServiceUserIDsByRepoIDFunc) PushHook(hook func(context.Context, api.RepoID) ([]int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreListExternalServiceUserIDsByRepoIDFunc) SetDefaultReturn(r0 []int32, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoID) ([]int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreListExternalServiceUserIDsByRepoIDFunc) PushReturn(r0 []int32, r1 error) {
	f.PushHook(func(context.Context, api.RepoID) ([]int32, error) {
		return r0, r1
	})
}

func (f *StoreListExternalServiceUserIDsByRepoIDFunc) nextHook() func(context.Context, api.RepoID) ([]int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreListExternalServiceUserIDsByRepoIDFunc) appendCall(r0 StoreListExternalServiceUserIDsByRepoIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// StoreListExternalServiceUserIDsByRepoIDFuncCall objects describing the
// invocations of this function.
func (f *StoreListExternalServiceUserIDsByRepoIDFunc) History() []StoreListExternalServiceUserIDsByRepoIDFuncCall {
	f.mutex.Lock()
	history := make([]StoreListExternalServiceUserIDsByRepoIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreListExternalServiceUserIDsByRepoIDFuncCall is an object that
// describes an invocation of method ListExternalServiceUserIDsByRepoID on
// an instance of MockStore.
type StoreListExternalServiceUserIDsByRepoIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreListExternalServiceUserIDsByRepoIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreListExternalServiceUserIDsByRepoIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreListSyncJobsFunc describes the behavior when the ListSyncJobs method
// of the parent MockStore instance is invoked.
type StoreListSyncJobsFunc struct {
	defaultHook func(context.Context) ([]SyncJob, error)
	hooks       []func(context.Context) ([]SyncJob, error)
	history     []StoreListSyncJobsFuncCall
	mutex       sync.Mutex
}

// ListSyncJobs delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStore) ListSyncJobs(v0 context.Context) ([]SyncJob, error) {
	r0, r1 := m.ListSyncJobsFunc.nextHook()(v0)
	m.ListSyncJobsFunc.appendCall(StoreListSyncJobsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListSyncJobs method
// of the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreListSyncJobsFunc) SetDefaultHook(hook func(context.Context) ([]SyncJob, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListSyncJobs method of the parent MockStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreListSyncJobsFunc) PushHook(hook func(context.Context) ([]SyncJob, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreListSyncJobsFunc) SetDefaultReturn(r0 []SyncJob, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]SyncJob, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreListSyncJobsFunc) PushReturn(r0 []SyncJob, r1 error) {
	f.PushHook(func(context.Context) ([]SyncJob, error) {
		return r0, r1
	})
}

func (f *StoreListSyncJobsFunc) nextHook() func(context.Context) ([]SyncJob, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreListSyncJobsFunc) appendCall(r0 StoreListSyncJobsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreListSyncJobsFuncCall objects
// describing the invocations of this function.
func (f *StoreListSyncJobsFunc) History() []StoreListSyncJobsFuncCall {
	f.mutex.Lock()
	history := make([]StoreListSyncJobsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreListSyncJobsFuncCall is an object that describes an invocation of
// method ListSyncJobs on an instance of MockStore.
type StoreListSyncJobsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []SyncJob
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreListSyncJobsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreListSyncJobsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreRepoStoreFunc describes the behavior when the RepoStore method of
// the parent MockStore instance is invoked.
type StoreRepoStoreFunc struct {
	defaultHook func() database.RepoStore
	hooks       []func() database.RepoStore
	history     []StoreRepoStoreFuncCall
	mutex       sync.Mutex
}

// RepoStore delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStore) RepoStore() database.RepoStore {
	r0 := m.RepoStoreFunc.nextHook()()
	m.RepoStoreFunc.appendCall(StoreRepoStoreFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the RepoStore method of
// the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreRepoStoreFunc) SetDefaultHook(hook func() database.RepoStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepoStore method of the parent MockStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StoreRepoStoreFunc) PushHook(hook func() database.RepoStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreRepoStoreFunc) SetDefaultReturn(r0 database.RepoStore) {
	f.SetDefaultHook(func() database.RepoStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreRepoStoreFunc) PushReturn(r0 database.RepoStore) {
	f.PushHook(func() database.RepoStore {
		return r0
	})
}

func (f *StoreRepoStoreFunc) nextHook() func() database.RepoStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreRepoStoreFunc) appendCall(r0 StoreRepoStoreFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreRepoStoreFuncCall objects describing
// the invocations of this function.
func (f *StoreRepoStoreFunc) History() []StoreRepoStoreFuncCall {
	f.mutex.Lock()
	history := make([]StoreRepoStoreFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreRepoStoreFuncCall is an object that describes an invocation of
// method RepoStore on an instance of MockStore.
type StoreRepoStoreFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.RepoStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreRepoStoreFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreRepoStoreFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreSetLoggerFunc describes the behavior when the SetLogger method of
// the parent MockStore instance is invoked.
type StoreSetLoggerFunc struct {
	defaultHook func(logging.ErrorLogger)
	hooks       []func(logging.ErrorLogger)
	history     []StoreSetLoggerFuncCall
	mutex       sync.Mutex
}

// SetLogger delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStore) SetLogger(v0 logging.ErrorLogger) {
	m.SetLoggerFunc.nextHook()(v0)
	m.SetLoggerFunc.appendCall(StoreSetLoggerFuncCall{v0})
	return
}

// SetDefaultHook sets function that is called when the SetLogger method of
// the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreSetLoggerFunc) SetDefaultHook(hook func(logging.ErrorLogger)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetLogger method of the parent MockStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StoreSetLoggerFunc) PushHook(hook func(logging.ErrorLogger)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreSetLoggerFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(logging.ErrorLogger) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreSetLoggerFunc) PushReturn() {
	f.PushHook(func(logging.ErrorLogger) {
		return
	})
}

func (f *StoreSetLoggerFunc) nextHook() func(logging.ErrorLogger) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreSetLoggerFunc) appendCall(r0 StoreSetLoggerFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreSetLoggerFuncCall objects describing
// the invocations of this function.
func (f *StoreSetLoggerFunc) History() []StoreSetLoggerFuncCall {
	f.mutex.Lock()
	history := make([]StoreSetLoggerFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreSetLoggerFuncCall is an object that describes an invocation of
// method SetLogger on an instance of MockStore.
type StoreSetLoggerFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 logging.ErrorLogger
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreSetLoggerFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreSetLoggerFuncCall) Results() []interface{} {
	return []interface{}{}
}

// StoreSetMetricsFunc describes the behavior when the SetMetrics method of
// the parent MockStore instance is invoked.
type StoreSetMetricsFunc struct {
	defaultHook func(StoreMetrics)
	hooks       []func(StoreMetrics)
	history     []StoreSetMetricsFuncCall
	mutex       sync.Mutex
}

// SetMetrics delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStore) SetMetrics(v0 StoreMetrics) {
	m.SetMetricsFunc.nextHook()(v0)
	m.SetMetricsFunc.appendCall(StoreSetMetricsFuncCall{v0})
	return
}

// SetDefaultHook sets function that is called when the SetMetrics method of
// the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreSetMetricsFunc) SetDefaultHook(hook func(StoreMetrics)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetMetrics method of the parent MockStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreSetMetricsFunc) PushHook(hook func(StoreMetrics)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreSetMetricsFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(StoreMetrics) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreSetMetricsFunc) PushReturn() {
	f.PushHook(func(StoreMetrics) {
		return
	})
}

func (f *StoreSetMetricsFunc) nextHook() func(StoreMetrics) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreSetMetricsFunc) appendCall(r0 StoreSetMetricsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreSetMetricsFuncCall objects describing
// the invocations of this function.
func (f *StoreSetMetricsFunc) History() []StoreSetMetricsFuncCall {
	f.mutex.Lock()
	history := make([]StoreSetMetricsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreSetMetricsFuncCall is an object that describes an invocation of
// method SetMetrics on an instance of MockStore.
type StoreSetMetricsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 StoreMetrics
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreSetMetricsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreSetMetricsFuncCall) Results() []interface{} {
	return []interface{}{}
}

// StoreSetTracerFunc describes the behavior when the SetTracer method of
// the parent MockStore instance is invoked.
type StoreSetTracerFunc struct {
	defaultHook func(trace.Tracer)
	hooks       []func(trace.Tracer)
	history     []StoreSetTracerFuncCall
	mutex       sync.Mutex
}

// SetTracer delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStore) SetTracer(v0 trace.Tracer) {
	m.SetTracerFunc.nextHook()(v0)
	m.SetTracerFunc.appendCall(StoreSetTracerFuncCall{v0})
	return
}

// SetDefaultHook sets function that is called when the SetTracer method of
// the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreSetTracerFunc) SetDefaultHook(hook func(trace.Tracer)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetTracer method of the parent MockStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StoreSetTracerFunc) PushHook(hook func(trace.Tracer)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreSetTracerFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(trace.Tracer) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreSetTracerFunc) PushReturn() {
	f.PushHook(func(trace.Tracer) {
		return
	})
}

func (f *StoreSetTracerFunc) nextHook() func(trace.Tracer) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreSetTracerFunc) appendCall(r0 StoreSetTracerFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreSetTracerFuncCall objects describing
// the invocations of this function.
func (f *StoreSetTracerFunc) History() []StoreSetTracerFuncCall {
	f.mutex.Lock()
	history := make([]StoreSetTracerFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreSetTracerFuncCall is an object that describes an invocation of
// method SetTracer on an instance of MockStore.
type StoreSetTracerFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 trace.Tracer
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreSetTracerFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreSetTracerFuncCall) Results() []interface{} {
	return []interface{}{}
}

// StoreTransactFunc describes the behavior when the Transact method of the
// parent MockStore instance is invoked.
type StoreTransactFunc struct {
	defaultHook func(context.Context) (Store, error)
	hooks       []func(context.Context) (Store, error)
	history     []StoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStore) Transact(v0 context.Context) (Store, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(StoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreTransactFunc) SetDefaultHook(hook func(context.Context) (Store, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StoreTransactFunc) PushHook(hook func(context.Context) (Store, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreTransactFunc) SetDefaultReturn(r0 Store, r1 error) {
	f.SetDefaultHook(func(context.Context) (Store, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreTransactFunc) PushReturn(r0 Store, r1 error) {
	f.PushHook(func(context.Context) (Store, error) {
		return r0, r1
	})
}

func (f *StoreTransactFunc) nextHook() func(context.Context) (Store, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreTransactFunc) appendCall(r0 StoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreTransactFuncCall objects describing
// the invocations of this function.
func (f *StoreTransactFunc) History() []StoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]StoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreTransactFuncCall is an object that describes an invocation of method
// Transact on an instance of MockStore.
type StoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 Store
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreUpdateExternalServiceRepoFunc describes the behavior when the
// UpdateExternalServiceRepo method of the parent MockStore instance is
// invoked.
type StoreUpdateExternalServiceRepoFunc struct {
	defaultHook func(context.Context, *types.ExternalService, *types.Repo) error
	hooks       []func(context.Context, *types.ExternalService, *types.Repo) error
	history     []StoreUpdateExternalServiceRepoFuncCall
	mutex       sync.Mutex
}

// UpdateExternalServiceRepo delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockStore) UpdateExternalServiceRepo(v0 context.Context, v1 *types.ExternalService, v2 *types.Repo) error {
	r0 := m.UpdateExternalServiceRepoFunc.nextHook()(v0, v1, v2)
	m.UpdateExternalServiceRepoFunc.appendCall(StoreUpdateExternalServiceRepoFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// UpdateExternalServiceRepo method of the parent MockStore instance is
// invoked and the hook queue is empty.
func (f *StoreUpdateExternalServiceRepoFunc) SetDefaultHook(hook func(context.Context, *types.ExternalService, *types.Repo) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateExternalServiceRepo method of the parent MockStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *StoreUpdateExternalServiceRepoFunc) PushHook(hook func(context.Context, *types.ExternalService, *types.Repo) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreUpdateExternalServiceRepoFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *types.ExternalService, *types.Repo) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreUpdateExternalServiceRepoFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *types.ExternalService, *types.Repo) error {
		return r0
	})
}

func (f *StoreUpdateExternalServiceRepoFunc) nextHook() func(context.Context, *types.ExternalService, *types.Repo) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreUpdateExternalServiceRepoFunc) appendCall(r0 StoreUpdateExternalServiceRepoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreUpdateExternalServiceRepoFuncCall
// objects describing the invocations of this function.
func (f *StoreUpdateExternalServiceRepoFunc) History() []StoreUpdateExternalServiceRepoFuncCall {
	f.mutex.Lock()
	history := make([]StoreUpdateExternalServiceRepoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreUpdateExternalServiceRepoFuncCall is an object that describes an
// invocation of method UpdateExternalServiceRepo on an instance of
// MockStore.
type StoreUpdateExternalServiceRepoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *types.ExternalService
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *types.Repo
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreUpdateExternalServiceRepoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreUpdateExternalServiceRepoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreWithFunc describes the behavior when the With method of the parent
// MockStore instance is invoked.
type StoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) Store
	hooks       []func(basestore.ShareableStore) Store
	history     []StoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStore) With(v0 basestore.ShareableStore) Store {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(StoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockStore instance is invoked and the hook queue is empty.
func (f *StoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) Store) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StoreWithFunc) PushHook(hook func(basestore.ShareableStore) Store) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreWithFunc) SetDefaultReturn(r0 Store) {
	f.SetDefaultHook(func(basestore.ShareableStore) Store {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreWithFunc) PushReturn(r0 Store) {
	f.PushHook(func(basestore.ShareableStore) Store {
		return r0
	})
}

func (f *StoreWithFunc) nextHook() func(basestore.ShareableStore) Store {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreWithFunc) appendCall(r0 StoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreWithFuncCall objects describing the
// invocations of this function.
func (f *StoreWithFunc) History() []StoreWithFuncCall {
	f.mutex.Lock()
	history := make([]StoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreWithFuncCall is an object that describes an invocation of method
// With on an instance of MockStore.
type StoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 Store
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
