// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package gitserver

import (
	"context"
	"io"
	"io/fs"
	"net/http"
	"sync"
	"time"

	diff "github.com/sourcegraph/go-diff/diff"
	api "github.com/sourcegraph/sourcegraph/internal/api"
	authz "github.com/sourcegraph/sourcegraph/internal/authz"
	gitdomain "github.com/sourcegraph/sourcegraph/internal/gitserver/gitdomain"
	protocol "github.com/sourcegraph/sourcegraph/internal/gitserver/protocol"
)

// MockClient is a mock implementation of the Client interface (from the
// package github.com/sourcegraph/sourcegraph/internal/gitserver) used for
// unit testing.
type MockClient struct {
	// AddrForRepoFunc is an instance of a mock function object controlling
	// the behavior of the method AddrForRepo.
	AddrForRepoFunc *ClientAddrForRepoFunc
	// AddrsFunc is an instance of a mock function object controlling the
	// behavior of the method Addrs.
	AddrsFunc *ClientAddrsFunc
	// ArchiveReaderFunc is an instance of a mock function object
	// controlling the behavior of the method ArchiveReader.
	ArchiveReaderFunc *ClientArchiveReaderFunc
	// BatchLogFunc is an instance of a mock function object controlling the
	// behavior of the method BatchLog.
	BatchLogFunc *ClientBatchLogFunc
	// BlameFileFunc is an instance of a mock function object controlling
	// the behavior of the method BlameFile.
	BlameFileFunc *ClientBlameFileFunc
	// BranchesContainingFunc is an instance of a mock function object
	// controlling the behavior of the method BranchesContaining.
	BranchesContainingFunc *ClientBranchesContainingFunc
	// CommitDateFunc is an instance of a mock function object controlling
	// the behavior of the method CommitDate.
	CommitDateFunc *ClientCommitDateFunc
	// CommitExistsFunc is an instance of a mock function object controlling
	// the behavior of the method CommitExists.
	CommitExistsFunc *ClientCommitExistsFunc
	// CommitGraphFunc is an instance of a mock function object controlling
	// the behavior of the method CommitGraph.
	CommitGraphFunc *ClientCommitGraphFunc
	// CommitLogFunc is an instance of a mock function object controlling
	// the behavior of the method CommitLog.
	CommitLogFunc *ClientCommitLogFunc
	// CommitsFunc is an instance of a mock function object controlling the
	// behavior of the method Commits.
	CommitsFunc *ClientCommitsFunc
	// CommitsExistFunc is an instance of a mock function object controlling
	// the behavior of the method CommitsExist.
	CommitsExistFunc *ClientCommitsExistFunc
	// CommitsUniqueToBranchFunc is an instance of a mock function object
	// controlling the behavior of the method CommitsUniqueToBranch.
	CommitsUniqueToBranchFunc *ClientCommitsUniqueToBranchFunc
	// ContributorCountFunc is an instance of a mock function object
	// controlling the behavior of the method ContributorCount.
	ContributorCountFunc *ClientContributorCountFunc
	// CreateCommitFromPatchFunc is an instance of a mock function object
	// controlling the behavior of the method CreateCommitFromPatch.
	CreateCommitFromPatchFunc *ClientCreateCommitFromPatchFunc
	// DiffFunc is an instance of a mock function object controlling the
	// behavior of the method Diff.
	DiffFunc *ClientDiffFunc
	// DiffPathFunc is an instance of a mock function object controlling the
	// behavior of the method DiffPath.
	DiffPathFunc *ClientDiffPathFunc
	// DiffSymbolsFunc is an instance of a mock function object controlling
	// the behavior of the method DiffSymbols.
	DiffSymbolsFunc *ClientDiffSymbolsFunc
	// FirstEverCommitFunc is an instance of a mock function object
	// controlling the behavior of the method FirstEverCommit.
	FirstEverCommitFunc *ClientFirstEverCommitFunc
	// GetBehindAheadFunc is an instance of a mock function object
	// controlling the behavior of the method GetBehindAhead.
	GetBehindAheadFunc *ClientGetBehindAheadFunc
	// GetCommitFunc is an instance of a mock function object controlling
	// the behavior of the method GetCommit.
	GetCommitFunc *ClientGetCommitFunc
	// GetCommitsFunc is an instance of a mock function object controlling
	// the behavior of the method GetCommits.
	GetCommitsFunc *ClientGetCommitsFunc
	// GetDefaultBranchFunc is an instance of a mock function object
	// controlling the behavior of the method GetDefaultBranch.
	GetDefaultBranchFunc *ClientGetDefaultBranchFunc
	// GetObjectFunc is an instance of a mock function object controlling
	// the behavior of the method GetObject.
	GetObjectFunc *ClientGetObjectFunc
	// HasCommitAfterFunc is an instance of a mock function object
	// controlling the behavior of the method HasCommitAfter.
	HasCommitAfterFunc *ClientHasCommitAfterFunc
	// HeadFunc is an instance of a mock function object controlling the
	// behavior of the method Head.
	HeadFunc *ClientHeadFunc
	// IsRepoCloneableFunc is an instance of a mock function object
	// controlling the behavior of the method IsRepoCloneable.
	IsRepoCloneableFunc *ClientIsRepoCloneableFunc
	// ListBranchesFunc is an instance of a mock function object controlling
	// the behavior of the method ListBranches.
	ListBranchesFunc *ClientListBranchesFunc
	// ListDirectoryChildrenFunc is an instance of a mock function object
	// controlling the behavior of the method ListDirectoryChildren.
	ListDirectoryChildrenFunc *ClientListDirectoryChildrenFunc
	// ListFilesFunc is an instance of a mock function object controlling
	// the behavior of the method ListFiles.
	ListFilesFunc *ClientListFilesFunc
	// ListRefsFunc is an instance of a mock function object controlling the
	// behavior of the method ListRefs.
	ListRefsFunc *ClientListRefsFunc
	// ListTagsFunc is an instance of a mock function object controlling the
	// behavior of the method ListTags.
	ListTagsFunc *ClientListTagsFunc
	// LogReverseEachFunc is an instance of a mock function object
	// controlling the behavior of the method LogReverseEach.
	LogReverseEachFunc *ClientLogReverseEachFunc
	// LsFilesFunc is an instance of a mock function object controlling the
	// behavior of the method LsFiles.
	LsFilesFunc *ClientLsFilesFunc
	// MergeBaseFunc is an instance of a mock function object controlling
	// the behavior of the method MergeBase.
	MergeBaseFunc *ClientMergeBaseFunc
	// NewFileReaderFunc is an instance of a mock function object
	// controlling the behavior of the method NewFileReader.
	NewFileReaderFunc *ClientNewFileReaderFunc
	// P4ExecFunc is an instance of a mock function object controlling the
	// behavior of the method P4Exec.
	P4ExecFunc *ClientP4ExecFunc
	// P4GetChangelistFunc is an instance of a mock function object
	// controlling the behavior of the method P4GetChangelist.
	P4GetChangelistFunc *ClientP4GetChangelistFunc
	// ReadDirFunc is an instance of a mock function object controlling the
	// behavior of the method ReadDir.
	ReadDirFunc *ClientReadDirFunc
	// ReadFileFunc is an instance of a mock function object controlling the
	// behavior of the method ReadFile.
	ReadFileFunc *ClientReadFileFunc
	// RefDescriptionsFunc is an instance of a mock function object
	// controlling the behavior of the method RefDescriptions.
	RefDescriptionsFunc *ClientRefDescriptionsFunc
	// RemoveFunc is an instance of a mock function object controlling the
	// behavior of the method Remove.
	RemoveFunc *ClientRemoveFunc
	// RemoveFromFunc is an instance of a mock function object controlling
	// the behavior of the method RemoveFrom.
	RemoveFromFunc *ClientRemoveFromFunc
	// RepoCloneProgressFunc is an instance of a mock function object
	// controlling the behavior of the method RepoCloneProgress.
	RepoCloneProgressFunc *ClientRepoCloneProgressFunc
	// ReposStatsFunc is an instance of a mock function object controlling
	// the behavior of the method ReposStats.
	ReposStatsFunc *ClientReposStatsFunc
	// RequestRepoCloneFunc is an instance of a mock function object
	// controlling the behavior of the method RequestRepoClone.
	RequestRepoCloneFunc *ClientRequestRepoCloneFunc
	// RequestRepoUpdateFunc is an instance of a mock function object
	// controlling the behavior of the method RequestRepoUpdate.
	RequestRepoUpdateFunc *ClientRequestRepoUpdateFunc
	// ResolveRevisionFunc is an instance of a mock function object
	// controlling the behavior of the method ResolveRevision.
	ResolveRevisionFunc *ClientResolveRevisionFunc
	// ResolveRevisionsFunc is an instance of a mock function object
	// controlling the behavior of the method ResolveRevisions.
	ResolveRevisionsFunc *ClientResolveRevisionsFunc
	// RevListFunc is an instance of a mock function object controlling the
	// behavior of the method RevList.
	RevListFunc *ClientRevListFunc
	// SearchFunc is an instance of a mock function object controlling the
	// behavior of the method Search.
	SearchFunc *ClientSearchFunc
	// StatFunc is an instance of a mock function object controlling the
	// behavior of the method Stat.
	StatFunc *ClientStatFunc
	// StreamBlameFileFunc is an instance of a mock function object
	// controlling the behavior of the method StreamBlameFile.
	StreamBlameFileFunc *ClientStreamBlameFileFunc
}

// NewMockClient creates a new mock of the Client interface. All methods
// return zero values for all results, unless overwritten.
func NewMockClient() *MockClient {
	return &MockClient{
		AddrForRepoFunc: &ClientAddrForRepoFunc{
			defaultHook: func(api.RepoName) (r0 string) {
				return
			},
		},
		AddrsFunc: &ClientAddrsFunc{
			defaultHook: func() (r0 []string) {
				return
			},
		},
		ArchiveReaderFunc: &ClientArchiveReaderFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, ArchiveOptions) (r0 io.ReadCloser, r1 error) {
				return
			},
		},
		BatchLogFunc: &ClientBatchLogFunc{
			defaultHook: func(context.Context, BatchLogOptions, BatchLogCallback) (r0 error) {
				return
			},
		},
		BlameFileFunc: &ClientBlameFileFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, *BlameOptions) (r0 []*Hunk, r1 error) {
				return
			},
		},
		BranchesContainingFunc: &ClientBranchesContainingFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID) (r0 []string, r1 error) {
				return
			},
		},
		CommitDateFunc: &ClientCommitDateFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID) (r0 string, r1 time.Time, r2 bool, r3 error) {
				return
			},
		},
		CommitExistsFunc: &ClientCommitExistsFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID) (r0 bool, r1 error) {
				return
			},
		},
		CommitGraphFunc: &ClientCommitGraphFunc{
			defaultHook: func(context.Context, api.RepoName, CommitGraphOptions) (r0 *gitdomain.CommitGraph, r1 error) {
				return
			},
		},
		CommitLogFunc: &ClientCommitLogFunc{
			defaultHook: func(context.Context, api.RepoName, time.Time) (r0 []CommitLog, r1 error) {
				return
			},
		},
		CommitsFunc: &ClientCommitsFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, CommitsOptions) (r0 []*gitdomain.Commit, r1 error) {
				return
			},
		},
		CommitsExistFunc: &ClientCommitsExistFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, []api.RepoCommit) (r0 []bool, r1 error) {
				return
			},
		},
		CommitsUniqueToBranchFunc: &ClientCommitsUniqueToBranchFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, bool, *time.Time) (r0 map[string]time.Time, r1 error) {
				return
			},
		},
		ContributorCountFunc: &ClientContributorCountFunc{
			defaultHook: func(context.Context, api.RepoName, ContributorOptions) (r0 []*gitdomain.ContributorCount, r1 error) {
				return
			},
		},
		CreateCommitFromPatchFunc: &ClientCreateCommitFromPatchFunc{
			defaultHook: func(context.Context, protocol.CreateCommitFromPatchRequest) (r0 *protocol.CreateCommitFromPatchResponse, r1 error) {
				return
			},
		},
		DiffFunc: &ClientDiffFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, DiffOptions) (r0 *DiffFileIterator, r1 error) {
				return
			},
		},
		DiffPathFunc: &ClientDiffPathFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, string, string) (r0 []*diff.Hunk, r1 error) {
				return
			},
		},
		DiffSymbolsFunc: &ClientDiffSymbolsFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID, api.CommitID) (r0 []byte, r1 error) {
				return
			},
		},
		FirstEverCommitFunc: &ClientFirstEverCommitFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName) (r0 *gitdomain.Commit, r1 error) {
				return
			},
		},
		GetBehindAheadFunc: &ClientGetBehindAheadFunc{
			defaultHook: func(context.Context, api.RepoName, string, string) (r0 *gitdomain.BehindAhead, r1 error) {
				return
			},
		},
		GetCommitFunc: &ClientGetCommitFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, ResolveRevisionOptions) (r0 *gitdomain.Commit, r1 error) {
				return
			},
		},
		GetCommitsFunc: &ClientGetCommitsFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, []api.RepoCommit, bool) (r0 []*gitdomain.Commit, r1 error) {
				return
			},
		},
		GetDefaultBranchFunc: &ClientGetDefaultBranchFunc{
			defaultHook: func(context.Context, api.RepoName, bool) (r0 string, r1 api.CommitID, r2 error) {
				return
			},
		},
		GetObjectFunc: &ClientGetObjectFunc{
			defaultHook: func(context.Context, api.RepoName, string) (r0 *gitdomain.GitObject, r1 error) {
				return
			},
		},
		HasCommitAfterFunc: &ClientHasCommitAfterFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, string) (r0 bool, r1 error) {
				return
			},
		},
		HeadFunc: &ClientHeadFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName) (r0 string, r1 bool, r2 error) {
				return
			},
		},
		IsRepoCloneableFunc: &ClientIsRepoCloneableFunc{
			defaultHook: func(context.Context, api.RepoName) (r0 error) {
				return
			},
		},
		ListBranchesFunc: &ClientListBranchesFunc{
			defaultHook: func(context.Context, api.RepoName, BranchesOptions) (r0 []*gitdomain.Branch, r1 error) {
				return
			},
		},
		ListDirectoryChildrenFunc: &ClientListDirectoryChildrenFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, []string) (r0 map[string][]string, r1 error) {
				return
			},
		},
		ListFilesFunc: &ClientListFilesFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, *protocol.ListFilesOpts) (r0 []string, r1 error) {
				return
			},
		},
		ListRefsFunc: &ClientListRefsFunc{
			defaultHook: func(context.Context, api.RepoName) (r0 []gitdomain.Ref, r1 error) {
				return
			},
		},
		ListTagsFunc: &ClientListTagsFunc{
			defaultHook: func(context.Context, api.RepoName, ...string) (r0 []*gitdomain.Tag, r1 error) {
				return
			},
		},
		LogReverseEachFunc: &ClientLogReverseEachFunc{
			defaultHook: func(context.Context, string, string, int, func(entry gitdomain.LogEntry) error) (r0 error) {
				return
			},
		},
		LsFilesFunc: &ClientLsFilesFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, ...gitdomain.Pathspec) (r0 []string, r1 error) {
				return
			},
		},
		MergeBaseFunc: &ClientMergeBaseFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID, api.CommitID) (r0 api.CommitID, r1 error) {
				return
			},
		},
		NewFileReaderFunc: &ClientNewFileReaderFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, string) (r0 io.ReadCloser, r1 error) {
				return
			},
		},
		P4ExecFunc: &ClientP4ExecFunc{
			defaultHook: func(context.Context, string, string, string, ...string) (r0 io.ReadCloser, r1 http.Header, r2 error) {
				return
			},
		},
		P4GetChangelistFunc: &ClientP4GetChangelistFunc{
			defaultHook: func(context.Context, string, PerforceCredentials) (r0 *protocol.PerforceChangelist, r1 error) {
				return
			},
		},
		ReadDirFunc: &ClientReadDirFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, string, bool) (r0 []fs.FileInfo, r1 error) {
				return
			},
		},
		ReadFileFunc: &ClientReadFileFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, string) (r0 []byte, r1 error) {
				return
			},
		},
		RefDescriptionsFunc: &ClientRefDescriptionsFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, ...string) (r0 map[string][]gitdomain.RefDescription, r1 error) {
				return
			},
		},
		RemoveFunc: &ClientRemoveFunc{
			defaultHook: func(context.Context, api.RepoName) (r0 error) {
				return
			},
		},
		RemoveFromFunc: &ClientRemoveFromFunc{
			defaultHook: func(context.Context, api.RepoName, string) (r0 error) {
				return
			},
		},
		RepoCloneProgressFunc: &ClientRepoCloneProgressFunc{
			defaultHook: func(context.Context, ...api.RepoName) (r0 *protocol.RepoCloneProgressResponse, r1 error) {
				return
			},
		},
		ReposStatsFunc: &ClientReposStatsFunc{
			defaultHook: func(context.Context) (r0 map[string]*protocol.ReposStats, r1 error) {
				return
			},
		},
		RequestRepoCloneFunc: &ClientRequestRepoCloneFunc{
			defaultHook: func(context.Context, api.RepoName) (r0 *protocol.RepoCloneResponse, r1 error) {
				return
			},
		},
		RequestRepoUpdateFunc: &ClientRequestRepoUpdateFunc{
			defaultHook: func(context.Context, api.RepoName, time.Duration) (r0 *protocol.RepoUpdateResponse, r1 error) {
				return
			},
		},
		ResolveRevisionFunc: &ClientResolveRevisionFunc{
			defaultHook: func(context.Context, api.RepoName, string, ResolveRevisionOptions) (r0 api.CommitID, r1 error) {
				return
			},
		},
		ResolveRevisionsFunc: &ClientResolveRevisionsFunc{
			defaultHook: func(context.Context, api.RepoName, []protocol.RevisionSpecifier) (r0 []string, r1 error) {
				return
			},
		},
		RevListFunc: &ClientRevListFunc{
			defaultHook: func(context.Context, string, string, func(commit string) (bool, error)) (r0 error) {
				return
			},
		},
		SearchFunc: &ClientSearchFunc{
			defaultHook: func(context.Context, *protocol.SearchRequest, func([]protocol.CommitMatch)) (r0 bool, r1 error) {
				return
			},
		},
		StatFunc: &ClientStatFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, string) (r0 fs.FileInfo, r1 error) {
				return
			},
		},
		StreamBlameFileFunc: &ClientStreamBlameFileFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, *BlameOptions) (r0 HunkReader, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockClient creates a new mock of the Client interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockClient() *MockClient {
	return &MockClient{
		AddrForRepoFunc: &ClientAddrForRepoFunc{
			defaultHook: func(api.RepoName) string {
				panic("unexpected invocation of MockClient.AddrForRepo")
			},
		},
		AddrsFunc: &ClientAddrsFunc{
			defaultHook: func() []string {
				panic("unexpected invocation of MockClient.Addrs")
			},
		},
		ArchiveReaderFunc: &ClientArchiveReaderFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, ArchiveOptions) (io.ReadCloser, error) {
				panic("unexpected invocation of MockClient.ArchiveReader")
			},
		},
		BatchLogFunc: &ClientBatchLogFunc{
			defaultHook: func(context.Context, BatchLogOptions, BatchLogCallback) error {
				panic("unexpected invocation of MockClient.BatchLog")
			},
		},
		BlameFileFunc: &ClientBlameFileFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, *BlameOptions) ([]*Hunk, error) {
				panic("unexpected invocation of MockClient.BlameFile")
			},
		},
		BranchesContainingFunc: &ClientBranchesContainingFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID) ([]string, error) {
				panic("unexpected invocation of MockClient.BranchesContaining")
			},
		},
		CommitDateFunc: &ClientCommitDateFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID) (string, time.Time, bool, error) {
				panic("unexpected invocation of MockClient.CommitDate")
			},
		},
		CommitExistsFunc: &ClientCommitExistsFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID) (bool, error) {
				panic("unexpected invocation of MockClient.CommitExists")
			},
		},
		CommitGraphFunc: &ClientCommitGraphFunc{
			defaultHook: func(context.Context, api.RepoName, CommitGraphOptions) (*gitdomain.CommitGraph, error) {
				panic("unexpected invocation of MockClient.CommitGraph")
			},
		},
		CommitLogFunc: &ClientCommitLogFunc{
			defaultHook: func(context.Context, api.RepoName, time.Time) ([]CommitLog, error) {
				panic("unexpected invocation of MockClient.CommitLog")
			},
		},
		CommitsFunc: &ClientCommitsFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, CommitsOptions) ([]*gitdomain.Commit, error) {
				panic("unexpected invocation of MockClient.Commits")
			},
		},
		CommitsExistFunc: &ClientCommitsExistFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, []api.RepoCommit) ([]bool, error) {
				panic("unexpected invocation of MockClient.CommitsExist")
			},
		},
		CommitsUniqueToBranchFunc: &ClientCommitsUniqueToBranchFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, bool, *time.Time) (map[string]time.Time, error) {
				panic("unexpected invocation of MockClient.CommitsUniqueToBranch")
			},
		},
		ContributorCountFunc: &ClientContributorCountFunc{
			defaultHook: func(context.Context, api.RepoName, ContributorOptions) ([]*gitdomain.ContributorCount, error) {
				panic("unexpected invocation of MockClient.ContributorCount")
			},
		},
		CreateCommitFromPatchFunc: &ClientCreateCommitFromPatchFunc{
			defaultHook: func(context.Context, protocol.CreateCommitFromPatchRequest) (*protocol.CreateCommitFromPatchResponse, error) {
				panic("unexpected invocation of MockClient.CreateCommitFromPatch")
			},
		},
		DiffFunc: &ClientDiffFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, DiffOptions) (*DiffFileIterator, error) {
				panic("unexpected invocation of MockClient.Diff")
			},
		},
		DiffPathFunc: &ClientDiffPathFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, string, string) ([]*diff.Hunk, error) {
				panic("unexpected invocation of MockClient.DiffPath")
			},
		},
		DiffSymbolsFunc: &ClientDiffSymbolsFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID, api.CommitID) ([]byte, error) {
				panic("unexpected invocation of MockClient.DiffSymbols")
			},
		},
		FirstEverCommitFunc: &ClientFirstEverCommitFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName) (*gitdomain.Commit, error) {
				panic("unexpected invocation of MockClient.FirstEverCommit")
			},
		},
		GetBehindAheadFunc: &ClientGetBehindAheadFunc{
			defaultHook: func(context.Context, api.RepoName, string, string) (*gitdomain.BehindAhead, error) {
				panic("unexpected invocation of MockClient.GetBehindAhead")
			},
		},
		GetCommitFunc: &ClientGetCommitFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, ResolveRevisionOptions) (*gitdomain.Commit, error) {
				panic("unexpected invocation of MockClient.GetCommit")
			},
		},
		GetCommitsFunc: &ClientGetCommitsFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, []api.RepoCommit, bool) ([]*gitdomain.Commit, error) {
				panic("unexpected invocation of MockClient.GetCommits")
			},
		},
		GetDefaultBranchFunc: &ClientGetDefaultBranchFunc{
			defaultHook: func(context.Context, api.RepoName, bool) (string, api.CommitID, error) {
				panic("unexpected invocation of MockClient.GetDefaultBranch")
			},
		},
		GetObjectFunc: &ClientGetObjectFunc{
			defaultHook: func(context.Context, api.RepoName, string) (*gitdomain.GitObject, error) {
				panic("unexpected invocation of MockClient.GetObject")
			},
		},
		HasCommitAfterFunc: &ClientHasCommitAfterFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, string) (bool, error) {
				panic("unexpected invocation of MockClient.HasCommitAfter")
			},
		},
		HeadFunc: &ClientHeadFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName) (string, bool, error) {
				panic("unexpected invocation of MockClient.Head")
			},
		},
		IsRepoCloneableFunc: &ClientIsRepoCloneableFunc{
			defaultHook: func(context.Context, api.RepoName) error {
				panic("unexpected invocation of MockClient.IsRepoCloneable")
			},
		},
		ListBranchesFunc: &ClientListBranchesFunc{
			defaultHook: func(context.Context, api.RepoName, BranchesOptions) ([]*gitdomain.Branch, error) {
				panic("unexpected invocation of MockClient.ListBranches")
			},
		},
		ListDirectoryChildrenFunc: &ClientListDirectoryChildrenFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, []string) (map[string][]string, error) {
				panic("unexpected invocation of MockClient.ListDirectoryChildren")
			},
		},
		ListFilesFunc: &ClientListFilesFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, *protocol.ListFilesOpts) ([]string, error) {
				panic("unexpected invocation of MockClient.ListFiles")
			},
		},
		ListRefsFunc: &ClientListRefsFunc{
			defaultHook: func(context.Context, api.RepoName) ([]gitdomain.Ref, error) {
				panic("unexpected invocation of MockClient.ListRefs")
			},
		},
		ListTagsFunc: &ClientListTagsFunc{
			defaultHook: func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error) {
				panic("unexpected invocation of MockClient.ListTags")
			},
		},
		LogReverseEachFunc: &ClientLogReverseEachFunc{
			defaultHook: func(context.Context, string, string, int, func(entry gitdomain.LogEntry) error) error {
				panic("unexpected invocation of MockClient.LogReverseEach")
			},
		},
		LsFilesFunc: &ClientLsFilesFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, ...gitdomain.Pathspec) ([]string, error) {
				panic("unexpected invocation of MockClient.LsFiles")
			},
		},
		MergeBaseFunc: &ClientMergeBaseFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID, api.CommitID) (api.CommitID, error) {
				panic("unexpected invocation of MockClient.MergeBase")
			},
		},
		NewFileReaderFunc: &ClientNewFileReaderFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, string) (io.ReadCloser, error) {
				panic("unexpected invocation of MockClient.NewFileReader")
			},
		},
		P4ExecFunc: &ClientP4ExecFunc{
			defaultHook: func(context.Context, string, string, string, ...string) (io.ReadCloser, http.Header, error) {
				panic("unexpected invocation of MockClient.P4Exec")
			},
		},
		P4GetChangelistFunc: &ClientP4GetChangelistFunc{
			defaultHook: func(context.Context, string, PerforceCredentials) (*protocol.PerforceChangelist, error) {
				panic("unexpected invocation of MockClient.P4GetChangelist")
			},
		},
		ReadDirFunc: &ClientReadDirFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, string, bool) ([]fs.FileInfo, error) {
				panic("unexpected invocation of MockClient.ReadDir")
			},
		},
		ReadFileFunc: &ClientReadFileFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, string) ([]byte, error) {
				panic("unexpected invocation of MockClient.ReadFile")
			},
		},
		RefDescriptionsFunc: &ClientRefDescriptionsFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, ...string) (map[string][]gitdomain.RefDescription, error) {
				panic("unexpected invocation of MockClient.RefDescriptions")
			},
		},
		RemoveFunc: &ClientRemoveFunc{
			defaultHook: func(context.Context, api.RepoName) error {
				panic("unexpected invocation of MockClient.Remove")
			},
		},
		RemoveFromFunc: &ClientRemoveFromFunc{
			defaultHook: func(context.Context, api.RepoName, string) error {
				panic("unexpected invocation of MockClient.RemoveFrom")
			},
		},
		RepoCloneProgressFunc: &ClientRepoCloneProgressFunc{
			defaultHook: func(context.Context, ...api.RepoName) (*protocol.RepoCloneProgressResponse, error) {
				panic("unexpected invocation of MockClient.RepoCloneProgress")
			},
		},
		ReposStatsFunc: &ClientReposStatsFunc{
			defaultHook: func(context.Context) (map[string]*protocol.ReposStats, error) {
				panic("unexpected invocation of MockClient.ReposStats")
			},
		},
		RequestRepoCloneFunc: &ClientRequestRepoCloneFunc{
			defaultHook: func(context.Context, api.RepoName) (*protocol.RepoCloneResponse, error) {
				panic("unexpected invocation of MockClient.RequestRepoClone")
			},
		},
		RequestRepoUpdateFunc: &ClientRequestRepoUpdateFunc{
			defaultHook: func(context.Context, api.RepoName, time.Duration) (*protocol.RepoUpdateResponse, error) {
				panic("unexpected invocation of MockClient.RequestRepoUpdate")
			},
		},
		ResolveRevisionFunc: &ClientResolveRevisionFunc{
			defaultHook: func(context.Context, api.RepoName, string, ResolveRevisionOptions) (api.CommitID, error) {
				panic("unexpected invocation of MockClient.ResolveRevision")
			},
		},
		ResolveRevisionsFunc: &ClientResolveRevisionsFunc{
			defaultHook: func(context.Context, api.RepoName, []protocol.RevisionSpecifier) ([]string, error) {
				panic("unexpected invocation of MockClient.ResolveRevisions")
			},
		},
		RevListFunc: &ClientRevListFunc{
			defaultHook: func(context.Context, string, string, func(commit string) (bool, error)) error {
				panic("unexpected invocation of MockClient.RevList")
			},
		},
		SearchFunc: &ClientSearchFunc{
			defaultHook: func(context.Context, *protocol.SearchRequest, func([]protocol.CommitMatch)) (bool, error) {
				panic("unexpected invocation of MockClient.Search")
			},
		},
		StatFunc: &ClientStatFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, string) (fs.FileInfo, error) {
				panic("unexpected invocation of MockClient.Stat")
			},
		},
		StreamBlameFileFunc: &ClientStreamBlameFileFunc{
			defaultHook: func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, *BlameOptions) (HunkReader, error) {
				panic("unexpected invocation of MockClient.StreamBlameFile")
			},
		},
	}
}

// NewMockClientFrom creates a new mock of the MockClient interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockClientFrom(i Client) *MockClient {
	return &MockClient{
		AddrForRepoFunc: &ClientAddrForRepoFunc{
			defaultHook: i.AddrForRepo,
		},
		AddrsFunc: &ClientAddrsFunc{
			defaultHook: i.Addrs,
		},
		ArchiveReaderFunc: &ClientArchiveReaderFunc{
			defaultHook: i.ArchiveReader,
		},
		BatchLogFunc: &ClientBatchLogFunc{
			defaultHook: i.BatchLog,
		},
		BlameFileFunc: &ClientBlameFileFunc{
			defaultHook: i.BlameFile,
		},
		BranchesContainingFunc: &ClientBranchesContainingFunc{
			defaultHook: i.BranchesContaining,
		},
		CommitDateFunc: &ClientCommitDateFunc{
			defaultHook: i.CommitDate,
		},
		CommitExistsFunc: &ClientCommitExistsFunc{
			defaultHook: i.CommitExists,
		},
		CommitGraphFunc: &ClientCommitGraphFunc{
			defaultHook: i.CommitGraph,
		},
		CommitLogFunc: &ClientCommitLogFunc{
			defaultHook: i.CommitLog,
		},
		CommitsFunc: &ClientCommitsFunc{
			defaultHook: i.Commits,
		},
		CommitsExistFunc: &ClientCommitsExistFunc{
			defaultHook: i.CommitsExist,
		},
		CommitsUniqueToBranchFunc: &ClientCommitsUniqueToBranchFunc{
			defaultHook: i.CommitsUniqueToBranch,
		},
		ContributorCountFunc: &ClientContributorCountFunc{
			defaultHook: i.ContributorCount,
		},
		CreateCommitFromPatchFunc: &ClientCreateCommitFromPatchFunc{
			defaultHook: i.CreateCommitFromPatch,
		},
		DiffFunc: &ClientDiffFunc{
			defaultHook: i.Diff,
		},
		DiffPathFunc: &ClientDiffPathFunc{
			defaultHook: i.DiffPath,
		},
		DiffSymbolsFunc: &ClientDiffSymbolsFunc{
			defaultHook: i.DiffSymbols,
		},
		FirstEverCommitFunc: &ClientFirstEverCommitFunc{
			defaultHook: i.FirstEverCommit,
		},
		GetBehindAheadFunc: &ClientGetBehindAheadFunc{
			defaultHook: i.GetBehindAhead,
		},
		GetCommitFunc: &ClientGetCommitFunc{
			defaultHook: i.GetCommit,
		},
		GetCommitsFunc: &ClientGetCommitsFunc{
			defaultHook: i.GetCommits,
		},
		GetDefaultBranchFunc: &ClientGetDefaultBranchFunc{
			defaultHook: i.GetDefaultBranch,
		},
		GetObjectFunc: &ClientGetObjectFunc{
			defaultHook: i.GetObject,
		},
		HasCommitAfterFunc: &ClientHasCommitAfterFunc{
			defaultHook: i.HasCommitAfter,
		},
		HeadFunc: &ClientHeadFunc{
			defaultHook: i.Head,
		},
		IsRepoCloneableFunc: &ClientIsRepoCloneableFunc{
			defaultHook: i.IsRepoCloneable,
		},
		ListBranchesFunc: &ClientListBranchesFunc{
			defaultHook: i.ListBranches,
		},
		ListDirectoryChildrenFunc: &ClientListDirectoryChildrenFunc{
			defaultHook: i.ListDirectoryChildren,
		},
		ListFilesFunc: &ClientListFilesFunc{
			defaultHook: i.ListFiles,
		},
		ListRefsFunc: &ClientListRefsFunc{
			defaultHook: i.ListRefs,
		},
		ListTagsFunc: &ClientListTagsFunc{
			defaultHook: i.ListTags,
		},
		LogReverseEachFunc: &ClientLogReverseEachFunc{
			defaultHook: i.LogReverseEach,
		},
		LsFilesFunc: &ClientLsFilesFunc{
			defaultHook: i.LsFiles,
		},
		MergeBaseFunc: &ClientMergeBaseFunc{
			defaultHook: i.MergeBase,
		},
		NewFileReaderFunc: &ClientNewFileReaderFunc{
			defaultHook: i.NewFileReader,
		},
		P4ExecFunc: &ClientP4ExecFunc{
			defaultHook: i.P4Exec,
		},
		P4GetChangelistFunc: &ClientP4GetChangelistFunc{
			defaultHook: i.P4GetChangelist,
		},
		ReadDirFunc: &ClientReadDirFunc{
			defaultHook: i.ReadDir,
		},
		ReadFileFunc: &ClientReadFileFunc{
			defaultHook: i.ReadFile,
		},
		RefDescriptionsFunc: &ClientRefDescriptionsFunc{
			defaultHook: i.RefDescriptions,
		},
		RemoveFunc: &ClientRemoveFunc{
			defaultHook: i.Remove,
		},
		RemoveFromFunc: &ClientRemoveFromFunc{
			defaultHook: i.RemoveFrom,
		},
		RepoCloneProgressFunc: &ClientRepoCloneProgressFunc{
			defaultHook: i.RepoCloneProgress,
		},
		ReposStatsFunc: &ClientReposStatsFunc{
			defaultHook: i.ReposStats,
		},
		RequestRepoCloneFunc: &ClientRequestRepoCloneFunc{
			defaultHook: i.RequestRepoClone,
		},
		RequestRepoUpdateFunc: &ClientRequestRepoUpdateFunc{
			defaultHook: i.RequestRepoUpdate,
		},
		ResolveRevisionFunc: &ClientResolveRevisionFunc{
			defaultHook: i.ResolveRevision,
		},
		ResolveRevisionsFunc: &ClientResolveRevisionsFunc{
			defaultHook: i.ResolveRevisions,
		},
		RevListFunc: &ClientRevListFunc{
			defaultHook: i.RevList,
		},
		SearchFunc: &ClientSearchFunc{
			defaultHook: i.Search,
		},
		StatFunc: &ClientStatFunc{
			defaultHook: i.Stat,
		},
		StreamBlameFileFunc: &ClientStreamBlameFileFunc{
			defaultHook: i.StreamBlameFile,
		},
	}
}

// ClientAddrForRepoFunc describes the behavior when the AddrForRepo method
// of the parent MockClient instance is invoked.
type ClientAddrForRepoFunc struct {
	defaultHook func(api.RepoName) string
	hooks       []func(api.RepoName) string
	history     []ClientAddrForRepoFuncCall
	mutex       sync.Mutex
}

// AddrForRepo delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) AddrForRepo(v0 api.RepoName) string {
	r0 := m.AddrForRepoFunc.nextHook()(v0)
	m.AddrForRepoFunc.appendCall(ClientAddrForRepoFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the AddrForRepo method
// of the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientAddrForRepoFunc) SetDefaultHook(hook func(api.RepoName) string) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AddrForRepo method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientAddrForRepoFunc) PushHook(hook func(api.RepoName) string) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientAddrForRepoFunc) SetDefaultReturn(r0 string) {
	f.SetDefaultHook(func(api.RepoName) string {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientAddrForRepoFunc) PushReturn(r0 string) {
	f.PushHook(func(api.RepoName) string {
		return r0
	})
}

func (f *ClientAddrForRepoFunc) nextHook() func(api.RepoName) string {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientAddrForRepoFunc) appendCall(r0 ClientAddrForRepoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientAddrForRepoFuncCall objects
// describing the invocations of this function.
func (f *ClientAddrForRepoFunc) History() []ClientAddrForRepoFuncCall {
	f.mutex.Lock()
	history := make([]ClientAddrForRepoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientAddrForRepoFuncCall is an object that describes an invocation of
// method AddrForRepo on an instance of MockClient.
type ClientAddrForRepoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientAddrForRepoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientAddrForRepoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientAddrsFunc describes the behavior when the Addrs method of the
// parent MockClient instance is invoked.
type ClientAddrsFunc struct {
	defaultHook func() []string
	hooks       []func() []string
	history     []ClientAddrsFuncCall
	mutex       sync.Mutex
}

// Addrs delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) Addrs() []string {
	r0 := m.AddrsFunc.nextHook()()
	m.AddrsFunc.appendCall(ClientAddrsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Addrs method of the
// parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientAddrsFunc) SetDefaultHook(hook func() []string) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Addrs method of the parent MockClient instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientAddrsFunc) PushHook(hook func() []string) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientAddrsFunc) SetDefaultReturn(r0 []string) {
	f.SetDefaultHook(func() []string {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientAddrsFunc) PushReturn(r0 []string) {
	f.PushHook(func() []string {
		return r0
	})
}

func (f *ClientAddrsFunc) nextHook() func() []string {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientAddrsFunc) appendCall(r0 ClientAddrsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientAddrsFuncCall objects describing the
// invocations of this function.
func (f *ClientAddrsFunc) History() []ClientAddrsFuncCall {
	f.mutex.Lock()
	history := make([]ClientAddrsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientAddrsFuncCall is an object that describes an invocation of method
// Addrs on an instance of MockClient.
type ClientAddrsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientAddrsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientAddrsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientArchiveReaderFunc describes the behavior when the ArchiveReader
// method of the parent MockClient instance is invoked.
type ClientArchiveReaderFunc struct {
	defaultHook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, ArchiveOptions) (io.ReadCloser, error)
	hooks       []func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, ArchiveOptions) (io.ReadCloser, error)
	history     []ClientArchiveReaderFuncCall
	mutex       sync.Mutex
}

// ArchiveReader delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) ArchiveReader(v0 context.Context, v1 authz.SubRepoPermissionChecker, v2 api.RepoName, v3 ArchiveOptions) (io.ReadCloser, error) {
	r0, r1 := m.ArchiveReaderFunc.nextHook()(v0, v1, v2, v3)
	m.ArchiveReaderFunc.appendCall(ClientArchiveReaderFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ArchiveReader method
// of the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientArchiveReaderFunc) SetDefaultHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, ArchiveOptions) (io.ReadCloser, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ArchiveReader method of the parent MockClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientArchiveReaderFunc) PushHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, ArchiveOptions) (io.ReadCloser, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientArchiveReaderFunc) SetDefaultReturn(r0 io.ReadCloser, r1 error) {
	f.SetDefaultHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, ArchiveOptions) (io.ReadCloser, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientArchiveReaderFunc) PushReturn(r0 io.ReadCloser, r1 error) {
	f.PushHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, ArchiveOptions) (io.ReadCloser, error) {
		return r0, r1
	})
}

func (f *ClientArchiveReaderFunc) nextHook() func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, ArchiveOptions) (io.ReadCloser, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientArchiveReaderFunc) appendCall(r0 ClientArchiveReaderFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientArchiveReaderFuncCall objects
// describing the invocations of this function.
func (f *ClientArchiveReaderFunc) History() []ClientArchiveReaderFuncCall {
	f.mutex.Lock()
	history := make([]ClientArchiveReaderFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientArchiveReaderFuncCall is an object that describes an invocation of
// method ArchiveReader on an instance of MockClient.
type ClientArchiveReaderFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 authz.SubRepoPermissionChecker
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoName
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 ArchiveOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 io.ReadCloser
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientArchiveReaderFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientArchiveReaderFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientBatchLogFunc describes the behavior when the BatchLog method of the
// parent MockClient instance is invoked.
type ClientBatchLogFunc struct {
	defaultHook func(context.Context, BatchLogOptions, BatchLogCallback) error
	hooks       []func(context.Context, BatchLogOptions, BatchLogCallback) error
	history     []ClientBatchLogFuncCall
	mutex       sync.Mutex
}

// BatchLog delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) BatchLog(v0 context.Context, v1 BatchLogOptions, v2 BatchLogCallback) error {
	r0 := m.BatchLogFunc.nextHook()(v0, v1, v2)
	m.BatchLogFunc.appendCall(ClientBatchLogFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the BatchLog method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientBatchLogFunc) SetDefaultHook(hook func(context.Context, BatchLogOptions, BatchLogCallback) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BatchLog method of the parent MockClient instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientBatchLogFunc) PushHook(hook func(context.Context, BatchLogOptions, BatchLogCallback) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientBatchLogFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, BatchLogOptions, BatchLogCallback) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientBatchLogFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, BatchLogOptions, BatchLogCallback) error {
		return r0
	})
}

func (f *ClientBatchLogFunc) nextHook() func(context.Context, BatchLogOptions, BatchLogCallback) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientBatchLogFunc) appendCall(r0 ClientBatchLogFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientBatchLogFuncCall objects describing
// the invocations of this function.
func (f *ClientBatchLogFunc) History() []ClientBatchLogFuncCall {
	f.mutex.Lock()
	history := make([]ClientBatchLogFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientBatchLogFuncCall is an object that describes an invocation of
// method BatchLog on an instance of MockClient.
type ClientBatchLogFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 BatchLogOptions
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 BatchLogCallback
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientBatchLogFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientBatchLogFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientBlameFileFunc describes the behavior when the BlameFile method of
// the parent MockClient instance is invoked.
type ClientBlameFileFunc struct {
	defaultHook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, *BlameOptions) ([]*Hunk, error)
	hooks       []func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, *BlameOptions) ([]*Hunk, error)
	history     []ClientBlameFileFuncCall
	mutex       sync.Mutex
}

// BlameFile delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) BlameFile(v0 context.Context, v1 authz.SubRepoPermissionChecker, v2 api.RepoName, v3 string, v4 *BlameOptions) ([]*Hunk, error) {
	r0, r1 := m.BlameFileFunc.nextHook()(v0, v1, v2, v3, v4)
	m.BlameFileFunc.appendCall(ClientBlameFileFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the BlameFile method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientBlameFileFunc) SetDefaultHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, *BlameOptions) ([]*Hunk, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BlameFile method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientBlameFileFunc) PushHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, *BlameOptions) ([]*Hunk, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientBlameFileFunc) SetDefaultReturn(r0 []*Hunk, r1 error) {
	f.SetDefaultHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, *BlameOptions) ([]*Hunk, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientBlameFileFunc) PushReturn(r0 []*Hunk, r1 error) {
	f.PushHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, *BlameOptions) ([]*Hunk, error) {
		return r0, r1
	})
}

func (f *ClientBlameFileFunc) nextHook() func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, *BlameOptions) ([]*Hunk, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientBlameFileFunc) appendCall(r0 ClientBlameFileFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientBlameFileFuncCall objects describing
// the invocations of this function.
func (f *ClientBlameFileFunc) History() []ClientBlameFileFuncCall {
	f.mutex.Lock()
	history := make([]ClientBlameFileFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientBlameFileFuncCall is an object that describes an invocation of
// method BlameFile on an instance of MockClient.
type ClientBlameFileFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 authz.SubRepoPermissionChecker
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoName
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 *BlameOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*Hunk
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientBlameFileFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientBlameFileFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientBranchesContainingFunc describes the behavior when the
// BranchesContaining method of the parent MockClient instance is invoked.
type ClientBranchesContainingFunc struct {
	defaultHook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID) ([]string, error)
	hooks       []func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID) ([]string, error)
	history     []ClientBranchesContainingFuncCall
	mutex       sync.Mutex
}

// BranchesContaining delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) BranchesContaining(v0 context.Context, v1 authz.SubRepoPermissionChecker, v2 api.RepoName, v3 api.CommitID) ([]string, error) {
	r0, r1 := m.BranchesContainingFunc.nextHook()(v0, v1, v2, v3)
	m.BranchesContainingFunc.appendCall(ClientBranchesContainingFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the BranchesContaining
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientBranchesContainingFunc) SetDefaultHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID) ([]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BranchesContaining method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientBranchesContainingFunc) PushHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID) ([]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientBranchesContainingFunc) SetDefaultReturn(r0 []string, r1 error) {
	f.SetDefaultHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID) ([]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientBranchesContainingFunc) PushReturn(r0 []string, r1 error) {
	f.PushHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID) ([]string, error) {
		return r0, r1
	})
}

func (f *ClientBranchesContainingFunc) nextHook() func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID) ([]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientBranchesContainingFunc) appendCall(r0 ClientBranchesContainingFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientBranchesContainingFuncCall objects
// describing the invocations of this function.
func (f *ClientBranchesContainingFunc) History() []ClientBranchesContainingFuncCall {
	f.mutex.Lock()
	history := make([]ClientBranchesContainingFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientBranchesContainingFuncCall is an object that describes an
// invocation of method BranchesContaining on an instance of MockClient.
type ClientBranchesContainingFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 authz.SubRepoPermissionChecker
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoName
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 api.CommitID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientBranchesContainingFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientBranchesContainingFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientCommitDateFunc describes the behavior when the CommitDate method of
// the parent MockClient instance is invoked.
type ClientCommitDateFunc struct {
	defaultHook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID) (string, time.Time, bool, error)
	hooks       []func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID) (string, time.Time, bool, error)
	history     []ClientCommitDateFuncCall
	mutex       sync.Mutex
}

// CommitDate delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) CommitDate(v0 context.Context, v1 authz.SubRepoPermissionChecker, v2 api.RepoName, v3 api.CommitID) (string, time.Time, bool, error) {
	r0, r1, r2, r3 := m.CommitDateFunc.nextHook()(v0, v1, v2, v3)
	m.CommitDateFunc.appendCall(ClientCommitDateFuncCall{v0, v1, v2, v3, r0, r1, r2, r3})
	return r0, r1, r2, r3
}

// SetDefaultHook sets function that is called when the CommitDate method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientCommitDateFunc) SetDefaultHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID) (string, time.Time, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CommitDate method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientCommitDateFunc) PushHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID) (string, time.Time, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientCommitDateFunc) SetDefaultReturn(r0 string, r1 time.Time, r2 bool, r3 error) {
	f.SetDefaultHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID) (string, time.Time, bool, error) {
		return r0, r1, r2, r3
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientCommitDateFunc) PushReturn(r0 string, r1 time.Time, r2 bool, r3 error) {
	f.PushHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID) (string, time.Time, bool, error) {
		return r0, r1, r2, r3
	})
}

func (f *ClientCommitDateFunc) nextHook() func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID) (string, time.Time, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientCommitDateFunc) appendCall(r0 ClientCommitDateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientCommitDateFuncCall objects describing
// the invocations of this function.
func (f *ClientCommitDateFunc) History() []ClientCommitDateFuncCall {
	f.mutex.Lock()
	history := make([]ClientCommitDateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientCommitDateFuncCall is an object that describes an invocation of
// method CommitDate on an instance of MockClient.
type ClientCommitDateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 authz.SubRepoPermissionChecker
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoName
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 api.CommitID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 time.Time
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 bool
	// Result3 is the value of the 4th result returned from this method
	// invocation.
	Result3 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientCommitDateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientCommitDateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2, c.Result3}
}

// ClientCommitExistsFunc describes the behavior when the CommitExists
// method of the parent MockClient instance is invoked.
type ClientCommitExistsFunc struct {
	defaultHook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID) (bool, error)
	hooks       []func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID) (bool, error)
	history     []ClientCommitExistsFuncCall
	mutex       sync.Mutex
}

// CommitExists delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) CommitExists(v0 context.Context, v1 authz.SubRepoPermissionChecker, v2 api.RepoName, v3 api.CommitID) (bool, error) {
	r0, r1 := m.CommitExistsFunc.nextHook()(v0, v1, v2, v3)
	m.CommitExistsFunc.appendCall(ClientCommitExistsFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CommitExists method
// of the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientCommitExistsFunc) SetDefaultHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CommitExists method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientCommitExistsFunc) PushHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientCommitExistsFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientCommitExistsFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID) (bool, error) {
		return r0, r1
	})
}

func (f *ClientCommitExistsFunc) nextHook() func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientCommitExistsFunc) appendCall(r0 ClientCommitExistsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientCommitExistsFuncCall objects
// describing the invocations of this function.
func (f *ClientCommitExistsFunc) History() []ClientCommitExistsFuncCall {
	f.mutex.Lock()
	history := make([]ClientCommitExistsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientCommitExistsFuncCall is an object that describes an invocation of
// method CommitExists on an instance of MockClient.
type ClientCommitExistsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 authz.SubRepoPermissionChecker
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoName
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 api.CommitID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientCommitExistsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientCommitExistsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientCommitGraphFunc describes the behavior when the CommitGraph method
// of the parent MockClient instance is invoked.
type ClientCommitGraphFunc struct {
	defaultHook func(context.Context, api.RepoName, CommitGraphOptions) (*gitdomain.CommitGraph, error)
	hooks       []func(context.Context, api.RepoName, CommitGraphOptions) (*gitdomain.CommitGraph, error)
	history     []ClientCommitGraphFuncCall
	mutex       sync.Mutex
}

// CommitGraph delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) CommitGraph(v0 context.Context, v1 api.RepoName, v2 CommitGraphOptions) (*gitdomain.CommitGraph, error) {
	r0, r1 := m.CommitGraphFunc.nextHook()(v0, v1, v2)
	m.CommitGraphFunc.appendCall(ClientCommitGraphFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CommitGraph method
// of the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientCommitGraphFunc) SetDefaultHook(hook func(context.Context, api.RepoName, CommitGraphOptions) (*gitdomain.CommitGraph, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CommitGraph method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientCommitGraphFunc) PushHook(hook func(context.Context, api.RepoName, CommitGraphOptions) (*gitdomain.CommitGraph, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientCommitGraphFunc) SetDefaultReturn(r0 *gitdomain.CommitGraph, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, CommitGraphOptions) (*gitdomain.CommitGraph, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientCommitGraphFunc) PushReturn(r0 *gitdomain.CommitGraph, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, CommitGraphOptions) (*gitdomain.CommitGraph, error) {
		return r0, r1
	})
}

func (f *ClientCommitGraphFunc) nextHook() func(context.Context, api.RepoName, CommitGraphOptions) (*gitdomain.CommitGraph, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientCommitGraphFunc) appendCall(r0 ClientCommitGraphFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientCommitGraphFuncCall objects
// describing the invocations of this function.
func (f *ClientCommitGraphFunc) History() []ClientCommitGraphFuncCall {
	f.mutex.Lock()
	history := make([]ClientCommitGraphFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientCommitGraphFuncCall is an object that describes an invocation of
// method CommitGraph on an instance of MockClient.
type ClientCommitGraphFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 CommitGraphOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *gitdomain.CommitGraph
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientCommitGraphFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientCommitGraphFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientCommitLogFunc describes the behavior when the CommitLog method of
// the parent MockClient instance is invoked.
type ClientCommitLogFunc struct {
	defaultHook func(context.Context, api.RepoName, time.Time) ([]CommitLog, error)
	hooks       []func(context.Context, api.RepoName, time.Time) ([]CommitLog, error)
	history     []ClientCommitLogFuncCall
	mutex       sync.Mutex
}

// CommitLog delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) CommitLog(v0 context.Context, v1 api.RepoName, v2 time.Time) ([]CommitLog, error) {
	r0, r1 := m.CommitLogFunc.nextHook()(v0, v1, v2)
	m.CommitLogFunc.appendCall(ClientCommitLogFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CommitLog method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientCommitLogFunc) SetDefaultHook(hook func(context.Context, api.RepoName, time.Time) ([]CommitLog, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CommitLog method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientCommitLogFunc) PushHook(hook func(context.Context, api.RepoName, time.Time) ([]CommitLog, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientCommitLogFunc) SetDefaultReturn(r0 []CommitLog, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, time.Time) ([]CommitLog, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientCommitLogFunc) PushReturn(r0 []CommitLog, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, time.Time) ([]CommitLog, error) {
		return r0, r1
	})
}

func (f *ClientCommitLogFunc) nextHook() func(context.Context, api.RepoName, time.Time) ([]CommitLog, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientCommitLogFunc) appendCall(r0 ClientCommitLogFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientCommitLogFuncCall objects describing
// the invocations of this function.
func (f *ClientCommitLogFunc) History() []ClientCommitLogFuncCall {
	f.mutex.Lock()
	history := make([]ClientCommitLogFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientCommitLogFuncCall is an object that describes an invocation of
// method CommitLog on an instance of MockClient.
type ClientCommitLogFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []CommitLog
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientCommitLogFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientCommitLogFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientCommitsFunc describes the behavior when the Commits method of the
// parent MockClient instance is invoked.
type ClientCommitsFunc struct {
	defaultHook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, CommitsOptions) ([]*gitdomain.Commit, error)
	hooks       []func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, CommitsOptions) ([]*gitdomain.Commit, error)
	history     []ClientCommitsFuncCall
	mutex       sync.Mutex
}

// Commits delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) Commits(v0 context.Context, v1 authz.SubRepoPermissionChecker, v2 api.RepoName, v3 CommitsOptions) ([]*gitdomain.Commit, error) {
	r0, r1 := m.CommitsFunc.nextHook()(v0, v1, v2, v3)
	m.CommitsFunc.appendCall(ClientCommitsFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Commits method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientCommitsFunc) SetDefaultHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, CommitsOptions) ([]*gitdomain.Commit, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Commits method of the parent MockClient instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientCommitsFunc) PushHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, CommitsOptions) ([]*gitdomain.Commit, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientCommitsFunc) SetDefaultReturn(r0 []*gitdomain.Commit, r1 error) {
	f.SetDefaultHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, CommitsOptions) ([]*gitdomain.Commit, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientCommitsFunc) PushReturn(r0 []*gitdomain.Commit, r1 error) {
	f.PushHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, CommitsOptions) ([]*gitdomain.Commit, error) {
		return r0, r1
	})
}

func (f *ClientCommitsFunc) nextHook() func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, CommitsOptions) ([]*gitdomain.Commit, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientCommitsFunc) appendCall(r0 ClientCommitsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientCommitsFuncCall objects describing
// the invocations of this function.
func (f *ClientCommitsFunc) History() []ClientCommitsFuncCall {
	f.mutex.Lock()
	history := make([]ClientCommitsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientCommitsFuncCall is an object that describes an invocation of method
// Commits on an instance of MockClient.
type ClientCommitsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 authz.SubRepoPermissionChecker
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoName
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 CommitsOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*gitdomain.Commit
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientCommitsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientCommitsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientCommitsExistFunc describes the behavior when the CommitsExist
// method of the parent MockClient instance is invoked.
type ClientCommitsExistFunc struct {
	defaultHook func(context.Context, authz.SubRepoPermissionChecker, []api.RepoCommit) ([]bool, error)
	hooks       []func(context.Context, authz.SubRepoPermissionChecker, []api.RepoCommit) ([]bool, error)
	history     []ClientCommitsExistFuncCall
	mutex       sync.Mutex
}

// CommitsExist delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) CommitsExist(v0 context.Context, v1 authz.SubRepoPermissionChecker, v2 []api.RepoCommit) ([]bool, error) {
	r0, r1 := m.CommitsExistFunc.nextHook()(v0, v1, v2)
	m.CommitsExistFunc.appendCall(ClientCommitsExistFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CommitsExist method
// of the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientCommitsExistFunc) SetDefaultHook(hook func(context.Context, authz.SubRepoPermissionChecker, []api.RepoCommit) ([]bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CommitsExist method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientCommitsExistFunc) PushHook(hook func(context.Context, authz.SubRepoPermissionChecker, []api.RepoCommit) ([]bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientCommitsExistFunc) SetDefaultReturn(r0 []bool, r1 error) {
	f.SetDefaultHook(func(context.Context, authz.SubRepoPermissionChecker, []api.RepoCommit) ([]bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientCommitsExistFunc) PushReturn(r0 []bool, r1 error) {
	f.PushHook(func(context.Context, authz.SubRepoPermissionChecker, []api.RepoCommit) ([]bool, error) {
		return r0, r1
	})
}

func (f *ClientCommitsExistFunc) nextHook() func(context.Context, authz.SubRepoPermissionChecker, []api.RepoCommit) ([]bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientCommitsExistFunc) appendCall(r0 ClientCommitsExistFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientCommitsExistFuncCall objects
// describing the invocations of this function.
func (f *ClientCommitsExistFunc) History() []ClientCommitsExistFuncCall {
	f.mutex.Lock()
	history := make([]ClientCommitsExistFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientCommitsExistFuncCall is an object that describes an invocation of
// method CommitsExist on an instance of MockClient.
type ClientCommitsExistFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 authz.SubRepoPermissionChecker
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []api.RepoCommit
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientCommitsExistFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientCommitsExistFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientCommitsUniqueToBranchFunc describes the behavior when the
// CommitsUniqueToBranch method of the parent MockClient instance is
// invoked.
type ClientCommitsUniqueToBranchFunc struct {
	defaultHook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, bool, *time.Time) (map[string]time.Time, error)
	hooks       []func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, bool, *time.Time) (map[string]time.Time, error)
	history     []ClientCommitsUniqueToBranchFuncCall
	mutex       sync.Mutex
}

// CommitsUniqueToBranch delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockClient) CommitsUniqueToBranch(v0 context.Context, v1 authz.SubRepoPermissionChecker, v2 api.RepoName, v3 string, v4 bool, v5 *time.Time) (map[string]time.Time, error) {
	r0, r1 := m.CommitsUniqueToBranchFunc.nextHook()(v0, v1, v2, v3, v4, v5)
	m.CommitsUniqueToBranchFunc.appendCall(ClientCommitsUniqueToBranchFuncCall{v0, v1, v2, v3, v4, v5, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CommitsUniqueToBranch method of the parent MockClient instance is invoked
// and the hook queue is empty.
func (f *ClientCommitsUniqueToBranchFunc) SetDefaultHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, bool, *time.Time) (map[string]time.Time, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CommitsUniqueToBranch method of the parent MockClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ClientCommitsUniqueToBranchFunc) PushHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, bool, *time.Time) (map[string]time.Time, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientCommitsUniqueToBranchFunc) SetDefaultReturn(r0 map[string]time.Time, r1 error) {
	f.SetDefaultHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, bool, *time.Time) (map[string]time.Time, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientCommitsUniqueToBranchFunc) PushReturn(r0 map[string]time.Time, r1 error) {
	f.PushHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, bool, *time.Time) (map[string]time.Time, error) {
		return r0, r1
	})
}

func (f *ClientCommitsUniqueToBranchFunc) nextHook() func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, bool, *time.Time) (map[string]time.Time, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientCommitsUniqueToBranchFunc) appendCall(r0 ClientCommitsUniqueToBranchFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientCommitsUniqueToBranchFuncCall objects
// describing the invocations of this function.
func (f *ClientCommitsUniqueToBranchFunc) History() []ClientCommitsUniqueToBranchFuncCall {
	f.mutex.Lock()
	history := make([]ClientCommitsUniqueToBranchFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientCommitsUniqueToBranchFuncCall is an object that describes an
// invocation of method CommitsUniqueToBranch on an instance of MockClient.
type ClientCommitsUniqueToBranchFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 authz.SubRepoPermissionChecker
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoName
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 bool
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 *time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[string]time.Time
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientCommitsUniqueToBranchFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientCommitsUniqueToBranchFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientContributorCountFunc describes the behavior when the
// ContributorCount method of the parent MockClient instance is invoked.
type ClientContributorCountFunc struct {
	defaultHook func(context.Context, api.RepoName, ContributorOptions) ([]*gitdomain.ContributorCount, error)
	hooks       []func(context.Context, api.RepoName, ContributorOptions) ([]*gitdomain.ContributorCount, error)
	history     []ClientContributorCountFuncCall
	mutex       sync.Mutex
}

// ContributorCount delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) ContributorCount(v0 context.Context, v1 api.RepoName, v2 ContributorOptions) ([]*gitdomain.ContributorCount, error) {
	r0, r1 := m.ContributorCountFunc.nextHook()(v0, v1, v2)
	m.ContributorCountFunc.appendCall(ClientContributorCountFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ContributorCount
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientContributorCountFunc) SetDefaultHook(hook func(context.Context, api.RepoName, ContributorOptions) ([]*gitdomain.ContributorCount, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ContributorCount method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientContributorCountFunc) PushHook(hook func(context.Context, api.RepoName, ContributorOptions) ([]*gitdomain.ContributorCount, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientContributorCountFunc) SetDefaultReturn(r0 []*gitdomain.ContributorCount, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, ContributorOptions) ([]*gitdomain.ContributorCount, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientContributorCountFunc) PushReturn(r0 []*gitdomain.ContributorCount, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, ContributorOptions) ([]*gitdomain.ContributorCount, error) {
		return r0, r1
	})
}

func (f *ClientContributorCountFunc) nextHook() func(context.Context, api.RepoName, ContributorOptions) ([]*gitdomain.ContributorCount, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientContributorCountFunc) appendCall(r0 ClientContributorCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientContributorCountFuncCall objects
// describing the invocations of this function.
func (f *ClientContributorCountFunc) History() []ClientContributorCountFuncCall {
	f.mutex.Lock()
	history := make([]ClientContributorCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientContributorCountFuncCall is an object that describes an invocation
// of method ContributorCount on an instance of MockClient.
type ClientContributorCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 ContributorOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*gitdomain.ContributorCount
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientContributorCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientContributorCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientCreateCommitFromPatchFunc describes the behavior when the
// CreateCommitFromPatch method of the parent MockClient instance is
// invoked.
type ClientCreateCommitFromPatchFunc struct {
	defaultHook func(context.Context, protocol.CreateCommitFromPatchRequest) (*protocol.CreateCommitFromPatchResponse, error)
	hooks       []func(context.Context, protocol.CreateCommitFromPatchRequest) (*protocol.CreateCommitFromPatchResponse, error)
	history     []ClientCreateCommitFromPatchFuncCall
	mutex       sync.Mutex
}

// CreateCommitFromPatch delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockClient) CreateCommitFromPatch(v0 context.Context, v1 protocol.CreateCommitFromPatchRequest) (*protocol.CreateCommitFromPatchResponse, error) {
	r0, r1 := m.CreateCommitFromPatchFunc.nextHook()(v0, v1)
	m.CreateCommitFromPatchFunc.appendCall(ClientCreateCommitFromPatchFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CreateCommitFromPatch method of the parent MockClient instance is invoked
// and the hook queue is empty.
func (f *ClientCreateCommitFromPatchFunc) SetDefaultHook(hook func(context.Context, protocol.CreateCommitFromPatchRequest) (*protocol.CreateCommitFromPatchResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateCommitFromPatch method of the parent MockClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ClientCreateCommitFromPatchFunc) PushHook(hook func(context.Context, protocol.CreateCommitFromPatchRequest) (*protocol.CreateCommitFromPatchResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientCreateCommitFromPatchFunc) SetDefaultReturn(r0 *protocol.CreateCommitFromPatchResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, protocol.CreateCommitFromPatchRequest) (*protocol.CreateCommitFromPatchResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientCreateCommitFromPatchFunc) PushReturn(r0 *protocol.CreateCommitFromPatchResponse, r1 error) {
	f.PushHook(func(context.Context, protocol.CreateCommitFromPatchRequest) (*protocol.CreateCommitFromPatchResponse, error) {
		return r0, r1
	})
}

func (f *ClientCreateCommitFromPatchFunc) nextHook() func(context.Context, protocol.CreateCommitFromPatchRequest) (*protocol.CreateCommitFromPatchResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientCreateCommitFromPatchFunc) appendCall(r0 ClientCreateCommitFromPatchFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientCreateCommitFromPatchFuncCall objects
// describing the invocations of this function.
func (f *ClientCreateCommitFromPatchFunc) History() []ClientCreateCommitFromPatchFuncCall {
	f.mutex.Lock()
	history := make([]ClientCreateCommitFromPatchFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientCreateCommitFromPatchFuncCall is an object that describes an
// invocation of method CreateCommitFromPatch on an instance of MockClient.
type ClientCreateCommitFromPatchFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 protocol.CreateCommitFromPatchRequest
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *protocol.CreateCommitFromPatchResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientCreateCommitFromPatchFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientCreateCommitFromPatchFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientDiffFunc describes the behavior when the Diff method of the parent
// MockClient instance is invoked.
type ClientDiffFunc struct {
	defaultHook func(context.Context, authz.SubRepoPermissionChecker, DiffOptions) (*DiffFileIterator, error)
	hooks       []func(context.Context, authz.SubRepoPermissionChecker, DiffOptions) (*DiffFileIterator, error)
	history     []ClientDiffFuncCall
	mutex       sync.Mutex
}

// Diff delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) Diff(v0 context.Context, v1 authz.SubRepoPermissionChecker, v2 DiffOptions) (*DiffFileIterator, error) {
	r0, r1 := m.DiffFunc.nextHook()(v0, v1, v2)
	m.DiffFunc.appendCall(ClientDiffFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Diff method of the
// parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientDiffFunc) SetDefaultHook(hook func(context.Context, authz.SubRepoPermissionChecker, DiffOptions) (*DiffFileIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Diff method of the parent MockClient instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientDiffFunc) PushHook(hook func(context.Context, authz.SubRepoPermissionChecker, DiffOptions) (*DiffFileIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientDiffFunc) SetDefaultReturn(r0 *DiffFileIterator, r1 error) {
	f.SetDefaultHook(func(context.Context, authz.SubRepoPermissionChecker, DiffOptions) (*DiffFileIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientDiffFunc) PushReturn(r0 *DiffFileIterator, r1 error) {
	f.PushHook(func(context.Context, authz.SubRepoPermissionChecker, DiffOptions) (*DiffFileIterator, error) {
		return r0, r1
	})
}

func (f *ClientDiffFunc) nextHook() func(context.Context, authz.SubRepoPermissionChecker, DiffOptions) (*DiffFileIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientDiffFunc) appendCall(r0 ClientDiffFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientDiffFuncCall objects describing the
// invocations of this function.
func (f *ClientDiffFunc) History() []ClientDiffFuncCall {
	f.mutex.Lock()
	history := make([]ClientDiffFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientDiffFuncCall is an object that describes an invocation of method
// Diff on an instance of MockClient.
type ClientDiffFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 authz.SubRepoPermissionChecker
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 DiffOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *DiffFileIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientDiffFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientDiffFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientDiffPathFunc describes the behavior when the DiffPath method of the
// parent MockClient instance is invoked.
type ClientDiffPathFunc struct {
	defaultHook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, string, string) ([]*diff.Hunk, error)
	hooks       []func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, string, string) ([]*diff.Hunk, error)
	history     []ClientDiffPathFuncCall
	mutex       sync.Mutex
}

// DiffPath delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) DiffPath(v0 context.Context, v1 authz.SubRepoPermissionChecker, v2 api.RepoName, v3 string, v4 string, v5 string) ([]*diff.Hunk, error) {
	r0, r1 := m.DiffPathFunc.nextHook()(v0, v1, v2, v3, v4, v5)
	m.DiffPathFunc.appendCall(ClientDiffPathFuncCall{v0, v1, v2, v3, v4, v5, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DiffPath method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientDiffPathFunc) SetDefaultHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, string, string) ([]*diff.Hunk, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DiffPath method of the parent MockClient instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientDiffPathFunc) PushHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, string, string) ([]*diff.Hunk, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientDiffPathFunc) SetDefaultReturn(r0 []*diff.Hunk, r1 error) {
	f.SetDefaultHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, string, string) ([]*diff.Hunk, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientDiffPathFunc) PushReturn(r0 []*diff.Hunk, r1 error) {
	f.PushHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, string, string) ([]*diff.Hunk, error) {
		return r0, r1
	})
}

func (f *ClientDiffPathFunc) nextHook() func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, string, string) ([]*diff.Hunk, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientDiffPathFunc) appendCall(r0 ClientDiffPathFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientDiffPathFuncCall objects describing
// the invocations of this function.
func (f *ClientDiffPathFunc) History() []ClientDiffPathFuncCall {
	f.mutex.Lock()
	history := make([]ClientDiffPathFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientDiffPathFuncCall is an object that describes an invocation of
// method DiffPath on an instance of MockClient.
type ClientDiffPathFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 authz.SubRepoPermissionChecker
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoName
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 string
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*diff.Hunk
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientDiffPathFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientDiffPathFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientDiffSymbolsFunc describes the behavior when the DiffSymbols method
// of the parent MockClient instance is invoked.
type ClientDiffSymbolsFunc struct {
	defaultHook func(context.Context, api.RepoName, api.CommitID, api.CommitID) ([]byte, error)
	hooks       []func(context.Context, api.RepoName, api.CommitID, api.CommitID) ([]byte, error)
	history     []ClientDiffSymbolsFuncCall
	mutex       sync.Mutex
}

// DiffSymbols delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) DiffSymbols(v0 context.Context, v1 api.RepoName, v2 api.CommitID, v3 api.CommitID) ([]byte, error) {
	r0, r1 := m.DiffSymbolsFunc.nextHook()(v0, v1, v2, v3)
	m.DiffSymbolsFunc.appendCall(ClientDiffSymbolsFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DiffSymbols method
// of the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientDiffSymbolsFunc) SetDefaultHook(hook func(context.Context, api.RepoName, api.CommitID, api.CommitID) ([]byte, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DiffSymbols method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientDiffSymbolsFunc) PushHook(hook func(context.Context, api.RepoName, api.CommitID, api.CommitID) ([]byte, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientDiffSymbolsFunc) SetDefaultReturn(r0 []byte, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, api.CommitID, api.CommitID) ([]byte, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientDiffSymbolsFunc) PushReturn(r0 []byte, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, api.CommitID, api.CommitID) ([]byte, error) {
		return r0, r1
	})
}

func (f *ClientDiffSymbolsFunc) nextHook() func(context.Context, api.RepoName, api.CommitID, api.CommitID) ([]byte, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientDiffSymbolsFunc) appendCall(r0 ClientDiffSymbolsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientDiffSymbolsFuncCall objects
// describing the invocations of this function.
func (f *ClientDiffSymbolsFunc) History() []ClientDiffSymbolsFuncCall {
	f.mutex.Lock()
	history := make([]ClientDiffSymbolsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientDiffSymbolsFuncCall is an object that describes an invocation of
// method DiffSymbols on an instance of MockClient.
type ClientDiffSymbolsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.CommitID
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 api.CommitID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []byte
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientDiffSymbolsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientDiffSymbolsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientFirstEverCommitFunc describes the behavior when the FirstEverCommit
// method of the parent MockClient instance is invoked.
type ClientFirstEverCommitFunc struct {
	defaultHook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName) (*gitdomain.Commit, error)
	hooks       []func(context.Context, authz.SubRepoPermissionChecker, api.RepoName) (*gitdomain.Commit, error)
	history     []ClientFirstEverCommitFuncCall
	mutex       sync.Mutex
}

// FirstEverCommit delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) FirstEverCommit(v0 context.Context, v1 authz.SubRepoPermissionChecker, v2 api.RepoName) (*gitdomain.Commit, error) {
	r0, r1 := m.FirstEverCommitFunc.nextHook()(v0, v1, v2)
	m.FirstEverCommitFunc.appendCall(ClientFirstEverCommitFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FirstEverCommit
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientFirstEverCommitFunc) SetDefaultHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName) (*gitdomain.Commit, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FirstEverCommit method of the parent MockClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientFirstEverCommitFunc) PushHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName) (*gitdomain.Commit, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientFirstEverCommitFunc) SetDefaultReturn(r0 *gitdomain.Commit, r1 error) {
	f.SetDefaultHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName) (*gitdomain.Commit, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientFirstEverCommitFunc) PushReturn(r0 *gitdomain.Commit, r1 error) {
	f.PushHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName) (*gitdomain.Commit, error) {
		return r0, r1
	})
}

func (f *ClientFirstEverCommitFunc) nextHook() func(context.Context, authz.SubRepoPermissionChecker, api.RepoName) (*gitdomain.Commit, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientFirstEverCommitFunc) appendCall(r0 ClientFirstEverCommitFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientFirstEverCommitFuncCall objects
// describing the invocations of this function.
func (f *ClientFirstEverCommitFunc) History() []ClientFirstEverCommitFuncCall {
	f.mutex.Lock()
	history := make([]ClientFirstEverCommitFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientFirstEverCommitFuncCall is an object that describes an invocation
// of method FirstEverCommit on an instance of MockClient.
type ClientFirstEverCommitFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 authz.SubRepoPermissionChecker
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *gitdomain.Commit
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientFirstEverCommitFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientFirstEverCommitFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientGetBehindAheadFunc describes the behavior when the GetBehindAhead
// method of the parent MockClient instance is invoked.
type ClientGetBehindAheadFunc struct {
	defaultHook func(context.Context, api.RepoName, string, string) (*gitdomain.BehindAhead, error)
	hooks       []func(context.Context, api.RepoName, string, string) (*gitdomain.BehindAhead, error)
	history     []ClientGetBehindAheadFuncCall
	mutex       sync.Mutex
}

// GetBehindAhead delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) GetBehindAhead(v0 context.Context, v1 api.RepoName, v2 string, v3 string) (*gitdomain.BehindAhead, error) {
	r0, r1 := m.GetBehindAheadFunc.nextHook()(v0, v1, v2, v3)
	m.GetBehindAheadFunc.appendCall(ClientGetBehindAheadFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetBehindAhead
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientGetBehindAheadFunc) SetDefaultHook(hook func(context.Context, api.RepoName, string, string) (*gitdomain.BehindAhead, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetBehindAhead method of the parent MockClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientGetBehindAheadFunc) PushHook(hook func(context.Context, api.RepoName, string, string) (*gitdomain.BehindAhead, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetBehindAheadFunc) SetDefaultReturn(r0 *gitdomain.BehindAhead, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, string, string) (*gitdomain.BehindAhead, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetBehindAheadFunc) PushReturn(r0 *gitdomain.BehindAhead, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, string, string) (*gitdomain.BehindAhead, error) {
		return r0, r1
	})
}

func (f *ClientGetBehindAheadFunc) nextHook() func(context.Context, api.RepoName, string, string) (*gitdomain.BehindAhead, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetBehindAheadFunc) appendCall(r0 ClientGetBehindAheadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetBehindAheadFuncCall objects
// describing the invocations of this function.
func (f *ClientGetBehindAheadFunc) History() []ClientGetBehindAheadFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetBehindAheadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetBehindAheadFuncCall is an object that describes an invocation of
// method GetBehindAhead on an instance of MockClient.
type ClientGetBehindAheadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *gitdomain.BehindAhead
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetBehindAheadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetBehindAheadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientGetCommitFunc describes the behavior when the GetCommit method of
// the parent MockClient instance is invoked.
type ClientGetCommitFunc struct {
	defaultHook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, ResolveRevisionOptions) (*gitdomain.Commit, error)
	hooks       []func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, ResolveRevisionOptions) (*gitdomain.Commit, error)
	history     []ClientGetCommitFuncCall
	mutex       sync.Mutex
}

// GetCommit delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) GetCommit(v0 context.Context, v1 authz.SubRepoPermissionChecker, v2 api.RepoName, v3 api.CommitID, v4 ResolveRevisionOptions) (*gitdomain.Commit, error) {
	r0, r1 := m.GetCommitFunc.nextHook()(v0, v1, v2, v3, v4)
	m.GetCommitFunc.appendCall(ClientGetCommitFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetCommit method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientGetCommitFunc) SetDefaultHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, ResolveRevisionOptions) (*gitdomain.Commit, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetCommit method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientGetCommitFunc) PushHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, ResolveRevisionOptions) (*gitdomain.Commit, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetCommitFunc) SetDefaultReturn(r0 *gitdomain.Commit, r1 error) {
	f.SetDefaultHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, ResolveRevisionOptions) (*gitdomain.Commit, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetCommitFunc) PushReturn(r0 *gitdomain.Commit, r1 error) {
	f.PushHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, ResolveRevisionOptions) (*gitdomain.Commit, error) {
		return r0, r1
	})
}

func (f *ClientGetCommitFunc) nextHook() func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, ResolveRevisionOptions) (*gitdomain.Commit, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetCommitFunc) appendCall(r0 ClientGetCommitFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetCommitFuncCall objects describing
// the invocations of this function.
func (f *ClientGetCommitFunc) History() []ClientGetCommitFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetCommitFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetCommitFuncCall is an object that describes an invocation of
// method GetCommit on an instance of MockClient.
type ClientGetCommitFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 authz.SubRepoPermissionChecker
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoName
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 api.CommitID
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 ResolveRevisionOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *gitdomain.Commit
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetCommitFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetCommitFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientGetCommitsFunc describes the behavior when the GetCommits method of
// the parent MockClient instance is invoked.
type ClientGetCommitsFunc struct {
	defaultHook func(context.Context, authz.SubRepoPermissionChecker, []api.RepoCommit, bool) ([]*gitdomain.Commit, error)
	hooks       []func(context.Context, authz.SubRepoPermissionChecker, []api.RepoCommit, bool) ([]*gitdomain.Commit, error)
	history     []ClientGetCommitsFuncCall
	mutex       sync.Mutex
}

// GetCommits delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) GetCommits(v0 context.Context, v1 authz.SubRepoPermissionChecker, v2 []api.RepoCommit, v3 bool) ([]*gitdomain.Commit, error) {
	r0, r1 := m.GetCommitsFunc.nextHook()(v0, v1, v2, v3)
	m.GetCommitsFunc.appendCall(ClientGetCommitsFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetCommits method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientGetCommitsFunc) SetDefaultHook(hook func(context.Context, authz.SubRepoPermissionChecker, []api.RepoCommit, bool) ([]*gitdomain.Commit, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetCommits method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientGetCommitsFunc) PushHook(hook func(context.Context, authz.SubRepoPermissionChecker, []api.RepoCommit, bool) ([]*gitdomain.Commit, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetCommitsFunc) SetDefaultReturn(r0 []*gitdomain.Commit, r1 error) {
	f.SetDefaultHook(func(context.Context, authz.SubRepoPermissionChecker, []api.RepoCommit, bool) ([]*gitdomain.Commit, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetCommitsFunc) PushReturn(r0 []*gitdomain.Commit, r1 error) {
	f.PushHook(func(context.Context, authz.SubRepoPermissionChecker, []api.RepoCommit, bool) ([]*gitdomain.Commit, error) {
		return r0, r1
	})
}

func (f *ClientGetCommitsFunc) nextHook() func(context.Context, authz.SubRepoPermissionChecker, []api.RepoCommit, bool) ([]*gitdomain.Commit, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetCommitsFunc) appendCall(r0 ClientGetCommitsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetCommitsFuncCall objects describing
// the invocations of this function.
func (f *ClientGetCommitsFunc) History() []ClientGetCommitsFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetCommitsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetCommitsFuncCall is an object that describes an invocation of
// method GetCommits on an instance of MockClient.
type ClientGetCommitsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 authz.SubRepoPermissionChecker
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []api.RepoCommit
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*gitdomain.Commit
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetCommitsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetCommitsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientGetDefaultBranchFunc describes the behavior when the
// GetDefaultBranch method of the parent MockClient instance is invoked.
type ClientGetDefaultBranchFunc struct {
	defaultHook func(context.Context, api.RepoName, bool) (string, api.CommitID, error)
	hooks       []func(context.Context, api.RepoName, bool) (string, api.CommitID, error)
	history     []ClientGetDefaultBranchFuncCall
	mutex       sync.Mutex
}

// GetDefaultBranch delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) GetDefaultBranch(v0 context.Context, v1 api.RepoName, v2 bool) (string, api.CommitID, error) {
	r0, r1, r2 := m.GetDefaultBranchFunc.nextHook()(v0, v1, v2)
	m.GetDefaultBranchFunc.appendCall(ClientGetDefaultBranchFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetDefaultBranch
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientGetDefaultBranchFunc) SetDefaultHook(hook func(context.Context, api.RepoName, bool) (string, api.CommitID, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDefaultBranch method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientGetDefaultBranchFunc) PushHook(hook func(context.Context, api.RepoName, bool) (string, api.CommitID, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetDefaultBranchFunc) SetDefaultReturn(r0 string, r1 api.CommitID, r2 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, bool) (string, api.CommitID, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetDefaultBranchFunc) PushReturn(r0 string, r1 api.CommitID, r2 error) {
	f.PushHook(func(context.Context, api.RepoName, bool) (string, api.CommitID, error) {
		return r0, r1, r2
	})
}

func (f *ClientGetDefaultBranchFunc) nextHook() func(context.Context, api.RepoName, bool) (string, api.CommitID, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetDefaultBranchFunc) appendCall(r0 ClientGetDefaultBranchFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetDefaultBranchFuncCall objects
// describing the invocations of this function.
func (f *ClientGetDefaultBranchFunc) History() []ClientGetDefaultBranchFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetDefaultBranchFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetDefaultBranchFuncCall is an object that describes an invocation
// of method GetDefaultBranch on an instance of MockClient.
type ClientGetDefaultBranchFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 api.CommitID
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetDefaultBranchFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetDefaultBranchFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ClientGetObjectFunc describes the behavior when the GetObject method of
// the parent MockClient instance is invoked.
type ClientGetObjectFunc struct {
	defaultHook func(context.Context, api.RepoName, string) (*gitdomain.GitObject, error)
	hooks       []func(context.Context, api.RepoName, string) (*gitdomain.GitObject, error)
	history     []ClientGetObjectFuncCall
	mutex       sync.Mutex
}

// GetObject delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) GetObject(v0 context.Context, v1 api.RepoName, v2 string) (*gitdomain.GitObject, error) {
	r0, r1 := m.GetObjectFunc.nextHook()(v0, v1, v2)
	m.GetObjectFunc.appendCall(ClientGetObjectFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetObject method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientGetObjectFunc) SetDefaultHook(hook func(context.Context, api.RepoName, string) (*gitdomain.GitObject, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetObject method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientGetObjectFunc) PushHook(hook func(context.Context, api.RepoName, string) (*gitdomain.GitObject, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetObjectFunc) SetDefaultReturn(r0 *gitdomain.GitObject, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, string) (*gitdomain.GitObject, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetObjectFunc) PushReturn(r0 *gitdomain.GitObject, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, string) (*gitdomain.GitObject, error) {
		return r0, r1
	})
}

func (f *ClientGetObjectFunc) nextHook() func(context.Context, api.RepoName, string) (*gitdomain.GitObject, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetObjectFunc) appendCall(r0 ClientGetObjectFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetObjectFuncCall objects describing
// the invocations of this function.
func (f *ClientGetObjectFunc) History() []ClientGetObjectFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetObjectFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetObjectFuncCall is an object that describes an invocation of
// method GetObject on an instance of MockClient.
type ClientGetObjectFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *gitdomain.GitObject
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetObjectFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetObjectFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientHasCommitAfterFunc describes the behavior when the HasCommitAfter
// method of the parent MockClient instance is invoked.
type ClientHasCommitAfterFunc struct {
	defaultHook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, string) (bool, error)
	hooks       []func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, string) (bool, error)
	history     []ClientHasCommitAfterFuncCall
	mutex       sync.Mutex
}

// HasCommitAfter delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) HasCommitAfter(v0 context.Context, v1 authz.SubRepoPermissionChecker, v2 api.RepoName, v3 string, v4 string) (bool, error) {
	r0, r1 := m.HasCommitAfterFunc.nextHook()(v0, v1, v2, v3, v4)
	m.HasCommitAfterFunc.appendCall(ClientHasCommitAfterFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the HasCommitAfter
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientHasCommitAfterFunc) SetDefaultHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, string) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// HasCommitAfter method of the parent MockClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientHasCommitAfterFunc) PushHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, string) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientHasCommitAfterFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, string) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientHasCommitAfterFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, string) (bool, error) {
		return r0, r1
	})
}

func (f *ClientHasCommitAfterFunc) nextHook() func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, string) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientHasCommitAfterFunc) appendCall(r0 ClientHasCommitAfterFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientHasCommitAfterFuncCall objects
// describing the invocations of this function.
func (f *ClientHasCommitAfterFunc) History() []ClientHasCommitAfterFuncCall {
	f.mutex.Lock()
	history := make([]ClientHasCommitAfterFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientHasCommitAfterFuncCall is an object that describes an invocation of
// method HasCommitAfter on an instance of MockClient.
type ClientHasCommitAfterFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 authz.SubRepoPermissionChecker
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoName
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientHasCommitAfterFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientHasCommitAfterFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientHeadFunc describes the behavior when the Head method of the parent
// MockClient instance is invoked.
type ClientHeadFunc struct {
	defaultHook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName) (string, bool, error)
	hooks       []func(context.Context, authz.SubRepoPermissionChecker, api.RepoName) (string, bool, error)
	history     []ClientHeadFuncCall
	mutex       sync.Mutex
}

// Head delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) Head(v0 context.Context, v1 authz.SubRepoPermissionChecker, v2 api.RepoName) (string, bool, error) {
	r0, r1, r2 := m.HeadFunc.nextHook()(v0, v1, v2)
	m.HeadFunc.appendCall(ClientHeadFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the Head method of the
// parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientHeadFunc) SetDefaultHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName) (string, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Head method of the parent MockClient instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientHeadFunc) PushHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName) (string, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientHeadFunc) SetDefaultReturn(r0 string, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName) (string, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientHeadFunc) PushReturn(r0 string, r1 bool, r2 error) {
	f.PushHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName) (string, bool, error) {
		return r0, r1, r2
	})
}

func (f *ClientHeadFunc) nextHook() func(context.Context, authz.SubRepoPermissionChecker, api.RepoName) (string, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientHeadFunc) appendCall(r0 ClientHeadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientHeadFuncCall objects describing the
// invocations of this function.
func (f *ClientHeadFunc) History() []ClientHeadFuncCall {
	f.mutex.Lock()
	history := make([]ClientHeadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientHeadFuncCall is an object that describes an invocation of method
// Head on an instance of MockClient.
type ClientHeadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 authz.SubRepoPermissionChecker
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientHeadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientHeadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ClientIsRepoCloneableFunc describes the behavior when the IsRepoCloneable
// method of the parent MockClient instance is invoked.
type ClientIsRepoCloneableFunc struct {
	defaultHook func(context.Context, api.RepoName) error
	hooks       []func(context.Context, api.RepoName) error
	history     []ClientIsRepoCloneableFuncCall
	mutex       sync.Mutex
}

// IsRepoCloneable delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) IsRepoCloneable(v0 context.Context, v1 api.RepoName) error {
	r0 := m.IsRepoCloneableFunc.nextHook()(v0, v1)
	m.IsRepoCloneableFunc.appendCall(ClientIsRepoCloneableFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the IsRepoCloneable
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientIsRepoCloneableFunc) SetDefaultHook(hook func(context.Context, api.RepoName) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsRepoCloneable method of the parent MockClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientIsRepoCloneableFunc) PushHook(hook func(context.Context, api.RepoName) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientIsRepoCloneableFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientIsRepoCloneableFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, api.RepoName) error {
		return r0
	})
}

func (f *ClientIsRepoCloneableFunc) nextHook() func(context.Context, api.RepoName) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientIsRepoCloneableFunc) appendCall(r0 ClientIsRepoCloneableFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientIsRepoCloneableFuncCall objects
// describing the invocations of this function.
func (f *ClientIsRepoCloneableFunc) History() []ClientIsRepoCloneableFuncCall {
	f.mutex.Lock()
	history := make([]ClientIsRepoCloneableFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientIsRepoCloneableFuncCall is an object that describes an invocation
// of method IsRepoCloneable on an instance of MockClient.
type ClientIsRepoCloneableFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientIsRepoCloneableFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientIsRepoCloneableFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientListBranchesFunc describes the behavior when the ListBranches
// method of the parent MockClient instance is invoked.
type ClientListBranchesFunc struct {
	defaultHook func(context.Context, api.RepoName, BranchesOptions) ([]*gitdomain.Branch, error)
	hooks       []func(context.Context, api.RepoName, BranchesOptions) ([]*gitdomain.Branch, error)
	history     []ClientListBranchesFuncCall
	mutex       sync.Mutex
}

// ListBranches delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) ListBranches(v0 context.Context, v1 api.RepoName, v2 BranchesOptions) ([]*gitdomain.Branch, error) {
	r0, r1 := m.ListBranchesFunc.nextHook()(v0, v1, v2)
	m.ListBranchesFunc.appendCall(ClientListBranchesFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListBranches method
// of the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientListBranchesFunc) SetDefaultHook(hook func(context.Context, api.RepoName, BranchesOptions) ([]*gitdomain.Branch, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListBranches method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientListBranchesFunc) PushHook(hook func(context.Context, api.RepoName, BranchesOptions) ([]*gitdomain.Branch, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientListBranchesFunc) SetDefaultReturn(r0 []*gitdomain.Branch, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, BranchesOptions) ([]*gitdomain.Branch, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientListBranchesFunc) PushReturn(r0 []*gitdomain.Branch, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, BranchesOptions) ([]*gitdomain.Branch, error) {
		return r0, r1
	})
}

func (f *ClientListBranchesFunc) nextHook() func(context.Context, api.RepoName, BranchesOptions) ([]*gitdomain.Branch, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientListBranchesFunc) appendCall(r0 ClientListBranchesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientListBranchesFuncCall objects
// describing the invocations of this function.
func (f *ClientListBranchesFunc) History() []ClientListBranchesFuncCall {
	f.mutex.Lock()
	history := make([]ClientListBranchesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientListBranchesFuncCall is an object that describes an invocation of
// method ListBranches on an instance of MockClient.
type ClientListBranchesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 BranchesOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*gitdomain.Branch
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientListBranchesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientListBranchesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientListDirectoryChildrenFunc describes the behavior when the
// ListDirectoryChildren method of the parent MockClient instance is
// invoked.
type ClientListDirectoryChildrenFunc struct {
	defaultHook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, []string) (map[string][]string, error)
	hooks       []func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, []string) (map[string][]string, error)
	history     []ClientListDirectoryChildrenFuncCall
	mutex       sync.Mutex
}

// ListDirectoryChildren delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockClient) ListDirectoryChildren(v0 context.Context, v1 authz.SubRepoPermissionChecker, v2 api.RepoName, v3 api.CommitID, v4 []string) (map[string][]string, error) {
	r0, r1 := m.ListDirectoryChildrenFunc.nextHook()(v0, v1, v2, v3, v4)
	m.ListDirectoryChildrenFunc.appendCall(ClientListDirectoryChildrenFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ListDirectoryChildren method of the parent MockClient instance is invoked
// and the hook queue is empty.
func (f *ClientListDirectoryChildrenFunc) SetDefaultHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, []string) (map[string][]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListDirectoryChildren method of the parent MockClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ClientListDirectoryChildrenFunc) PushHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, []string) (map[string][]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientListDirectoryChildrenFunc) SetDefaultReturn(r0 map[string][]string, r1 error) {
	f.SetDefaultHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, []string) (map[string][]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientListDirectoryChildrenFunc) PushReturn(r0 map[string][]string, r1 error) {
	f.PushHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, []string) (map[string][]string, error) {
		return r0, r1
	})
}

func (f *ClientListDirectoryChildrenFunc) nextHook() func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, []string) (map[string][]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientListDirectoryChildrenFunc) appendCall(r0 ClientListDirectoryChildrenFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientListDirectoryChildrenFuncCall objects
// describing the invocations of this function.
func (f *ClientListDirectoryChildrenFunc) History() []ClientListDirectoryChildrenFuncCall {
	f.mutex.Lock()
	history := make([]ClientListDirectoryChildrenFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientListDirectoryChildrenFuncCall is an object that describes an
// invocation of method ListDirectoryChildren on an instance of MockClient.
type ClientListDirectoryChildrenFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 authz.SubRepoPermissionChecker
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoName
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 api.CommitID
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[string][]string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientListDirectoryChildrenFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientListDirectoryChildrenFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientListFilesFunc describes the behavior when the ListFiles method of
// the parent MockClient instance is invoked.
type ClientListFilesFunc struct {
	defaultHook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, *protocol.ListFilesOpts) ([]string, error)
	hooks       []func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, *protocol.ListFilesOpts) ([]string, error)
	history     []ClientListFilesFuncCall
	mutex       sync.Mutex
}

// ListFiles delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) ListFiles(v0 context.Context, v1 authz.SubRepoPermissionChecker, v2 api.RepoName, v3 api.CommitID, v4 *protocol.ListFilesOpts) ([]string, error) {
	r0, r1 := m.ListFilesFunc.nextHook()(v0, v1, v2, v3, v4)
	m.ListFilesFunc.appendCall(ClientListFilesFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListFiles method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientListFilesFunc) SetDefaultHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, *protocol.ListFilesOpts) ([]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListFiles method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientListFilesFunc) PushHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, *protocol.ListFilesOpts) ([]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientListFilesFunc) SetDefaultReturn(r0 []string, r1 error) {
	f.SetDefaultHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, *protocol.ListFilesOpts) ([]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientListFilesFunc) PushReturn(r0 []string, r1 error) {
	f.PushHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, *protocol.ListFilesOpts) ([]string, error) {
		return r0, r1
	})
}

func (f *ClientListFilesFunc) nextHook() func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, *protocol.ListFilesOpts) ([]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientListFilesFunc) appendCall(r0 ClientListFilesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientListFilesFuncCall objects describing
// the invocations of this function.
func (f *ClientListFilesFunc) History() []ClientListFilesFuncCall {
	f.mutex.Lock()
	history := make([]ClientListFilesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientListFilesFuncCall is an object that describes an invocation of
// method ListFiles on an instance of MockClient.
type ClientListFilesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 authz.SubRepoPermissionChecker
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoName
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 api.CommitID
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 *protocol.ListFilesOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientListFilesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientListFilesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientListRefsFunc describes the behavior when the ListRefs method of the
// parent MockClient instance is invoked.
type ClientListRefsFunc struct {
	defaultHook func(context.Context, api.RepoName) ([]gitdomain.Ref, error)
	hooks       []func(context.Context, api.RepoName) ([]gitdomain.Ref, error)
	history     []ClientListRefsFuncCall
	mutex       sync.Mutex
}

// ListRefs delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) ListRefs(v0 context.Context, v1 api.RepoName) ([]gitdomain.Ref, error) {
	r0, r1 := m.ListRefsFunc.nextHook()(v0, v1)
	m.ListRefsFunc.appendCall(ClientListRefsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListRefs method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientListRefsFunc) SetDefaultHook(hook func(context.Context, api.RepoName) ([]gitdomain.Ref, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListRefs method of the parent MockClient instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientListRefsFunc) PushHook(hook func(context.Context, api.RepoName) ([]gitdomain.Ref, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientListRefsFunc) SetDefaultReturn(r0 []gitdomain.Ref, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) ([]gitdomain.Ref, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientListRefsFunc) PushReturn(r0 []gitdomain.Ref, r1 error) {
	f.PushHook(func(context.Context, api.RepoName) ([]gitdomain.Ref, error) {
		return r0, r1
	})
}

func (f *ClientListRefsFunc) nextHook() func(context.Context, api.RepoName) ([]gitdomain.Ref, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientListRefsFunc) appendCall(r0 ClientListRefsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientListRefsFuncCall objects describing
// the invocations of this function.
func (f *ClientListRefsFunc) History() []ClientListRefsFuncCall {
	f.mutex.Lock()
	history := make([]ClientListRefsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientListRefsFuncCall is an object that describes an invocation of
// method ListRefs on an instance of MockClient.
type ClientListRefsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []gitdomain.Ref
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientListRefsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientListRefsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientListTagsFunc describes the behavior when the ListTags method of the
// parent MockClient instance is invoked.
type ClientListTagsFunc struct {
	defaultHook func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error)
	hooks       []func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error)
	history     []ClientListTagsFuncCall
	mutex       sync.Mutex
}

// ListTags delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) ListTags(v0 context.Context, v1 api.RepoName, v2 ...string) ([]*gitdomain.Tag, error) {
	r0, r1 := m.ListTagsFunc.nextHook()(v0, v1, v2...)
	m.ListTagsFunc.appendCall(ClientListTagsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListTags method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientListTagsFunc) SetDefaultHook(hook func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListTags method of the parent MockClient instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientListTagsFunc) PushHook(hook func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientListTagsFunc) SetDefaultReturn(r0 []*gitdomain.Tag, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientListTagsFunc) PushReturn(r0 []*gitdomain.Tag, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error) {
		return r0, r1
	})
}

func (f *ClientListTagsFunc) nextHook() func(context.Context, api.RepoName, ...string) ([]*gitdomain.Tag, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientListTagsFunc) appendCall(r0 ClientListTagsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientListTagsFuncCall objects describing
// the invocations of this function.
func (f *ClientListTagsFunc) History() []ClientListTagsFuncCall {
	f.mutex.Lock()
	history := make([]ClientListTagsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientListTagsFuncCall is an object that describes an invocation of
// method ListTags on an instance of MockClient.
type ClientListTagsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*gitdomain.Tag
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c ClientListTagsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientListTagsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientLogReverseEachFunc describes the behavior when the LogReverseEach
// method of the parent MockClient instance is invoked.
type ClientLogReverseEachFunc struct {
	defaultHook func(context.Context, string, string, int, func(entry gitdomain.LogEntry) error) error
	hooks       []func(context.Context, string, string, int, func(entry gitdomain.LogEntry) error) error
	history     []ClientLogReverseEachFuncCall
	mutex       sync.Mutex
}

// LogReverseEach delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) LogReverseEach(v0 context.Context, v1 string, v2 string, v3 int, v4 func(entry gitdomain.LogEntry) error) error {
	r0 := m.LogReverseEachFunc.nextHook()(v0, v1, v2, v3, v4)
	m.LogReverseEachFunc.appendCall(ClientLogReverseEachFuncCall{v0, v1, v2, v3, v4, r0})
	return r0
}

// SetDefaultHook sets function that is called when the LogReverseEach
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientLogReverseEachFunc) SetDefaultHook(hook func(context.Context, string, string, int, func(entry gitdomain.LogEntry) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LogReverseEach method of the parent MockClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientLogReverseEachFunc) PushHook(hook func(context.Context, string, string, int, func(entry gitdomain.LogEntry) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientLogReverseEachFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string, string, int, func(entry gitdomain.LogEntry) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientLogReverseEachFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string, string, int, func(entry gitdomain.LogEntry) error) error {
		return r0
	})
}

func (f *ClientLogReverseEachFunc) nextHook() func(context.Context, string, string, int, func(entry gitdomain.LogEntry) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientLogReverseEachFunc) appendCall(r0 ClientLogReverseEachFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientLogReverseEachFuncCall objects
// describing the invocations of this function.
func (f *ClientLogReverseEachFunc) History() []ClientLogReverseEachFuncCall {
	f.mutex.Lock()
	history := make([]ClientLogReverseEachFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientLogReverseEachFuncCall is an object that describes an invocation of
// method LogReverseEach on an instance of MockClient.
type ClientLogReverseEachFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 func(entry gitdomain.LogEntry) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientLogReverseEachFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientLogReverseEachFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientLsFilesFunc describes the behavior when the LsFiles method of the
// parent MockClient instance is invoked.
type ClientLsFilesFunc struct {
	defaultHook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, ...gitdomain.Pathspec) ([]string, error)
	hooks       []func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, ...gitdomain.Pathspec) ([]string, error)
	history     []ClientLsFilesFuncCall
	mutex       sync.Mutex
}

// LsFiles delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) LsFiles(v0 context.Context, v1 authz.SubRepoPermissionChecker, v2 api.RepoName, v3 api.CommitID, v4 ...gitdomain.Pathspec) ([]string, error) {
	r0, r1 := m.LsFilesFunc.nextHook()(v0, v1, v2, v3, v4...)
	m.LsFilesFunc.appendCall(ClientLsFilesFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the LsFiles method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientLsFilesFunc) SetDefaultHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, ...gitdomain.Pathspec) ([]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LsFiles method of the parent MockClient instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientLsFilesFunc) PushHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, ...gitdomain.Pathspec) ([]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientLsFilesFunc) SetDefaultReturn(r0 []string, r1 error) {
	f.SetDefaultHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, ...gitdomain.Pathspec) ([]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientLsFilesFunc) PushReturn(r0 []string, r1 error) {
	f.PushHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, ...gitdomain.Pathspec) ([]string, error) {
		return r0, r1
	})
}

func (f *ClientLsFilesFunc) nextHook() func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, ...gitdomain.Pathspec) ([]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientLsFilesFunc) appendCall(r0 ClientLsFilesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientLsFilesFuncCall objects describing
// the invocations of this function.
func (f *ClientLsFilesFunc) History() []ClientLsFilesFuncCall {
	f.mutex.Lock()
	history := make([]ClientLsFilesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientLsFilesFuncCall is an object that describes an invocation of method
// LsFiles on an instance of MockClient.
type ClientLsFilesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 authz.SubRepoPermissionChecker
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoName
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 api.CommitID
	// Arg4 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg4 []gitdomain.Pathspec
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c ClientLsFilesFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg4 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientLsFilesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientMergeBaseFunc describes the behavior when the MergeBase method of
// the parent MockClient instance is invoked.
type ClientMergeBaseFunc struct {
	defaultHook func(context.Context, api.RepoName, api.CommitID, api.CommitID) (api.CommitID, error)
	hooks       []func(context.Context, api.RepoName, api.CommitID, api.CommitID) (api.CommitID, error)
	history     []ClientMergeBaseFuncCall
	mutex       sync.Mutex
}

// MergeBase delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) MergeBase(v0 context.Context, v1 api.RepoName, v2 api.CommitID, v3 api.CommitID) (api.CommitID, error) {
	r0, r1 := m.MergeBaseFunc.nextHook()(v0, v1, v2, v3)
	m.MergeBaseFunc.appendCall(ClientMergeBaseFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MergeBase method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientMergeBaseFunc) SetDefaultHook(hook func(context.Context, api.RepoName, api.CommitID, api.CommitID) (api.CommitID, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MergeBase method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientMergeBaseFunc) PushHook(hook func(context.Context, api.RepoName, api.CommitID, api.CommitID) (api.CommitID, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientMergeBaseFunc) SetDefaultReturn(r0 api.CommitID, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, api.CommitID, api.CommitID) (api.CommitID, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientMergeBaseFunc) PushReturn(r0 api.CommitID, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, api.CommitID, api.CommitID) (api.CommitID, error) {
		return r0, r1
	})
}

func (f *ClientMergeBaseFunc) nextHook() func(context.Context, api.RepoName, api.CommitID, api.CommitID) (api.CommitID, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientMergeBaseFunc) appendCall(r0 ClientMergeBaseFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientMergeBaseFuncCall objects describing
// the invocations of this function.
func (f *ClientMergeBaseFunc) History() []ClientMergeBaseFuncCall {
	f.mutex.Lock()
	history := make([]ClientMergeBaseFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientMergeBaseFuncCall is an object that describes an invocation of
// method MergeBase on an instance of MockClient.
type ClientMergeBaseFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.CommitID
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 api.CommitID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 api.CommitID
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientMergeBaseFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientMergeBaseFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientNewFileReaderFunc describes the behavior when the NewFileReader
// method of the parent MockClient instance is invoked.
type ClientNewFileReaderFunc struct {
	defaultHook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, string) (io.ReadCloser, error)
	hooks       []func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, string) (io.ReadCloser, error)
	history     []ClientNewFileReaderFuncCall
	mutex       sync.Mutex
}

// NewFileReader delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) NewFileReader(v0 context.Context, v1 authz.SubRepoPermissionChecker, v2 api.RepoName, v3 api.CommitID, v4 string) (io.ReadCloser, error) {
	r0, r1 := m.NewFileReaderFunc.nextHook()(v0, v1, v2, v3, v4)
	m.NewFileReaderFunc.appendCall(ClientNewFileReaderFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the NewFileReader method
// of the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientNewFileReaderFunc) SetDefaultHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, string) (io.ReadCloser, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// NewFileReader method of the parent MockClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientNewFileReaderFunc) PushHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, string) (io.ReadCloser, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientNewFileReaderFunc) SetDefaultReturn(r0 io.ReadCloser, r1 error) {
	f.SetDefaultHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, string) (io.ReadCloser, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientNewFileReaderFunc) PushReturn(r0 io.ReadCloser, r1 error) {
	f.PushHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, string) (io.ReadCloser, error) {
		return r0, r1
	})
}

func (f *ClientNewFileReaderFunc) nextHook() func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, string) (io.ReadCloser, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientNewFileReaderFunc) appendCall(r0 ClientNewFileReaderFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientNewFileReaderFuncCall objects
// describing the invocations of this function.
func (f *ClientNewFileReaderFunc) History() []ClientNewFileReaderFuncCall {
	f.mutex.Lock()
	history := make([]ClientNewFileReaderFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientNewFileReaderFuncCall is an object that describes an invocation of
// method NewFileReader on an instance of MockClient.
type ClientNewFileReaderFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 authz.SubRepoPermissionChecker
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoName
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 api.CommitID
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 io.ReadCloser
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientNewFileReaderFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientNewFileReaderFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientP4ExecFunc describes the behavior when the P4Exec method of the
// parent MockClient instance is invoked.
type ClientP4ExecFunc struct {
	defaultHook func(context.Context, string, string, string, ...string) (io.ReadCloser, http.Header, error)
	hooks       []func(context.Context, string, string, string, ...string) (io.ReadCloser, http.Header, error)
	history     []ClientP4ExecFuncCall
	mutex       sync.Mutex
}

// P4Exec delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) P4Exec(v0 context.Context, v1 string, v2 string, v3 string, v4 ...string) (io.ReadCloser, http.Header, error) {
	r0, r1, r2 := m.P4ExecFunc.nextHook()(v0, v1, v2, v3, v4...)
	m.P4ExecFunc.appendCall(ClientP4ExecFuncCall{v0, v1, v2, v3, v4, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the P4Exec method of the
// parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientP4ExecFunc) SetDefaultHook(hook func(context.Context, string, string, string, ...string) (io.ReadCloser, http.Header, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// P4Exec method of the parent MockClient instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientP4ExecFunc) PushHook(hook func(context.Context, string, string, string, ...string) (io.ReadCloser, http.Header, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientP4ExecFunc) SetDefaultReturn(r0 io.ReadCloser, r1 http.Header, r2 error) {
	f.SetDefaultHook(func(context.Context, string, string, string, ...string) (io.ReadCloser, http.Header, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientP4ExecFunc) PushReturn(r0 io.ReadCloser, r1 http.Header, r2 error) {
	f.PushHook(func(context.Context, string, string, string, ...string) (io.ReadCloser, http.Header, error) {
		return r0, r1, r2
	})
}

func (f *ClientP4ExecFunc) nextHook() func(context.Context, string, string, string, ...string) (io.ReadCloser, http.Header, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientP4ExecFunc) appendCall(r0 ClientP4ExecFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientP4ExecFuncCall objects describing the
// invocations of this function.
func (f *ClientP4ExecFunc) History() []ClientP4ExecFuncCall {
	f.mutex.Lock()
	history := make([]ClientP4ExecFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientP4ExecFuncCall is an object that describes an invocation of method
// P4Exec on an instance of MockClient.
type ClientP4ExecFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg4 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 io.ReadCloser
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 http.Header
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c ClientP4ExecFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg4 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientP4ExecFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ClientP4GetChangelistFunc describes the behavior when the P4GetChangelist
// method of the parent MockClient instance is invoked.
type ClientP4GetChangelistFunc struct {
	defaultHook func(context.Context, string, PerforceCredentials) (*protocol.PerforceChangelist, error)
	hooks       []func(context.Context, string, PerforceCredentials) (*protocol.PerforceChangelist, error)
	history     []ClientP4GetChangelistFuncCall
	mutex       sync.Mutex
}

// P4GetChangelist delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) P4GetChangelist(v0 context.Context, v1 string, v2 PerforceCredentials) (*protocol.PerforceChangelist, error) {
	r0, r1 := m.P4GetChangelistFunc.nextHook()(v0, v1, v2)
	m.P4GetChangelistFunc.appendCall(ClientP4GetChangelistFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the P4GetChangelist
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientP4GetChangelistFunc) SetDefaultHook(hook func(context.Context, string, PerforceCredentials) (*protocol.PerforceChangelist, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// P4GetChangelist method of the parent MockClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientP4GetChangelistFunc) PushHook(hook func(context.Context, string, PerforceCredentials) (*protocol.PerforceChangelist, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientP4GetChangelistFunc) SetDefaultReturn(r0 *protocol.PerforceChangelist, r1 error) {
	f.SetDefaultHook(func(context.Context, string, PerforceCredentials) (*protocol.PerforceChangelist, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientP4GetChangelistFunc) PushReturn(r0 *protocol.PerforceChangelist, r1 error) {
	f.PushHook(func(context.Context, string, PerforceCredentials) (*protocol.PerforceChangelist, error) {
		return r0, r1
	})
}

func (f *ClientP4GetChangelistFunc) nextHook() func(context.Context, string, PerforceCredentials) (*protocol.PerforceChangelist, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientP4GetChangelistFunc) appendCall(r0 ClientP4GetChangelistFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientP4GetChangelistFuncCall objects
// describing the invocations of this function.
func (f *ClientP4GetChangelistFunc) History() []ClientP4GetChangelistFuncCall {
	f.mutex.Lock()
	history := make([]ClientP4GetChangelistFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientP4GetChangelistFuncCall is an object that describes an invocation
// of method P4GetChangelist on an instance of MockClient.
type ClientP4GetChangelistFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 PerforceCredentials
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *protocol.PerforceChangelist
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientP4GetChangelistFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientP4GetChangelistFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientReadDirFunc describes the behavior when the ReadDir method of the
// parent MockClient instance is invoked.
type ClientReadDirFunc struct {
	defaultHook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, string, bool) ([]fs.FileInfo, error)
	hooks       []func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, string, bool) ([]fs.FileInfo, error)
	history     []ClientReadDirFuncCall
	mutex       sync.Mutex
}

// ReadDir delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) ReadDir(v0 context.Context, v1 authz.SubRepoPermissionChecker, v2 api.RepoName, v3 api.CommitID, v4 string, v5 bool) ([]fs.FileInfo, error) {
	r0, r1 := m.ReadDirFunc.nextHook()(v0, v1, v2, v3, v4, v5)
	m.ReadDirFunc.appendCall(ClientReadDirFuncCall{v0, v1, v2, v3, v4, v5, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ReadDir method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientReadDirFunc) SetDefaultHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, string, bool) ([]fs.FileInfo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReadDir method of the parent MockClient instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientReadDirFunc) PushHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, string, bool) ([]fs.FileInfo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientReadDirFunc) SetDefaultReturn(r0 []fs.FileInfo, r1 error) {
	f.SetDefaultHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, string, bool) ([]fs.FileInfo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientReadDirFunc) PushReturn(r0 []fs.FileInfo, r1 error) {
	f.PushHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, string, bool) ([]fs.FileInfo, error) {
		return r0, r1
	})
}

func (f *ClientReadDirFunc) nextHook() func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, string, bool) ([]fs.FileInfo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientReadDirFunc) appendCall(r0 ClientReadDirFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientReadDirFuncCall objects describing
// the invocations of this function.
func (f *ClientReadDirFunc) History() []ClientReadDirFuncCall {
	f.mutex.Lock()
	history := make([]ClientReadDirFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientReadDirFuncCall is an object that describes an invocation of method
// ReadDir on an instance of MockClient.
type ClientReadDirFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 authz.SubRepoPermissionChecker
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoName
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 api.CommitID
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 string
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []fs.FileInfo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientReadDirFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientReadDirFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientReadFileFunc describes the behavior when the ReadFile method of the
// parent MockClient instance is invoked.
type ClientReadFileFunc struct {
	defaultHook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, string) ([]byte, error)
	hooks       []func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, string) ([]byte, error)
	history     []ClientReadFileFuncCall
	mutex       sync.Mutex
}

// ReadFile delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) ReadFile(v0 context.Context, v1 authz.SubRepoPermissionChecker, v2 api.RepoName, v3 api.CommitID, v4 string) ([]byte, error) {
	r0, r1 := m.ReadFileFunc.nextHook()(v0, v1, v2, v3, v4)
	m.ReadFileFunc.appendCall(ClientReadFileFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ReadFile method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientReadFileFunc) SetDefaultHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, string) ([]byte, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReadFile method of the parent MockClient instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientReadFileFunc) PushHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, string) ([]byte, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientReadFileFunc) SetDefaultReturn(r0 []byte, r1 error) {
	f.SetDefaultHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, string) ([]byte, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientReadFileFunc) PushReturn(r0 []byte, r1 error) {
	f.PushHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, string) ([]byte, error) {
		return r0, r1
	})
}

func (f *ClientReadFileFunc) nextHook() func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, string) ([]byte, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientReadFileFunc) appendCall(r0 ClientReadFileFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientReadFileFuncCall objects describing
// the invocations of this function.
func (f *ClientReadFileFunc) History() []ClientReadFileFuncCall {
	f.mutex.Lock()
	history := make([]ClientReadFileFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientReadFileFuncCall is an object that describes an invocation of
// method ReadFile on an instance of MockClient.
type ClientReadFileFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 authz.SubRepoPermissionChecker
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoName
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 api.CommitID
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []byte
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientReadFileFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientReadFileFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientRefDescriptionsFunc describes the behavior when the RefDescriptions
// method of the parent MockClient instance is invoked.
type ClientRefDescriptionsFunc struct {
	defaultHook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, ...string) (map[string][]gitdomain.RefDescription, error)
	hooks       []func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, ...string) (map[string][]gitdomain.RefDescription, error)
	history     []ClientRefDescriptionsFuncCall
	mutex       sync.Mutex
}

// RefDescriptions delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) RefDescriptions(v0 context.Context, v1 authz.SubRepoPermissionChecker, v2 api.RepoName, v3 ...string) (map[string][]gitdomain.RefDescription, error) {
	r0, r1 := m.RefDescriptionsFunc.nextHook()(v0, v1, v2, v3...)
	m.RefDescriptionsFunc.appendCall(ClientRefDescriptionsFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RefDescriptions
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientRefDescriptionsFunc) SetDefaultHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, ...string) (map[string][]gitdomain.RefDescription, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RefDescriptions method of the parent MockClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientRefDescriptionsFunc) PushHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, ...string) (map[string][]gitdomain.RefDescription, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientRefDescriptionsFunc) SetDefaultReturn(r0 map[string][]gitdomain.RefDescription, r1 error) {
	f.SetDefaultHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, ...string) (map[string][]gitdomain.RefDescription, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientRefDescriptionsFunc) PushReturn(r0 map[string][]gitdomain.RefDescription, r1 error) {
	f.PushHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, ...string) (map[string][]gitdomain.RefDescription, error) {
		return r0, r1
	})
}

func (f *ClientRefDescriptionsFunc) nextHook() func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, ...string) (map[string][]gitdomain.RefDescription, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientRefDescriptionsFunc) appendCall(r0 ClientRefDescriptionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientRefDescriptionsFuncCall objects
// describing the invocations of this function.
func (f *ClientRefDescriptionsFunc) History() []ClientRefDescriptionsFuncCall {
	f.mutex.Lock()
	history := make([]ClientRefDescriptionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientRefDescriptionsFuncCall is an object that describes an invocation
// of method RefDescriptions on an instance of MockClient.
type ClientRefDescriptionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 authz.SubRepoPermissionChecker
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoName
	// Arg3 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg3 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[string][]gitdomain.RefDescription
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c ClientRefDescriptionsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg3 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1, c.Arg2}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientRefDescriptionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientRemoveFunc describes the behavior when the Remove method of the
// parent MockClient instance is invoked.
type ClientRemoveFunc struct {
	defaultHook func(context.Context, api.RepoName) error
	hooks       []func(context.Context, api.RepoName) error
	history     []ClientRemoveFuncCall
	mutex       sync.Mutex
}

// Remove delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) Remove(v0 context.Context, v1 api.RepoName) error {
	r0 := m.RemoveFunc.nextHook()(v0, v1)
	m.RemoveFunc.appendCall(ClientRemoveFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Remove method of the
// parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientRemoveFunc) SetDefaultHook(hook func(context.Context, api.RepoName) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Remove method of the parent MockClient instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientRemoveFunc) PushHook(hook func(context.Context, api.RepoName) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientRemoveFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientRemoveFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, api.RepoName) error {
		return r0
	})
}

func (f *ClientRemoveFunc) nextHook() func(context.Context, api.RepoName) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientRemoveFunc) appendCall(r0 ClientRemoveFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientRemoveFuncCall objects describing the
// invocations of this function.
func (f *ClientRemoveFunc) History() []ClientRemoveFuncCall {
	f.mutex.Lock()
	history := make([]ClientRemoveFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientRemoveFuncCall is an object that describes an invocation of method
// Remove on an instance of MockClient.
type ClientRemoveFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientRemoveFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientRemoveFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientRemoveFromFunc describes the behavior when the RemoveFrom method of
// the parent MockClient instance is invoked.
type ClientRemoveFromFunc struct {
	defaultHook func(context.Context, api.RepoName, string) error
	hooks       []func(context.Context, api.RepoName, string) error
	history     []ClientRemoveFromFuncCall
	mutex       sync.Mutex
}

// RemoveFrom delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) RemoveFrom(v0 context.Context, v1 api.RepoName, v2 string) error {
	r0 := m.RemoveFromFunc.nextHook()(v0, v1, v2)
	m.RemoveFromFunc.appendCall(ClientRemoveFromFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the RemoveFrom method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientRemoveFromFunc) SetDefaultHook(hook func(context.Context, api.RepoName, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RemoveFrom method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientRemoveFromFunc) PushHook(hook func(context.Context, api.RepoName, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientRemoveFromFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientRemoveFromFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, api.RepoName, string) error {
		return r0
	})
}

func (f *ClientRemoveFromFunc) nextHook() func(context.Context, api.RepoName, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientRemoveFromFunc) appendCall(r0 ClientRemoveFromFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientRemoveFromFuncCall objects describing
// the invocations of this function.
func (f *ClientRemoveFromFunc) History() []ClientRemoveFromFuncCall {
	f.mutex.Lock()
	history := make([]ClientRemoveFromFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientRemoveFromFuncCall is an object that describes an invocation of
// method RemoveFrom on an instance of MockClient.
type ClientRemoveFromFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientRemoveFromFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientRemoveFromFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientRepoCloneProgressFunc describes the behavior when the
// RepoCloneProgress method of the parent MockClient instance is invoked.
type ClientRepoCloneProgressFunc struct {
	defaultHook func(context.Context, ...api.RepoName) (*protocol.RepoCloneProgressResponse, error)
	hooks       []func(context.Context, ...api.RepoName) (*protocol.RepoCloneProgressResponse, error)
	history     []ClientRepoCloneProgressFuncCall
	mutex       sync.Mutex
}

// RepoCloneProgress delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) RepoCloneProgress(v0 context.Context, v1 ...api.RepoName) (*protocol.RepoCloneProgressResponse, error) {
	r0, r1 := m.RepoCloneProgressFunc.nextHook()(v0, v1...)
	m.RepoCloneProgressFunc.appendCall(ClientRepoCloneProgressFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RepoCloneProgress
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientRepoCloneProgressFunc) SetDefaultHook(hook func(context.Context, ...api.RepoName) (*protocol.RepoCloneProgressResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepoCloneProgress method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientRepoCloneProgressFunc) PushHook(hook func(context.Context, ...api.RepoName) (*protocol.RepoCloneProgressResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientRepoCloneProgressFunc) SetDefaultReturn(r0 *protocol.RepoCloneProgressResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, ...api.RepoName) (*protocol.RepoCloneProgressResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientRepoCloneProgressFunc) PushReturn(r0 *protocol.RepoCloneProgressResponse, r1 error) {
	f.PushHook(func(context.Context, ...api.RepoName) (*protocol.RepoCloneProgressResponse, error) {
		return r0, r1
	})
}

func (f *ClientRepoCloneProgressFunc) nextHook() func(context.Context, ...api.RepoName) (*protocol.RepoCloneProgressResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientRepoCloneProgressFunc) appendCall(r0 ClientRepoCloneProgressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientRepoCloneProgressFuncCall objects
// describing the invocations of this function.
func (f *ClientRepoCloneProgressFunc) History() []ClientRepoCloneProgressFuncCall {
	f.mutex.Lock()
	history := make([]ClientRepoCloneProgressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientRepoCloneProgressFuncCall is an object that describes an invocation
// of method RepoCloneProgress on an instance of MockClient.
type ClientRepoCloneProgressFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *protocol.RepoCloneProgressResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c ClientRepoCloneProgressFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientRepoCloneProgressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientReposStatsFunc describes the behavior when the ReposStats method of
// the parent MockClient instance is invoked.
type ClientReposStatsFunc struct {
	defaultHook func(context.Context) (map[string]*protocol.ReposStats, error)
	hooks       []func(context.Context) (map[string]*protocol.ReposStats, error)
	history     []ClientReposStatsFuncCall
	mutex       sync.Mutex
}

// ReposStats delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) ReposStats(v0 context.Context) (map[string]*protocol.ReposStats, error) {
	r0, r1 := m.ReposStatsFunc.nextHook()(v0)
	m.ReposStatsFunc.appendCall(ClientReposStatsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ReposStats method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientReposStatsFunc) SetDefaultHook(hook func(context.Context) (map[string]*protocol.ReposStats, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReposStats method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientReposStatsFunc) PushHook(hook func(context.Context) (map[string]*protocol.ReposStats, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientReposStatsFunc) SetDefaultReturn(r0 map[string]*protocol.ReposStats, r1 error) {
	f.SetDefaultHook(func(context.Context) (map[string]*protocol.ReposStats, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientReposStatsFunc) PushReturn(r0 map[string]*protocol.ReposStats, r1 error) {
	f.PushHook(func(context.Context) (map[string]*protocol.ReposStats, error) {
		return r0, r1
	})
}

func (f *ClientReposStatsFunc) nextHook() func(context.Context) (map[string]*protocol.ReposStats, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientReposStatsFunc) appendCall(r0 ClientReposStatsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientReposStatsFuncCall objects describing
// the invocations of this function.
func (f *ClientReposStatsFunc) History() []ClientReposStatsFuncCall {
	f.mutex.Lock()
	history := make([]ClientReposStatsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientReposStatsFuncCall is an object that describes an invocation of
// method ReposStats on an instance of MockClient.
type ClientReposStatsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[string]*protocol.ReposStats
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientReposStatsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientReposStatsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientRequestRepoCloneFunc describes the behavior when the
// RequestRepoClone method of the parent MockClient instance is invoked.
type ClientRequestRepoCloneFunc struct {
	defaultHook func(context.Context, api.RepoName) (*protocol.RepoCloneResponse, error)
	hooks       []func(context.Context, api.RepoName) (*protocol.RepoCloneResponse, error)
	history     []ClientRequestRepoCloneFuncCall
	mutex       sync.Mutex
}

// RequestRepoClone delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) RequestRepoClone(v0 context.Context, v1 api.RepoName) (*protocol.RepoCloneResponse, error) {
	r0, r1 := m.RequestRepoCloneFunc.nextHook()(v0, v1)
	m.RequestRepoCloneFunc.appendCall(ClientRequestRepoCloneFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RequestRepoClone
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientRequestRepoCloneFunc) SetDefaultHook(hook func(context.Context, api.RepoName) (*protocol.RepoCloneResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RequestRepoClone method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientRequestRepoCloneFunc) PushHook(hook func(context.Context, api.RepoName) (*protocol.RepoCloneResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientRequestRepoCloneFunc) SetDefaultReturn(r0 *protocol.RepoCloneResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) (*protocol.RepoCloneResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientRequestRepoCloneFunc) PushReturn(r0 *protocol.RepoCloneResponse, r1 error) {
	f.PushHook(func(context.Context, api.RepoName) (*protocol.RepoCloneResponse, error) {
		return r0, r1
	})
}

func (f *ClientRequestRepoCloneFunc) nextHook() func(context.Context, api.RepoName) (*protocol.RepoCloneResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientRequestRepoCloneFunc) appendCall(r0 ClientRequestRepoCloneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientRequestRepoCloneFuncCall objects
// describing the invocations of this function.
func (f *ClientRequestRepoCloneFunc) History() []ClientRequestRepoCloneFuncCall {
	f.mutex.Lock()
	history := make([]ClientRequestRepoCloneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientRequestRepoCloneFuncCall is an object that describes an invocation
// of method RequestRepoClone on an instance of MockClient.
type ClientRequestRepoCloneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *protocol.RepoCloneResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientRequestRepoCloneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientRequestRepoCloneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientRequestRepoUpdateFunc describes the behavior when the
// RequestRepoUpdate method of the parent MockClient instance is invoked.
type ClientRequestRepoUpdateFunc struct {
	defaultHook func(context.Context, api.RepoName, time.Duration) (*protocol.RepoUpdateResponse, error)
	hooks       []func(context.Context, api.RepoName, time.Duration) (*protocol.RepoUpdateResponse, error)
	history     []ClientRequestRepoUpdateFuncCall
	mutex       sync.Mutex
}

// RequestRepoUpdate delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) RequestRepoUpdate(v0 context.Context, v1 api.RepoName, v2 time.Duration) (*protocol.RepoUpdateResponse, error) {
	r0, r1 := m.RequestRepoUpdateFunc.nextHook()(v0, v1, v2)
	m.RequestRepoUpdateFunc.appendCall(ClientRequestRepoUpdateFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RequestRepoUpdate
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientRequestRepoUpdateFunc) SetDefaultHook(hook func(context.Context, api.RepoName, time.Duration) (*protocol.RepoUpdateResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RequestRepoUpdate method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientRequestRepoUpdateFunc) PushHook(hook func(context.Context, api.RepoName, time.Duration) (*protocol.RepoUpdateResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientRequestRepoUpdateFunc) SetDefaultReturn(r0 *protocol.RepoUpdateResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, time.Duration) (*protocol.RepoUpdateResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientRequestRepoUpdateFunc) PushReturn(r0 *protocol.RepoUpdateResponse, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, time.Duration) (*protocol.RepoUpdateResponse, error) {
		return r0, r1
	})
}

func (f *ClientRequestRepoUpdateFunc) nextHook() func(context.Context, api.RepoName, time.Duration) (*protocol.RepoUpdateResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientRequestRepoUpdateFunc) appendCall(r0 ClientRequestRepoUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientRequestRepoUpdateFuncCall objects
// describing the invocations of this function.
func (f *ClientRequestRepoUpdateFunc) History() []ClientRequestRepoUpdateFuncCall {
	f.mutex.Lock()
	history := make([]ClientRequestRepoUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientRequestRepoUpdateFuncCall is an object that describes an invocation
// of method RequestRepoUpdate on an instance of MockClient.
type ClientRequestRepoUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Duration
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *protocol.RepoUpdateResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientRequestRepoUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientRequestRepoUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientResolveRevisionFunc describes the behavior when the ResolveRevision
// method of the parent MockClient instance is invoked.
type ClientResolveRevisionFunc struct {
	defaultHook func(context.Context, api.RepoName, string, ResolveRevisionOptions) (api.CommitID, error)
	hooks       []func(context.Context, api.RepoName, string, ResolveRevisionOptions) (api.CommitID, error)
	history     []ClientResolveRevisionFuncCall
	mutex       sync.Mutex
}

// ResolveRevision delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) ResolveRevision(v0 context.Context, v1 api.RepoName, v2 string, v3 ResolveRevisionOptions) (api.CommitID, error) {
	r0, r1 := m.ResolveRevisionFunc.nextHook()(v0, v1, v2, v3)
	m.ResolveRevisionFunc.appendCall(ClientResolveRevisionFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ResolveRevision
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientResolveRevisionFunc) SetDefaultHook(hook func(context.Context, api.RepoName, string, ResolveRevisionOptions) (api.CommitID, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ResolveRevision method of the parent MockClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientResolveRevisionFunc) PushHook(hook func(context.Context, api.RepoName, string, ResolveRevisionOptions) (api.CommitID, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientResolveRevisionFunc) SetDefaultReturn(r0 api.CommitID, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, string, ResolveRevisionOptions) (api.CommitID, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientResolveRevisionFunc) PushReturn(r0 api.CommitID, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, string, ResolveRevisionOptions) (api.CommitID, error) {
		return r0, r1
	})
}

func (f *ClientResolveRevisionFunc) nextHook() func(context.Context, api.RepoName, string, ResolveRevisionOptions) (api.CommitID, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientResolveRevisionFunc) appendCall(r0 ClientResolveRevisionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientResolveRevisionFuncCall objects
// describing the invocations of this function.
func (f *ClientResolveRevisionFunc) History() []ClientResolveRevisionFuncCall {
	f.mutex.Lock()
	history := make([]ClientResolveRevisionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientResolveRevisionFuncCall is an object that describes an invocation
// of method ResolveRevision on an instance of MockClient.
type ClientResolveRevisionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 ResolveRevisionOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 api.CommitID
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientResolveRevisionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientResolveRevisionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientResolveRevisionsFunc describes the behavior when the
// ResolveRevisions method of the parent MockClient instance is invoked.
type ClientResolveRevisionsFunc struct {
	defaultHook func(context.Context, api.RepoName, []protocol.RevisionSpecifier) ([]string, error)
	hooks       []func(context.Context, api.RepoName, []protocol.RevisionSpecifier) ([]string, error)
	history     []ClientResolveRevisionsFuncCall
	mutex       sync.Mutex
}

// ResolveRevisions delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) ResolveRevisions(v0 context.Context, v1 api.RepoName, v2 []protocol.RevisionSpecifier) ([]string, error) {
	r0, r1 := m.ResolveRevisionsFunc.nextHook()(v0, v1, v2)
	m.ResolveRevisionsFunc.appendCall(ClientResolveRevisionsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ResolveRevisions
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientResolveRevisionsFunc) SetDefaultHook(hook func(context.Context, api.RepoName, []protocol.RevisionSpecifier) ([]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ResolveRevisions method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientResolveRevisionsFunc) PushHook(hook func(context.Context, api.RepoName, []protocol.RevisionSpecifier) ([]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientResolveRevisionsFunc) SetDefaultReturn(r0 []string, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, []protocol.RevisionSpecifier) ([]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientResolveRevisionsFunc) PushReturn(r0 []string, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, []protocol.RevisionSpecifier) ([]string, error) {
		return r0, r1
	})
}

func (f *ClientResolveRevisionsFunc) nextHook() func(context.Context, api.RepoName, []protocol.RevisionSpecifier) ([]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientResolveRevisionsFunc) appendCall(r0 ClientResolveRevisionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientResolveRevisionsFuncCall objects
// describing the invocations of this function.
func (f *ClientResolveRevisionsFunc) History() []ClientResolveRevisionsFuncCall {
	f.mutex.Lock()
	history := make([]ClientResolveRevisionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientResolveRevisionsFuncCall is an object that describes an invocation
// of method ResolveRevisions on an instance of MockClient.
type ClientResolveRevisionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []protocol.RevisionSpecifier
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientResolveRevisionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientResolveRevisionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientRevListFunc describes the behavior when the RevList method of the
// parent MockClient instance is invoked.
type ClientRevListFunc struct {
	defaultHook func(context.Context, string, string, func(commit string) (bool, error)) error
	hooks       []func(context.Context, string, string, func(commit string) (bool, error)) error
	history     []ClientRevListFuncCall
	mutex       sync.Mutex
}

// RevList delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) RevList(v0 context.Context, v1 string, v2 string, v3 func(commit string) (bool, error)) error {
	r0 := m.RevListFunc.nextHook()(v0, v1, v2, v3)
	m.RevListFunc.appendCall(ClientRevListFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the RevList method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientRevListFunc) SetDefaultHook(hook func(context.Context, string, string, func(commit string) (bool, error)) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RevList method of the parent MockClient instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientRevListFunc) PushHook(hook func(context.Context, string, string, func(commit string) (bool, error)) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientRevListFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string, string, func(commit string) (bool, error)) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientRevListFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string, string, func(commit string) (bool, error)) error {
		return r0
	})
}

func (f *ClientRevListFunc) nextHook() func(context.Context, string, string, func(commit string) (bool, error)) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientRevListFunc) appendCall(r0 ClientRevListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientRevListFuncCall objects describing
// the invocations of this function.
func (f *ClientRevListFunc) History() []ClientRevListFuncCall {
	f.mutex.Lock()
	history := make([]ClientRevListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientRevListFuncCall is an object that describes an invocation of method
// RevList on an instance of MockClient.
type ClientRevListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 func(commit string) (bool, error)
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientRevListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientRevListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientSearchFunc describes the behavior when the Search method of the
// parent MockClient instance is invoked.
type ClientSearchFunc struct {
	defaultHook func(context.Context, *protocol.SearchRequest, func([]protocol.CommitMatch)) (bool, error)
	hooks       []func(context.Context, *protocol.SearchRequest, func([]protocol.CommitMatch)) (bool, error)
	history     []ClientSearchFuncCall
	mutex       sync.Mutex
}

// Search delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) Search(v0 context.Context, v1 *protocol.SearchRequest, v2 func([]protocol.CommitMatch)) (bool, error) {
	r0, r1 := m.SearchFunc.nextHook()(v0, v1, v2)
	m.SearchFunc.appendCall(ClientSearchFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Search method of the
// parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientSearchFunc) SetDefaultHook(hook func(context.Context, *protocol.SearchRequest, func([]protocol.CommitMatch)) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Search method of the parent MockClient instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientSearchFunc) PushHook(hook func(context.Context, *protocol.SearchRequest, func([]protocol.CommitMatch)) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientSearchFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, *protocol.SearchRequest, func([]protocol.CommitMatch)) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientSearchFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, *protocol.SearchRequest, func([]protocol.CommitMatch)) (bool, error) {
		return r0, r1
	})
}

func (f *ClientSearchFunc) nextHook() func(context.Context, *protocol.SearchRequest, func([]protocol.CommitMatch)) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientSearchFunc) appendCall(r0 ClientSearchFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientSearchFuncCall objects describing the
// invocations of this function.
func (f *ClientSearchFunc) History() []ClientSearchFuncCall {
	f.mutex.Lock()
	history := make([]ClientSearchFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientSearchFuncCall is an object that describes an invocation of method
// Search on an instance of MockClient.
type ClientSearchFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *protocol.SearchRequest
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 func([]protocol.CommitMatch)
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientSearchFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientSearchFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientStatFunc describes the behavior when the Stat method of the parent
// MockClient instance is invoked.
type ClientStatFunc struct {
	defaultHook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, string) (fs.FileInfo, error)
	hooks       []func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, string) (fs.FileInfo, error)
	history     []ClientStatFuncCall
	mutex       sync.Mutex
}

// Stat delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) Stat(v0 context.Context, v1 authz.SubRepoPermissionChecker, v2 api.RepoName, v3 api.CommitID, v4 string) (fs.FileInfo, error) {
	r0, r1 := m.StatFunc.nextHook()(v0, v1, v2, v3, v4)
	m.StatFunc.appendCall(ClientStatFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Stat method of the
// parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientStatFunc) SetDefaultHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, string) (fs.FileInfo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Stat method of the parent MockClient instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientStatFunc) PushHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, string) (fs.FileInfo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientStatFunc) SetDefaultReturn(r0 fs.FileInfo, r1 error) {
	f.SetDefaultHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, string) (fs.FileInfo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientStatFunc) PushReturn(r0 fs.FileInfo, r1 error) {
	f.PushHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, string) (fs.FileInfo, error) {
		return r0, r1
	})
}

func (f *ClientStatFunc) nextHook() func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, api.CommitID, string) (fs.FileInfo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientStatFunc) appendCall(r0 ClientStatFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientStatFuncCall objects describing the
// invocations of this function.
func (f *ClientStatFunc) History() []ClientStatFuncCall {
	f.mutex.Lock()
	history := make([]ClientStatFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientStatFuncCall is an object that describes an invocation of method
// Stat on an instance of MockClient.
type ClientStatFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 authz.SubRepoPermissionChecker
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoName
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 api.CommitID
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 fs.FileInfo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientStatFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientStatFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientStreamBlameFileFunc describes the behavior when the StreamBlameFile
// method of the parent MockClient instance is invoked.
type ClientStreamBlameFileFunc struct {
	defaultHook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, *BlameOptions) (HunkReader, error)
	hooks       []func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, *BlameOptions) (HunkReader, error)
	history     []ClientStreamBlameFileFuncCall
	mutex       sync.Mutex
}

// StreamBlameFile delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) StreamBlameFile(v0 context.Context, v1 authz.SubRepoPermissionChecker, v2 api.RepoName, v3 string, v4 *BlameOptions) (HunkReader, error) {
	r0, r1 := m.StreamBlameFileFunc.nextHook()(v0, v1, v2, v3, v4)
	m.StreamBlameFileFunc.appendCall(ClientStreamBlameFileFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the StreamBlameFile
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientStreamBlameFileFunc) SetDefaultHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, *BlameOptions) (HunkReader, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// StreamBlameFile method of the parent MockClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientStreamBlameFileFunc) PushHook(hook func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, *BlameOptions) (HunkReader, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientStreamBlameFileFunc) SetDefaultReturn(r0 HunkReader, r1 error) {
	f.SetDefaultHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, *BlameOptions) (HunkReader, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientStreamBlameFileFunc) PushReturn(r0 HunkReader, r1 error) {
	f.PushHook(func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, *BlameOptions) (HunkReader, error) {
		return r0, r1
	})
}

func (f *ClientStreamBlameFileFunc) nextHook() func(context.Context, authz.SubRepoPermissionChecker, api.RepoName, string, *BlameOptions) (HunkReader, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientStreamBlameFileFunc) appendCall(r0 ClientStreamBlameFileFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientStreamBlameFileFuncCall objects
// describing the invocations of this function.
func (f *ClientStreamBlameFileFunc) History() []ClientStreamBlameFileFuncCall {
	f.mutex.Lock()
	history := make([]ClientStreamBlameFileFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientStreamBlameFileFuncCall is an object that describes an invocation
// of method StreamBlameFile on an instance of MockClient.
type ClientStreamBlameFileFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 authz.SubRepoPermissionChecker
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoName
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 *BlameOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 HunkReader
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientStreamBlameFileFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientStreamBlameFileFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
