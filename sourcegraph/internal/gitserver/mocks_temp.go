// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package gitserver

import (
	"context"
	"io"
	"io/fs"
	"sync"
	"time"

	api "github.com/sourcegraph/sourcegraph/internal/api"
	gitolite "github.com/sourcegraph/sourcegraph/internal/extsvc/gitolite"
	gitdomain "github.com/sourcegraph/sourcegraph/internal/gitserver/gitdomain"
	protocol "github.com/sourcegraph/sourcegraph/internal/gitserver/protocol"
	perforce "github.com/sourcegraph/sourcegraph/internal/perforce"
)

// MockClient is a mock implementation of the Client interface (from the
// package github.com/sourcegraph/sourcegraph/internal/gitserver) used for
// unit testing.
type MockClient struct {
	// AddrForRepoFunc is an instance of a mock function object controlling
	// the behavior of the method AddrForRepo.
	AddrForRepoFunc *ClientAddrForRepoFunc
	// ArchiveReaderFunc is an instance of a mock function object
	// controlling the behavior of the method ArchiveReader.
	ArchiveReaderFunc *ClientArchiveReaderFunc
	// BehindAheadFunc is an instance of a mock function object controlling
	// the behavior of the method BehindAhead.
	BehindAheadFunc *ClientBehindAheadFunc
	// ChangedFilesFunc is an instance of a mock function object controlling
	// the behavior of the method ChangedFiles.
	ChangedFilesFunc *ClientChangedFilesFunc
	// CheckPerforceCredentialsFunc is an instance of a mock function object
	// controlling the behavior of the method CheckPerforceCredentials.
	CheckPerforceCredentialsFunc *ClientCheckPerforceCredentialsFunc
	// CommitLogFunc is an instance of a mock function object controlling
	// the behavior of the method CommitLog.
	CommitLogFunc *ClientCommitLogFunc
	// CommitsFunc is an instance of a mock function object controlling the
	// behavior of the method Commits.
	CommitsFunc *ClientCommitsFunc
	// CommitsUniqueToBranchFunc is an instance of a mock function object
	// controlling the behavior of the method CommitsUniqueToBranch.
	CommitsUniqueToBranchFunc *ClientCommitsUniqueToBranchFunc
	// ContributorCountFunc is an instance of a mock function object
	// controlling the behavior of the method ContributorCount.
	ContributorCountFunc *ClientContributorCountFunc
	// CreateCommitFromPatchFunc is an instance of a mock function object
	// controlling the behavior of the method CreateCommitFromPatch.
	CreateCommitFromPatchFunc *ClientCreateCommitFromPatchFunc
	// DiffFunc is an instance of a mock function object controlling the
	// behavior of the method Diff.
	DiffFunc *ClientDiffFunc
	// FirstEverCommitFunc is an instance of a mock function object
	// controlling the behavior of the method FirstEverCommit.
	FirstEverCommitFunc *ClientFirstEverCommitFunc
	// GetCommitFunc is an instance of a mock function object controlling
	// the behavior of the method GetCommit.
	GetCommitFunc *ClientGetCommitFunc
	// GetDefaultBranchFunc is an instance of a mock function object
	// controlling the behavior of the method GetDefaultBranch.
	GetDefaultBranchFunc *ClientGetDefaultBranchFunc
	// GetObjectFunc is an instance of a mock function object controlling
	// the behavior of the method GetObject.
	GetObjectFunc *ClientGetObjectFunc
	// HasCommitAfterFunc is an instance of a mock function object
	// controlling the behavior of the method HasCommitAfter.
	HasCommitAfterFunc *ClientHasCommitAfterFunc
	// IsPerforcePathCloneableFunc is an instance of a mock function object
	// controlling the behavior of the method IsPerforcePathCloneable.
	IsPerforcePathCloneableFunc *ClientIsPerforcePathCloneableFunc
	// IsPerforceSuperUserFunc is an instance of a mock function object
	// controlling the behavior of the method IsPerforceSuperUser.
	IsPerforceSuperUserFunc *ClientIsPerforceSuperUserFunc
	// IsRepoCloneableFunc is an instance of a mock function object
	// controlling the behavior of the method IsRepoCloneable.
	IsRepoCloneableFunc *ClientIsRepoCloneableFunc
	// ListDirectoryChildrenFunc is an instance of a mock function object
	// controlling the behavior of the method ListDirectoryChildren.
	ListDirectoryChildrenFunc *ClientListDirectoryChildrenFunc
	// ListGitoliteReposFunc is an instance of a mock function object
	// controlling the behavior of the method ListGitoliteRepos.
	ListGitoliteReposFunc *ClientListGitoliteReposFunc
	// ListRefsFunc is an instance of a mock function object controlling the
	// behavior of the method ListRefs.
	ListRefsFunc *ClientListRefsFunc
	// LogReverseEachFunc is an instance of a mock function object
	// controlling the behavior of the method LogReverseEach.
	LogReverseEachFunc *ClientLogReverseEachFunc
	// LsFilesFunc is an instance of a mock function object controlling the
	// behavior of the method LsFiles.
	LsFilesFunc *ClientLsFilesFunc
	// MergeBaseFunc is an instance of a mock function object controlling
	// the behavior of the method MergeBase.
	MergeBaseFunc *ClientMergeBaseFunc
	// NewFileReaderFunc is an instance of a mock function object
	// controlling the behavior of the method NewFileReader.
	NewFileReaderFunc *ClientNewFileReaderFunc
	// PerforceGetChangelistFunc is an instance of a mock function object
	// controlling the behavior of the method PerforceGetChangelist.
	PerforceGetChangelistFunc *ClientPerforceGetChangelistFunc
	// PerforceGroupMembersFunc is an instance of a mock function object
	// controlling the behavior of the method PerforceGroupMembers.
	PerforceGroupMembersFunc *ClientPerforceGroupMembersFunc
	// PerforceProtectsForDepotFunc is an instance of a mock function object
	// controlling the behavior of the method PerforceProtectsForDepot.
	PerforceProtectsForDepotFunc *ClientPerforceProtectsForDepotFunc
	// PerforceProtectsForUserFunc is an instance of a mock function object
	// controlling the behavior of the method PerforceProtectsForUser.
	PerforceProtectsForUserFunc *ClientPerforceProtectsForUserFunc
	// PerforceUsersFunc is an instance of a mock function object
	// controlling the behavior of the method PerforceUsers.
	PerforceUsersFunc *ClientPerforceUsersFunc
	// ReadDirFunc is an instance of a mock function object controlling the
	// behavior of the method ReadDir.
	ReadDirFunc *ClientReadDirFunc
	// RepoCloneProgressFunc is an instance of a mock function object
	// controlling the behavior of the method RepoCloneProgress.
	RepoCloneProgressFunc *ClientRepoCloneProgressFunc
	// ResolveRevisionFunc is an instance of a mock function object
	// controlling the behavior of the method ResolveRevision.
	ResolveRevisionFunc *ClientResolveRevisionFunc
	// RevAtTimeFunc is an instance of a mock function object controlling
	// the behavior of the method RevAtTime.
	RevAtTimeFunc *ClientRevAtTimeFunc
	// ScopedFunc is an instance of a mock function object controlling the
	// behavior of the method Scoped.
	ScopedFunc *ClientScopedFunc
	// SearchFunc is an instance of a mock function object controlling the
	// behavior of the method Search.
	SearchFunc *ClientSearchFunc
	// StatFunc is an instance of a mock function object controlling the
	// behavior of the method Stat.
	StatFunc *ClientStatFunc
	// StreamBlameFileFunc is an instance of a mock function object
	// controlling the behavior of the method StreamBlameFile.
	StreamBlameFileFunc *ClientStreamBlameFileFunc
	// SystemInfoFunc is an instance of a mock function object controlling
	// the behavior of the method SystemInfo.
	SystemInfoFunc *ClientSystemInfoFunc
	// SystemsInfoFunc is an instance of a mock function object controlling
	// the behavior of the method SystemsInfo.
	SystemsInfoFunc *ClientSystemsInfoFunc
}

// NewMockClient creates a new mock of the Client interface. All methods
// return zero values for all results, unless overwritten.
func NewMockClient() *MockClient {
	return &MockClient{
		AddrForRepoFunc: &ClientAddrForRepoFunc{
			defaultHook: func(context.Context, api.RepoName) (r0 string) {
				return
			},
		},
		ArchiveReaderFunc: &ClientArchiveReaderFunc{
			defaultHook: func(context.Context, api.RepoName, ArchiveOptions) (r0 io.ReadCloser, r1 error) {
				return
			},
		},
		BehindAheadFunc: &ClientBehindAheadFunc{
			defaultHook: func(context.Context, api.RepoName, string, string) (r0 *gitdomain.BehindAhead, r1 error) {
				return
			},
		},
		ChangedFilesFunc: &ClientChangedFilesFunc{
			defaultHook: func(context.Context, api.RepoName, string, string) (r0 ChangedFilesIterator, r1 error) {
				return
			},
		},
		CheckPerforceCredentialsFunc: &ClientCheckPerforceCredentialsFunc{
			defaultHook: func(context.Context, protocol.PerforceConnectionDetails) (r0 error) {
				return
			},
		},
		CommitLogFunc: &ClientCommitLogFunc{
			defaultHook: func(context.Context, api.RepoName, time.Time) (r0 []CommitLog, r1 error) {
				return
			},
		},
		CommitsFunc: &ClientCommitsFunc{
			defaultHook: func(context.Context, api.RepoName, CommitsOptions) (r0 []*gitdomain.Commit, r1 error) {
				return
			},
		},
		CommitsUniqueToBranchFunc: &ClientCommitsUniqueToBranchFunc{
			defaultHook: func(context.Context, api.RepoName, string, bool, *time.Time) (r0 map[string]time.Time, r1 error) {
				return
			},
		},
		ContributorCountFunc: &ClientContributorCountFunc{
			defaultHook: func(context.Context, api.RepoName, ContributorOptions) (r0 []*gitdomain.ContributorCount, r1 error) {
				return
			},
		},
		CreateCommitFromPatchFunc: &ClientCreateCommitFromPatchFunc{
			defaultHook: func(context.Context, protocol.CreateCommitFromPatchRequest) (r0 *protocol.CreateCommitFromPatchResponse, r1 error) {
				return
			},
		},
		DiffFunc: &ClientDiffFunc{
			defaultHook: func(context.Context, api.RepoName, DiffOptions) (r0 *DiffFileIterator, r1 error) {
				return
			},
		},
		FirstEverCommitFunc: &ClientFirstEverCommitFunc{
			defaultHook: func(context.Context, api.RepoName) (r0 *gitdomain.Commit, r1 error) {
				return
			},
		},
		GetCommitFunc: &ClientGetCommitFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID) (r0 *gitdomain.Commit, r1 error) {
				return
			},
		},
		GetDefaultBranchFunc: &ClientGetDefaultBranchFunc{
			defaultHook: func(context.Context, api.RepoName, bool) (r0 string, r1 api.CommitID, r2 error) {
				return
			},
		},
		GetObjectFunc: &ClientGetObjectFunc{
			defaultHook: func(context.Context, api.RepoName, string) (r0 *gitdomain.GitObject, r1 error) {
				return
			},
		},
		HasCommitAfterFunc: &ClientHasCommitAfterFunc{
			defaultHook: func(context.Context, api.RepoName, string, string) (r0 bool, r1 error) {
				return
			},
		},
		IsPerforcePathCloneableFunc: &ClientIsPerforcePathCloneableFunc{
			defaultHook: func(context.Context, protocol.PerforceConnectionDetails, string) (r0 error) {
				return
			},
		},
		IsPerforceSuperUserFunc: &ClientIsPerforceSuperUserFunc{
			defaultHook: func(context.Context, protocol.PerforceConnectionDetails) (r0 error) {
				return
			},
		},
		IsRepoCloneableFunc: &ClientIsRepoCloneableFunc{
			defaultHook: func(context.Context, api.RepoName) (r0 error) {
				return
			},
		},
		ListDirectoryChildrenFunc: &ClientListDirectoryChildrenFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID, []string) (r0 map[string][]string, r1 error) {
				return
			},
		},
		ListGitoliteReposFunc: &ClientListGitoliteReposFunc{
			defaultHook: func(context.Context, string) (r0 []*gitolite.Repo, r1 error) {
				return
			},
		},
		ListRefsFunc: &ClientListRefsFunc{
			defaultHook: func(context.Context, api.RepoName, ListRefsOpts) (r0 []gitdomain.Ref, r1 error) {
				return
			},
		},
		LogReverseEachFunc: &ClientLogReverseEachFunc{
			defaultHook: func(context.Context, string, string, int, func(entry gitdomain.LogEntry) error) (r0 error) {
				return
			},
		},
		LsFilesFunc: &ClientLsFilesFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID, ...gitdomain.Pathspec) (r0 []string, r1 error) {
				return
			},
		},
		MergeBaseFunc: &ClientMergeBaseFunc{
			defaultHook: func(context.Context, api.RepoName, string, string) (r0 api.CommitID, r1 error) {
				return
			},
		},
		NewFileReaderFunc: &ClientNewFileReaderFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID, string) (r0 io.ReadCloser, r1 error) {
				return
			},
		},
		PerforceGetChangelistFunc: &ClientPerforceGetChangelistFunc{
			defaultHook: func(context.Context, protocol.PerforceConnectionDetails, string) (r0 *perforce.Changelist, r1 error) {
				return
			},
		},
		PerforceGroupMembersFunc: &ClientPerforceGroupMembersFunc{
			defaultHook: func(context.Context, protocol.PerforceConnectionDetails, string) (r0 []string, r1 error) {
				return
			},
		},
		PerforceProtectsForDepotFunc: &ClientPerforceProtectsForDepotFunc{
			defaultHook: func(context.Context, protocol.PerforceConnectionDetails, string) (r0 []*perforce.Protect, r1 error) {
				return
			},
		},
		PerforceProtectsForUserFunc: &ClientPerforceProtectsForUserFunc{
			defaultHook: func(context.Context, protocol.PerforceConnectionDetails, string) (r0 []*perforce.Protect, r1 error) {
				return
			},
		},
		PerforceUsersFunc: &ClientPerforceUsersFunc{
			defaultHook: func(context.Context, protocol.PerforceConnectionDetails) (r0 []*perforce.User, r1 error) {
				return
			},
		},
		ReadDirFunc: &ClientReadDirFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID, string, bool) (r0 []fs.FileInfo, r1 error) {
				return
			},
		},
		RepoCloneProgressFunc: &ClientRepoCloneProgressFunc{
			defaultHook: func(context.Context, api.RepoName) (r0 *protocol.RepoCloneProgress, r1 error) {
				return
			},
		},
		ResolveRevisionFunc: &ClientResolveRevisionFunc{
			defaultHook: func(context.Context, api.RepoName, string, ResolveRevisionOptions) (r0 api.CommitID, r1 error) {
				return
			},
		},
		RevAtTimeFunc: &ClientRevAtTimeFunc{
			defaultHook: func(context.Context, api.RepoName, string, time.Time) (r0 api.CommitID, r1 bool, r2 error) {
				return
			},
		},
		ScopedFunc: &ClientScopedFunc{
			defaultHook: func(string) (r0 Client) {
				return
			},
		},
		SearchFunc: &ClientSearchFunc{
			defaultHook: func(context.Context, *protocol.SearchRequest, func([]protocol.CommitMatch)) (r0 bool, r1 error) {
				return
			},
		},
		StatFunc: &ClientStatFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID, string) (r0 fs.FileInfo, r1 error) {
				return
			},
		},
		StreamBlameFileFunc: &ClientStreamBlameFileFunc{
			defaultHook: func(context.Context, api.RepoName, string, *BlameOptions) (r0 HunkReader, r1 error) {
				return
			},
		},
		SystemInfoFunc: &ClientSystemInfoFunc{
			defaultHook: func(context.Context, string) (r0 protocol.SystemInfo, r1 error) {
				return
			},
		},
		SystemsInfoFunc: &ClientSystemsInfoFunc{
			defaultHook: func(context.Context) (r0 []protocol.SystemInfo, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockClient creates a new mock of the Client interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockClient() *MockClient {
	return &MockClient{
		AddrForRepoFunc: &ClientAddrForRepoFunc{
			defaultHook: func(context.Context, api.RepoName) string {
				panic("unexpected invocation of MockClient.AddrForRepo")
			},
		},
		ArchiveReaderFunc: &ClientArchiveReaderFunc{
			defaultHook: func(context.Context, api.RepoName, ArchiveOptions) (io.ReadCloser, error) {
				panic("unexpected invocation of MockClient.ArchiveReader")
			},
		},
		BehindAheadFunc: &ClientBehindAheadFunc{
			defaultHook: func(context.Context, api.RepoName, string, string) (*gitdomain.BehindAhead, error) {
				panic("unexpected invocation of MockClient.BehindAhead")
			},
		},
		ChangedFilesFunc: &ClientChangedFilesFunc{
			defaultHook: func(context.Context, api.RepoName, string, string) (ChangedFilesIterator, error) {
				panic("unexpected invocation of MockClient.ChangedFiles")
			},
		},
		CheckPerforceCredentialsFunc: &ClientCheckPerforceCredentialsFunc{
			defaultHook: func(context.Context, protocol.PerforceConnectionDetails) error {
				panic("unexpected invocation of MockClient.CheckPerforceCredentials")
			},
		},
		CommitLogFunc: &ClientCommitLogFunc{
			defaultHook: func(context.Context, api.RepoName, time.Time) ([]CommitLog, error) {
				panic("unexpected invocation of MockClient.CommitLog")
			},
		},
		CommitsFunc: &ClientCommitsFunc{
			defaultHook: func(context.Context, api.RepoName, CommitsOptions) ([]*gitdomain.Commit, error) {
				panic("unexpected invocation of MockClient.Commits")
			},
		},
		CommitsUniqueToBranchFunc: &ClientCommitsUniqueToBranchFunc{
			defaultHook: func(context.Context, api.RepoName, string, bool, *time.Time) (map[string]time.Time, error) {
				panic("unexpected invocation of MockClient.CommitsUniqueToBranch")
			},
		},
		ContributorCountFunc: &ClientContributorCountFunc{
			defaultHook: func(context.Context, api.RepoName, ContributorOptions) ([]*gitdomain.ContributorCount, error) {
				panic("unexpected invocation of MockClient.ContributorCount")
			},
		},
		CreateCommitFromPatchFunc: &ClientCreateCommitFromPatchFunc{
			defaultHook: func(context.Context, protocol.CreateCommitFromPatchRequest) (*protocol.CreateCommitFromPatchResponse, error) {
				panic("unexpected invocation of MockClient.CreateCommitFromPatch")
			},
		},
		DiffFunc: &ClientDiffFunc{
			defaultHook: func(context.Context, api.RepoName, DiffOptions) (*DiffFileIterator, error) {
				panic("unexpected invocation of MockClient.Diff")
			},
		},
		FirstEverCommitFunc: &ClientFirstEverCommitFunc{
			defaultHook: func(context.Context, api.RepoName) (*gitdomain.Commit, error) {
				panic("unexpected invocation of MockClient.FirstEverCommit")
			},
		},
		GetCommitFunc: &ClientGetCommitFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID) (*gitdomain.Commit, error) {
				panic("unexpected invocation of MockClient.GetCommit")
			},
		},
		GetDefaultBranchFunc: &ClientGetDefaultBranchFunc{
			defaultHook: func(context.Context, api.RepoName, bool) (string, api.CommitID, error) {
				panic("unexpected invocation of MockClient.GetDefaultBranch")
			},
		},
		GetObjectFunc: &ClientGetObjectFunc{
			defaultHook: func(context.Context, api.RepoName, string) (*gitdomain.GitObject, error) {
				panic("unexpected invocation of MockClient.GetObject")
			},
		},
		HasCommitAfterFunc: &ClientHasCommitAfterFunc{
			defaultHook: func(context.Context, api.RepoName, string, string) (bool, error) {
				panic("unexpected invocation of MockClient.HasCommitAfter")
			},
		},
		IsPerforcePathCloneableFunc: &ClientIsPerforcePathCloneableFunc{
			defaultHook: func(context.Context, protocol.PerforceConnectionDetails, string) error {
				panic("unexpected invocation of MockClient.IsPerforcePathCloneable")
			},
		},
		IsPerforceSuperUserFunc: &ClientIsPerforceSuperUserFunc{
			defaultHook: func(context.Context, protocol.PerforceConnectionDetails) error {
				panic("unexpected invocation of MockClient.IsPerforceSuperUser")
			},
		},
		IsRepoCloneableFunc: &ClientIsRepoCloneableFunc{
			defaultHook: func(context.Context, api.RepoName) error {
				panic("unexpected invocation of MockClient.IsRepoCloneable")
			},
		},
		ListDirectoryChildrenFunc: &ClientListDirectoryChildrenFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID, []string) (map[string][]string, error) {
				panic("unexpected invocation of MockClient.ListDirectoryChildren")
			},
		},
		ListGitoliteReposFunc: &ClientListGitoliteReposFunc{
			defaultHook: func(context.Context, string) ([]*gitolite.Repo, error) {
				panic("unexpected invocation of MockClient.ListGitoliteRepos")
			},
		},
		ListRefsFunc: &ClientListRefsFunc{
			defaultHook: func(context.Context, api.RepoName, ListRefsOpts) ([]gitdomain.Ref, error) {
				panic("unexpected invocation of MockClient.ListRefs")
			},
		},
		LogReverseEachFunc: &ClientLogReverseEachFunc{
			defaultHook: func(context.Context, string, string, int, func(entry gitdomain.LogEntry) error) error {
				panic("unexpected invocation of MockClient.LogReverseEach")
			},
		},
		LsFilesFunc: &ClientLsFilesFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID, ...gitdomain.Pathspec) ([]string, error) {
				panic("unexpected invocation of MockClient.LsFiles")
			},
		},
		MergeBaseFunc: &ClientMergeBaseFunc{
			defaultHook: func(context.Context, api.RepoName, string, string) (api.CommitID, error) {
				panic("unexpected invocation of MockClient.MergeBase")
			},
		},
		NewFileReaderFunc: &ClientNewFileReaderFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID, string) (io.ReadCloser, error) {
				panic("unexpected invocation of MockClient.NewFileReader")
			},
		},
		PerforceGetChangelistFunc: &ClientPerforceGetChangelistFunc{
			defaultHook: func(context.Context, protocol.PerforceConnectionDetails, string) (*perforce.Changelist, error) {
				panic("unexpected invocation of MockClient.PerforceGetChangelist")
			},
		},
		PerforceGroupMembersFunc: &ClientPerforceGroupMembersFunc{
			defaultHook: func(context.Context, protocol.PerforceConnectionDetails, string) ([]string, error) {
				panic("unexpected invocation of MockClient.PerforceGroupMembers")
			},
		},
		PerforceProtectsForDepotFunc: &ClientPerforceProtectsForDepotFunc{
			defaultHook: func(context.Context, protocol.PerforceConnectionDetails, string) ([]*perforce.Protect, error) {
				panic("unexpected invocation of MockClient.PerforceProtectsForDepot")
			},
		},
		PerforceProtectsForUserFunc: &ClientPerforceProtectsForUserFunc{
			defaultHook: func(context.Context, protocol.PerforceConnectionDetails, string) ([]*perforce.Protect, error) {
				panic("unexpected invocation of MockClient.PerforceProtectsForUser")
			},
		},
		PerforceUsersFunc: &ClientPerforceUsersFunc{
			defaultHook: func(context.Context, protocol.PerforceConnectionDetails) ([]*perforce.User, error) {
				panic("unexpected invocation of MockClient.PerforceUsers")
			},
		},
		ReadDirFunc: &ClientReadDirFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID, string, bool) ([]fs.FileInfo, error) {
				panic("unexpected invocation of MockClient.ReadDir")
			},
		},
		RepoCloneProgressFunc: &ClientRepoCloneProgressFunc{
			defaultHook: func(context.Context, api.RepoName) (*protocol.RepoCloneProgress, error) {
				panic("unexpected invocation of MockClient.RepoCloneProgress")
			},
		},
		ResolveRevisionFunc: &ClientResolveRevisionFunc{
			defaultHook: func(context.Context, api.RepoName, string, ResolveRevisionOptions) (api.CommitID, error) {
				panic("unexpected invocation of MockClient.ResolveRevision")
			},
		},
		RevAtTimeFunc: &ClientRevAtTimeFunc{
			defaultHook: func(context.Context, api.RepoName, string, time.Time) (api.CommitID, bool, error) {
				panic("unexpected invocation of MockClient.RevAtTime")
			},
		},
		ScopedFunc: &ClientScopedFunc{
			defaultHook: func(string) Client {
				panic("unexpected invocation of MockClient.Scoped")
			},
		},
		SearchFunc: &ClientSearchFunc{
			defaultHook: func(context.Context, *protocol.SearchRequest, func([]protocol.CommitMatch)) (bool, error) {
				panic("unexpected invocation of MockClient.Search")
			},
		},
		StatFunc: &ClientStatFunc{
			defaultHook: func(context.Context, api.RepoName, api.CommitID, string) (fs.FileInfo, error) {
				panic("unexpected invocation of MockClient.Stat")
			},
		},
		StreamBlameFileFunc: &ClientStreamBlameFileFunc{
			defaultHook: func(context.Context, api.RepoName, string, *BlameOptions) (HunkReader, error) {
				panic("unexpected invocation of MockClient.StreamBlameFile")
			},
		},
		SystemInfoFunc: &ClientSystemInfoFunc{
			defaultHook: func(context.Context, string) (protocol.SystemInfo, error) {
				panic("unexpected invocation of MockClient.SystemInfo")
			},
		},
		SystemsInfoFunc: &ClientSystemsInfoFunc{
			defaultHook: func(context.Context) ([]protocol.SystemInfo, error) {
				panic("unexpected invocation of MockClient.SystemsInfo")
			},
		},
	}
}

// NewMockClientFrom creates a new mock of the MockClient interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockClientFrom(i Client) *MockClient {
	return &MockClient{
		AddrForRepoFunc: &ClientAddrForRepoFunc{
			defaultHook: i.AddrForRepo,
		},
		ArchiveReaderFunc: &ClientArchiveReaderFunc{
			defaultHook: i.ArchiveReader,
		},
		BehindAheadFunc: &ClientBehindAheadFunc{
			defaultHook: i.BehindAhead,
		},
		ChangedFilesFunc: &ClientChangedFilesFunc{
			defaultHook: i.ChangedFiles,
		},
		CheckPerforceCredentialsFunc: &ClientCheckPerforceCredentialsFunc{
			defaultHook: i.CheckPerforceCredentials,
		},
		CommitLogFunc: &ClientCommitLogFunc{
			defaultHook: i.CommitLog,
		},
		CommitsFunc: &ClientCommitsFunc{
			defaultHook: i.Commits,
		},
		CommitsUniqueToBranchFunc: &ClientCommitsUniqueToBranchFunc{
			defaultHook: i.CommitsUniqueToBranch,
		},
		ContributorCountFunc: &ClientContributorCountFunc{
			defaultHook: i.ContributorCount,
		},
		CreateCommitFromPatchFunc: &ClientCreateCommitFromPatchFunc{
			defaultHook: i.CreateCommitFromPatch,
		},
		DiffFunc: &ClientDiffFunc{
			defaultHook: i.Diff,
		},
		FirstEverCommitFunc: &ClientFirstEverCommitFunc{
			defaultHook: i.FirstEverCommit,
		},
		GetCommitFunc: &ClientGetCommitFunc{
			defaultHook: i.GetCommit,
		},
		GetDefaultBranchFunc: &ClientGetDefaultBranchFunc{
			defaultHook: i.GetDefaultBranch,
		},
		GetObjectFunc: &ClientGetObjectFunc{
			defaultHook: i.GetObject,
		},
		HasCommitAfterFunc: &ClientHasCommitAfterFunc{
			defaultHook: i.HasCommitAfter,
		},
		IsPerforcePathCloneableFunc: &ClientIsPerforcePathCloneableFunc{
			defaultHook: i.IsPerforcePathCloneable,
		},
		IsPerforceSuperUserFunc: &ClientIsPerforceSuperUserFunc{
			defaultHook: i.IsPerforceSuperUser,
		},
		IsRepoCloneableFunc: &ClientIsRepoCloneableFunc{
			defaultHook: i.IsRepoCloneable,
		},
		ListDirectoryChildrenFunc: &ClientListDirectoryChildrenFunc{
			defaultHook: i.ListDirectoryChildren,
		},
		ListGitoliteReposFunc: &ClientListGitoliteReposFunc{
			defaultHook: i.ListGitoliteRepos,
		},
		ListRefsFunc: &ClientListRefsFunc{
			defaultHook: i.ListRefs,
		},
		LogReverseEachFunc: &ClientLogReverseEachFunc{
			defaultHook: i.LogReverseEach,
		},
		LsFilesFunc: &ClientLsFilesFunc{
			defaultHook: i.LsFiles,
		},
		MergeBaseFunc: &ClientMergeBaseFunc{
			defaultHook: i.MergeBase,
		},
		NewFileReaderFunc: &ClientNewFileReaderFunc{
			defaultHook: i.NewFileReader,
		},
		PerforceGetChangelistFunc: &ClientPerforceGetChangelistFunc{
			defaultHook: i.PerforceGetChangelist,
		},
		PerforceGroupMembersFunc: &ClientPerforceGroupMembersFunc{
			defaultHook: i.PerforceGroupMembers,
		},
		PerforceProtectsForDepotFunc: &ClientPerforceProtectsForDepotFunc{
			defaultHook: i.PerforceProtectsForDepot,
		},
		PerforceProtectsForUserFunc: &ClientPerforceProtectsForUserFunc{
			defaultHook: i.PerforceProtectsForUser,
		},
		PerforceUsersFunc: &ClientPerforceUsersFunc{
			defaultHook: i.PerforceUsers,
		},
		ReadDirFunc: &ClientReadDirFunc{
			defaultHook: i.ReadDir,
		},
		RepoCloneProgressFunc: &ClientRepoCloneProgressFunc{
			defaultHook: i.RepoCloneProgress,
		},
		ResolveRevisionFunc: &ClientResolveRevisionFunc{
			defaultHook: i.ResolveRevision,
		},
		RevAtTimeFunc: &ClientRevAtTimeFunc{
			defaultHook: i.RevAtTime,
		},
		ScopedFunc: &ClientScopedFunc{
			defaultHook: i.Scoped,
		},
		SearchFunc: &ClientSearchFunc{
			defaultHook: i.Search,
		},
		StatFunc: &ClientStatFunc{
			defaultHook: i.Stat,
		},
		StreamBlameFileFunc: &ClientStreamBlameFileFunc{
			defaultHook: i.StreamBlameFile,
		},
		SystemInfoFunc: &ClientSystemInfoFunc{
			defaultHook: i.SystemInfo,
		},
		SystemsInfoFunc: &ClientSystemsInfoFunc{
			defaultHook: i.SystemsInfo,
		},
	}
}

// ClientAddrForRepoFunc describes the behavior when the AddrForRepo method
// of the parent MockClient instance is invoked.
type ClientAddrForRepoFunc struct {
	defaultHook func(context.Context, api.RepoName) string
	hooks       []func(context.Context, api.RepoName) string
	history     []ClientAddrForRepoFuncCall
	mutex       sync.Mutex
}

// AddrForRepo delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) AddrForRepo(v0 context.Context, v1 api.RepoName) string {
	r0 := m.AddrForRepoFunc.nextHook()(v0, v1)
	m.AddrForRepoFunc.appendCall(ClientAddrForRepoFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the AddrForRepo method
// of the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientAddrForRepoFunc) SetDefaultHook(hook func(context.Context, api.RepoName) string) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AddrForRepo method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientAddrForRepoFunc) PushHook(hook func(context.Context, api.RepoName) string) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientAddrForRepoFunc) SetDefaultReturn(r0 string) {
	f.SetDefaultHook(func(context.Context, api.RepoName) string {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientAddrForRepoFunc) PushReturn(r0 string) {
	f.PushHook(func(context.Context, api.RepoName) string {
		return r0
	})
}

func (f *ClientAddrForRepoFunc) nextHook() func(context.Context, api.RepoName) string {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientAddrForRepoFunc) appendCall(r0 ClientAddrForRepoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientAddrForRepoFuncCall objects
// describing the invocations of this function.
func (f *ClientAddrForRepoFunc) History() []ClientAddrForRepoFuncCall {
	f.mutex.Lock()
	history := make([]ClientAddrForRepoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientAddrForRepoFuncCall is an object that describes an invocation of
// method AddrForRepo on an instance of MockClient.
type ClientAddrForRepoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientAddrForRepoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientAddrForRepoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientArchiveReaderFunc describes the behavior when the ArchiveReader
// method of the parent MockClient instance is invoked.
type ClientArchiveReaderFunc struct {
	defaultHook func(context.Context, api.RepoName, ArchiveOptions) (io.ReadCloser, error)
	hooks       []func(context.Context, api.RepoName, ArchiveOptions) (io.ReadCloser, error)
	history     []ClientArchiveReaderFuncCall
	mutex       sync.Mutex
}

// ArchiveReader delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) ArchiveReader(v0 context.Context, v1 api.RepoName, v2 ArchiveOptions) (io.ReadCloser, error) {
	r0, r1 := m.ArchiveReaderFunc.nextHook()(v0, v1, v2)
	m.ArchiveReaderFunc.appendCall(ClientArchiveReaderFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ArchiveReader method
// of the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientArchiveReaderFunc) SetDefaultHook(hook func(context.Context, api.RepoName, ArchiveOptions) (io.ReadCloser, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ArchiveReader method of the parent MockClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientArchiveReaderFunc) PushHook(hook func(context.Context, api.RepoName, ArchiveOptions) (io.ReadCloser, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientArchiveReaderFunc) SetDefaultReturn(r0 io.ReadCloser, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, ArchiveOptions) (io.ReadCloser, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientArchiveReaderFunc) PushReturn(r0 io.ReadCloser, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, ArchiveOptions) (io.ReadCloser, error) {
		return r0, r1
	})
}

func (f *ClientArchiveReaderFunc) nextHook() func(context.Context, api.RepoName, ArchiveOptions) (io.ReadCloser, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientArchiveReaderFunc) appendCall(r0 ClientArchiveReaderFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientArchiveReaderFuncCall objects
// describing the invocations of this function.
func (f *ClientArchiveReaderFunc) History() []ClientArchiveReaderFuncCall {
	f.mutex.Lock()
	history := make([]ClientArchiveReaderFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientArchiveReaderFuncCall is an object that describes an invocation of
// method ArchiveReader on an instance of MockClient.
type ClientArchiveReaderFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 ArchiveOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 io.ReadCloser
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientArchiveReaderFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientArchiveReaderFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientBehindAheadFunc describes the behavior when the BehindAhead method
// of the parent MockClient instance is invoked.
type ClientBehindAheadFunc struct {
	defaultHook func(context.Context, api.RepoName, string, string) (*gitdomain.BehindAhead, error)
	hooks       []func(context.Context, api.RepoName, string, string) (*gitdomain.BehindAhead, error)
	history     []ClientBehindAheadFuncCall
	mutex       sync.Mutex
}

// BehindAhead delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) BehindAhead(v0 context.Context, v1 api.RepoName, v2 string, v3 string) (*gitdomain.BehindAhead, error) {
	r0, r1 := m.BehindAheadFunc.nextHook()(v0, v1, v2, v3)
	m.BehindAheadFunc.appendCall(ClientBehindAheadFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the BehindAhead method
// of the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientBehindAheadFunc) SetDefaultHook(hook func(context.Context, api.RepoName, string, string) (*gitdomain.BehindAhead, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BehindAhead method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientBehindAheadFunc) PushHook(hook func(context.Context, api.RepoName, string, string) (*gitdomain.BehindAhead, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientBehindAheadFunc) SetDefaultReturn(r0 *gitdomain.BehindAhead, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, string, string) (*gitdomain.BehindAhead, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientBehindAheadFunc) PushReturn(r0 *gitdomain.BehindAhead, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, string, string) (*gitdomain.BehindAhead, error) {
		return r0, r1
	})
}

func (f *ClientBehindAheadFunc) nextHook() func(context.Context, api.RepoName, string, string) (*gitdomain.BehindAhead, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientBehindAheadFunc) appendCall(r0 ClientBehindAheadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientBehindAheadFuncCall objects
// describing the invocations of this function.
func (f *ClientBehindAheadFunc) History() []ClientBehindAheadFuncCall {
	f.mutex.Lock()
	history := make([]ClientBehindAheadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientBehindAheadFuncCall is an object that describes an invocation of
// method BehindAhead on an instance of MockClient.
type ClientBehindAheadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *gitdomain.BehindAhead
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientBehindAheadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientBehindAheadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientChangedFilesFunc describes the behavior when the ChangedFiles
// method of the parent MockClient instance is invoked.
type ClientChangedFilesFunc struct {
	defaultHook func(context.Context, api.RepoName, string, string) (ChangedFilesIterator, error)
	hooks       []func(context.Context, api.RepoName, string, string) (ChangedFilesIterator, error)
	history     []ClientChangedFilesFuncCall
	mutex       sync.Mutex
}

// ChangedFiles delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) ChangedFiles(v0 context.Context, v1 api.RepoName, v2 string, v3 string) (ChangedFilesIterator, error) {
	r0, r1 := m.ChangedFilesFunc.nextHook()(v0, v1, v2, v3)
	m.ChangedFilesFunc.appendCall(ClientChangedFilesFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ChangedFiles method
// of the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientChangedFilesFunc) SetDefaultHook(hook func(context.Context, api.RepoName, string, string) (ChangedFilesIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ChangedFiles method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientChangedFilesFunc) PushHook(hook func(context.Context, api.RepoName, string, string) (ChangedFilesIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientChangedFilesFunc) SetDefaultReturn(r0 ChangedFilesIterator, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, string, string) (ChangedFilesIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientChangedFilesFunc) PushReturn(r0 ChangedFilesIterator, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, string, string) (ChangedFilesIterator, error) {
		return r0, r1
	})
}

func (f *ClientChangedFilesFunc) nextHook() func(context.Context, api.RepoName, string, string) (ChangedFilesIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientChangedFilesFunc) appendCall(r0 ClientChangedFilesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientChangedFilesFuncCall objects
// describing the invocations of this function.
func (f *ClientChangedFilesFunc) History() []ClientChangedFilesFuncCall {
	f.mutex.Lock()
	history := make([]ClientChangedFilesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientChangedFilesFuncCall is an object that describes an invocation of
// method ChangedFiles on an instance of MockClient.
type ClientChangedFilesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 ChangedFilesIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientChangedFilesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientChangedFilesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientCheckPerforceCredentialsFunc describes the behavior when the
// CheckPerforceCredentials method of the parent MockClient instance is
// invoked.
type ClientCheckPerforceCredentialsFunc struct {
	defaultHook func(context.Context, protocol.PerforceConnectionDetails) error
	hooks       []func(context.Context, protocol.PerforceConnectionDetails) error
	history     []ClientCheckPerforceCredentialsFuncCall
	mutex       sync.Mutex
}

// CheckPerforceCredentials delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockClient) CheckPerforceCredentials(v0 context.Context, v1 protocol.PerforceConnectionDetails) error {
	r0 := m.CheckPerforceCredentialsFunc.nextHook()(v0, v1)
	m.CheckPerforceCredentialsFunc.appendCall(ClientCheckPerforceCredentialsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// CheckPerforceCredentials method of the parent MockClient instance is
// invoked and the hook queue is empty.
func (f *ClientCheckPerforceCredentialsFunc) SetDefaultHook(hook func(context.Context, protocol.PerforceConnectionDetails) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CheckPerforceCredentials method of the parent MockClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ClientCheckPerforceCredentialsFunc) PushHook(hook func(context.Context, protocol.PerforceConnectionDetails) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientCheckPerforceCredentialsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, protocol.PerforceConnectionDetails) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientCheckPerforceCredentialsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, protocol.PerforceConnectionDetails) error {
		return r0
	})
}

func (f *ClientCheckPerforceCredentialsFunc) nextHook() func(context.Context, protocol.PerforceConnectionDetails) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientCheckPerforceCredentialsFunc) appendCall(r0 ClientCheckPerforceCredentialsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientCheckPerforceCredentialsFuncCall
// objects describing the invocations of this function.
func (f *ClientCheckPerforceCredentialsFunc) History() []ClientCheckPerforceCredentialsFuncCall {
	f.mutex.Lock()
	history := make([]ClientCheckPerforceCredentialsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientCheckPerforceCredentialsFuncCall is an object that describes an
// invocation of method CheckPerforceCredentials on an instance of
// MockClient.
type ClientCheckPerforceCredentialsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 protocol.PerforceConnectionDetails
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientCheckPerforceCredentialsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientCheckPerforceCredentialsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientCommitLogFunc describes the behavior when the CommitLog method of
// the parent MockClient instance is invoked.
type ClientCommitLogFunc struct {
	defaultHook func(context.Context, api.RepoName, time.Time) ([]CommitLog, error)
	hooks       []func(context.Context, api.RepoName, time.Time) ([]CommitLog, error)
	history     []ClientCommitLogFuncCall
	mutex       sync.Mutex
}

// CommitLog delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) CommitLog(v0 context.Context, v1 api.RepoName, v2 time.Time) ([]CommitLog, error) {
	r0, r1 := m.CommitLogFunc.nextHook()(v0, v1, v2)
	m.CommitLogFunc.appendCall(ClientCommitLogFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CommitLog method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientCommitLogFunc) SetDefaultHook(hook func(context.Context, api.RepoName, time.Time) ([]CommitLog, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CommitLog method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientCommitLogFunc) PushHook(hook func(context.Context, api.RepoName, time.Time) ([]CommitLog, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientCommitLogFunc) SetDefaultReturn(r0 []CommitLog, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, time.Time) ([]CommitLog, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientCommitLogFunc) PushReturn(r0 []CommitLog, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, time.Time) ([]CommitLog, error) {
		return r0, r1
	})
}

func (f *ClientCommitLogFunc) nextHook() func(context.Context, api.RepoName, time.Time) ([]CommitLog, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientCommitLogFunc) appendCall(r0 ClientCommitLogFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientCommitLogFuncCall objects describing
// the invocations of this function.
func (f *ClientCommitLogFunc) History() []ClientCommitLogFuncCall {
	f.mutex.Lock()
	history := make([]ClientCommitLogFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientCommitLogFuncCall is an object that describes an invocation of
// method CommitLog on an instance of MockClient.
type ClientCommitLogFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []CommitLog
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientCommitLogFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientCommitLogFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientCommitsFunc describes the behavior when the Commits method of the
// parent MockClient instance is invoked.
type ClientCommitsFunc struct {
	defaultHook func(context.Context, api.RepoName, CommitsOptions) ([]*gitdomain.Commit, error)
	hooks       []func(context.Context, api.RepoName, CommitsOptions) ([]*gitdomain.Commit, error)
	history     []ClientCommitsFuncCall
	mutex       sync.Mutex
}

// Commits delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) Commits(v0 context.Context, v1 api.RepoName, v2 CommitsOptions) ([]*gitdomain.Commit, error) {
	r0, r1 := m.CommitsFunc.nextHook()(v0, v1, v2)
	m.CommitsFunc.appendCall(ClientCommitsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Commits method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientCommitsFunc) SetDefaultHook(hook func(context.Context, api.RepoName, CommitsOptions) ([]*gitdomain.Commit, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Commits method of the parent MockClient instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientCommitsFunc) PushHook(hook func(context.Context, api.RepoName, CommitsOptions) ([]*gitdomain.Commit, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientCommitsFunc) SetDefaultReturn(r0 []*gitdomain.Commit, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, CommitsOptions) ([]*gitdomain.Commit, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientCommitsFunc) PushReturn(r0 []*gitdomain.Commit, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, CommitsOptions) ([]*gitdomain.Commit, error) {
		return r0, r1
	})
}

func (f *ClientCommitsFunc) nextHook() func(context.Context, api.RepoName, CommitsOptions) ([]*gitdomain.Commit, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientCommitsFunc) appendCall(r0 ClientCommitsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientCommitsFuncCall objects describing
// the invocations of this function.
func (f *ClientCommitsFunc) History() []ClientCommitsFuncCall {
	f.mutex.Lock()
	history := make([]ClientCommitsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientCommitsFuncCall is an object that describes an invocation of method
// Commits on an instance of MockClient.
type ClientCommitsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 CommitsOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*gitdomain.Commit
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientCommitsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientCommitsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientCommitsUniqueToBranchFunc describes the behavior when the
// CommitsUniqueToBranch method of the parent MockClient instance is
// invoked.
type ClientCommitsUniqueToBranchFunc struct {
	defaultHook func(context.Context, api.RepoName, string, bool, *time.Time) (map[string]time.Time, error)
	hooks       []func(context.Context, api.RepoName, string, bool, *time.Time) (map[string]time.Time, error)
	history     []ClientCommitsUniqueToBranchFuncCall
	mutex       sync.Mutex
}

// CommitsUniqueToBranch delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockClient) CommitsUniqueToBranch(v0 context.Context, v1 api.RepoName, v2 string, v3 bool, v4 *time.Time) (map[string]time.Time, error) {
	r0, r1 := m.CommitsUniqueToBranchFunc.nextHook()(v0, v1, v2, v3, v4)
	m.CommitsUniqueToBranchFunc.appendCall(ClientCommitsUniqueToBranchFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CommitsUniqueToBranch method of the parent MockClient instance is invoked
// and the hook queue is empty.
func (f *ClientCommitsUniqueToBranchFunc) SetDefaultHook(hook func(context.Context, api.RepoName, string, bool, *time.Time) (map[string]time.Time, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CommitsUniqueToBranch method of the parent MockClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ClientCommitsUniqueToBranchFunc) PushHook(hook func(context.Context, api.RepoName, string, bool, *time.Time) (map[string]time.Time, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientCommitsUniqueToBranchFunc) SetDefaultReturn(r0 map[string]time.Time, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, string, bool, *time.Time) (map[string]time.Time, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientCommitsUniqueToBranchFunc) PushReturn(r0 map[string]time.Time, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, string, bool, *time.Time) (map[string]time.Time, error) {
		return r0, r1
	})
}

func (f *ClientCommitsUniqueToBranchFunc) nextHook() func(context.Context, api.RepoName, string, bool, *time.Time) (map[string]time.Time, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientCommitsUniqueToBranchFunc) appendCall(r0 ClientCommitsUniqueToBranchFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientCommitsUniqueToBranchFuncCall objects
// describing the invocations of this function.
func (f *ClientCommitsUniqueToBranchFunc) History() []ClientCommitsUniqueToBranchFuncCall {
	f.mutex.Lock()
	history := make([]ClientCommitsUniqueToBranchFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientCommitsUniqueToBranchFuncCall is an object that describes an
// invocation of method CommitsUniqueToBranch on an instance of MockClient.
type ClientCommitsUniqueToBranchFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 bool
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 *time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[string]time.Time
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientCommitsUniqueToBranchFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientCommitsUniqueToBranchFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientContributorCountFunc describes the behavior when the
// ContributorCount method of the parent MockClient instance is invoked.
type ClientContributorCountFunc struct {
	defaultHook func(context.Context, api.RepoName, ContributorOptions) ([]*gitdomain.ContributorCount, error)
	hooks       []func(context.Context, api.RepoName, ContributorOptions) ([]*gitdomain.ContributorCount, error)
	history     []ClientContributorCountFuncCall
	mutex       sync.Mutex
}

// ContributorCount delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) ContributorCount(v0 context.Context, v1 api.RepoName, v2 ContributorOptions) ([]*gitdomain.ContributorCount, error) {
	r0, r1 := m.ContributorCountFunc.nextHook()(v0, v1, v2)
	m.ContributorCountFunc.appendCall(ClientContributorCountFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ContributorCount
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientContributorCountFunc) SetDefaultHook(hook func(context.Context, api.RepoName, ContributorOptions) ([]*gitdomain.ContributorCount, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ContributorCount method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientContributorCountFunc) PushHook(hook func(context.Context, api.RepoName, ContributorOptions) ([]*gitdomain.ContributorCount, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientContributorCountFunc) SetDefaultReturn(r0 []*gitdomain.ContributorCount, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, ContributorOptions) ([]*gitdomain.ContributorCount, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientContributorCountFunc) PushReturn(r0 []*gitdomain.ContributorCount, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, ContributorOptions) ([]*gitdomain.ContributorCount, error) {
		return r0, r1
	})
}

func (f *ClientContributorCountFunc) nextHook() func(context.Context, api.RepoName, ContributorOptions) ([]*gitdomain.ContributorCount, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientContributorCountFunc) appendCall(r0 ClientContributorCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientContributorCountFuncCall objects
// describing the invocations of this function.
func (f *ClientContributorCountFunc) History() []ClientContributorCountFuncCall {
	f.mutex.Lock()
	history := make([]ClientContributorCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientContributorCountFuncCall is an object that describes an invocation
// of method ContributorCount on an instance of MockClient.
type ClientContributorCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 ContributorOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*gitdomain.ContributorCount
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientContributorCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientContributorCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientCreateCommitFromPatchFunc describes the behavior when the
// CreateCommitFromPatch method of the parent MockClient instance is
// invoked.
type ClientCreateCommitFromPatchFunc struct {
	defaultHook func(context.Context, protocol.CreateCommitFromPatchRequest) (*protocol.CreateCommitFromPatchResponse, error)
	hooks       []func(context.Context, protocol.CreateCommitFromPatchRequest) (*protocol.CreateCommitFromPatchResponse, error)
	history     []ClientCreateCommitFromPatchFuncCall
	mutex       sync.Mutex
}

// CreateCommitFromPatch delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockClient) CreateCommitFromPatch(v0 context.Context, v1 protocol.CreateCommitFromPatchRequest) (*protocol.CreateCommitFromPatchResponse, error) {
	r0, r1 := m.CreateCommitFromPatchFunc.nextHook()(v0, v1)
	m.CreateCommitFromPatchFunc.appendCall(ClientCreateCommitFromPatchFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CreateCommitFromPatch method of the parent MockClient instance is invoked
// and the hook queue is empty.
func (f *ClientCreateCommitFromPatchFunc) SetDefaultHook(hook func(context.Context, protocol.CreateCommitFromPatchRequest) (*protocol.CreateCommitFromPatchResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateCommitFromPatch method of the parent MockClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ClientCreateCommitFromPatchFunc) PushHook(hook func(context.Context, protocol.CreateCommitFromPatchRequest) (*protocol.CreateCommitFromPatchResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientCreateCommitFromPatchFunc) SetDefaultReturn(r0 *protocol.CreateCommitFromPatchResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, protocol.CreateCommitFromPatchRequest) (*protocol.CreateCommitFromPatchResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientCreateCommitFromPatchFunc) PushReturn(r0 *protocol.CreateCommitFromPatchResponse, r1 error) {
	f.PushHook(func(context.Context, protocol.CreateCommitFromPatchRequest) (*protocol.CreateCommitFromPatchResponse, error) {
		return r0, r1
	})
}

func (f *ClientCreateCommitFromPatchFunc) nextHook() func(context.Context, protocol.CreateCommitFromPatchRequest) (*protocol.CreateCommitFromPatchResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientCreateCommitFromPatchFunc) appendCall(r0 ClientCreateCommitFromPatchFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientCreateCommitFromPatchFuncCall objects
// describing the invocations of this function.
func (f *ClientCreateCommitFromPatchFunc) History() []ClientCreateCommitFromPatchFuncCall {
	f.mutex.Lock()
	history := make([]ClientCreateCommitFromPatchFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientCreateCommitFromPatchFuncCall is an object that describes an
// invocation of method CreateCommitFromPatch on an instance of MockClient.
type ClientCreateCommitFromPatchFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 protocol.CreateCommitFromPatchRequest
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *protocol.CreateCommitFromPatchResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientCreateCommitFromPatchFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientCreateCommitFromPatchFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientDiffFunc describes the behavior when the Diff method of the parent
// MockClient instance is invoked.
type ClientDiffFunc struct {
	defaultHook func(context.Context, api.RepoName, DiffOptions) (*DiffFileIterator, error)
	hooks       []func(context.Context, api.RepoName, DiffOptions) (*DiffFileIterator, error)
	history     []ClientDiffFuncCall
	mutex       sync.Mutex
}

// Diff delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) Diff(v0 context.Context, v1 api.RepoName, v2 DiffOptions) (*DiffFileIterator, error) {
	r0, r1 := m.DiffFunc.nextHook()(v0, v1, v2)
	m.DiffFunc.appendCall(ClientDiffFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Diff method of the
// parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientDiffFunc) SetDefaultHook(hook func(context.Context, api.RepoName, DiffOptions) (*DiffFileIterator, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Diff method of the parent MockClient instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientDiffFunc) PushHook(hook func(context.Context, api.RepoName, DiffOptions) (*DiffFileIterator, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientDiffFunc) SetDefaultReturn(r0 *DiffFileIterator, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, DiffOptions) (*DiffFileIterator, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientDiffFunc) PushReturn(r0 *DiffFileIterator, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, DiffOptions) (*DiffFileIterator, error) {
		return r0, r1
	})
}

func (f *ClientDiffFunc) nextHook() func(context.Context, api.RepoName, DiffOptions) (*DiffFileIterator, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientDiffFunc) appendCall(r0 ClientDiffFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientDiffFuncCall objects describing the
// invocations of this function.
func (f *ClientDiffFunc) History() []ClientDiffFuncCall {
	f.mutex.Lock()
	history := make([]ClientDiffFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientDiffFuncCall is an object that describes an invocation of method
// Diff on an instance of MockClient.
type ClientDiffFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 DiffOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *DiffFileIterator
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientDiffFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientDiffFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientFirstEverCommitFunc describes the behavior when the FirstEverCommit
// method of the parent MockClient instance is invoked.
type ClientFirstEverCommitFunc struct {
	defaultHook func(context.Context, api.RepoName) (*gitdomain.Commit, error)
	hooks       []func(context.Context, api.RepoName) (*gitdomain.Commit, error)
	history     []ClientFirstEverCommitFuncCall
	mutex       sync.Mutex
}

// FirstEverCommit delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) FirstEverCommit(v0 context.Context, v1 api.RepoName) (*gitdomain.Commit, error) {
	r0, r1 := m.FirstEverCommitFunc.nextHook()(v0, v1)
	m.FirstEverCommitFunc.appendCall(ClientFirstEverCommitFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FirstEverCommit
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientFirstEverCommitFunc) SetDefaultHook(hook func(context.Context, api.RepoName) (*gitdomain.Commit, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FirstEverCommit method of the parent MockClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientFirstEverCommitFunc) PushHook(hook func(context.Context, api.RepoName) (*gitdomain.Commit, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientFirstEverCommitFunc) SetDefaultReturn(r0 *gitdomain.Commit, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) (*gitdomain.Commit, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientFirstEverCommitFunc) PushReturn(r0 *gitdomain.Commit, r1 error) {
	f.PushHook(func(context.Context, api.RepoName) (*gitdomain.Commit, error) {
		return r0, r1
	})
}

func (f *ClientFirstEverCommitFunc) nextHook() func(context.Context, api.RepoName) (*gitdomain.Commit, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientFirstEverCommitFunc) appendCall(r0 ClientFirstEverCommitFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientFirstEverCommitFuncCall objects
// describing the invocations of this function.
func (f *ClientFirstEverCommitFunc) History() []ClientFirstEverCommitFuncCall {
	f.mutex.Lock()
	history := make([]ClientFirstEverCommitFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientFirstEverCommitFuncCall is an object that describes an invocation
// of method FirstEverCommit on an instance of MockClient.
type ClientFirstEverCommitFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *gitdomain.Commit
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientFirstEverCommitFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientFirstEverCommitFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientGetCommitFunc describes the behavior when the GetCommit method of
// the parent MockClient instance is invoked.
type ClientGetCommitFunc struct {
	defaultHook func(context.Context, api.RepoName, api.CommitID) (*gitdomain.Commit, error)
	hooks       []func(context.Context, api.RepoName, api.CommitID) (*gitdomain.Commit, error)
	history     []ClientGetCommitFuncCall
	mutex       sync.Mutex
}

// GetCommit delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) GetCommit(v0 context.Context, v1 api.RepoName, v2 api.CommitID) (*gitdomain.Commit, error) {
	r0, r1 := m.GetCommitFunc.nextHook()(v0, v1, v2)
	m.GetCommitFunc.appendCall(ClientGetCommitFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetCommit method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientGetCommitFunc) SetDefaultHook(hook func(context.Context, api.RepoName, api.CommitID) (*gitdomain.Commit, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetCommit method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientGetCommitFunc) PushHook(hook func(context.Context, api.RepoName, api.CommitID) (*gitdomain.Commit, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetCommitFunc) SetDefaultReturn(r0 *gitdomain.Commit, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, api.CommitID) (*gitdomain.Commit, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetCommitFunc) PushReturn(r0 *gitdomain.Commit, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, api.CommitID) (*gitdomain.Commit, error) {
		return r0, r1
	})
}

func (f *ClientGetCommitFunc) nextHook() func(context.Context, api.RepoName, api.CommitID) (*gitdomain.Commit, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetCommitFunc) appendCall(r0 ClientGetCommitFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetCommitFuncCall objects describing
// the invocations of this function.
func (f *ClientGetCommitFunc) History() []ClientGetCommitFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetCommitFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetCommitFuncCall is an object that describes an invocation of
// method GetCommit on an instance of MockClient.
type ClientGetCommitFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.CommitID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *gitdomain.Commit
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetCommitFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetCommitFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientGetDefaultBranchFunc describes the behavior when the
// GetDefaultBranch method of the parent MockClient instance is invoked.
type ClientGetDefaultBranchFunc struct {
	defaultHook func(context.Context, api.RepoName, bool) (string, api.CommitID, error)
	hooks       []func(context.Context, api.RepoName, bool) (string, api.CommitID, error)
	history     []ClientGetDefaultBranchFuncCall
	mutex       sync.Mutex
}

// GetDefaultBranch delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) GetDefaultBranch(v0 context.Context, v1 api.RepoName, v2 bool) (string, api.CommitID, error) {
	r0, r1, r2 := m.GetDefaultBranchFunc.nextHook()(v0, v1, v2)
	m.GetDefaultBranchFunc.appendCall(ClientGetDefaultBranchFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetDefaultBranch
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientGetDefaultBranchFunc) SetDefaultHook(hook func(context.Context, api.RepoName, bool) (string, api.CommitID, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDefaultBranch method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientGetDefaultBranchFunc) PushHook(hook func(context.Context, api.RepoName, bool) (string, api.CommitID, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetDefaultBranchFunc) SetDefaultReturn(r0 string, r1 api.CommitID, r2 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, bool) (string, api.CommitID, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetDefaultBranchFunc) PushReturn(r0 string, r1 api.CommitID, r2 error) {
	f.PushHook(func(context.Context, api.RepoName, bool) (string, api.CommitID, error) {
		return r0, r1, r2
	})
}

func (f *ClientGetDefaultBranchFunc) nextHook() func(context.Context, api.RepoName, bool) (string, api.CommitID, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetDefaultBranchFunc) appendCall(r0 ClientGetDefaultBranchFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetDefaultBranchFuncCall objects
// describing the invocations of this function.
func (f *ClientGetDefaultBranchFunc) History() []ClientGetDefaultBranchFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetDefaultBranchFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetDefaultBranchFuncCall is an object that describes an invocation
// of method GetDefaultBranch on an instance of MockClient.
type ClientGetDefaultBranchFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 api.CommitID
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetDefaultBranchFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetDefaultBranchFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ClientGetObjectFunc describes the behavior when the GetObject method of
// the parent MockClient instance is invoked.
type ClientGetObjectFunc struct {
	defaultHook func(context.Context, api.RepoName, string) (*gitdomain.GitObject, error)
	hooks       []func(context.Context, api.RepoName, string) (*gitdomain.GitObject, error)
	history     []ClientGetObjectFuncCall
	mutex       sync.Mutex
}

// GetObject delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) GetObject(v0 context.Context, v1 api.RepoName, v2 string) (*gitdomain.GitObject, error) {
	r0, r1 := m.GetObjectFunc.nextHook()(v0, v1, v2)
	m.GetObjectFunc.appendCall(ClientGetObjectFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetObject method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientGetObjectFunc) SetDefaultHook(hook func(context.Context, api.RepoName, string) (*gitdomain.GitObject, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetObject method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientGetObjectFunc) PushHook(hook func(context.Context, api.RepoName, string) (*gitdomain.GitObject, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientGetObjectFunc) SetDefaultReturn(r0 *gitdomain.GitObject, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, string) (*gitdomain.GitObject, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientGetObjectFunc) PushReturn(r0 *gitdomain.GitObject, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, string) (*gitdomain.GitObject, error) {
		return r0, r1
	})
}

func (f *ClientGetObjectFunc) nextHook() func(context.Context, api.RepoName, string) (*gitdomain.GitObject, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetObjectFunc) appendCall(r0 ClientGetObjectFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetObjectFuncCall objects describing
// the invocations of this function.
func (f *ClientGetObjectFunc) History() []ClientGetObjectFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetObjectFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetObjectFuncCall is an object that describes an invocation of
// method GetObject on an instance of MockClient.
type ClientGetObjectFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *gitdomain.GitObject
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetObjectFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetObjectFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientHasCommitAfterFunc describes the behavior when the HasCommitAfter
// method of the parent MockClient instance is invoked.
type ClientHasCommitAfterFunc struct {
	defaultHook func(context.Context, api.RepoName, string, string) (bool, error)
	hooks       []func(context.Context, api.RepoName, string, string) (bool, error)
	history     []ClientHasCommitAfterFuncCall
	mutex       sync.Mutex
}

// HasCommitAfter delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) HasCommitAfter(v0 context.Context, v1 api.RepoName, v2 string, v3 string) (bool, error) {
	r0, r1 := m.HasCommitAfterFunc.nextHook()(v0, v1, v2, v3)
	m.HasCommitAfterFunc.appendCall(ClientHasCommitAfterFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the HasCommitAfter
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientHasCommitAfterFunc) SetDefaultHook(hook func(context.Context, api.RepoName, string, string) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// HasCommitAfter method of the parent MockClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientHasCommitAfterFunc) PushHook(hook func(context.Context, api.RepoName, string, string) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientHasCommitAfterFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, string, string) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientHasCommitAfterFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, string, string) (bool, error) {
		return r0, r1
	})
}

func (f *ClientHasCommitAfterFunc) nextHook() func(context.Context, api.RepoName, string, string) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientHasCommitAfterFunc) appendCall(r0 ClientHasCommitAfterFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientHasCommitAfterFuncCall objects
// describing the invocations of this function.
func (f *ClientHasCommitAfterFunc) History() []ClientHasCommitAfterFuncCall {
	f.mutex.Lock()
	history := make([]ClientHasCommitAfterFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientHasCommitAfterFuncCall is an object that describes an invocation of
// method HasCommitAfter on an instance of MockClient.
type ClientHasCommitAfterFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientHasCommitAfterFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientHasCommitAfterFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientIsPerforcePathCloneableFunc describes the behavior when the
// IsPerforcePathCloneable method of the parent MockClient instance is
// invoked.
type ClientIsPerforcePathCloneableFunc struct {
	defaultHook func(context.Context, protocol.PerforceConnectionDetails, string) error
	hooks       []func(context.Context, protocol.PerforceConnectionDetails, string) error
	history     []ClientIsPerforcePathCloneableFuncCall
	mutex       sync.Mutex
}

// IsPerforcePathCloneable delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockClient) IsPerforcePathCloneable(v0 context.Context, v1 protocol.PerforceConnectionDetails, v2 string) error {
	r0 := m.IsPerforcePathCloneableFunc.nextHook()(v0, v1, v2)
	m.IsPerforcePathCloneableFunc.appendCall(ClientIsPerforcePathCloneableFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// IsPerforcePathCloneable method of the parent MockClient instance is
// invoked and the hook queue is empty.
func (f *ClientIsPerforcePathCloneableFunc) SetDefaultHook(hook func(context.Context, protocol.PerforceConnectionDetails, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsPerforcePathCloneable method of the parent MockClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ClientIsPerforcePathCloneableFunc) PushHook(hook func(context.Context, protocol.PerforceConnectionDetails, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientIsPerforcePathCloneableFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, protocol.PerforceConnectionDetails, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientIsPerforcePathCloneableFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, protocol.PerforceConnectionDetails, string) error {
		return r0
	})
}

func (f *ClientIsPerforcePathCloneableFunc) nextHook() func(context.Context, protocol.PerforceConnectionDetails, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientIsPerforcePathCloneableFunc) appendCall(r0 ClientIsPerforcePathCloneableFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientIsPerforcePathCloneableFuncCall
// objects describing the invocations of this function.
func (f *ClientIsPerforcePathCloneableFunc) History() []ClientIsPerforcePathCloneableFuncCall {
	f.mutex.Lock()
	history := make([]ClientIsPerforcePathCloneableFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientIsPerforcePathCloneableFuncCall is an object that describes an
// invocation of method IsPerforcePathCloneable on an instance of
// MockClient.
type ClientIsPerforcePathCloneableFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 protocol.PerforceConnectionDetails
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientIsPerforcePathCloneableFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientIsPerforcePathCloneableFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientIsPerforceSuperUserFunc describes the behavior when the
// IsPerforceSuperUser method of the parent MockClient instance is invoked.
type ClientIsPerforceSuperUserFunc struct {
	defaultHook func(context.Context, protocol.PerforceConnectionDetails) error
	hooks       []func(context.Context, protocol.PerforceConnectionDetails) error
	history     []ClientIsPerforceSuperUserFuncCall
	mutex       sync.Mutex
}

// IsPerforceSuperUser delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) IsPerforceSuperUser(v0 context.Context, v1 protocol.PerforceConnectionDetails) error {
	r0 := m.IsPerforceSuperUserFunc.nextHook()(v0, v1)
	m.IsPerforceSuperUserFunc.appendCall(ClientIsPerforceSuperUserFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the IsPerforceSuperUser
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientIsPerforceSuperUserFunc) SetDefaultHook(hook func(context.Context, protocol.PerforceConnectionDetails) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsPerforceSuperUser method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientIsPerforceSuperUserFunc) PushHook(hook func(context.Context, protocol.PerforceConnectionDetails) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientIsPerforceSuperUserFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, protocol.PerforceConnectionDetails) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientIsPerforceSuperUserFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, protocol.PerforceConnectionDetails) error {
		return r0
	})
}

func (f *ClientIsPerforceSuperUserFunc) nextHook() func(context.Context, protocol.PerforceConnectionDetails) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientIsPerforceSuperUserFunc) appendCall(r0 ClientIsPerforceSuperUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientIsPerforceSuperUserFuncCall objects
// describing the invocations of this function.
func (f *ClientIsPerforceSuperUserFunc) History() []ClientIsPerforceSuperUserFuncCall {
	f.mutex.Lock()
	history := make([]ClientIsPerforceSuperUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientIsPerforceSuperUserFuncCall is an object that describes an
// invocation of method IsPerforceSuperUser on an instance of MockClient.
type ClientIsPerforceSuperUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 protocol.PerforceConnectionDetails
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientIsPerforceSuperUserFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientIsPerforceSuperUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientIsRepoCloneableFunc describes the behavior when the IsRepoCloneable
// method of the parent MockClient instance is invoked.
type ClientIsRepoCloneableFunc struct {
	defaultHook func(context.Context, api.RepoName) error
	hooks       []func(context.Context, api.RepoName) error
	history     []ClientIsRepoCloneableFuncCall
	mutex       sync.Mutex
}

// IsRepoCloneable delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) IsRepoCloneable(v0 context.Context, v1 api.RepoName) error {
	r0 := m.IsRepoCloneableFunc.nextHook()(v0, v1)
	m.IsRepoCloneableFunc.appendCall(ClientIsRepoCloneableFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the IsRepoCloneable
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientIsRepoCloneableFunc) SetDefaultHook(hook func(context.Context, api.RepoName) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsRepoCloneable method of the parent MockClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientIsRepoCloneableFunc) PushHook(hook func(context.Context, api.RepoName) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientIsRepoCloneableFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientIsRepoCloneableFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, api.RepoName) error {
		return r0
	})
}

func (f *ClientIsRepoCloneableFunc) nextHook() func(context.Context, api.RepoName) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientIsRepoCloneableFunc) appendCall(r0 ClientIsRepoCloneableFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientIsRepoCloneableFuncCall objects
// describing the invocations of this function.
func (f *ClientIsRepoCloneableFunc) History() []ClientIsRepoCloneableFuncCall {
	f.mutex.Lock()
	history := make([]ClientIsRepoCloneableFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientIsRepoCloneableFuncCall is an object that describes an invocation
// of method IsRepoCloneable on an instance of MockClient.
type ClientIsRepoCloneableFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientIsRepoCloneableFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientIsRepoCloneableFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientListDirectoryChildrenFunc describes the behavior when the
// ListDirectoryChildren method of the parent MockClient instance is
// invoked.
type ClientListDirectoryChildrenFunc struct {
	defaultHook func(context.Context, api.RepoName, api.CommitID, []string) (map[string][]string, error)
	hooks       []func(context.Context, api.RepoName, api.CommitID, []string) (map[string][]string, error)
	history     []ClientListDirectoryChildrenFuncCall
	mutex       sync.Mutex
}

// ListDirectoryChildren delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockClient) ListDirectoryChildren(v0 context.Context, v1 api.RepoName, v2 api.CommitID, v3 []string) (map[string][]string, error) {
	r0, r1 := m.ListDirectoryChildrenFunc.nextHook()(v0, v1, v2, v3)
	m.ListDirectoryChildrenFunc.appendCall(ClientListDirectoryChildrenFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ListDirectoryChildren method of the parent MockClient instance is invoked
// and the hook queue is empty.
func (f *ClientListDirectoryChildrenFunc) SetDefaultHook(hook func(context.Context, api.RepoName, api.CommitID, []string) (map[string][]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListDirectoryChildren method of the parent MockClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ClientListDirectoryChildrenFunc) PushHook(hook func(context.Context, api.RepoName, api.CommitID, []string) (map[string][]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientListDirectoryChildrenFunc) SetDefaultReturn(r0 map[string][]string, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, api.CommitID, []string) (map[string][]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientListDirectoryChildrenFunc) PushReturn(r0 map[string][]string, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, api.CommitID, []string) (map[string][]string, error) {
		return r0, r1
	})
}

func (f *ClientListDirectoryChildrenFunc) nextHook() func(context.Context, api.RepoName, api.CommitID, []string) (map[string][]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientListDirectoryChildrenFunc) appendCall(r0 ClientListDirectoryChildrenFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientListDirectoryChildrenFuncCall objects
// describing the invocations of this function.
func (f *ClientListDirectoryChildrenFunc) History() []ClientListDirectoryChildrenFuncCall {
	f.mutex.Lock()
	history := make([]ClientListDirectoryChildrenFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientListDirectoryChildrenFuncCall is an object that describes an
// invocation of method ListDirectoryChildren on an instance of MockClient.
type ClientListDirectoryChildrenFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.CommitID
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[string][]string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientListDirectoryChildrenFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientListDirectoryChildrenFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientListGitoliteReposFunc describes the behavior when the
// ListGitoliteRepos method of the parent MockClient instance is invoked.
type ClientListGitoliteReposFunc struct {
	defaultHook func(context.Context, string) ([]*gitolite.Repo, error)
	hooks       []func(context.Context, string) ([]*gitolite.Repo, error)
	history     []ClientListGitoliteReposFuncCall
	mutex       sync.Mutex
}

// ListGitoliteRepos delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) ListGitoliteRepos(v0 context.Context, v1 string) ([]*gitolite.Repo, error) {
	r0, r1 := m.ListGitoliteReposFunc.nextHook()(v0, v1)
	m.ListGitoliteReposFunc.appendCall(ClientListGitoliteReposFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListGitoliteRepos
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientListGitoliteReposFunc) SetDefaultHook(hook func(context.Context, string) ([]*gitolite.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListGitoliteRepos method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientListGitoliteReposFunc) PushHook(hook func(context.Context, string) ([]*gitolite.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientListGitoliteReposFunc) SetDefaultReturn(r0 []*gitolite.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, string) ([]*gitolite.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientListGitoliteReposFunc) PushReturn(r0 []*gitolite.Repo, r1 error) {
	f.PushHook(func(context.Context, string) ([]*gitolite.Repo, error) {
		return r0, r1
	})
}

func (f *ClientListGitoliteReposFunc) nextHook() func(context.Context, string) ([]*gitolite.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientListGitoliteReposFunc) appendCall(r0 ClientListGitoliteReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientListGitoliteReposFuncCall objects
// describing the invocations of this function.
func (f *ClientListGitoliteReposFunc) History() []ClientListGitoliteReposFuncCall {
	f.mutex.Lock()
	history := make([]ClientListGitoliteReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientListGitoliteReposFuncCall is an object that describes an invocation
// of method ListGitoliteRepos on an instance of MockClient.
type ClientListGitoliteReposFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*gitolite.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientListGitoliteReposFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientListGitoliteReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientListRefsFunc describes the behavior when the ListRefs method of the
// parent MockClient instance is invoked.
type ClientListRefsFunc struct {
	defaultHook func(context.Context, api.RepoName, ListRefsOpts) ([]gitdomain.Ref, error)
	hooks       []func(context.Context, api.RepoName, ListRefsOpts) ([]gitdomain.Ref, error)
	history     []ClientListRefsFuncCall
	mutex       sync.Mutex
}

// ListRefs delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) ListRefs(v0 context.Context, v1 api.RepoName, v2 ListRefsOpts) ([]gitdomain.Ref, error) {
	r0, r1 := m.ListRefsFunc.nextHook()(v0, v1, v2)
	m.ListRefsFunc.appendCall(ClientListRefsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListRefs method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientListRefsFunc) SetDefaultHook(hook func(context.Context, api.RepoName, ListRefsOpts) ([]gitdomain.Ref, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListRefs method of the parent MockClient instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientListRefsFunc) PushHook(hook func(context.Context, api.RepoName, ListRefsOpts) ([]gitdomain.Ref, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientListRefsFunc) SetDefaultReturn(r0 []gitdomain.Ref, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, ListRefsOpts) ([]gitdomain.Ref, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientListRefsFunc) PushReturn(r0 []gitdomain.Ref, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, ListRefsOpts) ([]gitdomain.Ref, error) {
		return r0, r1
	})
}

func (f *ClientListRefsFunc) nextHook() func(context.Context, api.RepoName, ListRefsOpts) ([]gitdomain.Ref, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientListRefsFunc) appendCall(r0 ClientListRefsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientListRefsFuncCall objects describing
// the invocations of this function.
func (f *ClientListRefsFunc) History() []ClientListRefsFuncCall {
	f.mutex.Lock()
	history := make([]ClientListRefsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientListRefsFuncCall is an object that describes an invocation of
// method ListRefs on an instance of MockClient.
type ClientListRefsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 ListRefsOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []gitdomain.Ref
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientListRefsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientListRefsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientLogReverseEachFunc describes the behavior when the LogReverseEach
// method of the parent MockClient instance is invoked.
type ClientLogReverseEachFunc struct {
	defaultHook func(context.Context, string, string, int, func(entry gitdomain.LogEntry) error) error
	hooks       []func(context.Context, string, string, int, func(entry gitdomain.LogEntry) error) error
	history     []ClientLogReverseEachFuncCall
	mutex       sync.Mutex
}

// LogReverseEach delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) LogReverseEach(v0 context.Context, v1 string, v2 string, v3 int, v4 func(entry gitdomain.LogEntry) error) error {
	r0 := m.LogReverseEachFunc.nextHook()(v0, v1, v2, v3, v4)
	m.LogReverseEachFunc.appendCall(ClientLogReverseEachFuncCall{v0, v1, v2, v3, v4, r0})
	return r0
}

// SetDefaultHook sets function that is called when the LogReverseEach
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientLogReverseEachFunc) SetDefaultHook(hook func(context.Context, string, string, int, func(entry gitdomain.LogEntry) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LogReverseEach method of the parent MockClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientLogReverseEachFunc) PushHook(hook func(context.Context, string, string, int, func(entry gitdomain.LogEntry) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientLogReverseEachFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string, string, int, func(entry gitdomain.LogEntry) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientLogReverseEachFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string, string, int, func(entry gitdomain.LogEntry) error) error {
		return r0
	})
}

func (f *ClientLogReverseEachFunc) nextHook() func(context.Context, string, string, int, func(entry gitdomain.LogEntry) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientLogReverseEachFunc) appendCall(r0 ClientLogReverseEachFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientLogReverseEachFuncCall objects
// describing the invocations of this function.
func (f *ClientLogReverseEachFunc) History() []ClientLogReverseEachFuncCall {
	f.mutex.Lock()
	history := make([]ClientLogReverseEachFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientLogReverseEachFuncCall is an object that describes an invocation of
// method LogReverseEach on an instance of MockClient.
type ClientLogReverseEachFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 func(entry gitdomain.LogEntry) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientLogReverseEachFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientLogReverseEachFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientLsFilesFunc describes the behavior when the LsFiles method of the
// parent MockClient instance is invoked.
type ClientLsFilesFunc struct {
	defaultHook func(context.Context, api.RepoName, api.CommitID, ...gitdomain.Pathspec) ([]string, error)
	hooks       []func(context.Context, api.RepoName, api.CommitID, ...gitdomain.Pathspec) ([]string, error)
	history     []ClientLsFilesFuncCall
	mutex       sync.Mutex
}

// LsFiles delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) LsFiles(v0 context.Context, v1 api.RepoName, v2 api.CommitID, v3 ...gitdomain.Pathspec) ([]string, error) {
	r0, r1 := m.LsFilesFunc.nextHook()(v0, v1, v2, v3...)
	m.LsFilesFunc.appendCall(ClientLsFilesFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the LsFiles method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientLsFilesFunc) SetDefaultHook(hook func(context.Context, api.RepoName, api.CommitID, ...gitdomain.Pathspec) ([]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LsFiles method of the parent MockClient instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientLsFilesFunc) PushHook(hook func(context.Context, api.RepoName, api.CommitID, ...gitdomain.Pathspec) ([]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientLsFilesFunc) SetDefaultReturn(r0 []string, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, api.CommitID, ...gitdomain.Pathspec) ([]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientLsFilesFunc) PushReturn(r0 []string, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, api.CommitID, ...gitdomain.Pathspec) ([]string, error) {
		return r0, r1
	})
}

func (f *ClientLsFilesFunc) nextHook() func(context.Context, api.RepoName, api.CommitID, ...gitdomain.Pathspec) ([]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientLsFilesFunc) appendCall(r0 ClientLsFilesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientLsFilesFuncCall objects describing
// the invocations of this function.
func (f *ClientLsFilesFunc) History() []ClientLsFilesFuncCall {
	f.mutex.Lock()
	history := make([]ClientLsFilesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientLsFilesFuncCall is an object that describes an invocation of method
// LsFiles on an instance of MockClient.
type ClientLsFilesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.CommitID
	// Arg3 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg3 []gitdomain.Pathspec
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c ClientLsFilesFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg3 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1, c.Arg2}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientLsFilesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientMergeBaseFunc describes the behavior when the MergeBase method of
// the parent MockClient instance is invoked.
type ClientMergeBaseFunc struct {
	defaultHook func(context.Context, api.RepoName, string, string) (api.CommitID, error)
	hooks       []func(context.Context, api.RepoName, string, string) (api.CommitID, error)
	history     []ClientMergeBaseFuncCall
	mutex       sync.Mutex
}

// MergeBase delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) MergeBase(v0 context.Context, v1 api.RepoName, v2 string, v3 string) (api.CommitID, error) {
	r0, r1 := m.MergeBaseFunc.nextHook()(v0, v1, v2, v3)
	m.MergeBaseFunc.appendCall(ClientMergeBaseFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MergeBase method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientMergeBaseFunc) SetDefaultHook(hook func(context.Context, api.RepoName, string, string) (api.CommitID, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MergeBase method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientMergeBaseFunc) PushHook(hook func(context.Context, api.RepoName, string, string) (api.CommitID, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientMergeBaseFunc) SetDefaultReturn(r0 api.CommitID, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, string, string) (api.CommitID, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientMergeBaseFunc) PushReturn(r0 api.CommitID, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, string, string) (api.CommitID, error) {
		return r0, r1
	})
}

func (f *ClientMergeBaseFunc) nextHook() func(context.Context, api.RepoName, string, string) (api.CommitID, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientMergeBaseFunc) appendCall(r0 ClientMergeBaseFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientMergeBaseFuncCall objects describing
// the invocations of this function.
func (f *ClientMergeBaseFunc) History() []ClientMergeBaseFuncCall {
	f.mutex.Lock()
	history := make([]ClientMergeBaseFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientMergeBaseFuncCall is an object that describes an invocation of
// method MergeBase on an instance of MockClient.
type ClientMergeBaseFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 api.CommitID
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientMergeBaseFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientMergeBaseFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientNewFileReaderFunc describes the behavior when the NewFileReader
// method of the parent MockClient instance is invoked.
type ClientNewFileReaderFunc struct {
	defaultHook func(context.Context, api.RepoName, api.CommitID, string) (io.ReadCloser, error)
	hooks       []func(context.Context, api.RepoName, api.CommitID, string) (io.ReadCloser, error)
	history     []ClientNewFileReaderFuncCall
	mutex       sync.Mutex
}

// NewFileReader delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) NewFileReader(v0 context.Context, v1 api.RepoName, v2 api.CommitID, v3 string) (io.ReadCloser, error) {
	r0, r1 := m.NewFileReaderFunc.nextHook()(v0, v1, v2, v3)
	m.NewFileReaderFunc.appendCall(ClientNewFileReaderFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the NewFileReader method
// of the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientNewFileReaderFunc) SetDefaultHook(hook func(context.Context, api.RepoName, api.CommitID, string) (io.ReadCloser, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// NewFileReader method of the parent MockClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientNewFileReaderFunc) PushHook(hook func(context.Context, api.RepoName, api.CommitID, string) (io.ReadCloser, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientNewFileReaderFunc) SetDefaultReturn(r0 io.ReadCloser, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, api.CommitID, string) (io.ReadCloser, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientNewFileReaderFunc) PushReturn(r0 io.ReadCloser, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, api.CommitID, string) (io.ReadCloser, error) {
		return r0, r1
	})
}

func (f *ClientNewFileReaderFunc) nextHook() func(context.Context, api.RepoName, api.CommitID, string) (io.ReadCloser, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientNewFileReaderFunc) appendCall(r0 ClientNewFileReaderFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientNewFileReaderFuncCall objects
// describing the invocations of this function.
func (f *ClientNewFileReaderFunc) History() []ClientNewFileReaderFuncCall {
	f.mutex.Lock()
	history := make([]ClientNewFileReaderFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientNewFileReaderFuncCall is an object that describes an invocation of
// method NewFileReader on an instance of MockClient.
type ClientNewFileReaderFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.CommitID
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 io.ReadCloser
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientNewFileReaderFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientNewFileReaderFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientPerforceGetChangelistFunc describes the behavior when the
// PerforceGetChangelist method of the parent MockClient instance is
// invoked.
type ClientPerforceGetChangelistFunc struct {
	defaultHook func(context.Context, protocol.PerforceConnectionDetails, string) (*perforce.Changelist, error)
	hooks       []func(context.Context, protocol.PerforceConnectionDetails, string) (*perforce.Changelist, error)
	history     []ClientPerforceGetChangelistFuncCall
	mutex       sync.Mutex
}

// PerforceGetChangelist delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockClient) PerforceGetChangelist(v0 context.Context, v1 protocol.PerforceConnectionDetails, v2 string) (*perforce.Changelist, error) {
	r0, r1 := m.PerforceGetChangelistFunc.nextHook()(v0, v1, v2)
	m.PerforceGetChangelistFunc.appendCall(ClientPerforceGetChangelistFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// PerforceGetChangelist method of the parent MockClient instance is invoked
// and the hook queue is empty.
func (f *ClientPerforceGetChangelistFunc) SetDefaultHook(hook func(context.Context, protocol.PerforceConnectionDetails, string) (*perforce.Changelist, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PerforceGetChangelist method of the parent MockClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ClientPerforceGetChangelistFunc) PushHook(hook func(context.Context, protocol.PerforceConnectionDetails, string) (*perforce.Changelist, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientPerforceGetChangelistFunc) SetDefaultReturn(r0 *perforce.Changelist, r1 error) {
	f.SetDefaultHook(func(context.Context, protocol.PerforceConnectionDetails, string) (*perforce.Changelist, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientPerforceGetChangelistFunc) PushReturn(r0 *perforce.Changelist, r1 error) {
	f.PushHook(func(context.Context, protocol.PerforceConnectionDetails, string) (*perforce.Changelist, error) {
		return r0, r1
	})
}

func (f *ClientPerforceGetChangelistFunc) nextHook() func(context.Context, protocol.PerforceConnectionDetails, string) (*perforce.Changelist, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientPerforceGetChangelistFunc) appendCall(r0 ClientPerforceGetChangelistFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientPerforceGetChangelistFuncCall objects
// describing the invocations of this function.
func (f *ClientPerforceGetChangelistFunc) History() []ClientPerforceGetChangelistFuncCall {
	f.mutex.Lock()
	history := make([]ClientPerforceGetChangelistFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientPerforceGetChangelistFuncCall is an object that describes an
// invocation of method PerforceGetChangelist on an instance of MockClient.
type ClientPerforceGetChangelistFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 protocol.PerforceConnectionDetails
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *perforce.Changelist
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientPerforceGetChangelistFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientPerforceGetChangelistFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientPerforceGroupMembersFunc describes the behavior when the
// PerforceGroupMembers method of the parent MockClient instance is invoked.
type ClientPerforceGroupMembersFunc struct {
	defaultHook func(context.Context, protocol.PerforceConnectionDetails, string) ([]string, error)
	hooks       []func(context.Context, protocol.PerforceConnectionDetails, string) ([]string, error)
	history     []ClientPerforceGroupMembersFuncCall
	mutex       sync.Mutex
}

// PerforceGroupMembers delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) PerforceGroupMembers(v0 context.Context, v1 protocol.PerforceConnectionDetails, v2 string) ([]string, error) {
	r0, r1 := m.PerforceGroupMembersFunc.nextHook()(v0, v1, v2)
	m.PerforceGroupMembersFunc.appendCall(ClientPerforceGroupMembersFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the PerforceGroupMembers
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientPerforceGroupMembersFunc) SetDefaultHook(hook func(context.Context, protocol.PerforceConnectionDetails, string) ([]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PerforceGroupMembers method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientPerforceGroupMembersFunc) PushHook(hook func(context.Context, protocol.PerforceConnectionDetails, string) ([]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientPerforceGroupMembersFunc) SetDefaultReturn(r0 []string, r1 error) {
	f.SetDefaultHook(func(context.Context, protocol.PerforceConnectionDetails, string) ([]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientPerforceGroupMembersFunc) PushReturn(r0 []string, r1 error) {
	f.PushHook(func(context.Context, protocol.PerforceConnectionDetails, string) ([]string, error) {
		return r0, r1
	})
}

func (f *ClientPerforceGroupMembersFunc) nextHook() func(context.Context, protocol.PerforceConnectionDetails, string) ([]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientPerforceGroupMembersFunc) appendCall(r0 ClientPerforceGroupMembersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientPerforceGroupMembersFuncCall objects
// describing the invocations of this function.
func (f *ClientPerforceGroupMembersFunc) History() []ClientPerforceGroupMembersFuncCall {
	f.mutex.Lock()
	history := make([]ClientPerforceGroupMembersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientPerforceGroupMembersFuncCall is an object that describes an
// invocation of method PerforceGroupMembers on an instance of MockClient.
type ClientPerforceGroupMembersFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 protocol.PerforceConnectionDetails
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientPerforceGroupMembersFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientPerforceGroupMembersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientPerforceProtectsForDepotFunc describes the behavior when the
// PerforceProtectsForDepot method of the parent MockClient instance is
// invoked.
type ClientPerforceProtectsForDepotFunc struct {
	defaultHook func(context.Context, protocol.PerforceConnectionDetails, string) ([]*perforce.Protect, error)
	hooks       []func(context.Context, protocol.PerforceConnectionDetails, string) ([]*perforce.Protect, error)
	history     []ClientPerforceProtectsForDepotFuncCall
	mutex       sync.Mutex
}

// PerforceProtectsForDepot delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockClient) PerforceProtectsForDepot(v0 context.Context, v1 protocol.PerforceConnectionDetails, v2 string) ([]*perforce.Protect, error) {
	r0, r1 := m.PerforceProtectsForDepotFunc.nextHook()(v0, v1, v2)
	m.PerforceProtectsForDepotFunc.appendCall(ClientPerforceProtectsForDepotFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// PerforceProtectsForDepot method of the parent MockClient instance is
// invoked and the hook queue is empty.
func (f *ClientPerforceProtectsForDepotFunc) SetDefaultHook(hook func(context.Context, protocol.PerforceConnectionDetails, string) ([]*perforce.Protect, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PerforceProtectsForDepot method of the parent MockClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ClientPerforceProtectsForDepotFunc) PushHook(hook func(context.Context, protocol.PerforceConnectionDetails, string) ([]*perforce.Protect, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientPerforceProtectsForDepotFunc) SetDefaultReturn(r0 []*perforce.Protect, r1 error) {
	f.SetDefaultHook(func(context.Context, protocol.PerforceConnectionDetails, string) ([]*perforce.Protect, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientPerforceProtectsForDepotFunc) PushReturn(r0 []*perforce.Protect, r1 error) {
	f.PushHook(func(context.Context, protocol.PerforceConnectionDetails, string) ([]*perforce.Protect, error) {
		return r0, r1
	})
}

func (f *ClientPerforceProtectsForDepotFunc) nextHook() func(context.Context, protocol.PerforceConnectionDetails, string) ([]*perforce.Protect, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientPerforceProtectsForDepotFunc) appendCall(r0 ClientPerforceProtectsForDepotFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientPerforceProtectsForDepotFuncCall
// objects describing the invocations of this function.
func (f *ClientPerforceProtectsForDepotFunc) History() []ClientPerforceProtectsForDepotFuncCall {
	f.mutex.Lock()
	history := make([]ClientPerforceProtectsForDepotFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientPerforceProtectsForDepotFuncCall is an object that describes an
// invocation of method PerforceProtectsForDepot on an instance of
// MockClient.
type ClientPerforceProtectsForDepotFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 protocol.PerforceConnectionDetails
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*perforce.Protect
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientPerforceProtectsForDepotFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientPerforceProtectsForDepotFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientPerforceProtectsForUserFunc describes the behavior when the
// PerforceProtectsForUser method of the parent MockClient instance is
// invoked.
type ClientPerforceProtectsForUserFunc struct {
	defaultHook func(context.Context, protocol.PerforceConnectionDetails, string) ([]*perforce.Protect, error)
	hooks       []func(context.Context, protocol.PerforceConnectionDetails, string) ([]*perforce.Protect, error)
	history     []ClientPerforceProtectsForUserFuncCall
	mutex       sync.Mutex
}

// PerforceProtectsForUser delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockClient) PerforceProtectsForUser(v0 context.Context, v1 protocol.PerforceConnectionDetails, v2 string) ([]*perforce.Protect, error) {
	r0, r1 := m.PerforceProtectsForUserFunc.nextHook()(v0, v1, v2)
	m.PerforceProtectsForUserFunc.appendCall(ClientPerforceProtectsForUserFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// PerforceProtectsForUser method of the parent MockClient instance is
// invoked and the hook queue is empty.
func (f *ClientPerforceProtectsForUserFunc) SetDefaultHook(hook func(context.Context, protocol.PerforceConnectionDetails, string) ([]*perforce.Protect, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PerforceProtectsForUser method of the parent MockClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ClientPerforceProtectsForUserFunc) PushHook(hook func(context.Context, protocol.PerforceConnectionDetails, string) ([]*perforce.Protect, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientPerforceProtectsForUserFunc) SetDefaultReturn(r0 []*perforce.Protect, r1 error) {
	f.SetDefaultHook(func(context.Context, protocol.PerforceConnectionDetails, string) ([]*perforce.Protect, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientPerforceProtectsForUserFunc) PushReturn(r0 []*perforce.Protect, r1 error) {
	f.PushHook(func(context.Context, protocol.PerforceConnectionDetails, string) ([]*perforce.Protect, error) {
		return r0, r1
	})
}

func (f *ClientPerforceProtectsForUserFunc) nextHook() func(context.Context, protocol.PerforceConnectionDetails, string) ([]*perforce.Protect, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientPerforceProtectsForUserFunc) appendCall(r0 ClientPerforceProtectsForUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientPerforceProtectsForUserFuncCall
// objects describing the invocations of this function.
func (f *ClientPerforceProtectsForUserFunc) History() []ClientPerforceProtectsForUserFuncCall {
	f.mutex.Lock()
	history := make([]ClientPerforceProtectsForUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientPerforceProtectsForUserFuncCall is an object that describes an
// invocation of method PerforceProtectsForUser on an instance of
// MockClient.
type ClientPerforceProtectsForUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 protocol.PerforceConnectionDetails
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*perforce.Protect
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientPerforceProtectsForUserFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientPerforceProtectsForUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientPerforceUsersFunc describes the behavior when the PerforceUsers
// method of the parent MockClient instance is invoked.
type ClientPerforceUsersFunc struct {
	defaultHook func(context.Context, protocol.PerforceConnectionDetails) ([]*perforce.User, error)
	hooks       []func(context.Context, protocol.PerforceConnectionDetails) ([]*perforce.User, error)
	history     []ClientPerforceUsersFuncCall
	mutex       sync.Mutex
}

// PerforceUsers delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) PerforceUsers(v0 context.Context, v1 protocol.PerforceConnectionDetails) ([]*perforce.User, error) {
	r0, r1 := m.PerforceUsersFunc.nextHook()(v0, v1)
	m.PerforceUsersFunc.appendCall(ClientPerforceUsersFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the PerforceUsers method
// of the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientPerforceUsersFunc) SetDefaultHook(hook func(context.Context, protocol.PerforceConnectionDetails) ([]*perforce.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PerforceUsers method of the parent MockClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientPerforceUsersFunc) PushHook(hook func(context.Context, protocol.PerforceConnectionDetails) ([]*perforce.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientPerforceUsersFunc) SetDefaultReturn(r0 []*perforce.User, r1 error) {
	f.SetDefaultHook(func(context.Context, protocol.PerforceConnectionDetails) ([]*perforce.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientPerforceUsersFunc) PushReturn(r0 []*perforce.User, r1 error) {
	f.PushHook(func(context.Context, protocol.PerforceConnectionDetails) ([]*perforce.User, error) {
		return r0, r1
	})
}

func (f *ClientPerforceUsersFunc) nextHook() func(context.Context, protocol.PerforceConnectionDetails) ([]*perforce.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientPerforceUsersFunc) appendCall(r0 ClientPerforceUsersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientPerforceUsersFuncCall objects
// describing the invocations of this function.
func (f *ClientPerforceUsersFunc) History() []ClientPerforceUsersFuncCall {
	f.mutex.Lock()
	history := make([]ClientPerforceUsersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientPerforceUsersFuncCall is an object that describes an invocation of
// method PerforceUsers on an instance of MockClient.
type ClientPerforceUsersFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 protocol.PerforceConnectionDetails
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*perforce.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientPerforceUsersFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientPerforceUsersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientReadDirFunc describes the behavior when the ReadDir method of the
// parent MockClient instance is invoked.
type ClientReadDirFunc struct {
	defaultHook func(context.Context, api.RepoName, api.CommitID, string, bool) ([]fs.FileInfo, error)
	hooks       []func(context.Context, api.RepoName, api.CommitID, string, bool) ([]fs.FileInfo, error)
	history     []ClientReadDirFuncCall
	mutex       sync.Mutex
}

// ReadDir delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) ReadDir(v0 context.Context, v1 api.RepoName, v2 api.CommitID, v3 string, v4 bool) ([]fs.FileInfo, error) {
	r0, r1 := m.ReadDirFunc.nextHook()(v0, v1, v2, v3, v4)
	m.ReadDirFunc.appendCall(ClientReadDirFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ReadDir method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientReadDirFunc) SetDefaultHook(hook func(context.Context, api.RepoName, api.CommitID, string, bool) ([]fs.FileInfo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReadDir method of the parent MockClient instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientReadDirFunc) PushHook(hook func(context.Context, api.RepoName, api.CommitID, string, bool) ([]fs.FileInfo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientReadDirFunc) SetDefaultReturn(r0 []fs.FileInfo, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, api.CommitID, string, bool) ([]fs.FileInfo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientReadDirFunc) PushReturn(r0 []fs.FileInfo, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, api.CommitID, string, bool) ([]fs.FileInfo, error) {
		return r0, r1
	})
}

func (f *ClientReadDirFunc) nextHook() func(context.Context, api.RepoName, api.CommitID, string, bool) ([]fs.FileInfo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientReadDirFunc) appendCall(r0 ClientReadDirFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientReadDirFuncCall objects describing
// the invocations of this function.
func (f *ClientReadDirFunc) History() []ClientReadDirFuncCall {
	f.mutex.Lock()
	history := make([]ClientReadDirFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientReadDirFuncCall is an object that describes an invocation of method
// ReadDir on an instance of MockClient.
type ClientReadDirFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.CommitID
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []fs.FileInfo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientReadDirFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientReadDirFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientRepoCloneProgressFunc describes the behavior when the
// RepoCloneProgress method of the parent MockClient instance is invoked.
type ClientRepoCloneProgressFunc struct {
	defaultHook func(context.Context, api.RepoName) (*protocol.RepoCloneProgress, error)
	hooks       []func(context.Context, api.RepoName) (*protocol.RepoCloneProgress, error)
	history     []ClientRepoCloneProgressFuncCall
	mutex       sync.Mutex
}

// RepoCloneProgress delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) RepoCloneProgress(v0 context.Context, v1 api.RepoName) (*protocol.RepoCloneProgress, error) {
	r0, r1 := m.RepoCloneProgressFunc.nextHook()(v0, v1)
	m.RepoCloneProgressFunc.appendCall(ClientRepoCloneProgressFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RepoCloneProgress
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientRepoCloneProgressFunc) SetDefaultHook(hook func(context.Context, api.RepoName) (*protocol.RepoCloneProgress, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepoCloneProgress method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientRepoCloneProgressFunc) PushHook(hook func(context.Context, api.RepoName) (*protocol.RepoCloneProgress, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientRepoCloneProgressFunc) SetDefaultReturn(r0 *protocol.RepoCloneProgress, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) (*protocol.RepoCloneProgress, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientRepoCloneProgressFunc) PushReturn(r0 *protocol.RepoCloneProgress, r1 error) {
	f.PushHook(func(context.Context, api.RepoName) (*protocol.RepoCloneProgress, error) {
		return r0, r1
	})
}

func (f *ClientRepoCloneProgressFunc) nextHook() func(context.Context, api.RepoName) (*protocol.RepoCloneProgress, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientRepoCloneProgressFunc) appendCall(r0 ClientRepoCloneProgressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientRepoCloneProgressFuncCall objects
// describing the invocations of this function.
func (f *ClientRepoCloneProgressFunc) History() []ClientRepoCloneProgressFuncCall {
	f.mutex.Lock()
	history := make([]ClientRepoCloneProgressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientRepoCloneProgressFuncCall is an object that describes an invocation
// of method RepoCloneProgress on an instance of MockClient.
type ClientRepoCloneProgressFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *protocol.RepoCloneProgress
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientRepoCloneProgressFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientRepoCloneProgressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientResolveRevisionFunc describes the behavior when the ResolveRevision
// method of the parent MockClient instance is invoked.
type ClientResolveRevisionFunc struct {
	defaultHook func(context.Context, api.RepoName, string, ResolveRevisionOptions) (api.CommitID, error)
	hooks       []func(context.Context, api.RepoName, string, ResolveRevisionOptions) (api.CommitID, error)
	history     []ClientResolveRevisionFuncCall
	mutex       sync.Mutex
}

// ResolveRevision delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) ResolveRevision(v0 context.Context, v1 api.RepoName, v2 string, v3 ResolveRevisionOptions) (api.CommitID, error) {
	r0, r1 := m.ResolveRevisionFunc.nextHook()(v0, v1, v2, v3)
	m.ResolveRevisionFunc.appendCall(ClientResolveRevisionFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ResolveRevision
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientResolveRevisionFunc) SetDefaultHook(hook func(context.Context, api.RepoName, string, ResolveRevisionOptions) (api.CommitID, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ResolveRevision method of the parent MockClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientResolveRevisionFunc) PushHook(hook func(context.Context, api.RepoName, string, ResolveRevisionOptions) (api.CommitID, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientResolveRevisionFunc) SetDefaultReturn(r0 api.CommitID, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, string, ResolveRevisionOptions) (api.CommitID, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientResolveRevisionFunc) PushReturn(r0 api.CommitID, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, string, ResolveRevisionOptions) (api.CommitID, error) {
		return r0, r1
	})
}

func (f *ClientResolveRevisionFunc) nextHook() func(context.Context, api.RepoName, string, ResolveRevisionOptions) (api.CommitID, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientResolveRevisionFunc) appendCall(r0 ClientResolveRevisionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientResolveRevisionFuncCall objects
// describing the invocations of this function.
func (f *ClientResolveRevisionFunc) History() []ClientResolveRevisionFuncCall {
	f.mutex.Lock()
	history := make([]ClientResolveRevisionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientResolveRevisionFuncCall is an object that describes an invocation
// of method ResolveRevision on an instance of MockClient.
type ClientResolveRevisionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 ResolveRevisionOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 api.CommitID
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientResolveRevisionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientResolveRevisionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientRevAtTimeFunc describes the behavior when the RevAtTime method of
// the parent MockClient instance is invoked.
type ClientRevAtTimeFunc struct {
	defaultHook func(context.Context, api.RepoName, string, time.Time) (api.CommitID, bool, error)
	hooks       []func(context.Context, api.RepoName, string, time.Time) (api.CommitID, bool, error)
	history     []ClientRevAtTimeFuncCall
	mutex       sync.Mutex
}

// RevAtTime delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) RevAtTime(v0 context.Context, v1 api.RepoName, v2 string, v3 time.Time) (api.CommitID, bool, error) {
	r0, r1, r2 := m.RevAtTimeFunc.nextHook()(v0, v1, v2, v3)
	m.RevAtTimeFunc.appendCall(ClientRevAtTimeFuncCall{v0, v1, v2, v3, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the RevAtTime method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientRevAtTimeFunc) SetDefaultHook(hook func(context.Context, api.RepoName, string, time.Time) (api.CommitID, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RevAtTime method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientRevAtTimeFunc) PushHook(hook func(context.Context, api.RepoName, string, time.Time) (api.CommitID, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientRevAtTimeFunc) SetDefaultReturn(r0 api.CommitID, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, string, time.Time) (api.CommitID, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientRevAtTimeFunc) PushReturn(r0 api.CommitID, r1 bool, r2 error) {
	f.PushHook(func(context.Context, api.RepoName, string, time.Time) (api.CommitID, bool, error) {
		return r0, r1, r2
	})
}

func (f *ClientRevAtTimeFunc) nextHook() func(context.Context, api.RepoName, string, time.Time) (api.CommitID, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientRevAtTimeFunc) appendCall(r0 ClientRevAtTimeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientRevAtTimeFuncCall objects describing
// the invocations of this function.
func (f *ClientRevAtTimeFunc) History() []ClientRevAtTimeFuncCall {
	f.mutex.Lock()
	history := make([]ClientRevAtTimeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientRevAtTimeFuncCall is an object that describes an invocation of
// method RevAtTime on an instance of MockClient.
type ClientRevAtTimeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 api.CommitID
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientRevAtTimeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientRevAtTimeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ClientScopedFunc describes the behavior when the Scoped method of the
// parent MockClient instance is invoked.
type ClientScopedFunc struct {
	defaultHook func(string) Client
	hooks       []func(string) Client
	history     []ClientScopedFuncCall
	mutex       sync.Mutex
}

// Scoped delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) Scoped(v0 string) Client {
	r0 := m.ScopedFunc.nextHook()(v0)
	m.ScopedFunc.appendCall(ClientScopedFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Scoped method of the
// parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientScopedFunc) SetDefaultHook(hook func(string) Client) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Scoped method of the parent MockClient instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientScopedFunc) PushHook(hook func(string) Client) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientScopedFunc) SetDefaultReturn(r0 Client) {
	f.SetDefaultHook(func(string) Client {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientScopedFunc) PushReturn(r0 Client) {
	f.PushHook(func(string) Client {
		return r0
	})
}

func (f *ClientScopedFunc) nextHook() func(string) Client {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientScopedFunc) appendCall(r0 ClientScopedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientScopedFuncCall objects describing the
// invocations of this function.
func (f *ClientScopedFunc) History() []ClientScopedFuncCall {
	f.mutex.Lock()
	history := make([]ClientScopedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientScopedFuncCall is an object that describes an invocation of method
// Scoped on an instance of MockClient.
type ClientScopedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 Client
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientScopedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientScopedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientSearchFunc describes the behavior when the Search method of the
// parent MockClient instance is invoked.
type ClientSearchFunc struct {
	defaultHook func(context.Context, *protocol.SearchRequest, func([]protocol.CommitMatch)) (bool, error)
	hooks       []func(context.Context, *protocol.SearchRequest, func([]protocol.CommitMatch)) (bool, error)
	history     []ClientSearchFuncCall
	mutex       sync.Mutex
}

// Search delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) Search(v0 context.Context, v1 *protocol.SearchRequest, v2 func([]protocol.CommitMatch)) (bool, error) {
	r0, r1 := m.SearchFunc.nextHook()(v0, v1, v2)
	m.SearchFunc.appendCall(ClientSearchFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Search method of the
// parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientSearchFunc) SetDefaultHook(hook func(context.Context, *protocol.SearchRequest, func([]protocol.CommitMatch)) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Search method of the parent MockClient instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientSearchFunc) PushHook(hook func(context.Context, *protocol.SearchRequest, func([]protocol.CommitMatch)) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientSearchFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, *protocol.SearchRequest, func([]protocol.CommitMatch)) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientSearchFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, *protocol.SearchRequest, func([]protocol.CommitMatch)) (bool, error) {
		return r0, r1
	})
}

func (f *ClientSearchFunc) nextHook() func(context.Context, *protocol.SearchRequest, func([]protocol.CommitMatch)) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientSearchFunc) appendCall(r0 ClientSearchFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientSearchFuncCall objects describing the
// invocations of this function.
func (f *ClientSearchFunc) History() []ClientSearchFuncCall {
	f.mutex.Lock()
	history := make([]ClientSearchFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientSearchFuncCall is an object that describes an invocation of method
// Search on an instance of MockClient.
type ClientSearchFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *protocol.SearchRequest
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 func([]protocol.CommitMatch)
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientSearchFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientSearchFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientStatFunc describes the behavior when the Stat method of the parent
// MockClient instance is invoked.
type ClientStatFunc struct {
	defaultHook func(context.Context, api.RepoName, api.CommitID, string) (fs.FileInfo, error)
	hooks       []func(context.Context, api.RepoName, api.CommitID, string) (fs.FileInfo, error)
	history     []ClientStatFuncCall
	mutex       sync.Mutex
}

// Stat delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) Stat(v0 context.Context, v1 api.RepoName, v2 api.CommitID, v3 string) (fs.FileInfo, error) {
	r0, r1 := m.StatFunc.nextHook()(v0, v1, v2, v3)
	m.StatFunc.appendCall(ClientStatFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Stat method of the
// parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientStatFunc) SetDefaultHook(hook func(context.Context, api.RepoName, api.CommitID, string) (fs.FileInfo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Stat method of the parent MockClient instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientStatFunc) PushHook(hook func(context.Context, api.RepoName, api.CommitID, string) (fs.FileInfo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientStatFunc) SetDefaultReturn(r0 fs.FileInfo, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, api.CommitID, string) (fs.FileInfo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientStatFunc) PushReturn(r0 fs.FileInfo, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, api.CommitID, string) (fs.FileInfo, error) {
		return r0, r1
	})
}

func (f *ClientStatFunc) nextHook() func(context.Context, api.RepoName, api.CommitID, string) (fs.FileInfo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientStatFunc) appendCall(r0 ClientStatFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientStatFuncCall objects describing the
// invocations of this function.
func (f *ClientStatFunc) History() []ClientStatFuncCall {
	f.mutex.Lock()
	history := make([]ClientStatFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientStatFuncCall is an object that describes an invocation of method
// Stat on an instance of MockClient.
type ClientStatFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.CommitID
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 fs.FileInfo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientStatFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientStatFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientStreamBlameFileFunc describes the behavior when the StreamBlameFile
// method of the parent MockClient instance is invoked.
type ClientStreamBlameFileFunc struct {
	defaultHook func(context.Context, api.RepoName, string, *BlameOptions) (HunkReader, error)
	hooks       []func(context.Context, api.RepoName, string, *BlameOptions) (HunkReader, error)
	history     []ClientStreamBlameFileFuncCall
	mutex       sync.Mutex
}

// StreamBlameFile delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) StreamBlameFile(v0 context.Context, v1 api.RepoName, v2 string, v3 *BlameOptions) (HunkReader, error) {
	r0, r1 := m.StreamBlameFileFunc.nextHook()(v0, v1, v2, v3)
	m.StreamBlameFileFunc.appendCall(ClientStreamBlameFileFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the StreamBlameFile
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientStreamBlameFileFunc) SetDefaultHook(hook func(context.Context, api.RepoName, string, *BlameOptions) (HunkReader, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// StreamBlameFile method of the parent MockClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientStreamBlameFileFunc) PushHook(hook func(context.Context, api.RepoName, string, *BlameOptions) (HunkReader, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientStreamBlameFileFunc) SetDefaultReturn(r0 HunkReader, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, string, *BlameOptions) (HunkReader, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientStreamBlameFileFunc) PushReturn(r0 HunkReader, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, string, *BlameOptions) (HunkReader, error) {
		return r0, r1
	})
}

func (f *ClientStreamBlameFileFunc) nextHook() func(context.Context, api.RepoName, string, *BlameOptions) (HunkReader, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientStreamBlameFileFunc) appendCall(r0 ClientStreamBlameFileFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientStreamBlameFileFuncCall objects
// describing the invocations of this function.
func (f *ClientStreamBlameFileFunc) History() []ClientStreamBlameFileFuncCall {
	f.mutex.Lock()
	history := make([]ClientStreamBlameFileFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientStreamBlameFileFuncCall is an object that describes an invocation
// of method StreamBlameFile on an instance of MockClient.
type ClientStreamBlameFileFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 *BlameOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 HunkReader
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientStreamBlameFileFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientStreamBlameFileFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientSystemInfoFunc describes the behavior when the SystemInfo method of
// the parent MockClient instance is invoked.
type ClientSystemInfoFunc struct {
	defaultHook func(context.Context, string) (protocol.SystemInfo, error)
	hooks       []func(context.Context, string) (protocol.SystemInfo, error)
	history     []ClientSystemInfoFuncCall
	mutex       sync.Mutex
}

// SystemInfo delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) SystemInfo(v0 context.Context, v1 string) (protocol.SystemInfo, error) {
	r0, r1 := m.SystemInfoFunc.nextHook()(v0, v1)
	m.SystemInfoFunc.appendCall(ClientSystemInfoFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SystemInfo method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientSystemInfoFunc) SetDefaultHook(hook func(context.Context, string) (protocol.SystemInfo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SystemInfo method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientSystemInfoFunc) PushHook(hook func(context.Context, string) (protocol.SystemInfo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientSystemInfoFunc) SetDefaultReturn(r0 protocol.SystemInfo, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (protocol.SystemInfo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientSystemInfoFunc) PushReturn(r0 protocol.SystemInfo, r1 error) {
	f.PushHook(func(context.Context, string) (protocol.SystemInfo, error) {
		return r0, r1
	})
}

func (f *ClientSystemInfoFunc) nextHook() func(context.Context, string) (protocol.SystemInfo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientSystemInfoFunc) appendCall(r0 ClientSystemInfoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientSystemInfoFuncCall objects describing
// the invocations of this function.
func (f *ClientSystemInfoFunc) History() []ClientSystemInfoFuncCall {
	f.mutex.Lock()
	history := make([]ClientSystemInfoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientSystemInfoFuncCall is an object that describes an invocation of
// method SystemInfo on an instance of MockClient.
type ClientSystemInfoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 protocol.SystemInfo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientSystemInfoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientSystemInfoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientSystemsInfoFunc describes the behavior when the SystemsInfo method
// of the parent MockClient instance is invoked.
type ClientSystemsInfoFunc struct {
	defaultHook func(context.Context) ([]protocol.SystemInfo, error)
	hooks       []func(context.Context) ([]protocol.SystemInfo, error)
	history     []ClientSystemsInfoFuncCall
	mutex       sync.Mutex
}

// SystemsInfo delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) SystemsInfo(v0 context.Context) ([]protocol.SystemInfo, error) {
	r0, r1 := m.SystemsInfoFunc.nextHook()(v0)
	m.SystemsInfoFunc.appendCall(ClientSystemsInfoFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SystemsInfo method
// of the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientSystemsInfoFunc) SetDefaultHook(hook func(context.Context) ([]protocol.SystemInfo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SystemsInfo method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientSystemsInfoFunc) PushHook(hook func(context.Context) ([]protocol.SystemInfo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ClientSystemsInfoFunc) SetDefaultReturn(r0 []protocol.SystemInfo, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]protocol.SystemInfo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ClientSystemsInfoFunc) PushReturn(r0 []protocol.SystemInfo, r1 error) {
	f.PushHook(func(context.Context) ([]protocol.SystemInfo, error) {
		return r0, r1
	})
}

func (f *ClientSystemsInfoFunc) nextHook() func(context.Context) ([]protocol.SystemInfo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientSystemsInfoFunc) appendCall(r0 ClientSystemsInfoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientSystemsInfoFuncCall objects
// describing the invocations of this function.
func (f *ClientSystemsInfoFunc) History() []ClientSystemsInfoFuncCall {
	f.mutex.Lock()
	history := make([]ClientSystemsInfoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientSystemsInfoFuncCall is an object that describes an invocation of
// method SystemsInfo on an instance of MockClient.
type ClientSystemsInfoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []protocol.SystemInfo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientSystemsInfoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientSystemsInfoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
