// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package gitserver

import (
	"context"
	"sync"

	v1 "github.com/sourcegraph/sourcegraph/internal/gitserver/v1"
	grpc "google.golang.org/grpc"
)

// MockGitserverServiceClient is a mock implementation of the
// GitserverServiceClient interface (from the package
// github.com/sourcegraph/sourcegraph/internal/gitserver/v1) used for unit
// testing.
type MockGitserverServiceClient struct {
	// ArchiveFunc is an instance of a mock function object controlling the
	// behavior of the method Archive.
	ArchiveFunc *GitserverServiceClientArchiveFunc
	// BatchLogFunc is an instance of a mock function object controlling the
	// behavior of the method BatchLog.
	BatchLogFunc *GitserverServiceClientBatchLogFunc
	// CheckPerforceCredentialsFunc is an instance of a mock function object
	// controlling the behavior of the method CheckPerforceCredentials.
	CheckPerforceCredentialsFunc *GitserverServiceClientCheckPerforceCredentialsFunc
	// CreateCommitFromPatchBinaryFunc is an instance of a mock function
	// object controlling the behavior of the method
	// CreateCommitFromPatchBinary.
	CreateCommitFromPatchBinaryFunc *GitserverServiceClientCreateCommitFromPatchBinaryFunc
	// DiskInfoFunc is an instance of a mock function object controlling the
	// behavior of the method DiskInfo.
	DiskInfoFunc *GitserverServiceClientDiskInfoFunc
	// ExecFunc is an instance of a mock function object controlling the
	// behavior of the method Exec.
	ExecFunc *GitserverServiceClientExecFunc
	// GetObjectFunc is an instance of a mock function object controlling
	// the behavior of the method GetObject.
	GetObjectFunc *GitserverServiceClientGetObjectFunc
	// IsPerforcePathCloneableFunc is an instance of a mock function object
	// controlling the behavior of the method IsPerforcePathCloneable.
	IsPerforcePathCloneableFunc *GitserverServiceClientIsPerforcePathCloneableFunc
	// IsPerforceSuperUserFunc is an instance of a mock function object
	// controlling the behavior of the method IsPerforceSuperUser.
	IsPerforceSuperUserFunc *GitserverServiceClientIsPerforceSuperUserFunc
	// IsRepoCloneableFunc is an instance of a mock function object
	// controlling the behavior of the method IsRepoCloneable.
	IsRepoCloneableFunc *GitserverServiceClientIsRepoCloneableFunc
	// ListGitoliteFunc is an instance of a mock function object controlling
	// the behavior of the method ListGitolite.
	ListGitoliteFunc *GitserverServiceClientListGitoliteFunc
	// P4ExecFunc is an instance of a mock function object controlling the
	// behavior of the method P4Exec.
	P4ExecFunc *GitserverServiceClientP4ExecFunc
	// PerforceGetChangelistFunc is an instance of a mock function object
	// controlling the behavior of the method PerforceGetChangelist.
	PerforceGetChangelistFunc *GitserverServiceClientPerforceGetChangelistFunc
	// PerforceGroupMembersFunc is an instance of a mock function object
	// controlling the behavior of the method PerforceGroupMembers.
	PerforceGroupMembersFunc *GitserverServiceClientPerforceGroupMembersFunc
	// PerforceProtectsForDepotFunc is an instance of a mock function object
	// controlling the behavior of the method PerforceProtectsForDepot.
	PerforceProtectsForDepotFunc *GitserverServiceClientPerforceProtectsForDepotFunc
	// PerforceProtectsForUserFunc is an instance of a mock function object
	// controlling the behavior of the method PerforceProtectsForUser.
	PerforceProtectsForUserFunc *GitserverServiceClientPerforceProtectsForUserFunc
	// PerforceUsersFunc is an instance of a mock function object
	// controlling the behavior of the method PerforceUsers.
	PerforceUsersFunc *GitserverServiceClientPerforceUsersFunc
	// RepoCloneFunc is an instance of a mock function object controlling
	// the behavior of the method RepoClone.
	RepoCloneFunc *GitserverServiceClientRepoCloneFunc
	// RepoCloneProgressFunc is an instance of a mock function object
	// controlling the behavior of the method RepoCloneProgress.
	RepoCloneProgressFunc *GitserverServiceClientRepoCloneProgressFunc
	// RepoDeleteFunc is an instance of a mock function object controlling
	// the behavior of the method RepoDelete.
	RepoDeleteFunc *GitserverServiceClientRepoDeleteFunc
	// RepoUpdateFunc is an instance of a mock function object controlling
	// the behavior of the method RepoUpdate.
	RepoUpdateFunc *GitserverServiceClientRepoUpdateFunc
	// SearchFunc is an instance of a mock function object controlling the
	// behavior of the method Search.
	SearchFunc *GitserverServiceClientSearchFunc
}

// NewMockGitserverServiceClient creates a new mock of the
// GitserverServiceClient interface. All methods return zero values for all
// results, unless overwritten.
func NewMockGitserverServiceClient() *MockGitserverServiceClient {
	return &MockGitserverServiceClient{
		ArchiveFunc: &GitserverServiceClientArchiveFunc{
			defaultHook: func(context.Context, *v1.ArchiveRequest, ...grpc.CallOption) (r0 v1.GitserverService_ArchiveClient, r1 error) {
				return
			},
		},
		BatchLogFunc: &GitserverServiceClientBatchLogFunc{
			defaultHook: func(context.Context, *v1.BatchLogRequest, ...grpc.CallOption) (r0 *v1.BatchLogResponse, r1 error) {
				return
			},
		},
		CheckPerforceCredentialsFunc: &GitserverServiceClientCheckPerforceCredentialsFunc{
			defaultHook: func(context.Context, *v1.CheckPerforceCredentialsRequest, ...grpc.CallOption) (r0 *v1.CheckPerforceCredentialsResponse, r1 error) {
				return
			},
		},
		CreateCommitFromPatchBinaryFunc: &GitserverServiceClientCreateCommitFromPatchBinaryFunc{
			defaultHook: func(context.Context, ...grpc.CallOption) (r0 v1.GitserverService_CreateCommitFromPatchBinaryClient, r1 error) {
				return
			},
		},
		DiskInfoFunc: &GitserverServiceClientDiskInfoFunc{
			defaultHook: func(context.Context, *v1.DiskInfoRequest, ...grpc.CallOption) (r0 *v1.DiskInfoResponse, r1 error) {
				return
			},
		},
		ExecFunc: &GitserverServiceClientExecFunc{
			defaultHook: func(context.Context, *v1.ExecRequest, ...grpc.CallOption) (r0 v1.GitserverService_ExecClient, r1 error) {
				return
			},
		},
		GetObjectFunc: &GitserverServiceClientGetObjectFunc{
			defaultHook: func(context.Context, *v1.GetObjectRequest, ...grpc.CallOption) (r0 *v1.GetObjectResponse, r1 error) {
				return
			},
		},
		IsPerforcePathCloneableFunc: &GitserverServiceClientIsPerforcePathCloneableFunc{
			defaultHook: func(context.Context, *v1.IsPerforcePathCloneableRequest, ...grpc.CallOption) (r0 *v1.IsPerforcePathCloneableResponse, r1 error) {
				return
			},
		},
		IsPerforceSuperUserFunc: &GitserverServiceClientIsPerforceSuperUserFunc{
			defaultHook: func(context.Context, *v1.IsPerforceSuperUserRequest, ...grpc.CallOption) (r0 *v1.IsPerforceSuperUserResponse, r1 error) {
				return
			},
		},
		IsRepoCloneableFunc: &GitserverServiceClientIsRepoCloneableFunc{
			defaultHook: func(context.Context, *v1.IsRepoCloneableRequest, ...grpc.CallOption) (r0 *v1.IsRepoCloneableResponse, r1 error) {
				return
			},
		},
		ListGitoliteFunc: &GitserverServiceClientListGitoliteFunc{
			defaultHook: func(context.Context, *v1.ListGitoliteRequest, ...grpc.CallOption) (r0 *v1.ListGitoliteResponse, r1 error) {
				return
			},
		},
		P4ExecFunc: &GitserverServiceClientP4ExecFunc{
			defaultHook: func(context.Context, *v1.P4ExecRequest, ...grpc.CallOption) (r0 v1.GitserverService_P4ExecClient, r1 error) {
				return
			},
		},
		PerforceGetChangelistFunc: &GitserverServiceClientPerforceGetChangelistFunc{
			defaultHook: func(context.Context, *v1.PerforceGetChangelistRequest, ...grpc.CallOption) (r0 *v1.PerforceGetChangelistResponse, r1 error) {
				return
			},
		},
		PerforceGroupMembersFunc: &GitserverServiceClientPerforceGroupMembersFunc{
			defaultHook: func(context.Context, *v1.PerforceGroupMembersRequest, ...grpc.CallOption) (r0 *v1.PerforceGroupMembersResponse, r1 error) {
				return
			},
		},
		PerforceProtectsForDepotFunc: &GitserverServiceClientPerforceProtectsForDepotFunc{
			defaultHook: func(context.Context, *v1.PerforceProtectsForDepotRequest, ...grpc.CallOption) (r0 *v1.PerforceProtectsForDepotResponse, r1 error) {
				return
			},
		},
		PerforceProtectsForUserFunc: &GitserverServiceClientPerforceProtectsForUserFunc{
			defaultHook: func(context.Context, *v1.PerforceProtectsForUserRequest, ...grpc.CallOption) (r0 *v1.PerforceProtectsForUserResponse, r1 error) {
				return
			},
		},
		PerforceUsersFunc: &GitserverServiceClientPerforceUsersFunc{
			defaultHook: func(context.Context, *v1.PerforceUsersRequest, ...grpc.CallOption) (r0 *v1.PerforceUsersResponse, r1 error) {
				return
			},
		},
		RepoCloneFunc: &GitserverServiceClientRepoCloneFunc{
			defaultHook: func(context.Context, *v1.RepoCloneRequest, ...grpc.CallOption) (r0 *v1.RepoCloneResponse, r1 error) {
				return
			},
		},
		RepoCloneProgressFunc: &GitserverServiceClientRepoCloneProgressFunc{
			defaultHook: func(context.Context, *v1.RepoCloneProgressRequest, ...grpc.CallOption) (r0 *v1.RepoCloneProgressResponse, r1 error) {
				return
			},
		},
		RepoDeleteFunc: &GitserverServiceClientRepoDeleteFunc{
			defaultHook: func(context.Context, *v1.RepoDeleteRequest, ...grpc.CallOption) (r0 *v1.RepoDeleteResponse, r1 error) {
				return
			},
		},
		RepoUpdateFunc: &GitserverServiceClientRepoUpdateFunc{
			defaultHook: func(context.Context, *v1.RepoUpdateRequest, ...grpc.CallOption) (r0 *v1.RepoUpdateResponse, r1 error) {
				return
			},
		},
		SearchFunc: &GitserverServiceClientSearchFunc{
			defaultHook: func(context.Context, *v1.SearchRequest, ...grpc.CallOption) (r0 v1.GitserverService_SearchClient, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockGitserverServiceClient creates a new mock of the
// GitserverServiceClient interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockGitserverServiceClient() *MockGitserverServiceClient {
	return &MockGitserverServiceClient{
		ArchiveFunc: &GitserverServiceClientArchiveFunc{
			defaultHook: func(context.Context, *v1.ArchiveRequest, ...grpc.CallOption) (v1.GitserverService_ArchiveClient, error) {
				panic("unexpected invocation of MockGitserverServiceClient.Archive")
			},
		},
		BatchLogFunc: &GitserverServiceClientBatchLogFunc{
			defaultHook: func(context.Context, *v1.BatchLogRequest, ...grpc.CallOption) (*v1.BatchLogResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.BatchLog")
			},
		},
		CheckPerforceCredentialsFunc: &GitserverServiceClientCheckPerforceCredentialsFunc{
			defaultHook: func(context.Context, *v1.CheckPerforceCredentialsRequest, ...grpc.CallOption) (*v1.CheckPerforceCredentialsResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.CheckPerforceCredentials")
			},
		},
		CreateCommitFromPatchBinaryFunc: &GitserverServiceClientCreateCommitFromPatchBinaryFunc{
			defaultHook: func(context.Context, ...grpc.CallOption) (v1.GitserverService_CreateCommitFromPatchBinaryClient, error) {
				panic("unexpected invocation of MockGitserverServiceClient.CreateCommitFromPatchBinary")
			},
		},
		DiskInfoFunc: &GitserverServiceClientDiskInfoFunc{
			defaultHook: func(context.Context, *v1.DiskInfoRequest, ...grpc.CallOption) (*v1.DiskInfoResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.DiskInfo")
			},
		},
		ExecFunc: &GitserverServiceClientExecFunc{
			defaultHook: func(context.Context, *v1.ExecRequest, ...grpc.CallOption) (v1.GitserverService_ExecClient, error) {
				panic("unexpected invocation of MockGitserverServiceClient.Exec")
			},
		},
		GetObjectFunc: &GitserverServiceClientGetObjectFunc{
			defaultHook: func(context.Context, *v1.GetObjectRequest, ...grpc.CallOption) (*v1.GetObjectResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.GetObject")
			},
		},
		IsPerforcePathCloneableFunc: &GitserverServiceClientIsPerforcePathCloneableFunc{
			defaultHook: func(context.Context, *v1.IsPerforcePathCloneableRequest, ...grpc.CallOption) (*v1.IsPerforcePathCloneableResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.IsPerforcePathCloneable")
			},
		},
		IsPerforceSuperUserFunc: &GitserverServiceClientIsPerforceSuperUserFunc{
			defaultHook: func(context.Context, *v1.IsPerforceSuperUserRequest, ...grpc.CallOption) (*v1.IsPerforceSuperUserResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.IsPerforceSuperUser")
			},
		},
		IsRepoCloneableFunc: &GitserverServiceClientIsRepoCloneableFunc{
			defaultHook: func(context.Context, *v1.IsRepoCloneableRequest, ...grpc.CallOption) (*v1.IsRepoCloneableResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.IsRepoCloneable")
			},
		},
		ListGitoliteFunc: &GitserverServiceClientListGitoliteFunc{
			defaultHook: func(context.Context, *v1.ListGitoliteRequest, ...grpc.CallOption) (*v1.ListGitoliteResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.ListGitolite")
			},
		},
		P4ExecFunc: &GitserverServiceClientP4ExecFunc{
			defaultHook: func(context.Context, *v1.P4ExecRequest, ...grpc.CallOption) (v1.GitserverService_P4ExecClient, error) {
				panic("unexpected invocation of MockGitserverServiceClient.P4Exec")
			},
		},
		PerforceGetChangelistFunc: &GitserverServiceClientPerforceGetChangelistFunc{
			defaultHook: func(context.Context, *v1.PerforceGetChangelistRequest, ...grpc.CallOption) (*v1.PerforceGetChangelistResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.PerforceGetChangelist")
			},
		},
		PerforceGroupMembersFunc: &GitserverServiceClientPerforceGroupMembersFunc{
			defaultHook: func(context.Context, *v1.PerforceGroupMembersRequest, ...grpc.CallOption) (*v1.PerforceGroupMembersResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.PerforceGroupMembers")
			},
		},
		PerforceProtectsForDepotFunc: &GitserverServiceClientPerforceProtectsForDepotFunc{
			defaultHook: func(context.Context, *v1.PerforceProtectsForDepotRequest, ...grpc.CallOption) (*v1.PerforceProtectsForDepotResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.PerforceProtectsForDepot")
			},
		},
		PerforceProtectsForUserFunc: &GitserverServiceClientPerforceProtectsForUserFunc{
			defaultHook: func(context.Context, *v1.PerforceProtectsForUserRequest, ...grpc.CallOption) (*v1.PerforceProtectsForUserResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.PerforceProtectsForUser")
			},
		},
		PerforceUsersFunc: &GitserverServiceClientPerforceUsersFunc{
			defaultHook: func(context.Context, *v1.PerforceUsersRequest, ...grpc.CallOption) (*v1.PerforceUsersResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.PerforceUsers")
			},
		},
		RepoCloneFunc: &GitserverServiceClientRepoCloneFunc{
			defaultHook: func(context.Context, *v1.RepoCloneRequest, ...grpc.CallOption) (*v1.RepoCloneResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.RepoClone")
			},
		},
		RepoCloneProgressFunc: &GitserverServiceClientRepoCloneProgressFunc{
			defaultHook: func(context.Context, *v1.RepoCloneProgressRequest, ...grpc.CallOption) (*v1.RepoCloneProgressResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.RepoCloneProgress")
			},
		},
		RepoDeleteFunc: &GitserverServiceClientRepoDeleteFunc{
			defaultHook: func(context.Context, *v1.RepoDeleteRequest, ...grpc.CallOption) (*v1.RepoDeleteResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.RepoDelete")
			},
		},
		RepoUpdateFunc: &GitserverServiceClientRepoUpdateFunc{
			defaultHook: func(context.Context, *v1.RepoUpdateRequest, ...grpc.CallOption) (*v1.RepoUpdateResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.RepoUpdate")
			},
		},
		SearchFunc: &GitserverServiceClientSearchFunc{
			defaultHook: func(context.Context, *v1.SearchRequest, ...grpc.CallOption) (v1.GitserverService_SearchClient, error) {
				panic("unexpected invocation of MockGitserverServiceClient.Search")
			},
		},
	}
}

// NewMockGitserverServiceClientFrom creates a new mock of the
// MockGitserverServiceClient interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockGitserverServiceClientFrom(i v1.GitserverServiceClient) *MockGitserverServiceClient {
	return &MockGitserverServiceClient{
		ArchiveFunc: &GitserverServiceClientArchiveFunc{
			defaultHook: i.Archive,
		},
		BatchLogFunc: &GitserverServiceClientBatchLogFunc{
			defaultHook: i.BatchLog,
		},
		CheckPerforceCredentialsFunc: &GitserverServiceClientCheckPerforceCredentialsFunc{
			defaultHook: i.CheckPerforceCredentials,
		},
		CreateCommitFromPatchBinaryFunc: &GitserverServiceClientCreateCommitFromPatchBinaryFunc{
			defaultHook: i.CreateCommitFromPatchBinary,
		},
		DiskInfoFunc: &GitserverServiceClientDiskInfoFunc{
			defaultHook: i.DiskInfo,
		},
		ExecFunc: &GitserverServiceClientExecFunc{
			defaultHook: i.Exec,
		},
		GetObjectFunc: &GitserverServiceClientGetObjectFunc{
			defaultHook: i.GetObject,
		},
		IsPerforcePathCloneableFunc: &GitserverServiceClientIsPerforcePathCloneableFunc{
			defaultHook: i.IsPerforcePathCloneable,
		},
		IsPerforceSuperUserFunc: &GitserverServiceClientIsPerforceSuperUserFunc{
			defaultHook: i.IsPerforceSuperUser,
		},
		IsRepoCloneableFunc: &GitserverServiceClientIsRepoCloneableFunc{
			defaultHook: i.IsRepoCloneable,
		},
		ListGitoliteFunc: &GitserverServiceClientListGitoliteFunc{
			defaultHook: i.ListGitolite,
		},
		P4ExecFunc: &GitserverServiceClientP4ExecFunc{
			defaultHook: i.P4Exec,
		},
		PerforceGetChangelistFunc: &GitserverServiceClientPerforceGetChangelistFunc{
			defaultHook: i.PerforceGetChangelist,
		},
		PerforceGroupMembersFunc: &GitserverServiceClientPerforceGroupMembersFunc{
			defaultHook: i.PerforceGroupMembers,
		},
		PerforceProtectsForDepotFunc: &GitserverServiceClientPerforceProtectsForDepotFunc{
			defaultHook: i.PerforceProtectsForDepot,
		},
		PerforceProtectsForUserFunc: &GitserverServiceClientPerforceProtectsForUserFunc{
			defaultHook: i.PerforceProtectsForUser,
		},
		PerforceUsersFunc: &GitserverServiceClientPerforceUsersFunc{
			defaultHook: i.PerforceUsers,
		},
		RepoCloneFunc: &GitserverServiceClientRepoCloneFunc{
			defaultHook: i.RepoClone,
		},
		RepoCloneProgressFunc: &GitserverServiceClientRepoCloneProgressFunc{
			defaultHook: i.RepoCloneProgress,
		},
		RepoDeleteFunc: &GitserverServiceClientRepoDeleteFunc{
			defaultHook: i.RepoDelete,
		},
		RepoUpdateFunc: &GitserverServiceClientRepoUpdateFunc{
			defaultHook: i.RepoUpdate,
		},
		SearchFunc: &GitserverServiceClientSearchFunc{
			defaultHook: i.Search,
		},
	}
}

// GitserverServiceClientArchiveFunc describes the behavior when the Archive
// method of the parent MockGitserverServiceClient instance is invoked.
type GitserverServiceClientArchiveFunc struct {
	defaultHook func(context.Context, *v1.ArchiveRequest, ...grpc.CallOption) (v1.GitserverService_ArchiveClient, error)
	hooks       []func(context.Context, *v1.ArchiveRequest, ...grpc.CallOption) (v1.GitserverService_ArchiveClient, error)
	history     []GitserverServiceClientArchiveFuncCall
	mutex       sync.Mutex
}

// Archive delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverServiceClient) Archive(v0 context.Context, v1 *v1.ArchiveRequest, v2 ...grpc.CallOption) (v1.GitserverService_ArchiveClient, error) {
	r0, r1 := m.ArchiveFunc.nextHook()(v0, v1, v2...)
	m.ArchiveFunc.appendCall(GitserverServiceClientArchiveFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Archive method of
// the parent MockGitserverServiceClient instance is invoked and the hook
// queue is empty.
func (f *GitserverServiceClientArchiveFunc) SetDefaultHook(hook func(context.Context, *v1.ArchiveRequest, ...grpc.CallOption) (v1.GitserverService_ArchiveClient, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Archive method of the parent MockGitserverServiceClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverServiceClientArchiveFunc) PushHook(hook func(context.Context, *v1.ArchiveRequest, ...grpc.CallOption) (v1.GitserverService_ArchiveClient, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientArchiveFunc) SetDefaultReturn(r0 v1.GitserverService_ArchiveClient, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.ArchiveRequest, ...grpc.CallOption) (v1.GitserverService_ArchiveClient, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientArchiveFunc) PushReturn(r0 v1.GitserverService_ArchiveClient, r1 error) {
	f.PushHook(func(context.Context, *v1.ArchiveRequest, ...grpc.CallOption) (v1.GitserverService_ArchiveClient, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientArchiveFunc) nextHook() func(context.Context, *v1.ArchiveRequest, ...grpc.CallOption) (v1.GitserverService_ArchiveClient, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientArchiveFunc) appendCall(r0 GitserverServiceClientArchiveFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverServiceClientArchiveFuncCall
// objects describing the invocations of this function.
func (f *GitserverServiceClientArchiveFunc) History() []GitserverServiceClientArchiveFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientArchiveFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientArchiveFuncCall is an object that describes an
// invocation of method Archive on an instance of
// MockGitserverServiceClient.
type GitserverServiceClientArchiveFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.ArchiveRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 v1.GitserverService_ArchiveClient
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientArchiveFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientArchiveFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientBatchLogFunc describes the behavior when the
// BatchLog method of the parent MockGitserverServiceClient instance is
// invoked.
type GitserverServiceClientBatchLogFunc struct {
	defaultHook func(context.Context, *v1.BatchLogRequest, ...grpc.CallOption) (*v1.BatchLogResponse, error)
	hooks       []func(context.Context, *v1.BatchLogRequest, ...grpc.CallOption) (*v1.BatchLogResponse, error)
	history     []GitserverServiceClientBatchLogFuncCall
	mutex       sync.Mutex
}

// BatchLog delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverServiceClient) BatchLog(v0 context.Context, v1 *v1.BatchLogRequest, v2 ...grpc.CallOption) (*v1.BatchLogResponse, error) {
	r0, r1 := m.BatchLogFunc.nextHook()(v0, v1, v2...)
	m.BatchLogFunc.appendCall(GitserverServiceClientBatchLogFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the BatchLog method of
// the parent MockGitserverServiceClient instance is invoked and the hook
// queue is empty.
func (f *GitserverServiceClientBatchLogFunc) SetDefaultHook(hook func(context.Context, *v1.BatchLogRequest, ...grpc.CallOption) (*v1.BatchLogResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BatchLog method of the parent MockGitserverServiceClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverServiceClientBatchLogFunc) PushHook(hook func(context.Context, *v1.BatchLogRequest, ...grpc.CallOption) (*v1.BatchLogResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientBatchLogFunc) SetDefaultReturn(r0 *v1.BatchLogResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.BatchLogRequest, ...grpc.CallOption) (*v1.BatchLogResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientBatchLogFunc) PushReturn(r0 *v1.BatchLogResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.BatchLogRequest, ...grpc.CallOption) (*v1.BatchLogResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientBatchLogFunc) nextHook() func(context.Context, *v1.BatchLogRequest, ...grpc.CallOption) (*v1.BatchLogResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientBatchLogFunc) appendCall(r0 GitserverServiceClientBatchLogFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverServiceClientBatchLogFuncCall
// objects describing the invocations of this function.
func (f *GitserverServiceClientBatchLogFunc) History() []GitserverServiceClientBatchLogFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientBatchLogFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientBatchLogFuncCall is an object that describes an
// invocation of method BatchLog on an instance of
// MockGitserverServiceClient.
type GitserverServiceClientBatchLogFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.BatchLogRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.BatchLogResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientBatchLogFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientBatchLogFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientCheckPerforceCredentialsFunc describes the behavior
// when the CheckPerforceCredentials method of the parent
// MockGitserverServiceClient instance is invoked.
type GitserverServiceClientCheckPerforceCredentialsFunc struct {
	defaultHook func(context.Context, *v1.CheckPerforceCredentialsRequest, ...grpc.CallOption) (*v1.CheckPerforceCredentialsResponse, error)
	hooks       []func(context.Context, *v1.CheckPerforceCredentialsRequest, ...grpc.CallOption) (*v1.CheckPerforceCredentialsResponse, error)
	history     []GitserverServiceClientCheckPerforceCredentialsFuncCall
	mutex       sync.Mutex
}

// CheckPerforceCredentials delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockGitserverServiceClient) CheckPerforceCredentials(v0 context.Context, v1 *v1.CheckPerforceCredentialsRequest, v2 ...grpc.CallOption) (*v1.CheckPerforceCredentialsResponse, error) {
	r0, r1 := m.CheckPerforceCredentialsFunc.nextHook()(v0, v1, v2...)
	m.CheckPerforceCredentialsFunc.appendCall(GitserverServiceClientCheckPerforceCredentialsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CheckPerforceCredentials method of the parent MockGitserverServiceClient
// instance is invoked and the hook queue is empty.
func (f *GitserverServiceClientCheckPerforceCredentialsFunc) SetDefaultHook(hook func(context.Context, *v1.CheckPerforceCredentialsRequest, ...grpc.CallOption) (*v1.CheckPerforceCredentialsResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CheckPerforceCredentials method of the parent MockGitserverServiceClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverServiceClientCheckPerforceCredentialsFunc) PushHook(hook func(context.Context, *v1.CheckPerforceCredentialsRequest, ...grpc.CallOption) (*v1.CheckPerforceCredentialsResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientCheckPerforceCredentialsFunc) SetDefaultReturn(r0 *v1.CheckPerforceCredentialsResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.CheckPerforceCredentialsRequest, ...grpc.CallOption) (*v1.CheckPerforceCredentialsResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientCheckPerforceCredentialsFunc) PushReturn(r0 *v1.CheckPerforceCredentialsResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.CheckPerforceCredentialsRequest, ...grpc.CallOption) (*v1.CheckPerforceCredentialsResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientCheckPerforceCredentialsFunc) nextHook() func(context.Context, *v1.CheckPerforceCredentialsRequest, ...grpc.CallOption) (*v1.CheckPerforceCredentialsResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientCheckPerforceCredentialsFunc) appendCall(r0 GitserverServiceClientCheckPerforceCredentialsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverServiceClientCheckPerforceCredentialsFuncCall objects describing
// the invocations of this function.
func (f *GitserverServiceClientCheckPerforceCredentialsFunc) History() []GitserverServiceClientCheckPerforceCredentialsFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientCheckPerforceCredentialsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientCheckPerforceCredentialsFuncCall is an object that
// describes an invocation of method CheckPerforceCredentials on an instance
// of MockGitserverServiceClient.
type GitserverServiceClientCheckPerforceCredentialsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.CheckPerforceCredentialsRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.CheckPerforceCredentialsResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientCheckPerforceCredentialsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientCheckPerforceCredentialsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientCreateCommitFromPatchBinaryFunc describes the
// behavior when the CreateCommitFromPatchBinary method of the parent
// MockGitserverServiceClient instance is invoked.
type GitserverServiceClientCreateCommitFromPatchBinaryFunc struct {
	defaultHook func(context.Context, ...grpc.CallOption) (v1.GitserverService_CreateCommitFromPatchBinaryClient, error)
	hooks       []func(context.Context, ...grpc.CallOption) (v1.GitserverService_CreateCommitFromPatchBinaryClient, error)
	history     []GitserverServiceClientCreateCommitFromPatchBinaryFuncCall
	mutex       sync.Mutex
}

// CreateCommitFromPatchBinary delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockGitserverServiceClient) CreateCommitFromPatchBinary(v0 context.Context, v1 ...grpc.CallOption) (v1.GitserverService_CreateCommitFromPatchBinaryClient, error) {
	r0, r1 := m.CreateCommitFromPatchBinaryFunc.nextHook()(v0, v1...)
	m.CreateCommitFromPatchBinaryFunc.appendCall(GitserverServiceClientCreateCommitFromPatchBinaryFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CreateCommitFromPatchBinary method of the parent
// MockGitserverServiceClient instance is invoked and the hook queue is
// empty.
func (f *GitserverServiceClientCreateCommitFromPatchBinaryFunc) SetDefaultHook(hook func(context.Context, ...grpc.CallOption) (v1.GitserverService_CreateCommitFromPatchBinaryClient, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateCommitFromPatchBinary method of the parent
// MockGitserverServiceClient instance invokes the hook at the front of the
// queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *GitserverServiceClientCreateCommitFromPatchBinaryFunc) PushHook(hook func(context.Context, ...grpc.CallOption) (v1.GitserverService_CreateCommitFromPatchBinaryClient, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientCreateCommitFromPatchBinaryFunc) SetDefaultReturn(r0 v1.GitserverService_CreateCommitFromPatchBinaryClient, r1 error) {
	f.SetDefaultHook(func(context.Context, ...grpc.CallOption) (v1.GitserverService_CreateCommitFromPatchBinaryClient, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientCreateCommitFromPatchBinaryFunc) PushReturn(r0 v1.GitserverService_CreateCommitFromPatchBinaryClient, r1 error) {
	f.PushHook(func(context.Context, ...grpc.CallOption) (v1.GitserverService_CreateCommitFromPatchBinaryClient, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientCreateCommitFromPatchBinaryFunc) nextHook() func(context.Context, ...grpc.CallOption) (v1.GitserverService_CreateCommitFromPatchBinaryClient, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientCreateCommitFromPatchBinaryFunc) appendCall(r0 GitserverServiceClientCreateCommitFromPatchBinaryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverServiceClientCreateCommitFromPatchBinaryFuncCall objects
// describing the invocations of this function.
func (f *GitserverServiceClientCreateCommitFromPatchBinaryFunc) History() []GitserverServiceClientCreateCommitFromPatchBinaryFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientCreateCommitFromPatchBinaryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientCreateCommitFromPatchBinaryFuncCall is an object
// that describes an invocation of method CreateCommitFromPatchBinary on an
// instance of MockGitserverServiceClient.
type GitserverServiceClientCreateCommitFromPatchBinaryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 v1.GitserverService_CreateCommitFromPatchBinaryClient
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientCreateCommitFromPatchBinaryFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientCreateCommitFromPatchBinaryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientDiskInfoFunc describes the behavior when the
// DiskInfo method of the parent MockGitserverServiceClient instance is
// invoked.
type GitserverServiceClientDiskInfoFunc struct {
	defaultHook func(context.Context, *v1.DiskInfoRequest, ...grpc.CallOption) (*v1.DiskInfoResponse, error)
	hooks       []func(context.Context, *v1.DiskInfoRequest, ...grpc.CallOption) (*v1.DiskInfoResponse, error)
	history     []GitserverServiceClientDiskInfoFuncCall
	mutex       sync.Mutex
}

// DiskInfo delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverServiceClient) DiskInfo(v0 context.Context, v1 *v1.DiskInfoRequest, v2 ...grpc.CallOption) (*v1.DiskInfoResponse, error) {
	r0, r1 := m.DiskInfoFunc.nextHook()(v0, v1, v2...)
	m.DiskInfoFunc.appendCall(GitserverServiceClientDiskInfoFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DiskInfo method of
// the parent MockGitserverServiceClient instance is invoked and the hook
// queue is empty.
func (f *GitserverServiceClientDiskInfoFunc) SetDefaultHook(hook func(context.Context, *v1.DiskInfoRequest, ...grpc.CallOption) (*v1.DiskInfoResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DiskInfo method of the parent MockGitserverServiceClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverServiceClientDiskInfoFunc) PushHook(hook func(context.Context, *v1.DiskInfoRequest, ...grpc.CallOption) (*v1.DiskInfoResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientDiskInfoFunc) SetDefaultReturn(r0 *v1.DiskInfoResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.DiskInfoRequest, ...grpc.CallOption) (*v1.DiskInfoResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientDiskInfoFunc) PushReturn(r0 *v1.DiskInfoResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.DiskInfoRequest, ...grpc.CallOption) (*v1.DiskInfoResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientDiskInfoFunc) nextHook() func(context.Context, *v1.DiskInfoRequest, ...grpc.CallOption) (*v1.DiskInfoResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientDiskInfoFunc) appendCall(r0 GitserverServiceClientDiskInfoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverServiceClientDiskInfoFuncCall
// objects describing the invocations of this function.
func (f *GitserverServiceClientDiskInfoFunc) History() []GitserverServiceClientDiskInfoFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientDiskInfoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientDiskInfoFuncCall is an object that describes an
// invocation of method DiskInfo on an instance of
// MockGitserverServiceClient.
type GitserverServiceClientDiskInfoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.DiskInfoRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.DiskInfoResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientDiskInfoFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientDiskInfoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientExecFunc describes the behavior when the Exec
// method of the parent MockGitserverServiceClient instance is invoked.
type GitserverServiceClientExecFunc struct {
	defaultHook func(context.Context, *v1.ExecRequest, ...grpc.CallOption) (v1.GitserverService_ExecClient, error)
	hooks       []func(context.Context, *v1.ExecRequest, ...grpc.CallOption) (v1.GitserverService_ExecClient, error)
	history     []GitserverServiceClientExecFuncCall
	mutex       sync.Mutex
}

// Exec delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverServiceClient) Exec(v0 context.Context, v1 *v1.ExecRequest, v2 ...grpc.CallOption) (v1.GitserverService_ExecClient, error) {
	r0, r1 := m.ExecFunc.nextHook()(v0, v1, v2...)
	m.ExecFunc.appendCall(GitserverServiceClientExecFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Exec method of the
// parent MockGitserverServiceClient instance is invoked and the hook queue
// is empty.
func (f *GitserverServiceClientExecFunc) SetDefaultHook(hook func(context.Context, *v1.ExecRequest, ...grpc.CallOption) (v1.GitserverService_ExecClient, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Exec method of the parent MockGitserverServiceClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GitserverServiceClientExecFunc) PushHook(hook func(context.Context, *v1.ExecRequest, ...grpc.CallOption) (v1.GitserverService_ExecClient, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientExecFunc) SetDefaultReturn(r0 v1.GitserverService_ExecClient, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.ExecRequest, ...grpc.CallOption) (v1.GitserverService_ExecClient, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientExecFunc) PushReturn(r0 v1.GitserverService_ExecClient, r1 error) {
	f.PushHook(func(context.Context, *v1.ExecRequest, ...grpc.CallOption) (v1.GitserverService_ExecClient, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientExecFunc) nextHook() func(context.Context, *v1.ExecRequest, ...grpc.CallOption) (v1.GitserverService_ExecClient, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientExecFunc) appendCall(r0 GitserverServiceClientExecFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverServiceClientExecFuncCall objects
// describing the invocations of this function.
func (f *GitserverServiceClientExecFunc) History() []GitserverServiceClientExecFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientExecFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientExecFuncCall is an object that describes an
// invocation of method Exec on an instance of MockGitserverServiceClient.
type GitserverServiceClientExecFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.ExecRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 v1.GitserverService_ExecClient
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientExecFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientExecFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientGetObjectFunc describes the behavior when the
// GetObject method of the parent MockGitserverServiceClient instance is
// invoked.
type GitserverServiceClientGetObjectFunc struct {
	defaultHook func(context.Context, *v1.GetObjectRequest, ...grpc.CallOption) (*v1.GetObjectResponse, error)
	hooks       []func(context.Context, *v1.GetObjectRequest, ...grpc.CallOption) (*v1.GetObjectResponse, error)
	history     []GitserverServiceClientGetObjectFuncCall
	mutex       sync.Mutex
}

// GetObject delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverServiceClient) GetObject(v0 context.Context, v1 *v1.GetObjectRequest, v2 ...grpc.CallOption) (*v1.GetObjectResponse, error) {
	r0, r1 := m.GetObjectFunc.nextHook()(v0, v1, v2...)
	m.GetObjectFunc.appendCall(GitserverServiceClientGetObjectFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetObject method of
// the parent MockGitserverServiceClient instance is invoked and the hook
// queue is empty.
func (f *GitserverServiceClientGetObjectFunc) SetDefaultHook(hook func(context.Context, *v1.GetObjectRequest, ...grpc.CallOption) (*v1.GetObjectResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetObject method of the parent MockGitserverServiceClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverServiceClientGetObjectFunc) PushHook(hook func(context.Context, *v1.GetObjectRequest, ...grpc.CallOption) (*v1.GetObjectResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientGetObjectFunc) SetDefaultReturn(r0 *v1.GetObjectResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.GetObjectRequest, ...grpc.CallOption) (*v1.GetObjectResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientGetObjectFunc) PushReturn(r0 *v1.GetObjectResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.GetObjectRequest, ...grpc.CallOption) (*v1.GetObjectResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientGetObjectFunc) nextHook() func(context.Context, *v1.GetObjectRequest, ...grpc.CallOption) (*v1.GetObjectResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientGetObjectFunc) appendCall(r0 GitserverServiceClientGetObjectFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverServiceClientGetObjectFuncCall
// objects describing the invocations of this function.
func (f *GitserverServiceClientGetObjectFunc) History() []GitserverServiceClientGetObjectFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientGetObjectFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientGetObjectFuncCall is an object that describes an
// invocation of method GetObject on an instance of
// MockGitserverServiceClient.
type GitserverServiceClientGetObjectFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.GetObjectRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.GetObjectResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientGetObjectFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientGetObjectFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientIsPerforcePathCloneableFunc describes the behavior
// when the IsPerforcePathCloneable method of the parent
// MockGitserverServiceClient instance is invoked.
type GitserverServiceClientIsPerforcePathCloneableFunc struct {
	defaultHook func(context.Context, *v1.IsPerforcePathCloneableRequest, ...grpc.CallOption) (*v1.IsPerforcePathCloneableResponse, error)
	hooks       []func(context.Context, *v1.IsPerforcePathCloneableRequest, ...grpc.CallOption) (*v1.IsPerforcePathCloneableResponse, error)
	history     []GitserverServiceClientIsPerforcePathCloneableFuncCall
	mutex       sync.Mutex
}

// IsPerforcePathCloneable delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockGitserverServiceClient) IsPerforcePathCloneable(v0 context.Context, v1 *v1.IsPerforcePathCloneableRequest, v2 ...grpc.CallOption) (*v1.IsPerforcePathCloneableResponse, error) {
	r0, r1 := m.IsPerforcePathCloneableFunc.nextHook()(v0, v1, v2...)
	m.IsPerforcePathCloneableFunc.appendCall(GitserverServiceClientIsPerforcePathCloneableFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// IsPerforcePathCloneable method of the parent MockGitserverServiceClient
// instance is invoked and the hook queue is empty.
func (f *GitserverServiceClientIsPerforcePathCloneableFunc) SetDefaultHook(hook func(context.Context, *v1.IsPerforcePathCloneableRequest, ...grpc.CallOption) (*v1.IsPerforcePathCloneableResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsPerforcePathCloneable method of the parent MockGitserverServiceClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverServiceClientIsPerforcePathCloneableFunc) PushHook(hook func(context.Context, *v1.IsPerforcePathCloneableRequest, ...grpc.CallOption) (*v1.IsPerforcePathCloneableResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientIsPerforcePathCloneableFunc) SetDefaultReturn(r0 *v1.IsPerforcePathCloneableResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.IsPerforcePathCloneableRequest, ...grpc.CallOption) (*v1.IsPerforcePathCloneableResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientIsPerforcePathCloneableFunc) PushReturn(r0 *v1.IsPerforcePathCloneableResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.IsPerforcePathCloneableRequest, ...grpc.CallOption) (*v1.IsPerforcePathCloneableResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientIsPerforcePathCloneableFunc) nextHook() func(context.Context, *v1.IsPerforcePathCloneableRequest, ...grpc.CallOption) (*v1.IsPerforcePathCloneableResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientIsPerforcePathCloneableFunc) appendCall(r0 GitserverServiceClientIsPerforcePathCloneableFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverServiceClientIsPerforcePathCloneableFuncCall objects describing
// the invocations of this function.
func (f *GitserverServiceClientIsPerforcePathCloneableFunc) History() []GitserverServiceClientIsPerforcePathCloneableFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientIsPerforcePathCloneableFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientIsPerforcePathCloneableFuncCall is an object that
// describes an invocation of method IsPerforcePathCloneable on an instance
// of MockGitserverServiceClient.
type GitserverServiceClientIsPerforcePathCloneableFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.IsPerforcePathCloneableRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.IsPerforcePathCloneableResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientIsPerforcePathCloneableFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientIsPerforcePathCloneableFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientIsPerforceSuperUserFunc describes the behavior when
// the IsPerforceSuperUser method of the parent MockGitserverServiceClient
// instance is invoked.
type GitserverServiceClientIsPerforceSuperUserFunc struct {
	defaultHook func(context.Context, *v1.IsPerforceSuperUserRequest, ...grpc.CallOption) (*v1.IsPerforceSuperUserResponse, error)
	hooks       []func(context.Context, *v1.IsPerforceSuperUserRequest, ...grpc.CallOption) (*v1.IsPerforceSuperUserResponse, error)
	history     []GitserverServiceClientIsPerforceSuperUserFuncCall
	mutex       sync.Mutex
}

// IsPerforceSuperUser delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverServiceClient) IsPerforceSuperUser(v0 context.Context, v1 *v1.IsPerforceSuperUserRequest, v2 ...grpc.CallOption) (*v1.IsPerforceSuperUserResponse, error) {
	r0, r1 := m.IsPerforceSuperUserFunc.nextHook()(v0, v1, v2...)
	m.IsPerforceSuperUserFunc.appendCall(GitserverServiceClientIsPerforceSuperUserFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IsPerforceSuperUser
// method of the parent MockGitserverServiceClient instance is invoked and
// the hook queue is empty.
func (f *GitserverServiceClientIsPerforceSuperUserFunc) SetDefaultHook(hook func(context.Context, *v1.IsPerforceSuperUserRequest, ...grpc.CallOption) (*v1.IsPerforceSuperUserResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsPerforceSuperUser method of the parent MockGitserverServiceClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverServiceClientIsPerforceSuperUserFunc) PushHook(hook func(context.Context, *v1.IsPerforceSuperUserRequest, ...grpc.CallOption) (*v1.IsPerforceSuperUserResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientIsPerforceSuperUserFunc) SetDefaultReturn(r0 *v1.IsPerforceSuperUserResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.IsPerforceSuperUserRequest, ...grpc.CallOption) (*v1.IsPerforceSuperUserResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientIsPerforceSuperUserFunc) PushReturn(r0 *v1.IsPerforceSuperUserResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.IsPerforceSuperUserRequest, ...grpc.CallOption) (*v1.IsPerforceSuperUserResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientIsPerforceSuperUserFunc) nextHook() func(context.Context, *v1.IsPerforceSuperUserRequest, ...grpc.CallOption) (*v1.IsPerforceSuperUserResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientIsPerforceSuperUserFunc) appendCall(r0 GitserverServiceClientIsPerforceSuperUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverServiceClientIsPerforceSuperUserFuncCall objects describing the
// invocations of this function.
func (f *GitserverServiceClientIsPerforceSuperUserFunc) History() []GitserverServiceClientIsPerforceSuperUserFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientIsPerforceSuperUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientIsPerforceSuperUserFuncCall is an object that
// describes an invocation of method IsPerforceSuperUser on an instance of
// MockGitserverServiceClient.
type GitserverServiceClientIsPerforceSuperUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.IsPerforceSuperUserRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.IsPerforceSuperUserResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientIsPerforceSuperUserFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientIsPerforceSuperUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientIsRepoCloneableFunc describes the behavior when the
// IsRepoCloneable method of the parent MockGitserverServiceClient instance
// is invoked.
type GitserverServiceClientIsRepoCloneableFunc struct {
	defaultHook func(context.Context, *v1.IsRepoCloneableRequest, ...grpc.CallOption) (*v1.IsRepoCloneableResponse, error)
	hooks       []func(context.Context, *v1.IsRepoCloneableRequest, ...grpc.CallOption) (*v1.IsRepoCloneableResponse, error)
	history     []GitserverServiceClientIsRepoCloneableFuncCall
	mutex       sync.Mutex
}

// IsRepoCloneable delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverServiceClient) IsRepoCloneable(v0 context.Context, v1 *v1.IsRepoCloneableRequest, v2 ...grpc.CallOption) (*v1.IsRepoCloneableResponse, error) {
	r0, r1 := m.IsRepoCloneableFunc.nextHook()(v0, v1, v2...)
	m.IsRepoCloneableFunc.appendCall(GitserverServiceClientIsRepoCloneableFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IsRepoCloneable
// method of the parent MockGitserverServiceClient instance is invoked and
// the hook queue is empty.
func (f *GitserverServiceClientIsRepoCloneableFunc) SetDefaultHook(hook func(context.Context, *v1.IsRepoCloneableRequest, ...grpc.CallOption) (*v1.IsRepoCloneableResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsRepoCloneable method of the parent MockGitserverServiceClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverServiceClientIsRepoCloneableFunc) PushHook(hook func(context.Context, *v1.IsRepoCloneableRequest, ...grpc.CallOption) (*v1.IsRepoCloneableResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientIsRepoCloneableFunc) SetDefaultReturn(r0 *v1.IsRepoCloneableResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.IsRepoCloneableRequest, ...grpc.CallOption) (*v1.IsRepoCloneableResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientIsRepoCloneableFunc) PushReturn(r0 *v1.IsRepoCloneableResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.IsRepoCloneableRequest, ...grpc.CallOption) (*v1.IsRepoCloneableResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientIsRepoCloneableFunc) nextHook() func(context.Context, *v1.IsRepoCloneableRequest, ...grpc.CallOption) (*v1.IsRepoCloneableResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientIsRepoCloneableFunc) appendCall(r0 GitserverServiceClientIsRepoCloneableFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverServiceClientIsRepoCloneableFuncCall objects describing the
// invocations of this function.
func (f *GitserverServiceClientIsRepoCloneableFunc) History() []GitserverServiceClientIsRepoCloneableFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientIsRepoCloneableFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientIsRepoCloneableFuncCall is an object that describes
// an invocation of method IsRepoCloneable on an instance of
// MockGitserverServiceClient.
type GitserverServiceClientIsRepoCloneableFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.IsRepoCloneableRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.IsRepoCloneableResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientIsRepoCloneableFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientIsRepoCloneableFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientListGitoliteFunc describes the behavior when the
// ListGitolite method of the parent MockGitserverServiceClient instance is
// invoked.
type GitserverServiceClientListGitoliteFunc struct {
	defaultHook func(context.Context, *v1.ListGitoliteRequest, ...grpc.CallOption) (*v1.ListGitoliteResponse, error)
	hooks       []func(context.Context, *v1.ListGitoliteRequest, ...grpc.CallOption) (*v1.ListGitoliteResponse, error)
	history     []GitserverServiceClientListGitoliteFuncCall
	mutex       sync.Mutex
}

// ListGitolite delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverServiceClient) ListGitolite(v0 context.Context, v1 *v1.ListGitoliteRequest, v2 ...grpc.CallOption) (*v1.ListGitoliteResponse, error) {
	r0, r1 := m.ListGitoliteFunc.nextHook()(v0, v1, v2...)
	m.ListGitoliteFunc.appendCall(GitserverServiceClientListGitoliteFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListGitolite method
// of the parent MockGitserverServiceClient instance is invoked and the hook
// queue is empty.
func (f *GitserverServiceClientListGitoliteFunc) SetDefaultHook(hook func(context.Context, *v1.ListGitoliteRequest, ...grpc.CallOption) (*v1.ListGitoliteResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListGitolite method of the parent MockGitserverServiceClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverServiceClientListGitoliteFunc) PushHook(hook func(context.Context, *v1.ListGitoliteRequest, ...grpc.CallOption) (*v1.ListGitoliteResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientListGitoliteFunc) SetDefaultReturn(r0 *v1.ListGitoliteResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.ListGitoliteRequest, ...grpc.CallOption) (*v1.ListGitoliteResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientListGitoliteFunc) PushReturn(r0 *v1.ListGitoliteResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.ListGitoliteRequest, ...grpc.CallOption) (*v1.ListGitoliteResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientListGitoliteFunc) nextHook() func(context.Context, *v1.ListGitoliteRequest, ...grpc.CallOption) (*v1.ListGitoliteResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientListGitoliteFunc) appendCall(r0 GitserverServiceClientListGitoliteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverServiceClientListGitoliteFuncCall
// objects describing the invocations of this function.
func (f *GitserverServiceClientListGitoliteFunc) History() []GitserverServiceClientListGitoliteFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientListGitoliteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientListGitoliteFuncCall is an object that describes an
// invocation of method ListGitolite on an instance of
// MockGitserverServiceClient.
type GitserverServiceClientListGitoliteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.ListGitoliteRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.ListGitoliteResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientListGitoliteFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientListGitoliteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientP4ExecFunc describes the behavior when the P4Exec
// method of the parent MockGitserverServiceClient instance is invoked.
type GitserverServiceClientP4ExecFunc struct {
	defaultHook func(context.Context, *v1.P4ExecRequest, ...grpc.CallOption) (v1.GitserverService_P4ExecClient, error)
	hooks       []func(context.Context, *v1.P4ExecRequest, ...grpc.CallOption) (v1.GitserverService_P4ExecClient, error)
	history     []GitserverServiceClientP4ExecFuncCall
	mutex       sync.Mutex
}

// P4Exec delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverServiceClient) P4Exec(v0 context.Context, v1 *v1.P4ExecRequest, v2 ...grpc.CallOption) (v1.GitserverService_P4ExecClient, error) {
	r0, r1 := m.P4ExecFunc.nextHook()(v0, v1, v2...)
	m.P4ExecFunc.appendCall(GitserverServiceClientP4ExecFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the P4Exec method of the
// parent MockGitserverServiceClient instance is invoked and the hook queue
// is empty.
func (f *GitserverServiceClientP4ExecFunc) SetDefaultHook(hook func(context.Context, *v1.P4ExecRequest, ...grpc.CallOption) (v1.GitserverService_P4ExecClient, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// P4Exec method of the parent MockGitserverServiceClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverServiceClientP4ExecFunc) PushHook(hook func(context.Context, *v1.P4ExecRequest, ...grpc.CallOption) (v1.GitserverService_P4ExecClient, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientP4ExecFunc) SetDefaultReturn(r0 v1.GitserverService_P4ExecClient, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.P4ExecRequest, ...grpc.CallOption) (v1.GitserverService_P4ExecClient, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientP4ExecFunc) PushReturn(r0 v1.GitserverService_P4ExecClient, r1 error) {
	f.PushHook(func(context.Context, *v1.P4ExecRequest, ...grpc.CallOption) (v1.GitserverService_P4ExecClient, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientP4ExecFunc) nextHook() func(context.Context, *v1.P4ExecRequest, ...grpc.CallOption) (v1.GitserverService_P4ExecClient, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientP4ExecFunc) appendCall(r0 GitserverServiceClientP4ExecFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverServiceClientP4ExecFuncCall
// objects describing the invocations of this function.
func (f *GitserverServiceClientP4ExecFunc) History() []GitserverServiceClientP4ExecFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientP4ExecFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientP4ExecFuncCall is an object that describes an
// invocation of method P4Exec on an instance of MockGitserverServiceClient.
type GitserverServiceClientP4ExecFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.P4ExecRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 v1.GitserverService_P4ExecClient
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientP4ExecFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientP4ExecFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientPerforceGetChangelistFunc describes the behavior
// when the PerforceGetChangelist method of the parent
// MockGitserverServiceClient instance is invoked.
type GitserverServiceClientPerforceGetChangelistFunc struct {
	defaultHook func(context.Context, *v1.PerforceGetChangelistRequest, ...grpc.CallOption) (*v1.PerforceGetChangelistResponse, error)
	hooks       []func(context.Context, *v1.PerforceGetChangelistRequest, ...grpc.CallOption) (*v1.PerforceGetChangelistResponse, error)
	history     []GitserverServiceClientPerforceGetChangelistFuncCall
	mutex       sync.Mutex
}

// PerforceGetChangelist delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockGitserverServiceClient) PerforceGetChangelist(v0 context.Context, v1 *v1.PerforceGetChangelistRequest, v2 ...grpc.CallOption) (*v1.PerforceGetChangelistResponse, error) {
	r0, r1 := m.PerforceGetChangelistFunc.nextHook()(v0, v1, v2...)
	m.PerforceGetChangelistFunc.appendCall(GitserverServiceClientPerforceGetChangelistFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// PerforceGetChangelist method of the parent MockGitserverServiceClient
// instance is invoked and the hook queue is empty.
func (f *GitserverServiceClientPerforceGetChangelistFunc) SetDefaultHook(hook func(context.Context, *v1.PerforceGetChangelistRequest, ...grpc.CallOption) (*v1.PerforceGetChangelistResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PerforceGetChangelist method of the parent MockGitserverServiceClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverServiceClientPerforceGetChangelistFunc) PushHook(hook func(context.Context, *v1.PerforceGetChangelistRequest, ...grpc.CallOption) (*v1.PerforceGetChangelistResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientPerforceGetChangelistFunc) SetDefaultReturn(r0 *v1.PerforceGetChangelistResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.PerforceGetChangelistRequest, ...grpc.CallOption) (*v1.PerforceGetChangelistResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientPerforceGetChangelistFunc) PushReturn(r0 *v1.PerforceGetChangelistResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.PerforceGetChangelistRequest, ...grpc.CallOption) (*v1.PerforceGetChangelistResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientPerforceGetChangelistFunc) nextHook() func(context.Context, *v1.PerforceGetChangelistRequest, ...grpc.CallOption) (*v1.PerforceGetChangelistResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientPerforceGetChangelistFunc) appendCall(r0 GitserverServiceClientPerforceGetChangelistFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverServiceClientPerforceGetChangelistFuncCall objects describing
// the invocations of this function.
func (f *GitserverServiceClientPerforceGetChangelistFunc) History() []GitserverServiceClientPerforceGetChangelistFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientPerforceGetChangelistFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientPerforceGetChangelistFuncCall is an object that
// describes an invocation of method PerforceGetChangelist on an instance of
// MockGitserverServiceClient.
type GitserverServiceClientPerforceGetChangelistFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.PerforceGetChangelistRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.PerforceGetChangelistResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientPerforceGetChangelistFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientPerforceGetChangelistFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientPerforceGroupMembersFunc describes the behavior
// when the PerforceGroupMembers method of the parent
// MockGitserverServiceClient instance is invoked.
type GitserverServiceClientPerforceGroupMembersFunc struct {
	defaultHook func(context.Context, *v1.PerforceGroupMembersRequest, ...grpc.CallOption) (*v1.PerforceGroupMembersResponse, error)
	hooks       []func(context.Context, *v1.PerforceGroupMembersRequest, ...grpc.CallOption) (*v1.PerforceGroupMembersResponse, error)
	history     []GitserverServiceClientPerforceGroupMembersFuncCall
	mutex       sync.Mutex
}

// PerforceGroupMembers delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverServiceClient) PerforceGroupMembers(v0 context.Context, v1 *v1.PerforceGroupMembersRequest, v2 ...grpc.CallOption) (*v1.PerforceGroupMembersResponse, error) {
	r0, r1 := m.PerforceGroupMembersFunc.nextHook()(v0, v1, v2...)
	m.PerforceGroupMembersFunc.appendCall(GitserverServiceClientPerforceGroupMembersFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the PerforceGroupMembers
// method of the parent MockGitserverServiceClient instance is invoked and
// the hook queue is empty.
func (f *GitserverServiceClientPerforceGroupMembersFunc) SetDefaultHook(hook func(context.Context, *v1.PerforceGroupMembersRequest, ...grpc.CallOption) (*v1.PerforceGroupMembersResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PerforceGroupMembers method of the parent MockGitserverServiceClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverServiceClientPerforceGroupMembersFunc) PushHook(hook func(context.Context, *v1.PerforceGroupMembersRequest, ...grpc.CallOption) (*v1.PerforceGroupMembersResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientPerforceGroupMembersFunc) SetDefaultReturn(r0 *v1.PerforceGroupMembersResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.PerforceGroupMembersRequest, ...grpc.CallOption) (*v1.PerforceGroupMembersResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientPerforceGroupMembersFunc) PushReturn(r0 *v1.PerforceGroupMembersResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.PerforceGroupMembersRequest, ...grpc.CallOption) (*v1.PerforceGroupMembersResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientPerforceGroupMembersFunc) nextHook() func(context.Context, *v1.PerforceGroupMembersRequest, ...grpc.CallOption) (*v1.PerforceGroupMembersResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientPerforceGroupMembersFunc) appendCall(r0 GitserverServiceClientPerforceGroupMembersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverServiceClientPerforceGroupMembersFuncCall objects describing the
// invocations of this function.
func (f *GitserverServiceClientPerforceGroupMembersFunc) History() []GitserverServiceClientPerforceGroupMembersFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientPerforceGroupMembersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientPerforceGroupMembersFuncCall is an object that
// describes an invocation of method PerforceGroupMembers on an instance of
// MockGitserverServiceClient.
type GitserverServiceClientPerforceGroupMembersFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.PerforceGroupMembersRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.PerforceGroupMembersResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientPerforceGroupMembersFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientPerforceGroupMembersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientPerforceProtectsForDepotFunc describes the behavior
// when the PerforceProtectsForDepot method of the parent
// MockGitserverServiceClient instance is invoked.
type GitserverServiceClientPerforceProtectsForDepotFunc struct {
	defaultHook func(context.Context, *v1.PerforceProtectsForDepotRequest, ...grpc.CallOption) (*v1.PerforceProtectsForDepotResponse, error)
	hooks       []func(context.Context, *v1.PerforceProtectsForDepotRequest, ...grpc.CallOption) (*v1.PerforceProtectsForDepotResponse, error)
	history     []GitserverServiceClientPerforceProtectsForDepotFuncCall
	mutex       sync.Mutex
}

// PerforceProtectsForDepot delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockGitserverServiceClient) PerforceProtectsForDepot(v0 context.Context, v1 *v1.PerforceProtectsForDepotRequest, v2 ...grpc.CallOption) (*v1.PerforceProtectsForDepotResponse, error) {
	r0, r1 := m.PerforceProtectsForDepotFunc.nextHook()(v0, v1, v2...)
	m.PerforceProtectsForDepotFunc.appendCall(GitserverServiceClientPerforceProtectsForDepotFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// PerforceProtectsForDepot method of the parent MockGitserverServiceClient
// instance is invoked and the hook queue is empty.
func (f *GitserverServiceClientPerforceProtectsForDepotFunc) SetDefaultHook(hook func(context.Context, *v1.PerforceProtectsForDepotRequest, ...grpc.CallOption) (*v1.PerforceProtectsForDepotResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PerforceProtectsForDepot method of the parent MockGitserverServiceClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverServiceClientPerforceProtectsForDepotFunc) PushHook(hook func(context.Context, *v1.PerforceProtectsForDepotRequest, ...grpc.CallOption) (*v1.PerforceProtectsForDepotResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientPerforceProtectsForDepotFunc) SetDefaultReturn(r0 *v1.PerforceProtectsForDepotResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.PerforceProtectsForDepotRequest, ...grpc.CallOption) (*v1.PerforceProtectsForDepotResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientPerforceProtectsForDepotFunc) PushReturn(r0 *v1.PerforceProtectsForDepotResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.PerforceProtectsForDepotRequest, ...grpc.CallOption) (*v1.PerforceProtectsForDepotResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientPerforceProtectsForDepotFunc) nextHook() func(context.Context, *v1.PerforceProtectsForDepotRequest, ...grpc.CallOption) (*v1.PerforceProtectsForDepotResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientPerforceProtectsForDepotFunc) appendCall(r0 GitserverServiceClientPerforceProtectsForDepotFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverServiceClientPerforceProtectsForDepotFuncCall objects describing
// the invocations of this function.
func (f *GitserverServiceClientPerforceProtectsForDepotFunc) History() []GitserverServiceClientPerforceProtectsForDepotFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientPerforceProtectsForDepotFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientPerforceProtectsForDepotFuncCall is an object that
// describes an invocation of method PerforceProtectsForDepot on an instance
// of MockGitserverServiceClient.
type GitserverServiceClientPerforceProtectsForDepotFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.PerforceProtectsForDepotRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.PerforceProtectsForDepotResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientPerforceProtectsForDepotFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientPerforceProtectsForDepotFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientPerforceProtectsForUserFunc describes the behavior
// when the PerforceProtectsForUser method of the parent
// MockGitserverServiceClient instance is invoked.
type GitserverServiceClientPerforceProtectsForUserFunc struct {
	defaultHook func(context.Context, *v1.PerforceProtectsForUserRequest, ...grpc.CallOption) (*v1.PerforceProtectsForUserResponse, error)
	hooks       []func(context.Context, *v1.PerforceProtectsForUserRequest, ...grpc.CallOption) (*v1.PerforceProtectsForUserResponse, error)
	history     []GitserverServiceClientPerforceProtectsForUserFuncCall
	mutex       sync.Mutex
}

// PerforceProtectsForUser delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockGitserverServiceClient) PerforceProtectsForUser(v0 context.Context, v1 *v1.PerforceProtectsForUserRequest, v2 ...grpc.CallOption) (*v1.PerforceProtectsForUserResponse, error) {
	r0, r1 := m.PerforceProtectsForUserFunc.nextHook()(v0, v1, v2...)
	m.PerforceProtectsForUserFunc.appendCall(GitserverServiceClientPerforceProtectsForUserFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// PerforceProtectsForUser method of the parent MockGitserverServiceClient
// instance is invoked and the hook queue is empty.
func (f *GitserverServiceClientPerforceProtectsForUserFunc) SetDefaultHook(hook func(context.Context, *v1.PerforceProtectsForUserRequest, ...grpc.CallOption) (*v1.PerforceProtectsForUserResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PerforceProtectsForUser method of the parent MockGitserverServiceClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverServiceClientPerforceProtectsForUserFunc) PushHook(hook func(context.Context, *v1.PerforceProtectsForUserRequest, ...grpc.CallOption) (*v1.PerforceProtectsForUserResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientPerforceProtectsForUserFunc) SetDefaultReturn(r0 *v1.PerforceProtectsForUserResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.PerforceProtectsForUserRequest, ...grpc.CallOption) (*v1.PerforceProtectsForUserResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientPerforceProtectsForUserFunc) PushReturn(r0 *v1.PerforceProtectsForUserResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.PerforceProtectsForUserRequest, ...grpc.CallOption) (*v1.PerforceProtectsForUserResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientPerforceProtectsForUserFunc) nextHook() func(context.Context, *v1.PerforceProtectsForUserRequest, ...grpc.CallOption) (*v1.PerforceProtectsForUserResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientPerforceProtectsForUserFunc) appendCall(r0 GitserverServiceClientPerforceProtectsForUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverServiceClientPerforceProtectsForUserFuncCall objects describing
// the invocations of this function.
func (f *GitserverServiceClientPerforceProtectsForUserFunc) History() []GitserverServiceClientPerforceProtectsForUserFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientPerforceProtectsForUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientPerforceProtectsForUserFuncCall is an object that
// describes an invocation of method PerforceProtectsForUser on an instance
// of MockGitserverServiceClient.
type GitserverServiceClientPerforceProtectsForUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.PerforceProtectsForUserRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.PerforceProtectsForUserResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientPerforceProtectsForUserFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientPerforceProtectsForUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientPerforceUsersFunc describes the behavior when the
// PerforceUsers method of the parent MockGitserverServiceClient instance is
// invoked.
type GitserverServiceClientPerforceUsersFunc struct {
	defaultHook func(context.Context, *v1.PerforceUsersRequest, ...grpc.CallOption) (*v1.PerforceUsersResponse, error)
	hooks       []func(context.Context, *v1.PerforceUsersRequest, ...grpc.CallOption) (*v1.PerforceUsersResponse, error)
	history     []GitserverServiceClientPerforceUsersFuncCall
	mutex       sync.Mutex
}

// PerforceUsers delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverServiceClient) PerforceUsers(v0 context.Context, v1 *v1.PerforceUsersRequest, v2 ...grpc.CallOption) (*v1.PerforceUsersResponse, error) {
	r0, r1 := m.PerforceUsersFunc.nextHook()(v0, v1, v2...)
	m.PerforceUsersFunc.appendCall(GitserverServiceClientPerforceUsersFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the PerforceUsers method
// of the parent MockGitserverServiceClient instance is invoked and the hook
// queue is empty.
func (f *GitserverServiceClientPerforceUsersFunc) SetDefaultHook(hook func(context.Context, *v1.PerforceUsersRequest, ...grpc.CallOption) (*v1.PerforceUsersResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PerforceUsers method of the parent MockGitserverServiceClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverServiceClientPerforceUsersFunc) PushHook(hook func(context.Context, *v1.PerforceUsersRequest, ...grpc.CallOption) (*v1.PerforceUsersResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientPerforceUsersFunc) SetDefaultReturn(r0 *v1.PerforceUsersResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.PerforceUsersRequest, ...grpc.CallOption) (*v1.PerforceUsersResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientPerforceUsersFunc) PushReturn(r0 *v1.PerforceUsersResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.PerforceUsersRequest, ...grpc.CallOption) (*v1.PerforceUsersResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientPerforceUsersFunc) nextHook() func(context.Context, *v1.PerforceUsersRequest, ...grpc.CallOption) (*v1.PerforceUsersResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientPerforceUsersFunc) appendCall(r0 GitserverServiceClientPerforceUsersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverServiceClientPerforceUsersFuncCall
// objects describing the invocations of this function.
func (f *GitserverServiceClientPerforceUsersFunc) History() []GitserverServiceClientPerforceUsersFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientPerforceUsersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientPerforceUsersFuncCall is an object that describes
// an invocation of method PerforceUsers on an instance of
// MockGitserverServiceClient.
type GitserverServiceClientPerforceUsersFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.PerforceUsersRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.PerforceUsersResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientPerforceUsersFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientPerforceUsersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientRepoCloneFunc describes the behavior when the
// RepoClone method of the parent MockGitserverServiceClient instance is
// invoked.
type GitserverServiceClientRepoCloneFunc struct {
	defaultHook func(context.Context, *v1.RepoCloneRequest, ...grpc.CallOption) (*v1.RepoCloneResponse, error)
	hooks       []func(context.Context, *v1.RepoCloneRequest, ...grpc.CallOption) (*v1.RepoCloneResponse, error)
	history     []GitserverServiceClientRepoCloneFuncCall
	mutex       sync.Mutex
}

// RepoClone delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverServiceClient) RepoClone(v0 context.Context, v1 *v1.RepoCloneRequest, v2 ...grpc.CallOption) (*v1.RepoCloneResponse, error) {
	r0, r1 := m.RepoCloneFunc.nextHook()(v0, v1, v2...)
	m.RepoCloneFunc.appendCall(GitserverServiceClientRepoCloneFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RepoClone method of
// the parent MockGitserverServiceClient instance is invoked and the hook
// queue is empty.
func (f *GitserverServiceClientRepoCloneFunc) SetDefaultHook(hook func(context.Context, *v1.RepoCloneRequest, ...grpc.CallOption) (*v1.RepoCloneResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepoClone method of the parent MockGitserverServiceClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverServiceClientRepoCloneFunc) PushHook(hook func(context.Context, *v1.RepoCloneRequest, ...grpc.CallOption) (*v1.RepoCloneResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientRepoCloneFunc) SetDefaultReturn(r0 *v1.RepoCloneResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.RepoCloneRequest, ...grpc.CallOption) (*v1.RepoCloneResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientRepoCloneFunc) PushReturn(r0 *v1.RepoCloneResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.RepoCloneRequest, ...grpc.CallOption) (*v1.RepoCloneResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientRepoCloneFunc) nextHook() func(context.Context, *v1.RepoCloneRequest, ...grpc.CallOption) (*v1.RepoCloneResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientRepoCloneFunc) appendCall(r0 GitserverServiceClientRepoCloneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverServiceClientRepoCloneFuncCall
// objects describing the invocations of this function.
func (f *GitserverServiceClientRepoCloneFunc) History() []GitserverServiceClientRepoCloneFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientRepoCloneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientRepoCloneFuncCall is an object that describes an
// invocation of method RepoClone on an instance of
// MockGitserverServiceClient.
type GitserverServiceClientRepoCloneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.RepoCloneRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.RepoCloneResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientRepoCloneFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientRepoCloneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientRepoCloneProgressFunc describes the behavior when
// the RepoCloneProgress method of the parent MockGitserverServiceClient
// instance is invoked.
type GitserverServiceClientRepoCloneProgressFunc struct {
	defaultHook func(context.Context, *v1.RepoCloneProgressRequest, ...grpc.CallOption) (*v1.RepoCloneProgressResponse, error)
	hooks       []func(context.Context, *v1.RepoCloneProgressRequest, ...grpc.CallOption) (*v1.RepoCloneProgressResponse, error)
	history     []GitserverServiceClientRepoCloneProgressFuncCall
	mutex       sync.Mutex
}

// RepoCloneProgress delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverServiceClient) RepoCloneProgress(v0 context.Context, v1 *v1.RepoCloneProgressRequest, v2 ...grpc.CallOption) (*v1.RepoCloneProgressResponse, error) {
	r0, r1 := m.RepoCloneProgressFunc.nextHook()(v0, v1, v2...)
	m.RepoCloneProgressFunc.appendCall(GitserverServiceClientRepoCloneProgressFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RepoCloneProgress
// method of the parent MockGitserverServiceClient instance is invoked and
// the hook queue is empty.
func (f *GitserverServiceClientRepoCloneProgressFunc) SetDefaultHook(hook func(context.Context, *v1.RepoCloneProgressRequest, ...grpc.CallOption) (*v1.RepoCloneProgressResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepoCloneProgress method of the parent MockGitserverServiceClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverServiceClientRepoCloneProgressFunc) PushHook(hook func(context.Context, *v1.RepoCloneProgressRequest, ...grpc.CallOption) (*v1.RepoCloneProgressResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientRepoCloneProgressFunc) SetDefaultReturn(r0 *v1.RepoCloneProgressResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.RepoCloneProgressRequest, ...grpc.CallOption) (*v1.RepoCloneProgressResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientRepoCloneProgressFunc) PushReturn(r0 *v1.RepoCloneProgressResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.RepoCloneProgressRequest, ...grpc.CallOption) (*v1.RepoCloneProgressResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientRepoCloneProgressFunc) nextHook() func(context.Context, *v1.RepoCloneProgressRequest, ...grpc.CallOption) (*v1.RepoCloneProgressResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientRepoCloneProgressFunc) appendCall(r0 GitserverServiceClientRepoCloneProgressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverServiceClientRepoCloneProgressFuncCall objects describing the
// invocations of this function.
func (f *GitserverServiceClientRepoCloneProgressFunc) History() []GitserverServiceClientRepoCloneProgressFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientRepoCloneProgressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientRepoCloneProgressFuncCall is an object that
// describes an invocation of method RepoCloneProgress on an instance of
// MockGitserverServiceClient.
type GitserverServiceClientRepoCloneProgressFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.RepoCloneProgressRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.RepoCloneProgressResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientRepoCloneProgressFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientRepoCloneProgressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientRepoDeleteFunc describes the behavior when the
// RepoDelete method of the parent MockGitserverServiceClient instance is
// invoked.
type GitserverServiceClientRepoDeleteFunc struct {
	defaultHook func(context.Context, *v1.RepoDeleteRequest, ...grpc.CallOption) (*v1.RepoDeleteResponse, error)
	hooks       []func(context.Context, *v1.RepoDeleteRequest, ...grpc.CallOption) (*v1.RepoDeleteResponse, error)
	history     []GitserverServiceClientRepoDeleteFuncCall
	mutex       sync.Mutex
}

// RepoDelete delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverServiceClient) RepoDelete(v0 context.Context, v1 *v1.RepoDeleteRequest, v2 ...grpc.CallOption) (*v1.RepoDeleteResponse, error) {
	r0, r1 := m.RepoDeleteFunc.nextHook()(v0, v1, v2...)
	m.RepoDeleteFunc.appendCall(GitserverServiceClientRepoDeleteFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RepoDelete method of
// the parent MockGitserverServiceClient instance is invoked and the hook
// queue is empty.
func (f *GitserverServiceClientRepoDeleteFunc) SetDefaultHook(hook func(context.Context, *v1.RepoDeleteRequest, ...grpc.CallOption) (*v1.RepoDeleteResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepoDelete method of the parent MockGitserverServiceClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverServiceClientRepoDeleteFunc) PushHook(hook func(context.Context, *v1.RepoDeleteRequest, ...grpc.CallOption) (*v1.RepoDeleteResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientRepoDeleteFunc) SetDefaultReturn(r0 *v1.RepoDeleteResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.RepoDeleteRequest, ...grpc.CallOption) (*v1.RepoDeleteResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientRepoDeleteFunc) PushReturn(r0 *v1.RepoDeleteResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.RepoDeleteRequest, ...grpc.CallOption) (*v1.RepoDeleteResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientRepoDeleteFunc) nextHook() func(context.Context, *v1.RepoDeleteRequest, ...grpc.CallOption) (*v1.RepoDeleteResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientRepoDeleteFunc) appendCall(r0 GitserverServiceClientRepoDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverServiceClientRepoDeleteFuncCall
// objects describing the invocations of this function.
func (f *GitserverServiceClientRepoDeleteFunc) History() []GitserverServiceClientRepoDeleteFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientRepoDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientRepoDeleteFuncCall is an object that describes an
// invocation of method RepoDelete on an instance of
// MockGitserverServiceClient.
type GitserverServiceClientRepoDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.RepoDeleteRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.RepoDeleteResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientRepoDeleteFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientRepoDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientRepoUpdateFunc describes the behavior when the
// RepoUpdate method of the parent MockGitserverServiceClient instance is
// invoked.
type GitserverServiceClientRepoUpdateFunc struct {
	defaultHook func(context.Context, *v1.RepoUpdateRequest, ...grpc.CallOption) (*v1.RepoUpdateResponse, error)
	hooks       []func(context.Context, *v1.RepoUpdateRequest, ...grpc.CallOption) (*v1.RepoUpdateResponse, error)
	history     []GitserverServiceClientRepoUpdateFuncCall
	mutex       sync.Mutex
}

// RepoUpdate delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverServiceClient) RepoUpdate(v0 context.Context, v1 *v1.RepoUpdateRequest, v2 ...grpc.CallOption) (*v1.RepoUpdateResponse, error) {
	r0, r1 := m.RepoUpdateFunc.nextHook()(v0, v1, v2...)
	m.RepoUpdateFunc.appendCall(GitserverServiceClientRepoUpdateFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RepoUpdate method of
// the parent MockGitserverServiceClient instance is invoked and the hook
// queue is empty.
func (f *GitserverServiceClientRepoUpdateFunc) SetDefaultHook(hook func(context.Context, *v1.RepoUpdateRequest, ...grpc.CallOption) (*v1.RepoUpdateResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepoUpdate method of the parent MockGitserverServiceClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverServiceClientRepoUpdateFunc) PushHook(hook func(context.Context, *v1.RepoUpdateRequest, ...grpc.CallOption) (*v1.RepoUpdateResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientRepoUpdateFunc) SetDefaultReturn(r0 *v1.RepoUpdateResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.RepoUpdateRequest, ...grpc.CallOption) (*v1.RepoUpdateResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientRepoUpdateFunc) PushReturn(r0 *v1.RepoUpdateResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.RepoUpdateRequest, ...grpc.CallOption) (*v1.RepoUpdateResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientRepoUpdateFunc) nextHook() func(context.Context, *v1.RepoUpdateRequest, ...grpc.CallOption) (*v1.RepoUpdateResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientRepoUpdateFunc) appendCall(r0 GitserverServiceClientRepoUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverServiceClientRepoUpdateFuncCall
// objects describing the invocations of this function.
func (f *GitserverServiceClientRepoUpdateFunc) History() []GitserverServiceClientRepoUpdateFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientRepoUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientRepoUpdateFuncCall is an object that describes an
// invocation of method RepoUpdate on an instance of
// MockGitserverServiceClient.
type GitserverServiceClientRepoUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.RepoUpdateRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.RepoUpdateResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientRepoUpdateFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientRepoUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientSearchFunc describes the behavior when the Search
// method of the parent MockGitserverServiceClient instance is invoked.
type GitserverServiceClientSearchFunc struct {
	defaultHook func(context.Context, *v1.SearchRequest, ...grpc.CallOption) (v1.GitserverService_SearchClient, error)
	hooks       []func(context.Context, *v1.SearchRequest, ...grpc.CallOption) (v1.GitserverService_SearchClient, error)
	history     []GitserverServiceClientSearchFuncCall
	mutex       sync.Mutex
}

// Search delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverServiceClient) Search(v0 context.Context, v1 *v1.SearchRequest, v2 ...grpc.CallOption) (v1.GitserverService_SearchClient, error) {
	r0, r1 := m.SearchFunc.nextHook()(v0, v1, v2...)
	m.SearchFunc.appendCall(GitserverServiceClientSearchFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Search method of the
// parent MockGitserverServiceClient instance is invoked and the hook queue
// is empty.
func (f *GitserverServiceClientSearchFunc) SetDefaultHook(hook func(context.Context, *v1.SearchRequest, ...grpc.CallOption) (v1.GitserverService_SearchClient, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Search method of the parent MockGitserverServiceClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverServiceClientSearchFunc) PushHook(hook func(context.Context, *v1.SearchRequest, ...grpc.CallOption) (v1.GitserverService_SearchClient, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientSearchFunc) SetDefaultReturn(r0 v1.GitserverService_SearchClient, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.SearchRequest, ...grpc.CallOption) (v1.GitserverService_SearchClient, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientSearchFunc) PushReturn(r0 v1.GitserverService_SearchClient, r1 error) {
	f.PushHook(func(context.Context, *v1.SearchRequest, ...grpc.CallOption) (v1.GitserverService_SearchClient, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientSearchFunc) nextHook() func(context.Context, *v1.SearchRequest, ...grpc.CallOption) (v1.GitserverService_SearchClient, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientSearchFunc) appendCall(r0 GitserverServiceClientSearchFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverServiceClientSearchFuncCall
// objects describing the invocations of this function.
func (f *GitserverServiceClientSearchFunc) History() []GitserverServiceClientSearchFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientSearchFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientSearchFuncCall is an object that describes an
// invocation of method Search on an instance of MockGitserverServiceClient.
type GitserverServiceClientSearchFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.SearchRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 v1.GitserverService_SearchClient
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientSearchFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientSearchFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
