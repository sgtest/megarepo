// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package gitserver

import (
	"context"
	"sync"

	v1 "github.com/sourcegraph/sourcegraph/internal/gitserver/v1"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockGitserverServiceClient is a mock implementation of the
// GitserverServiceClient interface (from the package
// github.com/sourcegraph/sourcegraph/internal/gitserver/v1) used for unit
// testing.
type MockGitserverServiceClient struct {
	// ArchiveFunc is an instance of a mock function object controlling the
	// behavior of the method Archive.
	ArchiveFunc *GitserverServiceClientArchiveFunc
	// BehindAheadFunc is an instance of a mock function object controlling
	// the behavior of the method BehindAhead.
	BehindAheadFunc *GitserverServiceClientBehindAheadFunc
	// BlameFunc is an instance of a mock function object controlling the
	// behavior of the method Blame.
	BlameFunc *GitserverServiceClientBlameFunc
	// ChangedFilesFunc is an instance of a mock function object controlling
	// the behavior of the method ChangedFiles.
	ChangedFilesFunc *GitserverServiceClientChangedFilesFunc
	// CheckPerforceCredentialsFunc is an instance of a mock function object
	// controlling the behavior of the method CheckPerforceCredentials.
	CheckPerforceCredentialsFunc *GitserverServiceClientCheckPerforceCredentialsFunc
	// ContributorCountsFunc is an instance of a mock function object
	// controlling the behavior of the method ContributorCounts.
	ContributorCountsFunc *GitserverServiceClientContributorCountsFunc
	// CreateCommitFromPatchBinaryFunc is an instance of a mock function
	// object controlling the behavior of the method
	// CreateCommitFromPatchBinary.
	CreateCommitFromPatchBinaryFunc *GitserverServiceClientCreateCommitFromPatchBinaryFunc
	// DefaultBranchFunc is an instance of a mock function object
	// controlling the behavior of the method DefaultBranch.
	DefaultBranchFunc *GitserverServiceClientDefaultBranchFunc
	// DiskInfoFunc is an instance of a mock function object controlling the
	// behavior of the method DiskInfo.
	DiskInfoFunc *GitserverServiceClientDiskInfoFunc
	// ExecFunc is an instance of a mock function object controlling the
	// behavior of the method Exec.
	ExecFunc *GitserverServiceClientExecFunc
	// FirstEverCommitFunc is an instance of a mock function object
	// controlling the behavior of the method FirstEverCommit.
	FirstEverCommitFunc *GitserverServiceClientFirstEverCommitFunc
	// GetCommitFunc is an instance of a mock function object controlling
	// the behavior of the method GetCommit.
	GetCommitFunc *GitserverServiceClientGetCommitFunc
	// GetObjectFunc is an instance of a mock function object controlling
	// the behavior of the method GetObject.
	GetObjectFunc *GitserverServiceClientGetObjectFunc
	// IsPerforcePathCloneableFunc is an instance of a mock function object
	// controlling the behavior of the method IsPerforcePathCloneable.
	IsPerforcePathCloneableFunc *GitserverServiceClientIsPerforcePathCloneableFunc
	// IsPerforceSuperUserFunc is an instance of a mock function object
	// controlling the behavior of the method IsPerforceSuperUser.
	IsPerforceSuperUserFunc *GitserverServiceClientIsPerforceSuperUserFunc
	// IsRepoCloneableFunc is an instance of a mock function object
	// controlling the behavior of the method IsRepoCloneable.
	IsRepoCloneableFunc *GitserverServiceClientIsRepoCloneableFunc
	// ListGitoliteFunc is an instance of a mock function object controlling
	// the behavior of the method ListGitolite.
	ListGitoliteFunc *GitserverServiceClientListGitoliteFunc
	// ListRefsFunc is an instance of a mock function object controlling the
	// behavior of the method ListRefs.
	ListRefsFunc *GitserverServiceClientListRefsFunc
	// MergeBaseFunc is an instance of a mock function object controlling
	// the behavior of the method MergeBase.
	MergeBaseFunc *GitserverServiceClientMergeBaseFunc
	// PerforceGetChangelistFunc is an instance of a mock function object
	// controlling the behavior of the method PerforceGetChangelist.
	PerforceGetChangelistFunc *GitserverServiceClientPerforceGetChangelistFunc
	// PerforceGroupMembersFunc is an instance of a mock function object
	// controlling the behavior of the method PerforceGroupMembers.
	PerforceGroupMembersFunc *GitserverServiceClientPerforceGroupMembersFunc
	// PerforceProtectsForDepotFunc is an instance of a mock function object
	// controlling the behavior of the method PerforceProtectsForDepot.
	PerforceProtectsForDepotFunc *GitserverServiceClientPerforceProtectsForDepotFunc
	// PerforceProtectsForUserFunc is an instance of a mock function object
	// controlling the behavior of the method PerforceProtectsForUser.
	PerforceProtectsForUserFunc *GitserverServiceClientPerforceProtectsForUserFunc
	// PerforceUsersFunc is an instance of a mock function object
	// controlling the behavior of the method PerforceUsers.
	PerforceUsersFunc *GitserverServiceClientPerforceUsersFunc
	// RawDiffFunc is an instance of a mock function object controlling the
	// behavior of the method RawDiff.
	RawDiffFunc *GitserverServiceClientRawDiffFunc
	// ReadFileFunc is an instance of a mock function object controlling the
	// behavior of the method ReadFile.
	ReadFileFunc *GitserverServiceClientReadFileFunc
	// RepoCloneProgressFunc is an instance of a mock function object
	// controlling the behavior of the method RepoCloneProgress.
	RepoCloneProgressFunc *GitserverServiceClientRepoCloneProgressFunc
	// ResolveRevisionFunc is an instance of a mock function object
	// controlling the behavior of the method ResolveRevision.
	ResolveRevisionFunc *GitserverServiceClientResolveRevisionFunc
	// RevAtTimeFunc is an instance of a mock function object controlling
	// the behavior of the method RevAtTime.
	RevAtTimeFunc *GitserverServiceClientRevAtTimeFunc
	// SearchFunc is an instance of a mock function object controlling the
	// behavior of the method Search.
	SearchFunc *GitserverServiceClientSearchFunc
}

// NewMockGitserverServiceClient creates a new mock of the
// GitserverServiceClient interface. All methods return zero values for all
// results, unless overwritten.
func NewMockGitserverServiceClient() *MockGitserverServiceClient {
	return &MockGitserverServiceClient{
		ArchiveFunc: &GitserverServiceClientArchiveFunc{
			defaultHook: func(context.Context, *v1.ArchiveRequest, ...grpc.CallOption) (r0 v1.GitserverService_ArchiveClient, r1 error) {
				return
			},
		},
		BehindAheadFunc: &GitserverServiceClientBehindAheadFunc{
			defaultHook: func(context.Context, *v1.BehindAheadRequest, ...grpc.CallOption) (r0 *v1.BehindAheadResponse, r1 error) {
				return
			},
		},
		BlameFunc: &GitserverServiceClientBlameFunc{
			defaultHook: func(context.Context, *v1.BlameRequest, ...grpc.CallOption) (r0 v1.GitserverService_BlameClient, r1 error) {
				return
			},
		},
		ChangedFilesFunc: &GitserverServiceClientChangedFilesFunc{
			defaultHook: func(context.Context, *v1.ChangedFilesRequest, ...grpc.CallOption) (r0 v1.GitserverService_ChangedFilesClient, r1 error) {
				return
			},
		},
		CheckPerforceCredentialsFunc: &GitserverServiceClientCheckPerforceCredentialsFunc{
			defaultHook: func(context.Context, *v1.CheckPerforceCredentialsRequest, ...grpc.CallOption) (r0 *v1.CheckPerforceCredentialsResponse, r1 error) {
				return
			},
		},
		ContributorCountsFunc: &GitserverServiceClientContributorCountsFunc{
			defaultHook: func(context.Context, *v1.ContributorCountsRequest, ...grpc.CallOption) (r0 *v1.ContributorCountsResponse, r1 error) {
				return
			},
		},
		CreateCommitFromPatchBinaryFunc: &GitserverServiceClientCreateCommitFromPatchBinaryFunc{
			defaultHook: func(context.Context, ...grpc.CallOption) (r0 v1.GitserverService_CreateCommitFromPatchBinaryClient, r1 error) {
				return
			},
		},
		DefaultBranchFunc: &GitserverServiceClientDefaultBranchFunc{
			defaultHook: func(context.Context, *v1.DefaultBranchRequest, ...grpc.CallOption) (r0 *v1.DefaultBranchResponse, r1 error) {
				return
			},
		},
		DiskInfoFunc: &GitserverServiceClientDiskInfoFunc{
			defaultHook: func(context.Context, *v1.DiskInfoRequest, ...grpc.CallOption) (r0 *v1.DiskInfoResponse, r1 error) {
				return
			},
		},
		ExecFunc: &GitserverServiceClientExecFunc{
			defaultHook: func(context.Context, *v1.ExecRequest, ...grpc.CallOption) (r0 v1.GitserverService_ExecClient, r1 error) {
				return
			},
		},
		FirstEverCommitFunc: &GitserverServiceClientFirstEverCommitFunc{
			defaultHook: func(context.Context, *v1.FirstEverCommitRequest, ...grpc.CallOption) (r0 *v1.FirstEverCommitResponse, r1 error) {
				return
			},
		},
		GetCommitFunc: &GitserverServiceClientGetCommitFunc{
			defaultHook: func(context.Context, *v1.GetCommitRequest, ...grpc.CallOption) (r0 *v1.GetCommitResponse, r1 error) {
				return
			},
		},
		GetObjectFunc: &GitserverServiceClientGetObjectFunc{
			defaultHook: func(context.Context, *v1.GetObjectRequest, ...grpc.CallOption) (r0 *v1.GetObjectResponse, r1 error) {
				return
			},
		},
		IsPerforcePathCloneableFunc: &GitserverServiceClientIsPerforcePathCloneableFunc{
			defaultHook: func(context.Context, *v1.IsPerforcePathCloneableRequest, ...grpc.CallOption) (r0 *v1.IsPerforcePathCloneableResponse, r1 error) {
				return
			},
		},
		IsPerforceSuperUserFunc: &GitserverServiceClientIsPerforceSuperUserFunc{
			defaultHook: func(context.Context, *v1.IsPerforceSuperUserRequest, ...grpc.CallOption) (r0 *v1.IsPerforceSuperUserResponse, r1 error) {
				return
			},
		},
		IsRepoCloneableFunc: &GitserverServiceClientIsRepoCloneableFunc{
			defaultHook: func(context.Context, *v1.IsRepoCloneableRequest, ...grpc.CallOption) (r0 *v1.IsRepoCloneableResponse, r1 error) {
				return
			},
		},
		ListGitoliteFunc: &GitserverServiceClientListGitoliteFunc{
			defaultHook: func(context.Context, *v1.ListGitoliteRequest, ...grpc.CallOption) (r0 *v1.ListGitoliteResponse, r1 error) {
				return
			},
		},
		ListRefsFunc: &GitserverServiceClientListRefsFunc{
			defaultHook: func(context.Context, *v1.ListRefsRequest, ...grpc.CallOption) (r0 v1.GitserverService_ListRefsClient, r1 error) {
				return
			},
		},
		MergeBaseFunc: &GitserverServiceClientMergeBaseFunc{
			defaultHook: func(context.Context, *v1.MergeBaseRequest, ...grpc.CallOption) (r0 *v1.MergeBaseResponse, r1 error) {
				return
			},
		},
		PerforceGetChangelistFunc: &GitserverServiceClientPerforceGetChangelistFunc{
			defaultHook: func(context.Context, *v1.PerforceGetChangelistRequest, ...grpc.CallOption) (r0 *v1.PerforceGetChangelistResponse, r1 error) {
				return
			},
		},
		PerforceGroupMembersFunc: &GitserverServiceClientPerforceGroupMembersFunc{
			defaultHook: func(context.Context, *v1.PerforceGroupMembersRequest, ...grpc.CallOption) (r0 *v1.PerforceGroupMembersResponse, r1 error) {
				return
			},
		},
		PerforceProtectsForDepotFunc: &GitserverServiceClientPerforceProtectsForDepotFunc{
			defaultHook: func(context.Context, *v1.PerforceProtectsForDepotRequest, ...grpc.CallOption) (r0 *v1.PerforceProtectsForDepotResponse, r1 error) {
				return
			},
		},
		PerforceProtectsForUserFunc: &GitserverServiceClientPerforceProtectsForUserFunc{
			defaultHook: func(context.Context, *v1.PerforceProtectsForUserRequest, ...grpc.CallOption) (r0 *v1.PerforceProtectsForUserResponse, r1 error) {
				return
			},
		},
		PerforceUsersFunc: &GitserverServiceClientPerforceUsersFunc{
			defaultHook: func(context.Context, *v1.PerforceUsersRequest, ...grpc.CallOption) (r0 *v1.PerforceUsersResponse, r1 error) {
				return
			},
		},
		RawDiffFunc: &GitserverServiceClientRawDiffFunc{
			defaultHook: func(context.Context, *v1.RawDiffRequest, ...grpc.CallOption) (r0 v1.GitserverService_RawDiffClient, r1 error) {
				return
			},
		},
		ReadFileFunc: &GitserverServiceClientReadFileFunc{
			defaultHook: func(context.Context, *v1.ReadFileRequest, ...grpc.CallOption) (r0 v1.GitserverService_ReadFileClient, r1 error) {
				return
			},
		},
		RepoCloneProgressFunc: &GitserverServiceClientRepoCloneProgressFunc{
			defaultHook: func(context.Context, *v1.RepoCloneProgressRequest, ...grpc.CallOption) (r0 *v1.RepoCloneProgressResponse, r1 error) {
				return
			},
		},
		ResolveRevisionFunc: &GitserverServiceClientResolveRevisionFunc{
			defaultHook: func(context.Context, *v1.ResolveRevisionRequest, ...grpc.CallOption) (r0 *v1.ResolveRevisionResponse, r1 error) {
				return
			},
		},
		RevAtTimeFunc: &GitserverServiceClientRevAtTimeFunc{
			defaultHook: func(context.Context, *v1.RevAtTimeRequest, ...grpc.CallOption) (r0 *v1.RevAtTimeResponse, r1 error) {
				return
			},
		},
		SearchFunc: &GitserverServiceClientSearchFunc{
			defaultHook: func(context.Context, *v1.SearchRequest, ...grpc.CallOption) (r0 v1.GitserverService_SearchClient, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockGitserverServiceClient creates a new mock of the
// GitserverServiceClient interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockGitserverServiceClient() *MockGitserverServiceClient {
	return &MockGitserverServiceClient{
		ArchiveFunc: &GitserverServiceClientArchiveFunc{
			defaultHook: func(context.Context, *v1.ArchiveRequest, ...grpc.CallOption) (v1.GitserverService_ArchiveClient, error) {
				panic("unexpected invocation of MockGitserverServiceClient.Archive")
			},
		},
		BehindAheadFunc: &GitserverServiceClientBehindAheadFunc{
			defaultHook: func(context.Context, *v1.BehindAheadRequest, ...grpc.CallOption) (*v1.BehindAheadResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.BehindAhead")
			},
		},
		BlameFunc: &GitserverServiceClientBlameFunc{
			defaultHook: func(context.Context, *v1.BlameRequest, ...grpc.CallOption) (v1.GitserverService_BlameClient, error) {
				panic("unexpected invocation of MockGitserverServiceClient.Blame")
			},
		},
		ChangedFilesFunc: &GitserverServiceClientChangedFilesFunc{
			defaultHook: func(context.Context, *v1.ChangedFilesRequest, ...grpc.CallOption) (v1.GitserverService_ChangedFilesClient, error) {
				panic("unexpected invocation of MockGitserverServiceClient.ChangedFiles")
			},
		},
		CheckPerforceCredentialsFunc: &GitserverServiceClientCheckPerforceCredentialsFunc{
			defaultHook: func(context.Context, *v1.CheckPerforceCredentialsRequest, ...grpc.CallOption) (*v1.CheckPerforceCredentialsResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.CheckPerforceCredentials")
			},
		},
		ContributorCountsFunc: &GitserverServiceClientContributorCountsFunc{
			defaultHook: func(context.Context, *v1.ContributorCountsRequest, ...grpc.CallOption) (*v1.ContributorCountsResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.ContributorCounts")
			},
		},
		CreateCommitFromPatchBinaryFunc: &GitserverServiceClientCreateCommitFromPatchBinaryFunc{
			defaultHook: func(context.Context, ...grpc.CallOption) (v1.GitserverService_CreateCommitFromPatchBinaryClient, error) {
				panic("unexpected invocation of MockGitserverServiceClient.CreateCommitFromPatchBinary")
			},
		},
		DefaultBranchFunc: &GitserverServiceClientDefaultBranchFunc{
			defaultHook: func(context.Context, *v1.DefaultBranchRequest, ...grpc.CallOption) (*v1.DefaultBranchResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.DefaultBranch")
			},
		},
		DiskInfoFunc: &GitserverServiceClientDiskInfoFunc{
			defaultHook: func(context.Context, *v1.DiskInfoRequest, ...grpc.CallOption) (*v1.DiskInfoResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.DiskInfo")
			},
		},
		ExecFunc: &GitserverServiceClientExecFunc{
			defaultHook: func(context.Context, *v1.ExecRequest, ...grpc.CallOption) (v1.GitserverService_ExecClient, error) {
				panic("unexpected invocation of MockGitserverServiceClient.Exec")
			},
		},
		FirstEverCommitFunc: &GitserverServiceClientFirstEverCommitFunc{
			defaultHook: func(context.Context, *v1.FirstEverCommitRequest, ...grpc.CallOption) (*v1.FirstEverCommitResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.FirstEverCommit")
			},
		},
		GetCommitFunc: &GitserverServiceClientGetCommitFunc{
			defaultHook: func(context.Context, *v1.GetCommitRequest, ...grpc.CallOption) (*v1.GetCommitResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.GetCommit")
			},
		},
		GetObjectFunc: &GitserverServiceClientGetObjectFunc{
			defaultHook: func(context.Context, *v1.GetObjectRequest, ...grpc.CallOption) (*v1.GetObjectResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.GetObject")
			},
		},
		IsPerforcePathCloneableFunc: &GitserverServiceClientIsPerforcePathCloneableFunc{
			defaultHook: func(context.Context, *v1.IsPerforcePathCloneableRequest, ...grpc.CallOption) (*v1.IsPerforcePathCloneableResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.IsPerforcePathCloneable")
			},
		},
		IsPerforceSuperUserFunc: &GitserverServiceClientIsPerforceSuperUserFunc{
			defaultHook: func(context.Context, *v1.IsPerforceSuperUserRequest, ...grpc.CallOption) (*v1.IsPerforceSuperUserResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.IsPerforceSuperUser")
			},
		},
		IsRepoCloneableFunc: &GitserverServiceClientIsRepoCloneableFunc{
			defaultHook: func(context.Context, *v1.IsRepoCloneableRequest, ...grpc.CallOption) (*v1.IsRepoCloneableResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.IsRepoCloneable")
			},
		},
		ListGitoliteFunc: &GitserverServiceClientListGitoliteFunc{
			defaultHook: func(context.Context, *v1.ListGitoliteRequest, ...grpc.CallOption) (*v1.ListGitoliteResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.ListGitolite")
			},
		},
		ListRefsFunc: &GitserverServiceClientListRefsFunc{
			defaultHook: func(context.Context, *v1.ListRefsRequest, ...grpc.CallOption) (v1.GitserverService_ListRefsClient, error) {
				panic("unexpected invocation of MockGitserverServiceClient.ListRefs")
			},
		},
		MergeBaseFunc: &GitserverServiceClientMergeBaseFunc{
			defaultHook: func(context.Context, *v1.MergeBaseRequest, ...grpc.CallOption) (*v1.MergeBaseResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.MergeBase")
			},
		},
		PerforceGetChangelistFunc: &GitserverServiceClientPerforceGetChangelistFunc{
			defaultHook: func(context.Context, *v1.PerforceGetChangelistRequest, ...grpc.CallOption) (*v1.PerforceGetChangelistResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.PerforceGetChangelist")
			},
		},
		PerforceGroupMembersFunc: &GitserverServiceClientPerforceGroupMembersFunc{
			defaultHook: func(context.Context, *v1.PerforceGroupMembersRequest, ...grpc.CallOption) (*v1.PerforceGroupMembersResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.PerforceGroupMembers")
			},
		},
		PerforceProtectsForDepotFunc: &GitserverServiceClientPerforceProtectsForDepotFunc{
			defaultHook: func(context.Context, *v1.PerforceProtectsForDepotRequest, ...grpc.CallOption) (*v1.PerforceProtectsForDepotResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.PerforceProtectsForDepot")
			},
		},
		PerforceProtectsForUserFunc: &GitserverServiceClientPerforceProtectsForUserFunc{
			defaultHook: func(context.Context, *v1.PerforceProtectsForUserRequest, ...grpc.CallOption) (*v1.PerforceProtectsForUserResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.PerforceProtectsForUser")
			},
		},
		PerforceUsersFunc: &GitserverServiceClientPerforceUsersFunc{
			defaultHook: func(context.Context, *v1.PerforceUsersRequest, ...grpc.CallOption) (*v1.PerforceUsersResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.PerforceUsers")
			},
		},
		RawDiffFunc: &GitserverServiceClientRawDiffFunc{
			defaultHook: func(context.Context, *v1.RawDiffRequest, ...grpc.CallOption) (v1.GitserverService_RawDiffClient, error) {
				panic("unexpected invocation of MockGitserverServiceClient.RawDiff")
			},
		},
		ReadFileFunc: &GitserverServiceClientReadFileFunc{
			defaultHook: func(context.Context, *v1.ReadFileRequest, ...grpc.CallOption) (v1.GitserverService_ReadFileClient, error) {
				panic("unexpected invocation of MockGitserverServiceClient.ReadFile")
			},
		},
		RepoCloneProgressFunc: &GitserverServiceClientRepoCloneProgressFunc{
			defaultHook: func(context.Context, *v1.RepoCloneProgressRequest, ...grpc.CallOption) (*v1.RepoCloneProgressResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.RepoCloneProgress")
			},
		},
		ResolveRevisionFunc: &GitserverServiceClientResolveRevisionFunc{
			defaultHook: func(context.Context, *v1.ResolveRevisionRequest, ...grpc.CallOption) (*v1.ResolveRevisionResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.ResolveRevision")
			},
		},
		RevAtTimeFunc: &GitserverServiceClientRevAtTimeFunc{
			defaultHook: func(context.Context, *v1.RevAtTimeRequest, ...grpc.CallOption) (*v1.RevAtTimeResponse, error) {
				panic("unexpected invocation of MockGitserverServiceClient.RevAtTime")
			},
		},
		SearchFunc: &GitserverServiceClientSearchFunc{
			defaultHook: func(context.Context, *v1.SearchRequest, ...grpc.CallOption) (v1.GitserverService_SearchClient, error) {
				panic("unexpected invocation of MockGitserverServiceClient.Search")
			},
		},
	}
}

// NewMockGitserverServiceClientFrom creates a new mock of the
// MockGitserverServiceClient interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockGitserverServiceClientFrom(i v1.GitserverServiceClient) *MockGitserverServiceClient {
	return &MockGitserverServiceClient{
		ArchiveFunc: &GitserverServiceClientArchiveFunc{
			defaultHook: i.Archive,
		},
		BehindAheadFunc: &GitserverServiceClientBehindAheadFunc{
			defaultHook: i.BehindAhead,
		},
		BlameFunc: &GitserverServiceClientBlameFunc{
			defaultHook: i.Blame,
		},
		ChangedFilesFunc: &GitserverServiceClientChangedFilesFunc{
			defaultHook: i.ChangedFiles,
		},
		CheckPerforceCredentialsFunc: &GitserverServiceClientCheckPerforceCredentialsFunc{
			defaultHook: i.CheckPerforceCredentials,
		},
		ContributorCountsFunc: &GitserverServiceClientContributorCountsFunc{
			defaultHook: i.ContributorCounts,
		},
		CreateCommitFromPatchBinaryFunc: &GitserverServiceClientCreateCommitFromPatchBinaryFunc{
			defaultHook: i.CreateCommitFromPatchBinary,
		},
		DefaultBranchFunc: &GitserverServiceClientDefaultBranchFunc{
			defaultHook: i.DefaultBranch,
		},
		DiskInfoFunc: &GitserverServiceClientDiskInfoFunc{
			defaultHook: i.DiskInfo,
		},
		ExecFunc: &GitserverServiceClientExecFunc{
			defaultHook: i.Exec,
		},
		FirstEverCommitFunc: &GitserverServiceClientFirstEverCommitFunc{
			defaultHook: i.FirstEverCommit,
		},
		GetCommitFunc: &GitserverServiceClientGetCommitFunc{
			defaultHook: i.GetCommit,
		},
		GetObjectFunc: &GitserverServiceClientGetObjectFunc{
			defaultHook: i.GetObject,
		},
		IsPerforcePathCloneableFunc: &GitserverServiceClientIsPerforcePathCloneableFunc{
			defaultHook: i.IsPerforcePathCloneable,
		},
		IsPerforceSuperUserFunc: &GitserverServiceClientIsPerforceSuperUserFunc{
			defaultHook: i.IsPerforceSuperUser,
		},
		IsRepoCloneableFunc: &GitserverServiceClientIsRepoCloneableFunc{
			defaultHook: i.IsRepoCloneable,
		},
		ListGitoliteFunc: &GitserverServiceClientListGitoliteFunc{
			defaultHook: i.ListGitolite,
		},
		ListRefsFunc: &GitserverServiceClientListRefsFunc{
			defaultHook: i.ListRefs,
		},
		MergeBaseFunc: &GitserverServiceClientMergeBaseFunc{
			defaultHook: i.MergeBase,
		},
		PerforceGetChangelistFunc: &GitserverServiceClientPerforceGetChangelistFunc{
			defaultHook: i.PerforceGetChangelist,
		},
		PerforceGroupMembersFunc: &GitserverServiceClientPerforceGroupMembersFunc{
			defaultHook: i.PerforceGroupMembers,
		},
		PerforceProtectsForDepotFunc: &GitserverServiceClientPerforceProtectsForDepotFunc{
			defaultHook: i.PerforceProtectsForDepot,
		},
		PerforceProtectsForUserFunc: &GitserverServiceClientPerforceProtectsForUserFunc{
			defaultHook: i.PerforceProtectsForUser,
		},
		PerforceUsersFunc: &GitserverServiceClientPerforceUsersFunc{
			defaultHook: i.PerforceUsers,
		},
		RawDiffFunc: &GitserverServiceClientRawDiffFunc{
			defaultHook: i.RawDiff,
		},
		ReadFileFunc: &GitserverServiceClientReadFileFunc{
			defaultHook: i.ReadFile,
		},
		RepoCloneProgressFunc: &GitserverServiceClientRepoCloneProgressFunc{
			defaultHook: i.RepoCloneProgress,
		},
		ResolveRevisionFunc: &GitserverServiceClientResolveRevisionFunc{
			defaultHook: i.ResolveRevision,
		},
		RevAtTimeFunc: &GitserverServiceClientRevAtTimeFunc{
			defaultHook: i.RevAtTime,
		},
		SearchFunc: &GitserverServiceClientSearchFunc{
			defaultHook: i.Search,
		},
	}
}

// GitserverServiceClientArchiveFunc describes the behavior when the Archive
// method of the parent MockGitserverServiceClient instance is invoked.
type GitserverServiceClientArchiveFunc struct {
	defaultHook func(context.Context, *v1.ArchiveRequest, ...grpc.CallOption) (v1.GitserverService_ArchiveClient, error)
	hooks       []func(context.Context, *v1.ArchiveRequest, ...grpc.CallOption) (v1.GitserverService_ArchiveClient, error)
	history     []GitserverServiceClientArchiveFuncCall
	mutex       sync.Mutex
}

// Archive delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverServiceClient) Archive(v0 context.Context, v1 *v1.ArchiveRequest, v2 ...grpc.CallOption) (v1.GitserverService_ArchiveClient, error) {
	r0, r1 := m.ArchiveFunc.nextHook()(v0, v1, v2...)
	m.ArchiveFunc.appendCall(GitserverServiceClientArchiveFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Archive method of
// the parent MockGitserverServiceClient instance is invoked and the hook
// queue is empty.
func (f *GitserverServiceClientArchiveFunc) SetDefaultHook(hook func(context.Context, *v1.ArchiveRequest, ...grpc.CallOption) (v1.GitserverService_ArchiveClient, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Archive method of the parent MockGitserverServiceClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverServiceClientArchiveFunc) PushHook(hook func(context.Context, *v1.ArchiveRequest, ...grpc.CallOption) (v1.GitserverService_ArchiveClient, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientArchiveFunc) SetDefaultReturn(r0 v1.GitserverService_ArchiveClient, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.ArchiveRequest, ...grpc.CallOption) (v1.GitserverService_ArchiveClient, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientArchiveFunc) PushReturn(r0 v1.GitserverService_ArchiveClient, r1 error) {
	f.PushHook(func(context.Context, *v1.ArchiveRequest, ...grpc.CallOption) (v1.GitserverService_ArchiveClient, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientArchiveFunc) nextHook() func(context.Context, *v1.ArchiveRequest, ...grpc.CallOption) (v1.GitserverService_ArchiveClient, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientArchiveFunc) appendCall(r0 GitserverServiceClientArchiveFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverServiceClientArchiveFuncCall
// objects describing the invocations of this function.
func (f *GitserverServiceClientArchiveFunc) History() []GitserverServiceClientArchiveFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientArchiveFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientArchiveFuncCall is an object that describes an
// invocation of method Archive on an instance of
// MockGitserverServiceClient.
type GitserverServiceClientArchiveFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.ArchiveRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 v1.GitserverService_ArchiveClient
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientArchiveFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientArchiveFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientBehindAheadFunc describes the behavior when the
// BehindAhead method of the parent MockGitserverServiceClient instance is
// invoked.
type GitserverServiceClientBehindAheadFunc struct {
	defaultHook func(context.Context, *v1.BehindAheadRequest, ...grpc.CallOption) (*v1.BehindAheadResponse, error)
	hooks       []func(context.Context, *v1.BehindAheadRequest, ...grpc.CallOption) (*v1.BehindAheadResponse, error)
	history     []GitserverServiceClientBehindAheadFuncCall
	mutex       sync.Mutex
}

// BehindAhead delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverServiceClient) BehindAhead(v0 context.Context, v1 *v1.BehindAheadRequest, v2 ...grpc.CallOption) (*v1.BehindAheadResponse, error) {
	r0, r1 := m.BehindAheadFunc.nextHook()(v0, v1, v2...)
	m.BehindAheadFunc.appendCall(GitserverServiceClientBehindAheadFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the BehindAhead method
// of the parent MockGitserverServiceClient instance is invoked and the hook
// queue is empty.
func (f *GitserverServiceClientBehindAheadFunc) SetDefaultHook(hook func(context.Context, *v1.BehindAheadRequest, ...grpc.CallOption) (*v1.BehindAheadResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BehindAhead method of the parent MockGitserverServiceClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverServiceClientBehindAheadFunc) PushHook(hook func(context.Context, *v1.BehindAheadRequest, ...grpc.CallOption) (*v1.BehindAheadResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientBehindAheadFunc) SetDefaultReturn(r0 *v1.BehindAheadResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.BehindAheadRequest, ...grpc.CallOption) (*v1.BehindAheadResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientBehindAheadFunc) PushReturn(r0 *v1.BehindAheadResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.BehindAheadRequest, ...grpc.CallOption) (*v1.BehindAheadResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientBehindAheadFunc) nextHook() func(context.Context, *v1.BehindAheadRequest, ...grpc.CallOption) (*v1.BehindAheadResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientBehindAheadFunc) appendCall(r0 GitserverServiceClientBehindAheadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverServiceClientBehindAheadFuncCall
// objects describing the invocations of this function.
func (f *GitserverServiceClientBehindAheadFunc) History() []GitserverServiceClientBehindAheadFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientBehindAheadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientBehindAheadFuncCall is an object that describes an
// invocation of method BehindAhead on an instance of
// MockGitserverServiceClient.
type GitserverServiceClientBehindAheadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.BehindAheadRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.BehindAheadResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientBehindAheadFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientBehindAheadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientBlameFunc describes the behavior when the Blame
// method of the parent MockGitserverServiceClient instance is invoked.
type GitserverServiceClientBlameFunc struct {
	defaultHook func(context.Context, *v1.BlameRequest, ...grpc.CallOption) (v1.GitserverService_BlameClient, error)
	hooks       []func(context.Context, *v1.BlameRequest, ...grpc.CallOption) (v1.GitserverService_BlameClient, error)
	history     []GitserverServiceClientBlameFuncCall
	mutex       sync.Mutex
}

// Blame delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverServiceClient) Blame(v0 context.Context, v1 *v1.BlameRequest, v2 ...grpc.CallOption) (v1.GitserverService_BlameClient, error) {
	r0, r1 := m.BlameFunc.nextHook()(v0, v1, v2...)
	m.BlameFunc.appendCall(GitserverServiceClientBlameFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Blame method of the
// parent MockGitserverServiceClient instance is invoked and the hook queue
// is empty.
func (f *GitserverServiceClientBlameFunc) SetDefaultHook(hook func(context.Context, *v1.BlameRequest, ...grpc.CallOption) (v1.GitserverService_BlameClient, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Blame method of the parent MockGitserverServiceClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverServiceClientBlameFunc) PushHook(hook func(context.Context, *v1.BlameRequest, ...grpc.CallOption) (v1.GitserverService_BlameClient, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientBlameFunc) SetDefaultReturn(r0 v1.GitserverService_BlameClient, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.BlameRequest, ...grpc.CallOption) (v1.GitserverService_BlameClient, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientBlameFunc) PushReturn(r0 v1.GitserverService_BlameClient, r1 error) {
	f.PushHook(func(context.Context, *v1.BlameRequest, ...grpc.CallOption) (v1.GitserverService_BlameClient, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientBlameFunc) nextHook() func(context.Context, *v1.BlameRequest, ...grpc.CallOption) (v1.GitserverService_BlameClient, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientBlameFunc) appendCall(r0 GitserverServiceClientBlameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverServiceClientBlameFuncCall objects
// describing the invocations of this function.
func (f *GitserverServiceClientBlameFunc) History() []GitserverServiceClientBlameFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientBlameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientBlameFuncCall is an object that describes an
// invocation of method Blame on an instance of MockGitserverServiceClient.
type GitserverServiceClientBlameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.BlameRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 v1.GitserverService_BlameClient
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientBlameFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientBlameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientChangedFilesFunc describes the behavior when the
// ChangedFiles method of the parent MockGitserverServiceClient instance is
// invoked.
type GitserverServiceClientChangedFilesFunc struct {
	defaultHook func(context.Context, *v1.ChangedFilesRequest, ...grpc.CallOption) (v1.GitserverService_ChangedFilesClient, error)
	hooks       []func(context.Context, *v1.ChangedFilesRequest, ...grpc.CallOption) (v1.GitserverService_ChangedFilesClient, error)
	history     []GitserverServiceClientChangedFilesFuncCall
	mutex       sync.Mutex
}

// ChangedFiles delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverServiceClient) ChangedFiles(v0 context.Context, v1 *v1.ChangedFilesRequest, v2 ...grpc.CallOption) (v1.GitserverService_ChangedFilesClient, error) {
	r0, r1 := m.ChangedFilesFunc.nextHook()(v0, v1, v2...)
	m.ChangedFilesFunc.appendCall(GitserverServiceClientChangedFilesFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ChangedFiles method
// of the parent MockGitserverServiceClient instance is invoked and the hook
// queue is empty.
func (f *GitserverServiceClientChangedFilesFunc) SetDefaultHook(hook func(context.Context, *v1.ChangedFilesRequest, ...grpc.CallOption) (v1.GitserverService_ChangedFilesClient, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ChangedFiles method of the parent MockGitserverServiceClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverServiceClientChangedFilesFunc) PushHook(hook func(context.Context, *v1.ChangedFilesRequest, ...grpc.CallOption) (v1.GitserverService_ChangedFilesClient, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientChangedFilesFunc) SetDefaultReturn(r0 v1.GitserverService_ChangedFilesClient, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.ChangedFilesRequest, ...grpc.CallOption) (v1.GitserverService_ChangedFilesClient, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientChangedFilesFunc) PushReturn(r0 v1.GitserverService_ChangedFilesClient, r1 error) {
	f.PushHook(func(context.Context, *v1.ChangedFilesRequest, ...grpc.CallOption) (v1.GitserverService_ChangedFilesClient, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientChangedFilesFunc) nextHook() func(context.Context, *v1.ChangedFilesRequest, ...grpc.CallOption) (v1.GitserverService_ChangedFilesClient, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientChangedFilesFunc) appendCall(r0 GitserverServiceClientChangedFilesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverServiceClientChangedFilesFuncCall
// objects describing the invocations of this function.
func (f *GitserverServiceClientChangedFilesFunc) History() []GitserverServiceClientChangedFilesFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientChangedFilesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientChangedFilesFuncCall is an object that describes an
// invocation of method ChangedFiles on an instance of
// MockGitserverServiceClient.
type GitserverServiceClientChangedFilesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.ChangedFilesRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 v1.GitserverService_ChangedFilesClient
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientChangedFilesFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientChangedFilesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientCheckPerforceCredentialsFunc describes the behavior
// when the CheckPerforceCredentials method of the parent
// MockGitserverServiceClient instance is invoked.
type GitserverServiceClientCheckPerforceCredentialsFunc struct {
	defaultHook func(context.Context, *v1.CheckPerforceCredentialsRequest, ...grpc.CallOption) (*v1.CheckPerforceCredentialsResponse, error)
	hooks       []func(context.Context, *v1.CheckPerforceCredentialsRequest, ...grpc.CallOption) (*v1.CheckPerforceCredentialsResponse, error)
	history     []GitserverServiceClientCheckPerforceCredentialsFuncCall
	mutex       sync.Mutex
}

// CheckPerforceCredentials delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockGitserverServiceClient) CheckPerforceCredentials(v0 context.Context, v1 *v1.CheckPerforceCredentialsRequest, v2 ...grpc.CallOption) (*v1.CheckPerforceCredentialsResponse, error) {
	r0, r1 := m.CheckPerforceCredentialsFunc.nextHook()(v0, v1, v2...)
	m.CheckPerforceCredentialsFunc.appendCall(GitserverServiceClientCheckPerforceCredentialsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CheckPerforceCredentials method of the parent MockGitserverServiceClient
// instance is invoked and the hook queue is empty.
func (f *GitserverServiceClientCheckPerforceCredentialsFunc) SetDefaultHook(hook func(context.Context, *v1.CheckPerforceCredentialsRequest, ...grpc.CallOption) (*v1.CheckPerforceCredentialsResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CheckPerforceCredentials method of the parent MockGitserverServiceClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverServiceClientCheckPerforceCredentialsFunc) PushHook(hook func(context.Context, *v1.CheckPerforceCredentialsRequest, ...grpc.CallOption) (*v1.CheckPerforceCredentialsResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientCheckPerforceCredentialsFunc) SetDefaultReturn(r0 *v1.CheckPerforceCredentialsResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.CheckPerforceCredentialsRequest, ...grpc.CallOption) (*v1.CheckPerforceCredentialsResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientCheckPerforceCredentialsFunc) PushReturn(r0 *v1.CheckPerforceCredentialsResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.CheckPerforceCredentialsRequest, ...grpc.CallOption) (*v1.CheckPerforceCredentialsResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientCheckPerforceCredentialsFunc) nextHook() func(context.Context, *v1.CheckPerforceCredentialsRequest, ...grpc.CallOption) (*v1.CheckPerforceCredentialsResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientCheckPerforceCredentialsFunc) appendCall(r0 GitserverServiceClientCheckPerforceCredentialsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverServiceClientCheckPerforceCredentialsFuncCall objects describing
// the invocations of this function.
func (f *GitserverServiceClientCheckPerforceCredentialsFunc) History() []GitserverServiceClientCheckPerforceCredentialsFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientCheckPerforceCredentialsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientCheckPerforceCredentialsFuncCall is an object that
// describes an invocation of method CheckPerforceCredentials on an instance
// of MockGitserverServiceClient.
type GitserverServiceClientCheckPerforceCredentialsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.CheckPerforceCredentialsRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.CheckPerforceCredentialsResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientCheckPerforceCredentialsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientCheckPerforceCredentialsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientContributorCountsFunc describes the behavior when
// the ContributorCounts method of the parent MockGitserverServiceClient
// instance is invoked.
type GitserverServiceClientContributorCountsFunc struct {
	defaultHook func(context.Context, *v1.ContributorCountsRequest, ...grpc.CallOption) (*v1.ContributorCountsResponse, error)
	hooks       []func(context.Context, *v1.ContributorCountsRequest, ...grpc.CallOption) (*v1.ContributorCountsResponse, error)
	history     []GitserverServiceClientContributorCountsFuncCall
	mutex       sync.Mutex
}

// ContributorCounts delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverServiceClient) ContributorCounts(v0 context.Context, v1 *v1.ContributorCountsRequest, v2 ...grpc.CallOption) (*v1.ContributorCountsResponse, error) {
	r0, r1 := m.ContributorCountsFunc.nextHook()(v0, v1, v2...)
	m.ContributorCountsFunc.appendCall(GitserverServiceClientContributorCountsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ContributorCounts
// method of the parent MockGitserverServiceClient instance is invoked and
// the hook queue is empty.
func (f *GitserverServiceClientContributorCountsFunc) SetDefaultHook(hook func(context.Context, *v1.ContributorCountsRequest, ...grpc.CallOption) (*v1.ContributorCountsResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ContributorCounts method of the parent MockGitserverServiceClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverServiceClientContributorCountsFunc) PushHook(hook func(context.Context, *v1.ContributorCountsRequest, ...grpc.CallOption) (*v1.ContributorCountsResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientContributorCountsFunc) SetDefaultReturn(r0 *v1.ContributorCountsResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.ContributorCountsRequest, ...grpc.CallOption) (*v1.ContributorCountsResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientContributorCountsFunc) PushReturn(r0 *v1.ContributorCountsResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.ContributorCountsRequest, ...grpc.CallOption) (*v1.ContributorCountsResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientContributorCountsFunc) nextHook() func(context.Context, *v1.ContributorCountsRequest, ...grpc.CallOption) (*v1.ContributorCountsResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientContributorCountsFunc) appendCall(r0 GitserverServiceClientContributorCountsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverServiceClientContributorCountsFuncCall objects describing the
// invocations of this function.
func (f *GitserverServiceClientContributorCountsFunc) History() []GitserverServiceClientContributorCountsFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientContributorCountsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientContributorCountsFuncCall is an object that
// describes an invocation of method ContributorCounts on an instance of
// MockGitserverServiceClient.
type GitserverServiceClientContributorCountsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.ContributorCountsRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.ContributorCountsResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientContributorCountsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientContributorCountsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientCreateCommitFromPatchBinaryFunc describes the
// behavior when the CreateCommitFromPatchBinary method of the parent
// MockGitserverServiceClient instance is invoked.
type GitserverServiceClientCreateCommitFromPatchBinaryFunc struct {
	defaultHook func(context.Context, ...grpc.CallOption) (v1.GitserverService_CreateCommitFromPatchBinaryClient, error)
	hooks       []func(context.Context, ...grpc.CallOption) (v1.GitserverService_CreateCommitFromPatchBinaryClient, error)
	history     []GitserverServiceClientCreateCommitFromPatchBinaryFuncCall
	mutex       sync.Mutex
}

// CreateCommitFromPatchBinary delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockGitserverServiceClient) CreateCommitFromPatchBinary(v0 context.Context, v1 ...grpc.CallOption) (v1.GitserverService_CreateCommitFromPatchBinaryClient, error) {
	r0, r1 := m.CreateCommitFromPatchBinaryFunc.nextHook()(v0, v1...)
	m.CreateCommitFromPatchBinaryFunc.appendCall(GitserverServiceClientCreateCommitFromPatchBinaryFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CreateCommitFromPatchBinary method of the parent
// MockGitserverServiceClient instance is invoked and the hook queue is
// empty.
func (f *GitserverServiceClientCreateCommitFromPatchBinaryFunc) SetDefaultHook(hook func(context.Context, ...grpc.CallOption) (v1.GitserverService_CreateCommitFromPatchBinaryClient, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateCommitFromPatchBinary method of the parent
// MockGitserverServiceClient instance invokes the hook at the front of the
// queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *GitserverServiceClientCreateCommitFromPatchBinaryFunc) PushHook(hook func(context.Context, ...grpc.CallOption) (v1.GitserverService_CreateCommitFromPatchBinaryClient, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientCreateCommitFromPatchBinaryFunc) SetDefaultReturn(r0 v1.GitserverService_CreateCommitFromPatchBinaryClient, r1 error) {
	f.SetDefaultHook(func(context.Context, ...grpc.CallOption) (v1.GitserverService_CreateCommitFromPatchBinaryClient, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientCreateCommitFromPatchBinaryFunc) PushReturn(r0 v1.GitserverService_CreateCommitFromPatchBinaryClient, r1 error) {
	f.PushHook(func(context.Context, ...grpc.CallOption) (v1.GitserverService_CreateCommitFromPatchBinaryClient, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientCreateCommitFromPatchBinaryFunc) nextHook() func(context.Context, ...grpc.CallOption) (v1.GitserverService_CreateCommitFromPatchBinaryClient, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientCreateCommitFromPatchBinaryFunc) appendCall(r0 GitserverServiceClientCreateCommitFromPatchBinaryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverServiceClientCreateCommitFromPatchBinaryFuncCall objects
// describing the invocations of this function.
func (f *GitserverServiceClientCreateCommitFromPatchBinaryFunc) History() []GitserverServiceClientCreateCommitFromPatchBinaryFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientCreateCommitFromPatchBinaryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientCreateCommitFromPatchBinaryFuncCall is an object
// that describes an invocation of method CreateCommitFromPatchBinary on an
// instance of MockGitserverServiceClient.
type GitserverServiceClientCreateCommitFromPatchBinaryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 v1.GitserverService_CreateCommitFromPatchBinaryClient
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientCreateCommitFromPatchBinaryFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientCreateCommitFromPatchBinaryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientDefaultBranchFunc describes the behavior when the
// DefaultBranch method of the parent MockGitserverServiceClient instance is
// invoked.
type GitserverServiceClientDefaultBranchFunc struct {
	defaultHook func(context.Context, *v1.DefaultBranchRequest, ...grpc.CallOption) (*v1.DefaultBranchResponse, error)
	hooks       []func(context.Context, *v1.DefaultBranchRequest, ...grpc.CallOption) (*v1.DefaultBranchResponse, error)
	history     []GitserverServiceClientDefaultBranchFuncCall
	mutex       sync.Mutex
}

// DefaultBranch delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverServiceClient) DefaultBranch(v0 context.Context, v1 *v1.DefaultBranchRequest, v2 ...grpc.CallOption) (*v1.DefaultBranchResponse, error) {
	r0, r1 := m.DefaultBranchFunc.nextHook()(v0, v1, v2...)
	m.DefaultBranchFunc.appendCall(GitserverServiceClientDefaultBranchFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DefaultBranch method
// of the parent MockGitserverServiceClient instance is invoked and the hook
// queue is empty.
func (f *GitserverServiceClientDefaultBranchFunc) SetDefaultHook(hook func(context.Context, *v1.DefaultBranchRequest, ...grpc.CallOption) (*v1.DefaultBranchResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DefaultBranch method of the parent MockGitserverServiceClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverServiceClientDefaultBranchFunc) PushHook(hook func(context.Context, *v1.DefaultBranchRequest, ...grpc.CallOption) (*v1.DefaultBranchResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientDefaultBranchFunc) SetDefaultReturn(r0 *v1.DefaultBranchResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.DefaultBranchRequest, ...grpc.CallOption) (*v1.DefaultBranchResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientDefaultBranchFunc) PushReturn(r0 *v1.DefaultBranchResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.DefaultBranchRequest, ...grpc.CallOption) (*v1.DefaultBranchResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientDefaultBranchFunc) nextHook() func(context.Context, *v1.DefaultBranchRequest, ...grpc.CallOption) (*v1.DefaultBranchResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientDefaultBranchFunc) appendCall(r0 GitserverServiceClientDefaultBranchFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverServiceClientDefaultBranchFuncCall
// objects describing the invocations of this function.
func (f *GitserverServiceClientDefaultBranchFunc) History() []GitserverServiceClientDefaultBranchFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientDefaultBranchFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientDefaultBranchFuncCall is an object that describes
// an invocation of method DefaultBranch on an instance of
// MockGitserverServiceClient.
type GitserverServiceClientDefaultBranchFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.DefaultBranchRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.DefaultBranchResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientDefaultBranchFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientDefaultBranchFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientDiskInfoFunc describes the behavior when the
// DiskInfo method of the parent MockGitserverServiceClient instance is
// invoked.
type GitserverServiceClientDiskInfoFunc struct {
	defaultHook func(context.Context, *v1.DiskInfoRequest, ...grpc.CallOption) (*v1.DiskInfoResponse, error)
	hooks       []func(context.Context, *v1.DiskInfoRequest, ...grpc.CallOption) (*v1.DiskInfoResponse, error)
	history     []GitserverServiceClientDiskInfoFuncCall
	mutex       sync.Mutex
}

// DiskInfo delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverServiceClient) DiskInfo(v0 context.Context, v1 *v1.DiskInfoRequest, v2 ...grpc.CallOption) (*v1.DiskInfoResponse, error) {
	r0, r1 := m.DiskInfoFunc.nextHook()(v0, v1, v2...)
	m.DiskInfoFunc.appendCall(GitserverServiceClientDiskInfoFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DiskInfo method of
// the parent MockGitserverServiceClient instance is invoked and the hook
// queue is empty.
func (f *GitserverServiceClientDiskInfoFunc) SetDefaultHook(hook func(context.Context, *v1.DiskInfoRequest, ...grpc.CallOption) (*v1.DiskInfoResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DiskInfo method of the parent MockGitserverServiceClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverServiceClientDiskInfoFunc) PushHook(hook func(context.Context, *v1.DiskInfoRequest, ...grpc.CallOption) (*v1.DiskInfoResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientDiskInfoFunc) SetDefaultReturn(r0 *v1.DiskInfoResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.DiskInfoRequest, ...grpc.CallOption) (*v1.DiskInfoResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientDiskInfoFunc) PushReturn(r0 *v1.DiskInfoResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.DiskInfoRequest, ...grpc.CallOption) (*v1.DiskInfoResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientDiskInfoFunc) nextHook() func(context.Context, *v1.DiskInfoRequest, ...grpc.CallOption) (*v1.DiskInfoResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientDiskInfoFunc) appendCall(r0 GitserverServiceClientDiskInfoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverServiceClientDiskInfoFuncCall
// objects describing the invocations of this function.
func (f *GitserverServiceClientDiskInfoFunc) History() []GitserverServiceClientDiskInfoFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientDiskInfoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientDiskInfoFuncCall is an object that describes an
// invocation of method DiskInfo on an instance of
// MockGitserverServiceClient.
type GitserverServiceClientDiskInfoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.DiskInfoRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.DiskInfoResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientDiskInfoFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientDiskInfoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientExecFunc describes the behavior when the Exec
// method of the parent MockGitserverServiceClient instance is invoked.
type GitserverServiceClientExecFunc struct {
	defaultHook func(context.Context, *v1.ExecRequest, ...grpc.CallOption) (v1.GitserverService_ExecClient, error)
	hooks       []func(context.Context, *v1.ExecRequest, ...grpc.CallOption) (v1.GitserverService_ExecClient, error)
	history     []GitserverServiceClientExecFuncCall
	mutex       sync.Mutex
}

// Exec delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverServiceClient) Exec(v0 context.Context, v1 *v1.ExecRequest, v2 ...grpc.CallOption) (v1.GitserverService_ExecClient, error) {
	r0, r1 := m.ExecFunc.nextHook()(v0, v1, v2...)
	m.ExecFunc.appendCall(GitserverServiceClientExecFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Exec method of the
// parent MockGitserverServiceClient instance is invoked and the hook queue
// is empty.
func (f *GitserverServiceClientExecFunc) SetDefaultHook(hook func(context.Context, *v1.ExecRequest, ...grpc.CallOption) (v1.GitserverService_ExecClient, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Exec method of the parent MockGitserverServiceClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GitserverServiceClientExecFunc) PushHook(hook func(context.Context, *v1.ExecRequest, ...grpc.CallOption) (v1.GitserverService_ExecClient, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientExecFunc) SetDefaultReturn(r0 v1.GitserverService_ExecClient, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.ExecRequest, ...grpc.CallOption) (v1.GitserverService_ExecClient, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientExecFunc) PushReturn(r0 v1.GitserverService_ExecClient, r1 error) {
	f.PushHook(func(context.Context, *v1.ExecRequest, ...grpc.CallOption) (v1.GitserverService_ExecClient, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientExecFunc) nextHook() func(context.Context, *v1.ExecRequest, ...grpc.CallOption) (v1.GitserverService_ExecClient, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientExecFunc) appendCall(r0 GitserverServiceClientExecFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverServiceClientExecFuncCall objects
// describing the invocations of this function.
func (f *GitserverServiceClientExecFunc) History() []GitserverServiceClientExecFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientExecFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientExecFuncCall is an object that describes an
// invocation of method Exec on an instance of MockGitserverServiceClient.
type GitserverServiceClientExecFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.ExecRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 v1.GitserverService_ExecClient
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientExecFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientExecFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientFirstEverCommitFunc describes the behavior when the
// FirstEverCommit method of the parent MockGitserverServiceClient instance
// is invoked.
type GitserverServiceClientFirstEverCommitFunc struct {
	defaultHook func(context.Context, *v1.FirstEverCommitRequest, ...grpc.CallOption) (*v1.FirstEverCommitResponse, error)
	hooks       []func(context.Context, *v1.FirstEverCommitRequest, ...grpc.CallOption) (*v1.FirstEverCommitResponse, error)
	history     []GitserverServiceClientFirstEverCommitFuncCall
	mutex       sync.Mutex
}

// FirstEverCommit delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverServiceClient) FirstEverCommit(v0 context.Context, v1 *v1.FirstEverCommitRequest, v2 ...grpc.CallOption) (*v1.FirstEverCommitResponse, error) {
	r0, r1 := m.FirstEverCommitFunc.nextHook()(v0, v1, v2...)
	m.FirstEverCommitFunc.appendCall(GitserverServiceClientFirstEverCommitFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FirstEverCommit
// method of the parent MockGitserverServiceClient instance is invoked and
// the hook queue is empty.
func (f *GitserverServiceClientFirstEverCommitFunc) SetDefaultHook(hook func(context.Context, *v1.FirstEverCommitRequest, ...grpc.CallOption) (*v1.FirstEverCommitResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FirstEverCommit method of the parent MockGitserverServiceClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverServiceClientFirstEverCommitFunc) PushHook(hook func(context.Context, *v1.FirstEverCommitRequest, ...grpc.CallOption) (*v1.FirstEverCommitResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientFirstEverCommitFunc) SetDefaultReturn(r0 *v1.FirstEverCommitResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.FirstEverCommitRequest, ...grpc.CallOption) (*v1.FirstEverCommitResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientFirstEverCommitFunc) PushReturn(r0 *v1.FirstEverCommitResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.FirstEverCommitRequest, ...grpc.CallOption) (*v1.FirstEverCommitResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientFirstEverCommitFunc) nextHook() func(context.Context, *v1.FirstEverCommitRequest, ...grpc.CallOption) (*v1.FirstEverCommitResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientFirstEverCommitFunc) appendCall(r0 GitserverServiceClientFirstEverCommitFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverServiceClientFirstEverCommitFuncCall objects describing the
// invocations of this function.
func (f *GitserverServiceClientFirstEverCommitFunc) History() []GitserverServiceClientFirstEverCommitFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientFirstEverCommitFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientFirstEverCommitFuncCall is an object that describes
// an invocation of method FirstEverCommit on an instance of
// MockGitserverServiceClient.
type GitserverServiceClientFirstEverCommitFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.FirstEverCommitRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.FirstEverCommitResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientFirstEverCommitFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientFirstEverCommitFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientGetCommitFunc describes the behavior when the
// GetCommit method of the parent MockGitserverServiceClient instance is
// invoked.
type GitserverServiceClientGetCommitFunc struct {
	defaultHook func(context.Context, *v1.GetCommitRequest, ...grpc.CallOption) (*v1.GetCommitResponse, error)
	hooks       []func(context.Context, *v1.GetCommitRequest, ...grpc.CallOption) (*v1.GetCommitResponse, error)
	history     []GitserverServiceClientGetCommitFuncCall
	mutex       sync.Mutex
}

// GetCommit delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverServiceClient) GetCommit(v0 context.Context, v1 *v1.GetCommitRequest, v2 ...grpc.CallOption) (*v1.GetCommitResponse, error) {
	r0, r1 := m.GetCommitFunc.nextHook()(v0, v1, v2...)
	m.GetCommitFunc.appendCall(GitserverServiceClientGetCommitFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetCommit method of
// the parent MockGitserverServiceClient instance is invoked and the hook
// queue is empty.
func (f *GitserverServiceClientGetCommitFunc) SetDefaultHook(hook func(context.Context, *v1.GetCommitRequest, ...grpc.CallOption) (*v1.GetCommitResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetCommit method of the parent MockGitserverServiceClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverServiceClientGetCommitFunc) PushHook(hook func(context.Context, *v1.GetCommitRequest, ...grpc.CallOption) (*v1.GetCommitResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientGetCommitFunc) SetDefaultReturn(r0 *v1.GetCommitResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.GetCommitRequest, ...grpc.CallOption) (*v1.GetCommitResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientGetCommitFunc) PushReturn(r0 *v1.GetCommitResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.GetCommitRequest, ...grpc.CallOption) (*v1.GetCommitResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientGetCommitFunc) nextHook() func(context.Context, *v1.GetCommitRequest, ...grpc.CallOption) (*v1.GetCommitResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientGetCommitFunc) appendCall(r0 GitserverServiceClientGetCommitFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverServiceClientGetCommitFuncCall
// objects describing the invocations of this function.
func (f *GitserverServiceClientGetCommitFunc) History() []GitserverServiceClientGetCommitFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientGetCommitFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientGetCommitFuncCall is an object that describes an
// invocation of method GetCommit on an instance of
// MockGitserverServiceClient.
type GitserverServiceClientGetCommitFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.GetCommitRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.GetCommitResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientGetCommitFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientGetCommitFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientGetObjectFunc describes the behavior when the
// GetObject method of the parent MockGitserverServiceClient instance is
// invoked.
type GitserverServiceClientGetObjectFunc struct {
	defaultHook func(context.Context, *v1.GetObjectRequest, ...grpc.CallOption) (*v1.GetObjectResponse, error)
	hooks       []func(context.Context, *v1.GetObjectRequest, ...grpc.CallOption) (*v1.GetObjectResponse, error)
	history     []GitserverServiceClientGetObjectFuncCall
	mutex       sync.Mutex
}

// GetObject delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverServiceClient) GetObject(v0 context.Context, v1 *v1.GetObjectRequest, v2 ...grpc.CallOption) (*v1.GetObjectResponse, error) {
	r0, r1 := m.GetObjectFunc.nextHook()(v0, v1, v2...)
	m.GetObjectFunc.appendCall(GitserverServiceClientGetObjectFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetObject method of
// the parent MockGitserverServiceClient instance is invoked and the hook
// queue is empty.
func (f *GitserverServiceClientGetObjectFunc) SetDefaultHook(hook func(context.Context, *v1.GetObjectRequest, ...grpc.CallOption) (*v1.GetObjectResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetObject method of the parent MockGitserverServiceClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverServiceClientGetObjectFunc) PushHook(hook func(context.Context, *v1.GetObjectRequest, ...grpc.CallOption) (*v1.GetObjectResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientGetObjectFunc) SetDefaultReturn(r0 *v1.GetObjectResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.GetObjectRequest, ...grpc.CallOption) (*v1.GetObjectResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientGetObjectFunc) PushReturn(r0 *v1.GetObjectResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.GetObjectRequest, ...grpc.CallOption) (*v1.GetObjectResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientGetObjectFunc) nextHook() func(context.Context, *v1.GetObjectRequest, ...grpc.CallOption) (*v1.GetObjectResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientGetObjectFunc) appendCall(r0 GitserverServiceClientGetObjectFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverServiceClientGetObjectFuncCall
// objects describing the invocations of this function.
func (f *GitserverServiceClientGetObjectFunc) History() []GitserverServiceClientGetObjectFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientGetObjectFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientGetObjectFuncCall is an object that describes an
// invocation of method GetObject on an instance of
// MockGitserverServiceClient.
type GitserverServiceClientGetObjectFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.GetObjectRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.GetObjectResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientGetObjectFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientGetObjectFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientIsPerforcePathCloneableFunc describes the behavior
// when the IsPerforcePathCloneable method of the parent
// MockGitserverServiceClient instance is invoked.
type GitserverServiceClientIsPerforcePathCloneableFunc struct {
	defaultHook func(context.Context, *v1.IsPerforcePathCloneableRequest, ...grpc.CallOption) (*v1.IsPerforcePathCloneableResponse, error)
	hooks       []func(context.Context, *v1.IsPerforcePathCloneableRequest, ...grpc.CallOption) (*v1.IsPerforcePathCloneableResponse, error)
	history     []GitserverServiceClientIsPerforcePathCloneableFuncCall
	mutex       sync.Mutex
}

// IsPerforcePathCloneable delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockGitserverServiceClient) IsPerforcePathCloneable(v0 context.Context, v1 *v1.IsPerforcePathCloneableRequest, v2 ...grpc.CallOption) (*v1.IsPerforcePathCloneableResponse, error) {
	r0, r1 := m.IsPerforcePathCloneableFunc.nextHook()(v0, v1, v2...)
	m.IsPerforcePathCloneableFunc.appendCall(GitserverServiceClientIsPerforcePathCloneableFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// IsPerforcePathCloneable method of the parent MockGitserverServiceClient
// instance is invoked and the hook queue is empty.
func (f *GitserverServiceClientIsPerforcePathCloneableFunc) SetDefaultHook(hook func(context.Context, *v1.IsPerforcePathCloneableRequest, ...grpc.CallOption) (*v1.IsPerforcePathCloneableResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsPerforcePathCloneable method of the parent MockGitserverServiceClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverServiceClientIsPerforcePathCloneableFunc) PushHook(hook func(context.Context, *v1.IsPerforcePathCloneableRequest, ...grpc.CallOption) (*v1.IsPerforcePathCloneableResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientIsPerforcePathCloneableFunc) SetDefaultReturn(r0 *v1.IsPerforcePathCloneableResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.IsPerforcePathCloneableRequest, ...grpc.CallOption) (*v1.IsPerforcePathCloneableResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientIsPerforcePathCloneableFunc) PushReturn(r0 *v1.IsPerforcePathCloneableResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.IsPerforcePathCloneableRequest, ...grpc.CallOption) (*v1.IsPerforcePathCloneableResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientIsPerforcePathCloneableFunc) nextHook() func(context.Context, *v1.IsPerforcePathCloneableRequest, ...grpc.CallOption) (*v1.IsPerforcePathCloneableResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientIsPerforcePathCloneableFunc) appendCall(r0 GitserverServiceClientIsPerforcePathCloneableFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverServiceClientIsPerforcePathCloneableFuncCall objects describing
// the invocations of this function.
func (f *GitserverServiceClientIsPerforcePathCloneableFunc) History() []GitserverServiceClientIsPerforcePathCloneableFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientIsPerforcePathCloneableFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientIsPerforcePathCloneableFuncCall is an object that
// describes an invocation of method IsPerforcePathCloneable on an instance
// of MockGitserverServiceClient.
type GitserverServiceClientIsPerforcePathCloneableFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.IsPerforcePathCloneableRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.IsPerforcePathCloneableResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientIsPerforcePathCloneableFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientIsPerforcePathCloneableFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientIsPerforceSuperUserFunc describes the behavior when
// the IsPerforceSuperUser method of the parent MockGitserverServiceClient
// instance is invoked.
type GitserverServiceClientIsPerforceSuperUserFunc struct {
	defaultHook func(context.Context, *v1.IsPerforceSuperUserRequest, ...grpc.CallOption) (*v1.IsPerforceSuperUserResponse, error)
	hooks       []func(context.Context, *v1.IsPerforceSuperUserRequest, ...grpc.CallOption) (*v1.IsPerforceSuperUserResponse, error)
	history     []GitserverServiceClientIsPerforceSuperUserFuncCall
	mutex       sync.Mutex
}

// IsPerforceSuperUser delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverServiceClient) IsPerforceSuperUser(v0 context.Context, v1 *v1.IsPerforceSuperUserRequest, v2 ...grpc.CallOption) (*v1.IsPerforceSuperUserResponse, error) {
	r0, r1 := m.IsPerforceSuperUserFunc.nextHook()(v0, v1, v2...)
	m.IsPerforceSuperUserFunc.appendCall(GitserverServiceClientIsPerforceSuperUserFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IsPerforceSuperUser
// method of the parent MockGitserverServiceClient instance is invoked and
// the hook queue is empty.
func (f *GitserverServiceClientIsPerforceSuperUserFunc) SetDefaultHook(hook func(context.Context, *v1.IsPerforceSuperUserRequest, ...grpc.CallOption) (*v1.IsPerforceSuperUserResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsPerforceSuperUser method of the parent MockGitserverServiceClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverServiceClientIsPerforceSuperUserFunc) PushHook(hook func(context.Context, *v1.IsPerforceSuperUserRequest, ...grpc.CallOption) (*v1.IsPerforceSuperUserResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientIsPerforceSuperUserFunc) SetDefaultReturn(r0 *v1.IsPerforceSuperUserResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.IsPerforceSuperUserRequest, ...grpc.CallOption) (*v1.IsPerforceSuperUserResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientIsPerforceSuperUserFunc) PushReturn(r0 *v1.IsPerforceSuperUserResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.IsPerforceSuperUserRequest, ...grpc.CallOption) (*v1.IsPerforceSuperUserResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientIsPerforceSuperUserFunc) nextHook() func(context.Context, *v1.IsPerforceSuperUserRequest, ...grpc.CallOption) (*v1.IsPerforceSuperUserResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientIsPerforceSuperUserFunc) appendCall(r0 GitserverServiceClientIsPerforceSuperUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverServiceClientIsPerforceSuperUserFuncCall objects describing the
// invocations of this function.
func (f *GitserverServiceClientIsPerforceSuperUserFunc) History() []GitserverServiceClientIsPerforceSuperUserFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientIsPerforceSuperUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientIsPerforceSuperUserFuncCall is an object that
// describes an invocation of method IsPerforceSuperUser on an instance of
// MockGitserverServiceClient.
type GitserverServiceClientIsPerforceSuperUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.IsPerforceSuperUserRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.IsPerforceSuperUserResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientIsPerforceSuperUserFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientIsPerforceSuperUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientIsRepoCloneableFunc describes the behavior when the
// IsRepoCloneable method of the parent MockGitserverServiceClient instance
// is invoked.
type GitserverServiceClientIsRepoCloneableFunc struct {
	defaultHook func(context.Context, *v1.IsRepoCloneableRequest, ...grpc.CallOption) (*v1.IsRepoCloneableResponse, error)
	hooks       []func(context.Context, *v1.IsRepoCloneableRequest, ...grpc.CallOption) (*v1.IsRepoCloneableResponse, error)
	history     []GitserverServiceClientIsRepoCloneableFuncCall
	mutex       sync.Mutex
}

// IsRepoCloneable delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverServiceClient) IsRepoCloneable(v0 context.Context, v1 *v1.IsRepoCloneableRequest, v2 ...grpc.CallOption) (*v1.IsRepoCloneableResponse, error) {
	r0, r1 := m.IsRepoCloneableFunc.nextHook()(v0, v1, v2...)
	m.IsRepoCloneableFunc.appendCall(GitserverServiceClientIsRepoCloneableFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IsRepoCloneable
// method of the parent MockGitserverServiceClient instance is invoked and
// the hook queue is empty.
func (f *GitserverServiceClientIsRepoCloneableFunc) SetDefaultHook(hook func(context.Context, *v1.IsRepoCloneableRequest, ...grpc.CallOption) (*v1.IsRepoCloneableResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsRepoCloneable method of the parent MockGitserverServiceClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverServiceClientIsRepoCloneableFunc) PushHook(hook func(context.Context, *v1.IsRepoCloneableRequest, ...grpc.CallOption) (*v1.IsRepoCloneableResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientIsRepoCloneableFunc) SetDefaultReturn(r0 *v1.IsRepoCloneableResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.IsRepoCloneableRequest, ...grpc.CallOption) (*v1.IsRepoCloneableResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientIsRepoCloneableFunc) PushReturn(r0 *v1.IsRepoCloneableResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.IsRepoCloneableRequest, ...grpc.CallOption) (*v1.IsRepoCloneableResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientIsRepoCloneableFunc) nextHook() func(context.Context, *v1.IsRepoCloneableRequest, ...grpc.CallOption) (*v1.IsRepoCloneableResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientIsRepoCloneableFunc) appendCall(r0 GitserverServiceClientIsRepoCloneableFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverServiceClientIsRepoCloneableFuncCall objects describing the
// invocations of this function.
func (f *GitserverServiceClientIsRepoCloneableFunc) History() []GitserverServiceClientIsRepoCloneableFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientIsRepoCloneableFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientIsRepoCloneableFuncCall is an object that describes
// an invocation of method IsRepoCloneable on an instance of
// MockGitserverServiceClient.
type GitserverServiceClientIsRepoCloneableFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.IsRepoCloneableRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.IsRepoCloneableResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientIsRepoCloneableFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientIsRepoCloneableFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientListGitoliteFunc describes the behavior when the
// ListGitolite method of the parent MockGitserverServiceClient instance is
// invoked.
type GitserverServiceClientListGitoliteFunc struct {
	defaultHook func(context.Context, *v1.ListGitoliteRequest, ...grpc.CallOption) (*v1.ListGitoliteResponse, error)
	hooks       []func(context.Context, *v1.ListGitoliteRequest, ...grpc.CallOption) (*v1.ListGitoliteResponse, error)
	history     []GitserverServiceClientListGitoliteFuncCall
	mutex       sync.Mutex
}

// ListGitolite delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverServiceClient) ListGitolite(v0 context.Context, v1 *v1.ListGitoliteRequest, v2 ...grpc.CallOption) (*v1.ListGitoliteResponse, error) {
	r0, r1 := m.ListGitoliteFunc.nextHook()(v0, v1, v2...)
	m.ListGitoliteFunc.appendCall(GitserverServiceClientListGitoliteFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListGitolite method
// of the parent MockGitserverServiceClient instance is invoked and the hook
// queue is empty.
func (f *GitserverServiceClientListGitoliteFunc) SetDefaultHook(hook func(context.Context, *v1.ListGitoliteRequest, ...grpc.CallOption) (*v1.ListGitoliteResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListGitolite method of the parent MockGitserverServiceClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverServiceClientListGitoliteFunc) PushHook(hook func(context.Context, *v1.ListGitoliteRequest, ...grpc.CallOption) (*v1.ListGitoliteResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientListGitoliteFunc) SetDefaultReturn(r0 *v1.ListGitoliteResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.ListGitoliteRequest, ...grpc.CallOption) (*v1.ListGitoliteResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientListGitoliteFunc) PushReturn(r0 *v1.ListGitoliteResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.ListGitoliteRequest, ...grpc.CallOption) (*v1.ListGitoliteResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientListGitoliteFunc) nextHook() func(context.Context, *v1.ListGitoliteRequest, ...grpc.CallOption) (*v1.ListGitoliteResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientListGitoliteFunc) appendCall(r0 GitserverServiceClientListGitoliteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverServiceClientListGitoliteFuncCall
// objects describing the invocations of this function.
func (f *GitserverServiceClientListGitoliteFunc) History() []GitserverServiceClientListGitoliteFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientListGitoliteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientListGitoliteFuncCall is an object that describes an
// invocation of method ListGitolite on an instance of
// MockGitserverServiceClient.
type GitserverServiceClientListGitoliteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.ListGitoliteRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.ListGitoliteResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientListGitoliteFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientListGitoliteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientListRefsFunc describes the behavior when the
// ListRefs method of the parent MockGitserverServiceClient instance is
// invoked.
type GitserverServiceClientListRefsFunc struct {
	defaultHook func(context.Context, *v1.ListRefsRequest, ...grpc.CallOption) (v1.GitserverService_ListRefsClient, error)
	hooks       []func(context.Context, *v1.ListRefsRequest, ...grpc.CallOption) (v1.GitserverService_ListRefsClient, error)
	history     []GitserverServiceClientListRefsFuncCall
	mutex       sync.Mutex
}

// ListRefs delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverServiceClient) ListRefs(v0 context.Context, v1 *v1.ListRefsRequest, v2 ...grpc.CallOption) (v1.GitserverService_ListRefsClient, error) {
	r0, r1 := m.ListRefsFunc.nextHook()(v0, v1, v2...)
	m.ListRefsFunc.appendCall(GitserverServiceClientListRefsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListRefs method of
// the parent MockGitserverServiceClient instance is invoked and the hook
// queue is empty.
func (f *GitserverServiceClientListRefsFunc) SetDefaultHook(hook func(context.Context, *v1.ListRefsRequest, ...grpc.CallOption) (v1.GitserverService_ListRefsClient, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListRefs method of the parent MockGitserverServiceClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverServiceClientListRefsFunc) PushHook(hook func(context.Context, *v1.ListRefsRequest, ...grpc.CallOption) (v1.GitserverService_ListRefsClient, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientListRefsFunc) SetDefaultReturn(r0 v1.GitserverService_ListRefsClient, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.ListRefsRequest, ...grpc.CallOption) (v1.GitserverService_ListRefsClient, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientListRefsFunc) PushReturn(r0 v1.GitserverService_ListRefsClient, r1 error) {
	f.PushHook(func(context.Context, *v1.ListRefsRequest, ...grpc.CallOption) (v1.GitserverService_ListRefsClient, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientListRefsFunc) nextHook() func(context.Context, *v1.ListRefsRequest, ...grpc.CallOption) (v1.GitserverService_ListRefsClient, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientListRefsFunc) appendCall(r0 GitserverServiceClientListRefsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverServiceClientListRefsFuncCall
// objects describing the invocations of this function.
func (f *GitserverServiceClientListRefsFunc) History() []GitserverServiceClientListRefsFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientListRefsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientListRefsFuncCall is an object that describes an
// invocation of method ListRefs on an instance of
// MockGitserverServiceClient.
type GitserverServiceClientListRefsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.ListRefsRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 v1.GitserverService_ListRefsClient
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientListRefsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientListRefsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientMergeBaseFunc describes the behavior when the
// MergeBase method of the parent MockGitserverServiceClient instance is
// invoked.
type GitserverServiceClientMergeBaseFunc struct {
	defaultHook func(context.Context, *v1.MergeBaseRequest, ...grpc.CallOption) (*v1.MergeBaseResponse, error)
	hooks       []func(context.Context, *v1.MergeBaseRequest, ...grpc.CallOption) (*v1.MergeBaseResponse, error)
	history     []GitserverServiceClientMergeBaseFuncCall
	mutex       sync.Mutex
}

// MergeBase delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverServiceClient) MergeBase(v0 context.Context, v1 *v1.MergeBaseRequest, v2 ...grpc.CallOption) (*v1.MergeBaseResponse, error) {
	r0, r1 := m.MergeBaseFunc.nextHook()(v0, v1, v2...)
	m.MergeBaseFunc.appendCall(GitserverServiceClientMergeBaseFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MergeBase method of
// the parent MockGitserverServiceClient instance is invoked and the hook
// queue is empty.
func (f *GitserverServiceClientMergeBaseFunc) SetDefaultHook(hook func(context.Context, *v1.MergeBaseRequest, ...grpc.CallOption) (*v1.MergeBaseResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MergeBase method of the parent MockGitserverServiceClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverServiceClientMergeBaseFunc) PushHook(hook func(context.Context, *v1.MergeBaseRequest, ...grpc.CallOption) (*v1.MergeBaseResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientMergeBaseFunc) SetDefaultReturn(r0 *v1.MergeBaseResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.MergeBaseRequest, ...grpc.CallOption) (*v1.MergeBaseResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientMergeBaseFunc) PushReturn(r0 *v1.MergeBaseResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.MergeBaseRequest, ...grpc.CallOption) (*v1.MergeBaseResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientMergeBaseFunc) nextHook() func(context.Context, *v1.MergeBaseRequest, ...grpc.CallOption) (*v1.MergeBaseResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientMergeBaseFunc) appendCall(r0 GitserverServiceClientMergeBaseFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverServiceClientMergeBaseFuncCall
// objects describing the invocations of this function.
func (f *GitserverServiceClientMergeBaseFunc) History() []GitserverServiceClientMergeBaseFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientMergeBaseFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientMergeBaseFuncCall is an object that describes an
// invocation of method MergeBase on an instance of
// MockGitserverServiceClient.
type GitserverServiceClientMergeBaseFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.MergeBaseRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.MergeBaseResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientMergeBaseFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientMergeBaseFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientPerforceGetChangelistFunc describes the behavior
// when the PerforceGetChangelist method of the parent
// MockGitserverServiceClient instance is invoked.
type GitserverServiceClientPerforceGetChangelistFunc struct {
	defaultHook func(context.Context, *v1.PerforceGetChangelistRequest, ...grpc.CallOption) (*v1.PerforceGetChangelistResponse, error)
	hooks       []func(context.Context, *v1.PerforceGetChangelistRequest, ...grpc.CallOption) (*v1.PerforceGetChangelistResponse, error)
	history     []GitserverServiceClientPerforceGetChangelistFuncCall
	mutex       sync.Mutex
}

// PerforceGetChangelist delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockGitserverServiceClient) PerforceGetChangelist(v0 context.Context, v1 *v1.PerforceGetChangelistRequest, v2 ...grpc.CallOption) (*v1.PerforceGetChangelistResponse, error) {
	r0, r1 := m.PerforceGetChangelistFunc.nextHook()(v0, v1, v2...)
	m.PerforceGetChangelistFunc.appendCall(GitserverServiceClientPerforceGetChangelistFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// PerforceGetChangelist method of the parent MockGitserverServiceClient
// instance is invoked and the hook queue is empty.
func (f *GitserverServiceClientPerforceGetChangelistFunc) SetDefaultHook(hook func(context.Context, *v1.PerforceGetChangelistRequest, ...grpc.CallOption) (*v1.PerforceGetChangelistResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PerforceGetChangelist method of the parent MockGitserverServiceClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverServiceClientPerforceGetChangelistFunc) PushHook(hook func(context.Context, *v1.PerforceGetChangelistRequest, ...grpc.CallOption) (*v1.PerforceGetChangelistResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientPerforceGetChangelistFunc) SetDefaultReturn(r0 *v1.PerforceGetChangelistResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.PerforceGetChangelistRequest, ...grpc.CallOption) (*v1.PerforceGetChangelistResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientPerforceGetChangelistFunc) PushReturn(r0 *v1.PerforceGetChangelistResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.PerforceGetChangelistRequest, ...grpc.CallOption) (*v1.PerforceGetChangelistResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientPerforceGetChangelistFunc) nextHook() func(context.Context, *v1.PerforceGetChangelistRequest, ...grpc.CallOption) (*v1.PerforceGetChangelistResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientPerforceGetChangelistFunc) appendCall(r0 GitserverServiceClientPerforceGetChangelistFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverServiceClientPerforceGetChangelistFuncCall objects describing
// the invocations of this function.
func (f *GitserverServiceClientPerforceGetChangelistFunc) History() []GitserverServiceClientPerforceGetChangelistFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientPerforceGetChangelistFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientPerforceGetChangelistFuncCall is an object that
// describes an invocation of method PerforceGetChangelist on an instance of
// MockGitserverServiceClient.
type GitserverServiceClientPerforceGetChangelistFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.PerforceGetChangelistRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.PerforceGetChangelistResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientPerforceGetChangelistFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientPerforceGetChangelistFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientPerforceGroupMembersFunc describes the behavior
// when the PerforceGroupMembers method of the parent
// MockGitserverServiceClient instance is invoked.
type GitserverServiceClientPerforceGroupMembersFunc struct {
	defaultHook func(context.Context, *v1.PerforceGroupMembersRequest, ...grpc.CallOption) (*v1.PerforceGroupMembersResponse, error)
	hooks       []func(context.Context, *v1.PerforceGroupMembersRequest, ...grpc.CallOption) (*v1.PerforceGroupMembersResponse, error)
	history     []GitserverServiceClientPerforceGroupMembersFuncCall
	mutex       sync.Mutex
}

// PerforceGroupMembers delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverServiceClient) PerforceGroupMembers(v0 context.Context, v1 *v1.PerforceGroupMembersRequest, v2 ...grpc.CallOption) (*v1.PerforceGroupMembersResponse, error) {
	r0, r1 := m.PerforceGroupMembersFunc.nextHook()(v0, v1, v2...)
	m.PerforceGroupMembersFunc.appendCall(GitserverServiceClientPerforceGroupMembersFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the PerforceGroupMembers
// method of the parent MockGitserverServiceClient instance is invoked and
// the hook queue is empty.
func (f *GitserverServiceClientPerforceGroupMembersFunc) SetDefaultHook(hook func(context.Context, *v1.PerforceGroupMembersRequest, ...grpc.CallOption) (*v1.PerforceGroupMembersResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PerforceGroupMembers method of the parent MockGitserverServiceClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverServiceClientPerforceGroupMembersFunc) PushHook(hook func(context.Context, *v1.PerforceGroupMembersRequest, ...grpc.CallOption) (*v1.PerforceGroupMembersResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientPerforceGroupMembersFunc) SetDefaultReturn(r0 *v1.PerforceGroupMembersResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.PerforceGroupMembersRequest, ...grpc.CallOption) (*v1.PerforceGroupMembersResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientPerforceGroupMembersFunc) PushReturn(r0 *v1.PerforceGroupMembersResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.PerforceGroupMembersRequest, ...grpc.CallOption) (*v1.PerforceGroupMembersResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientPerforceGroupMembersFunc) nextHook() func(context.Context, *v1.PerforceGroupMembersRequest, ...grpc.CallOption) (*v1.PerforceGroupMembersResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientPerforceGroupMembersFunc) appendCall(r0 GitserverServiceClientPerforceGroupMembersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverServiceClientPerforceGroupMembersFuncCall objects describing the
// invocations of this function.
func (f *GitserverServiceClientPerforceGroupMembersFunc) History() []GitserverServiceClientPerforceGroupMembersFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientPerforceGroupMembersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientPerforceGroupMembersFuncCall is an object that
// describes an invocation of method PerforceGroupMembers on an instance of
// MockGitserverServiceClient.
type GitserverServiceClientPerforceGroupMembersFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.PerforceGroupMembersRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.PerforceGroupMembersResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientPerforceGroupMembersFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientPerforceGroupMembersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientPerforceProtectsForDepotFunc describes the behavior
// when the PerforceProtectsForDepot method of the parent
// MockGitserverServiceClient instance is invoked.
type GitserverServiceClientPerforceProtectsForDepotFunc struct {
	defaultHook func(context.Context, *v1.PerforceProtectsForDepotRequest, ...grpc.CallOption) (*v1.PerforceProtectsForDepotResponse, error)
	hooks       []func(context.Context, *v1.PerforceProtectsForDepotRequest, ...grpc.CallOption) (*v1.PerforceProtectsForDepotResponse, error)
	history     []GitserverServiceClientPerforceProtectsForDepotFuncCall
	mutex       sync.Mutex
}

// PerforceProtectsForDepot delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockGitserverServiceClient) PerforceProtectsForDepot(v0 context.Context, v1 *v1.PerforceProtectsForDepotRequest, v2 ...grpc.CallOption) (*v1.PerforceProtectsForDepotResponse, error) {
	r0, r1 := m.PerforceProtectsForDepotFunc.nextHook()(v0, v1, v2...)
	m.PerforceProtectsForDepotFunc.appendCall(GitserverServiceClientPerforceProtectsForDepotFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// PerforceProtectsForDepot method of the parent MockGitserverServiceClient
// instance is invoked and the hook queue is empty.
func (f *GitserverServiceClientPerforceProtectsForDepotFunc) SetDefaultHook(hook func(context.Context, *v1.PerforceProtectsForDepotRequest, ...grpc.CallOption) (*v1.PerforceProtectsForDepotResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PerforceProtectsForDepot method of the parent MockGitserverServiceClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverServiceClientPerforceProtectsForDepotFunc) PushHook(hook func(context.Context, *v1.PerforceProtectsForDepotRequest, ...grpc.CallOption) (*v1.PerforceProtectsForDepotResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientPerforceProtectsForDepotFunc) SetDefaultReturn(r0 *v1.PerforceProtectsForDepotResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.PerforceProtectsForDepotRequest, ...grpc.CallOption) (*v1.PerforceProtectsForDepotResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientPerforceProtectsForDepotFunc) PushReturn(r0 *v1.PerforceProtectsForDepotResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.PerforceProtectsForDepotRequest, ...grpc.CallOption) (*v1.PerforceProtectsForDepotResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientPerforceProtectsForDepotFunc) nextHook() func(context.Context, *v1.PerforceProtectsForDepotRequest, ...grpc.CallOption) (*v1.PerforceProtectsForDepotResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientPerforceProtectsForDepotFunc) appendCall(r0 GitserverServiceClientPerforceProtectsForDepotFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverServiceClientPerforceProtectsForDepotFuncCall objects describing
// the invocations of this function.
func (f *GitserverServiceClientPerforceProtectsForDepotFunc) History() []GitserverServiceClientPerforceProtectsForDepotFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientPerforceProtectsForDepotFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientPerforceProtectsForDepotFuncCall is an object that
// describes an invocation of method PerforceProtectsForDepot on an instance
// of MockGitserverServiceClient.
type GitserverServiceClientPerforceProtectsForDepotFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.PerforceProtectsForDepotRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.PerforceProtectsForDepotResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientPerforceProtectsForDepotFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientPerforceProtectsForDepotFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientPerforceProtectsForUserFunc describes the behavior
// when the PerforceProtectsForUser method of the parent
// MockGitserverServiceClient instance is invoked.
type GitserverServiceClientPerforceProtectsForUserFunc struct {
	defaultHook func(context.Context, *v1.PerforceProtectsForUserRequest, ...grpc.CallOption) (*v1.PerforceProtectsForUserResponse, error)
	hooks       []func(context.Context, *v1.PerforceProtectsForUserRequest, ...grpc.CallOption) (*v1.PerforceProtectsForUserResponse, error)
	history     []GitserverServiceClientPerforceProtectsForUserFuncCall
	mutex       sync.Mutex
}

// PerforceProtectsForUser delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockGitserverServiceClient) PerforceProtectsForUser(v0 context.Context, v1 *v1.PerforceProtectsForUserRequest, v2 ...grpc.CallOption) (*v1.PerforceProtectsForUserResponse, error) {
	r0, r1 := m.PerforceProtectsForUserFunc.nextHook()(v0, v1, v2...)
	m.PerforceProtectsForUserFunc.appendCall(GitserverServiceClientPerforceProtectsForUserFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// PerforceProtectsForUser method of the parent MockGitserverServiceClient
// instance is invoked and the hook queue is empty.
func (f *GitserverServiceClientPerforceProtectsForUserFunc) SetDefaultHook(hook func(context.Context, *v1.PerforceProtectsForUserRequest, ...grpc.CallOption) (*v1.PerforceProtectsForUserResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PerforceProtectsForUser method of the parent MockGitserverServiceClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverServiceClientPerforceProtectsForUserFunc) PushHook(hook func(context.Context, *v1.PerforceProtectsForUserRequest, ...grpc.CallOption) (*v1.PerforceProtectsForUserResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientPerforceProtectsForUserFunc) SetDefaultReturn(r0 *v1.PerforceProtectsForUserResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.PerforceProtectsForUserRequest, ...grpc.CallOption) (*v1.PerforceProtectsForUserResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientPerforceProtectsForUserFunc) PushReturn(r0 *v1.PerforceProtectsForUserResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.PerforceProtectsForUserRequest, ...grpc.CallOption) (*v1.PerforceProtectsForUserResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientPerforceProtectsForUserFunc) nextHook() func(context.Context, *v1.PerforceProtectsForUserRequest, ...grpc.CallOption) (*v1.PerforceProtectsForUserResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientPerforceProtectsForUserFunc) appendCall(r0 GitserverServiceClientPerforceProtectsForUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverServiceClientPerforceProtectsForUserFuncCall objects describing
// the invocations of this function.
func (f *GitserverServiceClientPerforceProtectsForUserFunc) History() []GitserverServiceClientPerforceProtectsForUserFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientPerforceProtectsForUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientPerforceProtectsForUserFuncCall is an object that
// describes an invocation of method PerforceProtectsForUser on an instance
// of MockGitserverServiceClient.
type GitserverServiceClientPerforceProtectsForUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.PerforceProtectsForUserRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.PerforceProtectsForUserResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientPerforceProtectsForUserFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientPerforceProtectsForUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientPerforceUsersFunc describes the behavior when the
// PerforceUsers method of the parent MockGitserverServiceClient instance is
// invoked.
type GitserverServiceClientPerforceUsersFunc struct {
	defaultHook func(context.Context, *v1.PerforceUsersRequest, ...grpc.CallOption) (*v1.PerforceUsersResponse, error)
	hooks       []func(context.Context, *v1.PerforceUsersRequest, ...grpc.CallOption) (*v1.PerforceUsersResponse, error)
	history     []GitserverServiceClientPerforceUsersFuncCall
	mutex       sync.Mutex
}

// PerforceUsers delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverServiceClient) PerforceUsers(v0 context.Context, v1 *v1.PerforceUsersRequest, v2 ...grpc.CallOption) (*v1.PerforceUsersResponse, error) {
	r0, r1 := m.PerforceUsersFunc.nextHook()(v0, v1, v2...)
	m.PerforceUsersFunc.appendCall(GitserverServiceClientPerforceUsersFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the PerforceUsers method
// of the parent MockGitserverServiceClient instance is invoked and the hook
// queue is empty.
func (f *GitserverServiceClientPerforceUsersFunc) SetDefaultHook(hook func(context.Context, *v1.PerforceUsersRequest, ...grpc.CallOption) (*v1.PerforceUsersResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PerforceUsers method of the parent MockGitserverServiceClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverServiceClientPerforceUsersFunc) PushHook(hook func(context.Context, *v1.PerforceUsersRequest, ...grpc.CallOption) (*v1.PerforceUsersResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientPerforceUsersFunc) SetDefaultReturn(r0 *v1.PerforceUsersResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.PerforceUsersRequest, ...grpc.CallOption) (*v1.PerforceUsersResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientPerforceUsersFunc) PushReturn(r0 *v1.PerforceUsersResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.PerforceUsersRequest, ...grpc.CallOption) (*v1.PerforceUsersResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientPerforceUsersFunc) nextHook() func(context.Context, *v1.PerforceUsersRequest, ...grpc.CallOption) (*v1.PerforceUsersResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientPerforceUsersFunc) appendCall(r0 GitserverServiceClientPerforceUsersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverServiceClientPerforceUsersFuncCall
// objects describing the invocations of this function.
func (f *GitserverServiceClientPerforceUsersFunc) History() []GitserverServiceClientPerforceUsersFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientPerforceUsersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientPerforceUsersFuncCall is an object that describes
// an invocation of method PerforceUsers on an instance of
// MockGitserverServiceClient.
type GitserverServiceClientPerforceUsersFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.PerforceUsersRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.PerforceUsersResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientPerforceUsersFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientPerforceUsersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientRawDiffFunc describes the behavior when the RawDiff
// method of the parent MockGitserverServiceClient instance is invoked.
type GitserverServiceClientRawDiffFunc struct {
	defaultHook func(context.Context, *v1.RawDiffRequest, ...grpc.CallOption) (v1.GitserverService_RawDiffClient, error)
	hooks       []func(context.Context, *v1.RawDiffRequest, ...grpc.CallOption) (v1.GitserverService_RawDiffClient, error)
	history     []GitserverServiceClientRawDiffFuncCall
	mutex       sync.Mutex
}

// RawDiff delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverServiceClient) RawDiff(v0 context.Context, v1 *v1.RawDiffRequest, v2 ...grpc.CallOption) (v1.GitserverService_RawDiffClient, error) {
	r0, r1 := m.RawDiffFunc.nextHook()(v0, v1, v2...)
	m.RawDiffFunc.appendCall(GitserverServiceClientRawDiffFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RawDiff method of
// the parent MockGitserverServiceClient instance is invoked and the hook
// queue is empty.
func (f *GitserverServiceClientRawDiffFunc) SetDefaultHook(hook func(context.Context, *v1.RawDiffRequest, ...grpc.CallOption) (v1.GitserverService_RawDiffClient, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RawDiff method of the parent MockGitserverServiceClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverServiceClientRawDiffFunc) PushHook(hook func(context.Context, *v1.RawDiffRequest, ...grpc.CallOption) (v1.GitserverService_RawDiffClient, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientRawDiffFunc) SetDefaultReturn(r0 v1.GitserverService_RawDiffClient, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.RawDiffRequest, ...grpc.CallOption) (v1.GitserverService_RawDiffClient, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientRawDiffFunc) PushReturn(r0 v1.GitserverService_RawDiffClient, r1 error) {
	f.PushHook(func(context.Context, *v1.RawDiffRequest, ...grpc.CallOption) (v1.GitserverService_RawDiffClient, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientRawDiffFunc) nextHook() func(context.Context, *v1.RawDiffRequest, ...grpc.CallOption) (v1.GitserverService_RawDiffClient, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientRawDiffFunc) appendCall(r0 GitserverServiceClientRawDiffFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverServiceClientRawDiffFuncCall
// objects describing the invocations of this function.
func (f *GitserverServiceClientRawDiffFunc) History() []GitserverServiceClientRawDiffFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientRawDiffFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientRawDiffFuncCall is an object that describes an
// invocation of method RawDiff on an instance of
// MockGitserverServiceClient.
type GitserverServiceClientRawDiffFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.RawDiffRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 v1.GitserverService_RawDiffClient
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientRawDiffFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientRawDiffFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientReadFileFunc describes the behavior when the
// ReadFile method of the parent MockGitserverServiceClient instance is
// invoked.
type GitserverServiceClientReadFileFunc struct {
	defaultHook func(context.Context, *v1.ReadFileRequest, ...grpc.CallOption) (v1.GitserverService_ReadFileClient, error)
	hooks       []func(context.Context, *v1.ReadFileRequest, ...grpc.CallOption) (v1.GitserverService_ReadFileClient, error)
	history     []GitserverServiceClientReadFileFuncCall
	mutex       sync.Mutex
}

// ReadFile delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverServiceClient) ReadFile(v0 context.Context, v1 *v1.ReadFileRequest, v2 ...grpc.CallOption) (v1.GitserverService_ReadFileClient, error) {
	r0, r1 := m.ReadFileFunc.nextHook()(v0, v1, v2...)
	m.ReadFileFunc.appendCall(GitserverServiceClientReadFileFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ReadFile method of
// the parent MockGitserverServiceClient instance is invoked and the hook
// queue is empty.
func (f *GitserverServiceClientReadFileFunc) SetDefaultHook(hook func(context.Context, *v1.ReadFileRequest, ...grpc.CallOption) (v1.GitserverService_ReadFileClient, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReadFile method of the parent MockGitserverServiceClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverServiceClientReadFileFunc) PushHook(hook func(context.Context, *v1.ReadFileRequest, ...grpc.CallOption) (v1.GitserverService_ReadFileClient, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientReadFileFunc) SetDefaultReturn(r0 v1.GitserverService_ReadFileClient, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.ReadFileRequest, ...grpc.CallOption) (v1.GitserverService_ReadFileClient, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientReadFileFunc) PushReturn(r0 v1.GitserverService_ReadFileClient, r1 error) {
	f.PushHook(func(context.Context, *v1.ReadFileRequest, ...grpc.CallOption) (v1.GitserverService_ReadFileClient, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientReadFileFunc) nextHook() func(context.Context, *v1.ReadFileRequest, ...grpc.CallOption) (v1.GitserverService_ReadFileClient, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientReadFileFunc) appendCall(r0 GitserverServiceClientReadFileFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverServiceClientReadFileFuncCall
// objects describing the invocations of this function.
func (f *GitserverServiceClientReadFileFunc) History() []GitserverServiceClientReadFileFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientReadFileFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientReadFileFuncCall is an object that describes an
// invocation of method ReadFile on an instance of
// MockGitserverServiceClient.
type GitserverServiceClientReadFileFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.ReadFileRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 v1.GitserverService_ReadFileClient
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientReadFileFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientReadFileFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientRepoCloneProgressFunc describes the behavior when
// the RepoCloneProgress method of the parent MockGitserverServiceClient
// instance is invoked.
type GitserverServiceClientRepoCloneProgressFunc struct {
	defaultHook func(context.Context, *v1.RepoCloneProgressRequest, ...grpc.CallOption) (*v1.RepoCloneProgressResponse, error)
	hooks       []func(context.Context, *v1.RepoCloneProgressRequest, ...grpc.CallOption) (*v1.RepoCloneProgressResponse, error)
	history     []GitserverServiceClientRepoCloneProgressFuncCall
	mutex       sync.Mutex
}

// RepoCloneProgress delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverServiceClient) RepoCloneProgress(v0 context.Context, v1 *v1.RepoCloneProgressRequest, v2 ...grpc.CallOption) (*v1.RepoCloneProgressResponse, error) {
	r0, r1 := m.RepoCloneProgressFunc.nextHook()(v0, v1, v2...)
	m.RepoCloneProgressFunc.appendCall(GitserverServiceClientRepoCloneProgressFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RepoCloneProgress
// method of the parent MockGitserverServiceClient instance is invoked and
// the hook queue is empty.
func (f *GitserverServiceClientRepoCloneProgressFunc) SetDefaultHook(hook func(context.Context, *v1.RepoCloneProgressRequest, ...grpc.CallOption) (*v1.RepoCloneProgressResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepoCloneProgress method of the parent MockGitserverServiceClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverServiceClientRepoCloneProgressFunc) PushHook(hook func(context.Context, *v1.RepoCloneProgressRequest, ...grpc.CallOption) (*v1.RepoCloneProgressResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientRepoCloneProgressFunc) SetDefaultReturn(r0 *v1.RepoCloneProgressResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.RepoCloneProgressRequest, ...grpc.CallOption) (*v1.RepoCloneProgressResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientRepoCloneProgressFunc) PushReturn(r0 *v1.RepoCloneProgressResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.RepoCloneProgressRequest, ...grpc.CallOption) (*v1.RepoCloneProgressResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientRepoCloneProgressFunc) nextHook() func(context.Context, *v1.RepoCloneProgressRequest, ...grpc.CallOption) (*v1.RepoCloneProgressResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientRepoCloneProgressFunc) appendCall(r0 GitserverServiceClientRepoCloneProgressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverServiceClientRepoCloneProgressFuncCall objects describing the
// invocations of this function.
func (f *GitserverServiceClientRepoCloneProgressFunc) History() []GitserverServiceClientRepoCloneProgressFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientRepoCloneProgressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientRepoCloneProgressFuncCall is an object that
// describes an invocation of method RepoCloneProgress on an instance of
// MockGitserverServiceClient.
type GitserverServiceClientRepoCloneProgressFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.RepoCloneProgressRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.RepoCloneProgressResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientRepoCloneProgressFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientRepoCloneProgressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientResolveRevisionFunc describes the behavior when the
// ResolveRevision method of the parent MockGitserverServiceClient instance
// is invoked.
type GitserverServiceClientResolveRevisionFunc struct {
	defaultHook func(context.Context, *v1.ResolveRevisionRequest, ...grpc.CallOption) (*v1.ResolveRevisionResponse, error)
	hooks       []func(context.Context, *v1.ResolveRevisionRequest, ...grpc.CallOption) (*v1.ResolveRevisionResponse, error)
	history     []GitserverServiceClientResolveRevisionFuncCall
	mutex       sync.Mutex
}

// ResolveRevision delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitserverServiceClient) ResolveRevision(v0 context.Context, v1 *v1.ResolveRevisionRequest, v2 ...grpc.CallOption) (*v1.ResolveRevisionResponse, error) {
	r0, r1 := m.ResolveRevisionFunc.nextHook()(v0, v1, v2...)
	m.ResolveRevisionFunc.appendCall(GitserverServiceClientResolveRevisionFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ResolveRevision
// method of the parent MockGitserverServiceClient instance is invoked and
// the hook queue is empty.
func (f *GitserverServiceClientResolveRevisionFunc) SetDefaultHook(hook func(context.Context, *v1.ResolveRevisionRequest, ...grpc.CallOption) (*v1.ResolveRevisionResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ResolveRevision method of the parent MockGitserverServiceClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverServiceClientResolveRevisionFunc) PushHook(hook func(context.Context, *v1.ResolveRevisionRequest, ...grpc.CallOption) (*v1.ResolveRevisionResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientResolveRevisionFunc) SetDefaultReturn(r0 *v1.ResolveRevisionResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.ResolveRevisionRequest, ...grpc.CallOption) (*v1.ResolveRevisionResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientResolveRevisionFunc) PushReturn(r0 *v1.ResolveRevisionResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.ResolveRevisionRequest, ...grpc.CallOption) (*v1.ResolveRevisionResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientResolveRevisionFunc) nextHook() func(context.Context, *v1.ResolveRevisionRequest, ...grpc.CallOption) (*v1.ResolveRevisionResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientResolveRevisionFunc) appendCall(r0 GitserverServiceClientResolveRevisionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverServiceClientResolveRevisionFuncCall objects describing the
// invocations of this function.
func (f *GitserverServiceClientResolveRevisionFunc) History() []GitserverServiceClientResolveRevisionFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientResolveRevisionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientResolveRevisionFuncCall is an object that describes
// an invocation of method ResolveRevision on an instance of
// MockGitserverServiceClient.
type GitserverServiceClientResolveRevisionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.ResolveRevisionRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.ResolveRevisionResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientResolveRevisionFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientResolveRevisionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientRevAtTimeFunc describes the behavior when the
// RevAtTime method of the parent MockGitserverServiceClient instance is
// invoked.
type GitserverServiceClientRevAtTimeFunc struct {
	defaultHook func(context.Context, *v1.RevAtTimeRequest, ...grpc.CallOption) (*v1.RevAtTimeResponse, error)
	hooks       []func(context.Context, *v1.RevAtTimeRequest, ...grpc.CallOption) (*v1.RevAtTimeResponse, error)
	history     []GitserverServiceClientRevAtTimeFuncCall
	mutex       sync.Mutex
}

// RevAtTime delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverServiceClient) RevAtTime(v0 context.Context, v1 *v1.RevAtTimeRequest, v2 ...grpc.CallOption) (*v1.RevAtTimeResponse, error) {
	r0, r1 := m.RevAtTimeFunc.nextHook()(v0, v1, v2...)
	m.RevAtTimeFunc.appendCall(GitserverServiceClientRevAtTimeFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RevAtTime method of
// the parent MockGitserverServiceClient instance is invoked and the hook
// queue is empty.
func (f *GitserverServiceClientRevAtTimeFunc) SetDefaultHook(hook func(context.Context, *v1.RevAtTimeRequest, ...grpc.CallOption) (*v1.RevAtTimeResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RevAtTime method of the parent MockGitserverServiceClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverServiceClientRevAtTimeFunc) PushHook(hook func(context.Context, *v1.RevAtTimeRequest, ...grpc.CallOption) (*v1.RevAtTimeResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientRevAtTimeFunc) SetDefaultReturn(r0 *v1.RevAtTimeResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.RevAtTimeRequest, ...grpc.CallOption) (*v1.RevAtTimeResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientRevAtTimeFunc) PushReturn(r0 *v1.RevAtTimeResponse, r1 error) {
	f.PushHook(func(context.Context, *v1.RevAtTimeRequest, ...grpc.CallOption) (*v1.RevAtTimeResponse, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientRevAtTimeFunc) nextHook() func(context.Context, *v1.RevAtTimeRequest, ...grpc.CallOption) (*v1.RevAtTimeResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientRevAtTimeFunc) appendCall(r0 GitserverServiceClientRevAtTimeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverServiceClientRevAtTimeFuncCall
// objects describing the invocations of this function.
func (f *GitserverServiceClientRevAtTimeFunc) History() []GitserverServiceClientRevAtTimeFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientRevAtTimeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientRevAtTimeFuncCall is an object that describes an
// invocation of method RevAtTime on an instance of
// MockGitserverServiceClient.
type GitserverServiceClientRevAtTimeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.RevAtTimeRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.RevAtTimeResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientRevAtTimeFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientRevAtTimeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverServiceClientSearchFunc describes the behavior when the Search
// method of the parent MockGitserverServiceClient instance is invoked.
type GitserverServiceClientSearchFunc struct {
	defaultHook func(context.Context, *v1.SearchRequest, ...grpc.CallOption) (v1.GitserverService_SearchClient, error)
	hooks       []func(context.Context, *v1.SearchRequest, ...grpc.CallOption) (v1.GitserverService_SearchClient, error)
	history     []GitserverServiceClientSearchFuncCall
	mutex       sync.Mutex
}

// Search delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverServiceClient) Search(v0 context.Context, v1 *v1.SearchRequest, v2 ...grpc.CallOption) (v1.GitserverService_SearchClient, error) {
	r0, r1 := m.SearchFunc.nextHook()(v0, v1, v2...)
	m.SearchFunc.appendCall(GitserverServiceClientSearchFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Search method of the
// parent MockGitserverServiceClient instance is invoked and the hook queue
// is empty.
func (f *GitserverServiceClientSearchFunc) SetDefaultHook(hook func(context.Context, *v1.SearchRequest, ...grpc.CallOption) (v1.GitserverService_SearchClient, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Search method of the parent MockGitserverServiceClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GitserverServiceClientSearchFunc) PushHook(hook func(context.Context, *v1.SearchRequest, ...grpc.CallOption) (v1.GitserverService_SearchClient, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverServiceClientSearchFunc) SetDefaultReturn(r0 v1.GitserverService_SearchClient, r1 error) {
	f.SetDefaultHook(func(context.Context, *v1.SearchRequest, ...grpc.CallOption) (v1.GitserverService_SearchClient, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverServiceClientSearchFunc) PushReturn(r0 v1.GitserverService_SearchClient, r1 error) {
	f.PushHook(func(context.Context, *v1.SearchRequest, ...grpc.CallOption) (v1.GitserverService_SearchClient, error) {
		return r0, r1
	})
}

func (f *GitserverServiceClientSearchFunc) nextHook() func(context.Context, *v1.SearchRequest, ...grpc.CallOption) (v1.GitserverService_SearchClient, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverServiceClientSearchFunc) appendCall(r0 GitserverServiceClientSearchFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverServiceClientSearchFuncCall
// objects describing the invocations of this function.
func (f *GitserverServiceClientSearchFunc) History() []GitserverServiceClientSearchFuncCall {
	f.mutex.Lock()
	history := make([]GitserverServiceClientSearchFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverServiceClientSearchFuncCall is an object that describes an
// invocation of method Search on an instance of MockGitserverServiceClient.
type GitserverServiceClientSearchFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v1.SearchRequest
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []grpc.CallOption
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 v1.GitserverService_SearchClient
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c GitserverServiceClientSearchFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverServiceClientSearchFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockGitserverService_ArchiveClient is a mock implementation of the
// GitserverService_ArchiveClient interface (from the package
// github.com/sourcegraph/sourcegraph/internal/gitserver/v1) used for unit
// testing.
type MockGitserverService_ArchiveClient struct {
	// CloseSendFunc is an instance of a mock function object controlling
	// the behavior of the method CloseSend.
	CloseSendFunc *GitserverService_ArchiveClientCloseSendFunc
	// ContextFunc is an instance of a mock function object controlling the
	// behavior of the method Context.
	ContextFunc *GitserverService_ArchiveClientContextFunc
	// HeaderFunc is an instance of a mock function object controlling the
	// behavior of the method Header.
	HeaderFunc *GitserverService_ArchiveClientHeaderFunc
	// RecvFunc is an instance of a mock function object controlling the
	// behavior of the method Recv.
	RecvFunc *GitserverService_ArchiveClientRecvFunc
	// RecvMsgFunc is an instance of a mock function object controlling the
	// behavior of the method RecvMsg.
	RecvMsgFunc *GitserverService_ArchiveClientRecvMsgFunc
	// SendMsgFunc is an instance of a mock function object controlling the
	// behavior of the method SendMsg.
	SendMsgFunc *GitserverService_ArchiveClientSendMsgFunc
	// TrailerFunc is an instance of a mock function object controlling the
	// behavior of the method Trailer.
	TrailerFunc *GitserverService_ArchiveClientTrailerFunc
}

// NewMockGitserverService_ArchiveClient creates a new mock of the
// GitserverService_ArchiveClient interface. All methods return zero values
// for all results, unless overwritten.
func NewMockGitserverService_ArchiveClient() *MockGitserverService_ArchiveClient {
	return &MockGitserverService_ArchiveClient{
		CloseSendFunc: &GitserverService_ArchiveClientCloseSendFunc{
			defaultHook: func() (r0 error) {
				return
			},
		},
		ContextFunc: &GitserverService_ArchiveClientContextFunc{
			defaultHook: func() (r0 context.Context) {
				return
			},
		},
		HeaderFunc: &GitserverService_ArchiveClientHeaderFunc{
			defaultHook: func() (r0 metadata.MD, r1 error) {
				return
			},
		},
		RecvFunc: &GitserverService_ArchiveClientRecvFunc{
			defaultHook: func() (r0 *v1.ArchiveResponse, r1 error) {
				return
			},
		},
		RecvMsgFunc: &GitserverService_ArchiveClientRecvMsgFunc{
			defaultHook: func(interface{}) (r0 error) {
				return
			},
		},
		SendMsgFunc: &GitserverService_ArchiveClientSendMsgFunc{
			defaultHook: func(interface{}) (r0 error) {
				return
			},
		},
		TrailerFunc: &GitserverService_ArchiveClientTrailerFunc{
			defaultHook: func() (r0 metadata.MD) {
				return
			},
		},
	}
}

// NewStrictMockGitserverService_ArchiveClient creates a new mock of the
// GitserverService_ArchiveClient interface. All methods panic on
// invocation, unless overwritten.
func NewStrictMockGitserverService_ArchiveClient() *MockGitserverService_ArchiveClient {
	return &MockGitserverService_ArchiveClient{
		CloseSendFunc: &GitserverService_ArchiveClientCloseSendFunc{
			defaultHook: func() error {
				panic("unexpected invocation of MockGitserverService_ArchiveClient.CloseSend")
			},
		},
		ContextFunc: &GitserverService_ArchiveClientContextFunc{
			defaultHook: func() context.Context {
				panic("unexpected invocation of MockGitserverService_ArchiveClient.Context")
			},
		},
		HeaderFunc: &GitserverService_ArchiveClientHeaderFunc{
			defaultHook: func() (metadata.MD, error) {
				panic("unexpected invocation of MockGitserverService_ArchiveClient.Header")
			},
		},
		RecvFunc: &GitserverService_ArchiveClientRecvFunc{
			defaultHook: func() (*v1.ArchiveResponse, error) {
				panic("unexpected invocation of MockGitserverService_ArchiveClient.Recv")
			},
		},
		RecvMsgFunc: &GitserverService_ArchiveClientRecvMsgFunc{
			defaultHook: func(interface{}) error {
				panic("unexpected invocation of MockGitserverService_ArchiveClient.RecvMsg")
			},
		},
		SendMsgFunc: &GitserverService_ArchiveClientSendMsgFunc{
			defaultHook: func(interface{}) error {
				panic("unexpected invocation of MockGitserverService_ArchiveClient.SendMsg")
			},
		},
		TrailerFunc: &GitserverService_ArchiveClientTrailerFunc{
			defaultHook: func() metadata.MD {
				panic("unexpected invocation of MockGitserverService_ArchiveClient.Trailer")
			},
		},
	}
}

// NewMockGitserverService_ArchiveClientFrom creates a new mock of the
// MockGitserverService_ArchiveClient interface. All methods delegate to the
// given implementation, unless overwritten.
func NewMockGitserverService_ArchiveClientFrom(i v1.GitserverService_ArchiveClient) *MockGitserverService_ArchiveClient {
	return &MockGitserverService_ArchiveClient{
		CloseSendFunc: &GitserverService_ArchiveClientCloseSendFunc{
			defaultHook: i.CloseSend,
		},
		ContextFunc: &GitserverService_ArchiveClientContextFunc{
			defaultHook: i.Context,
		},
		HeaderFunc: &GitserverService_ArchiveClientHeaderFunc{
			defaultHook: i.Header,
		},
		RecvFunc: &GitserverService_ArchiveClientRecvFunc{
			defaultHook: i.Recv,
		},
		RecvMsgFunc: &GitserverService_ArchiveClientRecvMsgFunc{
			defaultHook: i.RecvMsg,
		},
		SendMsgFunc: &GitserverService_ArchiveClientSendMsgFunc{
			defaultHook: i.SendMsg,
		},
		TrailerFunc: &GitserverService_ArchiveClientTrailerFunc{
			defaultHook: i.Trailer,
		},
	}
}

// GitserverService_ArchiveClientCloseSendFunc describes the behavior when
// the CloseSend method of the parent MockGitserverService_ArchiveClient
// instance is invoked.
type GitserverService_ArchiveClientCloseSendFunc struct {
	defaultHook func() error
	hooks       []func() error
	history     []GitserverService_ArchiveClientCloseSendFuncCall
	mutex       sync.Mutex
}

// CloseSend delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ArchiveClient) CloseSend() error {
	r0 := m.CloseSendFunc.nextHook()()
	m.CloseSendFunc.appendCall(GitserverService_ArchiveClientCloseSendFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the CloseSend method of
// the parent MockGitserverService_ArchiveClient instance is invoked and the
// hook queue is empty.
func (f *GitserverService_ArchiveClientCloseSendFunc) SetDefaultHook(hook func() error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CloseSend method of the parent MockGitserverService_ArchiveClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverService_ArchiveClientCloseSendFunc) PushHook(hook func() error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ArchiveClientCloseSendFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func() error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ArchiveClientCloseSendFunc) PushReturn(r0 error) {
	f.PushHook(func() error {
		return r0
	})
}

func (f *GitserverService_ArchiveClientCloseSendFunc) nextHook() func() error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ArchiveClientCloseSendFunc) appendCall(r0 GitserverService_ArchiveClientCloseSendFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ArchiveClientCloseSendFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ArchiveClientCloseSendFunc) History() []GitserverService_ArchiveClientCloseSendFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ArchiveClientCloseSendFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ArchiveClientCloseSendFuncCall is an object that
// describes an invocation of method CloseSend on an instance of
// MockGitserverService_ArchiveClient.
type GitserverService_ArchiveClientCloseSendFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ArchiveClientCloseSendFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ArchiveClientCloseSendFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ArchiveClientContextFunc describes the behavior when the
// Context method of the parent MockGitserverService_ArchiveClient instance
// is invoked.
type GitserverService_ArchiveClientContextFunc struct {
	defaultHook func() context.Context
	hooks       []func() context.Context
	history     []GitserverService_ArchiveClientContextFuncCall
	mutex       sync.Mutex
}

// Context delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ArchiveClient) Context() context.Context {
	r0 := m.ContextFunc.nextHook()()
	m.ContextFunc.appendCall(GitserverService_ArchiveClientContextFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Context method of
// the parent MockGitserverService_ArchiveClient instance is invoked and the
// hook queue is empty.
func (f *GitserverService_ArchiveClientContextFunc) SetDefaultHook(hook func() context.Context) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Context method of the parent MockGitserverService_ArchiveClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ArchiveClientContextFunc) PushHook(hook func() context.Context) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ArchiveClientContextFunc) SetDefaultReturn(r0 context.Context) {
	f.SetDefaultHook(func() context.Context {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ArchiveClientContextFunc) PushReturn(r0 context.Context) {
	f.PushHook(func() context.Context {
		return r0
	})
}

func (f *GitserverService_ArchiveClientContextFunc) nextHook() func() context.Context {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ArchiveClientContextFunc) appendCall(r0 GitserverService_ArchiveClientContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ArchiveClientContextFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ArchiveClientContextFunc) History() []GitserverService_ArchiveClientContextFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ArchiveClientContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ArchiveClientContextFuncCall is an object that describes
// an invocation of method Context on an instance of
// MockGitserverService_ArchiveClient.
type GitserverService_ArchiveClientContextFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 context.Context
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ArchiveClientContextFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ArchiveClientContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ArchiveClientHeaderFunc describes the behavior when the
// Header method of the parent MockGitserverService_ArchiveClient instance
// is invoked.
type GitserverService_ArchiveClientHeaderFunc struct {
	defaultHook func() (metadata.MD, error)
	hooks       []func() (metadata.MD, error)
	history     []GitserverService_ArchiveClientHeaderFuncCall
	mutex       sync.Mutex
}

// Header delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ArchiveClient) Header() (metadata.MD, error) {
	r0, r1 := m.HeaderFunc.nextHook()()
	m.HeaderFunc.appendCall(GitserverService_ArchiveClientHeaderFuncCall{r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Header method of the
// parent MockGitserverService_ArchiveClient instance is invoked and the
// hook queue is empty.
func (f *GitserverService_ArchiveClientHeaderFunc) SetDefaultHook(hook func() (metadata.MD, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Header method of the parent MockGitserverService_ArchiveClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ArchiveClientHeaderFunc) PushHook(hook func() (metadata.MD, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ArchiveClientHeaderFunc) SetDefaultReturn(r0 metadata.MD, r1 error) {
	f.SetDefaultHook(func() (metadata.MD, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ArchiveClientHeaderFunc) PushReturn(r0 metadata.MD, r1 error) {
	f.PushHook(func() (metadata.MD, error) {
		return r0, r1
	})
}

func (f *GitserverService_ArchiveClientHeaderFunc) nextHook() func() (metadata.MD, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ArchiveClientHeaderFunc) appendCall(r0 GitserverService_ArchiveClientHeaderFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ArchiveClientHeaderFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ArchiveClientHeaderFunc) History() []GitserverService_ArchiveClientHeaderFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ArchiveClientHeaderFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ArchiveClientHeaderFuncCall is an object that describes
// an invocation of method Header on an instance of
// MockGitserverService_ArchiveClient.
type GitserverService_ArchiveClientHeaderFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 metadata.MD
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ArchiveClientHeaderFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ArchiveClientHeaderFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverService_ArchiveClientRecvFunc describes the behavior when the
// Recv method of the parent MockGitserverService_ArchiveClient instance is
// invoked.
type GitserverService_ArchiveClientRecvFunc struct {
	defaultHook func() (*v1.ArchiveResponse, error)
	hooks       []func() (*v1.ArchiveResponse, error)
	history     []GitserverService_ArchiveClientRecvFuncCall
	mutex       sync.Mutex
}

// Recv delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ArchiveClient) Recv() (*v1.ArchiveResponse, error) {
	r0, r1 := m.RecvFunc.nextHook()()
	m.RecvFunc.appendCall(GitserverService_ArchiveClientRecvFuncCall{r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Recv method of the
// parent MockGitserverService_ArchiveClient instance is invoked and the
// hook queue is empty.
func (f *GitserverService_ArchiveClientRecvFunc) SetDefaultHook(hook func() (*v1.ArchiveResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Recv method of the parent MockGitserverService_ArchiveClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ArchiveClientRecvFunc) PushHook(hook func() (*v1.ArchiveResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ArchiveClientRecvFunc) SetDefaultReturn(r0 *v1.ArchiveResponse, r1 error) {
	f.SetDefaultHook(func() (*v1.ArchiveResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ArchiveClientRecvFunc) PushReturn(r0 *v1.ArchiveResponse, r1 error) {
	f.PushHook(func() (*v1.ArchiveResponse, error) {
		return r0, r1
	})
}

func (f *GitserverService_ArchiveClientRecvFunc) nextHook() func() (*v1.ArchiveResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ArchiveClientRecvFunc) appendCall(r0 GitserverService_ArchiveClientRecvFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverService_ArchiveClientRecvFuncCall
// objects describing the invocations of this function.
func (f *GitserverService_ArchiveClientRecvFunc) History() []GitserverService_ArchiveClientRecvFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ArchiveClientRecvFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ArchiveClientRecvFuncCall is an object that describes an
// invocation of method Recv on an instance of
// MockGitserverService_ArchiveClient.
type GitserverService_ArchiveClientRecvFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.ArchiveResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ArchiveClientRecvFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ArchiveClientRecvFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverService_ArchiveClientRecvMsgFunc describes the behavior when the
// RecvMsg method of the parent MockGitserverService_ArchiveClient instance
// is invoked.
type GitserverService_ArchiveClientRecvMsgFunc struct {
	defaultHook func(interface{}) error
	hooks       []func(interface{}) error
	history     []GitserverService_ArchiveClientRecvMsgFuncCall
	mutex       sync.Mutex
}

// RecvMsg delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ArchiveClient) RecvMsg(v0 interface{}) error {
	r0 := m.RecvMsgFunc.nextHook()(v0)
	m.RecvMsgFunc.appendCall(GitserverService_ArchiveClientRecvMsgFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the RecvMsg method of
// the parent MockGitserverService_ArchiveClient instance is invoked and the
// hook queue is empty.
func (f *GitserverService_ArchiveClientRecvMsgFunc) SetDefaultHook(hook func(interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RecvMsg method of the parent MockGitserverService_ArchiveClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ArchiveClientRecvMsgFunc) PushHook(hook func(interface{}) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ArchiveClientRecvMsgFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(interface{}) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ArchiveClientRecvMsgFunc) PushReturn(r0 error) {
	f.PushHook(func(interface{}) error {
		return r0
	})
}

func (f *GitserverService_ArchiveClientRecvMsgFunc) nextHook() func(interface{}) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ArchiveClientRecvMsgFunc) appendCall(r0 GitserverService_ArchiveClientRecvMsgFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ArchiveClientRecvMsgFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ArchiveClientRecvMsgFunc) History() []GitserverService_ArchiveClientRecvMsgFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ArchiveClientRecvMsgFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ArchiveClientRecvMsgFuncCall is an object that describes
// an invocation of method RecvMsg on an instance of
// MockGitserverService_ArchiveClient.
type GitserverService_ArchiveClientRecvMsgFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ArchiveClientRecvMsgFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ArchiveClientRecvMsgFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ArchiveClientSendMsgFunc describes the behavior when the
// SendMsg method of the parent MockGitserverService_ArchiveClient instance
// is invoked.
type GitserverService_ArchiveClientSendMsgFunc struct {
	defaultHook func(interface{}) error
	hooks       []func(interface{}) error
	history     []GitserverService_ArchiveClientSendMsgFuncCall
	mutex       sync.Mutex
}

// SendMsg delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ArchiveClient) SendMsg(v0 interface{}) error {
	r0 := m.SendMsgFunc.nextHook()(v0)
	m.SendMsgFunc.appendCall(GitserverService_ArchiveClientSendMsgFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SendMsg method of
// the parent MockGitserverService_ArchiveClient instance is invoked and the
// hook queue is empty.
func (f *GitserverService_ArchiveClientSendMsgFunc) SetDefaultHook(hook func(interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SendMsg method of the parent MockGitserverService_ArchiveClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ArchiveClientSendMsgFunc) PushHook(hook func(interface{}) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ArchiveClientSendMsgFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(interface{}) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ArchiveClientSendMsgFunc) PushReturn(r0 error) {
	f.PushHook(func(interface{}) error {
		return r0
	})
}

func (f *GitserverService_ArchiveClientSendMsgFunc) nextHook() func(interface{}) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ArchiveClientSendMsgFunc) appendCall(r0 GitserverService_ArchiveClientSendMsgFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ArchiveClientSendMsgFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ArchiveClientSendMsgFunc) History() []GitserverService_ArchiveClientSendMsgFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ArchiveClientSendMsgFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ArchiveClientSendMsgFuncCall is an object that describes
// an invocation of method SendMsg on an instance of
// MockGitserverService_ArchiveClient.
type GitserverService_ArchiveClientSendMsgFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ArchiveClientSendMsgFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ArchiveClientSendMsgFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ArchiveClientTrailerFunc describes the behavior when the
// Trailer method of the parent MockGitserverService_ArchiveClient instance
// is invoked.
type GitserverService_ArchiveClientTrailerFunc struct {
	defaultHook func() metadata.MD
	hooks       []func() metadata.MD
	history     []GitserverService_ArchiveClientTrailerFuncCall
	mutex       sync.Mutex
}

// Trailer delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ArchiveClient) Trailer() metadata.MD {
	r0 := m.TrailerFunc.nextHook()()
	m.TrailerFunc.appendCall(GitserverService_ArchiveClientTrailerFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Trailer method of
// the parent MockGitserverService_ArchiveClient instance is invoked and the
// hook queue is empty.
func (f *GitserverService_ArchiveClientTrailerFunc) SetDefaultHook(hook func() metadata.MD) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Trailer method of the parent MockGitserverService_ArchiveClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ArchiveClientTrailerFunc) PushHook(hook func() metadata.MD) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ArchiveClientTrailerFunc) SetDefaultReturn(r0 metadata.MD) {
	f.SetDefaultHook(func() metadata.MD {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ArchiveClientTrailerFunc) PushReturn(r0 metadata.MD) {
	f.PushHook(func() metadata.MD {
		return r0
	})
}

func (f *GitserverService_ArchiveClientTrailerFunc) nextHook() func() metadata.MD {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ArchiveClientTrailerFunc) appendCall(r0 GitserverService_ArchiveClientTrailerFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ArchiveClientTrailerFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ArchiveClientTrailerFunc) History() []GitserverService_ArchiveClientTrailerFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ArchiveClientTrailerFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ArchiveClientTrailerFuncCall is an object that describes
// an invocation of method Trailer on an instance of
// MockGitserverService_ArchiveClient.
type GitserverService_ArchiveClientTrailerFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 metadata.MD
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ArchiveClientTrailerFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ArchiveClientTrailerFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockGitserverService_ArchiveServer is a mock implementation of the
// GitserverService_ArchiveServer interface (from the package
// github.com/sourcegraph/sourcegraph/internal/gitserver/v1) used for unit
// testing.
type MockGitserverService_ArchiveServer struct {
	// ContextFunc is an instance of a mock function object controlling the
	// behavior of the method Context.
	ContextFunc *GitserverService_ArchiveServerContextFunc
	// RecvMsgFunc is an instance of a mock function object controlling the
	// behavior of the method RecvMsg.
	RecvMsgFunc *GitserverService_ArchiveServerRecvMsgFunc
	// SendFunc is an instance of a mock function object controlling the
	// behavior of the method Send.
	SendFunc *GitserverService_ArchiveServerSendFunc
	// SendHeaderFunc is an instance of a mock function object controlling
	// the behavior of the method SendHeader.
	SendHeaderFunc *GitserverService_ArchiveServerSendHeaderFunc
	// SendMsgFunc is an instance of a mock function object controlling the
	// behavior of the method SendMsg.
	SendMsgFunc *GitserverService_ArchiveServerSendMsgFunc
	// SetHeaderFunc is an instance of a mock function object controlling
	// the behavior of the method SetHeader.
	SetHeaderFunc *GitserverService_ArchiveServerSetHeaderFunc
	// SetTrailerFunc is an instance of a mock function object controlling
	// the behavior of the method SetTrailer.
	SetTrailerFunc *GitserverService_ArchiveServerSetTrailerFunc
}

// NewMockGitserverService_ArchiveServer creates a new mock of the
// GitserverService_ArchiveServer interface. All methods return zero values
// for all results, unless overwritten.
func NewMockGitserverService_ArchiveServer() *MockGitserverService_ArchiveServer {
	return &MockGitserverService_ArchiveServer{
		ContextFunc: &GitserverService_ArchiveServerContextFunc{
			defaultHook: func() (r0 context.Context) {
				return
			},
		},
		RecvMsgFunc: &GitserverService_ArchiveServerRecvMsgFunc{
			defaultHook: func(interface{}) (r0 error) {
				return
			},
		},
		SendFunc: &GitserverService_ArchiveServerSendFunc{
			defaultHook: func(*v1.ArchiveResponse) (r0 error) {
				return
			},
		},
		SendHeaderFunc: &GitserverService_ArchiveServerSendHeaderFunc{
			defaultHook: func(metadata.MD) (r0 error) {
				return
			},
		},
		SendMsgFunc: &GitserverService_ArchiveServerSendMsgFunc{
			defaultHook: func(interface{}) (r0 error) {
				return
			},
		},
		SetHeaderFunc: &GitserverService_ArchiveServerSetHeaderFunc{
			defaultHook: func(metadata.MD) (r0 error) {
				return
			},
		},
		SetTrailerFunc: &GitserverService_ArchiveServerSetTrailerFunc{
			defaultHook: func(metadata.MD) {
				return
			},
		},
	}
}

// NewStrictMockGitserverService_ArchiveServer creates a new mock of the
// GitserverService_ArchiveServer interface. All methods panic on
// invocation, unless overwritten.
func NewStrictMockGitserverService_ArchiveServer() *MockGitserverService_ArchiveServer {
	return &MockGitserverService_ArchiveServer{
		ContextFunc: &GitserverService_ArchiveServerContextFunc{
			defaultHook: func() context.Context {
				panic("unexpected invocation of MockGitserverService_ArchiveServer.Context")
			},
		},
		RecvMsgFunc: &GitserverService_ArchiveServerRecvMsgFunc{
			defaultHook: func(interface{}) error {
				panic("unexpected invocation of MockGitserverService_ArchiveServer.RecvMsg")
			},
		},
		SendFunc: &GitserverService_ArchiveServerSendFunc{
			defaultHook: func(*v1.ArchiveResponse) error {
				panic("unexpected invocation of MockGitserverService_ArchiveServer.Send")
			},
		},
		SendHeaderFunc: &GitserverService_ArchiveServerSendHeaderFunc{
			defaultHook: func(metadata.MD) error {
				panic("unexpected invocation of MockGitserverService_ArchiveServer.SendHeader")
			},
		},
		SendMsgFunc: &GitserverService_ArchiveServerSendMsgFunc{
			defaultHook: func(interface{}) error {
				panic("unexpected invocation of MockGitserverService_ArchiveServer.SendMsg")
			},
		},
		SetHeaderFunc: &GitserverService_ArchiveServerSetHeaderFunc{
			defaultHook: func(metadata.MD) error {
				panic("unexpected invocation of MockGitserverService_ArchiveServer.SetHeader")
			},
		},
		SetTrailerFunc: &GitserverService_ArchiveServerSetTrailerFunc{
			defaultHook: func(metadata.MD) {
				panic("unexpected invocation of MockGitserverService_ArchiveServer.SetTrailer")
			},
		},
	}
}

// NewMockGitserverService_ArchiveServerFrom creates a new mock of the
// MockGitserverService_ArchiveServer interface. All methods delegate to the
// given implementation, unless overwritten.
func NewMockGitserverService_ArchiveServerFrom(i v1.GitserverService_ArchiveServer) *MockGitserverService_ArchiveServer {
	return &MockGitserverService_ArchiveServer{
		ContextFunc: &GitserverService_ArchiveServerContextFunc{
			defaultHook: i.Context,
		},
		RecvMsgFunc: &GitserverService_ArchiveServerRecvMsgFunc{
			defaultHook: i.RecvMsg,
		},
		SendFunc: &GitserverService_ArchiveServerSendFunc{
			defaultHook: i.Send,
		},
		SendHeaderFunc: &GitserverService_ArchiveServerSendHeaderFunc{
			defaultHook: i.SendHeader,
		},
		SendMsgFunc: &GitserverService_ArchiveServerSendMsgFunc{
			defaultHook: i.SendMsg,
		},
		SetHeaderFunc: &GitserverService_ArchiveServerSetHeaderFunc{
			defaultHook: i.SetHeader,
		},
		SetTrailerFunc: &GitserverService_ArchiveServerSetTrailerFunc{
			defaultHook: i.SetTrailer,
		},
	}
}

// GitserverService_ArchiveServerContextFunc describes the behavior when the
// Context method of the parent MockGitserverService_ArchiveServer instance
// is invoked.
type GitserverService_ArchiveServerContextFunc struct {
	defaultHook func() context.Context
	hooks       []func() context.Context
	history     []GitserverService_ArchiveServerContextFuncCall
	mutex       sync.Mutex
}

// Context delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ArchiveServer) Context() context.Context {
	r0 := m.ContextFunc.nextHook()()
	m.ContextFunc.appendCall(GitserverService_ArchiveServerContextFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Context method of
// the parent MockGitserverService_ArchiveServer instance is invoked and the
// hook queue is empty.
func (f *GitserverService_ArchiveServerContextFunc) SetDefaultHook(hook func() context.Context) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Context method of the parent MockGitserverService_ArchiveServer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ArchiveServerContextFunc) PushHook(hook func() context.Context) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ArchiveServerContextFunc) SetDefaultReturn(r0 context.Context) {
	f.SetDefaultHook(func() context.Context {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ArchiveServerContextFunc) PushReturn(r0 context.Context) {
	f.PushHook(func() context.Context {
		return r0
	})
}

func (f *GitserverService_ArchiveServerContextFunc) nextHook() func() context.Context {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ArchiveServerContextFunc) appendCall(r0 GitserverService_ArchiveServerContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ArchiveServerContextFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ArchiveServerContextFunc) History() []GitserverService_ArchiveServerContextFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ArchiveServerContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ArchiveServerContextFuncCall is an object that describes
// an invocation of method Context on an instance of
// MockGitserverService_ArchiveServer.
type GitserverService_ArchiveServerContextFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 context.Context
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ArchiveServerContextFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ArchiveServerContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ArchiveServerRecvMsgFunc describes the behavior when the
// RecvMsg method of the parent MockGitserverService_ArchiveServer instance
// is invoked.
type GitserverService_ArchiveServerRecvMsgFunc struct {
	defaultHook func(interface{}) error
	hooks       []func(interface{}) error
	history     []GitserverService_ArchiveServerRecvMsgFuncCall
	mutex       sync.Mutex
}

// RecvMsg delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ArchiveServer) RecvMsg(v0 interface{}) error {
	r0 := m.RecvMsgFunc.nextHook()(v0)
	m.RecvMsgFunc.appendCall(GitserverService_ArchiveServerRecvMsgFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the RecvMsg method of
// the parent MockGitserverService_ArchiveServer instance is invoked and the
// hook queue is empty.
func (f *GitserverService_ArchiveServerRecvMsgFunc) SetDefaultHook(hook func(interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RecvMsg method of the parent MockGitserverService_ArchiveServer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ArchiveServerRecvMsgFunc) PushHook(hook func(interface{}) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ArchiveServerRecvMsgFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(interface{}) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ArchiveServerRecvMsgFunc) PushReturn(r0 error) {
	f.PushHook(func(interface{}) error {
		return r0
	})
}

func (f *GitserverService_ArchiveServerRecvMsgFunc) nextHook() func(interface{}) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ArchiveServerRecvMsgFunc) appendCall(r0 GitserverService_ArchiveServerRecvMsgFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ArchiveServerRecvMsgFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ArchiveServerRecvMsgFunc) History() []GitserverService_ArchiveServerRecvMsgFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ArchiveServerRecvMsgFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ArchiveServerRecvMsgFuncCall is an object that describes
// an invocation of method RecvMsg on an instance of
// MockGitserverService_ArchiveServer.
type GitserverService_ArchiveServerRecvMsgFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ArchiveServerRecvMsgFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ArchiveServerRecvMsgFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ArchiveServerSendFunc describes the behavior when the
// Send method of the parent MockGitserverService_ArchiveServer instance is
// invoked.
type GitserverService_ArchiveServerSendFunc struct {
	defaultHook func(*v1.ArchiveResponse) error
	hooks       []func(*v1.ArchiveResponse) error
	history     []GitserverService_ArchiveServerSendFuncCall
	mutex       sync.Mutex
}

// Send delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ArchiveServer) Send(v0 *v1.ArchiveResponse) error {
	r0 := m.SendFunc.nextHook()(v0)
	m.SendFunc.appendCall(GitserverService_ArchiveServerSendFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Send method of the
// parent MockGitserverService_ArchiveServer instance is invoked and the
// hook queue is empty.
func (f *GitserverService_ArchiveServerSendFunc) SetDefaultHook(hook func(*v1.ArchiveResponse) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Send method of the parent MockGitserverService_ArchiveServer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ArchiveServerSendFunc) PushHook(hook func(*v1.ArchiveResponse) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ArchiveServerSendFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(*v1.ArchiveResponse) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ArchiveServerSendFunc) PushReturn(r0 error) {
	f.PushHook(func(*v1.ArchiveResponse) error {
		return r0
	})
}

func (f *GitserverService_ArchiveServerSendFunc) nextHook() func(*v1.ArchiveResponse) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ArchiveServerSendFunc) appendCall(r0 GitserverService_ArchiveServerSendFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverService_ArchiveServerSendFuncCall
// objects describing the invocations of this function.
func (f *GitserverService_ArchiveServerSendFunc) History() []GitserverService_ArchiveServerSendFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ArchiveServerSendFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ArchiveServerSendFuncCall is an object that describes an
// invocation of method Send on an instance of
// MockGitserverService_ArchiveServer.
type GitserverService_ArchiveServerSendFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *v1.ArchiveResponse
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ArchiveServerSendFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ArchiveServerSendFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ArchiveServerSendHeaderFunc describes the behavior when
// the SendHeader method of the parent MockGitserverService_ArchiveServer
// instance is invoked.
type GitserverService_ArchiveServerSendHeaderFunc struct {
	defaultHook func(metadata.MD) error
	hooks       []func(metadata.MD) error
	history     []GitserverService_ArchiveServerSendHeaderFuncCall
	mutex       sync.Mutex
}

// SendHeader delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverService_ArchiveServer) SendHeader(v0 metadata.MD) error {
	r0 := m.SendHeaderFunc.nextHook()(v0)
	m.SendHeaderFunc.appendCall(GitserverService_ArchiveServerSendHeaderFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SendHeader method of
// the parent MockGitserverService_ArchiveServer instance is invoked and the
// hook queue is empty.
func (f *GitserverService_ArchiveServerSendHeaderFunc) SetDefaultHook(hook func(metadata.MD) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SendHeader method of the parent MockGitserverService_ArchiveServer
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverService_ArchiveServerSendHeaderFunc) PushHook(hook func(metadata.MD) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ArchiveServerSendHeaderFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(metadata.MD) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ArchiveServerSendHeaderFunc) PushReturn(r0 error) {
	f.PushHook(func(metadata.MD) error {
		return r0
	})
}

func (f *GitserverService_ArchiveServerSendHeaderFunc) nextHook() func(metadata.MD) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ArchiveServerSendHeaderFunc) appendCall(r0 GitserverService_ArchiveServerSendHeaderFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ArchiveServerSendHeaderFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ArchiveServerSendHeaderFunc) History() []GitserverService_ArchiveServerSendHeaderFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ArchiveServerSendHeaderFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ArchiveServerSendHeaderFuncCall is an object that
// describes an invocation of method SendHeader on an instance of
// MockGitserverService_ArchiveServer.
type GitserverService_ArchiveServerSendHeaderFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 metadata.MD
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ArchiveServerSendHeaderFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ArchiveServerSendHeaderFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ArchiveServerSendMsgFunc describes the behavior when the
// SendMsg method of the parent MockGitserverService_ArchiveServer instance
// is invoked.
type GitserverService_ArchiveServerSendMsgFunc struct {
	defaultHook func(interface{}) error
	hooks       []func(interface{}) error
	history     []GitserverService_ArchiveServerSendMsgFuncCall
	mutex       sync.Mutex
}

// SendMsg delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ArchiveServer) SendMsg(v0 interface{}) error {
	r0 := m.SendMsgFunc.nextHook()(v0)
	m.SendMsgFunc.appendCall(GitserverService_ArchiveServerSendMsgFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SendMsg method of
// the parent MockGitserverService_ArchiveServer instance is invoked and the
// hook queue is empty.
func (f *GitserverService_ArchiveServerSendMsgFunc) SetDefaultHook(hook func(interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SendMsg method of the parent MockGitserverService_ArchiveServer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ArchiveServerSendMsgFunc) PushHook(hook func(interface{}) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ArchiveServerSendMsgFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(interface{}) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ArchiveServerSendMsgFunc) PushReturn(r0 error) {
	f.PushHook(func(interface{}) error {
		return r0
	})
}

func (f *GitserverService_ArchiveServerSendMsgFunc) nextHook() func(interface{}) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ArchiveServerSendMsgFunc) appendCall(r0 GitserverService_ArchiveServerSendMsgFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ArchiveServerSendMsgFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ArchiveServerSendMsgFunc) History() []GitserverService_ArchiveServerSendMsgFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ArchiveServerSendMsgFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ArchiveServerSendMsgFuncCall is an object that describes
// an invocation of method SendMsg on an instance of
// MockGitserverService_ArchiveServer.
type GitserverService_ArchiveServerSendMsgFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ArchiveServerSendMsgFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ArchiveServerSendMsgFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ArchiveServerSetHeaderFunc describes the behavior when
// the SetHeader method of the parent MockGitserverService_ArchiveServer
// instance is invoked.
type GitserverService_ArchiveServerSetHeaderFunc struct {
	defaultHook func(metadata.MD) error
	hooks       []func(metadata.MD) error
	history     []GitserverService_ArchiveServerSetHeaderFuncCall
	mutex       sync.Mutex
}

// SetHeader delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ArchiveServer) SetHeader(v0 metadata.MD) error {
	r0 := m.SetHeaderFunc.nextHook()(v0)
	m.SetHeaderFunc.appendCall(GitserverService_ArchiveServerSetHeaderFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetHeader method of
// the parent MockGitserverService_ArchiveServer instance is invoked and the
// hook queue is empty.
func (f *GitserverService_ArchiveServerSetHeaderFunc) SetDefaultHook(hook func(metadata.MD) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetHeader method of the parent MockGitserverService_ArchiveServer
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverService_ArchiveServerSetHeaderFunc) PushHook(hook func(metadata.MD) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ArchiveServerSetHeaderFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(metadata.MD) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ArchiveServerSetHeaderFunc) PushReturn(r0 error) {
	f.PushHook(func(metadata.MD) error {
		return r0
	})
}

func (f *GitserverService_ArchiveServerSetHeaderFunc) nextHook() func(metadata.MD) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ArchiveServerSetHeaderFunc) appendCall(r0 GitserverService_ArchiveServerSetHeaderFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ArchiveServerSetHeaderFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ArchiveServerSetHeaderFunc) History() []GitserverService_ArchiveServerSetHeaderFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ArchiveServerSetHeaderFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ArchiveServerSetHeaderFuncCall is an object that
// describes an invocation of method SetHeader on an instance of
// MockGitserverService_ArchiveServer.
type GitserverService_ArchiveServerSetHeaderFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 metadata.MD
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ArchiveServerSetHeaderFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ArchiveServerSetHeaderFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ArchiveServerSetTrailerFunc describes the behavior when
// the SetTrailer method of the parent MockGitserverService_ArchiveServer
// instance is invoked.
type GitserverService_ArchiveServerSetTrailerFunc struct {
	defaultHook func(metadata.MD)
	hooks       []func(metadata.MD)
	history     []GitserverService_ArchiveServerSetTrailerFuncCall
	mutex       sync.Mutex
}

// SetTrailer delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverService_ArchiveServer) SetTrailer(v0 metadata.MD) {
	m.SetTrailerFunc.nextHook()(v0)
	m.SetTrailerFunc.appendCall(GitserverService_ArchiveServerSetTrailerFuncCall{v0})
	return
}

// SetDefaultHook sets function that is called when the SetTrailer method of
// the parent MockGitserverService_ArchiveServer instance is invoked and the
// hook queue is empty.
func (f *GitserverService_ArchiveServerSetTrailerFunc) SetDefaultHook(hook func(metadata.MD)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetTrailer method of the parent MockGitserverService_ArchiveServer
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverService_ArchiveServerSetTrailerFunc) PushHook(hook func(metadata.MD)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ArchiveServerSetTrailerFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(metadata.MD) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ArchiveServerSetTrailerFunc) PushReturn() {
	f.PushHook(func(metadata.MD) {
		return
	})
}

func (f *GitserverService_ArchiveServerSetTrailerFunc) nextHook() func(metadata.MD) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ArchiveServerSetTrailerFunc) appendCall(r0 GitserverService_ArchiveServerSetTrailerFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ArchiveServerSetTrailerFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ArchiveServerSetTrailerFunc) History() []GitserverService_ArchiveServerSetTrailerFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ArchiveServerSetTrailerFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ArchiveServerSetTrailerFuncCall is an object that
// describes an invocation of method SetTrailer on an instance of
// MockGitserverService_ArchiveServer.
type GitserverService_ArchiveServerSetTrailerFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 metadata.MD
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ArchiveServerSetTrailerFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ArchiveServerSetTrailerFuncCall) Results() []interface{} {
	return []interface{}{}
}

// MockGitserverService_BlameClient is a mock implementation of the
// GitserverService_BlameClient interface (from the package
// github.com/sourcegraph/sourcegraph/internal/gitserver/v1) used for unit
// testing.
type MockGitserverService_BlameClient struct {
	// CloseSendFunc is an instance of a mock function object controlling
	// the behavior of the method CloseSend.
	CloseSendFunc *GitserverService_BlameClientCloseSendFunc
	// ContextFunc is an instance of a mock function object controlling the
	// behavior of the method Context.
	ContextFunc *GitserverService_BlameClientContextFunc
	// HeaderFunc is an instance of a mock function object controlling the
	// behavior of the method Header.
	HeaderFunc *GitserverService_BlameClientHeaderFunc
	// RecvFunc is an instance of a mock function object controlling the
	// behavior of the method Recv.
	RecvFunc *GitserverService_BlameClientRecvFunc
	// RecvMsgFunc is an instance of a mock function object controlling the
	// behavior of the method RecvMsg.
	RecvMsgFunc *GitserverService_BlameClientRecvMsgFunc
	// SendMsgFunc is an instance of a mock function object controlling the
	// behavior of the method SendMsg.
	SendMsgFunc *GitserverService_BlameClientSendMsgFunc
	// TrailerFunc is an instance of a mock function object controlling the
	// behavior of the method Trailer.
	TrailerFunc *GitserverService_BlameClientTrailerFunc
}

// NewMockGitserverService_BlameClient creates a new mock of the
// GitserverService_BlameClient interface. All methods return zero values
// for all results, unless overwritten.
func NewMockGitserverService_BlameClient() *MockGitserverService_BlameClient {
	return &MockGitserverService_BlameClient{
		CloseSendFunc: &GitserverService_BlameClientCloseSendFunc{
			defaultHook: func() (r0 error) {
				return
			},
		},
		ContextFunc: &GitserverService_BlameClientContextFunc{
			defaultHook: func() (r0 context.Context) {
				return
			},
		},
		HeaderFunc: &GitserverService_BlameClientHeaderFunc{
			defaultHook: func() (r0 metadata.MD, r1 error) {
				return
			},
		},
		RecvFunc: &GitserverService_BlameClientRecvFunc{
			defaultHook: func() (r0 *v1.BlameResponse, r1 error) {
				return
			},
		},
		RecvMsgFunc: &GitserverService_BlameClientRecvMsgFunc{
			defaultHook: func(interface{}) (r0 error) {
				return
			},
		},
		SendMsgFunc: &GitserverService_BlameClientSendMsgFunc{
			defaultHook: func(interface{}) (r0 error) {
				return
			},
		},
		TrailerFunc: &GitserverService_BlameClientTrailerFunc{
			defaultHook: func() (r0 metadata.MD) {
				return
			},
		},
	}
}

// NewStrictMockGitserverService_BlameClient creates a new mock of the
// GitserverService_BlameClient interface. All methods panic on invocation,
// unless overwritten.
func NewStrictMockGitserverService_BlameClient() *MockGitserverService_BlameClient {
	return &MockGitserverService_BlameClient{
		CloseSendFunc: &GitserverService_BlameClientCloseSendFunc{
			defaultHook: func() error {
				panic("unexpected invocation of MockGitserverService_BlameClient.CloseSend")
			},
		},
		ContextFunc: &GitserverService_BlameClientContextFunc{
			defaultHook: func() context.Context {
				panic("unexpected invocation of MockGitserverService_BlameClient.Context")
			},
		},
		HeaderFunc: &GitserverService_BlameClientHeaderFunc{
			defaultHook: func() (metadata.MD, error) {
				panic("unexpected invocation of MockGitserverService_BlameClient.Header")
			},
		},
		RecvFunc: &GitserverService_BlameClientRecvFunc{
			defaultHook: func() (*v1.BlameResponse, error) {
				panic("unexpected invocation of MockGitserverService_BlameClient.Recv")
			},
		},
		RecvMsgFunc: &GitserverService_BlameClientRecvMsgFunc{
			defaultHook: func(interface{}) error {
				panic("unexpected invocation of MockGitserverService_BlameClient.RecvMsg")
			},
		},
		SendMsgFunc: &GitserverService_BlameClientSendMsgFunc{
			defaultHook: func(interface{}) error {
				panic("unexpected invocation of MockGitserverService_BlameClient.SendMsg")
			},
		},
		TrailerFunc: &GitserverService_BlameClientTrailerFunc{
			defaultHook: func() metadata.MD {
				panic("unexpected invocation of MockGitserverService_BlameClient.Trailer")
			},
		},
	}
}

// NewMockGitserverService_BlameClientFrom creates a new mock of the
// MockGitserverService_BlameClient interface. All methods delegate to the
// given implementation, unless overwritten.
func NewMockGitserverService_BlameClientFrom(i v1.GitserverService_BlameClient) *MockGitserverService_BlameClient {
	return &MockGitserverService_BlameClient{
		CloseSendFunc: &GitserverService_BlameClientCloseSendFunc{
			defaultHook: i.CloseSend,
		},
		ContextFunc: &GitserverService_BlameClientContextFunc{
			defaultHook: i.Context,
		},
		HeaderFunc: &GitserverService_BlameClientHeaderFunc{
			defaultHook: i.Header,
		},
		RecvFunc: &GitserverService_BlameClientRecvFunc{
			defaultHook: i.Recv,
		},
		RecvMsgFunc: &GitserverService_BlameClientRecvMsgFunc{
			defaultHook: i.RecvMsg,
		},
		SendMsgFunc: &GitserverService_BlameClientSendMsgFunc{
			defaultHook: i.SendMsg,
		},
		TrailerFunc: &GitserverService_BlameClientTrailerFunc{
			defaultHook: i.Trailer,
		},
	}
}

// GitserverService_BlameClientCloseSendFunc describes the behavior when the
// CloseSend method of the parent MockGitserverService_BlameClient instance
// is invoked.
type GitserverService_BlameClientCloseSendFunc struct {
	defaultHook func() error
	hooks       []func() error
	history     []GitserverService_BlameClientCloseSendFuncCall
	mutex       sync.Mutex
}

// CloseSend delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_BlameClient) CloseSend() error {
	r0 := m.CloseSendFunc.nextHook()()
	m.CloseSendFunc.appendCall(GitserverService_BlameClientCloseSendFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the CloseSend method of
// the parent MockGitserverService_BlameClient instance is invoked and the
// hook queue is empty.
func (f *GitserverService_BlameClientCloseSendFunc) SetDefaultHook(hook func() error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CloseSend method of the parent MockGitserverService_BlameClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_BlameClientCloseSendFunc) PushHook(hook func() error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_BlameClientCloseSendFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func() error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_BlameClientCloseSendFunc) PushReturn(r0 error) {
	f.PushHook(func() error {
		return r0
	})
}

func (f *GitserverService_BlameClientCloseSendFunc) nextHook() func() error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_BlameClientCloseSendFunc) appendCall(r0 GitserverService_BlameClientCloseSendFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_BlameClientCloseSendFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_BlameClientCloseSendFunc) History() []GitserverService_BlameClientCloseSendFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_BlameClientCloseSendFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_BlameClientCloseSendFuncCall is an object that describes
// an invocation of method CloseSend on an instance of
// MockGitserverService_BlameClient.
type GitserverService_BlameClientCloseSendFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_BlameClientCloseSendFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_BlameClientCloseSendFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_BlameClientContextFunc describes the behavior when the
// Context method of the parent MockGitserverService_BlameClient instance is
// invoked.
type GitserverService_BlameClientContextFunc struct {
	defaultHook func() context.Context
	hooks       []func() context.Context
	history     []GitserverService_BlameClientContextFuncCall
	mutex       sync.Mutex
}

// Context delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_BlameClient) Context() context.Context {
	r0 := m.ContextFunc.nextHook()()
	m.ContextFunc.appendCall(GitserverService_BlameClientContextFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Context method of
// the parent MockGitserverService_BlameClient instance is invoked and the
// hook queue is empty.
func (f *GitserverService_BlameClientContextFunc) SetDefaultHook(hook func() context.Context) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Context method of the parent MockGitserverService_BlameClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_BlameClientContextFunc) PushHook(hook func() context.Context) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_BlameClientContextFunc) SetDefaultReturn(r0 context.Context) {
	f.SetDefaultHook(func() context.Context {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_BlameClientContextFunc) PushReturn(r0 context.Context) {
	f.PushHook(func() context.Context {
		return r0
	})
}

func (f *GitserverService_BlameClientContextFunc) nextHook() func() context.Context {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_BlameClientContextFunc) appendCall(r0 GitserverService_BlameClientContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverService_BlameClientContextFuncCall
// objects describing the invocations of this function.
func (f *GitserverService_BlameClientContextFunc) History() []GitserverService_BlameClientContextFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_BlameClientContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_BlameClientContextFuncCall is an object that describes
// an invocation of method Context on an instance of
// MockGitserverService_BlameClient.
type GitserverService_BlameClientContextFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 context.Context
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_BlameClientContextFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_BlameClientContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_BlameClientHeaderFunc describes the behavior when the
// Header method of the parent MockGitserverService_BlameClient instance is
// invoked.
type GitserverService_BlameClientHeaderFunc struct {
	defaultHook func() (metadata.MD, error)
	hooks       []func() (metadata.MD, error)
	history     []GitserverService_BlameClientHeaderFuncCall
	mutex       sync.Mutex
}

// Header delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_BlameClient) Header() (metadata.MD, error) {
	r0, r1 := m.HeaderFunc.nextHook()()
	m.HeaderFunc.appendCall(GitserverService_BlameClientHeaderFuncCall{r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Header method of the
// parent MockGitserverService_BlameClient instance is invoked and the hook
// queue is empty.
func (f *GitserverService_BlameClientHeaderFunc) SetDefaultHook(hook func() (metadata.MD, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Header method of the parent MockGitserverService_BlameClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_BlameClientHeaderFunc) PushHook(hook func() (metadata.MD, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_BlameClientHeaderFunc) SetDefaultReturn(r0 metadata.MD, r1 error) {
	f.SetDefaultHook(func() (metadata.MD, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_BlameClientHeaderFunc) PushReturn(r0 metadata.MD, r1 error) {
	f.PushHook(func() (metadata.MD, error) {
		return r0, r1
	})
}

func (f *GitserverService_BlameClientHeaderFunc) nextHook() func() (metadata.MD, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_BlameClientHeaderFunc) appendCall(r0 GitserverService_BlameClientHeaderFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverService_BlameClientHeaderFuncCall
// objects describing the invocations of this function.
func (f *GitserverService_BlameClientHeaderFunc) History() []GitserverService_BlameClientHeaderFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_BlameClientHeaderFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_BlameClientHeaderFuncCall is an object that describes an
// invocation of method Header on an instance of
// MockGitserverService_BlameClient.
type GitserverService_BlameClientHeaderFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 metadata.MD
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_BlameClientHeaderFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_BlameClientHeaderFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverService_BlameClientRecvFunc describes the behavior when the Recv
// method of the parent MockGitserverService_BlameClient instance is
// invoked.
type GitserverService_BlameClientRecvFunc struct {
	defaultHook func() (*v1.BlameResponse, error)
	hooks       []func() (*v1.BlameResponse, error)
	history     []GitserverService_BlameClientRecvFuncCall
	mutex       sync.Mutex
}

// Recv delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_BlameClient) Recv() (*v1.BlameResponse, error) {
	r0, r1 := m.RecvFunc.nextHook()()
	m.RecvFunc.appendCall(GitserverService_BlameClientRecvFuncCall{r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Recv method of the
// parent MockGitserverService_BlameClient instance is invoked and the hook
// queue is empty.
func (f *GitserverService_BlameClientRecvFunc) SetDefaultHook(hook func() (*v1.BlameResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Recv method of the parent MockGitserverService_BlameClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_BlameClientRecvFunc) PushHook(hook func() (*v1.BlameResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_BlameClientRecvFunc) SetDefaultReturn(r0 *v1.BlameResponse, r1 error) {
	f.SetDefaultHook(func() (*v1.BlameResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_BlameClientRecvFunc) PushReturn(r0 *v1.BlameResponse, r1 error) {
	f.PushHook(func() (*v1.BlameResponse, error) {
		return r0, r1
	})
}

func (f *GitserverService_BlameClientRecvFunc) nextHook() func() (*v1.BlameResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_BlameClientRecvFunc) appendCall(r0 GitserverService_BlameClientRecvFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverService_BlameClientRecvFuncCall
// objects describing the invocations of this function.
func (f *GitserverService_BlameClientRecvFunc) History() []GitserverService_BlameClientRecvFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_BlameClientRecvFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_BlameClientRecvFuncCall is an object that describes an
// invocation of method Recv on an instance of
// MockGitserverService_BlameClient.
type GitserverService_BlameClientRecvFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.BlameResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_BlameClientRecvFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_BlameClientRecvFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverService_BlameClientRecvMsgFunc describes the behavior when the
// RecvMsg method of the parent MockGitserverService_BlameClient instance is
// invoked.
type GitserverService_BlameClientRecvMsgFunc struct {
	defaultHook func(interface{}) error
	hooks       []func(interface{}) error
	history     []GitserverService_BlameClientRecvMsgFuncCall
	mutex       sync.Mutex
}

// RecvMsg delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_BlameClient) RecvMsg(v0 interface{}) error {
	r0 := m.RecvMsgFunc.nextHook()(v0)
	m.RecvMsgFunc.appendCall(GitserverService_BlameClientRecvMsgFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the RecvMsg method of
// the parent MockGitserverService_BlameClient instance is invoked and the
// hook queue is empty.
func (f *GitserverService_BlameClientRecvMsgFunc) SetDefaultHook(hook func(interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RecvMsg method of the parent MockGitserverService_BlameClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_BlameClientRecvMsgFunc) PushHook(hook func(interface{}) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_BlameClientRecvMsgFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(interface{}) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_BlameClientRecvMsgFunc) PushReturn(r0 error) {
	f.PushHook(func(interface{}) error {
		return r0
	})
}

func (f *GitserverService_BlameClientRecvMsgFunc) nextHook() func(interface{}) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_BlameClientRecvMsgFunc) appendCall(r0 GitserverService_BlameClientRecvMsgFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverService_BlameClientRecvMsgFuncCall
// objects describing the invocations of this function.
func (f *GitserverService_BlameClientRecvMsgFunc) History() []GitserverService_BlameClientRecvMsgFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_BlameClientRecvMsgFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_BlameClientRecvMsgFuncCall is an object that describes
// an invocation of method RecvMsg on an instance of
// MockGitserverService_BlameClient.
type GitserverService_BlameClientRecvMsgFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_BlameClientRecvMsgFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_BlameClientRecvMsgFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_BlameClientSendMsgFunc describes the behavior when the
// SendMsg method of the parent MockGitserverService_BlameClient instance is
// invoked.
type GitserverService_BlameClientSendMsgFunc struct {
	defaultHook func(interface{}) error
	hooks       []func(interface{}) error
	history     []GitserverService_BlameClientSendMsgFuncCall
	mutex       sync.Mutex
}

// SendMsg delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_BlameClient) SendMsg(v0 interface{}) error {
	r0 := m.SendMsgFunc.nextHook()(v0)
	m.SendMsgFunc.appendCall(GitserverService_BlameClientSendMsgFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SendMsg method of
// the parent MockGitserverService_BlameClient instance is invoked and the
// hook queue is empty.
func (f *GitserverService_BlameClientSendMsgFunc) SetDefaultHook(hook func(interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SendMsg method of the parent MockGitserverService_BlameClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_BlameClientSendMsgFunc) PushHook(hook func(interface{}) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_BlameClientSendMsgFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(interface{}) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_BlameClientSendMsgFunc) PushReturn(r0 error) {
	f.PushHook(func(interface{}) error {
		return r0
	})
}

func (f *GitserverService_BlameClientSendMsgFunc) nextHook() func(interface{}) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_BlameClientSendMsgFunc) appendCall(r0 GitserverService_BlameClientSendMsgFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverService_BlameClientSendMsgFuncCall
// objects describing the invocations of this function.
func (f *GitserverService_BlameClientSendMsgFunc) History() []GitserverService_BlameClientSendMsgFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_BlameClientSendMsgFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_BlameClientSendMsgFuncCall is an object that describes
// an invocation of method SendMsg on an instance of
// MockGitserverService_BlameClient.
type GitserverService_BlameClientSendMsgFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_BlameClientSendMsgFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_BlameClientSendMsgFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_BlameClientTrailerFunc describes the behavior when the
// Trailer method of the parent MockGitserverService_BlameClient instance is
// invoked.
type GitserverService_BlameClientTrailerFunc struct {
	defaultHook func() metadata.MD
	hooks       []func() metadata.MD
	history     []GitserverService_BlameClientTrailerFuncCall
	mutex       sync.Mutex
}

// Trailer delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_BlameClient) Trailer() metadata.MD {
	r0 := m.TrailerFunc.nextHook()()
	m.TrailerFunc.appendCall(GitserverService_BlameClientTrailerFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Trailer method of
// the parent MockGitserverService_BlameClient instance is invoked and the
// hook queue is empty.
func (f *GitserverService_BlameClientTrailerFunc) SetDefaultHook(hook func() metadata.MD) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Trailer method of the parent MockGitserverService_BlameClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_BlameClientTrailerFunc) PushHook(hook func() metadata.MD) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_BlameClientTrailerFunc) SetDefaultReturn(r0 metadata.MD) {
	f.SetDefaultHook(func() metadata.MD {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_BlameClientTrailerFunc) PushReturn(r0 metadata.MD) {
	f.PushHook(func() metadata.MD {
		return r0
	})
}

func (f *GitserverService_BlameClientTrailerFunc) nextHook() func() metadata.MD {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_BlameClientTrailerFunc) appendCall(r0 GitserverService_BlameClientTrailerFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverService_BlameClientTrailerFuncCall
// objects describing the invocations of this function.
func (f *GitserverService_BlameClientTrailerFunc) History() []GitserverService_BlameClientTrailerFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_BlameClientTrailerFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_BlameClientTrailerFuncCall is an object that describes
// an invocation of method Trailer on an instance of
// MockGitserverService_BlameClient.
type GitserverService_BlameClientTrailerFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 metadata.MD
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_BlameClientTrailerFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_BlameClientTrailerFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockGitserverService_BlameServer is a mock implementation of the
// GitserverService_BlameServer interface (from the package
// github.com/sourcegraph/sourcegraph/internal/gitserver/v1) used for unit
// testing.
type MockGitserverService_BlameServer struct {
	// ContextFunc is an instance of a mock function object controlling the
	// behavior of the method Context.
	ContextFunc *GitserverService_BlameServerContextFunc
	// RecvMsgFunc is an instance of a mock function object controlling the
	// behavior of the method RecvMsg.
	RecvMsgFunc *GitserverService_BlameServerRecvMsgFunc
	// SendFunc is an instance of a mock function object controlling the
	// behavior of the method Send.
	SendFunc *GitserverService_BlameServerSendFunc
	// SendHeaderFunc is an instance of a mock function object controlling
	// the behavior of the method SendHeader.
	SendHeaderFunc *GitserverService_BlameServerSendHeaderFunc
	// SendMsgFunc is an instance of a mock function object controlling the
	// behavior of the method SendMsg.
	SendMsgFunc *GitserverService_BlameServerSendMsgFunc
	// SetHeaderFunc is an instance of a mock function object controlling
	// the behavior of the method SetHeader.
	SetHeaderFunc *GitserverService_BlameServerSetHeaderFunc
	// SetTrailerFunc is an instance of a mock function object controlling
	// the behavior of the method SetTrailer.
	SetTrailerFunc *GitserverService_BlameServerSetTrailerFunc
}

// NewMockGitserverService_BlameServer creates a new mock of the
// GitserverService_BlameServer interface. All methods return zero values
// for all results, unless overwritten.
func NewMockGitserverService_BlameServer() *MockGitserverService_BlameServer {
	return &MockGitserverService_BlameServer{
		ContextFunc: &GitserverService_BlameServerContextFunc{
			defaultHook: func() (r0 context.Context) {
				return
			},
		},
		RecvMsgFunc: &GitserverService_BlameServerRecvMsgFunc{
			defaultHook: func(interface{}) (r0 error) {
				return
			},
		},
		SendFunc: &GitserverService_BlameServerSendFunc{
			defaultHook: func(*v1.BlameResponse) (r0 error) {
				return
			},
		},
		SendHeaderFunc: &GitserverService_BlameServerSendHeaderFunc{
			defaultHook: func(metadata.MD) (r0 error) {
				return
			},
		},
		SendMsgFunc: &GitserverService_BlameServerSendMsgFunc{
			defaultHook: func(interface{}) (r0 error) {
				return
			},
		},
		SetHeaderFunc: &GitserverService_BlameServerSetHeaderFunc{
			defaultHook: func(metadata.MD) (r0 error) {
				return
			},
		},
		SetTrailerFunc: &GitserverService_BlameServerSetTrailerFunc{
			defaultHook: func(metadata.MD) {
				return
			},
		},
	}
}

// NewStrictMockGitserverService_BlameServer creates a new mock of the
// GitserverService_BlameServer interface. All methods panic on invocation,
// unless overwritten.
func NewStrictMockGitserverService_BlameServer() *MockGitserverService_BlameServer {
	return &MockGitserverService_BlameServer{
		ContextFunc: &GitserverService_BlameServerContextFunc{
			defaultHook: func() context.Context {
				panic("unexpected invocation of MockGitserverService_BlameServer.Context")
			},
		},
		RecvMsgFunc: &GitserverService_BlameServerRecvMsgFunc{
			defaultHook: func(interface{}) error {
				panic("unexpected invocation of MockGitserverService_BlameServer.RecvMsg")
			},
		},
		SendFunc: &GitserverService_BlameServerSendFunc{
			defaultHook: func(*v1.BlameResponse) error {
				panic("unexpected invocation of MockGitserverService_BlameServer.Send")
			},
		},
		SendHeaderFunc: &GitserverService_BlameServerSendHeaderFunc{
			defaultHook: func(metadata.MD) error {
				panic("unexpected invocation of MockGitserverService_BlameServer.SendHeader")
			},
		},
		SendMsgFunc: &GitserverService_BlameServerSendMsgFunc{
			defaultHook: func(interface{}) error {
				panic("unexpected invocation of MockGitserverService_BlameServer.SendMsg")
			},
		},
		SetHeaderFunc: &GitserverService_BlameServerSetHeaderFunc{
			defaultHook: func(metadata.MD) error {
				panic("unexpected invocation of MockGitserverService_BlameServer.SetHeader")
			},
		},
		SetTrailerFunc: &GitserverService_BlameServerSetTrailerFunc{
			defaultHook: func(metadata.MD) {
				panic("unexpected invocation of MockGitserverService_BlameServer.SetTrailer")
			},
		},
	}
}

// NewMockGitserverService_BlameServerFrom creates a new mock of the
// MockGitserverService_BlameServer interface. All methods delegate to the
// given implementation, unless overwritten.
func NewMockGitserverService_BlameServerFrom(i v1.GitserverService_BlameServer) *MockGitserverService_BlameServer {
	return &MockGitserverService_BlameServer{
		ContextFunc: &GitserverService_BlameServerContextFunc{
			defaultHook: i.Context,
		},
		RecvMsgFunc: &GitserverService_BlameServerRecvMsgFunc{
			defaultHook: i.RecvMsg,
		},
		SendFunc: &GitserverService_BlameServerSendFunc{
			defaultHook: i.Send,
		},
		SendHeaderFunc: &GitserverService_BlameServerSendHeaderFunc{
			defaultHook: i.SendHeader,
		},
		SendMsgFunc: &GitserverService_BlameServerSendMsgFunc{
			defaultHook: i.SendMsg,
		},
		SetHeaderFunc: &GitserverService_BlameServerSetHeaderFunc{
			defaultHook: i.SetHeader,
		},
		SetTrailerFunc: &GitserverService_BlameServerSetTrailerFunc{
			defaultHook: i.SetTrailer,
		},
	}
}

// GitserverService_BlameServerContextFunc describes the behavior when the
// Context method of the parent MockGitserverService_BlameServer instance is
// invoked.
type GitserverService_BlameServerContextFunc struct {
	defaultHook func() context.Context
	hooks       []func() context.Context
	history     []GitserverService_BlameServerContextFuncCall
	mutex       sync.Mutex
}

// Context delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_BlameServer) Context() context.Context {
	r0 := m.ContextFunc.nextHook()()
	m.ContextFunc.appendCall(GitserverService_BlameServerContextFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Context method of
// the parent MockGitserverService_BlameServer instance is invoked and the
// hook queue is empty.
func (f *GitserverService_BlameServerContextFunc) SetDefaultHook(hook func() context.Context) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Context method of the parent MockGitserverService_BlameServer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_BlameServerContextFunc) PushHook(hook func() context.Context) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_BlameServerContextFunc) SetDefaultReturn(r0 context.Context) {
	f.SetDefaultHook(func() context.Context {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_BlameServerContextFunc) PushReturn(r0 context.Context) {
	f.PushHook(func() context.Context {
		return r0
	})
}

func (f *GitserverService_BlameServerContextFunc) nextHook() func() context.Context {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_BlameServerContextFunc) appendCall(r0 GitserverService_BlameServerContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverService_BlameServerContextFuncCall
// objects describing the invocations of this function.
func (f *GitserverService_BlameServerContextFunc) History() []GitserverService_BlameServerContextFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_BlameServerContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_BlameServerContextFuncCall is an object that describes
// an invocation of method Context on an instance of
// MockGitserverService_BlameServer.
type GitserverService_BlameServerContextFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 context.Context
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_BlameServerContextFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_BlameServerContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_BlameServerRecvMsgFunc describes the behavior when the
// RecvMsg method of the parent MockGitserverService_BlameServer instance is
// invoked.
type GitserverService_BlameServerRecvMsgFunc struct {
	defaultHook func(interface{}) error
	hooks       []func(interface{}) error
	history     []GitserverService_BlameServerRecvMsgFuncCall
	mutex       sync.Mutex
}

// RecvMsg delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_BlameServer) RecvMsg(v0 interface{}) error {
	r0 := m.RecvMsgFunc.nextHook()(v0)
	m.RecvMsgFunc.appendCall(GitserverService_BlameServerRecvMsgFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the RecvMsg method of
// the parent MockGitserverService_BlameServer instance is invoked and the
// hook queue is empty.
func (f *GitserverService_BlameServerRecvMsgFunc) SetDefaultHook(hook func(interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RecvMsg method of the parent MockGitserverService_BlameServer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_BlameServerRecvMsgFunc) PushHook(hook func(interface{}) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_BlameServerRecvMsgFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(interface{}) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_BlameServerRecvMsgFunc) PushReturn(r0 error) {
	f.PushHook(func(interface{}) error {
		return r0
	})
}

func (f *GitserverService_BlameServerRecvMsgFunc) nextHook() func(interface{}) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_BlameServerRecvMsgFunc) appendCall(r0 GitserverService_BlameServerRecvMsgFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverService_BlameServerRecvMsgFuncCall
// objects describing the invocations of this function.
func (f *GitserverService_BlameServerRecvMsgFunc) History() []GitserverService_BlameServerRecvMsgFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_BlameServerRecvMsgFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_BlameServerRecvMsgFuncCall is an object that describes
// an invocation of method RecvMsg on an instance of
// MockGitserverService_BlameServer.
type GitserverService_BlameServerRecvMsgFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_BlameServerRecvMsgFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_BlameServerRecvMsgFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_BlameServerSendFunc describes the behavior when the Send
// method of the parent MockGitserverService_BlameServer instance is
// invoked.
type GitserverService_BlameServerSendFunc struct {
	defaultHook func(*v1.BlameResponse) error
	hooks       []func(*v1.BlameResponse) error
	history     []GitserverService_BlameServerSendFuncCall
	mutex       sync.Mutex
}

// Send delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_BlameServer) Send(v0 *v1.BlameResponse) error {
	r0 := m.SendFunc.nextHook()(v0)
	m.SendFunc.appendCall(GitserverService_BlameServerSendFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Send method of the
// parent MockGitserverService_BlameServer instance is invoked and the hook
// queue is empty.
func (f *GitserverService_BlameServerSendFunc) SetDefaultHook(hook func(*v1.BlameResponse) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Send method of the parent MockGitserverService_BlameServer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_BlameServerSendFunc) PushHook(hook func(*v1.BlameResponse) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_BlameServerSendFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(*v1.BlameResponse) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_BlameServerSendFunc) PushReturn(r0 error) {
	f.PushHook(func(*v1.BlameResponse) error {
		return r0
	})
}

func (f *GitserverService_BlameServerSendFunc) nextHook() func(*v1.BlameResponse) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_BlameServerSendFunc) appendCall(r0 GitserverService_BlameServerSendFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverService_BlameServerSendFuncCall
// objects describing the invocations of this function.
func (f *GitserverService_BlameServerSendFunc) History() []GitserverService_BlameServerSendFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_BlameServerSendFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_BlameServerSendFuncCall is an object that describes an
// invocation of method Send on an instance of
// MockGitserverService_BlameServer.
type GitserverService_BlameServerSendFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *v1.BlameResponse
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_BlameServerSendFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_BlameServerSendFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_BlameServerSendHeaderFunc describes the behavior when
// the SendHeader method of the parent MockGitserverService_BlameServer
// instance is invoked.
type GitserverService_BlameServerSendHeaderFunc struct {
	defaultHook func(metadata.MD) error
	hooks       []func(metadata.MD) error
	history     []GitserverService_BlameServerSendHeaderFuncCall
	mutex       sync.Mutex
}

// SendHeader delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverService_BlameServer) SendHeader(v0 metadata.MD) error {
	r0 := m.SendHeaderFunc.nextHook()(v0)
	m.SendHeaderFunc.appendCall(GitserverService_BlameServerSendHeaderFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SendHeader method of
// the parent MockGitserverService_BlameServer instance is invoked and the
// hook queue is empty.
func (f *GitserverService_BlameServerSendHeaderFunc) SetDefaultHook(hook func(metadata.MD) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SendHeader method of the parent MockGitserverService_BlameServer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_BlameServerSendHeaderFunc) PushHook(hook func(metadata.MD) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_BlameServerSendHeaderFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(metadata.MD) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_BlameServerSendHeaderFunc) PushReturn(r0 error) {
	f.PushHook(func(metadata.MD) error {
		return r0
	})
}

func (f *GitserverService_BlameServerSendHeaderFunc) nextHook() func(metadata.MD) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_BlameServerSendHeaderFunc) appendCall(r0 GitserverService_BlameServerSendHeaderFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_BlameServerSendHeaderFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_BlameServerSendHeaderFunc) History() []GitserverService_BlameServerSendHeaderFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_BlameServerSendHeaderFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_BlameServerSendHeaderFuncCall is an object that
// describes an invocation of method SendHeader on an instance of
// MockGitserverService_BlameServer.
type GitserverService_BlameServerSendHeaderFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 metadata.MD
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_BlameServerSendHeaderFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_BlameServerSendHeaderFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_BlameServerSendMsgFunc describes the behavior when the
// SendMsg method of the parent MockGitserverService_BlameServer instance is
// invoked.
type GitserverService_BlameServerSendMsgFunc struct {
	defaultHook func(interface{}) error
	hooks       []func(interface{}) error
	history     []GitserverService_BlameServerSendMsgFuncCall
	mutex       sync.Mutex
}

// SendMsg delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_BlameServer) SendMsg(v0 interface{}) error {
	r0 := m.SendMsgFunc.nextHook()(v0)
	m.SendMsgFunc.appendCall(GitserverService_BlameServerSendMsgFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SendMsg method of
// the parent MockGitserverService_BlameServer instance is invoked and the
// hook queue is empty.
func (f *GitserverService_BlameServerSendMsgFunc) SetDefaultHook(hook func(interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SendMsg method of the parent MockGitserverService_BlameServer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_BlameServerSendMsgFunc) PushHook(hook func(interface{}) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_BlameServerSendMsgFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(interface{}) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_BlameServerSendMsgFunc) PushReturn(r0 error) {
	f.PushHook(func(interface{}) error {
		return r0
	})
}

func (f *GitserverService_BlameServerSendMsgFunc) nextHook() func(interface{}) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_BlameServerSendMsgFunc) appendCall(r0 GitserverService_BlameServerSendMsgFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverService_BlameServerSendMsgFuncCall
// objects describing the invocations of this function.
func (f *GitserverService_BlameServerSendMsgFunc) History() []GitserverService_BlameServerSendMsgFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_BlameServerSendMsgFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_BlameServerSendMsgFuncCall is an object that describes
// an invocation of method SendMsg on an instance of
// MockGitserverService_BlameServer.
type GitserverService_BlameServerSendMsgFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_BlameServerSendMsgFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_BlameServerSendMsgFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_BlameServerSetHeaderFunc describes the behavior when the
// SetHeader method of the parent MockGitserverService_BlameServer instance
// is invoked.
type GitserverService_BlameServerSetHeaderFunc struct {
	defaultHook func(metadata.MD) error
	hooks       []func(metadata.MD) error
	history     []GitserverService_BlameServerSetHeaderFuncCall
	mutex       sync.Mutex
}

// SetHeader delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_BlameServer) SetHeader(v0 metadata.MD) error {
	r0 := m.SetHeaderFunc.nextHook()(v0)
	m.SetHeaderFunc.appendCall(GitserverService_BlameServerSetHeaderFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetHeader method of
// the parent MockGitserverService_BlameServer instance is invoked and the
// hook queue is empty.
func (f *GitserverService_BlameServerSetHeaderFunc) SetDefaultHook(hook func(metadata.MD) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetHeader method of the parent MockGitserverService_BlameServer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_BlameServerSetHeaderFunc) PushHook(hook func(metadata.MD) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_BlameServerSetHeaderFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(metadata.MD) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_BlameServerSetHeaderFunc) PushReturn(r0 error) {
	f.PushHook(func(metadata.MD) error {
		return r0
	})
}

func (f *GitserverService_BlameServerSetHeaderFunc) nextHook() func(metadata.MD) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_BlameServerSetHeaderFunc) appendCall(r0 GitserverService_BlameServerSetHeaderFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_BlameServerSetHeaderFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_BlameServerSetHeaderFunc) History() []GitserverService_BlameServerSetHeaderFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_BlameServerSetHeaderFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_BlameServerSetHeaderFuncCall is an object that describes
// an invocation of method SetHeader on an instance of
// MockGitserverService_BlameServer.
type GitserverService_BlameServerSetHeaderFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 metadata.MD
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_BlameServerSetHeaderFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_BlameServerSetHeaderFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_BlameServerSetTrailerFunc describes the behavior when
// the SetTrailer method of the parent MockGitserverService_BlameServer
// instance is invoked.
type GitserverService_BlameServerSetTrailerFunc struct {
	defaultHook func(metadata.MD)
	hooks       []func(metadata.MD)
	history     []GitserverService_BlameServerSetTrailerFuncCall
	mutex       sync.Mutex
}

// SetTrailer delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverService_BlameServer) SetTrailer(v0 metadata.MD) {
	m.SetTrailerFunc.nextHook()(v0)
	m.SetTrailerFunc.appendCall(GitserverService_BlameServerSetTrailerFuncCall{v0})
	return
}

// SetDefaultHook sets function that is called when the SetTrailer method of
// the parent MockGitserverService_BlameServer instance is invoked and the
// hook queue is empty.
func (f *GitserverService_BlameServerSetTrailerFunc) SetDefaultHook(hook func(metadata.MD)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetTrailer method of the parent MockGitserverService_BlameServer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_BlameServerSetTrailerFunc) PushHook(hook func(metadata.MD)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_BlameServerSetTrailerFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(metadata.MD) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_BlameServerSetTrailerFunc) PushReturn() {
	f.PushHook(func(metadata.MD) {
		return
	})
}

func (f *GitserverService_BlameServerSetTrailerFunc) nextHook() func(metadata.MD) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_BlameServerSetTrailerFunc) appendCall(r0 GitserverService_BlameServerSetTrailerFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_BlameServerSetTrailerFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_BlameServerSetTrailerFunc) History() []GitserverService_BlameServerSetTrailerFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_BlameServerSetTrailerFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_BlameServerSetTrailerFuncCall is an object that
// describes an invocation of method SetTrailer on an instance of
// MockGitserverService_BlameServer.
type GitserverService_BlameServerSetTrailerFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 metadata.MD
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_BlameServerSetTrailerFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_BlameServerSetTrailerFuncCall) Results() []interface{} {
	return []interface{}{}
}

// MockGitserverService_ChangedFilesClient is a mock implementation of the
// GitserverService_ChangedFilesClient interface (from the package
// github.com/sourcegraph/sourcegraph/internal/gitserver/v1) used for unit
// testing.
type MockGitserverService_ChangedFilesClient struct {
	// CloseSendFunc is an instance of a mock function object controlling
	// the behavior of the method CloseSend.
	CloseSendFunc *GitserverService_ChangedFilesClientCloseSendFunc
	// ContextFunc is an instance of a mock function object controlling the
	// behavior of the method Context.
	ContextFunc *GitserverService_ChangedFilesClientContextFunc
	// HeaderFunc is an instance of a mock function object controlling the
	// behavior of the method Header.
	HeaderFunc *GitserverService_ChangedFilesClientHeaderFunc
	// RecvFunc is an instance of a mock function object controlling the
	// behavior of the method Recv.
	RecvFunc *GitserverService_ChangedFilesClientRecvFunc
	// RecvMsgFunc is an instance of a mock function object controlling the
	// behavior of the method RecvMsg.
	RecvMsgFunc *GitserverService_ChangedFilesClientRecvMsgFunc
	// SendMsgFunc is an instance of a mock function object controlling the
	// behavior of the method SendMsg.
	SendMsgFunc *GitserverService_ChangedFilesClientSendMsgFunc
	// TrailerFunc is an instance of a mock function object controlling the
	// behavior of the method Trailer.
	TrailerFunc *GitserverService_ChangedFilesClientTrailerFunc
}

// NewMockGitserverService_ChangedFilesClient creates a new mock of the
// GitserverService_ChangedFilesClient interface. All methods return zero
// values for all results, unless overwritten.
func NewMockGitserverService_ChangedFilesClient() *MockGitserverService_ChangedFilesClient {
	return &MockGitserverService_ChangedFilesClient{
		CloseSendFunc: &GitserverService_ChangedFilesClientCloseSendFunc{
			defaultHook: func() (r0 error) {
				return
			},
		},
		ContextFunc: &GitserverService_ChangedFilesClientContextFunc{
			defaultHook: func() (r0 context.Context) {
				return
			},
		},
		HeaderFunc: &GitserverService_ChangedFilesClientHeaderFunc{
			defaultHook: func() (r0 metadata.MD, r1 error) {
				return
			},
		},
		RecvFunc: &GitserverService_ChangedFilesClientRecvFunc{
			defaultHook: func() (r0 *v1.ChangedFilesResponse, r1 error) {
				return
			},
		},
		RecvMsgFunc: &GitserverService_ChangedFilesClientRecvMsgFunc{
			defaultHook: func(interface{}) (r0 error) {
				return
			},
		},
		SendMsgFunc: &GitserverService_ChangedFilesClientSendMsgFunc{
			defaultHook: func(interface{}) (r0 error) {
				return
			},
		},
		TrailerFunc: &GitserverService_ChangedFilesClientTrailerFunc{
			defaultHook: func() (r0 metadata.MD) {
				return
			},
		},
	}
}

// NewStrictMockGitserverService_ChangedFilesClient creates a new mock of
// the GitserverService_ChangedFilesClient interface. All methods panic on
// invocation, unless overwritten.
func NewStrictMockGitserverService_ChangedFilesClient() *MockGitserverService_ChangedFilesClient {
	return &MockGitserverService_ChangedFilesClient{
		CloseSendFunc: &GitserverService_ChangedFilesClientCloseSendFunc{
			defaultHook: func() error {
				panic("unexpected invocation of MockGitserverService_ChangedFilesClient.CloseSend")
			},
		},
		ContextFunc: &GitserverService_ChangedFilesClientContextFunc{
			defaultHook: func() context.Context {
				panic("unexpected invocation of MockGitserverService_ChangedFilesClient.Context")
			},
		},
		HeaderFunc: &GitserverService_ChangedFilesClientHeaderFunc{
			defaultHook: func() (metadata.MD, error) {
				panic("unexpected invocation of MockGitserverService_ChangedFilesClient.Header")
			},
		},
		RecvFunc: &GitserverService_ChangedFilesClientRecvFunc{
			defaultHook: func() (*v1.ChangedFilesResponse, error) {
				panic("unexpected invocation of MockGitserverService_ChangedFilesClient.Recv")
			},
		},
		RecvMsgFunc: &GitserverService_ChangedFilesClientRecvMsgFunc{
			defaultHook: func(interface{}) error {
				panic("unexpected invocation of MockGitserverService_ChangedFilesClient.RecvMsg")
			},
		},
		SendMsgFunc: &GitserverService_ChangedFilesClientSendMsgFunc{
			defaultHook: func(interface{}) error {
				panic("unexpected invocation of MockGitserverService_ChangedFilesClient.SendMsg")
			},
		},
		TrailerFunc: &GitserverService_ChangedFilesClientTrailerFunc{
			defaultHook: func() metadata.MD {
				panic("unexpected invocation of MockGitserverService_ChangedFilesClient.Trailer")
			},
		},
	}
}

// NewMockGitserverService_ChangedFilesClientFrom creates a new mock of the
// MockGitserverService_ChangedFilesClient interface. All methods delegate
// to the given implementation, unless overwritten.
func NewMockGitserverService_ChangedFilesClientFrom(i v1.GitserverService_ChangedFilesClient) *MockGitserverService_ChangedFilesClient {
	return &MockGitserverService_ChangedFilesClient{
		CloseSendFunc: &GitserverService_ChangedFilesClientCloseSendFunc{
			defaultHook: i.CloseSend,
		},
		ContextFunc: &GitserverService_ChangedFilesClientContextFunc{
			defaultHook: i.Context,
		},
		HeaderFunc: &GitserverService_ChangedFilesClientHeaderFunc{
			defaultHook: i.Header,
		},
		RecvFunc: &GitserverService_ChangedFilesClientRecvFunc{
			defaultHook: i.Recv,
		},
		RecvMsgFunc: &GitserverService_ChangedFilesClientRecvMsgFunc{
			defaultHook: i.RecvMsg,
		},
		SendMsgFunc: &GitserverService_ChangedFilesClientSendMsgFunc{
			defaultHook: i.SendMsg,
		},
		TrailerFunc: &GitserverService_ChangedFilesClientTrailerFunc{
			defaultHook: i.Trailer,
		},
	}
}

// GitserverService_ChangedFilesClientCloseSendFunc describes the behavior
// when the CloseSend method of the parent
// MockGitserverService_ChangedFilesClient instance is invoked.
type GitserverService_ChangedFilesClientCloseSendFunc struct {
	defaultHook func() error
	hooks       []func() error
	history     []GitserverService_ChangedFilesClientCloseSendFuncCall
	mutex       sync.Mutex
}

// CloseSend delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ChangedFilesClient) CloseSend() error {
	r0 := m.CloseSendFunc.nextHook()()
	m.CloseSendFunc.appendCall(GitserverService_ChangedFilesClientCloseSendFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the CloseSend method of
// the parent MockGitserverService_ChangedFilesClient instance is invoked
// and the hook queue is empty.
func (f *GitserverService_ChangedFilesClientCloseSendFunc) SetDefaultHook(hook func() error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CloseSend method of the parent MockGitserverService_ChangedFilesClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverService_ChangedFilesClientCloseSendFunc) PushHook(hook func() error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ChangedFilesClientCloseSendFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func() error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ChangedFilesClientCloseSendFunc) PushReturn(r0 error) {
	f.PushHook(func() error {
		return r0
	})
}

func (f *GitserverService_ChangedFilesClientCloseSendFunc) nextHook() func() error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ChangedFilesClientCloseSendFunc) appendCall(r0 GitserverService_ChangedFilesClientCloseSendFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ChangedFilesClientCloseSendFuncCall objects describing
// the invocations of this function.
func (f *GitserverService_ChangedFilesClientCloseSendFunc) History() []GitserverService_ChangedFilesClientCloseSendFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ChangedFilesClientCloseSendFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ChangedFilesClientCloseSendFuncCall is an object that
// describes an invocation of method CloseSend on an instance of
// MockGitserverService_ChangedFilesClient.
type GitserverService_ChangedFilesClientCloseSendFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ChangedFilesClientCloseSendFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ChangedFilesClientCloseSendFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ChangedFilesClientContextFunc describes the behavior
// when the Context method of the parent
// MockGitserverService_ChangedFilesClient instance is invoked.
type GitserverService_ChangedFilesClientContextFunc struct {
	defaultHook func() context.Context
	hooks       []func() context.Context
	history     []GitserverService_ChangedFilesClientContextFuncCall
	mutex       sync.Mutex
}

// Context delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ChangedFilesClient) Context() context.Context {
	r0 := m.ContextFunc.nextHook()()
	m.ContextFunc.appendCall(GitserverService_ChangedFilesClientContextFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Context method of
// the parent MockGitserverService_ChangedFilesClient instance is invoked
// and the hook queue is empty.
func (f *GitserverService_ChangedFilesClientContextFunc) SetDefaultHook(hook func() context.Context) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Context method of the parent MockGitserverService_ChangedFilesClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverService_ChangedFilesClientContextFunc) PushHook(hook func() context.Context) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ChangedFilesClientContextFunc) SetDefaultReturn(r0 context.Context) {
	f.SetDefaultHook(func() context.Context {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ChangedFilesClientContextFunc) PushReturn(r0 context.Context) {
	f.PushHook(func() context.Context {
		return r0
	})
}

func (f *GitserverService_ChangedFilesClientContextFunc) nextHook() func() context.Context {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ChangedFilesClientContextFunc) appendCall(r0 GitserverService_ChangedFilesClientContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ChangedFilesClientContextFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ChangedFilesClientContextFunc) History() []GitserverService_ChangedFilesClientContextFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ChangedFilesClientContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ChangedFilesClientContextFuncCall is an object that
// describes an invocation of method Context on an instance of
// MockGitserverService_ChangedFilesClient.
type GitserverService_ChangedFilesClientContextFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 context.Context
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ChangedFilesClientContextFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ChangedFilesClientContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ChangedFilesClientHeaderFunc describes the behavior when
// the Header method of the parent MockGitserverService_ChangedFilesClient
// instance is invoked.
type GitserverService_ChangedFilesClientHeaderFunc struct {
	defaultHook func() (metadata.MD, error)
	hooks       []func() (metadata.MD, error)
	history     []GitserverService_ChangedFilesClientHeaderFuncCall
	mutex       sync.Mutex
}

// Header delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ChangedFilesClient) Header() (metadata.MD, error) {
	r0, r1 := m.HeaderFunc.nextHook()()
	m.HeaderFunc.appendCall(GitserverService_ChangedFilesClientHeaderFuncCall{r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Header method of the
// parent MockGitserverService_ChangedFilesClient instance is invoked and
// the hook queue is empty.
func (f *GitserverService_ChangedFilesClientHeaderFunc) SetDefaultHook(hook func() (metadata.MD, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Header method of the parent MockGitserverService_ChangedFilesClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverService_ChangedFilesClientHeaderFunc) PushHook(hook func() (metadata.MD, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ChangedFilesClientHeaderFunc) SetDefaultReturn(r0 metadata.MD, r1 error) {
	f.SetDefaultHook(func() (metadata.MD, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ChangedFilesClientHeaderFunc) PushReturn(r0 metadata.MD, r1 error) {
	f.PushHook(func() (metadata.MD, error) {
		return r0, r1
	})
}

func (f *GitserverService_ChangedFilesClientHeaderFunc) nextHook() func() (metadata.MD, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ChangedFilesClientHeaderFunc) appendCall(r0 GitserverService_ChangedFilesClientHeaderFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ChangedFilesClientHeaderFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ChangedFilesClientHeaderFunc) History() []GitserverService_ChangedFilesClientHeaderFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ChangedFilesClientHeaderFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ChangedFilesClientHeaderFuncCall is an object that
// describes an invocation of method Header on an instance of
// MockGitserverService_ChangedFilesClient.
type GitserverService_ChangedFilesClientHeaderFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 metadata.MD
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ChangedFilesClientHeaderFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ChangedFilesClientHeaderFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverService_ChangedFilesClientRecvFunc describes the behavior when
// the Recv method of the parent MockGitserverService_ChangedFilesClient
// instance is invoked.
type GitserverService_ChangedFilesClientRecvFunc struct {
	defaultHook func() (*v1.ChangedFilesResponse, error)
	hooks       []func() (*v1.ChangedFilesResponse, error)
	history     []GitserverService_ChangedFilesClientRecvFuncCall
	mutex       sync.Mutex
}

// Recv delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ChangedFilesClient) Recv() (*v1.ChangedFilesResponse, error) {
	r0, r1 := m.RecvFunc.nextHook()()
	m.RecvFunc.appendCall(GitserverService_ChangedFilesClientRecvFuncCall{r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Recv method of the
// parent MockGitserverService_ChangedFilesClient instance is invoked and
// the hook queue is empty.
func (f *GitserverService_ChangedFilesClientRecvFunc) SetDefaultHook(hook func() (*v1.ChangedFilesResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Recv method of the parent MockGitserverService_ChangedFilesClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverService_ChangedFilesClientRecvFunc) PushHook(hook func() (*v1.ChangedFilesResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ChangedFilesClientRecvFunc) SetDefaultReturn(r0 *v1.ChangedFilesResponse, r1 error) {
	f.SetDefaultHook(func() (*v1.ChangedFilesResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ChangedFilesClientRecvFunc) PushReturn(r0 *v1.ChangedFilesResponse, r1 error) {
	f.PushHook(func() (*v1.ChangedFilesResponse, error) {
		return r0, r1
	})
}

func (f *GitserverService_ChangedFilesClientRecvFunc) nextHook() func() (*v1.ChangedFilesResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ChangedFilesClientRecvFunc) appendCall(r0 GitserverService_ChangedFilesClientRecvFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ChangedFilesClientRecvFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ChangedFilesClientRecvFunc) History() []GitserverService_ChangedFilesClientRecvFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ChangedFilesClientRecvFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ChangedFilesClientRecvFuncCall is an object that
// describes an invocation of method Recv on an instance of
// MockGitserverService_ChangedFilesClient.
type GitserverService_ChangedFilesClientRecvFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.ChangedFilesResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ChangedFilesClientRecvFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ChangedFilesClientRecvFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverService_ChangedFilesClientRecvMsgFunc describes the behavior
// when the RecvMsg method of the parent
// MockGitserverService_ChangedFilesClient instance is invoked.
type GitserverService_ChangedFilesClientRecvMsgFunc struct {
	defaultHook func(interface{}) error
	hooks       []func(interface{}) error
	history     []GitserverService_ChangedFilesClientRecvMsgFuncCall
	mutex       sync.Mutex
}

// RecvMsg delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ChangedFilesClient) RecvMsg(v0 interface{}) error {
	r0 := m.RecvMsgFunc.nextHook()(v0)
	m.RecvMsgFunc.appendCall(GitserverService_ChangedFilesClientRecvMsgFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the RecvMsg method of
// the parent MockGitserverService_ChangedFilesClient instance is invoked
// and the hook queue is empty.
func (f *GitserverService_ChangedFilesClientRecvMsgFunc) SetDefaultHook(hook func(interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RecvMsg method of the parent MockGitserverService_ChangedFilesClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverService_ChangedFilesClientRecvMsgFunc) PushHook(hook func(interface{}) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ChangedFilesClientRecvMsgFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(interface{}) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ChangedFilesClientRecvMsgFunc) PushReturn(r0 error) {
	f.PushHook(func(interface{}) error {
		return r0
	})
}

func (f *GitserverService_ChangedFilesClientRecvMsgFunc) nextHook() func(interface{}) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ChangedFilesClientRecvMsgFunc) appendCall(r0 GitserverService_ChangedFilesClientRecvMsgFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ChangedFilesClientRecvMsgFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ChangedFilesClientRecvMsgFunc) History() []GitserverService_ChangedFilesClientRecvMsgFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ChangedFilesClientRecvMsgFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ChangedFilesClientRecvMsgFuncCall is an object that
// describes an invocation of method RecvMsg on an instance of
// MockGitserverService_ChangedFilesClient.
type GitserverService_ChangedFilesClientRecvMsgFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ChangedFilesClientRecvMsgFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ChangedFilesClientRecvMsgFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ChangedFilesClientSendMsgFunc describes the behavior
// when the SendMsg method of the parent
// MockGitserverService_ChangedFilesClient instance is invoked.
type GitserverService_ChangedFilesClientSendMsgFunc struct {
	defaultHook func(interface{}) error
	hooks       []func(interface{}) error
	history     []GitserverService_ChangedFilesClientSendMsgFuncCall
	mutex       sync.Mutex
}

// SendMsg delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ChangedFilesClient) SendMsg(v0 interface{}) error {
	r0 := m.SendMsgFunc.nextHook()(v0)
	m.SendMsgFunc.appendCall(GitserverService_ChangedFilesClientSendMsgFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SendMsg method of
// the parent MockGitserverService_ChangedFilesClient instance is invoked
// and the hook queue is empty.
func (f *GitserverService_ChangedFilesClientSendMsgFunc) SetDefaultHook(hook func(interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SendMsg method of the parent MockGitserverService_ChangedFilesClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverService_ChangedFilesClientSendMsgFunc) PushHook(hook func(interface{}) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ChangedFilesClientSendMsgFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(interface{}) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ChangedFilesClientSendMsgFunc) PushReturn(r0 error) {
	f.PushHook(func(interface{}) error {
		return r0
	})
}

func (f *GitserverService_ChangedFilesClientSendMsgFunc) nextHook() func(interface{}) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ChangedFilesClientSendMsgFunc) appendCall(r0 GitserverService_ChangedFilesClientSendMsgFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ChangedFilesClientSendMsgFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ChangedFilesClientSendMsgFunc) History() []GitserverService_ChangedFilesClientSendMsgFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ChangedFilesClientSendMsgFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ChangedFilesClientSendMsgFuncCall is an object that
// describes an invocation of method SendMsg on an instance of
// MockGitserverService_ChangedFilesClient.
type GitserverService_ChangedFilesClientSendMsgFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ChangedFilesClientSendMsgFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ChangedFilesClientSendMsgFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ChangedFilesClientTrailerFunc describes the behavior
// when the Trailer method of the parent
// MockGitserverService_ChangedFilesClient instance is invoked.
type GitserverService_ChangedFilesClientTrailerFunc struct {
	defaultHook func() metadata.MD
	hooks       []func() metadata.MD
	history     []GitserverService_ChangedFilesClientTrailerFuncCall
	mutex       sync.Mutex
}

// Trailer delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ChangedFilesClient) Trailer() metadata.MD {
	r0 := m.TrailerFunc.nextHook()()
	m.TrailerFunc.appendCall(GitserverService_ChangedFilesClientTrailerFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Trailer method of
// the parent MockGitserverService_ChangedFilesClient instance is invoked
// and the hook queue is empty.
func (f *GitserverService_ChangedFilesClientTrailerFunc) SetDefaultHook(hook func() metadata.MD) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Trailer method of the parent MockGitserverService_ChangedFilesClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverService_ChangedFilesClientTrailerFunc) PushHook(hook func() metadata.MD) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ChangedFilesClientTrailerFunc) SetDefaultReturn(r0 metadata.MD) {
	f.SetDefaultHook(func() metadata.MD {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ChangedFilesClientTrailerFunc) PushReturn(r0 metadata.MD) {
	f.PushHook(func() metadata.MD {
		return r0
	})
}

func (f *GitserverService_ChangedFilesClientTrailerFunc) nextHook() func() metadata.MD {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ChangedFilesClientTrailerFunc) appendCall(r0 GitserverService_ChangedFilesClientTrailerFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ChangedFilesClientTrailerFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ChangedFilesClientTrailerFunc) History() []GitserverService_ChangedFilesClientTrailerFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ChangedFilesClientTrailerFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ChangedFilesClientTrailerFuncCall is an object that
// describes an invocation of method Trailer on an instance of
// MockGitserverService_ChangedFilesClient.
type GitserverService_ChangedFilesClientTrailerFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 metadata.MD
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ChangedFilesClientTrailerFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ChangedFilesClientTrailerFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockGitserverService_ChangedFilesServer is a mock implementation of the
// GitserverService_ChangedFilesServer interface (from the package
// github.com/sourcegraph/sourcegraph/internal/gitserver/v1) used for unit
// testing.
type MockGitserverService_ChangedFilesServer struct {
	// ContextFunc is an instance of a mock function object controlling the
	// behavior of the method Context.
	ContextFunc *GitserverService_ChangedFilesServerContextFunc
	// RecvMsgFunc is an instance of a mock function object controlling the
	// behavior of the method RecvMsg.
	RecvMsgFunc *GitserverService_ChangedFilesServerRecvMsgFunc
	// SendFunc is an instance of a mock function object controlling the
	// behavior of the method Send.
	SendFunc *GitserverService_ChangedFilesServerSendFunc
	// SendHeaderFunc is an instance of a mock function object controlling
	// the behavior of the method SendHeader.
	SendHeaderFunc *GitserverService_ChangedFilesServerSendHeaderFunc
	// SendMsgFunc is an instance of a mock function object controlling the
	// behavior of the method SendMsg.
	SendMsgFunc *GitserverService_ChangedFilesServerSendMsgFunc
	// SetHeaderFunc is an instance of a mock function object controlling
	// the behavior of the method SetHeader.
	SetHeaderFunc *GitserverService_ChangedFilesServerSetHeaderFunc
	// SetTrailerFunc is an instance of a mock function object controlling
	// the behavior of the method SetTrailer.
	SetTrailerFunc *GitserverService_ChangedFilesServerSetTrailerFunc
}

// NewMockGitserverService_ChangedFilesServer creates a new mock of the
// GitserverService_ChangedFilesServer interface. All methods return zero
// values for all results, unless overwritten.
func NewMockGitserverService_ChangedFilesServer() *MockGitserverService_ChangedFilesServer {
	return &MockGitserverService_ChangedFilesServer{
		ContextFunc: &GitserverService_ChangedFilesServerContextFunc{
			defaultHook: func() (r0 context.Context) {
				return
			},
		},
		RecvMsgFunc: &GitserverService_ChangedFilesServerRecvMsgFunc{
			defaultHook: func(interface{}) (r0 error) {
				return
			},
		},
		SendFunc: &GitserverService_ChangedFilesServerSendFunc{
			defaultHook: func(*v1.ChangedFilesResponse) (r0 error) {
				return
			},
		},
		SendHeaderFunc: &GitserverService_ChangedFilesServerSendHeaderFunc{
			defaultHook: func(metadata.MD) (r0 error) {
				return
			},
		},
		SendMsgFunc: &GitserverService_ChangedFilesServerSendMsgFunc{
			defaultHook: func(interface{}) (r0 error) {
				return
			},
		},
		SetHeaderFunc: &GitserverService_ChangedFilesServerSetHeaderFunc{
			defaultHook: func(metadata.MD) (r0 error) {
				return
			},
		},
		SetTrailerFunc: &GitserverService_ChangedFilesServerSetTrailerFunc{
			defaultHook: func(metadata.MD) {
				return
			},
		},
	}
}

// NewStrictMockGitserverService_ChangedFilesServer creates a new mock of
// the GitserverService_ChangedFilesServer interface. All methods panic on
// invocation, unless overwritten.
func NewStrictMockGitserverService_ChangedFilesServer() *MockGitserverService_ChangedFilesServer {
	return &MockGitserverService_ChangedFilesServer{
		ContextFunc: &GitserverService_ChangedFilesServerContextFunc{
			defaultHook: func() context.Context {
				panic("unexpected invocation of MockGitserverService_ChangedFilesServer.Context")
			},
		},
		RecvMsgFunc: &GitserverService_ChangedFilesServerRecvMsgFunc{
			defaultHook: func(interface{}) error {
				panic("unexpected invocation of MockGitserverService_ChangedFilesServer.RecvMsg")
			},
		},
		SendFunc: &GitserverService_ChangedFilesServerSendFunc{
			defaultHook: func(*v1.ChangedFilesResponse) error {
				panic("unexpected invocation of MockGitserverService_ChangedFilesServer.Send")
			},
		},
		SendHeaderFunc: &GitserverService_ChangedFilesServerSendHeaderFunc{
			defaultHook: func(metadata.MD) error {
				panic("unexpected invocation of MockGitserverService_ChangedFilesServer.SendHeader")
			},
		},
		SendMsgFunc: &GitserverService_ChangedFilesServerSendMsgFunc{
			defaultHook: func(interface{}) error {
				panic("unexpected invocation of MockGitserverService_ChangedFilesServer.SendMsg")
			},
		},
		SetHeaderFunc: &GitserverService_ChangedFilesServerSetHeaderFunc{
			defaultHook: func(metadata.MD) error {
				panic("unexpected invocation of MockGitserverService_ChangedFilesServer.SetHeader")
			},
		},
		SetTrailerFunc: &GitserverService_ChangedFilesServerSetTrailerFunc{
			defaultHook: func(metadata.MD) {
				panic("unexpected invocation of MockGitserverService_ChangedFilesServer.SetTrailer")
			},
		},
	}
}

// NewMockGitserverService_ChangedFilesServerFrom creates a new mock of the
// MockGitserverService_ChangedFilesServer interface. All methods delegate
// to the given implementation, unless overwritten.
func NewMockGitserverService_ChangedFilesServerFrom(i v1.GitserverService_ChangedFilesServer) *MockGitserverService_ChangedFilesServer {
	return &MockGitserverService_ChangedFilesServer{
		ContextFunc: &GitserverService_ChangedFilesServerContextFunc{
			defaultHook: i.Context,
		},
		RecvMsgFunc: &GitserverService_ChangedFilesServerRecvMsgFunc{
			defaultHook: i.RecvMsg,
		},
		SendFunc: &GitserverService_ChangedFilesServerSendFunc{
			defaultHook: i.Send,
		},
		SendHeaderFunc: &GitserverService_ChangedFilesServerSendHeaderFunc{
			defaultHook: i.SendHeader,
		},
		SendMsgFunc: &GitserverService_ChangedFilesServerSendMsgFunc{
			defaultHook: i.SendMsg,
		},
		SetHeaderFunc: &GitserverService_ChangedFilesServerSetHeaderFunc{
			defaultHook: i.SetHeader,
		},
		SetTrailerFunc: &GitserverService_ChangedFilesServerSetTrailerFunc{
			defaultHook: i.SetTrailer,
		},
	}
}

// GitserverService_ChangedFilesServerContextFunc describes the behavior
// when the Context method of the parent
// MockGitserverService_ChangedFilesServer instance is invoked.
type GitserverService_ChangedFilesServerContextFunc struct {
	defaultHook func() context.Context
	hooks       []func() context.Context
	history     []GitserverService_ChangedFilesServerContextFuncCall
	mutex       sync.Mutex
}

// Context delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ChangedFilesServer) Context() context.Context {
	r0 := m.ContextFunc.nextHook()()
	m.ContextFunc.appendCall(GitserverService_ChangedFilesServerContextFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Context method of
// the parent MockGitserverService_ChangedFilesServer instance is invoked
// and the hook queue is empty.
func (f *GitserverService_ChangedFilesServerContextFunc) SetDefaultHook(hook func() context.Context) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Context method of the parent MockGitserverService_ChangedFilesServer
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverService_ChangedFilesServerContextFunc) PushHook(hook func() context.Context) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ChangedFilesServerContextFunc) SetDefaultReturn(r0 context.Context) {
	f.SetDefaultHook(func() context.Context {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ChangedFilesServerContextFunc) PushReturn(r0 context.Context) {
	f.PushHook(func() context.Context {
		return r0
	})
}

func (f *GitserverService_ChangedFilesServerContextFunc) nextHook() func() context.Context {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ChangedFilesServerContextFunc) appendCall(r0 GitserverService_ChangedFilesServerContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ChangedFilesServerContextFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ChangedFilesServerContextFunc) History() []GitserverService_ChangedFilesServerContextFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ChangedFilesServerContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ChangedFilesServerContextFuncCall is an object that
// describes an invocation of method Context on an instance of
// MockGitserverService_ChangedFilesServer.
type GitserverService_ChangedFilesServerContextFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 context.Context
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ChangedFilesServerContextFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ChangedFilesServerContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ChangedFilesServerRecvMsgFunc describes the behavior
// when the RecvMsg method of the parent
// MockGitserverService_ChangedFilesServer instance is invoked.
type GitserverService_ChangedFilesServerRecvMsgFunc struct {
	defaultHook func(interface{}) error
	hooks       []func(interface{}) error
	history     []GitserverService_ChangedFilesServerRecvMsgFuncCall
	mutex       sync.Mutex
}

// RecvMsg delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ChangedFilesServer) RecvMsg(v0 interface{}) error {
	r0 := m.RecvMsgFunc.nextHook()(v0)
	m.RecvMsgFunc.appendCall(GitserverService_ChangedFilesServerRecvMsgFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the RecvMsg method of
// the parent MockGitserverService_ChangedFilesServer instance is invoked
// and the hook queue is empty.
func (f *GitserverService_ChangedFilesServerRecvMsgFunc) SetDefaultHook(hook func(interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RecvMsg method of the parent MockGitserverService_ChangedFilesServer
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverService_ChangedFilesServerRecvMsgFunc) PushHook(hook func(interface{}) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ChangedFilesServerRecvMsgFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(interface{}) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ChangedFilesServerRecvMsgFunc) PushReturn(r0 error) {
	f.PushHook(func(interface{}) error {
		return r0
	})
}

func (f *GitserverService_ChangedFilesServerRecvMsgFunc) nextHook() func(interface{}) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ChangedFilesServerRecvMsgFunc) appendCall(r0 GitserverService_ChangedFilesServerRecvMsgFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ChangedFilesServerRecvMsgFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ChangedFilesServerRecvMsgFunc) History() []GitserverService_ChangedFilesServerRecvMsgFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ChangedFilesServerRecvMsgFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ChangedFilesServerRecvMsgFuncCall is an object that
// describes an invocation of method RecvMsg on an instance of
// MockGitserverService_ChangedFilesServer.
type GitserverService_ChangedFilesServerRecvMsgFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ChangedFilesServerRecvMsgFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ChangedFilesServerRecvMsgFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ChangedFilesServerSendFunc describes the behavior when
// the Send method of the parent MockGitserverService_ChangedFilesServer
// instance is invoked.
type GitserverService_ChangedFilesServerSendFunc struct {
	defaultHook func(*v1.ChangedFilesResponse) error
	hooks       []func(*v1.ChangedFilesResponse) error
	history     []GitserverService_ChangedFilesServerSendFuncCall
	mutex       sync.Mutex
}

// Send delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ChangedFilesServer) Send(v0 *v1.ChangedFilesResponse) error {
	r0 := m.SendFunc.nextHook()(v0)
	m.SendFunc.appendCall(GitserverService_ChangedFilesServerSendFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Send method of the
// parent MockGitserverService_ChangedFilesServer instance is invoked and
// the hook queue is empty.
func (f *GitserverService_ChangedFilesServerSendFunc) SetDefaultHook(hook func(*v1.ChangedFilesResponse) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Send method of the parent MockGitserverService_ChangedFilesServer
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverService_ChangedFilesServerSendFunc) PushHook(hook func(*v1.ChangedFilesResponse) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ChangedFilesServerSendFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(*v1.ChangedFilesResponse) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ChangedFilesServerSendFunc) PushReturn(r0 error) {
	f.PushHook(func(*v1.ChangedFilesResponse) error {
		return r0
	})
}

func (f *GitserverService_ChangedFilesServerSendFunc) nextHook() func(*v1.ChangedFilesResponse) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ChangedFilesServerSendFunc) appendCall(r0 GitserverService_ChangedFilesServerSendFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ChangedFilesServerSendFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ChangedFilesServerSendFunc) History() []GitserverService_ChangedFilesServerSendFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ChangedFilesServerSendFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ChangedFilesServerSendFuncCall is an object that
// describes an invocation of method Send on an instance of
// MockGitserverService_ChangedFilesServer.
type GitserverService_ChangedFilesServerSendFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *v1.ChangedFilesResponse
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ChangedFilesServerSendFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ChangedFilesServerSendFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ChangedFilesServerSendHeaderFunc describes the behavior
// when the SendHeader method of the parent
// MockGitserverService_ChangedFilesServer instance is invoked.
type GitserverService_ChangedFilesServerSendHeaderFunc struct {
	defaultHook func(metadata.MD) error
	hooks       []func(metadata.MD) error
	history     []GitserverService_ChangedFilesServerSendHeaderFuncCall
	mutex       sync.Mutex
}

// SendHeader delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverService_ChangedFilesServer) SendHeader(v0 metadata.MD) error {
	r0 := m.SendHeaderFunc.nextHook()(v0)
	m.SendHeaderFunc.appendCall(GitserverService_ChangedFilesServerSendHeaderFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SendHeader method of
// the parent MockGitserverService_ChangedFilesServer instance is invoked
// and the hook queue is empty.
func (f *GitserverService_ChangedFilesServerSendHeaderFunc) SetDefaultHook(hook func(metadata.MD) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SendHeader method of the parent MockGitserverService_ChangedFilesServer
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverService_ChangedFilesServerSendHeaderFunc) PushHook(hook func(metadata.MD) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ChangedFilesServerSendHeaderFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(metadata.MD) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ChangedFilesServerSendHeaderFunc) PushReturn(r0 error) {
	f.PushHook(func(metadata.MD) error {
		return r0
	})
}

func (f *GitserverService_ChangedFilesServerSendHeaderFunc) nextHook() func(metadata.MD) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ChangedFilesServerSendHeaderFunc) appendCall(r0 GitserverService_ChangedFilesServerSendHeaderFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ChangedFilesServerSendHeaderFuncCall objects describing
// the invocations of this function.
func (f *GitserverService_ChangedFilesServerSendHeaderFunc) History() []GitserverService_ChangedFilesServerSendHeaderFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ChangedFilesServerSendHeaderFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ChangedFilesServerSendHeaderFuncCall is an object that
// describes an invocation of method SendHeader on an instance of
// MockGitserverService_ChangedFilesServer.
type GitserverService_ChangedFilesServerSendHeaderFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 metadata.MD
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ChangedFilesServerSendHeaderFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ChangedFilesServerSendHeaderFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ChangedFilesServerSendMsgFunc describes the behavior
// when the SendMsg method of the parent
// MockGitserverService_ChangedFilesServer instance is invoked.
type GitserverService_ChangedFilesServerSendMsgFunc struct {
	defaultHook func(interface{}) error
	hooks       []func(interface{}) error
	history     []GitserverService_ChangedFilesServerSendMsgFuncCall
	mutex       sync.Mutex
}

// SendMsg delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ChangedFilesServer) SendMsg(v0 interface{}) error {
	r0 := m.SendMsgFunc.nextHook()(v0)
	m.SendMsgFunc.appendCall(GitserverService_ChangedFilesServerSendMsgFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SendMsg method of
// the parent MockGitserverService_ChangedFilesServer instance is invoked
// and the hook queue is empty.
func (f *GitserverService_ChangedFilesServerSendMsgFunc) SetDefaultHook(hook func(interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SendMsg method of the parent MockGitserverService_ChangedFilesServer
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverService_ChangedFilesServerSendMsgFunc) PushHook(hook func(interface{}) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ChangedFilesServerSendMsgFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(interface{}) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ChangedFilesServerSendMsgFunc) PushReturn(r0 error) {
	f.PushHook(func(interface{}) error {
		return r0
	})
}

func (f *GitserverService_ChangedFilesServerSendMsgFunc) nextHook() func(interface{}) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ChangedFilesServerSendMsgFunc) appendCall(r0 GitserverService_ChangedFilesServerSendMsgFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ChangedFilesServerSendMsgFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ChangedFilesServerSendMsgFunc) History() []GitserverService_ChangedFilesServerSendMsgFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ChangedFilesServerSendMsgFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ChangedFilesServerSendMsgFuncCall is an object that
// describes an invocation of method SendMsg on an instance of
// MockGitserverService_ChangedFilesServer.
type GitserverService_ChangedFilesServerSendMsgFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ChangedFilesServerSendMsgFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ChangedFilesServerSendMsgFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ChangedFilesServerSetHeaderFunc describes the behavior
// when the SetHeader method of the parent
// MockGitserverService_ChangedFilesServer instance is invoked.
type GitserverService_ChangedFilesServerSetHeaderFunc struct {
	defaultHook func(metadata.MD) error
	hooks       []func(metadata.MD) error
	history     []GitserverService_ChangedFilesServerSetHeaderFuncCall
	mutex       sync.Mutex
}

// SetHeader delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ChangedFilesServer) SetHeader(v0 metadata.MD) error {
	r0 := m.SetHeaderFunc.nextHook()(v0)
	m.SetHeaderFunc.appendCall(GitserverService_ChangedFilesServerSetHeaderFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetHeader method of
// the parent MockGitserverService_ChangedFilesServer instance is invoked
// and the hook queue is empty.
func (f *GitserverService_ChangedFilesServerSetHeaderFunc) SetDefaultHook(hook func(metadata.MD) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetHeader method of the parent MockGitserverService_ChangedFilesServer
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverService_ChangedFilesServerSetHeaderFunc) PushHook(hook func(metadata.MD) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ChangedFilesServerSetHeaderFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(metadata.MD) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ChangedFilesServerSetHeaderFunc) PushReturn(r0 error) {
	f.PushHook(func(metadata.MD) error {
		return r0
	})
}

func (f *GitserverService_ChangedFilesServerSetHeaderFunc) nextHook() func(metadata.MD) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ChangedFilesServerSetHeaderFunc) appendCall(r0 GitserverService_ChangedFilesServerSetHeaderFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ChangedFilesServerSetHeaderFuncCall objects describing
// the invocations of this function.
func (f *GitserverService_ChangedFilesServerSetHeaderFunc) History() []GitserverService_ChangedFilesServerSetHeaderFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ChangedFilesServerSetHeaderFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ChangedFilesServerSetHeaderFuncCall is an object that
// describes an invocation of method SetHeader on an instance of
// MockGitserverService_ChangedFilesServer.
type GitserverService_ChangedFilesServerSetHeaderFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 metadata.MD
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ChangedFilesServerSetHeaderFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ChangedFilesServerSetHeaderFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ChangedFilesServerSetTrailerFunc describes the behavior
// when the SetTrailer method of the parent
// MockGitserverService_ChangedFilesServer instance is invoked.
type GitserverService_ChangedFilesServerSetTrailerFunc struct {
	defaultHook func(metadata.MD)
	hooks       []func(metadata.MD)
	history     []GitserverService_ChangedFilesServerSetTrailerFuncCall
	mutex       sync.Mutex
}

// SetTrailer delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverService_ChangedFilesServer) SetTrailer(v0 metadata.MD) {
	m.SetTrailerFunc.nextHook()(v0)
	m.SetTrailerFunc.appendCall(GitserverService_ChangedFilesServerSetTrailerFuncCall{v0})
	return
}

// SetDefaultHook sets function that is called when the SetTrailer method of
// the parent MockGitserverService_ChangedFilesServer instance is invoked
// and the hook queue is empty.
func (f *GitserverService_ChangedFilesServerSetTrailerFunc) SetDefaultHook(hook func(metadata.MD)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetTrailer method of the parent MockGitserverService_ChangedFilesServer
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverService_ChangedFilesServerSetTrailerFunc) PushHook(hook func(metadata.MD)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ChangedFilesServerSetTrailerFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(metadata.MD) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ChangedFilesServerSetTrailerFunc) PushReturn() {
	f.PushHook(func(metadata.MD) {
		return
	})
}

func (f *GitserverService_ChangedFilesServerSetTrailerFunc) nextHook() func(metadata.MD) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ChangedFilesServerSetTrailerFunc) appendCall(r0 GitserverService_ChangedFilesServerSetTrailerFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ChangedFilesServerSetTrailerFuncCall objects describing
// the invocations of this function.
func (f *GitserverService_ChangedFilesServerSetTrailerFunc) History() []GitserverService_ChangedFilesServerSetTrailerFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ChangedFilesServerSetTrailerFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ChangedFilesServerSetTrailerFuncCall is an object that
// describes an invocation of method SetTrailer on an instance of
// MockGitserverService_ChangedFilesServer.
type GitserverService_ChangedFilesServerSetTrailerFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 metadata.MD
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ChangedFilesServerSetTrailerFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ChangedFilesServerSetTrailerFuncCall) Results() []interface{} {
	return []interface{}{}
}

// MockGitserverService_ExecServer is a mock implementation of the
// GitserverService_ExecServer interface (from the package
// github.com/sourcegraph/sourcegraph/internal/gitserver/v1) used for unit
// testing.
type MockGitserverService_ExecServer struct {
	// ContextFunc is an instance of a mock function object controlling the
	// behavior of the method Context.
	ContextFunc *GitserverService_ExecServerContextFunc
	// RecvMsgFunc is an instance of a mock function object controlling the
	// behavior of the method RecvMsg.
	RecvMsgFunc *GitserverService_ExecServerRecvMsgFunc
	// SendFunc is an instance of a mock function object controlling the
	// behavior of the method Send.
	SendFunc *GitserverService_ExecServerSendFunc
	// SendHeaderFunc is an instance of a mock function object controlling
	// the behavior of the method SendHeader.
	SendHeaderFunc *GitserverService_ExecServerSendHeaderFunc
	// SendMsgFunc is an instance of a mock function object controlling the
	// behavior of the method SendMsg.
	SendMsgFunc *GitserverService_ExecServerSendMsgFunc
	// SetHeaderFunc is an instance of a mock function object controlling
	// the behavior of the method SetHeader.
	SetHeaderFunc *GitserverService_ExecServerSetHeaderFunc
	// SetTrailerFunc is an instance of a mock function object controlling
	// the behavior of the method SetTrailer.
	SetTrailerFunc *GitserverService_ExecServerSetTrailerFunc
}

// NewMockGitserverService_ExecServer creates a new mock of the
// GitserverService_ExecServer interface. All methods return zero values for
// all results, unless overwritten.
func NewMockGitserverService_ExecServer() *MockGitserverService_ExecServer {
	return &MockGitserverService_ExecServer{
		ContextFunc: &GitserverService_ExecServerContextFunc{
			defaultHook: func() (r0 context.Context) {
				return
			},
		},
		RecvMsgFunc: &GitserverService_ExecServerRecvMsgFunc{
			defaultHook: func(interface{}) (r0 error) {
				return
			},
		},
		SendFunc: &GitserverService_ExecServerSendFunc{
			defaultHook: func(*v1.ExecResponse) (r0 error) {
				return
			},
		},
		SendHeaderFunc: &GitserverService_ExecServerSendHeaderFunc{
			defaultHook: func(metadata.MD) (r0 error) {
				return
			},
		},
		SendMsgFunc: &GitserverService_ExecServerSendMsgFunc{
			defaultHook: func(interface{}) (r0 error) {
				return
			},
		},
		SetHeaderFunc: &GitserverService_ExecServerSetHeaderFunc{
			defaultHook: func(metadata.MD) (r0 error) {
				return
			},
		},
		SetTrailerFunc: &GitserverService_ExecServerSetTrailerFunc{
			defaultHook: func(metadata.MD) {
				return
			},
		},
	}
}

// NewStrictMockGitserverService_ExecServer creates a new mock of the
// GitserverService_ExecServer interface. All methods panic on invocation,
// unless overwritten.
func NewStrictMockGitserverService_ExecServer() *MockGitserverService_ExecServer {
	return &MockGitserverService_ExecServer{
		ContextFunc: &GitserverService_ExecServerContextFunc{
			defaultHook: func() context.Context {
				panic("unexpected invocation of MockGitserverService_ExecServer.Context")
			},
		},
		RecvMsgFunc: &GitserverService_ExecServerRecvMsgFunc{
			defaultHook: func(interface{}) error {
				panic("unexpected invocation of MockGitserverService_ExecServer.RecvMsg")
			},
		},
		SendFunc: &GitserverService_ExecServerSendFunc{
			defaultHook: func(*v1.ExecResponse) error {
				panic("unexpected invocation of MockGitserverService_ExecServer.Send")
			},
		},
		SendHeaderFunc: &GitserverService_ExecServerSendHeaderFunc{
			defaultHook: func(metadata.MD) error {
				panic("unexpected invocation of MockGitserverService_ExecServer.SendHeader")
			},
		},
		SendMsgFunc: &GitserverService_ExecServerSendMsgFunc{
			defaultHook: func(interface{}) error {
				panic("unexpected invocation of MockGitserverService_ExecServer.SendMsg")
			},
		},
		SetHeaderFunc: &GitserverService_ExecServerSetHeaderFunc{
			defaultHook: func(metadata.MD) error {
				panic("unexpected invocation of MockGitserverService_ExecServer.SetHeader")
			},
		},
		SetTrailerFunc: &GitserverService_ExecServerSetTrailerFunc{
			defaultHook: func(metadata.MD) {
				panic("unexpected invocation of MockGitserverService_ExecServer.SetTrailer")
			},
		},
	}
}

// NewMockGitserverService_ExecServerFrom creates a new mock of the
// MockGitserverService_ExecServer interface. All methods delegate to the
// given implementation, unless overwritten.
func NewMockGitserverService_ExecServerFrom(i v1.GitserverService_ExecServer) *MockGitserverService_ExecServer {
	return &MockGitserverService_ExecServer{
		ContextFunc: &GitserverService_ExecServerContextFunc{
			defaultHook: i.Context,
		},
		RecvMsgFunc: &GitserverService_ExecServerRecvMsgFunc{
			defaultHook: i.RecvMsg,
		},
		SendFunc: &GitserverService_ExecServerSendFunc{
			defaultHook: i.Send,
		},
		SendHeaderFunc: &GitserverService_ExecServerSendHeaderFunc{
			defaultHook: i.SendHeader,
		},
		SendMsgFunc: &GitserverService_ExecServerSendMsgFunc{
			defaultHook: i.SendMsg,
		},
		SetHeaderFunc: &GitserverService_ExecServerSetHeaderFunc{
			defaultHook: i.SetHeader,
		},
		SetTrailerFunc: &GitserverService_ExecServerSetTrailerFunc{
			defaultHook: i.SetTrailer,
		},
	}
}

// GitserverService_ExecServerContextFunc describes the behavior when the
// Context method of the parent MockGitserverService_ExecServer instance is
// invoked.
type GitserverService_ExecServerContextFunc struct {
	defaultHook func() context.Context
	hooks       []func() context.Context
	history     []GitserverService_ExecServerContextFuncCall
	mutex       sync.Mutex
}

// Context delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ExecServer) Context() context.Context {
	r0 := m.ContextFunc.nextHook()()
	m.ContextFunc.appendCall(GitserverService_ExecServerContextFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Context method of
// the parent MockGitserverService_ExecServer instance is invoked and the
// hook queue is empty.
func (f *GitserverService_ExecServerContextFunc) SetDefaultHook(hook func() context.Context) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Context method of the parent MockGitserverService_ExecServer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ExecServerContextFunc) PushHook(hook func() context.Context) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ExecServerContextFunc) SetDefaultReturn(r0 context.Context) {
	f.SetDefaultHook(func() context.Context {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ExecServerContextFunc) PushReturn(r0 context.Context) {
	f.PushHook(func() context.Context {
		return r0
	})
}

func (f *GitserverService_ExecServerContextFunc) nextHook() func() context.Context {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ExecServerContextFunc) appendCall(r0 GitserverService_ExecServerContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverService_ExecServerContextFuncCall
// objects describing the invocations of this function.
func (f *GitserverService_ExecServerContextFunc) History() []GitserverService_ExecServerContextFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ExecServerContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ExecServerContextFuncCall is an object that describes an
// invocation of method Context on an instance of
// MockGitserverService_ExecServer.
type GitserverService_ExecServerContextFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 context.Context
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ExecServerContextFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ExecServerContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ExecServerRecvMsgFunc describes the behavior when the
// RecvMsg method of the parent MockGitserverService_ExecServer instance is
// invoked.
type GitserverService_ExecServerRecvMsgFunc struct {
	defaultHook func(interface{}) error
	hooks       []func(interface{}) error
	history     []GitserverService_ExecServerRecvMsgFuncCall
	mutex       sync.Mutex
}

// RecvMsg delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ExecServer) RecvMsg(v0 interface{}) error {
	r0 := m.RecvMsgFunc.nextHook()(v0)
	m.RecvMsgFunc.appendCall(GitserverService_ExecServerRecvMsgFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the RecvMsg method of
// the parent MockGitserverService_ExecServer instance is invoked and the
// hook queue is empty.
func (f *GitserverService_ExecServerRecvMsgFunc) SetDefaultHook(hook func(interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RecvMsg method of the parent MockGitserverService_ExecServer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ExecServerRecvMsgFunc) PushHook(hook func(interface{}) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ExecServerRecvMsgFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(interface{}) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ExecServerRecvMsgFunc) PushReturn(r0 error) {
	f.PushHook(func(interface{}) error {
		return r0
	})
}

func (f *GitserverService_ExecServerRecvMsgFunc) nextHook() func(interface{}) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ExecServerRecvMsgFunc) appendCall(r0 GitserverService_ExecServerRecvMsgFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverService_ExecServerRecvMsgFuncCall
// objects describing the invocations of this function.
func (f *GitserverService_ExecServerRecvMsgFunc) History() []GitserverService_ExecServerRecvMsgFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ExecServerRecvMsgFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ExecServerRecvMsgFuncCall is an object that describes an
// invocation of method RecvMsg on an instance of
// MockGitserverService_ExecServer.
type GitserverService_ExecServerRecvMsgFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ExecServerRecvMsgFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ExecServerRecvMsgFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ExecServerSendFunc describes the behavior when the Send
// method of the parent MockGitserverService_ExecServer instance is invoked.
type GitserverService_ExecServerSendFunc struct {
	defaultHook func(*v1.ExecResponse) error
	hooks       []func(*v1.ExecResponse) error
	history     []GitserverService_ExecServerSendFuncCall
	mutex       sync.Mutex
}

// Send delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ExecServer) Send(v0 *v1.ExecResponse) error {
	r0 := m.SendFunc.nextHook()(v0)
	m.SendFunc.appendCall(GitserverService_ExecServerSendFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Send method of the
// parent MockGitserverService_ExecServer instance is invoked and the hook
// queue is empty.
func (f *GitserverService_ExecServerSendFunc) SetDefaultHook(hook func(*v1.ExecResponse) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Send method of the parent MockGitserverService_ExecServer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ExecServerSendFunc) PushHook(hook func(*v1.ExecResponse) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ExecServerSendFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(*v1.ExecResponse) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ExecServerSendFunc) PushReturn(r0 error) {
	f.PushHook(func(*v1.ExecResponse) error {
		return r0
	})
}

func (f *GitserverService_ExecServerSendFunc) nextHook() func(*v1.ExecResponse) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ExecServerSendFunc) appendCall(r0 GitserverService_ExecServerSendFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverService_ExecServerSendFuncCall
// objects describing the invocations of this function.
func (f *GitserverService_ExecServerSendFunc) History() []GitserverService_ExecServerSendFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ExecServerSendFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ExecServerSendFuncCall is an object that describes an
// invocation of method Send on an instance of
// MockGitserverService_ExecServer.
type GitserverService_ExecServerSendFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *v1.ExecResponse
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ExecServerSendFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ExecServerSendFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ExecServerSendHeaderFunc describes the behavior when the
// SendHeader method of the parent MockGitserverService_ExecServer instance
// is invoked.
type GitserverService_ExecServerSendHeaderFunc struct {
	defaultHook func(metadata.MD) error
	hooks       []func(metadata.MD) error
	history     []GitserverService_ExecServerSendHeaderFuncCall
	mutex       sync.Mutex
}

// SendHeader delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverService_ExecServer) SendHeader(v0 metadata.MD) error {
	r0 := m.SendHeaderFunc.nextHook()(v0)
	m.SendHeaderFunc.appendCall(GitserverService_ExecServerSendHeaderFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SendHeader method of
// the parent MockGitserverService_ExecServer instance is invoked and the
// hook queue is empty.
func (f *GitserverService_ExecServerSendHeaderFunc) SetDefaultHook(hook func(metadata.MD) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SendHeader method of the parent MockGitserverService_ExecServer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ExecServerSendHeaderFunc) PushHook(hook func(metadata.MD) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ExecServerSendHeaderFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(metadata.MD) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ExecServerSendHeaderFunc) PushReturn(r0 error) {
	f.PushHook(func(metadata.MD) error {
		return r0
	})
}

func (f *GitserverService_ExecServerSendHeaderFunc) nextHook() func(metadata.MD) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ExecServerSendHeaderFunc) appendCall(r0 GitserverService_ExecServerSendHeaderFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ExecServerSendHeaderFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ExecServerSendHeaderFunc) History() []GitserverService_ExecServerSendHeaderFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ExecServerSendHeaderFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ExecServerSendHeaderFuncCall is an object that describes
// an invocation of method SendHeader on an instance of
// MockGitserverService_ExecServer.
type GitserverService_ExecServerSendHeaderFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 metadata.MD
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ExecServerSendHeaderFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ExecServerSendHeaderFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ExecServerSendMsgFunc describes the behavior when the
// SendMsg method of the parent MockGitserverService_ExecServer instance is
// invoked.
type GitserverService_ExecServerSendMsgFunc struct {
	defaultHook func(interface{}) error
	hooks       []func(interface{}) error
	history     []GitserverService_ExecServerSendMsgFuncCall
	mutex       sync.Mutex
}

// SendMsg delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ExecServer) SendMsg(v0 interface{}) error {
	r0 := m.SendMsgFunc.nextHook()(v0)
	m.SendMsgFunc.appendCall(GitserverService_ExecServerSendMsgFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SendMsg method of
// the parent MockGitserverService_ExecServer instance is invoked and the
// hook queue is empty.
func (f *GitserverService_ExecServerSendMsgFunc) SetDefaultHook(hook func(interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SendMsg method of the parent MockGitserverService_ExecServer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ExecServerSendMsgFunc) PushHook(hook func(interface{}) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ExecServerSendMsgFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(interface{}) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ExecServerSendMsgFunc) PushReturn(r0 error) {
	f.PushHook(func(interface{}) error {
		return r0
	})
}

func (f *GitserverService_ExecServerSendMsgFunc) nextHook() func(interface{}) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ExecServerSendMsgFunc) appendCall(r0 GitserverService_ExecServerSendMsgFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverService_ExecServerSendMsgFuncCall
// objects describing the invocations of this function.
func (f *GitserverService_ExecServerSendMsgFunc) History() []GitserverService_ExecServerSendMsgFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ExecServerSendMsgFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ExecServerSendMsgFuncCall is an object that describes an
// invocation of method SendMsg on an instance of
// MockGitserverService_ExecServer.
type GitserverService_ExecServerSendMsgFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ExecServerSendMsgFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ExecServerSendMsgFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ExecServerSetHeaderFunc describes the behavior when the
// SetHeader method of the parent MockGitserverService_ExecServer instance
// is invoked.
type GitserverService_ExecServerSetHeaderFunc struct {
	defaultHook func(metadata.MD) error
	hooks       []func(metadata.MD) error
	history     []GitserverService_ExecServerSetHeaderFuncCall
	mutex       sync.Mutex
}

// SetHeader delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ExecServer) SetHeader(v0 metadata.MD) error {
	r0 := m.SetHeaderFunc.nextHook()(v0)
	m.SetHeaderFunc.appendCall(GitserverService_ExecServerSetHeaderFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetHeader method of
// the parent MockGitserverService_ExecServer instance is invoked and the
// hook queue is empty.
func (f *GitserverService_ExecServerSetHeaderFunc) SetDefaultHook(hook func(metadata.MD) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetHeader method of the parent MockGitserverService_ExecServer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ExecServerSetHeaderFunc) PushHook(hook func(metadata.MD) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ExecServerSetHeaderFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(metadata.MD) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ExecServerSetHeaderFunc) PushReturn(r0 error) {
	f.PushHook(func(metadata.MD) error {
		return r0
	})
}

func (f *GitserverService_ExecServerSetHeaderFunc) nextHook() func(metadata.MD) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ExecServerSetHeaderFunc) appendCall(r0 GitserverService_ExecServerSetHeaderFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ExecServerSetHeaderFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ExecServerSetHeaderFunc) History() []GitserverService_ExecServerSetHeaderFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ExecServerSetHeaderFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ExecServerSetHeaderFuncCall is an object that describes
// an invocation of method SetHeader on an instance of
// MockGitserverService_ExecServer.
type GitserverService_ExecServerSetHeaderFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 metadata.MD
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ExecServerSetHeaderFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ExecServerSetHeaderFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ExecServerSetTrailerFunc describes the behavior when the
// SetTrailer method of the parent MockGitserverService_ExecServer instance
// is invoked.
type GitserverService_ExecServerSetTrailerFunc struct {
	defaultHook func(metadata.MD)
	hooks       []func(metadata.MD)
	history     []GitserverService_ExecServerSetTrailerFuncCall
	mutex       sync.Mutex
}

// SetTrailer delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverService_ExecServer) SetTrailer(v0 metadata.MD) {
	m.SetTrailerFunc.nextHook()(v0)
	m.SetTrailerFunc.appendCall(GitserverService_ExecServerSetTrailerFuncCall{v0})
	return
}

// SetDefaultHook sets function that is called when the SetTrailer method of
// the parent MockGitserverService_ExecServer instance is invoked and the
// hook queue is empty.
func (f *GitserverService_ExecServerSetTrailerFunc) SetDefaultHook(hook func(metadata.MD)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetTrailer method of the parent MockGitserverService_ExecServer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ExecServerSetTrailerFunc) PushHook(hook func(metadata.MD)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ExecServerSetTrailerFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(metadata.MD) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ExecServerSetTrailerFunc) PushReturn() {
	f.PushHook(func(metadata.MD) {
		return
	})
}

func (f *GitserverService_ExecServerSetTrailerFunc) nextHook() func(metadata.MD) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ExecServerSetTrailerFunc) appendCall(r0 GitserverService_ExecServerSetTrailerFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ExecServerSetTrailerFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ExecServerSetTrailerFunc) History() []GitserverService_ExecServerSetTrailerFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ExecServerSetTrailerFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ExecServerSetTrailerFuncCall is an object that describes
// an invocation of method SetTrailer on an instance of
// MockGitserverService_ExecServer.
type GitserverService_ExecServerSetTrailerFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 metadata.MD
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ExecServerSetTrailerFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ExecServerSetTrailerFuncCall) Results() []interface{} {
	return []interface{}{}
}

// MockGitserverService_ListRefsClient is a mock implementation of the
// GitserverService_ListRefsClient interface (from the package
// github.com/sourcegraph/sourcegraph/internal/gitserver/v1) used for unit
// testing.
type MockGitserverService_ListRefsClient struct {
	// CloseSendFunc is an instance of a mock function object controlling
	// the behavior of the method CloseSend.
	CloseSendFunc *GitserverService_ListRefsClientCloseSendFunc
	// ContextFunc is an instance of a mock function object controlling the
	// behavior of the method Context.
	ContextFunc *GitserverService_ListRefsClientContextFunc
	// HeaderFunc is an instance of a mock function object controlling the
	// behavior of the method Header.
	HeaderFunc *GitserverService_ListRefsClientHeaderFunc
	// RecvFunc is an instance of a mock function object controlling the
	// behavior of the method Recv.
	RecvFunc *GitserverService_ListRefsClientRecvFunc
	// RecvMsgFunc is an instance of a mock function object controlling the
	// behavior of the method RecvMsg.
	RecvMsgFunc *GitserverService_ListRefsClientRecvMsgFunc
	// SendMsgFunc is an instance of a mock function object controlling the
	// behavior of the method SendMsg.
	SendMsgFunc *GitserverService_ListRefsClientSendMsgFunc
	// TrailerFunc is an instance of a mock function object controlling the
	// behavior of the method Trailer.
	TrailerFunc *GitserverService_ListRefsClientTrailerFunc
}

// NewMockGitserverService_ListRefsClient creates a new mock of the
// GitserverService_ListRefsClient interface. All methods return zero values
// for all results, unless overwritten.
func NewMockGitserverService_ListRefsClient() *MockGitserverService_ListRefsClient {
	return &MockGitserverService_ListRefsClient{
		CloseSendFunc: &GitserverService_ListRefsClientCloseSendFunc{
			defaultHook: func() (r0 error) {
				return
			},
		},
		ContextFunc: &GitserverService_ListRefsClientContextFunc{
			defaultHook: func() (r0 context.Context) {
				return
			},
		},
		HeaderFunc: &GitserverService_ListRefsClientHeaderFunc{
			defaultHook: func() (r0 metadata.MD, r1 error) {
				return
			},
		},
		RecvFunc: &GitserverService_ListRefsClientRecvFunc{
			defaultHook: func() (r0 *v1.ListRefsResponse, r1 error) {
				return
			},
		},
		RecvMsgFunc: &GitserverService_ListRefsClientRecvMsgFunc{
			defaultHook: func(interface{}) (r0 error) {
				return
			},
		},
		SendMsgFunc: &GitserverService_ListRefsClientSendMsgFunc{
			defaultHook: func(interface{}) (r0 error) {
				return
			},
		},
		TrailerFunc: &GitserverService_ListRefsClientTrailerFunc{
			defaultHook: func() (r0 metadata.MD) {
				return
			},
		},
	}
}

// NewStrictMockGitserverService_ListRefsClient creates a new mock of the
// GitserverService_ListRefsClient interface. All methods panic on
// invocation, unless overwritten.
func NewStrictMockGitserverService_ListRefsClient() *MockGitserverService_ListRefsClient {
	return &MockGitserverService_ListRefsClient{
		CloseSendFunc: &GitserverService_ListRefsClientCloseSendFunc{
			defaultHook: func() error {
				panic("unexpected invocation of MockGitserverService_ListRefsClient.CloseSend")
			},
		},
		ContextFunc: &GitserverService_ListRefsClientContextFunc{
			defaultHook: func() context.Context {
				panic("unexpected invocation of MockGitserverService_ListRefsClient.Context")
			},
		},
		HeaderFunc: &GitserverService_ListRefsClientHeaderFunc{
			defaultHook: func() (metadata.MD, error) {
				panic("unexpected invocation of MockGitserverService_ListRefsClient.Header")
			},
		},
		RecvFunc: &GitserverService_ListRefsClientRecvFunc{
			defaultHook: func() (*v1.ListRefsResponse, error) {
				panic("unexpected invocation of MockGitserverService_ListRefsClient.Recv")
			},
		},
		RecvMsgFunc: &GitserverService_ListRefsClientRecvMsgFunc{
			defaultHook: func(interface{}) error {
				panic("unexpected invocation of MockGitserverService_ListRefsClient.RecvMsg")
			},
		},
		SendMsgFunc: &GitserverService_ListRefsClientSendMsgFunc{
			defaultHook: func(interface{}) error {
				panic("unexpected invocation of MockGitserverService_ListRefsClient.SendMsg")
			},
		},
		TrailerFunc: &GitserverService_ListRefsClientTrailerFunc{
			defaultHook: func() metadata.MD {
				panic("unexpected invocation of MockGitserverService_ListRefsClient.Trailer")
			},
		},
	}
}

// NewMockGitserverService_ListRefsClientFrom creates a new mock of the
// MockGitserverService_ListRefsClient interface. All methods delegate to
// the given implementation, unless overwritten.
func NewMockGitserverService_ListRefsClientFrom(i v1.GitserverService_ListRefsClient) *MockGitserverService_ListRefsClient {
	return &MockGitserverService_ListRefsClient{
		CloseSendFunc: &GitserverService_ListRefsClientCloseSendFunc{
			defaultHook: i.CloseSend,
		},
		ContextFunc: &GitserverService_ListRefsClientContextFunc{
			defaultHook: i.Context,
		},
		HeaderFunc: &GitserverService_ListRefsClientHeaderFunc{
			defaultHook: i.Header,
		},
		RecvFunc: &GitserverService_ListRefsClientRecvFunc{
			defaultHook: i.Recv,
		},
		RecvMsgFunc: &GitserverService_ListRefsClientRecvMsgFunc{
			defaultHook: i.RecvMsg,
		},
		SendMsgFunc: &GitserverService_ListRefsClientSendMsgFunc{
			defaultHook: i.SendMsg,
		},
		TrailerFunc: &GitserverService_ListRefsClientTrailerFunc{
			defaultHook: i.Trailer,
		},
	}
}

// GitserverService_ListRefsClientCloseSendFunc describes the behavior when
// the CloseSend method of the parent MockGitserverService_ListRefsClient
// instance is invoked.
type GitserverService_ListRefsClientCloseSendFunc struct {
	defaultHook func() error
	hooks       []func() error
	history     []GitserverService_ListRefsClientCloseSendFuncCall
	mutex       sync.Mutex
}

// CloseSend delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ListRefsClient) CloseSend() error {
	r0 := m.CloseSendFunc.nextHook()()
	m.CloseSendFunc.appendCall(GitserverService_ListRefsClientCloseSendFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the CloseSend method of
// the parent MockGitserverService_ListRefsClient instance is invoked and
// the hook queue is empty.
func (f *GitserverService_ListRefsClientCloseSendFunc) SetDefaultHook(hook func() error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CloseSend method of the parent MockGitserverService_ListRefsClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverService_ListRefsClientCloseSendFunc) PushHook(hook func() error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ListRefsClientCloseSendFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func() error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ListRefsClientCloseSendFunc) PushReturn(r0 error) {
	f.PushHook(func() error {
		return r0
	})
}

func (f *GitserverService_ListRefsClientCloseSendFunc) nextHook() func() error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ListRefsClientCloseSendFunc) appendCall(r0 GitserverService_ListRefsClientCloseSendFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ListRefsClientCloseSendFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ListRefsClientCloseSendFunc) History() []GitserverService_ListRefsClientCloseSendFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ListRefsClientCloseSendFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ListRefsClientCloseSendFuncCall is an object that
// describes an invocation of method CloseSend on an instance of
// MockGitserverService_ListRefsClient.
type GitserverService_ListRefsClientCloseSendFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ListRefsClientCloseSendFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ListRefsClientCloseSendFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ListRefsClientContextFunc describes the behavior when
// the Context method of the parent MockGitserverService_ListRefsClient
// instance is invoked.
type GitserverService_ListRefsClientContextFunc struct {
	defaultHook func() context.Context
	hooks       []func() context.Context
	history     []GitserverService_ListRefsClientContextFuncCall
	mutex       sync.Mutex
}

// Context delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ListRefsClient) Context() context.Context {
	r0 := m.ContextFunc.nextHook()()
	m.ContextFunc.appendCall(GitserverService_ListRefsClientContextFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Context method of
// the parent MockGitserverService_ListRefsClient instance is invoked and
// the hook queue is empty.
func (f *GitserverService_ListRefsClientContextFunc) SetDefaultHook(hook func() context.Context) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Context method of the parent MockGitserverService_ListRefsClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ListRefsClientContextFunc) PushHook(hook func() context.Context) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ListRefsClientContextFunc) SetDefaultReturn(r0 context.Context) {
	f.SetDefaultHook(func() context.Context {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ListRefsClientContextFunc) PushReturn(r0 context.Context) {
	f.PushHook(func() context.Context {
		return r0
	})
}

func (f *GitserverService_ListRefsClientContextFunc) nextHook() func() context.Context {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ListRefsClientContextFunc) appendCall(r0 GitserverService_ListRefsClientContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ListRefsClientContextFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ListRefsClientContextFunc) History() []GitserverService_ListRefsClientContextFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ListRefsClientContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ListRefsClientContextFuncCall is an object that
// describes an invocation of method Context on an instance of
// MockGitserverService_ListRefsClient.
type GitserverService_ListRefsClientContextFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 context.Context
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ListRefsClientContextFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ListRefsClientContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ListRefsClientHeaderFunc describes the behavior when the
// Header method of the parent MockGitserverService_ListRefsClient instance
// is invoked.
type GitserverService_ListRefsClientHeaderFunc struct {
	defaultHook func() (metadata.MD, error)
	hooks       []func() (metadata.MD, error)
	history     []GitserverService_ListRefsClientHeaderFuncCall
	mutex       sync.Mutex
}

// Header delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ListRefsClient) Header() (metadata.MD, error) {
	r0, r1 := m.HeaderFunc.nextHook()()
	m.HeaderFunc.appendCall(GitserverService_ListRefsClientHeaderFuncCall{r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Header method of the
// parent MockGitserverService_ListRefsClient instance is invoked and the
// hook queue is empty.
func (f *GitserverService_ListRefsClientHeaderFunc) SetDefaultHook(hook func() (metadata.MD, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Header method of the parent MockGitserverService_ListRefsClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ListRefsClientHeaderFunc) PushHook(hook func() (metadata.MD, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ListRefsClientHeaderFunc) SetDefaultReturn(r0 metadata.MD, r1 error) {
	f.SetDefaultHook(func() (metadata.MD, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ListRefsClientHeaderFunc) PushReturn(r0 metadata.MD, r1 error) {
	f.PushHook(func() (metadata.MD, error) {
		return r0, r1
	})
}

func (f *GitserverService_ListRefsClientHeaderFunc) nextHook() func() (metadata.MD, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ListRefsClientHeaderFunc) appendCall(r0 GitserverService_ListRefsClientHeaderFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ListRefsClientHeaderFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ListRefsClientHeaderFunc) History() []GitserverService_ListRefsClientHeaderFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ListRefsClientHeaderFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ListRefsClientHeaderFuncCall is an object that describes
// an invocation of method Header on an instance of
// MockGitserverService_ListRefsClient.
type GitserverService_ListRefsClientHeaderFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 metadata.MD
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ListRefsClientHeaderFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ListRefsClientHeaderFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverService_ListRefsClientRecvFunc describes the behavior when the
// Recv method of the parent MockGitserverService_ListRefsClient instance is
// invoked.
type GitserverService_ListRefsClientRecvFunc struct {
	defaultHook func() (*v1.ListRefsResponse, error)
	hooks       []func() (*v1.ListRefsResponse, error)
	history     []GitserverService_ListRefsClientRecvFuncCall
	mutex       sync.Mutex
}

// Recv delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ListRefsClient) Recv() (*v1.ListRefsResponse, error) {
	r0, r1 := m.RecvFunc.nextHook()()
	m.RecvFunc.appendCall(GitserverService_ListRefsClientRecvFuncCall{r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Recv method of the
// parent MockGitserverService_ListRefsClient instance is invoked and the
// hook queue is empty.
func (f *GitserverService_ListRefsClientRecvFunc) SetDefaultHook(hook func() (*v1.ListRefsResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Recv method of the parent MockGitserverService_ListRefsClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ListRefsClientRecvFunc) PushHook(hook func() (*v1.ListRefsResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ListRefsClientRecvFunc) SetDefaultReturn(r0 *v1.ListRefsResponse, r1 error) {
	f.SetDefaultHook(func() (*v1.ListRefsResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ListRefsClientRecvFunc) PushReturn(r0 *v1.ListRefsResponse, r1 error) {
	f.PushHook(func() (*v1.ListRefsResponse, error) {
		return r0, r1
	})
}

func (f *GitserverService_ListRefsClientRecvFunc) nextHook() func() (*v1.ListRefsResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ListRefsClientRecvFunc) appendCall(r0 GitserverService_ListRefsClientRecvFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverService_ListRefsClientRecvFuncCall
// objects describing the invocations of this function.
func (f *GitserverService_ListRefsClientRecvFunc) History() []GitserverService_ListRefsClientRecvFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ListRefsClientRecvFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ListRefsClientRecvFuncCall is an object that describes
// an invocation of method Recv on an instance of
// MockGitserverService_ListRefsClient.
type GitserverService_ListRefsClientRecvFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.ListRefsResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ListRefsClientRecvFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ListRefsClientRecvFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverService_ListRefsClientRecvMsgFunc describes the behavior when
// the RecvMsg method of the parent MockGitserverService_ListRefsClient
// instance is invoked.
type GitserverService_ListRefsClientRecvMsgFunc struct {
	defaultHook func(interface{}) error
	hooks       []func(interface{}) error
	history     []GitserverService_ListRefsClientRecvMsgFuncCall
	mutex       sync.Mutex
}

// RecvMsg delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ListRefsClient) RecvMsg(v0 interface{}) error {
	r0 := m.RecvMsgFunc.nextHook()(v0)
	m.RecvMsgFunc.appendCall(GitserverService_ListRefsClientRecvMsgFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the RecvMsg method of
// the parent MockGitserverService_ListRefsClient instance is invoked and
// the hook queue is empty.
func (f *GitserverService_ListRefsClientRecvMsgFunc) SetDefaultHook(hook func(interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RecvMsg method of the parent MockGitserverService_ListRefsClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ListRefsClientRecvMsgFunc) PushHook(hook func(interface{}) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ListRefsClientRecvMsgFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(interface{}) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ListRefsClientRecvMsgFunc) PushReturn(r0 error) {
	f.PushHook(func(interface{}) error {
		return r0
	})
}

func (f *GitserverService_ListRefsClientRecvMsgFunc) nextHook() func(interface{}) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ListRefsClientRecvMsgFunc) appendCall(r0 GitserverService_ListRefsClientRecvMsgFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ListRefsClientRecvMsgFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ListRefsClientRecvMsgFunc) History() []GitserverService_ListRefsClientRecvMsgFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ListRefsClientRecvMsgFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ListRefsClientRecvMsgFuncCall is an object that
// describes an invocation of method RecvMsg on an instance of
// MockGitserverService_ListRefsClient.
type GitserverService_ListRefsClientRecvMsgFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ListRefsClientRecvMsgFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ListRefsClientRecvMsgFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ListRefsClientSendMsgFunc describes the behavior when
// the SendMsg method of the parent MockGitserverService_ListRefsClient
// instance is invoked.
type GitserverService_ListRefsClientSendMsgFunc struct {
	defaultHook func(interface{}) error
	hooks       []func(interface{}) error
	history     []GitserverService_ListRefsClientSendMsgFuncCall
	mutex       sync.Mutex
}

// SendMsg delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ListRefsClient) SendMsg(v0 interface{}) error {
	r0 := m.SendMsgFunc.nextHook()(v0)
	m.SendMsgFunc.appendCall(GitserverService_ListRefsClientSendMsgFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SendMsg method of
// the parent MockGitserverService_ListRefsClient instance is invoked and
// the hook queue is empty.
func (f *GitserverService_ListRefsClientSendMsgFunc) SetDefaultHook(hook func(interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SendMsg method of the parent MockGitserverService_ListRefsClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ListRefsClientSendMsgFunc) PushHook(hook func(interface{}) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ListRefsClientSendMsgFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(interface{}) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ListRefsClientSendMsgFunc) PushReturn(r0 error) {
	f.PushHook(func(interface{}) error {
		return r0
	})
}

func (f *GitserverService_ListRefsClientSendMsgFunc) nextHook() func(interface{}) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ListRefsClientSendMsgFunc) appendCall(r0 GitserverService_ListRefsClientSendMsgFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ListRefsClientSendMsgFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ListRefsClientSendMsgFunc) History() []GitserverService_ListRefsClientSendMsgFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ListRefsClientSendMsgFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ListRefsClientSendMsgFuncCall is an object that
// describes an invocation of method SendMsg on an instance of
// MockGitserverService_ListRefsClient.
type GitserverService_ListRefsClientSendMsgFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ListRefsClientSendMsgFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ListRefsClientSendMsgFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ListRefsClientTrailerFunc describes the behavior when
// the Trailer method of the parent MockGitserverService_ListRefsClient
// instance is invoked.
type GitserverService_ListRefsClientTrailerFunc struct {
	defaultHook func() metadata.MD
	hooks       []func() metadata.MD
	history     []GitserverService_ListRefsClientTrailerFuncCall
	mutex       sync.Mutex
}

// Trailer delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ListRefsClient) Trailer() metadata.MD {
	r0 := m.TrailerFunc.nextHook()()
	m.TrailerFunc.appendCall(GitserverService_ListRefsClientTrailerFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Trailer method of
// the parent MockGitserverService_ListRefsClient instance is invoked and
// the hook queue is empty.
func (f *GitserverService_ListRefsClientTrailerFunc) SetDefaultHook(hook func() metadata.MD) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Trailer method of the parent MockGitserverService_ListRefsClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ListRefsClientTrailerFunc) PushHook(hook func() metadata.MD) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ListRefsClientTrailerFunc) SetDefaultReturn(r0 metadata.MD) {
	f.SetDefaultHook(func() metadata.MD {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ListRefsClientTrailerFunc) PushReturn(r0 metadata.MD) {
	f.PushHook(func() metadata.MD {
		return r0
	})
}

func (f *GitserverService_ListRefsClientTrailerFunc) nextHook() func() metadata.MD {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ListRefsClientTrailerFunc) appendCall(r0 GitserverService_ListRefsClientTrailerFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ListRefsClientTrailerFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ListRefsClientTrailerFunc) History() []GitserverService_ListRefsClientTrailerFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ListRefsClientTrailerFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ListRefsClientTrailerFuncCall is an object that
// describes an invocation of method Trailer on an instance of
// MockGitserverService_ListRefsClient.
type GitserverService_ListRefsClientTrailerFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 metadata.MD
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ListRefsClientTrailerFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ListRefsClientTrailerFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockGitserverService_ListRefsServer is a mock implementation of the
// GitserverService_ListRefsServer interface (from the package
// github.com/sourcegraph/sourcegraph/internal/gitserver/v1) used for unit
// testing.
type MockGitserverService_ListRefsServer struct {
	// ContextFunc is an instance of a mock function object controlling the
	// behavior of the method Context.
	ContextFunc *GitserverService_ListRefsServerContextFunc
	// RecvMsgFunc is an instance of a mock function object controlling the
	// behavior of the method RecvMsg.
	RecvMsgFunc *GitserverService_ListRefsServerRecvMsgFunc
	// SendFunc is an instance of a mock function object controlling the
	// behavior of the method Send.
	SendFunc *GitserverService_ListRefsServerSendFunc
	// SendHeaderFunc is an instance of a mock function object controlling
	// the behavior of the method SendHeader.
	SendHeaderFunc *GitserverService_ListRefsServerSendHeaderFunc
	// SendMsgFunc is an instance of a mock function object controlling the
	// behavior of the method SendMsg.
	SendMsgFunc *GitserverService_ListRefsServerSendMsgFunc
	// SetHeaderFunc is an instance of a mock function object controlling
	// the behavior of the method SetHeader.
	SetHeaderFunc *GitserverService_ListRefsServerSetHeaderFunc
	// SetTrailerFunc is an instance of a mock function object controlling
	// the behavior of the method SetTrailer.
	SetTrailerFunc *GitserverService_ListRefsServerSetTrailerFunc
}

// NewMockGitserverService_ListRefsServer creates a new mock of the
// GitserverService_ListRefsServer interface. All methods return zero values
// for all results, unless overwritten.
func NewMockGitserverService_ListRefsServer() *MockGitserverService_ListRefsServer {
	return &MockGitserverService_ListRefsServer{
		ContextFunc: &GitserverService_ListRefsServerContextFunc{
			defaultHook: func() (r0 context.Context) {
				return
			},
		},
		RecvMsgFunc: &GitserverService_ListRefsServerRecvMsgFunc{
			defaultHook: func(interface{}) (r0 error) {
				return
			},
		},
		SendFunc: &GitserverService_ListRefsServerSendFunc{
			defaultHook: func(*v1.ListRefsResponse) (r0 error) {
				return
			},
		},
		SendHeaderFunc: &GitserverService_ListRefsServerSendHeaderFunc{
			defaultHook: func(metadata.MD) (r0 error) {
				return
			},
		},
		SendMsgFunc: &GitserverService_ListRefsServerSendMsgFunc{
			defaultHook: func(interface{}) (r0 error) {
				return
			},
		},
		SetHeaderFunc: &GitserverService_ListRefsServerSetHeaderFunc{
			defaultHook: func(metadata.MD) (r0 error) {
				return
			},
		},
		SetTrailerFunc: &GitserverService_ListRefsServerSetTrailerFunc{
			defaultHook: func(metadata.MD) {
				return
			},
		},
	}
}

// NewStrictMockGitserverService_ListRefsServer creates a new mock of the
// GitserverService_ListRefsServer interface. All methods panic on
// invocation, unless overwritten.
func NewStrictMockGitserverService_ListRefsServer() *MockGitserverService_ListRefsServer {
	return &MockGitserverService_ListRefsServer{
		ContextFunc: &GitserverService_ListRefsServerContextFunc{
			defaultHook: func() context.Context {
				panic("unexpected invocation of MockGitserverService_ListRefsServer.Context")
			},
		},
		RecvMsgFunc: &GitserverService_ListRefsServerRecvMsgFunc{
			defaultHook: func(interface{}) error {
				panic("unexpected invocation of MockGitserverService_ListRefsServer.RecvMsg")
			},
		},
		SendFunc: &GitserverService_ListRefsServerSendFunc{
			defaultHook: func(*v1.ListRefsResponse) error {
				panic("unexpected invocation of MockGitserverService_ListRefsServer.Send")
			},
		},
		SendHeaderFunc: &GitserverService_ListRefsServerSendHeaderFunc{
			defaultHook: func(metadata.MD) error {
				panic("unexpected invocation of MockGitserverService_ListRefsServer.SendHeader")
			},
		},
		SendMsgFunc: &GitserverService_ListRefsServerSendMsgFunc{
			defaultHook: func(interface{}) error {
				panic("unexpected invocation of MockGitserverService_ListRefsServer.SendMsg")
			},
		},
		SetHeaderFunc: &GitserverService_ListRefsServerSetHeaderFunc{
			defaultHook: func(metadata.MD) error {
				panic("unexpected invocation of MockGitserverService_ListRefsServer.SetHeader")
			},
		},
		SetTrailerFunc: &GitserverService_ListRefsServerSetTrailerFunc{
			defaultHook: func(metadata.MD) {
				panic("unexpected invocation of MockGitserverService_ListRefsServer.SetTrailer")
			},
		},
	}
}

// NewMockGitserverService_ListRefsServerFrom creates a new mock of the
// MockGitserverService_ListRefsServer interface. All methods delegate to
// the given implementation, unless overwritten.
func NewMockGitserverService_ListRefsServerFrom(i v1.GitserverService_ListRefsServer) *MockGitserverService_ListRefsServer {
	return &MockGitserverService_ListRefsServer{
		ContextFunc: &GitserverService_ListRefsServerContextFunc{
			defaultHook: i.Context,
		},
		RecvMsgFunc: &GitserverService_ListRefsServerRecvMsgFunc{
			defaultHook: i.RecvMsg,
		},
		SendFunc: &GitserverService_ListRefsServerSendFunc{
			defaultHook: i.Send,
		},
		SendHeaderFunc: &GitserverService_ListRefsServerSendHeaderFunc{
			defaultHook: i.SendHeader,
		},
		SendMsgFunc: &GitserverService_ListRefsServerSendMsgFunc{
			defaultHook: i.SendMsg,
		},
		SetHeaderFunc: &GitserverService_ListRefsServerSetHeaderFunc{
			defaultHook: i.SetHeader,
		},
		SetTrailerFunc: &GitserverService_ListRefsServerSetTrailerFunc{
			defaultHook: i.SetTrailer,
		},
	}
}

// GitserverService_ListRefsServerContextFunc describes the behavior when
// the Context method of the parent MockGitserverService_ListRefsServer
// instance is invoked.
type GitserverService_ListRefsServerContextFunc struct {
	defaultHook func() context.Context
	hooks       []func() context.Context
	history     []GitserverService_ListRefsServerContextFuncCall
	mutex       sync.Mutex
}

// Context delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ListRefsServer) Context() context.Context {
	r0 := m.ContextFunc.nextHook()()
	m.ContextFunc.appendCall(GitserverService_ListRefsServerContextFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Context method of
// the parent MockGitserverService_ListRefsServer instance is invoked and
// the hook queue is empty.
func (f *GitserverService_ListRefsServerContextFunc) SetDefaultHook(hook func() context.Context) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Context method of the parent MockGitserverService_ListRefsServer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ListRefsServerContextFunc) PushHook(hook func() context.Context) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ListRefsServerContextFunc) SetDefaultReturn(r0 context.Context) {
	f.SetDefaultHook(func() context.Context {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ListRefsServerContextFunc) PushReturn(r0 context.Context) {
	f.PushHook(func() context.Context {
		return r0
	})
}

func (f *GitserverService_ListRefsServerContextFunc) nextHook() func() context.Context {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ListRefsServerContextFunc) appendCall(r0 GitserverService_ListRefsServerContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ListRefsServerContextFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ListRefsServerContextFunc) History() []GitserverService_ListRefsServerContextFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ListRefsServerContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ListRefsServerContextFuncCall is an object that
// describes an invocation of method Context on an instance of
// MockGitserverService_ListRefsServer.
type GitserverService_ListRefsServerContextFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 context.Context
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ListRefsServerContextFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ListRefsServerContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ListRefsServerRecvMsgFunc describes the behavior when
// the RecvMsg method of the parent MockGitserverService_ListRefsServer
// instance is invoked.
type GitserverService_ListRefsServerRecvMsgFunc struct {
	defaultHook func(interface{}) error
	hooks       []func(interface{}) error
	history     []GitserverService_ListRefsServerRecvMsgFuncCall
	mutex       sync.Mutex
}

// RecvMsg delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ListRefsServer) RecvMsg(v0 interface{}) error {
	r0 := m.RecvMsgFunc.nextHook()(v0)
	m.RecvMsgFunc.appendCall(GitserverService_ListRefsServerRecvMsgFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the RecvMsg method of
// the parent MockGitserverService_ListRefsServer instance is invoked and
// the hook queue is empty.
func (f *GitserverService_ListRefsServerRecvMsgFunc) SetDefaultHook(hook func(interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RecvMsg method of the parent MockGitserverService_ListRefsServer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ListRefsServerRecvMsgFunc) PushHook(hook func(interface{}) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ListRefsServerRecvMsgFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(interface{}) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ListRefsServerRecvMsgFunc) PushReturn(r0 error) {
	f.PushHook(func(interface{}) error {
		return r0
	})
}

func (f *GitserverService_ListRefsServerRecvMsgFunc) nextHook() func(interface{}) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ListRefsServerRecvMsgFunc) appendCall(r0 GitserverService_ListRefsServerRecvMsgFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ListRefsServerRecvMsgFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ListRefsServerRecvMsgFunc) History() []GitserverService_ListRefsServerRecvMsgFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ListRefsServerRecvMsgFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ListRefsServerRecvMsgFuncCall is an object that
// describes an invocation of method RecvMsg on an instance of
// MockGitserverService_ListRefsServer.
type GitserverService_ListRefsServerRecvMsgFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ListRefsServerRecvMsgFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ListRefsServerRecvMsgFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ListRefsServerSendFunc describes the behavior when the
// Send method of the parent MockGitserverService_ListRefsServer instance is
// invoked.
type GitserverService_ListRefsServerSendFunc struct {
	defaultHook func(*v1.ListRefsResponse) error
	hooks       []func(*v1.ListRefsResponse) error
	history     []GitserverService_ListRefsServerSendFuncCall
	mutex       sync.Mutex
}

// Send delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ListRefsServer) Send(v0 *v1.ListRefsResponse) error {
	r0 := m.SendFunc.nextHook()(v0)
	m.SendFunc.appendCall(GitserverService_ListRefsServerSendFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Send method of the
// parent MockGitserverService_ListRefsServer instance is invoked and the
// hook queue is empty.
func (f *GitserverService_ListRefsServerSendFunc) SetDefaultHook(hook func(*v1.ListRefsResponse) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Send method of the parent MockGitserverService_ListRefsServer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ListRefsServerSendFunc) PushHook(hook func(*v1.ListRefsResponse) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ListRefsServerSendFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(*v1.ListRefsResponse) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ListRefsServerSendFunc) PushReturn(r0 error) {
	f.PushHook(func(*v1.ListRefsResponse) error {
		return r0
	})
}

func (f *GitserverService_ListRefsServerSendFunc) nextHook() func(*v1.ListRefsResponse) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ListRefsServerSendFunc) appendCall(r0 GitserverService_ListRefsServerSendFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverService_ListRefsServerSendFuncCall
// objects describing the invocations of this function.
func (f *GitserverService_ListRefsServerSendFunc) History() []GitserverService_ListRefsServerSendFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ListRefsServerSendFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ListRefsServerSendFuncCall is an object that describes
// an invocation of method Send on an instance of
// MockGitserverService_ListRefsServer.
type GitserverService_ListRefsServerSendFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *v1.ListRefsResponse
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ListRefsServerSendFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ListRefsServerSendFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ListRefsServerSendHeaderFunc describes the behavior when
// the SendHeader method of the parent MockGitserverService_ListRefsServer
// instance is invoked.
type GitserverService_ListRefsServerSendHeaderFunc struct {
	defaultHook func(metadata.MD) error
	hooks       []func(metadata.MD) error
	history     []GitserverService_ListRefsServerSendHeaderFuncCall
	mutex       sync.Mutex
}

// SendHeader delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverService_ListRefsServer) SendHeader(v0 metadata.MD) error {
	r0 := m.SendHeaderFunc.nextHook()(v0)
	m.SendHeaderFunc.appendCall(GitserverService_ListRefsServerSendHeaderFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SendHeader method of
// the parent MockGitserverService_ListRefsServer instance is invoked and
// the hook queue is empty.
func (f *GitserverService_ListRefsServerSendHeaderFunc) SetDefaultHook(hook func(metadata.MD) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SendHeader method of the parent MockGitserverService_ListRefsServer
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverService_ListRefsServerSendHeaderFunc) PushHook(hook func(metadata.MD) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ListRefsServerSendHeaderFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(metadata.MD) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ListRefsServerSendHeaderFunc) PushReturn(r0 error) {
	f.PushHook(func(metadata.MD) error {
		return r0
	})
}

func (f *GitserverService_ListRefsServerSendHeaderFunc) nextHook() func(metadata.MD) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ListRefsServerSendHeaderFunc) appendCall(r0 GitserverService_ListRefsServerSendHeaderFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ListRefsServerSendHeaderFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ListRefsServerSendHeaderFunc) History() []GitserverService_ListRefsServerSendHeaderFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ListRefsServerSendHeaderFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ListRefsServerSendHeaderFuncCall is an object that
// describes an invocation of method SendHeader on an instance of
// MockGitserverService_ListRefsServer.
type GitserverService_ListRefsServerSendHeaderFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 metadata.MD
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ListRefsServerSendHeaderFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ListRefsServerSendHeaderFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ListRefsServerSendMsgFunc describes the behavior when
// the SendMsg method of the parent MockGitserverService_ListRefsServer
// instance is invoked.
type GitserverService_ListRefsServerSendMsgFunc struct {
	defaultHook func(interface{}) error
	hooks       []func(interface{}) error
	history     []GitserverService_ListRefsServerSendMsgFuncCall
	mutex       sync.Mutex
}

// SendMsg delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ListRefsServer) SendMsg(v0 interface{}) error {
	r0 := m.SendMsgFunc.nextHook()(v0)
	m.SendMsgFunc.appendCall(GitserverService_ListRefsServerSendMsgFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SendMsg method of
// the parent MockGitserverService_ListRefsServer instance is invoked and
// the hook queue is empty.
func (f *GitserverService_ListRefsServerSendMsgFunc) SetDefaultHook(hook func(interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SendMsg method of the parent MockGitserverService_ListRefsServer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ListRefsServerSendMsgFunc) PushHook(hook func(interface{}) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ListRefsServerSendMsgFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(interface{}) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ListRefsServerSendMsgFunc) PushReturn(r0 error) {
	f.PushHook(func(interface{}) error {
		return r0
	})
}

func (f *GitserverService_ListRefsServerSendMsgFunc) nextHook() func(interface{}) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ListRefsServerSendMsgFunc) appendCall(r0 GitserverService_ListRefsServerSendMsgFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ListRefsServerSendMsgFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ListRefsServerSendMsgFunc) History() []GitserverService_ListRefsServerSendMsgFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ListRefsServerSendMsgFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ListRefsServerSendMsgFuncCall is an object that
// describes an invocation of method SendMsg on an instance of
// MockGitserverService_ListRefsServer.
type GitserverService_ListRefsServerSendMsgFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ListRefsServerSendMsgFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ListRefsServerSendMsgFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ListRefsServerSetHeaderFunc describes the behavior when
// the SetHeader method of the parent MockGitserverService_ListRefsServer
// instance is invoked.
type GitserverService_ListRefsServerSetHeaderFunc struct {
	defaultHook func(metadata.MD) error
	hooks       []func(metadata.MD) error
	history     []GitserverService_ListRefsServerSetHeaderFuncCall
	mutex       sync.Mutex
}

// SetHeader delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ListRefsServer) SetHeader(v0 metadata.MD) error {
	r0 := m.SetHeaderFunc.nextHook()(v0)
	m.SetHeaderFunc.appendCall(GitserverService_ListRefsServerSetHeaderFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetHeader method of
// the parent MockGitserverService_ListRefsServer instance is invoked and
// the hook queue is empty.
func (f *GitserverService_ListRefsServerSetHeaderFunc) SetDefaultHook(hook func(metadata.MD) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetHeader method of the parent MockGitserverService_ListRefsServer
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverService_ListRefsServerSetHeaderFunc) PushHook(hook func(metadata.MD) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ListRefsServerSetHeaderFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(metadata.MD) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ListRefsServerSetHeaderFunc) PushReturn(r0 error) {
	f.PushHook(func(metadata.MD) error {
		return r0
	})
}

func (f *GitserverService_ListRefsServerSetHeaderFunc) nextHook() func(metadata.MD) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ListRefsServerSetHeaderFunc) appendCall(r0 GitserverService_ListRefsServerSetHeaderFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ListRefsServerSetHeaderFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ListRefsServerSetHeaderFunc) History() []GitserverService_ListRefsServerSetHeaderFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ListRefsServerSetHeaderFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ListRefsServerSetHeaderFuncCall is an object that
// describes an invocation of method SetHeader on an instance of
// MockGitserverService_ListRefsServer.
type GitserverService_ListRefsServerSetHeaderFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 metadata.MD
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ListRefsServerSetHeaderFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ListRefsServerSetHeaderFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ListRefsServerSetTrailerFunc describes the behavior when
// the SetTrailer method of the parent MockGitserverService_ListRefsServer
// instance is invoked.
type GitserverService_ListRefsServerSetTrailerFunc struct {
	defaultHook func(metadata.MD)
	hooks       []func(metadata.MD)
	history     []GitserverService_ListRefsServerSetTrailerFuncCall
	mutex       sync.Mutex
}

// SetTrailer delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverService_ListRefsServer) SetTrailer(v0 metadata.MD) {
	m.SetTrailerFunc.nextHook()(v0)
	m.SetTrailerFunc.appendCall(GitserverService_ListRefsServerSetTrailerFuncCall{v0})
	return
}

// SetDefaultHook sets function that is called when the SetTrailer method of
// the parent MockGitserverService_ListRefsServer instance is invoked and
// the hook queue is empty.
func (f *GitserverService_ListRefsServerSetTrailerFunc) SetDefaultHook(hook func(metadata.MD)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetTrailer method of the parent MockGitserverService_ListRefsServer
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverService_ListRefsServerSetTrailerFunc) PushHook(hook func(metadata.MD)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ListRefsServerSetTrailerFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(metadata.MD) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ListRefsServerSetTrailerFunc) PushReturn() {
	f.PushHook(func(metadata.MD) {
		return
	})
}

func (f *GitserverService_ListRefsServerSetTrailerFunc) nextHook() func(metadata.MD) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ListRefsServerSetTrailerFunc) appendCall(r0 GitserverService_ListRefsServerSetTrailerFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ListRefsServerSetTrailerFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ListRefsServerSetTrailerFunc) History() []GitserverService_ListRefsServerSetTrailerFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ListRefsServerSetTrailerFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ListRefsServerSetTrailerFuncCall is an object that
// describes an invocation of method SetTrailer on an instance of
// MockGitserverService_ListRefsServer.
type GitserverService_ListRefsServerSetTrailerFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 metadata.MD
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ListRefsServerSetTrailerFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ListRefsServerSetTrailerFuncCall) Results() []interface{} {
	return []interface{}{}
}

// MockGitserverService_RawDiffClient is a mock implementation of the
// GitserverService_RawDiffClient interface (from the package
// github.com/sourcegraph/sourcegraph/internal/gitserver/v1) used for unit
// testing.
type MockGitserverService_RawDiffClient struct {
	// CloseSendFunc is an instance of a mock function object controlling
	// the behavior of the method CloseSend.
	CloseSendFunc *GitserverService_RawDiffClientCloseSendFunc
	// ContextFunc is an instance of a mock function object controlling the
	// behavior of the method Context.
	ContextFunc *GitserverService_RawDiffClientContextFunc
	// HeaderFunc is an instance of a mock function object controlling the
	// behavior of the method Header.
	HeaderFunc *GitserverService_RawDiffClientHeaderFunc
	// RecvFunc is an instance of a mock function object controlling the
	// behavior of the method Recv.
	RecvFunc *GitserverService_RawDiffClientRecvFunc
	// RecvMsgFunc is an instance of a mock function object controlling the
	// behavior of the method RecvMsg.
	RecvMsgFunc *GitserverService_RawDiffClientRecvMsgFunc
	// SendMsgFunc is an instance of a mock function object controlling the
	// behavior of the method SendMsg.
	SendMsgFunc *GitserverService_RawDiffClientSendMsgFunc
	// TrailerFunc is an instance of a mock function object controlling the
	// behavior of the method Trailer.
	TrailerFunc *GitserverService_RawDiffClientTrailerFunc
}

// NewMockGitserverService_RawDiffClient creates a new mock of the
// GitserverService_RawDiffClient interface. All methods return zero values
// for all results, unless overwritten.
func NewMockGitserverService_RawDiffClient() *MockGitserverService_RawDiffClient {
	return &MockGitserverService_RawDiffClient{
		CloseSendFunc: &GitserverService_RawDiffClientCloseSendFunc{
			defaultHook: func() (r0 error) {
				return
			},
		},
		ContextFunc: &GitserverService_RawDiffClientContextFunc{
			defaultHook: func() (r0 context.Context) {
				return
			},
		},
		HeaderFunc: &GitserverService_RawDiffClientHeaderFunc{
			defaultHook: func() (r0 metadata.MD, r1 error) {
				return
			},
		},
		RecvFunc: &GitserverService_RawDiffClientRecvFunc{
			defaultHook: func() (r0 *v1.RawDiffResponse, r1 error) {
				return
			},
		},
		RecvMsgFunc: &GitserverService_RawDiffClientRecvMsgFunc{
			defaultHook: func(interface{}) (r0 error) {
				return
			},
		},
		SendMsgFunc: &GitserverService_RawDiffClientSendMsgFunc{
			defaultHook: func(interface{}) (r0 error) {
				return
			},
		},
		TrailerFunc: &GitserverService_RawDiffClientTrailerFunc{
			defaultHook: func() (r0 metadata.MD) {
				return
			},
		},
	}
}

// NewStrictMockGitserverService_RawDiffClient creates a new mock of the
// GitserverService_RawDiffClient interface. All methods panic on
// invocation, unless overwritten.
func NewStrictMockGitserverService_RawDiffClient() *MockGitserverService_RawDiffClient {
	return &MockGitserverService_RawDiffClient{
		CloseSendFunc: &GitserverService_RawDiffClientCloseSendFunc{
			defaultHook: func() error {
				panic("unexpected invocation of MockGitserverService_RawDiffClient.CloseSend")
			},
		},
		ContextFunc: &GitserverService_RawDiffClientContextFunc{
			defaultHook: func() context.Context {
				panic("unexpected invocation of MockGitserverService_RawDiffClient.Context")
			},
		},
		HeaderFunc: &GitserverService_RawDiffClientHeaderFunc{
			defaultHook: func() (metadata.MD, error) {
				panic("unexpected invocation of MockGitserverService_RawDiffClient.Header")
			},
		},
		RecvFunc: &GitserverService_RawDiffClientRecvFunc{
			defaultHook: func() (*v1.RawDiffResponse, error) {
				panic("unexpected invocation of MockGitserverService_RawDiffClient.Recv")
			},
		},
		RecvMsgFunc: &GitserverService_RawDiffClientRecvMsgFunc{
			defaultHook: func(interface{}) error {
				panic("unexpected invocation of MockGitserverService_RawDiffClient.RecvMsg")
			},
		},
		SendMsgFunc: &GitserverService_RawDiffClientSendMsgFunc{
			defaultHook: func(interface{}) error {
				panic("unexpected invocation of MockGitserverService_RawDiffClient.SendMsg")
			},
		},
		TrailerFunc: &GitserverService_RawDiffClientTrailerFunc{
			defaultHook: func() metadata.MD {
				panic("unexpected invocation of MockGitserverService_RawDiffClient.Trailer")
			},
		},
	}
}

// NewMockGitserverService_RawDiffClientFrom creates a new mock of the
// MockGitserverService_RawDiffClient interface. All methods delegate to the
// given implementation, unless overwritten.
func NewMockGitserverService_RawDiffClientFrom(i v1.GitserverService_RawDiffClient) *MockGitserverService_RawDiffClient {
	return &MockGitserverService_RawDiffClient{
		CloseSendFunc: &GitserverService_RawDiffClientCloseSendFunc{
			defaultHook: i.CloseSend,
		},
		ContextFunc: &GitserverService_RawDiffClientContextFunc{
			defaultHook: i.Context,
		},
		HeaderFunc: &GitserverService_RawDiffClientHeaderFunc{
			defaultHook: i.Header,
		},
		RecvFunc: &GitserverService_RawDiffClientRecvFunc{
			defaultHook: i.Recv,
		},
		RecvMsgFunc: &GitserverService_RawDiffClientRecvMsgFunc{
			defaultHook: i.RecvMsg,
		},
		SendMsgFunc: &GitserverService_RawDiffClientSendMsgFunc{
			defaultHook: i.SendMsg,
		},
		TrailerFunc: &GitserverService_RawDiffClientTrailerFunc{
			defaultHook: i.Trailer,
		},
	}
}

// GitserverService_RawDiffClientCloseSendFunc describes the behavior when
// the CloseSend method of the parent MockGitserverService_RawDiffClient
// instance is invoked.
type GitserverService_RawDiffClientCloseSendFunc struct {
	defaultHook func() error
	hooks       []func() error
	history     []GitserverService_RawDiffClientCloseSendFuncCall
	mutex       sync.Mutex
}

// CloseSend delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_RawDiffClient) CloseSend() error {
	r0 := m.CloseSendFunc.nextHook()()
	m.CloseSendFunc.appendCall(GitserverService_RawDiffClientCloseSendFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the CloseSend method of
// the parent MockGitserverService_RawDiffClient instance is invoked and the
// hook queue is empty.
func (f *GitserverService_RawDiffClientCloseSendFunc) SetDefaultHook(hook func() error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CloseSend method of the parent MockGitserverService_RawDiffClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverService_RawDiffClientCloseSendFunc) PushHook(hook func() error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_RawDiffClientCloseSendFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func() error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_RawDiffClientCloseSendFunc) PushReturn(r0 error) {
	f.PushHook(func() error {
		return r0
	})
}

func (f *GitserverService_RawDiffClientCloseSendFunc) nextHook() func() error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_RawDiffClientCloseSendFunc) appendCall(r0 GitserverService_RawDiffClientCloseSendFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_RawDiffClientCloseSendFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_RawDiffClientCloseSendFunc) History() []GitserverService_RawDiffClientCloseSendFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_RawDiffClientCloseSendFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_RawDiffClientCloseSendFuncCall is an object that
// describes an invocation of method CloseSend on an instance of
// MockGitserverService_RawDiffClient.
type GitserverService_RawDiffClientCloseSendFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_RawDiffClientCloseSendFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_RawDiffClientCloseSendFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_RawDiffClientContextFunc describes the behavior when the
// Context method of the parent MockGitserverService_RawDiffClient instance
// is invoked.
type GitserverService_RawDiffClientContextFunc struct {
	defaultHook func() context.Context
	hooks       []func() context.Context
	history     []GitserverService_RawDiffClientContextFuncCall
	mutex       sync.Mutex
}

// Context delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_RawDiffClient) Context() context.Context {
	r0 := m.ContextFunc.nextHook()()
	m.ContextFunc.appendCall(GitserverService_RawDiffClientContextFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Context method of
// the parent MockGitserverService_RawDiffClient instance is invoked and the
// hook queue is empty.
func (f *GitserverService_RawDiffClientContextFunc) SetDefaultHook(hook func() context.Context) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Context method of the parent MockGitserverService_RawDiffClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_RawDiffClientContextFunc) PushHook(hook func() context.Context) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_RawDiffClientContextFunc) SetDefaultReturn(r0 context.Context) {
	f.SetDefaultHook(func() context.Context {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_RawDiffClientContextFunc) PushReturn(r0 context.Context) {
	f.PushHook(func() context.Context {
		return r0
	})
}

func (f *GitserverService_RawDiffClientContextFunc) nextHook() func() context.Context {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_RawDiffClientContextFunc) appendCall(r0 GitserverService_RawDiffClientContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_RawDiffClientContextFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_RawDiffClientContextFunc) History() []GitserverService_RawDiffClientContextFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_RawDiffClientContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_RawDiffClientContextFuncCall is an object that describes
// an invocation of method Context on an instance of
// MockGitserverService_RawDiffClient.
type GitserverService_RawDiffClientContextFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 context.Context
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_RawDiffClientContextFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_RawDiffClientContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_RawDiffClientHeaderFunc describes the behavior when the
// Header method of the parent MockGitserverService_RawDiffClient instance
// is invoked.
type GitserverService_RawDiffClientHeaderFunc struct {
	defaultHook func() (metadata.MD, error)
	hooks       []func() (metadata.MD, error)
	history     []GitserverService_RawDiffClientHeaderFuncCall
	mutex       sync.Mutex
}

// Header delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_RawDiffClient) Header() (metadata.MD, error) {
	r0, r1 := m.HeaderFunc.nextHook()()
	m.HeaderFunc.appendCall(GitserverService_RawDiffClientHeaderFuncCall{r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Header method of the
// parent MockGitserverService_RawDiffClient instance is invoked and the
// hook queue is empty.
func (f *GitserverService_RawDiffClientHeaderFunc) SetDefaultHook(hook func() (metadata.MD, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Header method of the parent MockGitserverService_RawDiffClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_RawDiffClientHeaderFunc) PushHook(hook func() (metadata.MD, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_RawDiffClientHeaderFunc) SetDefaultReturn(r0 metadata.MD, r1 error) {
	f.SetDefaultHook(func() (metadata.MD, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_RawDiffClientHeaderFunc) PushReturn(r0 metadata.MD, r1 error) {
	f.PushHook(func() (metadata.MD, error) {
		return r0, r1
	})
}

func (f *GitserverService_RawDiffClientHeaderFunc) nextHook() func() (metadata.MD, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_RawDiffClientHeaderFunc) appendCall(r0 GitserverService_RawDiffClientHeaderFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_RawDiffClientHeaderFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_RawDiffClientHeaderFunc) History() []GitserverService_RawDiffClientHeaderFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_RawDiffClientHeaderFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_RawDiffClientHeaderFuncCall is an object that describes
// an invocation of method Header on an instance of
// MockGitserverService_RawDiffClient.
type GitserverService_RawDiffClientHeaderFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 metadata.MD
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_RawDiffClientHeaderFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_RawDiffClientHeaderFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverService_RawDiffClientRecvFunc describes the behavior when the
// Recv method of the parent MockGitserverService_RawDiffClient instance is
// invoked.
type GitserverService_RawDiffClientRecvFunc struct {
	defaultHook func() (*v1.RawDiffResponse, error)
	hooks       []func() (*v1.RawDiffResponse, error)
	history     []GitserverService_RawDiffClientRecvFuncCall
	mutex       sync.Mutex
}

// Recv delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_RawDiffClient) Recv() (*v1.RawDiffResponse, error) {
	r0, r1 := m.RecvFunc.nextHook()()
	m.RecvFunc.appendCall(GitserverService_RawDiffClientRecvFuncCall{r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Recv method of the
// parent MockGitserverService_RawDiffClient instance is invoked and the
// hook queue is empty.
func (f *GitserverService_RawDiffClientRecvFunc) SetDefaultHook(hook func() (*v1.RawDiffResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Recv method of the parent MockGitserverService_RawDiffClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_RawDiffClientRecvFunc) PushHook(hook func() (*v1.RawDiffResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_RawDiffClientRecvFunc) SetDefaultReturn(r0 *v1.RawDiffResponse, r1 error) {
	f.SetDefaultHook(func() (*v1.RawDiffResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_RawDiffClientRecvFunc) PushReturn(r0 *v1.RawDiffResponse, r1 error) {
	f.PushHook(func() (*v1.RawDiffResponse, error) {
		return r0, r1
	})
}

func (f *GitserverService_RawDiffClientRecvFunc) nextHook() func() (*v1.RawDiffResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_RawDiffClientRecvFunc) appendCall(r0 GitserverService_RawDiffClientRecvFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverService_RawDiffClientRecvFuncCall
// objects describing the invocations of this function.
func (f *GitserverService_RawDiffClientRecvFunc) History() []GitserverService_RawDiffClientRecvFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_RawDiffClientRecvFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_RawDiffClientRecvFuncCall is an object that describes an
// invocation of method Recv on an instance of
// MockGitserverService_RawDiffClient.
type GitserverService_RawDiffClientRecvFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.RawDiffResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_RawDiffClientRecvFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_RawDiffClientRecvFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverService_RawDiffClientRecvMsgFunc describes the behavior when the
// RecvMsg method of the parent MockGitserverService_RawDiffClient instance
// is invoked.
type GitserverService_RawDiffClientRecvMsgFunc struct {
	defaultHook func(interface{}) error
	hooks       []func(interface{}) error
	history     []GitserverService_RawDiffClientRecvMsgFuncCall
	mutex       sync.Mutex
}

// RecvMsg delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_RawDiffClient) RecvMsg(v0 interface{}) error {
	r0 := m.RecvMsgFunc.nextHook()(v0)
	m.RecvMsgFunc.appendCall(GitserverService_RawDiffClientRecvMsgFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the RecvMsg method of
// the parent MockGitserverService_RawDiffClient instance is invoked and the
// hook queue is empty.
func (f *GitserverService_RawDiffClientRecvMsgFunc) SetDefaultHook(hook func(interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RecvMsg method of the parent MockGitserverService_RawDiffClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_RawDiffClientRecvMsgFunc) PushHook(hook func(interface{}) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_RawDiffClientRecvMsgFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(interface{}) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_RawDiffClientRecvMsgFunc) PushReturn(r0 error) {
	f.PushHook(func(interface{}) error {
		return r0
	})
}

func (f *GitserverService_RawDiffClientRecvMsgFunc) nextHook() func(interface{}) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_RawDiffClientRecvMsgFunc) appendCall(r0 GitserverService_RawDiffClientRecvMsgFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_RawDiffClientRecvMsgFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_RawDiffClientRecvMsgFunc) History() []GitserverService_RawDiffClientRecvMsgFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_RawDiffClientRecvMsgFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_RawDiffClientRecvMsgFuncCall is an object that describes
// an invocation of method RecvMsg on an instance of
// MockGitserverService_RawDiffClient.
type GitserverService_RawDiffClientRecvMsgFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_RawDiffClientRecvMsgFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_RawDiffClientRecvMsgFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_RawDiffClientSendMsgFunc describes the behavior when the
// SendMsg method of the parent MockGitserverService_RawDiffClient instance
// is invoked.
type GitserverService_RawDiffClientSendMsgFunc struct {
	defaultHook func(interface{}) error
	hooks       []func(interface{}) error
	history     []GitserverService_RawDiffClientSendMsgFuncCall
	mutex       sync.Mutex
}

// SendMsg delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_RawDiffClient) SendMsg(v0 interface{}) error {
	r0 := m.SendMsgFunc.nextHook()(v0)
	m.SendMsgFunc.appendCall(GitserverService_RawDiffClientSendMsgFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SendMsg method of
// the parent MockGitserverService_RawDiffClient instance is invoked and the
// hook queue is empty.
func (f *GitserverService_RawDiffClientSendMsgFunc) SetDefaultHook(hook func(interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SendMsg method of the parent MockGitserverService_RawDiffClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_RawDiffClientSendMsgFunc) PushHook(hook func(interface{}) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_RawDiffClientSendMsgFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(interface{}) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_RawDiffClientSendMsgFunc) PushReturn(r0 error) {
	f.PushHook(func(interface{}) error {
		return r0
	})
}

func (f *GitserverService_RawDiffClientSendMsgFunc) nextHook() func(interface{}) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_RawDiffClientSendMsgFunc) appendCall(r0 GitserverService_RawDiffClientSendMsgFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_RawDiffClientSendMsgFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_RawDiffClientSendMsgFunc) History() []GitserverService_RawDiffClientSendMsgFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_RawDiffClientSendMsgFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_RawDiffClientSendMsgFuncCall is an object that describes
// an invocation of method SendMsg on an instance of
// MockGitserverService_RawDiffClient.
type GitserverService_RawDiffClientSendMsgFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_RawDiffClientSendMsgFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_RawDiffClientSendMsgFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_RawDiffClientTrailerFunc describes the behavior when the
// Trailer method of the parent MockGitserverService_RawDiffClient instance
// is invoked.
type GitserverService_RawDiffClientTrailerFunc struct {
	defaultHook func() metadata.MD
	hooks       []func() metadata.MD
	history     []GitserverService_RawDiffClientTrailerFuncCall
	mutex       sync.Mutex
}

// Trailer delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_RawDiffClient) Trailer() metadata.MD {
	r0 := m.TrailerFunc.nextHook()()
	m.TrailerFunc.appendCall(GitserverService_RawDiffClientTrailerFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Trailer method of
// the parent MockGitserverService_RawDiffClient instance is invoked and the
// hook queue is empty.
func (f *GitserverService_RawDiffClientTrailerFunc) SetDefaultHook(hook func() metadata.MD) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Trailer method of the parent MockGitserverService_RawDiffClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_RawDiffClientTrailerFunc) PushHook(hook func() metadata.MD) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_RawDiffClientTrailerFunc) SetDefaultReturn(r0 metadata.MD) {
	f.SetDefaultHook(func() metadata.MD {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_RawDiffClientTrailerFunc) PushReturn(r0 metadata.MD) {
	f.PushHook(func() metadata.MD {
		return r0
	})
}

func (f *GitserverService_RawDiffClientTrailerFunc) nextHook() func() metadata.MD {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_RawDiffClientTrailerFunc) appendCall(r0 GitserverService_RawDiffClientTrailerFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_RawDiffClientTrailerFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_RawDiffClientTrailerFunc) History() []GitserverService_RawDiffClientTrailerFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_RawDiffClientTrailerFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_RawDiffClientTrailerFuncCall is an object that describes
// an invocation of method Trailer on an instance of
// MockGitserverService_RawDiffClient.
type GitserverService_RawDiffClientTrailerFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 metadata.MD
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_RawDiffClientTrailerFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_RawDiffClientTrailerFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockGitserverService_RawDiffServer is a mock implementation of the
// GitserverService_RawDiffServer interface (from the package
// github.com/sourcegraph/sourcegraph/internal/gitserver/v1) used for unit
// testing.
type MockGitserverService_RawDiffServer struct {
	// ContextFunc is an instance of a mock function object controlling the
	// behavior of the method Context.
	ContextFunc *GitserverService_RawDiffServerContextFunc
	// RecvMsgFunc is an instance of a mock function object controlling the
	// behavior of the method RecvMsg.
	RecvMsgFunc *GitserverService_RawDiffServerRecvMsgFunc
	// SendFunc is an instance of a mock function object controlling the
	// behavior of the method Send.
	SendFunc *GitserverService_RawDiffServerSendFunc
	// SendHeaderFunc is an instance of a mock function object controlling
	// the behavior of the method SendHeader.
	SendHeaderFunc *GitserverService_RawDiffServerSendHeaderFunc
	// SendMsgFunc is an instance of a mock function object controlling the
	// behavior of the method SendMsg.
	SendMsgFunc *GitserverService_RawDiffServerSendMsgFunc
	// SetHeaderFunc is an instance of a mock function object controlling
	// the behavior of the method SetHeader.
	SetHeaderFunc *GitserverService_RawDiffServerSetHeaderFunc
	// SetTrailerFunc is an instance of a mock function object controlling
	// the behavior of the method SetTrailer.
	SetTrailerFunc *GitserverService_RawDiffServerSetTrailerFunc
}

// NewMockGitserverService_RawDiffServer creates a new mock of the
// GitserverService_RawDiffServer interface. All methods return zero values
// for all results, unless overwritten.
func NewMockGitserverService_RawDiffServer() *MockGitserverService_RawDiffServer {
	return &MockGitserverService_RawDiffServer{
		ContextFunc: &GitserverService_RawDiffServerContextFunc{
			defaultHook: func() (r0 context.Context) {
				return
			},
		},
		RecvMsgFunc: &GitserverService_RawDiffServerRecvMsgFunc{
			defaultHook: func(interface{}) (r0 error) {
				return
			},
		},
		SendFunc: &GitserverService_RawDiffServerSendFunc{
			defaultHook: func(*v1.RawDiffResponse) (r0 error) {
				return
			},
		},
		SendHeaderFunc: &GitserverService_RawDiffServerSendHeaderFunc{
			defaultHook: func(metadata.MD) (r0 error) {
				return
			},
		},
		SendMsgFunc: &GitserverService_RawDiffServerSendMsgFunc{
			defaultHook: func(interface{}) (r0 error) {
				return
			},
		},
		SetHeaderFunc: &GitserverService_RawDiffServerSetHeaderFunc{
			defaultHook: func(metadata.MD) (r0 error) {
				return
			},
		},
		SetTrailerFunc: &GitserverService_RawDiffServerSetTrailerFunc{
			defaultHook: func(metadata.MD) {
				return
			},
		},
	}
}

// NewStrictMockGitserverService_RawDiffServer creates a new mock of the
// GitserverService_RawDiffServer interface. All methods panic on
// invocation, unless overwritten.
func NewStrictMockGitserverService_RawDiffServer() *MockGitserverService_RawDiffServer {
	return &MockGitserverService_RawDiffServer{
		ContextFunc: &GitserverService_RawDiffServerContextFunc{
			defaultHook: func() context.Context {
				panic("unexpected invocation of MockGitserverService_RawDiffServer.Context")
			},
		},
		RecvMsgFunc: &GitserverService_RawDiffServerRecvMsgFunc{
			defaultHook: func(interface{}) error {
				panic("unexpected invocation of MockGitserverService_RawDiffServer.RecvMsg")
			},
		},
		SendFunc: &GitserverService_RawDiffServerSendFunc{
			defaultHook: func(*v1.RawDiffResponse) error {
				panic("unexpected invocation of MockGitserverService_RawDiffServer.Send")
			},
		},
		SendHeaderFunc: &GitserverService_RawDiffServerSendHeaderFunc{
			defaultHook: func(metadata.MD) error {
				panic("unexpected invocation of MockGitserverService_RawDiffServer.SendHeader")
			},
		},
		SendMsgFunc: &GitserverService_RawDiffServerSendMsgFunc{
			defaultHook: func(interface{}) error {
				panic("unexpected invocation of MockGitserverService_RawDiffServer.SendMsg")
			},
		},
		SetHeaderFunc: &GitserverService_RawDiffServerSetHeaderFunc{
			defaultHook: func(metadata.MD) error {
				panic("unexpected invocation of MockGitserverService_RawDiffServer.SetHeader")
			},
		},
		SetTrailerFunc: &GitserverService_RawDiffServerSetTrailerFunc{
			defaultHook: func(metadata.MD) {
				panic("unexpected invocation of MockGitserverService_RawDiffServer.SetTrailer")
			},
		},
	}
}

// NewMockGitserverService_RawDiffServerFrom creates a new mock of the
// MockGitserverService_RawDiffServer interface. All methods delegate to the
// given implementation, unless overwritten.
func NewMockGitserverService_RawDiffServerFrom(i v1.GitserverService_RawDiffServer) *MockGitserverService_RawDiffServer {
	return &MockGitserverService_RawDiffServer{
		ContextFunc: &GitserverService_RawDiffServerContextFunc{
			defaultHook: i.Context,
		},
		RecvMsgFunc: &GitserverService_RawDiffServerRecvMsgFunc{
			defaultHook: i.RecvMsg,
		},
		SendFunc: &GitserverService_RawDiffServerSendFunc{
			defaultHook: i.Send,
		},
		SendHeaderFunc: &GitserverService_RawDiffServerSendHeaderFunc{
			defaultHook: i.SendHeader,
		},
		SendMsgFunc: &GitserverService_RawDiffServerSendMsgFunc{
			defaultHook: i.SendMsg,
		},
		SetHeaderFunc: &GitserverService_RawDiffServerSetHeaderFunc{
			defaultHook: i.SetHeader,
		},
		SetTrailerFunc: &GitserverService_RawDiffServerSetTrailerFunc{
			defaultHook: i.SetTrailer,
		},
	}
}

// GitserverService_RawDiffServerContextFunc describes the behavior when the
// Context method of the parent MockGitserverService_RawDiffServer instance
// is invoked.
type GitserverService_RawDiffServerContextFunc struct {
	defaultHook func() context.Context
	hooks       []func() context.Context
	history     []GitserverService_RawDiffServerContextFuncCall
	mutex       sync.Mutex
}

// Context delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_RawDiffServer) Context() context.Context {
	r0 := m.ContextFunc.nextHook()()
	m.ContextFunc.appendCall(GitserverService_RawDiffServerContextFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Context method of
// the parent MockGitserverService_RawDiffServer instance is invoked and the
// hook queue is empty.
func (f *GitserverService_RawDiffServerContextFunc) SetDefaultHook(hook func() context.Context) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Context method of the parent MockGitserverService_RawDiffServer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_RawDiffServerContextFunc) PushHook(hook func() context.Context) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_RawDiffServerContextFunc) SetDefaultReturn(r0 context.Context) {
	f.SetDefaultHook(func() context.Context {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_RawDiffServerContextFunc) PushReturn(r0 context.Context) {
	f.PushHook(func() context.Context {
		return r0
	})
}

func (f *GitserverService_RawDiffServerContextFunc) nextHook() func() context.Context {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_RawDiffServerContextFunc) appendCall(r0 GitserverService_RawDiffServerContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_RawDiffServerContextFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_RawDiffServerContextFunc) History() []GitserverService_RawDiffServerContextFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_RawDiffServerContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_RawDiffServerContextFuncCall is an object that describes
// an invocation of method Context on an instance of
// MockGitserverService_RawDiffServer.
type GitserverService_RawDiffServerContextFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 context.Context
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_RawDiffServerContextFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_RawDiffServerContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_RawDiffServerRecvMsgFunc describes the behavior when the
// RecvMsg method of the parent MockGitserverService_RawDiffServer instance
// is invoked.
type GitserverService_RawDiffServerRecvMsgFunc struct {
	defaultHook func(interface{}) error
	hooks       []func(interface{}) error
	history     []GitserverService_RawDiffServerRecvMsgFuncCall
	mutex       sync.Mutex
}

// RecvMsg delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_RawDiffServer) RecvMsg(v0 interface{}) error {
	r0 := m.RecvMsgFunc.nextHook()(v0)
	m.RecvMsgFunc.appendCall(GitserverService_RawDiffServerRecvMsgFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the RecvMsg method of
// the parent MockGitserverService_RawDiffServer instance is invoked and the
// hook queue is empty.
func (f *GitserverService_RawDiffServerRecvMsgFunc) SetDefaultHook(hook func(interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RecvMsg method of the parent MockGitserverService_RawDiffServer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_RawDiffServerRecvMsgFunc) PushHook(hook func(interface{}) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_RawDiffServerRecvMsgFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(interface{}) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_RawDiffServerRecvMsgFunc) PushReturn(r0 error) {
	f.PushHook(func(interface{}) error {
		return r0
	})
}

func (f *GitserverService_RawDiffServerRecvMsgFunc) nextHook() func(interface{}) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_RawDiffServerRecvMsgFunc) appendCall(r0 GitserverService_RawDiffServerRecvMsgFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_RawDiffServerRecvMsgFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_RawDiffServerRecvMsgFunc) History() []GitserverService_RawDiffServerRecvMsgFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_RawDiffServerRecvMsgFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_RawDiffServerRecvMsgFuncCall is an object that describes
// an invocation of method RecvMsg on an instance of
// MockGitserverService_RawDiffServer.
type GitserverService_RawDiffServerRecvMsgFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_RawDiffServerRecvMsgFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_RawDiffServerRecvMsgFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_RawDiffServerSendFunc describes the behavior when the
// Send method of the parent MockGitserverService_RawDiffServer instance is
// invoked.
type GitserverService_RawDiffServerSendFunc struct {
	defaultHook func(*v1.RawDiffResponse) error
	hooks       []func(*v1.RawDiffResponse) error
	history     []GitserverService_RawDiffServerSendFuncCall
	mutex       sync.Mutex
}

// Send delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_RawDiffServer) Send(v0 *v1.RawDiffResponse) error {
	r0 := m.SendFunc.nextHook()(v0)
	m.SendFunc.appendCall(GitserverService_RawDiffServerSendFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Send method of the
// parent MockGitserverService_RawDiffServer instance is invoked and the
// hook queue is empty.
func (f *GitserverService_RawDiffServerSendFunc) SetDefaultHook(hook func(*v1.RawDiffResponse) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Send method of the parent MockGitserverService_RawDiffServer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_RawDiffServerSendFunc) PushHook(hook func(*v1.RawDiffResponse) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_RawDiffServerSendFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(*v1.RawDiffResponse) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_RawDiffServerSendFunc) PushReturn(r0 error) {
	f.PushHook(func(*v1.RawDiffResponse) error {
		return r0
	})
}

func (f *GitserverService_RawDiffServerSendFunc) nextHook() func(*v1.RawDiffResponse) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_RawDiffServerSendFunc) appendCall(r0 GitserverService_RawDiffServerSendFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverService_RawDiffServerSendFuncCall
// objects describing the invocations of this function.
func (f *GitserverService_RawDiffServerSendFunc) History() []GitserverService_RawDiffServerSendFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_RawDiffServerSendFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_RawDiffServerSendFuncCall is an object that describes an
// invocation of method Send on an instance of
// MockGitserverService_RawDiffServer.
type GitserverService_RawDiffServerSendFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *v1.RawDiffResponse
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_RawDiffServerSendFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_RawDiffServerSendFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_RawDiffServerSendHeaderFunc describes the behavior when
// the SendHeader method of the parent MockGitserverService_RawDiffServer
// instance is invoked.
type GitserverService_RawDiffServerSendHeaderFunc struct {
	defaultHook func(metadata.MD) error
	hooks       []func(metadata.MD) error
	history     []GitserverService_RawDiffServerSendHeaderFuncCall
	mutex       sync.Mutex
}

// SendHeader delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverService_RawDiffServer) SendHeader(v0 metadata.MD) error {
	r0 := m.SendHeaderFunc.nextHook()(v0)
	m.SendHeaderFunc.appendCall(GitserverService_RawDiffServerSendHeaderFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SendHeader method of
// the parent MockGitserverService_RawDiffServer instance is invoked and the
// hook queue is empty.
func (f *GitserverService_RawDiffServerSendHeaderFunc) SetDefaultHook(hook func(metadata.MD) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SendHeader method of the parent MockGitserverService_RawDiffServer
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverService_RawDiffServerSendHeaderFunc) PushHook(hook func(metadata.MD) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_RawDiffServerSendHeaderFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(metadata.MD) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_RawDiffServerSendHeaderFunc) PushReturn(r0 error) {
	f.PushHook(func(metadata.MD) error {
		return r0
	})
}

func (f *GitserverService_RawDiffServerSendHeaderFunc) nextHook() func(metadata.MD) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_RawDiffServerSendHeaderFunc) appendCall(r0 GitserverService_RawDiffServerSendHeaderFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_RawDiffServerSendHeaderFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_RawDiffServerSendHeaderFunc) History() []GitserverService_RawDiffServerSendHeaderFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_RawDiffServerSendHeaderFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_RawDiffServerSendHeaderFuncCall is an object that
// describes an invocation of method SendHeader on an instance of
// MockGitserverService_RawDiffServer.
type GitserverService_RawDiffServerSendHeaderFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 metadata.MD
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_RawDiffServerSendHeaderFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_RawDiffServerSendHeaderFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_RawDiffServerSendMsgFunc describes the behavior when the
// SendMsg method of the parent MockGitserverService_RawDiffServer instance
// is invoked.
type GitserverService_RawDiffServerSendMsgFunc struct {
	defaultHook func(interface{}) error
	hooks       []func(interface{}) error
	history     []GitserverService_RawDiffServerSendMsgFuncCall
	mutex       sync.Mutex
}

// SendMsg delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_RawDiffServer) SendMsg(v0 interface{}) error {
	r0 := m.SendMsgFunc.nextHook()(v0)
	m.SendMsgFunc.appendCall(GitserverService_RawDiffServerSendMsgFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SendMsg method of
// the parent MockGitserverService_RawDiffServer instance is invoked and the
// hook queue is empty.
func (f *GitserverService_RawDiffServerSendMsgFunc) SetDefaultHook(hook func(interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SendMsg method of the parent MockGitserverService_RawDiffServer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_RawDiffServerSendMsgFunc) PushHook(hook func(interface{}) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_RawDiffServerSendMsgFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(interface{}) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_RawDiffServerSendMsgFunc) PushReturn(r0 error) {
	f.PushHook(func(interface{}) error {
		return r0
	})
}

func (f *GitserverService_RawDiffServerSendMsgFunc) nextHook() func(interface{}) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_RawDiffServerSendMsgFunc) appendCall(r0 GitserverService_RawDiffServerSendMsgFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_RawDiffServerSendMsgFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_RawDiffServerSendMsgFunc) History() []GitserverService_RawDiffServerSendMsgFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_RawDiffServerSendMsgFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_RawDiffServerSendMsgFuncCall is an object that describes
// an invocation of method SendMsg on an instance of
// MockGitserverService_RawDiffServer.
type GitserverService_RawDiffServerSendMsgFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_RawDiffServerSendMsgFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_RawDiffServerSendMsgFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_RawDiffServerSetHeaderFunc describes the behavior when
// the SetHeader method of the parent MockGitserverService_RawDiffServer
// instance is invoked.
type GitserverService_RawDiffServerSetHeaderFunc struct {
	defaultHook func(metadata.MD) error
	hooks       []func(metadata.MD) error
	history     []GitserverService_RawDiffServerSetHeaderFuncCall
	mutex       sync.Mutex
}

// SetHeader delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_RawDiffServer) SetHeader(v0 metadata.MD) error {
	r0 := m.SetHeaderFunc.nextHook()(v0)
	m.SetHeaderFunc.appendCall(GitserverService_RawDiffServerSetHeaderFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetHeader method of
// the parent MockGitserverService_RawDiffServer instance is invoked and the
// hook queue is empty.
func (f *GitserverService_RawDiffServerSetHeaderFunc) SetDefaultHook(hook func(metadata.MD) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetHeader method of the parent MockGitserverService_RawDiffServer
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverService_RawDiffServerSetHeaderFunc) PushHook(hook func(metadata.MD) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_RawDiffServerSetHeaderFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(metadata.MD) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_RawDiffServerSetHeaderFunc) PushReturn(r0 error) {
	f.PushHook(func(metadata.MD) error {
		return r0
	})
}

func (f *GitserverService_RawDiffServerSetHeaderFunc) nextHook() func(metadata.MD) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_RawDiffServerSetHeaderFunc) appendCall(r0 GitserverService_RawDiffServerSetHeaderFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_RawDiffServerSetHeaderFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_RawDiffServerSetHeaderFunc) History() []GitserverService_RawDiffServerSetHeaderFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_RawDiffServerSetHeaderFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_RawDiffServerSetHeaderFuncCall is an object that
// describes an invocation of method SetHeader on an instance of
// MockGitserverService_RawDiffServer.
type GitserverService_RawDiffServerSetHeaderFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 metadata.MD
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_RawDiffServerSetHeaderFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_RawDiffServerSetHeaderFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_RawDiffServerSetTrailerFunc describes the behavior when
// the SetTrailer method of the parent MockGitserverService_RawDiffServer
// instance is invoked.
type GitserverService_RawDiffServerSetTrailerFunc struct {
	defaultHook func(metadata.MD)
	hooks       []func(metadata.MD)
	history     []GitserverService_RawDiffServerSetTrailerFuncCall
	mutex       sync.Mutex
}

// SetTrailer delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverService_RawDiffServer) SetTrailer(v0 metadata.MD) {
	m.SetTrailerFunc.nextHook()(v0)
	m.SetTrailerFunc.appendCall(GitserverService_RawDiffServerSetTrailerFuncCall{v0})
	return
}

// SetDefaultHook sets function that is called when the SetTrailer method of
// the parent MockGitserverService_RawDiffServer instance is invoked and the
// hook queue is empty.
func (f *GitserverService_RawDiffServerSetTrailerFunc) SetDefaultHook(hook func(metadata.MD)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetTrailer method of the parent MockGitserverService_RawDiffServer
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverService_RawDiffServerSetTrailerFunc) PushHook(hook func(metadata.MD)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_RawDiffServerSetTrailerFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(metadata.MD) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_RawDiffServerSetTrailerFunc) PushReturn() {
	f.PushHook(func(metadata.MD) {
		return
	})
}

func (f *GitserverService_RawDiffServerSetTrailerFunc) nextHook() func(metadata.MD) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_RawDiffServerSetTrailerFunc) appendCall(r0 GitserverService_RawDiffServerSetTrailerFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_RawDiffServerSetTrailerFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_RawDiffServerSetTrailerFunc) History() []GitserverService_RawDiffServerSetTrailerFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_RawDiffServerSetTrailerFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_RawDiffServerSetTrailerFuncCall is an object that
// describes an invocation of method SetTrailer on an instance of
// MockGitserverService_RawDiffServer.
type GitserverService_RawDiffServerSetTrailerFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 metadata.MD
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_RawDiffServerSetTrailerFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_RawDiffServerSetTrailerFuncCall) Results() []interface{} {
	return []interface{}{}
}

// MockGitserverService_ReadFileClient is a mock implementation of the
// GitserverService_ReadFileClient interface (from the package
// github.com/sourcegraph/sourcegraph/internal/gitserver/v1) used for unit
// testing.
type MockGitserverService_ReadFileClient struct {
	// CloseSendFunc is an instance of a mock function object controlling
	// the behavior of the method CloseSend.
	CloseSendFunc *GitserverService_ReadFileClientCloseSendFunc
	// ContextFunc is an instance of a mock function object controlling the
	// behavior of the method Context.
	ContextFunc *GitserverService_ReadFileClientContextFunc
	// HeaderFunc is an instance of a mock function object controlling the
	// behavior of the method Header.
	HeaderFunc *GitserverService_ReadFileClientHeaderFunc
	// RecvFunc is an instance of a mock function object controlling the
	// behavior of the method Recv.
	RecvFunc *GitserverService_ReadFileClientRecvFunc
	// RecvMsgFunc is an instance of a mock function object controlling the
	// behavior of the method RecvMsg.
	RecvMsgFunc *GitserverService_ReadFileClientRecvMsgFunc
	// SendMsgFunc is an instance of a mock function object controlling the
	// behavior of the method SendMsg.
	SendMsgFunc *GitserverService_ReadFileClientSendMsgFunc
	// TrailerFunc is an instance of a mock function object controlling the
	// behavior of the method Trailer.
	TrailerFunc *GitserverService_ReadFileClientTrailerFunc
}

// NewMockGitserverService_ReadFileClient creates a new mock of the
// GitserverService_ReadFileClient interface. All methods return zero values
// for all results, unless overwritten.
func NewMockGitserverService_ReadFileClient() *MockGitserverService_ReadFileClient {
	return &MockGitserverService_ReadFileClient{
		CloseSendFunc: &GitserverService_ReadFileClientCloseSendFunc{
			defaultHook: func() (r0 error) {
				return
			},
		},
		ContextFunc: &GitserverService_ReadFileClientContextFunc{
			defaultHook: func() (r0 context.Context) {
				return
			},
		},
		HeaderFunc: &GitserverService_ReadFileClientHeaderFunc{
			defaultHook: func() (r0 metadata.MD, r1 error) {
				return
			},
		},
		RecvFunc: &GitserverService_ReadFileClientRecvFunc{
			defaultHook: func() (r0 *v1.ReadFileResponse, r1 error) {
				return
			},
		},
		RecvMsgFunc: &GitserverService_ReadFileClientRecvMsgFunc{
			defaultHook: func(interface{}) (r0 error) {
				return
			},
		},
		SendMsgFunc: &GitserverService_ReadFileClientSendMsgFunc{
			defaultHook: func(interface{}) (r0 error) {
				return
			},
		},
		TrailerFunc: &GitserverService_ReadFileClientTrailerFunc{
			defaultHook: func() (r0 metadata.MD) {
				return
			},
		},
	}
}

// NewStrictMockGitserverService_ReadFileClient creates a new mock of the
// GitserverService_ReadFileClient interface. All methods panic on
// invocation, unless overwritten.
func NewStrictMockGitserverService_ReadFileClient() *MockGitserverService_ReadFileClient {
	return &MockGitserverService_ReadFileClient{
		CloseSendFunc: &GitserverService_ReadFileClientCloseSendFunc{
			defaultHook: func() error {
				panic("unexpected invocation of MockGitserverService_ReadFileClient.CloseSend")
			},
		},
		ContextFunc: &GitserverService_ReadFileClientContextFunc{
			defaultHook: func() context.Context {
				panic("unexpected invocation of MockGitserverService_ReadFileClient.Context")
			},
		},
		HeaderFunc: &GitserverService_ReadFileClientHeaderFunc{
			defaultHook: func() (metadata.MD, error) {
				panic("unexpected invocation of MockGitserverService_ReadFileClient.Header")
			},
		},
		RecvFunc: &GitserverService_ReadFileClientRecvFunc{
			defaultHook: func() (*v1.ReadFileResponse, error) {
				panic("unexpected invocation of MockGitserverService_ReadFileClient.Recv")
			},
		},
		RecvMsgFunc: &GitserverService_ReadFileClientRecvMsgFunc{
			defaultHook: func(interface{}) error {
				panic("unexpected invocation of MockGitserverService_ReadFileClient.RecvMsg")
			},
		},
		SendMsgFunc: &GitserverService_ReadFileClientSendMsgFunc{
			defaultHook: func(interface{}) error {
				panic("unexpected invocation of MockGitserverService_ReadFileClient.SendMsg")
			},
		},
		TrailerFunc: &GitserverService_ReadFileClientTrailerFunc{
			defaultHook: func() metadata.MD {
				panic("unexpected invocation of MockGitserverService_ReadFileClient.Trailer")
			},
		},
	}
}

// NewMockGitserverService_ReadFileClientFrom creates a new mock of the
// MockGitserverService_ReadFileClient interface. All methods delegate to
// the given implementation, unless overwritten.
func NewMockGitserverService_ReadFileClientFrom(i v1.GitserverService_ReadFileClient) *MockGitserverService_ReadFileClient {
	return &MockGitserverService_ReadFileClient{
		CloseSendFunc: &GitserverService_ReadFileClientCloseSendFunc{
			defaultHook: i.CloseSend,
		},
		ContextFunc: &GitserverService_ReadFileClientContextFunc{
			defaultHook: i.Context,
		},
		HeaderFunc: &GitserverService_ReadFileClientHeaderFunc{
			defaultHook: i.Header,
		},
		RecvFunc: &GitserverService_ReadFileClientRecvFunc{
			defaultHook: i.Recv,
		},
		RecvMsgFunc: &GitserverService_ReadFileClientRecvMsgFunc{
			defaultHook: i.RecvMsg,
		},
		SendMsgFunc: &GitserverService_ReadFileClientSendMsgFunc{
			defaultHook: i.SendMsg,
		},
		TrailerFunc: &GitserverService_ReadFileClientTrailerFunc{
			defaultHook: i.Trailer,
		},
	}
}

// GitserverService_ReadFileClientCloseSendFunc describes the behavior when
// the CloseSend method of the parent MockGitserverService_ReadFileClient
// instance is invoked.
type GitserverService_ReadFileClientCloseSendFunc struct {
	defaultHook func() error
	hooks       []func() error
	history     []GitserverService_ReadFileClientCloseSendFuncCall
	mutex       sync.Mutex
}

// CloseSend delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ReadFileClient) CloseSend() error {
	r0 := m.CloseSendFunc.nextHook()()
	m.CloseSendFunc.appendCall(GitserverService_ReadFileClientCloseSendFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the CloseSend method of
// the parent MockGitserverService_ReadFileClient instance is invoked and
// the hook queue is empty.
func (f *GitserverService_ReadFileClientCloseSendFunc) SetDefaultHook(hook func() error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CloseSend method of the parent MockGitserverService_ReadFileClient
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverService_ReadFileClientCloseSendFunc) PushHook(hook func() error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ReadFileClientCloseSendFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func() error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ReadFileClientCloseSendFunc) PushReturn(r0 error) {
	f.PushHook(func() error {
		return r0
	})
}

func (f *GitserverService_ReadFileClientCloseSendFunc) nextHook() func() error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ReadFileClientCloseSendFunc) appendCall(r0 GitserverService_ReadFileClientCloseSendFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ReadFileClientCloseSendFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ReadFileClientCloseSendFunc) History() []GitserverService_ReadFileClientCloseSendFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ReadFileClientCloseSendFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ReadFileClientCloseSendFuncCall is an object that
// describes an invocation of method CloseSend on an instance of
// MockGitserverService_ReadFileClient.
type GitserverService_ReadFileClientCloseSendFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ReadFileClientCloseSendFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ReadFileClientCloseSendFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ReadFileClientContextFunc describes the behavior when
// the Context method of the parent MockGitserverService_ReadFileClient
// instance is invoked.
type GitserverService_ReadFileClientContextFunc struct {
	defaultHook func() context.Context
	hooks       []func() context.Context
	history     []GitserverService_ReadFileClientContextFuncCall
	mutex       sync.Mutex
}

// Context delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ReadFileClient) Context() context.Context {
	r0 := m.ContextFunc.nextHook()()
	m.ContextFunc.appendCall(GitserverService_ReadFileClientContextFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Context method of
// the parent MockGitserverService_ReadFileClient instance is invoked and
// the hook queue is empty.
func (f *GitserverService_ReadFileClientContextFunc) SetDefaultHook(hook func() context.Context) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Context method of the parent MockGitserverService_ReadFileClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ReadFileClientContextFunc) PushHook(hook func() context.Context) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ReadFileClientContextFunc) SetDefaultReturn(r0 context.Context) {
	f.SetDefaultHook(func() context.Context {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ReadFileClientContextFunc) PushReturn(r0 context.Context) {
	f.PushHook(func() context.Context {
		return r0
	})
}

func (f *GitserverService_ReadFileClientContextFunc) nextHook() func() context.Context {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ReadFileClientContextFunc) appendCall(r0 GitserverService_ReadFileClientContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ReadFileClientContextFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ReadFileClientContextFunc) History() []GitserverService_ReadFileClientContextFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ReadFileClientContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ReadFileClientContextFuncCall is an object that
// describes an invocation of method Context on an instance of
// MockGitserverService_ReadFileClient.
type GitserverService_ReadFileClientContextFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 context.Context
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ReadFileClientContextFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ReadFileClientContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ReadFileClientHeaderFunc describes the behavior when the
// Header method of the parent MockGitserverService_ReadFileClient instance
// is invoked.
type GitserverService_ReadFileClientHeaderFunc struct {
	defaultHook func() (metadata.MD, error)
	hooks       []func() (metadata.MD, error)
	history     []GitserverService_ReadFileClientHeaderFuncCall
	mutex       sync.Mutex
}

// Header delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ReadFileClient) Header() (metadata.MD, error) {
	r0, r1 := m.HeaderFunc.nextHook()()
	m.HeaderFunc.appendCall(GitserverService_ReadFileClientHeaderFuncCall{r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Header method of the
// parent MockGitserverService_ReadFileClient instance is invoked and the
// hook queue is empty.
func (f *GitserverService_ReadFileClientHeaderFunc) SetDefaultHook(hook func() (metadata.MD, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Header method of the parent MockGitserverService_ReadFileClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ReadFileClientHeaderFunc) PushHook(hook func() (metadata.MD, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ReadFileClientHeaderFunc) SetDefaultReturn(r0 metadata.MD, r1 error) {
	f.SetDefaultHook(func() (metadata.MD, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ReadFileClientHeaderFunc) PushReturn(r0 metadata.MD, r1 error) {
	f.PushHook(func() (metadata.MD, error) {
		return r0, r1
	})
}

func (f *GitserverService_ReadFileClientHeaderFunc) nextHook() func() (metadata.MD, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ReadFileClientHeaderFunc) appendCall(r0 GitserverService_ReadFileClientHeaderFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ReadFileClientHeaderFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ReadFileClientHeaderFunc) History() []GitserverService_ReadFileClientHeaderFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ReadFileClientHeaderFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ReadFileClientHeaderFuncCall is an object that describes
// an invocation of method Header on an instance of
// MockGitserverService_ReadFileClient.
type GitserverService_ReadFileClientHeaderFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 metadata.MD
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ReadFileClientHeaderFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ReadFileClientHeaderFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverService_ReadFileClientRecvFunc describes the behavior when the
// Recv method of the parent MockGitserverService_ReadFileClient instance is
// invoked.
type GitserverService_ReadFileClientRecvFunc struct {
	defaultHook func() (*v1.ReadFileResponse, error)
	hooks       []func() (*v1.ReadFileResponse, error)
	history     []GitserverService_ReadFileClientRecvFuncCall
	mutex       sync.Mutex
}

// Recv delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ReadFileClient) Recv() (*v1.ReadFileResponse, error) {
	r0, r1 := m.RecvFunc.nextHook()()
	m.RecvFunc.appendCall(GitserverService_ReadFileClientRecvFuncCall{r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Recv method of the
// parent MockGitserverService_ReadFileClient instance is invoked and the
// hook queue is empty.
func (f *GitserverService_ReadFileClientRecvFunc) SetDefaultHook(hook func() (*v1.ReadFileResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Recv method of the parent MockGitserverService_ReadFileClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ReadFileClientRecvFunc) PushHook(hook func() (*v1.ReadFileResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ReadFileClientRecvFunc) SetDefaultReturn(r0 *v1.ReadFileResponse, r1 error) {
	f.SetDefaultHook(func() (*v1.ReadFileResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ReadFileClientRecvFunc) PushReturn(r0 *v1.ReadFileResponse, r1 error) {
	f.PushHook(func() (*v1.ReadFileResponse, error) {
		return r0, r1
	})
}

func (f *GitserverService_ReadFileClientRecvFunc) nextHook() func() (*v1.ReadFileResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ReadFileClientRecvFunc) appendCall(r0 GitserverService_ReadFileClientRecvFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverService_ReadFileClientRecvFuncCall
// objects describing the invocations of this function.
func (f *GitserverService_ReadFileClientRecvFunc) History() []GitserverService_ReadFileClientRecvFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ReadFileClientRecvFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ReadFileClientRecvFuncCall is an object that describes
// an invocation of method Recv on an instance of
// MockGitserverService_ReadFileClient.
type GitserverService_ReadFileClientRecvFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.ReadFileResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ReadFileClientRecvFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ReadFileClientRecvFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitserverService_ReadFileClientRecvMsgFunc describes the behavior when
// the RecvMsg method of the parent MockGitserverService_ReadFileClient
// instance is invoked.
type GitserverService_ReadFileClientRecvMsgFunc struct {
	defaultHook func(interface{}) error
	hooks       []func(interface{}) error
	history     []GitserverService_ReadFileClientRecvMsgFuncCall
	mutex       sync.Mutex
}

// RecvMsg delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ReadFileClient) RecvMsg(v0 interface{}) error {
	r0 := m.RecvMsgFunc.nextHook()(v0)
	m.RecvMsgFunc.appendCall(GitserverService_ReadFileClientRecvMsgFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the RecvMsg method of
// the parent MockGitserverService_ReadFileClient instance is invoked and
// the hook queue is empty.
func (f *GitserverService_ReadFileClientRecvMsgFunc) SetDefaultHook(hook func(interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RecvMsg method of the parent MockGitserverService_ReadFileClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ReadFileClientRecvMsgFunc) PushHook(hook func(interface{}) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ReadFileClientRecvMsgFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(interface{}) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ReadFileClientRecvMsgFunc) PushReturn(r0 error) {
	f.PushHook(func(interface{}) error {
		return r0
	})
}

func (f *GitserverService_ReadFileClientRecvMsgFunc) nextHook() func(interface{}) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ReadFileClientRecvMsgFunc) appendCall(r0 GitserverService_ReadFileClientRecvMsgFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ReadFileClientRecvMsgFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ReadFileClientRecvMsgFunc) History() []GitserverService_ReadFileClientRecvMsgFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ReadFileClientRecvMsgFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ReadFileClientRecvMsgFuncCall is an object that
// describes an invocation of method RecvMsg on an instance of
// MockGitserverService_ReadFileClient.
type GitserverService_ReadFileClientRecvMsgFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ReadFileClientRecvMsgFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ReadFileClientRecvMsgFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ReadFileClientSendMsgFunc describes the behavior when
// the SendMsg method of the parent MockGitserverService_ReadFileClient
// instance is invoked.
type GitserverService_ReadFileClientSendMsgFunc struct {
	defaultHook func(interface{}) error
	hooks       []func(interface{}) error
	history     []GitserverService_ReadFileClientSendMsgFuncCall
	mutex       sync.Mutex
}

// SendMsg delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ReadFileClient) SendMsg(v0 interface{}) error {
	r0 := m.SendMsgFunc.nextHook()(v0)
	m.SendMsgFunc.appendCall(GitserverService_ReadFileClientSendMsgFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SendMsg method of
// the parent MockGitserverService_ReadFileClient instance is invoked and
// the hook queue is empty.
func (f *GitserverService_ReadFileClientSendMsgFunc) SetDefaultHook(hook func(interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SendMsg method of the parent MockGitserverService_ReadFileClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ReadFileClientSendMsgFunc) PushHook(hook func(interface{}) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ReadFileClientSendMsgFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(interface{}) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ReadFileClientSendMsgFunc) PushReturn(r0 error) {
	f.PushHook(func(interface{}) error {
		return r0
	})
}

func (f *GitserverService_ReadFileClientSendMsgFunc) nextHook() func(interface{}) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ReadFileClientSendMsgFunc) appendCall(r0 GitserverService_ReadFileClientSendMsgFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ReadFileClientSendMsgFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ReadFileClientSendMsgFunc) History() []GitserverService_ReadFileClientSendMsgFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ReadFileClientSendMsgFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ReadFileClientSendMsgFuncCall is an object that
// describes an invocation of method SendMsg on an instance of
// MockGitserverService_ReadFileClient.
type GitserverService_ReadFileClientSendMsgFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ReadFileClientSendMsgFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ReadFileClientSendMsgFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ReadFileClientTrailerFunc describes the behavior when
// the Trailer method of the parent MockGitserverService_ReadFileClient
// instance is invoked.
type GitserverService_ReadFileClientTrailerFunc struct {
	defaultHook func() metadata.MD
	hooks       []func() metadata.MD
	history     []GitserverService_ReadFileClientTrailerFuncCall
	mutex       sync.Mutex
}

// Trailer delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ReadFileClient) Trailer() metadata.MD {
	r0 := m.TrailerFunc.nextHook()()
	m.TrailerFunc.appendCall(GitserverService_ReadFileClientTrailerFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Trailer method of
// the parent MockGitserverService_ReadFileClient instance is invoked and
// the hook queue is empty.
func (f *GitserverService_ReadFileClientTrailerFunc) SetDefaultHook(hook func() metadata.MD) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Trailer method of the parent MockGitserverService_ReadFileClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ReadFileClientTrailerFunc) PushHook(hook func() metadata.MD) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ReadFileClientTrailerFunc) SetDefaultReturn(r0 metadata.MD) {
	f.SetDefaultHook(func() metadata.MD {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ReadFileClientTrailerFunc) PushReturn(r0 metadata.MD) {
	f.PushHook(func() metadata.MD {
		return r0
	})
}

func (f *GitserverService_ReadFileClientTrailerFunc) nextHook() func() metadata.MD {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ReadFileClientTrailerFunc) appendCall(r0 GitserverService_ReadFileClientTrailerFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ReadFileClientTrailerFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ReadFileClientTrailerFunc) History() []GitserverService_ReadFileClientTrailerFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ReadFileClientTrailerFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ReadFileClientTrailerFuncCall is an object that
// describes an invocation of method Trailer on an instance of
// MockGitserverService_ReadFileClient.
type GitserverService_ReadFileClientTrailerFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 metadata.MD
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ReadFileClientTrailerFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ReadFileClientTrailerFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockGitserverService_ReadFileServer is a mock implementation of the
// GitserverService_ReadFileServer interface (from the package
// github.com/sourcegraph/sourcegraph/internal/gitserver/v1) used for unit
// testing.
type MockGitserverService_ReadFileServer struct {
	// ContextFunc is an instance of a mock function object controlling the
	// behavior of the method Context.
	ContextFunc *GitserverService_ReadFileServerContextFunc
	// RecvMsgFunc is an instance of a mock function object controlling the
	// behavior of the method RecvMsg.
	RecvMsgFunc *GitserverService_ReadFileServerRecvMsgFunc
	// SendFunc is an instance of a mock function object controlling the
	// behavior of the method Send.
	SendFunc *GitserverService_ReadFileServerSendFunc
	// SendHeaderFunc is an instance of a mock function object controlling
	// the behavior of the method SendHeader.
	SendHeaderFunc *GitserverService_ReadFileServerSendHeaderFunc
	// SendMsgFunc is an instance of a mock function object controlling the
	// behavior of the method SendMsg.
	SendMsgFunc *GitserverService_ReadFileServerSendMsgFunc
	// SetHeaderFunc is an instance of a mock function object controlling
	// the behavior of the method SetHeader.
	SetHeaderFunc *GitserverService_ReadFileServerSetHeaderFunc
	// SetTrailerFunc is an instance of a mock function object controlling
	// the behavior of the method SetTrailer.
	SetTrailerFunc *GitserverService_ReadFileServerSetTrailerFunc
}

// NewMockGitserverService_ReadFileServer creates a new mock of the
// GitserverService_ReadFileServer interface. All methods return zero values
// for all results, unless overwritten.
func NewMockGitserverService_ReadFileServer() *MockGitserverService_ReadFileServer {
	return &MockGitserverService_ReadFileServer{
		ContextFunc: &GitserverService_ReadFileServerContextFunc{
			defaultHook: func() (r0 context.Context) {
				return
			},
		},
		RecvMsgFunc: &GitserverService_ReadFileServerRecvMsgFunc{
			defaultHook: func(interface{}) (r0 error) {
				return
			},
		},
		SendFunc: &GitserverService_ReadFileServerSendFunc{
			defaultHook: func(*v1.ReadFileResponse) (r0 error) {
				return
			},
		},
		SendHeaderFunc: &GitserverService_ReadFileServerSendHeaderFunc{
			defaultHook: func(metadata.MD) (r0 error) {
				return
			},
		},
		SendMsgFunc: &GitserverService_ReadFileServerSendMsgFunc{
			defaultHook: func(interface{}) (r0 error) {
				return
			},
		},
		SetHeaderFunc: &GitserverService_ReadFileServerSetHeaderFunc{
			defaultHook: func(metadata.MD) (r0 error) {
				return
			},
		},
		SetTrailerFunc: &GitserverService_ReadFileServerSetTrailerFunc{
			defaultHook: func(metadata.MD) {
				return
			},
		},
	}
}

// NewStrictMockGitserverService_ReadFileServer creates a new mock of the
// GitserverService_ReadFileServer interface. All methods panic on
// invocation, unless overwritten.
func NewStrictMockGitserverService_ReadFileServer() *MockGitserverService_ReadFileServer {
	return &MockGitserverService_ReadFileServer{
		ContextFunc: &GitserverService_ReadFileServerContextFunc{
			defaultHook: func() context.Context {
				panic("unexpected invocation of MockGitserverService_ReadFileServer.Context")
			},
		},
		RecvMsgFunc: &GitserverService_ReadFileServerRecvMsgFunc{
			defaultHook: func(interface{}) error {
				panic("unexpected invocation of MockGitserverService_ReadFileServer.RecvMsg")
			},
		},
		SendFunc: &GitserverService_ReadFileServerSendFunc{
			defaultHook: func(*v1.ReadFileResponse) error {
				panic("unexpected invocation of MockGitserverService_ReadFileServer.Send")
			},
		},
		SendHeaderFunc: &GitserverService_ReadFileServerSendHeaderFunc{
			defaultHook: func(metadata.MD) error {
				panic("unexpected invocation of MockGitserverService_ReadFileServer.SendHeader")
			},
		},
		SendMsgFunc: &GitserverService_ReadFileServerSendMsgFunc{
			defaultHook: func(interface{}) error {
				panic("unexpected invocation of MockGitserverService_ReadFileServer.SendMsg")
			},
		},
		SetHeaderFunc: &GitserverService_ReadFileServerSetHeaderFunc{
			defaultHook: func(metadata.MD) error {
				panic("unexpected invocation of MockGitserverService_ReadFileServer.SetHeader")
			},
		},
		SetTrailerFunc: &GitserverService_ReadFileServerSetTrailerFunc{
			defaultHook: func(metadata.MD) {
				panic("unexpected invocation of MockGitserverService_ReadFileServer.SetTrailer")
			},
		},
	}
}

// NewMockGitserverService_ReadFileServerFrom creates a new mock of the
// MockGitserverService_ReadFileServer interface. All methods delegate to
// the given implementation, unless overwritten.
func NewMockGitserverService_ReadFileServerFrom(i v1.GitserverService_ReadFileServer) *MockGitserverService_ReadFileServer {
	return &MockGitserverService_ReadFileServer{
		ContextFunc: &GitserverService_ReadFileServerContextFunc{
			defaultHook: i.Context,
		},
		RecvMsgFunc: &GitserverService_ReadFileServerRecvMsgFunc{
			defaultHook: i.RecvMsg,
		},
		SendFunc: &GitserverService_ReadFileServerSendFunc{
			defaultHook: i.Send,
		},
		SendHeaderFunc: &GitserverService_ReadFileServerSendHeaderFunc{
			defaultHook: i.SendHeader,
		},
		SendMsgFunc: &GitserverService_ReadFileServerSendMsgFunc{
			defaultHook: i.SendMsg,
		},
		SetHeaderFunc: &GitserverService_ReadFileServerSetHeaderFunc{
			defaultHook: i.SetHeader,
		},
		SetTrailerFunc: &GitserverService_ReadFileServerSetTrailerFunc{
			defaultHook: i.SetTrailer,
		},
	}
}

// GitserverService_ReadFileServerContextFunc describes the behavior when
// the Context method of the parent MockGitserverService_ReadFileServer
// instance is invoked.
type GitserverService_ReadFileServerContextFunc struct {
	defaultHook func() context.Context
	hooks       []func() context.Context
	history     []GitserverService_ReadFileServerContextFuncCall
	mutex       sync.Mutex
}

// Context delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ReadFileServer) Context() context.Context {
	r0 := m.ContextFunc.nextHook()()
	m.ContextFunc.appendCall(GitserverService_ReadFileServerContextFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Context method of
// the parent MockGitserverService_ReadFileServer instance is invoked and
// the hook queue is empty.
func (f *GitserverService_ReadFileServerContextFunc) SetDefaultHook(hook func() context.Context) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Context method of the parent MockGitserverService_ReadFileServer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ReadFileServerContextFunc) PushHook(hook func() context.Context) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ReadFileServerContextFunc) SetDefaultReturn(r0 context.Context) {
	f.SetDefaultHook(func() context.Context {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ReadFileServerContextFunc) PushReturn(r0 context.Context) {
	f.PushHook(func() context.Context {
		return r0
	})
}

func (f *GitserverService_ReadFileServerContextFunc) nextHook() func() context.Context {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ReadFileServerContextFunc) appendCall(r0 GitserverService_ReadFileServerContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ReadFileServerContextFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ReadFileServerContextFunc) History() []GitserverService_ReadFileServerContextFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ReadFileServerContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ReadFileServerContextFuncCall is an object that
// describes an invocation of method Context on an instance of
// MockGitserverService_ReadFileServer.
type GitserverService_ReadFileServerContextFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 context.Context
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ReadFileServerContextFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ReadFileServerContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ReadFileServerRecvMsgFunc describes the behavior when
// the RecvMsg method of the parent MockGitserverService_ReadFileServer
// instance is invoked.
type GitserverService_ReadFileServerRecvMsgFunc struct {
	defaultHook func(interface{}) error
	hooks       []func(interface{}) error
	history     []GitserverService_ReadFileServerRecvMsgFuncCall
	mutex       sync.Mutex
}

// RecvMsg delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ReadFileServer) RecvMsg(v0 interface{}) error {
	r0 := m.RecvMsgFunc.nextHook()(v0)
	m.RecvMsgFunc.appendCall(GitserverService_ReadFileServerRecvMsgFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the RecvMsg method of
// the parent MockGitserverService_ReadFileServer instance is invoked and
// the hook queue is empty.
func (f *GitserverService_ReadFileServerRecvMsgFunc) SetDefaultHook(hook func(interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RecvMsg method of the parent MockGitserverService_ReadFileServer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ReadFileServerRecvMsgFunc) PushHook(hook func(interface{}) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ReadFileServerRecvMsgFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(interface{}) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ReadFileServerRecvMsgFunc) PushReturn(r0 error) {
	f.PushHook(func(interface{}) error {
		return r0
	})
}

func (f *GitserverService_ReadFileServerRecvMsgFunc) nextHook() func(interface{}) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ReadFileServerRecvMsgFunc) appendCall(r0 GitserverService_ReadFileServerRecvMsgFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ReadFileServerRecvMsgFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ReadFileServerRecvMsgFunc) History() []GitserverService_ReadFileServerRecvMsgFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ReadFileServerRecvMsgFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ReadFileServerRecvMsgFuncCall is an object that
// describes an invocation of method RecvMsg on an instance of
// MockGitserverService_ReadFileServer.
type GitserverService_ReadFileServerRecvMsgFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ReadFileServerRecvMsgFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ReadFileServerRecvMsgFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ReadFileServerSendFunc describes the behavior when the
// Send method of the parent MockGitserverService_ReadFileServer instance is
// invoked.
type GitserverService_ReadFileServerSendFunc struct {
	defaultHook func(*v1.ReadFileResponse) error
	hooks       []func(*v1.ReadFileResponse) error
	history     []GitserverService_ReadFileServerSendFuncCall
	mutex       sync.Mutex
}

// Send delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ReadFileServer) Send(v0 *v1.ReadFileResponse) error {
	r0 := m.SendFunc.nextHook()(v0)
	m.SendFunc.appendCall(GitserverService_ReadFileServerSendFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Send method of the
// parent MockGitserverService_ReadFileServer instance is invoked and the
// hook queue is empty.
func (f *GitserverService_ReadFileServerSendFunc) SetDefaultHook(hook func(*v1.ReadFileResponse) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Send method of the parent MockGitserverService_ReadFileServer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ReadFileServerSendFunc) PushHook(hook func(*v1.ReadFileResponse) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ReadFileServerSendFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(*v1.ReadFileResponse) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ReadFileServerSendFunc) PushReturn(r0 error) {
	f.PushHook(func(*v1.ReadFileResponse) error {
		return r0
	})
}

func (f *GitserverService_ReadFileServerSendFunc) nextHook() func(*v1.ReadFileResponse) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ReadFileServerSendFunc) appendCall(r0 GitserverService_ReadFileServerSendFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitserverService_ReadFileServerSendFuncCall
// objects describing the invocations of this function.
func (f *GitserverService_ReadFileServerSendFunc) History() []GitserverService_ReadFileServerSendFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ReadFileServerSendFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ReadFileServerSendFuncCall is an object that describes
// an invocation of method Send on an instance of
// MockGitserverService_ReadFileServer.
type GitserverService_ReadFileServerSendFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 *v1.ReadFileResponse
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ReadFileServerSendFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ReadFileServerSendFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ReadFileServerSendHeaderFunc describes the behavior when
// the SendHeader method of the parent MockGitserverService_ReadFileServer
// instance is invoked.
type GitserverService_ReadFileServerSendHeaderFunc struct {
	defaultHook func(metadata.MD) error
	hooks       []func(metadata.MD) error
	history     []GitserverService_ReadFileServerSendHeaderFuncCall
	mutex       sync.Mutex
}

// SendHeader delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverService_ReadFileServer) SendHeader(v0 metadata.MD) error {
	r0 := m.SendHeaderFunc.nextHook()(v0)
	m.SendHeaderFunc.appendCall(GitserverService_ReadFileServerSendHeaderFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SendHeader method of
// the parent MockGitserverService_ReadFileServer instance is invoked and
// the hook queue is empty.
func (f *GitserverService_ReadFileServerSendHeaderFunc) SetDefaultHook(hook func(metadata.MD) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SendHeader method of the parent MockGitserverService_ReadFileServer
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverService_ReadFileServerSendHeaderFunc) PushHook(hook func(metadata.MD) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ReadFileServerSendHeaderFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(metadata.MD) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ReadFileServerSendHeaderFunc) PushReturn(r0 error) {
	f.PushHook(func(metadata.MD) error {
		return r0
	})
}

func (f *GitserverService_ReadFileServerSendHeaderFunc) nextHook() func(metadata.MD) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ReadFileServerSendHeaderFunc) appendCall(r0 GitserverService_ReadFileServerSendHeaderFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ReadFileServerSendHeaderFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ReadFileServerSendHeaderFunc) History() []GitserverService_ReadFileServerSendHeaderFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ReadFileServerSendHeaderFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ReadFileServerSendHeaderFuncCall is an object that
// describes an invocation of method SendHeader on an instance of
// MockGitserverService_ReadFileServer.
type GitserverService_ReadFileServerSendHeaderFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 metadata.MD
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ReadFileServerSendHeaderFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ReadFileServerSendHeaderFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ReadFileServerSendMsgFunc describes the behavior when
// the SendMsg method of the parent MockGitserverService_ReadFileServer
// instance is invoked.
type GitserverService_ReadFileServerSendMsgFunc struct {
	defaultHook func(interface{}) error
	hooks       []func(interface{}) error
	history     []GitserverService_ReadFileServerSendMsgFuncCall
	mutex       sync.Mutex
}

// SendMsg delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ReadFileServer) SendMsg(v0 interface{}) error {
	r0 := m.SendMsgFunc.nextHook()(v0)
	m.SendMsgFunc.appendCall(GitserverService_ReadFileServerSendMsgFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SendMsg method of
// the parent MockGitserverService_ReadFileServer instance is invoked and
// the hook queue is empty.
func (f *GitserverService_ReadFileServerSendMsgFunc) SetDefaultHook(hook func(interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SendMsg method of the parent MockGitserverService_ReadFileServer instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitserverService_ReadFileServerSendMsgFunc) PushHook(hook func(interface{}) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ReadFileServerSendMsgFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(interface{}) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ReadFileServerSendMsgFunc) PushReturn(r0 error) {
	f.PushHook(func(interface{}) error {
		return r0
	})
}

func (f *GitserverService_ReadFileServerSendMsgFunc) nextHook() func(interface{}) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ReadFileServerSendMsgFunc) appendCall(r0 GitserverService_ReadFileServerSendMsgFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ReadFileServerSendMsgFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ReadFileServerSendMsgFunc) History() []GitserverService_ReadFileServerSendMsgFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ReadFileServerSendMsgFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ReadFileServerSendMsgFuncCall is an object that
// describes an invocation of method SendMsg on an instance of
// MockGitserverService_ReadFileServer.
type GitserverService_ReadFileServerSendMsgFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ReadFileServerSendMsgFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ReadFileServerSendMsgFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ReadFileServerSetHeaderFunc describes the behavior when
// the SetHeader method of the parent MockGitserverService_ReadFileServer
// instance is invoked.
type GitserverService_ReadFileServerSetHeaderFunc struct {
	defaultHook func(metadata.MD) error
	hooks       []func(metadata.MD) error
	history     []GitserverService_ReadFileServerSetHeaderFuncCall
	mutex       sync.Mutex
}

// SetHeader delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitserverService_ReadFileServer) SetHeader(v0 metadata.MD) error {
	r0 := m.SetHeaderFunc.nextHook()(v0)
	m.SetHeaderFunc.appendCall(GitserverService_ReadFileServerSetHeaderFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetHeader method of
// the parent MockGitserverService_ReadFileServer instance is invoked and
// the hook queue is empty.
func (f *GitserverService_ReadFileServerSetHeaderFunc) SetDefaultHook(hook func(metadata.MD) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetHeader method of the parent MockGitserverService_ReadFileServer
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverService_ReadFileServerSetHeaderFunc) PushHook(hook func(metadata.MD) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ReadFileServerSetHeaderFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(metadata.MD) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ReadFileServerSetHeaderFunc) PushReturn(r0 error) {
	f.PushHook(func(metadata.MD) error {
		return r0
	})
}

func (f *GitserverService_ReadFileServerSetHeaderFunc) nextHook() func(metadata.MD) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ReadFileServerSetHeaderFunc) appendCall(r0 GitserverService_ReadFileServerSetHeaderFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ReadFileServerSetHeaderFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ReadFileServerSetHeaderFunc) History() []GitserverService_ReadFileServerSetHeaderFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ReadFileServerSetHeaderFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ReadFileServerSetHeaderFuncCall is an object that
// describes an invocation of method SetHeader on an instance of
// MockGitserverService_ReadFileServer.
type GitserverService_ReadFileServerSetHeaderFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 metadata.MD
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ReadFileServerSetHeaderFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ReadFileServerSetHeaderFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitserverService_ReadFileServerSetTrailerFunc describes the behavior when
// the SetTrailer method of the parent MockGitserverService_ReadFileServer
// instance is invoked.
type GitserverService_ReadFileServerSetTrailerFunc struct {
	defaultHook func(metadata.MD)
	hooks       []func(metadata.MD)
	history     []GitserverService_ReadFileServerSetTrailerFuncCall
	mutex       sync.Mutex
}

// SetTrailer delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGitserverService_ReadFileServer) SetTrailer(v0 metadata.MD) {
	m.SetTrailerFunc.nextHook()(v0)
	m.SetTrailerFunc.appendCall(GitserverService_ReadFileServerSetTrailerFuncCall{v0})
	return
}

// SetDefaultHook sets function that is called when the SetTrailer method of
// the parent MockGitserverService_ReadFileServer instance is invoked and
// the hook queue is empty.
func (f *GitserverService_ReadFileServerSetTrailerFunc) SetDefaultHook(hook func(metadata.MD)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetTrailer method of the parent MockGitserverService_ReadFileServer
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *GitserverService_ReadFileServerSetTrailerFunc) PushHook(hook func(metadata.MD)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitserverService_ReadFileServerSetTrailerFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(metadata.MD) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitserverService_ReadFileServerSetTrailerFunc) PushReturn() {
	f.PushHook(func(metadata.MD) {
		return
	})
}

func (f *GitserverService_ReadFileServerSetTrailerFunc) nextHook() func(metadata.MD) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitserverService_ReadFileServerSetTrailerFunc) appendCall(r0 GitserverService_ReadFileServerSetTrailerFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitserverService_ReadFileServerSetTrailerFuncCall objects describing the
// invocations of this function.
func (f *GitserverService_ReadFileServerSetTrailerFunc) History() []GitserverService_ReadFileServerSetTrailerFuncCall {
	f.mutex.Lock()
	history := make([]GitserverService_ReadFileServerSetTrailerFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitserverService_ReadFileServerSetTrailerFuncCall is an object that
// describes an invocation of method SetTrailer on an instance of
// MockGitserverService_ReadFileServer.
type GitserverService_ReadFileServerSetTrailerFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 metadata.MD
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitserverService_ReadFileServerSetTrailerFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitserverService_ReadFileServerSetTrailerFuncCall) Results() []interface{} {
	return []interface{}{}
}
