// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package gitserver

import (
	"context"
	"io"
	"net/http"
	"net/url"
	"sync"
	"time"

	api "github.com/sourcegraph/sourcegraph/internal/api"
	gitolite "github.com/sourcegraph/sourcegraph/internal/extsvc/gitolite"
	gitdomain "github.com/sourcegraph/sourcegraph/internal/gitserver/gitdomain"
	protocol "github.com/sourcegraph/sourcegraph/internal/gitserver/protocol"
)

// MockClient is a mock implementation of the Client interface (from the
// package github.com/sourcegraph/sourcegraph/internal/gitserver) used for
// unit testing.
type MockClient struct {
	// AddrForRepoFunc is an instance of a mock function object controlling
	// the behavior of the method AddrForRepo.
	AddrForRepoFunc *ClientAddrForRepoFunc
	// AddrsFunc is an instance of a mock function object controlling the
	// behavior of the method Addrs.
	AddrsFunc *ClientAddrsFunc
	// ArchiveFunc is an instance of a mock function object controlling the
	// behavior of the method Archive.
	ArchiveFunc *ClientArchiveFunc
	// ArchiveURLFunc is an instance of a mock function object controlling
	// the behavior of the method ArchiveURL.
	ArchiveURLFunc *ClientArchiveURLFunc
	// CommandFunc is an instance of a mock function object controlling the
	// behavior of the method Command.
	CommandFunc *ClientCommandFunc
	// CreateCommitFromPatchFunc is an instance of a mock function object
	// controlling the behavior of the method CreateCommitFromPatch.
	CreateCommitFromPatchFunc *ClientCreateCommitFromPatchFunc
	// GetGitolitePhabricatorMetadataFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetGitolitePhabricatorMetadata.
	GetGitolitePhabricatorMetadataFunc *ClientGetGitolitePhabricatorMetadataFunc
	// GetObjectFunc is an instance of a mock function object controlling
	// the behavior of the method GetObject.
	GetObjectFunc *ClientGetObjectFunc
	// IsRepoCloneableFunc is an instance of a mock function object
	// controlling the behavior of the method IsRepoCloneable.
	IsRepoCloneableFunc *ClientIsRepoCloneableFunc
	// IsRepoClonedFunc is an instance of a mock function object controlling
	// the behavior of the method IsRepoCloned.
	IsRepoClonedFunc *ClientIsRepoClonedFunc
	// ListClonedFunc is an instance of a mock function object controlling
	// the behavior of the method ListCloned.
	ListClonedFunc *ClientListClonedFunc
	// ListGitoliteFunc is an instance of a mock function object controlling
	// the behavior of the method ListGitolite.
	ListGitoliteFunc *ClientListGitoliteFunc
	// P4ExecFunc is an instance of a mock function object controlling the
	// behavior of the method P4Exec.
	P4ExecFunc *ClientP4ExecFunc
	// RemoveFunc is an instance of a mock function object controlling the
	// behavior of the method Remove.
	RemoveFunc *ClientRemoveFunc
	// RendezvousAddrForRepoFunc is an instance of a mock function object
	// controlling the behavior of the method RendezvousAddrForRepo.
	RendezvousAddrForRepoFunc *ClientRendezvousAddrForRepoFunc
	// RepoCloneProgressFunc is an instance of a mock function object
	// controlling the behavior of the method RepoCloneProgress.
	RepoCloneProgressFunc *ClientRepoCloneProgressFunc
	// RepoInfoFunc is an instance of a mock function object controlling the
	// behavior of the method RepoInfo.
	RepoInfoFunc *ClientRepoInfoFunc
	// ReposStatsFunc is an instance of a mock function object controlling
	// the behavior of the method ReposStats.
	ReposStatsFunc *ClientReposStatsFunc
	// RequestRepoMigrateFunc is an instance of a mock function object
	// controlling the behavior of the method RequestRepoMigrate.
	RequestRepoMigrateFunc *ClientRequestRepoMigrateFunc
	// RequestRepoUpdateFunc is an instance of a mock function object
	// controlling the behavior of the method RequestRepoUpdate.
	RequestRepoUpdateFunc *ClientRequestRepoUpdateFunc
	// SearchFunc is an instance of a mock function object controlling the
	// behavior of the method Search.
	SearchFunc *ClientSearchFunc
}

// NewMockClient creates a new mock of the Client interface. All methods
// return zero values for all results, unless overwritten.
func NewMockClient() *MockClient {
	return &MockClient{
		AddrForRepoFunc: &ClientAddrForRepoFunc{
			defaultHook: func(api.RepoName) string {
				return ""
			},
		},
		AddrsFunc: &ClientAddrsFunc{
			defaultHook: func() []string {
				return nil
			},
		},
		ArchiveFunc: &ClientArchiveFunc{
			defaultHook: func(context.Context, api.RepoName, ArchiveOptions) (io.ReadCloser, error) {
				return nil, nil
			},
		},
		ArchiveURLFunc: &ClientArchiveURLFunc{
			defaultHook: func(api.RepoName, ArchiveOptions) *url.URL {
				return nil
			},
		},
		CommandFunc: &ClientCommandFunc{
			defaultHook: func(string, ...string) *Cmd {
				return nil
			},
		},
		CreateCommitFromPatchFunc: &ClientCreateCommitFromPatchFunc{
			defaultHook: func(context.Context, protocol.CreateCommitFromPatchRequest) (string, error) {
				return "", nil
			},
		},
		GetGitolitePhabricatorMetadataFunc: &ClientGetGitolitePhabricatorMetadataFunc{
			defaultHook: func(context.Context, string, api.RepoName) (*protocol.GitolitePhabricatorMetadataResponse, error) {
				return nil, nil
			},
		},
		GetObjectFunc: &ClientGetObjectFunc{
			defaultHook: func(context.Context, api.RepoName, string) (*gitdomain.GitObject, error) {
				return nil, nil
			},
		},
		IsRepoCloneableFunc: &ClientIsRepoCloneableFunc{
			defaultHook: func(context.Context, api.RepoName) error {
				return nil
			},
		},
		IsRepoClonedFunc: &ClientIsRepoClonedFunc{
			defaultHook: func(context.Context, api.RepoName) (bool, error) {
				return false, nil
			},
		},
		ListClonedFunc: &ClientListClonedFunc{
			defaultHook: func(context.Context) ([]string, error) {
				return nil, nil
			},
		},
		ListGitoliteFunc: &ClientListGitoliteFunc{
			defaultHook: func(context.Context, string) ([]*gitolite.Repo, error) {
				return nil, nil
			},
		},
		P4ExecFunc: &ClientP4ExecFunc{
			defaultHook: func(context.Context, string, string, string, ...string) (io.ReadCloser, http.Header, error) {
				return nil, nil, nil
			},
		},
		RemoveFunc: &ClientRemoveFunc{
			defaultHook: func(context.Context, api.RepoName) error {
				return nil
			},
		},
		RendezvousAddrForRepoFunc: &ClientRendezvousAddrForRepoFunc{
			defaultHook: func(api.RepoName) string {
				return ""
			},
		},
		RepoCloneProgressFunc: &ClientRepoCloneProgressFunc{
			defaultHook: func(context.Context, ...api.RepoName) (*protocol.RepoCloneProgressResponse, error) {
				return nil, nil
			},
		},
		RepoInfoFunc: &ClientRepoInfoFunc{
			defaultHook: func(context.Context, ...api.RepoName) (*protocol.RepoInfoResponse, error) {
				return nil, nil
			},
		},
		ReposStatsFunc: &ClientReposStatsFunc{
			defaultHook: func(context.Context) (map[string]*protocol.ReposStats, error) {
				return nil, nil
			},
		},
		RequestRepoMigrateFunc: &ClientRequestRepoMigrateFunc{
			defaultHook: func(context.Context, api.RepoName) (*protocol.RepoUpdateResponse, error) {
				return nil, nil
			},
		},
		RequestRepoUpdateFunc: &ClientRequestRepoUpdateFunc{
			defaultHook: func(context.Context, api.RepoName, time.Duration) (*protocol.RepoUpdateResponse, error) {
				return nil, nil
			},
		},
		SearchFunc: &ClientSearchFunc{
			defaultHook: func(context.Context, *protocol.SearchRequest, func([]protocol.CommitMatch)) (bool, error) {
				return false, nil
			},
		},
	}
}

// NewStrictMockClient creates a new mock of the Client interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockClient() *MockClient {
	return &MockClient{
		AddrForRepoFunc: &ClientAddrForRepoFunc{
			defaultHook: func(api.RepoName) string {
				panic("unexpected invocation of MockClient.AddrForRepo")
			},
		},
		AddrsFunc: &ClientAddrsFunc{
			defaultHook: func() []string {
				panic("unexpected invocation of MockClient.Addrs")
			},
		},
		ArchiveFunc: &ClientArchiveFunc{
			defaultHook: func(context.Context, api.RepoName, ArchiveOptions) (io.ReadCloser, error) {
				panic("unexpected invocation of MockClient.Archive")
			},
		},
		ArchiveURLFunc: &ClientArchiveURLFunc{
			defaultHook: func(api.RepoName, ArchiveOptions) *url.URL {
				panic("unexpected invocation of MockClient.ArchiveURL")
			},
		},
		CommandFunc: &ClientCommandFunc{
			defaultHook: func(string, ...string) *Cmd {
				panic("unexpected invocation of MockClient.Command")
			},
		},
		CreateCommitFromPatchFunc: &ClientCreateCommitFromPatchFunc{
			defaultHook: func(context.Context, protocol.CreateCommitFromPatchRequest) (string, error) {
				panic("unexpected invocation of MockClient.CreateCommitFromPatch")
			},
		},
		GetGitolitePhabricatorMetadataFunc: &ClientGetGitolitePhabricatorMetadataFunc{
			defaultHook: func(context.Context, string, api.RepoName) (*protocol.GitolitePhabricatorMetadataResponse, error) {
				panic("unexpected invocation of MockClient.GetGitolitePhabricatorMetadata")
			},
		},
		GetObjectFunc: &ClientGetObjectFunc{
			defaultHook: func(context.Context, api.RepoName, string) (*gitdomain.GitObject, error) {
				panic("unexpected invocation of MockClient.GetObject")
			},
		},
		IsRepoCloneableFunc: &ClientIsRepoCloneableFunc{
			defaultHook: func(context.Context, api.RepoName) error {
				panic("unexpected invocation of MockClient.IsRepoCloneable")
			},
		},
		IsRepoClonedFunc: &ClientIsRepoClonedFunc{
			defaultHook: func(context.Context, api.RepoName) (bool, error) {
				panic("unexpected invocation of MockClient.IsRepoCloned")
			},
		},
		ListClonedFunc: &ClientListClonedFunc{
			defaultHook: func(context.Context) ([]string, error) {
				panic("unexpected invocation of MockClient.ListCloned")
			},
		},
		ListGitoliteFunc: &ClientListGitoliteFunc{
			defaultHook: func(context.Context, string) ([]*gitolite.Repo, error) {
				panic("unexpected invocation of MockClient.ListGitolite")
			},
		},
		P4ExecFunc: &ClientP4ExecFunc{
			defaultHook: func(context.Context, string, string, string, ...string) (io.ReadCloser, http.Header, error) {
				panic("unexpected invocation of MockClient.P4Exec")
			},
		},
		RemoveFunc: &ClientRemoveFunc{
			defaultHook: func(context.Context, api.RepoName) error {
				panic("unexpected invocation of MockClient.Remove")
			},
		},
		RendezvousAddrForRepoFunc: &ClientRendezvousAddrForRepoFunc{
			defaultHook: func(api.RepoName) string {
				panic("unexpected invocation of MockClient.RendezvousAddrForRepo")
			},
		},
		RepoCloneProgressFunc: &ClientRepoCloneProgressFunc{
			defaultHook: func(context.Context, ...api.RepoName) (*protocol.RepoCloneProgressResponse, error) {
				panic("unexpected invocation of MockClient.RepoCloneProgress")
			},
		},
		RepoInfoFunc: &ClientRepoInfoFunc{
			defaultHook: func(context.Context, ...api.RepoName) (*protocol.RepoInfoResponse, error) {
				panic("unexpected invocation of MockClient.RepoInfo")
			},
		},
		ReposStatsFunc: &ClientReposStatsFunc{
			defaultHook: func(context.Context) (map[string]*protocol.ReposStats, error) {
				panic("unexpected invocation of MockClient.ReposStats")
			},
		},
		RequestRepoMigrateFunc: &ClientRequestRepoMigrateFunc{
			defaultHook: func(context.Context, api.RepoName) (*protocol.RepoUpdateResponse, error) {
				panic("unexpected invocation of MockClient.RequestRepoMigrate")
			},
		},
		RequestRepoUpdateFunc: &ClientRequestRepoUpdateFunc{
			defaultHook: func(context.Context, api.RepoName, time.Duration) (*protocol.RepoUpdateResponse, error) {
				panic("unexpected invocation of MockClient.RequestRepoUpdate")
			},
		},
		SearchFunc: &ClientSearchFunc{
			defaultHook: func(context.Context, *protocol.SearchRequest, func([]protocol.CommitMatch)) (bool, error) {
				panic("unexpected invocation of MockClient.Search")
			},
		},
	}
}

// NewMockClientFrom creates a new mock of the MockClient interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockClientFrom(i Client) *MockClient {
	return &MockClient{
		AddrForRepoFunc: &ClientAddrForRepoFunc{
			defaultHook: i.AddrForRepo,
		},
		AddrsFunc: &ClientAddrsFunc{
			defaultHook: i.Addrs,
		},
		ArchiveFunc: &ClientArchiveFunc{
			defaultHook: i.Archive,
		},
		ArchiveURLFunc: &ClientArchiveURLFunc{
			defaultHook: i.ArchiveURL,
		},
		CommandFunc: &ClientCommandFunc{
			defaultHook: i.Command,
		},
		CreateCommitFromPatchFunc: &ClientCreateCommitFromPatchFunc{
			defaultHook: i.CreateCommitFromPatch,
		},
		GetGitolitePhabricatorMetadataFunc: &ClientGetGitolitePhabricatorMetadataFunc{
			defaultHook: i.GetGitolitePhabricatorMetadata,
		},
		GetObjectFunc: &ClientGetObjectFunc{
			defaultHook: i.GetObject,
		},
		IsRepoCloneableFunc: &ClientIsRepoCloneableFunc{
			defaultHook: i.IsRepoCloneable,
		},
		IsRepoClonedFunc: &ClientIsRepoClonedFunc{
			defaultHook: i.IsRepoCloned,
		},
		ListClonedFunc: &ClientListClonedFunc{
			defaultHook: i.ListCloned,
		},
		ListGitoliteFunc: &ClientListGitoliteFunc{
			defaultHook: i.ListGitolite,
		},
		P4ExecFunc: &ClientP4ExecFunc{
			defaultHook: i.P4Exec,
		},
		RemoveFunc: &ClientRemoveFunc{
			defaultHook: i.Remove,
		},
		RendezvousAddrForRepoFunc: &ClientRendezvousAddrForRepoFunc{
			defaultHook: i.RendezvousAddrForRepo,
		},
		RepoCloneProgressFunc: &ClientRepoCloneProgressFunc{
			defaultHook: i.RepoCloneProgress,
		},
		RepoInfoFunc: &ClientRepoInfoFunc{
			defaultHook: i.RepoInfo,
		},
		ReposStatsFunc: &ClientReposStatsFunc{
			defaultHook: i.ReposStats,
		},
		RequestRepoMigrateFunc: &ClientRequestRepoMigrateFunc{
			defaultHook: i.RequestRepoMigrate,
		},
		RequestRepoUpdateFunc: &ClientRequestRepoUpdateFunc{
			defaultHook: i.RequestRepoUpdate,
		},
		SearchFunc: &ClientSearchFunc{
			defaultHook: i.Search,
		},
	}
}

// ClientAddrForRepoFunc describes the behavior when the AddrForRepo method
// of the parent MockClient instance is invoked.
type ClientAddrForRepoFunc struct {
	defaultHook func(api.RepoName) string
	hooks       []func(api.RepoName) string
	history     []ClientAddrForRepoFuncCall
	mutex       sync.Mutex
}

// AddrForRepo delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) AddrForRepo(v0 api.RepoName) string {
	r0 := m.AddrForRepoFunc.nextHook()(v0)
	m.AddrForRepoFunc.appendCall(ClientAddrForRepoFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the AddrForRepo method
// of the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientAddrForRepoFunc) SetDefaultHook(hook func(api.RepoName) string) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AddrForRepo method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientAddrForRepoFunc) PushHook(hook func(api.RepoName) string) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ClientAddrForRepoFunc) SetDefaultReturn(r0 string) {
	f.SetDefaultHook(func(api.RepoName) string {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ClientAddrForRepoFunc) PushReturn(r0 string) {
	f.PushHook(func(api.RepoName) string {
		return r0
	})
}

func (f *ClientAddrForRepoFunc) nextHook() func(api.RepoName) string {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientAddrForRepoFunc) appendCall(r0 ClientAddrForRepoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientAddrForRepoFuncCall objects
// describing the invocations of this function.
func (f *ClientAddrForRepoFunc) History() []ClientAddrForRepoFuncCall {
	f.mutex.Lock()
	history := make([]ClientAddrForRepoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientAddrForRepoFuncCall is an object that describes an invocation of
// method AddrForRepo on an instance of MockClient.
type ClientAddrForRepoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientAddrForRepoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientAddrForRepoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientAddrsFunc describes the behavior when the Addrs method of the
// parent MockClient instance is invoked.
type ClientAddrsFunc struct {
	defaultHook func() []string
	hooks       []func() []string
	history     []ClientAddrsFuncCall
	mutex       sync.Mutex
}

// Addrs delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) Addrs() []string {
	r0 := m.AddrsFunc.nextHook()()
	m.AddrsFunc.appendCall(ClientAddrsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Addrs method of the
// parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientAddrsFunc) SetDefaultHook(hook func() []string) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Addrs method of the parent MockClient instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientAddrsFunc) PushHook(hook func() []string) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ClientAddrsFunc) SetDefaultReturn(r0 []string) {
	f.SetDefaultHook(func() []string {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ClientAddrsFunc) PushReturn(r0 []string) {
	f.PushHook(func() []string {
		return r0
	})
}

func (f *ClientAddrsFunc) nextHook() func() []string {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientAddrsFunc) appendCall(r0 ClientAddrsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientAddrsFuncCall objects describing the
// invocations of this function.
func (f *ClientAddrsFunc) History() []ClientAddrsFuncCall {
	f.mutex.Lock()
	history := make([]ClientAddrsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientAddrsFuncCall is an object that describes an invocation of method
// Addrs on an instance of MockClient.
type ClientAddrsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientAddrsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientAddrsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientArchiveFunc describes the behavior when the Archive method of the
// parent MockClient instance is invoked.
type ClientArchiveFunc struct {
	defaultHook func(context.Context, api.RepoName, ArchiveOptions) (io.ReadCloser, error)
	hooks       []func(context.Context, api.RepoName, ArchiveOptions) (io.ReadCloser, error)
	history     []ClientArchiveFuncCall
	mutex       sync.Mutex
}

// Archive delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) Archive(v0 context.Context, v1 api.RepoName, v2 ArchiveOptions) (io.ReadCloser, error) {
	r0, r1 := m.ArchiveFunc.nextHook()(v0, v1, v2)
	m.ArchiveFunc.appendCall(ClientArchiveFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Archive method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientArchiveFunc) SetDefaultHook(hook func(context.Context, api.RepoName, ArchiveOptions) (io.ReadCloser, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Archive method of the parent MockClient instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientArchiveFunc) PushHook(hook func(context.Context, api.RepoName, ArchiveOptions) (io.ReadCloser, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ClientArchiveFunc) SetDefaultReturn(r0 io.ReadCloser, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, ArchiveOptions) (io.ReadCloser, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ClientArchiveFunc) PushReturn(r0 io.ReadCloser, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, ArchiveOptions) (io.ReadCloser, error) {
		return r0, r1
	})
}

func (f *ClientArchiveFunc) nextHook() func(context.Context, api.RepoName, ArchiveOptions) (io.ReadCloser, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientArchiveFunc) appendCall(r0 ClientArchiveFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientArchiveFuncCall objects describing
// the invocations of this function.
func (f *ClientArchiveFunc) History() []ClientArchiveFuncCall {
	f.mutex.Lock()
	history := make([]ClientArchiveFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientArchiveFuncCall is an object that describes an invocation of method
// Archive on an instance of MockClient.
type ClientArchiveFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 ArchiveOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 io.ReadCloser
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientArchiveFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientArchiveFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientArchiveURLFunc describes the behavior when the ArchiveURL method of
// the parent MockClient instance is invoked.
type ClientArchiveURLFunc struct {
	defaultHook func(api.RepoName, ArchiveOptions) *url.URL
	hooks       []func(api.RepoName, ArchiveOptions) *url.URL
	history     []ClientArchiveURLFuncCall
	mutex       sync.Mutex
}

// ArchiveURL delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) ArchiveURL(v0 api.RepoName, v1 ArchiveOptions) *url.URL {
	r0 := m.ArchiveURLFunc.nextHook()(v0, v1)
	m.ArchiveURLFunc.appendCall(ClientArchiveURLFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the ArchiveURL method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientArchiveURLFunc) SetDefaultHook(hook func(api.RepoName, ArchiveOptions) *url.URL) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ArchiveURL method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientArchiveURLFunc) PushHook(hook func(api.RepoName, ArchiveOptions) *url.URL) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ClientArchiveURLFunc) SetDefaultReturn(r0 *url.URL) {
	f.SetDefaultHook(func(api.RepoName, ArchiveOptions) *url.URL {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ClientArchiveURLFunc) PushReturn(r0 *url.URL) {
	f.PushHook(func(api.RepoName, ArchiveOptions) *url.URL {
		return r0
	})
}

func (f *ClientArchiveURLFunc) nextHook() func(api.RepoName, ArchiveOptions) *url.URL {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientArchiveURLFunc) appendCall(r0 ClientArchiveURLFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientArchiveURLFuncCall objects describing
// the invocations of this function.
func (f *ClientArchiveURLFunc) History() []ClientArchiveURLFuncCall {
	f.mutex.Lock()
	history := make([]ClientArchiveURLFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientArchiveURLFuncCall is an object that describes an invocation of
// method ArchiveURL on an instance of MockClient.
type ClientArchiveURLFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 api.RepoName
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ArchiveOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *url.URL
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientArchiveURLFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientArchiveURLFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientCommandFunc describes the behavior when the Command method of the
// parent MockClient instance is invoked.
type ClientCommandFunc struct {
	defaultHook func(string, ...string) *Cmd
	hooks       []func(string, ...string) *Cmd
	history     []ClientCommandFuncCall
	mutex       sync.Mutex
}

// Command delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) Command(v0 string, v1 ...string) *Cmd {
	r0 := m.CommandFunc.nextHook()(v0, v1...)
	m.CommandFunc.appendCall(ClientCommandFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Command method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientCommandFunc) SetDefaultHook(hook func(string, ...string) *Cmd) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Command method of the parent MockClient instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientCommandFunc) PushHook(hook func(string, ...string) *Cmd) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ClientCommandFunc) SetDefaultReturn(r0 *Cmd) {
	f.SetDefaultHook(func(string, ...string) *Cmd {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ClientCommandFunc) PushReturn(r0 *Cmd) {
	f.PushHook(func(string, ...string) *Cmd {
		return r0
	})
}

func (f *ClientCommandFunc) nextHook() func(string, ...string) *Cmd {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientCommandFunc) appendCall(r0 ClientCommandFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientCommandFuncCall objects describing
// the invocations of this function.
func (f *ClientCommandFunc) History() []ClientCommandFuncCall {
	f.mutex.Lock()
	history := make([]ClientCommandFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientCommandFuncCall is an object that describes an invocation of method
// Command on an instance of MockClient.
type ClientCommandFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *Cmd
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c ClientCommandFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientCommandFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientCreateCommitFromPatchFunc describes the behavior when the
// CreateCommitFromPatch method of the parent MockClient instance is
// invoked.
type ClientCreateCommitFromPatchFunc struct {
	defaultHook func(context.Context, protocol.CreateCommitFromPatchRequest) (string, error)
	hooks       []func(context.Context, protocol.CreateCommitFromPatchRequest) (string, error)
	history     []ClientCreateCommitFromPatchFuncCall
	mutex       sync.Mutex
}

// CreateCommitFromPatch delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockClient) CreateCommitFromPatch(v0 context.Context, v1 protocol.CreateCommitFromPatchRequest) (string, error) {
	r0, r1 := m.CreateCommitFromPatchFunc.nextHook()(v0, v1)
	m.CreateCommitFromPatchFunc.appendCall(ClientCreateCommitFromPatchFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CreateCommitFromPatch method of the parent MockClient instance is invoked
// and the hook queue is empty.
func (f *ClientCreateCommitFromPatchFunc) SetDefaultHook(hook func(context.Context, protocol.CreateCommitFromPatchRequest) (string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateCommitFromPatch method of the parent MockClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ClientCreateCommitFromPatchFunc) PushHook(hook func(context.Context, protocol.CreateCommitFromPatchRequest) (string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ClientCreateCommitFromPatchFunc) SetDefaultReturn(r0 string, r1 error) {
	f.SetDefaultHook(func(context.Context, protocol.CreateCommitFromPatchRequest) (string, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ClientCreateCommitFromPatchFunc) PushReturn(r0 string, r1 error) {
	f.PushHook(func(context.Context, protocol.CreateCommitFromPatchRequest) (string, error) {
		return r0, r1
	})
}

func (f *ClientCreateCommitFromPatchFunc) nextHook() func(context.Context, protocol.CreateCommitFromPatchRequest) (string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientCreateCommitFromPatchFunc) appendCall(r0 ClientCreateCommitFromPatchFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientCreateCommitFromPatchFuncCall objects
// describing the invocations of this function.
func (f *ClientCreateCommitFromPatchFunc) History() []ClientCreateCommitFromPatchFuncCall {
	f.mutex.Lock()
	history := make([]ClientCreateCommitFromPatchFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientCreateCommitFromPatchFuncCall is an object that describes an
// invocation of method CreateCommitFromPatch on an instance of MockClient.
type ClientCreateCommitFromPatchFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 protocol.CreateCommitFromPatchRequest
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientCreateCommitFromPatchFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientCreateCommitFromPatchFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientGetGitolitePhabricatorMetadataFunc describes the behavior when the
// GetGitolitePhabricatorMetadata method of the parent MockClient instance
// is invoked.
type ClientGetGitolitePhabricatorMetadataFunc struct {
	defaultHook func(context.Context, string, api.RepoName) (*protocol.GitolitePhabricatorMetadataResponse, error)
	hooks       []func(context.Context, string, api.RepoName) (*protocol.GitolitePhabricatorMetadataResponse, error)
	history     []ClientGetGitolitePhabricatorMetadataFuncCall
	mutex       sync.Mutex
}

// GetGitolitePhabricatorMetadata delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockClient) GetGitolitePhabricatorMetadata(v0 context.Context, v1 string, v2 api.RepoName) (*protocol.GitolitePhabricatorMetadataResponse, error) {
	r0, r1 := m.GetGitolitePhabricatorMetadataFunc.nextHook()(v0, v1, v2)
	m.GetGitolitePhabricatorMetadataFunc.appendCall(ClientGetGitolitePhabricatorMetadataFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetGitolitePhabricatorMetadata method of the parent MockClient instance
// is invoked and the hook queue is empty.
func (f *ClientGetGitolitePhabricatorMetadataFunc) SetDefaultHook(hook func(context.Context, string, api.RepoName) (*protocol.GitolitePhabricatorMetadataResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetGitolitePhabricatorMetadata method of the parent MockClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ClientGetGitolitePhabricatorMetadataFunc) PushHook(hook func(context.Context, string, api.RepoName) (*protocol.GitolitePhabricatorMetadataResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ClientGetGitolitePhabricatorMetadataFunc) SetDefaultReturn(r0 *protocol.GitolitePhabricatorMetadataResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, string, api.RepoName) (*protocol.GitolitePhabricatorMetadataResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ClientGetGitolitePhabricatorMetadataFunc) PushReturn(r0 *protocol.GitolitePhabricatorMetadataResponse, r1 error) {
	f.PushHook(func(context.Context, string, api.RepoName) (*protocol.GitolitePhabricatorMetadataResponse, error) {
		return r0, r1
	})
}

func (f *ClientGetGitolitePhabricatorMetadataFunc) nextHook() func(context.Context, string, api.RepoName) (*protocol.GitolitePhabricatorMetadataResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetGitolitePhabricatorMetadataFunc) appendCall(r0 ClientGetGitolitePhabricatorMetadataFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ClientGetGitolitePhabricatorMetadataFuncCall objects describing the
// invocations of this function.
func (f *ClientGetGitolitePhabricatorMetadataFunc) History() []ClientGetGitolitePhabricatorMetadataFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetGitolitePhabricatorMetadataFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetGitolitePhabricatorMetadataFuncCall is an object that describes
// an invocation of method GetGitolitePhabricatorMetadata on an instance of
// MockClient.
type ClientGetGitolitePhabricatorMetadataFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *protocol.GitolitePhabricatorMetadataResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetGitolitePhabricatorMetadataFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetGitolitePhabricatorMetadataFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientGetObjectFunc describes the behavior when the GetObject method of
// the parent MockClient instance is invoked.
type ClientGetObjectFunc struct {
	defaultHook func(context.Context, api.RepoName, string) (*gitdomain.GitObject, error)
	hooks       []func(context.Context, api.RepoName, string) (*gitdomain.GitObject, error)
	history     []ClientGetObjectFuncCall
	mutex       sync.Mutex
}

// GetObject delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) GetObject(v0 context.Context, v1 api.RepoName, v2 string) (*gitdomain.GitObject, error) {
	r0, r1 := m.GetObjectFunc.nextHook()(v0, v1, v2)
	m.GetObjectFunc.appendCall(ClientGetObjectFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetObject method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientGetObjectFunc) SetDefaultHook(hook func(context.Context, api.RepoName, string) (*gitdomain.GitObject, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetObject method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientGetObjectFunc) PushHook(hook func(context.Context, api.RepoName, string) (*gitdomain.GitObject, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ClientGetObjectFunc) SetDefaultReturn(r0 *gitdomain.GitObject, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, string) (*gitdomain.GitObject, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ClientGetObjectFunc) PushReturn(r0 *gitdomain.GitObject, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, string) (*gitdomain.GitObject, error) {
		return r0, r1
	})
}

func (f *ClientGetObjectFunc) nextHook() func(context.Context, api.RepoName, string) (*gitdomain.GitObject, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientGetObjectFunc) appendCall(r0 ClientGetObjectFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientGetObjectFuncCall objects describing
// the invocations of this function.
func (f *ClientGetObjectFunc) History() []ClientGetObjectFuncCall {
	f.mutex.Lock()
	history := make([]ClientGetObjectFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientGetObjectFuncCall is an object that describes an invocation of
// method GetObject on an instance of MockClient.
type ClientGetObjectFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *gitdomain.GitObject
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientGetObjectFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientGetObjectFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientIsRepoCloneableFunc describes the behavior when the IsRepoCloneable
// method of the parent MockClient instance is invoked.
type ClientIsRepoCloneableFunc struct {
	defaultHook func(context.Context, api.RepoName) error
	hooks       []func(context.Context, api.RepoName) error
	history     []ClientIsRepoCloneableFuncCall
	mutex       sync.Mutex
}

// IsRepoCloneable delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) IsRepoCloneable(v0 context.Context, v1 api.RepoName) error {
	r0 := m.IsRepoCloneableFunc.nextHook()(v0, v1)
	m.IsRepoCloneableFunc.appendCall(ClientIsRepoCloneableFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the IsRepoCloneable
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientIsRepoCloneableFunc) SetDefaultHook(hook func(context.Context, api.RepoName) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsRepoCloneable method of the parent MockClient instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientIsRepoCloneableFunc) PushHook(hook func(context.Context, api.RepoName) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ClientIsRepoCloneableFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ClientIsRepoCloneableFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, api.RepoName) error {
		return r0
	})
}

func (f *ClientIsRepoCloneableFunc) nextHook() func(context.Context, api.RepoName) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientIsRepoCloneableFunc) appendCall(r0 ClientIsRepoCloneableFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientIsRepoCloneableFuncCall objects
// describing the invocations of this function.
func (f *ClientIsRepoCloneableFunc) History() []ClientIsRepoCloneableFuncCall {
	f.mutex.Lock()
	history := make([]ClientIsRepoCloneableFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientIsRepoCloneableFuncCall is an object that describes an invocation
// of method IsRepoCloneable on an instance of MockClient.
type ClientIsRepoCloneableFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientIsRepoCloneableFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientIsRepoCloneableFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientIsRepoClonedFunc describes the behavior when the IsRepoCloned
// method of the parent MockClient instance is invoked.
type ClientIsRepoClonedFunc struct {
	defaultHook func(context.Context, api.RepoName) (bool, error)
	hooks       []func(context.Context, api.RepoName) (bool, error)
	history     []ClientIsRepoClonedFuncCall
	mutex       sync.Mutex
}

// IsRepoCloned delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) IsRepoCloned(v0 context.Context, v1 api.RepoName) (bool, error) {
	r0, r1 := m.IsRepoClonedFunc.nextHook()(v0, v1)
	m.IsRepoClonedFunc.appendCall(ClientIsRepoClonedFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IsRepoCloned method
// of the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientIsRepoClonedFunc) SetDefaultHook(hook func(context.Context, api.RepoName) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsRepoCloned method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientIsRepoClonedFunc) PushHook(hook func(context.Context, api.RepoName) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ClientIsRepoClonedFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ClientIsRepoClonedFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, api.RepoName) (bool, error) {
		return r0, r1
	})
}

func (f *ClientIsRepoClonedFunc) nextHook() func(context.Context, api.RepoName) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientIsRepoClonedFunc) appendCall(r0 ClientIsRepoClonedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientIsRepoClonedFuncCall objects
// describing the invocations of this function.
func (f *ClientIsRepoClonedFunc) History() []ClientIsRepoClonedFuncCall {
	f.mutex.Lock()
	history := make([]ClientIsRepoClonedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientIsRepoClonedFuncCall is an object that describes an invocation of
// method IsRepoCloned on an instance of MockClient.
type ClientIsRepoClonedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientIsRepoClonedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientIsRepoClonedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientListClonedFunc describes the behavior when the ListCloned method of
// the parent MockClient instance is invoked.
type ClientListClonedFunc struct {
	defaultHook func(context.Context) ([]string, error)
	hooks       []func(context.Context) ([]string, error)
	history     []ClientListClonedFuncCall
	mutex       sync.Mutex
}

// ListCloned delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) ListCloned(v0 context.Context) ([]string, error) {
	r0, r1 := m.ListClonedFunc.nextHook()(v0)
	m.ListClonedFunc.appendCall(ClientListClonedFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListCloned method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientListClonedFunc) SetDefaultHook(hook func(context.Context) ([]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListCloned method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientListClonedFunc) PushHook(hook func(context.Context) ([]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ClientListClonedFunc) SetDefaultReturn(r0 []string, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ClientListClonedFunc) PushReturn(r0 []string, r1 error) {
	f.PushHook(func(context.Context) ([]string, error) {
		return r0, r1
	})
}

func (f *ClientListClonedFunc) nextHook() func(context.Context) ([]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientListClonedFunc) appendCall(r0 ClientListClonedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientListClonedFuncCall objects describing
// the invocations of this function.
func (f *ClientListClonedFunc) History() []ClientListClonedFuncCall {
	f.mutex.Lock()
	history := make([]ClientListClonedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientListClonedFuncCall is an object that describes an invocation of
// method ListCloned on an instance of MockClient.
type ClientListClonedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientListClonedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientListClonedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientListGitoliteFunc describes the behavior when the ListGitolite
// method of the parent MockClient instance is invoked.
type ClientListGitoliteFunc struct {
	defaultHook func(context.Context, string) ([]*gitolite.Repo, error)
	hooks       []func(context.Context, string) ([]*gitolite.Repo, error)
	history     []ClientListGitoliteFuncCall
	mutex       sync.Mutex
}

// ListGitolite delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) ListGitolite(v0 context.Context, v1 string) ([]*gitolite.Repo, error) {
	r0, r1 := m.ListGitoliteFunc.nextHook()(v0, v1)
	m.ListGitoliteFunc.appendCall(ClientListGitoliteFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListGitolite method
// of the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientListGitoliteFunc) SetDefaultHook(hook func(context.Context, string) ([]*gitolite.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListGitolite method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientListGitoliteFunc) PushHook(hook func(context.Context, string) ([]*gitolite.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ClientListGitoliteFunc) SetDefaultReturn(r0 []*gitolite.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, string) ([]*gitolite.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ClientListGitoliteFunc) PushReturn(r0 []*gitolite.Repo, r1 error) {
	f.PushHook(func(context.Context, string) ([]*gitolite.Repo, error) {
		return r0, r1
	})
}

func (f *ClientListGitoliteFunc) nextHook() func(context.Context, string) ([]*gitolite.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientListGitoliteFunc) appendCall(r0 ClientListGitoliteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientListGitoliteFuncCall objects
// describing the invocations of this function.
func (f *ClientListGitoliteFunc) History() []ClientListGitoliteFuncCall {
	f.mutex.Lock()
	history := make([]ClientListGitoliteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientListGitoliteFuncCall is an object that describes an invocation of
// method ListGitolite on an instance of MockClient.
type ClientListGitoliteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*gitolite.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientListGitoliteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientListGitoliteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientP4ExecFunc describes the behavior when the P4Exec method of the
// parent MockClient instance is invoked.
type ClientP4ExecFunc struct {
	defaultHook func(context.Context, string, string, string, ...string) (io.ReadCloser, http.Header, error)
	hooks       []func(context.Context, string, string, string, ...string) (io.ReadCloser, http.Header, error)
	history     []ClientP4ExecFuncCall
	mutex       sync.Mutex
}

// P4Exec delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) P4Exec(v0 context.Context, v1 string, v2 string, v3 string, v4 ...string) (io.ReadCloser, http.Header, error) {
	r0, r1, r2 := m.P4ExecFunc.nextHook()(v0, v1, v2, v3, v4...)
	m.P4ExecFunc.appendCall(ClientP4ExecFuncCall{v0, v1, v2, v3, v4, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the P4Exec method of the
// parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientP4ExecFunc) SetDefaultHook(hook func(context.Context, string, string, string, ...string) (io.ReadCloser, http.Header, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// P4Exec method of the parent MockClient instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientP4ExecFunc) PushHook(hook func(context.Context, string, string, string, ...string) (io.ReadCloser, http.Header, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ClientP4ExecFunc) SetDefaultReturn(r0 io.ReadCloser, r1 http.Header, r2 error) {
	f.SetDefaultHook(func(context.Context, string, string, string, ...string) (io.ReadCloser, http.Header, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ClientP4ExecFunc) PushReturn(r0 io.ReadCloser, r1 http.Header, r2 error) {
	f.PushHook(func(context.Context, string, string, string, ...string) (io.ReadCloser, http.Header, error) {
		return r0, r1, r2
	})
}

func (f *ClientP4ExecFunc) nextHook() func(context.Context, string, string, string, ...string) (io.ReadCloser, http.Header, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientP4ExecFunc) appendCall(r0 ClientP4ExecFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientP4ExecFuncCall objects describing the
// invocations of this function.
func (f *ClientP4ExecFunc) History() []ClientP4ExecFuncCall {
	f.mutex.Lock()
	history := make([]ClientP4ExecFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientP4ExecFuncCall is an object that describes an invocation of method
// P4Exec on an instance of MockClient.
type ClientP4ExecFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg4 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 io.ReadCloser
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 http.Header
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c ClientP4ExecFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg4 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientP4ExecFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ClientRemoveFunc describes the behavior when the Remove method of the
// parent MockClient instance is invoked.
type ClientRemoveFunc struct {
	defaultHook func(context.Context, api.RepoName) error
	hooks       []func(context.Context, api.RepoName) error
	history     []ClientRemoveFuncCall
	mutex       sync.Mutex
}

// Remove delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) Remove(v0 context.Context, v1 api.RepoName) error {
	r0 := m.RemoveFunc.nextHook()(v0, v1)
	m.RemoveFunc.appendCall(ClientRemoveFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Remove method of the
// parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientRemoveFunc) SetDefaultHook(hook func(context.Context, api.RepoName) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Remove method of the parent MockClient instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientRemoveFunc) PushHook(hook func(context.Context, api.RepoName) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ClientRemoveFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ClientRemoveFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, api.RepoName) error {
		return r0
	})
}

func (f *ClientRemoveFunc) nextHook() func(context.Context, api.RepoName) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientRemoveFunc) appendCall(r0 ClientRemoveFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientRemoveFuncCall objects describing the
// invocations of this function.
func (f *ClientRemoveFunc) History() []ClientRemoveFuncCall {
	f.mutex.Lock()
	history := make([]ClientRemoveFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientRemoveFuncCall is an object that describes an invocation of method
// Remove on an instance of MockClient.
type ClientRemoveFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientRemoveFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientRemoveFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientRendezvousAddrForRepoFunc describes the behavior when the
// RendezvousAddrForRepo method of the parent MockClient instance is
// invoked.
type ClientRendezvousAddrForRepoFunc struct {
	defaultHook func(api.RepoName) string
	hooks       []func(api.RepoName) string
	history     []ClientRendezvousAddrForRepoFuncCall
	mutex       sync.Mutex
}

// RendezvousAddrForRepo delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockClient) RendezvousAddrForRepo(v0 api.RepoName) string {
	r0 := m.RendezvousAddrForRepoFunc.nextHook()(v0)
	m.RendezvousAddrForRepoFunc.appendCall(ClientRendezvousAddrForRepoFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// RendezvousAddrForRepo method of the parent MockClient instance is invoked
// and the hook queue is empty.
func (f *ClientRendezvousAddrForRepoFunc) SetDefaultHook(hook func(api.RepoName) string) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RendezvousAddrForRepo method of the parent MockClient instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ClientRendezvousAddrForRepoFunc) PushHook(hook func(api.RepoName) string) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ClientRendezvousAddrForRepoFunc) SetDefaultReturn(r0 string) {
	f.SetDefaultHook(func(api.RepoName) string {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ClientRendezvousAddrForRepoFunc) PushReturn(r0 string) {
	f.PushHook(func(api.RepoName) string {
		return r0
	})
}

func (f *ClientRendezvousAddrForRepoFunc) nextHook() func(api.RepoName) string {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientRendezvousAddrForRepoFunc) appendCall(r0 ClientRendezvousAddrForRepoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientRendezvousAddrForRepoFuncCall objects
// describing the invocations of this function.
func (f *ClientRendezvousAddrForRepoFunc) History() []ClientRendezvousAddrForRepoFuncCall {
	f.mutex.Lock()
	history := make([]ClientRendezvousAddrForRepoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientRendezvousAddrForRepoFuncCall is an object that describes an
// invocation of method RendezvousAddrForRepo on an instance of MockClient.
type ClientRendezvousAddrForRepoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientRendezvousAddrForRepoFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientRendezvousAddrForRepoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientRepoCloneProgressFunc describes the behavior when the
// RepoCloneProgress method of the parent MockClient instance is invoked.
type ClientRepoCloneProgressFunc struct {
	defaultHook func(context.Context, ...api.RepoName) (*protocol.RepoCloneProgressResponse, error)
	hooks       []func(context.Context, ...api.RepoName) (*protocol.RepoCloneProgressResponse, error)
	history     []ClientRepoCloneProgressFuncCall
	mutex       sync.Mutex
}

// RepoCloneProgress delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) RepoCloneProgress(v0 context.Context, v1 ...api.RepoName) (*protocol.RepoCloneProgressResponse, error) {
	r0, r1 := m.RepoCloneProgressFunc.nextHook()(v0, v1...)
	m.RepoCloneProgressFunc.appendCall(ClientRepoCloneProgressFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RepoCloneProgress
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientRepoCloneProgressFunc) SetDefaultHook(hook func(context.Context, ...api.RepoName) (*protocol.RepoCloneProgressResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepoCloneProgress method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientRepoCloneProgressFunc) PushHook(hook func(context.Context, ...api.RepoName) (*protocol.RepoCloneProgressResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ClientRepoCloneProgressFunc) SetDefaultReturn(r0 *protocol.RepoCloneProgressResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, ...api.RepoName) (*protocol.RepoCloneProgressResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ClientRepoCloneProgressFunc) PushReturn(r0 *protocol.RepoCloneProgressResponse, r1 error) {
	f.PushHook(func(context.Context, ...api.RepoName) (*protocol.RepoCloneProgressResponse, error) {
		return r0, r1
	})
}

func (f *ClientRepoCloneProgressFunc) nextHook() func(context.Context, ...api.RepoName) (*protocol.RepoCloneProgressResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientRepoCloneProgressFunc) appendCall(r0 ClientRepoCloneProgressFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientRepoCloneProgressFuncCall objects
// describing the invocations of this function.
func (f *ClientRepoCloneProgressFunc) History() []ClientRepoCloneProgressFuncCall {
	f.mutex.Lock()
	history := make([]ClientRepoCloneProgressFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientRepoCloneProgressFuncCall is an object that describes an invocation
// of method RepoCloneProgress on an instance of MockClient.
type ClientRepoCloneProgressFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *protocol.RepoCloneProgressResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c ClientRepoCloneProgressFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientRepoCloneProgressFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientRepoInfoFunc describes the behavior when the RepoInfo method of the
// parent MockClient instance is invoked.
type ClientRepoInfoFunc struct {
	defaultHook func(context.Context, ...api.RepoName) (*protocol.RepoInfoResponse, error)
	hooks       []func(context.Context, ...api.RepoName) (*protocol.RepoInfoResponse, error)
	history     []ClientRepoInfoFuncCall
	mutex       sync.Mutex
}

// RepoInfo delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) RepoInfo(v0 context.Context, v1 ...api.RepoName) (*protocol.RepoInfoResponse, error) {
	r0, r1 := m.RepoInfoFunc.nextHook()(v0, v1...)
	m.RepoInfoFunc.appendCall(ClientRepoInfoFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RepoInfo method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientRepoInfoFunc) SetDefaultHook(hook func(context.Context, ...api.RepoName) (*protocol.RepoInfoResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepoInfo method of the parent MockClient instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientRepoInfoFunc) PushHook(hook func(context.Context, ...api.RepoName) (*protocol.RepoInfoResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ClientRepoInfoFunc) SetDefaultReturn(r0 *protocol.RepoInfoResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, ...api.RepoName) (*protocol.RepoInfoResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ClientRepoInfoFunc) PushReturn(r0 *protocol.RepoInfoResponse, r1 error) {
	f.PushHook(func(context.Context, ...api.RepoName) (*protocol.RepoInfoResponse, error) {
		return r0, r1
	})
}

func (f *ClientRepoInfoFunc) nextHook() func(context.Context, ...api.RepoName) (*protocol.RepoInfoResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientRepoInfoFunc) appendCall(r0 ClientRepoInfoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientRepoInfoFuncCall objects describing
// the invocations of this function.
func (f *ClientRepoInfoFunc) History() []ClientRepoInfoFuncCall {
	f.mutex.Lock()
	history := make([]ClientRepoInfoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientRepoInfoFuncCall is an object that describes an invocation of
// method RepoInfo on an instance of MockClient.
type ClientRepoInfoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *protocol.RepoInfoResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c ClientRepoInfoFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientRepoInfoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientReposStatsFunc describes the behavior when the ReposStats method of
// the parent MockClient instance is invoked.
type ClientReposStatsFunc struct {
	defaultHook func(context.Context) (map[string]*protocol.ReposStats, error)
	hooks       []func(context.Context) (map[string]*protocol.ReposStats, error)
	history     []ClientReposStatsFuncCall
	mutex       sync.Mutex
}

// ReposStats delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) ReposStats(v0 context.Context) (map[string]*protocol.ReposStats, error) {
	r0, r1 := m.ReposStatsFunc.nextHook()(v0)
	m.ReposStatsFunc.appendCall(ClientReposStatsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ReposStats method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientReposStatsFunc) SetDefaultHook(hook func(context.Context) (map[string]*protocol.ReposStats, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReposStats method of the parent MockClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientReposStatsFunc) PushHook(hook func(context.Context) (map[string]*protocol.ReposStats, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ClientReposStatsFunc) SetDefaultReturn(r0 map[string]*protocol.ReposStats, r1 error) {
	f.SetDefaultHook(func(context.Context) (map[string]*protocol.ReposStats, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ClientReposStatsFunc) PushReturn(r0 map[string]*protocol.ReposStats, r1 error) {
	f.PushHook(func(context.Context) (map[string]*protocol.ReposStats, error) {
		return r0, r1
	})
}

func (f *ClientReposStatsFunc) nextHook() func(context.Context) (map[string]*protocol.ReposStats, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientReposStatsFunc) appendCall(r0 ClientReposStatsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientReposStatsFuncCall objects describing
// the invocations of this function.
func (f *ClientReposStatsFunc) History() []ClientReposStatsFuncCall {
	f.mutex.Lock()
	history := make([]ClientReposStatsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientReposStatsFuncCall is an object that describes an invocation of
// method ReposStats on an instance of MockClient.
type ClientReposStatsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[string]*protocol.ReposStats
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientReposStatsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientReposStatsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientRequestRepoMigrateFunc describes the behavior when the
// RequestRepoMigrate method of the parent MockClient instance is invoked.
type ClientRequestRepoMigrateFunc struct {
	defaultHook func(context.Context, api.RepoName) (*protocol.RepoUpdateResponse, error)
	hooks       []func(context.Context, api.RepoName) (*protocol.RepoUpdateResponse, error)
	history     []ClientRequestRepoMigrateFuncCall
	mutex       sync.Mutex
}

// RequestRepoMigrate delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) RequestRepoMigrate(v0 context.Context, v1 api.RepoName) (*protocol.RepoUpdateResponse, error) {
	r0, r1 := m.RequestRepoMigrateFunc.nextHook()(v0, v1)
	m.RequestRepoMigrateFunc.appendCall(ClientRequestRepoMigrateFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RequestRepoMigrate
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientRequestRepoMigrateFunc) SetDefaultHook(hook func(context.Context, api.RepoName) (*protocol.RepoUpdateResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RequestRepoMigrate method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientRequestRepoMigrateFunc) PushHook(hook func(context.Context, api.RepoName) (*protocol.RepoUpdateResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ClientRequestRepoMigrateFunc) SetDefaultReturn(r0 *protocol.RepoUpdateResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) (*protocol.RepoUpdateResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ClientRequestRepoMigrateFunc) PushReturn(r0 *protocol.RepoUpdateResponse, r1 error) {
	f.PushHook(func(context.Context, api.RepoName) (*protocol.RepoUpdateResponse, error) {
		return r0, r1
	})
}

func (f *ClientRequestRepoMigrateFunc) nextHook() func(context.Context, api.RepoName) (*protocol.RepoUpdateResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientRequestRepoMigrateFunc) appendCall(r0 ClientRequestRepoMigrateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientRequestRepoMigrateFuncCall objects
// describing the invocations of this function.
func (f *ClientRequestRepoMigrateFunc) History() []ClientRequestRepoMigrateFuncCall {
	f.mutex.Lock()
	history := make([]ClientRequestRepoMigrateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientRequestRepoMigrateFuncCall is an object that describes an
// invocation of method RequestRepoMigrate on an instance of MockClient.
type ClientRequestRepoMigrateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *protocol.RepoUpdateResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientRequestRepoMigrateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientRequestRepoMigrateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientRequestRepoUpdateFunc describes the behavior when the
// RequestRepoUpdate method of the parent MockClient instance is invoked.
type ClientRequestRepoUpdateFunc struct {
	defaultHook func(context.Context, api.RepoName, time.Duration) (*protocol.RepoUpdateResponse, error)
	hooks       []func(context.Context, api.RepoName, time.Duration) (*protocol.RepoUpdateResponse, error)
	history     []ClientRequestRepoUpdateFuncCall
	mutex       sync.Mutex
}

// RequestRepoUpdate delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockClient) RequestRepoUpdate(v0 context.Context, v1 api.RepoName, v2 time.Duration) (*protocol.RepoUpdateResponse, error) {
	r0, r1 := m.RequestRepoUpdateFunc.nextHook()(v0, v1, v2)
	m.RequestRepoUpdateFunc.appendCall(ClientRequestRepoUpdateFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RequestRepoUpdate
// method of the parent MockClient instance is invoked and the hook queue is
// empty.
func (f *ClientRequestRepoUpdateFunc) SetDefaultHook(hook func(context.Context, api.RepoName, time.Duration) (*protocol.RepoUpdateResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RequestRepoUpdate method of the parent MockClient instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ClientRequestRepoUpdateFunc) PushHook(hook func(context.Context, api.RepoName, time.Duration) (*protocol.RepoUpdateResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ClientRequestRepoUpdateFunc) SetDefaultReturn(r0 *protocol.RepoUpdateResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName, time.Duration) (*protocol.RepoUpdateResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ClientRequestRepoUpdateFunc) PushReturn(r0 *protocol.RepoUpdateResponse, r1 error) {
	f.PushHook(func(context.Context, api.RepoName, time.Duration) (*protocol.RepoUpdateResponse, error) {
		return r0, r1
	})
}

func (f *ClientRequestRepoUpdateFunc) nextHook() func(context.Context, api.RepoName, time.Duration) (*protocol.RepoUpdateResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientRequestRepoUpdateFunc) appendCall(r0 ClientRequestRepoUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientRequestRepoUpdateFuncCall objects
// describing the invocations of this function.
func (f *ClientRequestRepoUpdateFunc) History() []ClientRequestRepoUpdateFuncCall {
	f.mutex.Lock()
	history := make([]ClientRequestRepoUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientRequestRepoUpdateFuncCall is an object that describes an invocation
// of method RequestRepoUpdate on an instance of MockClient.
type ClientRequestRepoUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Duration
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *protocol.RepoUpdateResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientRequestRepoUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientRequestRepoUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientSearchFunc describes the behavior when the Search method of the
// parent MockClient instance is invoked.
type ClientSearchFunc struct {
	defaultHook func(context.Context, *protocol.SearchRequest, func([]protocol.CommitMatch)) (bool, error)
	hooks       []func(context.Context, *protocol.SearchRequest, func([]protocol.CommitMatch)) (bool, error)
	history     []ClientSearchFuncCall
	mutex       sync.Mutex
}

// Search delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) Search(v0 context.Context, v1 *protocol.SearchRequest, v2 func([]protocol.CommitMatch)) (bool, error) {
	r0, r1 := m.SearchFunc.nextHook()(v0, v1, v2)
	m.SearchFunc.appendCall(ClientSearchFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Search method of the
// parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientSearchFunc) SetDefaultHook(hook func(context.Context, *protocol.SearchRequest, func([]protocol.CommitMatch)) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Search method of the parent MockClient instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientSearchFunc) PushHook(hook func(context.Context, *protocol.SearchRequest, func([]protocol.CommitMatch)) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ClientSearchFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, *protocol.SearchRequest, func([]protocol.CommitMatch)) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ClientSearchFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, *protocol.SearchRequest, func([]protocol.CommitMatch)) (bool, error) {
		return r0, r1
	})
}

func (f *ClientSearchFunc) nextHook() func(context.Context, *protocol.SearchRequest, func([]protocol.CommitMatch)) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ClientSearchFunc) appendCall(r0 ClientSearchFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ClientSearchFuncCall objects describing the
// invocations of this function.
func (f *ClientSearchFunc) History() []ClientSearchFuncCall {
	f.mutex.Lock()
	history := make([]ClientSearchFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ClientSearchFuncCall is an object that describes an invocation of method
// Search on an instance of MockClient.
type ClientSearchFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *protocol.SearchRequest
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 func([]protocol.CommitMatch)
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientSearchFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientSearchFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
