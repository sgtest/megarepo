// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: gitserver.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GitserverRepositoryService_DeleteRepository_FullMethodName = "/gitserver.v1.GitserverRepositoryService/DeleteRepository"
	GitserverRepositoryService_FetchRepository_FullMethodName  = "/gitserver.v1.GitserverRepositoryService/FetchRepository"
)

// GitserverRepositoryServiceClient is the client API for GitserverRepositoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GitserverRepositoryServiceClient interface {
	// DeleteRepository deletes a repository on disk if it exists.
	// If it doesn't, an error is returned.
	DeleteRepository(ctx context.Context, in *DeleteRepositoryRequest, opts ...grpc.CallOption) (*DeleteRepositoryResponse, error)
	// FetchRepository fetches a repository from a remote. If the repository is not
	// yet cloned, it will be cloned. Otherwise, it will be updated.
	FetchRepository(ctx context.Context, in *FetchRepositoryRequest, opts ...grpc.CallOption) (*FetchRepositoryResponse, error)
}

type gitserverRepositoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGitserverRepositoryServiceClient(cc grpc.ClientConnInterface) GitserverRepositoryServiceClient {
	return &gitserverRepositoryServiceClient{cc}
}

func (c *gitserverRepositoryServiceClient) DeleteRepository(ctx context.Context, in *DeleteRepositoryRequest, opts ...grpc.CallOption) (*DeleteRepositoryResponse, error) {
	out := new(DeleteRepositoryResponse)
	err := c.cc.Invoke(ctx, GitserverRepositoryService_DeleteRepository_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitserverRepositoryServiceClient) FetchRepository(ctx context.Context, in *FetchRepositoryRequest, opts ...grpc.CallOption) (*FetchRepositoryResponse, error) {
	out := new(FetchRepositoryResponse)
	err := c.cc.Invoke(ctx, GitserverRepositoryService_FetchRepository_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GitserverRepositoryServiceServer is the server API for GitserverRepositoryService service.
// All implementations must embed UnimplementedGitserverRepositoryServiceServer
// for forward compatibility
type GitserverRepositoryServiceServer interface {
	// DeleteRepository deletes a repository on disk if it exists.
	// If it doesn't, an error is returned.
	DeleteRepository(context.Context, *DeleteRepositoryRequest) (*DeleteRepositoryResponse, error)
	// FetchRepository fetches a repository from a remote. If the repository is not
	// yet cloned, it will be cloned. Otherwise, it will be updated.
	FetchRepository(context.Context, *FetchRepositoryRequest) (*FetchRepositoryResponse, error)
	mustEmbedUnimplementedGitserverRepositoryServiceServer()
}

// UnimplementedGitserverRepositoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGitserverRepositoryServiceServer struct {
}

func (UnimplementedGitserverRepositoryServiceServer) DeleteRepository(context.Context, *DeleteRepositoryRequest) (*DeleteRepositoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRepository not implemented")
}
func (UnimplementedGitserverRepositoryServiceServer) FetchRepository(context.Context, *FetchRepositoryRequest) (*FetchRepositoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchRepository not implemented")
}
func (UnimplementedGitserverRepositoryServiceServer) mustEmbedUnimplementedGitserverRepositoryServiceServer() {
}

// UnsafeGitserverRepositoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GitserverRepositoryServiceServer will
// result in compilation errors.
type UnsafeGitserverRepositoryServiceServer interface {
	mustEmbedUnimplementedGitserverRepositoryServiceServer()
}

func RegisterGitserverRepositoryServiceServer(s grpc.ServiceRegistrar, srv GitserverRepositoryServiceServer) {
	s.RegisterService(&GitserverRepositoryService_ServiceDesc, srv)
}

func _GitserverRepositoryService_DeleteRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitserverRepositoryServiceServer).DeleteRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitserverRepositoryService_DeleteRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitserverRepositoryServiceServer).DeleteRepository(ctx, req.(*DeleteRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitserverRepositoryService_FetchRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitserverRepositoryServiceServer).FetchRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitserverRepositoryService_FetchRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitserverRepositoryServiceServer).FetchRepository(ctx, req.(*FetchRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GitserverRepositoryService_ServiceDesc is the grpc.ServiceDesc for GitserverRepositoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GitserverRepositoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitserver.v1.GitserverRepositoryService",
	HandlerType: (*GitserverRepositoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteRepository",
			Handler:    _GitserverRepositoryService_DeleteRepository_Handler,
		},
		{
			MethodName: "FetchRepository",
			Handler:    _GitserverRepositoryService_FetchRepository_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitserver.proto",
}

const (
	GitserverService_CreateCommitFromPatchBinary_FullMethodName = "/gitserver.v1.GitserverService/CreateCommitFromPatchBinary"
	GitserverService_DiskInfo_FullMethodName                    = "/gitserver.v1.GitserverService/DiskInfo"
	GitserverService_Exec_FullMethodName                        = "/gitserver.v1.GitserverService/Exec"
	GitserverService_GetObject_FullMethodName                   = "/gitserver.v1.GitserverService/GetObject"
	GitserverService_IsRepoCloneable_FullMethodName             = "/gitserver.v1.GitserverService/IsRepoCloneable"
	GitserverService_ListGitolite_FullMethodName                = "/gitserver.v1.GitserverService/ListGitolite"
	GitserverService_Search_FullMethodName                      = "/gitserver.v1.GitserverService/Search"
	GitserverService_Archive_FullMethodName                     = "/gitserver.v1.GitserverService/Archive"
	GitserverService_RepoCloneProgress_FullMethodName           = "/gitserver.v1.GitserverService/RepoCloneProgress"
	GitserverService_IsPerforcePathCloneable_FullMethodName     = "/gitserver.v1.GitserverService/IsPerforcePathCloneable"
	GitserverService_CheckPerforceCredentials_FullMethodName    = "/gitserver.v1.GitserverService/CheckPerforceCredentials"
	GitserverService_PerforceUsers_FullMethodName               = "/gitserver.v1.GitserverService/PerforceUsers"
	GitserverService_PerforceProtectsForUser_FullMethodName     = "/gitserver.v1.GitserverService/PerforceProtectsForUser"
	GitserverService_PerforceProtectsForDepot_FullMethodName    = "/gitserver.v1.GitserverService/PerforceProtectsForDepot"
	GitserverService_PerforceGroupMembers_FullMethodName        = "/gitserver.v1.GitserverService/PerforceGroupMembers"
	GitserverService_IsPerforceSuperUser_FullMethodName         = "/gitserver.v1.GitserverService/IsPerforceSuperUser"
	GitserverService_PerforceGetChangelist_FullMethodName       = "/gitserver.v1.GitserverService/PerforceGetChangelist"
	GitserverService_MergeBase_FullMethodName                   = "/gitserver.v1.GitserverService/MergeBase"
	GitserverService_Blame_FullMethodName                       = "/gitserver.v1.GitserverService/Blame"
	GitserverService_DefaultBranch_FullMethodName               = "/gitserver.v1.GitserverService/DefaultBranch"
	GitserverService_ReadFile_FullMethodName                    = "/gitserver.v1.GitserverService/ReadFile"
	GitserverService_GetCommit_FullMethodName                   = "/gitserver.v1.GitserverService/GetCommit"
	GitserverService_ResolveRevision_FullMethodName             = "/gitserver.v1.GitserverService/ResolveRevision"
	GitserverService_ListRefs_FullMethodName                    = "/gitserver.v1.GitserverService/ListRefs"
	GitserverService_RevAtTime_FullMethodName                   = "/gitserver.v1.GitserverService/RevAtTime"
	GitserverService_RawDiff_FullMethodName                     = "/gitserver.v1.GitserverService/RawDiff"
	GitserverService_ContributorCounts_FullMethodName           = "/gitserver.v1.GitserverService/ContributorCounts"
	GitserverService_FirstEverCommit_FullMethodName             = "/gitserver.v1.GitserverService/FirstEverCommit"
	GitserverService_BehindAhead_FullMethodName                 = "/gitserver.v1.GitserverService/BehindAhead"
	GitserverService_ChangedFiles_FullMethodName                = "/gitserver.v1.GitserverService/ChangedFiles"
)

// GitserverServiceClient is the client API for GitserverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GitserverServiceClient interface {
	CreateCommitFromPatchBinary(ctx context.Context, opts ...grpc.CallOption) (GitserverService_CreateCommitFromPatchBinaryClient, error)
	DiskInfo(ctx context.Context, in *DiskInfoRequest, opts ...grpc.CallOption) (*DiskInfoResponse, error)
	Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (GitserverService_ExecClient, error)
	GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*GetObjectResponse, error)
	IsRepoCloneable(ctx context.Context, in *IsRepoCloneableRequest, opts ...grpc.CallOption) (*IsRepoCloneableResponse, error)
	ListGitolite(ctx context.Context, in *ListGitoliteRequest, opts ...grpc.CallOption) (*ListGitoliteResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (GitserverService_SearchClient, error)
	// Archive creates an archive for the given treeish in the given format.
	// If paths are specified, only those paths are included in the archive.
	//
	// If subrepo permissions are enabled for the repo, no archive will be created
	// for non-internal actors and an unimplemented error will be returned. We can
	// currently not filter parts of the archive, so this would be considered
	// leaking information.
	//
	// If the given treeish does not exist, an error with a RevisionNotFoundPayload
	// is returned.
	//
	// If the given repo is not cloned, it will be enqueued for cloning and a
	// NotFound error will be returned, with a RepoNotFoundPayload in the details.
	Archive(ctx context.Context, in *ArchiveRequest, opts ...grpc.CallOption) (GitserverService_ArchiveClient, error)
	RepoCloneProgress(ctx context.Context, in *RepoCloneProgressRequest, opts ...grpc.CallOption) (*RepoCloneProgressResponse, error)
	IsPerforcePathCloneable(ctx context.Context, in *IsPerforcePathCloneableRequest, opts ...grpc.CallOption) (*IsPerforcePathCloneableResponse, error)
	CheckPerforceCredentials(ctx context.Context, in *CheckPerforceCredentialsRequest, opts ...grpc.CallOption) (*CheckPerforceCredentialsResponse, error)
	PerforceUsers(ctx context.Context, in *PerforceUsersRequest, opts ...grpc.CallOption) (*PerforceUsersResponse, error)
	PerforceProtectsForUser(ctx context.Context, in *PerforceProtectsForUserRequest, opts ...grpc.CallOption) (*PerforceProtectsForUserResponse, error)
	PerforceProtectsForDepot(ctx context.Context, in *PerforceProtectsForDepotRequest, opts ...grpc.CallOption) (*PerforceProtectsForDepotResponse, error)
	PerforceGroupMembers(ctx context.Context, in *PerforceGroupMembersRequest, opts ...grpc.CallOption) (*PerforceGroupMembersResponse, error)
	IsPerforceSuperUser(ctx context.Context, in *IsPerforceSuperUserRequest, opts ...grpc.CallOption) (*IsPerforceSuperUserResponse, error)
	PerforceGetChangelist(ctx context.Context, in *PerforceGetChangelistRequest, opts ...grpc.CallOption) (*PerforceGetChangelistResponse, error)
	// MergeBase returns the merge base commit sha for the specified revspecs.
	// If no common merge base exists, an empty string is returned.
	//
	// If the given repo is not cloned, it will be enqueued for cloning and a
	// NotFound error will be returned, with a RepoNotFoundPayload in the details.
	MergeBase(ctx context.Context, in *MergeBaseRequest, opts ...grpc.CallOption) (*MergeBaseResponse, error)
	// Blame runs a blame operation on the specified file. It returns a stream of
	// hunks as they are found. The --incremental flag is used on the git CLI
	// level to achieve this behavior.
	//
	// If the given repo is not cloned, it will be enqueued for cloning and a
	// NotFound error will be returned, with a RepoNotFoundPayload in the details.
	Blame(ctx context.Context, in *BlameRequest, opts ...grpc.CallOption) (GitserverService_BlameClient, error)
	// DefaultBranch resolves HEAD to ref name and current commit SHA it points
	// to. If HEAD points to an empty branch, it returns an error with a
	// RevisionNotFoundPayload.
	//
	// If the given repo is not cloned, it will be enqueued for cloning and a
	// NotFound error will be returned, with a RepoNotFoundPayload in the details.
	DefaultBranch(ctx context.Context, in *DefaultBranchRequest, opts ...grpc.CallOption) (*DefaultBranchResponse, error)
	// ReadFile gets a file from the repo ODB and streams the contents back.
	//
	// If the given repo is not cloned, it will be enqueued for cloning and a
	// NotFound error will be returned, with a RepoNotFoundPayload in the details.
	ReadFile(ctx context.Context, in *ReadFileRequest, opts ...grpc.CallOption) (GitserverService_ReadFileClient, error)
	// GetCommit gets a commit from the repo ODB.
	//
	// If the commit is not found, an error with a RevisionNotFoundPayload is
	// returned.
	//
	// If the given repo is not cloned, it will be enqueued for cloning and a
	// NotFound error will be returned, with a RepoNotFoundPayload in the details.
	GetCommit(ctx context.Context, in *GetCommitRequest, opts ...grpc.CallOption) (*GetCommitResponse, error)
	// ResolveRevision resolves a given revspec-ish to a commit SHA.
	// If passed a commit sha, the endpoint will also verify that the commit
	// exists.
	//
	// If the revision cannot be resolved an error with RevisionNotFoundPayload is
	// returned.
	//
	// Under the hood, this endpoint currently uses git rev-parse to resolve the
	// revspec, but we forbid certain revspecs (like HEAD) to avoid leaking
	// existence files, and to avoid running very expensive rev-parse operations.
	// Assume only the following are supported:
	// - Symbolic refs
	// - All refs under refs/, including tags
	// - Commit hashes
	// - Abbreviated commit hashes
	//
	// If the given repo is not cloned, it will be enqueued for cloning and a
	// NotFound error will be returned, with a RepoNotFoundPayload in the details.
	ResolveRevision(ctx context.Context, in *ResolveRevisionRequest, opts ...grpc.CallOption) (*ResolveRevisionResponse, error)
	// ListRefs returns a list of all the refs known to the repository, this includes
	// heads, tags, and other potential refs, but filters can be applied.
	//
	// The refs are ordered in the following order:
	// HEAD first, if part of the result set.
	// The rest will be ordered by creation date, in descending order, i.e., newest
	// first.
	// If two resources are created at the same timestamp, the records are ordered
	// alphabetically.
	//
	// If the given repo is not cloned, it will be enqueued for cloning and a NotFound
	// error will be returned, with a RepoNotFoundPayload in the details.
	ListRefs(ctx context.Context, in *ListRefsRequest, opts ...grpc.CallOption) (GitserverService_ListRefsClient, error)
	// RevAtTime looks up the OID of the nearest ancestor of `spec` that has a
	// commit time before the given time. To simplify the logic, it only follows
	// the first parent of merge commits to linearize the commit history. The
	// intent is to return the state of a branch at a given time.
	//
	// If the revision cannot be resolved an error with RevisionNotFoundPayload is
	// returned.
	//
	// If the revision exists, but there is no commit in its ancestry before
	// the requested time, an empty string is returned for the commit SHA.
	RevAtTime(ctx context.Context, in *RevAtTimeRequest, opts ...grpc.CallOption) (*RevAtTimeResponse, error)
	// RawDiff returns the raw git diff for the given range.
	// Diffs returned from this function will have the following settings applied:
	// - 3 lines of context
	// - No a/ b/ prefixes
	// - Rename detection
	//
	// If either base or head are not found, an error with a RevisionNotFoundPayload
	// is returned.
	//
	// If the given repo is not cloned, it will be enqueued for cloning and a
	// NotFound error will be returned, with a RepoNotFoundPayload in the details.
	RawDiff(ctx context.Context, in *RawDiffRequest, opts ...grpc.CallOption) (GitserverService_RawDiffClient, error)
	// ContributorCounts returns the number of commits grouped by commit author.
	//
	// If the given repo is not cloned, it will be enqueued for cloning and a
	// NotFound error will be returned, with a RepoNotFoundPayload in the details.
	ContributorCounts(ctx context.Context, in *ContributorCountsRequest, opts ...grpc.CallOption) (*ContributorCountsResponse, error)
	// FirstEverCommit returns the first commit ever made to the repository.
	//
	// If the given repository is empty, an error with a RevisionNotFoundPayload is
	// returned.
	FirstEverCommit(ctx context.Context, in *FirstEverCommitRequest, opts ...grpc.CallOption) (*FirstEverCommitResponse, error)
	// BehindAhead returns the behind/ahead commit counts information for the symmetric difference left...right (both Git
	// revspecs).
	//
	// Behind is the number of commits that are solely reachable in "left" but not "right".
	// Ahead is the number of commits that are solely reachable in "right" but not "left".
	//
	//	 For the example, given the graph below, BehindAhead("A", "B") would return {Behind: 3, Ahead: 2}.
	//
	//		     y---b---b  branch B
	//		    / \ /
	//		   /   .
	//		  /   / \
	//		 o---x---a---a---a  branch A
	//
	// If either left or right are the empty string (""), the HEAD commit is implicitly used.
	//
	// If one of the two given revspecs does not exist, an error with a RevisionNotFoundPayload is
	// is returned.
	//
	// If the given repo is not cloned, it will be enqueued for cloning and a
	// NotFound error will be returned, with a RepoNotFoundPayload in the details.
	BehindAhead(ctx context.Context, in *BehindAheadRequest, opts ...grpc.CallOption) (*BehindAheadResponse, error)
	// ChangedFiles returns the list of files that have been added, modified, or
	// deleted in the entire repository between the two given <tree-ish> identifiers (e.g., commit, branch, tag).
	//
	// - Renamed files are represented as a deletion of the old path and an addition of the new path.
	// - No copy detection is performed.
	// - The only file status codes returned are 'A' (added), 'M' (modified), or 'D' (deleted).
	//
	// If `base` is omitted, the parent of `head` is used as the base.
	//
	// If either the `base` or `head` <tree-ish> id does not exist, an error with a `RevisionNotFoundPayload` is returned.
	ChangedFiles(ctx context.Context, in *ChangedFilesRequest, opts ...grpc.CallOption) (GitserverService_ChangedFilesClient, error)
}

type gitserverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGitserverServiceClient(cc grpc.ClientConnInterface) GitserverServiceClient {
	return &gitserverServiceClient{cc}
}

func (c *gitserverServiceClient) CreateCommitFromPatchBinary(ctx context.Context, opts ...grpc.CallOption) (GitserverService_CreateCommitFromPatchBinaryClient, error) {
	stream, err := c.cc.NewStream(ctx, &GitserverService_ServiceDesc.Streams[0], GitserverService_CreateCommitFromPatchBinary_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gitserverServiceCreateCommitFromPatchBinaryClient{stream}
	return x, nil
}

type GitserverService_CreateCommitFromPatchBinaryClient interface {
	Send(*CreateCommitFromPatchBinaryRequest) error
	CloseAndRecv() (*CreateCommitFromPatchBinaryResponse, error)
	grpc.ClientStream
}

type gitserverServiceCreateCommitFromPatchBinaryClient struct {
	grpc.ClientStream
}

func (x *gitserverServiceCreateCommitFromPatchBinaryClient) Send(m *CreateCommitFromPatchBinaryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gitserverServiceCreateCommitFromPatchBinaryClient) CloseAndRecv() (*CreateCommitFromPatchBinaryResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CreateCommitFromPatchBinaryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gitserverServiceClient) DiskInfo(ctx context.Context, in *DiskInfoRequest, opts ...grpc.CallOption) (*DiskInfoResponse, error) {
	out := new(DiskInfoResponse)
	err := c.cc.Invoke(ctx, GitserverService_DiskInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitserverServiceClient) Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (GitserverService_ExecClient, error) {
	stream, err := c.cc.NewStream(ctx, &GitserverService_ServiceDesc.Streams[1], GitserverService_Exec_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gitserverServiceExecClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GitserverService_ExecClient interface {
	Recv() (*ExecResponse, error)
	grpc.ClientStream
}

type gitserverServiceExecClient struct {
	grpc.ClientStream
}

func (x *gitserverServiceExecClient) Recv() (*ExecResponse, error) {
	m := new(ExecResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gitserverServiceClient) GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*GetObjectResponse, error) {
	out := new(GetObjectResponse)
	err := c.cc.Invoke(ctx, GitserverService_GetObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitserverServiceClient) IsRepoCloneable(ctx context.Context, in *IsRepoCloneableRequest, opts ...grpc.CallOption) (*IsRepoCloneableResponse, error) {
	out := new(IsRepoCloneableResponse)
	err := c.cc.Invoke(ctx, GitserverService_IsRepoCloneable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitserverServiceClient) ListGitolite(ctx context.Context, in *ListGitoliteRequest, opts ...grpc.CallOption) (*ListGitoliteResponse, error) {
	out := new(ListGitoliteResponse)
	err := c.cc.Invoke(ctx, GitserverService_ListGitolite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitserverServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (GitserverService_SearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &GitserverService_ServiceDesc.Streams[2], GitserverService_Search_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gitserverServiceSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GitserverService_SearchClient interface {
	Recv() (*SearchResponse, error)
	grpc.ClientStream
}

type gitserverServiceSearchClient struct {
	grpc.ClientStream
}

func (x *gitserverServiceSearchClient) Recv() (*SearchResponse, error) {
	m := new(SearchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gitserverServiceClient) Archive(ctx context.Context, in *ArchiveRequest, opts ...grpc.CallOption) (GitserverService_ArchiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &GitserverService_ServiceDesc.Streams[3], GitserverService_Archive_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gitserverServiceArchiveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GitserverService_ArchiveClient interface {
	Recv() (*ArchiveResponse, error)
	grpc.ClientStream
}

type gitserverServiceArchiveClient struct {
	grpc.ClientStream
}

func (x *gitserverServiceArchiveClient) Recv() (*ArchiveResponse, error) {
	m := new(ArchiveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gitserverServiceClient) RepoCloneProgress(ctx context.Context, in *RepoCloneProgressRequest, opts ...grpc.CallOption) (*RepoCloneProgressResponse, error) {
	out := new(RepoCloneProgressResponse)
	err := c.cc.Invoke(ctx, GitserverService_RepoCloneProgress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitserverServiceClient) IsPerforcePathCloneable(ctx context.Context, in *IsPerforcePathCloneableRequest, opts ...grpc.CallOption) (*IsPerforcePathCloneableResponse, error) {
	out := new(IsPerforcePathCloneableResponse)
	err := c.cc.Invoke(ctx, GitserverService_IsPerforcePathCloneable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitserverServiceClient) CheckPerforceCredentials(ctx context.Context, in *CheckPerforceCredentialsRequest, opts ...grpc.CallOption) (*CheckPerforceCredentialsResponse, error) {
	out := new(CheckPerforceCredentialsResponse)
	err := c.cc.Invoke(ctx, GitserverService_CheckPerforceCredentials_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitserverServiceClient) PerforceUsers(ctx context.Context, in *PerforceUsersRequest, opts ...grpc.CallOption) (*PerforceUsersResponse, error) {
	out := new(PerforceUsersResponse)
	err := c.cc.Invoke(ctx, GitserverService_PerforceUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitserverServiceClient) PerforceProtectsForUser(ctx context.Context, in *PerforceProtectsForUserRequest, opts ...grpc.CallOption) (*PerforceProtectsForUserResponse, error) {
	out := new(PerforceProtectsForUserResponse)
	err := c.cc.Invoke(ctx, GitserverService_PerforceProtectsForUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitserverServiceClient) PerforceProtectsForDepot(ctx context.Context, in *PerforceProtectsForDepotRequest, opts ...grpc.CallOption) (*PerforceProtectsForDepotResponse, error) {
	out := new(PerforceProtectsForDepotResponse)
	err := c.cc.Invoke(ctx, GitserverService_PerforceProtectsForDepot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitserverServiceClient) PerforceGroupMembers(ctx context.Context, in *PerforceGroupMembersRequest, opts ...grpc.CallOption) (*PerforceGroupMembersResponse, error) {
	out := new(PerforceGroupMembersResponse)
	err := c.cc.Invoke(ctx, GitserverService_PerforceGroupMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitserverServiceClient) IsPerforceSuperUser(ctx context.Context, in *IsPerforceSuperUserRequest, opts ...grpc.CallOption) (*IsPerforceSuperUserResponse, error) {
	out := new(IsPerforceSuperUserResponse)
	err := c.cc.Invoke(ctx, GitserverService_IsPerforceSuperUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitserverServiceClient) PerforceGetChangelist(ctx context.Context, in *PerforceGetChangelistRequest, opts ...grpc.CallOption) (*PerforceGetChangelistResponse, error) {
	out := new(PerforceGetChangelistResponse)
	err := c.cc.Invoke(ctx, GitserverService_PerforceGetChangelist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitserverServiceClient) MergeBase(ctx context.Context, in *MergeBaseRequest, opts ...grpc.CallOption) (*MergeBaseResponse, error) {
	out := new(MergeBaseResponse)
	err := c.cc.Invoke(ctx, GitserverService_MergeBase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitserverServiceClient) Blame(ctx context.Context, in *BlameRequest, opts ...grpc.CallOption) (GitserverService_BlameClient, error) {
	stream, err := c.cc.NewStream(ctx, &GitserverService_ServiceDesc.Streams[4], GitserverService_Blame_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gitserverServiceBlameClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GitserverService_BlameClient interface {
	Recv() (*BlameResponse, error)
	grpc.ClientStream
}

type gitserverServiceBlameClient struct {
	grpc.ClientStream
}

func (x *gitserverServiceBlameClient) Recv() (*BlameResponse, error) {
	m := new(BlameResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gitserverServiceClient) DefaultBranch(ctx context.Context, in *DefaultBranchRequest, opts ...grpc.CallOption) (*DefaultBranchResponse, error) {
	out := new(DefaultBranchResponse)
	err := c.cc.Invoke(ctx, GitserverService_DefaultBranch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitserverServiceClient) ReadFile(ctx context.Context, in *ReadFileRequest, opts ...grpc.CallOption) (GitserverService_ReadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &GitserverService_ServiceDesc.Streams[5], GitserverService_ReadFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gitserverServiceReadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GitserverService_ReadFileClient interface {
	Recv() (*ReadFileResponse, error)
	grpc.ClientStream
}

type gitserverServiceReadFileClient struct {
	grpc.ClientStream
}

func (x *gitserverServiceReadFileClient) Recv() (*ReadFileResponse, error) {
	m := new(ReadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gitserverServiceClient) GetCommit(ctx context.Context, in *GetCommitRequest, opts ...grpc.CallOption) (*GetCommitResponse, error) {
	out := new(GetCommitResponse)
	err := c.cc.Invoke(ctx, GitserverService_GetCommit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitserverServiceClient) ResolveRevision(ctx context.Context, in *ResolveRevisionRequest, opts ...grpc.CallOption) (*ResolveRevisionResponse, error) {
	out := new(ResolveRevisionResponse)
	err := c.cc.Invoke(ctx, GitserverService_ResolveRevision_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitserverServiceClient) ListRefs(ctx context.Context, in *ListRefsRequest, opts ...grpc.CallOption) (GitserverService_ListRefsClient, error) {
	stream, err := c.cc.NewStream(ctx, &GitserverService_ServiceDesc.Streams[6], GitserverService_ListRefs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gitserverServiceListRefsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GitserverService_ListRefsClient interface {
	Recv() (*ListRefsResponse, error)
	grpc.ClientStream
}

type gitserverServiceListRefsClient struct {
	grpc.ClientStream
}

func (x *gitserverServiceListRefsClient) Recv() (*ListRefsResponse, error) {
	m := new(ListRefsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gitserverServiceClient) RevAtTime(ctx context.Context, in *RevAtTimeRequest, opts ...grpc.CallOption) (*RevAtTimeResponse, error) {
	out := new(RevAtTimeResponse)
	err := c.cc.Invoke(ctx, GitserverService_RevAtTime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitserverServiceClient) RawDiff(ctx context.Context, in *RawDiffRequest, opts ...grpc.CallOption) (GitserverService_RawDiffClient, error) {
	stream, err := c.cc.NewStream(ctx, &GitserverService_ServiceDesc.Streams[7], GitserverService_RawDiff_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gitserverServiceRawDiffClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GitserverService_RawDiffClient interface {
	Recv() (*RawDiffResponse, error)
	grpc.ClientStream
}

type gitserverServiceRawDiffClient struct {
	grpc.ClientStream
}

func (x *gitserverServiceRawDiffClient) Recv() (*RawDiffResponse, error) {
	m := new(RawDiffResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gitserverServiceClient) ContributorCounts(ctx context.Context, in *ContributorCountsRequest, opts ...grpc.CallOption) (*ContributorCountsResponse, error) {
	out := new(ContributorCountsResponse)
	err := c.cc.Invoke(ctx, GitserverService_ContributorCounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitserverServiceClient) FirstEverCommit(ctx context.Context, in *FirstEverCommitRequest, opts ...grpc.CallOption) (*FirstEverCommitResponse, error) {
	out := new(FirstEverCommitResponse)
	err := c.cc.Invoke(ctx, GitserverService_FirstEverCommit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitserverServiceClient) BehindAhead(ctx context.Context, in *BehindAheadRequest, opts ...grpc.CallOption) (*BehindAheadResponse, error) {
	out := new(BehindAheadResponse)
	err := c.cc.Invoke(ctx, GitserverService_BehindAhead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitserverServiceClient) ChangedFiles(ctx context.Context, in *ChangedFilesRequest, opts ...grpc.CallOption) (GitserverService_ChangedFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &GitserverService_ServiceDesc.Streams[8], GitserverService_ChangedFiles_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gitserverServiceChangedFilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GitserverService_ChangedFilesClient interface {
	Recv() (*ChangedFilesResponse, error)
	grpc.ClientStream
}

type gitserverServiceChangedFilesClient struct {
	grpc.ClientStream
}

func (x *gitserverServiceChangedFilesClient) Recv() (*ChangedFilesResponse, error) {
	m := new(ChangedFilesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GitserverServiceServer is the server API for GitserverService service.
// All implementations must embed UnimplementedGitserverServiceServer
// for forward compatibility
type GitserverServiceServer interface {
	CreateCommitFromPatchBinary(GitserverService_CreateCommitFromPatchBinaryServer) error
	DiskInfo(context.Context, *DiskInfoRequest) (*DiskInfoResponse, error)
	Exec(*ExecRequest, GitserverService_ExecServer) error
	GetObject(context.Context, *GetObjectRequest) (*GetObjectResponse, error)
	IsRepoCloneable(context.Context, *IsRepoCloneableRequest) (*IsRepoCloneableResponse, error)
	ListGitolite(context.Context, *ListGitoliteRequest) (*ListGitoliteResponse, error)
	Search(*SearchRequest, GitserverService_SearchServer) error
	// Archive creates an archive for the given treeish in the given format.
	// If paths are specified, only those paths are included in the archive.
	//
	// If subrepo permissions are enabled for the repo, no archive will be created
	// for non-internal actors and an unimplemented error will be returned. We can
	// currently not filter parts of the archive, so this would be considered
	// leaking information.
	//
	// If the given treeish does not exist, an error with a RevisionNotFoundPayload
	// is returned.
	//
	// If the given repo is not cloned, it will be enqueued for cloning and a
	// NotFound error will be returned, with a RepoNotFoundPayload in the details.
	Archive(*ArchiveRequest, GitserverService_ArchiveServer) error
	RepoCloneProgress(context.Context, *RepoCloneProgressRequest) (*RepoCloneProgressResponse, error)
	IsPerforcePathCloneable(context.Context, *IsPerforcePathCloneableRequest) (*IsPerforcePathCloneableResponse, error)
	CheckPerforceCredentials(context.Context, *CheckPerforceCredentialsRequest) (*CheckPerforceCredentialsResponse, error)
	PerforceUsers(context.Context, *PerforceUsersRequest) (*PerforceUsersResponse, error)
	PerforceProtectsForUser(context.Context, *PerforceProtectsForUserRequest) (*PerforceProtectsForUserResponse, error)
	PerforceProtectsForDepot(context.Context, *PerforceProtectsForDepotRequest) (*PerforceProtectsForDepotResponse, error)
	PerforceGroupMembers(context.Context, *PerforceGroupMembersRequest) (*PerforceGroupMembersResponse, error)
	IsPerforceSuperUser(context.Context, *IsPerforceSuperUserRequest) (*IsPerforceSuperUserResponse, error)
	PerforceGetChangelist(context.Context, *PerforceGetChangelistRequest) (*PerforceGetChangelistResponse, error)
	// MergeBase returns the merge base commit sha for the specified revspecs.
	// If no common merge base exists, an empty string is returned.
	//
	// If the given repo is not cloned, it will be enqueued for cloning and a
	// NotFound error will be returned, with a RepoNotFoundPayload in the details.
	MergeBase(context.Context, *MergeBaseRequest) (*MergeBaseResponse, error)
	// Blame runs a blame operation on the specified file. It returns a stream of
	// hunks as they are found. The --incremental flag is used on the git CLI
	// level to achieve this behavior.
	//
	// If the given repo is not cloned, it will be enqueued for cloning and a
	// NotFound error will be returned, with a RepoNotFoundPayload in the details.
	Blame(*BlameRequest, GitserverService_BlameServer) error
	// DefaultBranch resolves HEAD to ref name and current commit SHA it points
	// to. If HEAD points to an empty branch, it returns an error with a
	// RevisionNotFoundPayload.
	//
	// If the given repo is not cloned, it will be enqueued for cloning and a
	// NotFound error will be returned, with a RepoNotFoundPayload in the details.
	DefaultBranch(context.Context, *DefaultBranchRequest) (*DefaultBranchResponse, error)
	// ReadFile gets a file from the repo ODB and streams the contents back.
	//
	// If the given repo is not cloned, it will be enqueued for cloning and a
	// NotFound error will be returned, with a RepoNotFoundPayload in the details.
	ReadFile(*ReadFileRequest, GitserverService_ReadFileServer) error
	// GetCommit gets a commit from the repo ODB.
	//
	// If the commit is not found, an error with a RevisionNotFoundPayload is
	// returned.
	//
	// If the given repo is not cloned, it will be enqueued for cloning and a
	// NotFound error will be returned, with a RepoNotFoundPayload in the details.
	GetCommit(context.Context, *GetCommitRequest) (*GetCommitResponse, error)
	// ResolveRevision resolves a given revspec-ish to a commit SHA.
	// If passed a commit sha, the endpoint will also verify that the commit
	// exists.
	//
	// If the revision cannot be resolved an error with RevisionNotFoundPayload is
	// returned.
	//
	// Under the hood, this endpoint currently uses git rev-parse to resolve the
	// revspec, but we forbid certain revspecs (like HEAD) to avoid leaking
	// existence files, and to avoid running very expensive rev-parse operations.
	// Assume only the following are supported:
	// - Symbolic refs
	// - All refs under refs/, including tags
	// - Commit hashes
	// - Abbreviated commit hashes
	//
	// If the given repo is not cloned, it will be enqueued for cloning and a
	// NotFound error will be returned, with a RepoNotFoundPayload in the details.
	ResolveRevision(context.Context, *ResolveRevisionRequest) (*ResolveRevisionResponse, error)
	// ListRefs returns a list of all the refs known to the repository, this includes
	// heads, tags, and other potential refs, but filters can be applied.
	//
	// The refs are ordered in the following order:
	// HEAD first, if part of the result set.
	// The rest will be ordered by creation date, in descending order, i.e., newest
	// first.
	// If two resources are created at the same timestamp, the records are ordered
	// alphabetically.
	//
	// If the given repo is not cloned, it will be enqueued for cloning and a NotFound
	// error will be returned, with a RepoNotFoundPayload in the details.
	ListRefs(*ListRefsRequest, GitserverService_ListRefsServer) error
	// RevAtTime looks up the OID of the nearest ancestor of `spec` that has a
	// commit time before the given time. To simplify the logic, it only follows
	// the first parent of merge commits to linearize the commit history. The
	// intent is to return the state of a branch at a given time.
	//
	// If the revision cannot be resolved an error with RevisionNotFoundPayload is
	// returned.
	//
	// If the revision exists, but there is no commit in its ancestry before
	// the requested time, an empty string is returned for the commit SHA.
	RevAtTime(context.Context, *RevAtTimeRequest) (*RevAtTimeResponse, error)
	// RawDiff returns the raw git diff for the given range.
	// Diffs returned from this function will have the following settings applied:
	// - 3 lines of context
	// - No a/ b/ prefixes
	// - Rename detection
	//
	// If either base or head are not found, an error with a RevisionNotFoundPayload
	// is returned.
	//
	// If the given repo is not cloned, it will be enqueued for cloning and a
	// NotFound error will be returned, with a RepoNotFoundPayload in the details.
	RawDiff(*RawDiffRequest, GitserverService_RawDiffServer) error
	// ContributorCounts returns the number of commits grouped by commit author.
	//
	// If the given repo is not cloned, it will be enqueued for cloning and a
	// NotFound error will be returned, with a RepoNotFoundPayload in the details.
	ContributorCounts(context.Context, *ContributorCountsRequest) (*ContributorCountsResponse, error)
	// FirstEverCommit returns the first commit ever made to the repository.
	//
	// If the given repository is empty, an error with a RevisionNotFoundPayload is
	// returned.
	FirstEverCommit(context.Context, *FirstEverCommitRequest) (*FirstEverCommitResponse, error)
	// BehindAhead returns the behind/ahead commit counts information for the symmetric difference left...right (both Git
	// revspecs).
	//
	// Behind is the number of commits that are solely reachable in "left" but not "right".
	// Ahead is the number of commits that are solely reachable in "right" but not "left".
	//
	//	 For the example, given the graph below, BehindAhead("A", "B") would return {Behind: 3, Ahead: 2}.
	//
	//		     y---b---b  branch B
	//		    / \ /
	//		   /   .
	//		  /   / \
	//		 o---x---a---a---a  branch A
	//
	// If either left or right are the empty string (""), the HEAD commit is implicitly used.
	//
	// If one of the two given revspecs does not exist, an error with a RevisionNotFoundPayload is
	// is returned.
	//
	// If the given repo is not cloned, it will be enqueued for cloning and a
	// NotFound error will be returned, with a RepoNotFoundPayload in the details.
	BehindAhead(context.Context, *BehindAheadRequest) (*BehindAheadResponse, error)
	// ChangedFiles returns the list of files that have been added, modified, or
	// deleted in the entire repository between the two given <tree-ish> identifiers (e.g., commit, branch, tag).
	//
	// - Renamed files are represented as a deletion of the old path and an addition of the new path.
	// - No copy detection is performed.
	// - The only file status codes returned are 'A' (added), 'M' (modified), or 'D' (deleted).
	//
	// If `base` is omitted, the parent of `head` is used as the base.
	//
	// If either the `base` or `head` <tree-ish> id does not exist, an error with a `RevisionNotFoundPayload` is returned.
	ChangedFiles(*ChangedFilesRequest, GitserverService_ChangedFilesServer) error
	mustEmbedUnimplementedGitserverServiceServer()
}

// UnimplementedGitserverServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGitserverServiceServer struct {
}

func (UnimplementedGitserverServiceServer) CreateCommitFromPatchBinary(GitserverService_CreateCommitFromPatchBinaryServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateCommitFromPatchBinary not implemented")
}
func (UnimplementedGitserverServiceServer) DiskInfo(context.Context, *DiskInfoRequest) (*DiskInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiskInfo not implemented")
}
func (UnimplementedGitserverServiceServer) Exec(*ExecRequest, GitserverService_ExecServer) error {
	return status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (UnimplementedGitserverServiceServer) GetObject(context.Context, *GetObjectRequest) (*GetObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObject not implemented")
}
func (UnimplementedGitserverServiceServer) IsRepoCloneable(context.Context, *IsRepoCloneableRequest) (*IsRepoCloneableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsRepoCloneable not implemented")
}
func (UnimplementedGitserverServiceServer) ListGitolite(context.Context, *ListGitoliteRequest) (*ListGitoliteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGitolite not implemented")
}
func (UnimplementedGitserverServiceServer) Search(*SearchRequest, GitserverService_SearchServer) error {
	return status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedGitserverServiceServer) Archive(*ArchiveRequest, GitserverService_ArchiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Archive not implemented")
}
func (UnimplementedGitserverServiceServer) RepoCloneProgress(context.Context, *RepoCloneProgressRequest) (*RepoCloneProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepoCloneProgress not implemented")
}
func (UnimplementedGitserverServiceServer) IsPerforcePathCloneable(context.Context, *IsPerforcePathCloneableRequest) (*IsPerforcePathCloneableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPerforcePathCloneable not implemented")
}
func (UnimplementedGitserverServiceServer) CheckPerforceCredentials(context.Context, *CheckPerforceCredentialsRequest) (*CheckPerforceCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPerforceCredentials not implemented")
}
func (UnimplementedGitserverServiceServer) PerforceUsers(context.Context, *PerforceUsersRequest) (*PerforceUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerforceUsers not implemented")
}
func (UnimplementedGitserverServiceServer) PerforceProtectsForUser(context.Context, *PerforceProtectsForUserRequest) (*PerforceProtectsForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerforceProtectsForUser not implemented")
}
func (UnimplementedGitserverServiceServer) PerforceProtectsForDepot(context.Context, *PerforceProtectsForDepotRequest) (*PerforceProtectsForDepotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerforceProtectsForDepot not implemented")
}
func (UnimplementedGitserverServiceServer) PerforceGroupMembers(context.Context, *PerforceGroupMembersRequest) (*PerforceGroupMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerforceGroupMembers not implemented")
}
func (UnimplementedGitserverServiceServer) IsPerforceSuperUser(context.Context, *IsPerforceSuperUserRequest) (*IsPerforceSuperUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPerforceSuperUser not implemented")
}
func (UnimplementedGitserverServiceServer) PerforceGetChangelist(context.Context, *PerforceGetChangelistRequest) (*PerforceGetChangelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerforceGetChangelist not implemented")
}
func (UnimplementedGitserverServiceServer) MergeBase(context.Context, *MergeBaseRequest) (*MergeBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeBase not implemented")
}
func (UnimplementedGitserverServiceServer) Blame(*BlameRequest, GitserverService_BlameServer) error {
	return status.Errorf(codes.Unimplemented, "method Blame not implemented")
}
func (UnimplementedGitserverServiceServer) DefaultBranch(context.Context, *DefaultBranchRequest) (*DefaultBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DefaultBranch not implemented")
}
func (UnimplementedGitserverServiceServer) ReadFile(*ReadFileRequest, GitserverService_ReadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadFile not implemented")
}
func (UnimplementedGitserverServiceServer) GetCommit(context.Context, *GetCommitRequest) (*GetCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommit not implemented")
}
func (UnimplementedGitserverServiceServer) ResolveRevision(context.Context, *ResolveRevisionRequest) (*ResolveRevisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveRevision not implemented")
}
func (UnimplementedGitserverServiceServer) ListRefs(*ListRefsRequest, GitserverService_ListRefsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListRefs not implemented")
}
func (UnimplementedGitserverServiceServer) RevAtTime(context.Context, *RevAtTimeRequest) (*RevAtTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevAtTime not implemented")
}
func (UnimplementedGitserverServiceServer) RawDiff(*RawDiffRequest, GitserverService_RawDiffServer) error {
	return status.Errorf(codes.Unimplemented, "method RawDiff not implemented")
}
func (UnimplementedGitserverServiceServer) ContributorCounts(context.Context, *ContributorCountsRequest) (*ContributorCountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContributorCounts not implemented")
}
func (UnimplementedGitserverServiceServer) FirstEverCommit(context.Context, *FirstEverCommitRequest) (*FirstEverCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FirstEverCommit not implemented")
}
func (UnimplementedGitserverServiceServer) BehindAhead(context.Context, *BehindAheadRequest) (*BehindAheadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BehindAhead not implemented")
}
func (UnimplementedGitserverServiceServer) ChangedFiles(*ChangedFilesRequest, GitserverService_ChangedFilesServer) error {
	return status.Errorf(codes.Unimplemented, "method ChangedFiles not implemented")
}
func (UnimplementedGitserverServiceServer) mustEmbedUnimplementedGitserverServiceServer() {}

// UnsafeGitserverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GitserverServiceServer will
// result in compilation errors.
type UnsafeGitserverServiceServer interface {
	mustEmbedUnimplementedGitserverServiceServer()
}

func RegisterGitserverServiceServer(s grpc.ServiceRegistrar, srv GitserverServiceServer) {
	s.RegisterService(&GitserverService_ServiceDesc, srv)
}

func _GitserverService_CreateCommitFromPatchBinary_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GitserverServiceServer).CreateCommitFromPatchBinary(&gitserverServiceCreateCommitFromPatchBinaryServer{stream})
}

type GitserverService_CreateCommitFromPatchBinaryServer interface {
	SendAndClose(*CreateCommitFromPatchBinaryResponse) error
	Recv() (*CreateCommitFromPatchBinaryRequest, error)
	grpc.ServerStream
}

type gitserverServiceCreateCommitFromPatchBinaryServer struct {
	grpc.ServerStream
}

func (x *gitserverServiceCreateCommitFromPatchBinaryServer) SendAndClose(m *CreateCommitFromPatchBinaryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gitserverServiceCreateCommitFromPatchBinaryServer) Recv() (*CreateCommitFromPatchBinaryRequest, error) {
	m := new(CreateCommitFromPatchBinaryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GitserverService_DiskInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiskInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitserverServiceServer).DiskInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitserverService_DiskInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitserverServiceServer).DiskInfo(ctx, req.(*DiskInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitserverService_Exec_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GitserverServiceServer).Exec(m, &gitserverServiceExecServer{stream})
}

type GitserverService_ExecServer interface {
	Send(*ExecResponse) error
	grpc.ServerStream
}

type gitserverServiceExecServer struct {
	grpc.ServerStream
}

func (x *gitserverServiceExecServer) Send(m *ExecResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GitserverService_GetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitserverServiceServer).GetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitserverService_GetObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitserverServiceServer).GetObject(ctx, req.(*GetObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitserverService_IsRepoCloneable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsRepoCloneableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitserverServiceServer).IsRepoCloneable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitserverService_IsRepoCloneable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitserverServiceServer).IsRepoCloneable(ctx, req.(*IsRepoCloneableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitserverService_ListGitolite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGitoliteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitserverServiceServer).ListGitolite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitserverService_ListGitolite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitserverServiceServer).ListGitolite(ctx, req.(*ListGitoliteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitserverService_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GitserverServiceServer).Search(m, &gitserverServiceSearchServer{stream})
}

type GitserverService_SearchServer interface {
	Send(*SearchResponse) error
	grpc.ServerStream
}

type gitserverServiceSearchServer struct {
	grpc.ServerStream
}

func (x *gitserverServiceSearchServer) Send(m *SearchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GitserverService_Archive_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ArchiveRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GitserverServiceServer).Archive(m, &gitserverServiceArchiveServer{stream})
}

type GitserverService_ArchiveServer interface {
	Send(*ArchiveResponse) error
	grpc.ServerStream
}

type gitserverServiceArchiveServer struct {
	grpc.ServerStream
}

func (x *gitserverServiceArchiveServer) Send(m *ArchiveResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GitserverService_RepoCloneProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoCloneProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitserverServiceServer).RepoCloneProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitserverService_RepoCloneProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitserverServiceServer).RepoCloneProgress(ctx, req.(*RepoCloneProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitserverService_IsPerforcePathCloneable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsPerforcePathCloneableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitserverServiceServer).IsPerforcePathCloneable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitserverService_IsPerforcePathCloneable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitserverServiceServer).IsPerforcePathCloneable(ctx, req.(*IsPerforcePathCloneableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitserverService_CheckPerforceCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPerforceCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitserverServiceServer).CheckPerforceCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitserverService_CheckPerforceCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitserverServiceServer).CheckPerforceCredentials(ctx, req.(*CheckPerforceCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitserverService_PerforceUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PerforceUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitserverServiceServer).PerforceUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitserverService_PerforceUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitserverServiceServer).PerforceUsers(ctx, req.(*PerforceUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitserverService_PerforceProtectsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PerforceProtectsForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitserverServiceServer).PerforceProtectsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitserverService_PerforceProtectsForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitserverServiceServer).PerforceProtectsForUser(ctx, req.(*PerforceProtectsForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitserverService_PerforceProtectsForDepot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PerforceProtectsForDepotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitserverServiceServer).PerforceProtectsForDepot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitserverService_PerforceProtectsForDepot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitserverServiceServer).PerforceProtectsForDepot(ctx, req.(*PerforceProtectsForDepotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitserverService_PerforceGroupMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PerforceGroupMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitserverServiceServer).PerforceGroupMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitserverService_PerforceGroupMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitserverServiceServer).PerforceGroupMembers(ctx, req.(*PerforceGroupMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitserverService_IsPerforceSuperUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsPerforceSuperUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitserverServiceServer).IsPerforceSuperUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitserverService_IsPerforceSuperUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitserverServiceServer).IsPerforceSuperUser(ctx, req.(*IsPerforceSuperUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitserverService_PerforceGetChangelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PerforceGetChangelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitserverServiceServer).PerforceGetChangelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitserverService_PerforceGetChangelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitserverServiceServer).PerforceGetChangelist(ctx, req.(*PerforceGetChangelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitserverService_MergeBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeBaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitserverServiceServer).MergeBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitserverService_MergeBase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitserverServiceServer).MergeBase(ctx, req.(*MergeBaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitserverService_Blame_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlameRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GitserverServiceServer).Blame(m, &gitserverServiceBlameServer{stream})
}

type GitserverService_BlameServer interface {
	Send(*BlameResponse) error
	grpc.ServerStream
}

type gitserverServiceBlameServer struct {
	grpc.ServerStream
}

func (x *gitserverServiceBlameServer) Send(m *BlameResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GitserverService_DefaultBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitserverServiceServer).DefaultBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitserverService_DefaultBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitserverServiceServer).DefaultBranch(ctx, req.(*DefaultBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitserverService_ReadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GitserverServiceServer).ReadFile(m, &gitserverServiceReadFileServer{stream})
}

type GitserverService_ReadFileServer interface {
	Send(*ReadFileResponse) error
	grpc.ServerStream
}

type gitserverServiceReadFileServer struct {
	grpc.ServerStream
}

func (x *gitserverServiceReadFileServer) Send(m *ReadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GitserverService_GetCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitserverServiceServer).GetCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitserverService_GetCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitserverServiceServer).GetCommit(ctx, req.(*GetCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitserverService_ResolveRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitserverServiceServer).ResolveRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitserverService_ResolveRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitserverServiceServer).ResolveRevision(ctx, req.(*ResolveRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitserverService_ListRefs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRefsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GitserverServiceServer).ListRefs(m, &gitserverServiceListRefsServer{stream})
}

type GitserverService_ListRefsServer interface {
	Send(*ListRefsResponse) error
	grpc.ServerStream
}

type gitserverServiceListRefsServer struct {
	grpc.ServerStream
}

func (x *gitserverServiceListRefsServer) Send(m *ListRefsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GitserverService_RevAtTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevAtTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitserverServiceServer).RevAtTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitserverService_RevAtTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitserverServiceServer).RevAtTime(ctx, req.(*RevAtTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitserverService_RawDiff_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RawDiffRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GitserverServiceServer).RawDiff(m, &gitserverServiceRawDiffServer{stream})
}

type GitserverService_RawDiffServer interface {
	Send(*RawDiffResponse) error
	grpc.ServerStream
}

type gitserverServiceRawDiffServer struct {
	grpc.ServerStream
}

func (x *gitserverServiceRawDiffServer) Send(m *RawDiffResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GitserverService_ContributorCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContributorCountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitserverServiceServer).ContributorCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitserverService_ContributorCounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitserverServiceServer).ContributorCounts(ctx, req.(*ContributorCountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitserverService_FirstEverCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FirstEverCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitserverServiceServer).FirstEverCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitserverService_FirstEverCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitserverServiceServer).FirstEverCommit(ctx, req.(*FirstEverCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitserverService_BehindAhead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BehindAheadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitserverServiceServer).BehindAhead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitserverService_BehindAhead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitserverServiceServer).BehindAhead(ctx, req.(*BehindAheadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitserverService_ChangedFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChangedFilesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GitserverServiceServer).ChangedFiles(m, &gitserverServiceChangedFilesServer{stream})
}

type GitserverService_ChangedFilesServer interface {
	Send(*ChangedFilesResponse) error
	grpc.ServerStream
}

type gitserverServiceChangedFilesServer struct {
	grpc.ServerStream
}

func (x *gitserverServiceChangedFilesServer) Send(m *ChangedFilesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// GitserverService_ServiceDesc is the grpc.ServiceDesc for GitserverService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GitserverService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitserver.v1.GitserverService",
	HandlerType: (*GitserverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DiskInfo",
			Handler:    _GitserverService_DiskInfo_Handler,
		},
		{
			MethodName: "GetObject",
			Handler:    _GitserverService_GetObject_Handler,
		},
		{
			MethodName: "IsRepoCloneable",
			Handler:    _GitserverService_IsRepoCloneable_Handler,
		},
		{
			MethodName: "ListGitolite",
			Handler:    _GitserverService_ListGitolite_Handler,
		},
		{
			MethodName: "RepoCloneProgress",
			Handler:    _GitserverService_RepoCloneProgress_Handler,
		},
		{
			MethodName: "IsPerforcePathCloneable",
			Handler:    _GitserverService_IsPerforcePathCloneable_Handler,
		},
		{
			MethodName: "CheckPerforceCredentials",
			Handler:    _GitserverService_CheckPerforceCredentials_Handler,
		},
		{
			MethodName: "PerforceUsers",
			Handler:    _GitserverService_PerforceUsers_Handler,
		},
		{
			MethodName: "PerforceProtectsForUser",
			Handler:    _GitserverService_PerforceProtectsForUser_Handler,
		},
		{
			MethodName: "PerforceProtectsForDepot",
			Handler:    _GitserverService_PerforceProtectsForDepot_Handler,
		},
		{
			MethodName: "PerforceGroupMembers",
			Handler:    _GitserverService_PerforceGroupMembers_Handler,
		},
		{
			MethodName: "IsPerforceSuperUser",
			Handler:    _GitserverService_IsPerforceSuperUser_Handler,
		},
		{
			MethodName: "PerforceGetChangelist",
			Handler:    _GitserverService_PerforceGetChangelist_Handler,
		},
		{
			MethodName: "MergeBase",
			Handler:    _GitserverService_MergeBase_Handler,
		},
		{
			MethodName: "DefaultBranch",
			Handler:    _GitserverService_DefaultBranch_Handler,
		},
		{
			MethodName: "GetCommit",
			Handler:    _GitserverService_GetCommit_Handler,
		},
		{
			MethodName: "ResolveRevision",
			Handler:    _GitserverService_ResolveRevision_Handler,
		},
		{
			MethodName: "RevAtTime",
			Handler:    _GitserverService_RevAtTime_Handler,
		},
		{
			MethodName: "ContributorCounts",
			Handler:    _GitserverService_ContributorCounts_Handler,
		},
		{
			MethodName: "FirstEverCommit",
			Handler:    _GitserverService_FirstEverCommit_Handler,
		},
		{
			MethodName: "BehindAhead",
			Handler:    _GitserverService_BehindAhead_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateCommitFromPatchBinary",
			Handler:       _GitserverService_CreateCommitFromPatchBinary_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Exec",
			Handler:       _GitserverService_Exec_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Search",
			Handler:       _GitserverService_Search_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Archive",
			Handler:       _GitserverService_Archive_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Blame",
			Handler:       _GitserverService_Blame_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadFile",
			Handler:       _GitserverService_ReadFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListRefs",
			Handler:       _GitserverService_ListRefs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RawDiff",
			Handler:       _GitserverService_RawDiff_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ChangedFiles",
			Handler:       _GitserverService_ChangedFiles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gitserver.proto",
}
